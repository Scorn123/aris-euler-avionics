
sensor_board_rev3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e18c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800e31c  0800e31c  0001e31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5d4  0800e5d4  0002025c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e5d4  0800e5d4  0002025c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e5d4  0800e5d4  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5d4  0800e5d4  0001e5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5d8  0800e5d8  0001e5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800e5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ceb4  2000025c  0800e838  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d110  0800e838  0002d110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000333ef  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005dca  00000000  00000000  0005367b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020c8  00000000  00000000  00059448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e10  00000000  00000000  0005b510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a285  00000000  00000000  0005d320  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000206be  00000000  00000000  000875a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e46be  00000000  00000000  000a7c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018c321  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b70  00000000  00000000  0018c39c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000025c 	.word	0x2000025c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e304 	.word	0x0800e304

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000260 	.word	0x20000260
 80001cc:	0800e304 	.word	0x0800e304

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <_icm_read_bytes>:
  }
  return 1;
}

// Read bytes from MEMS
void _icm_read_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t* pData, uint16_t size){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	460b      	mov	r3, r1
 8000aba:	72fb      	strb	r3, [r7, #11]
 8000abc:	4613      	mov	r3, r2
 8000abe:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8000ac0:	7afb      	ldrb	r3, [r7, #11]
 8000ac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	889b      	ldrh	r3, [r3, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f002 f86f 	bl	8002bb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	6898      	ldr	r0, [r3, #8]
 8000ade:	f107 010b 	add.w	r1, r7, #11
 8000ae2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f004 ff24 	bl	8005934 <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	6898      	ldr	r0, [r3, #8]
 8000af0:	893a      	ldrh	r2, [r7, #8]
 8000af2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	f005 f882 	bl	8005c00 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	889b      	ldrh	r3, [r3, #4]
 8000b04:	2201      	movs	r2, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	f002 f856 	bl	8002bb8 <HAL_GPIO_WritePin>
}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_icm_write_bytes>:

// Write bytes to MEMS
void _icm_write_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t *pData, uint16_t size){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	460b      	mov	r3, r1
 8000b22:	72fb      	strb	r3, [r7, #11]
 8000b24:	4613      	mov	r3, r2
 8000b26:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	889b      	ldrh	r3, [r3, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	4619      	mov	r1, r3
 8000b34:	f002 f840 	bl	8002bb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	6898      	ldr	r0, [r3, #8]
 8000b3c:	f107 010b 	add.w	r1, r7, #11
 8000b40:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b44:	2201      	movs	r2, #1
 8000b46:	f004 fef5 	bl	8005934 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	6898      	ldr	r0, [r3, #8]
 8000b4e:	893a      	ldrh	r2, [r7, #8]
 8000b50:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b54:	6879      	ldr	r1, [r7, #4]
 8000b56:	f004 feed 	bl	8005934 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6818      	ldr	r0, [r3, #0]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	889b      	ldrh	r3, [r3, #4]
 8000b62:	2201      	movs	r2, #1
 8000b64:	4619      	mov	r1, r3
 8000b66:	f002 f827 	bl	8002bb8 <HAL_GPIO_WritePin>
}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <icm20601_init>:


// *** Global Functions *** //

int8_t icm20601_init(struct icm20601_dev * dev) {
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b084      	sub	sp, #16
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73fb      	strb	r3, [r7, #15]
	uint8_t r [1] = {0};
 8000b7e:	2300      	movs	r3, #0
 8000b80:	733b      	strb	r3, [r7, #12]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = SENS_reset; // 0x81
 8000b82:	2381      	movs	r3, #129	; 0x81
 8000b84:	73fb      	strb	r3, [r7, #15]
	_icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp , 1);
 8000b86:	f107 020f 	add.w	r2, r7, #15
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	216b      	movs	r1, #107	; 0x6b
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ffc0 	bl	8000b14 <_icm_write_bytes>
	HAL_Delay(1);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f001 fbe9 	bl	800236c <HAL_Delay>

    // set clock to internal PLL
    tmp = SENS_internalpll; //0x01
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp, 1);
 8000b9e:	f107 020f 	add.w	r2, r7, #15
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	216b      	movs	r1, #107	; 0x6b
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ffb4 	bl	8000b14 <_icm_write_bytes>
    HAL_Delay(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f001 fbdd 	bl	800236c <HAL_Delay>

    // verify we are able to read from the chip
    _icm_read_bytes(dev, REG_WHO_AM_I, r, 1);
 8000bb2:	f107 020c 	add.w	r2, r7, #12
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	2175      	movs	r1, #117	; 0x75
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ff76 	bl	8000aac <_icm_read_bytes>
    if (r[0] != REG_WHO_AM_I_CONST) return 0;
 8000bc0:	7b3b      	ldrb	r3, [r7, #12]
 8000bc2:	2bac      	cmp	r3, #172	; 0xac
 8000bc4:	d001      	beq.n	8000bca <icm20601_init+0x58>
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e093      	b.n	8000cf2 <icm20601_init+0x180>

    // place accel and gyro on standby
    tmp = SENS_standby; // 0x3F
 8000bca:	233f      	movs	r3, #63	; 0x3f
 8000bcc:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp , 1);
 8000bce:	f107 020f 	add.w	r2, r7, #15
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	216c      	movs	r1, #108	; 0x6c
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ff9c 	bl	8000b14 <_icm_write_bytes>

    // disable fifo
    tmp = SENS_nofifo; //0x00
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8000be0:	f107 020f 	add.w	r2, r7, #15
 8000be4:	2301      	movs	r3, #1
 8000be6:	216a      	movs	r1, #106	; 0x6a
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff93 	bl	8000b14 <_icm_write_bytes>

    // disable chip I2C communications
    tmp = SENS_disablei2c;	//0x41;
 8000bee:	2341      	movs	r3, #65	; 0x41
 8000bf0:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8000bf2:	f107 020f 	add.w	r2, r7, #15
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	216a      	movs	r1, #106	; 0x6a
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff8a 	bl	8000b14 <_icm_write_bytes>

    // Accelerometer filtering
    if (ICM20601_ACCEL_DLPF_BYPASS_1046_HZ == dev->accel_dlpf) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	7b1b      	ldrb	r3, [r3, #12]
 8000c04:	2b08      	cmp	r3, #8
 8000c06:	d102      	bne.n	8000c0e <icm20601_init+0x9c>
      tmp = (0x01 << 3);
 8000c08:	2308      	movs	r3, #8
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	e002      	b.n	8000c14 <icm20601_init+0xa2>
    }
    else {
      tmp = dev->accel_dlpf;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7b1b      	ldrb	r3, [r3, #12]
 8000c12:	73fb      	strb	r3, [r7, #15]
    }
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_2, &tmp , 1);
 8000c14:	f107 020f 	add.w	r2, r7, #15
 8000c18:	2301      	movs	r3, #1
 8000c1a:	211d      	movs	r1, #29
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff79 	bl	8000b14 <_icm_write_bytes>

    // Accelerometer range
    tmp = (dev->accel_g) << 3;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7b5b      	ldrb	r3, [r3, #13]
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_1, &tmp , 1);
 8000c2c:	f107 020f 	add.w	r2, r7, #15
 8000c30:	2301      	movs	r3, #1
 8000c32:	211c      	movs	r1, #28
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff6d 	bl	8000b14 <_icm_write_bytes>
    // Gyro filtering
    //tmp = ((dev->gyro_dps) << 3) | SENS_gyrofilter; // filter: 0x02
    //_icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);


    if (ICM20601_GYRO_DLPF_BYPASS_3281_HZ == dev->gyro_dlpf) {
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7b9b      	ldrb	r3, [r3, #14]
 8000c3e:	2b08      	cmp	r3, #8
 8000c40:	d119      	bne.n	8000c76 <icm20601_init+0x104>
    	// bypass dpf and set dps
        tmp = 0x00;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8000c46:	f107 020f 	add.w	r2, r7, #15
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	211a      	movs	r1, #26
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ff60 	bl	8000b14 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x02;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7bdb      	ldrb	r3, [r3, #15]
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8000c66:	f107 020f 	add.w	r2, r7, #15
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	211b      	movs	r1, #27
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ff50 	bl	8000b14 <_icm_write_bytes>
 8000c74:	e033      	b.n	8000cde <icm20601_init+0x16c>
     }
     else if (ICM20601_GYRO_DLPF_BYPASS_8173_HZ == dev->gyro_dlpf) {
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7b9b      	ldrb	r3, [r3, #14]
 8000c7a:	2b09      	cmp	r3, #9
 8000c7c:	d119      	bne.n	8000cb2 <icm20601_init+0x140>
        // bypass dpf and set dps
        tmp = 0x00;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8000c82:	f107 020f 	add.w	r2, r7, #15
 8000c86:	2301      	movs	r3, #1
 8000c88:	211a      	movs	r1, #26
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ff42 	bl	8000b14 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x01;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7bdb      	ldrb	r3, [r3, #15]
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8000ca2:	f107 020f 	add.w	r2, r7, #15
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	211b      	movs	r1, #27
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ff32 	bl	8000b14 <_icm_write_bytes>
 8000cb0:	e015      	b.n	8000cde <icm20601_init+0x16c>
     }
     else {
        // configure dpf and set dps
        tmp = dev->gyro_dlpf;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7b9b      	ldrb	r3, [r3, #14]
 8000cb6:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8000cb8:	f107 020f 	add.w	r2, r7, #15
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	211a      	movs	r1, #26
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff27 	bl	8000b14 <_icm_write_bytes>

        tmp = dev->gyro_dps << 3;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	7bdb      	ldrb	r3, [r3, #15]
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8000cd0:	f107 020f 	add.w	r2, r7, #15
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	211b      	movs	r1, #27
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff1b 	bl	8000b14 <_icm_write_bytes>
     }


    tmp = 0x00;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp, 1);
 8000ce2:	f107 020f 	add.w	r2, r7, #15
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	216c      	movs	r1, #108	; 0x6c
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ff12 	bl	8000b14 <_icm_write_bytes>


    return 1;
 8000cf0:	2301      	movs	r3, #1
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <icm20601_read_accel_raw>:

// Read out raw acceleration data
void icm20601_read_accel_raw(struct icm20601_dev * dev, int16_t *accel){
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
	uint8_t accel_8bit [6] = { 0 };
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_ACCEL_XOUT_H, accel_8bit, 6);
 8000d0e:	f107 0208 	add.w	r2, r7, #8
 8000d12:	2306      	movs	r3, #6
 8000d14:	213b      	movs	r1, #59	; 0x3b
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff fec8 	bl	8000aac <_icm_read_bytes>

	UINT8_TO_INT16(accel[0], accel_8bit[0], accel_8bit[1]);
 8000d1c:	7a3b      	ldrb	r3, [r7, #8]
 8000d1e:	b21a      	sxth	r2, r3
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	801a      	strh	r2, [r3, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	b21a      	sxth	r2, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	801a      	strh	r2, [r3, #0]
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d38:	7a7b      	ldrb	r3, [r7, #9]
 8000d3a:	b21b      	sxth	r3, r3
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[1], accel_8bit[2], accel_8bit[3]);
 8000d44:	7aba      	ldrb	r2, [r7, #10]
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	3302      	adds	r3, #2
 8000d4a:	b212      	sxth	r2, r2
 8000d4c:	801a      	strh	r2, [r3, #0]
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	3302      	adds	r3, #2
 8000d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d56:	021a      	lsls	r2, r3, #8
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	b212      	sxth	r2, r2
 8000d5e:	801a      	strh	r2, [r3, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	3302      	adds	r3, #2
 8000d64:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000d68:	7afb      	ldrb	r3, [r7, #11]
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	3302      	adds	r3, #2
 8000d70:	430a      	orrs	r2, r1
 8000d72:	b212      	sxth	r2, r2
 8000d74:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[2], accel_8bit[4], accel_8bit[5]);
 8000d76:	7b3a      	ldrb	r2, [r7, #12]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	b212      	sxth	r2, r2
 8000d7e:	801a      	strh	r2, [r3, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	3304      	adds	r3, #4
 8000d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d88:	021a      	lsls	r2, r3, #8
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	b212      	sxth	r2, r2
 8000d90:	801a      	strh	r2, [r3, #0]
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	3304      	adds	r3, #4
 8000d96:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000d9a:	7b7b      	ldrb	r3, [r7, #13]
 8000d9c:	b21a      	sxth	r2, r3
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	3304      	adds	r3, #4
 8000da2:	430a      	orrs	r2, r1
 8000da4:	b212      	sxth	r2, r2
 8000da6:	801a      	strh	r2, [r3, #0]
}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <icm20601_read_gyro_raw>:
    accel[1]  = ((float) accel_raw[1]) / accel_sensitivity;
    accel[2]  = ((float) accel_raw[2]) / accel_sensitivity;
}

// Read out raw gyro data
void icm20601_read_gyro_raw(struct icm20601_dev * dev, int16_t *gyro){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
	uint8_t gyro_8bit [6] = { 0 };
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_GYRO_XOUT_H, gyro_8bit, 6);
 8000dc4:	f107 0208 	add.w	r2, r7, #8
 8000dc8:	2306      	movs	r3, #6
 8000dca:	2143      	movs	r1, #67	; 0x43
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fe6d 	bl	8000aac <_icm_read_bytes>

	UINT8_TO_INT16(gyro[0], gyro_8bit[0], gyro_8bit[1]);
 8000dd2:	7a3b      	ldrb	r3, [r7, #8]
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	801a      	strh	r2, [r3, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	801a      	strh	r2, [r3, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dee:	7a7b      	ldrb	r3, [r7, #9]
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[1], gyro_8bit[2], gyro_8bit[3]);
 8000dfa:	7aba      	ldrb	r2, [r7, #10]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	3302      	adds	r3, #2
 8000e00:	b212      	sxth	r2, r2
 8000e02:	801a      	strh	r2, [r3, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	3302      	adds	r3, #2
 8000e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e0c:	021a      	lsls	r2, r3, #8
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	3302      	adds	r3, #2
 8000e12:	b212      	sxth	r2, r2
 8000e14:	801a      	strh	r2, [r3, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	3302      	adds	r3, #2
 8000e1a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000e1e:	7afb      	ldrb	r3, [r7, #11]
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	3302      	adds	r3, #2
 8000e26:	430a      	orrs	r2, r1
 8000e28:	b212      	sxth	r2, r2
 8000e2a:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[2], gyro_8bit[4], gyro_8bit[5]);
 8000e2c:	7b3a      	ldrb	r2, [r7, #12]
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	3304      	adds	r3, #4
 8000e32:	b212      	sxth	r2, r2
 8000e34:	801a      	strh	r2, [r3, #0]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e3e:	021a      	lsls	r2, r3, #8
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3304      	adds	r3, #4
 8000e44:	b212      	sxth	r2, r2
 8000e46:	801a      	strh	r2, [r3, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000e50:	7b7b      	ldrb	r3, [r7, #13]
 8000e52:	b21a      	sxth	r2, r3
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	3304      	adds	r3, #4
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	b212      	sxth	r2, r2
 8000e5c:	801a      	strh	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <icm20601_read_temp_raw>:
    gyro[1]  = ((float) gyro_raw[1]) / gyro_sensitivity;
    gyro[2]  = ((float) gyro_raw[2]) / gyro_sensitivity;
}

// Read out raw temperature data
void icm20601_read_temp_raw(struct icm20601_dev * dev, int16_t *temp){
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	6039      	str	r1, [r7, #0]
	uint8_t temp_8bit [2] = { 0 };
 8000e70:	2300      	movs	r3, #0
 8000e72:	81bb      	strh	r3, [r7, #12]
	_icm_read_bytes(dev, REG_TEMP_OUT_H, temp_8bit, 2);
 8000e74:	f107 020c 	add.w	r2, r7, #12
 8000e78:	2302      	movs	r3, #2
 8000e7a:	2141      	movs	r1, #65	; 0x41
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff fe15 	bl	8000aac <_icm_read_bytes>

	UINT8_TO_INT16(*temp, temp_8bit[0], temp_8bit[1]);
 8000e82:	7b3b      	ldrb	r3, [r7, #12]
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	801a      	strh	r2, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	801a      	strh	r2, [r3, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e9e:	7b7b      	ldrb	r3, [r7, #13]
 8000ea0:	b21b      	sxth	r3, r3
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	801a      	strh	r2, [r3, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	0000      	movs	r0, r0
 8000eb4:	0000      	movs	r0, r0
	...

08000eb8 <_get_conversion_ticks>:
    dst |= (src_low); \
  } while (0);

// *** Local functions *** //

uint32_t _get_conversion_ticks(struct ms5607_dev * dev){
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	uint32_t time;
	time = (BARO_CONVERSION_TIME_OSR_BASE * (dev->osr+1) * osKernelGetTickFreq()) / 1000;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7a1b      	ldrb	r3, [r3, #8]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fb2c 	bl	8000524 <__aeabi_i2d>
 8000ecc:	a319      	add	r3, pc, #100	; (adr r3, 8000f34 <_get_conversion_ticks+0x7c>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff fb91 	bl	80005f8 <__aeabi_dmul>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460c      	mov	r4, r1
 8000eda:	4625      	mov	r5, r4
 8000edc:	461c      	mov	r4, r3
 8000ede:	f008 fc27 	bl	8009730 <osKernelGetTickFreq>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fb0d 	bl	8000504 <__aeabi_ui2d>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4620      	mov	r0, r4
 8000ef0:	4629      	mov	r1, r5
 8000ef2:	f7ff fb81 	bl	80005f8 <__aeabi_dmul>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	460c      	mov	r4, r1
 8000efa:	4618      	mov	r0, r3
 8000efc:	4621      	mov	r1, r4
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <_get_conversion_ticks+0x78>)
 8000f04:	f7ff fca2 	bl	800084c <__aeabi_ddiv>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	460c      	mov	r4, r1
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	4621      	mov	r1, r4
 8000f10:	f7ff fdac 	bl	8000a6c <__aeabi_d2uiz>
 8000f14:	4603      	mov	r3, r0
 8000f16:	60fb      	str	r3, [r7, #12]
	if (time < 1) time = 1;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <_get_conversion_ticks+0x6a>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
	return time;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f2c:	f3af 8000 	nop.w
 8000f30:	408f4000 	.word	0x408f4000
 8000f34:	33333333 	.word	0x33333333
 8000f38:	3fe33333 	.word	0x3fe33333

08000f3c <_ms_read_bytes>:

// Read bytes
void _ms_read_bytes(struct ms5607_dev * dev, uint8_t command, uint8_t *pData, uint16_t size){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	461a      	mov	r2, r3
 8000f48:	460b      	mov	r3, r1
 8000f4a:	72fb      	strb	r3, [r7, #11]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->i2c_address, &command, 1, BARO_I2C_TIMEOUT);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6858      	ldr	r0, [r3, #4]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b299      	uxth	r1, r3
 8000f5a:	f107 020b 	add.w	r2, r7, #11
 8000f5e:	230a      	movs	r3, #10
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2301      	movs	r3, #1
 8000f64:	f001 fed0 	bl	8002d08 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->i2c_address, pData, size, BARO_I2C_TIMEOUT);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6858      	ldr	r0, [r3, #4]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b299      	uxth	r1, r3
 8000f72:	893a      	ldrh	r2, [r7, #8]
 8000f74:	230a      	movs	r3, #10
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	f001 ffb8 	bl	8002ef0 <HAL_I2C_Master_Receive>
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_ms_write_command>:

// Write command
void _ms_write_command(struct ms5607_dev * dev, uint8_t command){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->i2c_address, &command, 1, BARO_I2C_TIMEOUT);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6858      	ldr	r0, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b299      	uxth	r1, r3
 8000f9e:	1cfa      	adds	r2, r7, #3
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f001 feaf 	bl	8002d08 <HAL_I2C_Master_Transmit>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_read_calibration>:

void _read_calibration(struct ms5607_dev * dev){
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; i++){
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	e038      	b.n	8001032 <_read_calibration+0x80>
		uint8_t rec[2] = {0};
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	813b      	strh	r3, [r7, #8]
		_ms_read_bytes(dev, COMMAND_PROM_READ_BASE+(2*(i+1)), rec, 2);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3351      	adds	r3, #81	; 0x51
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	b2d9      	uxtb	r1, r3
 8000fce:	f107 0208 	add.w	r2, r7, #8
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ffb1 	bl	8000f3c <_ms_read_bytes>
		UINT8_TO_UINT16(dev->coefficients[i],rec[0], rec[1]);
 8000fda:	7a3b      	ldrb	r3, [r7, #8]
 8000fdc:	b299      	uxth	r1, r3
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	460a      	mov	r2, r1
 8000fea:	805a      	strh	r2, [r3, #2]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	885b      	ldrh	r3, [r3, #2]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b299      	uxth	r1, r3
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3304      	adds	r3, #4
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	460a      	mov	r2, r1
 8001008:	805a      	strh	r2, [r3, #2]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3304      	adds	r3, #4
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	885a      	ldrh	r2, [r3, #2]
 8001016:	7a7b      	ldrb	r3, [r7, #9]
 8001018:	b29b      	uxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b299      	uxth	r1, r3
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3304      	adds	r3, #4
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	460a      	mov	r2, r1
 800102a:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < 6; i++){
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b05      	cmp	r3, #5
 8001036:	ddc3      	ble.n	8000fc0 <_read_calibration+0xe>
	}
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <ms5607_init>:

// *** Global functions *** //

void ms5607_init(struct ms5607_dev * dev){
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	uint32_t reset_time;
	reset_time = 3 * osKernelGetTickFreq() / 1000;
 8001048:	f008 fb72 	bl	8009730 <osKernelGetTickFreq>
 800104c:	4602      	mov	r2, r0
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	4a09      	ldr	r2, [pc, #36]	; (800107c <ms5607_init+0x3c>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	099b      	lsrs	r3, r3, #6
 800105c:	60fb      	str	r3, [r7, #12]
	// General Procedure:
	//  1. reset chip
	//  2. Read out calibration

	// Reset chip
	_ms_write_command(dev, COMMAND_RESET);
 800105e:	211e      	movs	r1, #30
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff91 	bl	8000f88 <_ms_write_command>
	osDelay(reset_time);
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f008 fc12 	bl	8009890 <osDelay>

	// Read calibration
	_read_calibration(dev);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ffa0 	bl	8000fb2 <_read_calibration>
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	10624dd3 	.word	0x10624dd3

08001080 <ms5607_read_raw_pres_temp>:

void ms5607_read_raw_pres_temp(struct ms5607_dev * dev, int32_t *pressure_raw, int32_t *temperature_raw){
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	uint32_t wait_time;
	uint8_t command;
	uint8_t rec[3] = {0};
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	2100      	movs	r1, #0
 8001092:	460a      	mov	r2, r1
 8001094:	801a      	strh	r2, [r3, #0]
 8001096:	460a      	mov	r2, r1
 8001098:	709a      	strb	r2, [r3, #2]

	// figure out how many ticks a conversion needs
	wait_time = _get_conversion_ticks(dev);
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f7ff ff0c 	bl	8000eb8 <_get_conversion_ticks>
 80010a0:	6178      	str	r0, [r7, #20]

	// initiate pressure conversion
	command = COMMAND_CONVERT_D1_BASE + (dev->osr *2);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	7a1b      	ldrb	r3, [r3, #8]
 80010a6:	3320      	adds	r3, #32
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	74fb      	strb	r3, [r7, #19]
	_ms_write_command(dev, command);
 80010ae:	7cfb      	ldrb	r3, [r7, #19]
 80010b0:	4619      	mov	r1, r3
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f7ff ff68 	bl	8000f88 <_ms_write_command>

	// wait till the conversion is done
	osDelay(wait_time);
 80010b8:	6978      	ldr	r0, [r7, #20]
 80010ba:	f008 fbe9 	bl	8009890 <osDelay>

	// read out raw pressure value
	_ms_read_bytes(dev, COMMAND_ADC_READ, rec, 3);
 80010be:	f107 0210 	add.w	r2, r7, #16
 80010c2:	2303      	movs	r3, #3
 80010c4:	2100      	movs	r1, #0
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f7ff ff38 	bl	8000f3c <_ms_read_bytes>
	*pressure_raw = (rec[0] << 16) | (rec[1] << 8) | rec[2];
 80010cc:	7c3b      	ldrb	r3, [r7, #16]
 80010ce:	041a      	lsls	r2, r3, #16
 80010d0:	7c7b      	ldrb	r3, [r7, #17]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	4313      	orrs	r3, r2
 80010d6:	7cba      	ldrb	r2, [r7, #18]
 80010d8:	431a      	orrs	r2, r3
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	601a      	str	r2, [r3, #0]

	command = COMMAND_CONVERT_D2_BASE + (dev->osr *2);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	7a1b      	ldrb	r3, [r3, #8]
 80010e2:	3328      	adds	r3, #40	; 0x28
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	74fb      	strb	r3, [r7, #19]
	_ms_write_command(dev, command);
 80010ea:	7cfb      	ldrb	r3, [r7, #19]
 80010ec:	4619      	mov	r1, r3
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff ff4a 	bl	8000f88 <_ms_write_command>

	// wait till the conversion is done
	osDelay(wait_time);
 80010f4:	6978      	ldr	r0, [r7, #20]
 80010f6:	f008 fbcb 	bl	8009890 <osDelay>

	// read out raw pressure value
	_ms_read_bytes(dev, COMMAND_ADC_READ, rec, 3);
 80010fa:	f107 0210 	add.w	r2, r7, #16
 80010fe:	2303      	movs	r3, #3
 8001100:	2100      	movs	r1, #0
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ff1a 	bl	8000f3c <_ms_read_bytes>
	*temperature_raw = (rec[0] << 16) | (rec[1] << 8) | rec[2];
 8001108:	7c3b      	ldrb	r3, [r7, #16]
 800110a:	041a      	lsls	r2, r3, #16
 800110c:	7c7b      	ldrb	r3, [r7, #17]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	4313      	orrs	r3, r2
 8001112:	7cba      	ldrb	r2, [r7, #18]
 8001114:	431a      	orrs	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <ms5607_read_pres_temp>:

void ms5607_read_pres_temp(struct ms5607_dev * dev, int32_t *temperature, int32_t *pressure){
 8001122:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
	int32_t pressure_raw;
	int32_t temperature_raw;

	ms5607_read_raw_pres_temp(dev, &pressure_raw, &temperature_raw);
 8001130:	f107 0210 	add.w	r2, r7, #16
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f7ff ffa0 	bl	8001080 <ms5607_read_raw_pres_temp>

	// Calculate real values with coefficients
	int64_t dT;
	int64_t OFF, SENS;

	dT = temperature_raw - ((int32_t) dev->coefficients[4] << 8);
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	8a5b      	ldrh	r3, [r3, #18]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800114e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	/* Temperature in 2000  = 20.00° C */
	*temperature = (int32_t) 2000 + (dT * dev->coefficients[5] >> 23);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8a9b      	ldrh	r3, [r3, #20]
 8001156:	b29b      	uxth	r3, r3
 8001158:	f04f 0400 	mov.w	r4, #0
 800115c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800115e:	fb04 f102 	mul.w	r1, r4, r2
 8001162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001164:	fb03 f202 	mul.w	r2, r3, r2
 8001168:	440a      	add	r2, r1
 800116a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800116c:	fba1 3403 	umull	r3, r4, r1, r3
 8001170:	4422      	add	r2, r4
 8001172:	4614      	mov	r4, r2
 8001174:	f04f 0100 	mov.w	r1, #0
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	0dd9      	lsrs	r1, r3, #23
 800117e:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 8001182:	15e2      	asrs	r2, r4, #23
 8001184:	460b      	mov	r3, r1
 8001186:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800118a:	461a      	mov	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	601a      	str	r2, [r3, #0]

	OFF = ((int64_t) dev->coefficients[1] << 17) + ((dev->coefficients[3] * dT) >> 6);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	899b      	ldrh	r3, [r3, #12]
 8001194:	b29b      	uxth	r3, r3
 8001196:	f04f 0400 	mov.w	r4, #0
 800119a:	ea4f 39d3 	mov.w	r9, r3, lsr #15
 800119e:	ea4f 4843 	mov.w	r8, r3, lsl #17
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	8a1b      	ldrh	r3, [r3, #16]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	f04f 0400 	mov.w	r4, #0
 80011ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011ae:	fb04 f102 	mul.w	r1, r4, r2
 80011b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011b4:	fb03 f202 	mul.w	r2, r3, r2
 80011b8:	1888      	adds	r0, r1, r2
 80011ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011bc:	fba2 1203 	umull	r1, r2, r2, r3
 80011c0:	1883      	adds	r3, r0, r2
 80011c2:	461a      	mov	r2, r3
 80011c4:	f04f 0b00 	mov.w	fp, #0
 80011c8:	f04f 0c00 	mov.w	ip, #0
 80011cc:	ea4f 1b91 	mov.w	fp, r1, lsr #6
 80011d0:	ea4b 6b82 	orr.w	fp, fp, r2, lsl #26
 80011d4:	ea4f 1ca2 	mov.w	ip, r2, asr #6
 80011d8:	eb1b 0308 	adds.w	r3, fp, r8
 80011dc:	eb4c 0409 	adc.w	r4, ip, r9
 80011e0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	SENS = ((int64_t) dev->coefficients[0] << 16) + ((dev->coefficients[2] * dT) >> 7);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	895b      	ldrh	r3, [r3, #10]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	f04f 0400 	mov.w	r4, #0
 80011ee:	0c1e      	lsrs	r6, r3, #16
 80011f0:	041d      	lsls	r5, r3, #16
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	89db      	ldrh	r3, [r3, #14]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f04f 0400 	mov.w	r4, #0
 80011fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011fe:	fb04 f102 	mul.w	r1, r4, r2
 8001202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001204:	fb03 f202 	mul.w	r2, r3, r2
 8001208:	1888      	adds	r0, r1, r2
 800120a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800120c:	fba2 1203 	umull	r1, r2, r2, r3
 8001210:	1883      	adds	r3, r0, r2
 8001212:	461a      	mov	r2, r3
 8001214:	f04f 0800 	mov.w	r8, #0
 8001218:	f04f 0900 	mov.w	r9, #0
 800121c:	ea4f 18d1 	mov.w	r8, r1, lsr #7
 8001220:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
 8001224:	ea4f 19e2 	mov.w	r9, r2, asr #7
 8001228:	eb18 0305 	adds.w	r3, r8, r5
 800122c:	eb49 0406 	adc.w	r4, r9, r6
 8001230:	e9c7 3406 	strd	r3, r4, [r7, #24]
	/* Pressure in 110002 = 1100.02 mbar */
	*pressure = (int32_t) ((((pressure_raw * SENS) >> 21) - OFF) >> 15);
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	fb04 f102 	mul.w	r1, r4, r2
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	fb03 f202 	mul.w	r2, r3, r2
 8001246:	1888      	adds	r0, r1, r2
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	fba2 1203 	umull	r1, r2, r2, r3
 800124e:	1883      	adds	r3, r0, r2
 8001250:	461a      	mov	r2, r3
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	f04f 0400 	mov.w	r4, #0
 800125a:	0d4b      	lsrs	r3, r1, #21
 800125c:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8001260:	1554      	asrs	r4, r2, #21
 8001262:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001266:	1a5b      	subs	r3, r3, r1
 8001268:	eb64 0402 	sbc.w	r4, r4, r2
 800126c:	461d      	mov	r5, r3
 800126e:	4626      	mov	r6, r4
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	f04f 0400 	mov.w	r4, #0
 8001278:	0beb      	lsrs	r3, r5, #15
 800127a:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800127e:	13f4      	asrs	r4, r6, #15
 8001280:	461a      	mov	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	601a      	str	r2, [r3, #0]
}
 8001286:	bf00      	nop
 8001288:	3730      	adds	r7, #48	; 0x30
 800128a:	46bd      	mov	sp, r7
 800128c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08001290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b08d      	sub	sp, #52	; 0x34
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001296:	f001 f832 	bl	80022fe <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_USB_DEVICE_Init();
 800129a:	f00b fe47 	bl	800cf2c <MX_USB_DEVICE_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129e:	f000 f893 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a2:	f000 f9ef 	bl	8001684 <MX_GPIO_Init>
  MX_DMA_Init();
 80012a6:	f000 f9cf 	bl	8001648 <MX_DMA_Init>
  MX_I2C1_Init();
 80012aa:	f000 f911 	bl	80014d0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80012ae:	f000 f94f 	bl	8001550 <MX_SPI1_Init>
  MX_SPI2_Init();
 80012b2:	f000 f98b 	bl	80015cc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012b6:	f008 f9a9 	bl	800960c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */

  /* Barometer Mutex */
  const osMutexAttr_t baro_mutex_attr = {
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <main+0xe0>)
 80012bc:	f107 0420 	add.w	r4, r7, #32
 80012c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  baro_mutex = osMutexNew(&baro_mutex_attr);
 80012c6:	f107 0320 	add.w	r3, r7, #32
 80012ca:	4618      	mov	r0, r3
 80012cc:	f008 fb4e 	bl	800996c <osMutexNew>
 80012d0:	4602      	mov	r2, r0
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <main+0xe4>)
 80012d4:	601a      	str	r2, [r3, #0]
  /* IMU Mutex */
  const osMutexAttr_t imu_mutex_attr = {
 80012d6:	4b28      	ldr	r3, [pc, #160]	; (8001378 <main+0xe8>)
 80012d8:	f107 0410 	add.w	r4, r7, #16
 80012dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  imu_mutex = osMutexNew(&imu_mutex_attr);
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	4618      	mov	r0, r3
 80012e8:	f008 fb40 	bl	800996c <osMutexNew>
 80012ec:	4602      	mov	r2, r0
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <main+0xec>)
 80012f0:	601a      	str	r2, [r3, #0]


#ifdef DEBUG
  const osMutexAttr_t print_mutex_attr = {
 80012f2:	4b23      	ldr	r3, [pc, #140]	; (8001380 <main+0xf0>)
 80012f4:	463c      	mov	r4, r7
 80012f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  osMutexPrioInherit,    					  // attr_bits
	  NULL,                                     // memory for control block
	  0U                                        // size for control block
	};

  print_mutex = osMutexNew(&print_mutex_attr);
 80012fc:	463b      	mov	r3, r7
 80012fe:	4618      	mov	r0, r3
 8001300:	f008 fb34 	bl	800996c <osMutexNew>
 8001304:	4602      	mov	r2, r0
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <main+0xf4>)
 8001308:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  preprocess_queue = osMessageQueueNew(PREPROCESS_QUEUE_SIZE, sizeof(imu_data_t), NULL);
 800130a:	2200      	movs	r2, #0
 800130c:	2110      	movs	r1, #16
 800130e:	2020      	movs	r0, #32
 8001310:	f008 fc74 	bl	8009bfc <osMessageQueueNew>
 8001314:	4602      	mov	r2, r0
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <main+0xf8>)
 8001318:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800131a:	4a1c      	ldr	r2, [pc, #112]	; (800138c <main+0xfc>)
 800131c:	2100      	movs	r1, #0
 800131e:	481c      	ldr	r0, [pc, #112]	; (8001390 <main+0x100>)
 8001320:	f008 fa10 	bl	8009744 <osThreadNew>
 8001324:	4602      	mov	r2, r0
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <main+0x104>)
 8001328:	601a      	str	r2, [r3, #0]

  /* creation of task_baro_read */
  task_baro_readHandle = osThreadNew(vTaskBaroRead, NULL, &task_baro_read_attributes);
 800132a:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <main+0x108>)
 800132c:	2100      	movs	r1, #0
 800132e:	481b      	ldr	r0, [pc, #108]	; (800139c <main+0x10c>)
 8001330:	f008 fa08 	bl	8009744 <osThreadNew>
 8001334:	4602      	mov	r2, r0
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <main+0x110>)
 8001338:	601a      	str	r2, [r3, #0]

  /* creation of task_imu_read */
  task_imu_readHandle = osThreadNew(vTaskImuRead, NULL, &task_imu_read_attributes);
 800133a:	4a1a      	ldr	r2, [pc, #104]	; (80013a4 <main+0x114>)
 800133c:	2100      	movs	r1, #0
 800133e:	481a      	ldr	r0, [pc, #104]	; (80013a8 <main+0x118>)
 8001340:	f008 fa00 	bl	8009744 <osThreadNew>
 8001344:	4602      	mov	r2, r0
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <main+0x11c>)
 8001348:	601a      	str	r2, [r3, #0]

  /* creation of task_send_to_mb */
  task_send_to_mbHandle = osThreadNew(vTaskSendToMb, NULL, &task_send_to_mb_attributes);
 800134a:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <main+0x120>)
 800134c:	2100      	movs	r1, #0
 800134e:	4819      	ldr	r0, [pc, #100]	; (80013b4 <main+0x124>)
 8001350:	f008 f9f8 	bl	8009744 <osThreadNew>
 8001354:	4602      	mov	r2, r0
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <main+0x128>)
 8001358:	601a      	str	r2, [r3, #0]

  /* creation of task_preprocess */
  task_preprocessHandle = osThreadNew(vTaskPreprocess, NULL, &task_preprocess_attributes);
 800135a:	4a18      	ldr	r2, [pc, #96]	; (80013bc <main+0x12c>)
 800135c:	2100      	movs	r1, #0
 800135e:	4818      	ldr	r0, [pc, #96]	; (80013c0 <main+0x130>)
 8001360:	f008 f9f0 	bl	8009744 <osThreadNew>
 8001364:	4602      	mov	r2, r0
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <main+0x134>)
 8001368:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800136a:	f008 f983 	bl	8009674 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800136e:	e7fe      	b.n	800136e <main+0xde>
 8001370:	0800e374 	.word	0x0800e374
 8001374:	2000c17c 	.word	0x2000c17c
 8001378:	0800e390 	.word	0x0800e390
 800137c:	20005fc0 	.word	0x20005fc0
 8001380:	0800e3ac 	.word	0x0800e3ac
 8001384:	2000c0b8 	.word	0x2000c0b8
 8001388:	20001e50 	.word	0x20001e50
 800138c:	0800e4a4 	.word	0x0800e4a4
 8001390:	08001719 	.word	0x08001719
 8001394:	20001df0 	.word	0x20001df0
 8001398:	0800e4c8 	.word	0x0800e4c8
 800139c:	08001bed 	.word	0x08001bed
 80013a0:	2000a0b0 	.word	0x2000a0b0
 80013a4:	0800e4ec 	.word	0x0800e4ec
 80013a8:	08001cad 	.word	0x08001cad
 80013ac:	2000c120 	.word	0x2000c120
 80013b0:	0800e510 	.word	0x0800e510
 80013b4:	08002109 	.word	0x08002109
 80013b8:	200060ac 	.word	0x200060ac
 80013bc:	0800e534 	.word	0x0800e534
 80013c0:	08001dc1 	.word	0x08001dc1
 80013c4:	2000a0b4 	.word	0x2000a0b4

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b0ae      	sub	sp, #184	; 0xb8
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013d2:	2244      	movs	r2, #68	; 0x44
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f00c fb75 	bl	800dac6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	2260      	movs	r2, #96	; 0x60
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00c fb67 	bl	800dac6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013f8:	2310      	movs	r3, #16
 80013fa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013fc:	2301      	movs	r3, #1
 80013fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001408:	2360      	movs	r3, #96	; 0x60
 800140a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140e:	2302      	movs	r3, #2
 8001410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001414:	2301      	movs	r3, #1
 8001416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800141a:	2301      	movs	r3, #1
 800141c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001420:	2328      	movs	r3, #40	; 0x28
 8001422:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001426:	2307      	movs	r3, #7
 8001428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001438:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800143c:	4618      	mov	r0, r3
 800143e:	f003 f87b 	bl	8004538 <HAL_RCC_OscConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001448:	f000 f982 	bl	8001750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144c:	230f      	movs	r3, #15
 800144e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001450:	2303      	movs	r3, #3
 8001452:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001460:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001464:	2104      	movs	r1, #4
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fc86 	bl	8004d78 <HAL_RCC_ClockConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001472:	f000 f96d 	bl	8001750 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8001476:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 800147a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800147c:	2300      	movs	r3, #0
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001480:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001484:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001486:	2301      	movs	r3, #1
 8001488:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800148a:	2301      	movs	r3, #1
 800148c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800148e:	2318      	movs	r3, #24
 8001490:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001492:	2307      	movs	r3, #7
 8001494:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001496:	2302      	movs	r3, #2
 8001498:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800149e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014a2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 fe86 	bl	80051b8 <HAL_RCCEx_PeriphCLKConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80014b2:	f000 f94d 	bl	8001750 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014ba:	f002 ffd7 	bl	800446c <HAL_PWREx_ControlVoltageScaling>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80014c4:	f000 f944 	bl	8001750 <Error_Handler>
  }
}
 80014c8:	bf00      	nop
 80014ca:	37b8      	adds	r7, #184	; 0xb8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MX_I2C1_Init+0x74>)
 80014d6:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <MX_I2C1_Init+0x78>)
 80014d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_I2C1_Init+0x74>)
 80014dc:	4a1b      	ldr	r2, [pc, #108]	; (800154c <MX_I2C1_Init+0x7c>)
 80014de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MX_I2C1_Init+0x74>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_I2C1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_I2C1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_I2C1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_I2C1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_I2C1_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800150a:	480e      	ldr	r0, [pc, #56]	; (8001544 <MX_I2C1_Init+0x74>)
 800150c:	f001 fb6c 	bl	8002be8 <HAL_I2C_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001516:	f000 f91b 	bl	8001750 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800151a:	2100      	movs	r1, #0
 800151c:	4809      	ldr	r0, [pc, #36]	; (8001544 <MX_I2C1_Init+0x74>)
 800151e:	f001 ffbd 	bl	800349c <HAL_I2CEx_ConfigAnalogFilter>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001528:	f000 f912 	bl	8001750 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800152c:	2100      	movs	r1, #0
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_I2C1_Init+0x74>)
 8001530:	f001 ffff 	bl	8003532 <HAL_I2CEx_ConfigDigitalFilter>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800153a:	f000 f909 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20001f70 	.word	0x20001f70
 8001548:	40005400 	.word	0x40005400
 800154c:	00702991 	.word	0x00702991

08001550 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <MX_SPI1_Init+0x74>)
 8001556:	4a1c      	ldr	r2, [pc, #112]	; (80015c8 <MX_SPI1_Init+0x78>)
 8001558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <MX_SPI1_Init+0x74>)
 800155c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <MX_SPI1_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <MX_SPI1_Init+0x74>)
 800156a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800156e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <MX_SPI1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <MX_SPI1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_SPI1_Init+0x74>)
 800157e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001582:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_SPI1_Init+0x74>)
 8001586:	2218      	movs	r2, #24
 8001588:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_SPI1_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_SPI1_Init+0x74>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_SPI1_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_SPI1_Init+0x74>)
 800159e:	2207      	movs	r2, #7
 80015a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MX_SPI1_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_SPI1_Init+0x74>)
 80015aa:	2208      	movs	r2, #8
 80015ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_SPI1_Init+0x74>)
 80015b0:	f004 f936 	bl	8005820 <HAL_SPI_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015ba:	f000 f8c9 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000c0bc 	.word	0x2000c0bc
 80015c8:	40013000 	.word	0x40013000

080015cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <MX_SPI2_Init+0x74>)
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <MX_SPI2_Init+0x78>)
 80015d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <MX_SPI2_Init+0x74>)
 80015d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <MX_SPI2_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <MX_SPI2_Init+0x74>)
 80015e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015ea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_SPI2_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_SPI2_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_SPI2_Init+0x74>)
 80015fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015fe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_SPI2_Init+0x74>)
 8001602:	2228      	movs	r2, #40	; 0x28
 8001604:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_SPI2_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_SPI2_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <MX_SPI2_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_SPI2_Init+0x74>)
 800161a:	2207      	movs	r2, #7
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <MX_SPI2_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_SPI2_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_SPI2_Init+0x74>)
 800162c:	f004 f8f8 	bl	8005820 <HAL_SPI_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001636:	f000 f88b 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20001e54 	.word	0x20001e54
 8001644:	40003800 	.word	0x40003800

08001648 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_DMA_Init+0x38>)
 8001650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <MX_DMA_Init+0x38>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6493      	str	r3, [r2, #72]	; 0x48
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_DMA_Init+0x38>)
 800165c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2105      	movs	r1, #5
 800166a:	200f      	movs	r0, #15
 800166c:	f000 ff58 	bl	8002520 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001670:	200f      	movs	r0, #15
 8001672:	f000 ff71 	bl	8002558 <HAL_NVIC_EnableIRQ>

}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000

08001684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169a:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <MX_GPIO_Init+0x90>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <MX_GPIO_Init+0x90>)
 80016a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <MX_GPIO_Init+0x90>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <MX_GPIO_Init+0x90>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	4a17      	ldr	r2, [pc, #92]	; (8001714 <MX_GPIO_Init+0x90>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <MX_GPIO_Init+0x90>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <MX_GPIO_Init+0x90>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	4a11      	ldr	r2, [pc, #68]	; (8001714 <MX_GPIO_Init+0x90>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <MX_GPIO_Init+0x90>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2110      	movs	r1, #16
 80016e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ea:	f001 fa65 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016ee:	2310      	movs	r3, #16
 80016f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	4619      	mov	r1, r3
 8001704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001708:	f001 f8dc 	bl	80028c4 <HAL_GPIO_Init>

}
 800170c:	bf00      	nop
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000

08001718 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001720:	f00b fc04 	bl	800cf2c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001724:	2001      	movs	r0, #1
 8001726:	f008 f8b3 	bl	8009890 <osDelay>
 800172a:	e7fb      	b.n	8001724 <StartDefaultTask+0xc>

0800172c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d101      	bne.n	8001742 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800173e:	f000 fdf7 	bl	8002330 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40012c00 	.word	0x40012c00

08001750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_MspInit+0x4c>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176a:	4a10      	ldr	r2, [pc, #64]	; (80017ac <HAL_MspInit+0x4c>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6613      	str	r3, [r2, #96]	; 0x60
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_MspInit+0x4c>)
 8001774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_MspInit+0x4c>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_MspInit+0x4c>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	6593      	str	r3, [r2, #88]	; 0x58
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_MspInit+0x4c>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	210f      	movs	r1, #15
 800179a:	f06f 0001 	mvn.w	r0, #1
 800179e:	f000 febf 	bl	8002520 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a18      	ldr	r2, [pc, #96]	; (8001830 <HAL_I2C_MspInit+0x80>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d129      	bne.n	8001826 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_I2C_MspInit+0x84>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a17      	ldr	r2, [pc, #92]	; (8001834 <HAL_I2C_MspInit+0x84>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_I2C_MspInit+0x84>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f0:	2312      	movs	r3, #18
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017fc:	2304      	movs	r3, #4
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180a:	f001 f85b 	bl	80028c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_I2C_MspInit+0x84>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	4a08      	ldr	r2, [pc, #32]	; (8001834 <HAL_I2C_MspInit+0x84>)
 8001814:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001818:	6593      	str	r3, [r2, #88]	; 0x58
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_I2C_MspInit+0x84>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001826:	bf00      	nop
 8001828:	3728      	adds	r7, #40	; 0x28
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40005400 	.word	0x40005400
 8001834:	40021000 	.word	0x40021000

08001838 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08c      	sub	sp, #48	; 0x30
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a48      	ldr	r2, [pc, #288]	; (8001978 <HAL_SPI_MspInit+0x140>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d129      	bne.n	80018ae <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800185a:	4b48      	ldr	r3, [pc, #288]	; (800197c <HAL_SPI_MspInit+0x144>)
 800185c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185e:	4a47      	ldr	r2, [pc, #284]	; (800197c <HAL_SPI_MspInit+0x144>)
 8001860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001864:	6613      	str	r3, [r2, #96]	; 0x60
 8001866:	4b45      	ldr	r3, [pc, #276]	; (800197c <HAL_SPI_MspInit+0x144>)
 8001868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4b42      	ldr	r3, [pc, #264]	; (800197c <HAL_SPI_MspInit+0x144>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	4a41      	ldr	r2, [pc, #260]	; (800197c <HAL_SPI_MspInit+0x144>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187e:	4b3f      	ldr	r3, [pc, #252]	; (800197c <HAL_SPI_MspInit+0x144>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800188a:	23c2      	movs	r3, #194	; 0xc2
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800189a:	2305      	movs	r3, #5
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a8:	f001 f80c 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018ac:	e05f      	b.n	800196e <HAL_SPI_MspInit+0x136>
  else if(hspi->Instance==SPI2)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a33      	ldr	r2, [pc, #204]	; (8001980 <HAL_SPI_MspInit+0x148>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d15a      	bne.n	800196e <HAL_SPI_MspInit+0x136>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018b8:	4b30      	ldr	r3, [pc, #192]	; (800197c <HAL_SPI_MspInit+0x144>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018bc:	4a2f      	ldr	r2, [pc, #188]	; (800197c <HAL_SPI_MspInit+0x144>)
 80018be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c2:	6593      	str	r3, [r2, #88]	; 0x58
 80018c4:	4b2d      	ldr	r3, [pc, #180]	; (800197c <HAL_SPI_MspInit+0x144>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d0:	4b2a      	ldr	r3, [pc, #168]	; (800197c <HAL_SPI_MspInit+0x144>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	4a29      	ldr	r2, [pc, #164]	; (800197c <HAL_SPI_MspInit+0x144>)
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018dc:	4b27      	ldr	r3, [pc, #156]	; (800197c <HAL_SPI_MspInit+0x144>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 80018e8:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018fa:	2305      	movs	r3, #5
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4619      	mov	r1, r3
 8001904:	481f      	ldr	r0, [pc, #124]	; (8001984 <HAL_SPI_MspInit+0x14c>)
 8001906:	f000 ffdd 	bl	80028c4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800190a:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <HAL_SPI_MspInit+0x150>)
 800190c:	4a1f      	ldr	r2, [pc, #124]	; (800198c <HAL_SPI_MspInit+0x154>)
 800190e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_SPI_MspInit+0x150>)
 8001912:	2201      	movs	r2, #1
 8001914:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001916:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <HAL_SPI_MspInit+0x150>)
 8001918:	2210      	movs	r2, #16
 800191a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_SPI_MspInit+0x150>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_SPI_MspInit+0x150>)
 8001924:	2280      	movs	r2, #128	; 0x80
 8001926:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_SPI_MspInit+0x150>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <HAL_SPI_MspInit+0x150>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <HAL_SPI_MspInit+0x150>)
 8001936:	2220      	movs	r2, #32
 8001938:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <HAL_SPI_MspInit+0x150>)
 800193c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001940:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001942:	4811      	ldr	r0, [pc, #68]	; (8001988 <HAL_SPI_MspInit+0x150>)
 8001944:	f000 fe16 	bl	8002574 <HAL_DMA_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_SPI_MspInit+0x11a>
      Error_Handler();
 800194e:	f7ff feff 	bl	8001750 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a0c      	ldr	r2, [pc, #48]	; (8001988 <HAL_SPI_MspInit+0x150>)
 8001956:	655a      	str	r2, [r3, #84]	; 0x54
 8001958:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <HAL_SPI_MspInit+0x150>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2105      	movs	r1, #5
 8001962:	2024      	movs	r0, #36	; 0x24
 8001964:	f000 fddc 	bl	8002520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001968:	2024      	movs	r0, #36	; 0x24
 800196a:	f000 fdf5 	bl	8002558 <HAL_NVIC_EnableIRQ>
}
 800196e:	bf00      	nop
 8001970:	3730      	adds	r7, #48	; 0x30
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40013000 	.word	0x40013000
 800197c:	40021000 	.word	0x40021000
 8001980:	40003800 	.word	0x40003800
 8001984:	48000400 	.word	0x48000400
 8001988:	2000c124 	.word	0x2000c124
 800198c:	40020058 	.word	0x40020058

08001990 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	; 0x30
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80019a0:	2200      	movs	r2, #0
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	2019      	movs	r0, #25
 80019a6:	f000 fdbb 	bl	8002520 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80019aa:	2019      	movs	r0, #25
 80019ac:	f000 fdd4 	bl	8002558 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <HAL_InitTick+0x9c>)
 80019b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_InitTick+0x9c>)
 80019b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019ba:	6613      	str	r3, [r2, #96]	; 0x60
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_InitTick+0x9c>)
 80019be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019c8:	f107 0210 	add.w	r2, r7, #16
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 fb5e 	bl	8005094 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019d8:	f003 fb46 	bl	8005068 <HAL_RCC_GetPCLK2Freq>
 80019dc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80019de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e0:	4a13      	ldr	r2, [pc, #76]	; (8001a30 <HAL_InitTick+0xa0>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	0c9b      	lsrs	r3, r3, #18
 80019e8:	3b01      	subs	r3, #1
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_InitTick+0xa4>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <HAL_InitTick+0xa8>)
 80019f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <HAL_InitTick+0xa4>)
 80019f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80019fa:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <HAL_InitTick+0xa4>)
 80019fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_InitTick+0xa4>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_InitTick+0xa4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001a0c:	4809      	ldr	r0, [pc, #36]	; (8001a34 <HAL_InitTick+0xa4>)
 8001a0e:	f004 fec7 	bl	80067a0 <HAL_TIM_Base_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d104      	bne.n	8001a22 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001a18:	4806      	ldr	r0, [pc, #24]	; (8001a34 <HAL_InitTick+0xa4>)
 8001a1a:	f004 fef7 	bl	800680c <HAL_TIM_Base_Start_IT>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	e000      	b.n	8001a24 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3730      	adds	r7, #48	; 0x30
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	431bde83 	.word	0x431bde83
 8001a34:	2000c180 	.word	0x2000c180
 8001a38:	40012c00 	.word	0x40012c00

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <HardFault_Handler+0x4>

08001a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <MemManage_Handler+0x4>

08001a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <BusFault_Handler+0x4>

08001a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <UsageFault_Handler+0x4>

08001a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <DMA1_Channel5_IRQHandler+0x10>)
 8001a76:	f000 fe76 	bl	8002766 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2000c124 	.word	0x2000c124

08001a84 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a8a:	f004 fee9 	bl	8006860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000c180 	.word	0x2000c180

08001a98 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <SPI2_IRQHandler+0x10>)
 8001a9e:	f004 fbeb 	bl	8006278 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20001e54 	.word	0x20001e54

08001aac <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <USB_IRQHandler+0x10>)
 8001ab2:	f001 fe94 	bl	80037de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000ce98 	.word	0x2000ce98

08001ac0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <_sbrk+0x50>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <_sbrk+0x16>
		heap_end = &end;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <_sbrk+0x50>)
 8001ad2:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <_sbrk+0x54>)
 8001ad4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <_sbrk+0x50>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <_sbrk+0x50>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	466a      	mov	r2, sp
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d907      	bls.n	8001afa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001aea:	f00b ffb7 	bl	800da5c <__errno>
 8001aee:	4602      	mov	r2, r0
 8001af0:	230c      	movs	r3, #12
 8001af2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
 8001af8:	e006      	b.n	8001b08 <_sbrk+0x48>
	}

	heap_end += incr;
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <_sbrk+0x50>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	4a03      	ldr	r2, [pc, #12]	; (8001b10 <_sbrk+0x50>)
 8001b04:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000278 	.word	0x20000278
 8001b14:	2000d110 	.word	0x2000d110

08001b18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <SystemInit+0x64>)
 8001b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b22:	4a16      	ldr	r2, [pc, #88]	; (8001b7c <SystemInit+0x64>)
 8001b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <SystemInit+0x68>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <SystemInit+0x68>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <SystemInit+0x68>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <SystemInit+0x68>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <SystemInit+0x68>)
 8001b44:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b48:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <SystemInit+0x68>)
 8001b50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b54:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <SystemInit+0x68>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <SystemInit+0x68>)
 8001b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <SystemInit+0x68>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <SystemInit+0x64>)
 8001b6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b6e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00
 8001b80:	40021000 	.word	0x40021000

08001b84 <UsbPrint>:
#include <stdio.h>
#include <stdarg.h>

/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8001b84:	b40f      	push	{r0, r1, r2, r3}
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <UsbPrint+0x60>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f007 ff82 	bl	8009aa0 <osMutexAcquire>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d118      	bne.n	8001bd4 <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	21c8      	movs	r1, #200	; 0xc8
 8001bae:	480e      	ldr	r0, [pc, #56]	; (8001be8 <UsbPrint+0x64>)
 8001bb0:	f00b ffbe 	bl	800db30 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <UsbPrint+0x64>)
 8001bb6:	f7fe fb0b 	bl	80001d0 <strlen>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4809      	ldr	r0, [pc, #36]	; (8001be8 <UsbPrint+0x64>)
 8001bc2:	f00b fa8f 	bl	800d0e4 <CDC_Transmit_FS>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <UsbPrint+0x60>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f007 ffc4 	bl	8009b5c <osMutexRelease>
	}
#endif
	return ret;
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001be0:	b004      	add	sp, #16
 8001be2:	4770      	bx	lr
 8001be4:	2000c0b8 	.word	0x2000c0b8
 8001be8:	20005fe4 	.word	0x20005fe4

08001bec <vTaskBaroRead>:
/**
 * @brief Function implementing the task_baro_read thread.
 * @param argument: Not used
 * @retval None
 */
void vTaskBaroRead(void *argument) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	uint32_t tick_count, tick_update;
	/* actual measurements from sensor */
	int32_t temperature;
	int32_t pressure;

	vInitBaro();
 8001bf4:	f000 f840 	bl	8001c78 <vInitBaro>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001bf8:	f007 fd72 	bl	80096e0 <osKernelGetTickCount>
 8001bfc:	6178      	str	r0, [r7, #20]
	tick_update = osKernelGetTickFreq() / BARO_SAMPLING_FREQ;
 8001bfe:	f007 fd97 	bl	8009730 <osKernelGetTickFreq>
 8001c02:	4602      	mov	r2, r0
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <vTaskBaroRead+0x7c>)
 8001c06:	fba3 2302 	umull	r2, r3, r3, r2
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	613b      	str	r3, [r7, #16]
	while (1) {
		tick_count += tick_update;
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4413      	add	r3, r2
 8001c14:	617b      	str	r3, [r7, #20]
		vReadBaro(&temperature, &pressure);
 8001c16:	f107 0208 	add.w	r2, r7, #8
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f833 	bl	8001c8c <vReadBaro>

		UsbPrint("P: %ld; T: %ld; t: %ld\n", pressure,
 8001c26:	68b9      	ldr	r1, [r7, #8]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	480f      	ldr	r0, [pc, #60]	; (8001c6c <vTaskBaroRead+0x80>)
 8001c2e:	f7ff ffa9 	bl	8001b84 <UsbPrint>
				temperature, tick_count);

		//TODO HIE AUE STUFF WO MUES GMACHT WERDE MIT DENE DATE

		/* If the Mutex is acquired we write the data into the right variable */
		if (osMutexAcquire(baro_mutex, BARO_MUTEX_TIMEOUT) == osOK) {
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <vTaskBaroRead+0x84>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f007 ff31 	bl	8009aa0 <osMutexAcquire>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10d      	bne.n	8001c60 <vTaskBaroRead+0x74>
			baro_data_to_mb.temperature = temperature;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <vTaskBaroRead+0x88>)
 8001c48:	6053      	str	r3, [r2, #4]
			baro_data_to_mb.pressure = pressure;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <vTaskBaroRead+0x88>)
 8001c4e:	6013      	str	r3, [r2, #0]
			baro_data_to_mb.ts = tick_count;
 8001c50:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <vTaskBaroRead+0x88>)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	6093      	str	r3, [r2, #8]
			osMutexRelease(baro_mutex);
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <vTaskBaroRead+0x84>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f007 ff7e 	bl	8009b5c <osMutexRelease>
		}

		osDelayUntil(tick_count);
 8001c60:	6978      	ldr	r0, [r7, #20]
 8001c62:	f007 fe43 	bl	80098ec <osDelayUntil>
		tick_count += tick_update;
 8001c66:	e7d2      	b.n	8001c0e <vTaskBaroRead+0x22>
 8001c68:	51eb851f 	.word	0x51eb851f
 8001c6c:	0800e3bc 	.word	0x0800e3bc
 8001c70:	2000c17c 	.word	0x2000c17c
 8001c74:	20001de4 	.word	0x20001de4

08001c78 <vInitBaro>:
	}
}

void vInitBaro() {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	ms5607_init(&MS);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <vInitBaro+0x10>)
 8001c7e:	f7ff f9df 	bl	8001040 <ms5607_init>
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000044 	.word	0x20000044

08001c8c <vReadBaro>:

void vReadBaro(int32_t *temperature, int32_t *pressure) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
	ms5607_read_pres_temp(&MS, temperature, pressure);
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <vReadBaro+0x1c>)
 8001c9c:	f7ff fa41 	bl	8001122 <ms5607_read_pres_temp>
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000044 	.word	0x20000044

08001cac <vTaskImuRead>:
/**
 * @brief Function implementing the task_baro_read thread.
 * @param argument: Not used
 * @retval None
 */
void vTaskImuRead(void *argument) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08e      	sub	sp, #56	; 0x38
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	uint32_t tick_count, tick_update;

	/* initialize data variables */
	int16_t gyroscope_data[3] = { 0 }; /* 0 = x, 1 = y, 2 = z */
 8001cb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	809a      	strh	r2, [r3, #4]
	int16_t acceleration[3] = { 0 }; /* 0 = x, 1 = y, 2 = z */
 8001cbe:	f107 0320 	add.w	r3, r7, #32
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	809a      	strh	r2, [r3, #4]
	int16_t temperature;

	/* initialize queue message */
	imu_data_t queue_data = { 0 };
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]


	vInitImu20601();
 8001cd6:	f000 f83f 	bl	8001d58 <vInitImu20601>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001cda:	f007 fd01 	bl	80096e0 <osKernelGetTickCount>
 8001cde:	6378      	str	r0, [r7, #52]	; 0x34
	tick_update = osKernelGetTickFreq() / IMU20601_SAMPLING_FREQ;
 8001ce0:	f007 fd26 	bl	8009730 <osKernelGetTickFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <vTaskImuRead+0xa4>)
 8001ce8:	fba3 2302 	umull	r2, r3, r3, r2
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
	for (;;) {
		tick_count += tick_update;
 8001cf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf4:	4413      	add	r3, r2
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
		vReadImu20601(gyroscope_data, acceleration, &temperature);
 8001cf8:	f107 021e 	add.w	r2, r7, #30
 8001cfc:	f107 0120 	add.w	r1, r7, #32
 8001d00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f841 	bl	8001d8c <vReadImu20601>
//				gyroscope_data[0], gyroscope_data[1], gyroscope_data[2],
//				acceleration[0], acceleration[1], acceleration[2], temperature);

		//TODO HIE AUE STUFF WO MUES GMACHT WERDE MIT DENE DATE

		queue_data.gyro_x = gyroscope_data[0];
 8001d0a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001d0e:	81bb      	strh	r3, [r7, #12]
		queue_data.gyro_y = gyroscope_data[1];
 8001d10:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d14:	81fb      	strh	r3, [r7, #14]
		queue_data.gyro_z = gyroscope_data[2];
 8001d16:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001d1a:	823b      	strh	r3, [r7, #16]
		queue_data.acc_x = acceleration[0];
 8001d1c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001d20:	827b      	strh	r3, [r7, #18]
		queue_data.acc_y = acceleration[1];
 8001d22:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001d26:	82bb      	strh	r3, [r7, #20]
		queue_data.acc_z = acceleration[2];
 8001d28:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001d2c:	82fb      	strh	r3, [r7, #22]
		queue_data.ts = osKernelGetTickCount();
 8001d2e:	f007 fcd7 	bl	80096e0 <osKernelGetTickCount>
 8001d32:	4603      	mov	r3, r0
 8001d34:	61bb      	str	r3, [r7, #24]

		/* Send Data to Queue */
		osMessageQueuePut(preprocess_queue, &queue_data, 0U, 0U);
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <vTaskImuRead+0xa8>)
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	f107 010c 	add.w	r1, r7, #12
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2200      	movs	r2, #0
 8001d42:	f007 ffe1 	bl	8009d08 <osMessageQueuePut>

		osDelayUntil(tick_count);
 8001d46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d48:	f007 fdd0 	bl	80098ec <osDelayUntil>
		tick_count += tick_update;
 8001d4c:	e7d0      	b.n	8001cf0 <vTaskImuRead+0x44>
 8001d4e:	bf00      	nop
 8001d50:	51eb851f 	.word	0x51eb851f
 8001d54:	20001e50 	.word	0x20001e50

08001d58 <vInitImu20601>:
	}
}

void vInitImu20601() {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
	osDelayUntil(1000);
 8001d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d62:	f007 fdc3 	bl	80098ec <osDelayUntil>
	uint8_t r = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	71fb      	strb	r3, [r7, #7]
	do {
		r = icm20601_init(&ICM);
 8001d6a:	4807      	ldr	r0, [pc, #28]	; (8001d88 <vInitImu20601+0x30>)
 8001d6c:	f7fe ff01 	bl	8000b72 <icm20601_init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(10);
 8001d74:	200a      	movs	r0, #10
 8001d76:	f000 faf9 	bl	800236c <HAL_Delay>
	} while(!r);
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f4      	beq.n	8001d6a <vInitImu20601+0x12>

}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2000005c 	.word	0x2000005c

08001d8c <vReadImu20601>:

void vReadImu20601(int16_t gyroscope_data[], int16_t acceleration[], int16_t *temperature) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
	icm20601_read_accel_raw(&ICM, acceleration);
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	4807      	ldr	r0, [pc, #28]	; (8001db8 <vReadImu20601+0x2c>)
 8001d9c:	f7fe ffad 	bl	8000cfa <icm20601_read_accel_raw>
	icm20601_read_gyro_raw(&ICM, gyroscope_data);
 8001da0:	68f9      	ldr	r1, [r7, #12]
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <vReadImu20601+0x2c>)
 8001da4:	f7ff f804 	bl	8000db0 <icm20601_read_gyro_raw>
	icm20601_read_temp_raw(&ICM, temperature);
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4803      	ldr	r0, [pc, #12]	; (8001db8 <vReadImu20601+0x2c>)
 8001dac:	f7ff f85b 	bl	8000e66 <icm20601_read_temp_raw>
}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	2000005c 	.word	0x2000005c
 8001dbc:	00000000 	.word	0x00000000

08001dc0 <vTaskPreprocess>:
 *      Author: Jonas
 */

#include "tasks/task_preprocess.h"

void vTaskPreprocess(void *argument) {
 8001dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc2:	b08f      	sub	sp, #60	; 0x3c
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	/* registers for the Filter */
	int32_t registers[4] = { 0 };
 8001dc8:	f107 0318 	add.w	r3, r7, #24
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]

	int32_t filtered_acc_z;
	int32_t raw_acc_z;

	/* Queue data and Status Initialization */
	imu_data_t queue_data = { 0 };
 8001dd6:	f107 0308 	add.w	r3, r7, #8
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]

	/* For periodic update */
	uint32_t tick_count, tick_update;
	tick_count = osKernelGetTickCount();
 8001de4:	f007 fc7c 	bl	80096e0 <osKernelGetTickCount>
 8001de8:	6378      	str	r0, [r7, #52]	; 0x34
	tick_update = osKernelGetTickFreq() / SAMPLING_RATE_PREP;
 8001dea:	f007 fca1 	bl	8009730 <osKernelGetTickFreq>
 8001dee:	4602      	mov	r2, r0
 8001df0:	4bc1      	ldr	r3, [pc, #772]	; (80020f8 <vTaskPreprocess+0x338>)
 8001df2:	fba3 2302 	umull	r2, r3, r3, r2
 8001df6:	08db      	lsrs	r3, r3, #3
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Infinite loop */
	for (;;) {
		tick_count += tick_update;
 8001dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfe:	4413      	add	r3, r2
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
		if (osMessageQueueGet(preprocess_queue, &queue_data, NULL,
 8001e02:	4bbe      	ldr	r3, [pc, #760]	; (80020fc <vTaskPreprocess+0x33c>)
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	f107 0108 	add.w	r1, r7, #8
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f007 ffee 	bl	8009df0 <osMessageQueueGet>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1ef      	bne.n	8001dfa <vTaskPreprocess+0x3a>
		osWaitForever) == osOK) {
			raw_acc_z = queue_data.acc_z;
 8001e1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			filtered_acc_z = A0
					* (raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001e20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e22:	f7fe fb7f 	bl	8000524 <__aeabi_i2d>
 8001e26:	4605      	mov	r5, r0
 8001e28:	460e      	mov	r6, r1
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb79 	bl	8000524 <__aeabi_i2d>
 8001e32:	a4a3      	add	r4, pc, #652	; (adr r4, 80020c0 <vTaskPreprocess+0x300>)
 8001e34:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4623      	mov	r3, r4
 8001e3c:	f7fe fbdc 	bl	80005f8 <__aeabi_dmul>
 8001e40:	4603      	mov	r3, r0
 8001e42:	460c      	mov	r4, r1
 8001e44:	461a      	mov	r2, r3
 8001e46:	4623      	mov	r3, r4
 8001e48:	4628      	mov	r0, r5
 8001e4a:	4631      	mov	r1, r6
 8001e4c:	f7fe fa1e 	bl	800028c <__adddf3>
 8001e50:	4603      	mov	r3, r0
 8001e52:	460c      	mov	r4, r1
 8001e54:	461d      	mov	r5, r3
 8001e56:	4626      	mov	r6, r4
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fb62 	bl	8000524 <__aeabi_i2d>
 8001e60:	a499      	add	r4, pc, #612	; (adr r4, 80020c8 <vTaskPreprocess+0x308>)
 8001e62:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e66:	461a      	mov	r2, r3
 8001e68:	4623      	mov	r3, r4
 8001e6a:	f7fe fbc5 	bl	80005f8 <__aeabi_dmul>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	460c      	mov	r4, r1
 8001e72:	461a      	mov	r2, r3
 8001e74:	4623      	mov	r3, r4
 8001e76:	4628      	mov	r0, r5
 8001e78:	4631      	mov	r1, r6
 8001e7a:	f7fe fa07 	bl	800028c <__adddf3>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	460c      	mov	r4, r1
 8001e82:	461d      	mov	r5, r3
 8001e84:	4626      	mov	r6, r4
							+ B3 * registers[2] + B4 * registers[3]) +
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb4b 	bl	8000524 <__aeabi_i2d>
 8001e8e:	a490      	add	r4, pc, #576	; (adr r4, 80020d0 <vTaskPreprocess+0x310>)
 8001e90:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4623      	mov	r3, r4
 8001e98:	f7fe fbae 	bl	80005f8 <__aeabi_dmul>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4623      	mov	r3, r4
 8001ea4:	4628      	mov	r0, r5
 8001ea6:	4631      	mov	r1, r6
 8001ea8:	f7fe f9f0 	bl	800028c <__adddf3>
 8001eac:	4603      	mov	r3, r0
 8001eae:	460c      	mov	r4, r1
 8001eb0:	461d      	mov	r5, r3
 8001eb2:	4626      	mov	r6, r4
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fb34 	bl	8000524 <__aeabi_i2d>
 8001ebc:	a486      	add	r4, pc, #536	; (adr r4, 80020d8 <vTaskPreprocess+0x318>)
 8001ebe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4623      	mov	r3, r4
 8001ec6:	f7fe fb97 	bl	80005f8 <__aeabi_dmul>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	460c      	mov	r4, r1
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4623      	mov	r3, r4
 8001ed2:	4628      	mov	r0, r5
 8001ed4:	4631      	mov	r1, r6
 8001ed6:	f7fe f9d9 	bl	800028c <__adddf3>
 8001eda:	4603      	mov	r3, r0
 8001edc:	460c      	mov	r4, r1
 8001ede:	4618      	mov	r0, r3
 8001ee0:	4621      	mov	r1, r4
					* (raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001ee2:	a47f      	add	r4, pc, #508	; (adr r4, 80020e0 <vTaskPreprocess+0x320>)
 8001ee4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4623      	mov	r3, r4
 8001eec:	f7fe fb84 	bl	80005f8 <__aeabi_dmul>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	460c      	mov	r4, r1
 8001ef4:	461d      	mov	r5, r3
 8001ef6:	4626      	mov	r6, r4
			A1 * registers[0] + A2 * registers[1] + A3 * registers[2]
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fb12 	bl	8000524 <__aeabi_i2d>
 8001f00:	a479      	add	r4, pc, #484	; (adr r4, 80020e8 <vTaskPreprocess+0x328>)
 8001f02:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001f06:	461a      	mov	r2, r3
 8001f08:	4623      	mov	r3, r4
 8001f0a:	f7fe fb75 	bl	80005f8 <__aeabi_dmul>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	460c      	mov	r4, r1
							+ B3 * registers[2] + B4 * registers[3]) +
 8001f12:	461a      	mov	r2, r3
 8001f14:	4623      	mov	r3, r4
 8001f16:	4628      	mov	r0, r5
 8001f18:	4631      	mov	r1, r6
 8001f1a:	f7fe f9b7 	bl	800028c <__adddf3>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	460c      	mov	r4, r1
 8001f22:	461d      	mov	r5, r3
 8001f24:	4626      	mov	r6, r4
			A1 * registers[0] + A2 * registers[1] + A3 * registers[2]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fafb 	bl	8000524 <__aeabi_i2d>
 8001f2e:	a470      	add	r4, pc, #448	; (adr r4, 80020f0 <vTaskPreprocess+0x330>)
 8001f30:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4623      	mov	r3, r4
 8001f38:	f7fe fb5e 	bl	80005f8 <__aeabi_dmul>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	460c      	mov	r4, r1
 8001f40:	461a      	mov	r2, r3
 8001f42:	4623      	mov	r3, r4
 8001f44:	4628      	mov	r0, r5
 8001f46:	4631      	mov	r1, r6
 8001f48:	f7fe f9a0 	bl	800028c <__adddf3>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	460c      	mov	r4, r1
 8001f50:	461d      	mov	r5, r3
 8001f52:	4626      	mov	r6, r4
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fae4 	bl	8000524 <__aeabi_i2d>
 8001f5c:	a462      	add	r4, pc, #392	; (adr r4, 80020e8 <vTaskPreprocess+0x328>)
 8001f5e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001f62:	461a      	mov	r2, r3
 8001f64:	4623      	mov	r3, r4
 8001f66:	f7fe fb47 	bl	80005f8 <__aeabi_dmul>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	460c      	mov	r4, r1
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4623      	mov	r3, r4
 8001f72:	4628      	mov	r0, r5
 8001f74:	4631      	mov	r1, r6
 8001f76:	f7fe f989 	bl	800028c <__adddf3>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	460c      	mov	r4, r1
 8001f7e:	461d      	mov	r5, r3
 8001f80:	4626      	mov	r6, r4
					+ A4 * registers[3];
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe facd 	bl	8000524 <__aeabi_i2d>
 8001f8a:	a455      	add	r4, pc, #340	; (adr r4, 80020e0 <vTaskPreprocess+0x320>)
 8001f8c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4623      	mov	r3, r4
 8001f94:	f7fe fb30 	bl	80005f8 <__aeabi_dmul>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	460c      	mov	r4, r1
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4623      	mov	r3, r4
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	4631      	mov	r1, r6
 8001fa4:	f7fe f972 	bl	800028c <__adddf3>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	460c      	mov	r4, r1
			filtered_acc_z = A0
 8001fac:	4618      	mov	r0, r3
 8001fae:	4621      	mov	r1, r4
 8001fb0:	f7fe fd34 	bl	8000a1c <__aeabi_d2iz>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
			registers[3] = registers[2];
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
			registers[2] = registers[1];
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	623b      	str	r3, [r7, #32]
			registers[1] = registers[0];
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	61fb      	str	r3, [r7, #28]
			registers[0] = raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001fc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fc6:	f7fe faad 	bl	8000524 <__aeabi_i2d>
 8001fca:	4605      	mov	r5, r0
 8001fcc:	460e      	mov	r6, r1
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe faa7 	bl	8000524 <__aeabi_i2d>
 8001fd6:	a43a      	add	r4, pc, #232	; (adr r4, 80020c0 <vTaskPreprocess+0x300>)
 8001fd8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4623      	mov	r3, r4
 8001fe0:	f7fe fb0a 	bl	80005f8 <__aeabi_dmul>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	460c      	mov	r4, r1
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4623      	mov	r3, r4
 8001fec:	4628      	mov	r0, r5
 8001fee:	4631      	mov	r1, r6
 8001ff0:	f7fe f94c 	bl	800028c <__adddf3>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	460c      	mov	r4, r1
 8001ff8:	461d      	mov	r5, r3
 8001ffa:	4626      	mov	r6, r4
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fa90 	bl	8000524 <__aeabi_i2d>
 8002004:	a430      	add	r4, pc, #192	; (adr r4, 80020c8 <vTaskPreprocess+0x308>)
 8002006:	e9d4 3400 	ldrd	r3, r4, [r4]
 800200a:	461a      	mov	r2, r3
 800200c:	4623      	mov	r3, r4
 800200e:	f7fe faf3 	bl	80005f8 <__aeabi_dmul>
 8002012:	4603      	mov	r3, r0
 8002014:	460c      	mov	r4, r1
 8002016:	461a      	mov	r2, r3
 8002018:	4623      	mov	r3, r4
 800201a:	4628      	mov	r0, r5
 800201c:	4631      	mov	r1, r6
 800201e:	f7fe f935 	bl	800028c <__adddf3>
 8002022:	4603      	mov	r3, r0
 8002024:	460c      	mov	r4, r1
 8002026:	461d      	mov	r5, r3
 8002028:	4626      	mov	r6, r4
					+ B3 * registers[2] + B4 * registers[3];
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fa79 	bl	8000524 <__aeabi_i2d>
 8002032:	a427      	add	r4, pc, #156	; (adr r4, 80020d0 <vTaskPreprocess+0x310>)
 8002034:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002038:	461a      	mov	r2, r3
 800203a:	4623      	mov	r3, r4
 800203c:	f7fe fadc 	bl	80005f8 <__aeabi_dmul>
 8002040:	4603      	mov	r3, r0
 8002042:	460c      	mov	r4, r1
 8002044:	461a      	mov	r2, r3
 8002046:	4623      	mov	r3, r4
 8002048:	4628      	mov	r0, r5
 800204a:	4631      	mov	r1, r6
 800204c:	f7fe f91e 	bl	800028c <__adddf3>
 8002050:	4603      	mov	r3, r0
 8002052:	460c      	mov	r4, r1
 8002054:	461d      	mov	r5, r3
 8002056:	4626      	mov	r6, r4
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa62 	bl	8000524 <__aeabi_i2d>
 8002060:	a41d      	add	r4, pc, #116	; (adr r4, 80020d8 <vTaskPreprocess+0x318>)
 8002062:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002066:	461a      	mov	r2, r3
 8002068:	4623      	mov	r3, r4
 800206a:	f7fe fac5 	bl	80005f8 <__aeabi_dmul>
 800206e:	4603      	mov	r3, r0
 8002070:	460c      	mov	r4, r1
 8002072:	461a      	mov	r2, r3
 8002074:	4623      	mov	r3, r4
 8002076:	4628      	mov	r0, r5
 8002078:	4631      	mov	r1, r6
 800207a:	f7fe f907 	bl	800028c <__adddf3>
 800207e:	4603      	mov	r3, r0
 8002080:	460c      	mov	r4, r1
			registers[0] = raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8002082:	4618      	mov	r0, r3
 8002084:	4621      	mov	r1, r4
 8002086:	f7fe fcc9 	bl	8000a1c <__aeabi_d2iz>
 800208a:	4603      	mov	r3, r0
 800208c:	61bb      	str	r3, [r7, #24]

			/* Write Result into Motherboard Variable if Mutex is available */
			if (osMutexAcquire(imu_mutex, IMU_MUTEX_TIMEOUT) == osOK) {
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <vTaskPreprocess+0x340>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f007 fd03 	bl	8009aa0 <osMutexAcquire>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	f47f aeac 	bne.w	8001dfa <vTaskPreprocess+0x3a>
				imu_data_to_mb = queue_data;
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <vTaskPreprocess+0x344>)
 80020a4:	461c      	mov	r4, r3
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//				imu_data_to_mb.acc_z = filtered_acc_z; /* Insert filtered data */
				osMutexRelease(imu_mutex);
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <vTaskPreprocess+0x340>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f007 fd51 	bl	8009b5c <osMutexRelease>
		tick_count += tick_update;
 80020ba:	e69e      	b.n	8001dfa <vTaskPreprocess+0x3a>
 80020bc:	f3af 8000 	nop.w
 80020c0:	1c708e5c 	.word	0x1c708e5c
 80020c4:	bfdc71c7 	.word	0xbfdc71c7
 80020c8:	bd4fbd69 	.word	0xbd4fbd69
 80020cc:	bfb2f684 	.word	0xbfb2f684
 80020d0:	80e71b2d 	.word	0x80e71b2d
 80020d4:	bf76796e 	.word	0xbf76796e
 80020d8:	e17eb593 	.word	0xe17eb593
 80020dc:	bf23fa32 	.word	0xbf23fa32
 80020e0:	3a1a0235 	.word	0x3a1a0235
 80020e4:	3fee7bb0 	.word	0x3fee7bb0
 80020e8:	3eeef58e 	.word	0x3eeef58e
 80020ec:	400e7bb0 	.word	0x400e7bb0
 80020f0:	2b9381a8 	.word	0x2b9381a8
 80020f4:	4016dcc4 	.word	0x4016dcc4
 80020f8:	cccccccd 	.word	0xcccccccd
 80020fc:	20001e50 	.word	0x20001e50
 8002100:	20005fc0 	.word	0x20005fc0
 8002104:	2000c16c 	.word	0x2000c16c

08002108 <vTaskSendToMb>:

/* Local Data Variable initialization */
imu_data_t last_imu_data = { 0 };
baro_data_t last_baro_data = { 0 };

void vTaskSendToMb(void *argument) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]



	/* For periodic update */
	uint32_t tick_count, tick_update;
	tick_count = osKernelGetTickCount();
 8002110:	f007 fae6 	bl	80096e0 <osKernelGetTickCount>
 8002114:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / MB_SAMPLING_RATE;
 8002116:	f007 fb0b 	bl	8009730 <osKernelGetTickFreq>
 800211a:	4602      	mov	r2, r0
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <vTaskSendToMb+0x40>)
 800211e:	fba3 2302 	umull	r2, r3, r3, r2
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	60bb      	str	r3, [r7, #8]

	for (;;) {
		tick_count += tick_update;
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	4413      	add	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]

		if(USB_DATA_ENABLE){
			ReadDataUSB();
		}
		else{
			ReadDataSensors();
 800212e:	f000 f811 	bl	8002154 <ReadDataSensors>
		}


		HAL_SPI_Transmit(&hspi2, (uint8_t*) &fullsb_data, sizeof(fullsb_data), HAL_MAX_DELAY);
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	2220      	movs	r2, #32
 8002138:	4904      	ldr	r1, [pc, #16]	; (800214c <vTaskSendToMb+0x44>)
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <vTaskSendToMb+0x48>)
 800213c:	f003 fbfa 	bl	8005934 <HAL_SPI_Transmit>




		osDelayUntil(tick_count);
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f007 fbd3 	bl	80098ec <osDelayUntil>
		tick_count += tick_update;
 8002146:	e7ee      	b.n	8002126 <vTaskSendToMb+0x1e>
 8002148:	51eb851f 	.word	0x51eb851f
 800214c:	20005fc4 	.word	0x20005fc4
 8002150:	20001e54 	.word	0x20001e54

08002154 <ReadDataSensors>:
			fullsb_data.imu.gyro_x + fullsb_data.imu.gyro_y + fullsb_data.imu.gyro_z +
			fullsb_data.imu.acc_x + fullsb_data.imu.acc_y +  fullsb_data.imu.acc_z;

}

void ReadDataSensors(){
 8002154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002156:	b085      	sub	sp, #20
 8002158:	af04      	add	r7, sp, #16
	/* acquire current Data */
	if (osMutexAcquire(imu_mutex, IMU_MUTEX_TIMEOUT) == osOK) {
 800215a:	4b4b      	ldr	r3, [pc, #300]	; (8002288 <ReadDataSensors+0x134>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f007 fc9d 	bl	8009aa0 <osMutexAcquire>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10a      	bne.n	8002182 <ReadDataSensors+0x2e>
		last_imu_data = imu_data_to_mb;
 800216c:	4a47      	ldr	r2, [pc, #284]	; (800228c <ReadDataSensors+0x138>)
 800216e:	4b48      	ldr	r3, [pc, #288]	; (8002290 <ReadDataSensors+0x13c>)
 8002170:	4614      	mov	r4, r2
 8002172:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002174:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		osMutexRelease(imu_mutex);
 8002178:	4b43      	ldr	r3, [pc, #268]	; (8002288 <ReadDataSensors+0x134>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f007 fced 	bl	8009b5c <osMutexRelease>
	}

	if (osMutexAcquire(baro_mutex, BARO_MUTEX_TIMEOUT) == osOK) {
 8002182:	4b44      	ldr	r3, [pc, #272]	; (8002294 <ReadDataSensors+0x140>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f007 fc89 	bl	8009aa0 <osMutexAcquire>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d109      	bne.n	80021a8 <ReadDataSensors+0x54>
		last_baro_data = baro_data_to_mb;
 8002194:	4b40      	ldr	r3, [pc, #256]	; (8002298 <ReadDataSensors+0x144>)
 8002196:	4a41      	ldr	r2, [pc, #260]	; (800229c <ReadDataSensors+0x148>)
 8002198:	ca07      	ldmia	r2, {r0, r1, r2}
 800219a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		osMutexRelease(baro_mutex);
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <ReadDataSensors+0x140>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f007 fcda 	bl	8009b5c <osMutexRelease>
	}

	fullsb_data.baro = last_baro_data;
 80021a8:	4b3d      	ldr	r3, [pc, #244]	; (80022a0 <ReadDataSensors+0x14c>)
 80021aa:	4a3b      	ldr	r2, [pc, #236]	; (8002298 <ReadDataSensors+0x144>)
 80021ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80021ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	fullsb_data.imu = last_imu_data;
 80021b2:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <ReadDataSensors+0x14c>)
 80021b4:	4a35      	ldr	r2, [pc, #212]	; (800228c <ReadDataSensors+0x138>)
 80021b6:	f103 040c 	add.w	r4, r3, #12
 80021ba:	4613      	mov	r3, r2
 80021bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	fullsb_data.checksum = fullsb_data.baro.pressure + fullsb_data.baro.temperature +
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <ReadDataSensors+0x14c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	4b35      	ldr	r3, [pc, #212]	; (80022a0 <ReadDataSensors+0x14c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	b2da      	uxtb	r2, r3
			fullsb_data.imu.gyro_x + fullsb_data.imu.gyro_y + fullsb_data.imu.gyro_z +
 80021d2:	4b33      	ldr	r3, [pc, #204]	; (80022a0 <ReadDataSensors+0x14c>)
 80021d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	fullsb_data.checksum = fullsb_data.baro.pressure + fullsb_data.baro.temperature +
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	4413      	add	r3, r2
 80021dc:	b2da      	uxtb	r2, r3
			fullsb_data.imu.gyro_x + fullsb_data.imu.gyro_y + fullsb_data.imu.gyro_z +
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <ReadDataSensors+0x14c>)
 80021e0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <ReadDataSensors+0x14c>)
 80021ec:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	b2da      	uxtb	r2, r3
			fullsb_data.imu.acc_x + fullsb_data.imu.acc_y +  fullsb_data.imu.acc_z;
 80021f6:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <ReadDataSensors+0x14c>)
 80021f8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
			fullsb_data.imu.gyro_x + fullsb_data.imu.gyro_y + fullsb_data.imu.gyro_z +
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	4413      	add	r3, r2
 8002200:	b2da      	uxtb	r2, r3
			fullsb_data.imu.acc_x + fullsb_data.imu.acc_y +  fullsb_data.imu.acc_z;
 8002202:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <ReadDataSensors+0x14c>)
 8002204:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	4413      	add	r3, r2
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <ReadDataSensors+0x14c>)
 8002210:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	4413      	add	r3, r2
 8002218:	b2da      	uxtb	r2, r3
	fullsb_data.checksum = fullsb_data.baro.pressure + fullsb_data.baro.temperature +
 800221a:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <ReadDataSensors+0x14c>)
 800221c:	771a      	strb	r2, [r3, #28]

	UsbPrint("[DBG] P: %ld; T: %ld; t: %lu; %lu\n", last_baro_data.pressure,
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <ReadDataSensors+0x144>)
 8002220:	6819      	ldr	r1, [r3, #0]
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <ReadDataSensors+0x144>)
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <ReadDataSensors+0x144>)
 8002228:	6898      	ldr	r0, [r3, #8]
			last_baro_data.temperature, last_baro_data.ts, fullsb_data.checksum);
 800222a:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <ReadDataSensors+0x14c>)
 800222c:	7f1b      	ldrb	r3, [r3, #28]
	UsbPrint("[DBG] P: %ld; T: %ld; t: %lu; %lu\n", last_baro_data.pressure,
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	4603      	mov	r3, r0
 8002232:	481c      	ldr	r0, [pc, #112]	; (80022a4 <ReadDataSensors+0x150>)
 8002234:	f7ff fca6 	bl	8001b84 <UsbPrint>

	UsbPrint(
			"[DBG Task Send] Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
			last_imu_data.gyro_x, last_imu_data.gyro_y,
 8002238:	4b14      	ldr	r3, [pc, #80]	; (800228c <ReadDataSensors+0x138>)
 800223a:	f9b3 3000 	ldrsh.w	r3, [r3]
	UsbPrint(
 800223e:	461c      	mov	r4, r3
			last_imu_data.gyro_x, last_imu_data.gyro_y,
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <ReadDataSensors+0x138>)
 8002242:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	UsbPrint(
 8002246:	461d      	mov	r5, r3
			last_imu_data.gyro_z, last_imu_data.acc_x, last_imu_data.acc_y,
 8002248:	4b10      	ldr	r3, [pc, #64]	; (800228c <ReadDataSensors+0x138>)
 800224a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	UsbPrint(
 800224e:	461e      	mov	r6, r3
			last_imu_data.gyro_z, last_imu_data.acc_x, last_imu_data.acc_y,
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <ReadDataSensors+0x138>)
 8002252:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	UsbPrint(
 8002256:	461a      	mov	r2, r3
			last_imu_data.gyro_z, last_imu_data.acc_x, last_imu_data.acc_y,
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <ReadDataSensors+0x138>)
 800225a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	UsbPrint(
 800225e:	4619      	mov	r1, r3
			last_imu_data.acc_z, last_imu_data.ts);
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <ReadDataSensors+0x138>)
 8002262:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
	UsbPrint(
 8002266:	4618      	mov	r0, r3
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <ReadDataSensors+0x138>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	9303      	str	r3, [sp, #12]
 800226e:	9002      	str	r0, [sp, #8]
 8002270:	9101      	str	r1, [sp, #4]
 8002272:	9200      	str	r2, [sp, #0]
 8002274:	4633      	mov	r3, r6
 8002276:	462a      	mov	r2, r5
 8002278:	4621      	mov	r1, r4
 800227a:	480b      	ldr	r0, [pc, #44]	; (80022a8 <ReadDataSensors+0x154>)
 800227c:	f7ff fc82 	bl	8001b84 <UsbPrint>
}
 8002280:	bf00      	nop
 8002282:	3704      	adds	r7, #4
 8002284:	46bd      	mov	sp, r7
 8002286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002288:	20005fc0 	.word	0x20005fc0
 800228c:	2000027c 	.word	0x2000027c
 8002290:	2000c16c 	.word	0x2000c16c
 8002294:	2000c17c 	.word	0x2000c17c
 8002298:	2000028c 	.word	0x2000028c
 800229c:	20001de4 	.word	0x20001de4
 80022a0:	20005fc4 	.word	0x20005fc4
 80022a4:	0800e3d4 	.word	0x0800e3d4
 80022a8:	0800e3f8 	.word	0x0800e3f8

080022ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80022b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80022b2:	e003      	b.n	80022bc <LoopCopyDataInit>

080022b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80022b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80022b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80022ba:	3104      	adds	r1, #4

080022bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80022bc:	480b      	ldr	r0, [pc, #44]	; (80022ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80022c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80022c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80022c4:	d3f6      	bcc.n	80022b4 <CopyDataInit>
	ldr	r2, =_sbss
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80022c8:	e002      	b.n	80022d0 <LoopFillZerobss>

080022ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80022ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80022cc:	f842 3b04 	str.w	r3, [r2], #4

080022d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <LoopForever+0x16>)
	cmp	r2, r3
 80022d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80022d4:	d3f9      	bcc.n	80022ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022d6:	f7ff fc1f 	bl	8001b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022da:	f00b fbc5 	bl	800da68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022de:	f7fe ffd7 	bl	8001290 <main>

080022e2 <LoopForever>:

LoopForever:
    b LoopForever
 80022e2:	e7fe      	b.n	80022e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022e4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80022e8:	0800e5dc 	.word	0x0800e5dc
	ldr	r0, =_sdata
 80022ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80022f0:	2000025c 	.word	0x2000025c
	ldr	r2, =_sbss
 80022f4:	2000025c 	.word	0x2000025c
	ldr	r3, = _ebss
 80022f8:	2000d110 	.word	0x2000d110

080022fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022fc:	e7fe      	b.n	80022fc <ADC1_IRQHandler>

080022fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002308:	2003      	movs	r0, #3
 800230a:	f000 f8fe 	bl	800250a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800230e:	2000      	movs	r0, #0
 8002310:	f7ff fb3e 	bl	8001990 <HAL_InitTick>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	71fb      	strb	r3, [r7, #7]
 800231e:	e001      	b.n	8002324 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002320:	f7ff fa1e 	bl	8001760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002324:	79fb      	ldrb	r3, [r7, #7]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_IncTick+0x1c>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_IncTick+0x20>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4413      	add	r3, r2
 800233e:	4a03      	ldr	r2, [pc, #12]	; (800234c <HAL_IncTick+0x1c>)
 8002340:	6013      	str	r3, [r2, #0]
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	2000c1c0 	.word	0x2000c1c0
 8002350:	20000070 	.word	0x20000070

08002354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return uwTick;
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <HAL_GetTick+0x14>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	2000c1c0 	.word	0x2000c1c0

0800236c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002374:	f7ff ffee 	bl	8002354 <HAL_GetTick>
 8002378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d004      	beq.n	8002390 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002386:	4b09      	ldr	r3, [pc, #36]	; (80023ac <HAL_Delay+0x40>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4413      	add	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002390:	bf00      	nop
 8002392:	f7ff ffdf 	bl	8002354 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d8f7      	bhi.n	8002392 <HAL_Delay+0x26>
  {
  }
}
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000070 	.word	0x20000070

080023b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023cc:	4013      	ands	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e2:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	60d3      	str	r3, [r2, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <__NVIC_GetPriorityGrouping+0x18>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 0307 	and.w	r3, r3, #7
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	2b00      	cmp	r3, #0
 8002424:	db0b      	blt.n	800243e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4907      	ldr	r1, [pc, #28]	; (800244c <__NVIC_EnableIRQ+0x38>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2001      	movs	r0, #1
 8002436:	fa00 f202 	lsl.w	r2, r0, r2
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000e100 	.word	0xe000e100

08002450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	6039      	str	r1, [r7, #0]
 800245a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	2b00      	cmp	r3, #0
 8002462:	db0a      	blt.n	800247a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	b2da      	uxtb	r2, r3
 8002468:	490c      	ldr	r1, [pc, #48]	; (800249c <__NVIC_SetPriority+0x4c>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	0112      	lsls	r2, r2, #4
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	440b      	add	r3, r1
 8002474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002478:	e00a      	b.n	8002490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4908      	ldr	r1, [pc, #32]	; (80024a0 <__NVIC_SetPriority+0x50>)
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	3b04      	subs	r3, #4
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	440b      	add	r3, r1
 800248e:	761a      	strb	r2, [r3, #24]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000e100 	.word	0xe000e100
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f1c3 0307 	rsb	r3, r3, #7
 80024be:	2b04      	cmp	r3, #4
 80024c0:	bf28      	it	cs
 80024c2:	2304      	movcs	r3, #4
 80024c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d902      	bls.n	80024d4 <NVIC_EncodePriority+0x30>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3b03      	subs	r3, #3
 80024d2:	e000      	b.n	80024d6 <NVIC_EncodePriority+0x32>
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	401a      	ands	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	43d9      	mvns	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	4313      	orrs	r3, r2
         );
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3724      	adds	r7, #36	; 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff ff4c 	bl	80023b0 <__NVIC_SetPriorityGrouping>
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002532:	f7ff ff61 	bl	80023f8 <__NVIC_GetPriorityGrouping>
 8002536:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68b9      	ldr	r1, [r7, #8]
 800253c:	6978      	ldr	r0, [r7, #20]
 800253e:	f7ff ffb1 	bl	80024a4 <NVIC_EncodePriority>
 8002542:	4602      	mov	r2, r0
 8002544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002548:	4611      	mov	r1, r2
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ff80 	bl	8002450 <__NVIC_SetPriority>
}
 8002550:	bf00      	nop
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff54 	bl	8002414 <__NVIC_EnableIRQ>
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e098      	b.n	80026b8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	4b4d      	ldr	r3, [pc, #308]	; (80026c4 <HAL_DMA_Init+0x150>)
 800258e:	429a      	cmp	r2, r3
 8002590:	d80f      	bhi.n	80025b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	4b4b      	ldr	r3, [pc, #300]	; (80026c8 <HAL_DMA_Init+0x154>)
 800259a:	4413      	add	r3, r2
 800259c:	4a4b      	ldr	r2, [pc, #300]	; (80026cc <HAL_DMA_Init+0x158>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	009a      	lsls	r2, r3, #2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a48      	ldr	r2, [pc, #288]	; (80026d0 <HAL_DMA_Init+0x15c>)
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40
 80025b0:	e00e      	b.n	80025d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	4b46      	ldr	r3, [pc, #280]	; (80026d4 <HAL_DMA_Init+0x160>)
 80025ba:	4413      	add	r3, r2
 80025bc:	4a43      	ldr	r2, [pc, #268]	; (80026cc <HAL_DMA_Init+0x158>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	009a      	lsls	r2, r3, #2
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a42      	ldr	r2, [pc, #264]	; (80026d8 <HAL_DMA_Init+0x164>)
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002600:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800262a:	d039      	beq.n	80026a0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	4a27      	ldr	r2, [pc, #156]	; (80026d0 <HAL_DMA_Init+0x15c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d11a      	bne.n	800266c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002636:	4b29      	ldr	r3, [pc, #164]	; (80026dc <HAL_DMA_Init+0x168>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f003 031c 	and.w	r3, r3, #28
 8002642:	210f      	movs	r1, #15
 8002644:	fa01 f303 	lsl.w	r3, r1, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	4924      	ldr	r1, [pc, #144]	; (80026dc <HAL_DMA_Init+0x168>)
 800264c:	4013      	ands	r3, r2
 800264e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <HAL_DMA_Init+0x168>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	f003 031c 	and.w	r3, r3, #28
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	491d      	ldr	r1, [pc, #116]	; (80026dc <HAL_DMA_Init+0x168>)
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
 800266a:	e019      	b.n	80026a0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800266c:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <HAL_DMA_Init+0x16c>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002674:	f003 031c 	and.w	r3, r3, #28
 8002678:	210f      	movs	r1, #15
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	4917      	ldr	r1, [pc, #92]	; (80026e0 <HAL_DMA_Init+0x16c>)
 8002682:	4013      	ands	r3, r2
 8002684:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002686:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <HAL_DMA_Init+0x16c>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6859      	ldr	r1, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f003 031c 	and.w	r3, r3, #28
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	4911      	ldr	r1, [pc, #68]	; (80026e0 <HAL_DMA_Init+0x16c>)
 800269c:	4313      	orrs	r3, r2
 800269e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	40020407 	.word	0x40020407
 80026c8:	bffdfff8 	.word	0xbffdfff8
 80026cc:	cccccccd 	.word	0xcccccccd
 80026d0:	40020000 	.word	0x40020000
 80026d4:	bffdfbf8 	.word	0xbffdfbf8
 80026d8:	40020400 	.word	0x40020400
 80026dc:	400200a8 	.word	0x400200a8
 80026e0:	400204a8 	.word	0x400204a8

080026e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d005      	beq.n	8002708 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2204      	movs	r2, #4
 8002700:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	e029      	b.n	800275c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 020e 	bic.w	r2, r2, #14
 8002716:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	f003 021c 	and.w	r2, r3, #28
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	2101      	movs	r1, #1
 8002736:	fa01 f202 	lsl.w	r2, r1, r2
 800273a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
    }
  }
  return status;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f003 031c 	and.w	r3, r3, #28
 8002786:	2204      	movs	r2, #4
 8002788:	409a      	lsls	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d026      	beq.n	80027e0 <HAL_DMA_IRQHandler+0x7a>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d021      	beq.n	80027e0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d107      	bne.n	80027ba <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0204 	bic.w	r2, r2, #4
 80027b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f003 021c 	and.w	r2, r3, #28
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2104      	movs	r1, #4
 80027c8:	fa01 f202 	lsl.w	r2, r1, r2
 80027cc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d071      	beq.n	80028ba <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80027de:	e06c      	b.n	80028ba <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	f003 031c 	and.w	r3, r3, #28
 80027e8:	2202      	movs	r2, #2
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d02e      	beq.n	8002852 <HAL_DMA_IRQHandler+0xec>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d029      	beq.n	8002852 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10b      	bne.n	8002824 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 020a 	bic.w	r2, r2, #10
 800281a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002828:	f003 021c 	and.w	r2, r3, #28
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	2102      	movs	r1, #2
 8002832:	fa01 f202 	lsl.w	r2, r1, r2
 8002836:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d038      	beq.n	80028ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002850:	e033      	b.n	80028ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f003 031c 	and.w	r3, r3, #28
 800285a:	2208      	movs	r2, #8
 800285c:	409a      	lsls	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d02a      	beq.n	80028bc <HAL_DMA_IRQHandler+0x156>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d025      	beq.n	80028bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 020e 	bic.w	r2, r2, #14
 800287e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	f003 021c 	and.w	r2, r3, #28
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	2101      	movs	r1, #1
 800288e:	fa01 f202 	lsl.w	r2, r1, r2
 8002892:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028ba:	bf00      	nop
 80028bc:	bf00      	nop
}
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d2:	e154      	b.n	8002b7e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2101      	movs	r1, #1
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 8146 	beq.w	8002b78 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d00b      	beq.n	800290c <HAL_GPIO_Init+0x48>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d007      	beq.n	800290c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002900:	2b11      	cmp	r3, #17
 8002902:	d003      	beq.n	800290c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b12      	cmp	r3, #18
 800290a:	d130      	bne.n	800296e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002942:	2201      	movs	r2, #1
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	f003 0201 	and.w	r2, r3, #1
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	2203      	movs	r2, #3
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0xea>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b12      	cmp	r3, #18
 80029ac:	d123      	bne.n	80029f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	08da      	lsrs	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3208      	adds	r2, #8
 80029b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	220f      	movs	r2, #15
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	6939      	ldr	r1, [r7, #16]
 80029f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0203 	and.w	r2, r3, #3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80a0 	beq.w	8002b78 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a38:	4b58      	ldr	r3, [pc, #352]	; (8002b9c <HAL_GPIO_Init+0x2d8>)
 8002a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3c:	4a57      	ldr	r2, [pc, #348]	; (8002b9c <HAL_GPIO_Init+0x2d8>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6613      	str	r3, [r2, #96]	; 0x60
 8002a44:	4b55      	ldr	r3, [pc, #340]	; (8002b9c <HAL_GPIO_Init+0x2d8>)
 8002a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a50:	4a53      	ldr	r2, [pc, #332]	; (8002ba0 <HAL_GPIO_Init+0x2dc>)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	089b      	lsrs	r3, r3, #2
 8002a56:	3302      	adds	r3, #2
 8002a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	220f      	movs	r2, #15
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a7a:	d019      	beq.n	8002ab0 <HAL_GPIO_Init+0x1ec>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a49      	ldr	r2, [pc, #292]	; (8002ba4 <HAL_GPIO_Init+0x2e0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d013      	beq.n	8002aac <HAL_GPIO_Init+0x1e8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a48      	ldr	r2, [pc, #288]	; (8002ba8 <HAL_GPIO_Init+0x2e4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_GPIO_Init+0x1e4>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a47      	ldr	r2, [pc, #284]	; (8002bac <HAL_GPIO_Init+0x2e8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d007      	beq.n	8002aa4 <HAL_GPIO_Init+0x1e0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a46      	ldr	r2, [pc, #280]	; (8002bb0 <HAL_GPIO_Init+0x2ec>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d101      	bne.n	8002aa0 <HAL_GPIO_Init+0x1dc>
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	e008      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002aa0:	2307      	movs	r3, #7
 8002aa2:	e006      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e004      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e002      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	f002 0203 	and.w	r2, r2, #3
 8002ab8:	0092      	lsls	r2, r2, #2
 8002aba:	4093      	lsls	r3, r2
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ac2:	4937      	ldr	r1, [pc, #220]	; (8002ba0 <HAL_GPIO_Init+0x2dc>)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	3302      	adds	r3, #2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ad0:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002af4:	4a2f      	ldr	r2, [pc, #188]	; (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002afa:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b1e:	4a25      	ldr	r2, [pc, #148]	; (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b24:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b48:	4a1a      	ldr	r2, [pc, #104]	; (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b4e:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b72:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f47f aea3 	bne.w	80028d4 <HAL_GPIO_Init+0x10>
  }
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40010000 	.word	0x40010000
 8002ba4:	48000400 	.word	0x48000400
 8002ba8:	48000800 	.word	0x48000800
 8002bac:	48000c00 	.word	0x48000c00
 8002bb0:	48001000 	.word	0x48001000
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc8:	787b      	ldrb	r3, [r7, #1]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bd4:	e002      	b.n	8002bdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e081      	b.n	8002cfe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe fdce 	bl	80017b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2224      	movs	r2, #36	; 0x24
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d107      	bne.n	8002c62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	e006      	b.n	8002c70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d104      	bne.n	8002c82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ca4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	ea42 0103 	orr.w	r1, r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	021a      	lsls	r2, r3, #8
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69d9      	ldr	r1, [r3, #28]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1a      	ldr	r2, [r3, #32]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	461a      	mov	r2, r3
 8002d14:	460b      	mov	r3, r1
 8002d16:	817b      	strh	r3, [r7, #10]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	f040 80da 	bne.w	8002ede <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_I2C_Master_Transmit+0x30>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e0d3      	b.n	8002ee0 <HAL_I2C_Master_Transmit+0x1d8>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d40:	f7ff fb08 	bl	8002354 <HAL_GetTick>
 8002d44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2319      	movs	r3, #25
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f9e6 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e0be      	b.n	8002ee0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2221      	movs	r2, #33	; 0x21
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2210      	movs	r2, #16
 8002d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	893a      	ldrh	r2, [r7, #8]
 8002d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2bff      	cmp	r3, #255	; 0xff
 8002d92:	d90e      	bls.n	8002db2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	22ff      	movs	r2, #255	; 0xff
 8002d98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	8979      	ldrh	r1, [r7, #10]
 8002da2:	4b51      	ldr	r3, [pc, #324]	; (8002ee8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 fb48 	bl	8003440 <I2C_TransferConfig>
 8002db0:	e06c      	b.n	8002e8c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	8979      	ldrh	r1, [r7, #10]
 8002dc4:	4b48      	ldr	r3, [pc, #288]	; (8002ee8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 fb37 	bl	8003440 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002dd2:	e05b      	b.n	8002e8c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	6a39      	ldr	r1, [r7, #32]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f9e3 	bl	80031a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e07b      	b.n	8002ee0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	781a      	ldrb	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d034      	beq.n	8002e8c <HAL_I2C_Master_Transmit+0x184>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d130      	bne.n	8002e8c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	2200      	movs	r2, #0
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f975 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e04d      	b.n	8002ee0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2bff      	cmp	r3, #255	; 0xff
 8002e4c:	d90e      	bls.n	8002e6c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	22ff      	movs	r2, #255	; 0xff
 8002e52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	8979      	ldrh	r1, [r7, #10]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 faeb 	bl	8003440 <I2C_TransferConfig>
 8002e6a:	e00f      	b.n	8002e8c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	8979      	ldrh	r1, [r7, #10]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fada 	bl	8003440 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d19e      	bne.n	8002dd4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	6a39      	ldr	r1, [r7, #32]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f9c2 	bl	8003224 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e01a      	b.n	8002ee0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_I2C_Master_Transmit+0x1e4>)
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
  }
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	80002000 	.word	0x80002000
 8002eec:	fe00e800 	.word	0xfe00e800

08002ef0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	461a      	mov	r2, r3
 8002efc:	460b      	mov	r3, r1
 8002efe:	817b      	strh	r3, [r7, #10]
 8002f00:	4613      	mov	r3, r2
 8002f02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	f040 80db 	bne.w	80030c8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_I2C_Master_Receive+0x30>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e0d4      	b.n	80030ca <HAL_I2C_Master_Receive+0x1da>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f28:	f7ff fa14 	bl	8002354 <HAL_GetTick>
 8002f2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	2319      	movs	r3, #25
 8002f34:	2201      	movs	r2, #1
 8002f36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f8f2 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0bf      	b.n	80030ca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2222      	movs	r2, #34	; 0x22
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2210      	movs	r2, #16
 8002f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	893a      	ldrh	r2, [r7, #8]
 8002f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2bff      	cmp	r3, #255	; 0xff
 8002f7a:	d90e      	bls.n	8002f9a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	22ff      	movs	r2, #255	; 0xff
 8002f80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	8979      	ldrh	r1, [r7, #10]
 8002f8a:	4b52      	ldr	r3, [pc, #328]	; (80030d4 <HAL_I2C_Master_Receive+0x1e4>)
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fa54 	bl	8003440 <I2C_TransferConfig>
 8002f98:	e06d      	b.n	8003076 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	8979      	ldrh	r1, [r7, #10]
 8002fac:	4b49      	ldr	r3, [pc, #292]	; (80030d4 <HAL_I2C_Master_Receive+0x1e4>)
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fa43 	bl	8003440 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002fba:	e05c      	b.n	8003076 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	6a39      	ldr	r1, [r7, #32]
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f96b 	bl	800329c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e07c      	b.n	80030ca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d034      	beq.n	8003076 <HAL_I2C_Master_Receive+0x186>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	2b00      	cmp	r3, #0
 8003012:	d130      	bne.n	8003076 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	2200      	movs	r2, #0
 800301c:	2180      	movs	r1, #128	; 0x80
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f880 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e04d      	b.n	80030ca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	2bff      	cmp	r3, #255	; 0xff
 8003036:	d90e      	bls.n	8003056 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	22ff      	movs	r2, #255	; 0xff
 800303c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003042:	b2da      	uxtb	r2, r3
 8003044:	8979      	ldrh	r1, [r7, #10]
 8003046:	2300      	movs	r3, #0
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f9f6 	bl	8003440 <I2C_TransferConfig>
 8003054:	e00f      	b.n	8003076 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003064:	b2da      	uxtb	r2, r3
 8003066:	8979      	ldrh	r1, [r7, #10]
 8003068:	2300      	movs	r3, #0
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f9e5 	bl	8003440 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d19d      	bne.n	8002fbc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	6a39      	ldr	r1, [r7, #32]
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f8cd 	bl	8003224 <I2C_WaitOnSTOPFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e01a      	b.n	80030ca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2220      	movs	r2, #32
 800309a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6859      	ldr	r1, [r3, #4]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <HAL_I2C_Master_Receive+0x1e8>)
 80030a8:	400b      	ands	r3, r1
 80030aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e000      	b.n	80030ca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80030c8:	2302      	movs	r3, #2
  }
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	80002400 	.word	0x80002400
 80030d8:	fe00e800 	.word	0xfe00e800

080030dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d103      	bne.n	80030fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2200      	movs	r2, #0
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b01      	cmp	r3, #1
 8003106:	d007      	beq.n	8003118 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	619a      	str	r2, [r3, #24]
  }
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003134:	e022      	b.n	800317c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d01e      	beq.n	800317c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313e:	f7ff f909 	bl	8002354 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d302      	bcc.n	8003154 <I2C_WaitOnFlagUntilTimeout+0x30>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d113      	bne.n	800317c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e00f      	b.n	800319c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	429a      	cmp	r2, r3
 8003198:	d0cd      	beq.n	8003136 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031b0:	e02c      	b.n	800320c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f8dc 	bl	8003374 <I2C_IsAcknowledgeFailed>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e02a      	b.n	800321c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d01e      	beq.n	800320c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ce:	f7ff f8c1 	bl	8002354 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d302      	bcc.n	80031e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d113      	bne.n	800320c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e007      	b.n	800321c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b02      	cmp	r3, #2
 8003218:	d1cb      	bne.n	80031b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003230:	e028      	b.n	8003284 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f89c 	bl	8003374 <I2C_IsAcknowledgeFailed>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e026      	b.n	8003294 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003246:	f7ff f885 	bl	8002354 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	429a      	cmp	r2, r3
 8003254:	d302      	bcc.n	800325c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d113      	bne.n	8003284 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e007      	b.n	8003294 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b20      	cmp	r3, #32
 8003290:	d1cf      	bne.n	8003232 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032a8:	e055      	b.n	8003356 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f860 	bl	8003374 <I2C_IsAcknowledgeFailed>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e053      	b.n	8003366 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d129      	bne.n	8003320 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d105      	bne.n	80032e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e03f      	b.n	8003366 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2220      	movs	r2, #32
 80032ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80032fa:	400b      	ands	r3, r1
 80032fc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e022      	b.n	8003366 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003320:	f7ff f818 	bl	8002354 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	429a      	cmp	r2, r3
 800332e:	d302      	bcc.n	8003336 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10f      	bne.n	8003356 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	f043 0220 	orr.w	r2, r3, #32
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e007      	b.n	8003366 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b04      	cmp	r3, #4
 8003362:	d1a2      	bne.n	80032aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	fe00e800 	.word	0xfe00e800

08003374 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b10      	cmp	r3, #16
 800338c:	d151      	bne.n	8003432 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800338e:	e022      	b.n	80033d6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003396:	d01e      	beq.n	80033d6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003398:	f7fe ffdc 	bl	8002354 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d302      	bcc.n	80033ae <I2C_IsAcknowledgeFailed+0x3a>
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d113      	bne.n	80033d6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f043 0220 	orr.w	r2, r3, #32
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e02e      	b.n	8003434 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d1d5      	bne.n	8003390 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2210      	movs	r2, #16
 80033ea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2220      	movs	r2, #32
 80033f2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f7ff fe71 	bl	80030dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <I2C_IsAcknowledgeFailed+0xc8>)
 8003406:	400b      	ands	r3, r1
 8003408:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f043 0204 	orr.w	r2, r3, #4
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	fe00e800 	.word	0xfe00e800

08003440 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	607b      	str	r3, [r7, #4]
 800344a:	460b      	mov	r3, r1
 800344c:	817b      	strh	r3, [r7, #10]
 800344e:	4613      	mov	r3, r2
 8003450:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	0d5b      	lsrs	r3, r3, #21
 800345c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <I2C_TransferConfig+0x58>)
 8003462:	430b      	orrs	r3, r1
 8003464:	43db      	mvns	r3, r3
 8003466:	ea02 0103 	and.w	r1, r2, r3
 800346a:	897b      	ldrh	r3, [r7, #10]
 800346c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003470:	7a7b      	ldrb	r3, [r7, #9]
 8003472:	041b      	lsls	r3, r3, #16
 8003474:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	431a      	orrs	r2, r3
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	431a      	orrs	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	03ff63ff 	.word	0x03ff63ff

0800349c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d138      	bne.n	8003524 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034bc:	2302      	movs	r3, #2
 80034be:	e032      	b.n	8003526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2224      	movs	r2, #36	; 0x24
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6819      	ldr	r1, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	e000      	b.n	8003526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003524:	2302      	movs	r3, #2
  }
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b20      	cmp	r3, #32
 8003546:	d139      	bne.n	80035bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003552:	2302      	movs	r3, #2
 8003554:	e033      	b.n	80035be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2224      	movs	r2, #36	; 0x24
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0201 	bic.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003584:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035bc:	2302      	movs	r3, #2
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035cc:	b08b      	sub	sp, #44	; 0x2c
 80035ce:	af06      	add	r7, sp, #24
 80035d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0da      	b.n	8003792 <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f009 febd 	bl	800d370 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2203      	movs	r2, #3
 80035fa:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f003 fb20 	bl	8006c48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	687e      	ldr	r6, [r7, #4]
 8003610:	466d      	mov	r5, sp
 8003612:	f106 0410 	add.w	r4, r6, #16
 8003616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	602b      	str	r3, [r5, #0]
 800361e:	1d33      	adds	r3, r6, #4
 8003620:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003622:	6838      	ldr	r0, [r7, #0]
 8003624:	f003 fae6 	bl	8006bf4 <USB_CoreInit>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e0ab      	b.n	8003792 <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f003 fb1c 	bl	8006c7e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
 800364a:	e035      	b.n	80036b8 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	015b      	lsls	r3, r3, #5
 8003652:	4413      	add	r3, r2
 8003654:	3329      	adds	r3, #41	; 0x29
 8003656:	2201      	movs	r2, #1
 8003658:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	015b      	lsls	r3, r3, #5
 8003660:	4413      	add	r3, r2
 8003662:	3328      	adds	r3, #40	; 0x28
 8003664:	7bfa      	ldrb	r2, [r7, #15]
 8003666:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	7bfa      	ldrb	r2, [r7, #15]
 800366c:	b291      	uxth	r1, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	015b      	lsls	r3, r3, #5
 8003672:	4413      	add	r3, r2
 8003674:	3336      	adds	r3, #54	; 0x36
 8003676:	460a      	mov	r2, r1
 8003678:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	015b      	lsls	r3, r3, #5
 8003680:	4413      	add	r3, r2
 8003682:	332b      	adds	r3, #43	; 0x2b
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	015b      	lsls	r3, r3, #5
 800368e:	4413      	add	r3, r2
 8003690:	3338      	adds	r3, #56	; 0x38
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	015b      	lsls	r3, r3, #5
 800369c:	4413      	add	r3, r2
 800369e:	333c      	adds	r3, #60	; 0x3c
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	3302      	adds	r3, #2
 80036aa:	015b      	lsls	r3, r3, #5
 80036ac:	4413      	add	r3, r2
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	3301      	adds	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
 80036b8:	7bfa      	ldrb	r2, [r7, #15]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d3c4      	bcc.n	800364c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	73fb      	strb	r3, [r7, #15]
 80036c6:	e031      	b.n	800372c <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	015b      	lsls	r3, r3, #5
 80036ce:	4413      	add	r3, r2
 80036d0:	f203 1329 	addw	r3, r3, #297	; 0x129
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	015b      	lsls	r3, r3, #5
 80036de:	4413      	add	r3, r2
 80036e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80036e4:	7bfa      	ldrb	r2, [r7, #15]
 80036e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	015b      	lsls	r3, r3, #5
 80036ee:	4413      	add	r3, r2
 80036f0:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	015b      	lsls	r3, r3, #5
 80036fe:	4413      	add	r3, r2
 8003700:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	015b      	lsls	r3, r3, #5
 800370e:	4413      	add	r3, r2
 8003710:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	330a      	adds	r3, #10
 800371e:	015b      	lsls	r3, r3, #5
 8003720:	4413      	add	r3, r2
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	3301      	adds	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
 800372c:	7bfa      	ldrb	r2, [r7, #15]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	429a      	cmp	r2, r3
 8003734:	d3c8      	bcc.n	80036c8 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	687e      	ldr	r6, [r7, #4]
 800373e:	466d      	mov	r5, sp
 8003740:	f106 0410 	add.w	r4, r6, #16
 8003744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	602b      	str	r3, [r5, #0]
 800374c:	1d33      	adds	r3, r6, #4
 800374e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003750:	6838      	ldr	r0, [r7, #0]
 8003752:	f003 faa1 	bl	8006c98 <USB_DevInit>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e014      	b.n	8003792 <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d102      	bne.n	8003786 <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fe3a 	bl	80043fa <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f004 fae7 	bl	8007d5e <USB_DevDisconnect>

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800379a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_PCD_Start+0x16>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e012      	b.n	80037d6 <HAL_PCD_Start+0x3c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f004 fab7 	bl	8007d30 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f003 fa25 	bl	8006c16 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f004 facc 	bl	8007d88 <USB_ReadInterrupts>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037fa:	d102      	bne.n	8003802 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fb33 	bl	8003e68 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f004 fabe 	bl	8007d88 <USB_ReadInterrupts>
 800380c:	4603      	mov	r3, r0
 800380e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003816:	d112      	bne.n	800383e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003820:	b29a      	uxth	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800382a:	b292      	uxth	r2, r2
 800382c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f009 fe12 	bl	800d45a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003836:	2100      	movs	r1, #0
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f91e 	bl	8003a7a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f004 faa0 	bl	8007d88 <USB_ReadInterrupts>
 8003848:	4603      	mov	r3, r0
 800384a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800384e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003852:	d10b      	bne.n	800386c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800385c:	b29a      	uxth	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003866:	b292      	uxth	r2, r2
 8003868:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f004 fa89 	bl	8007d88 <USB_ReadInterrupts>
 8003876:	4603      	mov	r3, r0
 8003878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800387c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003880:	d10b      	bne.n	800389a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800388a:	b29a      	uxth	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003894:	b292      	uxth	r2, r2
 8003896:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f004 fa72 	bl	8007d88 <USB_ReadInterrupts>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ae:	d133      	bne.n	8003918 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0204 	bic.w	r2, r2, #4
 80038c2:	b292      	uxth	r2, r2
 80038c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0208 	bic.w	r2, r2, #8
 80038da:	b292      	uxth	r2, r2
 80038dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d107      	bne.n	80038fa <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038f2:	2100      	movs	r1, #0
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f00a f85d 	bl	800d9b4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f009 fde6 	bl	800d4cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003908:	b29a      	uxth	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003912:	b292      	uxth	r2, r2
 8003914:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f004 fa33 	bl	8007d88 <USB_ReadInterrupts>
 8003922:	4603      	mov	r3, r0
 8003924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800392c:	d126      	bne.n	800397c <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003936:	b29a      	uxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0208 	orr.w	r2, r2, #8
 8003940:	b292      	uxth	r2, r2
 8003942:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800394e:	b29a      	uxth	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003958:	b292      	uxth	r2, r2
 800395a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003966:	b29a      	uxth	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0204 	orr.w	r2, r2, #4
 8003970:	b292      	uxth	r2, r2
 8003972:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f009 fd8e 	bl	800d498 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f004 fa01 	bl	8007d88 <USB_ReadInterrupts>
 8003986:	4603      	mov	r3, r0
 8003988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398c:	2b80      	cmp	r3, #128	; 0x80
 800398e:	d13f      	bne.n	8003a10 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003998:	b29a      	uxth	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039a2:	b292      	uxth	r2, r2
 80039a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d12b      	bne.n	8003a0a <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0204 	orr.w	r2, r2, #4
 80039c4:	b292      	uxth	r2, r2
 80039c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0208 	orr.w	r2, r2, #8
 80039dc:	b292      	uxth	r2, r2
 80039de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	089b      	lsrs	r3, r3, #2
 80039f6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a00:	2101      	movs	r1, #1
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f009 ffd6 	bl	800d9b4 <HAL_PCDEx_LPM_Callback>
 8003a08:	e002      	b.n	8003a10 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f009 fd44 	bl	800d498 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 f9b7 	bl	8007d88 <USB_ReadInterrupts>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a24:	d10e      	bne.n	8003a44 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a38:	b292      	uxth	r2, r2
 8003a3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f009 fcfd 	bl	800d43e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f004 f99d 	bl	8007d88 <USB_ReadInterrupts>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a58:	d10b      	bne.n	8003a72 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a6c:	b292      	uxth	r2, r2
 8003a6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	460b      	mov	r3, r1
 8003a84:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_PCD_SetAddress+0x1a>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e013      	b.n	8003abc <HAL_PCD_SetAddress+0x42>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f004 f92b 	bl	8007d08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	4608      	mov	r0, r1
 8003ace:	4611      	mov	r1, r2
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	70fb      	strb	r3, [r7, #3]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	803b      	strh	r3, [r7, #0]
 8003ada:	4613      	mov	r3, r2
 8003adc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ae2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	da0b      	bge.n	8003b02 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	015b      	lsls	r3, r3, #5
 8003af2:	3328      	adds	r3, #40	; 0x28
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	705a      	strb	r2, [r3, #1]
 8003b00:	e00b      	b.n	8003b1a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	015b      	lsls	r3, r3, #5
 8003b0a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	4413      	add	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b26:	883a      	ldrh	r2, [r7, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	78ba      	ldrb	r2, [r7, #2]
 8003b30:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	785b      	ldrb	r3, [r3, #1]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d004      	beq.n	8003b44 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b44:	78bb      	ldrb	r3, [r7, #2]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d102      	bne.n	8003b50 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_PCD_EP_Open+0x9a>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e00e      	b.n	8003b7c <HAL_PCD_EP_Open+0xb8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68f9      	ldr	r1, [r7, #12]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f003 f8b7 	bl	8006ce0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003b7a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	da0b      	bge.n	8003bb0 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	015b      	lsls	r3, r3, #5
 8003ba0:	3328      	adds	r3, #40	; 0x28
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2201      	movs	r2, #1
 8003bac:	705a      	strb	r2, [r3, #1]
 8003bae:	e00b      	b.n	8003bc8 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	015b      	lsls	r3, r3, #5
 8003bb8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_PCD_EP_Close+0x5e>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e00e      	b.n	8003c00 <HAL_PCD_EP_Close+0x7c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68f9      	ldr	r1, [r7, #12]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f003 fb65 	bl	80072c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	460b      	mov	r3, r1
 8003c16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c18:	7afb      	ldrb	r3, [r7, #11]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	015b      	lsls	r3, r3, #5
 8003c20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c42:	7afb      	ldrb	r3, [r7, #11]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c4e:	7afb      	ldrb	r3, [r7, #11]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d106      	bne.n	8003c66 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6979      	ldr	r1, [r7, #20]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f003 fcc4 	bl	80075ec <USB_EPStartXfer>
 8003c64:	e005      	b.n	8003c72 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6979      	ldr	r1, [r7, #20]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f003 fcbd 	bl	80075ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	330a      	adds	r3, #10
 8003c92:	015b      	lsls	r3, r3, #5
 8003c94:	4413      	add	r3, r2
 8003c96:	3304      	adds	r3, #4
 8003c98:	681b      	ldr	r3, [r3, #0]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b086      	sub	sp, #24
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb6:	7afb      	ldrb	r3, [r7, #11]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	015b      	lsls	r3, r3, #5
 8003cbe:	3328      	adds	r3, #40	; 0x28
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cde:	7afb      	ldrb	r3, [r7, #11]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cea:	7afb      	ldrb	r3, [r7, #11]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d106      	bne.n	8003d02 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6979      	ldr	r1, [r7, #20]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f003 fc76 	bl	80075ec <USB_EPStartXfer>
 8003d00:	e005      	b.n	8003d0e <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6979      	ldr	r1, [r7, #20]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f003 fc6f 	bl	80075ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	f003 0207 	and.w	r2, r3, #7
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d901      	bls.n	8003d36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e046      	b.n	8003dc4 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	da0b      	bge.n	8003d56 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	015b      	lsls	r3, r3, #5
 8003d46:	3328      	adds	r3, #40	; 0x28
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	705a      	strb	r2, [r3, #1]
 8003d54:	e009      	b.n	8003d6a <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	015b      	lsls	r3, r3, #5
 8003d5a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4413      	add	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_PCD_EP_SetStall+0x72>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e01c      	b.n	8003dc4 <HAL_PCD_EP_SetStall+0xac>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f003 fedf 	bl	8007b5c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d108      	bne.n	8003dba <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f003 fff7 	bl	8007da8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	f003 020f 	and.w	r2, r3, #15
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d901      	bls.n	8003dea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e03a      	b.n	8003e60 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	da0b      	bge.n	8003e0a <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	015b      	lsls	r3, r3, #5
 8003dfa:	3328      	adds	r3, #40	; 0x28
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	4413      	add	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	705a      	strb	r2, [r3, #1]
 8003e08:	e00b      	b.n	8003e22 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	015b      	lsls	r3, r3, #5
 8003e12:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_PCD_EP_ClrStall+0x76>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e00e      	b.n	8003e60 <HAL_PCD_EP_ClrStall+0x94>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68f9      	ldr	r1, [r7, #12]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f003 fec5 	bl	8007be0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b089      	sub	sp, #36	; 0x24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e70:	e274      	b.n	800435c <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e7a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003e7c:	8afb      	ldrh	r3, [r7, #22]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003e86:	7d7b      	ldrb	r3, [r7, #21]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f040 813c 	bne.w	8004106 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003e8e:	8afb      	ldrh	r3, [r7, #22]
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d14f      	bne.n	8003f38 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea8:	b29c      	uxth	r4, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3328      	adds	r3, #40	; 0x28
 8003ebe:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	441a      	add	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f009 fa89 	bl	800d410 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8228 	beq.w	800435c <PCD_EP_ISR_Handler+0x4f4>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f040 8223 	bne.w	800435c <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	b292      	uxth	r2, r2
 8003f2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f36:	e211      	b.n	800435c <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003f3e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003f48:	8a7b      	ldrh	r3, [r7, #18]
 8003f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d031      	beq.n	8003fb6 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4413      	add	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	f003 ff58 	bl	8007e42 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	b29c      	uxth	r4, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003faa:	b292      	uxth	r2, r2
 8003fac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f009 fa04 	bl	800d3bc <HAL_PCD_SetupStageCallback>
 8003fb4:	e1d2      	b.n	800435c <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003fb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f280 81ce 	bge.w	800435c <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003fcc:	4013      	ands	r3, r2
 8003fce:	b29c      	uxth	r4, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003fd8:	b292      	uxth	r2, r2
 8003fda:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4413      	add	r3, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d019      	beq.n	8004040 <PCD_EP_ISR_Handler+0x1d8>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d015      	beq.n	8004040 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6959      	ldr	r1, [r3, #20]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004024:	b29b      	uxth	r3, r3
 8004026:	f003 ff0c 	bl	8007e42 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	441a      	add	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004038:	2100      	movs	r1, #0
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f009 f9d0 	bl	800d3e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	461c      	mov	r4, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800404e:	b29b      	uxth	r3, r3
 8004050:	441c      	add	r4, r3
 8004052:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8004056:	461c      	mov	r4, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10e      	bne.n	800407e <PCD_EP_ISR_Handler+0x216>
 8004060:	8823      	ldrh	r3, [r4, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004068:	b29b      	uxth	r3, r3
 800406a:	8023      	strh	r3, [r4, #0]
 800406c:	8823      	ldrh	r3, [r4, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004078:	b29b      	uxth	r3, r3
 800407a:	8023      	strh	r3, [r4, #0]
 800407c:	e02d      	b.n	80040da <PCD_EP_ISR_Handler+0x272>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b3e      	cmp	r3, #62	; 0x3e
 8004084:	d812      	bhi.n	80040ac <PCD_EP_ISR_Handler+0x244>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	085b      	lsrs	r3, r3, #1
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <PCD_EP_ISR_Handler+0x238>
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	3301      	adds	r3, #1
 800409e:	61bb      	str	r3, [r7, #24]
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	029b      	lsls	r3, r3, #10
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	8023      	strh	r3, [r4, #0]
 80040aa:	e016      	b.n	80040da <PCD_EP_ISR_Handler+0x272>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	61bb      	str	r3, [r7, #24]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d102      	bne.n	80040c6 <PCD_EP_ISR_Handler+0x25e>
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	029b      	lsls	r3, r3, #10
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ea:	b29c      	uxth	r4, r3
 80040ec:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80040f0:	b29c      	uxth	r4, r3
 80040f2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80040f6:	b29c      	uxth	r4, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b9e      	ldr	r3, [pc, #632]	; (8004378 <PCD_EP_ISR_Handler+0x510>)
 80040fe:	4323      	orrs	r3, r4
 8004100:	b29b      	uxth	r3, r3
 8004102:	8013      	strh	r3, [r2, #0]
 8004104:	e12a      	b.n	800435c <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	7d7b      	ldrb	r3, [r7, #21]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004116:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f280 80cb 	bge.w	80042b6 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	7d7b      	ldrb	r3, [r7, #21]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	b29a      	uxth	r2, r3
 8004130:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004134:	4013      	ands	r3, r2
 8004136:	b29c      	uxth	r4, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	7d7b      	ldrb	r3, [r7, #21]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004148:	b292      	uxth	r2, r2
 800414a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800414c:	7d7b      	ldrb	r3, [r7, #21]
 800414e:	015b      	lsls	r3, r3, #5
 8004150:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	4413      	add	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	7b1b      	ldrb	r3, [r3, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d11f      	bne.n	80041a2 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800416a:	b29b      	uxth	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4413      	add	r3, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	4413      	add	r3, r2
 800417c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004186:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8004188:	8bfb      	ldrh	r3, [r7, #30]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d06e      	beq.n	800426c <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6959      	ldr	r1, [r3, #20]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	88da      	ldrh	r2, [r3, #6]
 800419a:	8bfb      	ldrh	r3, [r7, #30]
 800419c:	f003 fe51 	bl	8007e42 <USB_ReadPMA>
 80041a0:	e064      	b.n	800426c <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041bc:	b29c      	uxth	r4, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	441a      	add	r2, r3
 80041cc:	4b6b      	ldr	r3, [pc, #428]	; (800437c <PCD_EP_ISR_Handler+0x514>)
 80041ce:	4323      	orrs	r3, r4
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d01f      	beq.n	800422e <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4413      	add	r3, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	4413      	add	r3, r2
 8004208:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004212:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004214:	8bfb      	ldrh	r3, [r7, #30]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d028      	beq.n	800426c <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6959      	ldr	r1, [r3, #20]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	891a      	ldrh	r2, [r3, #8]
 8004226:	8bfb      	ldrh	r3, [r7, #30]
 8004228:	f003 fe0b 	bl	8007e42 <USB_ReadPMA>
 800422c:	e01e      	b.n	800426c <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004236:	b29b      	uxth	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	4413      	add	r3, r2
 8004248:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004252:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004254:	8bfb      	ldrh	r3, [r7, #30]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d008      	beq.n	800426c <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6959      	ldr	r1, [r3, #20]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	895a      	ldrh	r2, [r3, #10]
 8004266:	8bfb      	ldrh	r3, [r7, #30]
 8004268:	f003 fdeb 	bl	8007e42 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	8bfb      	ldrh	r3, [r7, #30]
 8004272:	441a      	add	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	695a      	ldr	r2, [r3, #20]
 800427c:	8bfb      	ldrh	r3, [r7, #30]
 800427e:	441a      	add	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d004      	beq.n	8004296 <PCD_EP_ISR_Handler+0x42e>
 800428c:	8bfa      	ldrh	r2, [r7, #30]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	429a      	cmp	r2, r3
 8004294:	d206      	bcs.n	80042a4 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	4619      	mov	r1, r3
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f009 f89f 	bl	800d3e0 <HAL_PCD_DataOutStageCallback>
 80042a2:	e008      	b.n	80042b6 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	7819      	ldrb	r1, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	695a      	ldr	r2, [r3, #20]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff fca9 	bl	8003c08 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80042b6:	8a7b      	ldrh	r3, [r7, #18]
 80042b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d04d      	beq.n	800435c <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 80042c0:	7d7b      	ldrb	r3, [r7, #21]
 80042c2:	015b      	lsls	r3, r3, #5
 80042c4:	3328      	adds	r3, #40	; 0x28
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	4413      	add	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	7d7b      	ldrb	r3, [r7, #21]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80042e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e4:	b29c      	uxth	r4, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	7d7b      	ldrb	r3, [r7, #21]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	441a      	add	r2, r3
 80042f2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80042f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004306:	b29b      	uxth	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	4413      	add	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	4413      	add	r3, r2
 8004318:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	695a      	ldr	r2, [r3, #20]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	441a      	add	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d106      	bne.n	800434a <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	4619      	mov	r1, r3
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f009 f864 	bl	800d410 <HAL_PCD_DataInStageCallback>
 8004348:	e008      	b.n	800435c <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	7819      	ldrb	r1, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff fca5 	bl	8003ca6 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004364:	b29b      	uxth	r3, r3
 8004366:	b21b      	sxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	f6ff ad82 	blt.w	8003e72 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3724      	adds	r7, #36	; 0x24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd90      	pop	{r4, r7, pc}
 8004378:	ffff8080 	.word	0xffff8080
 800437c:	ffff80c0 	.word	0xffff80c0

08004380 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	607b      	str	r3, [r7, #4]
 800438a:	460b      	mov	r3, r1
 800438c:	817b      	strh	r3, [r7, #10]
 800438e:	4613      	mov	r3, r2
 8004390:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004392:	897b      	ldrh	r3, [r7, #10]
 8004394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d008      	beq.n	80043b0 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800439e:	897b      	ldrh	r3, [r7, #10]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	015b      	lsls	r3, r3, #5
 80043a6:	3328      	adds	r3, #40	; 0x28
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	e006      	b.n	80043be <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043b0:	897b      	ldrh	r3, [r7, #10]
 80043b2:	015b      	lsls	r3, r3, #5
 80043b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80043be:	893b      	ldrh	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d107      	bne.n	80043d4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2200      	movs	r2, #0
 80043c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	80da      	strh	r2, [r3, #6]
 80043d2:	e00b      	b.n	80043ec <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2201      	movs	r2, #1
 80043d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	b29a      	uxth	r2, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800441e:	b29b      	uxth	r3, r3
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004432:	b29b      	uxth	r3, r3
 8004434:	f043 0302 	orr.w	r3, r3, #2
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
	...

08004450 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004454:	4b04      	ldr	r3, [pc, #16]	; (8004468 <HAL_PWREx_GetVoltageRange+0x18>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40007000 	.word	0x40007000

0800446c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800447a:	d130      	bne.n	80044de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800447c:	4b23      	ldr	r3, [pc, #140]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004488:	d038      	beq.n	80044fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800448a:	4b20      	ldr	r3, [pc, #128]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004492:	4a1e      	ldr	r2, [pc, #120]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004494:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004498:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800449a:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2232      	movs	r2, #50	; 0x32
 80044a0:	fb02 f303 	mul.w	r3, r2, r3
 80044a4:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	0c9b      	lsrs	r3, r3, #18
 80044ac:	3301      	adds	r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044b0:	e002      	b.n	80044b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044b8:	4b14      	ldr	r3, [pc, #80]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c4:	d102      	bne.n	80044cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f2      	bne.n	80044b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044cc:	4b0f      	ldr	r3, [pc, #60]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d8:	d110      	bne.n	80044fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e00f      	b.n	80044fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ea:	d007      	beq.n	80044fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044ec:	4b07      	ldr	r3, [pc, #28]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044f4:	4a05      	ldr	r2, [pc, #20]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40007000 	.word	0x40007000
 8004510:	20000040 	.word	0x20000040
 8004514:	431bde83 	.word	0x431bde83

08004518 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_PWREx_EnableVddUSB+0x1c>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	4a04      	ldr	r2, [pc, #16]	; (8004534 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004526:	6053      	str	r3, [r2, #4]
}
 8004528:	bf00      	nop
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40007000 	.word	0x40007000

08004538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d102      	bne.n	800454c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	f000 bc11 	b.w	8004d6e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800454c:	4ba0      	ldr	r3, [pc, #640]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 030c 	and.w	r3, r3, #12
 8004554:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004556:	4b9e      	ldr	r3, [pc, #632]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80e4 	beq.w	8004736 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <HAL_RCC_OscConfig+0x4c>
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	2b0c      	cmp	r3, #12
 8004578:	f040 808b 	bne.w	8004692 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2b01      	cmp	r3, #1
 8004580:	f040 8087 	bne.w	8004692 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004584:	4b92      	ldr	r3, [pc, #584]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_OscConfig+0x64>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e3e8      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1a      	ldr	r2, [r3, #32]
 80045a0:	4b8b      	ldr	r3, [pc, #556]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <HAL_RCC_OscConfig+0x7e>
 80045ac:	4b88      	ldr	r3, [pc, #544]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b4:	e005      	b.n	80045c2 <HAL_RCC_OscConfig+0x8a>
 80045b6:	4b86      	ldr	r3, [pc, #536]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80045b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045bc:	091b      	lsrs	r3, r3, #4
 80045be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d223      	bcs.n	800460e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fd94 	bl	80050f8 <RCC_SetFlashLatencyFromMSIRange>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e3c9      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045da:	4b7d      	ldr	r3, [pc, #500]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a7c      	ldr	r2, [pc, #496]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80045e0:	f043 0308 	orr.w	r3, r3, #8
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	4b7a      	ldr	r3, [pc, #488]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	4977      	ldr	r1, [pc, #476]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045f8:	4b75      	ldr	r3, [pc, #468]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	021b      	lsls	r3, r3, #8
 8004606:	4972      	ldr	r1, [pc, #456]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 8004608:	4313      	orrs	r3, r2
 800460a:	604b      	str	r3, [r1, #4]
 800460c:	e025      	b.n	800465a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800460e:	4b70      	ldr	r3, [pc, #448]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a6f      	ldr	r2, [pc, #444]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 8004614:	f043 0308 	orr.w	r3, r3, #8
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	4b6d      	ldr	r3, [pc, #436]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	496a      	ldr	r1, [pc, #424]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 8004628:	4313      	orrs	r3, r2
 800462a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800462c:	4b68      	ldr	r3, [pc, #416]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	4965      	ldr	r1, [pc, #404]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fd54 	bl	80050f8 <RCC_SetFlashLatencyFromMSIRange>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e389      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800465a:	f000 fc6f 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 800465e:	4601      	mov	r1, r0
 8004660:	4b5b      	ldr	r3, [pc, #364]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	4a5a      	ldr	r2, [pc, #360]	; (80047d4 <HAL_RCC_OscConfig+0x29c>)
 800466c:	5cd3      	ldrb	r3, [r2, r3]
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	fa21 f303 	lsr.w	r3, r1, r3
 8004676:	4a58      	ldr	r2, [pc, #352]	; (80047d8 <HAL_RCC_OscConfig+0x2a0>)
 8004678:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800467a:	4b58      	ldr	r3, [pc, #352]	; (80047dc <HAL_RCC_OscConfig+0x2a4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7fd f986 	bl	8001990 <HAL_InitTick>
 8004684:	4603      	mov	r3, r0
 8004686:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004688:	7bfb      	ldrb	r3, [r7, #15]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d052      	beq.n	8004734 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	e36d      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d032      	beq.n	8004700 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800469a:	4b4d      	ldr	r3, [pc, #308]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a4c      	ldr	r2, [pc, #304]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046a6:	f7fd fe55 	bl	8002354 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046ae:	f7fd fe51 	bl	8002354 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e356      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046c0:	4b43      	ldr	r3, [pc, #268]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046cc:	4b40      	ldr	r3, [pc, #256]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a3f      	ldr	r2, [pc, #252]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80046d2:	f043 0308 	orr.w	r3, r3, #8
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	4b3d      	ldr	r3, [pc, #244]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	493a      	ldr	r1, [pc, #232]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ea:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	4935      	ldr	r1, [pc, #212]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	604b      	str	r3, [r1, #4]
 80046fe:	e01a      	b.n	8004736 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004700:	4b33      	ldr	r3, [pc, #204]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a32      	ldr	r2, [pc, #200]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800470c:	f7fd fe22 	bl	8002354 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004714:	f7fd fe1e 	bl	8002354 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e323      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004726:	4b2a      	ldr	r3, [pc, #168]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x1dc>
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004734:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d073      	beq.n	800482a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	2b08      	cmp	r3, #8
 8004746:	d005      	beq.n	8004754 <HAL_RCC_OscConfig+0x21c>
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d10e      	bne.n	800476c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b03      	cmp	r3, #3
 8004752:	d10b      	bne.n	800476c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004754:	4b1e      	ldr	r3, [pc, #120]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d063      	beq.n	8004828 <HAL_RCC_OscConfig+0x2f0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d15f      	bne.n	8004828 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e300      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004774:	d106      	bne.n	8004784 <HAL_RCC_OscConfig+0x24c>
 8004776:	4b16      	ldr	r3, [pc, #88]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 800477c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	e01d      	b.n	80047c0 <HAL_RCC_OscConfig+0x288>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800478c:	d10c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x270>
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a0f      	ldr	r2, [pc, #60]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 8004794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a0c      	ldr	r2, [pc, #48]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80047a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	e00b      	b.n	80047c0 <HAL_RCC_OscConfig+0x288>
 80047a8:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a08      	ldr	r2, [pc, #32]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80047ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a05      	ldr	r2, [pc, #20]	; (80047d0 <HAL_RCC_OscConfig+0x298>)
 80047ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01b      	beq.n	8004800 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fd fdc4 	bl	8002354 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ce:	e010      	b.n	80047f2 <HAL_RCC_OscConfig+0x2ba>
 80047d0:	40021000 	.word	0x40021000
 80047d4:	0800e558 	.word	0x0800e558
 80047d8:	20000040 	.word	0x20000040
 80047dc:	2000006c 	.word	0x2000006c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e0:	f7fd fdb8 	bl	8002354 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b64      	cmp	r3, #100	; 0x64
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e2bd      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047f2:	4baf      	ldr	r3, [pc, #700]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0x2a8>
 80047fe:	e014      	b.n	800482a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fd fda8 	bl	8002354 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004808:	f7fd fda4 	bl	8002354 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b64      	cmp	r3, #100	; 0x64
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e2a9      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800481a:	4ba5      	ldr	r3, [pc, #660]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f0      	bne.n	8004808 <HAL_RCC_OscConfig+0x2d0>
 8004826:	e000      	b.n	800482a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d060      	beq.n	80048f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b04      	cmp	r3, #4
 800483a:	d005      	beq.n	8004848 <HAL_RCC_OscConfig+0x310>
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	2b0c      	cmp	r3, #12
 8004840:	d119      	bne.n	8004876 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d116      	bne.n	8004876 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004848:	4b99      	ldr	r3, [pc, #612]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <HAL_RCC_OscConfig+0x328>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e286      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004860:	4b93      	ldr	r3, [pc, #588]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	061b      	lsls	r3, r3, #24
 800486e:	4990      	ldr	r1, [pc, #576]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004874:	e040      	b.n	80048f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d023      	beq.n	80048c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800487e:	4b8c      	ldr	r3, [pc, #560]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a8b      	ldr	r2, [pc, #556]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488a:	f7fd fd63 	bl	8002354 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004892:	f7fd fd5f 	bl	8002354 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e264      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a4:	4b82      	ldr	r3, [pc, #520]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0f0      	beq.n	8004892 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b0:	4b7f      	ldr	r3, [pc, #508]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	061b      	lsls	r3, r3, #24
 80048be:	497c      	ldr	r1, [pc, #496]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]
 80048c4:	e018      	b.n	80048f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048c6:	4b7a      	ldr	r3, [pc, #488]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a79      	ldr	r2, [pc, #484]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 80048cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d2:	f7fd fd3f 	bl	8002354 <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048d8:	e008      	b.n	80048ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048da:	f7fd fd3b 	bl	8002354 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e240      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048ec:	4b70      	ldr	r3, [pc, #448]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1f0      	bne.n	80048da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d03c      	beq.n	800497e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01c      	beq.n	8004946 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800490c:	4b68      	ldr	r3, [pc, #416]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 800490e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004912:	4a67      	ldr	r2, [pc, #412]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491c:	f7fd fd1a 	bl	8002354 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004924:	f7fd fd16 	bl	8002354 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e21b      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004936:	4b5e      	ldr	r3, [pc, #376]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0ef      	beq.n	8004924 <HAL_RCC_OscConfig+0x3ec>
 8004944:	e01b      	b.n	800497e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004946:	4b5a      	ldr	r3, [pc, #360]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800494c:	4a58      	ldr	r2, [pc, #352]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 800494e:	f023 0301 	bic.w	r3, r3, #1
 8004952:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004956:	f7fd fcfd 	bl	8002354 <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800495e:	f7fd fcf9 	bl	8002354 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e1fe      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004970:	4b4f      	ldr	r3, [pc, #316]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1ef      	bne.n	800495e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80a6 	beq.w	8004ad8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800498c:	2300      	movs	r3, #0
 800498e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004990:	4b47      	ldr	r3, [pc, #284]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10d      	bne.n	80049b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800499c:	4b44      	ldr	r3, [pc, #272]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 800499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a0:	4a43      	ldr	r2, [pc, #268]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 80049a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a6:	6593      	str	r3, [r2, #88]	; 0x58
 80049a8:	4b41      	ldr	r3, [pc, #260]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 80049aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049b4:	2301      	movs	r3, #1
 80049b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b8:	4b3e      	ldr	r3, [pc, #248]	; (8004ab4 <HAL_RCC_OscConfig+0x57c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d118      	bne.n	80049f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049c4:	4b3b      	ldr	r3, [pc, #236]	; (8004ab4 <HAL_RCC_OscConfig+0x57c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a3a      	ldr	r2, [pc, #232]	; (8004ab4 <HAL_RCC_OscConfig+0x57c>)
 80049ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049d0:	f7fd fcc0 	bl	8002354 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d8:	f7fd fcbc 	bl	8002354 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e1c1      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ea:	4b32      	ldr	r3, [pc, #200]	; (8004ab4 <HAL_RCC_OscConfig+0x57c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d108      	bne.n	8004a10 <HAL_RCC_OscConfig+0x4d8>
 80049fe:	4b2c      	ldr	r3, [pc, #176]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a04:	4a2a      	ldr	r2, [pc, #168]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a0e:	e024      	b.n	8004a5a <HAL_RCC_OscConfig+0x522>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b05      	cmp	r3, #5
 8004a16:	d110      	bne.n	8004a3a <HAL_RCC_OscConfig+0x502>
 8004a18:	4b25      	ldr	r3, [pc, #148]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	4a24      	ldr	r2, [pc, #144]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004a20:	f043 0304 	orr.w	r3, r3, #4
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a28:	4b21      	ldr	r3, [pc, #132]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2e:	4a20      	ldr	r2, [pc, #128]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a38:	e00f      	b.n	8004a5a <HAL_RCC_OscConfig+0x522>
 8004a3a:	4b1d      	ldr	r3, [pc, #116]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a40:	4a1b      	ldr	r2, [pc, #108]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004a42:	f023 0301 	bic.w	r3, r3, #1
 8004a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a4a:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a50:	4a17      	ldr	r2, [pc, #92]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004a52:	f023 0304 	bic.w	r3, r3, #4
 8004a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d016      	beq.n	8004a90 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a62:	f7fd fc77 	bl	8002354 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a68:	e00a      	b.n	8004a80 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a6a:	f7fd fc73 	bl	8002354 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e176      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <HAL_RCC_OscConfig+0x578>)
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0ed      	beq.n	8004a6a <HAL_RCC_OscConfig+0x532>
 8004a8e:	e01a      	b.n	8004ac6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a90:	f7fd fc60 	bl	8002354 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a96:	e00f      	b.n	8004ab8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a98:	f7fd fc5c 	bl	8002354 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d906      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e15f      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
 8004aae:	bf00      	nop
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ab8:	4baa      	ldr	r3, [pc, #680]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1e8      	bne.n	8004a98 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ac6:	7ffb      	ldrb	r3, [r7, #31]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d105      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004acc:	4ba5      	ldr	r3, [pc, #660]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad0:	4aa4      	ldr	r2, [pc, #656]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d03c      	beq.n	8004b5e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01c      	beq.n	8004b26 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004aec:	4b9d      	ldr	r3, [pc, #628]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004af2:	4a9c      	ldr	r2, [pc, #624]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afc:	f7fd fc2a 	bl	8002354 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b04:	f7fd fc26 	bl	8002354 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e12b      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b16:	4b93      	ldr	r3, [pc, #588]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004b18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0ef      	beq.n	8004b04 <HAL_RCC_OscConfig+0x5cc>
 8004b24:	e01b      	b.n	8004b5e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b26:	4b8f      	ldr	r3, [pc, #572]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b2c:	4a8d      	ldr	r2, [pc, #564]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b36:	f7fd fc0d 	bl	8002354 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b3e:	f7fd fc09 	bl	8002354 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e10e      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b50:	4b84      	ldr	r3, [pc, #528]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1ef      	bne.n	8004b3e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 8102 	beq.w	8004d6c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	f040 80c5 	bne.w	8004cfc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b72:	4b7c      	ldr	r3, [pc, #496]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f003 0203 	and.w	r2, r3, #3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d12c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	3b01      	subs	r3, #1
 8004b92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d123      	bne.n	8004be0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d11b      	bne.n	8004be0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d113      	bne.n	8004be0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc2:	085b      	lsrs	r3, r3, #1
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d109      	bne.n	8004be0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d067      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b0c      	cmp	r3, #12
 8004be4:	d062      	beq.n	8004cac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004be6:	4b5f      	ldr	r3, [pc, #380]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e0bb      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bf6:	4b5b      	ldr	r3, [pc, #364]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a5a      	ldr	r2, [pc, #360]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004bfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c02:	f7fd fba7 	bl	8002354 <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c08:	e008      	b.n	8004c1c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c0a:	f7fd fba3 	bl	8002354 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e0a8      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c1c:	4b51      	ldr	r3, [pc, #324]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f0      	bne.n	8004c0a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c28:	4b4e      	ldr	r3, [pc, #312]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	4b4e      	ldr	r3, [pc, #312]	; (8004d68 <HAL_RCC_OscConfig+0x830>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c38:	3a01      	subs	r2, #1
 8004c3a:	0112      	lsls	r2, r2, #4
 8004c3c:	4311      	orrs	r1, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c42:	0212      	lsls	r2, r2, #8
 8004c44:	4311      	orrs	r1, r2
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c4a:	0852      	lsrs	r2, r2, #1
 8004c4c:	3a01      	subs	r2, #1
 8004c4e:	0552      	lsls	r2, r2, #21
 8004c50:	4311      	orrs	r1, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c56:	0852      	lsrs	r2, r2, #1
 8004c58:	3a01      	subs	r2, #1
 8004c5a:	0652      	lsls	r2, r2, #25
 8004c5c:	4311      	orrs	r1, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c62:	06d2      	lsls	r2, r2, #27
 8004c64:	430a      	orrs	r2, r1
 8004c66:	493f      	ldr	r1, [pc, #252]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c6c:	4b3d      	ldr	r3, [pc, #244]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a3c      	ldr	r2, [pc, #240]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c78:	4b3a      	ldr	r3, [pc, #232]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4a39      	ldr	r2, [pc, #228]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c84:	f7fd fb66 	bl	8002354 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8c:	f7fd fb62 	bl	8002354 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e067      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c9e:	4b31      	ldr	r3, [pc, #196]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004caa:	e05f      	b.n	8004d6c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e05e      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cb0:	4b2c      	ldr	r3, [pc, #176]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d157      	bne.n	8004d6c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004cbc:	4b29      	ldr	r3, [pc, #164]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a28      	ldr	r2, [pc, #160]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cc8:	4b26      	ldr	r3, [pc, #152]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a25      	ldr	r2, [pc, #148]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cd4:	f7fd fb3e 	bl	8002354 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cdc:	f7fd fb3a 	bl	8002354 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e03f      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cee:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x7a4>
 8004cfa:	e037      	b.n	8004d6c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	2b0c      	cmp	r3, #12
 8004d00:	d02d      	beq.n	8004d5e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d02:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a17      	ldr	r2, [pc, #92]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d0c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d0e:	4b15      	ldr	r3, [pc, #84]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d105      	bne.n	8004d26 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	4a11      	ldr	r2, [pc, #68]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004d20:	f023 0303 	bic.w	r3, r3, #3
 8004d24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004d26:	4b0f      	ldr	r3, [pc, #60]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	4a0e      	ldr	r2, [pc, #56]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004d2c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d34:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d36:	f7fd fb0d 	bl	8002354 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3e:	f7fd fb09 	bl	8002354 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e00e      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d50:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <HAL_RCC_OscConfig+0x82c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f0      	bne.n	8004d3e <HAL_RCC_OscConfig+0x806>
 8004d5c:	e006      	b.n	8004d6c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e005      	b.n	8004d6e <HAL_RCC_OscConfig+0x836>
 8004d62:	bf00      	nop
 8004d64:	40021000 	.word	0x40021000
 8004d68:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop

08004d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0c8      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d8c:	4b66      	ldr	r3, [pc, #408]	; (8004f28 <HAL_RCC_ClockConfig+0x1b0>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d910      	bls.n	8004dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9a:	4b63      	ldr	r3, [pc, #396]	; (8004f28 <HAL_RCC_ClockConfig+0x1b0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f023 0207 	bic.w	r2, r3, #7
 8004da2:	4961      	ldr	r1, [pc, #388]	; (8004f28 <HAL_RCC_ClockConfig+0x1b0>)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004daa:	4b5f      	ldr	r3, [pc, #380]	; (8004f28 <HAL_RCC_ClockConfig+0x1b0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d001      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e0b0      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d04c      	beq.n	8004e62 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d107      	bne.n	8004de0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dd0:	4b56      	ldr	r3, [pc, #344]	; (8004f2c <HAL_RCC_ClockConfig+0x1b4>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d121      	bne.n	8004e20 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e09e      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d107      	bne.n	8004df8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de8:	4b50      	ldr	r3, [pc, #320]	; (8004f2c <HAL_RCC_ClockConfig+0x1b4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d115      	bne.n	8004e20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e092      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d107      	bne.n	8004e10 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e00:	4b4a      	ldr	r3, [pc, #296]	; (8004f2c <HAL_RCC_ClockConfig+0x1b4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d109      	bne.n	8004e20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e086      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e10:	4b46      	ldr	r3, [pc, #280]	; (8004f2c <HAL_RCC_ClockConfig+0x1b4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e07e      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e20:	4b42      	ldr	r3, [pc, #264]	; (8004f2c <HAL_RCC_ClockConfig+0x1b4>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f023 0203 	bic.w	r2, r3, #3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	493f      	ldr	r1, [pc, #252]	; (8004f2c <HAL_RCC_ClockConfig+0x1b4>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e32:	f7fd fa8f 	bl	8002354 <HAL_GetTick>
 8004e36:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e38:	e00a      	b.n	8004e50 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e3a:	f7fd fa8b 	bl	8002354 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e066      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e50:	4b36      	ldr	r3, [pc, #216]	; (8004f2c <HAL_RCC_ClockConfig+0x1b4>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f003 020c 	and.w	r2, r3, #12
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d1eb      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d008      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e6e:	4b2f      	ldr	r3, [pc, #188]	; (8004f2c <HAL_RCC_ClockConfig+0x1b4>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	492c      	ldr	r1, [pc, #176]	; (8004f2c <HAL_RCC_ClockConfig+0x1b4>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e80:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <HAL_RCC_ClockConfig+0x1b0>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d210      	bcs.n	8004eb0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e8e:	4b26      	ldr	r3, [pc, #152]	; (8004f28 <HAL_RCC_ClockConfig+0x1b0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f023 0207 	bic.w	r2, r3, #7
 8004e96:	4924      	ldr	r1, [pc, #144]	; (8004f28 <HAL_RCC_ClockConfig+0x1b0>)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9e:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <HAL_RCC_ClockConfig+0x1b0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e036      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ebc:	4b1b      	ldr	r3, [pc, #108]	; (8004f2c <HAL_RCC_ClockConfig+0x1b4>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4918      	ldr	r1, [pc, #96]	; (8004f2c <HAL_RCC_ClockConfig+0x1b4>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d009      	beq.n	8004eee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eda:	4b14      	ldr	r3, [pc, #80]	; (8004f2c <HAL_RCC_ClockConfig+0x1b4>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	4910      	ldr	r1, [pc, #64]	; (8004f2c <HAL_RCC_ClockConfig+0x1b4>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004eee:	f000 f825 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 8004ef2:	4601      	mov	r1, r0
 8004ef4:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <HAL_RCC_ClockConfig+0x1b4>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	4a0c      	ldr	r2, [pc, #48]	; (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004f00:	5cd3      	ldrb	r3, [r2, r3]
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	fa21 f303 	lsr.w	r3, r1, r3
 8004f0a:	4a0a      	ldr	r2, [pc, #40]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f0e:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <HAL_RCC_ClockConfig+0x1c0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fc fd3c 	bl	8001990 <HAL_InitTick>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f1c:	7afb      	ldrb	r3, [r7, #11]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40022000 	.word	0x40022000
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	0800e558 	.word	0x0800e558
 8004f34:	20000040 	.word	0x20000040
 8004f38:	2000006c 	.word	0x2000006c

08004f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b089      	sub	sp, #36	; 0x24
 8004f40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61fb      	str	r3, [r7, #28]
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f4a:	4b3d      	ldr	r3, [pc, #244]	; (8005040 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
 8004f52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f54:	4b3a      	ldr	r3, [pc, #232]	; (8005040 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <HAL_RCC_GetSysClockFreq+0x34>
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b0c      	cmp	r3, #12
 8004f68:	d121      	bne.n	8004fae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d11e      	bne.n	8004fae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f70:	4b33      	ldr	r3, [pc, #204]	; (8005040 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d107      	bne.n	8004f8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f7c:	4b30      	ldr	r3, [pc, #192]	; (8005040 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f82:	0a1b      	lsrs	r3, r3, #8
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	e005      	b.n	8004f98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f8c:	4b2c      	ldr	r3, [pc, #176]	; (8005040 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f98:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10d      	bne.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fac:	e00a      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d102      	bne.n	8004fba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fb4:	4b24      	ldr	r3, [pc, #144]	; (8005048 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fb6:	61bb      	str	r3, [r7, #24]
 8004fb8:	e004      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d101      	bne.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fc0:	4b22      	ldr	r3, [pc, #136]	; (800504c <HAL_RCC_GetSysClockFreq+0x110>)
 8004fc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	2b0c      	cmp	r3, #12
 8004fc8:	d133      	bne.n	8005032 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fca:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d002      	beq.n	8004fe0 <HAL_RCC_GetSysClockFreq+0xa4>
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d003      	beq.n	8004fe6 <HAL_RCC_GetSysClockFreq+0xaa>
 8004fde:	e005      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fe0:	4b19      	ldr	r3, [pc, #100]	; (8005048 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fe2:	617b      	str	r3, [r7, #20]
      break;
 8004fe4:	e005      	b.n	8004ff2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004fe6:	4b19      	ldr	r3, [pc, #100]	; (800504c <HAL_RCC_GetSysClockFreq+0x110>)
 8004fe8:	617b      	str	r3, [r7, #20]
      break;
 8004fea:	e002      	b.n	8004ff2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	617b      	str	r3, [r7, #20]
      break;
 8004ff0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ff2:	4b13      	ldr	r3, [pc, #76]	; (8005040 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	091b      	lsrs	r3, r3, #4
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005000:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <HAL_RCC_GetSysClockFreq+0x104>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	0a1b      	lsrs	r3, r3, #8
 8005006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	fb02 f203 	mul.w	r2, r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	fbb2 f3f3 	udiv	r3, r2, r3
 8005016:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005018:	4b09      	ldr	r3, [pc, #36]	; (8005040 <HAL_RCC_GetSysClockFreq+0x104>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	0e5b      	lsrs	r3, r3, #25
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	3301      	adds	r3, #1
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005032:	69bb      	ldr	r3, [r7, #24]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3724      	adds	r7, #36	; 0x24
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	40021000 	.word	0x40021000
 8005044:	0800e570 	.word	0x0800e570
 8005048:	00f42400 	.word	0x00f42400
 800504c:	007a1200 	.word	0x007a1200

08005050 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005054:	4b03      	ldr	r3, [pc, #12]	; (8005064 <HAL_RCC_GetHCLKFreq+0x14>)
 8005056:	681b      	ldr	r3, [r3, #0]
}
 8005058:	4618      	mov	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20000040 	.word	0x20000040

08005068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800506c:	f7ff fff0 	bl	8005050 <HAL_RCC_GetHCLKFreq>
 8005070:	4601      	mov	r1, r0
 8005072:	4b06      	ldr	r3, [pc, #24]	; (800508c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	0adb      	lsrs	r3, r3, #11
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	4a04      	ldr	r2, [pc, #16]	; (8005090 <HAL_RCC_GetPCLK2Freq+0x28>)
 800507e:	5cd3      	ldrb	r3, [r2, r3]
 8005080:	f003 031f 	and.w	r3, r3, #31
 8005084:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005088:	4618      	mov	r0, r3
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40021000 	.word	0x40021000
 8005090:	0800e568 	.word	0x0800e568

08005094 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	220f      	movs	r2, #15
 80050a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80050a4:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <HAL_RCC_GetClockConfig+0x5c>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 0203 	and.w	r2, r3, #3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80050b0:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <HAL_RCC_GetClockConfig+0x5c>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80050bc:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <HAL_RCC_GetClockConfig+0x5c>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80050c8:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <HAL_RCC_GetClockConfig+0x5c>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	08db      	lsrs	r3, r3, #3
 80050ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80050d6:	4b07      	ldr	r3, [pc, #28]	; (80050f4 <HAL_RCC_GetClockConfig+0x60>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0207 	and.w	r2, r3, #7
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	601a      	str	r2, [r3, #0]
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000
 80050f4:	40022000 	.word	0x40022000

080050f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005100:	2300      	movs	r3, #0
 8005102:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005104:	4b2a      	ldr	r3, [pc, #168]	; (80051b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005110:	f7ff f99e 	bl	8004450 <HAL_PWREx_GetVoltageRange>
 8005114:	6178      	str	r0, [r7, #20]
 8005116:	e014      	b.n	8005142 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005118:	4b25      	ldr	r3, [pc, #148]	; (80051b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800511a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511c:	4a24      	ldr	r2, [pc, #144]	; (80051b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800511e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005122:	6593      	str	r3, [r2, #88]	; 0x58
 8005124:	4b22      	ldr	r3, [pc, #136]	; (80051b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005130:	f7ff f98e 	bl	8004450 <HAL_PWREx_GetVoltageRange>
 8005134:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005136:	4b1e      	ldr	r3, [pc, #120]	; (80051b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513a:	4a1d      	ldr	r2, [pc, #116]	; (80051b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800513c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005140:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005148:	d10b      	bne.n	8005162 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b80      	cmp	r3, #128	; 0x80
 800514e:	d919      	bls.n	8005184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2ba0      	cmp	r3, #160	; 0xa0
 8005154:	d902      	bls.n	800515c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005156:	2302      	movs	r3, #2
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	e013      	b.n	8005184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800515c:	2301      	movs	r3, #1
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	e010      	b.n	8005184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b80      	cmp	r3, #128	; 0x80
 8005166:	d902      	bls.n	800516e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005168:	2303      	movs	r3, #3
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	e00a      	b.n	8005184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b80      	cmp	r3, #128	; 0x80
 8005172:	d102      	bne.n	800517a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005174:	2302      	movs	r3, #2
 8005176:	613b      	str	r3, [r7, #16]
 8005178:	e004      	b.n	8005184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b70      	cmp	r3, #112	; 0x70
 800517e:	d101      	bne.n	8005184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005180:	2301      	movs	r3, #1
 8005182:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005184:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f023 0207 	bic.w	r2, r3, #7
 800518c:	4909      	ldr	r1, [pc, #36]	; (80051b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005194:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d001      	beq.n	80051a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40021000 	.word	0x40021000
 80051b4:	40022000 	.word	0x40022000

080051b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051c0:	2300      	movs	r3, #0
 80051c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051c4:	2300      	movs	r3, #0
 80051c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d02f      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051dc:	d005      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x32>
 80051de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051e2:	d015      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80051e8:	e00f      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80051ea:	4b5d      	ldr	r3, [pc, #372]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	4a5c      	ldr	r2, [pc, #368]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051f6:	e00c      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3304      	adds	r3, #4
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fa1e 	bl	8005640 <RCCEx_PLLSAI1_Config>
 8005204:	4603      	mov	r3, r0
 8005206:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005208:	e003      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	74fb      	strb	r3, [r7, #19]
      break;
 800520e:	e000      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8005210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005212:	7cfb      	ldrb	r3, [r7, #19]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10b      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005218:	4b51      	ldr	r3, [pc, #324]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005226:	494e      	ldr	r1, [pc, #312]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800522e:	e001      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005230:	7cfb      	ldrb	r3, [r7, #19]
 8005232:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 809e 	beq.w	800537e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005242:	2300      	movs	r3, #0
 8005244:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005246:	4b46      	ldr	r3, [pc, #280]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005256:	2300      	movs	r3, #0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00d      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800525c:	4b40      	ldr	r3, [pc, #256]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800525e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005260:	4a3f      	ldr	r2, [pc, #252]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005266:	6593      	str	r3, [r2, #88]	; 0x58
 8005268:	4b3d      	ldr	r3, [pc, #244]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800526a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005270:	60bb      	str	r3, [r7, #8]
 8005272:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005274:	2301      	movs	r3, #1
 8005276:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005278:	4b3a      	ldr	r3, [pc, #232]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a39      	ldr	r2, [pc, #228]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800527e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005282:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005284:	f7fd f866 	bl	8002354 <HAL_GetTick>
 8005288:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800528a:	e009      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800528c:	f7fd f862 	bl	8002354 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d902      	bls.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	74fb      	strb	r3, [r7, #19]
        break;
 800529e:	e005      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052a0:	4b30      	ldr	r3, [pc, #192]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0ef      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d15a      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052b2:	4b2b      	ldr	r3, [pc, #172]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01e      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d019      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052da:	4b21      	ldr	r3, [pc, #132]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e0:	4a1f      	ldr	r2, [pc, #124]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052ea:	4b1d      	ldr	r3, [pc, #116]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f0:	4a1b      	ldr	r2, [pc, #108]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052fa:	4a19      	ldr	r2, [pc, #100]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d016      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fd f822 	bl	8002354 <HAL_GetTick>
 8005310:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005312:	e00b      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005314:	f7fd f81e 	bl	8002354 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005322:	4293      	cmp	r3, r2
 8005324:	d902      	bls.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	74fb      	strb	r3, [r7, #19]
            break;
 800532a:	e006      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800532c:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800532e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0ec      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800533a:	7cfb      	ldrb	r3, [r7, #19]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10b      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005346:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534e:	4904      	ldr	r1, [pc, #16]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005356:	e009      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005358:	7cfb      	ldrb	r3, [r7, #19]
 800535a:	74bb      	strb	r3, [r7, #18]
 800535c:	e006      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800535e:	bf00      	nop
 8005360:	40021000 	.word	0x40021000
 8005364:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005368:	7cfb      	ldrb	r3, [r7, #19]
 800536a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800536c:	7c7b      	ldrb	r3, [r7, #17]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d105      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005372:	4bb2      	ldr	r3, [pc, #712]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005376:	4ab1      	ldr	r2, [pc, #708]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800537c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800538a:	4bac      	ldr	r3, [pc, #688]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800538c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005390:	f023 0203 	bic.w	r2, r3, #3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	49a8      	ldr	r1, [pc, #672]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053ac:	4ba3      	ldr	r3, [pc, #652]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	f023 020c 	bic.w	r2, r3, #12
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	49a0      	ldr	r1, [pc, #640]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053ce:	4b9b      	ldr	r3, [pc, #620]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053dc:	4997      	ldr	r1, [pc, #604]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053f0:	4b92      	ldr	r3, [pc, #584]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	498f      	ldr	r1, [pc, #572]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005412:	4b8a      	ldr	r3, [pc, #552]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005418:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005420:	4986      	ldr	r1, [pc, #536]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005434:	4b81      	ldr	r3, [pc, #516]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	497e      	ldr	r1, [pc, #504]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005456:	4b79      	ldr	r3, [pc, #484]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005464:	4975      	ldr	r1, [pc, #468]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005478:	4b70      	ldr	r3, [pc, #448]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005486:	496d      	ldr	r1, [pc, #436]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800549a:	4b68      	ldr	r3, [pc, #416]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	4964      	ldr	r1, [pc, #400]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d028      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054bc:	4b5f      	ldr	r3, [pc, #380]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ca:	495c      	ldr	r1, [pc, #368]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054da:	d106      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054dc:	4b57      	ldr	r3, [pc, #348]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4a56      	ldr	r2, [pc, #344]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e6:	60d3      	str	r3, [r2, #12]
 80054e8:	e011      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054f2:	d10c      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3304      	adds	r3, #4
 80054f8:	2101      	movs	r1, #1
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 f8a0 	bl	8005640 <RCCEx_PLLSAI1_Config>
 8005500:	4603      	mov	r3, r0
 8005502:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005504:	7cfb      	ldrb	r3, [r7, #19]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 800550a:	7cfb      	ldrb	r3, [r7, #19]
 800550c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d028      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800551a:	4b48      	ldr	r3, [pc, #288]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005520:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005528:	4944      	ldr	r1, [pc, #272]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005538:	d106      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800553a:	4b40      	ldr	r3, [pc, #256]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	4a3f      	ldr	r2, [pc, #252]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005544:	60d3      	str	r3, [r2, #12]
 8005546:	e011      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005550:	d10c      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3304      	adds	r3, #4
 8005556:	2101      	movs	r1, #1
 8005558:	4618      	mov	r0, r3
 800555a:	f000 f871 	bl	8005640 <RCCEx_PLLSAI1_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005562:	7cfb      	ldrb	r3, [r7, #19]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8005568:	7cfb      	ldrb	r3, [r7, #19]
 800556a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d028      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005578:	4b30      	ldr	r3, [pc, #192]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005586:	492d      	ldr	r1, [pc, #180]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005596:	d106      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005598:	4b28      	ldr	r3, [pc, #160]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	4a27      	ldr	r2, [pc, #156]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800559e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055a2:	60d3      	str	r3, [r2, #12]
 80055a4:	e011      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055ae:	d10c      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3304      	adds	r3, #4
 80055b4:	2101      	movs	r1, #1
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f842 	bl	8005640 <RCCEx_PLLSAI1_Config>
 80055bc:	4603      	mov	r3, r0
 80055be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055c0:	7cfb      	ldrb	r3, [r7, #19]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 80055c6:	7cfb      	ldrb	r3, [r7, #19]
 80055c8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d01c      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055d6:	4b19      	ldr	r3, [pc, #100]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80055d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e4:	4915      	ldr	r1, [pc, #84]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055f4:	d10c      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3304      	adds	r3, #4
 80055fa:	2102      	movs	r1, #2
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 f81f 	bl	8005640 <RCCEx_PLLSAI1_Config>
 8005602:	4603      	mov	r3, r0
 8005604:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005606:	7cfb      	ldrb	r3, [r7, #19]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 800560c:	7cfb      	ldrb	r3, [r7, #19]
 800560e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800561c:	4b07      	ldr	r3, [pc, #28]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005622:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562a:	4904      	ldr	r1, [pc, #16]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005632:	7cbb      	ldrb	r3, [r7, #18]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40021000 	.word	0x40021000

08005640 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800564e:	4b73      	ldr	r3, [pc, #460]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d018      	beq.n	800568c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800565a:	4b70      	ldr	r3, [pc, #448]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0203 	and.w	r2, r3, #3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d10d      	bne.n	8005686 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
       ||
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005672:	4b6a      	ldr	r3, [pc, #424]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	091b      	lsrs	r3, r3, #4
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
       ||
 8005682:	429a      	cmp	r2, r3
 8005684:	d044      	beq.n	8005710 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	73fb      	strb	r3, [r7, #15]
 800568a:	e041      	b.n	8005710 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d00c      	beq.n	80056ae <RCCEx_PLLSAI1_Config+0x6e>
 8005694:	2b03      	cmp	r3, #3
 8005696:	d013      	beq.n	80056c0 <RCCEx_PLLSAI1_Config+0x80>
 8005698:	2b01      	cmp	r3, #1
 800569a:	d120      	bne.n	80056de <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800569c:	4b5f      	ldr	r3, [pc, #380]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d11d      	bne.n	80056e4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ac:	e01a      	b.n	80056e4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056ae:	4b5b      	ldr	r3, [pc, #364]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d116      	bne.n	80056e8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056be:	e013      	b.n	80056e8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056c0:	4b56      	ldr	r3, [pc, #344]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10f      	bne.n	80056ec <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056cc:	4b53      	ldr	r3, [pc, #332]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056dc:	e006      	b.n	80056ec <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	73fb      	strb	r3, [r7, #15]
      break;
 80056e2:	e004      	b.n	80056ee <RCCEx_PLLSAI1_Config+0xae>
      break;
 80056e4:	bf00      	nop
 80056e6:	e002      	b.n	80056ee <RCCEx_PLLSAI1_Config+0xae>
      break;
 80056e8:	bf00      	nop
 80056ea:	e000      	b.n	80056ee <RCCEx_PLLSAI1_Config+0xae>
      break;
 80056ec:	bf00      	nop
    }

    if(status == HAL_OK)
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10d      	bne.n	8005710 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056f4:	4b49      	ldr	r3, [pc, #292]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6819      	ldr	r1, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	3b01      	subs	r3, #1
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	430b      	orrs	r3, r1
 800570a:	4944      	ldr	r1, [pc, #272]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 800570c:	4313      	orrs	r3, r2
 800570e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d17c      	bne.n	8005810 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005716:	4b41      	ldr	r3, [pc, #260]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a40      	ldr	r2, [pc, #256]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 800571c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005722:	f7fc fe17 	bl	8002354 <HAL_GetTick>
 8005726:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005728:	e009      	b.n	800573e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800572a:	f7fc fe13 	bl	8002354 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d902      	bls.n	800573e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	73fb      	strb	r3, [r7, #15]
        break;
 800573c:	e005      	b.n	800574a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800573e:	4b37      	ldr	r3, [pc, #220]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1ef      	bne.n	800572a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d15f      	bne.n	8005810 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d110      	bne.n	8005778 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005756:	4b31      	ldr	r3, [pc, #196]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800575e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6892      	ldr	r2, [r2, #8]
 8005766:	0211      	lsls	r1, r2, #8
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	68d2      	ldr	r2, [r2, #12]
 800576c:	06d2      	lsls	r2, r2, #27
 800576e:	430a      	orrs	r2, r1
 8005770:	492a      	ldr	r1, [pc, #168]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005772:	4313      	orrs	r3, r2
 8005774:	610b      	str	r3, [r1, #16]
 8005776:	e027      	b.n	80057c8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d112      	bne.n	80057a4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800577e:	4b27      	ldr	r3, [pc, #156]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005786:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6892      	ldr	r2, [r2, #8]
 800578e:	0211      	lsls	r1, r2, #8
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6912      	ldr	r2, [r2, #16]
 8005794:	0852      	lsrs	r2, r2, #1
 8005796:	3a01      	subs	r2, #1
 8005798:	0552      	lsls	r2, r2, #21
 800579a:	430a      	orrs	r2, r1
 800579c:	491f      	ldr	r1, [pc, #124]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	610b      	str	r3, [r1, #16]
 80057a2:	e011      	b.n	80057c8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057a4:	4b1d      	ldr	r3, [pc, #116]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6892      	ldr	r2, [r2, #8]
 80057b4:	0211      	lsls	r1, r2, #8
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6952      	ldr	r2, [r2, #20]
 80057ba:	0852      	lsrs	r2, r2, #1
 80057bc:	3a01      	subs	r2, #1
 80057be:	0652      	lsls	r2, r2, #25
 80057c0:	430a      	orrs	r2, r1
 80057c2:	4916      	ldr	r1, [pc, #88]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057c8:	4b14      	ldr	r3, [pc, #80]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a13      	ldr	r2, [pc, #76]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d4:	f7fc fdbe 	bl	8002354 <HAL_GetTick>
 80057d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057da:	e009      	b.n	80057f0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057dc:	f7fc fdba 	bl	8002354 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d902      	bls.n	80057f0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	73fb      	strb	r3, [r7, #15]
          break;
 80057ee:	e005      	b.n	80057fc <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057f0:	4b0a      	ldr	r3, [pc, #40]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0ef      	beq.n	80057dc <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005802:	4b06      	ldr	r3, [pc, #24]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	4904      	ldr	r1, [pc, #16]	; (800581c <RCCEx_PLLSAI1_Config+0x1dc>)
 800580c:	4313      	orrs	r3, r2
 800580e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40021000 	.word	0x40021000

08005820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e07c      	b.n	800592c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d106      	bne.n	8005852 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7fb fff3 	bl	8001838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005868:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005872:	d902      	bls.n	800587a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	e002      	b.n	8005880 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800587a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800587e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005888:	d007      	beq.n	800589a <HAL_SPI_Init+0x7a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005892:	d002      	beq.n	800589a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10b      	bne.n	80058ba <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058aa:	d903      	bls.n	80058b4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	631a      	str	r2, [r3, #48]	; 0x30
 80058b2:	e002      	b.n	80058ba <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	ea42 0103 	orr.w	r1, r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	0c1b      	lsrs	r3, r3, #16
 80058fa:	f003 0204 	and.w	r2, r3, #4
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005908:	431a      	orrs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	ea42 0103 	orr.w	r1, r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	430a      	orrs	r2, r1
 800591a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	4613      	mov	r3, r2
 8005942:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_SPI_Transmit+0x22>
 8005952:	2302      	movs	r3, #2
 8005954:	e150      	b.n	8005bf8 <HAL_SPI_Transmit+0x2c4>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800595e:	f7fc fcf9 	bl	8002354 <HAL_GetTick>
 8005962:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b01      	cmp	r3, #1
 8005972:	d002      	beq.n	800597a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005974:	2302      	movs	r3, #2
 8005976:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005978:	e135      	b.n	8005be6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <HAL_SPI_Transmit+0x52>
 8005980:	88fb      	ldrh	r3, [r7, #6]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d102      	bne.n	800598c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	77fb      	strb	r3, [r7, #31]
    goto error;
 800598a:	e12c      	b.n	8005be6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2203      	movs	r2, #3
 8005990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	88fa      	ldrh	r2, [r7, #6]
 80059a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	88fa      	ldrh	r2, [r7, #6]
 80059aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d6:	d107      	bne.n	80059e8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d007      	beq.n	8005a06 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a0e:	d94b      	bls.n	8005aa8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_SPI_Transmit+0xea>
 8005a18:	8afb      	ldrh	r3, [r7, #22]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d13e      	bne.n	8005a9c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	881a      	ldrh	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	1c9a      	adds	r2, r3, #2
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a42:	e02b      	b.n	8005a9c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d112      	bne.n	8005a78 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	881a      	ldrh	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a62:	1c9a      	adds	r2, r3, #2
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a76:	e011      	b.n	8005a9c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a78:	f7fc fc6c 	bl	8002354 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d803      	bhi.n	8005a90 <HAL_SPI_Transmit+0x15c>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8e:	d102      	bne.n	8005a96 <HAL_SPI_Transmit+0x162>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d102      	bne.n	8005a9c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a9a:	e0a4      	b.n	8005be6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1ce      	bne.n	8005a44 <HAL_SPI_Transmit+0x110>
 8005aa6:	e07c      	b.n	8005ba2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_SPI_Transmit+0x182>
 8005ab0:	8afb      	ldrh	r3, [r7, #22]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d170      	bne.n	8005b98 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d912      	bls.n	8005ae6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	881a      	ldrh	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	1c9a      	adds	r2, r3, #2
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b02      	subs	r3, #2
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ae4:	e058      	b.n	8005b98 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	330c      	adds	r3, #12
 8005af0:	7812      	ldrb	r2, [r2, #0]
 8005af2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b0c:	e044      	b.n	8005b98 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d12b      	bne.n	8005b74 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d912      	bls.n	8005b4c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	881a      	ldrh	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	1c9a      	adds	r2, r3, #2
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b02      	subs	r3, #2
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b4a:	e025      	b.n	8005b98 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	330c      	adds	r3, #12
 8005b56:	7812      	ldrb	r2, [r2, #0]
 8005b58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b72:	e011      	b.n	8005b98 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b74:	f7fc fbee 	bl	8002354 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d803      	bhi.n	8005b8c <HAL_SPI_Transmit+0x258>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	d102      	bne.n	8005b92 <HAL_SPI_Transmit+0x25e>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d102      	bne.n	8005b98 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b96:	e026      	b.n	8005be6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1b5      	bne.n	8005b0e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 fdb4 	bl	8006714 <SPI_EndRxTxTransaction>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	613b      	str	r3, [r7, #16]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	613b      	str	r3, [r7, #16]
 8005bd4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	77fb      	strb	r3, [r7, #31]
 8005be2:	e000      	b.n	8005be6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005be4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005bf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b088      	sub	sp, #32
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c1c:	d112      	bne.n	8005c44 <HAL_SPI_Receive+0x44>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10e      	bne.n	8005c44 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2204      	movs	r2, #4
 8005c2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c2e:	88fa      	ldrh	r2, [r7, #6]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	4613      	mov	r3, r2
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 f908 	bl	8005e50 <HAL_SPI_TransmitReceive>
 8005c40:	4603      	mov	r3, r0
 8005c42:	e101      	b.n	8005e48 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d101      	bne.n	8005c52 <HAL_SPI_Receive+0x52>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	e0fa      	b.n	8005e48 <HAL_SPI_Receive+0x248>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c5a:	f7fc fb7b 	bl	8002354 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d002      	beq.n	8005c72 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c70:	e0e1      	b.n	8005e36 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <HAL_SPI_Receive+0x7e>
 8005c78:	88fb      	ldrh	r3, [r7, #6]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d102      	bne.n	8005c84 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c82:	e0d8      	b.n	8005e36 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2204      	movs	r2, #4
 8005c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	88fa      	ldrh	r2, [r7, #6]
 8005c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	88fa      	ldrh	r2, [r7, #6]
 8005ca4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cce:	d908      	bls.n	8005ce2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cde:	605a      	str	r2, [r3, #4]
 8005ce0:	e007      	b.n	8005cf2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cf0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cfa:	d107      	bne.n	8005d0c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d0a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d16:	2b40      	cmp	r3, #64	; 0x40
 8005d18:	d007      	beq.n	8005d2a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d28:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d32:	d867      	bhi.n	8005e04 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d34:	e030      	b.n	8005d98 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d117      	bne.n	8005d74 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f103 020c 	add.w	r2, r3, #12
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	7812      	ldrb	r2, [r2, #0]
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d72:	e011      	b.n	8005d98 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d74:	f7fc faee 	bl	8002354 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d803      	bhi.n	8005d8c <HAL_SPI_Receive+0x18c>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8a:	d102      	bne.n	8005d92 <HAL_SPI_Receive+0x192>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d96:	e04e      	b.n	8005e36 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1c8      	bne.n	8005d36 <HAL_SPI_Receive+0x136>
 8005da4:	e034      	b.n	8005e10 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d115      	bne.n	8005de0 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	b292      	uxth	r2, r2
 8005dc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	1c9a      	adds	r2, r3, #2
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005dde:	e011      	b.n	8005e04 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005de0:	f7fc fab8 	bl	8002354 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d803      	bhi.n	8005df8 <HAL_SPI_Receive+0x1f8>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d102      	bne.n	8005dfe <HAL_SPI_Receive+0x1fe>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d102      	bne.n	8005e04 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e02:	e018      	b.n	8005e36 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1ca      	bne.n	8005da6 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 fc25 	bl	8006664 <SPI_EndRxTransaction>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2220      	movs	r2, #32
 8005e24:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	75fb      	strb	r3, [r7, #23]
 8005e32:	e000      	b.n	8005e36 <HAL_SPI_Receive+0x236>
  }

error :
 8005e34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08a      	sub	sp, #40	; 0x28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <HAL_SPI_TransmitReceive+0x26>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e1fb      	b.n	800626e <HAL_SPI_TransmitReceive+0x41e>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e7e:	f7fc fa69 	bl	8002354 <HAL_GetTick>
 8005e82:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e8a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005e92:	887b      	ldrh	r3, [r7, #2]
 8005e94:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005e96:	887b      	ldrh	r3, [r7, #2]
 8005e98:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e9a:	7efb      	ldrb	r3, [r7, #27]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d00e      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x6e>
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea6:	d106      	bne.n	8005eb6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d102      	bne.n	8005eb6 <HAL_SPI_TransmitReceive+0x66>
 8005eb0:	7efb      	ldrb	r3, [r7, #27]
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d003      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ebc:	e1cd      	b.n	800625a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x80>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x80>
 8005eca:	887b      	ldrh	r3, [r7, #2]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d103      	bne.n	8005ed8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ed6:	e1c0      	b.n	800625a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d003      	beq.n	8005eec <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2205      	movs	r2, #5
 8005ee8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	887a      	ldrh	r2, [r7, #2]
 8005efc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	887a      	ldrh	r2, [r7, #2]
 8005f04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	887a      	ldrh	r2, [r7, #2]
 8005f12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	887a      	ldrh	r2, [r7, #2]
 8005f18:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f2e:	d802      	bhi.n	8005f36 <HAL_SPI_TransmitReceive+0xe6>
 8005f30:	8a3b      	ldrh	r3, [r7, #16]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d908      	bls.n	8005f48 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f44:	605a      	str	r2, [r3, #4]
 8005f46:	e007      	b.n	8005f58 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f56:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b40      	cmp	r3, #64	; 0x40
 8005f64:	d007      	beq.n	8005f76 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f7e:	d97c      	bls.n	800607a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <HAL_SPI_TransmitReceive+0x13e>
 8005f88:	8a7b      	ldrh	r3, [r7, #18]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d169      	bne.n	8006062 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	881a      	ldrh	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	1c9a      	adds	r2, r3, #2
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fb2:	e056      	b.n	8006062 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d11b      	bne.n	8005ffa <HAL_SPI_TransmitReceive+0x1aa>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d016      	beq.n	8005ffa <HAL_SPI_TransmitReceive+0x1aa>
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d113      	bne.n	8005ffa <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	881a      	ldrh	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	1c9a      	adds	r2, r3, #2
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b01      	cmp	r3, #1
 8006006:	d11c      	bne.n	8006042 <HAL_SPI_TransmitReceive+0x1f2>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d016      	beq.n	8006042 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	b292      	uxth	r2, r2
 8006020:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	1c9a      	adds	r2, r3, #2
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006032:	b29b      	uxth	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800603e:	2301      	movs	r3, #1
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006042:	f7fc f987 	bl	8002354 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800604e:	429a      	cmp	r2, r3
 8006050:	d807      	bhi.n	8006062 <HAL_SPI_TransmitReceive+0x212>
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006058:	d003      	beq.n	8006062 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006060:	e0fb      	b.n	800625a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006066:	b29b      	uxth	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1a3      	bne.n	8005fb4 <HAL_SPI_TransmitReceive+0x164>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006072:	b29b      	uxth	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d19d      	bne.n	8005fb4 <HAL_SPI_TransmitReceive+0x164>
 8006078:	e0df      	b.n	800623a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_SPI_TransmitReceive+0x23a>
 8006082:	8a7b      	ldrh	r3, [r7, #18]
 8006084:	2b01      	cmp	r3, #1
 8006086:	f040 80cb 	bne.w	8006220 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b01      	cmp	r3, #1
 8006092:	d912      	bls.n	80060ba <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	881a      	ldrh	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	1c9a      	adds	r2, r3, #2
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b02      	subs	r3, #2
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060b8:	e0b2      	b.n	8006220 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	330c      	adds	r3, #12
 80060c4:	7812      	ldrb	r2, [r2, #0]
 80060c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060e0:	e09e      	b.n	8006220 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d134      	bne.n	800615a <HAL_SPI_TransmitReceive+0x30a>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d02f      	beq.n	800615a <HAL_SPI_TransmitReceive+0x30a>
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d12c      	bne.n	800615a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b01      	cmp	r3, #1
 8006108:	d912      	bls.n	8006130 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	881a      	ldrh	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	1c9a      	adds	r2, r3, #2
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b02      	subs	r3, #2
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800612e:	e012      	b.n	8006156 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	330c      	adds	r3, #12
 800613a:	7812      	ldrb	r2, [r2, #0]
 800613c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b01      	subs	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b01      	cmp	r3, #1
 8006166:	d148      	bne.n	80061fa <HAL_SPI_TransmitReceive+0x3aa>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d042      	beq.n	80061fa <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800617a:	b29b      	uxth	r3, r3
 800617c:	2b01      	cmp	r3, #1
 800617e:	d923      	bls.n	80061c8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	b292      	uxth	r2, r2
 800618c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	1c9a      	adds	r2, r3, #2
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b02      	subs	r3, #2
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d81f      	bhi.n	80061f6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061c4:	605a      	str	r2, [r3, #4]
 80061c6:	e016      	b.n	80061f6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f103 020c 	add.w	r2, r3, #12
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	7812      	ldrb	r2, [r2, #0]
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061f6:	2301      	movs	r3, #1
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061fa:	f7fc f8ab 	bl	8002354 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006206:	429a      	cmp	r2, r3
 8006208:	d803      	bhi.n	8006212 <HAL_SPI_TransmitReceive+0x3c2>
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006210:	d102      	bne.n	8006218 <HAL_SPI_TransmitReceive+0x3c8>
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	2b00      	cmp	r3, #0
 8006216:	d103      	bne.n	8006220 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800621e:	e01c      	b.n	800625a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	f47f af5b 	bne.w	80060e2 <HAL_SPI_TransmitReceive+0x292>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006232:	b29b      	uxth	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	f47f af54 	bne.w	80060e2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800623a:	69fa      	ldr	r2, [r7, #28]
 800623c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fa68 	bl	8006714 <SPI_EndRxTxTransaction>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d006      	beq.n	8006258 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	661a      	str	r2, [r3, #96]	; 0x60
 8006256:	e000      	b.n	800625a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006258:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800626a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800626e:	4618      	mov	r0, r3
 8006270:	3728      	adds	r7, #40	; 0x28
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	099b      	lsrs	r3, r3, #6
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10f      	bne.n	80062bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	099b      	lsrs	r3, r3, #6
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d004      	beq.n	80062bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	4798      	blx	r3
    return;
 80062ba:	e0d8      	b.n	800646e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	085b      	lsrs	r3, r3, #1
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <HAL_SPI_IRQHandler+0x66>
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	09db      	lsrs	r3, r3, #7
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d004      	beq.n	80062de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	4798      	blx	r3
    return;
 80062dc:	e0c7      	b.n	800646e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10c      	bne.n	8006304 <HAL_SPI_IRQHandler+0x8c>
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	099b      	lsrs	r3, r3, #6
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <HAL_SPI_IRQHandler+0x8c>
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	0a1b      	lsrs	r3, r3, #8
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 80b5 	beq.w	800646e <HAL_SPI_IRQHandler+0x1f6>
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 80ae 	beq.w	800646e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	099b      	lsrs	r3, r3, #6
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d023      	beq.n	8006366 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b03      	cmp	r3, #3
 8006328:	d011      	beq.n	800634e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800632e:	f043 0204 	orr.w	r2, r3, #4
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006336:	2300      	movs	r3, #0
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	e00b      	b.n	8006366 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800634e:	2300      	movs	r3, #0
 8006350:	613b      	str	r3, [r7, #16]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	613b      	str	r3, [r7, #16]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	613b      	str	r3, [r7, #16]
 8006362:	693b      	ldr	r3, [r7, #16]
        return;
 8006364:	e083      	b.n	800646e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d014      	beq.n	800639c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006376:	f043 0201 	orr.w	r2, r3, #1
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800637e:	2300      	movs	r3, #0
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	0a1b      	lsrs	r3, r3, #8
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00c      	beq.n	80063c2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ac:	f043 0208 	orr.w	r2, r3, #8
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80063b4:	2300      	movs	r3, #0
 80063b6:	60bb      	str	r3, [r7, #8]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	60bb      	str	r3, [r7, #8]
 80063c0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d050      	beq.n	800646c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063d8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d104      	bne.n	80063f6 <HAL_SPI_IRQHandler+0x17e>
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d034      	beq.n	8006460 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0203 	bic.w	r2, r2, #3
 8006404:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640a:	2b00      	cmp	r3, #0
 800640c:	d011      	beq.n	8006432 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006412:	4a18      	ldr	r2, [pc, #96]	; (8006474 <HAL_SPI_IRQHandler+0x1fc>)
 8006414:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641a:	4618      	mov	r0, r3
 800641c:	f7fc f962 	bl	80026e4 <HAL_DMA_Abort_IT>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006436:	2b00      	cmp	r3, #0
 8006438:	d016      	beq.n	8006468 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643e:	4a0d      	ldr	r2, [pc, #52]	; (8006474 <HAL_SPI_IRQHandler+0x1fc>)
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006446:	4618      	mov	r0, r3
 8006448:	f7fc f94c 	bl	80026e4 <HAL_DMA_Abort_IT>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006456:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800645e:	e003      	b.n	8006468 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f809 	bl	8006478 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006466:	e000      	b.n	800646a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006468:	bf00      	nop
    return;
 800646a:	bf00      	nop
 800646c:	bf00      	nop
  }
}
 800646e:	3720      	adds	r7, #32
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	0800648d 	.word	0x0800648d

08006478 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f7ff ffe5 	bl	8006478 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064ae:	bf00      	nop
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	603b      	str	r3, [r7, #0]
 80064c2:	4613      	mov	r3, r2
 80064c4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064c6:	e04c      	b.n	8006562 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d048      	beq.n	8006562 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80064d0:	f7fb ff40 	bl	8002354 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d902      	bls.n	80064e6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d13d      	bne.n	8006562 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064fe:	d111      	bne.n	8006524 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006508:	d004      	beq.n	8006514 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006512:	d107      	bne.n	8006524 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006522:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800652c:	d10f      	bne.n	800654e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800654c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e00f      	b.n	8006582 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4013      	ands	r3, r2
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	429a      	cmp	r2, r3
 8006570:	bf0c      	ite	eq
 8006572:	2301      	moveq	r3, #1
 8006574:	2300      	movne	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	429a      	cmp	r2, r3
 800657e:	d1a3      	bne.n	80064c8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	607a      	str	r2, [r7, #4]
 8006596:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006598:	e057      	b.n	800664a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80065a0:	d106      	bne.n	80065b0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d103      	bne.n	80065b0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	330c      	adds	r3, #12
 80065ae:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b6:	d048      	beq.n	800664a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80065b8:	f7fb fecc 	bl	8002354 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d902      	bls.n	80065ce <SPI_WaitFifoStateUntilTimeout+0x44>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d13d      	bne.n	800664a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065e6:	d111      	bne.n	800660c <SPI_WaitFifoStateUntilTimeout+0x82>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f0:	d004      	beq.n	80065fc <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065fa:	d107      	bne.n	800660c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800660a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006614:	d10f      	bne.n	8006636 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006634:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e008      	b.n	800665c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4013      	ands	r3, r2
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	429a      	cmp	r2, r3
 8006658:	d19f      	bne.n	800659a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af02      	add	r7, sp, #8
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006678:	d111      	bne.n	800669e <SPI_EndRxTransaction+0x3a>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006682:	d004      	beq.n	800668e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668c:	d107      	bne.n	800669e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800669c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2200      	movs	r2, #0
 80066a6:	2180      	movs	r1, #128	; 0x80
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f7ff ff04 	bl	80064b6 <SPI_WaitFlagStateUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d007      	beq.n	80066c4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b8:	f043 0220 	orr.w	r2, r3, #32
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e023      	b.n	800670c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066cc:	d11d      	bne.n	800670a <SPI_EndRxTransaction+0xa6>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d6:	d004      	beq.n	80066e2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e0:	d113      	bne.n	800670a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff ff4b 	bl	800658a <SPI_WaitFifoStateUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fe:	f043 0220 	orr.w	r2, r3, #32
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e000      	b.n	800670c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af02      	add	r7, sp, #8
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2200      	movs	r2, #0
 8006728:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f7ff ff2c 	bl	800658a <SPI_WaitFifoStateUntilTimeout>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d007      	beq.n	8006748 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673c:	f043 0220 	orr.w	r2, r3, #32
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e027      	b.n	8006798 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2200      	movs	r2, #0
 8006750:	2180      	movs	r1, #128	; 0x80
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff feaf 	bl	80064b6 <SPI_WaitFlagStateUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d007      	beq.n	800676e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006762:	f043 0220 	orr.w	r2, r3, #32
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e014      	b.n	8006798 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f7ff ff05 	bl	800658a <SPI_WaitFifoStateUntilTimeout>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d007      	beq.n	8006796 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800678a:	f043 0220 	orr.w	r2, r3, #32
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e000      	b.n	8006798 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e01d      	b.n	80067ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d106      	bne.n	80067cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f815 	bl	80067f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3304      	adds	r3, #4
 80067dc:	4619      	mov	r1, r3
 80067de:	4610      	mov	r0, r2
 80067e0:	f000 f986 	bl	8006af0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
	...

0800680c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0201 	orr.w	r2, r2, #1
 8006822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	4b0c      	ldr	r3, [pc, #48]	; (800685c <HAL_TIM_Base_Start_IT+0x50>)
 800682c:	4013      	ands	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b06      	cmp	r3, #6
 8006834:	d00b      	beq.n	800684e <HAL_TIM_Base_Start_IT+0x42>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683c:	d007      	beq.n	800684e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f042 0201 	orr.w	r2, r2, #1
 800684c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	00010007 	.word	0x00010007

08006860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b02      	cmp	r3, #2
 8006874:	d122      	bne.n	80068bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b02      	cmp	r3, #2
 8006882:	d11b      	bne.n	80068bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f06f 0202 	mvn.w	r2, #2
 800688c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f905 	bl	8006ab2 <HAL_TIM_IC_CaptureCallback>
 80068a8:	e005      	b.n	80068b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f8f7 	bl	8006a9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f908 	bl	8006ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d122      	bne.n	8006910 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d11b      	bne.n	8006910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f06f 0204 	mvn.w	r2, #4
 80068e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2202      	movs	r2, #2
 80068e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f8db 	bl	8006ab2 <HAL_TIM_IC_CaptureCallback>
 80068fc:	e005      	b.n	800690a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f8cd 	bl	8006a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f8de 	bl	8006ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f003 0308 	and.w	r3, r3, #8
 800691a:	2b08      	cmp	r3, #8
 800691c:	d122      	bne.n	8006964 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f003 0308 	and.w	r3, r3, #8
 8006928:	2b08      	cmp	r3, #8
 800692a:	d11b      	bne.n	8006964 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f06f 0208 	mvn.w	r2, #8
 8006934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2204      	movs	r2, #4
 800693a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f8b1 	bl	8006ab2 <HAL_TIM_IC_CaptureCallback>
 8006950:	e005      	b.n	800695e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f8a3 	bl	8006a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f8b4 	bl	8006ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f003 0310 	and.w	r3, r3, #16
 800696e:	2b10      	cmp	r3, #16
 8006970:	d122      	bne.n	80069b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f003 0310 	and.w	r3, r3, #16
 800697c:	2b10      	cmp	r3, #16
 800697e:	d11b      	bne.n	80069b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f06f 0210 	mvn.w	r2, #16
 8006988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2208      	movs	r2, #8
 800698e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f887 	bl	8006ab2 <HAL_TIM_IC_CaptureCallback>
 80069a4:	e005      	b.n	80069b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f879 	bl	8006a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f88a 	bl	8006ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d10e      	bne.n	80069e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d107      	bne.n	80069e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f06f 0201 	mvn.w	r2, #1
 80069dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7fa fea4 	bl	800172c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ee:	2b80      	cmp	r3, #128	; 0x80
 80069f0:	d10e      	bne.n	8006a10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069fc:	2b80      	cmp	r3, #128	; 0x80
 80069fe:	d107      	bne.n	8006a10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f8de 	bl	8006bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1e:	d10e      	bne.n	8006a3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2a:	2b80      	cmp	r3, #128	; 0x80
 8006a2c:	d107      	bne.n	8006a3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f8d1 	bl	8006be0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a48:	2b40      	cmp	r3, #64	; 0x40
 8006a4a:	d10e      	bne.n	8006a6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a56:	2b40      	cmp	r3, #64	; 0x40
 8006a58:	d107      	bne.n	8006a6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f838 	bl	8006ada <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f003 0320 	and.w	r3, r3, #32
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	d10e      	bne.n	8006a96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d107      	bne.n	8006a96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f06f 0220 	mvn.w	r2, #32
 8006a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f891 	bl	8006bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a96:	bf00      	nop
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b083      	sub	sp, #12
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ae2:	bf00      	nop
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
	...

08006af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a2a      	ldr	r2, [pc, #168]	; (8006bac <TIM_Base_SetConfig+0xbc>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d003      	beq.n	8006b10 <TIM_Base_SetConfig+0x20>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0e:	d108      	bne.n	8006b22 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a21      	ldr	r2, [pc, #132]	; (8006bac <TIM_Base_SetConfig+0xbc>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00b      	beq.n	8006b42 <TIM_Base_SetConfig+0x52>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b30:	d007      	beq.n	8006b42 <TIM_Base_SetConfig+0x52>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a1e      	ldr	r2, [pc, #120]	; (8006bb0 <TIM_Base_SetConfig+0xc0>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d003      	beq.n	8006b42 <TIM_Base_SetConfig+0x52>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a1d      	ldr	r2, [pc, #116]	; (8006bb4 <TIM_Base_SetConfig+0xc4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d108      	bne.n	8006b54 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a0c      	ldr	r2, [pc, #48]	; (8006bac <TIM_Base_SetConfig+0xbc>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d007      	beq.n	8006b90 <TIM_Base_SetConfig+0xa0>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a0b      	ldr	r2, [pc, #44]	; (8006bb0 <TIM_Base_SetConfig+0xc0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d003      	beq.n	8006b90 <TIM_Base_SetConfig+0xa0>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a0a      	ldr	r2, [pc, #40]	; (8006bb4 <TIM_Base_SetConfig+0xc4>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d103      	bne.n	8006b98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	615a      	str	r2, [r3, #20]
}
 8006b9e:	bf00      	nop
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	40012c00 	.word	0x40012c00
 8006bb0:	40014000 	.word	0x40014000
 8006bb4:	40014400 	.word	0x40014400

08006bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	f107 0014 	add.w	r0, r7, #20
 8006c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	b004      	add	sp, #16
 8006c14:	4770      	bx	lr

08006c16 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b085      	sub	sp, #20
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c1e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006c22:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	4313      	orrs	r3, r2
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c50:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006c54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	43db      	mvns	r3, r3
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	4013      	ands	r3, r2
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	460b      	mov	r3, r1
 8006c88:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c98:	b084      	sub	sp, #16
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	f107 0014 	add.w	r0, r7, #20
 8006ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff ffa3 	bl	8006c16 <USB_EnableGlobalInt>

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cdc:	b004      	add	sp, #16
 8006cde:	4770      	bx	lr

08006ce0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ce0:	b490      	push	{r4, r7}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d04:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	78db      	ldrb	r3, [r3, #3]
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	d819      	bhi.n	8006d42 <USB_ActivateEndpoint+0x62>
 8006d0e:	a201      	add	r2, pc, #4	; (adr r2, 8006d14 <USB_ActivateEndpoint+0x34>)
 8006d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d14:	08006d25 	.word	0x08006d25
 8006d18:	08006d39 	.word	0x08006d39
 8006d1c:	08006d49 	.word	0x08006d49
 8006d20:	08006d2f 	.word	0x08006d2f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006d24:	89bb      	ldrh	r3, [r7, #12]
 8006d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d2a:	81bb      	strh	r3, [r7, #12]
      break;
 8006d2c:	e00d      	b.n	8006d4a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006d2e:	89bb      	ldrh	r3, [r7, #12]
 8006d30:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006d34:	81bb      	strh	r3, [r7, #12]
      break;
 8006d36:	e008      	b.n	8006d4a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006d38:	89bb      	ldrh	r3, [r7, #12]
 8006d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d3e:	81bb      	strh	r3, [r7, #12]
      break;
 8006d40:	e003      	b.n	8006d4a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	73fb      	strb	r3, [r7, #15]
      break;
 8006d46:	e000      	b.n	8006d4a <USB_ActivateEndpoint+0x6a>
      break;
 8006d48:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	441a      	add	r2, r3
 8006d54:	89bb      	ldrh	r3, [r7, #12]
 8006d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	b21b      	sxth	r3, r3
 8006d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d82:	b21a      	sxth	r2, r3
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	b21b      	sxth	r3, r3
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	b21b      	sxth	r3, r3
 8006d8e:	b29c      	uxth	r4, r3
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	441a      	add	r2, r3
 8006d9a:	4b8a      	ldr	r3, [pc, #552]	; (8006fc4 <USB_ActivateEndpoint+0x2e4>)
 8006d9c:	4323      	orrs	r3, r4
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	7b1b      	ldrb	r3, [r3, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f040 8112 	bne.w	8006fd0 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	785b      	ldrb	r3, [r3, #1]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d067      	beq.n	8006e84 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006db4:	687c      	ldr	r4, [r7, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	441c      	add	r4, r3
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	4423      	add	r3, r4
 8006dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dcc:	461c      	mov	r4, r3
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	88db      	ldrh	r3, [r3, #6]
 8006dd2:	085b      	lsrs	r3, r3, #1
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	b29c      	uxth	r4, r3
 8006dea:	4623      	mov	r3, r4
 8006dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d014      	beq.n	8006e1e <USB_ActivateEndpoint+0x13e>
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0a:	b29c      	uxth	r4, r3
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	441a      	add	r2, r3
 8006e16:	4b6c      	ldr	r3, [pc, #432]	; (8006fc8 <USB_ActivateEndpoint+0x2e8>)
 8006e18:	4323      	orrs	r3, r4
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	78db      	ldrb	r3, [r3, #3]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d018      	beq.n	8006e58 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e3c:	b29c      	uxth	r4, r3
 8006e3e:	f084 0320 	eor.w	r3, r4, #32
 8006e42:	b29c      	uxth	r4, r3
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	441a      	add	r2, r3
 8006e4e:	4b5d      	ldr	r3, [pc, #372]	; (8006fc4 <USB_ActivateEndpoint+0x2e4>)
 8006e50:	4323      	orrs	r3, r4
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	8013      	strh	r3, [r2, #0]
 8006e56:	e22b      	b.n	80072b0 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6e:	b29c      	uxth	r4, r3
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	441a      	add	r2, r3
 8006e7a:	4b52      	ldr	r3, [pc, #328]	; (8006fc4 <USB_ActivateEndpoint+0x2e4>)
 8006e7c:	4323      	orrs	r3, r4
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	8013      	strh	r3, [r2, #0]
 8006e82:	e215      	b.n	80072b0 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006e84:	687c      	ldr	r4, [r7, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	441c      	add	r4, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	00db      	lsls	r3, r3, #3
 8006e96:	4423      	add	r3, r4
 8006e98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e9c:	461c      	mov	r4, r3
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	88db      	ldrh	r3, [r3, #6]
 8006ea2:	085b      	lsrs	r3, r3, #1
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006eac:	687c      	ldr	r4, [r7, #4]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	441c      	add	r4, r3
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	00db      	lsls	r3, r3, #3
 8006ebe:	4423      	add	r3, r4
 8006ec0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ec4:	461c      	mov	r4, r3
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10e      	bne.n	8006eec <USB_ActivateEndpoint+0x20c>
 8006ece:	8823      	ldrh	r3, [r4, #0]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	8023      	strh	r3, [r4, #0]
 8006eda:	8823      	ldrh	r3, [r4, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	8023      	strh	r3, [r4, #0]
 8006eea:	e02d      	b.n	8006f48 <USB_ActivateEndpoint+0x268>
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ef2:	d812      	bhi.n	8006f1a <USB_ActivateEndpoint+0x23a>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	085b      	lsrs	r3, r3, #1
 8006efa:	60bb      	str	r3, [r7, #8]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <USB_ActivateEndpoint+0x22e>
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	60bb      	str	r3, [r7, #8]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	029b      	lsls	r3, r3, #10
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	8023      	strh	r3, [r4, #0]
 8006f18:	e016      	b.n	8006f48 <USB_ActivateEndpoint+0x268>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	60bb      	str	r3, [r7, #8]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f003 031f 	and.w	r3, r3, #31
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <USB_ActivateEndpoint+0x254>
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	60bb      	str	r3, [r7, #8]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	029b      	lsls	r3, r3, #10
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29c      	uxth	r4, r3
 8006f56:	4623      	mov	r3, r4
 8006f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d014      	beq.n	8006f8a <USB_ActivateEndpoint+0x2aa>
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f76:	b29c      	uxth	r4, r3
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	441a      	add	r2, r3
 8006f82:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <USB_ActivateEndpoint+0x2ec>)
 8006f84:	4323      	orrs	r3, r4
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa0:	b29c      	uxth	r4, r3
 8006fa2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006fa6:	b29c      	uxth	r4, r3
 8006fa8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006fac:	b29c      	uxth	r4, r3
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	441a      	add	r2, r3
 8006fb8:	4b02      	ldr	r3, [pc, #8]	; (8006fc4 <USB_ActivateEndpoint+0x2e4>)
 8006fba:	4323      	orrs	r3, r4
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	8013      	strh	r3, [r2, #0]
 8006fc0:	e176      	b.n	80072b0 <USB_ActivateEndpoint+0x5d0>
 8006fc2:	bf00      	nop
 8006fc4:	ffff8080 	.word	0xffff8080
 8006fc8:	ffff80c0 	.word	0xffff80c0
 8006fcc:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	881b      	ldrh	r3, [r3, #0]
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe6:	b29c      	uxth	r4, r3
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	441a      	add	r2, r3
 8006ff2:	4b96      	ldr	r3, [pc, #600]	; (800724c <USB_ActivateEndpoint+0x56c>)
 8006ff4:	4323      	orrs	r3, r4
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ffa:	687c      	ldr	r4, [r7, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007002:	b29b      	uxth	r3, r3
 8007004:	441c      	add	r4, r3
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	4423      	add	r3, r4
 800700e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007012:	461c      	mov	r4, r3
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	891b      	ldrh	r3, [r3, #8]
 8007018:	085b      	lsrs	r3, r3, #1
 800701a:	b29b      	uxth	r3, r3
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	b29b      	uxth	r3, r3
 8007020:	8023      	strh	r3, [r4, #0]
 8007022:	687c      	ldr	r4, [r7, #4]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800702a:	b29b      	uxth	r3, r3
 800702c:	441c      	add	r4, r3
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	4423      	add	r3, r4
 8007036:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800703a:	461c      	mov	r4, r3
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	895b      	ldrh	r3, [r3, #10]
 8007040:	085b      	lsrs	r3, r3, #1
 8007042:	b29b      	uxth	r3, r3
 8007044:	005b      	lsls	r3, r3, #1
 8007046:	b29b      	uxth	r3, r3
 8007048:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	2b00      	cmp	r3, #0
 8007050:	f040 8088 	bne.w	8007164 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	b29c      	uxth	r4, r3
 8007062:	4623      	mov	r3, r4
 8007064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d014      	beq.n	8007096 <USB_ActivateEndpoint+0x3b6>
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	b29b      	uxth	r3, r3
 800707a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007082:	b29c      	uxth	r4, r3
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	441a      	add	r2, r3
 800708e:	4b70      	ldr	r3, [pc, #448]	; (8007250 <USB_ActivateEndpoint+0x570>)
 8007090:	4323      	orrs	r3, r4
 8007092:	b29b      	uxth	r3, r3
 8007094:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	b29c      	uxth	r4, r3
 80070a4:	4623      	mov	r3, r4
 80070a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d014      	beq.n	80070d8 <USB_ActivateEndpoint+0x3f8>
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c4:	b29c      	uxth	r4, r3
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	441a      	add	r2, r3
 80070d0:	4b60      	ldr	r3, [pc, #384]	; (8007254 <USB_ActivateEndpoint+0x574>)
 80070d2:	4323      	orrs	r3, r4
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ee:	b29c      	uxth	r4, r3
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	441a      	add	r2, r3
 80070fa:	4b56      	ldr	r3, [pc, #344]	; (8007254 <USB_ActivateEndpoint+0x574>)
 80070fc:	4323      	orrs	r3, r4
 80070fe:	b29b      	uxth	r3, r3
 8007100:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007118:	b29c      	uxth	r4, r3
 800711a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800711e:	b29c      	uxth	r4, r3
 8007120:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007124:	b29c      	uxth	r4, r3
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	441a      	add	r2, r3
 8007130:	4b49      	ldr	r3, [pc, #292]	; (8007258 <USB_ActivateEndpoint+0x578>)
 8007132:	4323      	orrs	r3, r4
 8007134:	b29b      	uxth	r3, r3
 8007136:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29b      	uxth	r3, r3
 8007146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800714a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800714e:	b29c      	uxth	r4, r3
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	441a      	add	r2, r3
 800715a:	4b3f      	ldr	r3, [pc, #252]	; (8007258 <USB_ActivateEndpoint+0x578>)
 800715c:	4323      	orrs	r3, r4
 800715e:	b29b      	uxth	r3, r3
 8007160:	8013      	strh	r3, [r2, #0]
 8007162:	e0a5      	b.n	80072b0 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	b29c      	uxth	r4, r3
 8007172:	4623      	mov	r3, r4
 8007174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d014      	beq.n	80071a6 <USB_ActivateEndpoint+0x4c6>
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	b29b      	uxth	r3, r3
 800718a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800718e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007192:	b29c      	uxth	r4, r3
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	441a      	add	r2, r3
 800719e:	4b2c      	ldr	r3, [pc, #176]	; (8007250 <USB_ActivateEndpoint+0x570>)
 80071a0:	4323      	orrs	r3, r4
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	b29c      	uxth	r4, r3
 80071b4:	4623      	mov	r3, r4
 80071b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d014      	beq.n	80071e8 <USB_ActivateEndpoint+0x508>
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d4:	b29c      	uxth	r4, r3
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	441a      	add	r2, r3
 80071e0:	4b1c      	ldr	r3, [pc, #112]	; (8007254 <USB_ActivateEndpoint+0x574>)
 80071e2:	4323      	orrs	r3, r4
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071fe:	b29c      	uxth	r4, r3
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	441a      	add	r2, r3
 800720a:	4b11      	ldr	r3, [pc, #68]	; (8007250 <USB_ActivateEndpoint+0x570>)
 800720c:	4323      	orrs	r3, r4
 800720e:	b29b      	uxth	r3, r3
 8007210:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	78db      	ldrb	r3, [r3, #3]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d020      	beq.n	800725c <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	b29b      	uxth	r3, r3
 8007228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800722c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007230:	b29c      	uxth	r4, r3
 8007232:	f084 0320 	eor.w	r3, r4, #32
 8007236:	b29c      	uxth	r4, r3
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	441a      	add	r2, r3
 8007242:	4b05      	ldr	r3, [pc, #20]	; (8007258 <USB_ActivateEndpoint+0x578>)
 8007244:	4323      	orrs	r3, r4
 8007246:	b29b      	uxth	r3, r3
 8007248:	8013      	strh	r3, [r2, #0]
 800724a:	e01c      	b.n	8007286 <USB_ActivateEndpoint+0x5a6>
 800724c:	ffff8180 	.word	0xffff8180
 8007250:	ffffc080 	.word	0xffffc080
 8007254:	ffff80c0 	.word	0xffff80c0
 8007258:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	b29b      	uxth	r3, r3
 800726a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800726e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007272:	b29c      	uxth	r4, r3
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	441a      	add	r2, r3
 800727e:	4b0f      	ldr	r3, [pc, #60]	; (80072bc <USB_ActivateEndpoint+0x5dc>)
 8007280:	4323      	orrs	r3, r4
 8007282:	b29b      	uxth	r3, r3
 8007284:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	b29b      	uxth	r3, r3
 8007294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729c:	b29c      	uxth	r4, r3
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	441a      	add	r2, r3
 80072a8:	4b04      	ldr	r3, [pc, #16]	; (80072bc <USB_ActivateEndpoint+0x5dc>)
 80072aa:	4323      	orrs	r3, r4
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bc90      	pop	{r4, r7}
 80072ba:	4770      	bx	lr
 80072bc:	ffff8080 	.word	0xffff8080

080072c0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072c0:	b490      	push	{r4, r7}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	7b1b      	ldrb	r3, [r3, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d171      	bne.n	80073b6 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	785b      	ldrb	r3, [r3, #1]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d036      	beq.n	8007348 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	b29c      	uxth	r4, r3
 80072e8:	4623      	mov	r3, r4
 80072ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d014      	beq.n	800731c <USB_DeactivateEndpoint+0x5c>
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007308:	b29c      	uxth	r4, r3
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	441a      	add	r2, r3
 8007314:	4b6b      	ldr	r3, [pc, #428]	; (80074c4 <USB_DeactivateEndpoint+0x204>)
 8007316:	4323      	orrs	r3, r4
 8007318:	b29b      	uxth	r3, r3
 800731a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800732e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007332:	b29c      	uxth	r4, r3
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	441a      	add	r2, r3
 800733e:	4b62      	ldr	r3, [pc, #392]	; (80074c8 <USB_DeactivateEndpoint+0x208>)
 8007340:	4323      	orrs	r3, r4
 8007342:	b29b      	uxth	r3, r3
 8007344:	8013      	strh	r3, [r2, #0]
 8007346:	e144      	b.n	80075d2 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29c      	uxth	r4, r3
 8007356:	4623      	mov	r3, r4
 8007358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d014      	beq.n	800738a <USB_DeactivateEndpoint+0xca>
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b29b      	uxth	r3, r3
 800736e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007376:	b29c      	uxth	r4, r3
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	441a      	add	r2, r3
 8007382:	4b52      	ldr	r3, [pc, #328]	; (80074cc <USB_DeactivateEndpoint+0x20c>)
 8007384:	4323      	orrs	r3, r4
 8007386:	b29b      	uxth	r3, r3
 8007388:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800739c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a0:	b29c      	uxth	r4, r3
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	441a      	add	r2, r3
 80073ac:	4b46      	ldr	r3, [pc, #280]	; (80074c8 <USB_DeactivateEndpoint+0x208>)
 80073ae:	4323      	orrs	r3, r4
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	8013      	strh	r3, [r2, #0]
 80073b4:	e10d      	b.n	80075d2 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	785b      	ldrb	r3, [r3, #1]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f040 8088 	bne.w	80074d0 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	881b      	ldrh	r3, [r3, #0]
 80073cc:	b29c      	uxth	r4, r3
 80073ce:	4623      	mov	r3, r4
 80073d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d014      	beq.n	8007402 <USB_DeactivateEndpoint+0x142>
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ee:	b29c      	uxth	r4, r3
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	441a      	add	r2, r3
 80073fa:	4b34      	ldr	r3, [pc, #208]	; (80074cc <USB_DeactivateEndpoint+0x20c>)
 80073fc:	4323      	orrs	r3, r4
 80073fe:	b29b      	uxth	r3, r3
 8007400:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b29c      	uxth	r4, r3
 8007410:	4623      	mov	r3, r4
 8007412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007416:	2b00      	cmp	r3, #0
 8007418:	d014      	beq.n	8007444 <USB_DeactivateEndpoint+0x184>
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007430:	b29c      	uxth	r4, r3
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	441a      	add	r2, r3
 800743c:	4b21      	ldr	r3, [pc, #132]	; (80074c4 <USB_DeactivateEndpoint+0x204>)
 800743e:	4323      	orrs	r3, r4
 8007440:	b29b      	uxth	r3, r3
 8007442:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	b29b      	uxth	r3, r3
 8007452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800745a:	b29c      	uxth	r4, r3
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	441a      	add	r2, r3
 8007466:	4b17      	ldr	r3, [pc, #92]	; (80074c4 <USB_DeactivateEndpoint+0x204>)
 8007468:	4323      	orrs	r3, r4
 800746a:	b29b      	uxth	r3, r3
 800746c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007484:	b29c      	uxth	r4, r3
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	441a      	add	r2, r3
 8007490:	4b0d      	ldr	r3, [pc, #52]	; (80074c8 <USB_DeactivateEndpoint+0x208>)
 8007492:	4323      	orrs	r3, r4
 8007494:	b29b      	uxth	r3, r3
 8007496:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ae:	b29c      	uxth	r4, r3
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	441a      	add	r2, r3
 80074ba:	4b03      	ldr	r3, [pc, #12]	; (80074c8 <USB_DeactivateEndpoint+0x208>)
 80074bc:	4323      	orrs	r3, r4
 80074be:	b29b      	uxth	r3, r3
 80074c0:	8013      	strh	r3, [r2, #0]
 80074c2:	e086      	b.n	80075d2 <USB_DeactivateEndpoint+0x312>
 80074c4:	ffff80c0 	.word	0xffff80c0
 80074c8:	ffff8080 	.word	0xffff8080
 80074cc:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	b29c      	uxth	r4, r3
 80074de:	4623      	mov	r3, r4
 80074e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d014      	beq.n	8007512 <USB_DeactivateEndpoint+0x252>
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fe:	b29c      	uxth	r4, r3
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	441a      	add	r2, r3
 800750a:	4b35      	ldr	r3, [pc, #212]	; (80075e0 <USB_DeactivateEndpoint+0x320>)
 800750c:	4323      	orrs	r3, r4
 800750e:	b29b      	uxth	r3, r3
 8007510:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29c      	uxth	r4, r3
 8007520:	4623      	mov	r3, r4
 8007522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007526:	2b00      	cmp	r3, #0
 8007528:	d014      	beq.n	8007554 <USB_DeactivateEndpoint+0x294>
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800753c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007540:	b29c      	uxth	r4, r3
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	441a      	add	r2, r3
 800754c:	4b25      	ldr	r3, [pc, #148]	; (80075e4 <USB_DeactivateEndpoint+0x324>)
 800754e:	4323      	orrs	r3, r4
 8007550:	b29b      	uxth	r3, r3
 8007552:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	b29b      	uxth	r3, r3
 8007562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756a:	b29c      	uxth	r4, r3
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	441a      	add	r2, r3
 8007576:	4b1a      	ldr	r3, [pc, #104]	; (80075e0 <USB_DeactivateEndpoint+0x320>)
 8007578:	4323      	orrs	r3, r4
 800757a:	b29b      	uxth	r3, r3
 800757c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007594:	b29c      	uxth	r4, r3
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	441a      	add	r2, r3
 80075a0:	4b11      	ldr	r3, [pc, #68]	; (80075e8 <USB_DeactivateEndpoint+0x328>)
 80075a2:	4323      	orrs	r3, r4
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075be:	b29c      	uxth	r4, r3
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	441a      	add	r2, r3
 80075ca:	4b07      	ldr	r3, [pc, #28]	; (80075e8 <USB_DeactivateEndpoint+0x328>)
 80075cc:	4323      	orrs	r3, r4
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc90      	pop	{r4, r7}
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	ffffc080 	.word	0xffffc080
 80075e4:	ffff80c0 	.word	0xffff80c0
 80075e8:	ffff8080 	.word	0xffff8080

080075ec <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075ec:	b590      	push	{r4, r7, lr}
 80075ee:	b08d      	sub	sp, #52	; 0x34
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	785b      	ldrb	r3, [r3, #1]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	f040 8160 	bne.w	80078c0 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	699a      	ldr	r2, [r3, #24]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	429a      	cmp	r2, r3
 800760a:	d909      	bls.n	8007620 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	699a      	ldr	r2, [r3, #24]
 8007616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007618:	1ad2      	subs	r2, r2, r3
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	619a      	str	r2, [r3, #24]
 800761e:	e005      	b.n	800762c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2200      	movs	r2, #0
 800762a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	7b1b      	ldrb	r3, [r3, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d119      	bne.n	8007668 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	6959      	ldr	r1, [r3, #20]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	88da      	ldrh	r2, [r3, #6]
 800763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763e:	b29b      	uxth	r3, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fbbd 	bl	8007dc0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007646:	687c      	ldr	r4, [r7, #4]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800764e:	b29b      	uxth	r3, r3
 8007650:	441c      	add	r4, r3
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	4423      	add	r3, r4
 800765a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800765e:	461c      	mov	r4, r3
 8007660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007662:	b29b      	uxth	r3, r3
 8007664:	8023      	strh	r3, [r4, #0]
 8007666:	e10f      	b.n	8007888 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	881b      	ldrh	r3, [r3, #0]
 8007674:	b29b      	uxth	r3, r3
 8007676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767a:	2b00      	cmp	r3, #0
 800767c:	d065      	beq.n	800774a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800767e:	687c      	ldr	r4, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	785b      	ldrb	r3, [r3, #1]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d148      	bne.n	800771a <USB_EPStartXfer+0x12e>
 8007688:	687c      	ldr	r4, [r7, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007690:	b29b      	uxth	r3, r3
 8007692:	441c      	add	r4, r3
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	4423      	add	r3, r4
 800769c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076a0:	461c      	mov	r4, r3
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10e      	bne.n	80076c6 <USB_EPStartXfer+0xda>
 80076a8:	8823      	ldrh	r3, [r4, #0]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	8023      	strh	r3, [r4, #0]
 80076b4:	8823      	ldrh	r3, [r4, #0]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	8023      	strh	r3, [r4, #0]
 80076c4:	e03d      	b.n	8007742 <USB_EPStartXfer+0x156>
 80076c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c8:	2b3e      	cmp	r3, #62	; 0x3e
 80076ca:	d810      	bhi.n	80076ee <USB_EPStartXfer+0x102>
 80076cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	627b      	str	r3, [r7, #36]	; 0x24
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <USB_EPStartXfer+0xf6>
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	3301      	adds	r3, #1
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	029b      	lsls	r3, r3, #10
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	8023      	strh	r3, [r4, #0]
 80076ec:	e029      	b.n	8007742 <USB_EPStartXfer+0x156>
 80076ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f0:	095b      	lsrs	r3, r3, #5
 80076f2:	627b      	str	r3, [r7, #36]	; 0x24
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	f003 031f 	and.w	r3, r3, #31
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d102      	bne.n	8007704 <USB_EPStartXfer+0x118>
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	3b01      	subs	r3, #1
 8007702:	627b      	str	r3, [r7, #36]	; 0x24
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	b29b      	uxth	r3, r3
 8007708:	029b      	lsls	r3, r3, #10
 800770a:	b29b      	uxth	r3, r3
 800770c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007714:	b29b      	uxth	r3, r3
 8007716:	8023      	strh	r3, [r4, #0]
 8007718:	e013      	b.n	8007742 <USB_EPStartXfer+0x156>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	785b      	ldrb	r3, [r3, #1]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d10f      	bne.n	8007742 <USB_EPStartXfer+0x156>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007728:	b29b      	uxth	r3, r3
 800772a:	441c      	add	r4, r3
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	00db      	lsls	r3, r3, #3
 8007732:	4423      	add	r3, r4
 8007734:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	b29a      	uxth	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	895b      	ldrh	r3, [r3, #10]
 8007746:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007748:	e063      	b.n	8007812 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	785b      	ldrb	r3, [r3, #1]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d148      	bne.n	80077e4 <USB_EPStartXfer+0x1f8>
 8007752:	687c      	ldr	r4, [r7, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800775a:	b29b      	uxth	r3, r3
 800775c:	441c      	add	r4, r3
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	4423      	add	r3, r4
 8007766:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800776a:	461c      	mov	r4, r3
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10e      	bne.n	8007790 <USB_EPStartXfer+0x1a4>
 8007772:	8823      	ldrh	r3, [r4, #0]
 8007774:	b29b      	uxth	r3, r3
 8007776:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800777a:	b29b      	uxth	r3, r3
 800777c:	8023      	strh	r3, [r4, #0]
 800777e:	8823      	ldrh	r3, [r4, #0]
 8007780:	b29b      	uxth	r3, r3
 8007782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800778a:	b29b      	uxth	r3, r3
 800778c:	8023      	strh	r3, [r4, #0]
 800778e:	e03d      	b.n	800780c <USB_EPStartXfer+0x220>
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	2b3e      	cmp	r3, #62	; 0x3e
 8007794:	d810      	bhi.n	80077b8 <USB_EPStartXfer+0x1cc>
 8007796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007798:	085b      	lsrs	r3, r3, #1
 800779a:	623b      	str	r3, [r7, #32]
 800779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <USB_EPStartXfer+0x1c0>
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	3301      	adds	r3, #1
 80077aa:	623b      	str	r3, [r7, #32]
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	029b      	lsls	r3, r3, #10
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	8023      	strh	r3, [r4, #0]
 80077b6:	e029      	b.n	800780c <USB_EPStartXfer+0x220>
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	095b      	lsrs	r3, r3, #5
 80077bc:	623b      	str	r3, [r7, #32]
 80077be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c0:	f003 031f 	and.w	r3, r3, #31
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d102      	bne.n	80077ce <USB_EPStartXfer+0x1e2>
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	623b      	str	r3, [r7, #32]
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	029b      	lsls	r3, r3, #10
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077de:	b29b      	uxth	r3, r3
 80077e0:	8023      	strh	r3, [r4, #0]
 80077e2:	e013      	b.n	800780c <USB_EPStartXfer+0x220>
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	785b      	ldrb	r3, [r3, #1]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d10f      	bne.n	800780c <USB_EPStartXfer+0x220>
 80077ec:	687c      	ldr	r4, [r7, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	441c      	add	r4, r3
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	4423      	add	r3, r4
 8007800:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007804:	461c      	mov	r4, r3
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	b29b      	uxth	r3, r3
 800780a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	891b      	ldrh	r3, [r3, #8]
 8007810:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	6959      	ldr	r1, [r3, #20]
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	b29b      	uxth	r3, r3
 800781a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 facf 	bl	8007dc0 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	785b      	ldrb	r3, [r3, #1]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d115      	bne.n	8007856 <USB_EPStartXfer+0x26a>
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	b29b      	uxth	r3, r3
 8007838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800783c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007840:	b29c      	uxth	r4, r3
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	441a      	add	r2, r3
 800784c:	4b9a      	ldr	r3, [pc, #616]	; (8007ab8 <USB_EPStartXfer+0x4cc>)
 800784e:	4323      	orrs	r3, r4
 8007850:	b29b      	uxth	r3, r3
 8007852:	8013      	strh	r3, [r2, #0]
 8007854:	e018      	b.n	8007888 <USB_EPStartXfer+0x29c>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d114      	bne.n	8007888 <USB_EPStartXfer+0x29c>
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007874:	b29c      	uxth	r4, r3
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	441a      	add	r2, r3
 8007880:	4b8e      	ldr	r3, [pc, #568]	; (8007abc <USB_EPStartXfer+0x4d0>)
 8007882:	4323      	orrs	r3, r4
 8007884:	b29b      	uxth	r3, r3
 8007886:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	b29b      	uxth	r3, r3
 8007896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800789a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800789e:	b29c      	uxth	r4, r3
 80078a0:	f084 0310 	eor.w	r3, r4, #16
 80078a4:	b29c      	uxth	r4, r3
 80078a6:	f084 0320 	eor.w	r3, r4, #32
 80078aa:	b29c      	uxth	r4, r3
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	441a      	add	r2, r3
 80078b6:	4b82      	ldr	r3, [pc, #520]	; (8007ac0 <USB_EPStartXfer+0x4d4>)
 80078b8:	4323      	orrs	r3, r4
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	8013      	strh	r3, [r2, #0]
 80078be:	e146      	b.n	8007b4e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	699a      	ldr	r2, [r3, #24]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d909      	bls.n	80078e0 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	699a      	ldr	r2, [r3, #24]
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	1ad2      	subs	r2, r2, r3
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	619a      	str	r2, [r3, #24]
 80078de:	e005      	b.n	80078ec <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2200      	movs	r2, #0
 80078ea:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	7b1b      	ldrb	r3, [r3, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d148      	bne.n	8007986 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80078f4:	687c      	ldr	r4, [r7, #4]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	441c      	add	r4, r3
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	4423      	add	r3, r4
 8007908:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800790c:	461c      	mov	r4, r3
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10e      	bne.n	8007932 <USB_EPStartXfer+0x346>
 8007914:	8823      	ldrh	r3, [r4, #0]
 8007916:	b29b      	uxth	r3, r3
 8007918:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800791c:	b29b      	uxth	r3, r3
 800791e:	8023      	strh	r3, [r4, #0]
 8007920:	8823      	ldrh	r3, [r4, #0]
 8007922:	b29b      	uxth	r3, r3
 8007924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800792c:	b29b      	uxth	r3, r3
 800792e:	8023      	strh	r3, [r4, #0]
 8007930:	e0f2      	b.n	8007b18 <USB_EPStartXfer+0x52c>
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	2b3e      	cmp	r3, #62	; 0x3e
 8007936:	d810      	bhi.n	800795a <USB_EPStartXfer+0x36e>
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	085b      	lsrs	r3, r3, #1
 800793c:	61fb      	str	r3, [r7, #28]
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <USB_EPStartXfer+0x362>
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	3301      	adds	r3, #1
 800794c:	61fb      	str	r3, [r7, #28]
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	b29b      	uxth	r3, r3
 8007952:	029b      	lsls	r3, r3, #10
 8007954:	b29b      	uxth	r3, r3
 8007956:	8023      	strh	r3, [r4, #0]
 8007958:	e0de      	b.n	8007b18 <USB_EPStartXfer+0x52c>
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	61fb      	str	r3, [r7, #28]
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	f003 031f 	and.w	r3, r3, #31
 8007966:	2b00      	cmp	r3, #0
 8007968:	d102      	bne.n	8007970 <USB_EPStartXfer+0x384>
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	3b01      	subs	r3, #1
 800796e:	61fb      	str	r3, [r7, #28]
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	b29b      	uxth	r3, r3
 8007974:	029b      	lsls	r3, r3, #10
 8007976:	b29b      	uxth	r3, r3
 8007978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800797c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007980:	b29b      	uxth	r3, r3
 8007982:	8023      	strh	r3, [r4, #0]
 8007984:	e0c8      	b.n	8007b18 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	785b      	ldrb	r3, [r3, #1]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d148      	bne.n	8007a20 <USB_EPStartXfer+0x434>
 800798e:	687c      	ldr	r4, [r7, #4]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007996:	b29b      	uxth	r3, r3
 8007998:	441c      	add	r4, r3
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	00db      	lsls	r3, r3, #3
 80079a0:	4423      	add	r3, r4
 80079a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079a6:	461c      	mov	r4, r3
 80079a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10e      	bne.n	80079cc <USB_EPStartXfer+0x3e0>
 80079ae:	8823      	ldrh	r3, [r4, #0]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	8023      	strh	r3, [r4, #0]
 80079ba:	8823      	ldrh	r3, [r4, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	8023      	strh	r3, [r4, #0]
 80079ca:	e03d      	b.n	8007a48 <USB_EPStartXfer+0x45c>
 80079cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ce:	2b3e      	cmp	r3, #62	; 0x3e
 80079d0:	d810      	bhi.n	80079f4 <USB_EPStartXfer+0x408>
 80079d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d4:	085b      	lsrs	r3, r3, #1
 80079d6:	61bb      	str	r3, [r7, #24]
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <USB_EPStartXfer+0x3fc>
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	3301      	adds	r3, #1
 80079e6:	61bb      	str	r3, [r7, #24]
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	029b      	lsls	r3, r3, #10
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	8023      	strh	r3, [r4, #0]
 80079f2:	e029      	b.n	8007a48 <USB_EPStartXfer+0x45c>
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	095b      	lsrs	r3, r3, #5
 80079f8:	61bb      	str	r3, [r7, #24]
 80079fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fc:	f003 031f 	and.w	r3, r3, #31
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d102      	bne.n	8007a0a <USB_EPStartXfer+0x41e>
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	61bb      	str	r3, [r7, #24]
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	029b      	lsls	r3, r3, #10
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	8023      	strh	r3, [r4, #0]
 8007a1e:	e013      	b.n	8007a48 <USB_EPStartXfer+0x45c>
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	785b      	ldrb	r3, [r3, #1]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d10f      	bne.n	8007a48 <USB_EPStartXfer+0x45c>
 8007a28:	687c      	ldr	r4, [r7, #4]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	441c      	add	r4, r3
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	00db      	lsls	r3, r3, #3
 8007a3a:	4423      	add	r3, r4
 8007a3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a40:	461c      	mov	r4, r3
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	8023      	strh	r3, [r4, #0]
 8007a48:	687c      	ldr	r4, [r7, #4]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	785b      	ldrb	r3, [r3, #1]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d14e      	bne.n	8007af0 <USB_EPStartXfer+0x504>
 8007a52:	687c      	ldr	r4, [r7, #4]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	441c      	add	r4, r3
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	4423      	add	r3, r4
 8007a66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a6a:	461c      	mov	r4, r3
 8007a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10e      	bne.n	8007a90 <USB_EPStartXfer+0x4a4>
 8007a72:	8823      	ldrh	r3, [r4, #0]
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	8023      	strh	r3, [r4, #0]
 8007a7e:	8823      	ldrh	r3, [r4, #0]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	8023      	strh	r3, [r4, #0]
 8007a8e:	e043      	b.n	8007b18 <USB_EPStartXfer+0x52c>
 8007a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a92:	2b3e      	cmp	r3, #62	; 0x3e
 8007a94:	d816      	bhi.n	8007ac4 <USB_EPStartXfer+0x4d8>
 8007a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a98:	085b      	lsrs	r3, r3, #1
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d002      	beq.n	8007aac <USB_EPStartXfer+0x4c0>
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	617b      	str	r3, [r7, #20]
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	029b      	lsls	r3, r3, #10
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	8023      	strh	r3, [r4, #0]
 8007ab6:	e02f      	b.n	8007b18 <USB_EPStartXfer+0x52c>
 8007ab8:	ffff80c0 	.word	0xffff80c0
 8007abc:	ffffc080 	.word	0xffffc080
 8007ac0:	ffff8080 	.word	0xffff8080
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	095b      	lsrs	r3, r3, #5
 8007ac8:	617b      	str	r3, [r7, #20]
 8007aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007acc:	f003 031f 	and.w	r3, r3, #31
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d102      	bne.n	8007ada <USB_EPStartXfer+0x4ee>
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	617b      	str	r3, [r7, #20]
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	029b      	lsls	r3, r3, #10
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	8023      	strh	r3, [r4, #0]
 8007aee:	e013      	b.n	8007b18 <USB_EPStartXfer+0x52c>
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	785b      	ldrb	r3, [r3, #1]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d10f      	bne.n	8007b18 <USB_EPStartXfer+0x52c>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	441c      	add	r4, r3
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	4423      	add	r3, r4
 8007b0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b0e:	613b      	str	r3, [r7, #16]
 8007b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b2e:	b29c      	uxth	r4, r3
 8007b30:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007b34:	b29c      	uxth	r4, r3
 8007b36:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007b3a:	b29c      	uxth	r4, r3
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	441a      	add	r2, r3
 8007b46:	4b04      	ldr	r3, [pc, #16]	; (8007b58 <USB_EPStartXfer+0x56c>)
 8007b48:	4323      	orrs	r3, r4
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3734      	adds	r7, #52	; 0x34
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd90      	pop	{r4, r7, pc}
 8007b58:	ffff8080 	.word	0xffff8080

08007b5c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b5c:	b490      	push	{r4, r7}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	785b      	ldrb	r3, [r3, #1]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d018      	beq.n	8007ba0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b84:	b29c      	uxth	r4, r3
 8007b86:	f084 0310 	eor.w	r3, r4, #16
 8007b8a:	b29c      	uxth	r4, r3
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	441a      	add	r2, r3
 8007b96:	4b11      	ldr	r3, [pc, #68]	; (8007bdc <USB_EPSetStall+0x80>)
 8007b98:	4323      	orrs	r3, r4
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	8013      	strh	r3, [r2, #0]
 8007b9e:	e017      	b.n	8007bd0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb6:	b29c      	uxth	r4, r3
 8007bb8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007bbc:	b29c      	uxth	r4, r3
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	441a      	add	r2, r3
 8007bc8:	4b04      	ldr	r3, [pc, #16]	; (8007bdc <USB_EPSetStall+0x80>)
 8007bca:	4323      	orrs	r3, r4
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bc90      	pop	{r4, r7}
 8007bda:	4770      	bx	lr
 8007bdc:	ffff8080 	.word	0xffff8080

08007be0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007be0:	b490      	push	{r4, r7}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	7b1b      	ldrb	r3, [r3, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d17d      	bne.n	8007cee <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	785b      	ldrb	r3, [r3, #1]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d03d      	beq.n	8007c76 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	b29c      	uxth	r4, r3
 8007c08:	4623      	mov	r3, r4
 8007c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d014      	beq.n	8007c3c <USB_EPClearStall+0x5c>
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c28:	b29c      	uxth	r4, r3
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	441a      	add	r2, r3
 8007c34:	4b31      	ldr	r3, [pc, #196]	; (8007cfc <USB_EPClearStall+0x11c>)
 8007c36:	4323      	orrs	r3, r4
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	78db      	ldrb	r3, [r3, #3]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d054      	beq.n	8007cee <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c5a:	b29c      	uxth	r4, r3
 8007c5c:	f084 0320 	eor.w	r3, r4, #32
 8007c60:	b29c      	uxth	r4, r3
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	441a      	add	r2, r3
 8007c6c:	4b24      	ldr	r3, [pc, #144]	; (8007d00 <USB_EPClearStall+0x120>)
 8007c6e:	4323      	orrs	r3, r4
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	8013      	strh	r3, [r2, #0]
 8007c74:	e03b      	b.n	8007cee <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4413      	add	r3, r2
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	b29c      	uxth	r4, r3
 8007c84:	4623      	mov	r3, r4
 8007c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d014      	beq.n	8007cb8 <USB_EPClearStall+0xd8>
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca4:	b29c      	uxth	r4, r3
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	441a      	add	r2, r3
 8007cb0:	4b14      	ldr	r3, [pc, #80]	; (8007d04 <USB_EPClearStall+0x124>)
 8007cb2:	4323      	orrs	r3, r4
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cce:	b29c      	uxth	r4, r3
 8007cd0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007cd4:	b29c      	uxth	r4, r3
 8007cd6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007cda:	b29c      	uxth	r4, r3
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	441a      	add	r2, r3
 8007ce6:	4b06      	ldr	r3, [pc, #24]	; (8007d00 <USB_EPClearStall+0x120>)
 8007ce8:	4323      	orrs	r3, r4
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bc90      	pop	{r4, r7}
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	ffff80c0 	.word	0xffff80c0
 8007d00:	ffff8080 	.word	0xffff8080
 8007d04:	ffffc080 	.word	0xffffc080

08007d08 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007d14:	78fb      	ldrb	r3, [r7, #3]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d103      	bne.n	8007d22 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2280      	movs	r2, #128	; 0x80
 8007d1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b08d      	sub	sp, #52	; 0x34
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	4611      	mov	r1, r2
 8007dcc:	461a      	mov	r2, r3
 8007dce:	460b      	mov	r3, r1
 8007dd0:	80fb      	strh	r3, [r7, #6]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007dd6:	88bb      	ldrh	r3, [r7, #4]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	085b      	lsrs	r3, r3, #1
 8007ddc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007de6:	88fa      	ldrh	r2, [r7, #6]
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007df2:	6a3b      	ldr	r3, [r7, #32]
 8007df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007df6:	e01b      	b.n	8007e30 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	3301      	adds	r3, #1
 8007e02:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	461a      	mov	r2, r3
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e20:	3302      	adds	r3, #2
 8007e22:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	3301      	adds	r3, #1
 8007e28:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e0      	bne.n	8007df8 <USB_WritePMA+0x38>
  }
}
 8007e36:	bf00      	nop
 8007e38:	3734      	adds	r7, #52	; 0x34
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b08b      	sub	sp, #44	; 0x2c
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	60b9      	str	r1, [r7, #8]
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	461a      	mov	r2, r3
 8007e50:	460b      	mov	r3, r1
 8007e52:	80fb      	strh	r3, [r7, #6]
 8007e54:	4613      	mov	r3, r2
 8007e56:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007e58:	88bb      	ldrh	r3, [r7, #4]
 8007e5a:	085b      	lsrs	r3, r3, #1
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e68:	88fa      	ldrh	r2, [r7, #6]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e72:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	627b      	str	r3, [r7, #36]	; 0x24
 8007e78:	e018      	b.n	8007eac <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	3302      	adds	r3, #2
 8007e86:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	3301      	adds	r3, #1
 8007e94:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	0a1b      	lsrs	r3, r3, #8
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1e3      	bne.n	8007e7a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007eb2:	88bb      	ldrh	r3, [r7, #4]
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d007      	beq.n	8007ece <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	701a      	strb	r2, [r3, #0]
  }
}
 8007ece:	bf00      	nop
 8007ed0:	372c      	adds	r7, #44	; 0x2c
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	7c1b      	ldrb	r3, [r3, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d115      	bne.n	8007f1e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	2181      	movs	r1, #129	; 0x81
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f005 fb96 	bl	800d62c <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f005 fb8c 	bl	800d62c <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007f1c:	e012      	b.n	8007f44 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f1e:	2340      	movs	r3, #64	; 0x40
 8007f20:	2202      	movs	r2, #2
 8007f22:	2181      	movs	r1, #129	; 0x81
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f005 fb81 	bl	800d62c <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f30:	2340      	movs	r3, #64	; 0x40
 8007f32:	2202      	movs	r2, #2
 8007f34:	2101      	movs	r1, #1
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f005 fb78 	bl	800d62c <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f44:	2308      	movs	r3, #8
 8007f46:	2203      	movs	r2, #3
 8007f48:	2182      	movs	r1, #130	; 0x82
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f005 fb6e 	bl	800d62c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f56:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007f5a:	f005 fd61 	bl	800da20 <USBD_static_malloc>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d102      	bne.n	8007f76 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007f70:	2301      	movs	r3, #1
 8007f72:	73fb      	strb	r3, [r7, #15]
 8007f74:	e026      	b.n	8007fc4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	7c1b      	ldrb	r3, [r3, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d109      	bne.n	8007fb4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007faa:	2101      	movs	r1, #1
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f005 fcb3 	bl	800d918 <USBD_LL_PrepareReceive>
 8007fb2:	e007      	b.n	8007fc4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fba:	2340      	movs	r3, #64	; 0x40
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f005 fcaa 	bl	800d918 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007fde:	2181      	movs	r1, #129	; 0x81
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f005 fb61 	bl	800d6a8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007fec:	2101      	movs	r1, #1
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f005 fb5a 	bl	800d6a8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007ffc:	2182      	movs	r1, #130	; 0x82
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f005 fb52 	bl	800d6a8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00e      	beq.n	8008032 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008024:	4618      	mov	r0, r3
 8008026:	f005 fd09 	bl	800da3c <USBD_static_free>
    pdev->pClassData = NULL;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008032:	7bfb      	ldrb	r3, [r7, #15]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008052:	2300      	movs	r3, #0
 8008054:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008062:	2b00      	cmp	r3, #0
 8008064:	d039      	beq.n	80080da <USBD_CDC_Setup+0x9e>
 8008066:	2b20      	cmp	r3, #32
 8008068:	d17c      	bne.n	8008164 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	88db      	ldrh	r3, [r3, #6]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d029      	beq.n	80080c6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	b25b      	sxtb	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	da11      	bge.n	80080a0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008088:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	88d2      	ldrh	r2, [r2, #6]
 800808e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008090:	6939      	ldr	r1, [r7, #16]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	88db      	ldrh	r3, [r3, #6]
 8008096:	461a      	mov	r2, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 fa2b 	bl	80094f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800809e:	e068      	b.n	8008172 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	785a      	ldrb	r2, [r3, #1]
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	88db      	ldrh	r3, [r3, #6]
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80080b6:	6939      	ldr	r1, [r7, #16]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	88db      	ldrh	r3, [r3, #6]
 80080bc:	461a      	mov	r2, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f001 fa46 	bl	8009550 <USBD_CtlPrepareRx>
      break;
 80080c4:	e055      	b.n	8008172 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	7850      	ldrb	r0, [r2, #1]
 80080d2:	2200      	movs	r2, #0
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	4798      	blx	r3
      break;
 80080d8:	e04b      	b.n	8008172 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	785b      	ldrb	r3, [r3, #1]
 80080de:	2b0a      	cmp	r3, #10
 80080e0:	d017      	beq.n	8008112 <USBD_CDC_Setup+0xd6>
 80080e2:	2b0b      	cmp	r3, #11
 80080e4:	d029      	beq.n	800813a <USBD_CDC_Setup+0xfe>
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d133      	bne.n	8008152 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f0:	2b03      	cmp	r3, #3
 80080f2:	d107      	bne.n	8008104 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80080f4:	f107 030c 	add.w	r3, r7, #12
 80080f8:	2202      	movs	r2, #2
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 f9f9 	bl	80094f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008102:	e02e      	b.n	8008162 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 f989 	bl	800941e <USBD_CtlError>
            ret = USBD_FAIL;
 800810c:	2302      	movs	r3, #2
 800810e:	75fb      	strb	r3, [r7, #23]
          break;
 8008110:	e027      	b.n	8008162 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008118:	2b03      	cmp	r3, #3
 800811a:	d107      	bne.n	800812c <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800811c:	f107 030f 	add.w	r3, r7, #15
 8008120:	2201      	movs	r2, #1
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f001 f9e5 	bl	80094f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800812a:	e01a      	b.n	8008162 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 f975 	bl	800941e <USBD_CtlError>
            ret = USBD_FAIL;
 8008134:	2302      	movs	r3, #2
 8008136:	75fb      	strb	r3, [r7, #23]
          break;
 8008138:	e013      	b.n	8008162 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008140:	2b03      	cmp	r3, #3
 8008142:	d00d      	beq.n	8008160 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 f969 	bl	800941e <USBD_CtlError>
            ret = USBD_FAIL;
 800814c:	2302      	movs	r3, #2
 800814e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008150:	e006      	b.n	8008160 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f001 f962 	bl	800941e <USBD_CtlError>
          ret = USBD_FAIL;
 800815a:	2302      	movs	r3, #2
 800815c:	75fb      	strb	r3, [r7, #23]
          break;
 800815e:	e000      	b.n	8008162 <USBD_CDC_Setup+0x126>
          break;
 8008160:	bf00      	nop
      }
      break;
 8008162:	e006      	b.n	8008172 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 f959 	bl	800941e <USBD_CtlError>
      ret = USBD_FAIL;
 800816c:	2302      	movs	r3, #2
 800816e:	75fb      	strb	r3, [r7, #23]
      break;
 8008170:	bf00      	nop
  }

  return ret;
 8008172:	7dfb      	ldrb	r3, [r7, #23]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008196:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d037      	beq.n	8008212 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80081a2:	78fa      	ldrb	r2, [r7, #3]
 80081a4:	6879      	ldr	r1, [r7, #4]
 80081a6:	4613      	mov	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	440b      	add	r3, r1
 80081b0:	331c      	adds	r3, #28
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d026      	beq.n	8008206 <USBD_CDC_DataIn+0x8a>
 80081b8:	78fa      	ldrb	r2, [r7, #3]
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	4613      	mov	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	440b      	add	r3, r1
 80081c6:	331c      	adds	r3, #28
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	78fa      	ldrb	r2, [r7, #3]
 80081cc:	68b9      	ldr	r1, [r7, #8]
 80081ce:	0152      	lsls	r2, r2, #5
 80081d0:	440a      	add	r2, r1
 80081d2:	3238      	adds	r2, #56	; 0x38
 80081d4:	6812      	ldr	r2, [r2, #0]
 80081d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80081da:	fb02 f201 	mul.w	r2, r2, r1
 80081de:	1a9b      	subs	r3, r3, r2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d110      	bne.n	8008206 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80081e4:	78fa      	ldrb	r2, [r7, #3]
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4613      	mov	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	331c      	adds	r3, #28
 80081f4:	2200      	movs	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80081f8:	78f9      	ldrb	r1, [r7, #3]
 80081fa:	2300      	movs	r3, #0
 80081fc:	2200      	movs	r2, #0
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f005 fb50 	bl	800d8a4 <USBD_LL_Transmit>
 8008204:	e003      	b.n	800820e <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	e000      	b.n	8008214 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8008212:	2302      	movs	r3, #2
  }
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008230:	78fb      	ldrb	r3, [r7, #3]
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f005 fba9 	bl	800d98c <USBD_LL_GetRxDataSize>
 800823a:	4602      	mov	r2, r0
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00d      	beq.n	8008268 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008260:	4611      	mov	r1, r2
 8008262:	4798      	blx	r3

    return USBD_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	e000      	b.n	800826a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008268:	2302      	movs	r3, #2
  }
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008280:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008288:	2b00      	cmp	r3, #0
 800828a:	d015      	beq.n	80082b8 <USBD_CDC_EP0_RxReady+0x46>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008292:	2bff      	cmp	r3, #255	; 0xff
 8008294:	d010      	beq.n	80082b8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80082a4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80082ac:	b292      	uxth	r2, r2
 80082ae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	22ff      	movs	r2, #255	; 0xff
 80082b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2243      	movs	r2, #67	; 0x43
 80082d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80082d2:	4b03      	ldr	r3, [pc, #12]	; (80082e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	200000fc 	.word	0x200000fc

080082e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2243      	movs	r2, #67	; 0x43
 80082f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80082f2:	4b03      	ldr	r3, [pc, #12]	; (8008300 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	200000b8 	.word	0x200000b8

08008304 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2243      	movs	r2, #67	; 0x43
 8008310:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008312:	4b03      	ldr	r3, [pc, #12]	; (8008320 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008314:	4618      	mov	r0, r3
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	20000140 	.word	0x20000140

08008324 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	220a      	movs	r2, #10
 8008330:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008332:	4b03      	ldr	r3, [pc, #12]	; (8008340 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	20000074 	.word	0x20000074

08008344 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800834e:	2302      	movs	r3, #2
 8008350:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d005      	beq.n	8008364 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008360:	2300      	movs	r3, #0
 8008362:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008372:	b480      	push	{r7}
 8008374:	b087      	sub	sp, #28
 8008376:	af00      	add	r7, sp, #0
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	60b9      	str	r1, [r7, #8]
 800837c:	4613      	mov	r3, r2
 800837e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008386:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008390:	88fa      	ldrh	r2, [r7, #6]
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	371c      	adds	r7, #28
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80083a6:	b480      	push	{r7}
 80083a8:	b085      	sub	sp, #20
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01c      	beq.n	8008422 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d115      	bne.n	800841e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008410:	b29b      	uxth	r3, r3
 8008412:	2181      	movs	r1, #129	; 0x81
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f005 fa45 	bl	800d8a4 <USBD_LL_Transmit>

      return USBD_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	e002      	b.n	8008424 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800841e:	2301      	movs	r3, #1
 8008420:	e000      	b.n	8008424 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008422:	2302      	movs	r3, #2
  }
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008442:	2b00      	cmp	r3, #0
 8008444:	d017      	beq.n	8008476 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	7c1b      	ldrb	r3, [r3, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d109      	bne.n	8008462 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008458:	2101      	movs	r1, #1
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f005 fa5c 	bl	800d918 <USBD_LL_PrepareReceive>
 8008460:	e007      	b.n	8008472 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008468:	2340      	movs	r3, #64	; 0x40
 800846a:	2101      	movs	r1, #1
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f005 fa53 	bl	800d918 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	e000      	b.n	8008478 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008476:	2302      	movs	r3, #2
  }
}
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	4613      	mov	r3, r2
 800848c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008494:	2302      	movs	r3, #2
 8008496:	e01a      	b.n	80084ce <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d003      	beq.n	80084b8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	79fa      	ldrb	r2, [r7, #7]
 80084c4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f005 f81c 	bl	800d504 <USBD_LL_Init>

  return USBD_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b085      	sub	sp, #20
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d006      	beq.n	80084f8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	73fb      	strb	r3, [r7, #15]
 80084f6:	e001      	b.n	80084fc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80084f8:	2302      	movs	r3, #2
 80084fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b082      	sub	sp, #8
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f005 f858 	bl	800d5c8 <USBD_LL_Start>

  return USBD_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008544:	2302      	movs	r3, #2
 8008546:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00c      	beq.n	800856c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	78fa      	ldrb	r2, [r7, #3]
 800855c:	4611      	mov	r1, r2
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	4798      	blx	r3
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800856c:	7bfb      	ldrb	r3, [r7, #15]
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b082      	sub	sp, #8
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	460b      	mov	r3, r1
 8008580:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	78fa      	ldrb	r2, [r7, #3]
 800858c:	4611      	mov	r1, r2
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	4798      	blx	r3

  return USBD_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fef8 	bl	80093a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80085c2:	461a      	mov	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80085d0:	f003 031f 	and.w	r3, r3, #31
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d00c      	beq.n	80085f2 <USBD_LL_SetupStage+0x56>
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d302      	bcc.n	80085e2 <USBD_LL_SetupStage+0x46>
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d010      	beq.n	8008602 <USBD_LL_SetupStage+0x66>
 80085e0:	e017      	b.n	8008612 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f9ce 	bl	800898c <USBD_StdDevReq>
      break;
 80085f0:	e01a      	b.n	8008628 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fa30 	bl	8008a60 <USBD_StdItfReq>
      break;
 8008600:	e012      	b.n	8008628 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008608:	4619      	mov	r1, r3
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fa6e 	bl	8008aec <USBD_StdEPReq>
      break;
 8008610:	e00a      	b.n	8008628 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008618:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800861c:	b2db      	uxtb	r3, r3
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f005 f877 	bl	800d714 <USBD_LL_StallEP>
      break;
 8008626:	bf00      	nop
  }

  return USBD_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b086      	sub	sp, #24
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	460b      	mov	r3, r1
 800863c:	607a      	str	r2, [r7, #4]
 800863e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008640:	7afb      	ldrb	r3, [r7, #11]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d14b      	bne.n	80086de <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800864c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008654:	2b03      	cmp	r3, #3
 8008656:	d134      	bne.n	80086c2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	68da      	ldr	r2, [r3, #12]
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	429a      	cmp	r2, r3
 8008662:	d919      	bls.n	8008698 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	68da      	ldr	r2, [r3, #12]
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	1ad2      	subs	r2, r2, r3
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800867a:	429a      	cmp	r2, r3
 800867c:	d203      	bcs.n	8008686 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008682:	b29b      	uxth	r3, r3
 8008684:	e002      	b.n	800868c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800868a:	b29b      	uxth	r3, r3
 800868c:	461a      	mov	r2, r3
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f000 ff7b 	bl	800958c <USBD_CtlContinueRx>
 8008696:	e038      	b.n	800870a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00a      	beq.n	80086ba <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d105      	bne.n	80086ba <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 ff78 	bl	80095b0 <USBD_CtlSendStatus>
 80086c0:	e023      	b.n	800870a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086c8:	2b05      	cmp	r3, #5
 80086ca:	d11e      	bne.n	800870a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80086d4:	2100      	movs	r1, #0
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f005 f81c 	bl	800d714 <USBD_LL_StallEP>
 80086dc:	e015      	b.n	800870a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00d      	beq.n	8008706 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d108      	bne.n	8008706 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	7afa      	ldrb	r2, [r7, #11]
 80086fe:	4611      	mov	r1, r2
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	4798      	blx	r3
 8008704:	e001      	b.n	800870a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008706:	2302      	movs	r3, #2
 8008708:	e000      	b.n	800870c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	460b      	mov	r3, r1
 800871e:	607a      	str	r2, [r7, #4]
 8008720:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008722:	7afb      	ldrb	r3, [r7, #11]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d17f      	bne.n	8008828 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	3314      	adds	r3, #20
 800872c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008734:	2b02      	cmp	r3, #2
 8008736:	d15c      	bne.n	80087f2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	68da      	ldr	r2, [r3, #12]
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	429a      	cmp	r2, r3
 8008742:	d915      	bls.n	8008770 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	68da      	ldr	r2, [r3, #12]
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	1ad2      	subs	r2, r2, r3
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	b29b      	uxth	r3, r3
 8008758:	461a      	mov	r2, r3
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 fee5 	bl	800952c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008762:	2300      	movs	r3, #0
 8008764:	2200      	movs	r2, #0
 8008766:	2100      	movs	r1, #0
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f005 f8d5 	bl	800d918 <USBD_LL_PrepareReceive>
 800876e:	e04e      	b.n	800880e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	6912      	ldr	r2, [r2, #16]
 8008778:	fbb3 f1f2 	udiv	r1, r3, r2
 800877c:	fb02 f201 	mul.w	r2, r2, r1
 8008780:	1a9b      	subs	r3, r3, r2
 8008782:	2b00      	cmp	r3, #0
 8008784:	d11c      	bne.n	80087c0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800878e:	429a      	cmp	r2, r3
 8008790:	d316      	bcc.n	80087c0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	689a      	ldr	r2, [r3, #8]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800879c:	429a      	cmp	r2, r3
 800879e:	d20f      	bcs.n	80087c0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087a0:	2200      	movs	r2, #0
 80087a2:	2100      	movs	r1, #0
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 fec1 	bl	800952c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087b2:	2300      	movs	r3, #0
 80087b4:	2200      	movs	r2, #0
 80087b6:	2100      	movs	r1, #0
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f005 f8ad 	bl	800d918 <USBD_LL_PrepareReceive>
 80087be:	e026      	b.n	800880e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00a      	beq.n	80087e2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d105      	bne.n	80087e2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80087e2:	2180      	movs	r1, #128	; 0x80
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f004 ff95 	bl	800d714 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f000 fef3 	bl	80095d6 <USBD_CtlReceiveStatus>
 80087f0:	e00d      	b.n	800880e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d004      	beq.n	8008806 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008802:	2b00      	cmp	r3, #0
 8008804:	d103      	bne.n	800880e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008806:	2180      	movs	r1, #128	; 0x80
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f004 ff83 	bl	800d714 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008814:	2b01      	cmp	r3, #1
 8008816:	d11d      	bne.n	8008854 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f7ff fe82 	bl	8008522 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008826:	e015      	b.n	8008854 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00d      	beq.n	8008850 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800883a:	2b03      	cmp	r3, #3
 800883c:	d108      	bne.n	8008850 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	7afa      	ldrb	r2, [r7, #11]
 8008848:	4611      	mov	r1, r2
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	4798      	blx	r3
 800884e:	e001      	b.n	8008854 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008850:	2302      	movs	r3, #2
 8008852:	e000      	b.n	8008856 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3718      	adds	r7, #24
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008866:	2340      	movs	r3, #64	; 0x40
 8008868:	2200      	movs	r2, #0
 800886a:	2100      	movs	r1, #0
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f004 fedd 	bl	800d62c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2240      	movs	r2, #64	; 0x40
 800887e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008882:	2340      	movs	r3, #64	; 0x40
 8008884:	2200      	movs	r2, #0
 8008886:	2180      	movs	r1, #128	; 0x80
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f004 fecf 	bl	800d62c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2240      	movs	r2, #64	; 0x40
 8008898:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d009      	beq.n	80088d6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	6852      	ldr	r2, [r2, #4]
 80088ce:	b2d2      	uxtb	r2, r2
 80088d0:	4611      	mov	r1, r2
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	4798      	blx	r3
  }

  return USBD_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	78fa      	ldrb	r2, [r7, #3]
 80088f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2204      	movs	r2, #4
 8008918:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	370c      	adds	r7, #12
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800892a:	b480      	push	{r7}
 800892c:	b083      	sub	sp, #12
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008938:	2b04      	cmp	r3, #4
 800893a:	d105      	bne.n	8008948 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	370c      	adds	r7, #12
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b082      	sub	sp, #8
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008964:	2b03      	cmp	r3, #3
 8008966:	d10b      	bne.n	8008980 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896e:	69db      	ldr	r3, [r3, #28]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d005      	beq.n	8008980 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
	...

0800898c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089a2:	2b20      	cmp	r3, #32
 80089a4:	d004      	beq.n	80089b0 <USBD_StdDevReq+0x24>
 80089a6:	2b40      	cmp	r3, #64	; 0x40
 80089a8:	d002      	beq.n	80089b0 <USBD_StdDevReq+0x24>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d008      	beq.n	80089c0 <USBD_StdDevReq+0x34>
 80089ae:	e04c      	b.n	8008a4a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	4798      	blx	r3
      break;
 80089be:	e049      	b.n	8008a54 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	785b      	ldrb	r3, [r3, #1]
 80089c4:	2b09      	cmp	r3, #9
 80089c6:	d83a      	bhi.n	8008a3e <USBD_StdDevReq+0xb2>
 80089c8:	a201      	add	r2, pc, #4	; (adr r2, 80089d0 <USBD_StdDevReq+0x44>)
 80089ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ce:	bf00      	nop
 80089d0:	08008a21 	.word	0x08008a21
 80089d4:	08008a35 	.word	0x08008a35
 80089d8:	08008a3f 	.word	0x08008a3f
 80089dc:	08008a2b 	.word	0x08008a2b
 80089e0:	08008a3f 	.word	0x08008a3f
 80089e4:	08008a03 	.word	0x08008a03
 80089e8:	080089f9 	.word	0x080089f9
 80089ec:	08008a3f 	.word	0x08008a3f
 80089f0:	08008a17 	.word	0x08008a17
 80089f4:	08008a0d 	.word	0x08008a0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f9d4 	bl	8008da8 <USBD_GetDescriptor>
          break;
 8008a00:	e022      	b.n	8008a48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fb61 	bl	80090cc <USBD_SetAddress>
          break;
 8008a0a:	e01d      	b.n	8008a48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fb9e 	bl	8009150 <USBD_SetConfig>
          break;
 8008a14:	e018      	b.n	8008a48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fc27 	bl	800926c <USBD_GetConfig>
          break;
 8008a1e:	e013      	b.n	8008a48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fc56 	bl	80092d4 <USBD_GetStatus>
          break;
 8008a28:	e00e      	b.n	8008a48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fc84 	bl	800933a <USBD_SetFeature>
          break;
 8008a32:	e009      	b.n	8008a48 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fc93 	bl	8009362 <USBD_ClrFeature>
          break;
 8008a3c:	e004      	b.n	8008a48 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fcec 	bl	800941e <USBD_CtlError>
          break;
 8008a46:	bf00      	nop
      }
      break;
 8008a48:	e004      	b.n	8008a54 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fce6 	bl	800941e <USBD_CtlError>
      break;
 8008a52:	bf00      	nop
  }

  return ret;
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop

08008a60 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a76:	2b20      	cmp	r3, #32
 8008a78:	d003      	beq.n	8008a82 <USBD_StdItfReq+0x22>
 8008a7a:	2b40      	cmp	r3, #64	; 0x40
 8008a7c:	d001      	beq.n	8008a82 <USBD_StdItfReq+0x22>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d12a      	bne.n	8008ad8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d81d      	bhi.n	8008aca <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	889b      	ldrh	r3, [r3, #4]
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d813      	bhi.n	8008ac0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	4798      	blx	r3
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	88db      	ldrh	r3, [r3, #6]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d110      	bne.n	8008ad4 <USBD_StdItfReq+0x74>
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10d      	bne.n	8008ad4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fd79 	bl	80095b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008abe:	e009      	b.n	8008ad4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008ac0:	6839      	ldr	r1, [r7, #0]
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fcab 	bl	800941e <USBD_CtlError>
          break;
 8008ac8:	e004      	b.n	8008ad4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fca6 	bl	800941e <USBD_CtlError>
          break;
 8008ad2:	e000      	b.n	8008ad6 <USBD_StdItfReq+0x76>
          break;
 8008ad4:	bf00      	nop
      }
      break;
 8008ad6:	e004      	b.n	8008ae2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fc9f 	bl	800941e <USBD_CtlError>
      break;
 8008ae0:	bf00      	nop
  }

  return USBD_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	889b      	ldrh	r3, [r3, #4]
 8008afe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b08:	2b20      	cmp	r3, #32
 8008b0a:	d004      	beq.n	8008b16 <USBD_StdEPReq+0x2a>
 8008b0c:	2b40      	cmp	r3, #64	; 0x40
 8008b0e:	d002      	beq.n	8008b16 <USBD_StdEPReq+0x2a>
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d008      	beq.n	8008b26 <USBD_StdEPReq+0x3a>
 8008b14:	e13d      	b.n	8008d92 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	4798      	blx	r3
      break;
 8008b24:	e13a      	b.n	8008d9c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b2e:	2b20      	cmp	r3, #32
 8008b30:	d10a      	bne.n	8008b48 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	4798      	blx	r3
 8008b40:	4603      	mov	r3, r0
 8008b42:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	e12a      	b.n	8008d9e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	785b      	ldrb	r3, [r3, #1]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d03e      	beq.n	8008bce <USBD_StdEPReq+0xe2>
 8008b50:	2b03      	cmp	r3, #3
 8008b52:	d002      	beq.n	8008b5a <USBD_StdEPReq+0x6e>
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d070      	beq.n	8008c3a <USBD_StdEPReq+0x14e>
 8008b58:	e115      	b.n	8008d86 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d002      	beq.n	8008b6a <USBD_StdEPReq+0x7e>
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	d015      	beq.n	8008b94 <USBD_StdEPReq+0xa8>
 8008b68:	e02b      	b.n	8008bc2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b6a:	7bbb      	ldrb	r3, [r7, #14]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00c      	beq.n	8008b8a <USBD_StdEPReq+0x9e>
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	2b80      	cmp	r3, #128	; 0x80
 8008b74:	d009      	beq.n	8008b8a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f004 fdca 	bl	800d714 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b80:	2180      	movs	r1, #128	; 0x80
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f004 fdc6 	bl	800d714 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b88:	e020      	b.n	8008bcc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fc46 	bl	800941e <USBD_CtlError>
              break;
 8008b92:	e01b      	b.n	8008bcc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	885b      	ldrh	r3, [r3, #2]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10e      	bne.n	8008bba <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00b      	beq.n	8008bba <USBD_StdEPReq+0xce>
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
 8008ba4:	2b80      	cmp	r3, #128	; 0x80
 8008ba6:	d008      	beq.n	8008bba <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	88db      	ldrh	r3, [r3, #6]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d104      	bne.n	8008bba <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f004 fdad 	bl	800d714 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fcf8 	bl	80095b0 <USBD_CtlSendStatus>

              break;
 8008bc0:	e004      	b.n	8008bcc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fc2a 	bl	800941e <USBD_CtlError>
              break;
 8008bca:	bf00      	nop
          }
          break;
 8008bcc:	e0e0      	b.n	8008d90 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d002      	beq.n	8008bde <USBD_StdEPReq+0xf2>
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d015      	beq.n	8008c08 <USBD_StdEPReq+0x11c>
 8008bdc:	e026      	b.n	8008c2c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00c      	beq.n	8008bfe <USBD_StdEPReq+0x112>
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	2b80      	cmp	r3, #128	; 0x80
 8008be8:	d009      	beq.n	8008bfe <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
 8008bec:	4619      	mov	r1, r3
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f004 fd90 	bl	800d714 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008bf4:	2180      	movs	r1, #128	; 0x80
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f004 fd8c 	bl	800d714 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bfc:	e01c      	b.n	8008c38 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fc0c 	bl	800941e <USBD_CtlError>
              break;
 8008c06:	e017      	b.n	8008c38 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	885b      	ldrh	r3, [r3, #2]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d112      	bne.n	8008c36 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c10:	7bbb      	ldrb	r3, [r7, #14]
 8008c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d004      	beq.n	8008c24 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c1a:	7bbb      	ldrb	r3, [r7, #14]
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f004 fdae 	bl	800d780 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fcc3 	bl	80095b0 <USBD_CtlSendStatus>
              }
              break;
 8008c2a:	e004      	b.n	8008c36 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fbf5 	bl	800941e <USBD_CtlError>
              break;
 8008c34:	e000      	b.n	8008c38 <USBD_StdEPReq+0x14c>
              break;
 8008c36:	bf00      	nop
          }
          break;
 8008c38:	e0aa      	b.n	8008d90 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d002      	beq.n	8008c4a <USBD_StdEPReq+0x15e>
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d032      	beq.n	8008cae <USBD_StdEPReq+0x1c2>
 8008c48:	e097      	b.n	8008d7a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d007      	beq.n	8008c60 <USBD_StdEPReq+0x174>
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	2b80      	cmp	r3, #128	; 0x80
 8008c54:	d004      	beq.n	8008c60 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fbe0 	bl	800941e <USBD_CtlError>
                break;
 8008c5e:	e091      	b.n	8008d84 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	da0b      	bge.n	8008c80 <USBD_StdEPReq+0x194>
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c6e:	4613      	mov	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	3310      	adds	r3, #16
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	e00b      	b.n	8008c98 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c86:	4613      	mov	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	4413      	add	r3, r2
 8008c96:	3304      	adds	r3, #4
 8008c98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fc24 	bl	80094f4 <USBD_CtlSendData>
              break;
 8008cac:	e06a      	b.n	8008d84 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008cae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	da11      	bge.n	8008cda <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	f003 020f 	and.w	r2, r3, #15
 8008cbc:	6879      	ldr	r1, [r7, #4]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	440b      	add	r3, r1
 8008cc8:	3318      	adds	r3, #24
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d117      	bne.n	8008d00 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fba3 	bl	800941e <USBD_CtlError>
                  break;
 8008cd8:	e054      	b.n	8008d84 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008cda:	7bbb      	ldrb	r3, [r7, #14]
 8008cdc:	f003 020f 	and.w	r2, r3, #15
 8008ce0:	6879      	ldr	r1, [r7, #4]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	440b      	add	r3, r1
 8008cec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d104      	bne.n	8008d00 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fb90 	bl	800941e <USBD_CtlError>
                  break;
 8008cfe:	e041      	b.n	8008d84 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	da0b      	bge.n	8008d20 <USBD_StdEPReq+0x234>
 8008d08:	7bbb      	ldrb	r3, [r7, #14]
 8008d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	3310      	adds	r3, #16
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	e00b      	b.n	8008d38 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d26:	4613      	mov	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	4413      	add	r3, r2
 8008d36:	3304      	adds	r3, #4
 8008d38:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <USBD_StdEPReq+0x25a>
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
 8008d42:	2b80      	cmp	r3, #128	; 0x80
 8008d44:	d103      	bne.n	8008d4e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	e00e      	b.n	8008d6c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008d4e:	7bbb      	ldrb	r3, [r7, #14]
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f004 fd4a 	bl	800d7ec <USBD_LL_IsStallEP>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d003      	beq.n	8008d66 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2201      	movs	r2, #1
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	e002      	b.n	8008d6c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2202      	movs	r2, #2
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fbbe 	bl	80094f4 <USBD_CtlSendData>
              break;
 8008d78:	e004      	b.n	8008d84 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fb4e 	bl	800941e <USBD_CtlError>
              break;
 8008d82:	bf00      	nop
          }
          break;
 8008d84:	e004      	b.n	8008d90 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fb48 	bl	800941e <USBD_CtlError>
          break;
 8008d8e:	bf00      	nop
      }
      break;
 8008d90:	e004      	b.n	8008d9c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fb42 	bl	800941e <USBD_CtlError>
      break;
 8008d9a:	bf00      	nop
  }

  return ret;
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	885b      	ldrh	r3, [r3, #2]
 8008dc2:	0a1b      	lsrs	r3, r3, #8
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	2b0e      	cmp	r3, #14
 8008dca:	f200 8152 	bhi.w	8009072 <USBD_GetDescriptor+0x2ca>
 8008dce:	a201      	add	r2, pc, #4	; (adr r2, 8008dd4 <USBD_GetDescriptor+0x2c>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008e45 	.word	0x08008e45
 8008dd8:	08008e5d 	.word	0x08008e5d
 8008ddc:	08008e9d 	.word	0x08008e9d
 8008de0:	08009073 	.word	0x08009073
 8008de4:	08009073 	.word	0x08009073
 8008de8:	08009013 	.word	0x08009013
 8008dec:	0800903f 	.word	0x0800903f
 8008df0:	08009073 	.word	0x08009073
 8008df4:	08009073 	.word	0x08009073
 8008df8:	08009073 	.word	0x08009073
 8008dfc:	08009073 	.word	0x08009073
 8008e00:	08009073 	.word	0x08009073
 8008e04:	08009073 	.word	0x08009073
 8008e08:	08009073 	.word	0x08009073
 8008e0c:	08008e11 	.word	0x08008e11
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e16:	69db      	ldr	r3, [r3, #28]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00b      	beq.n	8008e34 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e22:	69db      	ldr	r3, [r3, #28]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	7c12      	ldrb	r2, [r2, #16]
 8008e28:	f107 0108 	add.w	r1, r7, #8
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	4798      	blx	r3
 8008e30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e32:	e126      	b.n	8009082 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 faf1 	bl	800941e <USBD_CtlError>
        err++;
 8008e3c:	7afb      	ldrb	r3, [r7, #11]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	72fb      	strb	r3, [r7, #11]
      break;
 8008e42:	e11e      	b.n	8009082 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	7c12      	ldrb	r2, [r2, #16]
 8008e50:	f107 0108 	add.w	r1, r7, #8
 8008e54:	4610      	mov	r0, r2
 8008e56:	4798      	blx	r3
 8008e58:	60f8      	str	r0, [r7, #12]
      break;
 8008e5a:	e112      	b.n	8009082 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	7c1b      	ldrb	r3, [r3, #16]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10d      	bne.n	8008e80 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6c:	f107 0208 	add.w	r2, r7, #8
 8008e70:	4610      	mov	r0, r2
 8008e72:	4798      	blx	r3
 8008e74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e7e:	e100      	b.n	8009082 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e88:	f107 0208 	add.w	r2, r7, #8
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4798      	blx	r3
 8008e90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	2202      	movs	r2, #2
 8008e98:	701a      	strb	r2, [r3, #0]
      break;
 8008e9a:	e0f2      	b.n	8009082 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	885b      	ldrh	r3, [r3, #2]
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b05      	cmp	r3, #5
 8008ea4:	f200 80ac 	bhi.w	8009000 <USBD_GetDescriptor+0x258>
 8008ea8:	a201      	add	r2, pc, #4	; (adr r2, 8008eb0 <USBD_GetDescriptor+0x108>)
 8008eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eae:	bf00      	nop
 8008eb0:	08008ec9 	.word	0x08008ec9
 8008eb4:	08008efd 	.word	0x08008efd
 8008eb8:	08008f31 	.word	0x08008f31
 8008ebc:	08008f65 	.word	0x08008f65
 8008ec0:	08008f99 	.word	0x08008f99
 8008ec4:	08008fcd 	.word	0x08008fcd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	7c12      	ldrb	r2, [r2, #16]
 8008ee0:	f107 0108 	add.w	r1, r7, #8
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
 8008ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eea:	e091      	b.n	8009010 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fa95 	bl	800941e <USBD_CtlError>
            err++;
 8008ef4:	7afb      	ldrb	r3, [r7, #11]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8008efa:	e089      	b.n	8009010 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00b      	beq.n	8008f20 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	7c12      	ldrb	r2, [r2, #16]
 8008f14:	f107 0108 	add.w	r1, r7, #8
 8008f18:	4610      	mov	r0, r2
 8008f1a:	4798      	blx	r3
 8008f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f1e:	e077      	b.n	8009010 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa7b 	bl	800941e <USBD_CtlError>
            err++;
 8008f28:	7afb      	ldrb	r3, [r7, #11]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f2e:	e06f      	b.n	8009010 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00b      	beq.n	8008f54 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	7c12      	ldrb	r2, [r2, #16]
 8008f48:	f107 0108 	add.w	r1, r7, #8
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4798      	blx	r3
 8008f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f52:	e05d      	b.n	8009010 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fa61 	bl	800941e <USBD_CtlError>
            err++;
 8008f5c:	7afb      	ldrb	r3, [r7, #11]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	72fb      	strb	r3, [r7, #11]
          break;
 8008f62:	e055      	b.n	8009010 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00b      	beq.n	8008f88 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	7c12      	ldrb	r2, [r2, #16]
 8008f7c:	f107 0108 	add.w	r1, r7, #8
 8008f80:	4610      	mov	r0, r2
 8008f82:	4798      	blx	r3
 8008f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f86:	e043      	b.n	8009010 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fa47 	bl	800941e <USBD_CtlError>
            err++;
 8008f90:	7afb      	ldrb	r3, [r7, #11]
 8008f92:	3301      	adds	r3, #1
 8008f94:	72fb      	strb	r3, [r7, #11]
          break;
 8008f96:	e03b      	b.n	8009010 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00b      	beq.n	8008fbc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	7c12      	ldrb	r2, [r2, #16]
 8008fb0:	f107 0108 	add.w	r1, r7, #8
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4798      	blx	r3
 8008fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fba:	e029      	b.n	8009010 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fa2d 	bl	800941e <USBD_CtlError>
            err++;
 8008fc4:	7afb      	ldrb	r3, [r7, #11]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fca:	e021      	b.n	8009010 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00b      	beq.n	8008ff0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	7c12      	ldrb	r2, [r2, #16]
 8008fe4:	f107 0108 	add.w	r1, r7, #8
 8008fe8:	4610      	mov	r0, r2
 8008fea:	4798      	blx	r3
 8008fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fee:	e00f      	b.n	8009010 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fa13 	bl	800941e <USBD_CtlError>
            err++;
 8008ff8:	7afb      	ldrb	r3, [r7, #11]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8008ffe:	e007      	b.n	8009010 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fa0b 	bl	800941e <USBD_CtlError>
          err++;
 8009008:	7afb      	ldrb	r3, [r7, #11]
 800900a:	3301      	adds	r3, #1
 800900c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800900e:	e038      	b.n	8009082 <USBD_GetDescriptor+0x2da>
 8009010:	e037      	b.n	8009082 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	7c1b      	ldrb	r3, [r3, #16]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d109      	bne.n	800902e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009022:	f107 0208 	add.w	r2, r7, #8
 8009026:	4610      	mov	r0, r2
 8009028:	4798      	blx	r3
 800902a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800902c:	e029      	b.n	8009082 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f9f4 	bl	800941e <USBD_CtlError>
        err++;
 8009036:	7afb      	ldrb	r3, [r7, #11]
 8009038:	3301      	adds	r3, #1
 800903a:	72fb      	strb	r3, [r7, #11]
      break;
 800903c:	e021      	b.n	8009082 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	7c1b      	ldrb	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10d      	bne.n	8009062 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904e:	f107 0208 	add.w	r2, r7, #8
 8009052:	4610      	mov	r0, r2
 8009054:	4798      	blx	r3
 8009056:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3301      	adds	r3, #1
 800905c:	2207      	movs	r2, #7
 800905e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009060:	e00f      	b.n	8009082 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009062:	6839      	ldr	r1, [r7, #0]
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f9da 	bl	800941e <USBD_CtlError>
        err++;
 800906a:	7afb      	ldrb	r3, [r7, #11]
 800906c:	3301      	adds	r3, #1
 800906e:	72fb      	strb	r3, [r7, #11]
      break;
 8009070:	e007      	b.n	8009082 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f9d2 	bl	800941e <USBD_CtlError>
      err++;
 800907a:	7afb      	ldrb	r3, [r7, #11]
 800907c:	3301      	adds	r3, #1
 800907e:	72fb      	strb	r3, [r7, #11]
      break;
 8009080:	bf00      	nop
  }

  if (err != 0U)
 8009082:	7afb      	ldrb	r3, [r7, #11]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d11c      	bne.n	80090c2 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009088:	893b      	ldrh	r3, [r7, #8]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d011      	beq.n	80090b2 <USBD_GetDescriptor+0x30a>
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	88db      	ldrh	r3, [r3, #6]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00d      	beq.n	80090b2 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	88da      	ldrh	r2, [r3, #6]
 800909a:	893b      	ldrh	r3, [r7, #8]
 800909c:	4293      	cmp	r3, r2
 800909e:	bf28      	it	cs
 80090a0:	4613      	movcs	r3, r2
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090a6:	893b      	ldrh	r3, [r7, #8]
 80090a8:	461a      	mov	r2, r3
 80090aa:	68f9      	ldr	r1, [r7, #12]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fa21 	bl	80094f4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	88db      	ldrh	r3, [r3, #6]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d104      	bne.n	80090c4 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fa78 	bl	80095b0 <USBD_CtlSendStatus>
 80090c0:	e000      	b.n	80090c4 <USBD_GetDescriptor+0x31c>
    return;
 80090c2:	bf00      	nop
    }
  }
}
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop

080090cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	889b      	ldrh	r3, [r3, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d130      	bne.n	8009140 <USBD_SetAddress+0x74>
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	88db      	ldrh	r3, [r3, #6]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d12c      	bne.n	8009140 <USBD_SetAddress+0x74>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	885b      	ldrh	r3, [r3, #2]
 80090ea:	2b7f      	cmp	r3, #127	; 0x7f
 80090ec:	d828      	bhi.n	8009140 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	885b      	ldrh	r3, [r3, #2]
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009100:	2b03      	cmp	r3, #3
 8009102:	d104      	bne.n	800910e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f989 	bl	800941e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800910c:	e01c      	b.n	8009148 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	7bfa      	ldrb	r2, [r7, #15]
 8009112:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009116:	7bfb      	ldrb	r3, [r7, #15]
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f004 fb8c 	bl	800d838 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fa45 	bl	80095b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009126:	7bfb      	ldrb	r3, [r7, #15]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d004      	beq.n	8009136 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2202      	movs	r2, #2
 8009130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009134:	e008      	b.n	8009148 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800913e:	e003      	b.n	8009148 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f96b 	bl	800941e <USBD_CtlError>
  }
}
 8009148:	bf00      	nop
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	885b      	ldrh	r3, [r3, #2]
 800915e:	b2da      	uxtb	r2, r3
 8009160:	4b41      	ldr	r3, [pc, #260]	; (8009268 <USBD_SetConfig+0x118>)
 8009162:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009164:	4b40      	ldr	r3, [pc, #256]	; (8009268 <USBD_SetConfig+0x118>)
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d904      	bls.n	8009176 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f955 	bl	800941e <USBD_CtlError>
 8009174:	e075      	b.n	8009262 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800917c:	2b02      	cmp	r3, #2
 800917e:	d002      	beq.n	8009186 <USBD_SetConfig+0x36>
 8009180:	2b03      	cmp	r3, #3
 8009182:	d023      	beq.n	80091cc <USBD_SetConfig+0x7c>
 8009184:	e062      	b.n	800924c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009186:	4b38      	ldr	r3, [pc, #224]	; (8009268 <USBD_SetConfig+0x118>)
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d01a      	beq.n	80091c4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800918e:	4b36      	ldr	r3, [pc, #216]	; (8009268 <USBD_SetConfig+0x118>)
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	461a      	mov	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2203      	movs	r2, #3
 800919c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80091a0:	4b31      	ldr	r3, [pc, #196]	; (8009268 <USBD_SetConfig+0x118>)
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7ff f9c6 	bl	8008538 <USBD_SetClassConfig>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d104      	bne.n	80091bc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f932 	bl	800941e <USBD_CtlError>
            return;
 80091ba:	e052      	b.n	8009262 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f9f7 	bl	80095b0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80091c2:	e04e      	b.n	8009262 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f9f3 	bl	80095b0 <USBD_CtlSendStatus>
        break;
 80091ca:	e04a      	b.n	8009262 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80091cc:	4b26      	ldr	r3, [pc, #152]	; (8009268 <USBD_SetConfig+0x118>)
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d112      	bne.n	80091fa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2202      	movs	r2, #2
 80091d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80091dc:	4b22      	ldr	r3, [pc, #136]	; (8009268 <USBD_SetConfig+0x118>)
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	461a      	mov	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80091e6:	4b20      	ldr	r3, [pc, #128]	; (8009268 <USBD_SetConfig+0x118>)
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	4619      	mov	r1, r3
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7ff f9c2 	bl	8008576 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f9dc 	bl	80095b0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80091f8:	e033      	b.n	8009262 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80091fa:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <USBD_SetConfig+0x118>)
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	429a      	cmp	r2, r3
 8009206:	d01d      	beq.n	8009244 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	b2db      	uxtb	r3, r3
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7ff f9b0 	bl	8008576 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009216:	4b14      	ldr	r3, [pc, #80]	; (8009268 <USBD_SetConfig+0x118>)
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009220:	4b11      	ldr	r3, [pc, #68]	; (8009268 <USBD_SetConfig+0x118>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7ff f986 	bl	8008538 <USBD_SetClassConfig>
 800922c:	4603      	mov	r3, r0
 800922e:	2b02      	cmp	r3, #2
 8009230:	d104      	bne.n	800923c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f8f2 	bl	800941e <USBD_CtlError>
            return;
 800923a:	e012      	b.n	8009262 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f9b7 	bl	80095b0 <USBD_CtlSendStatus>
        break;
 8009242:	e00e      	b.n	8009262 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f9b3 	bl	80095b0 <USBD_CtlSendStatus>
        break;
 800924a:	e00a      	b.n	8009262 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f8e5 	bl	800941e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009254:	4b04      	ldr	r3, [pc, #16]	; (8009268 <USBD_SetConfig+0x118>)
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	4619      	mov	r1, r3
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7ff f98b 	bl	8008576 <USBD_ClrClassConfig>
        break;
 8009260:	bf00      	nop
    }
  }
}
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	20000298 	.word	0x20000298

0800926c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	88db      	ldrh	r3, [r3, #6]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d004      	beq.n	8009288 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f8cc 	bl	800941e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009286:	e021      	b.n	80092cc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800928e:	2b01      	cmp	r3, #1
 8009290:	db17      	blt.n	80092c2 <USBD_GetConfig+0x56>
 8009292:	2b02      	cmp	r3, #2
 8009294:	dd02      	ble.n	800929c <USBD_GetConfig+0x30>
 8009296:	2b03      	cmp	r3, #3
 8009298:	d00b      	beq.n	80092b2 <USBD_GetConfig+0x46>
 800929a:	e012      	b.n	80092c2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	3308      	adds	r3, #8
 80092a6:	2201      	movs	r2, #1
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f922 	bl	80094f4 <USBD_CtlSendData>
        break;
 80092b0:	e00c      	b.n	80092cc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	3304      	adds	r3, #4
 80092b6:	2201      	movs	r2, #1
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f91a 	bl	80094f4 <USBD_CtlSendData>
        break;
 80092c0:	e004      	b.n	80092cc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80092c2:	6839      	ldr	r1, [r7, #0]
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f8aa 	bl	800941e <USBD_CtlError>
        break;
 80092ca:	bf00      	nop
}
 80092cc:	bf00      	nop
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e4:	3b01      	subs	r3, #1
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d81e      	bhi.n	8009328 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	88db      	ldrh	r3, [r3, #6]
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d004      	beq.n	80092fc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f892 	bl	800941e <USBD_CtlError>
        break;
 80092fa:	e01a      	b.n	8009332 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009308:	2b00      	cmp	r3, #0
 800930a:	d005      	beq.n	8009318 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	f043 0202 	orr.w	r2, r3, #2
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	330c      	adds	r3, #12
 800931c:	2202      	movs	r2, #2
 800931e:	4619      	mov	r1, r3
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f8e7 	bl	80094f4 <USBD_CtlSendData>
      break;
 8009326:	e004      	b.n	8009332 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f877 	bl	800941e <USBD_CtlError>
      break;
 8009330:	bf00      	nop
  }
}
 8009332:	bf00      	nop
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	885b      	ldrh	r3, [r3, #2]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d106      	bne.n	800935a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f92b 	bl	80095b0 <USBD_CtlSendStatus>
  }
}
 800935a:	bf00      	nop
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b082      	sub	sp, #8
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009372:	3b01      	subs	r3, #1
 8009374:	2b02      	cmp	r3, #2
 8009376:	d80b      	bhi.n	8009390 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	885b      	ldrh	r3, [r3, #2]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d10c      	bne.n	800939a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f911 	bl	80095b0 <USBD_CtlSendStatus>
      }
      break;
 800938e:	e004      	b.n	800939a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f843 	bl	800941e <USBD_CtlError>
      break;
 8009398:	e000      	b.n	800939c <USBD_ClrFeature+0x3a>
      break;
 800939a:	bf00      	nop
  }
}
 800939c:	bf00      	nop
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	781a      	ldrb	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	785a      	ldrb	r2, [r3, #1]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	3302      	adds	r3, #2
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	3303      	adds	r3, #3
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	021b      	lsls	r3, r3, #8
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	4413      	add	r3, r2
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	3304      	adds	r3, #4
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	3305      	adds	r3, #5
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	021b      	lsls	r3, r3, #8
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	4413      	add	r3, r2
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	3306      	adds	r3, #6
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	3307      	adds	r3, #7
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	b29b      	uxth	r3, r3
 8009406:	021b      	lsls	r3, r3, #8
 8009408:	b29b      	uxth	r3, r3
 800940a:	4413      	add	r3, r2
 800940c:	b29a      	uxth	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	80da      	strh	r2, [r3, #6]

}
 8009412:	bf00      	nop
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b082      	sub	sp, #8
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009428:	2180      	movs	r1, #128	; 0x80
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f004 f972 	bl	800d714 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009430:	2100      	movs	r1, #0
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f004 f96e 	bl	800d714 <USBD_LL_StallEP>
}
 8009438:	bf00      	nop
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800944c:	2300      	movs	r3, #0
 800944e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d032      	beq.n	80094bc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 f834 	bl	80094c4 <USBD_GetLen>
 800945c:	4603      	mov	r3, r0
 800945e:	3301      	adds	r3, #1
 8009460:	b29b      	uxth	r3, r3
 8009462:	005b      	lsls	r3, r3, #1
 8009464:	b29a      	uxth	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800946a:	7dfb      	ldrb	r3, [r7, #23]
 800946c:	1c5a      	adds	r2, r3, #1
 800946e:	75fa      	strb	r2, [r7, #23]
 8009470:	461a      	mov	r2, r3
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	4413      	add	r3, r2
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	7812      	ldrb	r2, [r2, #0]
 800947a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800947c:	7dfb      	ldrb	r3, [r7, #23]
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	75fa      	strb	r2, [r7, #23]
 8009482:	461a      	mov	r2, r3
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	4413      	add	r3, r2
 8009488:	2203      	movs	r2, #3
 800948a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800948c:	e012      	b.n	80094b4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	1c5a      	adds	r2, r3, #1
 8009492:	60fa      	str	r2, [r7, #12]
 8009494:	7dfa      	ldrb	r2, [r7, #23]
 8009496:	1c51      	adds	r1, r2, #1
 8009498:	75f9      	strb	r1, [r7, #23]
 800949a:	4611      	mov	r1, r2
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	440a      	add	r2, r1
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	75fa      	strb	r2, [r7, #23]
 80094aa:	461a      	mov	r2, r3
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	4413      	add	r3, r2
 80094b0:	2200      	movs	r2, #0
 80094b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1e8      	bne.n	800948e <USBD_GetString+0x4e>
    }
  }
}
 80094bc:	bf00      	nop
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80094d0:	e005      	b.n	80094de <USBD_GetLen+0x1a>
  {
    len++;
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	3301      	adds	r3, #1
 80094d6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	3301      	adds	r3, #1
 80094dc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1f5      	bne.n	80094d2 <USBD_GetLen+0xe>
  }

  return len;
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3714      	adds	r7, #20
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	4613      	mov	r3, r2
 8009500:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2202      	movs	r2, #2
 8009506:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800950a:	88fa      	ldrh	r2, [r7, #6]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009510:	88fa      	ldrh	r2, [r7, #6]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009516:	88fb      	ldrh	r3, [r7, #6]
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	2100      	movs	r1, #0
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f004 f9c1 	bl	800d8a4 <USBD_LL_Transmit>

  return USBD_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	4613      	mov	r3, r2
 8009538:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800953a:	88fb      	ldrh	r3, [r7, #6]
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	2100      	movs	r1, #0
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f004 f9af 	bl	800d8a4 <USBD_LL_Transmit>

  return USBD_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	4613      	mov	r3, r2
 800955c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2203      	movs	r2, #3
 8009562:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009566:	88fa      	ldrh	r2, [r7, #6]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800956e:	88fa      	ldrh	r2, [r7, #6]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009576:	88fb      	ldrh	r3, [r7, #6]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	2100      	movs	r1, #0
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f004 f9cb 	bl	800d918 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	4613      	mov	r3, r2
 8009598:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800959a:	88fb      	ldrh	r3, [r7, #6]
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	2100      	movs	r1, #0
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f004 f9b9 	bl	800d918 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2204      	movs	r2, #4
 80095bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095c0:	2300      	movs	r3, #0
 80095c2:	2200      	movs	r2, #0
 80095c4:	2100      	movs	r1, #0
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f004 f96c 	bl	800d8a4 <USBD_LL_Transmit>

  return USBD_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2205      	movs	r2, #5
 80095e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095e6:	2300      	movs	r3, #0
 80095e8:	2200      	movs	r2, #0
 80095ea:	2100      	movs	r1, #0
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f004 f993 	bl	800d918 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80095fc:	b480      	push	{r7}
 80095fe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009600:	bf00      	nop
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
	...

0800960c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009612:	f3ef 8305 	mrs	r3, IPSR
 8009616:	60bb      	str	r3, [r7, #8]
  return(result);
 8009618:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800961a:	2b00      	cmp	r3, #0
 800961c:	d10f      	bne.n	800963e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800961e:	f3ef 8310 	mrs	r3, PRIMASK
 8009622:	607b      	str	r3, [r7, #4]
  return(result);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d105      	bne.n	8009636 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800962a:	f3ef 8311 	mrs	r3, BASEPRI
 800962e:	603b      	str	r3, [r7, #0]
  return(result);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d007      	beq.n	8009646 <osKernelInitialize+0x3a>
 8009636:	4b0e      	ldr	r3, [pc, #56]	; (8009670 <osKernelInitialize+0x64>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b02      	cmp	r3, #2
 800963c:	d103      	bne.n	8009646 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800963e:	f06f 0305 	mvn.w	r3, #5
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	e00c      	b.n	8009660 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009646:	4b0a      	ldr	r3, [pc, #40]	; (8009670 <osKernelInitialize+0x64>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d105      	bne.n	800965a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800964e:	4b08      	ldr	r3, [pc, #32]	; (8009670 <osKernelInitialize+0x64>)
 8009650:	2201      	movs	r2, #1
 8009652:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009654:	2300      	movs	r3, #0
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	e002      	b.n	8009660 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800965a:	f04f 33ff 	mov.w	r3, #4294967295
 800965e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009660:	68fb      	ldr	r3, [r7, #12]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	2000029c 	.word	0x2000029c

08009674 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800967a:	f3ef 8305 	mrs	r3, IPSR
 800967e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009680:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10f      	bne.n	80096a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009686:	f3ef 8310 	mrs	r3, PRIMASK
 800968a:	607b      	str	r3, [r7, #4]
  return(result);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d105      	bne.n	800969e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009692:	f3ef 8311 	mrs	r3, BASEPRI
 8009696:	603b      	str	r3, [r7, #0]
  return(result);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d007      	beq.n	80096ae <osKernelStart+0x3a>
 800969e:	4b0f      	ldr	r3, [pc, #60]	; (80096dc <osKernelStart+0x68>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d103      	bne.n	80096ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80096a6:	f06f 0305 	mvn.w	r3, #5
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	e010      	b.n	80096d0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80096ae:	4b0b      	ldr	r3, [pc, #44]	; (80096dc <osKernelStart+0x68>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d109      	bne.n	80096ca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80096b6:	f7ff ffa1 	bl	80095fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80096ba:	4b08      	ldr	r3, [pc, #32]	; (80096dc <osKernelStart+0x68>)
 80096bc:	2202      	movs	r2, #2
 80096be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80096c0:	f001 fea2 	bl	800b408 <vTaskStartScheduler>
      stat = osOK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	60fb      	str	r3, [r7, #12]
 80096c8:	e002      	b.n	80096d0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80096ca:	f04f 33ff 	mov.w	r3, #4294967295
 80096ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80096d0:	68fb      	ldr	r3, [r7, #12]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	2000029c 	.word	0x2000029c

080096e0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096e6:	f3ef 8305 	mrs	r3, IPSR
 80096ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80096ec:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10f      	bne.n	8009712 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096f2:	f3ef 8310 	mrs	r3, PRIMASK
 80096f6:	607b      	str	r3, [r7, #4]
  return(result);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d105      	bne.n	800970a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80096fe:	f3ef 8311 	mrs	r3, BASEPRI
 8009702:	603b      	str	r3, [r7, #0]
  return(result);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d007      	beq.n	800971a <osKernelGetTickCount+0x3a>
 800970a:	4b08      	ldr	r3, [pc, #32]	; (800972c <osKernelGetTickCount+0x4c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b02      	cmp	r3, #2
 8009710:	d103      	bne.n	800971a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8009712:	f001 ff97 	bl	800b644 <xTaskGetTickCountFromISR>
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	e002      	b.n	8009720 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800971a:	f001 ff83 	bl	800b624 <xTaskGetTickCount>
 800971e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8009720:	68fb      	ldr	r3, [r7, #12]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	2000029c 	.word	0x2000029c

08009730 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8009730:	b480      	push	{r7}
 8009732:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8009734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8009738:	4618      	mov	r0, r3
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
	...

08009744 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009744:	b580      	push	{r7, lr}
 8009746:	b090      	sub	sp, #64	; 0x40
 8009748:	af04      	add	r7, sp, #16
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009750:	2300      	movs	r3, #0
 8009752:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009754:	f3ef 8305 	mrs	r3, IPSR
 8009758:	61fb      	str	r3, [r7, #28]
  return(result);
 800975a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800975c:	2b00      	cmp	r3, #0
 800975e:	f040 808f 	bne.w	8009880 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009762:	f3ef 8310 	mrs	r3, PRIMASK
 8009766:	61bb      	str	r3, [r7, #24]
  return(result);
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d105      	bne.n	800977a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800976e:	f3ef 8311 	mrs	r3, BASEPRI
 8009772:	617b      	str	r3, [r7, #20]
  return(result);
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <osThreadNew+0x3e>
 800977a:	4b44      	ldr	r3, [pc, #272]	; (800988c <osThreadNew+0x148>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b02      	cmp	r3, #2
 8009780:	d07e      	beq.n	8009880 <osThreadNew+0x13c>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d07b      	beq.n	8009880 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009788:	2380      	movs	r3, #128	; 0x80
 800978a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800978c:	2318      	movs	r3, #24
 800978e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009790:	2300      	movs	r3, #0
 8009792:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009794:	f04f 33ff 	mov.w	r3, #4294967295
 8009798:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d045      	beq.n	800982c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d002      	beq.n	80097ae <osThreadNew+0x6a>
        name = attr->name;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d002      	beq.n	80097bc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d008      	beq.n	80097d4 <osThreadNew+0x90>
 80097c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c4:	2b38      	cmp	r3, #56	; 0x38
 80097c6:	d805      	bhi.n	80097d4 <osThreadNew+0x90>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d001      	beq.n	80097d8 <osThreadNew+0x94>
        return (NULL);
 80097d4:	2300      	movs	r3, #0
 80097d6:	e054      	b.n	8009882 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	695b      	ldr	r3, [r3, #20]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d003      	beq.n	80097e8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	089b      	lsrs	r3, r3, #2
 80097e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00e      	beq.n	800980e <osThreadNew+0xca>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	2b5b      	cmp	r3, #91	; 0x5b
 80097f6:	d90a      	bls.n	800980e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d006      	beq.n	800980e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	695b      	ldr	r3, [r3, #20]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <osThreadNew+0xca>
        mem = 1;
 8009808:	2301      	movs	r3, #1
 800980a:	623b      	str	r3, [r7, #32]
 800980c:	e010      	b.n	8009830 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10c      	bne.n	8009830 <osThreadNew+0xec>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d108      	bne.n	8009830 <osThreadNew+0xec>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d104      	bne.n	8009830 <osThreadNew+0xec>
          mem = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	623b      	str	r3, [r7, #32]
 800982a:	e001      	b.n	8009830 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800982c:	2300      	movs	r3, #0
 800982e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	2b01      	cmp	r3, #1
 8009834:	d110      	bne.n	8009858 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800983e:	9202      	str	r2, [sp, #8]
 8009840:	9301      	str	r3, [sp, #4]
 8009842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800984a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f001 fb8f 	bl	800af70 <xTaskCreateStatic>
 8009852:	4603      	mov	r3, r0
 8009854:	613b      	str	r3, [r7, #16]
 8009856:	e013      	b.n	8009880 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d110      	bne.n	8009880 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800985e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009860:	b29a      	uxth	r2, r3
 8009862:	f107 0310 	add.w	r3, r7, #16
 8009866:	9301      	str	r3, [sp, #4]
 8009868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f001 fbd7 	bl	800b024 <xTaskCreate>
 8009876:	4603      	mov	r3, r0
 8009878:	2b01      	cmp	r3, #1
 800987a:	d001      	beq.n	8009880 <osThreadNew+0x13c>
          hTask = NULL;
 800987c:	2300      	movs	r3, #0
 800987e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009880:	693b      	ldr	r3, [r7, #16]
}
 8009882:	4618      	mov	r0, r3
 8009884:	3730      	adds	r7, #48	; 0x30
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	2000029c 	.word	0x2000029c

08009890 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009898:	f3ef 8305 	mrs	r3, IPSR
 800989c:	613b      	str	r3, [r7, #16]
  return(result);
 800989e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10f      	bne.n	80098c4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098a4:	f3ef 8310 	mrs	r3, PRIMASK
 80098a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d105      	bne.n	80098bc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80098b0:	f3ef 8311 	mrs	r3, BASEPRI
 80098b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d007      	beq.n	80098cc <osDelay+0x3c>
 80098bc:	4b0a      	ldr	r3, [pc, #40]	; (80098e8 <osDelay+0x58>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d103      	bne.n	80098cc <osDelay+0x3c>
    stat = osErrorISR;
 80098c4:	f06f 0305 	mvn.w	r3, #5
 80098c8:	617b      	str	r3, [r7, #20]
 80098ca:	e007      	b.n	80098dc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d002      	beq.n	80098dc <osDelay+0x4c>
      vTaskDelay(ticks);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f001 fd62 	bl	800b3a0 <vTaskDelay>
    }
  }

  return (stat);
 80098dc:	697b      	ldr	r3, [r7, #20]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3718      	adds	r7, #24
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	2000029c 	.word	0x2000029c

080098ec <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098f4:	f3ef 8305 	mrs	r3, IPSR
 80098f8:	617b      	str	r3, [r7, #20]
  return(result);
 80098fa:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10f      	bne.n	8009920 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009900:	f3ef 8310 	mrs	r3, PRIMASK
 8009904:	613b      	str	r3, [r7, #16]
  return(result);
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d105      	bne.n	8009918 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800990c:	f3ef 8311 	mrs	r3, BASEPRI
 8009910:	60fb      	str	r3, [r7, #12]
  return(result);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d007      	beq.n	8009928 <osDelayUntil+0x3c>
 8009918:	4b13      	ldr	r3, [pc, #76]	; (8009968 <osDelayUntil+0x7c>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b02      	cmp	r3, #2
 800991e:	d103      	bne.n	8009928 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8009920:	f06f 0305 	mvn.w	r3, #5
 8009924:	61fb      	str	r3, [r7, #28]
 8009926:	e019      	b.n	800995c <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8009928:	2300      	movs	r3, #0
 800992a:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 800992c:	f001 fe7a 	bl	800b624 <xTaskGetTickCount>
 8009930:	4603      	mov	r3, r0
 8009932:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d009      	beq.n	8009956 <osDelayUntil+0x6a>
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	2b00      	cmp	r3, #0
 8009946:	db06      	blt.n	8009956 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8009948:	f107 0308 	add.w	r3, r7, #8
 800994c:	69b9      	ldr	r1, [r7, #24]
 800994e:	4618      	mov	r0, r3
 8009950:	f001 fcac 	bl	800b2ac <vTaskDelayUntil>
 8009954:	e002      	b.n	800995c <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009956:	f06f 0303 	mvn.w	r3, #3
 800995a:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800995c:	69fb      	ldr	r3, [r7, #28]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3720      	adds	r7, #32
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	2000029c 	.word	0x2000029c

0800996c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800996c:	b580      	push	{r7, lr}
 800996e:	b08a      	sub	sp, #40	; 0x28
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009974:	2300      	movs	r3, #0
 8009976:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009978:	f3ef 8305 	mrs	r3, IPSR
 800997c:	613b      	str	r3, [r7, #16]
  return(result);
 800997e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009980:	2b00      	cmp	r3, #0
 8009982:	f040 8085 	bne.w	8009a90 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009986:	f3ef 8310 	mrs	r3, PRIMASK
 800998a:	60fb      	str	r3, [r7, #12]
  return(result);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d105      	bne.n	800999e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009992:	f3ef 8311 	mrs	r3, BASEPRI
 8009996:	60bb      	str	r3, [r7, #8]
  return(result);
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <osMutexNew+0x3a>
 800999e:	4b3f      	ldr	r3, [pc, #252]	; (8009a9c <osMutexNew+0x130>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d074      	beq.n	8009a90 <osMutexNew+0x124>
    if (attr != NULL) {
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d003      	beq.n	80099b4 <osMutexNew+0x48>
      type = attr->attr_bits;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	623b      	str	r3, [r7, #32]
 80099b2:	e001      	b.n	80099b8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80099b4:	2300      	movs	r3, #0
 80099b6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80099b8:	6a3b      	ldr	r3, [r7, #32]
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d002      	beq.n	80099c8 <osMutexNew+0x5c>
      rmtx = 1U;
 80099c2:	2301      	movs	r3, #1
 80099c4:	61fb      	str	r3, [r7, #28]
 80099c6:	e001      	b.n	80099cc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80099c8:	2300      	movs	r3, #0
 80099ca:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	f003 0308 	and.w	r3, r3, #8
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d15c      	bne.n	8009a90 <osMutexNew+0x124>
      mem = -1;
 80099d6:	f04f 33ff 	mov.w	r3, #4294967295
 80099da:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d015      	beq.n	8009a0e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d006      	beq.n	80099f8 <osMutexNew+0x8c>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	2b4f      	cmp	r3, #79	; 0x4f
 80099f0:	d902      	bls.n	80099f8 <osMutexNew+0x8c>
          mem = 1;
 80099f2:	2301      	movs	r3, #1
 80099f4:	61bb      	str	r3, [r7, #24]
 80099f6:	e00c      	b.n	8009a12 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d108      	bne.n	8009a12 <osMutexNew+0xa6>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d104      	bne.n	8009a12 <osMutexNew+0xa6>
            mem = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	61bb      	str	r3, [r7, #24]
 8009a0c:	e001      	b.n	8009a12 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d112      	bne.n	8009a3e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d007      	beq.n	8009a2e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	4619      	mov	r1, r3
 8009a24:	2004      	movs	r0, #4
 8009a26:	f000 fcac 	bl	800a382 <xQueueCreateMutexStatic>
 8009a2a:	6278      	str	r0, [r7, #36]	; 0x24
 8009a2c:	e016      	b.n	8009a5c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	4619      	mov	r1, r3
 8009a34:	2001      	movs	r0, #1
 8009a36:	f000 fca4 	bl	800a382 <xQueueCreateMutexStatic>
 8009a3a:	6278      	str	r0, [r7, #36]	; 0x24
 8009a3c:	e00e      	b.n	8009a5c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10b      	bne.n	8009a5c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d004      	beq.n	8009a54 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009a4a:	2004      	movs	r0, #4
 8009a4c:	f000 fc81 	bl	800a352 <xQueueCreateMutex>
 8009a50:	6278      	str	r0, [r7, #36]	; 0x24
 8009a52:	e003      	b.n	8009a5c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009a54:	2001      	movs	r0, #1
 8009a56:	f000 fc7c 	bl	800a352 <xQueueCreateMutex>
 8009a5a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00c      	beq.n	8009a7c <osMutexNew+0x110>
        if (attr != NULL) {
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d003      	beq.n	8009a70 <osMutexNew+0x104>
          name = attr->name;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	617b      	str	r3, [r7, #20]
 8009a6e:	e001      	b.n	8009a74 <osMutexNew+0x108>
        } else {
          name = NULL;
 8009a70:	2300      	movs	r3, #0
 8009a72:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009a74:	6979      	ldr	r1, [r7, #20]
 8009a76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a78:	f001 fa1e 	bl	800aeb8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d006      	beq.n	8009a90 <osMutexNew+0x124>
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d003      	beq.n	8009a90 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	f043 0301 	orr.w	r3, r3, #1
 8009a8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3728      	adds	r7, #40	; 0x28
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	2000029c 	.word	0x2000029c

08009aa0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f023 0301 	bic.w	r3, r3, #1
 8009ab0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009abe:	f3ef 8305 	mrs	r3, IPSR
 8009ac2:	613b      	str	r3, [r7, #16]
  return(result);
 8009ac4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10f      	bne.n	8009aea <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009aca:	f3ef 8310 	mrs	r3, PRIMASK
 8009ace:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d105      	bne.n	8009ae2 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ad6:	f3ef 8311 	mrs	r3, BASEPRI
 8009ada:	60bb      	str	r3, [r7, #8]
  return(result);
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d007      	beq.n	8009af2 <osMutexAcquire+0x52>
 8009ae2:	4b1d      	ldr	r3, [pc, #116]	; (8009b58 <osMutexAcquire+0xb8>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d103      	bne.n	8009af2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8009aea:	f06f 0305 	mvn.w	r3, #5
 8009aee:	61fb      	str	r3, [r7, #28]
 8009af0:	e02c      	b.n	8009b4c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d103      	bne.n	8009b00 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8009af8:	f06f 0303 	mvn.w	r3, #3
 8009afc:	61fb      	str	r3, [r7, #28]
 8009afe:	e025      	b.n	8009b4c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d011      	beq.n	8009b2a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	69b8      	ldr	r0, [r7, #24]
 8009b0a:	f000 fc88 	bl	800a41e <xQueueTakeMutexRecursive>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d01b      	beq.n	8009b4c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8009b1a:	f06f 0301 	mvn.w	r3, #1
 8009b1e:	61fb      	str	r3, [r7, #28]
 8009b20:	e014      	b.n	8009b4c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009b22:	f06f 0302 	mvn.w	r3, #2
 8009b26:	61fb      	str	r3, [r7, #28]
 8009b28:	e010      	b.n	8009b4c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009b2a:	6839      	ldr	r1, [r7, #0]
 8009b2c:	69b8      	ldr	r0, [r7, #24]
 8009b2e:	f000 ff15 	bl	800a95c <xQueueSemaphoreTake>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d009      	beq.n	8009b4c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d003      	beq.n	8009b46 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8009b3e:	f06f 0301 	mvn.w	r3, #1
 8009b42:	61fb      	str	r3, [r7, #28]
 8009b44:	e002      	b.n	8009b4c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009b46:	f06f 0302 	mvn.w	r3, #2
 8009b4a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009b4c:	69fb      	ldr	r3, [r7, #28]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3720      	adds	r7, #32
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	2000029c 	.word	0x2000029c

08009b5c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b088      	sub	sp, #32
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f023 0301 	bic.w	r3, r3, #1
 8009b6a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f003 0301 	and.w	r3, r3, #1
 8009b72:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b78:	f3ef 8305 	mrs	r3, IPSR
 8009b7c:	613b      	str	r3, [r7, #16]
  return(result);
 8009b7e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10f      	bne.n	8009ba4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b84:	f3ef 8310 	mrs	r3, PRIMASK
 8009b88:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d105      	bne.n	8009b9c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b90:	f3ef 8311 	mrs	r3, BASEPRI
 8009b94:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d007      	beq.n	8009bac <osMutexRelease+0x50>
 8009b9c:	4b16      	ldr	r3, [pc, #88]	; (8009bf8 <osMutexRelease+0x9c>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d103      	bne.n	8009bac <osMutexRelease+0x50>
    stat = osErrorISR;
 8009ba4:	f06f 0305 	mvn.w	r3, #5
 8009ba8:	61fb      	str	r3, [r7, #28]
 8009baa:	e01f      	b.n	8009bec <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d103      	bne.n	8009bba <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8009bb2:	f06f 0303 	mvn.w	r3, #3
 8009bb6:	61fb      	str	r3, [r7, #28]
 8009bb8:	e018      	b.n	8009bec <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d009      	beq.n	8009bd4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009bc0:	69b8      	ldr	r0, [r7, #24]
 8009bc2:	f000 fbf9 	bl	800a3b8 <xQueueGiveMutexRecursive>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d00f      	beq.n	8009bec <osMutexRelease+0x90>
        stat = osErrorResource;
 8009bcc:	f06f 0302 	mvn.w	r3, #2
 8009bd0:	61fb      	str	r3, [r7, #28]
 8009bd2:	e00b      	b.n	8009bec <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	2100      	movs	r1, #0
 8009bda:	69b8      	ldr	r0, [r7, #24]
 8009bdc:	f000 fc54 	bl	800a488 <xQueueGenericSend>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d002      	beq.n	8009bec <osMutexRelease+0x90>
        stat = osErrorResource;
 8009be6:	f06f 0302 	mvn.w	r3, #2
 8009bea:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8009bec:	69fb      	ldr	r3, [r7, #28]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3720      	adds	r7, #32
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	2000029c 	.word	0x2000029c

08009bfc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08c      	sub	sp, #48	; 0x30
 8009c00:	af02      	add	r7, sp, #8
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c0c:	f3ef 8305 	mrs	r3, IPSR
 8009c10:	61bb      	str	r3, [r7, #24]
  return(result);
 8009c12:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d170      	bne.n	8009cfa <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c18:	f3ef 8310 	mrs	r3, PRIMASK
 8009c1c:	617b      	str	r3, [r7, #20]
  return(result);
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d105      	bne.n	8009c30 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c24:	f3ef 8311 	mrs	r3, BASEPRI
 8009c28:	613b      	str	r3, [r7, #16]
  return(result);
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d003      	beq.n	8009c38 <osMessageQueueNew+0x3c>
 8009c30:	4b34      	ldr	r3, [pc, #208]	; (8009d04 <osMessageQueueNew+0x108>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d060      	beq.n	8009cfa <osMessageQueueNew+0xfe>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d05d      	beq.n	8009cfa <osMessageQueueNew+0xfe>
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d05a      	beq.n	8009cfa <osMessageQueueNew+0xfe>
    mem = -1;
 8009c44:	f04f 33ff 	mov.w	r3, #4294967295
 8009c48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d029      	beq.n	8009ca4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d012      	beq.n	8009c7e <osMessageQueueNew+0x82>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	2b4f      	cmp	r3, #79	; 0x4f
 8009c5e:	d90e      	bls.n	8009c7e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00a      	beq.n	8009c7e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	695a      	ldr	r2, [r3, #20]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	68b9      	ldr	r1, [r7, #8]
 8009c70:	fb01 f303 	mul.w	r3, r1, r3
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d302      	bcc.n	8009c7e <osMessageQueueNew+0x82>
        mem = 1;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	623b      	str	r3, [r7, #32]
 8009c7c:	e014      	b.n	8009ca8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d110      	bne.n	8009ca8 <osMessageQueueNew+0xac>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10c      	bne.n	8009ca8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d108      	bne.n	8009ca8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d104      	bne.n	8009ca8 <osMessageQueueNew+0xac>
          mem = 0;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	623b      	str	r3, [r7, #32]
 8009ca2:	e001      	b.n	8009ca8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d10c      	bne.n	8009cc8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	691a      	ldr	r2, [r3, #16]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6899      	ldr	r1, [r3, #8]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	460b      	mov	r3, r1
 8009cbc:	68b9      	ldr	r1, [r7, #8]
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f000 fa58 	bl	800a174 <xQueueGenericCreateStatic>
 8009cc4:	6278      	str	r0, [r7, #36]	; 0x24
 8009cc6:	e008      	b.n	8009cda <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d105      	bne.n	8009cda <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009cce:	2200      	movs	r2, #0
 8009cd0:	68b9      	ldr	r1, [r7, #8]
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f000 fac1 	bl	800a25a <xQueueGenericCreate>
 8009cd8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00c      	beq.n	8009cfa <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d003      	beq.n	8009cee <osMessageQueueNew+0xf2>
        name = attr->name;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	61fb      	str	r3, [r7, #28]
 8009cec:	e001      	b.n	8009cf2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009cf2:	69f9      	ldr	r1, [r7, #28]
 8009cf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009cf6:	f001 f8df 	bl	800aeb8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3728      	adds	r7, #40	; 0x28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	2000029c 	.word	0x2000029c

08009d08 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b08a      	sub	sp, #40	; 0x28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	4613      	mov	r3, r2
 8009d16:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d20:	f3ef 8305 	mrs	r3, IPSR
 8009d24:	61fb      	str	r3, [r7, #28]
  return(result);
 8009d26:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10f      	bne.n	8009d4c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8009d30:	61bb      	str	r3, [r7, #24]
  return(result);
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d105      	bne.n	8009d44 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d38:	f3ef 8311 	mrs	r3, BASEPRI
 8009d3c:	617b      	str	r3, [r7, #20]
  return(result);
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d02c      	beq.n	8009d9e <osMessageQueuePut+0x96>
 8009d44:	4b28      	ldr	r3, [pc, #160]	; (8009de8 <osMessageQueuePut+0xe0>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d128      	bne.n	8009d9e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d005      	beq.n	8009d5e <osMessageQueuePut+0x56>
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <osMessageQueuePut+0x56>
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8009d5e:	f06f 0303 	mvn.w	r3, #3
 8009d62:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d64:	e039      	b.n	8009dda <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8009d66:	2300      	movs	r3, #0
 8009d68:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009d6a:	f107 0210 	add.w	r2, r7, #16
 8009d6e:	2300      	movs	r3, #0
 8009d70:	68b9      	ldr	r1, [r7, #8]
 8009d72:	6a38      	ldr	r0, [r7, #32]
 8009d74:	f000 fc82 	bl	800a67c <xQueueGenericSendFromISR>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d003      	beq.n	8009d86 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8009d7e:	f06f 0302 	mvn.w	r3, #2
 8009d82:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d84:	e029      	b.n	8009dda <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d026      	beq.n	8009dda <osMessageQueuePut+0xd2>
 8009d8c:	4b17      	ldr	r3, [pc, #92]	; (8009dec <osMessageQueuePut+0xe4>)
 8009d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d9c:	e01d      	b.n	8009dda <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <osMessageQueuePut+0xa2>
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d103      	bne.n	8009db2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8009daa:	f06f 0303 	mvn.w	r3, #3
 8009dae:	627b      	str	r3, [r7, #36]	; 0x24
 8009db0:	e014      	b.n	8009ddc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009db2:	2300      	movs	r3, #0
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	68b9      	ldr	r1, [r7, #8]
 8009db8:	6a38      	ldr	r0, [r7, #32]
 8009dba:	f000 fb65 	bl	800a488 <xQueueGenericSend>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d00b      	beq.n	8009ddc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d003      	beq.n	8009dd2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009dca:	f06f 0301 	mvn.w	r3, #1
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24
 8009dd0:	e004      	b.n	8009ddc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8009dd2:	f06f 0302 	mvn.w	r3, #2
 8009dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8009dd8:	e000      	b.n	8009ddc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009dda:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3728      	adds	r7, #40	; 0x28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	2000029c 	.word	0x2000029c
 8009dec:	e000ed04 	.word	0xe000ed04

08009df0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b08a      	sub	sp, #40	; 0x28
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
 8009dfc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009e02:	2300      	movs	r3, #0
 8009e04:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e06:	f3ef 8305 	mrs	r3, IPSR
 8009e0a:	61fb      	str	r3, [r7, #28]
  return(result);
 8009e0c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10f      	bne.n	8009e32 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e12:	f3ef 8310 	mrs	r3, PRIMASK
 8009e16:	61bb      	str	r3, [r7, #24]
  return(result);
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d105      	bne.n	8009e2a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e1e:	f3ef 8311 	mrs	r3, BASEPRI
 8009e22:	617b      	str	r3, [r7, #20]
  return(result);
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d02c      	beq.n	8009e84 <osMessageQueueGet+0x94>
 8009e2a:	4b28      	ldr	r3, [pc, #160]	; (8009ecc <osMessageQueueGet+0xdc>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	d128      	bne.n	8009e84 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d005      	beq.n	8009e44 <osMessageQueueGet+0x54>
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d002      	beq.n	8009e44 <osMessageQueueGet+0x54>
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d003      	beq.n	8009e4c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8009e44:	f06f 0303 	mvn.w	r3, #3
 8009e48:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009e4a:	e038      	b.n	8009ebe <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009e50:	f107 0310 	add.w	r3, r7, #16
 8009e54:	461a      	mov	r2, r3
 8009e56:	68b9      	ldr	r1, [r7, #8]
 8009e58:	6a38      	ldr	r0, [r7, #32]
 8009e5a:	f000 fe87 	bl	800ab6c <xQueueReceiveFromISR>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d003      	beq.n	8009e6c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8009e64:	f06f 0302 	mvn.w	r3, #2
 8009e68:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009e6a:	e028      	b.n	8009ebe <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d025      	beq.n	8009ebe <osMessageQueueGet+0xce>
 8009e72:	4b17      	ldr	r3, [pc, #92]	; (8009ed0 <osMessageQueueGet+0xe0>)
 8009e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e78:	601a      	str	r2, [r3, #0]
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009e82:	e01c      	b.n	8009ebe <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d002      	beq.n	8009e90 <osMessageQueueGet+0xa0>
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d103      	bne.n	8009e98 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009e90:	f06f 0303 	mvn.w	r3, #3
 8009e94:	627b      	str	r3, [r7, #36]	; 0x24
 8009e96:	e013      	b.n	8009ec0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	68b9      	ldr	r1, [r7, #8]
 8009e9c:	6a38      	ldr	r0, [r7, #32]
 8009e9e:	f000 fc81 	bl	800a7a4 <xQueueReceive>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d00b      	beq.n	8009ec0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d003      	beq.n	8009eb6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009eae:	f06f 0301 	mvn.w	r3, #1
 8009eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8009eb4:	e004      	b.n	8009ec0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8009eb6:	f06f 0302 	mvn.w	r3, #2
 8009eba:	627b      	str	r3, [r7, #36]	; 0x24
 8009ebc:	e000      	b.n	8009ec0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ebe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3728      	adds	r7, #40	; 0x28
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	2000029c 	.word	0x2000029c
 8009ed0:	e000ed04 	.word	0xe000ed04

08009ed4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4a07      	ldr	r2, [pc, #28]	; (8009f00 <vApplicationGetIdleTaskMemory+0x2c>)
 8009ee4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	4a06      	ldr	r2, [pc, #24]	; (8009f04 <vApplicationGetIdleTaskMemory+0x30>)
 8009eea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2280      	movs	r2, #128	; 0x80
 8009ef0:	601a      	str	r2, [r3, #0]
}
 8009ef2:	bf00      	nop
 8009ef4:	3714      	adds	r7, #20
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	200002a0 	.word	0x200002a0
 8009f04:	200002fc 	.word	0x200002fc

08009f08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	4a07      	ldr	r2, [pc, #28]	; (8009f34 <vApplicationGetTimerTaskMemory+0x2c>)
 8009f18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	4a06      	ldr	r2, [pc, #24]	; (8009f38 <vApplicationGetTimerTaskMemory+0x30>)
 8009f1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f26:	601a      	str	r2, [r3, #0]
}
 8009f28:	bf00      	nop
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr
 8009f34:	200004fc 	.word	0x200004fc
 8009f38:	20000558 	.word	0x20000558

08009f3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f103 0208 	add.w	r2, r3, #8
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f04f 32ff 	mov.w	r2, #4294967295
 8009f54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f103 0208 	add.w	r2, r3, #8
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f103 0208 	add.w	r2, r3, #8
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f8a:	bf00      	nop
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f96:	b480      	push	{r7}
 8009f98:	b085      	sub	sp, #20
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	689a      	ldr	r2, [r3, #8]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	683a      	ldr	r2, [r7, #0]
 8009fc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	1c5a      	adds	r2, r3, #1
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	601a      	str	r2, [r3, #0]
}
 8009fd2:	bf00      	nop
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b085      	sub	sp, #20
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff4:	d103      	bne.n	8009ffe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	60fb      	str	r3, [r7, #12]
 8009ffc:	e00c      	b.n	800a018 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	3308      	adds	r3, #8
 800a002:	60fb      	str	r3, [r7, #12]
 800a004:	e002      	b.n	800a00c <vListInsert+0x2e>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	60fb      	str	r3, [r7, #12]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68ba      	ldr	r2, [r7, #8]
 800a014:	429a      	cmp	r2, r3
 800a016:	d2f6      	bcs.n	800a006 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	683a      	ldr	r2, [r7, #0]
 800a032:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	1c5a      	adds	r2, r3, #1
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	601a      	str	r2, [r3, #0]
}
 800a044:	bf00      	nop
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	691b      	ldr	r3, [r3, #16]
 800a05c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	6892      	ldr	r2, [r2, #8]
 800a066:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	6852      	ldr	r2, [r2, #4]
 800a070:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d103      	bne.n	800a084 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	689a      	ldr	r2, [r3, #8]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	1e5a      	subs	r2, r3, #1
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3714      	adds	r7, #20
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d109      	bne.n	800a0cc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	60bb      	str	r3, [r7, #8]
 800a0ca:	e7fe      	b.n	800a0ca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a0cc:	f002 fc3e 	bl	800c94c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d8:	68f9      	ldr	r1, [r7, #12]
 800a0da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a0dc:	fb01 f303 	mul.w	r3, r1, r3
 800a0e0:	441a      	add	r2, r3
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	68f9      	ldr	r1, [r7, #12]
 800a100:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a102:	fb01 f303 	mul.w	r3, r1, r3
 800a106:	441a      	add	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	22ff      	movs	r2, #255	; 0xff
 800a110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	22ff      	movs	r2, #255	; 0xff
 800a118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d114      	bne.n	800a14c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d01a      	beq.n	800a160 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	3310      	adds	r3, #16
 800a12e:	4618      	mov	r0, r3
 800a130:	f001 fbfc 	bl	800b92c <xTaskRemoveFromEventList>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d012      	beq.n	800a160 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a13a:	4b0d      	ldr	r3, [pc, #52]	; (800a170 <xQueueGenericReset+0xcc>)
 800a13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	e009      	b.n	800a160 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	3310      	adds	r3, #16
 800a150:	4618      	mov	r0, r3
 800a152:	f7ff fef3 	bl	8009f3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	3324      	adds	r3, #36	; 0x24
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7ff feee 	bl	8009f3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a160:	f002 fc22 	bl	800c9a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a164:	2301      	movs	r3, #1
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	e000ed04 	.word	0xe000ed04

0800a174 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a174:	b580      	push	{r7, lr}
 800a176:	b08e      	sub	sp, #56	; 0x38
 800a178:	af02      	add	r7, sp, #8
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
 800a180:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d109      	bne.n	800a19c <xQueueGenericCreateStatic+0x28>
 800a188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	62bb      	str	r3, [r7, #40]	; 0x28
 800a19a:	e7fe      	b.n	800a19a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d109      	bne.n	800a1b6 <xQueueGenericCreateStatic+0x42>
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	627b      	str	r3, [r7, #36]	; 0x24
 800a1b4:	e7fe      	b.n	800a1b4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d002      	beq.n	800a1c2 <xQueueGenericCreateStatic+0x4e>
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <xQueueGenericCreateStatic+0x52>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e000      	b.n	800a1c8 <xQueueGenericCreateStatic+0x54>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d109      	bne.n	800a1e0 <xQueueGenericCreateStatic+0x6c>
 800a1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	623b      	str	r3, [r7, #32]
 800a1de:	e7fe      	b.n	800a1de <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d102      	bne.n	800a1ec <xQueueGenericCreateStatic+0x78>
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d101      	bne.n	800a1f0 <xQueueGenericCreateStatic+0x7c>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e000      	b.n	800a1f2 <xQueueGenericCreateStatic+0x7e>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d109      	bne.n	800a20a <xQueueGenericCreateStatic+0x96>
 800a1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	61fb      	str	r3, [r7, #28]
 800a208:	e7fe      	b.n	800a208 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a20a:	2350      	movs	r3, #80	; 0x50
 800a20c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	2b50      	cmp	r3, #80	; 0x50
 800a212:	d009      	beq.n	800a228 <xQueueGenericCreateStatic+0xb4>
 800a214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	61bb      	str	r3, [r7, #24]
 800a226:	e7fe      	b.n	800a226 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a228:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00d      	beq.n	800a250 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a236:	2201      	movs	r2, #1
 800a238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a23c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	4613      	mov	r3, r2
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	68b9      	ldr	r1, [r7, #8]
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f000 f844 	bl	800a2d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a252:	4618      	mov	r0, r3
 800a254:	3730      	adds	r7, #48	; 0x30
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b08a      	sub	sp, #40	; 0x28
 800a25e:	af02      	add	r7, sp, #8
 800a260:	60f8      	str	r0, [r7, #12]
 800a262:	60b9      	str	r1, [r7, #8]
 800a264:	4613      	mov	r3, r2
 800a266:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d109      	bne.n	800a282 <xQueueGenericCreate+0x28>
 800a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	613b      	str	r3, [r7, #16]
 800a280:	e7fe      	b.n	800a280 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a288:	2300      	movs	r3, #0
 800a28a:	61fb      	str	r3, [r7, #28]
 800a28c:	e004      	b.n	800a298 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	fb02 f303 	mul.w	r3, r2, r3
 800a296:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	3350      	adds	r3, #80	; 0x50
 800a29c:	4618      	mov	r0, r3
 800a29e:	f002 fc6f 	bl	800cb80 <pvPortMalloc>
 800a2a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d011      	beq.n	800a2ce <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	3350      	adds	r3, #80	; 0x50
 800a2b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a2bc:	79fa      	ldrb	r2, [r7, #7]
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	68b9      	ldr	r1, [r7, #8]
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 f805 	bl	800a2d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a2ce:	69bb      	ldr	r3, [r7, #24]
	}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3720      	adds	r7, #32
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d103      	bne.n	800a2f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	69ba      	ldr	r2, [r7, #24]
 800a2f0:	601a      	str	r2, [r3, #0]
 800a2f2:	e002      	b.n	800a2fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	68ba      	ldr	r2, [r7, #8]
 800a304:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a306:	2101      	movs	r1, #1
 800a308:	69b8      	ldr	r0, [r7, #24]
 800a30a:	f7ff fecb 	bl	800a0a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	78fa      	ldrb	r2, [r7, #3]
 800a312:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a316:	bf00      	nop
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b082      	sub	sp, #8
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00e      	beq.n	800a34a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a33e:	2300      	movs	r3, #0
 800a340:	2200      	movs	r2, #0
 800a342:	2100      	movs	r1, #0
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f89f 	bl	800a488 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a34a:	bf00      	nop
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a352:	b580      	push	{r7, lr}
 800a354:	b086      	sub	sp, #24
 800a356:	af00      	add	r7, sp, #0
 800a358:	4603      	mov	r3, r0
 800a35a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a35c:	2301      	movs	r3, #1
 800a35e:	617b      	str	r3, [r7, #20]
 800a360:	2300      	movs	r3, #0
 800a362:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a364:	79fb      	ldrb	r3, [r7, #7]
 800a366:	461a      	mov	r2, r3
 800a368:	6939      	ldr	r1, [r7, #16]
 800a36a:	6978      	ldr	r0, [r7, #20]
 800a36c:	f7ff ff75 	bl	800a25a <xQueueGenericCreate>
 800a370:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f7ff ffd3 	bl	800a31e <prvInitialiseMutex>

		return xNewQueue;
 800a378:	68fb      	ldr	r3, [r7, #12]
	}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3718      	adds	r7, #24
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a382:	b580      	push	{r7, lr}
 800a384:	b088      	sub	sp, #32
 800a386:	af02      	add	r7, sp, #8
 800a388:	4603      	mov	r3, r0
 800a38a:	6039      	str	r1, [r7, #0]
 800a38c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a38e:	2301      	movs	r3, #1
 800a390:	617b      	str	r3, [r7, #20]
 800a392:	2300      	movs	r3, #0
 800a394:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	2200      	movs	r2, #0
 800a39e:	6939      	ldr	r1, [r7, #16]
 800a3a0:	6978      	ldr	r0, [r7, #20]
 800a3a2:	f7ff fee7 	bl	800a174 <xQueueGenericCreateStatic>
 800a3a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f7ff ffb8 	bl	800a31e <prvInitialiseMutex>

		return xNewQueue;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
	}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a3b8:	b590      	push	{r4, r7, lr}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d109      	bne.n	800a3de <xQueueGiveMutexRecursive+0x26>
 800a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	60fb      	str	r3, [r7, #12]
 800a3dc:	e7fe      	b.n	800a3dc <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	689c      	ldr	r4, [r3, #8]
 800a3e2:	f001 fc59 	bl	800bc98 <xTaskGetCurrentTaskHandle>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	429c      	cmp	r4, r3
 800a3ea:	d111      	bne.n	800a410 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	1e5a      	subs	r2, r3, #1
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d105      	bne.n	800a40a <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a3fe:	2300      	movs	r3, #0
 800a400:	2200      	movs	r2, #0
 800a402:	2100      	movs	r1, #0
 800a404:	6938      	ldr	r0, [r7, #16]
 800a406:	f000 f83f 	bl	800a488 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a40a:	2301      	movs	r3, #1
 800a40c:	617b      	str	r3, [r7, #20]
 800a40e:	e001      	b.n	800a414 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a410:	2300      	movs	r3, #0
 800a412:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a414:	697b      	ldr	r3, [r7, #20]
	}
 800a416:	4618      	mov	r0, r3
 800a418:	371c      	adds	r7, #28
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd90      	pop	{r4, r7, pc}

0800a41e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a41e:	b590      	push	{r4, r7, lr}
 800a420:	b087      	sub	sp, #28
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d109      	bne.n	800a446 <xQueueTakeMutexRecursive+0x28>
 800a432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	e7fe      	b.n	800a444 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	689c      	ldr	r4, [r3, #8]
 800a44a:	f001 fc25 	bl	800bc98 <xTaskGetCurrentTaskHandle>
 800a44e:	4603      	mov	r3, r0
 800a450:	429c      	cmp	r4, r3
 800a452:	d107      	bne.n	800a464 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	1c5a      	adds	r2, r3, #1
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a45e:	2301      	movs	r3, #1
 800a460:	617b      	str	r3, [r7, #20]
 800a462:	e00c      	b.n	800a47e <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a464:	6839      	ldr	r1, [r7, #0]
 800a466:	6938      	ldr	r0, [r7, #16]
 800a468:	f000 fa78 	bl	800a95c <xQueueSemaphoreTake>
 800a46c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d004      	beq.n	800a47e <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	1c5a      	adds	r2, r3, #1
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a47e:	697b      	ldr	r3, [r7, #20]
	}
 800a480:	4618      	mov	r0, r3
 800a482:	371c      	adds	r7, #28
 800a484:	46bd      	mov	sp, r7
 800a486:	bd90      	pop	{r4, r7, pc}

0800a488 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08e      	sub	sp, #56	; 0x38
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a496:	2300      	movs	r3, #0
 800a498:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d109      	bne.n	800a4b8 <xQueueGenericSend+0x30>
 800a4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a8:	f383 8811 	msr	BASEPRI, r3
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4b6:	e7fe      	b.n	800a4b6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d103      	bne.n	800a4c6 <xQueueGenericSend+0x3e>
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <xQueueGenericSend+0x42>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e000      	b.n	800a4cc <xQueueGenericSend+0x44>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d109      	bne.n	800a4e4 <xQueueGenericSend+0x5c>
 800a4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a4e2:	e7fe      	b.n	800a4e2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d103      	bne.n	800a4f2 <xQueueGenericSend+0x6a>
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d101      	bne.n	800a4f6 <xQueueGenericSend+0x6e>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e000      	b.n	800a4f8 <xQueueGenericSend+0x70>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d109      	bne.n	800a510 <xQueueGenericSend+0x88>
 800a4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a500:	f383 8811 	msr	BASEPRI, r3
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	f3bf 8f4f 	dsb	sy
 800a50c:	623b      	str	r3, [r7, #32]
 800a50e:	e7fe      	b.n	800a50e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a510:	f001 fbd2 	bl	800bcb8 <xTaskGetSchedulerState>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d102      	bne.n	800a520 <xQueueGenericSend+0x98>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d101      	bne.n	800a524 <xQueueGenericSend+0x9c>
 800a520:	2301      	movs	r3, #1
 800a522:	e000      	b.n	800a526 <xQueueGenericSend+0x9e>
 800a524:	2300      	movs	r3, #0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d109      	bne.n	800a53e <xQueueGenericSend+0xb6>
 800a52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52e:	f383 8811 	msr	BASEPRI, r3
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	61fb      	str	r3, [r7, #28]
 800a53c:	e7fe      	b.n	800a53c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a53e:	f002 fa05 	bl	800c94c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d302      	bcc.n	800a554 <xQueueGenericSend+0xcc>
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2b02      	cmp	r3, #2
 800a552:	d129      	bne.n	800a5a8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a554:	683a      	ldr	r2, [r7, #0]
 800a556:	68b9      	ldr	r1, [r7, #8]
 800a558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a55a:	f000 fb9c 	bl	800ac96 <prvCopyDataToQueue>
 800a55e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	2b00      	cmp	r3, #0
 800a566:	d010      	beq.n	800a58a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56a:	3324      	adds	r3, #36	; 0x24
 800a56c:	4618      	mov	r0, r3
 800a56e:	f001 f9dd 	bl	800b92c <xTaskRemoveFromEventList>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d013      	beq.n	800a5a0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a578:	4b3f      	ldr	r3, [pc, #252]	; (800a678 <xQueueGenericSend+0x1f0>)
 800a57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	e00a      	b.n	800a5a0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d007      	beq.n	800a5a0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a590:	4b39      	ldr	r3, [pc, #228]	; (800a678 <xQueueGenericSend+0x1f0>)
 800a592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a596:	601a      	str	r2, [r3, #0]
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a5a0:	f002 fa02 	bl	800c9a8 <vPortExitCritical>
				return pdPASS;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e063      	b.n	800a670 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d103      	bne.n	800a5b6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5ae:	f002 f9fb 	bl	800c9a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	e05c      	b.n	800a670 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d106      	bne.n	800a5ca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5bc:	f107 0314 	add.w	r3, r7, #20
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f001 fa15 	bl	800b9f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5ca:	f002 f9ed 	bl	800c9a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5ce:	f000 ff7f 	bl	800b4d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5d2:	f002 f9bb 	bl	800c94c <vPortEnterCritical>
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5dc:	b25b      	sxtb	r3, r3
 800a5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e2:	d103      	bne.n	800a5ec <xQueueGenericSend+0x164>
 800a5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5f2:	b25b      	sxtb	r3, r3
 800a5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f8:	d103      	bne.n	800a602 <xQueueGenericSend+0x17a>
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a602:	f002 f9d1 	bl	800c9a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a606:	1d3a      	adds	r2, r7, #4
 800a608:	f107 0314 	add.w	r3, r7, #20
 800a60c:	4611      	mov	r1, r2
 800a60e:	4618      	mov	r0, r3
 800a610:	f001 fa04 	bl	800ba1c <xTaskCheckForTimeOut>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d124      	bne.n	800a664 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a61a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a61c:	f000 fc33 	bl	800ae86 <prvIsQueueFull>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d018      	beq.n	800a658 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a628:	3310      	adds	r3, #16
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	4611      	mov	r1, r2
 800a62e:	4618      	mov	r0, r3
 800a630:	f001 f92e 	bl	800b890 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a636:	f000 fbbe 	bl	800adb6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a63a:	f000 ff57 	bl	800b4ec <xTaskResumeAll>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	f47f af7c 	bne.w	800a53e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a646:	4b0c      	ldr	r3, [pc, #48]	; (800a678 <xQueueGenericSend+0x1f0>)
 800a648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a64c:	601a      	str	r2, [r3, #0]
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	e772      	b.n	800a53e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a65a:	f000 fbac 	bl	800adb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a65e:	f000 ff45 	bl	800b4ec <xTaskResumeAll>
 800a662:	e76c      	b.n	800a53e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a666:	f000 fba6 	bl	800adb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a66a:	f000 ff3f 	bl	800b4ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a66e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a670:	4618      	mov	r0, r3
 800a672:	3738      	adds	r7, #56	; 0x38
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	e000ed04 	.word	0xe000ed04

0800a67c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b08e      	sub	sp, #56	; 0x38
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
 800a688:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a690:	2b00      	cmp	r3, #0
 800a692:	d109      	bne.n	800a6a8 <xQueueGenericSendFromISR+0x2c>
 800a694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a6a6:	e7fe      	b.n	800a6a6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d103      	bne.n	800a6b6 <xQueueGenericSendFromISR+0x3a>
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d101      	bne.n	800a6ba <xQueueGenericSendFromISR+0x3e>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e000      	b.n	800a6bc <xQueueGenericSendFromISR+0x40>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d109      	bne.n	800a6d4 <xQueueGenericSendFromISR+0x58>
 800a6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	623b      	str	r3, [r7, #32]
 800a6d2:	e7fe      	b.n	800a6d2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d103      	bne.n	800a6e2 <xQueueGenericSendFromISR+0x66>
 800a6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d101      	bne.n	800a6e6 <xQueueGenericSendFromISR+0x6a>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e000      	b.n	800a6e8 <xQueueGenericSendFromISR+0x6c>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d109      	bne.n	800a700 <xQueueGenericSendFromISR+0x84>
 800a6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	61fb      	str	r3, [r7, #28]
 800a6fe:	e7fe      	b.n	800a6fe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a700:	f002 fa00 	bl	800cb04 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a704:	f3ef 8211 	mrs	r2, BASEPRI
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	61ba      	str	r2, [r7, #24]
 800a71a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a71c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a71e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a728:	429a      	cmp	r2, r3
 800a72a:	d302      	bcc.n	800a732 <xQueueGenericSendFromISR+0xb6>
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d12c      	bne.n	800a78c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a73c:	683a      	ldr	r2, [r7, #0]
 800a73e:	68b9      	ldr	r1, [r7, #8]
 800a740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a742:	f000 faa8 	bl	800ac96 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a746:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a74e:	d112      	bne.n	800a776 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	2b00      	cmp	r3, #0
 800a756:	d016      	beq.n	800a786 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75a:	3324      	adds	r3, #36	; 0x24
 800a75c:	4618      	mov	r0, r3
 800a75e:	f001 f8e5 	bl	800b92c <xTaskRemoveFromEventList>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00e      	beq.n	800a786 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00b      	beq.n	800a786 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2201      	movs	r2, #1
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	e007      	b.n	800a786 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a776:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a77a:	3301      	adds	r3, #1
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	b25a      	sxtb	r2, r3
 800a780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a786:	2301      	movs	r3, #1
 800a788:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a78a:	e001      	b.n	800a790 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a78c:	2300      	movs	r3, #0
 800a78e:	637b      	str	r3, [r7, #52]	; 0x34
 800a790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a792:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3738      	adds	r7, #56	; 0x38
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b08c      	sub	sp, #48	; 0x30
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d109      	bne.n	800a7d2 <xQueueReceive+0x2e>
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	623b      	str	r3, [r7, #32]
 800a7d0:	e7fe      	b.n	800a7d0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d103      	bne.n	800a7e0 <xQueueReceive+0x3c>
 800a7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d101      	bne.n	800a7e4 <xQueueReceive+0x40>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e000      	b.n	800a7e6 <xQueueReceive+0x42>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d109      	bne.n	800a7fe <xQueueReceive+0x5a>
 800a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ee:	f383 8811 	msr	BASEPRI, r3
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	61fb      	str	r3, [r7, #28]
 800a7fc:	e7fe      	b.n	800a7fc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7fe:	f001 fa5b 	bl	800bcb8 <xTaskGetSchedulerState>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d102      	bne.n	800a80e <xQueueReceive+0x6a>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <xQueueReceive+0x6e>
 800a80e:	2301      	movs	r3, #1
 800a810:	e000      	b.n	800a814 <xQueueReceive+0x70>
 800a812:	2300      	movs	r3, #0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d109      	bne.n	800a82c <xQueueReceive+0x88>
 800a818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	61bb      	str	r3, [r7, #24]
 800a82a:	e7fe      	b.n	800a82a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a82c:	f002 f88e 	bl	800c94c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a834:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d01f      	beq.n	800a87c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a83c:	68b9      	ldr	r1, [r7, #8]
 800a83e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a840:	f000 fa93 	bl	800ad6a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a846:	1e5a      	subs	r2, r3, #1
 800a848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00f      	beq.n	800a874 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	3310      	adds	r3, #16
 800a858:	4618      	mov	r0, r3
 800a85a:	f001 f867 	bl	800b92c <xTaskRemoveFromEventList>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d007      	beq.n	800a874 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a864:	4b3c      	ldr	r3, [pc, #240]	; (800a958 <xQueueReceive+0x1b4>)
 800a866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a874:	f002 f898 	bl	800c9a8 <vPortExitCritical>
				return pdPASS;
 800a878:	2301      	movs	r3, #1
 800a87a:	e069      	b.n	800a950 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d103      	bne.n	800a88a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a882:	f002 f891 	bl	800c9a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a886:	2300      	movs	r3, #0
 800a888:	e062      	b.n	800a950 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d106      	bne.n	800a89e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a890:	f107 0310 	add.w	r3, r7, #16
 800a894:	4618      	mov	r0, r3
 800a896:	f001 f8ab 	bl	800b9f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a89a:	2301      	movs	r3, #1
 800a89c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a89e:	f002 f883 	bl	800c9a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8a2:	f000 fe15 	bl	800b4d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8a6:	f002 f851 	bl	800c94c <vPortEnterCritical>
 800a8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8b0:	b25b      	sxtb	r3, r3
 800a8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b6:	d103      	bne.n	800a8c0 <xQueueReceive+0x11c>
 800a8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8c6:	b25b      	sxtb	r3, r3
 800a8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8cc:	d103      	bne.n	800a8d6 <xQueueReceive+0x132>
 800a8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8d6:	f002 f867 	bl	800c9a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8da:	1d3a      	adds	r2, r7, #4
 800a8dc:	f107 0310 	add.w	r3, r7, #16
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f001 f89a 	bl	800ba1c <xTaskCheckForTimeOut>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d123      	bne.n	800a936 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8f0:	f000 fab3 	bl	800ae5a <prvIsQueueEmpty>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d017      	beq.n	800a92a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fc:	3324      	adds	r3, #36	; 0x24
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	4611      	mov	r1, r2
 800a902:	4618      	mov	r0, r3
 800a904:	f000 ffc4 	bl	800b890 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a90a:	f000 fa54 	bl	800adb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a90e:	f000 fded 	bl	800b4ec <xTaskResumeAll>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d189      	bne.n	800a82c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a918:	4b0f      	ldr	r3, [pc, #60]	; (800a958 <xQueueReceive+0x1b4>)
 800a91a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	f3bf 8f6f 	isb	sy
 800a928:	e780      	b.n	800a82c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a92a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a92c:	f000 fa43 	bl	800adb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a930:	f000 fddc 	bl	800b4ec <xTaskResumeAll>
 800a934:	e77a      	b.n	800a82c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a938:	f000 fa3d 	bl	800adb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a93c:	f000 fdd6 	bl	800b4ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a942:	f000 fa8a 	bl	800ae5a <prvIsQueueEmpty>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f43f af6f 	beq.w	800a82c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a94e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a950:	4618      	mov	r0, r3
 800a952:	3730      	adds	r7, #48	; 0x30
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	e000ed04 	.word	0xe000ed04

0800a95c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b08e      	sub	sp, #56	; 0x38
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a966:	2300      	movs	r3, #0
 800a968:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a96e:	2300      	movs	r3, #0
 800a970:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a974:	2b00      	cmp	r3, #0
 800a976:	d109      	bne.n	800a98c <xQueueSemaphoreTake+0x30>
 800a978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	623b      	str	r3, [r7, #32]
 800a98a:	e7fe      	b.n	800a98a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a990:	2b00      	cmp	r3, #0
 800a992:	d009      	beq.n	800a9a8 <xQueueSemaphoreTake+0x4c>
 800a994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	61fb      	str	r3, [r7, #28]
 800a9a6:	e7fe      	b.n	800a9a6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9a8:	f001 f986 	bl	800bcb8 <xTaskGetSchedulerState>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d102      	bne.n	800a9b8 <xQueueSemaphoreTake+0x5c>
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <xQueueSemaphoreTake+0x60>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e000      	b.n	800a9be <xQueueSemaphoreTake+0x62>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d109      	bne.n	800a9d6 <xQueueSemaphoreTake+0x7a>
 800a9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	61bb      	str	r3, [r7, #24]
 800a9d4:	e7fe      	b.n	800a9d4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9d6:	f001 ffb9 	bl	800c94c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9de:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d024      	beq.n	800aa30 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e8:	1e5a      	subs	r2, r3, #1
 800a9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ec:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d104      	bne.n	800aa00 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a9f6:	f001 fad1 	bl	800bf9c <pvTaskIncrementMutexHeldCount>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00f      	beq.n	800aa28 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0a:	3310      	adds	r3, #16
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 ff8d 	bl	800b92c <xTaskRemoveFromEventList>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d007      	beq.n	800aa28 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa18:	4b53      	ldr	r3, [pc, #332]	; (800ab68 <xQueueSemaphoreTake+0x20c>)
 800aa1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa1e:	601a      	str	r2, [r3, #0]
 800aa20:	f3bf 8f4f 	dsb	sy
 800aa24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa28:	f001 ffbe 	bl	800c9a8 <vPortExitCritical>
				return pdPASS;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e096      	b.n	800ab5e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d110      	bne.n	800aa58 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d009      	beq.n	800aa50 <xQueueSemaphoreTake+0xf4>
 800aa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	617b      	str	r3, [r7, #20]
 800aa4e:	e7fe      	b.n	800aa4e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aa50:	f001 ffaa 	bl	800c9a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa54:	2300      	movs	r3, #0
 800aa56:	e082      	b.n	800ab5e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d106      	bne.n	800aa6c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa5e:	f107 030c 	add.w	r3, r7, #12
 800aa62:	4618      	mov	r0, r3
 800aa64:	f000 ffc4 	bl	800b9f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa6c:	f001 ff9c 	bl	800c9a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa70:	f000 fd2e 	bl	800b4d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa74:	f001 ff6a 	bl	800c94c <vPortEnterCritical>
 800aa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa7e:	b25b      	sxtb	r3, r3
 800aa80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa84:	d103      	bne.n	800aa8e <xQueueSemaphoreTake+0x132>
 800aa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa94:	b25b      	sxtb	r3, r3
 800aa96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9a:	d103      	bne.n	800aaa4 <xQueueSemaphoreTake+0x148>
 800aa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaa4:	f001 ff80 	bl	800c9a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aaa8:	463a      	mov	r2, r7
 800aaaa:	f107 030c 	add.w	r3, r7, #12
 800aaae:	4611      	mov	r1, r2
 800aab0:	4618      	mov	r0, r3
 800aab2:	f000 ffb3 	bl	800ba1c <xTaskCheckForTimeOut>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d132      	bne.n	800ab22 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aabc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aabe:	f000 f9cc 	bl	800ae5a <prvIsQueueEmpty>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d026      	beq.n	800ab16 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d109      	bne.n	800aae4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800aad0:	f001 ff3c 	bl	800c94c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	4618      	mov	r0, r3
 800aada:	f001 f90b 	bl	800bcf4 <xTaskPriorityInherit>
 800aade:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aae0:	f001 ff62 	bl	800c9a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae6:	3324      	adds	r3, #36	; 0x24
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	4611      	mov	r1, r2
 800aaec:	4618      	mov	r0, r3
 800aaee:	f000 fecf 	bl	800b890 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aaf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aaf4:	f000 f95f 	bl	800adb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aaf8:	f000 fcf8 	bl	800b4ec <xTaskResumeAll>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	f47f af69 	bne.w	800a9d6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800ab04:	4b18      	ldr	r3, [pc, #96]	; (800ab68 <xQueueSemaphoreTake+0x20c>)
 800ab06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab0a:	601a      	str	r2, [r3, #0]
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	f3bf 8f6f 	isb	sy
 800ab14:	e75f      	b.n	800a9d6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ab16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab18:	f000 f94d 	bl	800adb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab1c:	f000 fce6 	bl	800b4ec <xTaskResumeAll>
 800ab20:	e759      	b.n	800a9d6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ab22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab24:	f000 f947 	bl	800adb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab28:	f000 fce0 	bl	800b4ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab2e:	f000 f994 	bl	800ae5a <prvIsQueueEmpty>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f43f af4e 	beq.w	800a9d6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00d      	beq.n	800ab5c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800ab40:	f001 ff04 	bl	800c94c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ab44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab46:	f000 f88e 	bl	800ac66 <prvGetDisinheritPriorityAfterTimeout>
 800ab4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ab4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab52:	4618      	mov	r0, r3
 800ab54:	f001 f9a2 	bl	800be9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ab58:	f001 ff26 	bl	800c9a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3738      	adds	r7, #56	; 0x38
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	e000ed04 	.word	0xe000ed04

0800ab6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b08e      	sub	sp, #56	; 0x38
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d109      	bne.n	800ab96 <xQueueReceiveFromISR+0x2a>
 800ab82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	623b      	str	r3, [r7, #32]
 800ab94:	e7fe      	b.n	800ab94 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d103      	bne.n	800aba4 <xQueueReceiveFromISR+0x38>
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <xQueueReceiveFromISR+0x3c>
 800aba4:	2301      	movs	r3, #1
 800aba6:	e000      	b.n	800abaa <xQueueReceiveFromISR+0x3e>
 800aba8:	2300      	movs	r3, #0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d109      	bne.n	800abc2 <xQueueReceiveFromISR+0x56>
 800abae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	61fb      	str	r3, [r7, #28]
 800abc0:	e7fe      	b.n	800abc0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abc2:	f001 ff9f 	bl	800cb04 <vPortValidateInterruptPriority>
	__asm volatile
 800abc6:	f3ef 8211 	mrs	r2, BASEPRI
 800abca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	61ba      	str	r2, [r7, #24]
 800abdc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800abde:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abe0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	2b00      	cmp	r3, #0
 800abec:	d02f      	beq.n	800ac4e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800abf8:	68b9      	ldr	r1, [r7, #8]
 800abfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abfc:	f000 f8b5 	bl	800ad6a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac02:	1e5a      	subs	r2, r3, #1
 800ac04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac06:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ac08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac10:	d112      	bne.n	800ac38 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	691b      	ldr	r3, [r3, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d016      	beq.n	800ac48 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	3310      	adds	r3, #16
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 fe84 	bl	800b92c <xTaskRemoveFromEventList>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00e      	beq.n	800ac48 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00b      	beq.n	800ac48 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	601a      	str	r2, [r3, #0]
 800ac36:	e007      	b.n	800ac48 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ac38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	b25a      	sxtb	r2, r3
 800ac42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac4c:	e001      	b.n	800ac52 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	637b      	str	r3, [r7, #52]	; 0x34
 800ac52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac54:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3738      	adds	r7, #56	; 0x38
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ac66:	b480      	push	{r7}
 800ac68:	b085      	sub	sp, #20
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d006      	beq.n	800ac84 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ac80:	60fb      	str	r3, [r7, #12]
 800ac82:	e001      	b.n	800ac88 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ac84:	2300      	movs	r3, #0
 800ac86:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ac88:	68fb      	ldr	r3, [r7, #12]
	}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b086      	sub	sp, #24
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	60b9      	str	r1, [r7, #8]
 800aca0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aca2:	2300      	movs	r3, #0
 800aca4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acaa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10d      	bne.n	800acd0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d14d      	bne.n	800ad58 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f001 f87f 	bl	800bdc4 <xTaskPriorityDisinherit>
 800acc6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	609a      	str	r2, [r3, #8]
 800acce:	e043      	b.n	800ad58 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d119      	bne.n	800ad0a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6858      	ldr	r0, [r3, #4]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acde:	461a      	mov	r2, r3
 800ace0:	68b9      	ldr	r1, [r7, #8]
 800ace2:	f002 fee5 	bl	800dab0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	685a      	ldr	r2, [r3, #4]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acee:	441a      	add	r2, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d32b      	bcc.n	800ad58 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	605a      	str	r2, [r3, #4]
 800ad08:	e026      	b.n	800ad58 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	68d8      	ldr	r0, [r3, #12]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad12:	461a      	mov	r2, r3
 800ad14:	68b9      	ldr	r1, [r7, #8]
 800ad16:	f002 fecb 	bl	800dab0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	68da      	ldr	r2, [r3, #12]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad22:	425b      	negs	r3, r3
 800ad24:	441a      	add	r2, r3
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	68da      	ldr	r2, [r3, #12]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d207      	bcs.n	800ad46 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	689a      	ldr	r2, [r3, #8]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3e:	425b      	negs	r3, r3
 800ad40:	441a      	add	r2, r3
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d105      	bne.n	800ad58 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d002      	beq.n	800ad58 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	3b01      	subs	r3, #1
 800ad56:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	1c5a      	adds	r2, r3, #1
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ad60:	697b      	ldr	r3, [r7, #20]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3718      	adds	r7, #24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b082      	sub	sp, #8
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d018      	beq.n	800adae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	68da      	ldr	r2, [r3, #12]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad84:	441a      	add	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	68da      	ldr	r2, [r3, #12]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d303      	bcc.n	800ad9e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68d9      	ldr	r1, [r3, #12]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada6:	461a      	mov	r2, r3
 800ada8:	6838      	ldr	r0, [r7, #0]
 800adaa:	f002 fe81 	bl	800dab0 <memcpy>
	}
}
 800adae:	bf00      	nop
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b084      	sub	sp, #16
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800adbe:	f001 fdc5 	bl	800c94c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adc8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800adca:	e011      	b.n	800adf0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	2b00      	cmp	r3, #0
 800add2:	d012      	beq.n	800adfa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	3324      	adds	r3, #36	; 0x24
 800add8:	4618      	mov	r0, r3
 800adda:	f000 fda7 	bl	800b92c <xTaskRemoveFromEventList>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d001      	beq.n	800ade8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ade4:	f000 fe7a 	bl	800badc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
 800adea:	3b01      	subs	r3, #1
 800adec:	b2db      	uxtb	r3, r3
 800adee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800adf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	dce9      	bgt.n	800adcc <prvUnlockQueue+0x16>
 800adf8:	e000      	b.n	800adfc <prvUnlockQueue+0x46>
					break;
 800adfa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	22ff      	movs	r2, #255	; 0xff
 800ae00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ae04:	f001 fdd0 	bl	800c9a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae08:	f001 fda0 	bl	800c94c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae12:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae14:	e011      	b.n	800ae3a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d012      	beq.n	800ae44 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3310      	adds	r3, #16
 800ae22:	4618      	mov	r0, r3
 800ae24:	f000 fd82 	bl	800b92c <xTaskRemoveFromEventList>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d001      	beq.n	800ae32 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ae2e:	f000 fe55 	bl	800badc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ae32:	7bbb      	ldrb	r3, [r7, #14]
 800ae34:	3b01      	subs	r3, #1
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	dce9      	bgt.n	800ae16 <prvUnlockQueue+0x60>
 800ae42:	e000      	b.n	800ae46 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ae44:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	22ff      	movs	r2, #255	; 0xff
 800ae4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ae4e:	f001 fdab 	bl	800c9a8 <vPortExitCritical>
}
 800ae52:	bf00      	nop
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b084      	sub	sp, #16
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae62:	f001 fd73 	bl	800c94c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d102      	bne.n	800ae74 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	60fb      	str	r3, [r7, #12]
 800ae72:	e001      	b.n	800ae78 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae74:	2300      	movs	r3, #0
 800ae76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae78:	f001 fd96 	bl	800c9a8 <vPortExitCritical>

	return xReturn;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b084      	sub	sp, #16
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae8e:	f001 fd5d 	bl	800c94c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d102      	bne.n	800aea4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	60fb      	str	r3, [r7, #12]
 800aea2:	e001      	b.n	800aea8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aea4:	2300      	movs	r3, #0
 800aea6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aea8:	f001 fd7e 	bl	800c9a8 <vPortExitCritical>

	return xReturn;
 800aeac:	68fb      	ldr	r3, [r7, #12]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
	...

0800aeb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aec2:	2300      	movs	r3, #0
 800aec4:	60fb      	str	r3, [r7, #12]
 800aec6:	e014      	b.n	800aef2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aec8:	4a0e      	ldr	r2, [pc, #56]	; (800af04 <vQueueAddToRegistry+0x4c>)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d10b      	bne.n	800aeec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aed4:	490b      	ldr	r1, [pc, #44]	; (800af04 <vQueueAddToRegistry+0x4c>)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aede:	4a09      	ldr	r2, [pc, #36]	; (800af04 <vQueueAddToRegistry+0x4c>)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	00db      	lsls	r3, r3, #3
 800aee4:	4413      	add	r3, r2
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aeea:	e005      	b.n	800aef8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	3301      	adds	r3, #1
 800aef0:	60fb      	str	r3, [r7, #12]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2b07      	cmp	r3, #7
 800aef6:	d9e7      	bls.n	800aec8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aef8:	bf00      	nop
 800aefa:	3714      	adds	r7, #20
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr
 800af04:	2000c1c4 	.word	0x2000c1c4

0800af08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af18:	f001 fd18 	bl	800c94c <vPortEnterCritical>
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af22:	b25b      	sxtb	r3, r3
 800af24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af28:	d103      	bne.n	800af32 <vQueueWaitForMessageRestricted+0x2a>
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af38:	b25b      	sxtb	r3, r3
 800af3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3e:	d103      	bne.n	800af48 <vQueueWaitForMessageRestricted+0x40>
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	2200      	movs	r2, #0
 800af44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af48:	f001 fd2e 	bl	800c9a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af50:	2b00      	cmp	r3, #0
 800af52:	d106      	bne.n	800af62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	3324      	adds	r3, #36	; 0x24
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	68b9      	ldr	r1, [r7, #8]
 800af5c:	4618      	mov	r0, r3
 800af5e:	f000 fcbb 	bl	800b8d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800af62:	6978      	ldr	r0, [r7, #20]
 800af64:	f7ff ff27 	bl	800adb6 <prvUnlockQueue>
	}
 800af68:	bf00      	nop
 800af6a:	3718      	adds	r7, #24
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af70:	b580      	push	{r7, lr}
 800af72:	b08e      	sub	sp, #56	; 0x38
 800af74:	af04      	add	r7, sp, #16
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af80:	2b00      	cmp	r3, #0
 800af82:	d109      	bne.n	800af98 <xTaskCreateStatic+0x28>
	__asm volatile
 800af84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af88:	f383 8811 	msr	BASEPRI, r3
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	623b      	str	r3, [r7, #32]
 800af96:	e7fe      	b.n	800af96 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800af98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d109      	bne.n	800afb2 <xTaskCreateStatic+0x42>
 800af9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa2:	f383 8811 	msr	BASEPRI, r3
 800afa6:	f3bf 8f6f 	isb	sy
 800afaa:	f3bf 8f4f 	dsb	sy
 800afae:	61fb      	str	r3, [r7, #28]
 800afb0:	e7fe      	b.n	800afb0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800afb2:	235c      	movs	r3, #92	; 0x5c
 800afb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	2b5c      	cmp	r3, #92	; 0x5c
 800afba:	d009      	beq.n	800afd0 <xTaskCreateStatic+0x60>
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	61bb      	str	r3, [r7, #24]
 800afce:	e7fe      	b.n	800afce <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800afd0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800afd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d01e      	beq.n	800b016 <xTaskCreateStatic+0xa6>
 800afd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d01b      	beq.n	800b016 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800afe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afe6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800afe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afea:	2202      	movs	r2, #2
 800afec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aff0:	2300      	movs	r3, #0
 800aff2:	9303      	str	r3, [sp, #12]
 800aff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff6:	9302      	str	r3, [sp, #8]
 800aff8:	f107 0314 	add.w	r3, r7, #20
 800affc:	9301      	str	r3, [sp, #4]
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	9300      	str	r3, [sp, #0]
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	68b9      	ldr	r1, [r7, #8]
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f000 f850 	bl	800b0ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b00e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b010:	f000 f8dc 	bl	800b1cc <prvAddNewTaskToReadyList>
 800b014:	e001      	b.n	800b01a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b016:	2300      	movs	r3, #0
 800b018:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b01a:	697b      	ldr	r3, [r7, #20]
	}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3728      	adds	r7, #40	; 0x28
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b024:	b580      	push	{r7, lr}
 800b026:	b08c      	sub	sp, #48	; 0x30
 800b028:	af04      	add	r7, sp, #16
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	603b      	str	r3, [r7, #0]
 800b030:	4613      	mov	r3, r2
 800b032:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b034:	88fb      	ldrh	r3, [r7, #6]
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4618      	mov	r0, r3
 800b03a:	f001 fda1 	bl	800cb80 <pvPortMalloc>
 800b03e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00e      	beq.n	800b064 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b046:	205c      	movs	r0, #92	; 0x5c
 800b048:	f001 fd9a 	bl	800cb80 <pvPortMalloc>
 800b04c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d003      	beq.n	800b05c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	631a      	str	r2, [r3, #48]	; 0x30
 800b05a:	e005      	b.n	800b068 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b05c:	6978      	ldr	r0, [r7, #20]
 800b05e:	f001 fe51 	bl	800cd04 <vPortFree>
 800b062:	e001      	b.n	800b068 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b064:	2300      	movs	r3, #0
 800b066:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d017      	beq.n	800b09e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	2200      	movs	r2, #0
 800b072:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b076:	88fa      	ldrh	r2, [r7, #6]
 800b078:	2300      	movs	r3, #0
 800b07a:	9303      	str	r3, [sp, #12]
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	9302      	str	r3, [sp, #8]
 800b080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b082:	9301      	str	r3, [sp, #4]
 800b084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b086:	9300      	str	r3, [sp, #0]
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	68b9      	ldr	r1, [r7, #8]
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f000 f80e 	bl	800b0ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b092:	69f8      	ldr	r0, [r7, #28]
 800b094:	f000 f89a 	bl	800b1cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b098:	2301      	movs	r3, #1
 800b09a:	61bb      	str	r3, [r7, #24]
 800b09c:	e002      	b.n	800b0a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b09e:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b0a4:	69bb      	ldr	r3, [r7, #24]
	}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3720      	adds	r7, #32
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b088      	sub	sp, #32
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	60f8      	str	r0, [r7, #12]
 800b0b6:	60b9      	str	r1, [r7, #8]
 800b0b8:	607a      	str	r2, [r7, #4]
 800b0ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	21a5      	movs	r1, #165	; 0xa5
 800b0c8:	f002 fcfd 	bl	800dac6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	4413      	add	r3, r2
 800b0dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	f023 0307 	bic.w	r3, r3, #7
 800b0e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	f003 0307 	and.w	r3, r3, #7
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d009      	beq.n	800b104 <prvInitialiseNewTask+0x56>
 800b0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	617b      	str	r3, [r7, #20]
 800b102:	e7fe      	b.n	800b102 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d01f      	beq.n	800b14a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b10a:	2300      	movs	r3, #0
 800b10c:	61fb      	str	r3, [r7, #28]
 800b10e:	e012      	b.n	800b136 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b110:	68ba      	ldr	r2, [r7, #8]
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	4413      	add	r3, r2
 800b116:	7819      	ldrb	r1, [r3, #0]
 800b118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	4413      	add	r3, r2
 800b11e:	3334      	adds	r3, #52	; 0x34
 800b120:	460a      	mov	r2, r1
 800b122:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	4413      	add	r3, r2
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d006      	beq.n	800b13e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	3301      	adds	r3, #1
 800b134:	61fb      	str	r3, [r7, #28]
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	2b0f      	cmp	r3, #15
 800b13a:	d9e9      	bls.n	800b110 <prvInitialiseNewTask+0x62>
 800b13c:	e000      	b.n	800b140 <prvInitialiseNewTask+0x92>
			{
				break;
 800b13e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b142:	2200      	movs	r2, #0
 800b144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b148:	e003      	b.n	800b152 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14c:	2200      	movs	r2, #0
 800b14e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b154:	2b37      	cmp	r3, #55	; 0x37
 800b156:	d901      	bls.n	800b15c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b158:	2337      	movs	r3, #55	; 0x37
 800b15a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b160:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b166:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16a:	2200      	movs	r2, #0
 800b16c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b170:	3304      	adds	r3, #4
 800b172:	4618      	mov	r0, r3
 800b174:	f7fe ff02 	bl	8009f7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17a:	3318      	adds	r3, #24
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7fe fefd 	bl	8009f7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b186:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b190:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b196:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19a:	2200      	movs	r2, #0
 800b19c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b1a6:	683a      	ldr	r2, [r7, #0]
 800b1a8:	68f9      	ldr	r1, [r7, #12]
 800b1aa:	69b8      	ldr	r0, [r7, #24]
 800b1ac:	f001 faa4 	bl	800c6f8 <pxPortInitialiseStack>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d002      	beq.n	800b1c2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1c2:	bf00      	nop
 800b1c4:	3720      	adds	r7, #32
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
	...

0800b1cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b1d4:	f001 fbba 	bl	800c94c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1d8:	4b2d      	ldr	r3, [pc, #180]	; (800b290 <prvAddNewTaskToReadyList+0xc4>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	4a2c      	ldr	r2, [pc, #176]	; (800b290 <prvAddNewTaskToReadyList+0xc4>)
 800b1e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1e2:	4b2c      	ldr	r3, [pc, #176]	; (800b294 <prvAddNewTaskToReadyList+0xc8>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d109      	bne.n	800b1fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b1ea:	4a2a      	ldr	r2, [pc, #168]	; (800b294 <prvAddNewTaskToReadyList+0xc8>)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1f0:	4b27      	ldr	r3, [pc, #156]	; (800b290 <prvAddNewTaskToReadyList+0xc4>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d110      	bne.n	800b21a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1f8:	f000 fc94 	bl	800bb24 <prvInitialiseTaskLists>
 800b1fc:	e00d      	b.n	800b21a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b1fe:	4b26      	ldr	r3, [pc, #152]	; (800b298 <prvAddNewTaskToReadyList+0xcc>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d109      	bne.n	800b21a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b206:	4b23      	ldr	r3, [pc, #140]	; (800b294 <prvAddNewTaskToReadyList+0xc8>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b210:	429a      	cmp	r2, r3
 800b212:	d802      	bhi.n	800b21a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b214:	4a1f      	ldr	r2, [pc, #124]	; (800b294 <prvAddNewTaskToReadyList+0xc8>)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b21a:	4b20      	ldr	r3, [pc, #128]	; (800b29c <prvAddNewTaskToReadyList+0xd0>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3301      	adds	r3, #1
 800b220:	4a1e      	ldr	r2, [pc, #120]	; (800b29c <prvAddNewTaskToReadyList+0xd0>)
 800b222:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b224:	4b1d      	ldr	r3, [pc, #116]	; (800b29c <prvAddNewTaskToReadyList+0xd0>)
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b230:	4b1b      	ldr	r3, [pc, #108]	; (800b2a0 <prvAddNewTaskToReadyList+0xd4>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	429a      	cmp	r2, r3
 800b236:	d903      	bls.n	800b240 <prvAddNewTaskToReadyList+0x74>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	4a18      	ldr	r2, [pc, #96]	; (800b2a0 <prvAddNewTaskToReadyList+0xd4>)
 800b23e:	6013      	str	r3, [r2, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b244:	4613      	mov	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	4413      	add	r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	4a15      	ldr	r2, [pc, #84]	; (800b2a4 <prvAddNewTaskToReadyList+0xd8>)
 800b24e:	441a      	add	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	3304      	adds	r3, #4
 800b254:	4619      	mov	r1, r3
 800b256:	4610      	mov	r0, r2
 800b258:	f7fe fe9d 	bl	8009f96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b25c:	f001 fba4 	bl	800c9a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b260:	4b0d      	ldr	r3, [pc, #52]	; (800b298 <prvAddNewTaskToReadyList+0xcc>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00e      	beq.n	800b286 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b268:	4b0a      	ldr	r3, [pc, #40]	; (800b294 <prvAddNewTaskToReadyList+0xc8>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b272:	429a      	cmp	r2, r3
 800b274:	d207      	bcs.n	800b286 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b276:	4b0c      	ldr	r3, [pc, #48]	; (800b2a8 <prvAddNewTaskToReadyList+0xdc>)
 800b278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b27c:	601a      	str	r2, [r3, #0]
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b286:	bf00      	nop
 800b288:	3708      	adds	r7, #8
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	20000e2c 	.word	0x20000e2c
 800b294:	20000958 	.word	0x20000958
 800b298:	20000e38 	.word	0x20000e38
 800b29c:	20000e48 	.word	0x20000e48
 800b2a0:	20000e34 	.word	0x20000e34
 800b2a4:	2000095c 	.word	0x2000095c
 800b2a8:	e000ed04 	.word	0xe000ed04

0800b2ac <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b08a      	sub	sp, #40	; 0x28
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d109      	bne.n	800b2d4 <vTaskDelayUntil+0x28>
 800b2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	617b      	str	r3, [r7, #20]
 800b2d2:	e7fe      	b.n	800b2d2 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d109      	bne.n	800b2ee <vTaskDelayUntil+0x42>
 800b2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2de:	f383 8811 	msr	BASEPRI, r3
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	613b      	str	r3, [r7, #16]
 800b2ec:	e7fe      	b.n	800b2ec <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800b2ee:	4b29      	ldr	r3, [pc, #164]	; (800b394 <vTaskDelayUntil+0xe8>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d009      	beq.n	800b30a <vTaskDelayUntil+0x5e>
 800b2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fa:	f383 8811 	msr	BASEPRI, r3
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f3bf 8f4f 	dsb	sy
 800b306:	60fb      	str	r3, [r7, #12]
 800b308:	e7fe      	b.n	800b308 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800b30a:	f000 f8e1 	bl	800b4d0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b30e:	4b22      	ldr	r3, [pc, #136]	; (800b398 <vTaskDelayUntil+0xec>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	683a      	ldr	r2, [r7, #0]
 800b31a:	4413      	add	r3, r2
 800b31c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	6a3a      	ldr	r2, [r7, #32]
 800b324:	429a      	cmp	r2, r3
 800b326:	d20b      	bcs.n	800b340 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	69fa      	ldr	r2, [r7, #28]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d211      	bcs.n	800b356 <vTaskDelayUntil+0xaa>
 800b332:	69fa      	ldr	r2, [r7, #28]
 800b334:	6a3b      	ldr	r3, [r7, #32]
 800b336:	429a      	cmp	r2, r3
 800b338:	d90d      	bls.n	800b356 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800b33a:	2301      	movs	r3, #1
 800b33c:	627b      	str	r3, [r7, #36]	; 0x24
 800b33e:	e00a      	b.n	800b356 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	69fa      	ldr	r2, [r7, #28]
 800b346:	429a      	cmp	r2, r3
 800b348:	d303      	bcc.n	800b352 <vTaskDelayUntil+0xa6>
 800b34a:	69fa      	ldr	r2, [r7, #28]
 800b34c:	6a3b      	ldr	r3, [r7, #32]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d901      	bls.n	800b356 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800b352:	2301      	movs	r3, #1
 800b354:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	69fa      	ldr	r2, [r7, #28]
 800b35a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d006      	beq.n	800b370 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b362:	69fa      	ldr	r2, [r7, #28]
 800b364:	6a3b      	ldr	r3, [r7, #32]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	2100      	movs	r1, #0
 800b36a:	4618      	mov	r0, r3
 800b36c:	f000 fe2a 	bl	800bfc4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b370:	f000 f8bc 	bl	800b4ec <xTaskResumeAll>
 800b374:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d107      	bne.n	800b38c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800b37c:	4b07      	ldr	r3, [pc, #28]	; (800b39c <vTaskDelayUntil+0xf0>)
 800b37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b382:	601a      	str	r2, [r3, #0]
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b38c:	bf00      	nop
 800b38e:	3728      	adds	r7, #40	; 0x28
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	20000e54 	.word	0x20000e54
 800b398:	20000e30 	.word	0x20000e30
 800b39c:	e000ed04 	.word	0xe000ed04

0800b3a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d016      	beq.n	800b3e0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b3b2:	4b13      	ldr	r3, [pc, #76]	; (800b400 <vTaskDelay+0x60>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d009      	beq.n	800b3ce <vTaskDelay+0x2e>
 800b3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	60bb      	str	r3, [r7, #8]
 800b3cc:	e7fe      	b.n	800b3cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b3ce:	f000 f87f 	bl	800b4d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 fdf5 	bl	800bfc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3da:	f000 f887 	bl	800b4ec <xTaskResumeAll>
 800b3de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d107      	bne.n	800b3f6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b3e6:	4b07      	ldr	r3, [pc, #28]	; (800b404 <vTaskDelay+0x64>)
 800b3e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ec:	601a      	str	r2, [r3, #0]
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3f6:	bf00      	nop
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	20000e54 	.word	0x20000e54
 800b404:	e000ed04 	.word	0xe000ed04

0800b408 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b08a      	sub	sp, #40	; 0x28
 800b40c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b40e:	2300      	movs	r3, #0
 800b410:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b412:	2300      	movs	r3, #0
 800b414:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b416:	463a      	mov	r2, r7
 800b418:	1d39      	adds	r1, r7, #4
 800b41a:	f107 0308 	add.w	r3, r7, #8
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fe fd58 	bl	8009ed4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b424:	6839      	ldr	r1, [r7, #0]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	9202      	str	r2, [sp, #8]
 800b42c:	9301      	str	r3, [sp, #4]
 800b42e:	2300      	movs	r3, #0
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	2300      	movs	r3, #0
 800b434:	460a      	mov	r2, r1
 800b436:	4920      	ldr	r1, [pc, #128]	; (800b4b8 <vTaskStartScheduler+0xb0>)
 800b438:	4820      	ldr	r0, [pc, #128]	; (800b4bc <vTaskStartScheduler+0xb4>)
 800b43a:	f7ff fd99 	bl	800af70 <xTaskCreateStatic>
 800b43e:	4602      	mov	r2, r0
 800b440:	4b1f      	ldr	r3, [pc, #124]	; (800b4c0 <vTaskStartScheduler+0xb8>)
 800b442:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b444:	4b1e      	ldr	r3, [pc, #120]	; (800b4c0 <vTaskStartScheduler+0xb8>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d002      	beq.n	800b452 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b44c:	2301      	movs	r3, #1
 800b44e:	617b      	str	r3, [r7, #20]
 800b450:	e001      	b.n	800b456 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b452:	2300      	movs	r3, #0
 800b454:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d102      	bne.n	800b462 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b45c:	f000 fe06 	bl	800c06c <xTimerCreateTimerTask>
 800b460:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	2b01      	cmp	r3, #1
 800b466:	d115      	bne.n	800b494 <vTaskStartScheduler+0x8c>
 800b468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b47a:	4b12      	ldr	r3, [pc, #72]	; (800b4c4 <vTaskStartScheduler+0xbc>)
 800b47c:	f04f 32ff 	mov.w	r2, #4294967295
 800b480:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b482:	4b11      	ldr	r3, [pc, #68]	; (800b4c8 <vTaskStartScheduler+0xc0>)
 800b484:	2201      	movs	r2, #1
 800b486:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b488:	4b10      	ldr	r3, [pc, #64]	; (800b4cc <vTaskStartScheduler+0xc4>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b48e:	f001 f9bf 	bl	800c810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b492:	e00d      	b.n	800b4b0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b49a:	d109      	bne.n	800b4b0 <vTaskStartScheduler+0xa8>
 800b49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	60fb      	str	r3, [r7, #12]
 800b4ae:	e7fe      	b.n	800b4ae <vTaskStartScheduler+0xa6>
}
 800b4b0:	bf00      	nop
 800b4b2:	3718      	adds	r7, #24
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	0800e444 	.word	0x0800e444
 800b4bc:	0800baf5 	.word	0x0800baf5
 800b4c0:	20000e50 	.word	0x20000e50
 800b4c4:	20000e4c 	.word	0x20000e4c
 800b4c8:	20000e38 	.word	0x20000e38
 800b4cc:	20000e30 	.word	0x20000e30

0800b4d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b4d4:	4b04      	ldr	r3, [pc, #16]	; (800b4e8 <vTaskSuspendAll+0x18>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	4a03      	ldr	r2, [pc, #12]	; (800b4e8 <vTaskSuspendAll+0x18>)
 800b4dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b4de:	bf00      	nop
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	20000e54 	.word	0x20000e54

0800b4ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b4fa:	4b41      	ldr	r3, [pc, #260]	; (800b600 <xTaskResumeAll+0x114>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d109      	bne.n	800b516 <xTaskResumeAll+0x2a>
 800b502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	603b      	str	r3, [r7, #0]
 800b514:	e7fe      	b.n	800b514 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b516:	f001 fa19 	bl	800c94c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b51a:	4b39      	ldr	r3, [pc, #228]	; (800b600 <xTaskResumeAll+0x114>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	3b01      	subs	r3, #1
 800b520:	4a37      	ldr	r2, [pc, #220]	; (800b600 <xTaskResumeAll+0x114>)
 800b522:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b524:	4b36      	ldr	r3, [pc, #216]	; (800b600 <xTaskResumeAll+0x114>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d162      	bne.n	800b5f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b52c:	4b35      	ldr	r3, [pc, #212]	; (800b604 <xTaskResumeAll+0x118>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d05e      	beq.n	800b5f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b534:	e02f      	b.n	800b596 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b536:	4b34      	ldr	r3, [pc, #208]	; (800b608 <xTaskResumeAll+0x11c>)
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	3318      	adds	r3, #24
 800b542:	4618      	mov	r0, r3
 800b544:	f7fe fd84 	bl	800a050 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	3304      	adds	r3, #4
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7fe fd7f 	bl	800a050 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b556:	4b2d      	ldr	r3, [pc, #180]	; (800b60c <xTaskResumeAll+0x120>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d903      	bls.n	800b566 <xTaskResumeAll+0x7a>
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b562:	4a2a      	ldr	r2, [pc, #168]	; (800b60c <xTaskResumeAll+0x120>)
 800b564:	6013      	str	r3, [r2, #0]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b56a:	4613      	mov	r3, r2
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	4413      	add	r3, r2
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	4a27      	ldr	r2, [pc, #156]	; (800b610 <xTaskResumeAll+0x124>)
 800b574:	441a      	add	r2, r3
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	3304      	adds	r3, #4
 800b57a:	4619      	mov	r1, r3
 800b57c:	4610      	mov	r0, r2
 800b57e:	f7fe fd0a 	bl	8009f96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b586:	4b23      	ldr	r3, [pc, #140]	; (800b614 <xTaskResumeAll+0x128>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d302      	bcc.n	800b596 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b590:	4b21      	ldr	r3, [pc, #132]	; (800b618 <xTaskResumeAll+0x12c>)
 800b592:	2201      	movs	r2, #1
 800b594:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b596:	4b1c      	ldr	r3, [pc, #112]	; (800b608 <xTaskResumeAll+0x11c>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1cb      	bne.n	800b536 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d001      	beq.n	800b5a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5a4:	f000 fb58 	bl	800bc58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b5a8:	4b1c      	ldr	r3, [pc, #112]	; (800b61c <xTaskResumeAll+0x130>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d010      	beq.n	800b5d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5b4:	f000 f858 	bl	800b668 <xTaskIncrementTick>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d002      	beq.n	800b5c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b5be:	4b16      	ldr	r3, [pc, #88]	; (800b618 <xTaskResumeAll+0x12c>)
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d1f1      	bne.n	800b5b4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b5d0:	4b12      	ldr	r3, [pc, #72]	; (800b61c <xTaskResumeAll+0x130>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5d6:	4b10      	ldr	r3, [pc, #64]	; (800b618 <xTaskResumeAll+0x12c>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d009      	beq.n	800b5f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5e2:	4b0f      	ldr	r3, [pc, #60]	; (800b620 <xTaskResumeAll+0x134>)
 800b5e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5e8:	601a      	str	r2, [r3, #0]
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5f2:	f001 f9d9 	bl	800c9a8 <vPortExitCritical>

	return xAlreadyYielded;
 800b5f6:	68bb      	ldr	r3, [r7, #8]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3710      	adds	r7, #16
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	20000e54 	.word	0x20000e54
 800b604:	20000e2c 	.word	0x20000e2c
 800b608:	20000dec 	.word	0x20000dec
 800b60c:	20000e34 	.word	0x20000e34
 800b610:	2000095c 	.word	0x2000095c
 800b614:	20000958 	.word	0x20000958
 800b618:	20000e40 	.word	0x20000e40
 800b61c:	20000e3c 	.word	0x20000e3c
 800b620:	e000ed04 	.word	0xe000ed04

0800b624 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b62a:	4b05      	ldr	r3, [pc, #20]	; (800b640 <xTaskGetTickCount+0x1c>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b630:	687b      	ldr	r3, [r7, #4]
}
 800b632:	4618      	mov	r0, r3
 800b634:	370c      	adds	r7, #12
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop
 800b640:	20000e30 	.word	0x20000e30

0800b644 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b64a:	f001 fa5b 	bl	800cb04 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b64e:	2300      	movs	r3, #0
 800b650:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b652:	4b04      	ldr	r3, [pc, #16]	; (800b664 <xTaskGetTickCountFromISR+0x20>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b658:	683b      	ldr	r3, [r7, #0]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	20000e30 	.word	0x20000e30

0800b668 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b66e:	2300      	movs	r3, #0
 800b670:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b672:	4b4e      	ldr	r3, [pc, #312]	; (800b7ac <xTaskIncrementTick+0x144>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	f040 8088 	bne.w	800b78c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b67c:	4b4c      	ldr	r3, [pc, #304]	; (800b7b0 <xTaskIncrementTick+0x148>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3301      	adds	r3, #1
 800b682:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b684:	4a4a      	ldr	r2, [pc, #296]	; (800b7b0 <xTaskIncrementTick+0x148>)
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d11f      	bne.n	800b6d0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b690:	4b48      	ldr	r3, [pc, #288]	; (800b7b4 <xTaskIncrementTick+0x14c>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d009      	beq.n	800b6ae <xTaskIncrementTick+0x46>
 800b69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69e:	f383 8811 	msr	BASEPRI, r3
 800b6a2:	f3bf 8f6f 	isb	sy
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	603b      	str	r3, [r7, #0]
 800b6ac:	e7fe      	b.n	800b6ac <xTaskIncrementTick+0x44>
 800b6ae:	4b41      	ldr	r3, [pc, #260]	; (800b7b4 <xTaskIncrementTick+0x14c>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	60fb      	str	r3, [r7, #12]
 800b6b4:	4b40      	ldr	r3, [pc, #256]	; (800b7b8 <xTaskIncrementTick+0x150>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a3e      	ldr	r2, [pc, #248]	; (800b7b4 <xTaskIncrementTick+0x14c>)
 800b6ba:	6013      	str	r3, [r2, #0]
 800b6bc:	4a3e      	ldr	r2, [pc, #248]	; (800b7b8 <xTaskIncrementTick+0x150>)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6013      	str	r3, [r2, #0]
 800b6c2:	4b3e      	ldr	r3, [pc, #248]	; (800b7bc <xTaskIncrementTick+0x154>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	4a3c      	ldr	r2, [pc, #240]	; (800b7bc <xTaskIncrementTick+0x154>)
 800b6ca:	6013      	str	r3, [r2, #0]
 800b6cc:	f000 fac4 	bl	800bc58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6d0:	4b3b      	ldr	r3, [pc, #236]	; (800b7c0 <xTaskIncrementTick+0x158>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d349      	bcc.n	800b76e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6da:	4b36      	ldr	r3, [pc, #216]	; (800b7b4 <xTaskIncrementTick+0x14c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d104      	bne.n	800b6ee <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6e4:	4b36      	ldr	r3, [pc, #216]	; (800b7c0 <xTaskIncrementTick+0x158>)
 800b6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ea:	601a      	str	r2, [r3, #0]
					break;
 800b6ec:	e03f      	b.n	800b76e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ee:	4b31      	ldr	r3, [pc, #196]	; (800b7b4 <xTaskIncrementTick+0x14c>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	429a      	cmp	r2, r3
 800b704:	d203      	bcs.n	800b70e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b706:	4a2e      	ldr	r2, [pc, #184]	; (800b7c0 <xTaskIncrementTick+0x158>)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b70c:	e02f      	b.n	800b76e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	3304      	adds	r3, #4
 800b712:	4618      	mov	r0, r3
 800b714:	f7fe fc9c 	bl	800a050 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d004      	beq.n	800b72a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	3318      	adds	r3, #24
 800b724:	4618      	mov	r0, r3
 800b726:	f7fe fc93 	bl	800a050 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72e:	4b25      	ldr	r3, [pc, #148]	; (800b7c4 <xTaskIncrementTick+0x15c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	429a      	cmp	r2, r3
 800b734:	d903      	bls.n	800b73e <xTaskIncrementTick+0xd6>
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73a:	4a22      	ldr	r2, [pc, #136]	; (800b7c4 <xTaskIncrementTick+0x15c>)
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b742:	4613      	mov	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	4413      	add	r3, r2
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4a1f      	ldr	r2, [pc, #124]	; (800b7c8 <xTaskIncrementTick+0x160>)
 800b74c:	441a      	add	r2, r3
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	3304      	adds	r3, #4
 800b752:	4619      	mov	r1, r3
 800b754:	4610      	mov	r0, r2
 800b756:	f7fe fc1e 	bl	8009f96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b75e:	4b1b      	ldr	r3, [pc, #108]	; (800b7cc <xTaskIncrementTick+0x164>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b764:	429a      	cmp	r2, r3
 800b766:	d3b8      	bcc.n	800b6da <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b768:	2301      	movs	r3, #1
 800b76a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b76c:	e7b5      	b.n	800b6da <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b76e:	4b17      	ldr	r3, [pc, #92]	; (800b7cc <xTaskIncrementTick+0x164>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b774:	4914      	ldr	r1, [pc, #80]	; (800b7c8 <xTaskIncrementTick+0x160>)
 800b776:	4613      	mov	r3, r2
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	4413      	add	r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	440b      	add	r3, r1
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d907      	bls.n	800b796 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800b786:	2301      	movs	r3, #1
 800b788:	617b      	str	r3, [r7, #20]
 800b78a:	e004      	b.n	800b796 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b78c:	4b10      	ldr	r3, [pc, #64]	; (800b7d0 <xTaskIncrementTick+0x168>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	3301      	adds	r3, #1
 800b792:	4a0f      	ldr	r2, [pc, #60]	; (800b7d0 <xTaskIncrementTick+0x168>)
 800b794:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b796:	4b0f      	ldr	r3, [pc, #60]	; (800b7d4 <xTaskIncrementTick+0x16c>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d001      	beq.n	800b7a2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b7a2:	697b      	ldr	r3, [r7, #20]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3718      	adds	r7, #24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	20000e54 	.word	0x20000e54
 800b7b0:	20000e30 	.word	0x20000e30
 800b7b4:	20000de4 	.word	0x20000de4
 800b7b8:	20000de8 	.word	0x20000de8
 800b7bc:	20000e44 	.word	0x20000e44
 800b7c0:	20000e4c 	.word	0x20000e4c
 800b7c4:	20000e34 	.word	0x20000e34
 800b7c8:	2000095c 	.word	0x2000095c
 800b7cc:	20000958 	.word	0x20000958
 800b7d0:	20000e3c 	.word	0x20000e3c
 800b7d4:	20000e40 	.word	0x20000e40

0800b7d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7de:	4b27      	ldr	r3, [pc, #156]	; (800b87c <vTaskSwitchContext+0xa4>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7e6:	4b26      	ldr	r3, [pc, #152]	; (800b880 <vTaskSwitchContext+0xa8>)
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7ec:	e040      	b.n	800b870 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b7ee:	4b24      	ldr	r3, [pc, #144]	; (800b880 <vTaskSwitchContext+0xa8>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f4:	4b23      	ldr	r3, [pc, #140]	; (800b884 <vTaskSwitchContext+0xac>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	60fb      	str	r3, [r7, #12]
 800b7fa:	e00f      	b.n	800b81c <vTaskSwitchContext+0x44>
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d109      	bne.n	800b816 <vTaskSwitchContext+0x3e>
 800b802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b806:	f383 8811 	msr	BASEPRI, r3
 800b80a:	f3bf 8f6f 	isb	sy
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	607b      	str	r3, [r7, #4]
 800b814:	e7fe      	b.n	800b814 <vTaskSwitchContext+0x3c>
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	3b01      	subs	r3, #1
 800b81a:	60fb      	str	r3, [r7, #12]
 800b81c:	491a      	ldr	r1, [pc, #104]	; (800b888 <vTaskSwitchContext+0xb0>)
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	4613      	mov	r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4413      	add	r3, r2
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	440b      	add	r3, r1
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d0e5      	beq.n	800b7fc <vTaskSwitchContext+0x24>
 800b830:	68fa      	ldr	r2, [r7, #12]
 800b832:	4613      	mov	r3, r2
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4413      	add	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	4a13      	ldr	r2, [pc, #76]	; (800b888 <vTaskSwitchContext+0xb0>)
 800b83c:	4413      	add	r3, r2
 800b83e:	60bb      	str	r3, [r7, #8]
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	685a      	ldr	r2, [r3, #4]
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	605a      	str	r2, [r3, #4]
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	685a      	ldr	r2, [r3, #4]
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	3308      	adds	r3, #8
 800b852:	429a      	cmp	r2, r3
 800b854:	d104      	bne.n	800b860 <vTaskSwitchContext+0x88>
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	685a      	ldr	r2, [r3, #4]
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	605a      	str	r2, [r3, #4]
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	4a09      	ldr	r2, [pc, #36]	; (800b88c <vTaskSwitchContext+0xb4>)
 800b868:	6013      	str	r3, [r2, #0]
 800b86a:	4a06      	ldr	r2, [pc, #24]	; (800b884 <vTaskSwitchContext+0xac>)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6013      	str	r3, [r2, #0]
}
 800b870:	bf00      	nop
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	20000e54 	.word	0x20000e54
 800b880:	20000e40 	.word	0x20000e40
 800b884:	20000e34 	.word	0x20000e34
 800b888:	2000095c 	.word	0x2000095c
 800b88c:	20000958 	.word	0x20000958

0800b890 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d109      	bne.n	800b8b4 <vTaskPlaceOnEventList+0x24>
 800b8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a4:	f383 8811 	msr	BASEPRI, r3
 800b8a8:	f3bf 8f6f 	isb	sy
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	60fb      	str	r3, [r7, #12]
 800b8b2:	e7fe      	b.n	800b8b2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8b4:	4b07      	ldr	r3, [pc, #28]	; (800b8d4 <vTaskPlaceOnEventList+0x44>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	3318      	adds	r3, #24
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f7fe fb8e 	bl	8009fde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8c2:	2101      	movs	r1, #1
 800b8c4:	6838      	ldr	r0, [r7, #0]
 800b8c6:	f000 fb7d 	bl	800bfc4 <prvAddCurrentTaskToDelayedList>
}
 800b8ca:	bf00      	nop
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	20000958 	.word	0x20000958

0800b8d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d109      	bne.n	800b8fe <vTaskPlaceOnEventListRestricted+0x26>
 800b8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ee:	f383 8811 	msr	BASEPRI, r3
 800b8f2:	f3bf 8f6f 	isb	sy
 800b8f6:	f3bf 8f4f 	dsb	sy
 800b8fa:	617b      	str	r3, [r7, #20]
 800b8fc:	e7fe      	b.n	800b8fc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8fe:	4b0a      	ldr	r3, [pc, #40]	; (800b928 <vTaskPlaceOnEventListRestricted+0x50>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	3318      	adds	r3, #24
 800b904:	4619      	mov	r1, r3
 800b906:	68f8      	ldr	r0, [r7, #12]
 800b908:	f7fe fb45 	bl	8009f96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d002      	beq.n	800b918 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800b912:	f04f 33ff 	mov.w	r3, #4294967295
 800b916:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b918:	6879      	ldr	r1, [r7, #4]
 800b91a:	68b8      	ldr	r0, [r7, #8]
 800b91c:	f000 fb52 	bl	800bfc4 <prvAddCurrentTaskToDelayedList>
	}
 800b920:	bf00      	nop
 800b922:	3718      	adds	r7, #24
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	20000958 	.word	0x20000958

0800b92c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b086      	sub	sp, #24
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d109      	bne.n	800b956 <xTaskRemoveFromEventList+0x2a>
 800b942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b946:	f383 8811 	msr	BASEPRI, r3
 800b94a:	f3bf 8f6f 	isb	sy
 800b94e:	f3bf 8f4f 	dsb	sy
 800b952:	60fb      	str	r3, [r7, #12]
 800b954:	e7fe      	b.n	800b954 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	3318      	adds	r3, #24
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fe fb78 	bl	800a050 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b960:	4b1d      	ldr	r3, [pc, #116]	; (800b9d8 <xTaskRemoveFromEventList+0xac>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d11d      	bne.n	800b9a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	3304      	adds	r3, #4
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7fe fb6f 	bl	800a050 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b976:	4b19      	ldr	r3, [pc, #100]	; (800b9dc <xTaskRemoveFromEventList+0xb0>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d903      	bls.n	800b986 <xTaskRemoveFromEventList+0x5a>
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b982:	4a16      	ldr	r2, [pc, #88]	; (800b9dc <xTaskRemoveFromEventList+0xb0>)
 800b984:	6013      	str	r3, [r2, #0]
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98a:	4613      	mov	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4a13      	ldr	r2, [pc, #76]	; (800b9e0 <xTaskRemoveFromEventList+0xb4>)
 800b994:	441a      	add	r2, r3
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	3304      	adds	r3, #4
 800b99a:	4619      	mov	r1, r3
 800b99c:	4610      	mov	r0, r2
 800b99e:	f7fe fafa 	bl	8009f96 <vListInsertEnd>
 800b9a2:	e005      	b.n	800b9b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	3318      	adds	r3, #24
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	480e      	ldr	r0, [pc, #56]	; (800b9e4 <xTaskRemoveFromEventList+0xb8>)
 800b9ac:	f7fe faf3 	bl	8009f96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b4:	4b0c      	ldr	r3, [pc, #48]	; (800b9e8 <xTaskRemoveFromEventList+0xbc>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d905      	bls.n	800b9ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9c2:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <xTaskRemoveFromEventList+0xc0>)
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	601a      	str	r2, [r3, #0]
 800b9c8:	e001      	b.n	800b9ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b9ce:	697b      	ldr	r3, [r7, #20]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3718      	adds	r7, #24
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	20000e54 	.word	0x20000e54
 800b9dc:	20000e34 	.word	0x20000e34
 800b9e0:	2000095c 	.word	0x2000095c
 800b9e4:	20000dec 	.word	0x20000dec
 800b9e8:	20000958 	.word	0x20000958
 800b9ec:	20000e40 	.word	0x20000e40

0800b9f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9f8:	4b06      	ldr	r3, [pc, #24]	; (800ba14 <vTaskInternalSetTimeOutState+0x24>)
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba00:	4b05      	ldr	r3, [pc, #20]	; (800ba18 <vTaskInternalSetTimeOutState+0x28>)
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	605a      	str	r2, [r3, #4]
}
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	20000e44 	.word	0x20000e44
 800ba18:	20000e30 	.word	0x20000e30

0800ba1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b088      	sub	sp, #32
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d109      	bne.n	800ba40 <xTaskCheckForTimeOut+0x24>
 800ba2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba30:	f383 8811 	msr	BASEPRI, r3
 800ba34:	f3bf 8f6f 	isb	sy
 800ba38:	f3bf 8f4f 	dsb	sy
 800ba3c:	613b      	str	r3, [r7, #16]
 800ba3e:	e7fe      	b.n	800ba3e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d109      	bne.n	800ba5a <xTaskCheckForTimeOut+0x3e>
 800ba46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4a:	f383 8811 	msr	BASEPRI, r3
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	60fb      	str	r3, [r7, #12]
 800ba58:	e7fe      	b.n	800ba58 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ba5a:	f000 ff77 	bl	800c94c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba5e:	4b1d      	ldr	r3, [pc, #116]	; (800bad4 <xTaskCheckForTimeOut+0xb8>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	69ba      	ldr	r2, [r7, #24]
 800ba6a:	1ad3      	subs	r3, r2, r3
 800ba6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba76:	d102      	bne.n	800ba7e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	61fb      	str	r3, [r7, #28]
 800ba7c:	e023      	b.n	800bac6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	4b15      	ldr	r3, [pc, #84]	; (800bad8 <xTaskCheckForTimeOut+0xbc>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d007      	beq.n	800ba9a <xTaskCheckForTimeOut+0x7e>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	69ba      	ldr	r2, [r7, #24]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d302      	bcc.n	800ba9a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba94:	2301      	movs	r3, #1
 800ba96:	61fb      	str	r3, [r7, #28]
 800ba98:	e015      	b.n	800bac6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d20b      	bcs.n	800babc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	1ad2      	subs	r2, r2, r3
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7ff ff9d 	bl	800b9f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bab6:	2300      	movs	r3, #0
 800bab8:	61fb      	str	r3, [r7, #28]
 800baba:	e004      	b.n	800bac6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	2200      	movs	r2, #0
 800bac0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bac2:	2301      	movs	r3, #1
 800bac4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bac6:	f000 ff6f 	bl	800c9a8 <vPortExitCritical>

	return xReturn;
 800baca:	69fb      	ldr	r3, [r7, #28]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3720      	adds	r7, #32
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	20000e30 	.word	0x20000e30
 800bad8:	20000e44 	.word	0x20000e44

0800badc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800badc:	b480      	push	{r7}
 800bade:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bae0:	4b03      	ldr	r3, [pc, #12]	; (800baf0 <vTaskMissedYield+0x14>)
 800bae2:	2201      	movs	r2, #1
 800bae4:	601a      	str	r2, [r3, #0]
}
 800bae6:	bf00      	nop
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr
 800baf0:	20000e40 	.word	0x20000e40

0800baf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bafc:	f000 f852 	bl	800bba4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb00:	4b06      	ldr	r3, [pc, #24]	; (800bb1c <prvIdleTask+0x28>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d9f9      	bls.n	800bafc <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb08:	4b05      	ldr	r3, [pc, #20]	; (800bb20 <prvIdleTask+0x2c>)
 800bb0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb0e:	601a      	str	r2, [r3, #0]
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb18:	e7f0      	b.n	800bafc <prvIdleTask+0x8>
 800bb1a:	bf00      	nop
 800bb1c:	2000095c 	.word	0x2000095c
 800bb20:	e000ed04 	.word	0xe000ed04

0800bb24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	607b      	str	r3, [r7, #4]
 800bb2e:	e00c      	b.n	800bb4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	4613      	mov	r3, r2
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	4413      	add	r3, r2
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4a12      	ldr	r2, [pc, #72]	; (800bb84 <prvInitialiseTaskLists+0x60>)
 800bb3c:	4413      	add	r3, r2
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fe f9fc 	bl	8009f3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3301      	adds	r3, #1
 800bb48:	607b      	str	r3, [r7, #4]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2b37      	cmp	r3, #55	; 0x37
 800bb4e:	d9ef      	bls.n	800bb30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb50:	480d      	ldr	r0, [pc, #52]	; (800bb88 <prvInitialiseTaskLists+0x64>)
 800bb52:	f7fe f9f3 	bl	8009f3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb56:	480d      	ldr	r0, [pc, #52]	; (800bb8c <prvInitialiseTaskLists+0x68>)
 800bb58:	f7fe f9f0 	bl	8009f3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb5c:	480c      	ldr	r0, [pc, #48]	; (800bb90 <prvInitialiseTaskLists+0x6c>)
 800bb5e:	f7fe f9ed 	bl	8009f3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb62:	480c      	ldr	r0, [pc, #48]	; (800bb94 <prvInitialiseTaskLists+0x70>)
 800bb64:	f7fe f9ea 	bl	8009f3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb68:	480b      	ldr	r0, [pc, #44]	; (800bb98 <prvInitialiseTaskLists+0x74>)
 800bb6a:	f7fe f9e7 	bl	8009f3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb6e:	4b0b      	ldr	r3, [pc, #44]	; (800bb9c <prvInitialiseTaskLists+0x78>)
 800bb70:	4a05      	ldr	r2, [pc, #20]	; (800bb88 <prvInitialiseTaskLists+0x64>)
 800bb72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb74:	4b0a      	ldr	r3, [pc, #40]	; (800bba0 <prvInitialiseTaskLists+0x7c>)
 800bb76:	4a05      	ldr	r2, [pc, #20]	; (800bb8c <prvInitialiseTaskLists+0x68>)
 800bb78:	601a      	str	r2, [r3, #0]
}
 800bb7a:	bf00      	nop
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	2000095c 	.word	0x2000095c
 800bb88:	20000dbc 	.word	0x20000dbc
 800bb8c:	20000dd0 	.word	0x20000dd0
 800bb90:	20000dec 	.word	0x20000dec
 800bb94:	20000e00 	.word	0x20000e00
 800bb98:	20000e18 	.word	0x20000e18
 800bb9c:	20000de4 	.word	0x20000de4
 800bba0:	20000de8 	.word	0x20000de8

0800bba4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbaa:	e019      	b.n	800bbe0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bbac:	f000 fece 	bl	800c94c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbb0:	4b0f      	ldr	r3, [pc, #60]	; (800bbf0 <prvCheckTasksWaitingTermination+0x4c>)
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	3304      	adds	r3, #4
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fe fa47 	bl	800a050 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbc2:	4b0c      	ldr	r3, [pc, #48]	; (800bbf4 <prvCheckTasksWaitingTermination+0x50>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	4a0a      	ldr	r2, [pc, #40]	; (800bbf4 <prvCheckTasksWaitingTermination+0x50>)
 800bbca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bbcc:	4b0a      	ldr	r3, [pc, #40]	; (800bbf8 <prvCheckTasksWaitingTermination+0x54>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	4a09      	ldr	r2, [pc, #36]	; (800bbf8 <prvCheckTasksWaitingTermination+0x54>)
 800bbd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bbd6:	f000 fee7 	bl	800c9a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f80e 	bl	800bbfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbe0:	4b05      	ldr	r3, [pc, #20]	; (800bbf8 <prvCheckTasksWaitingTermination+0x54>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1e1      	bne.n	800bbac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bbe8:	bf00      	nop
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	20000e00 	.word	0x20000e00
 800bbf4:	20000e2c 	.word	0x20000e2c
 800bbf8:	20000e14 	.word	0x20000e14

0800bbfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d108      	bne.n	800bc20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc12:	4618      	mov	r0, r3
 800bc14:	f001 f876 	bl	800cd04 <vPortFree>
				vPortFree( pxTCB );
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f001 f873 	bl	800cd04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc1e:	e017      	b.n	800bc50 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d103      	bne.n	800bc32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f001 f86a 	bl	800cd04 <vPortFree>
	}
 800bc30:	e00e      	b.n	800bc50 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d009      	beq.n	800bc50 <prvDeleteTCB+0x54>
 800bc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc40:	f383 8811 	msr	BASEPRI, r3
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	60fb      	str	r3, [r7, #12]
 800bc4e:	e7fe      	b.n	800bc4e <prvDeleteTCB+0x52>
	}
 800bc50:	bf00      	nop
 800bc52:	3710      	adds	r7, #16
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc5e:	4b0c      	ldr	r3, [pc, #48]	; (800bc90 <prvResetNextTaskUnblockTime+0x38>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d104      	bne.n	800bc72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc68:	4b0a      	ldr	r3, [pc, #40]	; (800bc94 <prvResetNextTaskUnblockTime+0x3c>)
 800bc6a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc70:	e008      	b.n	800bc84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc72:	4b07      	ldr	r3, [pc, #28]	; (800bc90 <prvResetNextTaskUnblockTime+0x38>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	4a04      	ldr	r2, [pc, #16]	; (800bc94 <prvResetNextTaskUnblockTime+0x3c>)
 800bc82:	6013      	str	r3, [r2, #0]
}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr
 800bc90:	20000de4 	.word	0x20000de4
 800bc94:	20000e4c 	.word	0x20000e4c

0800bc98 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bc9e:	4b05      	ldr	r3, [pc, #20]	; (800bcb4 <xTaskGetCurrentTaskHandle+0x1c>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bca4:	687b      	ldr	r3, [r7, #4]
	}
 800bca6:	4618      	mov	r0, r3
 800bca8:	370c      	adds	r7, #12
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	20000958 	.word	0x20000958

0800bcb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bcbe:	4b0b      	ldr	r3, [pc, #44]	; (800bcec <xTaskGetSchedulerState+0x34>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d102      	bne.n	800bccc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	607b      	str	r3, [r7, #4]
 800bcca:	e008      	b.n	800bcde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bccc:	4b08      	ldr	r3, [pc, #32]	; (800bcf0 <xTaskGetSchedulerState+0x38>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d102      	bne.n	800bcda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	607b      	str	r3, [r7, #4]
 800bcd8:	e001      	b.n	800bcde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bcde:	687b      	ldr	r3, [r7, #4]
	}
 800bce0:	4618      	mov	r0, r3
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr
 800bcec:	20000e38 	.word	0x20000e38
 800bcf0:	20000e54 	.word	0x20000e54

0800bcf4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bd00:	2300      	movs	r3, #0
 800bd02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d051      	beq.n	800bdae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd0e:	4b2a      	ldr	r3, [pc, #168]	; (800bdb8 <xTaskPriorityInherit+0xc4>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d241      	bcs.n	800bd9c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	699b      	ldr	r3, [r3, #24]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	db06      	blt.n	800bd2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd20:	4b25      	ldr	r3, [pc, #148]	; (800bdb8 <xTaskPriorityInherit+0xc4>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	6959      	ldr	r1, [r3, #20]
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd36:	4613      	mov	r3, r2
 800bd38:	009b      	lsls	r3, r3, #2
 800bd3a:	4413      	add	r3, r2
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	4a1f      	ldr	r2, [pc, #124]	; (800bdbc <xTaskPriorityInherit+0xc8>)
 800bd40:	4413      	add	r3, r2
 800bd42:	4299      	cmp	r1, r3
 800bd44:	d122      	bne.n	800bd8c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	3304      	adds	r3, #4
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7fe f980 	bl	800a050 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd50:	4b19      	ldr	r3, [pc, #100]	; (800bdb8 <xTaskPriorityInherit+0xc4>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd5e:	4b18      	ldr	r3, [pc, #96]	; (800bdc0 <xTaskPriorityInherit+0xcc>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d903      	bls.n	800bd6e <xTaskPriorityInherit+0x7a>
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6a:	4a15      	ldr	r2, [pc, #84]	; (800bdc0 <xTaskPriorityInherit+0xcc>)
 800bd6c:	6013      	str	r3, [r2, #0]
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd72:	4613      	mov	r3, r2
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	4413      	add	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	4a10      	ldr	r2, [pc, #64]	; (800bdbc <xTaskPriorityInherit+0xc8>)
 800bd7c:	441a      	add	r2, r3
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	3304      	adds	r3, #4
 800bd82:	4619      	mov	r1, r3
 800bd84:	4610      	mov	r0, r2
 800bd86:	f7fe f906 	bl	8009f96 <vListInsertEnd>
 800bd8a:	e004      	b.n	800bd96 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd8c:	4b0a      	ldr	r3, [pc, #40]	; (800bdb8 <xTaskPriorityInherit+0xc4>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bd96:	2301      	movs	r3, #1
 800bd98:	60fb      	str	r3, [r7, #12]
 800bd9a:	e008      	b.n	800bdae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bda0:	4b05      	ldr	r3, [pc, #20]	; (800bdb8 <xTaskPriorityInherit+0xc4>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d201      	bcs.n	800bdae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bdae:	68fb      	ldr	r3, [r7, #12]
	}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3710      	adds	r7, #16
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	20000958 	.word	0x20000958
 800bdbc:	2000095c 	.word	0x2000095c
 800bdc0:	20000e34 	.word	0x20000e34

0800bdc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b086      	sub	sp, #24
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d054      	beq.n	800be84 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bdda:	4b2d      	ldr	r3, [pc, #180]	; (800be90 <xTaskPriorityDisinherit+0xcc>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	693a      	ldr	r2, [r7, #16]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d009      	beq.n	800bdf8 <xTaskPriorityDisinherit+0x34>
 800bde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde8:	f383 8811 	msr	BASEPRI, r3
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	60fb      	str	r3, [r7, #12]
 800bdf6:	e7fe      	b.n	800bdf6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d109      	bne.n	800be14 <xTaskPriorityDisinherit+0x50>
 800be00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be04:	f383 8811 	msr	BASEPRI, r3
 800be08:	f3bf 8f6f 	isb	sy
 800be0c:	f3bf 8f4f 	dsb	sy
 800be10:	60bb      	str	r3, [r7, #8]
 800be12:	e7fe      	b.n	800be12 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be18:	1e5a      	subs	r2, r3, #1
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be26:	429a      	cmp	r2, r3
 800be28:	d02c      	beq.n	800be84 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d128      	bne.n	800be84 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	3304      	adds	r3, #4
 800be36:	4618      	mov	r0, r3
 800be38:	f7fe f90a 	bl	800a050 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be54:	4b0f      	ldr	r3, [pc, #60]	; (800be94 <xTaskPriorityDisinherit+0xd0>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d903      	bls.n	800be64 <xTaskPriorityDisinherit+0xa0>
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be60:	4a0c      	ldr	r2, [pc, #48]	; (800be94 <xTaskPriorityDisinherit+0xd0>)
 800be62:	6013      	str	r3, [r2, #0]
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be68:	4613      	mov	r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4413      	add	r3, r2
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	4a09      	ldr	r2, [pc, #36]	; (800be98 <xTaskPriorityDisinherit+0xd4>)
 800be72:	441a      	add	r2, r3
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	3304      	adds	r3, #4
 800be78:	4619      	mov	r1, r3
 800be7a:	4610      	mov	r0, r2
 800be7c:	f7fe f88b 	bl	8009f96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be80:	2301      	movs	r3, #1
 800be82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be84:	697b      	ldr	r3, [r7, #20]
	}
 800be86:	4618      	mov	r0, r3
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	20000958 	.word	0x20000958
 800be94:	20000e34 	.word	0x20000e34
 800be98:	2000095c 	.word	0x2000095c

0800be9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b088      	sub	sp, #32
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800beaa:	2301      	movs	r3, #1
 800beac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d068      	beq.n	800bf86 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d109      	bne.n	800bed0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800bebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	60fb      	str	r3, [r7, #12]
 800bece:	e7fe      	b.n	800bece <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bed4:	683a      	ldr	r2, [r7, #0]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d902      	bls.n	800bee0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	61fb      	str	r3, [r7, #28]
 800bede:	e002      	b.n	800bee6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bee4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beea:	69fa      	ldr	r2, [r7, #28]
 800beec:	429a      	cmp	r2, r3
 800beee:	d04a      	beq.n	800bf86 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bef4:	697a      	ldr	r2, [r7, #20]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d145      	bne.n	800bf86 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800befa:	4b25      	ldr	r3, [pc, #148]	; (800bf90 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	69ba      	ldr	r2, [r7, #24]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d109      	bne.n	800bf18 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800bf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf08:	f383 8811 	msr	BASEPRI, r3
 800bf0c:	f3bf 8f6f 	isb	sy
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	60bb      	str	r3, [r7, #8]
 800bf16:	e7fe      	b.n	800bf16 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	69fa      	ldr	r2, [r7, #28]
 800bf22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	699b      	ldr	r3, [r3, #24]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	db04      	blt.n	800bf36 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	6959      	ldr	r1, [r3, #20]
 800bf3a:	693a      	ldr	r2, [r7, #16]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4a13      	ldr	r2, [pc, #76]	; (800bf94 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bf46:	4413      	add	r3, r2
 800bf48:	4299      	cmp	r1, r3
 800bf4a:	d11c      	bne.n	800bf86 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	3304      	adds	r3, #4
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fe f87d 	bl	800a050 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf5a:	4b0f      	ldr	r3, [pc, #60]	; (800bf98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d903      	bls.n	800bf6a <vTaskPriorityDisinheritAfterTimeout+0xce>
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf66:	4a0c      	ldr	r2, [pc, #48]	; (800bf98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bf68:	6013      	str	r3, [r2, #0]
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf6e:	4613      	mov	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4413      	add	r3, r2
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	4a07      	ldr	r2, [pc, #28]	; (800bf94 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bf78:	441a      	add	r2, r3
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	3304      	adds	r3, #4
 800bf7e:	4619      	mov	r1, r3
 800bf80:	4610      	mov	r0, r2
 800bf82:	f7fe f808 	bl	8009f96 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf86:	bf00      	nop
 800bf88:	3720      	adds	r7, #32
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	20000958 	.word	0x20000958
 800bf94:	2000095c 	.word	0x2000095c
 800bf98:	20000e34 	.word	0x20000e34

0800bf9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bf9c:	b480      	push	{r7}
 800bf9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bfa0:	4b07      	ldr	r3, [pc, #28]	; (800bfc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d004      	beq.n	800bfb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bfa8:	4b05      	ldr	r3, [pc, #20]	; (800bfc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bfae:	3201      	adds	r2, #1
 800bfb0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bfb2:	4b03      	ldr	r3, [pc, #12]	; (800bfc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
	}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr
 800bfc0:	20000958 	.word	0x20000958

0800bfc4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bfce:	4b21      	ldr	r3, [pc, #132]	; (800c054 <prvAddCurrentTaskToDelayedList+0x90>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfd4:	4b20      	ldr	r3, [pc, #128]	; (800c058 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	3304      	adds	r3, #4
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7fe f838 	bl	800a050 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe6:	d10a      	bne.n	800bffe <prvAddCurrentTaskToDelayedList+0x3a>
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d007      	beq.n	800bffe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfee:	4b1a      	ldr	r3, [pc, #104]	; (800c058 <prvAddCurrentTaskToDelayedList+0x94>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	3304      	adds	r3, #4
 800bff4:	4619      	mov	r1, r3
 800bff6:	4819      	ldr	r0, [pc, #100]	; (800c05c <prvAddCurrentTaskToDelayedList+0x98>)
 800bff8:	f7fd ffcd 	bl	8009f96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bffc:	e026      	b.n	800c04c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	4413      	add	r3, r2
 800c004:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c006:	4b14      	ldr	r3, [pc, #80]	; (800c058 <prvAddCurrentTaskToDelayedList+0x94>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	68ba      	ldr	r2, [r7, #8]
 800c00c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c00e:	68ba      	ldr	r2, [r7, #8]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	429a      	cmp	r2, r3
 800c014:	d209      	bcs.n	800c02a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c016:	4b12      	ldr	r3, [pc, #72]	; (800c060 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	4b0f      	ldr	r3, [pc, #60]	; (800c058 <prvAddCurrentTaskToDelayedList+0x94>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	3304      	adds	r3, #4
 800c020:	4619      	mov	r1, r3
 800c022:	4610      	mov	r0, r2
 800c024:	f7fd ffdb 	bl	8009fde <vListInsert>
}
 800c028:	e010      	b.n	800c04c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c02a:	4b0e      	ldr	r3, [pc, #56]	; (800c064 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	4b0a      	ldr	r3, [pc, #40]	; (800c058 <prvAddCurrentTaskToDelayedList+0x94>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	3304      	adds	r3, #4
 800c034:	4619      	mov	r1, r3
 800c036:	4610      	mov	r0, r2
 800c038:	f7fd ffd1 	bl	8009fde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c03c:	4b0a      	ldr	r3, [pc, #40]	; (800c068 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	68ba      	ldr	r2, [r7, #8]
 800c042:	429a      	cmp	r2, r3
 800c044:	d202      	bcs.n	800c04c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c046:	4a08      	ldr	r2, [pc, #32]	; (800c068 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	6013      	str	r3, [r2, #0]
}
 800c04c:	bf00      	nop
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	20000e30 	.word	0x20000e30
 800c058:	20000958 	.word	0x20000958
 800c05c:	20000e18 	.word	0x20000e18
 800c060:	20000de8 	.word	0x20000de8
 800c064:	20000de4 	.word	0x20000de4
 800c068:	20000e4c 	.word	0x20000e4c

0800c06c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b08a      	sub	sp, #40	; 0x28
 800c070:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c072:	2300      	movs	r3, #0
 800c074:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c076:	f000 faff 	bl	800c678 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c07a:	4b1c      	ldr	r3, [pc, #112]	; (800c0ec <xTimerCreateTimerTask+0x80>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d021      	beq.n	800c0c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c082:	2300      	movs	r3, #0
 800c084:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c086:	2300      	movs	r3, #0
 800c088:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c08a:	1d3a      	adds	r2, r7, #4
 800c08c:	f107 0108 	add.w	r1, r7, #8
 800c090:	f107 030c 	add.w	r3, r7, #12
 800c094:	4618      	mov	r0, r3
 800c096:	f7fd ff37 	bl	8009f08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c09a:	6879      	ldr	r1, [r7, #4]
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	9202      	str	r2, [sp, #8]
 800c0a2:	9301      	str	r3, [sp, #4]
 800c0a4:	2302      	movs	r3, #2
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	460a      	mov	r2, r1
 800c0ac:	4910      	ldr	r1, [pc, #64]	; (800c0f0 <xTimerCreateTimerTask+0x84>)
 800c0ae:	4811      	ldr	r0, [pc, #68]	; (800c0f4 <xTimerCreateTimerTask+0x88>)
 800c0b0:	f7fe ff5e 	bl	800af70 <xTaskCreateStatic>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	4b10      	ldr	r3, [pc, #64]	; (800c0f8 <xTimerCreateTimerTask+0x8c>)
 800c0b8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c0ba:	4b0f      	ldr	r3, [pc, #60]	; (800c0f8 <xTimerCreateTimerTask+0x8c>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d001      	beq.n	800c0c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d109      	bne.n	800c0e0 <xTimerCreateTimerTask+0x74>
 800c0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	613b      	str	r3, [r7, #16]
 800c0de:	e7fe      	b.n	800c0de <xTimerCreateTimerTask+0x72>
	return xReturn;
 800c0e0:	697b      	ldr	r3, [r7, #20]
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3718      	adds	r7, #24
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	20000e88 	.word	0x20000e88
 800c0f0:	0800e44c 	.word	0x0800e44c
 800c0f4:	0800c22d 	.word	0x0800c22d
 800c0f8:	20000e8c 	.word	0x20000e8c

0800c0fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b08a      	sub	sp, #40	; 0x28
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	607a      	str	r2, [r7, #4]
 800c108:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c10a:	2300      	movs	r3, #0
 800c10c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d109      	bne.n	800c128 <xTimerGenericCommand+0x2c>
 800c114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	623b      	str	r3, [r7, #32]
 800c126:	e7fe      	b.n	800c126 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c128:	4b19      	ldr	r3, [pc, #100]	; (800c190 <xTimerGenericCommand+0x94>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d02a      	beq.n	800c186 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	2b05      	cmp	r3, #5
 800c140:	dc18      	bgt.n	800c174 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c142:	f7ff fdb9 	bl	800bcb8 <xTaskGetSchedulerState>
 800c146:	4603      	mov	r3, r0
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d109      	bne.n	800c160 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c14c:	4b10      	ldr	r3, [pc, #64]	; (800c190 <xTimerGenericCommand+0x94>)
 800c14e:	6818      	ldr	r0, [r3, #0]
 800c150:	f107 0110 	add.w	r1, r7, #16
 800c154:	2300      	movs	r3, #0
 800c156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c158:	f7fe f996 	bl	800a488 <xQueueGenericSend>
 800c15c:	6278      	str	r0, [r7, #36]	; 0x24
 800c15e:	e012      	b.n	800c186 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c160:	4b0b      	ldr	r3, [pc, #44]	; (800c190 <xTimerGenericCommand+0x94>)
 800c162:	6818      	ldr	r0, [r3, #0]
 800c164:	f107 0110 	add.w	r1, r7, #16
 800c168:	2300      	movs	r3, #0
 800c16a:	2200      	movs	r2, #0
 800c16c:	f7fe f98c 	bl	800a488 <xQueueGenericSend>
 800c170:	6278      	str	r0, [r7, #36]	; 0x24
 800c172:	e008      	b.n	800c186 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c174:	4b06      	ldr	r3, [pc, #24]	; (800c190 <xTimerGenericCommand+0x94>)
 800c176:	6818      	ldr	r0, [r3, #0]
 800c178:	f107 0110 	add.w	r1, r7, #16
 800c17c:	2300      	movs	r3, #0
 800c17e:	683a      	ldr	r2, [r7, #0]
 800c180:	f7fe fa7c 	bl	800a67c <xQueueGenericSendFromISR>
 800c184:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3728      	adds	r7, #40	; 0x28
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	20000e88 	.word	0x20000e88

0800c194 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b088      	sub	sp, #32
 800c198:	af02      	add	r7, sp, #8
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c19e:	4b22      	ldr	r3, [pc, #136]	; (800c228 <prvProcessExpiredTimer+0x94>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fd ff4f 	bl	800a050 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1b8:	f003 0304 	and.w	r3, r3, #4
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d021      	beq.n	800c204 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	699a      	ldr	r2, [r3, #24]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	18d1      	adds	r1, r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	6978      	ldr	r0, [r7, #20]
 800c1ce:	f000 f8d1 	bl	800c374 <prvInsertTimerInActiveList>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d01e      	beq.n	800c216 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1d8:	2300      	movs	r3, #0
 800c1da:	9300      	str	r3, [sp, #0]
 800c1dc:	2300      	movs	r3, #0
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	6978      	ldr	r0, [r7, #20]
 800c1e4:	f7ff ff8a 	bl	800c0fc <xTimerGenericCommand>
 800c1e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d112      	bne.n	800c216 <prvProcessExpiredTimer+0x82>
 800c1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f4:	f383 8811 	msr	BASEPRI, r3
 800c1f8:	f3bf 8f6f 	isb	sy
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	60fb      	str	r3, [r7, #12]
 800c202:	e7fe      	b.n	800c202 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c20a:	f023 0301 	bic.w	r3, r3, #1
 800c20e:	b2da      	uxtb	r2, r3
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	6a1b      	ldr	r3, [r3, #32]
 800c21a:	6978      	ldr	r0, [r7, #20]
 800c21c:	4798      	blx	r3
}
 800c21e:	bf00      	nop
 800c220:	3718      	adds	r7, #24
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	20000e80 	.word	0x20000e80

0800c22c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c234:	f107 0308 	add.w	r3, r7, #8
 800c238:	4618      	mov	r0, r3
 800c23a:	f000 f857 	bl	800c2ec <prvGetNextExpireTime>
 800c23e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	4619      	mov	r1, r3
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f000 f803 	bl	800c250 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c24a:	f000 f8d5 	bl	800c3f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c24e:	e7f1      	b.n	800c234 <prvTimerTask+0x8>

0800c250 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c25a:	f7ff f939 	bl	800b4d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c25e:	f107 0308 	add.w	r3, r7, #8
 800c262:	4618      	mov	r0, r3
 800c264:	f000 f866 	bl	800c334 <prvSampleTimeNow>
 800c268:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d130      	bne.n	800c2d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10a      	bne.n	800c28c <prvProcessTimerOrBlockTask+0x3c>
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d806      	bhi.n	800c28c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c27e:	f7ff f935 	bl	800b4ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c282:	68f9      	ldr	r1, [r7, #12]
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f7ff ff85 	bl	800c194 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c28a:	e024      	b.n	800c2d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d008      	beq.n	800c2a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c292:	4b13      	ldr	r3, [pc, #76]	; (800c2e0 <prvProcessTimerOrBlockTask+0x90>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d101      	bne.n	800c2a0 <prvProcessTimerOrBlockTask+0x50>
 800c29c:	2301      	movs	r3, #1
 800c29e:	e000      	b.n	800c2a2 <prvProcessTimerOrBlockTask+0x52>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c2a4:	4b0f      	ldr	r3, [pc, #60]	; (800c2e4 <prvProcessTimerOrBlockTask+0x94>)
 800c2a6:	6818      	ldr	r0, [r3, #0]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	683a      	ldr	r2, [r7, #0]
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	f7fe fe29 	bl	800af08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c2b6:	f7ff f919 	bl	800b4ec <xTaskResumeAll>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10a      	bne.n	800c2d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c2c0:	4b09      	ldr	r3, [pc, #36]	; (800c2e8 <prvProcessTimerOrBlockTask+0x98>)
 800c2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2c6:	601a      	str	r2, [r3, #0]
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	f3bf 8f6f 	isb	sy
}
 800c2d0:	e001      	b.n	800c2d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c2d2:	f7ff f90b 	bl	800b4ec <xTaskResumeAll>
}
 800c2d6:	bf00      	nop
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	20000e84 	.word	0x20000e84
 800c2e4:	20000e88 	.word	0x20000e88
 800c2e8:	e000ed04 	.word	0xe000ed04

0800c2ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b085      	sub	sp, #20
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c2f4:	4b0e      	ldr	r3, [pc, #56]	; (800c330 <prvGetNextExpireTime+0x44>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d101      	bne.n	800c302 <prvGetNextExpireTime+0x16>
 800c2fe:	2201      	movs	r2, #1
 800c300:	e000      	b.n	800c304 <prvGetNextExpireTime+0x18>
 800c302:	2200      	movs	r2, #0
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d105      	bne.n	800c31c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c310:	4b07      	ldr	r3, [pc, #28]	; (800c330 <prvGetNextExpireTime+0x44>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	60fb      	str	r3, [r7, #12]
 800c31a:	e001      	b.n	800c320 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c31c:	2300      	movs	r3, #0
 800c31e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c320:	68fb      	ldr	r3, [r7, #12]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	20000e80 	.word	0x20000e80

0800c334 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c33c:	f7ff f972 	bl	800b624 <xTaskGetTickCount>
 800c340:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c342:	4b0b      	ldr	r3, [pc, #44]	; (800c370 <prvSampleTimeNow+0x3c>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d205      	bcs.n	800c358 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c34c:	f000 f930 	bl	800c5b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2201      	movs	r2, #1
 800c354:	601a      	str	r2, [r3, #0]
 800c356:	e002      	b.n	800c35e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2200      	movs	r2, #0
 800c35c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c35e:	4a04      	ldr	r2, [pc, #16]	; (800c370 <prvSampleTimeNow+0x3c>)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c364:	68fb      	ldr	r3, [r7, #12]
}
 800c366:	4618      	mov	r0, r3
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	20000e90 	.word	0x20000e90

0800c374 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b086      	sub	sp, #24
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
 800c380:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c382:	2300      	movs	r3, #0
 800c384:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	68ba      	ldr	r2, [r7, #8]
 800c38a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c392:	68ba      	ldr	r2, [r7, #8]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	429a      	cmp	r2, r3
 800c398:	d812      	bhi.n	800c3c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	1ad2      	subs	r2, r2, r3
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	699b      	ldr	r3, [r3, #24]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d302      	bcc.n	800c3ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	617b      	str	r3, [r7, #20]
 800c3ac:	e01b      	b.n	800c3e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c3ae:	4b10      	ldr	r3, [pc, #64]	; (800c3f0 <prvInsertTimerInActiveList+0x7c>)
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	3304      	adds	r3, #4
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	f7fd fe10 	bl	8009fde <vListInsert>
 800c3be:	e012      	b.n	800c3e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d206      	bcs.n	800c3d6 <prvInsertTimerInActiveList+0x62>
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d302      	bcc.n	800c3d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	617b      	str	r3, [r7, #20]
 800c3d4:	e007      	b.n	800c3e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3d6:	4b07      	ldr	r3, [pc, #28]	; (800c3f4 <prvInsertTimerInActiveList+0x80>)
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3304      	adds	r3, #4
 800c3de:	4619      	mov	r1, r3
 800c3e0:	4610      	mov	r0, r2
 800c3e2:	f7fd fdfc 	bl	8009fde <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c3e6:	697b      	ldr	r3, [r7, #20]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3718      	adds	r7, #24
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	20000e84 	.word	0x20000e84
 800c3f4:	20000e80 	.word	0x20000e80

0800c3f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b08e      	sub	sp, #56	; 0x38
 800c3fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3fe:	e0c6      	b.n	800c58e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	da17      	bge.n	800c436 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c406:	1d3b      	adds	r3, r7, #4
 800c408:	3304      	adds	r3, #4
 800c40a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d109      	bne.n	800c426 <prvProcessReceivedCommands+0x2e>
 800c412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	61fb      	str	r3, [r7, #28]
 800c424:	e7fe      	b.n	800c424 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c42c:	6850      	ldr	r0, [r2, #4]
 800c42e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c430:	6892      	ldr	r2, [r2, #8]
 800c432:	4611      	mov	r1, r2
 800c434:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f2c0 80a7 	blt.w	800c58c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c444:	695b      	ldr	r3, [r3, #20]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d004      	beq.n	800c454 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44c:	3304      	adds	r3, #4
 800c44e:	4618      	mov	r0, r3
 800c450:	f7fd fdfe 	bl	800a050 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c454:	463b      	mov	r3, r7
 800c456:	4618      	mov	r0, r3
 800c458:	f7ff ff6c 	bl	800c334 <prvSampleTimeNow>
 800c45c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2b09      	cmp	r3, #9
 800c462:	f200 8094 	bhi.w	800c58e <prvProcessReceivedCommands+0x196>
 800c466:	a201      	add	r2, pc, #4	; (adr r2, 800c46c <prvProcessReceivedCommands+0x74>)
 800c468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c46c:	0800c495 	.word	0x0800c495
 800c470:	0800c495 	.word	0x0800c495
 800c474:	0800c495 	.word	0x0800c495
 800c478:	0800c507 	.word	0x0800c507
 800c47c:	0800c51b 	.word	0x0800c51b
 800c480:	0800c563 	.word	0x0800c563
 800c484:	0800c495 	.word	0x0800c495
 800c488:	0800c495 	.word	0x0800c495
 800c48c:	0800c507 	.word	0x0800c507
 800c490:	0800c51b 	.word	0x0800c51b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c49a:	f043 0301 	orr.w	r3, r3, #1
 800c49e:	b2da      	uxtb	r2, r3
 800c4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4aa:	699b      	ldr	r3, [r3, #24]
 800c4ac:	18d1      	adds	r1, r2, r3
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4b4:	f7ff ff5e 	bl	800c374 <prvInsertTimerInActiveList>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d067      	beq.n	800c58e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c0:	6a1b      	ldr	r3, [r3, #32]
 800c4c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4cc:	f003 0304 	and.w	r3, r3, #4
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d05c      	beq.n	800c58e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c4d4:	68ba      	ldr	r2, [r7, #8]
 800c4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d8:	699b      	ldr	r3, [r3, #24]
 800c4da:	441a      	add	r2, r3
 800c4dc:	2300      	movs	r3, #0
 800c4de:	9300      	str	r3, [sp, #0]
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4e6:	f7ff fe09 	bl	800c0fc <xTimerGenericCommand>
 800c4ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c4ec:	6a3b      	ldr	r3, [r7, #32]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d14d      	bne.n	800c58e <prvProcessReceivedCommands+0x196>
 800c4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f6:	f383 8811 	msr	BASEPRI, r3
 800c4fa:	f3bf 8f6f 	isb	sy
 800c4fe:	f3bf 8f4f 	dsb	sy
 800c502:	61bb      	str	r3, [r7, #24]
 800c504:	e7fe      	b.n	800c504 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c50c:	f023 0301 	bic.w	r3, r3, #1
 800c510:	b2da      	uxtb	r2, r3
 800c512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c514:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c518:	e039      	b.n	800c58e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c520:	f043 0301 	orr.w	r3, r3, #1
 800c524:	b2da      	uxtb	r2, r3
 800c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c528:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c52c:	68ba      	ldr	r2, [r7, #8]
 800c52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c530:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c534:	699b      	ldr	r3, [r3, #24]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d109      	bne.n	800c54e <prvProcessReceivedCommands+0x156>
 800c53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	617b      	str	r3, [r7, #20]
 800c54c:	e7fe      	b.n	800c54c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c550:	699a      	ldr	r2, [r3, #24]
 800c552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c554:	18d1      	adds	r1, r2, r3
 800c556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c55a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c55c:	f7ff ff0a 	bl	800c374 <prvInsertTimerInActiveList>
					break;
 800c560:	e015      	b.n	800c58e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c568:	f003 0302 	and.w	r3, r3, #2
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d103      	bne.n	800c578 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800c570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c572:	f000 fbc7 	bl	800cd04 <vPortFree>
 800c576:	e00a      	b.n	800c58e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c57e:	f023 0301 	bic.w	r3, r3, #1
 800c582:	b2da      	uxtb	r2, r3
 800c584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c586:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c58a:	e000      	b.n	800c58e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c58c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c58e:	4b07      	ldr	r3, [pc, #28]	; (800c5ac <prvProcessReceivedCommands+0x1b4>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	1d39      	adds	r1, r7, #4
 800c594:	2200      	movs	r2, #0
 800c596:	4618      	mov	r0, r3
 800c598:	f7fe f904 	bl	800a7a4 <xQueueReceive>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f47f af2e 	bne.w	800c400 <prvProcessReceivedCommands+0x8>
	}
}
 800c5a4:	bf00      	nop
 800c5a6:	3730      	adds	r7, #48	; 0x30
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	20000e88 	.word	0x20000e88

0800c5b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b088      	sub	sp, #32
 800c5b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5b6:	e047      	b.n	800c648 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5b8:	4b2d      	ldr	r3, [pc, #180]	; (800c670 <prvSwitchTimerLists+0xc0>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5c2:	4b2b      	ldr	r3, [pc, #172]	; (800c670 <prvSwitchTimerLists+0xc0>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	68db      	ldr	r3, [r3, #12]
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	3304      	adds	r3, #4
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7fd fd3d 	bl	800a050 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6a1b      	ldr	r3, [r3, #32]
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5e4:	f003 0304 	and.w	r3, r3, #4
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d02d      	beq.n	800c648 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	693a      	ldr	r2, [r7, #16]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c5f6:	68ba      	ldr	r2, [r7, #8]
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d90e      	bls.n	800c61c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c60a:	4b19      	ldr	r3, [pc, #100]	; (800c670 <prvSwitchTimerLists+0xc0>)
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	3304      	adds	r3, #4
 800c612:	4619      	mov	r1, r3
 800c614:	4610      	mov	r0, r2
 800c616:	f7fd fce2 	bl	8009fde <vListInsert>
 800c61a:	e015      	b.n	800c648 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c61c:	2300      	movs	r3, #0
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	2300      	movs	r3, #0
 800c622:	693a      	ldr	r2, [r7, #16]
 800c624:	2100      	movs	r1, #0
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f7ff fd68 	bl	800c0fc <xTimerGenericCommand>
 800c62c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d109      	bne.n	800c648 <prvSwitchTimerLists+0x98>
 800c634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	603b      	str	r3, [r7, #0]
 800c646:	e7fe      	b.n	800c646 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c648:	4b09      	ldr	r3, [pc, #36]	; (800c670 <prvSwitchTimerLists+0xc0>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d1b2      	bne.n	800c5b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c652:	4b07      	ldr	r3, [pc, #28]	; (800c670 <prvSwitchTimerLists+0xc0>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c658:	4b06      	ldr	r3, [pc, #24]	; (800c674 <prvSwitchTimerLists+0xc4>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a04      	ldr	r2, [pc, #16]	; (800c670 <prvSwitchTimerLists+0xc0>)
 800c65e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c660:	4a04      	ldr	r2, [pc, #16]	; (800c674 <prvSwitchTimerLists+0xc4>)
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	6013      	str	r3, [r2, #0]
}
 800c666:	bf00      	nop
 800c668:	3718      	adds	r7, #24
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	20000e80 	.word	0x20000e80
 800c674:	20000e84 	.word	0x20000e84

0800c678 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c67e:	f000 f965 	bl	800c94c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c682:	4b15      	ldr	r3, [pc, #84]	; (800c6d8 <prvCheckForValidListAndQueue+0x60>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d120      	bne.n	800c6cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c68a:	4814      	ldr	r0, [pc, #80]	; (800c6dc <prvCheckForValidListAndQueue+0x64>)
 800c68c:	f7fd fc56 	bl	8009f3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c690:	4813      	ldr	r0, [pc, #76]	; (800c6e0 <prvCheckForValidListAndQueue+0x68>)
 800c692:	f7fd fc53 	bl	8009f3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c696:	4b13      	ldr	r3, [pc, #76]	; (800c6e4 <prvCheckForValidListAndQueue+0x6c>)
 800c698:	4a10      	ldr	r2, [pc, #64]	; (800c6dc <prvCheckForValidListAndQueue+0x64>)
 800c69a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c69c:	4b12      	ldr	r3, [pc, #72]	; (800c6e8 <prvCheckForValidListAndQueue+0x70>)
 800c69e:	4a10      	ldr	r2, [pc, #64]	; (800c6e0 <prvCheckForValidListAndQueue+0x68>)
 800c6a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	9300      	str	r3, [sp, #0]
 800c6a6:	4b11      	ldr	r3, [pc, #68]	; (800c6ec <prvCheckForValidListAndQueue+0x74>)
 800c6a8:	4a11      	ldr	r2, [pc, #68]	; (800c6f0 <prvCheckForValidListAndQueue+0x78>)
 800c6aa:	2110      	movs	r1, #16
 800c6ac:	200a      	movs	r0, #10
 800c6ae:	f7fd fd61 	bl	800a174 <xQueueGenericCreateStatic>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	4b08      	ldr	r3, [pc, #32]	; (800c6d8 <prvCheckForValidListAndQueue+0x60>)
 800c6b6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c6b8:	4b07      	ldr	r3, [pc, #28]	; (800c6d8 <prvCheckForValidListAndQueue+0x60>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d005      	beq.n	800c6cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c6c0:	4b05      	ldr	r3, [pc, #20]	; (800c6d8 <prvCheckForValidListAndQueue+0x60>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	490b      	ldr	r1, [pc, #44]	; (800c6f4 <prvCheckForValidListAndQueue+0x7c>)
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7fe fbf6 	bl	800aeb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6cc:	f000 f96c 	bl	800c9a8 <vPortExitCritical>
}
 800c6d0:	bf00      	nop
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	20000e88 	.word	0x20000e88
 800c6dc:	20000e58 	.word	0x20000e58
 800c6e0:	20000e6c 	.word	0x20000e6c
 800c6e4:	20000e80 	.word	0x20000e80
 800c6e8:	20000e84 	.word	0x20000e84
 800c6ec:	20000f34 	.word	0x20000f34
 800c6f0:	20000e94 	.word	0x20000e94
 800c6f4:	0800e454 	.word	0x0800e454

0800c6f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	3b04      	subs	r3, #4
 800c708:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	3b04      	subs	r3, #4
 800c716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	f023 0201 	bic.w	r2, r3, #1
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	3b04      	subs	r3, #4
 800c726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c728:	4a0c      	ldr	r2, [pc, #48]	; (800c75c <pxPortInitialiseStack+0x64>)
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	3b14      	subs	r3, #20
 800c732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	3b04      	subs	r3, #4
 800c73e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f06f 0202 	mvn.w	r2, #2
 800c746:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	3b20      	subs	r3, #32
 800c74c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c74e:	68fb      	ldr	r3, [r7, #12]
}
 800c750:	4618      	mov	r0, r3
 800c752:	3714      	adds	r7, #20
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr
 800c75c:	0800c761 	.word	0x0800c761

0800c760 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c766:	2300      	movs	r3, #0
 800c768:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c76a:	4b11      	ldr	r3, [pc, #68]	; (800c7b0 <prvTaskExitError+0x50>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c772:	d009      	beq.n	800c788 <prvTaskExitError+0x28>
 800c774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c778:	f383 8811 	msr	BASEPRI, r3
 800c77c:	f3bf 8f6f 	isb	sy
 800c780:	f3bf 8f4f 	dsb	sy
 800c784:	60fb      	str	r3, [r7, #12]
 800c786:	e7fe      	b.n	800c786 <prvTaskExitError+0x26>
 800c788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78c:	f383 8811 	msr	BASEPRI, r3
 800c790:	f3bf 8f6f 	isb	sy
 800c794:	f3bf 8f4f 	dsb	sy
 800c798:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c79a:	bf00      	nop
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d0fc      	beq.n	800c79c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7a2:	bf00      	nop
 800c7a4:	3714      	adds	r7, #20
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	20000184 	.word	0x20000184
	...

0800c7c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c7c0:	4b07      	ldr	r3, [pc, #28]	; (800c7e0 <pxCurrentTCBConst2>)
 800c7c2:	6819      	ldr	r1, [r3, #0]
 800c7c4:	6808      	ldr	r0, [r1, #0]
 800c7c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ca:	f380 8809 	msr	PSP, r0
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f04f 0000 	mov.w	r0, #0
 800c7d6:	f380 8811 	msr	BASEPRI, r0
 800c7da:	4770      	bx	lr
 800c7dc:	f3af 8000 	nop.w

0800c7e0 <pxCurrentTCBConst2>:
 800c7e0:	20000958 	.word	0x20000958
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c7e4:	bf00      	nop
 800c7e6:	bf00      	nop

0800c7e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c7e8:	4808      	ldr	r0, [pc, #32]	; (800c80c <prvPortStartFirstTask+0x24>)
 800c7ea:	6800      	ldr	r0, [r0, #0]
 800c7ec:	6800      	ldr	r0, [r0, #0]
 800c7ee:	f380 8808 	msr	MSP, r0
 800c7f2:	f04f 0000 	mov.w	r0, #0
 800c7f6:	f380 8814 	msr	CONTROL, r0
 800c7fa:	b662      	cpsie	i
 800c7fc:	b661      	cpsie	f
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	df00      	svc	0
 800c808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c80a:	bf00      	nop
 800c80c:	e000ed08 	.word	0xe000ed08

0800c810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b086      	sub	sp, #24
 800c814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c816:	4b44      	ldr	r3, [pc, #272]	; (800c928 <xPortStartScheduler+0x118>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a44      	ldr	r2, [pc, #272]	; (800c92c <xPortStartScheduler+0x11c>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d109      	bne.n	800c834 <xPortStartScheduler+0x24>
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	613b      	str	r3, [r7, #16]
 800c832:	e7fe      	b.n	800c832 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c834:	4b3c      	ldr	r3, [pc, #240]	; (800c928 <xPortStartScheduler+0x118>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a3d      	ldr	r2, [pc, #244]	; (800c930 <xPortStartScheduler+0x120>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d109      	bne.n	800c852 <xPortStartScheduler+0x42>
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	60fb      	str	r3, [r7, #12]
 800c850:	e7fe      	b.n	800c850 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c852:	4b38      	ldr	r3, [pc, #224]	; (800c934 <xPortStartScheduler+0x124>)
 800c854:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	22ff      	movs	r2, #255	; 0xff
 800c862:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c86c:	78fb      	ldrb	r3, [r7, #3]
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c874:	b2da      	uxtb	r2, r3
 800c876:	4b30      	ldr	r3, [pc, #192]	; (800c938 <xPortStartScheduler+0x128>)
 800c878:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c87a:	4b30      	ldr	r3, [pc, #192]	; (800c93c <xPortStartScheduler+0x12c>)
 800c87c:	2207      	movs	r2, #7
 800c87e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c880:	e009      	b.n	800c896 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c882:	4b2e      	ldr	r3, [pc, #184]	; (800c93c <xPortStartScheduler+0x12c>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	3b01      	subs	r3, #1
 800c888:	4a2c      	ldr	r2, [pc, #176]	; (800c93c <xPortStartScheduler+0x12c>)
 800c88a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c88c:	78fb      	ldrb	r3, [r7, #3]
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	005b      	lsls	r3, r3, #1
 800c892:	b2db      	uxtb	r3, r3
 800c894:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c896:	78fb      	ldrb	r3, [r7, #3]
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c89e:	2b80      	cmp	r3, #128	; 0x80
 800c8a0:	d0ef      	beq.n	800c882 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8a2:	4b26      	ldr	r3, [pc, #152]	; (800c93c <xPortStartScheduler+0x12c>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f1c3 0307 	rsb	r3, r3, #7
 800c8aa:	2b04      	cmp	r3, #4
 800c8ac:	d009      	beq.n	800c8c2 <xPortStartScheduler+0xb2>
 800c8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b2:	f383 8811 	msr	BASEPRI, r3
 800c8b6:	f3bf 8f6f 	isb	sy
 800c8ba:	f3bf 8f4f 	dsb	sy
 800c8be:	60bb      	str	r3, [r7, #8]
 800c8c0:	e7fe      	b.n	800c8c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c8c2:	4b1e      	ldr	r3, [pc, #120]	; (800c93c <xPortStartScheduler+0x12c>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	021b      	lsls	r3, r3, #8
 800c8c8:	4a1c      	ldr	r2, [pc, #112]	; (800c93c <xPortStartScheduler+0x12c>)
 800c8ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c8cc:	4b1b      	ldr	r3, [pc, #108]	; (800c93c <xPortStartScheduler+0x12c>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c8d4:	4a19      	ldr	r2, [pc, #100]	; (800c93c <xPortStartScheduler+0x12c>)
 800c8d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	b2da      	uxtb	r2, r3
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c8e0:	4b17      	ldr	r3, [pc, #92]	; (800c940 <xPortStartScheduler+0x130>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a16      	ldr	r2, [pc, #88]	; (800c940 <xPortStartScheduler+0x130>)
 800c8e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c8ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c8ec:	4b14      	ldr	r3, [pc, #80]	; (800c940 <xPortStartScheduler+0x130>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a13      	ldr	r2, [pc, #76]	; (800c940 <xPortStartScheduler+0x130>)
 800c8f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c8f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c8f8:	f000 f8d6 	bl	800caa8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c8fc:	4b11      	ldr	r3, [pc, #68]	; (800c944 <xPortStartScheduler+0x134>)
 800c8fe:	2200      	movs	r2, #0
 800c900:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c902:	f000 f8f5 	bl	800caf0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c906:	4b10      	ldr	r3, [pc, #64]	; (800c948 <xPortStartScheduler+0x138>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a0f      	ldr	r2, [pc, #60]	; (800c948 <xPortStartScheduler+0x138>)
 800c90c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c910:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c912:	f7ff ff69 	bl	800c7e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c916:	f7fe ff5f 	bl	800b7d8 <vTaskSwitchContext>
	prvTaskExitError();
 800c91a:	f7ff ff21 	bl	800c760 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c91e:	2300      	movs	r3, #0
}
 800c920:	4618      	mov	r0, r3
 800c922:	3718      	adds	r7, #24
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	e000ed00 	.word	0xe000ed00
 800c92c:	410fc271 	.word	0x410fc271
 800c930:	410fc270 	.word	0x410fc270
 800c934:	e000e400 	.word	0xe000e400
 800c938:	20000f84 	.word	0x20000f84
 800c93c:	20000f88 	.word	0x20000f88
 800c940:	e000ed20 	.word	0xe000ed20
 800c944:	20000184 	.word	0x20000184
 800c948:	e000ef34 	.word	0xe000ef34

0800c94c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c956:	f383 8811 	msr	BASEPRI, r3
 800c95a:	f3bf 8f6f 	isb	sy
 800c95e:	f3bf 8f4f 	dsb	sy
 800c962:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c964:	4b0e      	ldr	r3, [pc, #56]	; (800c9a0 <vPortEnterCritical+0x54>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	3301      	adds	r3, #1
 800c96a:	4a0d      	ldr	r2, [pc, #52]	; (800c9a0 <vPortEnterCritical+0x54>)
 800c96c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c96e:	4b0c      	ldr	r3, [pc, #48]	; (800c9a0 <vPortEnterCritical+0x54>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b01      	cmp	r3, #1
 800c974:	d10e      	bne.n	800c994 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c976:	4b0b      	ldr	r3, [pc, #44]	; (800c9a4 <vPortEnterCritical+0x58>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d009      	beq.n	800c994 <vPortEnterCritical+0x48>
 800c980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c984:	f383 8811 	msr	BASEPRI, r3
 800c988:	f3bf 8f6f 	isb	sy
 800c98c:	f3bf 8f4f 	dsb	sy
 800c990:	603b      	str	r3, [r7, #0]
 800c992:	e7fe      	b.n	800c992 <vPortEnterCritical+0x46>
	}
}
 800c994:	bf00      	nop
 800c996:	370c      	adds	r7, #12
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr
 800c9a0:	20000184 	.word	0x20000184
 800c9a4:	e000ed04 	.word	0xe000ed04

0800c9a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c9ae:	4b11      	ldr	r3, [pc, #68]	; (800c9f4 <vPortExitCritical+0x4c>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d109      	bne.n	800c9ca <vPortExitCritical+0x22>
 800c9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ba:	f383 8811 	msr	BASEPRI, r3
 800c9be:	f3bf 8f6f 	isb	sy
 800c9c2:	f3bf 8f4f 	dsb	sy
 800c9c6:	607b      	str	r3, [r7, #4]
 800c9c8:	e7fe      	b.n	800c9c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c9ca:	4b0a      	ldr	r3, [pc, #40]	; (800c9f4 <vPortExitCritical+0x4c>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	3b01      	subs	r3, #1
 800c9d0:	4a08      	ldr	r2, [pc, #32]	; (800c9f4 <vPortExitCritical+0x4c>)
 800c9d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c9d4:	4b07      	ldr	r3, [pc, #28]	; (800c9f4 <vPortExitCritical+0x4c>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d104      	bne.n	800c9e6 <vPortExitCritical+0x3e>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c9e6:	bf00      	nop
 800c9e8:	370c      	adds	r7, #12
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	20000184 	.word	0x20000184
	...

0800ca00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca00:	f3ef 8009 	mrs	r0, PSP
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	4b15      	ldr	r3, [pc, #84]	; (800ca60 <pxCurrentTCBConst>)
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	f01e 0f10 	tst.w	lr, #16
 800ca10:	bf08      	it	eq
 800ca12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1a:	6010      	str	r0, [r2, #0]
 800ca1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca24:	f380 8811 	msr	BASEPRI, r0
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f7fe fed2 	bl	800b7d8 <vTaskSwitchContext>
 800ca34:	f04f 0000 	mov.w	r0, #0
 800ca38:	f380 8811 	msr	BASEPRI, r0
 800ca3c:	bc09      	pop	{r0, r3}
 800ca3e:	6819      	ldr	r1, [r3, #0]
 800ca40:	6808      	ldr	r0, [r1, #0]
 800ca42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca46:	f01e 0f10 	tst.w	lr, #16
 800ca4a:	bf08      	it	eq
 800ca4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca50:	f380 8809 	msr	PSP, r0
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	f3af 8000 	nop.w

0800ca60 <pxCurrentTCBConst>:
 800ca60:	20000958 	.word	0x20000958
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca64:	bf00      	nop
 800ca66:	bf00      	nop

0800ca68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca72:	f383 8811 	msr	BASEPRI, r3
 800ca76:	f3bf 8f6f 	isb	sy
 800ca7a:	f3bf 8f4f 	dsb	sy
 800ca7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca80:	f7fe fdf2 	bl	800b668 <xTaskIncrementTick>
 800ca84:	4603      	mov	r3, r0
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d003      	beq.n	800ca92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca8a:	4b06      	ldr	r3, [pc, #24]	; (800caa4 <SysTick_Handler+0x3c>)
 800ca8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca90:	601a      	str	r2, [r3, #0]
 800ca92:	2300      	movs	r3, #0
 800ca94:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca9c:	bf00      	nop
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	e000ed04 	.word	0xe000ed04

0800caa8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800caa8:	b480      	push	{r7}
 800caaa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800caac:	4b0b      	ldr	r3, [pc, #44]	; (800cadc <vPortSetupTimerInterrupt+0x34>)
 800caae:	2200      	movs	r2, #0
 800cab0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cab2:	4b0b      	ldr	r3, [pc, #44]	; (800cae0 <vPortSetupTimerInterrupt+0x38>)
 800cab4:	2200      	movs	r2, #0
 800cab6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cab8:	4b0a      	ldr	r3, [pc, #40]	; (800cae4 <vPortSetupTimerInterrupt+0x3c>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a0a      	ldr	r2, [pc, #40]	; (800cae8 <vPortSetupTimerInterrupt+0x40>)
 800cabe:	fba2 2303 	umull	r2, r3, r2, r3
 800cac2:	099b      	lsrs	r3, r3, #6
 800cac4:	4a09      	ldr	r2, [pc, #36]	; (800caec <vPortSetupTimerInterrupt+0x44>)
 800cac6:	3b01      	subs	r3, #1
 800cac8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800caca:	4b04      	ldr	r3, [pc, #16]	; (800cadc <vPortSetupTimerInterrupt+0x34>)
 800cacc:	2207      	movs	r2, #7
 800cace:	601a      	str	r2, [r3, #0]
}
 800cad0:	bf00      	nop
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	e000e010 	.word	0xe000e010
 800cae0:	e000e018 	.word	0xe000e018
 800cae4:	20000040 	.word	0x20000040
 800cae8:	10624dd3 	.word	0x10624dd3
 800caec:	e000e014 	.word	0xe000e014

0800caf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800caf0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb00 <vPortEnableVFP+0x10>
 800caf4:	6801      	ldr	r1, [r0, #0]
 800caf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cafa:	6001      	str	r1, [r0, #0]
 800cafc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cafe:	bf00      	nop
 800cb00:	e000ed88 	.word	0xe000ed88

0800cb04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb04:	b480      	push	{r7}
 800cb06:	b085      	sub	sp, #20
 800cb08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb0a:	f3ef 8305 	mrs	r3, IPSR
 800cb0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2b0f      	cmp	r3, #15
 800cb14:	d913      	bls.n	800cb3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb16:	4a16      	ldr	r2, [pc, #88]	; (800cb70 <vPortValidateInterruptPriority+0x6c>)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb20:	4b14      	ldr	r3, [pc, #80]	; (800cb74 <vPortValidateInterruptPriority+0x70>)
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	7afa      	ldrb	r2, [r7, #11]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d209      	bcs.n	800cb3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800cb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2e:	f383 8811 	msr	BASEPRI, r3
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	f3bf 8f4f 	dsb	sy
 800cb3a:	607b      	str	r3, [r7, #4]
 800cb3c:	e7fe      	b.n	800cb3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb3e:	4b0e      	ldr	r3, [pc, #56]	; (800cb78 <vPortValidateInterruptPriority+0x74>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb46:	4b0d      	ldr	r3, [pc, #52]	; (800cb7c <vPortValidateInterruptPriority+0x78>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d909      	bls.n	800cb62 <vPortValidateInterruptPriority+0x5e>
 800cb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb52:	f383 8811 	msr	BASEPRI, r3
 800cb56:	f3bf 8f6f 	isb	sy
 800cb5a:	f3bf 8f4f 	dsb	sy
 800cb5e:	603b      	str	r3, [r7, #0]
 800cb60:	e7fe      	b.n	800cb60 <vPortValidateInterruptPriority+0x5c>
	}
 800cb62:	bf00      	nop
 800cb64:	3714      	adds	r7, #20
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	e000e3f0 	.word	0xe000e3f0
 800cb74:	20000f84 	.word	0x20000f84
 800cb78:	e000ed0c 	.word	0xe000ed0c
 800cb7c:	20000f88 	.word	0x20000f88

0800cb80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b08a      	sub	sp, #40	; 0x28
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb8c:	f7fe fca0 	bl	800b4d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb90:	4b57      	ldr	r3, [pc, #348]	; (800ccf0 <pvPortMalloc+0x170>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d101      	bne.n	800cb9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb98:	f000 f90c 	bl	800cdb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb9c:	4b55      	ldr	r3, [pc, #340]	; (800ccf4 <pvPortMalloc+0x174>)
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4013      	ands	r3, r2
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f040 808c 	bne.w	800ccc2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d01c      	beq.n	800cbea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800cbb0:	2208      	movs	r2, #8
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4413      	add	r3, r2
 800cbb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f003 0307 	and.w	r3, r3, #7
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d013      	beq.n	800cbea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f023 0307 	bic.w	r3, r3, #7
 800cbc8:	3308      	adds	r3, #8
 800cbca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f003 0307 	and.w	r3, r3, #7
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d009      	beq.n	800cbea <pvPortMalloc+0x6a>
 800cbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbda:	f383 8811 	msr	BASEPRI, r3
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	617b      	str	r3, [r7, #20]
 800cbe8:	e7fe      	b.n	800cbe8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d068      	beq.n	800ccc2 <pvPortMalloc+0x142>
 800cbf0:	4b41      	ldr	r3, [pc, #260]	; (800ccf8 <pvPortMalloc+0x178>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d863      	bhi.n	800ccc2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cbfa:	4b40      	ldr	r3, [pc, #256]	; (800ccfc <pvPortMalloc+0x17c>)
 800cbfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cbfe:	4b3f      	ldr	r3, [pc, #252]	; (800ccfc <pvPortMalloc+0x17c>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc04:	e004      	b.n	800cc10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800cc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d903      	bls.n	800cc22 <pvPortMalloc+0xa2>
 800cc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d1f1      	bne.n	800cc06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc22:	4b33      	ldr	r3, [pc, #204]	; (800ccf0 <pvPortMalloc+0x170>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d04a      	beq.n	800ccc2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc2c:	6a3b      	ldr	r3, [r7, #32]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2208      	movs	r2, #8
 800cc32:	4413      	add	r3, r2
 800cc34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	6a3b      	ldr	r3, [r7, #32]
 800cc3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc40:	685a      	ldr	r2, [r3, #4]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	1ad2      	subs	r2, r2, r3
 800cc46:	2308      	movs	r3, #8
 800cc48:	005b      	lsls	r3, r3, #1
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d91e      	bls.n	800cc8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	4413      	add	r3, r2
 800cc54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	f003 0307 	and.w	r3, r3, #7
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d009      	beq.n	800cc74 <pvPortMalloc+0xf4>
 800cc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc64:	f383 8811 	msr	BASEPRI, r3
 800cc68:	f3bf 8f6f 	isb	sy
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	613b      	str	r3, [r7, #16]
 800cc72:	e7fe      	b.n	800cc72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc76:	685a      	ldr	r2, [r3, #4]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	1ad2      	subs	r2, r2, r3
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc86:	69b8      	ldr	r0, [r7, #24]
 800cc88:	f000 f8f6 	bl	800ce78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc8c:	4b1a      	ldr	r3, [pc, #104]	; (800ccf8 <pvPortMalloc+0x178>)
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	1ad3      	subs	r3, r2, r3
 800cc96:	4a18      	ldr	r2, [pc, #96]	; (800ccf8 <pvPortMalloc+0x178>)
 800cc98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc9a:	4b17      	ldr	r3, [pc, #92]	; (800ccf8 <pvPortMalloc+0x178>)
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	4b18      	ldr	r3, [pc, #96]	; (800cd00 <pvPortMalloc+0x180>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d203      	bcs.n	800ccae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cca6:	4b14      	ldr	r3, [pc, #80]	; (800ccf8 <pvPortMalloc+0x178>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a15      	ldr	r2, [pc, #84]	; (800cd00 <pvPortMalloc+0x180>)
 800ccac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ccae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb0:	685a      	ldr	r2, [r3, #4]
 800ccb2:	4b10      	ldr	r3, [pc, #64]	; (800ccf4 <pvPortMalloc+0x174>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	431a      	orrs	r2, r3
 800ccb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ccc2:	f7fe fc13 	bl	800b4ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	f003 0307 	and.w	r3, r3, #7
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d009      	beq.n	800cce4 <pvPortMalloc+0x164>
 800ccd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd4:	f383 8811 	msr	BASEPRI, r3
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	f3bf 8f4f 	dsb	sy
 800cce0:	60fb      	str	r3, [r7, #12]
 800cce2:	e7fe      	b.n	800cce2 <pvPortMalloc+0x162>
	return pvReturn;
 800cce4:	69fb      	ldr	r3, [r7, #28]
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3728      	adds	r7, #40	; 0x28
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	20001b4c 	.word	0x20001b4c
 800ccf4:	20001b58 	.word	0x20001b58
 800ccf8:	20001b50 	.word	0x20001b50
 800ccfc:	20001b44 	.word	0x20001b44
 800cd00:	20001b54 	.word	0x20001b54

0800cd04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b086      	sub	sp, #24
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d046      	beq.n	800cda4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd16:	2308      	movs	r3, #8
 800cd18:	425b      	negs	r3, r3
 800cd1a:	697a      	ldr	r2, [r7, #20]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	685a      	ldr	r2, [r3, #4]
 800cd28:	4b20      	ldr	r3, [pc, #128]	; (800cdac <vPortFree+0xa8>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4013      	ands	r3, r2
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d109      	bne.n	800cd46 <vPortFree+0x42>
 800cd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd36:	f383 8811 	msr	BASEPRI, r3
 800cd3a:	f3bf 8f6f 	isb	sy
 800cd3e:	f3bf 8f4f 	dsb	sy
 800cd42:	60fb      	str	r3, [r7, #12]
 800cd44:	e7fe      	b.n	800cd44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d009      	beq.n	800cd62 <vPortFree+0x5e>
 800cd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd52:	f383 8811 	msr	BASEPRI, r3
 800cd56:	f3bf 8f6f 	isb	sy
 800cd5a:	f3bf 8f4f 	dsb	sy
 800cd5e:	60bb      	str	r3, [r7, #8]
 800cd60:	e7fe      	b.n	800cd60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	685a      	ldr	r2, [r3, #4]
 800cd66:	4b11      	ldr	r3, [pc, #68]	; (800cdac <vPortFree+0xa8>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4013      	ands	r3, r2
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d019      	beq.n	800cda4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d115      	bne.n	800cda4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	685a      	ldr	r2, [r3, #4]
 800cd7c:	4b0b      	ldr	r3, [pc, #44]	; (800cdac <vPortFree+0xa8>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	43db      	mvns	r3, r3
 800cd82:	401a      	ands	r2, r3
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd88:	f7fe fba2 	bl	800b4d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	685a      	ldr	r2, [r3, #4]
 800cd90:	4b07      	ldr	r3, [pc, #28]	; (800cdb0 <vPortFree+0xac>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4413      	add	r3, r2
 800cd96:	4a06      	ldr	r2, [pc, #24]	; (800cdb0 <vPortFree+0xac>)
 800cd98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd9a:	6938      	ldr	r0, [r7, #16]
 800cd9c:	f000 f86c 	bl	800ce78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cda0:	f7fe fba4 	bl	800b4ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cda4:	bf00      	nop
 800cda6:	3718      	adds	r7, #24
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	20001b58 	.word	0x20001b58
 800cdb0:	20001b50 	.word	0x20001b50

0800cdb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b085      	sub	sp, #20
 800cdb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cdba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800cdbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cdc0:	4b27      	ldr	r3, [pc, #156]	; (800ce60 <prvHeapInit+0xac>)
 800cdc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f003 0307 	and.w	r3, r3, #7
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00c      	beq.n	800cde8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	3307      	adds	r3, #7
 800cdd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f023 0307 	bic.w	r3, r3, #7
 800cdda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cddc:	68ba      	ldr	r2, [r7, #8]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	1ad3      	subs	r3, r2, r3
 800cde2:	4a1f      	ldr	r2, [pc, #124]	; (800ce60 <prvHeapInit+0xac>)
 800cde4:	4413      	add	r3, r2
 800cde6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cdec:	4a1d      	ldr	r2, [pc, #116]	; (800ce64 <prvHeapInit+0xb0>)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cdf2:	4b1c      	ldr	r3, [pc, #112]	; (800ce64 <prvHeapInit+0xb0>)
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	68ba      	ldr	r2, [r7, #8]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce00:	2208      	movs	r2, #8
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	1a9b      	subs	r3, r3, r2
 800ce06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f023 0307 	bic.w	r3, r3, #7
 800ce0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	4a15      	ldr	r2, [pc, #84]	; (800ce68 <prvHeapInit+0xb4>)
 800ce14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce16:	4b14      	ldr	r3, [pc, #80]	; (800ce68 <prvHeapInit+0xb4>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce1e:	4b12      	ldr	r3, [pc, #72]	; (800ce68 <prvHeapInit+0xb4>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2200      	movs	r2, #0
 800ce24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	1ad2      	subs	r2, r2, r3
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce34:	4b0c      	ldr	r3, [pc, #48]	; (800ce68 <prvHeapInit+0xb4>)
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	4a0a      	ldr	r2, [pc, #40]	; (800ce6c <prvHeapInit+0xb8>)
 800ce42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	4a09      	ldr	r2, [pc, #36]	; (800ce70 <prvHeapInit+0xbc>)
 800ce4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce4c:	4b09      	ldr	r3, [pc, #36]	; (800ce74 <prvHeapInit+0xc0>)
 800ce4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ce52:	601a      	str	r2, [r3, #0]
}
 800ce54:	bf00      	nop
 800ce56:	3714      	adds	r7, #20
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr
 800ce60:	20000f8c 	.word	0x20000f8c
 800ce64:	20001b44 	.word	0x20001b44
 800ce68:	20001b4c 	.word	0x20001b4c
 800ce6c:	20001b54 	.word	0x20001b54
 800ce70:	20001b50 	.word	0x20001b50
 800ce74:	20001b58 	.word	0x20001b58

0800ce78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce80:	4b28      	ldr	r3, [pc, #160]	; (800cf24 <prvInsertBlockIntoFreeList+0xac>)
 800ce82:	60fb      	str	r3, [r7, #12]
 800ce84:	e002      	b.n	800ce8c <prvInsertBlockIntoFreeList+0x14>
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	60fb      	str	r3, [r7, #12]
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d8f7      	bhi.n	800ce86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	68ba      	ldr	r2, [r7, #8]
 800cea0:	4413      	add	r3, r2
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d108      	bne.n	800ceba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	685a      	ldr	r2, [r3, #4]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	441a      	add	r2, r3
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	68ba      	ldr	r2, [r7, #8]
 800cec4:	441a      	add	r2, r3
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d118      	bne.n	800cf00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	4b15      	ldr	r3, [pc, #84]	; (800cf28 <prvInsertBlockIntoFreeList+0xb0>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d00d      	beq.n	800cef6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	685a      	ldr	r2, [r3, #4]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	441a      	add	r2, r3
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	601a      	str	r2, [r3, #0]
 800cef4:	e008      	b.n	800cf08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cef6:	4b0c      	ldr	r3, [pc, #48]	; (800cf28 <prvInsertBlockIntoFreeList+0xb0>)
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	601a      	str	r2, [r3, #0]
 800cefe:	e003      	b.n	800cf08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d002      	beq.n	800cf16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf16:	bf00      	nop
 800cf18:	3714      	adds	r7, #20
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr
 800cf22:	bf00      	nop
 800cf24:	20001b44 	.word	0x20001b44
 800cf28:	20001b4c 	.word	0x20001b4c

0800cf2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cf30:	2200      	movs	r2, #0
 800cf32:	4912      	ldr	r1, [pc, #72]	; (800cf7c <MX_USB_DEVICE_Init+0x50>)
 800cf34:	4812      	ldr	r0, [pc, #72]	; (800cf80 <MX_USB_DEVICE_Init+0x54>)
 800cf36:	f7fb faa3 	bl	8008480 <USBD_Init>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d001      	beq.n	800cf44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cf40:	f7f4 fc06 	bl	8001750 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cf44:	490f      	ldr	r1, [pc, #60]	; (800cf84 <MX_USB_DEVICE_Init+0x58>)
 800cf46:	480e      	ldr	r0, [pc, #56]	; (800cf80 <MX_USB_DEVICE_Init+0x54>)
 800cf48:	f7fb fac5 	bl	80084d6 <USBD_RegisterClass>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d001      	beq.n	800cf56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cf52:	f7f4 fbfd 	bl	8001750 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cf56:	490c      	ldr	r1, [pc, #48]	; (800cf88 <MX_USB_DEVICE_Init+0x5c>)
 800cf58:	4809      	ldr	r0, [pc, #36]	; (800cf80 <MX_USB_DEVICE_Init+0x54>)
 800cf5a:	f7fb f9f3 	bl	8008344 <USBD_CDC_RegisterInterface>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d001      	beq.n	800cf68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cf64:	f7f4 fbf4 	bl	8001750 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cf68:	4805      	ldr	r0, [pc, #20]	; (800cf80 <MX_USB_DEVICE_Init+0x54>)
 800cf6a:	f7fb face 	bl	800850a <USBD_Start>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d001      	beq.n	800cf78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cf74:	f7f4 fbec 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cf78:	bf00      	nop
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	20000198 	.word	0x20000198
 800cf80:	2000c204 	.word	0x2000c204
 800cf84:	20000080 	.word	0x20000080
 800cf88:	20000188 	.word	0x20000188

0800cf8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cf90:	2200      	movs	r2, #0
 800cf92:	4905      	ldr	r1, [pc, #20]	; (800cfa8 <CDC_Init_FS+0x1c>)
 800cf94:	4805      	ldr	r0, [pc, #20]	; (800cfac <CDC_Init_FS+0x20>)
 800cf96:	f7fb f9ec 	bl	8008372 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cf9a:	4905      	ldr	r1, [pc, #20]	; (800cfb0 <CDC_Init_FS+0x24>)
 800cf9c:	4803      	ldr	r0, [pc, #12]	; (800cfac <CDC_Init_FS+0x20>)
 800cf9e:	f7fb fa02 	bl	80083a6 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800cfa2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	2000c8b0 	.word	0x2000c8b0
 800cfac:	2000c204 	.word	0x2000c204
 800cfb0:	2000c4c8 	.word	0x2000c4c8

0800cfb4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800cfb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	4603      	mov	r3, r0
 800cfcc:	6039      	str	r1, [r7, #0]
 800cfce:	71fb      	strb	r3, [r7, #7]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch(cmd)
 800cfd4:	79fb      	ldrb	r3, [r7, #7]
 800cfd6:	2b23      	cmp	r3, #35	; 0x23
 800cfd8:	d84a      	bhi.n	800d070 <CDC_Control_FS+0xac>
 800cfda:	a201      	add	r2, pc, #4	; (adr r2, 800cfe0 <CDC_Control_FS+0x1c>)
 800cfdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe0:	0800d071 	.word	0x0800d071
 800cfe4:	0800d071 	.word	0x0800d071
 800cfe8:	0800d071 	.word	0x0800d071
 800cfec:	0800d071 	.word	0x0800d071
 800cff0:	0800d071 	.word	0x0800d071
 800cff4:	0800d071 	.word	0x0800d071
 800cff8:	0800d071 	.word	0x0800d071
 800cffc:	0800d071 	.word	0x0800d071
 800d000:	0800d071 	.word	0x0800d071
 800d004:	0800d071 	.word	0x0800d071
 800d008:	0800d071 	.word	0x0800d071
 800d00c:	0800d071 	.word	0x0800d071
 800d010:	0800d071 	.word	0x0800d071
 800d014:	0800d071 	.word	0x0800d071
 800d018:	0800d071 	.word	0x0800d071
 800d01c:	0800d071 	.word	0x0800d071
 800d020:	0800d071 	.word	0x0800d071
 800d024:	0800d071 	.word	0x0800d071
 800d028:	0800d071 	.word	0x0800d071
 800d02c:	0800d071 	.word	0x0800d071
 800d030:	0800d071 	.word	0x0800d071
 800d034:	0800d071 	.word	0x0800d071
 800d038:	0800d071 	.word	0x0800d071
 800d03c:	0800d071 	.word	0x0800d071
 800d040:	0800d071 	.word	0x0800d071
 800d044:	0800d071 	.word	0x0800d071
 800d048:	0800d071 	.word	0x0800d071
 800d04c:	0800d071 	.word	0x0800d071
 800d050:	0800d071 	.word	0x0800d071
 800d054:	0800d071 	.word	0x0800d071
 800d058:	0800d071 	.word	0x0800d071
 800d05c:	0800d071 	.word	0x0800d071
 800d060:	0800d071 	.word	0x0800d071
 800d064:	0800d071 	.word	0x0800d071
 800d068:	0800d071 	.word	0x0800d071
 800d06c:	0800d071 	.word	0x0800d071
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800d070:	bf00      	nop
	}

	return (USBD_OK);
 800d072:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d074:	4618      	mov	r0, r3
 800d076:	370c      	adds	r7, #12
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(counter == 0){
 800d08a:	4b13      	ldr	r3, [pc, #76]	; (800d0d8 <CDC_Receive_FS+0x58>)
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	2b00      	cmp	r3, #0
 800d092:	d106      	bne.n	800d0a2 <CDC_Receive_FS+0x22>

		//		if(osMutexAcquire(usb_data_mutex, 10) == osOK){
		memcpy(&usb_data_buffer[0], Buf, *Len);
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	461a      	mov	r2, r3
 800d09a:	6879      	ldr	r1, [r7, #4]
 800d09c:	480f      	ldr	r0, [pc, #60]	; (800d0dc <CDC_Receive_FS+0x5c>)
 800d09e:	f000 fd07 	bl	800dab0 <memcpy>

		/* Send Data to Queue */


	}
	++counter;
 800d0a2:	4b0d      	ldr	r3, [pc, #52]	; (800d0d8 <CDC_Receive_FS+0x58>)
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	b2da      	uxtb	r2, r3
 800d0ac:	4b0a      	ldr	r3, [pc, #40]	; (800d0d8 <CDC_Receive_FS+0x58>)
 800d0ae:	701a      	strb	r2, [r3, #0]
	if (counter == 4){
 800d0b0:	4b09      	ldr	r3, [pc, #36]	; (800d0d8 <CDC_Receive_FS+0x58>)
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	2b04      	cmp	r3, #4
 800d0b8:	d102      	bne.n	800d0c0 <CDC_Receive_FS+0x40>
		counter = 0;
 800d0ba:	4b07      	ldr	r3, [pc, #28]	; (800d0d8 <CDC_Receive_FS+0x58>)
 800d0bc:	2200      	movs	r2, #0
 800d0be:	701a      	strb	r2, [r3, #0]
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d0c0:	6879      	ldr	r1, [r7, #4]
 800d0c2:	4807      	ldr	r0, [pc, #28]	; (800d0e0 <CDC_Receive_FS+0x60>)
 800d0c4:	f7fb f96f 	bl	80083a6 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d0c8:	4805      	ldr	r0, [pc, #20]	; (800d0e0 <CDC_Receive_FS+0x60>)
 800d0ca:	f7fb f9af 	bl	800842c <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 800d0ce:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	20001b5c 	.word	0x20001b5c
 800d0dc:	20000000 	.word	0x20000000
 800d0e0:	2000c204 	.word	0x2000c204

0800d0e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d0f4:	4b0d      	ldr	r3, [pc, #52]	; (800d12c <CDC_Transmit_FS+0x48>)
 800d0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0fa:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 800d106:	2301      	movs	r3, #1
 800d108:	e00b      	b.n	800d122 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d10a:	887b      	ldrh	r3, [r7, #2]
 800d10c:	461a      	mov	r2, r3
 800d10e:	6879      	ldr	r1, [r7, #4]
 800d110:	4806      	ldr	r0, [pc, #24]	; (800d12c <CDC_Transmit_FS+0x48>)
 800d112:	f7fb f92e 	bl	8008372 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d116:	4805      	ldr	r0, [pc, #20]	; (800d12c <CDC_Transmit_FS+0x48>)
 800d118:	f7fb f959 	bl	80083ce <USBD_CDC_TransmitPacket>
 800d11c:	4603      	mov	r3, r0
 800d11e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d120:	7bfb      	ldrb	r3, [r7, #15]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	2000c204 	.word	0x2000c204

0800d130 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d130:	b480      	push	{r7}
 800d132:	b083      	sub	sp, #12
 800d134:	af00      	add	r7, sp, #0
 800d136:	4603      	mov	r3, r0
 800d138:	6039      	str	r1, [r7, #0]
 800d13a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	2212      	movs	r2, #18
 800d140:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d142:	4b03      	ldr	r3, [pc, #12]	; (800d150 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d144:	4618      	mov	r0, r3
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr
 800d150:	200001b8 	.word	0x200001b8

0800d154 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
 800d15a:	4603      	mov	r3, r0
 800d15c:	6039      	str	r1, [r7, #0]
 800d15e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	2204      	movs	r2, #4
 800d164:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d166:	4b03      	ldr	r3, [pc, #12]	; (800d174 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d168:	4618      	mov	r0, r3
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr
 800d174:	200001d8 	.word	0x200001d8

0800d178 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	4603      	mov	r3, r0
 800d180:	6039      	str	r1, [r7, #0]
 800d182:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d184:	79fb      	ldrb	r3, [r7, #7]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d105      	bne.n	800d196 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d18a:	683a      	ldr	r2, [r7, #0]
 800d18c:	4907      	ldr	r1, [pc, #28]	; (800d1ac <USBD_FS_ProductStrDescriptor+0x34>)
 800d18e:	4808      	ldr	r0, [pc, #32]	; (800d1b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d190:	f7fc f956 	bl	8009440 <USBD_GetString>
 800d194:	e004      	b.n	800d1a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d196:	683a      	ldr	r2, [r7, #0]
 800d198:	4904      	ldr	r1, [pc, #16]	; (800d1ac <USBD_FS_ProductStrDescriptor+0x34>)
 800d19a:	4805      	ldr	r0, [pc, #20]	; (800d1b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d19c:	f7fc f950 	bl	8009440 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1a0:	4b02      	ldr	r3, [pc, #8]	; (800d1ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3708      	adds	r7, #8
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	2000cc98 	.word	0x2000cc98
 800d1b0:	0800e45c 	.word	0x0800e45c

0800d1b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	6039      	str	r1, [r7, #0]
 800d1be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d1c0:	683a      	ldr	r2, [r7, #0]
 800d1c2:	4904      	ldr	r1, [pc, #16]	; (800d1d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d1c4:	4804      	ldr	r0, [pc, #16]	; (800d1d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d1c6:	f7fc f93b 	bl	8009440 <USBD_GetString>
  return USBD_StrDesc;
 800d1ca:	4b02      	ldr	r3, [pc, #8]	; (800d1d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}
 800d1d4:	2000cc98 	.word	0x2000cc98
 800d1d8:	0800e474 	.word	0x0800e474

0800d1dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	6039      	str	r1, [r7, #0]
 800d1e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	221a      	movs	r2, #26
 800d1ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d1ee:	f000 f855 	bl	800d29c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d1f2:	4b02      	ldr	r3, [pc, #8]	; (800d1fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3708      	adds	r7, #8
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	200001dc 	.word	0x200001dc

0800d200 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	4603      	mov	r3, r0
 800d208:	6039      	str	r1, [r7, #0]
 800d20a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d20c:	79fb      	ldrb	r3, [r7, #7]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d105      	bne.n	800d21e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d212:	683a      	ldr	r2, [r7, #0]
 800d214:	4907      	ldr	r1, [pc, #28]	; (800d234 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d216:	4808      	ldr	r0, [pc, #32]	; (800d238 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d218:	f7fc f912 	bl	8009440 <USBD_GetString>
 800d21c:	e004      	b.n	800d228 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d21e:	683a      	ldr	r2, [r7, #0]
 800d220:	4904      	ldr	r1, [pc, #16]	; (800d234 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d222:	4805      	ldr	r0, [pc, #20]	; (800d238 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d224:	f7fc f90c 	bl	8009440 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d228:	4b02      	ldr	r3, [pc, #8]	; (800d234 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3708      	adds	r7, #8
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	2000cc98 	.word	0x2000cc98
 800d238:	0800e488 	.word	0x0800e488

0800d23c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	4603      	mov	r3, r0
 800d244:	6039      	str	r1, [r7, #0]
 800d246:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d248:	79fb      	ldrb	r3, [r7, #7]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d105      	bne.n	800d25a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d24e:	683a      	ldr	r2, [r7, #0]
 800d250:	4907      	ldr	r1, [pc, #28]	; (800d270 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d252:	4808      	ldr	r0, [pc, #32]	; (800d274 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d254:	f7fc f8f4 	bl	8009440 <USBD_GetString>
 800d258:	e004      	b.n	800d264 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d25a:	683a      	ldr	r2, [r7, #0]
 800d25c:	4904      	ldr	r1, [pc, #16]	; (800d270 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d25e:	4805      	ldr	r0, [pc, #20]	; (800d274 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d260:	f7fc f8ee 	bl	8009440 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d264:	4b02      	ldr	r3, [pc, #8]	; (800d270 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d266:	4618      	mov	r0, r3
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	2000cc98 	.word	0x2000cc98
 800d274:	0800e494 	.word	0x0800e494

0800d278 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	4603      	mov	r3, r0
 800d280:	6039      	str	r1, [r7, #0]
 800d282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	220c      	movs	r2, #12
 800d288:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d28a:	4b03      	ldr	r3, [pc, #12]	; (800d298 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	370c      	adds	r7, #12
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr
 800d298:	200001cc 	.word	0x200001cc

0800d29c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d2a2:	4b0f      	ldr	r3, [pc, #60]	; (800d2e0 <Get_SerialNum+0x44>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d2a8:	4b0e      	ldr	r3, [pc, #56]	; (800d2e4 <Get_SerialNum+0x48>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d2ae:	4b0e      	ldr	r3, [pc, #56]	; (800d2e8 <Get_SerialNum+0x4c>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d2b4:	68fa      	ldr	r2, [r7, #12]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d009      	beq.n	800d2d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d2c2:	2208      	movs	r2, #8
 800d2c4:	4909      	ldr	r1, [pc, #36]	; (800d2ec <Get_SerialNum+0x50>)
 800d2c6:	68f8      	ldr	r0, [r7, #12]
 800d2c8:	f000 f814 	bl	800d2f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d2cc:	2204      	movs	r2, #4
 800d2ce:	4908      	ldr	r1, [pc, #32]	; (800d2f0 <Get_SerialNum+0x54>)
 800d2d0:	68b8      	ldr	r0, [r7, #8]
 800d2d2:	f000 f80f 	bl	800d2f4 <IntToUnicode>
  }
}
 800d2d6:	bf00      	nop
 800d2d8:	3710      	adds	r7, #16
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	1fff7590 	.word	0x1fff7590
 800d2e4:	1fff7594 	.word	0x1fff7594
 800d2e8:	1fff7598 	.word	0x1fff7598
 800d2ec:	200001de 	.word	0x200001de
 800d2f0:	200001ee 	.word	0x200001ee

0800d2f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b087      	sub	sp, #28
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	60b9      	str	r1, [r7, #8]
 800d2fe:	4613      	mov	r3, r2
 800d300:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d302:	2300      	movs	r3, #0
 800d304:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d306:	2300      	movs	r3, #0
 800d308:	75fb      	strb	r3, [r7, #23]
 800d30a:	e027      	b.n	800d35c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	0f1b      	lsrs	r3, r3, #28
 800d310:	2b09      	cmp	r3, #9
 800d312:	d80b      	bhi.n	800d32c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	0f1b      	lsrs	r3, r3, #28
 800d318:	b2da      	uxtb	r2, r3
 800d31a:	7dfb      	ldrb	r3, [r7, #23]
 800d31c:	005b      	lsls	r3, r3, #1
 800d31e:	4619      	mov	r1, r3
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	440b      	add	r3, r1
 800d324:	3230      	adds	r2, #48	; 0x30
 800d326:	b2d2      	uxtb	r2, r2
 800d328:	701a      	strb	r2, [r3, #0]
 800d32a:	e00a      	b.n	800d342 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	0f1b      	lsrs	r3, r3, #28
 800d330:	b2da      	uxtb	r2, r3
 800d332:	7dfb      	ldrb	r3, [r7, #23]
 800d334:	005b      	lsls	r3, r3, #1
 800d336:	4619      	mov	r1, r3
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	440b      	add	r3, r1
 800d33c:	3237      	adds	r2, #55	; 0x37
 800d33e:	b2d2      	uxtb	r2, r2
 800d340:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	011b      	lsls	r3, r3, #4
 800d346:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d348:	7dfb      	ldrb	r3, [r7, #23]
 800d34a:	005b      	lsls	r3, r3, #1
 800d34c:	3301      	adds	r3, #1
 800d34e:	68ba      	ldr	r2, [r7, #8]
 800d350:	4413      	add	r3, r2
 800d352:	2200      	movs	r2, #0
 800d354:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d356:	7dfb      	ldrb	r3, [r7, #23]
 800d358:	3301      	adds	r3, #1
 800d35a:	75fb      	strb	r3, [r7, #23]
 800d35c:	7dfa      	ldrb	r2, [r7, #23]
 800d35e:	79fb      	ldrb	r3, [r7, #7]
 800d360:	429a      	cmp	r2, r3
 800d362:	d3d3      	bcc.n	800d30c <IntToUnicode+0x18>
  }
}
 800d364:	bf00      	nop
 800d366:	371c      	adds	r7, #28
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a0d      	ldr	r2, [pc, #52]	; (800d3b4 <HAL_PCD_MspInit+0x44>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d113      	bne.n	800d3aa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d382:	4b0d      	ldr	r3, [pc, #52]	; (800d3b8 <HAL_PCD_MspInit+0x48>)
 800d384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d386:	4a0c      	ldr	r2, [pc, #48]	; (800d3b8 <HAL_PCD_MspInit+0x48>)
 800d388:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d38c:	6593      	str	r3, [r2, #88]	; 0x58
 800d38e:	4b0a      	ldr	r3, [pc, #40]	; (800d3b8 <HAL_PCD_MspInit+0x48>)
 800d390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d392:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d396:	60fb      	str	r3, [r7, #12]
 800d398:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 5, 0);
 800d39a:	2200      	movs	r2, #0
 800d39c:	2105      	movs	r1, #5
 800d39e:	2043      	movs	r0, #67	; 0x43
 800d3a0:	f7f5 f8be 	bl	8002520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d3a4:	2043      	movs	r0, #67	; 0x43
 800d3a6:	f7f5 f8d7 	bl	8002558 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d3aa:	bf00      	nop
 800d3ac:	3710      	adds	r7, #16
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	40006800 	.word	0x40006800
 800d3b8:	40021000 	.word	0x40021000

0800d3bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	4610      	mov	r0, r2
 800d3d4:	f7fb f8e2 	bl	800859c <USBD_LL_SetupStage>
}
 800d3d8:	bf00      	nop
 800d3da:	3708      	adds	r7, #8
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800d3f2:	78fb      	ldrb	r3, [r7, #3]
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	015b      	lsls	r3, r3, #5
 800d3f8:	4413      	add	r3, r2
 800d3fa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	78fb      	ldrb	r3, [r7, #3]
 800d402:	4619      	mov	r1, r3
 800d404:	f7fb f915 	bl	8008632 <USBD_LL_DataOutStage>
}
 800d408:	bf00      	nop
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	460b      	mov	r3, r1
 800d41a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800d422:	78fb      	ldrb	r3, [r7, #3]
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	015b      	lsls	r3, r3, #5
 800d428:	4413      	add	r3, r2
 800d42a:	333c      	adds	r3, #60	; 0x3c
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	78fb      	ldrb	r3, [r7, #3]
 800d430:	4619      	mov	r1, r3
 800d432:	f7fb f96f 	bl	8008714 <USBD_LL_DataInStage>
}
 800d436:	bf00      	nop
 800d438:	3708      	adds	r7, #8
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}

0800d43e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d43e:	b580      	push	{r7, lr}
 800d440:	b082      	sub	sp, #8
 800d442:	af00      	add	r7, sp, #0
 800d444:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7fb fa82 	bl	8008956 <USBD_LL_SOF>
}
 800d452:	bf00      	nop
 800d454:	3708      	adds	r7, #8
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}

0800d45a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d45a:	b580      	push	{r7, lr}
 800d45c:	b084      	sub	sp, #16
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d462:	2301      	movs	r3, #1
 800d464:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	2b02      	cmp	r3, #2
 800d46c:	d001      	beq.n	800d472 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d46e:	f7f4 f96f 	bl	8001750 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d478:	7bfa      	ldrb	r2, [r7, #15]
 800d47a:	4611      	mov	r1, r2
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7fb fa2f 	bl	80088e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d488:	4618      	mov	r0, r3
 800d48a:	f7fb f9e8 	bl	800885e <USBD_LL_Reset>
}
 800d48e:	bf00      	nop
 800d490:	3710      	adds	r7, #16
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
	...

0800d498 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7fb fa2a 	bl	8008900 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	699b      	ldr	r3, [r3, #24]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d005      	beq.n	800d4c0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d4b4:	4b04      	ldr	r3, [pc, #16]	; (800d4c8 <HAL_PCD_SuspendCallback+0x30>)
 800d4b6:	691b      	ldr	r3, [r3, #16]
 800d4b8:	4a03      	ldr	r2, [pc, #12]	; (800d4c8 <HAL_PCD_SuspendCallback+0x30>)
 800d4ba:	f043 0306 	orr.w	r3, r3, #6
 800d4be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d4c0:	bf00      	nop
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	e000ed00 	.word	0xe000ed00

0800d4cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	699b      	ldr	r3, [r3, #24]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d007      	beq.n	800d4ec <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d4dc:	4b08      	ldr	r3, [pc, #32]	; (800d500 <HAL_PCD_ResumeCallback+0x34>)
 800d4de:	691b      	ldr	r3, [r3, #16]
 800d4e0:	4a07      	ldr	r2, [pc, #28]	; (800d500 <HAL_PCD_ResumeCallback+0x34>)
 800d4e2:	f023 0306 	bic.w	r3, r3, #6
 800d4e6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d4e8:	f000 fab2 	bl	800da50 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fb fa19 	bl	800892a <USBD_LL_Resume>
}
 800d4f8:	bf00      	nop
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	e000ed00 	.word	0xe000ed00

0800d504 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d50c:	f7f7 f804 	bl	8004518 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d510:	4a2b      	ldr	r2, [pc, #172]	; (800d5c0 <USBD_LL_Init+0xbc>)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4a29      	ldr	r2, [pc, #164]	; (800d5c0 <USBD_LL_Init+0xbc>)
 800d51c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d520:	4b27      	ldr	r3, [pc, #156]	; (800d5c0 <USBD_LL_Init+0xbc>)
 800d522:	4a28      	ldr	r2, [pc, #160]	; (800d5c4 <USBD_LL_Init+0xc0>)
 800d524:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d526:	4b26      	ldr	r3, [pc, #152]	; (800d5c0 <USBD_LL_Init+0xbc>)
 800d528:	2208      	movs	r2, #8
 800d52a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d52c:	4b24      	ldr	r3, [pc, #144]	; (800d5c0 <USBD_LL_Init+0xbc>)
 800d52e:	2202      	movs	r2, #2
 800d530:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d532:	4b23      	ldr	r3, [pc, #140]	; (800d5c0 <USBD_LL_Init+0xbc>)
 800d534:	2202      	movs	r2, #2
 800d536:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d538:	4b21      	ldr	r3, [pc, #132]	; (800d5c0 <USBD_LL_Init+0xbc>)
 800d53a:	2200      	movs	r2, #0
 800d53c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d53e:	4b20      	ldr	r3, [pc, #128]	; (800d5c0 <USBD_LL_Init+0xbc>)
 800d540:	2200      	movs	r2, #0
 800d542:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d544:	4b1e      	ldr	r3, [pc, #120]	; (800d5c0 <USBD_LL_Init+0xbc>)
 800d546:	2200      	movs	r2, #0
 800d548:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d54a:	4b1d      	ldr	r3, [pc, #116]	; (800d5c0 <USBD_LL_Init+0xbc>)
 800d54c:	2200      	movs	r2, #0
 800d54e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d550:	481b      	ldr	r0, [pc, #108]	; (800d5c0 <USBD_LL_Init+0xbc>)
 800d552:	f7f6 f83a 	bl	80035ca <HAL_PCD_Init>
 800d556:	4603      	mov	r3, r0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d001      	beq.n	800d560 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d55c:	f7f4 f8f8 	bl	8001750 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d566:	2318      	movs	r3, #24
 800d568:	2200      	movs	r2, #0
 800d56a:	2100      	movs	r1, #0
 800d56c:	f7f6 ff08 	bl	8004380 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d576:	2358      	movs	r3, #88	; 0x58
 800d578:	2200      	movs	r2, #0
 800d57a:	2180      	movs	r1, #128	; 0x80
 800d57c:	f7f6 ff00 	bl	8004380 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d586:	23c0      	movs	r3, #192	; 0xc0
 800d588:	2200      	movs	r2, #0
 800d58a:	2181      	movs	r1, #129	; 0x81
 800d58c:	f7f6 fef8 	bl	8004380 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d596:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d59a:	2200      	movs	r2, #0
 800d59c:	2101      	movs	r1, #1
 800d59e:	f7f6 feef 	bl	8004380 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d5a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	2182      	movs	r1, #130	; 0x82
 800d5b0:	f7f6 fee6 	bl	8004380 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d5b4:	2300      	movs	r3, #0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	2000ce98 	.word	0x2000ce98
 800d5c4:	40006800 	.word	0x40006800

0800d5c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7f6 f8db 	bl	800379a <HAL_PCD_Start>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d5e8:	7bbb      	ldrb	r3, [r7, #14]
 800d5ea:	2b03      	cmp	r3, #3
 800d5ec:	d816      	bhi.n	800d61c <USBD_LL_Start+0x54>
 800d5ee:	a201      	add	r2, pc, #4	; (adr r2, 800d5f4 <USBD_LL_Start+0x2c>)
 800d5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f4:	0800d605 	.word	0x0800d605
 800d5f8:	0800d60b 	.word	0x0800d60b
 800d5fc:	0800d611 	.word	0x0800d611
 800d600:	0800d617 	.word	0x0800d617
    case HAL_OK :
      usb_status = USBD_OK;
 800d604:	2300      	movs	r3, #0
 800d606:	73fb      	strb	r3, [r7, #15]
    break;
 800d608:	e00b      	b.n	800d622 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d60a:	2302      	movs	r3, #2
 800d60c:	73fb      	strb	r3, [r7, #15]
    break;
 800d60e:	e008      	b.n	800d622 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d610:	2301      	movs	r3, #1
 800d612:	73fb      	strb	r3, [r7, #15]
    break;
 800d614:	e005      	b.n	800d622 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d616:	2302      	movs	r3, #2
 800d618:	73fb      	strb	r3, [r7, #15]
    break;
 800d61a:	e002      	b.n	800d622 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d61c:	2302      	movs	r3, #2
 800d61e:	73fb      	strb	r3, [r7, #15]
    break;
 800d620:	bf00      	nop
  }
  return usb_status;
 800d622:	7bfb      	ldrb	r3, [r7, #15]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3710      	adds	r7, #16
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	4608      	mov	r0, r1
 800d636:	4611      	mov	r1, r2
 800d638:	461a      	mov	r2, r3
 800d63a:	4603      	mov	r3, r0
 800d63c:	70fb      	strb	r3, [r7, #3]
 800d63e:	460b      	mov	r3, r1
 800d640:	70bb      	strb	r3, [r7, #2]
 800d642:	4613      	mov	r3, r2
 800d644:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d646:	2300      	movs	r3, #0
 800d648:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d64a:	2300      	movs	r3, #0
 800d64c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d654:	78bb      	ldrb	r3, [r7, #2]
 800d656:	883a      	ldrh	r2, [r7, #0]
 800d658:	78f9      	ldrb	r1, [r7, #3]
 800d65a:	f7f6 fa33 	bl	8003ac4 <HAL_PCD_EP_Open>
 800d65e:	4603      	mov	r3, r0
 800d660:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d662:	7bbb      	ldrb	r3, [r7, #14]
 800d664:	2b03      	cmp	r3, #3
 800d666:	d817      	bhi.n	800d698 <USBD_LL_OpenEP+0x6c>
 800d668:	a201      	add	r2, pc, #4	; (adr r2, 800d670 <USBD_LL_OpenEP+0x44>)
 800d66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d66e:	bf00      	nop
 800d670:	0800d681 	.word	0x0800d681
 800d674:	0800d687 	.word	0x0800d687
 800d678:	0800d68d 	.word	0x0800d68d
 800d67c:	0800d693 	.word	0x0800d693
    case HAL_OK :
      usb_status = USBD_OK;
 800d680:	2300      	movs	r3, #0
 800d682:	73fb      	strb	r3, [r7, #15]
    break;
 800d684:	e00b      	b.n	800d69e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d686:	2302      	movs	r3, #2
 800d688:	73fb      	strb	r3, [r7, #15]
    break;
 800d68a:	e008      	b.n	800d69e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d68c:	2301      	movs	r3, #1
 800d68e:	73fb      	strb	r3, [r7, #15]
    break;
 800d690:	e005      	b.n	800d69e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d692:	2302      	movs	r3, #2
 800d694:	73fb      	strb	r3, [r7, #15]
    break;
 800d696:	e002      	b.n	800d69e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d698:	2302      	movs	r3, #2
 800d69a:	73fb      	strb	r3, [r7, #15]
    break;
 800d69c:	bf00      	nop
  }
  return usb_status;
 800d69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d6c2:	78fa      	ldrb	r2, [r7, #3]
 800d6c4:	4611      	mov	r1, r2
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7f6 fa5c 	bl	8003b84 <HAL_PCD_EP_Close>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800d6d0:	7bbb      	ldrb	r3, [r7, #14]
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	d816      	bhi.n	800d704 <USBD_LL_CloseEP+0x5c>
 800d6d6:	a201      	add	r2, pc, #4	; (adr r2, 800d6dc <USBD_LL_CloseEP+0x34>)
 800d6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6dc:	0800d6ed 	.word	0x0800d6ed
 800d6e0:	0800d6f3 	.word	0x0800d6f3
 800d6e4:	0800d6f9 	.word	0x0800d6f9
 800d6e8:	0800d6ff 	.word	0x0800d6ff
    case HAL_OK :
      usb_status = USBD_OK;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d6f0:	e00b      	b.n	800d70a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6f2:	2302      	movs	r3, #2
 800d6f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d6f6:	e008      	b.n	800d70a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d6fc:	e005      	b.n	800d70a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6fe:	2302      	movs	r3, #2
 800d700:	73fb      	strb	r3, [r7, #15]
    break;
 800d702:	e002      	b.n	800d70a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d704:	2302      	movs	r3, #2
 800d706:	73fb      	strb	r3, [r7, #15]
    break;
 800d708:	bf00      	nop
  }
  return usb_status;  
 800d70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	460b      	mov	r3, r1
 800d71e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d720:	2300      	movs	r3, #0
 800d722:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d724:	2300      	movs	r3, #0
 800d726:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d72e:	78fa      	ldrb	r2, [r7, #3]
 800d730:	4611      	mov	r1, r2
 800d732:	4618      	mov	r0, r3
 800d734:	f7f6 faf0 	bl	8003d18 <HAL_PCD_EP_SetStall>
 800d738:	4603      	mov	r3, r0
 800d73a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d73c:	7bbb      	ldrb	r3, [r7, #14]
 800d73e:	2b03      	cmp	r3, #3
 800d740:	d816      	bhi.n	800d770 <USBD_LL_StallEP+0x5c>
 800d742:	a201      	add	r2, pc, #4	; (adr r2, 800d748 <USBD_LL_StallEP+0x34>)
 800d744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d748:	0800d759 	.word	0x0800d759
 800d74c:	0800d75f 	.word	0x0800d75f
 800d750:	0800d765 	.word	0x0800d765
 800d754:	0800d76b 	.word	0x0800d76b
    case HAL_OK :
      usb_status = USBD_OK;
 800d758:	2300      	movs	r3, #0
 800d75a:	73fb      	strb	r3, [r7, #15]
    break;
 800d75c:	e00b      	b.n	800d776 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d75e:	2302      	movs	r3, #2
 800d760:	73fb      	strb	r3, [r7, #15]
    break;
 800d762:	e008      	b.n	800d776 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d764:	2301      	movs	r3, #1
 800d766:	73fb      	strb	r3, [r7, #15]
    break;
 800d768:	e005      	b.n	800d776 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d76a:	2302      	movs	r3, #2
 800d76c:	73fb      	strb	r3, [r7, #15]
    break;
 800d76e:	e002      	b.n	800d776 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d770:	2302      	movs	r3, #2
 800d772:	73fb      	strb	r3, [r7, #15]
    break;
 800d774:	bf00      	nop
  }
  return usb_status;  
 800d776:	7bfb      	ldrb	r3, [r7, #15]
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3710      	adds	r7, #16
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	460b      	mov	r3, r1
 800d78a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d78c:	2300      	movs	r3, #0
 800d78e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d790:	2300      	movs	r3, #0
 800d792:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d79a:	78fa      	ldrb	r2, [r7, #3]
 800d79c:	4611      	mov	r1, r2
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7f6 fb14 	bl	8003dcc <HAL_PCD_EP_ClrStall>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d7a8:	7bbb      	ldrb	r3, [r7, #14]
 800d7aa:	2b03      	cmp	r3, #3
 800d7ac:	d816      	bhi.n	800d7dc <USBD_LL_ClearStallEP+0x5c>
 800d7ae:	a201      	add	r2, pc, #4	; (adr r2, 800d7b4 <USBD_LL_ClearStallEP+0x34>)
 800d7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7b4:	0800d7c5 	.word	0x0800d7c5
 800d7b8:	0800d7cb 	.word	0x0800d7cb
 800d7bc:	0800d7d1 	.word	0x0800d7d1
 800d7c0:	0800d7d7 	.word	0x0800d7d7
    case HAL_OK :
      usb_status = USBD_OK;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	73fb      	strb	r3, [r7, #15]
    break;
 800d7c8:	e00b      	b.n	800d7e2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7ca:	2302      	movs	r3, #2
 800d7cc:	73fb      	strb	r3, [r7, #15]
    break;
 800d7ce:	e008      	b.n	800d7e2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	73fb      	strb	r3, [r7, #15]
    break;
 800d7d4:	e005      	b.n	800d7e2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d7d6:	2302      	movs	r3, #2
 800d7d8:	73fb      	strb	r3, [r7, #15]
    break;
 800d7da:	e002      	b.n	800d7e2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d7dc:	2302      	movs	r3, #2
 800d7de:	73fb      	strb	r3, [r7, #15]
    break;
 800d7e0:	bf00      	nop
  }
  return usb_status; 
 800d7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b085      	sub	sp, #20
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7fe:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800d800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d804:	2b00      	cmp	r3, #0
 800d806:	da08      	bge.n	800d81a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d808:	78fb      	ldrb	r3, [r7, #3]
 800d80a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d80e:	68fa      	ldr	r2, [r7, #12]
 800d810:	015b      	lsls	r3, r3, #5
 800d812:	4413      	add	r3, r2
 800d814:	332a      	adds	r3, #42	; 0x2a
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	e008      	b.n	800d82c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d81a:	78fb      	ldrb	r3, [r7, #3]
 800d81c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d820:	68fa      	ldr	r2, [r7, #12]
 800d822:	015b      	lsls	r3, r3, #5
 800d824:	4413      	add	r3, r2
 800d826:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800d82a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3714      	adds	r7, #20
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr

0800d838 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	460b      	mov	r3, r1
 800d842:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d844:	2300      	movs	r3, #0
 800d846:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d848:	2300      	movs	r3, #0
 800d84a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d852:	78fa      	ldrb	r2, [r7, #3]
 800d854:	4611      	mov	r1, r2
 800d856:	4618      	mov	r0, r3
 800d858:	f7f6 f90f 	bl	8003a7a <HAL_PCD_SetAddress>
 800d85c:	4603      	mov	r3, r0
 800d85e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d860:	7bbb      	ldrb	r3, [r7, #14]
 800d862:	2b03      	cmp	r3, #3
 800d864:	d816      	bhi.n	800d894 <USBD_LL_SetUSBAddress+0x5c>
 800d866:	a201      	add	r2, pc, #4	; (adr r2, 800d86c <USBD_LL_SetUSBAddress+0x34>)
 800d868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d86c:	0800d87d 	.word	0x0800d87d
 800d870:	0800d883 	.word	0x0800d883
 800d874:	0800d889 	.word	0x0800d889
 800d878:	0800d88f 	.word	0x0800d88f
    case HAL_OK :
      usb_status = USBD_OK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	73fb      	strb	r3, [r7, #15]
    break;
 800d880:	e00b      	b.n	800d89a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d882:	2302      	movs	r3, #2
 800d884:	73fb      	strb	r3, [r7, #15]
    break;
 800d886:	e008      	b.n	800d89a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d888:	2301      	movs	r3, #1
 800d88a:	73fb      	strb	r3, [r7, #15]
    break;
 800d88c:	e005      	b.n	800d89a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d88e:	2302      	movs	r3, #2
 800d890:	73fb      	strb	r3, [r7, #15]
    break;
 800d892:	e002      	b.n	800d89a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d894:	2302      	movs	r3, #2
 800d896:	73fb      	strb	r3, [r7, #15]
    break;
 800d898:	bf00      	nop
  }
  return usb_status;  
 800d89a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3710      	adds	r7, #16
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b086      	sub	sp, #24
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	607a      	str	r2, [r7, #4]
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	72fb      	strb	r3, [r7, #11]
 800d8b4:	4613      	mov	r3, r2
 800d8b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d8c6:	893b      	ldrh	r3, [r7, #8]
 800d8c8:	7af9      	ldrb	r1, [r7, #11]
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	f7f6 f9eb 	bl	8003ca6 <HAL_PCD_EP_Transmit>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800d8d4:	7dbb      	ldrb	r3, [r7, #22]
 800d8d6:	2b03      	cmp	r3, #3
 800d8d8:	d816      	bhi.n	800d908 <USBD_LL_Transmit+0x64>
 800d8da:	a201      	add	r2, pc, #4	; (adr r2, 800d8e0 <USBD_LL_Transmit+0x3c>)
 800d8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e0:	0800d8f1 	.word	0x0800d8f1
 800d8e4:	0800d8f7 	.word	0x0800d8f7
 800d8e8:	0800d8fd 	.word	0x0800d8fd
 800d8ec:	0800d903 	.word	0x0800d903
    case HAL_OK :
      usb_status = USBD_OK;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	75fb      	strb	r3, [r7, #23]
    break;
 800d8f4:	e00b      	b.n	800d90e <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8f6:	2302      	movs	r3, #2
 800d8f8:	75fb      	strb	r3, [r7, #23]
    break;
 800d8fa:	e008      	b.n	800d90e <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	75fb      	strb	r3, [r7, #23]
    break;
 800d900:	e005      	b.n	800d90e <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d902:	2302      	movs	r3, #2
 800d904:	75fb      	strb	r3, [r7, #23]
    break;
 800d906:	e002      	b.n	800d90e <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800d908:	2302      	movs	r3, #2
 800d90a:	75fb      	strb	r3, [r7, #23]
    break;
 800d90c:	bf00      	nop
  }
  return usb_status;    
 800d90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3718      	adds	r7, #24
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b086      	sub	sp, #24
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	607a      	str	r2, [r7, #4]
 800d922:	461a      	mov	r2, r3
 800d924:	460b      	mov	r3, r1
 800d926:	72fb      	strb	r3, [r7, #11]
 800d928:	4613      	mov	r3, r2
 800d92a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d92c:	2300      	movs	r3, #0
 800d92e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d930:	2300      	movs	r3, #0
 800d932:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d93a:	893b      	ldrh	r3, [r7, #8]
 800d93c:	7af9      	ldrb	r1, [r7, #11]
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	f7f6 f962 	bl	8003c08 <HAL_PCD_EP_Receive>
 800d944:	4603      	mov	r3, r0
 800d946:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800d948:	7dbb      	ldrb	r3, [r7, #22]
 800d94a:	2b03      	cmp	r3, #3
 800d94c:	d816      	bhi.n	800d97c <USBD_LL_PrepareReceive+0x64>
 800d94e:	a201      	add	r2, pc, #4	; (adr r2, 800d954 <USBD_LL_PrepareReceive+0x3c>)
 800d950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d954:	0800d965 	.word	0x0800d965
 800d958:	0800d96b 	.word	0x0800d96b
 800d95c:	0800d971 	.word	0x0800d971
 800d960:	0800d977 	.word	0x0800d977
    case HAL_OK :
      usb_status = USBD_OK;
 800d964:	2300      	movs	r3, #0
 800d966:	75fb      	strb	r3, [r7, #23]
    break;
 800d968:	e00b      	b.n	800d982 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d96a:	2302      	movs	r3, #2
 800d96c:	75fb      	strb	r3, [r7, #23]
    break;
 800d96e:	e008      	b.n	800d982 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d970:	2301      	movs	r3, #1
 800d972:	75fb      	strb	r3, [r7, #23]
    break;
 800d974:	e005      	b.n	800d982 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d976:	2302      	movs	r3, #2
 800d978:	75fb      	strb	r3, [r7, #23]
    break;
 800d97a:	e002      	b.n	800d982 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800d97c:	2302      	movs	r3, #2
 800d97e:	75fb      	strb	r3, [r7, #23]
    break;
 800d980:	bf00      	nop
  }
  return usb_status; 
 800d982:	7dfb      	ldrb	r3, [r7, #23]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3718      	adds	r7, #24
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	460b      	mov	r3, r1
 800d996:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d99e:	78fa      	ldrb	r2, [r7, #3]
 800d9a0:	4611      	mov	r1, r2
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7f6 f96a 	bl	8003c7c <HAL_PCD_EP_GetRxCount>
 800d9a8:	4603      	mov	r3, r0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3708      	adds	r7, #8
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
	...

0800d9b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	460b      	mov	r3, r1
 800d9be:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d9c0:	78fb      	ldrb	r3, [r7, #3]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d002      	beq.n	800d9cc <HAL_PCDEx_LPM_Callback+0x18>
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d013      	beq.n	800d9f2 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800d9ca:	e023      	b.n	800da14 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	699b      	ldr	r3, [r3, #24]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d007      	beq.n	800d9e4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d9d4:	f000 f83c 	bl	800da50 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9d8:	4b10      	ldr	r3, [pc, #64]	; (800da1c <HAL_PCDEx_LPM_Callback+0x68>)
 800d9da:	691b      	ldr	r3, [r3, #16]
 800d9dc:	4a0f      	ldr	r2, [pc, #60]	; (800da1c <HAL_PCDEx_LPM_Callback+0x68>)
 800d9de:	f023 0306 	bic.w	r3, r3, #6
 800d9e2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7fa ff9d 	bl	800892a <USBD_LL_Resume>
    break;
 800d9f0:	e010      	b.n	800da14 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7fa ff81 	bl	8008900 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	699b      	ldr	r3, [r3, #24]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d005      	beq.n	800da12 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da06:	4b05      	ldr	r3, [pc, #20]	; (800da1c <HAL_PCDEx_LPM_Callback+0x68>)
 800da08:	691b      	ldr	r3, [r3, #16]
 800da0a:	4a04      	ldr	r2, [pc, #16]	; (800da1c <HAL_PCDEx_LPM_Callback+0x68>)
 800da0c:	f043 0306 	orr.w	r3, r3, #6
 800da10:	6113      	str	r3, [r2, #16]
    break;   
 800da12:	bf00      	nop
}
 800da14:	bf00      	nop
 800da16:	3708      	adds	r7, #8
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}
 800da1c:	e000ed00 	.word	0xe000ed00

0800da20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800da28:	4b03      	ldr	r3, [pc, #12]	; (800da38 <USBD_static_malloc+0x18>)
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	370c      	adds	r7, #12
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr
 800da36:	bf00      	nop
 800da38:	20001b60 	.word	0x20001b60

0800da3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]

}
 800da44:	bf00      	nop
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800da54:	f7f3 fcb8 	bl	80013c8 <SystemClock_Config>
}
 800da58:	bf00      	nop
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <__errno>:
 800da5c:	4b01      	ldr	r3, [pc, #4]	; (800da64 <__errno+0x8>)
 800da5e:	6818      	ldr	r0, [r3, #0]
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop
 800da64:	200001f8 	.word	0x200001f8

0800da68 <__libc_init_array>:
 800da68:	b570      	push	{r4, r5, r6, lr}
 800da6a:	4e0d      	ldr	r6, [pc, #52]	; (800daa0 <__libc_init_array+0x38>)
 800da6c:	4c0d      	ldr	r4, [pc, #52]	; (800daa4 <__libc_init_array+0x3c>)
 800da6e:	1ba4      	subs	r4, r4, r6
 800da70:	10a4      	asrs	r4, r4, #2
 800da72:	2500      	movs	r5, #0
 800da74:	42a5      	cmp	r5, r4
 800da76:	d109      	bne.n	800da8c <__libc_init_array+0x24>
 800da78:	4e0b      	ldr	r6, [pc, #44]	; (800daa8 <__libc_init_array+0x40>)
 800da7a:	4c0c      	ldr	r4, [pc, #48]	; (800daac <__libc_init_array+0x44>)
 800da7c:	f000 fc42 	bl	800e304 <_init>
 800da80:	1ba4      	subs	r4, r4, r6
 800da82:	10a4      	asrs	r4, r4, #2
 800da84:	2500      	movs	r5, #0
 800da86:	42a5      	cmp	r5, r4
 800da88:	d105      	bne.n	800da96 <__libc_init_array+0x2e>
 800da8a:	bd70      	pop	{r4, r5, r6, pc}
 800da8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da90:	4798      	blx	r3
 800da92:	3501      	adds	r5, #1
 800da94:	e7ee      	b.n	800da74 <__libc_init_array+0xc>
 800da96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da9a:	4798      	blx	r3
 800da9c:	3501      	adds	r5, #1
 800da9e:	e7f2      	b.n	800da86 <__libc_init_array+0x1e>
 800daa0:	0800e5d4 	.word	0x0800e5d4
 800daa4:	0800e5d4 	.word	0x0800e5d4
 800daa8:	0800e5d4 	.word	0x0800e5d4
 800daac:	0800e5d8 	.word	0x0800e5d8

0800dab0 <memcpy>:
 800dab0:	b510      	push	{r4, lr}
 800dab2:	1e43      	subs	r3, r0, #1
 800dab4:	440a      	add	r2, r1
 800dab6:	4291      	cmp	r1, r2
 800dab8:	d100      	bne.n	800dabc <memcpy+0xc>
 800daba:	bd10      	pop	{r4, pc}
 800dabc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dac0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dac4:	e7f7      	b.n	800dab6 <memcpy+0x6>

0800dac6 <memset>:
 800dac6:	4402      	add	r2, r0
 800dac8:	4603      	mov	r3, r0
 800daca:	4293      	cmp	r3, r2
 800dacc:	d100      	bne.n	800dad0 <memset+0xa>
 800dace:	4770      	bx	lr
 800dad0:	f803 1b01 	strb.w	r1, [r3], #1
 800dad4:	e7f9      	b.n	800daca <memset+0x4>

0800dad6 <_vsniprintf_r>:
 800dad6:	b530      	push	{r4, r5, lr}
 800dad8:	1e14      	subs	r4, r2, #0
 800dada:	4605      	mov	r5, r0
 800dadc:	b09b      	sub	sp, #108	; 0x6c
 800dade:	4618      	mov	r0, r3
 800dae0:	da05      	bge.n	800daee <_vsniprintf_r+0x18>
 800dae2:	238b      	movs	r3, #139	; 0x8b
 800dae4:	602b      	str	r3, [r5, #0]
 800dae6:	f04f 30ff 	mov.w	r0, #4294967295
 800daea:	b01b      	add	sp, #108	; 0x6c
 800daec:	bd30      	pop	{r4, r5, pc}
 800daee:	f44f 7302 	mov.w	r3, #520	; 0x208
 800daf2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800daf6:	bf14      	ite	ne
 800daf8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dafc:	4623      	moveq	r3, r4
 800dafe:	9302      	str	r3, [sp, #8]
 800db00:	9305      	str	r3, [sp, #20]
 800db02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db06:	9100      	str	r1, [sp, #0]
 800db08:	9104      	str	r1, [sp, #16]
 800db0a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800db0e:	4602      	mov	r2, r0
 800db10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800db12:	4669      	mov	r1, sp
 800db14:	4628      	mov	r0, r5
 800db16:	f000 f873 	bl	800dc00 <_svfiprintf_r>
 800db1a:	1c43      	adds	r3, r0, #1
 800db1c:	bfbc      	itt	lt
 800db1e:	238b      	movlt	r3, #139	; 0x8b
 800db20:	602b      	strlt	r3, [r5, #0]
 800db22:	2c00      	cmp	r4, #0
 800db24:	d0e1      	beq.n	800daea <_vsniprintf_r+0x14>
 800db26:	9b00      	ldr	r3, [sp, #0]
 800db28:	2200      	movs	r2, #0
 800db2a:	701a      	strb	r2, [r3, #0]
 800db2c:	e7dd      	b.n	800daea <_vsniprintf_r+0x14>
	...

0800db30 <vsniprintf>:
 800db30:	b507      	push	{r0, r1, r2, lr}
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	4613      	mov	r3, r2
 800db36:	460a      	mov	r2, r1
 800db38:	4601      	mov	r1, r0
 800db3a:	4803      	ldr	r0, [pc, #12]	; (800db48 <vsniprintf+0x18>)
 800db3c:	6800      	ldr	r0, [r0, #0]
 800db3e:	f7ff ffca 	bl	800dad6 <_vsniprintf_r>
 800db42:	b003      	add	sp, #12
 800db44:	f85d fb04 	ldr.w	pc, [sp], #4
 800db48:	200001f8 	.word	0x200001f8

0800db4c <__ssputs_r>:
 800db4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db50:	688e      	ldr	r6, [r1, #8]
 800db52:	429e      	cmp	r6, r3
 800db54:	4682      	mov	sl, r0
 800db56:	460c      	mov	r4, r1
 800db58:	4690      	mov	r8, r2
 800db5a:	4699      	mov	r9, r3
 800db5c:	d837      	bhi.n	800dbce <__ssputs_r+0x82>
 800db5e:	898a      	ldrh	r2, [r1, #12]
 800db60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db64:	d031      	beq.n	800dbca <__ssputs_r+0x7e>
 800db66:	6825      	ldr	r5, [r4, #0]
 800db68:	6909      	ldr	r1, [r1, #16]
 800db6a:	1a6f      	subs	r7, r5, r1
 800db6c:	6965      	ldr	r5, [r4, #20]
 800db6e:	2302      	movs	r3, #2
 800db70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db74:	fb95 f5f3 	sdiv	r5, r5, r3
 800db78:	f109 0301 	add.w	r3, r9, #1
 800db7c:	443b      	add	r3, r7
 800db7e:	429d      	cmp	r5, r3
 800db80:	bf38      	it	cc
 800db82:	461d      	movcc	r5, r3
 800db84:	0553      	lsls	r3, r2, #21
 800db86:	d530      	bpl.n	800dbea <__ssputs_r+0x9e>
 800db88:	4629      	mov	r1, r5
 800db8a:	f000 fb21 	bl	800e1d0 <_malloc_r>
 800db8e:	4606      	mov	r6, r0
 800db90:	b950      	cbnz	r0, 800dba8 <__ssputs_r+0x5c>
 800db92:	230c      	movs	r3, #12
 800db94:	f8ca 3000 	str.w	r3, [sl]
 800db98:	89a3      	ldrh	r3, [r4, #12]
 800db9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db9e:	81a3      	strh	r3, [r4, #12]
 800dba0:	f04f 30ff 	mov.w	r0, #4294967295
 800dba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dba8:	463a      	mov	r2, r7
 800dbaa:	6921      	ldr	r1, [r4, #16]
 800dbac:	f7ff ff80 	bl	800dab0 <memcpy>
 800dbb0:	89a3      	ldrh	r3, [r4, #12]
 800dbb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dbb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbba:	81a3      	strh	r3, [r4, #12]
 800dbbc:	6126      	str	r6, [r4, #16]
 800dbbe:	6165      	str	r5, [r4, #20]
 800dbc0:	443e      	add	r6, r7
 800dbc2:	1bed      	subs	r5, r5, r7
 800dbc4:	6026      	str	r6, [r4, #0]
 800dbc6:	60a5      	str	r5, [r4, #8]
 800dbc8:	464e      	mov	r6, r9
 800dbca:	454e      	cmp	r6, r9
 800dbcc:	d900      	bls.n	800dbd0 <__ssputs_r+0x84>
 800dbce:	464e      	mov	r6, r9
 800dbd0:	4632      	mov	r2, r6
 800dbd2:	4641      	mov	r1, r8
 800dbd4:	6820      	ldr	r0, [r4, #0]
 800dbd6:	f000 fa93 	bl	800e100 <memmove>
 800dbda:	68a3      	ldr	r3, [r4, #8]
 800dbdc:	1b9b      	subs	r3, r3, r6
 800dbde:	60a3      	str	r3, [r4, #8]
 800dbe0:	6823      	ldr	r3, [r4, #0]
 800dbe2:	441e      	add	r6, r3
 800dbe4:	6026      	str	r6, [r4, #0]
 800dbe6:	2000      	movs	r0, #0
 800dbe8:	e7dc      	b.n	800dba4 <__ssputs_r+0x58>
 800dbea:	462a      	mov	r2, r5
 800dbec:	f000 fb4a 	bl	800e284 <_realloc_r>
 800dbf0:	4606      	mov	r6, r0
 800dbf2:	2800      	cmp	r0, #0
 800dbf4:	d1e2      	bne.n	800dbbc <__ssputs_r+0x70>
 800dbf6:	6921      	ldr	r1, [r4, #16]
 800dbf8:	4650      	mov	r0, sl
 800dbfa:	f000 fa9b 	bl	800e134 <_free_r>
 800dbfe:	e7c8      	b.n	800db92 <__ssputs_r+0x46>

0800dc00 <_svfiprintf_r>:
 800dc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc04:	461d      	mov	r5, r3
 800dc06:	898b      	ldrh	r3, [r1, #12]
 800dc08:	061f      	lsls	r7, r3, #24
 800dc0a:	b09d      	sub	sp, #116	; 0x74
 800dc0c:	4680      	mov	r8, r0
 800dc0e:	460c      	mov	r4, r1
 800dc10:	4616      	mov	r6, r2
 800dc12:	d50f      	bpl.n	800dc34 <_svfiprintf_r+0x34>
 800dc14:	690b      	ldr	r3, [r1, #16]
 800dc16:	b96b      	cbnz	r3, 800dc34 <_svfiprintf_r+0x34>
 800dc18:	2140      	movs	r1, #64	; 0x40
 800dc1a:	f000 fad9 	bl	800e1d0 <_malloc_r>
 800dc1e:	6020      	str	r0, [r4, #0]
 800dc20:	6120      	str	r0, [r4, #16]
 800dc22:	b928      	cbnz	r0, 800dc30 <_svfiprintf_r+0x30>
 800dc24:	230c      	movs	r3, #12
 800dc26:	f8c8 3000 	str.w	r3, [r8]
 800dc2a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc2e:	e0c8      	b.n	800ddc2 <_svfiprintf_r+0x1c2>
 800dc30:	2340      	movs	r3, #64	; 0x40
 800dc32:	6163      	str	r3, [r4, #20]
 800dc34:	2300      	movs	r3, #0
 800dc36:	9309      	str	r3, [sp, #36]	; 0x24
 800dc38:	2320      	movs	r3, #32
 800dc3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc3e:	2330      	movs	r3, #48	; 0x30
 800dc40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc44:	9503      	str	r5, [sp, #12]
 800dc46:	f04f 0b01 	mov.w	fp, #1
 800dc4a:	4637      	mov	r7, r6
 800dc4c:	463d      	mov	r5, r7
 800dc4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dc52:	b10b      	cbz	r3, 800dc58 <_svfiprintf_r+0x58>
 800dc54:	2b25      	cmp	r3, #37	; 0x25
 800dc56:	d13e      	bne.n	800dcd6 <_svfiprintf_r+0xd6>
 800dc58:	ebb7 0a06 	subs.w	sl, r7, r6
 800dc5c:	d00b      	beq.n	800dc76 <_svfiprintf_r+0x76>
 800dc5e:	4653      	mov	r3, sl
 800dc60:	4632      	mov	r2, r6
 800dc62:	4621      	mov	r1, r4
 800dc64:	4640      	mov	r0, r8
 800dc66:	f7ff ff71 	bl	800db4c <__ssputs_r>
 800dc6a:	3001      	adds	r0, #1
 800dc6c:	f000 80a4 	beq.w	800ddb8 <_svfiprintf_r+0x1b8>
 800dc70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc72:	4453      	add	r3, sl
 800dc74:	9309      	str	r3, [sp, #36]	; 0x24
 800dc76:	783b      	ldrb	r3, [r7, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	f000 809d 	beq.w	800ddb8 <_svfiprintf_r+0x1b8>
 800dc7e:	2300      	movs	r3, #0
 800dc80:	f04f 32ff 	mov.w	r2, #4294967295
 800dc84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc88:	9304      	str	r3, [sp, #16]
 800dc8a:	9307      	str	r3, [sp, #28]
 800dc8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc90:	931a      	str	r3, [sp, #104]	; 0x68
 800dc92:	462f      	mov	r7, r5
 800dc94:	2205      	movs	r2, #5
 800dc96:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dc9a:	4850      	ldr	r0, [pc, #320]	; (800dddc <_svfiprintf_r+0x1dc>)
 800dc9c:	f7f2 faa0 	bl	80001e0 <memchr>
 800dca0:	9b04      	ldr	r3, [sp, #16]
 800dca2:	b9d0      	cbnz	r0, 800dcda <_svfiprintf_r+0xda>
 800dca4:	06d9      	lsls	r1, r3, #27
 800dca6:	bf44      	itt	mi
 800dca8:	2220      	movmi	r2, #32
 800dcaa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dcae:	071a      	lsls	r2, r3, #28
 800dcb0:	bf44      	itt	mi
 800dcb2:	222b      	movmi	r2, #43	; 0x2b
 800dcb4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dcb8:	782a      	ldrb	r2, [r5, #0]
 800dcba:	2a2a      	cmp	r2, #42	; 0x2a
 800dcbc:	d015      	beq.n	800dcea <_svfiprintf_r+0xea>
 800dcbe:	9a07      	ldr	r2, [sp, #28]
 800dcc0:	462f      	mov	r7, r5
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	250a      	movs	r5, #10
 800dcc6:	4639      	mov	r1, r7
 800dcc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dccc:	3b30      	subs	r3, #48	; 0x30
 800dcce:	2b09      	cmp	r3, #9
 800dcd0:	d94d      	bls.n	800dd6e <_svfiprintf_r+0x16e>
 800dcd2:	b1b8      	cbz	r0, 800dd04 <_svfiprintf_r+0x104>
 800dcd4:	e00f      	b.n	800dcf6 <_svfiprintf_r+0xf6>
 800dcd6:	462f      	mov	r7, r5
 800dcd8:	e7b8      	b.n	800dc4c <_svfiprintf_r+0x4c>
 800dcda:	4a40      	ldr	r2, [pc, #256]	; (800dddc <_svfiprintf_r+0x1dc>)
 800dcdc:	1a80      	subs	r0, r0, r2
 800dcde:	fa0b f000 	lsl.w	r0, fp, r0
 800dce2:	4318      	orrs	r0, r3
 800dce4:	9004      	str	r0, [sp, #16]
 800dce6:	463d      	mov	r5, r7
 800dce8:	e7d3      	b.n	800dc92 <_svfiprintf_r+0x92>
 800dcea:	9a03      	ldr	r2, [sp, #12]
 800dcec:	1d11      	adds	r1, r2, #4
 800dcee:	6812      	ldr	r2, [r2, #0]
 800dcf0:	9103      	str	r1, [sp, #12]
 800dcf2:	2a00      	cmp	r2, #0
 800dcf4:	db01      	blt.n	800dcfa <_svfiprintf_r+0xfa>
 800dcf6:	9207      	str	r2, [sp, #28]
 800dcf8:	e004      	b.n	800dd04 <_svfiprintf_r+0x104>
 800dcfa:	4252      	negs	r2, r2
 800dcfc:	f043 0302 	orr.w	r3, r3, #2
 800dd00:	9207      	str	r2, [sp, #28]
 800dd02:	9304      	str	r3, [sp, #16]
 800dd04:	783b      	ldrb	r3, [r7, #0]
 800dd06:	2b2e      	cmp	r3, #46	; 0x2e
 800dd08:	d10c      	bne.n	800dd24 <_svfiprintf_r+0x124>
 800dd0a:	787b      	ldrb	r3, [r7, #1]
 800dd0c:	2b2a      	cmp	r3, #42	; 0x2a
 800dd0e:	d133      	bne.n	800dd78 <_svfiprintf_r+0x178>
 800dd10:	9b03      	ldr	r3, [sp, #12]
 800dd12:	1d1a      	adds	r2, r3, #4
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	9203      	str	r2, [sp, #12]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	bfb8      	it	lt
 800dd1c:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd20:	3702      	adds	r7, #2
 800dd22:	9305      	str	r3, [sp, #20]
 800dd24:	4d2e      	ldr	r5, [pc, #184]	; (800dde0 <_svfiprintf_r+0x1e0>)
 800dd26:	7839      	ldrb	r1, [r7, #0]
 800dd28:	2203      	movs	r2, #3
 800dd2a:	4628      	mov	r0, r5
 800dd2c:	f7f2 fa58 	bl	80001e0 <memchr>
 800dd30:	b138      	cbz	r0, 800dd42 <_svfiprintf_r+0x142>
 800dd32:	2340      	movs	r3, #64	; 0x40
 800dd34:	1b40      	subs	r0, r0, r5
 800dd36:	fa03 f000 	lsl.w	r0, r3, r0
 800dd3a:	9b04      	ldr	r3, [sp, #16]
 800dd3c:	4303      	orrs	r3, r0
 800dd3e:	3701      	adds	r7, #1
 800dd40:	9304      	str	r3, [sp, #16]
 800dd42:	7839      	ldrb	r1, [r7, #0]
 800dd44:	4827      	ldr	r0, [pc, #156]	; (800dde4 <_svfiprintf_r+0x1e4>)
 800dd46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd4a:	2206      	movs	r2, #6
 800dd4c:	1c7e      	adds	r6, r7, #1
 800dd4e:	f7f2 fa47 	bl	80001e0 <memchr>
 800dd52:	2800      	cmp	r0, #0
 800dd54:	d038      	beq.n	800ddc8 <_svfiprintf_r+0x1c8>
 800dd56:	4b24      	ldr	r3, [pc, #144]	; (800dde8 <_svfiprintf_r+0x1e8>)
 800dd58:	bb13      	cbnz	r3, 800dda0 <_svfiprintf_r+0x1a0>
 800dd5a:	9b03      	ldr	r3, [sp, #12]
 800dd5c:	3307      	adds	r3, #7
 800dd5e:	f023 0307 	bic.w	r3, r3, #7
 800dd62:	3308      	adds	r3, #8
 800dd64:	9303      	str	r3, [sp, #12]
 800dd66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd68:	444b      	add	r3, r9
 800dd6a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd6c:	e76d      	b.n	800dc4a <_svfiprintf_r+0x4a>
 800dd6e:	fb05 3202 	mla	r2, r5, r2, r3
 800dd72:	2001      	movs	r0, #1
 800dd74:	460f      	mov	r7, r1
 800dd76:	e7a6      	b.n	800dcc6 <_svfiprintf_r+0xc6>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	3701      	adds	r7, #1
 800dd7c:	9305      	str	r3, [sp, #20]
 800dd7e:	4619      	mov	r1, r3
 800dd80:	250a      	movs	r5, #10
 800dd82:	4638      	mov	r0, r7
 800dd84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd88:	3a30      	subs	r2, #48	; 0x30
 800dd8a:	2a09      	cmp	r2, #9
 800dd8c:	d903      	bls.n	800dd96 <_svfiprintf_r+0x196>
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d0c8      	beq.n	800dd24 <_svfiprintf_r+0x124>
 800dd92:	9105      	str	r1, [sp, #20]
 800dd94:	e7c6      	b.n	800dd24 <_svfiprintf_r+0x124>
 800dd96:	fb05 2101 	mla	r1, r5, r1, r2
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	4607      	mov	r7, r0
 800dd9e:	e7f0      	b.n	800dd82 <_svfiprintf_r+0x182>
 800dda0:	ab03      	add	r3, sp, #12
 800dda2:	9300      	str	r3, [sp, #0]
 800dda4:	4622      	mov	r2, r4
 800dda6:	4b11      	ldr	r3, [pc, #68]	; (800ddec <_svfiprintf_r+0x1ec>)
 800dda8:	a904      	add	r1, sp, #16
 800ddaa:	4640      	mov	r0, r8
 800ddac:	f3af 8000 	nop.w
 800ddb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ddb4:	4681      	mov	r9, r0
 800ddb6:	d1d6      	bne.n	800dd66 <_svfiprintf_r+0x166>
 800ddb8:	89a3      	ldrh	r3, [r4, #12]
 800ddba:	065b      	lsls	r3, r3, #25
 800ddbc:	f53f af35 	bmi.w	800dc2a <_svfiprintf_r+0x2a>
 800ddc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddc2:	b01d      	add	sp, #116	; 0x74
 800ddc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc8:	ab03      	add	r3, sp, #12
 800ddca:	9300      	str	r3, [sp, #0]
 800ddcc:	4622      	mov	r2, r4
 800ddce:	4b07      	ldr	r3, [pc, #28]	; (800ddec <_svfiprintf_r+0x1ec>)
 800ddd0:	a904      	add	r1, sp, #16
 800ddd2:	4640      	mov	r0, r8
 800ddd4:	f000 f882 	bl	800dedc <_printf_i>
 800ddd8:	e7ea      	b.n	800ddb0 <_svfiprintf_r+0x1b0>
 800ddda:	bf00      	nop
 800dddc:	0800e5a0 	.word	0x0800e5a0
 800dde0:	0800e5a6 	.word	0x0800e5a6
 800dde4:	0800e5aa 	.word	0x0800e5aa
 800dde8:	00000000 	.word	0x00000000
 800ddec:	0800db4d 	.word	0x0800db4d

0800ddf0 <_printf_common>:
 800ddf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddf4:	4691      	mov	r9, r2
 800ddf6:	461f      	mov	r7, r3
 800ddf8:	688a      	ldr	r2, [r1, #8]
 800ddfa:	690b      	ldr	r3, [r1, #16]
 800ddfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de00:	4293      	cmp	r3, r2
 800de02:	bfb8      	it	lt
 800de04:	4613      	movlt	r3, r2
 800de06:	f8c9 3000 	str.w	r3, [r9]
 800de0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de0e:	4606      	mov	r6, r0
 800de10:	460c      	mov	r4, r1
 800de12:	b112      	cbz	r2, 800de1a <_printf_common+0x2a>
 800de14:	3301      	adds	r3, #1
 800de16:	f8c9 3000 	str.w	r3, [r9]
 800de1a:	6823      	ldr	r3, [r4, #0]
 800de1c:	0699      	lsls	r1, r3, #26
 800de1e:	bf42      	ittt	mi
 800de20:	f8d9 3000 	ldrmi.w	r3, [r9]
 800de24:	3302      	addmi	r3, #2
 800de26:	f8c9 3000 	strmi.w	r3, [r9]
 800de2a:	6825      	ldr	r5, [r4, #0]
 800de2c:	f015 0506 	ands.w	r5, r5, #6
 800de30:	d107      	bne.n	800de42 <_printf_common+0x52>
 800de32:	f104 0a19 	add.w	sl, r4, #25
 800de36:	68e3      	ldr	r3, [r4, #12]
 800de38:	f8d9 2000 	ldr.w	r2, [r9]
 800de3c:	1a9b      	subs	r3, r3, r2
 800de3e:	42ab      	cmp	r3, r5
 800de40:	dc28      	bgt.n	800de94 <_printf_common+0xa4>
 800de42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800de46:	6822      	ldr	r2, [r4, #0]
 800de48:	3300      	adds	r3, #0
 800de4a:	bf18      	it	ne
 800de4c:	2301      	movne	r3, #1
 800de4e:	0692      	lsls	r2, r2, #26
 800de50:	d42d      	bmi.n	800deae <_printf_common+0xbe>
 800de52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de56:	4639      	mov	r1, r7
 800de58:	4630      	mov	r0, r6
 800de5a:	47c0      	blx	r8
 800de5c:	3001      	adds	r0, #1
 800de5e:	d020      	beq.n	800dea2 <_printf_common+0xb2>
 800de60:	6823      	ldr	r3, [r4, #0]
 800de62:	68e5      	ldr	r5, [r4, #12]
 800de64:	f8d9 2000 	ldr.w	r2, [r9]
 800de68:	f003 0306 	and.w	r3, r3, #6
 800de6c:	2b04      	cmp	r3, #4
 800de6e:	bf08      	it	eq
 800de70:	1aad      	subeq	r5, r5, r2
 800de72:	68a3      	ldr	r3, [r4, #8]
 800de74:	6922      	ldr	r2, [r4, #16]
 800de76:	bf0c      	ite	eq
 800de78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de7c:	2500      	movne	r5, #0
 800de7e:	4293      	cmp	r3, r2
 800de80:	bfc4      	itt	gt
 800de82:	1a9b      	subgt	r3, r3, r2
 800de84:	18ed      	addgt	r5, r5, r3
 800de86:	f04f 0900 	mov.w	r9, #0
 800de8a:	341a      	adds	r4, #26
 800de8c:	454d      	cmp	r5, r9
 800de8e:	d11a      	bne.n	800dec6 <_printf_common+0xd6>
 800de90:	2000      	movs	r0, #0
 800de92:	e008      	b.n	800dea6 <_printf_common+0xb6>
 800de94:	2301      	movs	r3, #1
 800de96:	4652      	mov	r2, sl
 800de98:	4639      	mov	r1, r7
 800de9a:	4630      	mov	r0, r6
 800de9c:	47c0      	blx	r8
 800de9e:	3001      	adds	r0, #1
 800dea0:	d103      	bne.n	800deaa <_printf_common+0xba>
 800dea2:	f04f 30ff 	mov.w	r0, #4294967295
 800dea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deaa:	3501      	adds	r5, #1
 800deac:	e7c3      	b.n	800de36 <_printf_common+0x46>
 800deae:	18e1      	adds	r1, r4, r3
 800deb0:	1c5a      	adds	r2, r3, #1
 800deb2:	2030      	movs	r0, #48	; 0x30
 800deb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800deb8:	4422      	add	r2, r4
 800deba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800debe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dec2:	3302      	adds	r3, #2
 800dec4:	e7c5      	b.n	800de52 <_printf_common+0x62>
 800dec6:	2301      	movs	r3, #1
 800dec8:	4622      	mov	r2, r4
 800deca:	4639      	mov	r1, r7
 800decc:	4630      	mov	r0, r6
 800dece:	47c0      	blx	r8
 800ded0:	3001      	adds	r0, #1
 800ded2:	d0e6      	beq.n	800dea2 <_printf_common+0xb2>
 800ded4:	f109 0901 	add.w	r9, r9, #1
 800ded8:	e7d8      	b.n	800de8c <_printf_common+0x9c>
	...

0800dedc <_printf_i>:
 800dedc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dee0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dee4:	460c      	mov	r4, r1
 800dee6:	7e09      	ldrb	r1, [r1, #24]
 800dee8:	b085      	sub	sp, #20
 800deea:	296e      	cmp	r1, #110	; 0x6e
 800deec:	4617      	mov	r7, r2
 800deee:	4606      	mov	r6, r0
 800def0:	4698      	mov	r8, r3
 800def2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800def4:	f000 80b3 	beq.w	800e05e <_printf_i+0x182>
 800def8:	d822      	bhi.n	800df40 <_printf_i+0x64>
 800defa:	2963      	cmp	r1, #99	; 0x63
 800defc:	d036      	beq.n	800df6c <_printf_i+0x90>
 800defe:	d80a      	bhi.n	800df16 <_printf_i+0x3a>
 800df00:	2900      	cmp	r1, #0
 800df02:	f000 80b9 	beq.w	800e078 <_printf_i+0x19c>
 800df06:	2958      	cmp	r1, #88	; 0x58
 800df08:	f000 8083 	beq.w	800e012 <_printf_i+0x136>
 800df0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800df14:	e032      	b.n	800df7c <_printf_i+0xa0>
 800df16:	2964      	cmp	r1, #100	; 0x64
 800df18:	d001      	beq.n	800df1e <_printf_i+0x42>
 800df1a:	2969      	cmp	r1, #105	; 0x69
 800df1c:	d1f6      	bne.n	800df0c <_printf_i+0x30>
 800df1e:	6820      	ldr	r0, [r4, #0]
 800df20:	6813      	ldr	r3, [r2, #0]
 800df22:	0605      	lsls	r5, r0, #24
 800df24:	f103 0104 	add.w	r1, r3, #4
 800df28:	d52a      	bpl.n	800df80 <_printf_i+0xa4>
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	6011      	str	r1, [r2, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	da03      	bge.n	800df3a <_printf_i+0x5e>
 800df32:	222d      	movs	r2, #45	; 0x2d
 800df34:	425b      	negs	r3, r3
 800df36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800df3a:	486f      	ldr	r0, [pc, #444]	; (800e0f8 <_printf_i+0x21c>)
 800df3c:	220a      	movs	r2, #10
 800df3e:	e039      	b.n	800dfb4 <_printf_i+0xd8>
 800df40:	2973      	cmp	r1, #115	; 0x73
 800df42:	f000 809d 	beq.w	800e080 <_printf_i+0x1a4>
 800df46:	d808      	bhi.n	800df5a <_printf_i+0x7e>
 800df48:	296f      	cmp	r1, #111	; 0x6f
 800df4a:	d020      	beq.n	800df8e <_printf_i+0xb2>
 800df4c:	2970      	cmp	r1, #112	; 0x70
 800df4e:	d1dd      	bne.n	800df0c <_printf_i+0x30>
 800df50:	6823      	ldr	r3, [r4, #0]
 800df52:	f043 0320 	orr.w	r3, r3, #32
 800df56:	6023      	str	r3, [r4, #0]
 800df58:	e003      	b.n	800df62 <_printf_i+0x86>
 800df5a:	2975      	cmp	r1, #117	; 0x75
 800df5c:	d017      	beq.n	800df8e <_printf_i+0xb2>
 800df5e:	2978      	cmp	r1, #120	; 0x78
 800df60:	d1d4      	bne.n	800df0c <_printf_i+0x30>
 800df62:	2378      	movs	r3, #120	; 0x78
 800df64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df68:	4864      	ldr	r0, [pc, #400]	; (800e0fc <_printf_i+0x220>)
 800df6a:	e055      	b.n	800e018 <_printf_i+0x13c>
 800df6c:	6813      	ldr	r3, [r2, #0]
 800df6e:	1d19      	adds	r1, r3, #4
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	6011      	str	r1, [r2, #0]
 800df74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df7c:	2301      	movs	r3, #1
 800df7e:	e08c      	b.n	800e09a <_printf_i+0x1be>
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	6011      	str	r1, [r2, #0]
 800df84:	f010 0f40 	tst.w	r0, #64	; 0x40
 800df88:	bf18      	it	ne
 800df8a:	b21b      	sxthne	r3, r3
 800df8c:	e7cf      	b.n	800df2e <_printf_i+0x52>
 800df8e:	6813      	ldr	r3, [r2, #0]
 800df90:	6825      	ldr	r5, [r4, #0]
 800df92:	1d18      	adds	r0, r3, #4
 800df94:	6010      	str	r0, [r2, #0]
 800df96:	0628      	lsls	r0, r5, #24
 800df98:	d501      	bpl.n	800df9e <_printf_i+0xc2>
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	e002      	b.n	800dfa4 <_printf_i+0xc8>
 800df9e:	0668      	lsls	r0, r5, #25
 800dfa0:	d5fb      	bpl.n	800df9a <_printf_i+0xbe>
 800dfa2:	881b      	ldrh	r3, [r3, #0]
 800dfa4:	4854      	ldr	r0, [pc, #336]	; (800e0f8 <_printf_i+0x21c>)
 800dfa6:	296f      	cmp	r1, #111	; 0x6f
 800dfa8:	bf14      	ite	ne
 800dfaa:	220a      	movne	r2, #10
 800dfac:	2208      	moveq	r2, #8
 800dfae:	2100      	movs	r1, #0
 800dfb0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dfb4:	6865      	ldr	r5, [r4, #4]
 800dfb6:	60a5      	str	r5, [r4, #8]
 800dfb8:	2d00      	cmp	r5, #0
 800dfba:	f2c0 8095 	blt.w	800e0e8 <_printf_i+0x20c>
 800dfbe:	6821      	ldr	r1, [r4, #0]
 800dfc0:	f021 0104 	bic.w	r1, r1, #4
 800dfc4:	6021      	str	r1, [r4, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d13d      	bne.n	800e046 <_printf_i+0x16a>
 800dfca:	2d00      	cmp	r5, #0
 800dfcc:	f040 808e 	bne.w	800e0ec <_printf_i+0x210>
 800dfd0:	4665      	mov	r5, ip
 800dfd2:	2a08      	cmp	r2, #8
 800dfd4:	d10b      	bne.n	800dfee <_printf_i+0x112>
 800dfd6:	6823      	ldr	r3, [r4, #0]
 800dfd8:	07db      	lsls	r3, r3, #31
 800dfda:	d508      	bpl.n	800dfee <_printf_i+0x112>
 800dfdc:	6923      	ldr	r3, [r4, #16]
 800dfde:	6862      	ldr	r2, [r4, #4]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	bfde      	ittt	le
 800dfe4:	2330      	movle	r3, #48	; 0x30
 800dfe6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dfea:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dfee:	ebac 0305 	sub.w	r3, ip, r5
 800dff2:	6123      	str	r3, [r4, #16]
 800dff4:	f8cd 8000 	str.w	r8, [sp]
 800dff8:	463b      	mov	r3, r7
 800dffa:	aa03      	add	r2, sp, #12
 800dffc:	4621      	mov	r1, r4
 800dffe:	4630      	mov	r0, r6
 800e000:	f7ff fef6 	bl	800ddf0 <_printf_common>
 800e004:	3001      	adds	r0, #1
 800e006:	d14d      	bne.n	800e0a4 <_printf_i+0x1c8>
 800e008:	f04f 30ff 	mov.w	r0, #4294967295
 800e00c:	b005      	add	sp, #20
 800e00e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e012:	4839      	ldr	r0, [pc, #228]	; (800e0f8 <_printf_i+0x21c>)
 800e014:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e018:	6813      	ldr	r3, [r2, #0]
 800e01a:	6821      	ldr	r1, [r4, #0]
 800e01c:	1d1d      	adds	r5, r3, #4
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	6015      	str	r5, [r2, #0]
 800e022:	060a      	lsls	r2, r1, #24
 800e024:	d50b      	bpl.n	800e03e <_printf_i+0x162>
 800e026:	07ca      	lsls	r2, r1, #31
 800e028:	bf44      	itt	mi
 800e02a:	f041 0120 	orrmi.w	r1, r1, #32
 800e02e:	6021      	strmi	r1, [r4, #0]
 800e030:	b91b      	cbnz	r3, 800e03a <_printf_i+0x15e>
 800e032:	6822      	ldr	r2, [r4, #0]
 800e034:	f022 0220 	bic.w	r2, r2, #32
 800e038:	6022      	str	r2, [r4, #0]
 800e03a:	2210      	movs	r2, #16
 800e03c:	e7b7      	b.n	800dfae <_printf_i+0xd2>
 800e03e:	064d      	lsls	r5, r1, #25
 800e040:	bf48      	it	mi
 800e042:	b29b      	uxthmi	r3, r3
 800e044:	e7ef      	b.n	800e026 <_printf_i+0x14a>
 800e046:	4665      	mov	r5, ip
 800e048:	fbb3 f1f2 	udiv	r1, r3, r2
 800e04c:	fb02 3311 	mls	r3, r2, r1, r3
 800e050:	5cc3      	ldrb	r3, [r0, r3]
 800e052:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e056:	460b      	mov	r3, r1
 800e058:	2900      	cmp	r1, #0
 800e05a:	d1f5      	bne.n	800e048 <_printf_i+0x16c>
 800e05c:	e7b9      	b.n	800dfd2 <_printf_i+0xf6>
 800e05e:	6813      	ldr	r3, [r2, #0]
 800e060:	6825      	ldr	r5, [r4, #0]
 800e062:	6961      	ldr	r1, [r4, #20]
 800e064:	1d18      	adds	r0, r3, #4
 800e066:	6010      	str	r0, [r2, #0]
 800e068:	0628      	lsls	r0, r5, #24
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	d501      	bpl.n	800e072 <_printf_i+0x196>
 800e06e:	6019      	str	r1, [r3, #0]
 800e070:	e002      	b.n	800e078 <_printf_i+0x19c>
 800e072:	066a      	lsls	r2, r5, #25
 800e074:	d5fb      	bpl.n	800e06e <_printf_i+0x192>
 800e076:	8019      	strh	r1, [r3, #0]
 800e078:	2300      	movs	r3, #0
 800e07a:	6123      	str	r3, [r4, #16]
 800e07c:	4665      	mov	r5, ip
 800e07e:	e7b9      	b.n	800dff4 <_printf_i+0x118>
 800e080:	6813      	ldr	r3, [r2, #0]
 800e082:	1d19      	adds	r1, r3, #4
 800e084:	6011      	str	r1, [r2, #0]
 800e086:	681d      	ldr	r5, [r3, #0]
 800e088:	6862      	ldr	r2, [r4, #4]
 800e08a:	2100      	movs	r1, #0
 800e08c:	4628      	mov	r0, r5
 800e08e:	f7f2 f8a7 	bl	80001e0 <memchr>
 800e092:	b108      	cbz	r0, 800e098 <_printf_i+0x1bc>
 800e094:	1b40      	subs	r0, r0, r5
 800e096:	6060      	str	r0, [r4, #4]
 800e098:	6863      	ldr	r3, [r4, #4]
 800e09a:	6123      	str	r3, [r4, #16]
 800e09c:	2300      	movs	r3, #0
 800e09e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0a2:	e7a7      	b.n	800dff4 <_printf_i+0x118>
 800e0a4:	6923      	ldr	r3, [r4, #16]
 800e0a6:	462a      	mov	r2, r5
 800e0a8:	4639      	mov	r1, r7
 800e0aa:	4630      	mov	r0, r6
 800e0ac:	47c0      	blx	r8
 800e0ae:	3001      	adds	r0, #1
 800e0b0:	d0aa      	beq.n	800e008 <_printf_i+0x12c>
 800e0b2:	6823      	ldr	r3, [r4, #0]
 800e0b4:	079b      	lsls	r3, r3, #30
 800e0b6:	d413      	bmi.n	800e0e0 <_printf_i+0x204>
 800e0b8:	68e0      	ldr	r0, [r4, #12]
 800e0ba:	9b03      	ldr	r3, [sp, #12]
 800e0bc:	4298      	cmp	r0, r3
 800e0be:	bfb8      	it	lt
 800e0c0:	4618      	movlt	r0, r3
 800e0c2:	e7a3      	b.n	800e00c <_printf_i+0x130>
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	464a      	mov	r2, r9
 800e0c8:	4639      	mov	r1, r7
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	47c0      	blx	r8
 800e0ce:	3001      	adds	r0, #1
 800e0d0:	d09a      	beq.n	800e008 <_printf_i+0x12c>
 800e0d2:	3501      	adds	r5, #1
 800e0d4:	68e3      	ldr	r3, [r4, #12]
 800e0d6:	9a03      	ldr	r2, [sp, #12]
 800e0d8:	1a9b      	subs	r3, r3, r2
 800e0da:	42ab      	cmp	r3, r5
 800e0dc:	dcf2      	bgt.n	800e0c4 <_printf_i+0x1e8>
 800e0de:	e7eb      	b.n	800e0b8 <_printf_i+0x1dc>
 800e0e0:	2500      	movs	r5, #0
 800e0e2:	f104 0919 	add.w	r9, r4, #25
 800e0e6:	e7f5      	b.n	800e0d4 <_printf_i+0x1f8>
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d1ac      	bne.n	800e046 <_printf_i+0x16a>
 800e0ec:	7803      	ldrb	r3, [r0, #0]
 800e0ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e0f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e0f6:	e76c      	b.n	800dfd2 <_printf_i+0xf6>
 800e0f8:	0800e5b1 	.word	0x0800e5b1
 800e0fc:	0800e5c2 	.word	0x0800e5c2

0800e100 <memmove>:
 800e100:	4288      	cmp	r0, r1
 800e102:	b510      	push	{r4, lr}
 800e104:	eb01 0302 	add.w	r3, r1, r2
 800e108:	d807      	bhi.n	800e11a <memmove+0x1a>
 800e10a:	1e42      	subs	r2, r0, #1
 800e10c:	4299      	cmp	r1, r3
 800e10e:	d00a      	beq.n	800e126 <memmove+0x26>
 800e110:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e114:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e118:	e7f8      	b.n	800e10c <memmove+0xc>
 800e11a:	4283      	cmp	r3, r0
 800e11c:	d9f5      	bls.n	800e10a <memmove+0xa>
 800e11e:	1881      	adds	r1, r0, r2
 800e120:	1ad2      	subs	r2, r2, r3
 800e122:	42d3      	cmn	r3, r2
 800e124:	d100      	bne.n	800e128 <memmove+0x28>
 800e126:	bd10      	pop	{r4, pc}
 800e128:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e12c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e130:	e7f7      	b.n	800e122 <memmove+0x22>
	...

0800e134 <_free_r>:
 800e134:	b538      	push	{r3, r4, r5, lr}
 800e136:	4605      	mov	r5, r0
 800e138:	2900      	cmp	r1, #0
 800e13a:	d045      	beq.n	800e1c8 <_free_r+0x94>
 800e13c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e140:	1f0c      	subs	r4, r1, #4
 800e142:	2b00      	cmp	r3, #0
 800e144:	bfb8      	it	lt
 800e146:	18e4      	addlt	r4, r4, r3
 800e148:	f000 f8d2 	bl	800e2f0 <__malloc_lock>
 800e14c:	4a1f      	ldr	r2, [pc, #124]	; (800e1cc <_free_r+0x98>)
 800e14e:	6813      	ldr	r3, [r2, #0]
 800e150:	4610      	mov	r0, r2
 800e152:	b933      	cbnz	r3, 800e162 <_free_r+0x2e>
 800e154:	6063      	str	r3, [r4, #4]
 800e156:	6014      	str	r4, [r2, #0]
 800e158:	4628      	mov	r0, r5
 800e15a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e15e:	f000 b8c8 	b.w	800e2f2 <__malloc_unlock>
 800e162:	42a3      	cmp	r3, r4
 800e164:	d90c      	bls.n	800e180 <_free_r+0x4c>
 800e166:	6821      	ldr	r1, [r4, #0]
 800e168:	1862      	adds	r2, r4, r1
 800e16a:	4293      	cmp	r3, r2
 800e16c:	bf04      	itt	eq
 800e16e:	681a      	ldreq	r2, [r3, #0]
 800e170:	685b      	ldreq	r3, [r3, #4]
 800e172:	6063      	str	r3, [r4, #4]
 800e174:	bf04      	itt	eq
 800e176:	1852      	addeq	r2, r2, r1
 800e178:	6022      	streq	r2, [r4, #0]
 800e17a:	6004      	str	r4, [r0, #0]
 800e17c:	e7ec      	b.n	800e158 <_free_r+0x24>
 800e17e:	4613      	mov	r3, r2
 800e180:	685a      	ldr	r2, [r3, #4]
 800e182:	b10a      	cbz	r2, 800e188 <_free_r+0x54>
 800e184:	42a2      	cmp	r2, r4
 800e186:	d9fa      	bls.n	800e17e <_free_r+0x4a>
 800e188:	6819      	ldr	r1, [r3, #0]
 800e18a:	1858      	adds	r0, r3, r1
 800e18c:	42a0      	cmp	r0, r4
 800e18e:	d10b      	bne.n	800e1a8 <_free_r+0x74>
 800e190:	6820      	ldr	r0, [r4, #0]
 800e192:	4401      	add	r1, r0
 800e194:	1858      	adds	r0, r3, r1
 800e196:	4282      	cmp	r2, r0
 800e198:	6019      	str	r1, [r3, #0]
 800e19a:	d1dd      	bne.n	800e158 <_free_r+0x24>
 800e19c:	6810      	ldr	r0, [r2, #0]
 800e19e:	6852      	ldr	r2, [r2, #4]
 800e1a0:	605a      	str	r2, [r3, #4]
 800e1a2:	4401      	add	r1, r0
 800e1a4:	6019      	str	r1, [r3, #0]
 800e1a6:	e7d7      	b.n	800e158 <_free_r+0x24>
 800e1a8:	d902      	bls.n	800e1b0 <_free_r+0x7c>
 800e1aa:	230c      	movs	r3, #12
 800e1ac:	602b      	str	r3, [r5, #0]
 800e1ae:	e7d3      	b.n	800e158 <_free_r+0x24>
 800e1b0:	6820      	ldr	r0, [r4, #0]
 800e1b2:	1821      	adds	r1, r4, r0
 800e1b4:	428a      	cmp	r2, r1
 800e1b6:	bf04      	itt	eq
 800e1b8:	6811      	ldreq	r1, [r2, #0]
 800e1ba:	6852      	ldreq	r2, [r2, #4]
 800e1bc:	6062      	str	r2, [r4, #4]
 800e1be:	bf04      	itt	eq
 800e1c0:	1809      	addeq	r1, r1, r0
 800e1c2:	6021      	streq	r1, [r4, #0]
 800e1c4:	605c      	str	r4, [r3, #4]
 800e1c6:	e7c7      	b.n	800e158 <_free_r+0x24>
 800e1c8:	bd38      	pop	{r3, r4, r5, pc}
 800e1ca:	bf00      	nop
 800e1cc:	20001d80 	.word	0x20001d80

0800e1d0 <_malloc_r>:
 800e1d0:	b570      	push	{r4, r5, r6, lr}
 800e1d2:	1ccd      	adds	r5, r1, #3
 800e1d4:	f025 0503 	bic.w	r5, r5, #3
 800e1d8:	3508      	adds	r5, #8
 800e1da:	2d0c      	cmp	r5, #12
 800e1dc:	bf38      	it	cc
 800e1de:	250c      	movcc	r5, #12
 800e1e0:	2d00      	cmp	r5, #0
 800e1e2:	4606      	mov	r6, r0
 800e1e4:	db01      	blt.n	800e1ea <_malloc_r+0x1a>
 800e1e6:	42a9      	cmp	r1, r5
 800e1e8:	d903      	bls.n	800e1f2 <_malloc_r+0x22>
 800e1ea:	230c      	movs	r3, #12
 800e1ec:	6033      	str	r3, [r6, #0]
 800e1ee:	2000      	movs	r0, #0
 800e1f0:	bd70      	pop	{r4, r5, r6, pc}
 800e1f2:	f000 f87d 	bl	800e2f0 <__malloc_lock>
 800e1f6:	4a21      	ldr	r2, [pc, #132]	; (800e27c <_malloc_r+0xac>)
 800e1f8:	6814      	ldr	r4, [r2, #0]
 800e1fa:	4621      	mov	r1, r4
 800e1fc:	b991      	cbnz	r1, 800e224 <_malloc_r+0x54>
 800e1fe:	4c20      	ldr	r4, [pc, #128]	; (800e280 <_malloc_r+0xb0>)
 800e200:	6823      	ldr	r3, [r4, #0]
 800e202:	b91b      	cbnz	r3, 800e20c <_malloc_r+0x3c>
 800e204:	4630      	mov	r0, r6
 800e206:	f000 f863 	bl	800e2d0 <_sbrk_r>
 800e20a:	6020      	str	r0, [r4, #0]
 800e20c:	4629      	mov	r1, r5
 800e20e:	4630      	mov	r0, r6
 800e210:	f000 f85e 	bl	800e2d0 <_sbrk_r>
 800e214:	1c43      	adds	r3, r0, #1
 800e216:	d124      	bne.n	800e262 <_malloc_r+0x92>
 800e218:	230c      	movs	r3, #12
 800e21a:	6033      	str	r3, [r6, #0]
 800e21c:	4630      	mov	r0, r6
 800e21e:	f000 f868 	bl	800e2f2 <__malloc_unlock>
 800e222:	e7e4      	b.n	800e1ee <_malloc_r+0x1e>
 800e224:	680b      	ldr	r3, [r1, #0]
 800e226:	1b5b      	subs	r3, r3, r5
 800e228:	d418      	bmi.n	800e25c <_malloc_r+0x8c>
 800e22a:	2b0b      	cmp	r3, #11
 800e22c:	d90f      	bls.n	800e24e <_malloc_r+0x7e>
 800e22e:	600b      	str	r3, [r1, #0]
 800e230:	50cd      	str	r5, [r1, r3]
 800e232:	18cc      	adds	r4, r1, r3
 800e234:	4630      	mov	r0, r6
 800e236:	f000 f85c 	bl	800e2f2 <__malloc_unlock>
 800e23a:	f104 000b 	add.w	r0, r4, #11
 800e23e:	1d23      	adds	r3, r4, #4
 800e240:	f020 0007 	bic.w	r0, r0, #7
 800e244:	1ac3      	subs	r3, r0, r3
 800e246:	d0d3      	beq.n	800e1f0 <_malloc_r+0x20>
 800e248:	425a      	negs	r2, r3
 800e24a:	50e2      	str	r2, [r4, r3]
 800e24c:	e7d0      	b.n	800e1f0 <_malloc_r+0x20>
 800e24e:	428c      	cmp	r4, r1
 800e250:	684b      	ldr	r3, [r1, #4]
 800e252:	bf16      	itet	ne
 800e254:	6063      	strne	r3, [r4, #4]
 800e256:	6013      	streq	r3, [r2, #0]
 800e258:	460c      	movne	r4, r1
 800e25a:	e7eb      	b.n	800e234 <_malloc_r+0x64>
 800e25c:	460c      	mov	r4, r1
 800e25e:	6849      	ldr	r1, [r1, #4]
 800e260:	e7cc      	b.n	800e1fc <_malloc_r+0x2c>
 800e262:	1cc4      	adds	r4, r0, #3
 800e264:	f024 0403 	bic.w	r4, r4, #3
 800e268:	42a0      	cmp	r0, r4
 800e26a:	d005      	beq.n	800e278 <_malloc_r+0xa8>
 800e26c:	1a21      	subs	r1, r4, r0
 800e26e:	4630      	mov	r0, r6
 800e270:	f000 f82e 	bl	800e2d0 <_sbrk_r>
 800e274:	3001      	adds	r0, #1
 800e276:	d0cf      	beq.n	800e218 <_malloc_r+0x48>
 800e278:	6025      	str	r5, [r4, #0]
 800e27a:	e7db      	b.n	800e234 <_malloc_r+0x64>
 800e27c:	20001d80 	.word	0x20001d80
 800e280:	20001d84 	.word	0x20001d84

0800e284 <_realloc_r>:
 800e284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e286:	4607      	mov	r7, r0
 800e288:	4614      	mov	r4, r2
 800e28a:	460e      	mov	r6, r1
 800e28c:	b921      	cbnz	r1, 800e298 <_realloc_r+0x14>
 800e28e:	4611      	mov	r1, r2
 800e290:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e294:	f7ff bf9c 	b.w	800e1d0 <_malloc_r>
 800e298:	b922      	cbnz	r2, 800e2a4 <_realloc_r+0x20>
 800e29a:	f7ff ff4b 	bl	800e134 <_free_r>
 800e29e:	4625      	mov	r5, r4
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2a4:	f000 f826 	bl	800e2f4 <_malloc_usable_size_r>
 800e2a8:	42a0      	cmp	r0, r4
 800e2aa:	d20f      	bcs.n	800e2cc <_realloc_r+0x48>
 800e2ac:	4621      	mov	r1, r4
 800e2ae:	4638      	mov	r0, r7
 800e2b0:	f7ff ff8e 	bl	800e1d0 <_malloc_r>
 800e2b4:	4605      	mov	r5, r0
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	d0f2      	beq.n	800e2a0 <_realloc_r+0x1c>
 800e2ba:	4631      	mov	r1, r6
 800e2bc:	4622      	mov	r2, r4
 800e2be:	f7ff fbf7 	bl	800dab0 <memcpy>
 800e2c2:	4631      	mov	r1, r6
 800e2c4:	4638      	mov	r0, r7
 800e2c6:	f7ff ff35 	bl	800e134 <_free_r>
 800e2ca:	e7e9      	b.n	800e2a0 <_realloc_r+0x1c>
 800e2cc:	4635      	mov	r5, r6
 800e2ce:	e7e7      	b.n	800e2a0 <_realloc_r+0x1c>

0800e2d0 <_sbrk_r>:
 800e2d0:	b538      	push	{r3, r4, r5, lr}
 800e2d2:	4c06      	ldr	r4, [pc, #24]	; (800e2ec <_sbrk_r+0x1c>)
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	4605      	mov	r5, r0
 800e2d8:	4608      	mov	r0, r1
 800e2da:	6023      	str	r3, [r4, #0]
 800e2dc:	f7f3 fbf0 	bl	8001ac0 <_sbrk>
 800e2e0:	1c43      	adds	r3, r0, #1
 800e2e2:	d102      	bne.n	800e2ea <_sbrk_r+0x1a>
 800e2e4:	6823      	ldr	r3, [r4, #0]
 800e2e6:	b103      	cbz	r3, 800e2ea <_sbrk_r+0x1a>
 800e2e8:	602b      	str	r3, [r5, #0]
 800e2ea:	bd38      	pop	{r3, r4, r5, pc}
 800e2ec:	2000d10c 	.word	0x2000d10c

0800e2f0 <__malloc_lock>:
 800e2f0:	4770      	bx	lr

0800e2f2 <__malloc_unlock>:
 800e2f2:	4770      	bx	lr

0800e2f4 <_malloc_usable_size_r>:
 800e2f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2f8:	1f18      	subs	r0, r3, #4
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	bfbc      	itt	lt
 800e2fe:	580b      	ldrlt	r3, [r1, r0]
 800e300:	18c0      	addlt	r0, r0, r3
 800e302:	4770      	bx	lr

0800e304 <_init>:
 800e304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e306:	bf00      	nop
 800e308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e30a:	bc08      	pop	{r3}
 800e30c:	469e      	mov	lr, r3
 800e30e:	4770      	bx	lr

0800e310 <_fini>:
 800e310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e312:	bf00      	nop
 800e314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e316:	bc08      	pop	{r3}
 800e318:	469e      	mov	lr, r3
 800e31a:	4770      	bx	lr
