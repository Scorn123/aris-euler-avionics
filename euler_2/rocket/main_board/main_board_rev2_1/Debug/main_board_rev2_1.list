
main_board_rev2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014264  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001490  08014508  08014508  00024508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015998  08015998  0003020c  2**0
                  CONTENTS
  4 .ARM          00000008  08015998  08015998  00025998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080159a0  080159a0  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080159a0  080159a0  000259a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080159a4  080159a4  000259a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  24000000  080159a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00024020  2400020c  08015bb4  0003020c  2**2
                  ALLOC
 10 ._user_heap_stack 00001304  2402422c  08015bb4  0003422c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008cac4  00000000  00000000  0003023a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000e861  00000000  00000000  000bccfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000292bb  00000000  00000000  000cb55f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002bb8  00000000  00000000  000f4820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00004528  00000000  00000000  000f73d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00050040  00000000  00000000  000fb900  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000456b3  00000000  00000000  0014b940  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0019ddb2  00000000  00000000  00190ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0032eda5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008d1c  00000000  00000000  0032ee20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400020c 	.word	0x2400020c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080144ec 	.word	0x080144ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000210 	.word	0x24000210
 80002dc:	080144ec 	.word	0x080144ec

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <calculateCRC>:
uint16_t calculateCRC(uint8_t *data, uint8_t len) {
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;

	for (int i = 0; i < len + 2; i += 2) {
 8000690:	2200      	movs	r2, #0
 8000692:	f101 0c01 	add.w	ip, r1, #1
uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8000696:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t crc = 0;
 8000698:	4613      	mov	r3, r2
			carry = crc & 0x8000;
			crc <<= 1;
			if (c & shifter)
				crc++;
			if (carry)
				crc ^= 0x1021;
 800069a:	f241 0e21 	movw	lr, #4129	; 0x1021
	for (int i = 0; i < len + 2; i += 2) {
 800069e:	4594      	cmp	ip, r2
 80006a0:	da01      	bge.n	80006a6 <calculateCRC+0x16>
			shifter >>= 1;
		} while (shifter);
	}
	return crc;
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (i == len) {
 80006a6:	4291      	cmp	r1, r2
			c = 0;
 80006a8:	461f      	mov	r7, r3
 80006aa:	f44f 4600 	mov.w	r6, #32768	; 0x8000
			c = data[i + 1] << 8 | data[i];
 80006ae:	bf17      	itett	ne
 80006b0:	1884      	addne	r4, r0, r2
			c = 0;
 80006b2:	2400      	moveq	r4, #0
			c = data[i + 1] << 8 | data[i];
 80006b4:	7865      	ldrbne	r5, [r4, #1]
 80006b6:	5c84      	ldrbne	r4, [r0, r2]
 80006b8:	bf18      	it	ne
 80006ba:	ea44 2405 	orrne.w	r4, r4, r5, lsl #8
			c = 0;
 80006be:	2510      	movs	r5, #16
			crc <<= 1;
 80006c0:	005b      	lsls	r3, r3, #1
			if (c & shifter)
 80006c2:	4226      	tst	r6, r4
			shifter >>= 1;
 80006c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
			crc <<= 1;
 80006c8:	b29b      	uxth	r3, r3
				crc++;
 80006ca:	bf1c      	itt	ne
 80006cc:	3301      	addne	r3, #1
 80006ce:	b29b      	uxthne	r3, r3
			if (carry)
 80006d0:	043f      	lsls	r7, r7, #16
				crc ^= 0x1021;
 80006d2:	bf48      	it	mi
 80006d4:	ea83 030e 	eormi.w	r3, r3, lr
		} while (shifter);
 80006d8:	3d01      	subs	r5, #1
 80006da:	d101      	bne.n	80006e0 <calculateCRC+0x50>
	for (int i = 0; i < len + 2; i += 2) {
 80006dc:	3202      	adds	r2, #2
 80006de:	e7de      	b.n	800069e <calculateCRC+0xe>
 80006e0:	461f      	mov	r7, r3
 80006e2:	e7ed      	b.n	80006c0 <calculateCRC+0x30>

080006e4 <WriteCommand>:

	return status;

}

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer) {
 80006e4:	b570      	push	{r4, r5, r6, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	460d      	mov	r5, r1
	osStatus_t status = osError;

	uint8_t byte_stream_write[14] = { 0 };
 80006ea:	2100      	movs	r1, #0
osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer) {
 80006ec:	4606      	mov	r6, r0
 80006ee:	4614      	mov	r4, r2

	uint8_t dma_buffer[20] = { 0 };
 80006f0:	a807      	add	r0, sp, #28
 80006f2:	2214      	movs	r2, #20
	uint8_t byte_stream_write[14] = { 0 };
 80006f4:	f8cd 1012 	str.w	r1, [sp, #18]
 80006f8:	f8cd 1016 	str.w	r1, [sp, #22]
	uint8_t dma_buffer[20] = { 0 };
 80006fc:	f012 faa3 	bl	8012c46 <memset>

	byte_stream_write[0] = 0x90;			// DLE
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <WriteCommand+0xcc>)
	byte_stream_write[10] = data[1];		// Data
	byte_stream_write[11] = data[0];		// Data - high byte

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
	memcpy(crc_data_array, &byte_stream_write[2],
 8000702:	aa0c      	add	r2, sp, #48	; 0x30
	byte_stream_write[0] = 0x90;			// DLE
 8000704:	9303      	str	r3, [sp, #12]
	byte_stream_write[3] = 0x04;			// Length of Data in Words
 8000706:	2301      	movs	r3, #1
 8000708:	f88d 3010 	strb.w	r3, [sp, #16]
	byte_stream_write[5] = command[1];		// Index Low Byte
 800070c:	7873      	ldrb	r3, [r6, #1]
 800070e:	f88d 3011 	strb.w	r3, [sp, #17]
	byte_stream_write[6] = command[0];		// Index High byte
 8000712:	7833      	ldrb	r3, [r6, #0]

	HAL_UART_DMAResume(&huart4);
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
	osDelay(5);
	HAL_UART_DMAStop(&huart4);
	memcpy(rx_buffer, dma_buffer, 20);
 8000714:	ae0b      	add	r6, sp, #44	; 0x2c
	byte_stream_write[6] = command[0];		// Index High byte
 8000716:	f88d 3012 	strb.w	r3, [sp, #18]
	byte_stream_write[8] = data[3];			// Data - low byte
 800071a:	78eb      	ldrb	r3, [r5, #3]
 800071c:	f88d 3014 	strb.w	r3, [sp, #20]
	byte_stream_write[9] = data[2];			// Data
 8000720:	78ab      	ldrb	r3, [r5, #2]
 8000722:	f88d 3015 	strb.w	r3, [sp, #21]
	byte_stream_write[10] = data[1];		// Data
 8000726:	786b      	ldrb	r3, [r5, #1]
 8000728:	f88d 3016 	strb.w	r3, [sp, #22]
	byte_stream_write[11] = data[0];		// Data - high byte
 800072c:	782b      	ldrb	r3, [r5, #0]
 800072e:	f88d 3017 	strb.w	r3, [sp, #23]
	memcpy(crc_data_array, &byte_stream_write[2],
 8000732:	466b      	mov	r3, sp
 8000734:	f852 0d22 	ldr.w	r0, [r2, #-34]!
 8000738:	6851      	ldr	r1, [r2, #4]
 800073a:	8912      	ldrh	r2, [r2, #8]
 800073c:	c303      	stmia	r3!, {r0, r1}
	crc_calc = calculateCRC(crc_data_array, 10);
 800073e:	210a      	movs	r1, #10
	memcpy(crc_data_array, &byte_stream_write[2],
 8000740:	801a      	strh	r2, [r3, #0]
	crc_calc = calculateCRC(crc_data_array, 10);
 8000742:	4668      	mov	r0, sp
 8000744:	f7ff ffa4 	bl	8000690 <calculateCRC>
	byte_stream_write[12] = crc_calc & 0xFF;
 8000748:	f88d 0018 	strb.w	r0, [sp, #24]
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;
 800074c:	0a00      	lsrs	r0, r0, #8
	HAL_UART_Transmit_DMA(&huart4, byte_stream_write, 14);
 800074e:	220e      	movs	r2, #14
 8000750:	a903      	add	r1, sp, #12
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;
 8000752:	f88d 0019 	strb.w	r0, [sp, #25]
	HAL_UART_Transmit_DMA(&huart4, byte_stream_write, 14);
 8000756:	4817      	ldr	r0, [pc, #92]	; (80007b4 <WriteCommand+0xd0>)
 8000758:	f00a fe96 	bl	800b488 <HAL_UART_Transmit_DMA>
	HAL_UART_DMAResume(&huart4);
 800075c:	4815      	ldr	r0, [pc, #84]	; (80007b4 <WriteCommand+0xd0>)
 800075e:	f00a ff57 	bl	800b610 <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
 8000762:	2214      	movs	r2, #20
 8000764:	a907      	add	r1, sp, #28
 8000766:	4813      	ldr	r0, [pc, #76]	; (80007b4 <WriteCommand+0xd0>)
 8000768:	f00a fed8 	bl	800b51c <HAL_UART_Receive_DMA>
	osDelay(5);
 800076c:	2005      	movs	r0, #5
 800076e:	f00f f871 	bl	800f854 <osDelay>
	HAL_UART_DMAStop(&huart4);
 8000772:	4810      	ldr	r0, [pc, #64]	; (80007b4 <WriteCommand+0xd0>)
 8000774:	f00a ff76 	bl	800b664 <HAL_UART_DMAStop>
	memcpy(rx_buffer, dma_buffer, 20);
 8000778:	ab07      	add	r3, sp, #28
 800077a:	4622      	mov	r2, r4
 800077c:	461d      	mov	r5, r3
 800077e:	3208      	adds	r2, #8
 8000780:	cd03      	ldmia	r5!, {r0, r1}
 8000782:	42b5      	cmp	r5, r6
 8000784:	f842 0c08 	str.w	r0, [r2, #-8]
 8000788:	f842 1c04 	str.w	r1, [r2, #-4]
 800078c:	462b      	mov	r3, r5
 800078e:	d1f5      	bne.n	800077c <WriteCommand+0x98>
 8000790:	6828      	ldr	r0, [r5, #0]
 8000792:	6010      	str	r0, [r2, #0]

	/* Check if we have an error code */
	if ((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0) {
 8000794:	79a2      	ldrb	r2, [r4, #6]
 8000796:	79e3      	ldrb	r3, [r4, #7]
 8000798:	4313      	orrs	r3, r2
 800079a:	7962      	ldrb	r2, [r4, #5]
 800079c:	4313      	orrs	r3, r2
 800079e:	7922      	ldrb	r2, [r4, #4]
 80007a0:	4313      	orrs	r3, r2
		status = osOK;
	}

	return status;

}
 80007a2:	bf14      	ite	ne
 80007a4:	f04f 30ff 	movne.w	r0, #4294967295
 80007a8:	2000      	moveq	r0, #0
 80007aa:	b00c      	add	sp, #48	; 0x30
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	bf00      	nop
 80007b0:	04680290 	.word	0x04680290
 80007b4:	2401b45c 	.word	0x2401b45c

080007b8 <DisableMotor>:
osStatus_t DisableMotor() {
 80007b8:	b500      	push	{lr}
	command[0] = 0x60;
 80007ba:	f244 1360 	movw	r3, #16736	; 0x4160
osStatus_t DisableMotor() {
 80007be:	b089      	sub	sp, #36	; 0x24
	command[0] = 0x60;
 80007c0:	f8ad 3004 	strh.w	r3, [sp, #4]
	status = WriteCommand(command, data, rx_buffer_write);
 80007c4:	aa03      	add	r2, sp, #12
	data[0] = 0x00;
 80007c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	status = WriteCommand(command, data, rx_buffer_write);
 80007ca:	a902      	add	r1, sp, #8
 80007cc:	a801      	add	r0, sp, #4
	data[0] = 0x00;
 80007ce:	9302      	str	r3, [sp, #8]
	status = WriteCommand(command, data, rx_buffer_write);
 80007d0:	f7ff ff88 	bl	80006e4 <WriteCommand>
}
 80007d4:	b009      	add	sp, #36	; 0x24
 80007d6:	f85d fb04 	ldr.w	pc, [sp], #4

080007da <SetPositionMode>:
osStatus_t SetPositionMode(int8_t position_mode) {
 80007da:	b500      	push	{lr}
	command[0] = 0x60;
 80007dc:	f246 0360 	movw	r3, #24672	; 0x6060
osStatus_t SetPositionMode(int8_t position_mode) {
 80007e0:	b089      	sub	sp, #36	; 0x24
	command[0] = 0x60;
 80007e2:	f8ad 3004 	strh.w	r3, [sp, #4]
	status = WriteCommand(command, data, rx_buffer_write);
 80007e6:	aa03      	add	r2, sp, #12
	data[0] = 0x00;
 80007e8:	2300      	movs	r3, #0
	status = WriteCommand(command, data, rx_buffer_write);
 80007ea:	a902      	add	r1, sp, #8
	data[3] = position_mode;
 80007ec:	f88d 000b 	strb.w	r0, [sp, #11]
	status = WriteCommand(command, data, rx_buffer_write);
 80007f0:	a801      	add	r0, sp, #4
	data[0] = 0x00;
 80007f2:	f8ad 3008 	strh.w	r3, [sp, #8]
	data[1] = 0x00;
 80007f6:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 80007fa:	f7ff ff73 	bl	80006e4 <WriteCommand>
}
 80007fe:	b009      	add	sp, #36	; 0x24
 8000800:	f85d fb04 	ldr.w	pc, [sp], #4

08000804 <MoveToPositionPPM>:
osStatus_t MoveToPositionPPM(int32_t position) {
 8000804:	b510      	push	{r4, lr}
	command[0] = 0x60;
 8000806:	f647 2360 	movw	r3, #31328	; 0x7a60
osStatus_t MoveToPositionPPM(int32_t position) {
 800080a:	b088      	sub	sp, #32
	command[0] = 0x60;
 800080c:	f244 0460 	movw	r4, #16480	; 0x4060
	command[0] = 0x60;
 8000810:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (position >> 24) & 0xFF;
 8000814:	0e03      	lsrs	r3, r0, #24
	data[3] = position & 0xFF;
 8000816:	f88d 000b 	strb.w	r0, [sp, #11]
	status = WriteCommand(command, data, rx_buffer_write);
 800081a:	aa03      	add	r2, sp, #12
	data[0] = (position >> 24) & 0xFF;
 800081c:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (position >> 16) & 0xFF;
 8000820:	1403      	asrs	r3, r0, #16
	status = WriteCommand(command, data, rx_buffer_write);
 8000822:	a902      	add	r1, sp, #8
	data[1] = (position >> 16) & 0xFF;
 8000824:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (position >> 8) & 0xFF;
 8000828:	1203      	asrs	r3, r0, #8
	status = WriteCommand(command, data, rx_buffer_write);
 800082a:	a801      	add	r0, sp, #4
	data[2] = (position >> 8) & 0xFF;
 800082c:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 8000830:	f7ff ff58 	bl	80006e4 <WriteCommand>
	data[0] = 0x00;
 8000834:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
	status = WriteCommand(command, data, rx_buffer_write);
 8000838:	aa03      	add	r2, sp, #12
 800083a:	a902      	add	r1, sp, #8
 800083c:	a801      	add	r0, sp, #4
	data[0] = 0x00;
 800083e:	9302      	str	r3, [sp, #8]
	command[0] = 0x60;
 8000840:	f8ad 4004 	strh.w	r4, [sp, #4]
	status = WriteCommand(command, data, rx_buffer_write);
 8000844:	f7ff ff4e 	bl	80006e4 <WriteCommand>
	data[0] = 0x00;
 8000848:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
	status = WriteCommand(command, data, rx_buffer_write);
 800084c:	aa03      	add	r2, sp, #12
 800084e:	a902      	add	r1, sp, #8
 8000850:	a801      	add	r0, sp, #4
	command[0] = 0x60;
 8000852:	f8ad 4004 	strh.w	r4, [sp, #4]
	data[0] = 0x00;
 8000856:	9302      	str	r3, [sp, #8]
	status = WriteCommand(command, data, rx_buffer_write);
 8000858:	f7ff ff44 	bl	80006e4 <WriteCommand>
}
 800085c:	b008      	add	sp, #32
 800085e:	bd10      	pop	{r4, pc}

08000860 <ConfigurePPM>:
		int32_t deceleration) {
 8000860:	b530      	push	{r4, r5, lr}
	command[0] = 0x60;
 8000862:	f248 1360 	movw	r3, #33120	; 0x8160
		int32_t deceleration) {
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	460d      	mov	r5, r1
 800086a:	4614      	mov	r4, r2
	command[0] = 0x60;
 800086c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (velocity >> 24) & 0xFF;
 8000870:	0e03      	lsrs	r3, r0, #24
	data[3] = velocity & 0xFF;
 8000872:	f88d 000b 	strb.w	r0, [sp, #11]
	status = WriteCommand(command, data, rx_buffer_write);
 8000876:	aa03      	add	r2, sp, #12
	data[0] = (velocity >> 24) & 0xFF;
 8000878:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (velocity >> 16) & 0xFF;
 800087c:	1403      	asrs	r3, r0, #16
	status = WriteCommand(command, data, rx_buffer_write);
 800087e:	a902      	add	r1, sp, #8
	data[1] = (velocity >> 16) & 0xFF;
 8000880:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (velocity >> 8) & 0xFF;
 8000884:	1203      	asrs	r3, r0, #8
	status = WriteCommand(command, data, rx_buffer_write);
 8000886:	a801      	add	r0, sp, #4
	data[2] = (velocity >> 8) & 0xFF;
 8000888:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 800088c:	f7ff ff2a 	bl	80006e4 <WriteCommand>
	command[0] = 0x60;
 8000890:	f248 3360 	movw	r3, #33632	; 0x8360
	status = WriteCommand(command, data, rx_buffer_write);
 8000894:	aa03      	add	r2, sp, #12
 8000896:	a902      	add	r1, sp, #8
 8000898:	a801      	add	r0, sp, #4
	command[0] = 0x60;
 800089a:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (acceleration >> 24) & 0xFF;
 800089e:	0e2b      	lsrs	r3, r5, #24
	data[3] = acceleration & 0xFF;
 80008a0:	f88d 500b 	strb.w	r5, [sp, #11]
	data[0] = (acceleration >> 24) & 0xFF;
 80008a4:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (acceleration >> 16) & 0xFF;
 80008a8:	142b      	asrs	r3, r5, #16
 80008aa:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (acceleration >> 8) & 0xFF;
 80008ae:	122b      	asrs	r3, r5, #8
 80008b0:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 80008b4:	f7ff ff16 	bl	80006e4 <WriteCommand>
	command[0] = 0x60;
 80008b8:	f248 4360 	movw	r3, #33888	; 0x8460
	status = WriteCommand(command, data, rx_buffer_write);
 80008bc:	aa03      	add	r2, sp, #12
 80008be:	a902      	add	r1, sp, #8
 80008c0:	a801      	add	r0, sp, #4
	command[0] = 0x60;
 80008c2:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (deceleration >> 24) & 0xFF;
 80008c6:	0e23      	lsrs	r3, r4, #24
	data[3] = deceleration & 0xFF;
 80008c8:	f88d 400b 	strb.w	r4, [sp, #11]
	data[0] = (deceleration >> 24) & 0xFF;
 80008cc:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (deceleration >> 16) & 0xFF;
 80008d0:	1423      	asrs	r3, r4, #16
 80008d2:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (deceleration >> 8) & 0xFF;
 80008d6:	1223      	asrs	r3, r4, #8
 80008d8:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 80008dc:	f7ff ff02 	bl	80006e4 <WriteCommand>
}
 80008e0:	b009      	add	sp, #36	; 0x24
 80008e2:	bd30      	pop	{r4, r5, pc}

080008e4 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer) {
 80008e4:	b570      	push	{r4, r5, r6, lr}
 80008e6:	b08e      	sub	sp, #56	; 0x38
 80008e8:	4605      	mov	r5, r0
	osStatus_t status = osError;

	uint8_t byte_stream_read[10];

	uint8_t dma_buffer[30] = { 0 };
 80008ea:	221e      	movs	r2, #30
osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer) {
 80008ec:	460c      	mov	r4, r1
	uint8_t dma_buffer[30] = { 0 };
 80008ee:	a806      	add	r0, sp, #24
 80008f0:	2100      	movs	r1, #0
 80008f2:	f012 f9a8 	bl	8012c46 <memset>

	byte_stream_read[0] = 0x90;				// DLE
 80008f6:	4b26      	ldr	r3, [pc, #152]	; (8000990 <ReadCommand+0xac>)
	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
	memcpy(crc_data_array, &byte_stream_read[2], 6 * sizeof(*byte_stream_read));

	uint16_t crc_calc = 0;
	crc_calc = calculateCRC(crc_data_array, 6);
 80008f8:	2106      	movs	r1, #6

	HAL_UART_DMAResume(&huart4);
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
	osDelay(5);
	HAL_UART_DMAStop(&huart4);
	memcpy(rx_buffer, dma_buffer, 20);
 80008fa:	ae0a      	add	r6, sp, #40	; 0x28
	byte_stream_read[0] = 0x90;				// DLE
 80008fc:	9303      	str	r3, [sp, #12]
	byte_stream_read[3] = 0x02;				// Length of stuff sent
 80008fe:	2301      	movs	r3, #1
 8000900:	f88d 3010 	strb.w	r3, [sp, #16]
	byte_stream_read[5] = command[1];		// Index Low Byte
 8000904:	786b      	ldrb	r3, [r5, #1]
 8000906:	f88d 3011 	strb.w	r3, [sp, #17]
	byte_stream_read[6] = command[0];		// Index High byte
 800090a:	782b      	ldrb	r3, [r5, #0]
 800090c:	f88d 3012 	strb.w	r3, [sp, #18]
	byte_stream_read[7] = 0x00;				// Subindex of object
 8000910:	2300      	movs	r3, #0
 8000912:	f88d 3013 	strb.w	r3, [sp, #19]
	memcpy(crc_data_array, &byte_stream_read[2], 6 * sizeof(*byte_stream_read));
 8000916:	ab0e      	add	r3, sp, #56	; 0x38
 8000918:	f853 0d2a 	ldr.w	r0, [r3, #-42]!
 800091c:	889b      	ldrh	r3, [r3, #4]
 800091e:	9001      	str	r0, [sp, #4]
	crc_calc = calculateCRC(crc_data_array, 6);
 8000920:	a801      	add	r0, sp, #4
	memcpy(crc_data_array, &byte_stream_read[2], 6 * sizeof(*byte_stream_read));
 8000922:	f8ad 3008 	strh.w	r3, [sp, #8]
	crc_calc = calculateCRC(crc_data_array, 6);
 8000926:	f7ff feb3 	bl	8000690 <calculateCRC>
	byte_stream_read[8] = crc_calc & 0xFF;
 800092a:	f88d 0014 	strb.w	r0, [sp, #20]
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;
 800092e:	0a00      	lsrs	r0, r0, #8
	HAL_UART_Transmit_DMA(&huart4, byte_stream_read, 10);
 8000930:	220a      	movs	r2, #10
 8000932:	a903      	add	r1, sp, #12
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;
 8000934:	f88d 0015 	strb.w	r0, [sp, #21]
	HAL_UART_Transmit_DMA(&huart4, byte_stream_read, 10);
 8000938:	4816      	ldr	r0, [pc, #88]	; (8000994 <ReadCommand+0xb0>)
 800093a:	f00a fda5 	bl	800b488 <HAL_UART_Transmit_DMA>
	HAL_UART_DMAResume(&huart4);
 800093e:	4815      	ldr	r0, [pc, #84]	; (8000994 <ReadCommand+0xb0>)
 8000940:	f00a fe66 	bl	800b610 <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
 8000944:	2214      	movs	r2, #20
 8000946:	a906      	add	r1, sp, #24
 8000948:	4812      	ldr	r0, [pc, #72]	; (8000994 <ReadCommand+0xb0>)
 800094a:	f00a fde7 	bl	800b51c <HAL_UART_Receive_DMA>
	osDelay(5);
 800094e:	2005      	movs	r0, #5
 8000950:	f00e ff80 	bl	800f854 <osDelay>
	HAL_UART_DMAStop(&huart4);
 8000954:	480f      	ldr	r0, [pc, #60]	; (8000994 <ReadCommand+0xb0>)
 8000956:	f00a fe85 	bl	800b664 <HAL_UART_DMAStop>
	memcpy(rx_buffer, dma_buffer, 20);
 800095a:	ab06      	add	r3, sp, #24
 800095c:	4622      	mov	r2, r4
 800095e:	461d      	mov	r5, r3
 8000960:	3208      	adds	r2, #8
 8000962:	cd03      	ldmia	r5!, {r0, r1}
 8000964:	42b5      	cmp	r5, r6
 8000966:	f842 0c08 	str.w	r0, [r2, #-8]
 800096a:	f842 1c04 	str.w	r1, [r2, #-4]
 800096e:	462b      	mov	r3, r5
 8000970:	d1f5      	bne.n	800095e <ReadCommand+0x7a>
 8000972:	6828      	ldr	r0, [r5, #0]
 8000974:	6010      	str	r0, [r2, #0]

	/* check if we have an error code */
	if ((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0) {
 8000976:	79a2      	ldrb	r2, [r4, #6]
 8000978:	79e3      	ldrb	r3, [r4, #7]
 800097a:	4313      	orrs	r3, r2
 800097c:	7962      	ldrb	r2, [r4, #5]
 800097e:	4313      	orrs	r3, r2
 8000980:	7922      	ldrb	r2, [r4, #4]
 8000982:	4313      	orrs	r3, r2
		status = osOK;
	}
	return status;

}
 8000984:	bf14      	ite	ne
 8000986:	f04f 30ff 	movne.w	r0, #4294967295
 800098a:	2000      	moveq	r0, #0
 800098c:	b00e      	add	sp, #56	; 0x38
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	02600290 	.word	0x02600290
 8000994:	2401b45c 	.word	0x2401b45c

08000998 <EnableMotor>:
osStatus_t EnableMotor() {
 8000998:	b510      	push	{r4, lr}
 800099a:	b08c      	sub	sp, #48	; 0x30
	data[0] = 0x00;
 800099c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
	command[0] = 0x60;
 80009a0:	f244 0460 	movw	r4, #16480	; 0x4060
	status = WriteCommand(command, data, rx_buffer_write);
 80009a4:	aa02      	add	r2, sp, #8
 80009a6:	a901      	add	r1, sp, #4
 80009a8:	4668      	mov	r0, sp
	data[0] = 0x00;
 80009aa:	9301      	str	r3, [sp, #4]
	command[0] = 0x60;
 80009ac:	f8ad 4000 	strh.w	r4, [sp]
	status = WriteCommand(command, data, rx_buffer_write);
 80009b0:	f7ff fe98 	bl	80006e4 <WriteCommand>
	data[0] = 0x00;
 80009b4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
	status = WriteCommand(command, data, rx_buffer_write);
 80009b8:	aa02      	add	r2, sp, #8
 80009ba:	a901      	add	r1, sp, #4
 80009bc:	4668      	mov	r0, sp
	data[0] = 0x00;
 80009be:	9301      	str	r3, [sp, #4]
	command[0] = 0x60;
 80009c0:	f8ad 4000 	strh.w	r4, [sp]
	status = WriteCommand(command, data, rx_buffer_write);
 80009c4:	f7ff fe8e 	bl	80006e4 <WriteCommand>
	command[0] = 0x60;
 80009c8:	f244 1360 	movw	r3, #16736	; 0x4160
	status = ReadCommand(command, rx_buffer_read);
 80009cc:	a907      	add	r1, sp, #28
 80009ce:	4668      	mov	r0, sp
	command[0] = 0x60;
 80009d0:	f8ad 3000 	strh.w	r3, [sp]
	status = ReadCommand(command, rx_buffer_read);
 80009d4:	f7ff ff86 	bl	80008e4 <ReadCommand>
	if (rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04) {
 80009d8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80009dc:	2b37      	cmp	r3, #55	; 0x37
 80009de:	d104      	bne.n	80009ea <EnableMotor+0x52>
 80009e0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80009e4:	2b04      	cmp	r3, #4
		status = osOK;
 80009e6:	bf08      	it	eq
 80009e8:	2000      	moveq	r0, #0
}
 80009ea:	b00c      	add	sp, #48	; 0x30
 80009ec:	bd10      	pop	{r4, pc}

080009ee <GetPosition>:
osStatus_t GetPosition(int32_t *position) {
 80009ee:	b510      	push	{r4, lr}
 80009f0:	b086      	sub	sp, #24
	command[0] = 0x60;
 80009f2:	f246 4360 	movw	r3, #25696	; 0x6460
osStatus_t GetPosition(int32_t *position) {
 80009f6:	4604      	mov	r4, r0
	status = ReadCommand(command, rx_buffer_read);
 80009f8:	a901      	add	r1, sp, #4
 80009fa:	4668      	mov	r0, sp
	command[0] = 0x60;
 80009fc:	f8ad 3000 	strh.w	r3, [sp]
	status = ReadCommand(command, rx_buffer_read);
 8000a00:	f7ff ff70 	bl	80008e4 <ReadCommand>
	*position = rx_buffer_read[8] + (rx_buffer_read[9] << 8)
 8000a04:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8000a08:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000a0c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			+ (rx_buffer_read[10] << 16) + (rx_buffer_read[11] << 24);
 8000a10:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8000a14:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8000a18:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000a1c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
	*position = rx_buffer_read[8] + (rx_buffer_read[9] << 8)
 8000a20:	6023      	str	r3, [r4, #0]
}
 8000a22:	b006      	add	sp, #24
 8000a24:	bd10      	pop	{r4, pc}

08000a26 <_gps_search_start>:

#include "GPS/gps.h"

const uint8_t ubxgga[HEADER_SIZE] = {'G','G','A'};

uint32_t _gps_search_start(uint8_t *arr){
 8000a26:	3001      	adds	r0, #1
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 8000a28:	2303      	movs	r3, #3
 8000a2a:	f240 32a2 	movw	r2, #930	; 0x3a2
			{
			  if(arr[i-2] == ubxgga[0] && arr[i-1] == ubxgga[1] && arr[i] == ubxgga[2])
 8000a2e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8000a32:	3301      	adds	r3, #1
 8000a34:	2947      	cmp	r1, #71	; 0x47
 8000a36:	d107      	bne.n	8000a48 <_gps_search_start+0x22>
 8000a38:	7801      	ldrb	r1, [r0, #0]
 8000a3a:	2947      	cmp	r1, #71	; 0x47
 8000a3c:	d104      	bne.n	8000a48 <_gps_search_start+0x22>
 8000a3e:	7841      	ldrb	r1, [r0, #1]
 8000a40:	2941      	cmp	r1, #65	; 0x41
 8000a42:	d101      	bne.n	8000a48 <_gps_search_start+0x22>
			    return i+1;
 8000a44:	4618      	mov	r0, r3
 8000a46:	4770      	bx	lr
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d1f0      	bne.n	8000a2e <_gps_search_start+0x8>
			}
	return 0;
 8000a4c:	2000      	movs	r0, #0
}
 8000a4e:	4770      	bx	lr

08000a50 <_parse_data>:

uint8_t _parse_data (struct gps_device *dev, uint8_t* data){


	if (data[22] == 'N' || data[22] == 'S'){
 8000a50:	7d8b      	ldrb	r3, [r1, #22]
 8000a52:	2b4e      	cmp	r3, #78	; 0x4e
uint8_t _parse_data (struct gps_device *dev, uint8_t* data){
 8000a54:	b510      	push	{r4, lr}
 8000a56:	ed2d 8b0a 	vpush	{d8-d12}
	if (data[22] == 'N' || data[22] == 'S'){
 8000a5a:	f040 80dd 	bne.w	8000c18 <_parse_data+0x1c8>
 8000a5e:	1e4b      	subs	r3, r1, #1
 8000a60:	f101 0445 	add.w	r4, r1, #69	; 0x45

		// ASCII to decimal conversion
		for(int i = 0; i < DATA_SIZE; i++) data[i] = data[i]-48;
 8000a64:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8000a68:	3a30      	subs	r2, #48	; 0x30
 8000a6a:	42a3      	cmp	r3, r4
 8000a6c:	701a      	strb	r2, [r3, #0]
 8000a6e:	d1f9      	bne.n	8000a64 <_parse_data+0x14>


		dev->data.hour = data[1]*10 + data[2];
 8000a70:	788c      	ldrb	r4, [r1, #2]
 8000a72:	230a      	movs	r3, #10
 8000a74:	784a      	ldrb	r2, [r1, #1]
 8000a76:	fb13 4202 	smlabb	r2, r3, r2, r4
 8000a7a:	6082      	str	r2, [r0, #8]
		dev->data.minute = data[3]*10 + data[4];
 8000a7c:	790c      	ldrb	r4, [r1, #4]
 8000a7e:	78ca      	ldrb	r2, [r1, #3]
 8000a80:	fb13 4202 	smlabb	r2, r3, r2, r4
 8000a84:	60c2      	str	r2, [r0, #12]
		dev->data.second = data[5]*10 + data[6];
 8000a86:	798a      	ldrb	r2, [r1, #6]
 8000a88:	794c      	ldrb	r4, [r1, #5]
 8000a8a:	fb13 2304 	smlabb	r3, r3, r4, r2
 8000a8e:	6103      	str	r3, [r0, #16]

		dev->data.lat_deg = data[11]*10 +data[12];
 8000a90:	7acb      	ldrb	r3, [r1, #11]
 8000a92:	7b0a      	ldrb	r2, [r1, #12]
 8000a94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a98:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000a9c:	7543      	strb	r3, [r0, #21]
		dev->data.lat_decimal = (data[13]*1e7 + data[14]*1e6 + data[16]*1e5 + data[17]*1e4 + data[18]*1e3 + data[19]*1e2 + data[20])/6;
 8000a9e:	7ccb      	ldrb	r3, [r1, #19]
 8000aa0:	ee05 3a10 	vmov	s10, r3
 8000aa4:	7c8b      	ldrb	r3, [r1, #18]
 8000aa6:	ee06 3a10 	vmov	s12, r3
 8000aaa:	7c4b      	ldrb	r3, [r1, #17]
 8000aac:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 8000ab0:	ee04 3a10 	vmov	s8, r3
 8000ab4:	7c0b      	ldrb	r3, [r1, #16]
 8000ab6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8000aba:	ee03 3a10 	vmov	s6, r3
 8000abe:	7b4b      	ldrb	r3, [r1, #13]
 8000ac0:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8000ac4:	ee02 3a10 	vmov	s4, r3
 8000ac8:	7b8b      	ldrb	r3, [r1, #14]
 8000aca:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8000ace:	ee07 3a10 	vmov	s14, r3
 8000ad2:	eeb8 2bc2 	vcvt.f64.s32	d2, s4
 8000ad6:	7d0b      	ldrb	r3, [r1, #20]
 8000ad8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000adc:	ed9f ab52 	vldr	d10, [pc, #328]	; 8000c28 <_parse_data+0x1d8>
 8000ae0:	ed9f 9b53 	vldr	d9, [pc, #332]	; 8000c30 <_parse_data+0x1e0>
 8000ae4:	ed9f 8b54 	vldr	d8, [pc, #336]	; 8000c38 <_parse_data+0x1e8>
 8000ae8:	ee27 7b0a 	vmul.f64	d7, d7, d10
 8000aec:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8000c40 <_parse_data+0x1f0>
 8000af0:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8000c48 <_parse_data+0x1f8>
 8000af4:	eea2 7b09 	vfma.f64	d7, d2, d9
 8000af8:	ed9f 2b55 	vldr	d2, [pc, #340]	; 8000c50 <_parse_data+0x200>
 8000afc:	eea3 7b08 	vfma.f64	d7, d3, d8
 8000b00:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 8000b04:	eea4 7b00 	vfma.f64	d7, d4, d0
 8000b08:	eea6 7b01 	vfma.f64	d7, d6, d1
 8000b0c:	eea5 7b02 	vfma.f64	d7, d5, d2
 8000b10:	eeb0 6b47 	vmov.f64	d6, d7
 8000b14:	ee07 3a10 	vmov	s14, r3
 8000b18:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000b1c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b20:	ee87 6b03 	vdiv.f64	d6, d7, d3
 8000b24:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000b28:	ed80 6a06 	vstr	s12, [r0, #24]

		dev->data.lon_deg = data[25]*10 +data[26];
 8000b2c:	7e4b      	ldrb	r3, [r1, #25]
 8000b2e:	7e8a      	ldrb	r2, [r1, #26]
 8000b30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b34:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000b38:	7703      	strb	r3, [r0, #28]
		dev->data.lon_decimal = (data[27]*1e7 + data[28]*1e6 + data[30]*1e5 + data[31]*1e4 + data[32]*1e3 + data[33]*1e2 + data[34])/6;
 8000b3a:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 8000b3e:	ee0c 3a10 	vmov	s24, r3
 8000b42:	f891 3020 	ldrb.w	r3, [r1, #32]
 8000b46:	ee0b 3a10 	vmov	s22, r3
 8000b4a:	7fcb      	ldrb	r3, [r1, #31]
 8000b4c:	eeb8 cbcc 	vcvt.f64.s32	d12, s24
 8000b50:	ee06 3a10 	vmov	s12, r3
 8000b54:	7f8b      	ldrb	r3, [r1, #30]
 8000b56:	eeb8 bbcb 	vcvt.f64.s32	d11, s22
 8000b5a:	ee05 3a10 	vmov	s10, r3
 8000b5e:	7ecb      	ldrb	r3, [r1, #27]
 8000b60:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8000b64:	ee04 3a10 	vmov	s8, r3
 8000b68:	7f0b      	ldrb	r3, [r1, #28]
 8000b6a:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 8000b6e:	ee07 3a10 	vmov	s14, r3
 8000b72:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8000b76:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
 8000b7a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000b7e:	ee27 7b0a 	vmul.f64	d7, d7, d10
 8000b82:	eea4 7b09 	vfma.f64	d7, d4, d9
 8000b86:	eea5 7b08 	vfma.f64	d7, d5, d8
 8000b8a:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000b8e:	eeab 7b01 	vfma.f64	d7, d11, d1
 8000b92:	eeac 7b02 	vfma.f64	d7, d12, d2
 8000b96:	eeb0 ab47 	vmov.f64	d10, d7
 8000b9a:	ee07 3a10 	vmov	s14, r3
 8000b9e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000ba2:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8000ba6:	ee87 6b03 	vdiv.f64	d6, d7, d3
 8000baa:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000bae:	ed80 6a08 	vstr	s12, [r0, #32]

		dev->data.fix = data[38];
 8000bb2:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8000bb6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

		dev->data.satellite = data[40]*10 + data[41];
 8000bba:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000bbe:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8000bc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bc6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000bca:	7503      	strb	r3, [r0, #20]

		dev->data.HDOP = data[43]*100+data[45]*10+data[46];
 8000bcc:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8000bd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bd4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000bd8:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8000bdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000be6:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
 8000bea:	4413      	add	r3, r2
 8000bec:	84c3      	strh	r3, [r0, #38]	; 0x26

		dev->data.altitude= data[48]*100+data[49]*10+data[50];
 8000bee:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8000bf2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bf6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000bfa:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8000bfe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000c08:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
 8000c0c:	4413      	add	r3, r2
 8000c0e:	8503      	strh	r3, [r0, #40]	; 0x28
 8000c10:	2001      	movs	r0, #1
	else {
		dev->data.fix = 0;
		return 0;
	}
	return 1;
}
 8000c12:	ecbd 8b0a 	vpop	{d8-d12}
 8000c16:	bd10      	pop	{r4, pc}
	if (data[22] == 'N' || data[22] == 'S'){
 8000c18:	2b53      	cmp	r3, #83	; 0x53
 8000c1a:	f43f af20 	beq.w	8000a5e <_parse_data+0xe>
		dev->data.fix = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		return 0;
 8000c24:	4618      	mov	r0, r3
 8000c26:	e7f4      	b.n	8000c12 <_parse_data+0x1c2>
 8000c28:	00000000 	.word	0x00000000
 8000c2c:	412e8480 	.word	0x412e8480
 8000c30:	00000000 	.word	0x00000000
 8000c34:	416312d0 	.word	0x416312d0
 8000c38:	00000000 	.word	0x00000000
 8000c3c:	40f86a00 	.word	0x40f86a00
 8000c40:	00000000 	.word	0x00000000
 8000c44:	40c38800 	.word	0x40c38800
 8000c48:	00000000 	.word	0x00000000
 8000c4c:	408f4000 	.word	0x408f4000
 8000c50:	00000000 	.word	0x00000000
 8000c54:	40590000 	.word	0x40590000

08000c58 <gps_dma_init>:


void gps_dma_init(struct gps_device *dev){
 8000c58:	b510      	push	{r4, lr}
 8000c5a:	4604      	mov	r4, r0
	HAL_UART_DMAStop(dev->uart_bus);
 8000c5c:	6840      	ldr	r0, [r0, #4]
 8000c5e:	f00a fd01 	bl	800b664 <HAL_UART_DMAStop>

	HAL_UART_Receive_DMA(dev->uart_bus, gps_data[dev->id], BUFFER_SIZE);
 8000c62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c66:	7821      	ldrb	r1, [r4, #0]
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <gps_dma_init+0x28>)
 8000c6a:	6860      	ldr	r0, [r4, #4]
 8000c6c:	fb02 3101 	mla	r1, r2, r1, r3
 8000c70:	f00a fc54 	bl	800b51c <HAL_UART_Receive_DMA>

	HAL_UART_DMAResume(dev->uart_bus);
 8000c74:	6860      	ldr	r0, [r4, #4]
}
 8000c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_DMAResume(dev->uart_bus);
 8000c7a:	f00a bcc9 	b.w	800b610 <HAL_UART_DMAResume>
 8000c7e:	bf00      	nop
 8000c80:	24009cda 	.word	0x24009cda

08000c84 <gps_read_sensor>:



uint8_t gps_read_sensor (struct gps_device *dev){
 8000c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c86:	4604      	mov	r4, r0
	HAL_UART_DMAPause(dev->uart_bus);
 8000c88:	6840      	ldr	r0, [r0, #4]
 8000c8a:	f00a fc93 	bl	800b5b4 <HAL_UART_DMAPause>

	uint32_t data_start = _gps_search_start(gps_data[dev->id]);
 8000c8e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000c92:	490d      	ldr	r1, [pc, #52]	; (8000cc8 <gps_read_sensor+0x44>)
 8000c94:	7827      	ldrb	r7, [r4, #0]
 8000c96:	4e0d      	ldr	r6, [pc, #52]	; (8000ccc <gps_read_sensor+0x48>)
 8000c98:	fb05 1507 	mla	r5, r5, r7, r1
 8000c9c:	4628      	mov	r0, r5
 8000c9e:	f7ff fec2 	bl	8000a26 <_gps_search_start>
	if (data_start > 0) memcpy(gps_gga[dev->id], gps_data[dev->id] + data_start, DATA_SIZE);
 8000ca2:	b128      	cbz	r0, 8000cb0 <gps_read_sensor+0x2c>
 8000ca4:	2246      	movs	r2, #70	; 0x46
 8000ca6:	1829      	adds	r1, r5, r0
 8000ca8:	fb07 6002 	mla	r0, r7, r2, r6
 8000cac:	f011 ffc0 	bl	8012c30 <memcpy>

	HAL_UART_DMAResume(dev->uart_bus);
 8000cb0:	6860      	ldr	r0, [r4, #4]
 8000cb2:	f00a fcad 	bl	800b610 <HAL_UART_DMAResume>

	return _parse_data(dev, gps_gga[dev->id]);
 8000cb6:	7821      	ldrb	r1, [r4, #0]
 8000cb8:	2346      	movs	r3, #70	; 0x46
 8000cba:	4620      	mov	r0, r4
 8000cbc:	fb01 6103 	mla	r1, r1, r3, r6
}
 8000cc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return _parse_data(dev, gps_gga[dev->id]);
 8000cc4:	f7ff bec4 	b.w	8000a50 <_parse_data>
 8000cc8:	24009cda 	.word	0x24009cda
 8000ccc:	24009c08 	.word	0x24009c08

08000cd0 <gps_reset>:
	dev->data.hour = 0;
	dev->data.minute = 0;
	dev->data.second = 0;

	dev->data.lat_deg = 0;
	dev->data.lat_decimal = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	6183      	str	r3, [r0, #24]

	dev->data.lon_deg = 0;
 8000cd4:	7703      	strb	r3, [r0, #28]
	dev->data.lon_decimal = 0;
 8000cd6:	6203      	str	r3, [r0, #32]

	dev->data.fix = 0;
 8000cd8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	dev->data.minute = 0;
 8000cdc:	6103      	str	r3, [r0, #16]
	dev->data.second = 0;
 8000cde:	8283      	strh	r3, [r0, #20]

	dev->data.satellite = 0;

	dev->data.HDOP = 0;
 8000ce0:	84c3      	strh	r3, [r0, #38]	; 0x26

	dev->data.altitude= 0;
 8000ce2:	8503      	strh	r3, [r0, #40]	; 0x28
	dev->data.hour = 0;
 8000ce4:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 8000ce8:	4770      	bx	lr
	...

08000cec <init_coeff>:

#include "Sim_Con/controller.h"

/* In this file, all the controller related function as the controller itself will be defined */

void init_coeff(control_data_t *control_data){
 8000cec:	b570      	push	{r4, r5, r6, lr}
    /* The coefficients are sorted in the following way: Gain 1, Gain 2, Gain 3, Optimal Trajectory*/
    const long double coeff0[POLY_DEG+1] = {};
 8000cee:	24f8      	movs	r4, #248	; 0xf8
void init_coeff(control_data_t *control_data){
 8000cf0:	f5ad 7d78 	sub.w	sp, sp, #992	; 0x3e0
    const long double coeff0[POLY_DEG+1] = {};
 8000cf4:	4e1a      	ldr	r6, [pc, #104]	; (8000d60 <init_coeff+0x74>)
void init_coeff(control_data_t *control_data){
 8000cf6:	4605      	mov	r5, r0
    const long double coeff0[POLY_DEG+1] = {-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000868001509274695588003190560506144, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000006734144053942240645165763223097866695, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000017943967053724527790526120972453756926449, 0.000000000000000000000000000000000000000000000000000000000000000000000000000011600941491935255106453433215669137342465324, 0.000000000000000000000000000000000000000000000000000000000000000000000000024003842653456406415201075555759650350223677265, -0.000000000000000000000000000000000000000000000000000000000000000000000018111809768284050761098616789038040361039057944148, -0.000000000000000000000000000000000000000000000000000000000000000000048626795322807690622140144022438412562738932905020920, 0.000000000000000000000000000000000000000000000000000000000000000007420489314715460137826453965576002362709190070801883230, 0.000000000000000000000000000000000000000000000000000000000000094912489417915252510561501393729204256289219371483064906746, 0.000000000000000000000000000000000000000000000000000000000052920131301064704984426808487039401202507286820178230977021240, -0.000000000000000000000000000000000000000000000000000000142328584943567111040099678669599125806190931530978604529693922433, -0.000000000000000000000000000000000000000000000000000206637043647508274878826573874873913387740240970744978496233572370358, 0.000000000000000000000000000000000000000000000000130334867334591797705159920212787647558817394492967999556852539610786702, 0.000000000000000000000000000000000000000000000490489866515998216867458404379428187117827265098035412660415750117880703074, 0.000000000000000000000000000000000000000000026867380644656436850000702522289482657478939067887135595991052719132239096434, -0.000000000000000000000000000000000000000958336406527050599461484506529266000580916845814498770483885341489941271723386135, -0.000000000000000000000000000000000000380110572500376264930409844941662974846208384219693874197621108524730596015191124200, 0.000000000000000000000000000000001846228870037127080708718400229324628612006979121258828532160962041221158639206452239598, 0.000000000000000000000000000000701063223175594818444883139638145152049380684396387992241048156796428280836621271983333248, -0.000000000000000000000000003903941552353450564236090389613619312482757597027505055531398063059663437746049652332658297382, 0.000000000000000000000000921341687636553511160316676520504205771478259592850755826738722497823430579444448085268959403038, 0.000000000000000000006947147284172662813389137056975705843499706683819221137788160747028598507313290610909461975097656250, -0.000000000000000011979567065868153518301726372320952852497657147544385392023968961439095437526702880859375000000000000000, 0.000000000000010700672963404348022988568119097284740871703703768424986719765001907944679260253906250000000000000000000000, -0.000000000006235098773362018059773535637897243634301946979547892624395899474620819091796875000000000000000000000000000000, 0.000000002525183589744375369531118971666051875590852660025120712816715240478515625000000000000000000000000000000000000000, -0.000000720864945346716686813465149036295187556788732763379812240600585937500000000000000000000000000000000000000000000000, 0.000142835180023407189121506521978233195113716647028923034667968750000000000000000000000000000000000000000000000000000000, -0.018733383728017274222343857559280877467244863510131835937500000000000000000000000000000000000000000000000000000000000000, 1.463511559528952288289360694761853665113449096679687500000000000000000000000000000000000000000000000000000000000000000000, -51.561961866915225982666015625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000};
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	4668      	mov	r0, sp
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	f011 ff97 	bl	8012c30 <memcpy>
    const long double coeff1[POLY_DEG+1] = {};
 8000d02:	4622      	mov	r2, r4
 8000d04:	1931      	adds	r1, r6, r4
 8000d06:	eb0d 0004 	add.w	r0, sp, r4
 8000d0a:	f011 ff91 	bl	8012c30 <memcpy>
    const long double coeff2[POLY_DEG+1] = {};
 8000d0e:	4622      	mov	r2, r4
 8000d10:	f506 71f8 	add.w	r1, r6, #496	; 0x1f0
 8000d14:	a87c      	add	r0, sp, #496	; 0x1f0
 8000d16:	f011 ff8b 	bl	8012c30 <memcpy>
    const long double coeff3[POLY_DEG+1] = {};
 8000d1a:	4622      	mov	r2, r4
 8000d1c:	f506 713a 	add.w	r1, r6, #744	; 0x2e8
 8000d20:	a8ba      	add	r0, sp, #744	; 0x2e8
 8000d22:	f011 ff85 	bl	8012c30 <memcpy>

    memcpy(control_data->poly_coeff[0], coeff0, sizeof(coeff0));
 8000d26:	4622      	mov	r2, r4
 8000d28:	4669      	mov	r1, sp
 8000d2a:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8000d2e:	f011 ff7f 	bl	8012c30 <memcpy>
    memcpy(control_data->poly_coeff[1], coeff1, sizeof(coeff1));
 8000d32:	4622      	mov	r2, r4
 8000d34:	eb0d 0104 	add.w	r1, sp, r4
 8000d38:	f505 709c 	add.w	r0, r5, #312	; 0x138
 8000d3c:	f011 ff78 	bl	8012c30 <memcpy>
    memcpy(control_data->poly_coeff[2], coeff2, sizeof(coeff2));
 8000d40:	4622      	mov	r2, r4
 8000d42:	a97c      	add	r1, sp, #496	; 0x1f0
 8000d44:	f505 700c 	add.w	r0, r5, #560	; 0x230
 8000d48:	f011 ff72 	bl	8012c30 <memcpy>
    memcpy(control_data->poly_coeff[3], coeff3, sizeof(coeff3));
 8000d4c:	4622      	mov	r2, r4
 8000d4e:	a9ba      	add	r1, sp, #744	; 0x2e8
 8000d50:	f505 704a 	add.w	r0, r5, #808	; 0x328
 8000d54:	f011 ff6c 	bl	8012c30 <memcpy>
}
 8000d58:	f50d 7d78 	add.w	sp, sp, #992	; 0x3e0
 8000d5c:	bd70      	pop	{r4, r5, r6, pc}
 8000d5e:	bf00      	nop
 8000d60:	08014508 	.word	0x08014508

08000d64 <control_data_init>:
    }
}


void control_data_reset(control_data_t *control_data){
    control_data->control_input = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	6003      	str	r3, [r0, #0]
    control_data->reference_error = 0;
 8000d68:	6043      	str	r3, [r0, #4]
    control_data->integrated_error = 0;
 8000d6a:	6083      	str	r3, [r0, #8]
}

void control_data_init(control_data_t *control_data){
    control_data_reset(control_data);

    control_data->lowerboundary_aw = 0;
 8000d6c:	6183      	str	r3, [r0, #24]
    control_data->upperboundary_aw = 0;
 8000d6e:	61c3      	str	r3, [r0, #28]

    control_data->safety_counter = 0;
 8000d70:	2300      	movs	r3, #0
void control_data_init(control_data_t *control_data){
 8000d72:	b510      	push	{r4, lr}
    control_data->safety_counter = 0;
 8000d74:	8403      	strh	r3, [r0, #32]
void control_data_init(control_data_t *control_data){
 8000d76:	4604      	mov	r4, r0
    control_data->apogee_approach_phase = false;
 8000d78:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22

    init_coeff(control_data);
 8000d7c:	f7ff ffb6 	bl	8000cec <init_coeff>

    for(int i = 0; i < NUM_GAINS; i++){
        control_data->gains[i] = 0;
 8000d80:	2200      	movs	r2, #0
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 8000d88:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8000d8c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    }
}
 8000d90:	bd10      	pop	{r4, pc}
 8000d92:	0000      	movs	r0, r0
 8000d94:	0000      	movs	r0, r0
	...

08000d98 <evaluate_polyfit>:

/* Does the Polynomial Calculation of the reference velocity */
void evaluate_polyfit(control_data_t *control_data) {
 8000d98:	b570      	push	{r4, r5, r6, lr}
 8000d9a:	ed2d 8b02 	vpush	{d8}
    /* For Speed */
    double x_placeholder = 0;

    /* Reset gains */
    for (int i = 0; i < NUM_GAINS; i++) {
        control_data->gains[i] = 0;
 8000d9e:	ed9f 8b1e 	vldr	d8, [pc, #120]	; 8000e18 <evaluate_polyfit+0x80>
void evaluate_polyfit(control_data_t *control_data) {
 8000da2:	4604      	mov	r4, r0
 8000da4:	f100 0540 	add.w	r5, r0, #64	; 0x40
        control_data->gains[i] = 0;
 8000da8:	261e      	movs	r6, #30
 8000daa:	ed80 8b0a 	vstr	d8, [r0, #40]	; 0x28
 8000dae:	ed80 8b0c 	vstr	d8, [r0, #48]	; 0x30
 8000db2:	ed80 8b0e 	vstr	d8, [r0, #56]	; 0x38
    /* Reset ref_velocity_placeholder*/
    double ref_velocity_placeholder = 0;

    /* For loop */
    for (int i = 0; i < POLY_DEG + 1; ++i) {
        x_placeholder = pow(control_data->sf_ref_altitude_AGL, (double)(POLY_DEG - i));
 8000db6:	ee07 6a90 	vmov	s15, r6
 8000dba:	ed94 0a03 	vldr	s0, [r4, #12]
 8000dbe:	eeb8 1be7 	vcvt.f64.s32	d1, s15
 8000dc2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8000dc6:	f012 fcb7 	bl	8013738 <pow>
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8000dca:	f116 36ff 	adds.w	r6, r6, #4294967295
        control_data->gains[0] += control_data->poly_coeff[0][i] * x_placeholder;
 8000dce:	ecb5 6b02 	vldmia	r5!, {d6}
 8000dd2:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
 8000dd6:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000dda:	ed84 7b0a 	vstr	d7, [r4, #40]	; 0x28
        control_data->gains[1] += control_data->poly_coeff[1][i] * x_placeholder;
 8000dde:	ed94 7b0c 	vldr	d7, [r4, #48]	; 0x30
 8000de2:	ed95 6b3c 	vldr	d6, [r5, #240]	; 0xf0
 8000de6:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000dea:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
        control_data->gains[2] += control_data->poly_coeff[2][i] * x_placeholder;
 8000dee:	ed94 7b0e 	vldr	d7, [r4, #56]	; 0x38
 8000df2:	ed95 6b7a 	vldr	d6, [r5, #488]	; 0x1e8
 8000df6:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000dfa:	ed84 7b0e 	vstr	d7, [r4, #56]	; 0x38
        ref_velocity_placeholder += (control_data->poly_coeff[3][i] * x_placeholder);
 8000dfe:	ed95 7bb8 	vldr	d7, [r5, #736]	; 0x2e0
 8000e02:	eea7 8b00 	vfma.f64	d8, d7, d0
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8000e06:	d2d6      	bcs.n	8000db6 <evaluate_polyfit+0x1e>
    }

    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8000e08:	eef7 7bc8 	vcvt.f32.f64	s15, d8
}
 8000e0c:	ecbd 8b02 	vpop	{d8}
    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8000e10:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8000e14:	bd70      	pop	{r4, r5, r6, pc}
 8000e16:	bf00      	nop
	...

08000e20 <compute_antiwindup_boundaries>:

void compute_antiwindup_boundaries(control_data_t *control_data) {
    control_data->upperboundary_aw = fmaxf(M_AW *
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8000e20:	ed90 6a03 	vldr	s12, [r0, #12]
 8000e24:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8000e68 <compute_antiwindup_boundaries+0x48>
 8000e28:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000e2c:	ed9f 4b10 	vldr	d4, [pc, #64]	; 8000e70 <compute_antiwindup_boundaries+0x50>
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8000e30:	ee35 7b46 	vsub.f64	d7, d5, d6
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 8000e34:	eeb4 6bc5 	vcmpe.f64	d6, d5
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000e38:	ee27 7b04 	vmul.f64	d7, d7, d4
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 8000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000e40:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        control_data->upperboundary_aw = 0;
 8000e44:	bfc8      	it	gt
 8000e46:	2300      	movgt	r3, #0
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000e48:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        control_data->upperboundary_aw = 0;
 8000e4c:	bfc8      	it	gt
 8000e4e:	61c3      	strgt	r3, [r0, #28]
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000e50:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
 8000e54:	bfd8      	it	le
 8000e56:	ed80 7a07 	vstrle	s14, [r0, #28]
    }
    control_data->lowerboundary_aw = - control_data->upperboundary_aw;
 8000e5a:	edd0 7a07 	vldr	s15, [r0, #28]
 8000e5e:	eef1 7a67 	vneg.f32	s15, s15
 8000e62:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8000e66:	4770      	bx	lr
 8000e68:	e7f5e611 	.word	0xe7f5e611
 8000e6c:	409598a1 	.word	0x409598a1
 8000e70:	47ae147b 	.word	0x47ae147b
 8000e74:	3f747ae1 	.word	0x3f747ae1

08000e78 <compute_reference_error>:

void compute_reference_error(control_data_t *control_data) {
    if (control_data->ref_velocity < 0) {
 8000e78:	ed90 7a05 	vldr	s14, [r0, #20]
 8000e7c:	edd0 7a04 	vldr	s15, [r0, #16]
 8000e80:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        control_data->reference_error = control_data->sf_velocity;
    }
    else{
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
 8000e88:	bf58      	it	pl
 8000e8a:	ee77 7ac7 	vsubpl.f32	s15, s15, s14
 8000e8e:	edc0 7a01 	vstr	s15, [r0, #4]
    }
}
 8000e92:	4770      	bx	lr
 8000e94:	0000      	movs	r0, r0
	...

08000e98 <check_apogee_approach_phase>:

void check_apogee_approach_phase(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
    /* if n positive samples are counted, the apogee approach phase is entered */
    if (flight_phase_detection->mach_number < CONTROL_DEACTIVATION_MACH_NUMBER) {
 8000e98:	ed91 7a01 	vldr	s14, [r1, #4]
 8000e9c:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000ec8 <check_apogee_approach_phase+0x30>
 8000ea0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000ea4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        control_data->safety_counter += 1;
 8000eac:	bf42      	ittt	mi
 8000eae:	8c03      	ldrhmi	r3, [r0, #32]
 8000eb0:	3301      	addmi	r3, #1
 8000eb2:	8403      	strhmi	r3, [r0, #32]
    }

    /* Check if the apogee approach phase should be entered*/
    if (control_data->safety_counter >= SAFETY_COUNTER_THRESHOLD) {
 8000eb4:	8c03      	ldrh	r3, [r0, #32]
 8000eb6:	2b04      	cmp	r3, #4
        control_data->apogee_approach_phase = true;
 8000eb8:	bf84      	itt	hi
 8000eba:	2301      	movhi	r3, #1
 8000ebc:	f880 3022 	strbhi.w	r3, [r0, #34]	; 0x22
    }
}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	9999999a 	.word	0x9999999a
 8000ecc:	3fb99999 	.word	0x3fb99999

08000ed0 <compute_control_input>:
void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8000ed0:	b538      	push	{r3, r4, r5, lr}
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8000ed2:	780b      	ldrb	r3, [r1, #0]
void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	460d      	mov	r5, r1
 8000ed8:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8000edc:	2b04      	cmp	r3, #4
void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8000ede:	ed2d 8b02 	vpush	{d8}
 8000ee2:	ed9f 8a3d 	vldr	s16, [pc, #244]	; 8000fd8 <compute_control_input+0x108>
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8000ee6:	d158      	bne.n	8000f9a <compute_control_input+0xca>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8000ee8:	784b      	ldrb	r3, [r1, #1]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8000eea:	3b01      	subs	r3, #1
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d854      	bhi.n	8000f9a <compute_control_input+0xca>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8000ef0:	ed91 7a01 	vldr	s14, [r1, #4]
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8000ef4:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8000fc8 <compute_control_input+0xf8>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8000ef8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8000efc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f04:	d549      	bpl.n	8000f9a <compute_control_input+0xca>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8000f06:	2a00      	cmp	r2, #0
 8000f08:	d147      	bne.n	8000f9a <compute_control_input+0xca>
        evaluate_polyfit(control_data);
 8000f0a:	f7ff ff45 	bl	8000d98 <evaluate_polyfit>
        compute_reference_error(control_data);
 8000f0e:	4620      	mov	r0, r4
 8000f10:	f7ff ffb2 	bl	8000e78 <compute_reference_error>
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8000f14:	ed94 7a00 	vldr	s14, [r4]
 8000f18:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
                - control_data->gains[1] * control_data->integrated_error
 8000f1c:	ed94 7a02 	vldr	s14, [r4, #8]
 8000f20:	ed94 3b0c 	vldr	d3, [r4, #48]	; 0x30
 8000f24:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8000f28:	ed94 4b0a 	vldr	d4, [r4, #40]	; 0x28
                - control_data->gains[1] * control_data->integrated_error
 8000f2c:	ee23 7b47 	vnmul.f64	d7, d3, d7
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8000f30:	ed94 3a01 	vldr	s6, [r4, #4]
 8000f34:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8000f38:	ed94 5b0e 	vldr	d5, [r4, #56]	; 0x38
                - control_data->gains[1] * control_data->integrated_error
 8000f3c:	eea4 7b43 	vfms.f64	d7, d4, d3
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8000f40:	ed9f 4b23 	vldr	d4, [pc, #140]	; 8000fd0 <compute_control_input+0x100>
 8000f44:	ee36 4b44 	vsub.f64	d4, d6, d4
 8000f48:	eea5 7b44 	vfms.f64	d7, d5, d4
                + control_data->control_input);
 8000f4c:	ee37 7b06 	vadd.f64	d7, d7, d6
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8000f50:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        control_data->control_input = fmaxf(0, fminf(control_data->control_input, 1));
 8000f54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000f58:	fe87 7a67 	vminnm.f32	s14, s14, s15
 8000f5c:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 8000f60:	ed84 7a00 	vstr	s14, [r4]
        compute_antiwindup_boundaries(control_data);
 8000f64:	f7ff ff5c 	bl	8000e20 <compute_antiwindup_boundaries>
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8000f68:	edd4 7a02 	vldr	s15, [r4, #8]
 8000f6c:	edd4 6a01 	vldr	s13, [r4, #4]
        check_apogee_approach_phase(control_data, flight_phase_detection);
 8000f70:	4629      	mov	r1, r5
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8000f72:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000fdc <compute_control_input+0x10c>
 8000f76:	eee6 7a87 	vfma.f32	s15, s13, s14
 8000f7a:	ed94 7a07 	vldr	s14, [r4, #28]
}
 8000f7e:	ecbd 8b02 	vpop	{d8}
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8000f82:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 8000f86:	ed94 7a06 	vldr	s14, [r4, #24]
 8000f8a:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8000f8e:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8000f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        check_apogee_approach_phase(control_data, flight_phase_detection);
 8000f96:	f7ff bf7f 	b.w	8000e98 <check_apogee_approach_phase>
    control_data->control_input = 0;
 8000f9a:	ed84 8a00 	vstr	s16, [r4]
    control_data->reference_error = 0;
 8000f9e:	ed84 8a01 	vstr	s16, [r4, #4]
    control_data->integrated_error = 0;
 8000fa2:	ed84 8a02 	vstr	s16, [r4, #8]
        if (control_data->apogee_approach_phase == true) {
 8000fa6:	b14a      	cbz	r2, 8000fbc <compute_control_input+0xec>
            evaluate_polyfit(control_data);
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f7ff fef5 	bl	8000d98 <evaluate_polyfit>
            compute_reference_error(control_data);
 8000fae:	4620      	mov	r0, r4
}
 8000fb0:	ecbd 8b02 	vpop	{d8}
 8000fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            compute_reference_error(control_data);
 8000fb8:	f7ff bf5e 	b.w	8000e78 <compute_reference_error>
}
 8000fbc:	ecbd 8b02 	vpop	{d8}
 8000fc0:	bd38      	pop	{r3, r4, r5, pc}
 8000fc2:	bf00      	nop
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	9999999a 	.word	0x9999999a
 8000fcc:	3fe19999 	.word	0x3fe19999
 8000fd0:	5fbf87db 	.word	0x5fbf87db
 8000fd4:	3fdfb4e1 	.word	0x3fdfb4e1
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	3c23d70a 	.word	0x3c23d70a

08000fe0 <calibrate_env>:
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
	update_env(env, TEMPERATURE_REFERENCE);
}

void calibrate_env(env_t *env, float p_g, float T_g) {
	env->T_g = T_g + T_0; // input is temperature in °C
 8000fe0:	eeb7 7ae0 	vcvt.f64.f32	d7, s1
	env->p_g = p_g; //
 8000fe4:	ed80 0a00 	vstr	s0, [r0]
	env->T_g = T_g + T_0; // input is temperature in °C
 8000fe8:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8001000 <calibrate_env+0x20>
 8000fec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ff0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8000ff4:	ed80 7a01 	vstr	s14, [r0, #4]
}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	f3af 8000 	nop.w
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266

08001008 <update_env>:

void update_env(env_t *env, float T) {
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8001008:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800100c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8001040 <update_env+0x38>
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8001010:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001048 <update_env+0x40>
void update_env(env_t *env, float T) {
 8001014:	b510      	push	{r4, lr}
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8001016:	ee30 7b07 	vadd.f64	d7, d0, d7
void update_env(env_t *env, float T) {
 800101a:	4604      	mov	r4, r0
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 800101c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8001020:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001024:	ed80 7a02 	vstr	s14, [r0, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8001028:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800102c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001030:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8001034:	f012 fa40 	bl	80134b8 <powf>
 8001038:	ed84 0a03 	vstr	s0, [r4, #12]
}
 800103c:	bd10      	pop	{r4, pc}
 800103e:	bf00      	nop
 8001040:	66666666 	.word	0x66666666
 8001044:	40711266 	.word	0x40711266
 8001048:	8c1557b7 	.word	0x8c1557b7
 800104c:	40791e2f 	.word	0x40791e2f

08001050 <init_env>:
	env->T_g = T_g + T_0; // input is temperature in °C
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <init_env+0x10>)
	update_env(env, TEMPERATURE_REFERENCE);
 8001052:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
	env->T_g = T_g + T_0; // input is temperature in °C
 8001056:	6042      	str	r2, [r0, #4]
	env->p_g = p_g; //
 8001058:	4a02      	ldr	r2, [pc, #8]	; (8001064 <init_env+0x14>)
 800105a:	6002      	str	r2, [r0, #0]
	update_env(env, TEMPERATURE_REFERENCE);
 800105c:	f7ff bfd4 	b.w	8001008 <update_env>
 8001060:	43901333 	.word	0x43901333
 8001064:	47c5e680 	.word	0x47c5e680

08001068 <mach_number>:

float mach_number(env_t *env, float V_x) {
	float mach_number = fabsf(V_x) / env->C;
 8001068:	eeb0 0ac0 	vabs.f32	s0, s0
 800106c:	edd0 7a03 	vldr	s15, [r0, #12]
	return mach_number;
}
 8001070:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8001074:	4770      	bx	lr
	...

08001078 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800107c:	ed2d 8b06 	vpush	{d8-d10}
	for (int i = 0; i < n; i++) {
		if (p_active[i]) {
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8001080:	ed9f 8b1b 	vldr	d8, [pc, #108]	; 80010f0 <pressure2altitudeAGL+0x78>
 8001084:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001088:	4607      	mov	r7, r0
 800108a:	4688      	mov	r8, r1
 800108c:	4691      	mov	r9, r2
 800108e:	469a      	mov	sl, r3
 8001090:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	for (int i = 0; i < n; i++) {
 8001092:	2400      	movs	r4, #0
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8001094:	ed9f 9a18 	vldr	s18, [pc, #96]	; 80010f8 <pressure2altitudeAGL+0x80>
	for (int i = 0; i < n; i++) {
 8001098:	4544      	cmp	r4, r8
 800109a:	db03      	blt.n	80010a4 <pressure2altitudeAGL+0x2c>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 800109c:	ecbd 8b06 	vpop	{d8-d10}
 80010a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p_active[i]) {
 80010a4:	f81a 3004 	ldrb.w	r3, [sl, r4]
 80010a8:	b1eb      	cbz	r3, 80010e6 <pressure2altitudeAGL+0x6e>
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 80010aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80010ae:	00a5      	lsls	r5, r4, #2
 80010b0:	eef0 0a49 	vmov.f32	s1, s18
 80010b4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80010b8:	eb09 0305 	add.w	r3, r9, r5
 80010bc:	4435      	add	r5, r6
 80010be:	ed93 0a00 	vldr	s0, [r3]
 80010c2:	ee87 ab08 	vdiv.f64	d10, d7, d8
 80010c6:	edd7 7a00 	vldr	s15, [r7]
 80010ca:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80010ce:	f012 f9f3 	bl	80134b8 <powf>
 80010d2:	ee39 0ac0 	vsub.f32	s0, s19, s0
 80010d6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80010da:	ee20 0b0a 	vmul.f64	d0, d0, d10
 80010de:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80010e2:	ed85 0a00 	vstr	s0, [r5]
	for (int i = 0; i < n; i++) {
 80010e6:	3401      	adds	r4, #1
 80010e8:	e7d6      	b.n	8001098 <pressure2altitudeAGL+0x20>
 80010ea:	bf00      	nop
 80010ec:	f3af 8000 	nop.w
 80010f0:	76c8b439 	.word	0x76c8b439
 80010f4:	3f7a9fbe 	.word	0x3f7a9fbe
 80010f8:	3e42c4dc 	.word	0x3e42c4dc
 80010fc:	00000000 	.word	0x00000000

08001100 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8001100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001104:	ed2d 8b06 	vpush	{d8-d10}
	for (int i = 0; i < n; i++) {
		if (h_active[i]) {
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 8001108:	ed9f 9b1b 	vldr	d9, [pc, #108]	; 8001178 <altitudeAGL2pressure+0x78>
 800110c:	eeb7 ab00 	vmov.f64	d10, #112	; 0x3f800000  1.0
void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8001110:	4607      	mov	r7, r0
 8001112:	4688      	mov	r8, r1
 8001114:	4691      	mov	r9, r2
 8001116:	469a      	mov	sl, r3
 8001118:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	for (int i = 0; i < n; i++) {
 800111a:	2400      	movs	r4, #0
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 800111c:	eddf 8a18 	vldr	s17, [pc, #96]	; 8001180 <altitudeAGL2pressure+0x80>
	for (int i = 0; i < n; i++) {
 8001120:	4544      	cmp	r4, r8
 8001122:	db03      	blt.n	800112c <altitudeAGL2pressure+0x2c>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 8001124:	ecbd 8b06 	vpop	{d8-d10}
 8001128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (h_active[i]) {
 800112c:	f81a 3004 	ldrb.w	r3, [sl, r4]
 8001130:	b1eb      	cbz	r3, 800116e <altitudeAGL2pressure+0x6e>
 8001132:	00a5      	lsls	r5, r4, #2
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 8001134:	ed97 5a01 	vldr	s10, [r7, #4]
 8001138:	ed97 8a00 	vldr	s16, [r7]
 800113c:	eef0 0a68 	vmov.f32	s1, s17
 8001140:	eb09 0305 	add.w	r3, r9, r5
 8001144:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8001148:	4435      	add	r5, r6
 800114a:	ed93 7a00 	vldr	s14, [r3]
 800114e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001152:	ee27 7b09 	vmul.f64	d7, d7, d9
 8001156:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800115a:	ee3a 6b46 	vsub.f64	d6, d10, d6
 800115e:	eeb7 0bc6 	vcvt.f32.f64	s0, d6
 8001162:	f012 f9a9 	bl	80134b8 <powf>
 8001166:	ee28 0a00 	vmul.f32	s0, s16, s0
 800116a:	ed85 0a00 	vstr	s0, [r5]
	for (int i = 0; i < n; i++) {
 800116e:	3401      	adds	r4, #1
 8001170:	e7d6      	b.n	8001120 <altitudeAGL2pressure+0x20>
 8001172:	bf00      	nop
 8001174:	f3af 8000 	nop.w
 8001178:	76c8b439 	.word	0x76c8b439
 800117c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001180:	40a83d87 	.word	0x40a83d87
 8001184:	00000000 	.word	0x00000000

08001188 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 8001188:	ed90 7a01 	vldr	s14, [r0, #4]
 800118c:	edd0 5a00 	vldr	s11, [r0]
 8001190:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001194:	eddf 0a12 	vldr	s1, [pc, #72]	; 80011e0 <altitude_gradient+0x58>
 8001198:	ee80 0a25 	vdiv.f32	s0, s0, s11
 800119c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80011d0 <altitude_gradient+0x48>
 80011a0:	ed9f 4b0d 	vldr	d4, [pc, #52]	; 80011d8 <altitude_gradient+0x50>
float altitude_gradient(env_t *env, float p) {
 80011a4:	b508      	push	{r3, lr}
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 80011a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011aa:	eeb7 6ae5 	vcvt.f64.f32	d6, s11
float altitude_gradient(env_t *env, float p) {
 80011ae:	ed2d 8b02 	vpush	{d8}
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 80011b2:	ee26 6b04 	vmul.f64	d6, d6, d4
 80011b6:	ee87 8b06 	vdiv.f64	d8, d7, d6
 80011ba:	f012 f97d 	bl	80134b8 <powf>
 80011be:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80011c2:	ee20 0b08 	vmul.f64	d0, d0, d8
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
}
 80011c6:	ecbd 8b02 	vpop	{d8}
 80011ca:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80011ce:	bd08      	pop	{r3, pc}
 80011d0:	640f3ea7 	.word	0x640f3ea7
 80011d4:	c071f0fd 	.word	0xc071f0fd
 80011d8:	51eb851f 	.word	0x51eb851f
 80011dc:	40239eb8 	.word	0x40239eb8
 80011e0:	bf4f4ec9 	.word	0xbf4f4ec9
 80011e4:	00000000 	.word	0x00000000

080011e8 <detect_flight_phase>:

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection,
		state_est_data_t *state_est_data, env_t *env) {

	/* determine state transition events */
	switch (flight_phase_detection->flight_phase) {
 80011e8:	7803      	ldrb	r3, [r0, #0]
 80011ea:	eddf 7a43 	vldr	s15, [pc, #268]	; 80012f8 <detect_flight_phase+0x110>
 80011ee:	3b01      	subs	r3, #1
		state_est_data_t *state_est_data, env_t *env) {
 80011f0:	b510      	push	{r4, lr}
 80011f2:	4604      	mov	r4, r0
	switch (flight_phase_detection->flight_phase) {
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d81b      	bhi.n	8001230 <detect_flight_phase+0x48>
 80011f8:	e8df f003 	tbb	[pc, r3]
 80011fc:	44311a03 	.word	0x44311a03
 8001200:	57          	.byte	0x57
 8001201:	00          	.byte	0x00
	case IDLE:
		if (((float) (state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 8001202:	ed91 7a06 	vldr	s14, [r1, #24]
 8001206:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800120a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800120e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001212:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121a:	dd09      	ble.n	8001230 <detect_flight_phase+0x48>
			flight_phase_detection->num_samples_positive += 1;
 800121c:	7a23      	ldrb	r3, [r4, #8]
 800121e:	3301      	adds	r3, #1
 8001220:	b25b      	sxtb	r3, r3
			if (flight_phase_detection->num_samples_positive >= 4) {
 8001222:	2b03      	cmp	r3, #3
			flight_phase_detection->num_samples_positive += 1;
 8001224:	7223      	strb	r3, [r4, #8]
			if (flight_phase_detection->num_samples_positive >= 4) {
 8001226:	dd03      	ble.n	8001230 <detect_flight_phase+0x48>
				flight_phase_detection->flight_phase = THRUSTING;
 8001228:	2303      	movs	r3, #3

	case DESCENT:
		if (((float) (state_est_data->position_world[2])) / 1000 < 20) {
			flight_phase_detection->num_samples_positive += 1;
			if (flight_phase_detection->num_samples_positive >= 4) {
				flight_phase_detection->flight_phase = RECOVERY;
 800122a:	7023      	strb	r3, [r4, #0]
				flight_phase_detection->num_samples_positive = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	7223      	strb	r3, [r4, #8]
	default:
		break;
	}

	flight_phase_detection->mach_number = mach_number(env,
			((float) state_est_data->velocity_rocket[0]) / 1000);
 8001230:	ed91 0a03 	vldr	s0, [r1, #12]
	flight_phase_detection->mach_number = mach_number(env,
 8001234:	4610      	mov	r0, r2
			((float) state_est_data->velocity_rocket[0]) / 1000);
 8001236:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	flight_phase_detection->mach_number = mach_number(env,
 800123a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800123e:	f7ff ff13 	bl	8001068 <mach_number>
 8001242:	ed84 0a01 	vstr	s0, [r4, #4]

	/* determine the mach regime */
	if (flight_phase_detection->mach_number >= 1.3) {
 8001246:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800124a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80012e8 <detect_flight_phase+0x100>
 800124e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	db3d      	blt.n	80012d4 <detect_flight_phase+0xec>
		flight_phase_detection->mach_regime = SUPERSONIC;
 8001258:	2303      	movs	r3, #3
	} else if (flight_phase_detection->mach_number >= 0.8) {
		flight_phase_detection->mach_regime = TRANSONIC;
	} else {
		flight_phase_detection->mach_regime = SUBSONIC;
 800125a:	7063      	strb	r3, [r4, #1]
	}

}
 800125c:	bd10      	pop	{r4, pc}
		if (((float) (state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 800125e:	ed91 7a06 	vldr	s14, [r1, #24]
 8001262:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001266:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800126a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	d5dd      	bpl.n	8001230 <detect_flight_phase+0x48>
			flight_phase_detection->num_samples_positive += 1;
 8001274:	7a23      	ldrb	r3, [r4, #8]
 8001276:	3301      	adds	r3, #1
 8001278:	b25b      	sxtb	r3, r3
			if (flight_phase_detection->num_samples_positive >= 4) {
 800127a:	2b03      	cmp	r3, #3
			flight_phase_detection->num_samples_positive += 1;
 800127c:	7223      	strb	r3, [r4, #8]
			if (flight_phase_detection->num_samples_positive >= 4) {
 800127e:	ddd7      	ble.n	8001230 <detect_flight_phase+0x48>
				flight_phase_detection->flight_phase = COASTING;
 8001280:	2304      	movs	r3, #4
 8001282:	e7d2      	b.n	800122a <detect_flight_phase+0x42>
		if (((float) (state_est_data->velocity_world[2])) / 1000 < 0) {
 8001284:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8001288:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800128c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001290:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8001294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001298:	d5ca      	bpl.n	8001230 <detect_flight_phase+0x48>
			flight_phase_detection->num_samples_positive += 1;
 800129a:	7a23      	ldrb	r3, [r4, #8]
 800129c:	3301      	adds	r3, #1
 800129e:	b25b      	sxtb	r3, r3
			if (flight_phase_detection->num_samples_positive >= 4) {
 80012a0:	2b03      	cmp	r3, #3
			flight_phase_detection->num_samples_positive += 1;
 80012a2:	7223      	strb	r3, [r4, #8]
			if (flight_phase_detection->num_samples_positive >= 4) {
 80012a4:	ddc4      	ble.n	8001230 <detect_flight_phase+0x48>
				flight_phase_detection->flight_phase = DESCENT;
 80012a6:	2305      	movs	r3, #5
 80012a8:	e7bf      	b.n	800122a <detect_flight_phase+0x42>
		if (((float) (state_est_data->position_world[2])) / 1000 < 20) {
 80012aa:	ed91 7a02 	vldr	s14, [r1, #8]
 80012ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012b6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80012ba:	eef4 6ac7 	vcmpe.f32	s13, s14
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	d5b5      	bpl.n	8001230 <detect_flight_phase+0x48>
			flight_phase_detection->num_samples_positive += 1;
 80012c4:	7a23      	ldrb	r3, [r4, #8]
 80012c6:	3301      	adds	r3, #1
 80012c8:	b25b      	sxtb	r3, r3
			if (flight_phase_detection->num_samples_positive >= 4) {
 80012ca:	2b03      	cmp	r3, #3
			flight_phase_detection->num_samples_positive += 1;
 80012cc:	7223      	strb	r3, [r4, #8]
			if (flight_phase_detection->num_samples_positive >= 4) {
 80012ce:	ddaf      	ble.n	8001230 <detect_flight_phase+0x48>
				flight_phase_detection->flight_phase = RECOVERY;
 80012d0:	2306      	movs	r3, #6
 80012d2:	e7aa      	b.n	800122a <detect_flight_phase+0x42>
	} else if (flight_phase_detection->mach_number >= 0.8) {
 80012d4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80012f0 <detect_flight_phase+0x108>
 80012d8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80012dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		flight_phase_detection->mach_regime = TRANSONIC;
 80012e0:	bfac      	ite	ge
 80012e2:	2302      	movge	r3, #2
		flight_phase_detection->mach_regime = SUBSONIC;
 80012e4:	2301      	movlt	r3, #1
 80012e6:	e7b8      	b.n	800125a <detect_flight_phase+0x72>
 80012e8:	cccccccd 	.word	0xcccccccd
 80012ec:	3ff4cccc 	.word	0x3ff4cccc
 80012f0:	9999999a 	.word	0x9999999a
 80012f4:	3fe99999 	.word	0x3fe99999
 80012f8:	447a0000 	.word	0x447a0000

080012fc <reset_flight_phase_detection>:

void reset_flight_phase_detection(
		flight_phase_detection_t *flight_phase_detection) {
	flight_phase_detection->flight_phase = IDLE;
 80012fc:	2301      	movs	r3, #1
 80012fe:	7003      	strb	r3, [r0, #0]
	flight_phase_detection->mach_regime = SUBSONIC;
 8001300:	7043      	strb	r3, [r0, #1]
	flight_phase_detection->mach_number = 0.0;
 8001302:	2300      	movs	r3, #0
 8001304:	6043      	str	r3, [r0, #4]
	flight_phase_detection->num_samples_positive = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	7203      	strb	r3, [r0, #8]
}
 800130a:	4770      	bx	lr

0800130c <reset_kf_state>:
#include "Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 800130c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8001310:	4c3d      	ldr	r4, [pc, #244]	; (8001408 <reset_kf_state+0xfc>)
void reset_kf_state(kf_state_t *kf_state){
 8001312:	b090      	sub	sp, #64	; 0x40
 8001314:	4605      	mov	r5, r0
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8001316:	ae07      	add	r6, sp, #28
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8001318:	af04      	add	r7, sp, #16
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 800131a:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 800131e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001320:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001324:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001326:	f854 3b04 	ldr.w	r3, [r4], #4
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 800132a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 800132e:	6033      	str	r3, [r6, #0]
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8001330:	ac07      	add	r4, sp, #28
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8001332:	ab01      	add	r3, sp, #4
 8001334:	46a6      	mov	lr, r4
 8001336:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 800133a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 800133e:	462a      	mov	r2, r5
 8001340:	4626      	mov	r6, r4
 8001342:	3208      	adds	r2, #8
 8001344:	ce03      	ldmia	r6!, {r0, r1}
 8001346:	4566      	cmp	r6, ip
 8001348:	f842 0c08 	str.w	r0, [r2, #-8]
 800134c:	f842 1c04 	str.w	r1, [r2, #-4]
 8001350:	4634      	mov	r4, r6
 8001352:	d1f5      	bne.n	8001340 <reset_kf_state+0x34>
 8001354:	6830      	ldr	r0, [r6, #0]
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8001356:	f105 0854 	add.w	r8, r5, #84	; 0x54
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 800135a:	4e2c      	ldr	r6, [pc, #176]	; (800140c <reset_kf_state+0x100>)
 800135c:	4674      	mov	r4, lr
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 800135e:	6010      	str	r0, [r2, #0]
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8001360:	cb03      	ldmia	r3!, {r0, r1}
 8001362:	64a8      	str	r0, [r5, #72]	; 0x48
 8001364:	6818      	ldr	r0, [r3, #0]
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8001366:	463b      	mov	r3, r7
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8001368:	64e9      	str	r1, [r5, #76]	; 0x4c
 800136a:	6528      	str	r0, [r5, #80]	; 0x50
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 800136c:	cb03      	ldmia	r3!, {r0, r1}
 800136e:	6568      	str	r0, [r5, #84]	; 0x54
 8001370:	6818      	ldr	r0, [r3, #0]
	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8001372:	2300      	movs	r3, #0
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8001374:	f8c8 1004 	str.w	r1, [r8, #4]
 8001378:	f8c8 0008 	str.w	r0, [r8, #8]
	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 800137c:	9304      	str	r3, [sp, #16]
 800137e:	9305      	str	r3, [sp, #20]
 8001380:	9306      	str	r3, [sp, #24]
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8001382:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001386:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001388:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 800138a:	cf03      	ldmia	r7!, {r0, r1}
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 800138c:	6833      	ldr	r3, [r6, #0]
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 800138e:	f505 7288 	add.w	r2, r5, #272	; 0x110
    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 8001392:	f8c5 0104 	str.w	r0, [r5, #260]	; 0x104
 8001396:	2000      	movs	r0, #0
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8001398:	6023      	str	r3, [r4, #0]
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 800139a:	4673      	mov	r3, lr
    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 800139c:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
 80013a0:	f8c5 010c 	str.w	r0, [r5, #268]	; 0x10c
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80013a4:	461c      	mov	r4, r3
 80013a6:	3208      	adds	r2, #8
 80013a8:	cc03      	ldmia	r4!, {r0, r1}
 80013aa:	4564      	cmp	r4, ip
 80013ac:	f842 0c08 	str.w	r0, [r2, #-8]
 80013b0:	f842 1c04 	str.w	r1, [r2, #-4]
 80013b4:	4623      	mov	r3, r4
 80013b6:	d1f5      	bne.n	80013a4 <reset_kf_state+0x98>
 80013b8:	6820      	ldr	r0, [r4, #0]

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 80013ba:	2400      	movs	r4, #0
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80013bc:	6010      	str	r0, [r2, #0]
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80013be:	4621      	mov	r1, r4
    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 80013c0:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80013c4:	2224      	movs	r2, #36	; 0x24
 80013c6:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
 80013ca:	f011 fc3c 	bl	8012c46 <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
    kf_state->num_z_active = 0;

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 80013ce:	2103      	movs	r1, #3
 80013d0:	f105 0324 	add.w	r3, r5, #36	; 0x24
 80013d4:	462a      	mov	r2, r5
 80013d6:	4608      	mov	r0, r1
    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 80013d8:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
 80013dc:	f8c5 418c 	str.w	r4, [r5, #396]	; 0x18c
 80013e0:	f8c5 4190 	str.w	r4, [r5, #400]	; 0x190
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 80013e4:	f8a5 420c 	strh.w	r4, [r5, #524]	; 0x20c
 80013e8:	f885 420e 	strb.w	r4, [r5, #526]	; 0x20e
    kf_state->num_z_active = 0;
 80013ec:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 80013f0:	f000 faf3 	bl	80019da <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 80013f4:	f105 0360 	add.w	r3, r5, #96	; 0x60
 80013f8:	4642      	mov	r2, r8
 80013fa:	2101      	movs	r1, #1
 80013fc:	2003      	movs	r0, #3
}
 80013fe:	b010      	add	sp, #64	; 0x40
 8001400:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8001404:	f000 bae9 	b.w	80019da <transpose>
 8001408:	080148e8 	.word	0x080148e8
 800140c:	08014918 	.word	0x08014918

08001410 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8001410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8001414:	2103      	movs	r1, #3
void kf_prediction(kf_state_t *kf_state){
 8001416:	b085      	sub	sp, #20
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8001418:	2501      	movs	r5, #1
 800141a:	f500 769a 	add.w	r6, r0, #308	; 0x134
void kf_prediction(kf_state_t *kf_state){
 800141e:	4604      	mov	r4, r0
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8001420:	f04f 0800 	mov.w	r8, #0
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8001424:	f500 7382 	add.w	r3, r0, #260	; 0x104
 8001428:	4602      	mov	r2, r0
 800142a:	4608      	mov	r0, r1

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 800142c:	f504 7905 	add.w	r9, r4, #532	; 0x214
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8001430:	f504 77a0 	add.w	r7, r4, #320	; 0x140
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8001434:	e9cd 6500 	strd	r6, r5, [sp]
 8001438:	f000 fb8b 	bl	8001b52 <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 800143c:	f504 7380 	add.w	r3, r4, #256	; 0x100
 8001440:	f104 0248 	add.w	r2, r4, #72	; 0x48
 8001444:	4629      	mov	r1, r5
 8001446:	2003      	movs	r0, #3
 8001448:	e9cd 6800 	strd	r6, r8, [sp]
 800144c:	f000 fb81 	bl	8001b52 <matvecprod>
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 8001450:	2203      	movs	r2, #3
 8001452:	f504 7388 	add.w	r3, r4, #272	; 0x110
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 8001456:	f504 760e 	add.w	r6, r4, #568	; 0x238
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 800145a:	4611      	mov	r1, r2
 800145c:	4610      	mov	r0, r2
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	4623      	mov	r3, r4
 8001462:	e9cd 9501 	strd	r9, r5, [sp, #4]
 8001466:	f000 fb34 	bl	8001ad2 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 800146a:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
 800146e:	462a      	mov	r2, r5
 8001470:	4629      	mov	r1, r5
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2003      	movs	r0, #3
 8001476:	f104 0354 	add.w	r3, r4, #84	; 0x54
 800147a:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800147e:	f000 fb28 	bl	8001ad2 <matmul>
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8001482:	2203      	movs	r2, #3
 8001484:	f104 0324 	add.w	r3, r4, #36	; 0x24
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 8001488:	3460      	adds	r4, #96	; 0x60
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 800148a:	4611      	mov	r1, r2
 800148c:	4610      	mov	r0, r2
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	464b      	mov	r3, r9
 8001492:	e9cd 7501 	strd	r7, r5, [sp, #4]
 8001496:	f000 fb1c 	bl	8001ad2 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 800149a:	2203      	movs	r2, #3
 800149c:	4633      	mov	r3, r6
 800149e:	4629      	mov	r1, r5
 80014a0:	4610      	mov	r0, r2
 80014a2:	9400      	str	r4, [sp, #0]
 80014a4:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80014a8:	f000 fb13 	bl	8001ad2 <matmul>
}
 80014ac:	b005      	add	sp, #20
 80014ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080014b2 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 80014b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80014b6:	f100 056c 	add.w	r5, r0, #108	; 0x6c
void select_kf_observation_matrices(kf_state_t *kf_state){
 80014ba:	4604      	mov	r4, r0
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80014bc:	2224      	movs	r2, #36	; 0x24
 80014be:	2100      	movs	r1, #0
 80014c0:	4628      	mov	r0, r5
        if (kf_state->z_active[i]) {
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 80014c2:	2600      	movs	r6, #0
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80014c4:	f011 fbbf 	bl	8012c46 <memset>
            kf_state->H[i][0] = 1;
 80014c8:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 80014cc:	f504 7303 	add.w	r3, r4, #524	; 0x20c
 80014d0:	4621      	mov	r1, r4
 80014d2:	f204 200f 	addw	r0, r4, #527	; 0x20f
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80014d6:	4622      	mov	r2, r4
        if (kf_state->z_active[i]) {
 80014d8:	f813 cb01 	ldrb.w	ip, [r3], #1
 80014dc:	f1bc 0f00 	cmp.w	ip, #0
 80014e0:	d00f      	beq.n	8001502 <select_kf_observation_matrices+0x50>
            kf_state->H[i][0] = 1;
 80014e2:	66cf      	str	r7, [r1, #108]	; 0x6c
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80014e4:	4283      	cmp	r3, r0
 80014e6:	f101 010c 	add.w	r1, r1, #12
 80014ea:	f102 0210 	add.w	r2, r2, #16
 80014ee:	d1f3      	bne.n	80014d8 <select_kf_observation_matrices+0x26>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 80014f0:	2103      	movs	r1, #3
 80014f2:	f104 0390 	add.w	r3, r4, #144	; 0x90
 80014f6:	462a      	mov	r2, r5
 80014f8:	4608      	mov	r0, r1
}
 80014fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 80014fe:	f000 ba6c 	b.w	80019da <transpose>
            kf_state->R[i][i] = 0;
 8001502:	f8c2 60b8 	str.w	r6, [r2, #184]	; 0xb8
 8001506:	e7ed      	b.n	80014e4 <select_kf_observation_matrices+0x32>

08001508 <kf_update>:

void kf_update(kf_state_t *kf_state) {
 8001508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 800150c:	2103      	movs	r1, #3
void kf_update(kf_state_t *kf_state) {
 800150e:	b087      	sub	sp, #28
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8001510:	2501      	movs	r5, #1
 8001512:	f500 76ca 	add.w	r6, r0, #404	; 0x194
 8001516:	f100 096c 	add.w	r9, r0, #108	; 0x6c
 800151a:	f500 7b9a 	add.w	fp, r0, #308	; 0x134
void kf_update(kf_state_t *kf_state) {
 800151e:	4604      	mov	r4, r0
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8001520:	4608      	mov	r0, r1
 8001522:	465b      	mov	r3, fp
 8001524:	464a      	mov	r2, r9
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8001526:	f504 77a0 	add.w	r7, r4, #320	; 0x140
 800152a:	f504 7a11 	add.w	sl, r4, #580	; 0x244
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 800152e:	f504 78d0 	add.w	r8, r4, #416	; 0x1a0
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8001532:	e9cd 6500 	strd	r6, r5, [sp]
 8001536:	f000 fb0c 	bl	8001b52 <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 800153a:	4633      	mov	r3, r6
 800153c:	4632      	mov	r2, r6
 800153e:	f504 71c4 	add.w	r1, r4, #392	; 0x188
 8001542:	2003      	movs	r0, #3
 8001544:	f000 fa76 	bl	8001a34 <vecsub>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8001548:	2203      	movs	r2, #3
 800154a:	464b      	mov	r3, r9
 800154c:	9700      	str	r7, [sp, #0]
 800154e:	4611      	mov	r1, r2
 8001550:	4610      	mov	r0, r2
 8001552:	e9cd a501 	strd	sl, r5, [sp, #4]
 8001556:	f000 fabc 	bl	8001ad2 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 800155a:	f104 0390 	add.w	r3, r4, #144	; 0x90
 800155e:	2203      	movs	r2, #3
 8001560:	9304      	str	r3, [sp, #16]
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	4611      	mov	r1, r2
 8001566:	4653      	mov	r3, sl
 8001568:	4610      	mov	r0, r2
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 800156a:	f504 7ae2 	add.w	sl, r4, #452	; 0x1c4
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 800156e:	e9cd 8501 	strd	r8, r5, [sp, #4]
 8001572:	f000 faae 	bl	8001ad2 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 8001576:	2103      	movs	r1, #3
 8001578:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 800157c:	f8cd 8000 	str.w	r8, [sp]
 8001580:	4642      	mov	r2, r8
 8001582:	4608      	mov	r0, r1
 8001584:	f000 fa65 	bl	8001a52 <matadd>
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8001588:	2224      	movs	r2, #36	; 0x24
 800158a:	2100      	movs	r1, #0
 800158c:	4650      	mov	r0, sl
 800158e:	f011 fb5a 	bl	8012c46 <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8001592:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8001644 <kf_update+0x13c>
 8001596:	4652      	mov	r2, sl
 8001598:	4641      	mov	r1, r8
 800159a:	2003      	movs	r0, #3
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 800159c:	f504 78f4 	add.w	r8, r4, #488	; 0x1e8
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 80015a0:	f000 fbae 	bl	8001d00 <cholesky_inverse>
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 80015a4:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80015a8:	2203      	movs	r2, #3
 80015aa:	9305      	str	r3, [sp, #20]
 80015ac:	4611      	mov	r1, r2
 80015ae:	4610      	mov	r0, r2
 80015b0:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80015b4:	9b04      	ldr	r3, [sp, #16]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	463b      	mov	r3, r7
 80015ba:	f000 fa8a 	bl	8001ad2 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80015be:	2203      	movs	r2, #3
 80015c0:	f8cd a000 	str.w	sl, [sp]

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80015c4:	f504 7a82 	add.w	sl, r4, #260	; 0x104
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80015c8:	9b05      	ldr	r3, [sp, #20]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4610      	mov	r0, r2
 80015ce:	e9cd 8501 	strd	r8, r5, [sp, #4]
 80015d2:	f000 fa7e 	bl	8001ad2 <matmul>
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80015d6:	2103      	movs	r1, #3
 80015d8:	4633      	mov	r3, r6
 80015da:	4642      	mov	r2, r8
 80015dc:	4608      	mov	r0, r1


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 80015de:	f504 7623 	add.w	r6, r4, #652	; 0x28c
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80015e2:	e9cd a500 	strd	sl, r5, [sp]
 80015e6:	f000 fab4 	bl	8001b52 <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 80015ea:	4653      	mov	r3, sl
 80015ec:	4652      	mov	r2, sl
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 80015ee:	f504 7a2c 	add.w	sl, r4, #688	; 0x2b0
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 80015f2:	4659      	mov	r1, fp
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 fa0e 	bl	8001a16 <vecadd>
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 80015fa:	4651      	mov	r1, sl
 80015fc:	2003      	movs	r0, #3
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 80015fe:	f504 7b35 	add.w	fp, r4, #724	; 0x2d4
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8001602:	f000 f9cf 	bl	80019a4 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8001606:	2203      	movs	r2, #3
 8001608:	4643      	mov	r3, r8
 800160a:	f8cd 9000 	str.w	r9, [sp]
 800160e:	4611      	mov	r1, r2
 8001610:	4610      	mov	r0, r2
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8001612:	f504 7488 	add.w	r4, r4, #272	; 0x110
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8001616:	e9cd b501 	strd	fp, r5, [sp, #4]
 800161a:	f000 fa5a 	bl	8001ad2 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 800161e:	2103      	movs	r1, #3
 8001620:	465b      	mov	r3, fp
 8001622:	4652      	mov	r2, sl
 8001624:	4608      	mov	r0, r1
 8001626:	9600      	str	r6, [sp, #0]
 8001628:	f000 fa33 	bl	8001a92 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 800162c:	2203      	movs	r2, #3
 800162e:	4633      	mov	r3, r6
 8001630:	9502      	str	r5, [sp, #8]
 8001632:	4611      	mov	r1, r2
 8001634:	4610      	mov	r0, r2
 8001636:	e9cd 7400 	strd	r7, r4, [sp]
 800163a:	f000 fa4a 	bl	8001ad2 <matmul>
}
 800163e:	b007      	add	sp, #28
 8001640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001644:	38d1b717 	.word	0x38d1b717

08001648 <update_state_est_data>:
#include "Sim_Con\state_est.h"


void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 8001648:	ed91 7a41 	vldr	s14, [r1, #260]	; 0x104
 800164c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001688 <update_state_est_data+0x40>
 8001650:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001654:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001658:	ed80 7a02 	vstr	s14, [r0, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 800165c:	ed91 7a42 	vldr	s14, [r1, #264]	; 0x108
 8001660:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001664:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8001668:	edc0 7a03 	vstr	s15, [r0, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 800166c:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 8001670:	edd1 7a40 	vldr	s15, [r1, #256]	; 0x100
 8001674:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800167c:	edc0 7a06 	vstr	s15, [r0, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 8001680:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	447a0000 	.word	0x447a0000

0800168c <select_noise_models>:
        update_env(env, temp_meas_mean);
    }
} 

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 800168c:	b570      	push	{r4, r5, r6, lr}
 800168e:	461e      	mov	r6, r3
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 8001690:	780b      	ldrb	r3, [r1, #0]
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8001692:	4604      	mov	r4, r0
 8001694:	4615      	mov	r5, r2
    switch (flight_phase_detection->flight_phase) {
 8001696:	3b01      	subs	r3, #1
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8001698:	ed2d 8b02 	vpush	{d8}
 800169c:	b086      	sub	sp, #24
    switch (flight_phase_detection->flight_phase) {
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d808      	bhi.n	80016b4 <select_noise_models+0x28>
 80016a2:	e8df f003 	tbb	[pc, r3]
 80016a6:	4141      	.short	0x4141
 80016a8:	413c3703 	.word	0x413c3703
            accelerometer_x_stdev = 0.0185409;
            barometer_stdev = 1.869;
        break;
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
            barometer_stdev = 13.000;
 80016ac:	eeb2 8a0a 	vmov.f32	s16, #42	; 0x41500000  13.0
            accelerometer_x_stdev = 1.250775;
 80016b0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001734 <select_noise_models+0xa8>
            barometer_stdev = 3.896;
        break;
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 80016b4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 80016b8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    bool h_active[1] = {true};
 80016bc:	2101      	movs	r1, #1
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80016be:	aa04      	add	r2, sp, #16
    float h[1] = {kf_state->x_est[0]};
 80016c0:	9305      	str	r3, [sp, #20]
    bool h_active[1] = {true};
 80016c2:	ab06      	add	r3, sp, #24
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 80016c4:	ee27 7b07 	vmul.f64	d7, d7, d7
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80016c8:	4628      	mov	r0, r5
    bool h_active[1] = {true};
 80016ca:	f803 1d0c 	strb.w	r1, [r3, #-12]!
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80016ce:	9200      	str	r2, [sp, #0]
 80016d0:	aa05      	add	r2, sp, #20
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 80016d2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80016d6:	ed84 7a2d 	vstr	s14, [r4, #180]	; 0xb4
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80016da:	f7ff fd11 	bl	8001100 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 80016de:	ed9d 0a04 	vldr	s0, [sp, #16]
 80016e2:	4628      	mov	r0, r5
 80016e4:	f7ff fd50 	bl	8001188 <altitude_gradient>
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 80016e8:	ee28 0a00 	vmul.f32	s0, s16, s0
 80016ec:	eeb0 0ac0 	vabs.f32	s0, s0

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 80016f0:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80016f4:	ee20 0b00 	vmul.f64	d0, d0, d0
 80016f8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80016fc:	ed84 0a2e 	vstr	s0, [r4, #184]	; 0xb8
 8001700:	ed84 0a32 	vstr	s0, [r4, #200]	; 0xc8
 8001704:	ed84 0a36 	vstr	s0, [r4, #216]	; 0xd8
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8001708:	ed86 8a25 	vstr	s16, [r6, #148]	; 0x94
}
 800170c:	b006      	add	sp, #24
 800170e:	ecbd 8b02 	vpop	{d8}
 8001712:	bd70      	pop	{r4, r5, r6, pc}
            barometer_stdev = 7.380;
 8001714:	ed9f 8a08 	vldr	s16, [pc, #32]	; 8001738 <select_noise_models+0xac>
            accelerometer_x_stdev = 0.61803;
 8001718:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800173c <select_noise_models+0xb0>
        break;
 800171c:	e7ca      	b.n	80016b4 <select_noise_models+0x28>
            barometer_stdev = 3.896;
 800171e:	ed9f 8a08 	vldr	s16, [pc, #32]	; 8001740 <select_noise_models+0xb4>
            accelerometer_x_stdev = 1.955133;
 8001722:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001744 <select_noise_models+0xb8>
        break;
 8001726:	e7c5      	b.n	80016b4 <select_noise_models+0x28>
            barometer_stdev = 1.869;
 8001728:	ed9f 8a07 	vldr	s16, [pc, #28]	; 8001748 <select_noise_models+0xbc>
            accelerometer_x_stdev = 0.0185409;
 800172c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800174c <select_noise_models+0xc0>
 8001730:	e7c0      	b.n	80016b4 <select_noise_models+0x28>
 8001732:	bf00      	nop
 8001734:	3fa01965 	.word	0x3fa01965
 8001738:	40ec28f6 	.word	0x40ec28f6
 800173c:	3f1e3737 	.word	0x3f1e3737
 8001740:	40795810 	.word	0x40795810
 8001744:	3ffa41cc 	.word	0x3ffa41cc
 8001748:	3fef3b64 	.word	0x3fef3b64
 800174c:	3c97e316 	.word	0x3c97e316

08001750 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8001750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* calculate mean of the sample */
    int num_active = 0;
    float mean = 0;
    for (int i = 0; i < n; i++){
 8001752:	2400      	movs	r4, #0
void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8001754:	4606      	mov	r6, r0
 8001756:	460f      	mov	r7, r1
 8001758:	4615      	mov	r5, r2
    int num_active = 0;
 800175a:	4623      	mov	r3, r4
void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 800175c:	ed2d 8b02 	vpush	{d8}
    float mean = 0;
 8001760:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 8001814 <sensor_elimination_by_stdev+0xc4>
    for (int i = 0; i < n; i++){
 8001764:	42b4      	cmp	r4, r6
 8001766:	db1f      	blt.n	80017a8 <sensor_elimination_by_stdev+0x58>
        if (measurement_active[i]) {
            num_active += 1;
            mean += measurements[i];
        }
    }
    if (num_active > 0){
 8001768:	b12b      	cbz	r3, 8001776 <sensor_elimination_by_stdev+0x26>
        mean /= num_active;
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001772:	ee88 8a27 	vdiv.f32	s16, s16, s15
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
    for (int i = 0; i < n; ++i) {
 8001776:	2400      	movs	r4, #0
    float stdev = 0;
 8001778:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001814 <sensor_elimination_by_stdev+0xc4>
    for (int i = 0; i < n; ++i) {
 800177c:	42b4      	cmp	r4, r6
 800177e:	db1e      	blt.n	80017be <sensor_elimination_by_stdev+0x6e>
        if (measurement_active[i]) {
            stdev += pow(measurements[i] - mean, 2);
        }
    }
    if (num_active > 0){
 8001780:	b15b      	cbz	r3, 800179a <sensor_elimination_by_stdev+0x4a>
        stdev = sqrt(stdev / num_active);
 8001782:	ee07 3a90 	vmov	s15, r3
 8001786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800178a:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800178e:	eeb7 0ac7 	vcvt.f64.f32	d0, s14
 8001792:	f012 f901 	bl	8013998 <sqrt>
 8001796:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 800179a:	2300      	movs	r3, #0
        if (measurement_active[i]) {
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
                measurement_active[i] = false;
 800179c:	461a      	mov	r2, r3
    for (int i = 0; i < n; ++i) {
 800179e:	42b3      	cmp	r3, r6
 80017a0:	db1f      	blt.n	80017e2 <sensor_elimination_by_stdev+0x92>
            }
        }
    }
}
 80017a2:	ecbd 8b02 	vpop	{d8}
 80017a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (measurement_active[i]) {
 80017a8:	5d2a      	ldrb	r2, [r5, r4]
 80017aa:	b132      	cbz	r2, 80017ba <sensor_elimination_by_stdev+0x6a>
            mean += measurements[i];
 80017ac:	eb07 0284 	add.w	r2, r7, r4, lsl #2
            num_active += 1;
 80017b0:	3301      	adds	r3, #1
            mean += measurements[i];
 80017b2:	edd2 7a00 	vldr	s15, [r2]
 80017b6:	ee38 8a27 	vadd.f32	s16, s16, s15
    for (int i = 0; i < n; i++){
 80017ba:	3401      	adds	r4, #1
 80017bc:	e7d2      	b.n	8001764 <sensor_elimination_by_stdev+0x14>
        if (measurement_active[i]) {
 80017be:	5d2a      	ldrb	r2, [r5, r4]
 80017c0:	b16a      	cbz	r2, 80017de <sensor_elimination_by_stdev+0x8e>
            stdev += pow(measurements[i] - mean, 2);
 80017c2:	eb07 0284 	add.w	r2, r7, r4, lsl #2
 80017c6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80017ca:	ed92 7a00 	vldr	s14, [r2]
 80017ce:	ee37 7a48 	vsub.f32	s14, s14, s16
 80017d2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80017d6:	eea7 0b07 	vfma.f64	d0, d7, d7
 80017da:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    for (int i = 0; i < n; ++i) {
 80017de:	3401      	adds	r4, #1
 80017e0:	e7cc      	b.n	800177c <sensor_elimination_by_stdev+0x2c>
        if (measurement_active[i]) {
 80017e2:	5ce9      	ldrb	r1, [r5, r3]
 80017e4:	b199      	cbz	r1, 800180e <sensor_elimination_by_stdev+0xbe>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 80017e6:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80017ea:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80017ee:	ed91 7a00 	vldr	s14, [r1]
 80017f2:	ee36 6b06 	vadd.f64	d6, d6, d6
 80017f6:	ee37 7a48 	vsub.f32	s14, s14, s16
 80017fa:	eeb0 7ac7 	vabs.f32	s14, s14
 80017fe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001802:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                measurement_active[i] = false;
 800180a:	bfc8      	it	gt
 800180c:	54ea      	strbgt	r2, [r5, r3]
    for (int i = 0; i < n; ++i) {
 800180e:	3301      	adds	r3, #1
 8001810:	e7c5      	b.n	800179e <sensor_elimination_by_stdev+0x4e>
 8001812:	bf00      	nop
 8001814:	00000000 	.word	0x00000000

08001818 <process_measurements>:
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8001818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800181c:	460d      	mov	r5, r1
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 800181e:	2400      	movs	r4, #0
 8001820:	f501 71c4 	add.w	r1, r1, #392	; 0x188
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8001824:	4694      	mov	ip, r2
 8001826:	f04f 0b0c 	mov.w	fp, #12
            kf_state->z[i] = 0;
 800182a:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80019a0 <process_measurements+0x188>
 800182e:	460f      	mov	r7, r1
            kf_state->z_active[i] = false;
 8001830:	46a6      	mov	lr, r4
            kf_state->z_active[i] = true;
 8001832:	f04f 0901 	mov.w	r9, #1
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8001836:	ed2d 8b02 	vpush	{d8}
 800183a:	b08d      	sub	sp, #52	; 0x34
 800183c:	f10d 0810 	add.w	r8, sp, #16
 8001840:	ae05      	add	r6, sp, #20
 8001842:	9303      	str	r3, [sp, #12]
 8001844:	9b03      	ldr	r3, [sp, #12]
 8001846:	fb0b 3a04 	mla	sl, fp, r4, r3
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 800184a:	6893      	ldr	r3, [r2, #8]
 800184c:	f8da 0008 	ldr.w	r0, [sl, #8]
 8001850:	4283      	cmp	r3, r0
 8001852:	eb05 0004 	add.w	r0, r5, r4
 8001856:	f240 8093 	bls.w	8001980 <process_measurements+0x168>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 800185a:	ed92 7a00 	vldr	s14, [r2]
            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 800185e:	ab06      	add	r3, sp, #24
            temp_meas_active[i] = true;
 8001860:	f808 9004 	strb.w	r9, [r8, r4]
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 8001864:	ed81 7a00 	vstr	s14, [r1]
            kf_state->z_active[i] = true;
 8001868:	f880 920c 	strb.w	r9, [r0, #524]	; 0x20c
            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 800186c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8001870:	ed92 7a01 	vldr	s14, [r2, #4]
 8001874:	ed80 7a00 	vstr	s14, [r0]
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 8001878:	eb0a 1a04 	add.w	sl, sl, r4, lsl #4
 800187c:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
 8001880:	320c      	adds	r2, #12
 8001882:	f10c 0c1c 	add.w	ip, ip, #28
 8001886:	f8da 003c 	ldr.w	r0, [sl, #60]	; 0x3c
 800188a:	3104      	adds	r1, #4
 800188c:	4283      	cmp	r3, r0
 800188e:	ea4f 0084 	mov.w	r0, r4, lsl #2
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8001892:	ab09      	add	r3, sp, #36	; 0x24
 8001894:	bf88      	it	hi
 8001896:	f8dc a014 	ldrhi.w	sl, [ip, #20]
 800189a:	4418      	add	r0, r3
            acc_x_meas_active[i] = true;
 800189c:	bf8c      	ite	hi
 800189e:	f806 9004 	strbhi.w	r9, [r6, r4]
            acc_x_meas_active[i] = false;
 80018a2:	f806 e004 	strbls.w	lr, [r6, r4]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 80018a6:	f104 0401 	add.w	r4, r4, #1
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 80018aa:	bf8c      	ite	hi
 80018ac:	f8c0 a000 	strhi.w	sl, [r0]
            acc_x_meas[i] = 0;
 80018b0:	edc0 7a00 	vstrls	s15, [r0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 80018b4:	2c03      	cmp	r4, #3
 80018b6:	d1c5      	bne.n	8001844 <process_measurements+0x2c>
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 80018b8:	f505 7903 	add.w	r9, r5, #524	; 0x20c
 80018bc:	4620      	mov	r0, r4
 80018be:	4639      	mov	r1, r7
    float temp_meas_mean = 0;
 80018c0:	ed9f 8a37 	vldr	s16, [pc, #220]	; 80019a0 <process_measurements+0x188>
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 80018c4:	464a      	mov	r2, r9
 80018c6:	f7ff ff43 	bl	8001750 <sensor_elimination_by_stdev>
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 80018ca:	4642      	mov	r2, r8
 80018cc:	4620      	mov	r0, r4
 80018ce:	a906      	add	r1, sp, #24
 80018d0:	f7ff ff3e 	bl	8001750 <sensor_elimination_by_stdev>
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 80018d4:	4620      	mov	r0, r4
 80018d6:	4632      	mov	r2, r6
 80018d8:	a909      	add	r1, sp, #36	; 0x24
 80018da:	f7ff ff39 	bl	8001750 <sensor_elimination_by_stdev>
    kf_state->num_z_active = 0;
 80018de:	2100      	movs	r1, #0
    float u = 0;
 80018e0:	eef0 8a48 	vmov.f32	s17, s16
 80018e4:	4648      	mov	r0, r9
 80018e6:	aa06      	add	r2, sp, #24
    int num_temp_meas_active = 0;
 80018e8:	460c      	mov	r4, r1
    int num_acc_x_meas_active = 0;
 80018ea:	4688      	mov	r8, r1
    kf_state->num_z_active = 0;
 80018ec:	f8c5 1210 	str.w	r1, [r5, #528]	; 0x210
        if (kf_state->z_active[i]){
 80018f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80018f4:	b123      	cbz	r3, 8001900 <process_measurements+0xe8>
            kf_state->num_z_active += 1;
 80018f6:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
 80018fa:	3301      	adds	r3, #1
 80018fc:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
        if (acc_x_meas_active[i]) {
 8001900:	5c73      	ldrb	r3, [r6, r1]
 8001902:	b143      	cbz	r3, 8001916 <process_measurements+0xfe>
            u += acc_x_meas[i];
 8001904:	ab09      	add	r3, sp, #36	; 0x24
            num_acc_x_meas_active += 1;
 8001906:	f108 0801 	add.w	r8, r8, #1
            u += acc_x_meas[i];
 800190a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800190e:	edd3 7a00 	vldr	s15, [r3]
 8001912:	ee78 8aa7 	vadd.f32	s17, s17, s15
        if (temp_meas[i]) {
 8001916:	ecf2 7a01 	vldmia	r2!, {s15}
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800191a:	3101      	adds	r1, #1
        if (temp_meas[i]) {
 800191c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            temp_meas_mean += temp_meas[i];
 8001924:	bf1c      	itt	ne
 8001926:	ee38 8a27 	vaddne.f32	s16, s16, s15
            num_temp_meas_active += 1;
 800192a:	3401      	addne	r4, #1
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800192c:	2903      	cmp	r1, #3
 800192e:	d1df      	bne.n	80018f0 <process_measurements+0xd8>
    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 8001930:	9700      	str	r7, [sp, #0]
 8001932:	464b      	mov	r3, r9
 8001934:	463a      	mov	r2, r7
 8001936:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001938:	f7ff fb9e 	bl	8001078 <pressure2altitudeAGL>
    if (num_acc_x_meas_active > 0){
 800193c:	f1b8 0f00 	cmp.w	r8, #0
 8001940:	d00f      	beq.n	8001962 <process_measurements+0x14a>
        u /= num_acc_x_meas_active;
 8001942:	ee07 8a90 	vmov	s15, r8
 8001946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        kf_state->u[0] = u - GRAVITATION;
 800194a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001998 <process_measurements+0x180>
        u /= num_acc_x_meas_active;
 800194e:	ee88 7aa7 	vdiv.f32	s14, s17, s15
        kf_state->u[0] = u - GRAVITATION;
 8001952:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001956:	ee37 7b46 	vsub.f64	d7, d7, d6
 800195a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800195e:	ed85 7a40 	vstr	s14, [r5, #256]	; 0x100
    if (num_temp_meas_active > 0){
 8001962:	b144      	cbz	r4, 8001976 <process_measurements+0x15e>
        temp_meas_mean /= num_temp_meas_active;
 8001964:	ee07 4a90 	vmov	s15, r4
        update_env(env, temp_meas_mean);
 8001968:	9818      	ldr	r0, [sp, #96]	; 0x60
        temp_meas_mean /= num_temp_meas_active;
 800196a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        update_env(env, temp_meas_mean);
 800196e:	ee88 0a00 	vdiv.f32	s0, s16, s0
 8001972:	f7ff fb49 	bl	8001008 <update_env>
} 
 8001976:	b00d      	add	sp, #52	; 0x34
 8001978:	ecbd 8b02 	vpop	{d8}
 800197c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            temp_meas[i] = 0;
 8001980:	ab06      	add	r3, sp, #24
            kf_state->z[i] = 0;
 8001982:	edc1 7a00 	vstr	s15, [r1]
            kf_state->z_active[i] = false;
 8001986:	f880 e20c 	strb.w	lr, [r0, #524]	; 0x20c
            temp_meas[i] = 0;
 800198a:	eb03 0084 	add.w	r0, r3, r4, lsl #2
            temp_meas_active[i] = false;
 800198e:	f804 e008 	strb.w	lr, [r4, r8]
            temp_meas[i] = 0;
 8001992:	edc0 7a00 	vstr	s15, [r0]
 8001996:	e76f      	b.n	8001878 <process_measurements+0x60>
 8001998:	51eb851f 	.word	0x51eb851f
 800199c:	40239eb8 	.word	0x40239eb8
 80019a0:	00000000 	.word	0x00000000

080019a4 <eye>:
#include "Util/math_utils.h"


void eye(int32_t dim, float A[dim][dim]) {
 80019a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(int i = 0; i < dim; i++){
 80019a6:	2300      	movs	r3, #0
 80019a8:	0085      	lsls	r5, r0, #2
        for(int j = 0; j < dim; j++){
            if (i == j){
				A[i][j] = 1;
			} else {
				A[i][j] = 0;
 80019aa:	2600      	movs	r6, #0
				A[i][j] = 1;
 80019ac:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
	for(int i = 0; i < dim; i++){
 80019b0:	4283      	cmp	r3, r0
 80019b2:	db0f      	blt.n	80019d4 <eye+0x30>
			}
        }
    }
}
 80019b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (i == j){
 80019b6:	429a      	cmp	r2, r3
 80019b8:	f104 0404 	add.w	r4, r4, #4
        for(int j = 0; j < dim; j++){
 80019bc:	f102 0201 	add.w	r2, r2, #1
				A[i][j] = 1;
 80019c0:	bf0c      	ite	eq
 80019c2:	f844 7c04 	streq.w	r7, [r4, #-4]
				A[i][j] = 0;
 80019c6:	f844 6c04 	strne.w	r6, [r4, #-4]
        for(int j = 0; j < dim; j++){
 80019ca:	4282      	cmp	r2, r0
 80019cc:	d1f3      	bne.n	80019b6 <eye+0x12>
	for(int i = 0; i < dim; i++){
 80019ce:	3301      	adds	r3, #1
 80019d0:	4429      	add	r1, r5
 80019d2:	e7ed      	b.n	80019b0 <eye+0xc>
 80019d4:	460c      	mov	r4, r1
        for(int j = 0; j < dim; j++){
 80019d6:	2200      	movs	r2, #0
 80019d8:	e7f7      	b.n	80019ca <eye+0x26>

080019da <transpose>:

void transpose(int32_t m, int32_t n, float A[m][n], float A_T[n][m]) {
 80019da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019de:	ea4f 0e81 	mov.w	lr, r1, lsl #2
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 80019e2:	2400      	movs	r4, #0
 80019e4:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80019e8:	4284      	cmp	r4, r0
 80019ea:	da12      	bge.n	8001a12 <transpose+0x38>
 80019ec:	461e      	mov	r6, r3
 80019ee:	4617      	mov	r7, r2
		for(int j = 0; j < n; j++){
 80019f0:	2500      	movs	r5, #0
			A_T[j][i] = A[i][j];
 80019f2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80019f6:	e007      	b.n	8001a08 <transpose+0x2e>
 80019f8:	eb0c 0906 	add.w	r9, ip, r6
 80019fc:	f857 ab04 	ldr.w	sl, [r7], #4
		for(int j = 0; j < n; j++){
 8001a00:	3501      	adds	r5, #1
 8001a02:	4446      	add	r6, r8
			A_T[j][i] = A[i][j];
 8001a04:	f8c9 a000 	str.w	sl, [r9]
		for(int j = 0; j < n; j++){
 8001a08:	42a9      	cmp	r1, r5
 8001a0a:	dcf5      	bgt.n	80019f8 <transpose+0x1e>
	for(int i = 0; i < m; i++){
 8001a0c:	3401      	adds	r4, #1
 8001a0e:	4472      	add	r2, lr
 8001a10:	e7ea      	b.n	80019e8 <transpose+0xe>
		}
	}
}
 8001a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001a16 <vecadd>:

void vecadd(int32_t n, float a[n], float b[n], float c[n]) {
 8001a16:	b510      	push	{r4, lr}
	for(int i = 0; i < n; i++){
 8001a18:	2400      	movs	r4, #0
 8001a1a:	4284      	cmp	r4, r0
 8001a1c:	db00      	blt.n	8001a20 <vecadd+0xa>
		c[i] = a[i] + b[i];
	}
}
 8001a1e:	bd10      	pop	{r4, pc}
		c[i] = a[i] + b[i];
 8001a20:	ecf1 7a01 	vldmia	r1!, {s15}
	for(int i = 0; i < n; i++){
 8001a24:	3401      	adds	r4, #1
		c[i] = a[i] + b[i];
 8001a26:	ecb2 7a01 	vldmia	r2!, {s14}
 8001a2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a2e:	ece3 7a01 	vstmia	r3!, {s15}
 8001a32:	e7f2      	b.n	8001a1a <vecadd+0x4>

08001a34 <vecsub>:

void vecsub(int32_t n, float a[n], float b[n], float c[n]) {
 8001a34:	b510      	push	{r4, lr}
	for(int i = 0; i < n; i++){
 8001a36:	2400      	movs	r4, #0
 8001a38:	4284      	cmp	r4, r0
 8001a3a:	db00      	blt.n	8001a3e <vecsub+0xa>
		c[i] = a[i] - b[i];
	}
}
 8001a3c:	bd10      	pop	{r4, pc}
		c[i] = a[i] - b[i];
 8001a3e:	ecf1 7a01 	vldmia	r1!, {s15}
	for(int i = 0; i < n; i++){
 8001a42:	3401      	adds	r4, #1
		c[i] = a[i] - b[i];
 8001a44:	ecb2 7a01 	vldmia	r2!, {s14}
 8001a48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a4c:	ece3 7a01 	vstmia	r3!, {s15}
 8001a50:	e7f2      	b.n	8001a38 <vecsub+0x4>

08001a52 <matadd>:

void matadd(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8001a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(int i = 0; i < m; i++){
 8001a56:	2400      	movs	r4, #0
 8001a58:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8001a5c:	4626      	mov	r6, r4
 8001a5e:	4286      	cmp	r6, r0
 8001a60:	da15      	bge.n	8001a8e <matadd+0x3c>
 8001a62:	9d06      	ldr	r5, [sp, #24]
 8001a64:	eb02 0e04 	add.w	lr, r2, r4
 8001a68:	eb03 0c04 	add.w	ip, r3, r4
 8001a6c:	192f      	adds	r7, r5, r4
        for(int j = 0; j < n; j++){
 8001a6e:	2500      	movs	r5, #0
 8001a70:	e008      	b.n	8001a84 <matadd+0x32>
            C[i][j] =  A[i][j] + B[i][j];
 8001a72:	ecfe 7a01 	vldmia	lr!, {s15}
        for(int j = 0; j < n; j++){
 8001a76:	3501      	adds	r5, #1
            C[i][j] =  A[i][j] + B[i][j];
 8001a78:	ecbc 7a01 	vldmia	ip!, {s14}
 8001a7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a80:	ece7 7a01 	vstmia	r7!, {s15}
        for(int j = 0; j < n; j++){
 8001a84:	42a9      	cmp	r1, r5
 8001a86:	dcf4      	bgt.n	8001a72 <matadd+0x20>
	for(int i = 0; i < m; i++){
 8001a88:	3601      	adds	r6, #1
 8001a8a:	4444      	add	r4, r8
 8001a8c:	e7e7      	b.n	8001a5e <matadd+0xc>
        }
    }
}
 8001a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a92 <matsub>:

void matsub(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8001a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(int i = 0; i < m; i++){
 8001a96:	2400      	movs	r4, #0
 8001a98:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8001a9c:	4626      	mov	r6, r4
 8001a9e:	4286      	cmp	r6, r0
 8001aa0:	da15      	bge.n	8001ace <matsub+0x3c>
 8001aa2:	9d06      	ldr	r5, [sp, #24]
 8001aa4:	eb02 0e04 	add.w	lr, r2, r4
 8001aa8:	eb03 0c04 	add.w	ip, r3, r4
 8001aac:	192f      	adds	r7, r5, r4
        for(int j = 0; j < n; j++){
 8001aae:	2500      	movs	r5, #0
 8001ab0:	e008      	b.n	8001ac4 <matsub+0x32>
            C[i][j] =  A[i][j] - B[i][j];
 8001ab2:	ecfe 7a01 	vldmia	lr!, {s15}
        for(int j = 0; j < n; j++){
 8001ab6:	3501      	adds	r5, #1
            C[i][j] =  A[i][j] - B[i][j];
 8001ab8:	ecbc 7a01 	vldmia	ip!, {s14}
 8001abc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ac0:	ece7 7a01 	vstmia	r7!, {s15}
        for(int j = 0; j < n; j++){
 8001ac4:	42a9      	cmp	r1, r5
 8001ac6:	dcf4      	bgt.n	8001ab2 <matsub+0x20>
	for(int i = 0; i < m; i++){
 8001ac8:	3601      	adds	r6, #1
 8001aca:	4444      	add	r4, r8
 8001acc:	e7e7      	b.n	8001a9e <matsub+0xc>
        }
    }
}
 8001ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ad2 <matmul>:

void matmul(int32_t m, int32_t n, int32_t o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8001ad2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ad6:	461c      	mov	r4, r3
 8001ad8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001adc:	4606      	mov	r6, r0
 8001ade:	460f      	mov	r7, r1
 8001ae0:	4615      	mov	r5, r2
	if (reset) {
 8001ae2:	b12b      	cbz	r3, 8001af0 <matmul+0x1e>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8001ae4:	4342      	muls	r2, r0
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001aea:	0092      	lsls	r2, r2, #2
 8001aec:	f011 f8ab 	bl	8012c46 <memset>
 8001af0:	00bb      	lsls	r3, r7, #2
 8001af2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001af4:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	4623      	mov	r3, r4
	}
	for(int i = 0; i < m; i++){
        for(int j = 0; j < o; j++){
 8001afc:	2400      	movs	r4, #0
	for(int i = 0; i < m; i++){
 8001afe:	42b4      	cmp	r4, r6
 8001b00:	db1f      	blt.n	8001b42 <matmul+0x70>
            for(int k = 0; k < n; k++){
                C[i][j] +=  A[i][k] * B[k][j];
            }
        }
    }
}
 8001b02:	b003      	add	sp, #12
 8001b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                C[i][j] +=  A[i][k] * B[k][j];
 8001b08:	eb0a 0b0e 	add.w	fp, sl, lr
 8001b0c:	ecf9 6a01 	vldmia	r9!, {s13}
 8001b10:	edd0 7a00 	vldr	s15, [r0]
            for(int k = 0; k < n; k++){
 8001b14:	f10c 0c01 	add.w	ip, ip, #1
                C[i][j] +=  A[i][k] * B[k][j];
 8001b18:	ed9b 7a00 	vldr	s14, [fp]
 8001b1c:	44c6      	add	lr, r8
 8001b1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001b22:	edc0 7a00 	vstr	s15, [r0]
            for(int k = 0; k < n; k++){
 8001b26:	4567      	cmp	r7, ip
 8001b28:	dcee      	bgt.n	8001b08 <matmul+0x36>
        for(int j = 0; j < o; j++){
 8001b2a:	3101      	adds	r1, #1
 8001b2c:	3004      	adds	r0, #4
 8001b2e:	42a9      	cmp	r1, r5
 8001b30:	da0a      	bge.n	8001b48 <matmul+0x76>
 8001b32:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8001b36:	4699      	mov	r9, r3
            for(int k = 0; k < n; k++){
 8001b38:	f04f 0c00 	mov.w	ip, #0
                C[i][j] +=  A[i][k] * B[k][j];
 8001b3c:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8001b40:	e7f1      	b.n	8001b26 <matmul+0x54>
 8001b42:	4610      	mov	r0, r2
        for(int j = 0; j < o; j++){
 8001b44:	2100      	movs	r1, #0
 8001b46:	e7f2      	b.n	8001b2e <matmul+0x5c>
 8001b48:	9901      	ldr	r1, [sp, #4]
	for(int i = 0; i < m; i++){
 8001b4a:	3401      	adds	r4, #1
 8001b4c:	4442      	add	r2, r8
 8001b4e:	440b      	add	r3, r1
 8001b50:	e7d5      	b.n	8001afe <matmul+0x2c>

08001b52 <matvecprod>:

void matvecprod(int32_t m, int32_t n, float A[m][n], float b[n], float c[m], bool reset) {
 8001b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b56:	4698      	mov	r8, r3
 8001b58:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8001b5c:	4606      	mov	r6, r0
 8001b5e:	460f      	mov	r7, r1
 8001b60:	4614      	mov	r4, r2
	if (reset) {
 8001b62:	b123      	cbz	r3, 8001b6e <matvecprod+0x1c>
		memset(c, 0, m * sizeof(c[0]));
 8001b64:	0082      	lsls	r2, r0, #2
 8001b66:	2100      	movs	r1, #0
 8001b68:	9806      	ldr	r0, [sp, #24]
 8001b6a:	f011 f86c 	bl	8012c46 <memset>
 8001b6e:	4622      	mov	r2, r4
 8001b70:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8001b74:	9906      	ldr	r1, [sp, #24]
	}
	for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
 8001b76:	2400      	movs	r4, #0
	for(int i = 0; i < m; i++){
 8001b78:	42b4      	cmp	r4, r6
 8001b7a:	da14      	bge.n	8001ba6 <matvecprod+0x54>
 8001b7c:	4643      	mov	r3, r8
 8001b7e:	4615      	mov	r5, r2
        for(int j = 0; j < n; j++){
 8001b80:	2000      	movs	r0, #0
 8001b82:	e00a      	b.n	8001b9a <matvecprod+0x48>
            c[i] += A[i][j] * b[j];
 8001b84:	ecf5 6a01 	vldmia	r5!, {s13}
        for(int j = 0; j < n; j++){
 8001b88:	3001      	adds	r0, #1
            c[i] += A[i][j] * b[j];
 8001b8a:	ecb3 7a01 	vldmia	r3!, {s14}
 8001b8e:	edd1 7a00 	vldr	s15, [r1]
 8001b92:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001b96:	edc1 7a00 	vstr	s15, [r1]
        for(int j = 0; j < n; j++){
 8001b9a:	42b8      	cmp	r0, r7
 8001b9c:	dbf2      	blt.n	8001b84 <matvecprod+0x32>
	for(int i = 0; i < m; i++){
 8001b9e:	3401      	adds	r4, #1
 8001ba0:	4462      	add	r2, ip
 8001ba2:	3104      	adds	r1, #4
 8001ba4:	e7e8      	b.n	8001b78 <matvecprod+0x26>
        }
    }
}
 8001ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001bac <lower_triangular_inverse>:
   int32_t i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8001bac:	1c43      	adds	r3, r0, #1
        if (*p_k == 0.0) return -1;
        else *p_k = 1.0 / *p_k;
 8001bae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8001bb2:	460a      	mov	r2, r1
 8001bb4:	009b      	lsls	r3, r3, #2
int32_t lower_triangular_inverse(int32_t n, float *L) {
 8001bb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8001bba:	2400      	movs	r4, #0
 8001bbc:	4284      	cmp	r4, r0
 8001bbe:	db0b      	blt.n	8001bd8 <lower_triangular_inverse+0x2c>
    }

    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8001bc0:	f1a3 0c04 	sub.w	ip, r3, #4
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	eb01 050c 	add.w	r5, r1, ip
 8001bca:	46ae      	mov	lr, r5
 8001bcc:	4290      	cmp	r0, r2
 8001bce:	dd34      	ble.n	8001c3a <lower_triangular_inverse+0x8e>
 8001bd0:	462f      	mov	r7, r5
 8001bd2:	460e      	mov	r6, r1
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8001bd4:	2400      	movs	r4, #0
 8001bd6:	e022      	b.n	8001c1e <lower_triangular_inverse+0x72>
        if (*p_k == 0.0) return -1;
 8001bd8:	edd2 7a00 	vldr	s15, [r2]
 8001bdc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be4:	d025      	beq.n	8001c32 <lower_triangular_inverse+0x86>
        else *p_k = 1.0 / *p_k;
 8001be6:	eec7 6a27 	vdiv.f32	s13, s14, s15
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8001bea:	3401      	adds	r4, #1
        else *p_k = 1.0 / *p_k;
 8001bec:	edc2 6a00 	vstr	s13, [r2]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8001bf0:	441a      	add	r2, r3
 8001bf2:	e7e3      	b.n	8001bbc <lower_triangular_inverse+0x10>
            sum = 0.0;
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
                sum += *(p_i + k) * *(p_k + j);
 8001bf4:	ed99 7a00 	vldr	s14, [r9]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8001bf8:	f108 0801 	add.w	r8, r8, #1
                sum += *(p_i + k) * *(p_k + j);
 8001bfc:	ecfa 6a01 	vldmia	sl!, {s13}
 8001c00:	44e1      	add	r9, ip
 8001c02:	eee6 7a87 	vfma.f32	s15, s13, s14
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8001c06:	4590      	cmp	r8, r2
 8001c08:	dbf4      	blt.n	8001bf4 <lower_triangular_inverse+0x48>
            *(p_i + j) = - *(p_i + i) * sum;
 8001c0a:	ed9e 7a01 	vldr	s14, [lr, #4]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8001c0e:	3401      	adds	r4, #1
 8001c10:	441e      	add	r6, r3
            *(p_i + j) = - *(p_i + i) * sum;
 8001c12:	ee67 7a67 	vnmul.f32	s15, s14, s15
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8001c16:	42a2      	cmp	r2, r4
            *(p_i + j) = - *(p_i + i) * sum;
 8001c18:	ece7 7a01 	vstmia	r7!, {s15}
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8001c1c:	d005      	beq.n	8001c2a <lower_triangular_inverse+0x7e>
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8001c1e:	46b1      	mov	r9, r6
 8001c20:	46ba      	mov	sl, r7
 8001c22:	46a0      	mov	r8, r4
            sum = 0.0;
 8001c24:	eddf 7a06 	vldr	s15, [pc, #24]	; 8001c40 <lower_triangular_inverse+0x94>
 8001c28:	e7ed      	b.n	8001c06 <lower_triangular_inverse+0x5a>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8001c2a:	3201      	adds	r2, #1
 8001c2c:	4465      	add	r5, ip
 8001c2e:	449e      	add	lr, r3
 8001c30:	e7cc      	b.n	8001bcc <lower_triangular_inverse+0x20>
        if (*p_k == 0.0) return -1;
 8001c32:	f04f 30ff 	mov.w	r0, #4294967295
        }
    }

    return 0;
}
 8001c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	e7fb      	b.n	8001c36 <lower_triangular_inverse+0x8a>
 8001c3e:	bf00      	nop
 8001c40:	00000000 	.word	0x00000000

08001c44 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 8001c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c48:	4692      	mov	sl, r2
 8001c4a:	4681      	mov	r9, r0
    memset(L, 0, n * n * sizeof(L[0][0]));
 8001c4c:	fb00 f200 	mul.w	r2, r0, r0
    for (int i = 0; i < n; i++)
 8001c50:	2500      	movs	r5, #0
 8001c52:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8001c56:	4657      	mov	r7, sl
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 8001c58:	460c      	mov	r4, r1
    memset(L, 0, n * n * sizeof(L[0][0]));
 8001c5a:	0092      	lsls	r2, r2, #2
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4650      	mov	r0, sl
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 8001c60:	ed2d 8b02 	vpush	{d8}
        for (int j = 0; j < (i+1); j++) {
            float s = 0;
            for (int k = 0; k < j; k++)
                s += L[i][k] * L[j][k];
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8001c64:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 8001c68:	b083      	sub	sp, #12
    memset(L, 0, n * n * sizeof(L[0][0]));
 8001c6a:	f010 ffec 	bl	8012c46 <memset>
    for (int i = 0; i < n; i++)
 8001c6e:	454d      	cmp	r5, r9
 8001c70:	da3e      	bge.n	8001cf0 <cholesky+0xac>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8001c72:	46d0      	mov	r8, sl
 8001c74:	463a      	mov	r2, r7
        for (int j = 0; j < (i+1); j++) {
 8001c76:	2600      	movs	r6, #0
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8001c78:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8001c7c:	e01a      	b.n	8001cb4 <cholesky+0x70>
                s += L[i][k] * L[j][k];
 8001c7e:	ecf0 6a01 	vldmia	r0!, {s13}
            for (int k = 0; k < j; k++)
 8001c82:	3301      	adds	r3, #1
                s += L[i][k] * L[j][k];
 8001c84:	ecbc 7a01 	vldmia	ip!, {s14}
 8001c88:	eee6 7a87 	vfma.f32	s15, s13, s14
            for (int k = 0; k < j; k++)
 8001c8c:	42b3      	cmp	r3, r6
 8001c8e:	d1f6      	bne.n	8001c7e <cholesky+0x3a>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8001c90:	42b5      	cmp	r5, r6
 8001c92:	d115      	bne.n	8001cc0 <cholesky+0x7c>
 8001c94:	ed91 0a00 	vldr	s0, [r1]
 8001c98:	9201      	str	r2, [sp, #4]
 8001c9a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001c9e:	9100      	str	r1, [sp, #0]
 8001ca0:	f011 fec6 	bl	8013a30 <sqrtf>
 8001ca4:	e9dd 1200 	ldrd	r1, r2, [sp]
        for (int j = 0; j < (i+1); j++) {
 8001ca8:	3601      	adds	r6, #1
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8001caa:	eca2 0a01 	vstmia	r2!, {s0}
 8001cae:	44d8      	add	r8, fp
        for (int j = 0; j < (i+1); j++) {
 8001cb0:	42b5      	cmp	r5, r6
 8001cb2:	db19      	blt.n	8001ce8 <cholesky+0xa4>
                s += L[i][k] * L[j][k];
 8001cb4:	46c4      	mov	ip, r8
 8001cb6:	4638      	mov	r0, r7
            for (int k = 0; k < j; k++)
 8001cb8:	2300      	movs	r3, #0
            float s = 0;
 8001cba:	eddf 7a10 	vldr	s15, [pc, #64]	; 8001cfc <cholesky+0xb8>
 8001cbe:	e7e5      	b.n	8001c8c <cholesky+0x48>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8001cc0:	00b3      	lsls	r3, r6, #2
 8001cc2:	18e0      	adds	r0, r4, r3
 8001cc4:	4443      	add	r3, r8
 8001cc6:	ed90 0a00 	vldr	s0, [r0]
 8001cca:	ed93 7a00 	vldr	s14, [r3]
 8001cce:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001cd2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001cd6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8001cda:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8001cde:	ee20 0b06 	vmul.f64	d0, d0, d6
 8001ce2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8001ce6:	e7df      	b.n	8001ca8 <cholesky+0x64>
    for (int i = 0; i < n; i++)
 8001ce8:	3501      	adds	r5, #1
 8001cea:	445c      	add	r4, fp
 8001cec:	445f      	add	r7, fp
 8001cee:	e7be      	b.n	8001c6e <cholesky+0x2a>
        }
}
 8001cf0:	b003      	add	sp, #12
 8001cf2:	ecbd 8b02 	vpop	{d8}
 8001cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cfa:	bf00      	nop
 8001cfc:	00000000 	.word	0x00000000

08001d00 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 8001d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 8001d04:	fb00 fa00 	mul.w	sl, r0, r0
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 8001d08:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	4615      	mov	r5, r2
	float A_dash[n][n];
 8001d10:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
    for (int i = 0; i < n; i++) {
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 8001d14:	ea4f 0998 	mov.w	r9, r8, lsr #2
	float A_dash[n][n];
 8001d18:	f10a 060a 	add.w	r6, sl, #10
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8001d1c:	4652      	mov	r2, sl
	float A_dash[n][n];
 8001d1e:	f026 0307 	bic.w	r3, r6, #7
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 8001d22:	ed2d 8b02 	vpush	{d8}
 8001d26:	af00      	add	r7, sp, #0
	float A_dash[n][n];
 8001d28:	ebad 0d03 	sub.w	sp, sp, r3
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 8001d2c:	eeb0 8a40 	vmov.f32	s16, s0
	float A_dash[n][n];
 8001d30:	46eb      	mov	fp, sp
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8001d32:	4658      	mov	r0, fp
 8001d34:	f010 ff7c 	bl	8012c30 <memcpy>
    for (int i = 0; i < n; i++) {
 8001d38:	2300      	movs	r3, #0
 8001d3a:	429c      	cmp	r4, r3
 8001d3c:	dc1a      	bgt.n	8001d74 <cholesky_inverse+0x74>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 8001d3e:	f026 0607 	bic.w	r6, r6, #7
    cholesky(n, A_dash, L);
 8001d42:	4659      	mov	r1, fp
 8001d44:	4620      	mov	r0, r4
    float L[n][n];
 8001d46:	ebad 0d06 	sub.w	sp, sp, r6
 8001d4a:	466e      	mov	r6, sp
    cholesky(n, A_dash, L);
 8001d4c:	4632      	mov	r2, r6
 8001d4e:	f7ff ff79 	bl	8001c44 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8001d52:	4631      	mov	r1, r6
 8001d54:	4620      	mov	r0, r4
 8001d56:	f7ff ff29 	bl	8001bac <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 8001d5a:	4652      	mov	r2, sl
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4628      	mov	r0, r5
 8001d60:	f010 ff71 	bl	8012c46 <memset>
    for(int i = 0; i < n; i++){
 8001d64:	2200      	movs	r2, #0
 8001d66:	4294      	cmp	r4, r2
 8001d68:	dc10      	bgt.n	8001d8c <cholesky_inverse+0x8c>
            for(int k = max(i, j); k < n; k++){
                inverse[i][j] +=  L[k][i] * L[k][j];
            }
        }
    }
}
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	ecbd 8b02 	vpop	{d8}
 8001d70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 8001d74:	fb03 3209 	mla	r2, r3, r9, r3
    for (int i = 0; i < n; i++) {
 8001d78:	3301      	adds	r3, #1
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 8001d7a:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8001d7e:	edd2 7a00 	vldr	s15, [r2]
 8001d82:	eee8 7a08 	vfma.f32	s15, s16, s16
 8001d86:	edc2 7a00 	vstr	s15, [r2]
 8001d8a:	e7d6      	b.n	8001d3a <cholesky_inverse+0x3a>
 8001d8c:	4628      	mov	r0, r5
        for(int j = 0; j < n; j++){
 8001d8e:	2100      	movs	r1, #0
            for(int k = max(i, j); k < n; k++){
 8001d90:	428a      	cmp	r2, r1
 8001d92:	4694      	mov	ip, r2
 8001d94:	bfb8      	it	lt
 8001d96:	468c      	movlt	ip, r1
 8001d98:	4564      	cmp	r4, ip
 8001d9a:	dc06      	bgt.n	8001daa <cholesky_inverse+0xaa>
        for(int j = 0; j < n; j++){
 8001d9c:	3101      	adds	r1, #1
 8001d9e:	3004      	adds	r0, #4
 8001da0:	428c      	cmp	r4, r1
 8001da2:	d1f5      	bne.n	8001d90 <cholesky_inverse+0x90>
    for(int i = 0; i < n; i++){
 8001da4:	3201      	adds	r2, #1
 8001da6:	4445      	add	r5, r8
 8001da8:	e7dd      	b.n	8001d66 <cholesky_inverse+0x66>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8001daa:	fb0c f309 	mul.w	r3, ip, r9
 8001dae:	edd0 7a00 	vldr	s15, [r0]
            for(int k = max(i, j); k < n; k++){
 8001db2:	f10c 0c01 	add.w	ip, ip, #1
                inverse[i][j] +=  L[k][i] * L[k][j];
 8001db6:	eb03 0e02 	add.w	lr, r3, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
 8001dc0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8001dc4:	edde 6a00 	vldr	s13, [lr]
 8001dc8:	ed93 7a00 	vldr	s14, [r3]
 8001dcc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001dd0:	edc0 7a00 	vstr	s15, [r0]
 8001dd4:	e7e0      	b.n	8001d98 <cholesky_inverse+0x98>

08001dd6 <AcquireMutex>:
 *      Author: Jonas
 */
#include "Util/mutex.h"
#include "Sim_Con/env.h"

osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 8001dd6:	b510      	push	{r4, lr}
	osStatus_t status = osOK;
	status = osMutexAcquire(custom_mutex->mutex, 10);
 8001dd8:	210a      	movs	r1, #10
osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 8001dda:	4604      	mov	r4, r0
	status = osMutexAcquire(custom_mutex->mutex, 10);
 8001ddc:	6800      	ldr	r0, [r0, #0]
 8001dde:	f00d fdb9 	bl	800f954 <osMutexAcquire>
	if(status == osOK){
 8001de2:	b910      	cbnz	r0, 8001dea <AcquireMutex+0x14>
		custom_mutex->counter++;
 8001de4:	6863      	ldr	r3, [r4, #4]
 8001de6:	3301      	adds	r3, #1
 8001de8:	6063      	str	r3, [r4, #4]
	}

	return status;
}
 8001dea:	bd10      	pop	{r4, pc}

08001dec <ReleaseMutex>:

osStatus_t ReleaseMutex(custom_mutex_t *custom_mutex){
	return osMutexRelease(custom_mutex->mutex);
 8001dec:	6800      	ldr	r0, [r0, #0]
 8001dee:	f00d bde1 	b.w	800f9b4 <osMutexRelease>

08001df2 <ReadMutex>:
}

osStatus_t ReadMutex(custom_mutex_t *custom_mutex,void const* global_data, void* const local_data, int32_t size){
 8001df2:	b570      	push	{r4, r5, r6, lr}
 8001df4:	b09a      	sub	sp, #104	; 0x68
 8001df6:	461c      	mov	r4, r3
 8001df8:	460e      	mov	r6, r1
 8001dfa:	4615      	mov	r5, r2
	uint8_t buffer[100] = { 0 };
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2264      	movs	r2, #100	; 0x64
 8001e00:	a801      	add	r0, sp, #4
 8001e02:	f010 ff20 	bl	8012c46 <memset>
	uint32_t counter = custom_mutex->counter;
	osStatus_t status = osError;
	for(int i = 0; i < 5; i++){
		memcpy(&buffer[0], global_data, size);
 8001e06:	4622      	mov	r2, r4
 8001e08:	4631      	mov	r1, r6
 8001e0a:	a801      	add	r0, sp, #4
 8001e0c:	f010 ff10 	bl	8012c30 <memcpy>
		if(custom_mutex->counter == counter){
			memcpy(local_data, buffer, size);
 8001e10:	4622      	mov	r2, r4
 8001e12:	a901      	add	r1, sp, #4
 8001e14:	4628      	mov	r0, r5
 8001e16:	f010 ff0b 	bl	8012c30 <memcpy>
			break;
		}
		counter = custom_mutex->counter;
	}
	return status;
}
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	b01a      	add	sp, #104	; 0x68
 8001e1e:	bd70      	pop	{r4, r5, r6, pc}

08001e20 <ReadMutexStateEst>:
		/* Write in Buffer */
		Placeholder_measurement[0] = (float) (baro->pressure);
		Placeholder_timestamps[0] = baro->ts;
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
		Placeholder_timestamps[1] = imu->ts;
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 8001e20:	edd1 7a01 	vldr	s15, [r1, #4]
 8001e24:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8001e90 <ReadMutexStateEst+0x70>
 8001e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 8001e2c:	b570      	push	{r4, r5, r6, lr}
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 8001e2e:	eec7 6a86 	vdiv.f32	s13, s15, s12
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 8001e32:	f9b2 400a 	ldrsh.w	r4, [r2, #10]
		Placeholder_measurement[0] = (float) (baro->pressure);
 8001e36:	edd1 7a00 	vldr	s15, [r1]
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 8001e3a:	ee07 4a10 	vmov	s14, r4
osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 8001e3e:	9804      	ldr	r0, [sp, #16]
 8001e40:	240c      	movs	r4, #12
		Placeholder_timestamps[1] = imu->ts;
 8001e42:	68d5      	ldr	r5, [r2, #12]

		/* Check if Mutex was aquired */
		if(custom_mutex->counter == counter){
			state->baro_data[sb_number-1].pressure = Placeholder_measurement[0];
 8001e44:	1e42      	subs	r2, r0, #1
		Placeholder_timestamps[0] = baro->ts;
 8001e46:	688e      	ldr	r6, [r1, #8]
		Placeholder_measurement[0] = (float) (baro->pressure);
 8001e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e4c:	fb04 3000 	mla	r0, r4, r0, r3
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 8001e50:	eeba 7acb 	vcvt.f32.s32	s14, s14, #10
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];

			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8001e54:	211c      	movs	r1, #28
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 8001e56:	fb04 3402 	mla	r4, r4, r2, r3
		Placeholder_measurement[0] = (float) (baro->pressure);
 8001e5a:	ed40 7a03 	vstr	s15, [r0, #-12]
			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8001e5e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001e62:	fb01 3302 	mla	r3, r1, r2, r3
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
 8001e66:	ed40 6a02 	vstr	s13, [r0, #-8]
		counter = custom_mutex->counter;
	}


	return status;
}
 8001e6a:	2000      	movs	r0, #0
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 8001e6c:	60a6      	str	r6, [r4, #8]
			state->imu_data[sb_number-1].ts = Placeholder_timestamps[1];
 8001e6e:	63dd      	str	r5, [r3, #60]	; 0x3c
			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8001e70:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8001e88 <ReadMutexStateEst+0x68>
 8001e74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e78:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001e7c:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
}
 8001e80:	bd70      	pop	{r4, r5, r6, pc}
 8001e82:	bf00      	nop
 8001e84:	f3af 8000 	nop.w
 8001e88:	51eb851f 	.word	0x51eb851f
 8001e8c:	40239eb8 	.word	0x40239eb8
 8001e90:	42c80000 	.word	0x42c80000

08001e94 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8001e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e96:	b0b1      	sub	sp, #196	; 0xc4
 8001e98:	4615      	mov	r5, r2
 8001e9a:	4606      	mov	r6, r0
 8001e9c:	460f      	mov	r7, r1
	log_entry_t log_entry = { 0 };
 8001e9e:	2296      	movs	r2, #150	; 0x96
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	a80a      	add	r0, sp, #40	; 0x28
		sensor_type_e sensor_type, void *sensor_data) {
 8001ea4:	461c      	mov	r4, r3
	log_entry_t log_entry = { 0 };
 8001ea6:	f010 fece 	bl	8012c46 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8001eaa:	2301      	movs	r3, #1
 8001eac:	4a3b      	ldr	r2, [pc, #236]	; (8001f9c <logSensor+0x108>)
 8001eae:	2196      	movs	r1, #150	; 0x96
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	a80a      	add	r0, sp, #40	; 0x28
 8001eb4:	4633      	mov	r3, r6
 8001eb6:	e9cd 7501 	strd	r7, r5, [sp, #4]
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8001eba:	3d01      	subs	r5, #1
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8001ebc:	f010 ff84 	bl	8012dc8 <sniprintf>
			battery_data->battery, battery_data->consumption,
			battery_data->current, battery_data->supply);
	}
		break;
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 8001ec0:	a80a      	add	r0, sp, #40	; 0x28
	switch (sensor_type) {
 8001ec2:	2d03      	cmp	r5, #3
 8001ec4:	d861      	bhi.n	8001f8a <logSensor+0xf6>
 8001ec6:	e8df f005 	tbb	[pc, r5]
 8001eca:	1802      	.short	0x1802
 8001ecc:	5034      	.short	0x5034
		snprintf(log_entry.str + strlen(log_entry.str),
 8001ece:	f7fe fa07 	bl	80002e0 <strlen>
 8001ed2:	68a3      	ldr	r3, [r4, #8]
 8001ed4:	4a32      	ldr	r2, [pc, #200]	; (8001fa0 <logSensor+0x10c>)
 8001ed6:	2196      	movs	r1, #150	; 0x96
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	6863      	ldr	r3, [r4, #4]
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	ac0a      	add	r4, sp, #40	; 0x28
 8001ee2:	4420      	add	r0, r4
 8001ee4:	f010 ff70 	bl	8012dc8 <sniprintf>
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8001ee8:	2300      	movs	r3, #0
 8001eea:	482e      	ldr	r0, [pc, #184]	; (8001fa4 <logSensor+0x110>)
 8001eec:	a90a      	add	r1, sp, #40	; 0x28
 8001eee:	461a      	mov	r2, r3
 8001ef0:	6800      	ldr	r0, [r0, #0]
 8001ef2:	f00d feb9 	bl	800fc68 <osMessageQueuePut>
}
 8001ef6:	b031      	add	sp, #196	; 0xc4
 8001ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintf(log_entry.str + strlen(log_entry.str),
 8001efa:	f7fe f9f1 	bl	80002e0 <strlen>
 8001efe:	68e2      	ldr	r2, [r4, #12]
 8001f00:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8001f04:	2196      	movs	r1, #150	; 0x96
 8001f06:	9205      	str	r2, [sp, #20]
 8001f08:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8001f0c:	9204      	str	r2, [sp, #16]
 8001f0e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8001f12:	9203      	str	r2, [sp, #12]
 8001f14:	f9b4 2000 	ldrsh.w	r2, [r4]
 8001f18:	9202      	str	r2, [sp, #8]
 8001f1a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8001f1e:	9201      	str	r2, [sp, #4]
 8001f20:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8001f24:	ac0a      	add	r4, sp, #40	; 0x28
 8001f26:	9200      	str	r2, [sp, #0]
 8001f28:	4420      	add	r0, r4
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <logSensor+0x114>)
 8001f2c:	f010 ff4c 	bl	8012dc8 <sniprintf>
		break;
 8001f30:	e7da      	b.n	8001ee8 <logSensor+0x54>
		snprintf(log_entry.str + strlen(log_entry.str),
 8001f32:	f7fe f9d5 	bl	80002e0 <strlen>
 8001f36:	8be3      	ldrh	r3, [r4, #30]
 8001f38:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <logSensor+0x118>)
 8001f3a:	2196      	movs	r1, #150	; 0x96
 8001f3c:	9308      	str	r3, [sp, #32]
 8001f3e:	8c23      	ldrh	r3, [r4, #32]
 8001f40:	9307      	str	r3, [sp, #28]
 8001f42:	7b23      	ldrb	r3, [r4, #12]
 8001f44:	9306      	str	r3, [sp, #24]
 8001f46:	69a3      	ldr	r3, [r4, #24]
 8001f48:	9305      	str	r3, [sp, #20]
 8001f4a:	7d23      	ldrb	r3, [r4, #20]
 8001f4c:	9304      	str	r3, [sp, #16]
 8001f4e:	6923      	ldr	r3, [r4, #16]
 8001f50:	9303      	str	r3, [sp, #12]
 8001f52:	7b63      	ldrb	r3, [r4, #13]
 8001f54:	9302      	str	r3, [sp, #8]
 8001f56:	68a3      	ldr	r3, [r4, #8]
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	6863      	ldr	r3, [r4, #4]
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	ac0a      	add	r4, sp, #40	; 0x28
 8001f62:	4420      	add	r0, r4
 8001f64:	f010 ff30 	bl	8012dc8 <sniprintf>
		break;
 8001f68:	e7be      	b.n	8001ee8 <logSensor+0x54>
		snprintf(log_entry.str + strlen(log_entry.str),
 8001f6a:	f7fe f9b9 	bl	80002e0 <strlen>
 8001f6e:	8822      	ldrh	r2, [r4, #0]
 8001f70:	8863      	ldrh	r3, [r4, #2]
 8001f72:	2196      	movs	r1, #150	; 0x96
 8001f74:	9202      	str	r2, [sp, #8]
 8001f76:	88a2      	ldrh	r2, [r4, #4]
 8001f78:	9201      	str	r2, [sp, #4]
 8001f7a:	88e2      	ldrh	r2, [r4, #6]
 8001f7c:	ac0a      	add	r4, sp, #40	; 0x28
 8001f7e:	9200      	str	r2, [sp, #0]
 8001f80:	4420      	add	r0, r4
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <logSensor+0x11c>)
 8001f84:	f010 ff20 	bl	8012dc8 <sniprintf>
		break;
 8001f88:	e7ae      	b.n	8001ee8 <logSensor+0x54>
		snprintf(log_entry.str + strlen(log_entry.str),
 8001f8a:	f7fe f9a9 	bl	80002e0 <strlen>
 8001f8e:	ab0a      	add	r3, sp, #40	; 0x28
 8001f90:	4908      	ldr	r1, [pc, #32]	; (8001fb4 <logSensor+0x120>)
 8001f92:	4418      	add	r0, r3
 8001f94:	f010 ff4c 	bl	8012e30 <strcpy>
		break;
 8001f98:	e7a6      	b.n	8001ee8 <logSensor+0x54>
 8001f9a:	bf00      	nop
 8001f9c:	08014a4b 	.word	0x08014a4b
 8001fa0:	08014a5a 	.word	0x08014a5a
 8001fa4:	2401b574 	.word	0x2401b574
 8001fa8:	08014a67 	.word	0x08014a67
 8001fac:	08014a84 	.word	0x08014a84
 8001fb0:	08014aaa 	.word	0x08014aaa
 8001fb4:	08014abb 	.word	0x08014abb

08001fb8 <logRocketState>:

osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 8001fb8:	b530      	push	{r4, r5, lr}
 8001fba:	b0ad      	sub	sp, #180	; 0xb4
 8001fbc:	4605      	mov	r5, r0
	log_entry_t log_entry = { 0 };
 8001fbe:	2496      	movs	r4, #150	; 0x96
osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 8001fc0:	a803      	add	r0, sp, #12
 8001fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8001fc6:	4622      	mov	r2, r4
 8001fc8:	2100      	movs	r1, #0
 8001fca:	a806      	add	r0, sp, #24
 8001fcc:	f010 fe3b 	bl	8012c46 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
 8001fd0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	4a08      	ldr	r2, [pc, #32]	; (8001ff8 <logRocketState+0x40>)
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	2302      	movs	r3, #2
 8001fdc:	a806      	add	r0, sp, #24
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	462b      	mov	r3, r5
 8001fe2:	f010 fef1 	bl	8012dc8 <sniprintf>
			flight_phase_detection.flight_phase);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	4804      	ldr	r0, [pc, #16]	; (8001ffc <logRocketState+0x44>)
 8001fea:	a906      	add	r1, sp, #24
 8001fec:	461a      	mov	r2, r3
 8001fee:	6800      	ldr	r0, [r0, #0]
 8001ff0:	f00d fe3a 	bl	800fc68 <osMessageQueuePut>
}
 8001ff4:	b02d      	add	sp, #180	; 0xb4
 8001ff6:	bd30      	pop	{r4, r5, pc}
 8001ff8:	08014a40 	.word	0x08014a40
 8001ffc:	2401b574 	.word	0x2401b574

08002000 <logEstimatorVar>:

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8002000:	b084      	sub	sp, #16
 8002002:	b530      	push	{r4, r5, lr}
 8002004:	b0ab      	sub	sp, #172	; 0xac
 8002006:	4605      	mov	r5, r0
	log_entry_t log_entry = { 0 };
 8002008:	2496      	movs	r4, #150	; 0x96
osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 800200a:	a82f      	add	r0, sp, #188	; 0xbc
 800200c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8002010:	4622      	mov	r2, r4
 8002012:	2100      	movs	r1, #0
 8002014:	a804      	add	r0, sp, #16
 8002016:	f010 fe16 	bl	8012c46 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, ESTIMATOR_VAR,
 800201a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800201c:	4621      	mov	r1, r4
 800201e:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <logEstimatorVar+0x50>)
 8002020:	9303      	str	r3, [sp, #12]
 8002022:	a804      	add	r0, sp, #16
 8002024:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8002026:	9302      	str	r3, [sp, #8]
 8002028:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	2303      	movs	r3, #3
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	462b      	mov	r3, r5
 8002032:	f010 fec9 	bl	8012dc8 <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0], estimator_data.acceleration_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002036:	2300      	movs	r3, #0
 8002038:	4806      	ldr	r0, [pc, #24]	; (8002054 <logEstimatorVar+0x54>)
 800203a:	a904      	add	r1, sp, #16
 800203c:	461a      	mov	r2, r3
 800203e:	6800      	ldr	r0, [r0, #0]
 8002040:	f00d fe12 	bl	800fc68 <osMessageQueuePut>
}
 8002044:	b02b      	add	sp, #172	; 0xac
 8002046:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800204a:	b004      	add	sp, #16
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	08014a1c 	.word	0x08014a1c
 8002054:	2401b574 	.word	0x2401b574

08002058 <logControllerOutput>:

osStatus_t logControllerOutput(timestamp_t ts, int32_t controller_output, int32_t reference_error,
		int32_t integrated_error) {
 8002058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_entry_t log_entry = { 0 };
 800205c:	2496      	movs	r4, #150	; 0x96
		int32_t integrated_error) {
 800205e:	b0aa      	sub	sp, #168	; 0xa8
 8002060:	4605      	mov	r5, r0
 8002062:	460e      	mov	r6, r1
 8002064:	4617      	mov	r7, r2
	log_entry_t log_entry = { 0 };
 8002066:	2100      	movs	r1, #0
 8002068:	4622      	mov	r2, r4
 800206a:	a804      	add	r0, sp, #16
		int32_t integrated_error) {
 800206c:	4698      	mov	r8, r3
	log_entry_t log_entry = { 0 };
 800206e:	f010 fdea 	bl	8012c46 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, CONTROLLER_OUTPUT,
 8002072:	2304      	movs	r3, #4
 8002074:	4621      	mov	r1, r4
 8002076:	9601      	str	r6, [sp, #4]
 8002078:	a804      	add	r0, sp, #16
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	462b      	mov	r3, r5
 800207e:	4a07      	ldr	r2, [pc, #28]	; (800209c <logControllerOutput+0x44>)
 8002080:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8002084:	f010 fea0 	bl	8012dc8 <sniprintf>
			controller_output, reference_error, integrated_error);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002088:	2300      	movs	r3, #0
 800208a:	4805      	ldr	r0, [pc, #20]	; (80020a0 <logControllerOutput+0x48>)
 800208c:	a904      	add	r1, sp, #16
 800208e:	461a      	mov	r2, r3
 8002090:	6800      	ldr	r0, [r0, #0]
 8002092:	f00d fde9 	bl	800fc68 <osMessageQueuePut>
}
 8002096:	b02a      	add	sp, #168	; 0xa8
 8002098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800209c:	08014a1c 	.word	0x08014a1c
 80020a0:	2401b574 	.word	0x2401b574

080020a4 <logMotor>:

osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 80020a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	log_entry_t log_entry = { 0 };
 80020a6:	2496      	movs	r4, #150	; 0x96
osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 80020a8:	b0ab      	sub	sp, #172	; 0xac
 80020aa:	4605      	mov	r5, r0
 80020ac:	460e      	mov	r6, r1
 80020ae:	4617      	mov	r7, r2
	log_entry_t log_entry = { 0 };
 80020b0:	2100      	movs	r1, #0
 80020b2:	4622      	mov	r2, r4
 80020b4:	a804      	add	r0, sp, #16
 80020b6:	f010 fdc6 	bl	8012c46 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld\n", ts, MOTOR_POSITION,
 80020ba:	2305      	movs	r3, #5
 80020bc:	4621      	mov	r1, r4
 80020be:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <logMotor+0x3c>)
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	a804      	add	r0, sp, #16
 80020c4:	462b      	mov	r3, r5
 80020c6:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80020ca:	f010 fe7d 	bl	8012dc8 <sniprintf>
			desired_position, actual_position);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80020ce:	2300      	movs	r3, #0
 80020d0:	4804      	ldr	r0, [pc, #16]	; (80020e4 <logMotor+0x40>)
 80020d2:	a904      	add	r1, sp, #16
 80020d4:	461a      	mov	r2, r3
 80020d6:	6800      	ldr	r0, [r0, #0]
 80020d8:	f00d fdc6 	bl	800fc68 <osMessageQueuePut>
}
 80020dc:	b02b      	add	sp, #172	; 0xac
 80020de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e0:	08014a30 	.word	0x08014a30
 80020e4:	2401b574 	.word	0x2401b574

080020e8 <UsbPrint>:
}


/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 80020e8:	b40f      	push	{r0, r1, r2, r3}
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
		osMutexRelease(print_mutex);
	}
#endif
	return ret;
}
 80020ea:	2001      	movs	r0, #1
 80020ec:	b004      	add	sp, #16
 80020ee:	4770      	bx	lr

080020f0 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 80020f0:	b508      	push	{r3, lr}
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 80020f2:	f010 fb1d 	bl	8012730 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	osDelay(5000);
 80020f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80020fa:	f00d fbab 	bl	800f854 <osDelay>
	vTraceEnable(TRC_START);
 80020fe:	2001      	movs	r0, #1
 8002100:	f002 fcb8 	bl	8004a74 <vTraceEnable>
	for (;;) {
		osDelay(1000);
 8002104:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002108:	f00d fba4 	bl	800f854 <osDelay>
 800210c:	e7fa      	b.n	8002104 <StartDefaultTask+0x14>
	...

08002110 <SystemClock_Config>:
void SystemClock_Config(void) {
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	b0cc      	sub	sp, #304	; 0x130
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002114:	224c      	movs	r2, #76	; 0x4c
 8002116:	2100      	movs	r1, #0
 8002118:	a80a      	add	r0, sp, #40	; 0x28
 800211a:	f010 fd94 	bl	8012c46 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800211e:	2220      	movs	r2, #32
 8002120:	2100      	movs	r1, #0
 8002122:	a802      	add	r0, sp, #8
 8002124:	f010 fd8f 	bl	8012c46 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002128:	22bc      	movs	r2, #188	; 0xbc
 800212a:	2100      	movs	r1, #0
 800212c:	a81d      	add	r0, sp, #116	; 0x74
 800212e:	f010 fd8a 	bl	8012c46 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002132:	2002      	movs	r0, #2
 8002134:	f006 f84e 	bl	80081d4 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002138:	2300      	movs	r3, #0
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	4b31      	ldr	r3, [pc, #196]	; (8002204 <SystemClock_Config+0xf4>)
 800213e:	699a      	ldr	r2, [r3, #24]
 8002140:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002144:	619a      	str	r2, [r3, #24]
 8002146:	699a      	ldr	r2, [r3, #24]
 8002148:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800214c:	9201      	str	r2, [sp, #4]
 800214e:	4a2e      	ldr	r2, [pc, #184]	; (8002208 <SystemClock_Config+0xf8>)
 8002150:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002152:	f041 0101 	orr.w	r1, r1, #1
 8002156:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002158:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800215a:	f002 0201 	and.w	r2, r2, #1
 800215e:	9201      	str	r2, [sp, #4]
 8002160:	9a01      	ldr	r2, [sp, #4]
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8002162:	699a      	ldr	r2, [r3, #24]
 8002164:	0490      	lsls	r0, r2, #18
 8002166:	d5fc      	bpl.n	8002162 <SystemClock_Config+0x52>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002168:	4a28      	ldr	r2, [pc, #160]	; (800220c <SystemClock_Config+0xfc>)
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800216a:	2601      	movs	r6, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800216c:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800216e:	2400      	movs	r4, #0
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002170:	6a93      	ldr	r3, [r2, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002172:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002174:	f023 0303 	bic.w	r3, r3, #3
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	6293      	str	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800217e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLM = 1;
 8002182:	9615      	str	r6, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002184:	941c      	str	r4, [sp, #112]	; 0x70
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002186:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 120;
 800218a:	2378      	movs	r3, #120	; 0x78
	RCC_OscInitStruct.PLL.PLLP = 2;
 800218c:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 20;
 8002190:	2314      	movs	r3, #20
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002192:	e9cd 3518 	strd	r3, r5, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002196:	230c      	movs	r3, #12
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002198:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800219c:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80021a0:	f006 f844 	bl	800822c <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a4:	223f      	movs	r2, #63	; 0x3f
 80021a6:	2303      	movs	r3, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80021a8:	2104      	movs	r1, #4
 80021aa:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80021b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80021b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80021b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80021bc:	2340      	movs	r3, #64	; 0x40
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80021be:	e9cd 2308 	strd	r2, r3, [sp, #32]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80021c2:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80021c6:	f006 fb61 	bl	800888c <HAL_RCC_ClockConfig>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <SystemClock_Config+0x100>)
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80021cc:	21c0      	movs	r1, #192	; 0xc0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80021ce:	a81d      	add	r0, sp, #116	; 0x74
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80021d0:	9425      	str	r4, [sp, #148]	; 0x94
	PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80021d2:	9430      	str	r4, [sp, #192]	; 0xc0
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80021d4:	9445      	str	r4, [sp, #276]	; 0x114
	PeriphClkInitStruct.PLL2.PLL2M = 1;
 80021d6:	e9cd 361d 	strd	r3, r6, [sp, #116]	; 0x74
	PeriphClkInitStruct.PLL2.PLL2N = 19;
 80021da:	2313      	movs	r3, #19
	PeriphClkInitStruct.PLL2.PLL2P = 1;
 80021dc:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80021e0:	2320      	movs	r3, #32
 80021e2:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80021e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 80021ea:	e9cd 5521 	strd	r5, r5, [sp, #132]	; 0x84
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80021ee:	933e      	str	r3, [sp, #248]	; 0xf8
	PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80021f0:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
	PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80021f4:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80021f8:	f006 fdce 	bl	8008d98 <HAL_RCCEx_PeriphCLKConfig>
	HAL_PWREx_EnableUSBVoltageDetector();
 80021fc:	f006 f80e 	bl	800821c <HAL_PWREx_EnableUSBVoltageDetector>
}
 8002200:	b04c      	add	sp, #304	; 0x130
 8002202:	bd70      	pop	{r4, r5, r6, pc}
 8002204:	58024800 	.word	0x58024800
 8002208:	58000400 	.word	0x58000400
 800220c:	58024400 	.word	0x58024400
 8002210:	000d3003 	.word	0x000d3003

08002214 <main>:
int main(void) {
 8002214:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002218:	b0bd      	sub	sp, #244	; 0xf4
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800221a:	4de6      	ldr	r5, [pc, #920]	; (80025b4 <main+0x3a0>)
	HAL_Init();
 800221c:	f003 f974 	bl	8005508 <HAL_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002220:	2400      	movs	r4, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002222:	ae35      	add	r6, sp, #212	; 0xd4
	SystemClock_Config();
 8002224:	f7ff ff74 	bl	8002110 <SystemClock_Config>
	init_env(&global_env);
 8002228:	48e3      	ldr	r0, [pc, #908]	; (80025b8 <main+0x3a4>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222a:	2701      	movs	r7, #1
	init_env(&global_env);
 800222c:	f7fe ff10 	bl	8001050 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 8002230:	48e2      	ldr	r0, [pc, #904]	; (80025bc <main+0x3a8>)
 8002232:	f7ff f863 	bl	80012fc <reset_flight_phase_detection>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002236:	2214      	movs	r2, #20
 8002238:	2100      	movs	r1, #0
 800223a:	4630      	mov	r0, r6
 800223c:	f010 fd03 	bl	8012c46 <memset>
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002240:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 8002244:	2200      	movs	r2, #0
 8002246:	2102      	movs	r1, #2
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002248:	f043 0310 	orr.w	r3, r3, #16
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 800224c:	48dc      	ldr	r0, [pc, #880]	; (80025c0 <main+0x3ac>)
	ADC_MultiModeTypeDef multimode = { 0 };
 800224e:	f10d 08c4 	add.w	r8, sp, #196	; 0xc4
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002252:	f04f 0a04 	mov.w	sl, #4
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002256:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800225a:	f44f 2980 	mov.w	r9, #262144	; 0x40000
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800225e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002262:	f04f 6b80 	mov.w	fp, #67108864	; 0x4000000
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	9303      	str	r3, [sp, #12]
 800226c:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800226e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800227a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	9304      	str	r3, [sp, #16]
 8002284:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002286:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800228a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002292:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229a:	9305      	str	r3, [sp, #20]
 800229c:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800229e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80022aa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	9306      	str	r3, [sp, #24]
 80022b4:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80022c2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	9307      	str	r3, [sp, #28]
 80022cc:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80022ce:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80022da:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	9308      	str	r3, [sp, #32]
 80022e4:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 80022e6:	f005 fa77 	bl	80077d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CAMERA1_Pin | CAMERA2_Pin, GPIO_PIN_RESET);
 80022ea:	2200      	movs	r2, #0
 80022ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80022f0:	48b4      	ldr	r0, [pc, #720]	; (80025c4 <main+0x3b0>)
 80022f2:	f005 fa71 	bl	80077d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,
 80022f6:	2200      	movs	r2, #0
 80022f8:	f643 0103 	movw	r1, #14339	; 0x3803
 80022fc:	48b2      	ldr	r0, [pc, #712]	; (80025c8 <main+0x3b4>)
 80022fe:	f005 fa6b 	bl	80077d8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8002306:	4631      	mov	r1, r6
 8002308:	48b0      	ldr	r0, [pc, #704]	; (80025cc <main+0x3b8>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	9437      	str	r4, [sp, #220]	; 0xdc
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230c:	e9cd 3435 	strd	r3, r4, [sp, #212]	; 0xd4
	HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8002310:	f005 f972 	bl	80075f8 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002314:	2302      	movs	r3, #2
	HAL_GPIO_Init(PW_HOLD_GPIO_Port, &GPIO_InitStruct);
 8002316:	4631      	mov	r1, r6
 8002318:	48a9      	ldr	r0, [pc, #676]	; (80025c0 <main+0x3ac>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231a:	e9cd 3735 	strd	r3, r7, [sp, #212]	; 0xd4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
	HAL_GPIO_Init(PW_HOLD_GPIO_Port, &GPIO_InitStruct);
 8002322:	f005 f969 	bl	80075f8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CAMERA1_Pin | CAMERA2_Pin;
 8002326:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800232a:	4631      	mov	r1, r6
 800232c:	48a5      	ldr	r0, [pc, #660]	; (80025c4 <main+0x3b0>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232e:	e9cd 3735 	strd	r3, r7, [sp, #212]	; 0xd4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002336:	f005 f95f 	bl	80075f8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin =
 800233a:	f643 0303 	movw	r3, #14339	; 0x3803
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800233e:	4631      	mov	r1, r6
 8002340:	48a1      	ldr	r0, [pc, #644]	; (80025c8 <main+0x3b4>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002342:	e9cd 3735 	strd	r3, r7, [sp, #212]	; 0xd4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800234a:	f005 f955 	bl	80075f8 <HAL_GPIO_Init>
	__HAL_RCC_DMA2_CLK_ENABLE();
 800234e:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002352:	4622      	mov	r2, r4
 8002354:	2105      	movs	r1, #5
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002356:	f043 0302 	orr.w	r3, r3, #2
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800235a:	200b      	movs	r0, #11
	__HAL_RCC_DMA2_CLK_ENABLE();
 800235c:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8002360:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800236c:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 8002370:	433b      	orrs	r3, r7
 8002372:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8002376:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
	hadc1.Instance = ADC1;
 800237a:	4d95      	ldr	r5, [pc, #596]	; (80025d0 <main+0x3bc>)
	__HAL_RCC_DMA1_CLK_ENABLE();
 800237c:	403b      	ands	r3, r7
 800237e:	9302      	str	r3, [sp, #8]
 8002380:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002382:	f003 ff77 	bl	8006274 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002386:	200b      	movs	r0, #11
 8002388:	f003 ffa6 	bl	80062d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800238c:	4622      	mov	r2, r4
 800238e:	2105      	movs	r1, #5
 8002390:	200c      	movs	r0, #12
 8002392:	f003 ff6f 	bl	8006274 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002396:	200c      	movs	r0, #12
 8002398:	f003 ff9e 	bl	80062d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800239c:	4622      	mov	r2, r4
 800239e:	2105      	movs	r1, #5
 80023a0:	200d      	movs	r0, #13
 80023a2:	f003 ff67 	bl	8006274 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80023a6:	200d      	movs	r0, #13
 80023a8:	f003 ff96 	bl	80062d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80023ac:	4622      	mov	r2, r4
 80023ae:	2105      	movs	r1, #5
 80023b0:	200e      	movs	r0, #14
 80023b2:	f003 ff5f 	bl	8006274 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80023b6:	200e      	movs	r0, #14
 80023b8:	f003 ff8e 	bl	80062d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80023bc:	4622      	mov	r2, r4
 80023be:	2105      	movs	r1, #5
 80023c0:	200f      	movs	r0, #15
 80023c2:	f003 ff57 	bl	8006274 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80023c6:	200f      	movs	r0, #15
 80023c8:	f003 ff86 	bl	80062d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80023cc:	4622      	mov	r2, r4
 80023ce:	2105      	movs	r1, #5
 80023d0:	2010      	movs	r0, #16
 80023d2:	f003 ff4f 	bl	8006274 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80023d6:	2010      	movs	r0, #16
 80023d8:	f003 ff7e 	bl	80062d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80023dc:	4622      	mov	r2, r4
 80023de:	2105      	movs	r1, #5
 80023e0:	2011      	movs	r0, #17
 80023e2:	f003 ff47 	bl	8006274 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80023e6:	2011      	movs	r0, #17
 80023e8:	f003 ff76 	bl	80062d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80023ec:	4622      	mov	r2, r4
 80023ee:	4621      	mov	r1, r4
 80023f0:	202f      	movs	r0, #47	; 0x2f
 80023f2:	f003 ff3f 	bl	8006274 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80023f6:	202f      	movs	r0, #47	; 0x2f
 80023f8:	f003 ff6e 	bl	80062d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80023fc:	4622      	mov	r2, r4
 80023fe:	2105      	movs	r1, #5
 8002400:	2038      	movs	r0, #56	; 0x38
 8002402:	f003 ff37 	bl	8006274 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002406:	2038      	movs	r0, #56	; 0x38
 8002408:	f003 ff66 	bl	80062d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800240c:	4622      	mov	r2, r4
 800240e:	2105      	movs	r1, #5
 8002410:	2039      	movs	r0, #57	; 0x39
 8002412:	f003 ff2f 	bl	8006274 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002416:	2039      	movs	r0, #57	; 0x39
 8002418:	f003 ff5e 	bl	80062d8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800241c:	4622      	mov	r2, r4
 800241e:	2105      	movs	r1, #5
 8002420:	203c      	movs	r0, #60	; 0x3c
 8002422:	f003 ff27 	bl	8006274 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002426:	203c      	movs	r0, #60	; 0x3c
 8002428:	f003 ff56 	bl	80062d8 <HAL_NVIC_EnableIRQ>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800242c:	4621      	mov	r1, r4
 800242e:	221c      	movs	r2, #28
 8002430:	4630      	mov	r0, r6
	ADC_MultiModeTypeDef multimode = { 0 };
 8002432:	9433      	str	r4, [sp, #204]	; 0xcc
 8002434:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002438:	f010 fc05 	bl	8012c46 <memset>
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800243c:	4a65      	ldr	r2, [pc, #404]	; (80025d4 <main+0x3c0>)
 800243e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002442:	4628      	mov	r0, r5
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002444:	f8c5 a010 	str.w	sl, [r5, #16]
	hadc1.Init.NbrOfConversion = 4;
 8002448:	f8c5 a018 	str.w	sl, [r5, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800244c:	752c      	strb	r4, [r5, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800244e:	756f      	strb	r7, [r5, #21]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002450:	772c      	strb	r4, [r5, #28]
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002452:	636c      	str	r4, [r5, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8002454:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002458:	e9c5 2300 	strd	r2, r3, [r5]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800245c:	e9c5 4702 	strd	r4, r7, [r5, #8]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002460:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002464:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002468:	f003 fd40 	bl	8005eec <HAL_ADC_Init>
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 800246c:	4641      	mov	r1, r8
 800246e:	4628      	mov	r0, r5
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8002470:	9431      	str	r4, [sp, #196]	; 0xc4
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8002472:	f003 fe4f 	bl	8006114 <HAL_ADCEx_MultiModeConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002476:	2306      	movs	r3, #6
 8002478:	4957      	ldr	r1, [pc, #348]	; (80025d8 <main+0x3c4>)
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800247a:	4628      	mov	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 800247c:	9337      	str	r3, [sp, #220]	; 0xdc
	sConfig.Offset = 0;
 800247e:	943a      	str	r4, [sp, #232]	; 0xe8
	sConfig.OffsetSignedSaturation = DISABLE;
 8002480:	f88d 40ed 	strb.w	r4, [sp, #237]	; 0xed
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002484:	e9cd 1335 	strd	r1, r3, [sp, #212]	; 0xd4
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002488:	f240 73ff 	movw	r3, #2047	; 0x7ff
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800248c:	4631      	mov	r1, r6
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800248e:	e9cd 3a38 	strd	r3, sl, [sp, #224]	; 0xe0
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002492:	f003 f8f3 	bl	800567c <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8002496:	f04f 0a0c 	mov.w	sl, #12
 800249a:	4b50      	ldr	r3, [pc, #320]	; (80025dc <main+0x3c8>)
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800249c:	4631      	mov	r1, r6
 800249e:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80024a0:	e9cd 3a35 	strd	r3, sl, [sp, #212]	; 0xd4
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80024a4:	f003 f8ea 	bl	800567c <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80024a8:	2312      	movs	r3, #18
 80024aa:	484d      	ldr	r0, [pc, #308]	; (80025e0 <main+0x3cc>)
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80024ac:	4631      	mov	r1, r6
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80024ae:	e9cd 0335 	strd	r0, r3, [sp, #212]	; 0xd4
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80024b2:	4628      	mov	r0, r5
 80024b4:	f003 f8e2 	bl	800567c <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_4;
 80024b8:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8002608 <main+0x3f4>
 80024bc:	2318      	movs	r3, #24
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80024be:	4631      	mov	r1, r6
 80024c0:	4628      	mov	r0, r5
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024c2:	2507      	movs	r5, #7
	sConfig.Rank = ADC_REGULAR_RANK_4;
 80024c4:	e9cd c335 	strd	ip, r3, [sp, #212]	; 0xd4
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80024c8:	f003 f8d8 	bl	800567c <HAL_ADC_ConfigChannel>
	hsd1.Instance = SDMMC1;
 80024cc:	4b45      	ldr	r3, [pc, #276]	; (80025e4 <main+0x3d0>)
 80024ce:	4a46      	ldr	r2, [pc, #280]	; (80025e8 <main+0x3d4>)
	hspi1.Instance = SPI1;
 80024d0:	4846      	ldr	r0, [pc, #280]	; (80025ec <main+0x3d8>)
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80024d2:	609c      	str	r4, [r3, #8]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80024d4:	f8c0 b018 	str.w	fp, [r0, #24]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80024d8:	e9c3 2400 	strd	r2, r4, [r3]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80024dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80024e0:	e9c3 4705 	strd	r4, r7, [r3, #20]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80024e4:	e9c3 2403 	strd	r2, r4, [r3, #12]
	hspi1.Instance = SPI1;
 80024e8:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <main+0x3dc>)
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024ea:	e9c0 9502 	strd	r9, r5, [r0, #8]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 80024ee:	e9c0 3400 	strd	r3, r4, [r0]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024f2:	e9c0 4404 	strd	r4, r4, [r0, #16]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024f6:	e9c0 4408 	strd	r4, r4, [r0, #32]
	hspi1.Init.CRCPolynomial = 0x0;
 80024fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80024fe:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
	hspi1.Init.TxCRCInitializationPattern =
 8002502:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002506:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800250a:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800250e:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002512:	f008 fa1b 	bl	800a94c <HAL_SPI_Init>
	hspi2.Instance = SPI2;
 8002516:	4837      	ldr	r0, [pc, #220]	; (80025f4 <main+0x3e0>)
 8002518:	4a37      	ldr	r2, [pc, #220]	; (80025f8 <main+0x3e4>)
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800251a:	f8c0 b018 	str.w	fp, [r0, #24]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800251e:	e9c0 9502 	strd	r9, r5, [r0, #8]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002522:	e9c0 2400 	strd	r2, r4, [r0]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002526:	e9c0 4404 	strd	r4, r4, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800252a:	e9c0 4408 	strd	r4, r4, [r0, #32]
	hspi2.Init.CRCPolynomial = 0x0;
 800252e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002532:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
	hspi2.Init.TxCRCInitializationPattern =
 8002536:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800253a:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800253e:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002542:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8002546:	f008 fa01 	bl	800a94c <HAL_SPI_Init>
	hspi3.Instance = SPI3;
 800254a:	482c      	ldr	r0, [pc, #176]	; (80025fc <main+0x3e8>)
 800254c:	4a2c      	ldr	r2, [pc, #176]	; (8002600 <main+0x3ec>)
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800254e:	f8c0 b018 	str.w	fp, [r0, #24]
	huart4.Init.BaudRate = 115200;
 8002552:	f44f 3be1 	mov.w	fp, #115200	; 0x1c200
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002556:	e9c0 9502 	strd	r9, r5, [r0, #8]
	huart4.Instance = UART4;
 800255a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800260c <main+0x3f8>
	hspi3.Init.Mode = SPI_MODE_SLAVE;
 800255e:	e9c0 2400 	strd	r2, r4, [r0]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002562:	e9c0 4404 	strd	r4, r4, [r0, #16]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002566:	e9c0 4408 	strd	r4, r4, [r0, #32]
	hspi3.Init.CRCPolynomial = 0x0;
 800256a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800256e:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
	hspi3.Init.TxCRCInitializationPattern =
 8002572:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002576:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800257a:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800257e:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8002582:	f008 f9e3 	bl	800a94c <HAL_SPI_Init>
	huart4.Init.BaudRate = 115200;
 8002586:	4a1f      	ldr	r2, [pc, #124]	; (8002604 <main+0x3f0>)
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002588:	4648      	mov	r0, r9
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800258a:	f8c9 4028 	str.w	r4, [r9, #40]	; 0x28
	huart4.Init.BaudRate = 115200;
 800258e:	e9c9 2b00 	strd	r2, fp, [r9]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002592:	e9c9 4a04 	strd	r4, sl, [r9, #16]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002596:	e9c9 4402 	strd	r4, r4, [r9, #8]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800259a:	e9c9 4406 	strd	r4, r4, [r9, #24]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800259e:	e9c9 4408 	strd	r4, r4, [r9, #32]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80025a2:	f009 fc9a 	bl	800beda <HAL_UART_Init>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 80025a6:	4621      	mov	r1, r4
 80025a8:	4648      	mov	r0, r9
 80025aa:	f009 fd18 	bl	800bfde <HAL_UARTEx_SetTxFifoThreshold>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 80025ae:	4621      	mov	r1, r4
 80025b0:	4648      	mov	r0, r9
 80025b2:	e02d      	b.n	8002610 <main+0x3fc>
 80025b4:	58024400 	.word	0x58024400
 80025b8:	2400022c 	.word	0x2400022c
 80025bc:	2400023c 	.word	0x2400023c
 80025c0:	58020400 	.word	0x58020400
 80025c4:	58021000 	.word	0x58021000
 80025c8:	58020c00 	.word	0x58020c00
 80025cc:	58020800 	.word	0x58020800
 80025d0:	2400ef70 	.word	0x2400ef70
 80025d4:	40022000 	.word	0x40022000
 80025d8:	21800100 	.word	0x21800100
 80025dc:	25b00200 	.word	0x25b00200
 80025e0:	2a000400 	.word	0x2a000400
 80025e4:	2400cd60 	.word	0x2400cd60
 80025e8:	52007000 	.word	0x52007000
 80025ec:	2401b4ec 	.word	0x2401b4ec
 80025f0:	40013000 	.word	0x40013000
 80025f4:	2400a994 	.word	0x2400a994
 80025f8:	40003800 	.word	0x40003800
 80025fc:	2400eed8 	.word	0x2400eed8
 8002600:	40003c00 	.word	0x40003c00
 8002604:	40004c00 	.word	0x40004c00
 8002608:	2e300800 	.word	0x2e300800
 800260c:	2401b45c 	.word	0x2401b45c
 8002610:	f009 fd09 	bl	800c026 <HAL_UARTEx_SetRxFifoThreshold>
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8002614:	4648      	mov	r0, r9
	huart7.Instance = UART7;
 8002616:	f8df 93f0 	ldr.w	r9, [pc, #1008]	; 8002a08 <main+0x7f4>
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 800261a:	f009 fcc5 	bl	800bfa8 <HAL_UARTEx_DisableFifoMode>
	huart7.Instance = UART7;
 800261e:	4aca      	ldr	r2, [pc, #808]	; (8002948 <main+0x734>)
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 8002620:	4648      	mov	r0, r9
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002622:	f8c9 4028 	str.w	r4, [r9, #40]	; 0x28
	huart7.Init.BaudRate = 115200;
 8002626:	e9c9 2b00 	strd	r2, fp, [r9]
	huart7.Init.Mode = UART_MODE_TX_RX;
 800262a:	e9c9 4a04 	strd	r4, sl, [r9, #16]
	huart7.Init.StopBits = UART_STOPBITS_1;
 800262e:	e9c9 4402 	strd	r4, r4, [r9, #8]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002632:	e9c9 4406 	strd	r4, r4, [r9, #24]
	huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002636:	e9c9 4408 	strd	r4, r4, [r9, #32]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 800263a:	f009 fc4e 	bl	800beda <HAL_UART_Init>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8)
 800263e:	4621      	mov	r1, r4
 8002640:	4648      	mov	r0, r9
 8002642:	f009 fccc 	bl	800bfde <HAL_UARTEx_SetTxFifoThreshold>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8)
 8002646:	4621      	mov	r1, r4
 8002648:	4648      	mov	r0, r9
 800264a:	f009 fcec 	bl	800c026 <HAL_UARTEx_SetRxFifoThreshold>
	if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK) {
 800264e:	4648      	mov	r0, r9
	huart1.Instance = USART1;
 8002650:	f8df 93b8 	ldr.w	r9, [pc, #952]	; 8002a0c <main+0x7f8>
	if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK) {
 8002654:	f009 fca8 	bl	800bfa8 <HAL_UARTEx_DisableFifoMode>
	huart1.Instance = USART1;
 8002658:	4abc      	ldr	r2, [pc, #752]	; (800294c <main+0x738>)
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800265a:	4648      	mov	r0, r9
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800265c:	f8c9 4028 	str.w	r4, [r9, #40]	; 0x28
	huart1.Init.BaudRate = 115200;
 8002660:	e9c9 2b00 	strd	r2, fp, [r9]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002664:	e9c9 4a04 	strd	r4, sl, [r9, #16]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002668:	e9c9 4402 	strd	r4, r4, [r9, #8]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800266c:	e9c9 4406 	strd	r4, r4, [r9, #24]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002670:	e9c9 4408 	strd	r4, r4, [r9, #32]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002674:	f009 fc31 	bl	800beda <HAL_UART_Init>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8002678:	4621      	mov	r1, r4
 800267a:	4648      	mov	r0, r9
 800267c:	f009 fcaf 	bl	800bfde <HAL_UARTEx_SetTxFifoThreshold>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8002680:	4621      	mov	r1, r4
 8002682:	4648      	mov	r0, r9
 8002684:	f009 fccf 	bl	800c026 <HAL_UARTEx_SetRxFifoThreshold>
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8002688:	4648      	mov	r0, r9
	huart2.Instance = USART2;
 800268a:	f8df 9384 	ldr.w	r9, [pc, #900]	; 8002a10 <main+0x7fc>
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 800268e:	f009 fc8b 	bl	800bfa8 <HAL_UARTEx_DisableFifoMode>
	huart2.Instance = USART2;
 8002692:	4aaf      	ldr	r2, [pc, #700]	; (8002950 <main+0x73c>)
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002694:	4648      	mov	r0, r9
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002696:	f8c9 4028 	str.w	r4, [r9, #40]	; 0x28
	huart2.Init.BaudRate = 115200;
 800269a:	e9c9 2b00 	strd	r2, fp, [r9]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800269e:	e9c9 4a04 	strd	r4, sl, [r9, #16]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80026a2:	e9c9 4402 	strd	r4, r4, [r9, #8]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a6:	e9c9 4406 	strd	r4, r4, [r9, #24]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026aa:	e9c9 4408 	strd	r4, r4, [r9, #32]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80026ae:	f009 fc14 	bl	800beda <HAL_UART_Init>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80026b2:	4621      	mov	r1, r4
 80026b4:	4648      	mov	r0, r9
 80026b6:	f009 fc92 	bl	800bfde <HAL_UARTEx_SetTxFifoThreshold>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80026ba:	4621      	mov	r1, r4
 80026bc:	4648      	mov	r0, r9
 80026be:	f009 fcb2 	bl	800c026 <HAL_UARTEx_SetRxFifoThreshold>
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 80026c2:	4648      	mov	r0, r9
	huart3.Instance = USART3;
 80026c4:	f8df 934c 	ldr.w	r9, [pc, #844]	; 8002a14 <main+0x800>
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 80026c8:	f009 fc6e 	bl	800bfa8 <HAL_UARTEx_DisableFifoMode>
	huart3.Instance = USART3;
 80026cc:	4aa1      	ldr	r2, [pc, #644]	; (8002954 <main+0x740>)
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80026ce:	4648      	mov	r0, r9
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026d0:	f8c9 4028 	str.w	r4, [r9, #40]	; 0x28
	huart3.Init.BaudRate = 115200;
 80026d4:	e9c9 2b00 	strd	r2, fp, [r9]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80026d8:	e9c9 4a04 	strd	r4, sl, [r9, #16]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80026dc:	e9c9 4402 	strd	r4, r4, [r9, #8]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e0:	e9c9 4406 	strd	r4, r4, [r9, #24]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026e4:	e9c9 4408 	strd	r4, r4, [r9, #32]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80026e8:	f009 fbf7 	bl	800beda <HAL_UART_Init>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 80026ec:	4621      	mov	r1, r4
 80026ee:	4648      	mov	r0, r9
	command_mutex_only = osMutexNew(&command_mutex_attr);
 80026f0:	f8df b324 	ldr.w	fp, [pc, #804]	; 8002a18 <main+0x804>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 80026f4:	f009 fc73 	bl	800bfde <HAL_UARTEx_SetTxFifoThreshold>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 80026f8:	4621      	mov	r1, r4
 80026fa:	4648      	mov	r0, r9
	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 80026fc:	f8df a31c 	ldr.w	sl, [pc, #796]	; 8002a1c <main+0x808>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8002700:	f009 fc91 	bl	800c026 <HAL_UARTEx_SetRxFifoThreshold>
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8002704:	4648      	mov	r0, r9
 8002706:	f009 fc4f 	bl	800bfa8 <HAL_UARTEx_DisableFifoMode>
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800270a:	f04f 5900 	mov.w	r9, #536870912	; 0x20000000
	MX_FATFS_Init();
 800270e:	f00a fd03 	bl	800d118 <MX_FATFS_Init>
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8002712:	f8df e30c 	ldr.w	lr, [pc, #780]	; 8002a20 <main+0x80c>
	hspi4.Instance = SPI4;
 8002716:	4890      	ldr	r0, [pc, #576]	; (8002958 <main+0x744>)
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8002718:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800271c:	e9c0 e300 	strd	lr, r3, [r0]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002720:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002724:	e9c0 9306 	strd	r9, r3, [r0, #24]
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002728:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800272c:	e9c0 4502 	strd	r4, r5, [r0, #8]
	const osMutexAttr_t sb1_mutex_attr = { "sb1_mutex_only", // human readable mutex name
 8002730:	4d8a      	ldr	r5, [pc, #552]	; (800295c <main+0x748>)
	hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002732:	e9c0 340d 	strd	r3, r4, [r0, #52]	; 0x34
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002736:	e9c0 4404 	strd	r4, r4, [r0, #16]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800273a:	e9c0 4408 	strd	r4, r4, [r0, #32]
	hspi4.Init.CRCPolynomial = 0x0;
 800273e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
	hspi4.Init.TxCRCInitializationPattern =
 8002742:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
	hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002746:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
	hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800274a:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
	hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800274e:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8002752:	f008 f8fb 	bl	800a94c <HAL_SPI_Init>
	MX_USB_DEVICE_Init();
 8002756:	f00f ffeb 	bl	8012730 <MX_USB_DEVICE_Init>
	vTraceEnable(TRC_INIT);
 800275a:	4620      	mov	r0, r4
 800275c:	f002 f98a 	bl	8004a74 <vTraceEnable>
	osKernelInitialize();
 8002760:	f00c ffc0 	bl	800f6e4 <osKernelInitialize>
	const osMutexAttr_t sb1_mutex_attr = { "sb1_mutex_only", // human readable mutex name
 8002764:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8002768:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800276c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 8002770:	4660      	mov	r0, ip
 8002772:	f00d f8ad 	bl	800f8d0 <osMutexNew>
 8002776:	4b7a      	ldr	r3, [pc, #488]	; (8002960 <main+0x74c>)
	const osMutexAttr_t sb2_mutex_attr = { "sb2_mutex_only", // human readable mutex name
 8002778:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 800277c:	6018      	str	r0, [r3, #0]
	const osMutexAttr_t sb2_mutex_attr = { "sb2_mutex_only", // human readable mutex name
 800277e:	f105 0310 	add.w	r3, r5, #16
 8002782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002784:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 8002788:	4660      	mov	r0, ip
 800278a:	f00d f8a1 	bl	800f8d0 <osMutexNew>
 800278e:	4a75      	ldr	r2, [pc, #468]	; (8002964 <main+0x750>)
	const osMutexAttr_t sb3_mutex_attr = { "sb3_mutex_only", // human readable mutex name
 8002790:	f105 0320 	add.w	r3, r5, #32
 8002794:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 8002798:	6010      	str	r0, [r2, #0]
	const osMutexAttr_t sb3_mutex_attr = { "sb3_mutex_only", // human readable mutex name
 800279a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800279c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 80027a0:	4660      	mov	r0, ip
 80027a2:	f00d f895 	bl	800f8d0 <osMutexNew>
 80027a6:	4970      	ldr	r1, [pc, #448]	; (8002968 <main+0x754>)
	const osMutexAttr_t state_est_mutex_attr = { "state_est_mutex_only", // human readable mutex name
 80027a8:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80027ac:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 80027b0:	6008      	str	r0, [r1, #0]
	const osMutexAttr_t state_est_mutex_attr = { "state_est_mutex_only", // human readable mutex name
 80027b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 80027b8:	4660      	mov	r0, ip
 80027ba:	f00d f889 	bl	800f8d0 <osMutexNew>
 80027be:	4b6b      	ldr	r3, [pc, #428]	; (800296c <main+0x758>)
	const osMutexAttr_t controller_mutex_attr = { "controller_mutex_only", // human readable mutex name
 80027c0:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 80027c4:	6018      	str	r0, [r3, #0]
	const osMutexAttr_t controller_mutex_attr = { "controller_mutex_only", // human readable mutex name
 80027c6:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80027ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 80027d0:	4660      	mov	r0, ip
 80027d2:	f00d f87d 	bl	800f8d0 <osMutexNew>
 80027d6:	4a66      	ldr	r2, [pc, #408]	; (8002970 <main+0x75c>)
	const osMutexAttr_t fsm_mutex_attr = { "fsm_mutex_only", // human readable mutex name
 80027d8:	f105 0350 	add.w	r3, r5, #80	; 0x50
 80027dc:	f10d 0c74 	add.w	ip, sp, #116	; 0x74
	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 80027e0:	6010      	str	r0, [r2, #0]
	const osMutexAttr_t fsm_mutex_attr = { "fsm_mutex_only", // human readable mutex name
 80027e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 80027e8:	4660      	mov	r0, ip
 80027ea:	f00d f871 	bl	800f8d0 <osMutexNew>
 80027ee:	4961      	ldr	r1, [pc, #388]	; (8002974 <main+0x760>)
	const osMutexAttr_t environment_mutex_attr = { "environment_mutex_only", // human readable mutex name
 80027f0:	f105 0360 	add.w	r3, r5, #96	; 0x60
 80027f4:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 80027f8:	6008      	str	r0, [r1, #0]
	const osMutexAttr_t environment_mutex_attr = { "environment_mutex_only", // human readable mutex name
 80027fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 8002800:	4660      	mov	r0, ip
 8002802:	f00d f865 	bl	800f8d0 <osMutexNew>
 8002806:	4b5c      	ldr	r3, [pc, #368]	; (8002978 <main+0x764>)
	const osMutexAttr_t usb_data_mutex_attr = { "usb_data_mutex_only", // human readable mutex name
 8002808:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 800280c:	6018      	str	r0, [r3, #0]
	const osMutexAttr_t usb_data_mutex_attr = { "usb_data_mutex_only", // human readable mutex name
 800280e:	f105 0370 	add.w	r3, r5, #112	; 0x70
 8002812:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002814:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8002818:	4660      	mov	r0, ip
 800281a:	f00d f859 	bl	800f8d0 <osMutexNew>
 800281e:	4a57      	ldr	r2, [pc, #348]	; (800297c <main+0x768>)
	const osMutexAttr_t command_mutex_attr = { "command_mutex_only", // human readable mutex name
 8002820:	f105 0380 	add.w	r3, r5, #128	; 0x80
 8002824:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8002828:	6010      	str	r0, [r2, #0]
	const osMutexAttr_t command_mutex_attr = { "command_mutex_only", // human readable mutex name
 800282a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800282c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	command_mutex_only = osMutexNew(&command_mutex_attr);
 8002830:	4660      	mov	r0, ip
 8002832:	f00d f84d 	bl	800f8d0 <osMutexNew>
	const osMutexAttr_t gps_mutex_attr = { "gps_mutex_only", // human readable mutex name
 8002836:	f105 0390 	add.w	r3, r5, #144	; 0x90
 800283a:	f10d 0cb4 	add.w	ip, sp, #180	; 0xb4
	command_mutex_only = osMutexNew(&command_mutex_attr);
 800283e:	f8cb 0000 	str.w	r0, [fp]
	const osMutexAttr_t gps_mutex_attr = { "gps_mutex_only", // human readable mutex name
 8002842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002844:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 8002848:	4660      	mov	r0, ip
 800284a:	f00d f841 	bl	800f8d0 <osMutexNew>
	const osMutexAttr_t battery_mutex_attr = { "battery_mutex_only", // human readable mutex name
 800284e:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 8002852:	f8ca 0000 	str.w	r0, [sl]
	const osMutexAttr_t motor_mutex_attr = { "motor_mutex_only", // human readable mutex name
 8002856:	35b0      	adds	r5, #176	; 0xb0
	const osMutexAttr_t battery_mutex_attr = { "battery_mutex_only", // human readable mutex name
 8002858:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800285a:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
	battery_mutex_only = osMutexNew(&battery_mutex_attr);
 800285e:	4640      	mov	r0, r8
 8002860:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002a24 <main+0x810>
 8002864:	f00d f834 	bl	800f8d0 <osMutexNew>
 8002868:	f8c8 0000 	str.w	r0, [r8]
	const osMutexAttr_t motor_mutex_attr = { "motor_mutex_only", // human readable mutex name
 800286c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002870:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	motor_mutex_only = osMutexNew(&motor_mutex_attr);
 8002874:	4630      	mov	r0, r6
	env_mutex.mutex = environment_mutex_only;
 8002876:	4d40      	ldr	r5, [pc, #256]	; (8002978 <main+0x764>)
	motor_mutex_only = osMutexNew(&motor_mutex_attr);
 8002878:	f00d f82a 	bl	800f8d0 <osMutexNew>
 800287c:	4b40      	ldr	r3, [pc, #256]	; (8002980 <main+0x76c>)
	sb3_mutex.mutex = sb3_mutex_only;
 800287e:	493a      	ldr	r1, [pc, #232]	; (8002968 <main+0x754>)
	motor_mutex_only = osMutexNew(&motor_mutex_attr);
 8002880:	6018      	str	r0, [r3, #0]
	sb1_mutex.mutex = sb1_mutex_only;
 8002882:	4b37      	ldr	r3, [pc, #220]	; (8002960 <main+0x74c>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <main+0x770>)
 8002888:	601a      	str	r2, [r3, #0]
	sb2_mutex.mutex = sb2_mutex_only;
 800288a:	4a36      	ldr	r2, [pc, #216]	; (8002964 <main+0x750>)
 800288c:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <main+0x774>)
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	601a      	str	r2, [r3, #0]
	sb3_mutex.mutex = sb3_mutex_only;
 8002892:	680a      	ldr	r2, [r1, #0]
 8002894:	4b3d      	ldr	r3, [pc, #244]	; (800298c <main+0x778>)
	fsm_mutex.mutex = fsm_mutex_only;
 8002896:	4937      	ldr	r1, [pc, #220]	; (8002974 <main+0x760>)
	sb3_mutex.mutex = sb3_mutex_only;
 8002898:	601a      	str	r2, [r3, #0]
	env_mutex.mutex = environment_mutex_only;
 800289a:	682a      	ldr	r2, [r5, #0]
 800289c:	4b3c      	ldr	r3, [pc, #240]	; (8002990 <main+0x77c>)
 800289e:	601a      	str	r2, [r3, #0]
	fsm_mutex.mutex = fsm_mutex_only;
 80028a0:	680a      	ldr	r2, [r1, #0]
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 80028a2:	2196      	movs	r1, #150	; 0x96
	fsm_mutex.mutex = fsm_mutex_only;
 80028a4:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <main+0x780>)
 80028a6:	601a      	str	r2, [r3, #0]
	controller_mutex.mutex = controller_mutex_only;
 80028a8:	4a31      	ldr	r2, [pc, #196]	; (8002970 <main+0x75c>)
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <main+0x784>)
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	601a      	str	r2, [r3, #0]
	state_est_mutex.mutex = state_est_mutex_only;
 80028b0:	4b2e      	ldr	r3, [pc, #184]	; (800296c <main+0x758>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b39      	ldr	r3, [pc, #228]	; (800299c <main+0x788>)
 80028b6:	601a      	str	r2, [r3, #0]
	usb_data_mutex.mutex = usb_data_mutex_only;
 80028b8:	4a30      	ldr	r2, [pc, #192]	; (800297c <main+0x768>)
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <main+0x78c>)
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	601a      	str	r2, [r3, #0]
	command_mutex.mutex = command_mutex_only;
 80028c0:	f8db 2000 	ldr.w	r2, [fp]
 80028c4:	4b37      	ldr	r3, [pc, #220]	; (80029a4 <main+0x790>)
 80028c6:	601a      	str	r2, [r3, #0]
	gps_mutex.mutex = gps_mutex_only;
 80028c8:	f8da 2000 	ldr.w	r2, [sl]
 80028cc:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <main+0x794>)
 80028ce:	601a      	str	r2, [r3, #0]
	battery_mutex.mutex = battery_mutex_only;
 80028d0:	f8d8 2000 	ldr.w	r2, [r8]
 80028d4:	4b35      	ldr	r3, [pc, #212]	; (80029ac <main+0x798>)
 80028d6:	601a      	str	r2, [r3, #0]
	global_telemetry_command = IDLE_COMMAND;
 80028d8:	229b      	movs	r2, #155	; 0x9b
	motor_mutex.mutex = motor_mutex_only;
 80028da:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <main+0x79c>)
 80028dc:	6018      	str	r0, [r3, #0]
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 80028de:	2080      	movs	r0, #128	; 0x80
	global_flight_phase_detection.flight_phase = IDLE;
 80028e0:	4b34      	ldr	r3, [pc, #208]	; (80029b4 <main+0x7a0>)
 80028e2:	701f      	strb	r7, [r3, #0]
	global_flight_phase_detection.mach_regime = SUBSONIC;
 80028e4:	705f      	strb	r7, [r3, #1]
	global_telemetry_command = IDLE_COMMAND;
 80028e6:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <main+0x7a4>)
 80028e8:	701a      	strb	r2, [r3, #0]
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 80028ea:	4622      	mov	r2, r4
 80028ec:	f00d f976 	bl	800fbdc <osMessageQueueNew>
 80028f0:	4b32      	ldr	r3, [pc, #200]	; (80029bc <main+0x7a8>)
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80028f2:	4a33      	ldr	r2, [pc, #204]	; (80029c0 <main+0x7ac>)
 80028f4:	4621      	mov	r1, r4
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 80028f6:	6018      	str	r0, [r3, #0]
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80028f8:	4832      	ldr	r0, [pc, #200]	; (80029c4 <main+0x7b0>)
 80028fa:	f00c ff55 	bl	800f7a8 <osThreadNew>
 80028fe:	4b32      	ldr	r3, [pc, #200]	; (80029c8 <main+0x7b4>)
	task_state_estHandle = osThreadNew(vTaskStateEst, NULL,
 8002900:	4a32      	ldr	r2, [pc, #200]	; (80029cc <main+0x7b8>)
 8002902:	4621      	mov	r1, r4
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8002904:	6018      	str	r0, [r3, #0]
	task_state_estHandle = osThreadNew(vTaskStateEst, NULL,
 8002906:	4832      	ldr	r0, [pc, #200]	; (80029d0 <main+0x7bc>)
 8002908:	f00c ff4e 	bl	800f7a8 <osThreadNew>
 800290c:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <main+0x7c0>)
	task_controllerHandle = osThreadNew(vTaskController, NULL,
 800290e:	4a32      	ldr	r2, [pc, #200]	; (80029d8 <main+0x7c4>)
 8002910:	4621      	mov	r1, r4
	task_state_estHandle = osThreadNew(vTaskStateEst, NULL,
 8002912:	6018      	str	r0, [r3, #0]
	task_controllerHandle = osThreadNew(vTaskController, NULL,
 8002914:	4831      	ldr	r0, [pc, #196]	; (80029dc <main+0x7c8>)
 8002916:	f00c ff47 	bl	800f7a8 <osThreadNew>
 800291a:	4b31      	ldr	r3, [pc, #196]	; (80029e0 <main+0x7cc>)
	task_sens_readHandle = osThreadNew(vTaskSensRead, NULL,
 800291c:	4a31      	ldr	r2, [pc, #196]	; (80029e4 <main+0x7d0>)
 800291e:	4621      	mov	r1, r4
	task_controllerHandle = osThreadNew(vTaskController, NULL,
 8002920:	6018      	str	r0, [r3, #0]
	task_sens_readHandle = osThreadNew(vTaskSensRead, NULL,
 8002922:	4831      	ldr	r0, [pc, #196]	; (80029e8 <main+0x7d4>)
 8002924:	f00c ff40 	bl	800f7a8 <osThreadNew>
 8002928:	4b30      	ldr	r3, [pc, #192]	; (80029ec <main+0x7d8>)
	task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL,
 800292a:	4a31      	ldr	r2, [pc, #196]	; (80029f0 <main+0x7dc>)
 800292c:	4621      	mov	r1, r4
	task_sens_readHandle = osThreadNew(vTaskSensRead, NULL,
 800292e:	6018      	str	r0, [r3, #0]
	task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL,
 8002930:	4830      	ldr	r0, [pc, #192]	; (80029f4 <main+0x7e0>)
 8002932:	f00c ff39 	bl	800f7a8 <osThreadNew>
 8002936:	4b30      	ldr	r3, [pc, #192]	; (80029f8 <main+0x7e4>)
	task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL,
 8002938:	4a30      	ldr	r2, [pc, #192]	; (80029fc <main+0x7e8>)
 800293a:	4621      	mov	r1, r4
	task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL,
 800293c:	6018      	str	r0, [r3, #0]
	task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL,
 800293e:	4830      	ldr	r0, [pc, #192]	; (8002a00 <main+0x7ec>)
 8002940:	f00c ff32 	bl	800f7a8 <osThreadNew>
 8002944:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <main+0x7f0>)
 8002946:	e06f      	b.n	8002a28 <main+0x814>
 8002948:	40007800 	.word	0x40007800
 800294c:	40011000 	.word	0x40011000
 8002950:	40004400 	.word	0x40004400
 8002954:	40004800 	.word	0x40004800
 8002958:	24013250 	.word	0x24013250
 800295c:	0801493c 	.word	0x0801493c
 8002960:	24013354 	.word	0x24013354
 8002964:	2401d578 	.word	0x2401d578
 8002968:	2400ce44 	.word	0x2400ce44
 800296c:	2401323c 	.word	0x2401323c
 8002970:	2401f7a4 	.word	0x2401f7a4
 8002974:	24013350 	.word	0x24013350
 8002978:	24013244 	.word	0x24013244
 800297c:	2400cde0 	.word	0x2400cde0
 8002980:	24015358 	.word	0x24015358
 8002984:	240110cc 	.word	0x240110cc
 8002988:	2401f828 	.word	0x2401f828
 800298c:	24013248 	.word	0x24013248
 8002990:	2400cecc 	.word	0x2400cecc
 8002994:	2400a98c 	.word	0x2400a98c
 8002998:	2400ef60 	.word	0x2400ef60
 800299c:	24017360 	.word	0x24017360
 80029a0:	2400cc80 	.word	0x2400cc80
 80029a4:	2400cec4 	.word	0x2400cec4
 80029a8:	2401b3f4 	.word	0x2401b3f4
 80029ac:	2400aa1c 	.word	0x2400aa1c
 80029b0:	2400ab28 	.word	0x2400ab28
 80029b4:	2400023c 	.word	0x2400023c
 80029b8:	2401738c 	.word	0x2401738c
 80029bc:	2401b574 	.word	0x2401b574
 80029c0:	08014ad0 	.word	0x08014ad0
 80029c4:	080020f1 	.word	0x080020f1
 80029c8:	2400a910 	.word	0x2400a910
 80029cc:	08014d80 	.word	0x08014d80
 80029d0:	08004361 	.word	0x08004361
 80029d4:	2400f050 	.word	0x2400f050
 80029d8:	08014c84 	.word	0x08014c84
 80029dc:	0800369d 	.word	0x0800369d
 80029e0:	2401f824 	.word	0x2401f824
 80029e4:	08014d5c 	.word	0x08014d5c
 80029e8:	080041d5 	.word	0x080041d5
 80029ec:	2400ced4 	.word	0x2400ced4
 80029f0:	08014d38 	.word	0x08014d38
 80029f4:	08003e2d 	.word	0x08003e2d
 80029f8:	2400ac1c 	.word	0x2400ac1c
 80029fc:	08014cf0 	.word	0x08014cf0
 8002a00:	08003ae1 	.word	0x08003ae1
 8002a04:	2400f04c 	.word	0x2400f04c
 8002a08:	2400aa24 	.word	0x2400aa24
 8002a0c:	24011138 	.word	0x24011138
 8002a10:	2401d5dc 	.word	0x2401d5dc
 8002a14:	2400ab30 	.word	0x2400ab30
 8002a18:	2400cec0 	.word	0x2400cec0
 8002a1c:	2401735c 	.word	0x2401735c
 8002a20:	40013400 	.word	0x40013400
 8002a24:	24013240 	.word	0x24013240
	task_fsmHandle = osThreadNew(vTaskFsm, NULL, &task_fsm_attributes);
 8002a28:	4a13      	ldr	r2, [pc, #76]	; (8002a78 <main+0x864>)
 8002a2a:	4621      	mov	r1, r4
	task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL,
 8002a2c:	6018      	str	r0, [r3, #0]
	task_fsmHandle = osThreadNew(vTaskFsm, NULL, &task_fsm_attributes);
 8002a2e:	4813      	ldr	r0, [pc, #76]	; (8002a7c <main+0x868>)
 8002a30:	f00c feba 	bl	800f7a8 <osThreadNew>
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <main+0x86c>)
	task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 8002a36:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <main+0x870>)
 8002a38:	4621      	mov	r1, r4
	task_fsmHandle = osThreadNew(vTaskFsm, NULL, &task_fsm_attributes);
 8002a3a:	6018      	str	r0, [r3, #0]
	task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 8002a3c:	4812      	ldr	r0, [pc, #72]	; (8002a88 <main+0x874>)
 8002a3e:	f00c feb3 	bl	800f7a8 <osThreadNew>
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <main+0x878>)
	task_batteryHandle = osThreadNew(vTaskBattery, NULL,
 8002a44:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <main+0x87c>)
 8002a46:	4621      	mov	r1, r4
	task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 8002a48:	6018      	str	r0, [r3, #0]
	task_batteryHandle = osThreadNew(vTaskBattery, NULL,
 8002a4a:	4812      	ldr	r0, [pc, #72]	; (8002a94 <main+0x880>)
 8002a4c:	f00c feac 	bl	800f7a8 <osThreadNew>
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <main+0x884>)
	task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <main+0x888>)
 8002a54:	4621      	mov	r1, r4
	task_batteryHandle = osThreadNew(vTaskBattery, NULL,
 8002a56:	6018      	str	r0, [r3, #0]
	task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 8002a58:	4811      	ldr	r0, [pc, #68]	; (8002aa0 <main+0x88c>)
 8002a5a:	f00c fea5 	bl	800f7a8 <osThreadNew>
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <main+0x890>)
	task_peripheralsHandle = osThreadNew(vTaskPeripherals, NULL,
 8002a60:	4a11      	ldr	r2, [pc, #68]	; (8002aa8 <main+0x894>)
 8002a62:	4621      	mov	r1, r4
	task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 8002a64:	6018      	str	r0, [r3, #0]
	task_peripheralsHandle = osThreadNew(vTaskPeripherals, NULL,
 8002a66:	4811      	ldr	r0, [pc, #68]	; (8002aac <main+0x898>)
 8002a68:	f00c fe9e 	bl	800f7a8 <osThreadNew>
 8002a6c:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <main+0x89c>)
 8002a6e:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8002a70:	f00c fe62 	bl	800f738 <osKernelStart>
 8002a74:	e7fe      	b.n	8002a74 <main+0x860>
 8002a76:	bf00      	nop
 8002a78:	08014ca8 	.word	0x08014ca8
 8002a7c:	080037a1 	.word	0x080037a1
 8002a80:	2401f820 	.word	0x2401f820
 8002a84:	08014ccc 	.word	0x08014ccc
 8002a88:	08003891 	.word	0x08003891
 8002a8c:	2400a894 	.word	0x2400a894
 8002a90:	08014c60 	.word	0x08014c60
 8002a94:	08003489 	.word	0x08003489
 8002a98:	2401f740 	.word	0x2401f740
 8002a9c:	08014da4 	.word	0x08014da4
 8002aa0:	080046a9 	.word	0x080046a9
 8002aa4:	2401b3f0 	.word	0x2401b3f0
 8002aa8:	08014d14 	.word	0x08014d14
 8002aac:	08003c7d 	.word	0x08003c7d
 8002ab0:	240110d4 	.word	0x240110d4

08002ab4 <HAL_TIM_PeriodElapsedCallback>:
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8002ab4:	6802      	ldr	r2, [r0, #0]
 8002ab6:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d101      	bne.n	8002ac0 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 8002abc:	f002 bd52 	b.w	8005564 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40010000 	.word	0x40010000

08002ac8 <Error_Handler>:
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002acc:	4b07      	ldr	r3, [pc, #28]	; (8002aec <HAL_MspInit+0x20>)
{
 8002ace:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002ad4:	f042 0202 	orr.w	r2, r2, #2
 8002ad8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002adc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ae8:	b002      	add	sp, #8
 8002aea:	4770      	bx	lr
 8002aec:	58024400 	.word	0x58024400

08002af0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002af0:	b570      	push	{r4, r5, r6, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af6:	2214      	movs	r2, #20
 8002af8:	2100      	movs	r1, #0
 8002afa:	a803      	add	r0, sp, #12
 8002afc:	f010 f8a3 	bl	8012c46 <memset>
  if(hadc->Instance==ADC1)
 8002b00:	6832      	ldr	r2, [r6, #0]
 8002b02:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <HAL_ADC_MspInit+0xc4>)
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d152      	bne.n	8002bae <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002b08:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <HAL_ADC_MspInit+0xc8>)
    PC1     ------> ADC1_INP11
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = VSENS3V3_Pin|VSENSBAT_Pin|CURRBAT1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b0a:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b0c:	a903      	add	r1, sp, #12
 8002b0e:	482b      	ldr	r0, [pc, #172]	; (8002bbc <HAL_ADC_MspInit+0xcc>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002b10:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8

    GPIO_InitStruct.Pin = CURRBAT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2500      	movs	r5, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002b16:	f042 0220 	orr.w	r2, r2, #32
 8002b1a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8002b1e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8002b22:	f002 0220 	and.w	r2, r2, #32
 8002b26:	9200      	str	r2, [sp, #0]
 8002b28:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b2a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002b2e:	f042 0204 	orr.w	r2, r2, #4
 8002b32:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002b36:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002b3a:	f002 0204 	and.w	r2, r2, #4
 8002b3e:	9201      	str	r2, [sp, #4]
 8002b40:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002b46:	f042 0202 	orr.w	r2, r2, #2
 8002b4a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b5a:	2323      	movs	r3, #35	; 0x23
 8002b5c:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b60:	f004 fd4a 	bl	80075f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CURRBAT2_Pin;
 8002b64:	2301      	movs	r3, #1
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 8002b66:	a903      	add	r1, sp, #12
 8002b68:	4815      	ldr	r0, [pc, #84]	; (8002bc0 <HAL_ADC_MspInit+0xd0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b6c:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 8002b70:	f004 fd42 	bl	80075f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002b74:	4c13      	ldr	r4, [pc, #76]	; (8002bc4 <HAL_ADC_MspInit+0xd4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002b76:	2309      	movs	r3, #9
 8002b78:	4a13      	ldr	r2, [pc, #76]	; (8002bc8 <HAL_ADC_MspInit+0xd8>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b7e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002b82:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b8a:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b92:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b96:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b98:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b9c:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ba0:	f003 fd38 	bl	8006614 <HAL_DMA_Init>
 8002ba4:	b108      	cbz	r0, 8002baa <HAL_ADC_MspInit+0xba>
    {
      Error_Handler();
 8002ba6:	f7ff ff8f 	bl	8002ac8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002baa:	64f4      	str	r4, [r6, #76]	; 0x4c
 8002bac:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bae:	b008      	add	sp, #32
 8002bb0:	bd70      	pop	{r4, r5, r6, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	58024400 	.word	0x58024400
 8002bbc:	58020800 	.word	0x58020800
 8002bc0:	58020400 	.word	0x58020400
 8002bc4:	240132d8 	.word	0x240132d8
 8002bc8:	40020470 	.word	0x40020470

08002bcc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd2:	2214      	movs	r2, #20
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	a803      	add	r0, sp, #12
 8002bd8:	f010 f835 	bl	8012c46 <memset>
  if(hsd->Instance==SDMMC1)
 8002bdc:	6822      	ldr	r2, [r4, #0]
 8002bde:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <HAL_SD_MspInit+0xac>)
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d146      	bne.n	8002c72 <HAL_SD_MspInit+0xa6>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002be4:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <HAL_SD_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002be6:	250c      	movs	r5, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be8:	2402      	movs	r4, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002bea:	2603      	movs	r6, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002bec:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf0:	eb0d 0105 	add.w	r1, sp, r5
 8002bf4:	4822      	ldr	r0, [pc, #136]	; (8002c80 <HAL_SD_MspInit+0xb4>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002bf6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002bfa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002bfe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002c02:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8002c06:	9200      	str	r2, [sp, #0]
 8002c08:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c0e:	f042 0204 	orr.w	r2, r2, #4
 8002c12:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002c16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c1a:	f002 0204 	and.w	r2, r2, #4
 8002c1e:	9201      	str	r2, [sp, #4]
 8002c20:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c26:	f042 0208 	orr.w	r2, r2, #8
 8002c2a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	9302      	str	r3, [sp, #8]
 8002c38:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002c3e:	e9cd 6506 	strd	r6, r5, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c42:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c46:	f004 fcd7 	bl	80075f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c4a:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c4c:	eb0d 0105 	add.w	r1, sp, r5
 8002c50:	480c      	ldr	r0, [pc, #48]	; (8002c84 <HAL_SD_MspInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002c52:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5a:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c5e:	f004 fccb 	bl	80075f8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8002c62:	2031      	movs	r0, #49	; 0x31
 8002c64:	4622      	mov	r2, r4
 8002c66:	2105      	movs	r1, #5
 8002c68:	f003 fb04 	bl	8006274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002c6c:	2031      	movs	r0, #49	; 0x31
 8002c6e:	f003 fb33 	bl	80062d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002c72:	b008      	add	sp, #32
 8002c74:	bd70      	pop	{r4, r5, r6, pc}
 8002c76:	bf00      	nop
 8002c78:	52007000 	.word	0x52007000
 8002c7c:	58024400 	.word	0x58024400
 8002c80:	58020800 	.word	0x58020800
 8002c84:	58020c00 	.word	0x58020c00

08002c88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c8c:	b08e      	sub	sp, #56	; 0x38
 8002c8e:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	2214      	movs	r2, #20
 8002c92:	2100      	movs	r1, #0
 8002c94:	a809      	add	r0, sp, #36	; 0x24
 8002c96:	f00f ffd6 	bl	8012c46 <memset>
  if(hspi->Instance==SPI1)
 8002c9a:	682b      	ldr	r3, [r5, #0]
 8002c9c:	4abb      	ldr	r2, [pc, #748]	; (8002f8c <HAL_SPI_MspInit+0x304>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d155      	bne.n	8002d4e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ca2:	4bbb      	ldr	r3, [pc, #748]	; (8002f90 <HAL_SPI_MspInit+0x308>)
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15 (JTDI)     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca4:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ca6:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca8:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002caa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cae:	48b9      	ldr	r0, [pc, #740]	; (8002f94 <HAL_SPI_MspInit+0x30c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cb4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002cb8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002cbc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002cc0:	9200      	str	r2, [sp, #0]
 8002cc2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	23a0      	movs	r3, #160	; 0xa0
 8002cde:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce8:	f004 fc86 	bl	80075f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf0:	48a8      	ldr	r0, [pc, #672]	; (8002f94 <HAL_SPI_MspInit+0x30c>)
 8002cf2:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cf4:	940d      	str	r4, [sp, #52]	; 0x34

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8002cf6:	4ca8      	ldr	r4, [pc, #672]	; (8002f98 <HAL_SPI_MspInit+0x310>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf8:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfe:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	f004 fc79 	bl	80075f8 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002d06:	2325      	movs	r3, #37	; 0x25
 8002d08:	f8df e2c0 	ldr.w	lr, [pc, #704]	; 8002fcc <HAL_SPI_MspInit+0x344>
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002d0c:	4620      	mov	r0, r4
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d0e:	61a6      	str	r6, [r4, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d10:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002d12:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d1a:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d22:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d26:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002d2a:	f003 fc73 	bl	8006614 <HAL_DMA_Init>
 8002d2e:	b108      	cbz	r0, 8002d34 <HAL_SPI_MspInit+0xac>
    {
      Error_Handler();
 8002d30:	f7ff feca 	bl	8002ac8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002d34:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002d36:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2105      	movs	r1, #5
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002d3c:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002d3e:	f003 fa99 	bl	8006274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002d42:	2023      	movs	r0, #35	; 0x23

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002d44:	f003 fac8 	bl	80062d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002d48:	b00e      	add	sp, #56	; 0x38
 8002d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(hspi->Instance==SPI2)
 8002d4e:	4a93      	ldr	r2, [pc, #588]	; (8002f9c <HAL_SPI_MspInit+0x314>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d151      	bne.n	8002df8 <HAL_SPI_MspInit+0x170>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d54:	4b8e      	ldr	r3, [pc, #568]	; (8002f90 <HAL_SPI_MspInit+0x308>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d58:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5a:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d5c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d60:	488f      	ldr	r0, [pc, #572]	; (8002fa0 <HAL_SPI_MspInit+0x318>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d66:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002d6a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002d6e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002d72:	9202      	str	r2, [sp, #8]
 8002d74:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002d7a:	f042 0202 	orr.w	r2, r2, #2
 8002d7e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d86:	940d      	str	r4, [sp, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	9303      	str	r3, [sp, #12]
 8002d8e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d94:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d98:	f004 fc2e 	bl	80075f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002d9c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da0:	487f      	ldr	r0, [pc, #508]	; (8002fa0 <HAL_SPI_MspInit+0x318>)
 8002da2:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002da4:	940d      	str	r4, [sp, #52]	; 0x34
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8002da6:	4c7f      	ldr	r4, [pc, #508]	; (8002fa4 <HAL_SPI_MspInit+0x31c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da8:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dac:	2600      	movs	r6, #0
 8002dae:	2303      	movs	r3, #3
 8002db0:	e9cd 630b 	strd	r6, r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db4:	f004 fc20 	bl	80075f8 <HAL_GPIO_Init>
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002db8:	2327      	movs	r3, #39	; 0x27
 8002dba:	f8df c214 	ldr.w	ip, [pc, #532]	; 8002fd0 <HAL_SPI_MspInit+0x348>
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002dbe:	4620      	mov	r0, r4
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dc0:	61a6      	str	r6, [r4, #24]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dc2:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002dc4:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dcc:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd4:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002dd8:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002ddc:	f003 fc1a 	bl	8006614 <HAL_DMA_Init>
 8002de0:	b108      	cbz	r0, 8002de6 <HAL_SPI_MspInit+0x15e>
      Error_Handler();
 8002de2:	f7ff fe71 	bl	8002ac8 <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002de6:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002de8:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002dea:	2200      	movs	r2, #0
 8002dec:	2105      	movs	r1, #5
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002dee:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002df0:	f003 fa40 	bl	8006274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002df4:	2024      	movs	r0, #36	; 0x24
 8002df6:	e7a5      	b.n	8002d44 <HAL_SPI_MspInit+0xbc>
  else if(hspi->Instance==SPI3)
 8002df8:	4a6b      	ldr	r2, [pc, #428]	; (8002fa8 <HAL_SPI_MspInit+0x320>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d166      	bne.n	8002ecc <HAL_SPI_MspInit+0x244>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002dfe:	4b64      	ldr	r3, [pc, #400]	; (8002f90 <HAL_SPI_MspInit+0x308>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e00:	2402      	movs	r4, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e02:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e04:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e06:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002e0a:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0c:	4861      	ldr	r0, [pc, #388]	; (8002f94 <HAL_SPI_MspInit+0x30c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002e0e:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e16:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002e1a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002e1e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002e22:	9204      	str	r2, [sp, #16]
 8002e24:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002e32:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002e36:	f002 0201 	and.w	r2, r2, #1
 8002e3a:	9205      	str	r2, [sp, #20]
 8002e3c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002e42:	f042 0202 	orr.w	r2, r2, #2
 8002e46:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e4e:	970d      	str	r7, [sp, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	9306      	str	r3, [sp, #24]
 8002e56:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e58:	2310      	movs	r3, #16
 8002e5a:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5e:	f004 fbcb 	bl	80075f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e62:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e64:	a909      	add	r1, sp, #36	; 0x24
 8002e66:	484e      	ldr	r0, [pc, #312]	; (8002fa0 <HAL_SPI_MspInit+0x318>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e68:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002e6c:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002e6e:	e9cd 680b 	strd	r6, r8, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002e72:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e74:	f004 fbc0 	bl	80075f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e78:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7a:	4849      	ldr	r0, [pc, #292]	; (8002fa0 <HAL_SPI_MspInit+0x318>)
 8002e7c:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e7e:	970d      	str	r7, [sp, #52]	; 0x34
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8002e80:	4f4a      	ldr	r7, [pc, #296]	; (8002fac <HAL_SPI_MspInit+0x324>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002e86:	e9cd 680b 	strd	r6, r8, [sp, #44]	; 0x2c
    hdma_spi3_rx.Instance = DMA1_Stream2;
 8002e8a:	4c49      	ldr	r4, [pc, #292]	; (8002fb0 <HAL_SPI_MspInit+0x328>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8c:	f004 fbb4 	bl	80075f8 <HAL_GPIO_Init>
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8002e90:	233d      	movs	r3, #61	; 0x3d
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002e92:	4620      	mov	r0, r4
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e94:	61a6      	str	r6, [r4, #24]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e96:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8002e98:	e9c4 7300 	strd	r7, r3, [r4]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ea0:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8002ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ea8:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002eac:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002eb0:	f003 fbb0 	bl	8006614 <HAL_DMA_Init>
 8002eb4:	b108      	cbz	r0, 8002eba <HAL_SPI_MspInit+0x232>
      Error_Handler();
 8002eb6:	f7ff fe07 	bl	8002ac8 <Error_Handler>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002eba:	2033      	movs	r0, #51	; 0x33
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8002ebc:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2105      	movs	r1, #5
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8002ec2:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002ec4:	f003 f9d6 	bl	8006274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002ec8:	2033      	movs	r0, #51	; 0x33
 8002eca:	e73b      	b.n	8002d44 <HAL_SPI_MspInit+0xbc>
  else if(hspi->Instance==SPI4)
 8002ecc:	4a39      	ldr	r2, [pc, #228]	; (8002fb4 <HAL_SPI_MspInit+0x32c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	f47f af3a 	bne.w	8002d48 <HAL_SPI_MspInit+0xc0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002ed4:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <HAL_SPI_MspInit+0x308>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed6:	2074      	movs	r0, #116	; 0x74
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ed8:	a909      	add	r1, sp, #36	; 0x24
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8002eda:	4c37      	ldr	r4, [pc, #220]	; (8002fb8 <HAL_SPI_MspInit+0x330>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002edc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8002ee0:	4e36      	ldr	r6, [pc, #216]	; (8002fbc <HAL_SPI_MspInit+0x334>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002ee2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002eea:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002eee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ef2:	9207      	str	r2, [sp, #28]
 8002ef4:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ef6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002efa:	f042 0210 	orr.w	r2, r2, #16
 8002efe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	9308      	str	r3, [sp, #32]
 8002f0c:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002f14:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f16:	482a      	ldr	r0, [pc, #168]	; (8002fc0 <HAL_SPI_MspInit+0x338>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002f18:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f1a:	f004 fb6d 	bl	80075f8 <HAL_GPIO_Init>
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8002f1e:	2353      	movs	r3, #83	; 0x53
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002f24:	4620      	mov	r0, r4
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8002f26:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f2a:	2300      	movs	r3, #0
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f2c:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f30:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8002f34:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f38:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002f3c:	f003 fb6a 	bl	8006614 <HAL_DMA_Init>
 8002f40:	b108      	cbz	r0, 8002f46 <HAL_SPI_MspInit+0x2be>
      Error_Handler();
 8002f42:	f7ff fdc1 	bl	8002ac8 <Error_Handler>
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8002f46:	4a1f      	ldr	r2, [pc, #124]	; (8002fc4 <HAL_SPI_MspInit+0x33c>)
 8002f48:	2354      	movs	r3, #84	; 0x54
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8002f4a:	67ec      	str	r4, [r5, #124]	; 0x7c
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f4c:	2140      	movs	r1, #64	; 0x40
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8002f4e:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8002f50:	4c1d      	ldr	r4, [pc, #116]	; (8002fc8 <HAL_SPI_MspInit+0x340>)
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8002f52:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f56:	2300      	movs	r3, #0
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002f5c:	4620      	mov	r0, r4
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f5e:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f62:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002f66:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f6a:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002f6e:	f003 fb51 	bl	8006614 <HAL_DMA_Init>
 8002f72:	b108      	cbz	r0, 8002f78 <HAL_SPI_MspInit+0x2f0>
      Error_Handler();
 8002f74:	f7ff fda8 	bl	8002ac8 <Error_Handler>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2054      	movs	r0, #84	; 0x54
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002f7c:	67ac      	str	r4, [r5, #120]	; 0x78
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002f7e:	4611      	mov	r1, r2
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002f80:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002f82:	f003 f977 	bl	8006274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002f86:	2054      	movs	r0, #84	; 0x54
 8002f88:	e6dc      	b.n	8002d44 <HAL_SPI_MspInit+0xbc>
 8002f8a:	bf00      	nop
 8002f8c:	40013000 	.word	0x40013000
 8002f90:	58024400 	.word	0x58024400
 8002f94:	58020000 	.word	0x58020000
 8002f98:	2401d668 	.word	0x2401d668
 8002f9c:	40003800 	.word	0x40003800
 8002fa0:	58020400 	.word	0x58020400
 8002fa4:	2400cce8 	.word	0x2400cce8
 8002fa8:	40003c00 	.word	0x40003c00
 8002fac:	40020040 	.word	0x40020040
 8002fb0:	2401f7a8 	.word	0x2401f7a8
 8002fb4:	40013400 	.word	0x40013400
 8002fb8:	2400ce48 	.word	0x2400ce48
 8002fbc:	40020410 	.word	0x40020410
 8002fc0:	58021000 	.word	0x58021000
 8002fc4:	40020428 	.word	0x40020428
 8002fc8:	240111c4 	.word	0x240111c4
 8002fcc:	40020010 	.word	0x40020010
 8002fd0:	40020028 	.word	0x40020028

08002fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fd4:	b530      	push	{r4, r5, lr}
 8002fd6:	b091      	sub	sp, #68	; 0x44
 8002fd8:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fda:	2214      	movs	r2, #20
 8002fdc:	2100      	movs	r1, #0
 8002fde:	a80b      	add	r0, sp, #44	; 0x2c
 8002fe0:	f00f fe31 	bl	8012c46 <memset>
  if(huart->Instance==UART4)
 8002fe4:	682b      	ldr	r3, [r5, #0]
 8002fe6:	4a78      	ldr	r2, [pc, #480]	; (80031c8 <HAL_UART_MspInit+0x1f4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d13d      	bne.n	8003068 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002fec:	4b77      	ldr	r3, [pc, #476]	; (80031cc <HAL_UART_MspInit+0x1f8>)
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	f04f 0c03 	mov.w	ip, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff2:	a90b      	add	r1, sp, #44	; 0x2c
 8002ff4:	4876      	ldr	r0, [pc, #472]	; (80031d0 <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ff6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8002ffa:	4c76      	ldr	r4, [pc, #472]	; (80031d4 <HAL_UART_MspInit+0x200>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ffc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003000:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003004:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003008:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800300c:	9201      	str	r2, [sp, #4]
 800300e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003010:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800301c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	9302      	str	r3, [sp, #8]
 8003026:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003028:	2302      	movs	r3, #2
 800302a:	e9cd c30b 	strd	ip, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800302e:	2308      	movs	r3, #8
 8003030:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003032:	f004 fae1 	bl	80075f8 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8003036:	4b68      	ldr	r3, [pc, #416]	; (80031d8 <HAL_UART_MspInit+0x204>)
 8003038:	6023      	str	r3, [r4, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800303a:	233f      	movs	r3, #63	; 0x3f
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800303c:	6063      	str	r3, [r4, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800303e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003042:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003044:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003046:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800304a:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800304e:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003052:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003056:	f003 fadd 	bl	8006614 <HAL_DMA_Init>
 800305a:	b108      	cbz	r0, 8003060 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 800305c:	f7ff fd34 	bl	8002ac8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003060:	67ac      	str	r4, [r5, #120]	; 0x78
 8003062:	63a5      	str	r5, [r4, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003064:	b011      	add	sp, #68	; 0x44
 8003066:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==UART7)
 8003068:	4a5c      	ldr	r2, [pc, #368]	; (80031dc <HAL_UART_MspInit+0x208>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d128      	bne.n	80030c0 <HAL_UART_MspInit+0xec>
    __HAL_RCC_UART7_CLK_ENABLE();
 800306e:	4b57      	ldr	r3, [pc, #348]	; (80031cc <HAL_UART_MspInit+0x1f8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003070:	f44f 74c0 	mov.w	r4, #384	; 0x180
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003074:	a90b      	add	r1, sp, #44	; 0x2c
 8003076:	485a      	ldr	r0, [pc, #360]	; (80031e0 <HAL_UART_MspInit+0x20c>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8003078:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800307c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003080:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003084:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003088:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800308c:	9203      	str	r2, [sp, #12]
 800308e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003090:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003094:	f042 0210 	orr.w	r2, r2, #16
 8003098:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800309c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	9304      	str	r3, [sp, #16]
 80030a6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a8:	2302      	movs	r3, #2
 80030aa:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80030ae:	2307      	movs	r3, #7
    hdma_uart7_rx.Instance = DMA1_Stream4;
 80030b0:	4c4c      	ldr	r4, [pc, #304]	; (80031e4 <HAL_UART_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80030b2:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030b4:	f004 faa0 	bl	80075f8 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream4;
 80030b8:	4b4b      	ldr	r3, [pc, #300]	; (80031e8 <HAL_UART_MspInit+0x214>)
 80030ba:	6023      	str	r3, [r4, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80030bc:	234f      	movs	r3, #79	; 0x4f
 80030be:	e7bd      	b.n	800303c <HAL_UART_MspInit+0x68>
  else if(huart->Instance==USART1)
 80030c0:	4a4a      	ldr	r2, [pc, #296]	; (80031ec <HAL_UART_MspInit+0x218>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d128      	bne.n	8003118 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART1_CLK_ENABLE();
 80030c6:	4b41      	ldr	r3, [pc, #260]	; (80031cc <HAL_UART_MspInit+0x1f8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030cc:	a90b      	add	r1, sp, #44	; 0x2c
    hdma_usart1_rx.Instance = DMA1_Stream5;
 80030ce:	4c48      	ldr	r4, [pc, #288]	; (80031f0 <HAL_UART_MspInit+0x21c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80030d0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80030d4:	f042 0210 	orr.w	r2, r2, #16
 80030d8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80030dc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80030e0:	f002 0210 	and.w	r2, r2, #16
 80030e4:	9205      	str	r2, [sp, #20]
 80030e6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80030ec:	f042 0201 	orr.w	r2, r2, #1
 80030f0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80030f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	9306      	str	r3, [sp, #24]
 80030fe:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003100:	2302      	movs	r3, #2
 8003102:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003106:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003108:	4831      	ldr	r0, [pc, #196]	; (80031d0 <HAL_UART_MspInit+0x1fc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800310a:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310c:	f004 fa74 	bl	80075f8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream5;
 8003110:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <HAL_UART_MspInit+0x220>)
 8003112:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003114:	2329      	movs	r3, #41	; 0x29
 8003116:	e791      	b.n	800303c <HAL_UART_MspInit+0x68>
  else if(huart->Instance==USART2)
 8003118:	4a37      	ldr	r2, [pc, #220]	; (80031f8 <HAL_UART_MspInit+0x224>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d127      	bne.n	800316e <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800311e:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <HAL_UART_MspInit+0x1f8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	210c      	movs	r1, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003122:	482b      	ldr	r0, [pc, #172]	; (80031d0 <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003124:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart2_rx.Instance = DMA1_Stream6;
 8003128:	4c34      	ldr	r4, [pc, #208]	; (80031fc <HAL_UART_MspInit+0x228>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800312a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800312e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003132:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003136:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800313a:	9207      	str	r2, [sp, #28]
 800313c:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800314a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	9308      	str	r3, [sp, #32]
 8003154:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003156:	2302      	movs	r3, #2
 8003158:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800315c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315e:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003160:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003162:	f004 fa49 	bl	80075f8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream6;
 8003166:	4b26      	ldr	r3, [pc, #152]	; (8003200 <HAL_UART_MspInit+0x22c>)
 8003168:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800316a:	232b      	movs	r3, #43	; 0x2b
 800316c:	e766      	b.n	800303c <HAL_UART_MspInit+0x68>
  else if(huart->Instance==USART3)
 800316e:	4a25      	ldr	r2, [pc, #148]	; (8003204 <HAL_UART_MspInit+0x230>)
 8003170:	4293      	cmp	r3, r2
 8003172:	f47f af77 	bne.w	8003064 <HAL_UART_MspInit+0x90>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003176:	4b15      	ldr	r3, [pc, #84]	; (80031cc <HAL_UART_MspInit+0x1f8>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003178:	a90b      	add	r1, sp, #44	; 0x2c
 800317a:	4823      	ldr	r0, [pc, #140]	; (8003208 <HAL_UART_MspInit+0x234>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800317c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8003180:	4c22      	ldr	r4, [pc, #136]	; (800320c <HAL_UART_MspInit+0x238>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003182:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003186:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800318a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800318e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003192:	9209      	str	r2, [sp, #36]	; 0x24
 8003194:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003196:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800319a:	f042 0208 	orr.w	r2, r2, #8
 800319e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a2:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	930a      	str	r3, [sp, #40]	; 0x28
 80031b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b2:	2302      	movs	r3, #2
 80031b4:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031b8:	2307      	movs	r3, #7
 80031ba:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031bc:	f004 fa1c 	bl	80075f8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream7;
 80031c0:	4b13      	ldr	r3, [pc, #76]	; (8003210 <HAL_UART_MspInit+0x23c>)
 80031c2:	6023      	str	r3, [r4, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80031c4:	232d      	movs	r3, #45	; 0x2d
 80031c6:	e739      	b.n	800303c <HAL_UART_MspInit+0x68>
 80031c8:	40004c00 	.word	0x40004c00
 80031cc:	58024400 	.word	0x58024400
 80031d0:	58020000 	.word	0x58020000
 80031d4:	2400a898 	.word	0x2400a898
 80031d8:	40020058 	.word	0x40020058
 80031dc:	40007800 	.word	0x40007800
 80031e0:	58021000 	.word	0x58021000
 80031e4:	2400efd4 	.word	0x2400efd4
 80031e8:	40020070 	.word	0x40020070
 80031ec:	40011000 	.word	0x40011000
 80031f0:	2400f054 	.word	0x2400f054
 80031f4:	40020088 	.word	0x40020088
 80031f8:	40004400 	.word	0x40004400
 80031fc:	2400a914 	.word	0x2400a914
 8003200:	400200a0 	.word	0x400200a0
 8003204:	40004800 	.word	0x40004800
 8003208:	58020c00 	.word	0x58020c00
 800320c:	2400aab0 	.word	0x2400aab0
 8003210:	400200b8 	.word	0x400200b8

08003214 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003214:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8003216:	4601      	mov	r1, r0
{
 8003218:	b08a      	sub	sp, #40	; 0x28
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800321a:	2200      	movs	r2, #0
 800321c:	2019      	movs	r0, #25
 800321e:	f003 f829 	bl	8006274 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003222:	2019      	movs	r0, #25
 8003224:	f003 f858 	bl	80062d8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003228:	4b16      	ldr	r3, [pc, #88]	; (8003284 <HAL_InitTick+0x70>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800322a:	4669      	mov	r1, sp
 800322c:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 800322e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003232:	4c15      	ldr	r4, [pc, #84]	; (8003288 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003234:	f042 0201 	orr.w	r2, r2, #1
 8003238:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800323c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003248:	f005 fc8c 	bl	8008b64 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800324c:	f005 fc78 	bl	8008b40 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_InitTick+0x78>)
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003252:	0040      	lsls	r0, r0, #1
  htim1.Instance = TIM1;
 8003254:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003256:	f240 33e7 	movw	r3, #999	; 0x3e7
 800325a:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_InitTick+0x7c>)
 800325e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003262:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8003264:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 8003266:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003268:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 800326a:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800326c:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800326e:	f008 f84f 	bl	800b310 <HAL_TIM_Base_Init>
 8003272:	b920      	cbnz	r0, 800327e <HAL_InitTick+0x6a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003274:	4620      	mov	r0, r4
 8003276:	f007 ff13 	bl	800b0a0 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 800327a:	b00a      	add	sp, #40	; 0x28
 800327c:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800327e:	2001      	movs	r0, #1
 8003280:	e7fb      	b.n	800327a <HAL_InitTick+0x66>
 8003282:	bf00      	nop
 8003284:	58024400 	.word	0x58024400
 8003288:	2401f830 	.word	0x2401f830
 800328c:	40010000 	.word	0x40010000
 8003290:	000f4240 	.word	0x000f4240

08003294 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003294:	4770      	bx	lr

08003296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003296:	e7fe      	b.n	8003296 <HardFault_Handler>

08003298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003298:	e7fe      	b.n	8003298 <MemManage_Handler>

0800329a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800329a:	e7fe      	b.n	800329a <BusFault_Handler>

0800329c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800329c:	e7fe      	b.n	800329c <UsageFault_Handler>

0800329e <DebugMon_Handler>:
 800329e:	4770      	bx	lr

080032a0 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80032a0:	4801      	ldr	r0, [pc, #4]	; (80032a8 <DMA1_Stream0_IRQHandler+0x8>)
 80032a2:	f003 beff 	b.w	80070a4 <HAL_DMA_IRQHandler>
 80032a6:	bf00      	nop
 80032a8:	2401d668 	.word	0x2401d668

080032ac <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80032ac:	4801      	ldr	r0, [pc, #4]	; (80032b4 <DMA1_Stream1_IRQHandler+0x8>)
 80032ae:	f003 bef9 	b.w	80070a4 <HAL_DMA_IRQHandler>
 80032b2:	bf00      	nop
 80032b4:	2400cce8 	.word	0x2400cce8

080032b8 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80032b8:	4801      	ldr	r0, [pc, #4]	; (80032c0 <DMA1_Stream2_IRQHandler+0x8>)
 80032ba:	f003 bef3 	b.w	80070a4 <HAL_DMA_IRQHandler>
 80032be:	bf00      	nop
 80032c0:	2401f7a8 	.word	0x2401f7a8

080032c4 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80032c4:	4801      	ldr	r0, [pc, #4]	; (80032cc <DMA1_Stream3_IRQHandler+0x8>)
 80032c6:	f003 beed 	b.w	80070a4 <HAL_DMA_IRQHandler>
 80032ca:	bf00      	nop
 80032cc:	2400a898 	.word	0x2400a898

080032d0 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80032d0:	4801      	ldr	r0, [pc, #4]	; (80032d8 <DMA1_Stream4_IRQHandler+0x8>)
 80032d2:	f003 bee7 	b.w	80070a4 <HAL_DMA_IRQHandler>
 80032d6:	bf00      	nop
 80032d8:	2400efd4 	.word	0x2400efd4

080032dc <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80032dc:	4801      	ldr	r0, [pc, #4]	; (80032e4 <DMA1_Stream5_IRQHandler+0x8>)
 80032de:	f003 bee1 	b.w	80070a4 <HAL_DMA_IRQHandler>
 80032e2:	bf00      	nop
 80032e4:	2400f054 	.word	0x2400f054

080032e8 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80032e8:	4801      	ldr	r0, [pc, #4]	; (80032f0 <DMA1_Stream6_IRQHandler+0x8>)
 80032ea:	f003 bedb 	b.w	80070a4 <HAL_DMA_IRQHandler>
 80032ee:	bf00      	nop
 80032f0:	2400a914 	.word	0x2400a914

080032f4 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032f4:	4801      	ldr	r0, [pc, #4]	; (80032fc <TIM1_UP_IRQHandler+0x8>)
 80032f6:	f007 bef5 	b.w	800b0e4 <HAL_TIM_IRQHandler>
 80032fa:	bf00      	nop
 80032fc:	2401f830 	.word	0x2401f830

08003300 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003300:	4801      	ldr	r0, [pc, #4]	; (8003308 <SPI1_IRQHandler+0x8>)
 8003302:	f007 bda3 	b.w	800ae4c <HAL_SPI_IRQHandler>
 8003306:	bf00      	nop
 8003308:	2401b4ec 	.word	0x2401b4ec

0800330c <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800330c:	4801      	ldr	r0, [pc, #4]	; (8003314 <SPI2_IRQHandler+0x8>)
 800330e:	f007 bd9d 	b.w	800ae4c <HAL_SPI_IRQHandler>
 8003312:	bf00      	nop
 8003314:	2400a994 	.word	0x2400a994

08003318 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003318:	4801      	ldr	r0, [pc, #4]	; (8003320 <DMA1_Stream7_IRQHandler+0x8>)
 800331a:	f003 bec3 	b.w	80070a4 <HAL_DMA_IRQHandler>
 800331e:	bf00      	nop
 8003320:	2400aab0 	.word	0x2400aab0

08003324 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003324:	4801      	ldr	r0, [pc, #4]	; (800332c <SDMMC1_IRQHandler+0x8>)
 8003326:	f007 b999 	b.w	800a65c <HAL_SD_IRQHandler>
 800332a:	bf00      	nop
 800332c:	2400cd60 	.word	0x2400cd60

08003330 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003330:	4801      	ldr	r0, [pc, #4]	; (8003338 <SPI3_IRQHandler+0x8>)
 8003332:	f007 bd8b 	b.w	800ae4c <HAL_SPI_IRQHandler>
 8003336:	bf00      	nop
 8003338:	2400eed8 	.word	0x2400eed8

0800333c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 800333c:	4801      	ldr	r0, [pc, #4]	; (8003344 <DMA2_Stream0_IRQHandler+0x8>)
 800333e:	f003 beb1 	b.w	80070a4 <HAL_DMA_IRQHandler>
 8003342:	bf00      	nop
 8003344:	2400ce48 	.word	0x2400ce48

08003348 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8003348:	4801      	ldr	r0, [pc, #4]	; (8003350 <DMA2_Stream1_IRQHandler+0x8>)
 800334a:	f003 beab 	b.w	80070a4 <HAL_DMA_IRQHandler>
 800334e:	bf00      	nop
 8003350:	240111c4 	.word	0x240111c4

08003354 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003354:	4801      	ldr	r0, [pc, #4]	; (800335c <DMA2_Stream4_IRQHandler+0x8>)
 8003356:	f003 bea5 	b.w	80070a4 <HAL_DMA_IRQHandler>
 800335a:	bf00      	nop
 800335c:	240132d8 	.word	0x240132d8

08003360 <SPI4_IRQHandler>:
void SPI4_IRQHandler(void)
{
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8003360:	4801      	ldr	r0, [pc, #4]	; (8003368 <SPI4_IRQHandler+0x8>)
 8003362:	f007 bd73 	b.w	800ae4c <HAL_SPI_IRQHandler>
 8003366:	bf00      	nop
 8003368:	24013250 	.word	0x24013250

0800336c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800336c:	4801      	ldr	r0, [pc, #4]	; (8003374 <OTG_FS_IRQHandler+0x8>)
 800336e:	f004 bae9 	b.w	8007944 <HAL_PCD_IRQHandler>
 8003372:	bf00      	nop
 8003374:	24023e20 	.word	0x24023e20

08003378 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <_sbrk+0x30>)
{
 800337a:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 800337c:	6819      	ldr	r1, [r3, #0]
{
 800337e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003380:	b909      	cbnz	r1, 8003386 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8003382:	490a      	ldr	r1, [pc, #40]	; (80033ac <_sbrk+0x34>)
 8003384:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	4909      	ldr	r1, [pc, #36]	; (80033b0 <_sbrk+0x38>)
 800338a:	4c0a      	ldr	r4, [pc, #40]	; (80033b4 <_sbrk+0x3c>)
 800338c:	4402      	add	r2, r0
 800338e:	1b09      	subs	r1, r1, r4
 8003390:	428a      	cmp	r2, r1
 8003392:	d906      	bls.n	80033a2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8003394:	f00f fc12 	bl	8012bbc <__errno>
 8003398:	230c      	movs	r3, #12
 800339a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800339c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80033a0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80033a2:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80033a4:	e7fc      	b.n	80033a0 <_sbrk+0x28>
 80033a6:	bf00      	nop
 80033a8:	240002d8 	.word	0x240002d8
 80033ac:	24024230 	.word	0x24024230
 80033b0:	24080000 	.word	0x24080000
 80033b4:	00000f00 	.word	0x00000f00

080033b8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033b8:	4a28      	ldr	r2, [pc, #160]	; (800345c <SystemInit+0xa4>)
 80033ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80033be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80033c6:	4a26      	ldr	r2, [pc, #152]	; (8003460 <SystemInit+0xa8>)
 80033c8:	6813      	ldr	r3, [r2, #0]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d805      	bhi.n	80033de <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80033d2:	6813      	ldr	r3, [r2, #0]
 80033d4:	f023 030f 	bic.w	r3, r3, #15
 80033d8:	f043 0307 	orr.w	r3, r3, #7
 80033dc:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80033de:	4b21      	ldr	r3, [pc, #132]	; (8003464 <SystemInit+0xac>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033e8:	2200      	movs	r2, #0
 80033ea:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80033ec:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <SystemInit+0xb0>)
 80033ee:	6819      	ldr	r1, [r3, #0]
 80033f0:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80033f2:	491b      	ldr	r1, [pc, #108]	; (8003460 <SystemInit+0xa8>)
  RCC->CR &= 0xEAF6ED7FU;
 80033f4:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80033f6:	680a      	ldr	r2, [r1, #0]
 80033f8:	f002 020f 	and.w	r2, r2, #15
 80033fc:	2a07      	cmp	r2, #7
 80033fe:	d905      	bls.n	800340c <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003400:	680a      	ldr	r2, [r1, #0]
 8003402:	f022 020f 	bic.w	r2, r2, #15
 8003406:	f042 0207 	orr.w	r2, r2, #7
 800340a:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800340c:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800340e:	4917      	ldr	r1, [pc, #92]	; (800346c <SystemInit+0xb4>)
  RCC->D1CFGR = 0x00000000;
 8003410:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8003412:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8003414:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8003416:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003418:	4915      	ldr	r1, [pc, #84]	; (8003470 <SystemInit+0xb8>)
 800341a:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800341c:	4915      	ldr	r1, [pc, #84]	; (8003474 <SystemInit+0xbc>)
 800341e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003420:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003422:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003424:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003426:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003428:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800342a:	6819      	ldr	r1, [r3, #0]
 800342c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003430:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003432:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003434:	4b10      	ldr	r3, [pc, #64]	; (8003478 <SystemInit+0xc0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	0c1b      	lsrs	r3, r3, #16
 800343a:	041b      	lsls	r3, r3, #16
 800343c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003440:	d202      	bcs.n	8003448 <SystemInit+0x90>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003442:	4b0e      	ldr	r3, [pc, #56]	; (800347c <SystemInit+0xc4>)
 8003444:	2201      	movs	r2, #1
 8003446:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003448:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <SystemInit+0xc8>)
 800344a:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800344e:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003450:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003454:	4b01      	ldr	r3, [pc, #4]	; (800345c <SystemInit+0xa4>)
 8003456:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	e000ed00 	.word	0xe000ed00
 8003460:	52002000 	.word	0x52002000
 8003464:	58024400 	.word	0x58024400
 8003468:	eaf6ed7f 	.word	0xeaf6ed7f
 800346c:	02020200 	.word	0x02020200
 8003470:	01ff0000 	.word	0x01ff0000
 8003474:	01010280 	.word	0x01010280
 8003478:	5c001000 	.word	0x5c001000
 800347c:	51008108 	.word	0x51008108
 8003480:	52004000 	.word	0x52004000
 8003484:	00000000 	.word	0x00000000

08003488 <vTaskBattery>:

#include "tasks/task_battery.h"

float get_temp(uint16_t adc_value);

void vTaskBattery(void *argument) {
 8003488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800348c:	ed2d 8b10 	vpush	{d8-d15}

	/* Initialise Variables */
	double mah;
	double curr = 0;
	double supp = 0;
	double bat = 0;
 8003490:	ed9f db6d 	vldr	d13, [pc, #436]	; 8003648 <vTaskBattery+0x1c0>
		tick_count += tick_update;

		double current2 = ((double) adc_value[0] * (2.5 / 4096.0)
				- (3.3 * 0.107)) / 0.264; // CURR2
		float supply_voltage = adc_value[1] * (2.5 / 4096) * 2; // 3V3
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 8003494:	ed9f ab6e 	vldr	d10, [pc, #440]	; 8003650 <vTaskBattery+0x1c8>
void vTaskBattery(void *argument) {
 8003498:	b08a      	sub	sp, #40	; 0x28
	battery_data_t battery_data = { 0 };
 800349a:	2400      	movs	r4, #0
	tick_update = osKernelGetTickFreq() / BATTERY_SAMPLE_RATE;
 800349c:	2732      	movs	r7, #50	; 0x32
	double supp = 0;
 800349e:	eeb0 cb4d 	vmov.f64	d12, d13
	battery_data_t battery_data = { 0 };
 80034a2:	f8ad 4010 	strh.w	r4, [sp, #16]
	double curr = 0;
 80034a6:	eeb0 eb4d 	vmov.f64	d14, d13
 80034aa:	eeb0 8b4a 	vmov.f64	d8, d10
	battery_data_t battery_data = { 0 };
 80034ae:	e9cd 4402 	strd	r4, r4, [sp, #8]
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 80034b2:	ed9f bb69 	vldr	d11, [pc, #420]	; 8003658 <vTaskBattery+0x1d0>
	tick_count = osKernelGetTickCount();
 80034b6:	f00c f95f 	bl	800f778 <osKernelGetTickCount>
 80034ba:	4606      	mov	r6, r0
	tick_update = osKernelGetTickFreq() / BATTERY_SAMPLE_RATE;
 80034bc:	f00c f970 	bl	800f7a0 <osKernelGetTickFreq>
 80034c0:	fbb0 f7f7 	udiv	r7, r0, r7
	HAL_ADC_Stop_DMA(&hadc1);
 80034c4:	4870      	ldr	r0, [pc, #448]	; (8003688 <vTaskBattery+0x200>)
 80034c6:	f002 fc3a 	bl	8005d3e <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 80034ca:	2205      	movs	r2, #5
 80034cc:	a905      	add	r1, sp, #20
 80034ce:	486e      	ldr	r0, [pc, #440]	; (8003688 <vTaskBattery+0x200>)
 80034d0:	f002 fb72 	bl	8005bb8 <HAL_ADC_Start_DMA>
	osDelay(500);
 80034d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034d8:	f00c f9bc 	bl	800f854 <osDelay>
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 80034dc:	eddd 7a07 	vldr	s15, [sp, #28]
		tick_count += tick_update;
 80034e0:	443e      	add	r6, r7
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 80034e2:	eeb8 fb67 	vcvt.f64.u32	d15, s15
		float supply_voltage = adc_value[1] * (2.5 / 4096) * 2; // 3V3
 80034e6:	e9dd 8505 	ldrd	r8, r5, [sp, #20]
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 80034ea:	ee2f fb0a 	vmul.f64	d15, d15, d10
		double current1 = ((double) adc_value[3] * (2.5 / 4096.0)
				- (3.3 * 0.107)) / 0.264; // CURR1
		get_temp(adc_value[4]); // temp

		if ((adc_value[0] | adc_value[1]) == 0) {
 80034ee:	ea58 0305 	orrs.w	r3, r8, r5
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 80034f2:	ee2f fb0b 	vmul.f64	d15, d15, d11
 80034f6:	eeb7 fbcf 	vcvt.f32.f64	s30, d15
		double current1 = ((double) adc_value[3] * (2.5 / 4096.0)
 80034fa:	eddd fa08 	vldr	s31, [sp, #32]
		if ((adc_value[0] | adc_value[1]) == 0) {
 80034fe:	d107      	bne.n	8003510 <vTaskBattery+0x88>
			HAL_ADC_Stop_DMA(&hadc1);
 8003500:	4861      	ldr	r0, [pc, #388]	; (8003688 <vTaskBattery+0x200>)
 8003502:	f002 fc1c 	bl	8005d3e <HAL_ADC_Stop_DMA>
			HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 8003506:	2205      	movs	r2, #5
 8003508:	a905      	add	r1, sp, #20
 800350a:	485f      	ldr	r0, [pc, #380]	; (8003688 <vTaskBattery+0x200>)
 800350c:	f002 fb54 	bl	8005bb8 <HAL_ADC_Start_DMA>
		}
		// Filter adc values
		if (counter < 50) {
 8003510:	2c31      	cmp	r4, #49	; 0x31
 8003512:	dc2e      	bgt.n	8003572 <vTaskBattery+0xea>
		double current2 = ((double) adc_value[0] * (2.5 / 4096.0)
 8003514:	ee07 8a90 	vmov	s15, r8
			counter++;
 8003518:	3401      	adds	r4, #1
				- (3.3 * 0.107)) / 0.264; // CURR2
 800351a:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8003660 <vTaskBattery+0x1d8>
		double current2 = ((double) adc_value[0] * (2.5 / 4096.0)
 800351e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
				- (3.3 * 0.107)) / 0.264; // CURR2
 8003522:	eeb0 4b46 	vmov.f64	d4, d6
		double current2 = ((double) adc_value[0] * (2.5 / 4096.0)
 8003526:	ed9f 3b50 	vldr	d3, [pc, #320]	; 8003668 <vTaskBattery+0x1e0>
				- (3.3 * 0.107)) / 0.264; // CURR2
 800352a:	eea7 4b08 	vfma.f64	d4, d7, d8
		float supply_voltage = adc_value[1] * (2.5 / 4096) * 2; // 3V3
 800352e:	ee07 5a90 	vmov	s15, r5
 8003532:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003536:	ee27 7b08 	vmul.f64	d7, d7, d8
		double current2 = ((double) adc_value[0] * (2.5 / 4096.0)
 800353a:	ee84 5b03 	vdiv.f64	d5, d4, d3
		double current1 = ((double) adc_value[3] * (2.5 / 4096.0)
 800353e:	eeb8 4b6f 	vcvt.f64.u32	d4, s31
		float supply_voltage = adc_value[1] * (2.5 / 4096) * 2; // 3V3
 8003542:	ee37 7b07 	vadd.f64	d7, d7, d7
			curr += current1 + current2;
			supp += supply_voltage;
			bat += battery_voltage;
 8003546:	eeb7 facf 	vcvt.f64.f32	d15, s30
				- (3.3 * 0.107)) / 0.264; // CURR1
 800354a:	eea4 6b08 	vfma.f64	d6, d4, d8
		float supply_voltage = adc_value[1] * (2.5 / 4096) * 2; // 3V3
 800354e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			bat += battery_voltage;
 8003552:	ee3d db0f 	vadd.f64	d13, d13, d15
			supp += supply_voltage;
 8003556:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
		double current1 = ((double) adc_value[3] * (2.5 / 4096.0)
 800355a:	ee86 4b03 	vdiv.f64	d4, d6, d3
			supp += supply_voltage;
 800355e:	ee3c cb07 	vadd.f64	d12, d12, d7
			curr += current1 + current2;
 8003562:	ee35 5b04 	vadd.f64	d5, d5, d4
 8003566:	ee3e eb05 	vadd.f64	d14, d14, d5
				global_battery_data.current = battery_data.current;
				ReleaseMutex(&battery_mutex);
			}
		}
		/* Sleep */
		osDelayUntil(tick_count);
 800356a:	4630      	mov	r0, r6
 800356c:	f00c f98c 	bl	800f888 <osDelayUntil>
	for (;;) {
 8003570:	e7b4      	b.n	80034dc <vTaskBattery+0x54>
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 8003572:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8003670 <vTaskBattery+0x1e8>
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 8003576:	2232      	movs	r2, #50	; 0x32
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 8003578:	ee8e 7b06 	vdiv.f64	d7, d14, d6
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 800357c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8003678 <vTaskBattery+0x1f0>
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 8003580:	ee39 9b07 	vadd.f64	d9, d9, d7
			battery_data.consumption = (uint16_t) mah;
 8003584:	eefc 7bc9 	vcvt.u32.f64	s15, d9
 8003588:	ee17 3a90 	vmov	r3, s15
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 800358c:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8003680 <vTaskBattery+0x1f8>
			battery_data.consumption = (uint16_t) mah;
 8003590:	b29c      	uxth	r4, r3
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 8003592:	ee2e eb07 	vmul.f64	d14, d14, d7
			battery_data.consumption = (uint16_t) mah;
 8003596:	f8ad 400e 	strh.w	r4, [sp, #14]
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 800359a:	eefc 7bce 	vcvt.u32.f64	s15, d14
 800359e:	ee17 3a90 	vmov	r3, s15
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 80035a2:	ee8e 7b06 	vdiv.f64	d7, d14, d6
 80035a6:	eddf 6a39 	vldr	s13, [pc, #228]	; 800368c <vTaskBattery+0x204>
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 80035aa:	b29b      	uxth	r3, r3
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 80035ac:	ee8f 6a26 	vdiv.f32	s12, s30, s13
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 80035b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80035b4:	f8ad 300c 	strh.w	r3, [sp, #12]
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 80035b8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80035bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80035c0:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80035c4:	ee17 2a10 	vmov	r2, s14
			battery_data.supply = (uint16_t) (supp * 20);
 80035c8:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 80035cc:	b290      	uxth	r0, r2
			battery_data.supply = (uint16_t) (supp * 20);
 80035ce:	ee2c cb07 	vmul.f64	d12, d12, d7
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 80035d2:	f8ad 0010 	strh.w	r0, [sp, #16]
			battery_data.battery = (uint16_t) (bat * 20);
 80035d6:	ee2d db07 	vmul.f64	d13, d13, d7
			battery_data.supply = (uint16_t) (supp * 20);
 80035da:	eebc cbcc 	vcvt.u32.f64	s24, d12
			UsbPrint(
 80035de:	e9cd 4000 	strd	r4, r0, [sp]
			battery_data.battery = (uint16_t) (bat * 20);
 80035e2:	eebc dbcd 	vcvt.u32.f64	s26, d13
			battery_data.supply = (uint16_t) (supp * 20);
 80035e6:	ee1c 2a10 	vmov	r2, s24
			UsbPrint(
 80035ea:	4829      	ldr	r0, [pc, #164]	; (8003690 <vTaskBattery+0x208>)
			battery_data.supply = (uint16_t) (supp * 20);
 80035ec:	b291      	uxth	r1, r2
			battery_data.battery = (uint16_t) (bat * 20);
 80035ee:	ee1d 2a10 	vmov	r2, s26
			battery_data.supply = (uint16_t) (supp * 20);
 80035f2:	f8ad 1008 	strh.w	r1, [sp, #8]
			battery_data.battery = (uint16_t) (bat * 20);
 80035f6:	b292      	uxth	r2, r2
 80035f8:	f8ad 200a 	strh.w	r2, [sp, #10]
			UsbPrint(
 80035fc:	f7fe fd74 	bl	80020e8 <UsbPrint>
			logSensor(osKernelGetTickCount(), 1, BATTERY, &battery_data);
 8003600:	f00c f8ba 	bl	800f778 <osKernelGetTickCount>
 8003604:	ab02      	add	r3, sp, #8
 8003606:	2204      	movs	r2, #4
 8003608:	2101      	movs	r1, #1
 800360a:	f7fe fc43 	bl	8001e94 <logSensor>
			if (AcquireMutex(&battery_mutex) == osOK) {
 800360e:	4821      	ldr	r0, [pc, #132]	; (8003694 <vTaskBattery+0x20c>)
 8003610:	f7fe fbe1 	bl	8001dd6 <AcquireMutex>
 8003614:	4604      	mov	r4, r0
 8003616:	b998      	cbnz	r0, 8003640 <vTaskBattery+0x1b8>
				global_battery_data.battery = battery_data.battery;
 8003618:	4b1f      	ldr	r3, [pc, #124]	; (8003698 <vTaskBattery+0x210>)
 800361a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
				ReleaseMutex(&battery_mutex);
 800361e:	481d      	ldr	r0, [pc, #116]	; (8003694 <vTaskBattery+0x20c>)
				global_battery_data.battery = battery_data.battery;
 8003620:	801a      	strh	r2, [r3, #0]
				global_battery_data.consumption = battery_data.consumption;
 8003622:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8003626:	809a      	strh	r2, [r3, #4]
				global_battery_data.current = battery_data.current;
 8003628:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800362c:	805a      	strh	r2, [r3, #2]
				ReleaseMutex(&battery_mutex);
 800362e:	f7fe fbdd 	bl	8001dec <ReleaseMutex>
			bat = 0;
 8003632:	ed9f db05 	vldr	d13, [pc, #20]	; 8003648 <vTaskBattery+0x1c0>
			supp = 0;
 8003636:	eeb0 cb4d 	vmov.f64	d12, d13
			curr = 0;
 800363a:	eeb0 eb4d 	vmov.f64	d14, d13
 800363e:	e794      	b.n	800356a <vTaskBattery+0xe2>
			counter = 0;
 8003640:	2400      	movs	r4, #0
 8003642:	e7f6      	b.n	8003632 <vTaskBattery+0x1aa>
 8003644:	f3af 8000 	nop.w
	...
 8003654:	3f440000 	.word	0x3f440000
 8003658:	cccccccd 	.word	0xcccccccd
 800365c:	4014cccc 	.word	0x4014cccc
 8003660:	be0ded28 	.word	0xbe0ded28
 8003664:	bfd69930 	.word	0xbfd69930
 8003668:	4189374c 	.word	0x4189374c
 800366c:	3fd0e560 	.word	0x3fd0e560
 8003670:	00000000 	.word	0x00000000
 8003674:	40668000 	.word	0x40668000
 8003678:	00000000 	.word	0x00000000
 800367c:	40490000 	.word	0x40490000
 8003680:	00000000 	.word	0x00000000
 8003684:	408f4000 	.word	0x408f4000
 8003688:	2400ef70 	.word	0x2400ef70
 800368c:	42480000 	.word	0x42480000
 8003690:	08014dd8 	.word	0x08014dd8
 8003694:	2400aa1c 	.word	0x2400aa1c
 8003698:	2400ef68 	.word	0x2400ef68

0800369c <vTaskController>:

#include "tasks/task_controller.h"

/* Abbreviation 'aw' is used to described everything related to the antiwindup */

void vTaskController(void *argument) {
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	ed2d 8b02 	vpush	{d8}
 80036a2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
	/* For periodic update */
	uint32_t tick_count, tick_update;

	state_est_data_t state_est_data_local;
	flight_phase_detection_t current_flight_phase_detection = { 0 };
 80036a6:	2100      	movs	r1, #0

	/* Initialize the control_data struct */
	control_data_t control_data = { 0 };
 80036a8:	f44f 6284 	mov.w	r2, #1056	; 0x420

	osDelay(1100);

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 80036ac:	2564      	movs	r5, #100	; 0x64
	control_data_t control_data = { 0 };
 80036ae:	a812      	add	r0, sp, #72	; 0x48
	flight_phase_detection_t current_flight_phase_detection = { 0 };
 80036b0:	9102      	str	r1, [sp, #8]
		/* Update Sensor Fusion Variables */
		ReadMutex(&state_est_mutex, &state_est_data_global,
				&state_est_data_local, sizeof(state_est_data_local));

		control_data.sf_ref_altitude_AGL =
				((float) state_est_data_global.position_world[2]) / 1000;
 80036b2:	ed9f 8a34 	vldr	s16, [pc, #208]	; 8003784 <vTaskController+0xe8>
		ReadMutex(&state_est_mutex, &state_est_data_global,
 80036b6:	4e34      	ldr	r6, [pc, #208]	; (8003788 <vTaskController+0xec>)
 80036b8:	eef0 8a48 	vmov.f32	s17, s16
	flight_phase_detection_t current_flight_phase_detection = { 0 };
 80036bc:	e9cd 1100 	strd	r1, r1, [sp]
	control_data_t control_data = { 0 };
 80036c0:	f00f fac1 	bl	8012c46 <memset>
	control_data_init(&control_data);
 80036c4:	a812      	add	r0, sp, #72	; 0x48
 80036c6:	f7fd fb4d 	bl	8000d64 <control_data_init>
	osDelay(1100);
 80036ca:	f240 404c 	movw	r0, #1100	; 0x44c
 80036ce:	f00c f8c1 	bl	800f854 <osDelay>
	tick_count = osKernelGetTickCount();
 80036d2:	f00c f851 	bl	800f778 <osKernelGetTickCount>
 80036d6:	4604      	mov	r4, r0
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 80036d8:	f00c f862 	bl	800f7a0 <osKernelGetTickFreq>
 80036dc:	fbb0 f5f5 	udiv	r5, r0, r5
		ReadMutex(&state_est_mutex, &state_est_data_global,
 80036e0:	233c      	movs	r3, #60	; 0x3c
 80036e2:	aa03      	add	r2, sp, #12
 80036e4:	4928      	ldr	r1, [pc, #160]	; (8003788 <vTaskController+0xec>)
		tick_count += tick_update;
 80036e6:	442c      	add	r4, r5
		ReadMutex(&state_est_mutex, &state_est_data_global,
 80036e8:	4828      	ldr	r0, [pc, #160]	; (800378c <vTaskController+0xf0>)
 80036ea:	f7fe fb82 	bl	8001df2 <ReadMutex>
				((float) state_est_data_global.position_world[2]) / 1000;
 80036ee:	edd6 7a02 	vldr	s15, [r6, #8]
		control_data.sf_velocity =
				((float) state_est_data_global.velocity_world[2]) / 1000;

		/* Update flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 80036f2:	233c      	movs	r3, #60	; 0x3c
 80036f4:	466a      	mov	r2, sp
				((float) state_est_data_global.position_world[2]) / 1000;
 80036f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 80036fa:	4925      	ldr	r1, [pc, #148]	; (8003790 <vTaskController+0xf4>)
 80036fc:	4825      	ldr	r0, [pc, #148]	; (8003794 <vTaskController+0xf8>)
				((float) state_est_data_global.position_world[2]) / 1000;
 80036fe:	ee87 7a88 	vdiv.f32	s14, s15, s16
				((float) state_est_data_global.velocity_world[2]) / 1000;
 8003702:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
 8003706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		control_data.sf_ref_altitude_AGL =
 800370a:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
				((float) state_est_data_global.velocity_world[2]) / 1000;
 800370e:	ee87 7a88 	vdiv.f32	s14, s15, s16
		control_data.sf_velocity =
 8003712:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 8003716:	f7fe fb6c 	bl	8001df2 <ReadMutex>
				&current_flight_phase_detection, sizeof(state_est_data_local));

		/** MAKE SURE THE RIGHT CONTROLLER IS ACTIVE IS ACTIVE!!!!! **/
		if (LQR_ACTIVE) {
			compute_control_input(&control_data,
 800371a:	a812      	add	r0, sp, #72	; 0x48
 800371c:	4669      	mov	r1, sp
 800371e:	f7fd fbd7 	bl	8000ed0 <compute_control_input>
		} else {
			compute_test_control_input(&control_data);
		}

		/* Write Control Input into Global Variable */
		if (AcquireMutex(&controller_mutex) == osOK) {
 8003722:	481d      	ldr	r0, [pc, #116]	; (8003798 <vTaskController+0xfc>)
 8003724:	f7fe fb57 	bl	8001dd6 <AcquireMutex>
 8003728:	b958      	cbnz	r0, 8003742 <vTaskController+0xa6>
			controller_output_global = (int32_t) (control_data.control_input
					* 1000);
 800372a:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
			controller_output_global = (int32_t) (control_data.control_input
 800372e:	4b1b      	ldr	r3, [pc, #108]	; (800379c <vTaskController+0x100>)
					* 1000);
 8003730:	ee67 7a88 	vmul.f32	s15, s15, s16
			ReleaseMutex(&controller_mutex);
 8003734:	4818      	ldr	r0, [pc, #96]	; (8003798 <vTaskController+0xfc>)
			controller_output_global = (int32_t) (control_data.control_input
 8003736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800373a:	edc3 7a00 	vstr	s15, [r3]
			ReleaseMutex(&controller_mutex);
 800373e:	f7fe fb55 	bl	8001dec <ReleaseMutex>
		}

		/* Log to SD Card */
		logControllerOutput(osKernelGetTickCount(),
 8003742:	f00c f819 	bl	800f778 <osKernelGetTickCount>
				(int32_t) (control_data.control_input * 1000),
				(int32_t) (control_data.reference_error * 1000),
				(int32_t) (control_data.integrated_error * 1000));
 8003746:	eddd 6a14 	vldr	s13, [sp, #80]	; 0x50
				(int32_t) (control_data.reference_error * 1000),
 800374a:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
				(int32_t) (control_data.control_input * 1000),
 800374e:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
				(int32_t) (control_data.integrated_error * 1000));
 8003752:	ee66 6aa8 	vmul.f32	s13, s13, s17
				(int32_t) (control_data.reference_error * 1000),
 8003756:	ee27 7a28 	vmul.f32	s14, s14, s17
				(int32_t) (control_data.control_input * 1000),
 800375a:	ee67 7aa8 	vmul.f32	s15, s15, s17
		logControllerOutput(osKernelGetTickCount(),
 800375e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8003762:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800376a:	ee16 3a90 	vmov	r3, s13
 800376e:	ee17 2a10 	vmov	r2, s14
 8003772:	ee17 1a90 	vmov	r1, s15
 8003776:	f7fe fc6f 	bl	8002058 <logControllerOutput>

		/* Sleep */
		osDelayUntil(tick_count);
 800377a:	4620      	mov	r0, r4
 800377c:	f00c f884 	bl	800f888 <osDelayUntil>
		tick_count += tick_update;
 8003780:	e7ae      	b.n	80036e0 <vTaskController+0x44>
 8003782:	bf00      	nop
 8003784:	447a0000 	.word	0x447a0000
 8003788:	2400029c 	.word	0x2400029c
 800378c:	24017360 	.word	0x24017360
 8003790:	2400023c 	.word	0x2400023c
 8003794:	2400a98c 	.word	0x2400a98c
 8003798:	2400ef60 	.word	0x2400ef60
 800379c:	24000228 	.word	0x24000228

080037a0 <vTaskFsm>:
 *      Author: Jonas
 */

#include "tasks/task_fsm.h"

void vTaskFsm(void *argument) {
 80037a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037a4:	b09d      	sub	sp, #116	; 0x74
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 80037a6:	2500      	movs	r5, #0

	osDelay(1000);

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 80037a8:	2664      	movs	r6, #100	; 0x64
	while (1) {
		/* Tick Update */
		tick_count += tick_update;

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 80037aa:	4f31      	ldr	r7, [pc, #196]	; (8003870 <vTaskFsm+0xd0>)
	flight_phase_detection_t flight_phase_detection = { 0 };
 80037ac:	ac02      	add	r4, sp, #8
 80037ae:	9502      	str	r5, [sp, #8]
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 80037b0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8003888 <vTaskFsm+0xe8>
	reset_flight_phase_detection(&flight_phase_detection);
 80037b4:	4620      	mov	r0, r4
			reset_flight_phase_detection(&flight_phase_detection);
			telemetry_command = IDLE_COMMAND;
		}

		/* Update Local State Estimation Data */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm,
 80037b6:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800388c <vTaskFsm+0xec>
	flight_phase_detection_t flight_phase_detection = { 0 };
 80037ba:	e9c4 5501 	strd	r5, r5, [r4, #4]
	reset_flight_phase_detection(&flight_phase_detection);
 80037be:	f7fd fd9d 	bl	80012fc <reset_flight_phase_detection>
	state_est_data_t state_est_data_fsm = { 0 };
 80037c2:	4629      	mov	r1, r5
 80037c4:	223c      	movs	r2, #60	; 0x3c
 80037c6:	a80d      	add	r0, sp, #52	; 0x34
 80037c8:	f00f fa3d 	bl	8012c46 <memset>
	init_env(&dummy_env);
 80037cc:	a809      	add	r0, sp, #36	; 0x24
 80037ce:	f7fd fc3f 	bl	8001050 <init_env>
	init_env(&environment);
 80037d2:	a805      	add	r0, sp, #20
 80037d4:	f7fd fc3c 	bl	8001050 <init_env>
	command_e telemetry_command = IDLE_COMMAND;
 80037d8:	239b      	movs	r3, #155	; 0x9b
	osDelay(1000);
 80037da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	command_e telemetry_command = IDLE_COMMAND;
 80037de:	f88d 3007 	strb.w	r3, [sp, #7]
	osDelay(1000);
 80037e2:	f00c f837 	bl	800f854 <osDelay>
	tick_count = osKernelGetTickCount();
 80037e6:	f00b ffc7 	bl	800f778 <osKernelGetTickCount>
 80037ea:	4605      	mov	r5, r0
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 80037ec:	f00b ffd8 	bl	800f7a0 <osKernelGetTickFreq>
 80037f0:	fbb0 f6f6 	udiv	r6, r0, r6
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 80037f4:	2301      	movs	r3, #1
 80037f6:	f10d 0207 	add.w	r2, sp, #7
 80037fa:	4639      	mov	r1, r7
 80037fc:	4640      	mov	r0, r8
 80037fe:	f7fe faf8 	bl	8001df2 <ReadMutex>
		if (telemetry_command == CALIBRATE_SENSORS
 8003802:	f89d 3007 	ldrb.w	r3, [sp, #7]
		tick_count += tick_update;
 8003806:	4435      	add	r5, r6
		if (telemetry_command == CALIBRATE_SENSORS
 8003808:	2b49      	cmp	r3, #73	; 0x49
 800380a:	d109      	bne.n	8003820 <vTaskFsm+0x80>
				&& flight_phase_detection.flight_phase == IDLE) {
 800380c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d105      	bne.n	8003820 <vTaskFsm+0x80>
			reset_flight_phase_detection(&flight_phase_detection);
 8003814:	4620      	mov	r0, r4
 8003816:	f7fd fd71 	bl	80012fc <reset_flight_phase_detection>
			telemetry_command = IDLE_COMMAND;
 800381a:	239b      	movs	r3, #155	; 0x9b
 800381c:	f88d 3007 	strb.w	r3, [sp, #7]
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm,
 8003820:	233c      	movs	r3, #60	; 0x3c
 8003822:	aa0d      	add	r2, sp, #52	; 0x34
 8003824:	4649      	mov	r1, r9
 8003826:	4813      	ldr	r0, [pc, #76]	; (8003874 <vTaskFsm+0xd4>)
 8003828:	f7fe fae3 	bl	8001df2 <ReadMutex>
				sizeof(state_est_data_global));

		/* Update Local Environment Data */
		ReadMutex(&env_mutex, &global_env, &environment, sizeof(global_env));
 800382c:	2310      	movs	r3, #16
 800382e:	aa05      	add	r2, sp, #20
 8003830:	4911      	ldr	r1, [pc, #68]	; (8003878 <vTaskFsm+0xd8>)
 8003832:	4812      	ldr	r0, [pc, #72]	; (800387c <vTaskFsm+0xdc>)
 8003834:	f7fe fadd 	bl	8001df2 <ReadMutex>

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm,
 8003838:	4620      	mov	r0, r4
 800383a:	aa05      	add	r2, sp, #20
 800383c:	a90d      	add	r1, sp, #52	; 0x34
 800383e:	f7fd fcd3 	bl	80011e8 <detect_flight_phase>
				&environment);

		/* Write updated flight Phase detection */
		if (AcquireMutex(&fsm_mutex) == osOK) {
 8003842:	480f      	ldr	r0, [pc, #60]	; (8003880 <vTaskFsm+0xe0>)
 8003844:	f7fe fac7 	bl	8001dd6 <AcquireMutex>
 8003848:	b938      	cbnz	r0, 800385a <vTaskFsm+0xba>
			global_flight_phase_detection = flight_phase_detection;
 800384a:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <vTaskFsm+0xe4>)
 800384c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003850:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			ReleaseMutex(&fsm_mutex);
 8003854:	480a      	ldr	r0, [pc, #40]	; (8003880 <vTaskFsm+0xe0>)
 8003856:	f7fe fac9 	bl	8001dec <ReleaseMutex>
		}

		logRocketState(osKernelGetTickCount(), flight_phase_detection);
 800385a:	f00b ff8d 	bl	800f778 <osKernelGetTickCount>
 800385e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003862:	f7fe fba9 	bl	8001fb8 <logRocketState>

		/* Sleep */
		osDelayUntil(tick_count);
 8003866:	4628      	mov	r0, r5
 8003868:	f00c f80e 	bl	800f888 <osDelayUntil>
		tick_count += tick_update;
 800386c:	e7c2      	b.n	80037f4 <vTaskFsm+0x54>
 800386e:	bf00      	nop
 8003870:	2401738c 	.word	0x2401738c
 8003874:	24017360 	.word	0x24017360
 8003878:	2400022c 	.word	0x2400022c
 800387c:	2400cecc 	.word	0x2400cecc
 8003880:	2400a98c 	.word	0x2400a98c
 8003884:	2400023c 	.word	0x2400023c
 8003888:	2400cec4 	.word	0x2400cec4
 800388c:	2400029c 	.word	0x2400029c

08003890 <vTaskGps>:
 *      Author: Luca Jost
 */

#include "tasks/task_gps.h"

void vTaskGps(void *argument) {
 8003890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003894:	b0b3      	sub	sp, #204	; 0xcc

	UBLOX GPS1 = { 0, &huart1 };
 8003896:	222c      	movs	r2, #44	; 0x2c
 8003898:	2100      	movs	r1, #0
	UBLOX GPS2 = { 1, &huart2 };
 800389a:	2401      	movs	r4, #1
	UBLOX GPS1 = { 0, &huart1 };
 800389c:	a811      	add	r0, sp, #68	; 0x44
	UBLOX GPS3 = { 2, &huart3 };

	int timeout_counter1 = 0;
	int timeout_counter2 = 0;
	int timeout_counter3 = 0;
 800389e:	2500      	movs	r5, #0
	UBLOX GPS1 = { 0, &huart1 };
 80038a0:	f00f f9d1 	bl	8012c46 <memset>
 80038a4:	4b80      	ldr	r3, [pc, #512]	; (8003aa8 <vTaskGps+0x218>)
	UBLOX GPS2 = { 1, &huart2 };
 80038a6:	222c      	movs	r2, #44	; 0x2c
 80038a8:	2100      	movs	r1, #0
 80038aa:	a81c      	add	r0, sp, #112	; 0x70
	UBLOX GPS1 = { 0, &huart1 };
 80038ac:	9312      	str	r3, [sp, #72]	; 0x48
	UBLOX GPS2 = { 1, &huart2 };
 80038ae:	f00f f9ca 	bl	8012c46 <memset>
 80038b2:	4b7e      	ldr	r3, [pc, #504]	; (8003aac <vTaskGps+0x21c>)
	UBLOX GPS3 = { 2, &huart3 };
 80038b4:	222c      	movs	r2, #44	; 0x2c
 80038b6:	2100      	movs	r1, #0
 80038b8:	a827      	add	r0, sp, #156	; 0x9c
	UBLOX GPS2 = { 1, &huart2 };
 80038ba:	931d      	str	r3, [sp, #116]	; 0x74
 80038bc:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
	UBLOX GPS3 = { 2, &huart3 };
 80038c0:	f00f f9c1 	bl	8012c46 <memset>
 80038c4:	2302      	movs	r3, #2
	int timeout_counter2 = 0;
 80038c6:	462f      	mov	r7, r5
	int timeout_counter1 = 0;
 80038c8:	462e      	mov	r6, r5
				gps_reset(&GPS3);
				timeout_counter3 = 0;
			}
		}

		UsbPrint(
 80038ca:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 8003abc <vTaskGps+0x22c>
	UBLOX GPS3 = { 2, &huart3 };
 80038ce:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
 80038d2:	4b77      	ldr	r3, [pc, #476]	; (8003ab0 <vTaskGps+0x220>)
				"[GPS1] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
				GPS1.data.hour, GPS1.data.minute, GPS1.data.second,
				GPS1.data.lat_deg, GPS1.data.lat_decimal, GPS1.data.lon_deg,
				GPS1.data.lon_decimal, GPS1.data.satellite, GPS1.data.altitude);

		UsbPrint(
 80038d4:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8003ac0 <vTaskGps+0x230>
	UBLOX GPS3 = { 2, &huart3 };
 80038d8:	9328      	str	r3, [sp, #160]	; 0xa0
	tick_count = osKernelGetTickCount();
 80038da:	f00b ff4d 	bl	800f778 <osKernelGetTickCount>
 80038de:	4680      	mov	r8, r0
	tick_update = osKernelGetTickFreq() / GPS_SAMPLE_RATE;
 80038e0:	f00b ff5e 	bl	800f7a0 <osKernelGetTickFreq>
 80038e4:	fa20 f904 	lsr.w	r9, r0, r4
	osDelay(600);
 80038e8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80038ec:	f00b ffb2 	bl	800f854 <osDelay>
	gps_dma_init(&GPS1);
 80038f0:	a811      	add	r0, sp, #68	; 0x44
 80038f2:	f7fd f9b1 	bl	8000c58 <gps_dma_init>
	gps_dma_init(&GPS2);
 80038f6:	a81c      	add	r0, sp, #112	; 0x70
 80038f8:	f7fd f9ae 	bl	8000c58 <gps_dma_init>
	gps_dma_init(&GPS3);
 80038fc:	a827      	add	r0, sp, #156	; 0x9c
 80038fe:	f7fd f9ab 	bl	8000c58 <gps_dma_init>
		if (gps_read_sensor(&GPS1)) {
 8003902:	a811      	add	r0, sp, #68	; 0x44
		tick_count += tick_update;
 8003904:	44c8      	add	r8, r9
		if (gps_read_sensor(&GPS1)) {
 8003906:	f7fd f9bd 	bl	8000c84 <gps_read_sensor>
 800390a:	b930      	cbnz	r0, 800391a <vTaskGps+0x8a>
			timeout_counter1++;
 800390c:	3601      	adds	r6, #1
			if (timeout_counter1 == 10) {
 800390e:	2e0a      	cmp	r6, #10
 8003910:	d104      	bne.n	800391c <vTaskGps+0x8c>
 8003912:	9007      	str	r0, [sp, #28]
				gps_reset(&GPS1);
 8003914:	a811      	add	r0, sp, #68	; 0x44
 8003916:	f7fd f9db 	bl	8000cd0 <gps_reset>
			timeout_counter1 = 0;
 800391a:	2600      	movs	r6, #0
		if (gps_read_sensor(&GPS2)) {
 800391c:	a81c      	add	r0, sp, #112	; 0x70
 800391e:	f7fd f9b1 	bl	8000c84 <gps_read_sensor>
 8003922:	b930      	cbnz	r0, 8003932 <vTaskGps+0xa2>
			timeout_counter2++;
 8003924:	3701      	adds	r7, #1
			if (timeout_counter2 == 10) {
 8003926:	2f0a      	cmp	r7, #10
 8003928:	d104      	bne.n	8003934 <vTaskGps+0xa4>
 800392a:	9007      	str	r0, [sp, #28]
				gps_reset(&GPS2);
 800392c:	a81c      	add	r0, sp, #112	; 0x70
 800392e:	f7fd f9cf 	bl	8000cd0 <gps_reset>
			timeout_counter2 = 0;
 8003932:	2700      	movs	r7, #0
		if (gps_read_sensor(&GPS3)) {
 8003934:	a827      	add	r0, sp, #156	; 0x9c
 8003936:	f7fd f9a5 	bl	8000c84 <gps_read_sensor>
 800393a:	b930      	cbnz	r0, 800394a <vTaskGps+0xba>
			timeout_counter3++;
 800393c:	3501      	adds	r5, #1
			if (timeout_counter3 == 10) {
 800393e:	2d0a      	cmp	r5, #10
 8003940:	d104      	bne.n	800394c <vTaskGps+0xbc>
 8003942:	9007      	str	r0, [sp, #28]
				gps_reset(&GPS3);
 8003944:	a827      	add	r0, sp, #156	; 0x9c
 8003946:	f7fd f9c3 	bl	8000cd0 <gps_reset>
			timeout_counter3 = 0;
 800394a:	2500      	movs	r5, #0
		UsbPrint(
 800394c:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8003950:	4650      	mov	r0, sl
 8003952:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003954:	9305      	str	r3, [sp, #20]
 8003956:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800395a:	9304      	str	r3, [sp, #16]
 800395c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800395e:	9303      	str	r3, [sp, #12]
 8003960:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8003964:	9302      	str	r3, [sp, #8]
 8003966:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003968:	9301      	str	r3, [sp, #4]
 800396a:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003974:	f7fe fbb8 	bl	80020e8 <UsbPrint>
		UsbPrint(
 8003978:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800397c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800397e:	4658      	mov	r0, fp
 8003980:	9305      	str	r3, [sp, #20]
 8003982:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8003986:	9304      	str	r3, [sp, #16]
 8003988:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800398a:	9303      	str	r3, [sp, #12]
 800398c:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
 8003990:	9302      	str	r3, [sp, #8]
 8003992:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	f89d 3085 	ldrb.w	r3, [sp, #133]	; 0x85
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 80039a0:	f7fe fba2 	bl	80020e8 <UsbPrint>
				"[GPS2] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d Alt: %d\n",
				GPS2.data.hour, GPS2.data.minute, GPS2.data.second,
				GPS2.data.lat_deg, GPS2.data.lat_decimal, GPS2.data.lon_deg,
				GPS2.data.lon_decimal, GPS2.data.satellite, GPS2.data.altitude);

		UsbPrint(
 80039a4:	f8bd 30c4 	ldrh.w	r3, [sp, #196]	; 0xc4
 80039a8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80039aa:	9305      	str	r3, [sp, #20]
 80039ac:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 80039b0:	4840      	ldr	r0, [pc, #256]	; (8003ab4 <vTaskGps+0x224>)
 80039b2:	9304      	str	r3, [sp, #16]
 80039b4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80039b6:	9303      	str	r3, [sp, #12]
 80039b8:	f89d 30b8 	ldrb.w	r3, [sp, #184]	; 0xb8
 80039bc:	9302      	str	r3, [sp, #8]
 80039be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	f89d 30b1 	ldrb.w	r3, [sp, #177]	; 0xb1
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 80039cc:	f7fe fb8c 	bl	80020e8 <UsbPrint>
				GPS3.data.hour, GPS3.data.minute, GPS3.data.second,
				GPS3.data.lat_deg, GPS3.data.lat_decimal, GPS3.data.lon_deg,
				GPS3.data.lon_decimal, GPS3.data.satellite, GPS3.data.altitude);

		/* Write GPS to Log */
		logSensor(osKernelGetTickCount(), 1, GPS, &GPS1.data);
 80039d0:	f00b fed2 	bl	800f778 <osKernelGetTickCount>
 80039d4:	ab13      	add	r3, sp, #76	; 0x4c
 80039d6:	2203      	movs	r2, #3
 80039d8:	2101      	movs	r1, #1
 80039da:	f7fe fa5b 	bl	8001e94 <logSensor>
		logSensor(osKernelGetTickCount(), 2, GPS, &GPS2.data);
 80039de:	f00b fecb 	bl	800f778 <osKernelGetTickCount>
 80039e2:	ab1e      	add	r3, sp, #120	; 0x78
 80039e4:	2203      	movs	r2, #3
 80039e6:	2102      	movs	r1, #2
 80039e8:	f7fe fa54 	bl	8001e94 <logSensor>
		logSensor(osKernelGetTickCount(), 3, GPS, &GPS3.data);
 80039ec:	f00b fec4 	bl	800f778 <osKernelGetTickCount>
 80039f0:	2203      	movs	r2, #3
 80039f2:	ab29      	add	r3, sp, #164	; 0xa4
 80039f4:	4611      	mov	r1, r2
 80039f6:	f7fe fa4d 	bl	8001e94 <logSensor>

		/* get best possible GPS for Telemetry */

		if (GPS1.data.satellite >= GPS2.data.satellite) {
 80039fa:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 80039fe:	f89d 1084 	ldrb.w	r1, [sp, #132]	; 0x84
 8003a02:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8003a06:	428a      	cmp	r2, r1
 8003a08:	d30f      	bcc.n	8003a2a <vTaskGps+0x19a>
			if (GPS1.data.satellite >= GPS3.data.satellite) {
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d913      	bls.n	8003a36 <vTaskGps+0x1a6>
//			gps_telemetry.lat_decimal = GPS2.data.lat_decimal;
//			gps_telemetry.lon_deg = GPS2.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS2.data.lon_decimal;
//			gps_telemetry.satellite = GPS2.data.satellite;
		} else {
			gps_telemetry = GPS3.data;
 8003a0e:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
 8003a12:	ac08      	add	r4, sp, #32
 8003a14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a20:	f8dc 3000 	ldr.w	r3, [ip]
 8003a24:	6023      	str	r3, [r4, #0]
 8003a26:	2403      	movs	r4, #3
 8003a28:	e012      	b.n	8003a50 <vTaskGps+0x1c0>
		} else if (GPS2.data.satellite >= GPS3.data.satellite) {
 8003a2a:	4299      	cmp	r1, r3
 8003a2c:	d22d      	bcs.n	8003a8a <vTaskGps+0x1fa>
		} else if (GPS3.data.satellite >= GPS1.data.satellite) {
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d9ed      	bls.n	8003a0e <vTaskGps+0x17e>
		if (choose_GPS == 1) {
 8003a32:	2c01      	cmp	r4, #1
 8003a34:	d127      	bne.n	8003a86 <vTaskGps+0x1f6>
			gps_telemetry = GPS1.data;
 8003a36:	ac13      	add	r4, sp, #76	; 0x4c
 8003a38:	f10d 0c20 	add.w	ip, sp, #32
 8003a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	2401      	movs	r4, #1
 8003a4c:	f8cc 3000 	str.w	r3, [ip]
//			gps_telemetry.lon_deg = GPS3.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS3.data.lon_decimal;
//			gps_telemetry.satellite = GPS3.data.satellite;
		}

		if (AcquireMutex(&gps_mutex) == osOK) {
 8003a50:	4819      	ldr	r0, [pc, #100]	; (8003ab8 <vTaskGps+0x228>)
 8003a52:	f7fe f9c0 	bl	8001dd6 <AcquireMutex>
 8003a56:	b990      	cbnz	r0, 8003a7e <vTaskGps+0x1ee>
			globalGPS = gps_telemetry;
 8003a58:	f10d 0e20 	add.w	lr, sp, #32
 8003a5c:	f8df c064 	ldr.w	ip, [pc, #100]	; 8003ac4 <vTaskGps+0x234>
 8003a60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003a64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a68:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003a6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a70:	f8de 3000 	ldr.w	r3, [lr]
			ReleaseMutex(&gps_mutex);
 8003a74:	4810      	ldr	r0, [pc, #64]	; (8003ab8 <vTaskGps+0x228>)
			globalGPS = gps_telemetry;
 8003a76:	f8cc 3000 	str.w	r3, [ip]
			ReleaseMutex(&gps_mutex);
 8003a7a:	f7fe f9b7 	bl	8001dec <ReleaseMutex>
		}
		/* Sleep */
		osDelayUntil(tick_count);
 8003a7e:	4640      	mov	r0, r8
 8003a80:	f00b ff02 	bl	800f888 <osDelayUntil>
		tick_count += tick_update;
 8003a84:	e73d      	b.n	8003902 <vTaskGps+0x72>
		} else if (choose_GPS == 2) {
 8003a86:	2c02      	cmp	r4, #2
 8003a88:	d1c1      	bne.n	8003a0e <vTaskGps+0x17e>
			gps_telemetry = GPS2.data;
 8003a8a:	ac1e      	add	r4, sp, #120	; 0x78
 8003a8c:	f10d 0c20 	add.w	ip, sp, #32
 8003a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	2402      	movs	r4, #2
 8003aa0:	f8cc 3000 	str.w	r3, [ip]
 8003aa4:	e7d4      	b.n	8003a50 <vTaskGps+0x1c0>
 8003aa6:	bf00      	nop
 8003aa8:	24011138 	.word	0x24011138
 8003aac:	2401d5dc 	.word	0x2401d5dc
 8003ab0:	2400ab30 	.word	0x2400ab30
 8003ab4:	08014ea9 	.word	0x08014ea9
 8003ab8:	2401b3f4 	.word	0x2401b3f4
 8003abc:	08014e28 	.word	0x08014e28
 8003ac0:	08014e69 	.word	0x08014e69
 8003ac4:	24017368 	.word	0x24017368

08003ac8 <testairbrakes>:

		osDelayUntil(tick_count);
	}
}

void testairbrakes(int32_t position) {
 8003ac8:	b508      	push	{r3, lr}
	MoveToPositionPPM(position);
 8003aca:	f7fc fe9b 	bl	8000804 <MoveToPositionPPM>
	osDelay(100);
 8003ace:	2064      	movs	r0, #100	; 0x64
 8003ad0:	f00b fec0 	bl	800f854 <osDelay>
	MoveToPositionPPM(2);
 8003ad4:	2002      	movs	r0, #2
}
 8003ad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MoveToPositionPPM(2);
 8003ada:	f7fc be93 	b.w	8000804 <MoveToPositionPPM>
	...

08003ae0 <vTaskMotorCont>:
void vTaskMotorCont(void *argument) {
 8003ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	command_e telemetry_command = IDLE_COMMAND;
 8003ae4:	239b      	movs	r3, #155	; 0x9b
void vTaskMotorCont(void *argument) {
 8003ae6:	b086      	sub	sp, #24
	flight_phase_detection_t flight_phase_detection = { 0 };
 8003ae8:	2400      	movs	r4, #0
	osDelay(3000);
 8003aea:	f640 30b8 	movw	r0, #3000	; 0xbb8
	command_e telemetry_command = IDLE_COMMAND;
 8003aee:	f88d 3003 	strb.w	r3, [sp, #3]
	flight_phase_detection.flight_phase = IDLE;
 8003af2:	2301      	movs	r3, #1
	flight_phase_detection_t flight_phase_detection = { 0 };
 8003af4:	9403      	str	r4, [sp, #12]
	flight_phase_detection.flight_phase = IDLE;
 8003af6:	f88d 300c 	strb.w	r3, [sp, #12]
	flight_phase_detection.mach_number = SUBSONIC;
 8003afa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	flight_phase_detection_t flight_phase_detection = { 0 };
 8003afe:	9405      	str	r4, [sp, #20]
	flight_phase_detection.mach_number = SUBSONIC;
 8003b00:	9304      	str	r3, [sp, #16]
	osDelay(3000);
 8003b02:	f00b fea7 	bl	800f854 <osDelay>
	int32_t measured_motor_position = 0;
 8003b06:	e9cd 4401 	strd	r4, r4, [sp, #4]
	while (EnableMotor() != osOK) {
 8003b0a:	f7fc ff45 	bl	8000998 <EnableMotor>
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	f040 8092 	bne.w	8003c38 <vTaskMotorCont+0x158>
	SetPositionMode(position_mode);
 8003b14:	2001      	movs	r0, #1
 8003b16:	f7fc fe60 	bl	80007da <SetPositionMode>
	while (SetPositionMode(position_mode) != osOK) {
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	f7fc fe5d 	bl	80007da <SetPositionMode>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	f040 808e 	bne.w	8003c42 <vTaskMotorCont+0x162>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration,
 8003b26:	4a49      	ldr	r2, [pc, #292]	; (8003c4c <vTaskMotorCont+0x16c>)
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 8003b28:	2619      	movs	r6, #25
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration,
 8003b2a:	f242 7010 	movw	r0, #10000	; 0x2710
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 8003b2e:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8003c70 <vTaskMotorCont+0x190>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration,
 8003b32:	4611      	mov	r1, r2
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 8003b34:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8003c74 <vTaskMotorCont+0x194>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration,
 8003b38:	f7fc fe92 	bl	8000860 <ConfigurePPM>
		UsbPrint("[MOTOR] Read Position:%d\n", measured_motor_position);
 8003b3c:	f8df a138 	ldr.w	sl, [pc, #312]	; 8003c78 <vTaskMotorCont+0x198>
	tick_count = osKernelGetTickCount();
 8003b40:	f00b fe1a 	bl	800f778 <osKernelGetTickCount>
 8003b44:	4605      	mov	r5, r0
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 8003b46:	f00b fe2b 	bl	800f7a0 <osKernelGetTickFreq>
 8003b4a:	fbb0 f6f6 	udiv	r6, r0, r6
		motor_status = GetPosition(&measured_motor_position);
 8003b4e:	a802      	add	r0, sp, #8
		tick_count += tick_update;
 8003b50:	4435      	add	r5, r6
		motor_status = GetPosition(&measured_motor_position);
 8003b52:	f7fc ff4c 	bl	80009ee <GetPosition>
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 8003b56:	2301      	movs	r3, #1
 8003b58:	f10d 0203 	add.w	r2, sp, #3
 8003b5c:	4641      	mov	r1, r8
 8003b5e:	4648      	mov	r0, r9
 8003b60:	f7fe f947 	bl	8001df2 <ReadMutex>
		UsbPrint("[MOTOR] Read Position:%d\n", measured_motor_position);
 8003b64:	9902      	ldr	r1, [sp, #8]
 8003b66:	4650      	mov	r0, sl
 8003b68:	f7fe fabe 	bl	80020e8 <UsbPrint>
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 8003b6c:	230c      	movs	r3, #12
 8003b6e:	4938      	ldr	r1, [pc, #224]	; (8003c50 <vTaskMotorCont+0x170>)
 8003b70:	eb0d 0203 	add.w	r2, sp, r3
 8003b74:	4837      	ldr	r0, [pc, #220]	; (8003c54 <vTaskMotorCont+0x174>)
 8003b76:	f7fe f93c 	bl	8001df2 <ReadMutex>
		ReadMutex(&controller_mutex, &controller_output_global,
 8003b7a:	2304      	movs	r3, #4
 8003b7c:	4936      	ldr	r1, [pc, #216]	; (8003c58 <vTaskMotorCont+0x178>)
 8003b7e:	eb0d 0203 	add.w	r2, sp, r3
 8003b82:	4836      	ldr	r0, [pc, #216]	; (8003c5c <vTaskMotorCont+0x17c>)
 8003b84:	f7fe f935 	bl	8001df2 <ReadMutex>
		desired_motor_position = (int32_t) (((float) controller_actuation)
 8003b88:	eddd 7a01 	vldr	s15, [sp, #4]
				/ 1000 * (-150));
 8003b8c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8003c60 <vTaskMotorCont+0x180>
 8003b90:	f06f 0395 	mvn.w	r3, #149	; 0x95
		desired_motor_position = (int32_t) (((float) controller_actuation)
 8003b94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
				/ 1000 * (-150));
 8003b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b9c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003c64 <vTaskMotorCont+0x184>
 8003ba0:	ee67 7a87 	vmul.f32	s15, s15, s14
		desired_motor_position = (int32_t) (((float) controller_actuation)
 8003ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ba8:	ee17 1a90 	vmov	r1, s15
 8003bac:	4299      	cmp	r1, r3
 8003bae:	bfb8      	it	lt
 8003bb0:	4619      	movlt	r1, r3
		if (flight_phase_detection.flight_phase == COASTING) {
 8003bb2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003bb6:	2902      	cmp	r1, #2
 8003bb8:	bfa8      	it	ge
 8003bba:	2102      	movge	r1, #2
 8003bbc:	2b04      	cmp	r3, #4
			motor_status = MoveToPositionPPM(desired_motor_position);
 8003bbe:	bf0c      	ite	eq
 8003bc0:	4608      	moveq	r0, r1
			motor_status = MoveToPositionPPM(2);
 8003bc2:	2002      	movne	r0, #2
 8003bc4:	460c      	mov	r4, r1
 8003bc6:	f7fc fe1d 	bl	8000804 <MoveToPositionPPM>
		if (flight_phase_detection.flight_phase == IDLE
 8003bca:	f89d 300c 	ldrb.w	r3, [sp, #12]
			motor_status = MoveToPositionPPM(2);
 8003bce:	4607      	mov	r7, r0
		if (flight_phase_detection.flight_phase == IDLE
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d110      	bne.n	8003bf6 <vTaskMotorCont+0x116>
				&& telemetry_command == AIRBRAKE_TEST_COMMAND
 8003bd4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003bd8:	2bd9      	cmp	r3, #217	; 0xd9
 8003bda:	d10c      	bne.n	8003bf6 <vTaskMotorCont+0x116>
				&& osKernelGetTickCount() < 60000) {
 8003bdc:	f00b fdcc 	bl	800f778 <osKernelGetTickCount>
 8003be0:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8003be4:	4298      	cmp	r0, r3
 8003be6:	d806      	bhi.n	8003bf6 <vTaskMotorCont+0x116>
			testairbrakes(-140);
 8003be8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 8003bec:	f7ff ff6c 	bl	8003ac8 <testairbrakes>
			telemetry_command = IDLE_COMMAND;
 8003bf0:	239b      	movs	r3, #155	; 0x9b
 8003bf2:	f88d 3003 	strb.w	r3, [sp, #3]
		logMotor(osKernelGetTickCount(), desired_motor_position,
 8003bf6:	f00b fdbf 	bl	800f778 <osKernelGetTickCount>
 8003bfa:	9a02      	ldr	r2, [sp, #8]
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	f7fe fa51 	bl	80020a4 <logMotor>
		if (motor_status != osOK
 8003c02:	b15f      	cbz	r7, 8003c1c <vTaskMotorCont+0x13c>
				&& flight_phase_detection.flight_phase == IDLE) {
 8003c04:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d107      	bne.n	8003c1c <vTaskMotorCont+0x13c>
			DisableMotor();
 8003c0c:	f7fc fdd4 	bl	80007b8 <DisableMotor>
			osDelay(1000);
 8003c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c14:	f00b fe1e 	bl	800f854 <osDelay>
			EnableMotor();
 8003c18:	f7fc febe 	bl	8000998 <EnableMotor>
		if (AcquireMutex(&motor_mutex) == osOK) {
 8003c1c:	4812      	ldr	r0, [pc, #72]	; (8003c68 <vTaskMotorCont+0x188>)
 8003c1e:	f7fe f8da 	bl	8001dd6 <AcquireMutex>
 8003c22:	b928      	cbnz	r0, 8003c30 <vTaskMotorCont+0x150>
			global_airbrake_extension = measured_motor_position;
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <vTaskMotorCont+0x18c>)
 8003c26:	9a02      	ldr	r2, [sp, #8]
			ReleaseMutex(&motor_mutex);
 8003c28:	480f      	ldr	r0, [pc, #60]	; (8003c68 <vTaskMotorCont+0x188>)
			global_airbrake_extension = measured_motor_position;
 8003c2a:	601a      	str	r2, [r3, #0]
			ReleaseMutex(&motor_mutex);
 8003c2c:	f7fe f8de 	bl	8001dec <ReleaseMutex>
		osDelayUntil(tick_count);
 8003c30:	4628      	mov	r0, r5
 8003c32:	f00b fe29 	bl	800f888 <osDelayUntil>
		tick_count += tick_update;
 8003c36:	e78a      	b.n	8003b4e <vTaskMotorCont+0x6e>
		osDelay(1000);
 8003c38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c3c:	f00b fe0a 	bl	800f854 <osDelay>
 8003c40:	e763      	b.n	8003b0a <vTaskMotorCont+0x2a>
		osDelay(1000);
 8003c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c46:	f00b fe05 	bl	800f854 <osDelay>
 8003c4a:	e766      	b.n	8003b1a <vTaskMotorCont+0x3a>
 8003c4c:	000186a0 	.word	0x000186a0
 8003c50:	2400023c 	.word	0x2400023c
 8003c54:	2400a98c 	.word	0x2400a98c
 8003c58:	24000228 	.word	0x24000228
 8003c5c:	2400ef60 	.word	0x2400ef60
 8003c60:	447a0000 	.word	0x447a0000
 8003c64:	c3160000 	.word	0xc3160000
 8003c68:	2400ab28 	.word	0x2400ab28
 8003c6c:	2401b4e8 	.word	0x2401b4e8
 8003c70:	2401738c 	.word	0x2401738c
 8003c74:	2400cec4 	.word	0x2400cec4
 8003c78:	08014eea 	.word	0x08014eea

08003c7c <vTaskPeripherals>:
 *      Author: Jonas
 */

#include "tasks/task_peripherals.h"

void vTaskPeripherals(void *argument) {
 8003c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* For periodic update */
	uint32_t tick_count, tick_update;

	osDelay(1200);
 8003c80:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
void vTaskPeripherals(void *argument) {
 8003c84:	b087      	sub	sp, #28
	osDelay(1200);
 8003c86:	f00b fde5 	bl	800f854 <osDelay>
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	4860      	ldr	r0, [pc, #384]	; (8003e10 <vTaskPeripherals+0x194>)

	/* Telemetry Command */
	command_e telemetry_command = IDLE_COMMAND;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 8003c90:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 8003c92:	f003 fda1 	bl	80077d8 <HAL_GPIO_WritePin>
	command_e telemetry_command = IDLE_COMMAND;
 8003c96:	239b      	movs	r3, #155	; 0x9b
	reset_flight_phase_detection(&flight_phase_detection);
 8003c98:	a803      	add	r0, sp, #12
	flight_phase_detection_t flight_phase_detection = { 0 };
 8003c9a:	9405      	str	r4, [sp, #20]
	bool buzzer_on_telemetry = false;
 8003c9c:	46a2      	mov	sl, r4
	command_e telemetry_command = IDLE_COMMAND;
 8003c9e:	f88d 300b 	strb.w	r3, [sp, #11]
	bool buzzer_on_fsm = false;
 8003ca2:	46a1      	mov	r9, r4
	bool camera_ready = false;
 8003ca4:	4627      	mov	r7, r4
	bool camera_wait = false;
 8003ca6:	4626      	mov	r6, r4
	uint32_t camera_counter = 0;
 8003ca8:	4625      	mov	r5, r4
	flight_phase_detection_t flight_phase_detection = { 0 };
 8003caa:	e9cd 4403 	strd	r4, r4, [sp, #12]
	reset_flight_phase_detection(&flight_phase_detection);
 8003cae:	f7fd fb25 	bl	80012fc <reset_flight_phase_detection>

	/* Infinite loop */

	tick_update = osKernelGetTickFreq() / PERIPHERALS_SAMPLING_FREQ;
 8003cb2:	f00b fd75 	bl	800f7a0 <osKernelGetTickFreq>
 8003cb6:	230a      	movs	r3, #10
 8003cb8:	fbb0 fbf3 	udiv	fp, r0, r3
	tick_count = osKernelGetTickCount();
 8003cbc:	f00b fd5c 	bl	800f778 <osKernelGetTickCount>
 8003cc0:	4680      	mov	r8, r0
	bool camera_trigger = false;
 8003cc2:	9401      	str	r4, [sp, #4]
	bool camera_enabled = false;
 8003cc4:	9400      	str	r4, [sp, #0]
	while (1) {
		/* Tick Update */
		tick_count += tick_update;

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f10d 020b 	add.w	r2, sp, #11
 8003ccc:	4951      	ldr	r1, [pc, #324]	; (8003e14 <vTaskPeripherals+0x198>)
		tick_count += tick_update;
 8003cce:	44d8      	add	r8, fp
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 8003cd0:	4851      	ldr	r0, [pc, #324]	; (8003e18 <vTaskPeripherals+0x19c>)
 8003cd2:	f7fe f88e 	bl	8001df2 <ReadMutex>
				sizeof(global_telemetry_command));

		/* Read Flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 8003cd6:	230c      	movs	r3, #12
 8003cd8:	4950      	ldr	r1, [pc, #320]	; (8003e1c <vTaskPeripherals+0x1a0>)
 8003cda:	eb0d 0203 	add.w	r2, sp, r3
 8003cde:	4850      	ldr	r0, [pc, #320]	; (8003e20 <vTaskPeripherals+0x1a4>)
 8003ce0:	f7fe f887 	bl	8001df2 <ReadMutex>
				&flight_phase_detection, sizeof(global_flight_phase_detection));

		/* Enable Buzzer trough Telemetry */
		if (telemetry_command == ENABLE_BUZZER) {
 8003ce4:	f89d 300b 	ldrb.w	r3, [sp, #11]
			buzzer_on_telemetry = !buzzer_on_telemetry;
		}

		/* Enable Buzzer Trough FSM */
		if (flight_phase_detection.flight_phase == RECOVERY) {
 8003ce8:	f89d 200c 	ldrb.w	r2, [sp, #12]
		if (telemetry_command == ENABLE_BUZZER) {
 8003cec:	2b71      	cmp	r3, #113	; 0x71
			buzzer_on_telemetry = !buzzer_on_telemetry;
 8003cee:	bf08      	it	eq
 8003cf0:	f08a 0a01 	eoreq.w	sl, sl, #1
			buzzer_on_fsm = true;
 8003cf4:	2a06      	cmp	r2, #6
 8003cf6:	bf08      	it	eq
 8003cf8:	f04f 0901 	moveq.w	r9, #1
		}

		/* Enable Self Power Hold */
		if (telemetry_command == TELEMETRY_HIGH_SAMPLING) {
 8003cfc:	2b0d      	cmp	r3, #13
 8003cfe:	d104      	bne.n	8003d0a <vTaskPeripherals+0x8e>
			HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 8003d00:	2200      	movs	r2, #0
 8003d02:	2102      	movs	r1, #2
 8003d04:	4842      	ldr	r0, [pc, #264]	; (8003e10 <vTaskPeripherals+0x194>)
 8003d06:	f003 fd67 	bl	80077d8 <HAL_GPIO_WritePin>
		}

		/* Disable Self Power Hold */
		if (telemetry_command == DISABLE_SELF_HOLD) {
 8003d0a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003d0e:	2bfb      	cmp	r3, #251	; 0xfb
 8003d10:	d104      	bne.n	8003d1c <vTaskPeripherals+0xa0>
			HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 8003d12:	2201      	movs	r2, #1
 8003d14:	2102      	movs	r1, #2
 8003d16:	483e      	ldr	r0, [pc, #248]	; (8003e10 <vTaskPeripherals+0x194>)
 8003d18:	f003 fd5e 	bl	80077d8 <HAL_GPIO_WritePin>
		}

		/* Start Enable Camera Sequence */
		if ((telemetry_command == ENABLE_CAMERA) && !camera_enabled) {
 8003d1c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d113      	bne.n	8003d4c <vTaskPeripherals+0xd0>
 8003d24:	9b00      	ldr	r3, [sp, #0]
 8003d26:	b98b      	cbnz	r3, 8003d4c <vTaskPeripherals+0xd0>
			camera_enabled = true;
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_SET);
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d2e:	483d      	ldr	r0, [pc, #244]	; (8003e24 <vTaskPeripherals+0x1a8>)
 8003d30:	f003 fd52 	bl	80077d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_SET);
 8003d34:	2201      	movs	r2, #1
 8003d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d3a:	483a      	ldr	r0, [pc, #232]	; (8003e24 <vTaskPeripherals+0x1a8>)
 8003d3c:	f003 fd4c 	bl	80077d8 <HAL_GPIO_WritePin>
			camera_counter = osKernelGetTickCount() + CAMERA_ON;
 8003d40:	f00b fd1a 	bl	800f778 <osKernelGetTickCount>
			camera_enabled = true;
 8003d44:	2301      	movs	r3, #1
			camera_counter = osKernelGetTickCount() + CAMERA_ON;
 8003d46:	f600 55ac 	addw	r5, r0, #3500	; 0xdac
			camera_enabled = true;
 8003d4a:	9300      	str	r3, [sp, #0]
		}

		if ((camera_counter > osKernelGetTickCount()) && !camera_wait) {
 8003d4c:	f00b fd14 	bl	800f778 <osKernelGetTickCount>
 8003d50:	42a8      	cmp	r0, r5
 8003d52:	d211      	bcs.n	8003d78 <vTaskPeripherals+0xfc>
 8003d54:	b986      	cbnz	r6, 8003d78 <vTaskPeripherals+0xfc>
			camera_wait = true;
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_RESET);
 8003d56:	4632      	mov	r2, r6
 8003d58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d5c:	4831      	ldr	r0, [pc, #196]	; (8003e24 <vTaskPeripherals+0x1a8>)
 8003d5e:	f003 fd3b 	bl	80077d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 8003d62:	4632      	mov	r2, r6
 8003d64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d68:	482e      	ldr	r0, [pc, #184]	; (8003e24 <vTaskPeripherals+0x1a8>)
 8003d6a:	f003 fd35 	bl	80077d8 <HAL_GPIO_WritePin>
			camera_wait = true;
 8003d6e:	2601      	movs	r6, #1
			camera_counter = osKernelGetTickCount() + CAMERA_WAIT;
 8003d70:	f00b fd02 	bl	800f778 <osKernelGetTickCount>
 8003d74:	f500 757a 	add.w	r5, r0, #1000	; 0x3e8
		}

		if ((camera_counter > osKernelGetTickCount()) && !camera_trigger) {
 8003d78:	f00b fcfe 	bl	800f778 <osKernelGetTickCount>
 8003d7c:	42a8      	cmp	r0, r5
 8003d7e:	d213      	bcs.n	8003da8 <vTaskPeripherals+0x12c>
 8003d80:	9b01      	ldr	r3, [sp, #4]
 8003d82:	b98b      	cbnz	r3, 8003da8 <vTaskPeripherals+0x12c>
			camera_trigger = true;
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_SET);
 8003d84:	2201      	movs	r2, #1
 8003d86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d8a:	4826      	ldr	r0, [pc, #152]	; (8003e24 <vTaskPeripherals+0x1a8>)
 8003d8c:	f003 fd24 	bl	80077d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_SET);
 8003d90:	2201      	movs	r2, #1
 8003d92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d96:	4823      	ldr	r0, [pc, #140]	; (8003e24 <vTaskPeripherals+0x1a8>)
 8003d98:	f003 fd1e 	bl	80077d8 <HAL_GPIO_WritePin>
			camera_counter = osKernelGetTickCount() + CAMERA_TRIGGER;
 8003d9c:	f00b fcec 	bl	800f778 <osKernelGetTickCount>
			camera_trigger = true;
 8003da0:	2301      	movs	r3, #1
			camera_counter = osKernelGetTickCount() + CAMERA_TRIGGER;
 8003da2:	f100 05c8 	add.w	r5, r0, #200	; 0xc8
			camera_trigger = true;
 8003da6:	9301      	str	r3, [sp, #4]
		}

		if ((camera_counter > osKernelGetTickCount()) && !camera_ready) {
 8003da8:	f00b fce6 	bl	800f778 <osKernelGetTickCount>
 8003dac:	42a8      	cmp	r0, r5
 8003dae:	d20d      	bcs.n	8003dcc <vTaskPeripherals+0x150>
 8003db0:	b967      	cbnz	r7, 8003dcc <vTaskPeripherals+0x150>
			camera_ready = true;
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_RESET);
 8003db2:	463a      	mov	r2, r7
 8003db4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003db8:	481a      	ldr	r0, [pc, #104]	; (8003e24 <vTaskPeripherals+0x1a8>)
 8003dba:	f003 fd0d 	bl	80077d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 8003dbe:	463a      	mov	r2, r7
			camera_ready = true;
 8003dc0:	2701      	movs	r7, #1
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 8003dc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dc6:	4817      	ldr	r0, [pc, #92]	; (8003e24 <vTaskPeripherals+0x1a8>)
 8003dc8:	f003 fd06 	bl	80077d8 <HAL_GPIO_WritePin>
		}

		/* Camera first enable for some time, then turn off and finally turn on again */

		/* Enable Buzzer */
		if (buzzer_on_fsm ^ buzzer_on_telemetry) {
 8003dcc:	45d1      	cmp	r9, sl
 8003dce:	d011      	beq.n	8003df4 <vTaskPeripherals+0x178>
			if (buzzercounter > (400 / tick_update)) {
 8003dd0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003dd4:	fbb3 f3fb 	udiv	r3, r3, fp
 8003dd8:	429c      	cmp	r4, r3
 8003dda:	d905      	bls.n	8003de8 <vTaskPeripherals+0x16c>
				HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
				buzzercounter = 0;
 8003ddc:	2400      	movs	r4, #0
				HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003de2:	4811      	ldr	r0, [pc, #68]	; (8003e28 <vTaskPeripherals+0x1ac>)
 8003de4:	f003 fcfd 	bl	80077e2 <HAL_GPIO_TogglePin>
		}

		else if (osKernelGetTickCount() > 5000) {
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
		}
		buzzercounter++;
 8003de8:	3401      	adds	r4, #1

		/* Sleep */
		osDelayUntil(tick_count);
 8003dea:	4640      	mov	r0, r8
		buzzercounter++;
 8003dec:	b2e4      	uxtb	r4, r4
		osDelayUntil(tick_count);
 8003dee:	f00b fd4b 	bl	800f888 <osDelayUntil>
		tick_count += tick_update;
 8003df2:	e768      	b.n	8003cc6 <vTaskPeripherals+0x4a>
		else if (osKernelGetTickCount() > 5000) {
 8003df4:	f00b fcc0 	bl	800f778 <osKernelGetTickCount>
 8003df8:	f241 3388 	movw	r3, #5000	; 0x1388
 8003dfc:	4298      	cmp	r0, r3
 8003dfe:	d9f3      	bls.n	8003de8 <vTaskPeripherals+0x16c>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8003e00:	2200      	movs	r2, #0
 8003e02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e06:	4808      	ldr	r0, [pc, #32]	; (8003e28 <vTaskPeripherals+0x1ac>)
 8003e08:	f003 fce6 	bl	80077d8 <HAL_GPIO_WritePin>
 8003e0c:	e7ec      	b.n	8003de8 <vTaskPeripherals+0x16c>
 8003e0e:	bf00      	nop
 8003e10:	58020400 	.word	0x58020400
 8003e14:	2401738c 	.word	0x2401738c
 8003e18:	2400cec4 	.word	0x2400cec4
 8003e1c:	2400023c 	.word	0x2400023c
 8003e20:	2400a98c 	.word	0x2400a98c
 8003e24:	58021000 	.word	0x58021000
 8003e28:	58020c00 	.word	0x58020c00

08003e2c <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8003e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Try everything forever;
	for (;;) {
		osDelay(100);
 8003e30:	2064      	movs	r0, #100	; 0x64
void vTaskSdCard(void *argument) {
 8003e32:	b0cd      	sub	sp, #308	; 0x134
		osDelay(100);
 8003e34:	f00b fd0e 	bl	800f854 <osDelay>
		flight_phase_detection_t local_flight_phase;
		FRESULT res;
		char EULER_LOG_FILE_NAME[13] = "";
 8003e38:	2300      	movs	r3, #0
		UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8003e3a:	4890      	ldr	r0, [pc, #576]	; (800407c <vTaskSdCard+0x250>)
		char EULER_LOG_FILE_NAME[13] = "";
 8003e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e3e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		local_flight_phase.flight_phase = IDLE;
		resetSDCard: //UsbPrint("[STORAGE TASK] Mounting SD card\n");
		do {
			EULER_LOG_FILE_NAME[0] = 0;
			res = f_mount(&EULER_FatFS, "", 1);
 8003e42:	4c8f      	ldr	r4, [pc, #572]	; (8004080 <vTaskSdCard+0x254>)
 8003e44:	4d8f      	ldr	r5, [pc, #572]	; (8004084 <vTaskSdCard+0x258>)
			if (res != FR_OK) {
				UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8003e46:	4e90      	ldr	r6, [pc, #576]	; (8004088 <vTaskSdCard+0x25c>)
		char EULER_LOG_FILE_NAME[13] = "";
 8003e48:	e9cd 3307 	strd	r3, r3, [sp, #28]
		UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8003e4c:	f7fe f94c 	bl	80020e8 <UsbPrint>
		local_flight_phase.flight_phase = IDLE;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f88d 3010 	strb.w	r3, [sp, #16]
			EULER_LOG_FILE_NAME[0] = 0;
 8003e56:	2700      	movs	r7, #0
			res = f_mount(&EULER_FatFS, "", 1);
 8003e58:	4621      	mov	r1, r4
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4628      	mov	r0, r5
			EULER_LOG_FILE_NAME[0] = 0;
 8003e5e:	f88d 701c 	strb.w	r7, [sp, #28]
			res = f_mount(&EULER_FatFS, "", 1);
 8003e62:	f00a ff7f 	bl	800ed64 <f_mount>
			if (res != FR_OK) {
 8003e66:	4601      	mov	r1, r0
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d147      	bne.n	8003efc <vTaskSdCard+0xd0>
				osDelay(10);
			}
		} while (res != FR_OK);

		logToNewFile: if (!EULER_LOG_FILE_NAME[0]) {
			UsbPrint("[STORAGE TASK] Creating file name\n");
 8003e6c:	4f87      	ldr	r7, [pc, #540]	; (800408c <vTaskSdCard+0x260>)

			unsigned int file_number = 1;

			DIR dj;
			FILINFO fno;
			res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 8003e6e:	f8df 8268 	ldr.w	r8, [pc, #616]	; 80040d8 <vTaskSdCard+0x2ac>
		logToNewFile: if (!EULER_LOG_FILE_NAME[0]) {
 8003e72:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d165      	bne.n	8003f46 <vTaskSdCard+0x11a>
			UsbPrint("[STORAGE TASK] Creating file name\n");
 8003e7a:	4638      	mov	r0, r7
			unsigned int file_number = 1;
 8003e7c:	f04f 0901 	mov.w	r9, #1
			while (res == FR_OK && fno.fname[0]) {
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8003e80:	f04f 0a64 	mov.w	sl, #100	; 0x64
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8003e84:	f04f 0b0a 	mov.w	fp, #10
			UsbPrint("[STORAGE TASK] Creating file name\n");
 8003e88:	f7fe f92e 	bl	80020e8 <UsbPrint>
			res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 8003e8c:	4643      	mov	r3, r8
 8003e8e:	4622      	mov	r2, r4
 8003e90:	a90b      	add	r1, sp, #44	; 0x2c
 8003e92:	a819      	add	r0, sp, #100	; 0x64
 8003e94:	f00b fbc7 	bl	800f626 <f_findfirst>
			while (res == FR_OK && fno.fname[0]) {
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	f040 80eb 	bne.w	8004074 <vTaskSdCard+0x248>
 8003e9e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d139      	bne.n	8003f1a <vTaskSdCard+0xee>
						"[STORAGE TASK] Failed finding first or next file: %d\n",
						res);
				goto resetSDCard;
			}

			strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8003ea6:	497a      	ldr	r1, [pc, #488]	; (8004090 <vTaskSdCard+0x264>)
 8003ea8:	a807      	add	r0, sp, #28
 8003eaa:	f00e ffc1 	bl	8012e30 <strcpy>
			EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8003eae:	230a      	movs	r3, #10
			EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
			EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;

			UsbPrint("[STORAGE TASK] Using file name: %s\n",
 8003eb0:	4878      	ldr	r0, [pc, #480]	; (8004094 <vTaskSdCard+0x268>)
			EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8003eb2:	fbb9 f1f3 	udiv	r1, r9, r3
 8003eb6:	fb03 9211 	mls	r2, r3, r1, r9
 8003eba:	3230      	adds	r2, #48	; 0x30
 8003ebc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
			EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8003ec0:	fbb1 f2f3 	udiv	r2, r1, r3
 8003ec4:	fb03 1212 	mls	r2, r3, r2, r1
			UsbPrint("[STORAGE TASK] Using file name: %s\n",
 8003ec8:	a907      	add	r1, sp, #28
			EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8003eca:	3230      	adds	r2, #48	; 0x30
 8003ecc:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
			EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8003ed0:	2264      	movs	r2, #100	; 0x64
 8003ed2:	fbb9 f9f2 	udiv	r9, r9, r2
 8003ed6:	fbb9 f2f3 	udiv	r2, r9, r3
 8003eda:	fb03 9912 	mls	r9, r3, r2, r9
 8003ede:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8003ee2:	f88d 9020 	strb.w	r9, [sp, #32]
			UsbPrint("[STORAGE TASK] Using file name: %s\n",
 8003ee6:	f7fe f8ff 	bl	80020e8 <UsbPrint>
					EULER_LOG_FILE_NAME);

			res = f_closedir(&dj);
 8003eea:	a819      	add	r0, sp, #100	; 0x64
 8003eec:	f00b fb42 	bl	800f574 <f_closedir>
			if (res != FR_OK) {
 8003ef0:	4601      	mov	r1, r0
 8003ef2:	b340      	cbz	r0, 8003f46 <vTaskSdCard+0x11a>
				UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8003ef4:	4868      	ldr	r0, [pc, #416]	; (8004098 <vTaskSdCard+0x26c>)

					UsbPrint("[STORAGE TASK] Syncing file..\n");
					HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
					res = f_sync(&EULER_LOG_FILE);
					if (res != FR_OK) {
						UsbPrint("[STORAGE TASK] Failed syncing file: %d\n",
 8003ef6:	f7fe f8f7 	bl	80020e8 <UsbPrint>
								res);
						goto resetSDCard;
 8003efa:	e7ac      	b.n	8003e56 <vTaskSdCard+0x2a>
				UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8003efc:	4630      	mov	r0, r6
 8003efe:	f7fe f8f3 	bl	80020e8 <UsbPrint>
				disk.is_initialized[0] = 0;
 8003f02:	4b66      	ldr	r3, [pc, #408]	; (800409c <vTaskSdCard+0x270>)
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8003f04:	2201      	movs	r2, #1
 8003f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f0a:	4865      	ldr	r0, [pc, #404]	; (80040a0 <vTaskSdCard+0x274>)
				disk.is_initialized[0] = 0;
 8003f0c:	701f      	strb	r7, [r3, #0]
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8003f0e:	f003 fc63 	bl	80077d8 <HAL_GPIO_WritePin>
				osDelay(10);
 8003f12:	200a      	movs	r0, #10
 8003f14:	f00b fc9e 	bl	800f854 <osDelay>
 8003f18:	e79d      	b.n	8003e56 <vTaskSdCard+0x2a>
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8003f1a:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				res = f_findnext(&dj, &fno);
 8003f1e:	a90b      	add	r1, sp, #44	; 0x2c
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8003f20:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
				res = f_findnext(&dj, &fno);
 8003f24:	a819      	add	r0, sp, #100	; 0x64
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8003f26:	3a30      	subs	r2, #48	; 0x30
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8003f28:	3b30      	subs	r3, #48	; 0x30
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8003f2a:	fb0b f202 	mul.w	r2, fp, r2
 8003f2e:	fb0a 2303 	mla	r3, sl, r3, r2
 8003f32:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8003f36:	4413      	add	r3, r2
				if (current_file_number + 1 > file_number) {
 8003f38:	3b2f      	subs	r3, #47	; 0x2f
 8003f3a:	4599      	cmp	r9, r3
 8003f3c:	bf38      	it	cc
 8003f3e:	4699      	movcc	r9, r3
				res = f_findnext(&dj, &fno);
 8003f40:	f00b fb59 	bl	800f5f6 <f_findnext>
 8003f44:	e7a8      	b.n	8003e98 <vTaskSdCard+0x6c>
		res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8003f46:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80040bc <vTaskSdCard+0x290>
		UsbPrint("[STORAGE TASK] Opening log file\n");
 8003f4a:	4856      	ldr	r0, [pc, #344]	; (80040a4 <vTaskSdCard+0x278>)
 8003f4c:	f7fe f8cc 	bl	80020e8 <UsbPrint>
		res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8003f50:	a907      	add	r1, sp, #28
 8003f52:	2212      	movs	r2, #18
 8003f54:	4648      	mov	r0, r9
 8003f56:	f00a ff4f 	bl	800edf8 <f_open>
		if (res != FR_OK) {
 8003f5a:	4601      	mov	r1, r0
 8003f5c:	b108      	cbz	r0, 8003f62 <vTaskSdCard+0x136>
			UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 8003f5e:	4852      	ldr	r0, [pc, #328]	; (80040a8 <vTaskSdCard+0x27c>)
 8003f60:	e7c9      	b.n	8003ef6 <vTaskSdCard+0xca>
		UsbPrint("[STORAGE TASK] Going to end of file\n");
 8003f62:	4852      	ldr	r0, [pc, #328]	; (80040ac <vTaskSdCard+0x280>)
 8003f64:	f7fe f8c0 	bl	80020e8 <UsbPrint>
		res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 8003f68:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8003f6c:	4648      	mov	r0, r9
 8003f6e:	f00b f992 	bl	800f296 <f_lseek>
		if (res != FR_OK) {
 8003f72:	4601      	mov	r1, r0
 8003f74:	b108      	cbz	r0, 8003f7a <vTaskSdCard+0x14e>
			UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8003f76:	484e      	ldr	r0, [pc, #312]	; (80040b0 <vTaskSdCard+0x284>)
 8003f78:	e7bd      	b.n	8003ef6 <vTaskSdCard+0xca>
		char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8003f7a:	4b4e      	ldr	r3, [pc, #312]	; (80040b4 <vTaskSdCard+0x288>)
 8003f7c:	aa11      	add	r2, sp, #68	; 0x44
		volatile int32_t msgCounter = 0;
 8003f7e:	9003      	str	r0, [sp, #12]
		char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8003f80:	f103 0e18 	add.w	lr, r3, #24
 8003f84:	4691      	mov	r9, r2
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	3308      	adds	r3, #8
 8003f8a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8003f8e:	4694      	mov	ip, r2
 8003f90:	4573      	cmp	r3, lr
 8003f92:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8003f96:	4662      	mov	r2, ip
 8003f98:	d1f5      	bne.n	8003f86 <vTaskSdCard+0x15a>
 8003f9a:	8899      	ldrh	r1, [r3, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	799b      	ldrb	r3, [r3, #6]
 8003fa0:	f8cc 0000 	str.w	r0, [ip]
		res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8003fa4:	4648      	mov	r0, r9
		char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8003fa6:	f88c 3006 	strb.w	r3, [ip, #6]
 8003faa:	2300      	movs	r3, #0
 8003fac:	f8ac 1004 	strh.w	r1, [ip, #4]
 8003fb0:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
		res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8003fb4:	f7fc f994 	bl	80002e0 <strlen>
 8003fb8:	4649      	mov	r1, r9
 8003fba:	4602      	mov	r2, r0
 8003fbc:	4b3e      	ldr	r3, [pc, #248]	; (80040b8 <vTaskSdCard+0x28c>)
 8003fbe:	483f      	ldr	r0, [pc, #252]	; (80040bc <vTaskSdCard+0x290>)
 8003fc0:	f00b f82a 	bl	800f018 <f_write>
		if (res != FR_OK) {
 8003fc4:	4681      	mov	r9, r0
 8003fc6:	b110      	cbz	r0, 8003fce <vTaskSdCard+0x1a2>
			UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8003fc8:	4601      	mov	r1, r0
						UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8003fca:	483d      	ldr	r0, [pc, #244]	; (80040c0 <vTaskSdCard+0x294>)
 8003fcc:	e793      	b.n	8003ef6 <vTaskSdCard+0xca>
		log_entry_t log_entry = { 0 };
 8003fce:	4601      	mov	r1, r0
 8003fd0:	2296      	movs	r2, #150	; 0x96
 8003fd2:	a826      	add	r0, sp, #152	; 0x98
			if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8003fd4:	f8df a104 	ldr.w	sl, [pc, #260]	; 80040dc <vTaskSdCard+0x2b0>
		log_entry_t log_entry = { 0 };
 8003fd8:	f00e fe35 	bl	8012c46 <memset>
					res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8003fdc:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80040b8 <vTaskSdCard+0x28c>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8003fe0:	464a      	mov	r2, r9
					res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8003fe2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80040bc <vTaskSdCard+0x290>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8003fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fea:	482d      	ldr	r0, [pc, #180]	; (80040a0 <vTaskSdCard+0x274>)
 8003fec:	f003 fbf4 	bl	80077d8 <HAL_GPIO_WritePin>
			if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8003ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	a926      	add	r1, sp, #152	; 0x98
 8003ff8:	f8da 0000 	ldr.w	r0, [sl]
 8003ffc:	f00b fe76 	bl	800fcec <osMessageQueueGet>
 8004000:	2800      	cmp	r0, #0
 8004002:	d1f5      	bne.n	8003ff0 <vTaskSdCard+0x1c4>
				num_bytes = strlen(log_entry.str);
 8004004:	a826      	add	r0, sp, #152	; 0x98
 8004006:	f7fc f96b 	bl	80002e0 <strlen>
				if (num_bytes > 0) {
 800400a:	4602      	mov	r2, r0
 800400c:	b138      	cbz	r0, 800401e <vTaskSdCard+0x1f2>
					res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 800400e:	a926      	add	r1, sp, #152	; 0x98
 8004010:	465b      	mov	r3, fp
 8004012:	4648      	mov	r0, r9
 8004014:	f00b f800 	bl	800f018 <f_write>
					if (res != FR_OK) {
 8004018:	4601      	mov	r1, r0
 800401a:	2800      	cmp	r0, #0
 800401c:	d1d5      	bne.n	8003fca <vTaskSdCard+0x19e>
				msgCounter++;
 800401e:	9b03      	ldr	r3, [sp, #12]
 8004020:	3301      	adds	r3, #1
 8004022:	9303      	str	r3, [sp, #12]
				if (msgCounter >= SYNC_AFTER_COUNT) {
 8004024:	9b03      	ldr	r3, [sp, #12]
 8004026:	2b7f      	cmp	r3, #127	; 0x7f
 8004028:	dde2      	ble.n	8003ff0 <vTaskSdCard+0x1c4>
					msgCounter = 0;
 800402a:	2300      	movs	r3, #0
					UsbPrint("[STORAGE TASK] Syncing file..\n");
 800402c:	4825      	ldr	r0, [pc, #148]	; (80040c4 <vTaskSdCard+0x298>)
					msgCounter = 0;
 800402e:	9303      	str	r3, [sp, #12]
					UsbPrint("[STORAGE TASK] Syncing file..\n");
 8004030:	f7fe f85a 	bl	80020e8 <UsbPrint>
					HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8004034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004038:	4819      	ldr	r0, [pc, #100]	; (80040a0 <vTaskSdCard+0x274>)
 800403a:	f003 fbd2 	bl	80077e2 <HAL_GPIO_TogglePin>
					res = f_sync(&EULER_LOG_FILE);
 800403e:	4648      	mov	r0, r9
 8004040:	f00b f8c0 	bl	800f1c4 <f_sync>
					if (res != FR_OK) {
 8004044:	4601      	mov	r1, r0
 8004046:	b108      	cbz	r0, 800404c <vTaskSdCard+0x220>
						UsbPrint("[STORAGE TASK] Failed syncing file: %d\n",
 8004048:	481f      	ldr	r0, [pc, #124]	; (80040c8 <vTaskSdCard+0x29c>)
 800404a:	e754      	b.n	8003ef6 <vTaskSdCard+0xca>
					}

					;

					// if the rocket landed, create a new file and write to that one
					if (ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 800404c:	230c      	movs	r3, #12
 800404e:	aa04      	add	r2, sp, #16
 8004050:	491e      	ldr	r1, [pc, #120]	; (80040cc <vTaskSdCard+0x2a0>)
 8004052:	481f      	ldr	r0, [pc, #124]	; (80040d0 <vTaskSdCard+0x2a4>)
 8004054:	f7fd fecd 	bl	8001df2 <ReadMutex>
 8004058:	2800      	cmp	r0, #0
 800405a:	d1c9      	bne.n	8003ff0 <vTaskSdCard+0x1c4>
							&local_flight_phase,
							sizeof(global_flight_phase_detection)) == osOK
							&& local_flight_phase.flight_phase == RECOVERY) {
 800405c:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8004060:	2a06      	cmp	r2, #6
 8004062:	d1c5      	bne.n	8003ff0 <vTaskSdCard+0x1c4>
 8004064:	9001      	str	r0, [sp, #4]
						f_close(&EULER_LOG_FILE);
 8004066:	4815      	ldr	r0, [pc, #84]	; (80040bc <vTaskSdCard+0x290>)
 8004068:	f00b f8fc 	bl	800f264 <f_close>
						// "clean" current file name
						EULER_LOG_FILE_NAME[0] = 0;
 800406c:	9b01      	ldr	r3, [sp, #4]
 800406e:	f88d 301c 	strb.w	r3, [sp, #28]
						goto logToNewFile;
 8004072:	e6fe      	b.n	8003e72 <vTaskSdCard+0x46>
				UsbPrint(
 8004074:	4601      	mov	r1, r0
 8004076:	4817      	ldr	r0, [pc, #92]	; (80040d4 <vTaskSdCard+0x2a8>)
 8004078:	e73d      	b.n	8003ef6 <vTaskSdCard+0xca>
 800407a:	bf00      	nop
 800407c:	08014f04 	.word	0x08014f04
 8004080:	0801509f 	.word	0x0801509f
 8004084:	2401faac 	.word	0x2401faac
 8004088:	08014f2c 	.word	0x08014f2c
 800408c:	08014f58 	.word	0x08014f58
 8004090:	080150fe 	.word	0x080150fe
 8004094:	0801510a 	.word	0x0801510a
 8004098:	08014f87 	.word	0x08014f87
 800409c:	240016a4 	.word	0x240016a4
 80040a0:	58020c00 	.word	0x58020c00
 80040a4:	08014fb4 	.word	0x08014fb4
 80040a8:	08014fd5 	.word	0x08014fd5
 80040ac:	08015001 	.word	0x08015001
 80040b0:	08015026 	.word	0x08015026
 80040b4:	080149fc 	.word	0x080149fc
 80040b8:	2401fce0 	.word	0x2401fce0
 80040bc:	2401f87c 	.word	0x2401f87c
 80040c0:	08015056 	.word	0x08015056
 80040c4:	08015081 	.word	0x08015081
 80040c8:	080150a0 	.word	0x080150a0
 80040cc:	2400023c 	.word	0x2400023c
 80040d0:	2400a98c 	.word	0x2400a98c
 80040d4:	080150c8 	.word	0x080150c8
 80040d8:	08014f7b 	.word	0x08014f7b
 80040dc:	2401b574 	.word	0x2401b574

080040e0 <calculate_checksum_sb>:
	}
}

uint8_t calculate_checksum_sb(sb_data_t *sb_data) {

	return sb_data->baro.pressure + sb_data->baro.temperature
 80040e0:	e9d0 3200 	ldrd	r3, r2, [r0]
 80040e4:	4413      	add	r3, r2
			+ sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z
 80040e6:	7b02      	ldrb	r2, [r0, #12]
 80040e8:	4413      	add	r3, r2
 80040ea:	7b82      	ldrb	r2, [r0, #14]
 80040ec:	4413      	add	r3, r2
 80040ee:	7c02      	ldrb	r2, [r0, #16]
 80040f0:	4413      	add	r3, r2
			+ sb_data->imu.acc_x + sb_data->imu.acc_y + sb_data->imu.acc_z;
 80040f2:	7c82      	ldrb	r2, [r0, #18]
 80040f4:	4413      	add	r3, r2
 80040f6:	7d02      	ldrb	r2, [r0, #20]
 80040f8:	7d80      	ldrb	r0, [r0, #22]
 80040fa:	4413      	add	r3, r2
 80040fc:	4418      	add	r0, r3
}
 80040fe:	b2c0      	uxtb	r0, r0
 8004100:	4770      	bx	lr
	...

08004104 <ReadDataSB>:
void ReadDataSB(sb_data_t *sb1, sb_data_t *sb2, sb_data_t *sb3) {
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	4606      	mov	r6, r0
 8004108:	460d      	mov	r5, r1
 800410a:	4614      	mov	r4, r2
	checksum = calculate_checksum_sb(sb1);
 800410c:	f7ff ffe8 	bl	80040e0 <calculate_checksum_sb>
	if (checksum == sb1->checksum) {
 8004110:	7f33      	ldrb	r3, [r6, #28]
 8004112:	4283      	cmp	r3, r0
 8004114:	d114      	bne.n	8004140 <ReadDataSB+0x3c>
		if (AcquireMutex(&sb1_mutex) == osOK) {
 8004116:	4826      	ldr	r0, [pc, #152]	; (80041b0 <ReadDataSB+0xac>)
 8004118:	f7fd fe5d 	bl	8001dd6 <AcquireMutex>
 800411c:	b980      	cbnz	r0, 8004140 <ReadDataSB+0x3c>
			sb1_baro = sb1->baro;
 800411e:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <ReadDataSB+0xb0>)
			sb1_imu = sb1->imu;
 8004120:	4f25      	ldr	r7, [pc, #148]	; (80041b8 <ReadDataSB+0xb4>)
			sb1_baro = sb1->baro;
 8004122:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
			sb1_imu = sb1->imu;
 8004126:	360c      	adds	r6, #12
			sb1_baro = sb1->baro;
 8004128:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb1->imu;
 800412c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004130:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
			ReleaseMutex(&sb1_mutex);
 8004134:	481e      	ldr	r0, [pc, #120]	; (80041b0 <ReadDataSB+0xac>)
 8004136:	f7fd fe59 	bl	8001dec <ReleaseMutex>
			sb1_imu.acc_z = -sb1_imu.acc_z;
 800413a:	897b      	ldrh	r3, [r7, #10]
 800413c:	425b      	negs	r3, r3
 800413e:	817b      	strh	r3, [r7, #10]
	checksum = calculate_checksum_sb(sb2);
 8004140:	4628      	mov	r0, r5
 8004142:	f7ff ffcd 	bl	80040e0 <calculate_checksum_sb>
	if (checksum == sb2->checksum) {
 8004146:	7f2b      	ldrb	r3, [r5, #28]
 8004148:	4283      	cmp	r3, r0
 800414a:	d114      	bne.n	8004176 <ReadDataSB+0x72>
		if (AcquireMutex(&sb2_mutex) == osOK) {
 800414c:	481b      	ldr	r0, [pc, #108]	; (80041bc <ReadDataSB+0xb8>)
 800414e:	f7fd fe42 	bl	8001dd6 <AcquireMutex>
 8004152:	b980      	cbnz	r0, 8004176 <ReadDataSB+0x72>
			sb2_baro = sb2->baro;
 8004154:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <ReadDataSB+0xbc>)
			sb2_imu = sb2->imu;
 8004156:	4e1b      	ldr	r6, [pc, #108]	; (80041c4 <ReadDataSB+0xc0>)
			sb2_baro = sb2->baro;
 8004158:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
			sb2_imu = sb2->imu;
 800415c:	350c      	adds	r5, #12
			sb2_baro = sb2->baro;
 800415e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb2->imu;
 8004162:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004166:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			ReleaseMutex(&sb2_mutex);
 800416a:	4814      	ldr	r0, [pc, #80]	; (80041bc <ReadDataSB+0xb8>)
 800416c:	f7fd fe3e 	bl	8001dec <ReleaseMutex>
			sb2_imu.acc_z = -sb2_imu.acc_z;
 8004170:	8973      	ldrh	r3, [r6, #10]
 8004172:	425b      	negs	r3, r3
 8004174:	8173      	strh	r3, [r6, #10]
	checksum = calculate_checksum_sb(sb3);
 8004176:	4620      	mov	r0, r4
 8004178:	f7ff ffb2 	bl	80040e0 <calculate_checksum_sb>
	if (checksum == sb3->checksum) {
 800417c:	7f23      	ldrb	r3, [r4, #28]
 800417e:	4283      	cmp	r3, r0
 8004180:	d114      	bne.n	80041ac <ReadDataSB+0xa8>
		if (AcquireMutex(&sb3_mutex) == osOK) {
 8004182:	4811      	ldr	r0, [pc, #68]	; (80041c8 <ReadDataSB+0xc4>)
 8004184:	f7fd fe27 	bl	8001dd6 <AcquireMutex>
 8004188:	b980      	cbnz	r0, 80041ac <ReadDataSB+0xa8>
			sb3_baro = sb3->baro;
 800418a:	4b10      	ldr	r3, [pc, #64]	; (80041cc <ReadDataSB+0xc8>)
			sb3_imu = sb3->imu;
 800418c:	4d10      	ldr	r5, [pc, #64]	; (80041d0 <ReadDataSB+0xcc>)
			sb3_baro = sb3->baro;
 800418e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
			sb3_imu = sb3->imu;
 8004192:	340c      	adds	r4, #12
			sb3_baro = sb3->baro;
 8004194:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3->imu;
 8004198:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800419c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			ReleaseMutex(&sb3_mutex);
 80041a0:	4809      	ldr	r0, [pc, #36]	; (80041c8 <ReadDataSB+0xc4>)
 80041a2:	f7fd fe23 	bl	8001dec <ReleaseMutex>
			sb3_imu.acc_z = -sb3_imu.acc_z;
 80041a6:	896b      	ldrh	r3, [r5, #10]
 80041a8:	425b      	negs	r3, r3
 80041aa:	816b      	strh	r3, [r5, #10]
}
 80041ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041ae:	bf00      	nop
 80041b0:	240110cc 	.word	0x240110cc
 80041b4:	24000248 	.word	0x24000248
 80041b8:	24000254 	.word	0x24000254
 80041bc:	2401f828 	.word	0x2401f828
 80041c0:	24000264 	.word	0x24000264
 80041c4:	24000270 	.word	0x24000270
 80041c8:	24013248 	.word	0x24013248
 80041cc:	24000280 	.word	0x24000280
 80041d0:	2400028c 	.word	0x2400028c

080041d4 <vTaskSensRead>:
void vTaskSensRead(void *argument) {
 80041d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 80041d8:	f04f 0864 	mov.w	r8, #100	; 0x64
void vTaskSensRead(void *argument) {
 80041dc:	b088      	sub	sp, #32
	osDelay(800);
 80041de:	f44f 7048 	mov.w	r0, #800	; 0x320
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 80041e2:	4f3f      	ldr	r7, [pc, #252]	; (80042e0 <vTaskSensRead+0x10c>)
	osDelay(800);
 80041e4:	f00b fb36 	bl	800f854 <osDelay>
	tick_count = osKernelGetTickCount();
 80041e8:	f00b fac6 	bl	800f778 <osKernelGetTickCount>
 80041ec:	4606      	mov	r6, r0
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 80041ee:	f00b fad7 	bl	800f7a0 <osKernelGetTickFreq>
 80041f2:	fbb0 f8f8 	udiv	r8, r0, r8
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 80041f6:	4c3b      	ldr	r4, [pc, #236]	; (80042e4 <vTaskSensRead+0x110>)
 80041f8:	463a      	mov	r2, r7
 80041fa:	4d3b      	ldr	r5, [pc, #236]	; (80042e8 <vTaskSensRead+0x114>)
		tick_count += tick_update;
 80041fc:	4446      	add	r6, r8
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 80041fe:	4621      	mov	r1, r4
 8004200:	4628      	mov	r0, r5
 8004202:	f7ff ff7f 	bl	8004104 <ReadDataSB>
		UsbPrint(
 8004206:	69ab      	ldr	r3, [r5, #24]
 8004208:	6829      	ldr	r1, [r5, #0]
 800420a:	9306      	str	r3, [sp, #24]
 800420c:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8004210:	4836      	ldr	r0, [pc, #216]	; (80042ec <vTaskSensRead+0x118>)
 8004212:	9305      	str	r3, [sp, #20]
 8004214:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8004218:	9304      	str	r3, [sp, #16]
 800421a:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 800421e:	9303      	str	r3, [sp, #12]
 8004220:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 8004224:	9302      	str	r3, [sp, #8]
 8004226:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8004236:	f7fd ff57 	bl	80020e8 <UsbPrint>
		UsbPrint(
 800423a:	69a3      	ldr	r3, [r4, #24]
 800423c:	6821      	ldr	r1, [r4, #0]
 800423e:	9306      	str	r3, [sp, #24]
 8004240:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8004244:	482a      	ldr	r0, [pc, #168]	; (80042f0 <vTaskSensRead+0x11c>)
 8004246:	9305      	str	r3, [sp, #20]
 8004248:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800424c:	9304      	str	r3, [sp, #16]
 800424e:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8004252:	9303      	str	r3, [sp, #12]
 8004254:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8004258:	9302      	str	r3, [sp, #8]
 800425a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800426a:	f7fd ff3d 	bl	80020e8 <UsbPrint>
		logSensor(tick_count, 1, BARO, &sb1_data.baro);
 800426e:	2201      	movs	r2, #1
 8004270:	462b      	mov	r3, r5
 8004272:	4630      	mov	r0, r6
 8004274:	4611      	mov	r1, r2
 8004276:	f7fd fe0d 	bl	8001e94 <logSensor>
		logSensor(tick_count, 1, IMU, &sb1_data.imu);
 800427a:	f105 030c 	add.w	r3, r5, #12
 800427e:	2202      	movs	r2, #2
 8004280:	2101      	movs	r1, #1
 8004282:	4630      	mov	r0, r6
 8004284:	f7fd fe06 	bl	8001e94 <logSensor>
		logSensor(tick_count, 2, BARO, &sb2_data.baro);
 8004288:	4623      	mov	r3, r4
 800428a:	2201      	movs	r2, #1
 800428c:	2102      	movs	r1, #2
 800428e:	4630      	mov	r0, r6
 8004290:	f7fd fe00 	bl	8001e94 <logSensor>
		logSensor(tick_count, 2, IMU, &sb2_data.imu);
 8004294:	2202      	movs	r2, #2
 8004296:	f104 030c 	add.w	r3, r4, #12
 800429a:	4630      	mov	r0, r6
 800429c:	4611      	mov	r1, r2
 800429e:	f7fd fdf9 	bl	8001e94 <logSensor>
		logSensor(tick_count, 3, BARO, &sb3_data.baro);
 80042a2:	463b      	mov	r3, r7
 80042a4:	2201      	movs	r2, #1
 80042a6:	2103      	movs	r1, #3
 80042a8:	4630      	mov	r0, r6
 80042aa:	f7fd fdf3 	bl	8001e94 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_data.imu);
 80042ae:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <vTaskSensRead+0x120>)
 80042b0:	2202      	movs	r2, #2
 80042b2:	2103      	movs	r1, #3
 80042b4:	4630      	mov	r0, r6
 80042b6:	f7fd fded 	bl	8001e94 <logSensor>
		HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) &sb1_data, sizeof(sb1_data));
 80042ba:	4629      	mov	r1, r5
 80042bc:	2220      	movs	r2, #32
 80042be:	480e      	ldr	r0, [pc, #56]	; (80042f8 <vTaskSensRead+0x124>)
 80042c0:	f006 fcba 	bl	800ac38 <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &sb2_data, sizeof(sb2_data));
 80042c4:	4621      	mov	r1, r4
 80042c6:	2220      	movs	r2, #32
 80042c8:	480c      	ldr	r0, [pc, #48]	; (80042fc <vTaskSensRead+0x128>)
 80042ca:	f006 fcb5 	bl	800ac38 <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 80042ce:	2220      	movs	r2, #32
 80042d0:	4639      	mov	r1, r7
 80042d2:	480b      	ldr	r0, [pc, #44]	; (8004300 <vTaskSensRead+0x12c>)
 80042d4:	f006 fcb0 	bl	800ac38 <HAL_SPI_Receive_DMA>
		osDelayUntil(tick_count);
 80042d8:	4630      	mov	r0, r6
 80042da:	f00b fad5 	bl	800f888 <osDelayUntil>
 80042de:	e78a      	b.n	80041f6 <vTaskSensRead+0x22>
 80042e0:	2400031c 	.word	0x2400031c
 80042e4:	240002fc 	.word	0x240002fc
 80042e8:	240002dc 	.word	0x240002dc
 80042ec:	0801512e 	.word	0x0801512e
 80042f0:	08015184 	.word	0x08015184
 80042f4:	24000328 	.word	0x24000328
 80042f8:	2401b4ec 	.word	0x2401b4ec
 80042fc:	2400a994 	.word	0x2400a994
 8004300:	2400eed8 	.word	0x2400eed8

08004304 <resetStateEstimation>:
}

void resetStateEstimation(kf_state_t *kf_state,
		flight_phase_detection_t *flight_phase_detection, env_t *environment,
		extrapolation_rolling_memory_t *extrapolation_rolling_memory,
		float pressure, float temperature) {
 8004304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004308:	ed2d 8b02 	vpush	{d8}
 800430c:	eeb0 8a60 	vmov.f32	s16, s1
 8004310:	4614      	mov	r4, r2
 8004312:	eef0 8a40 	vmov.f32	s17, s0
 8004316:	4605      	mov	r5, r0
	reset_flight_phase_detection(flight_phase_detection);
 8004318:	4608      	mov	r0, r1
		float pressure, float temperature) {
 800431a:	461f      	mov	r7, r3
 800431c:	460e      	mov	r6, r1
	reset_flight_phase_detection(flight_phase_detection);
 800431e:	f7fc ffed 	bl	80012fc <reset_flight_phase_detection>
	calibrate_env(environment, pressure, temperature);
 8004322:	eef0 0a48 	vmov.f32	s1, s16
 8004326:	4620      	mov	r0, r4
 8004328:	eeb0 0a68 	vmov.f32	s0, s17
 800432c:	f7fc fe58 	bl	8000fe0 <calibrate_env>
	update_env(environment, temperature);
 8004330:	eeb0 0a48 	vmov.f32	s0, s16
 8004334:	4620      	mov	r0, r4
 8004336:	f7fc fe67 	bl	8001008 <update_env>
	reset_kf_state(kf_state);
 800433a:	4628      	mov	r0, r5
 800433c:	f7fc ffe6 	bl	800130c <reset_kf_state>
	*extrapolation_rolling_memory = EMPTY_MEMORY;
 8004340:	22b0      	movs	r2, #176	; 0xb0
 8004342:	2100      	movs	r1, #0
 8004344:	4638      	mov	r0, r7
 8004346:	f00e fc7e 	bl	8012c46 <memset>
	select_noise_models(kf_state, flight_phase_detection, environment,
 800434a:	463b      	mov	r3, r7
 800434c:	4622      	mov	r2, r4
 800434e:	4631      	mov	r1, r6
 8004350:	4628      	mov	r0, r5
			extrapolation_rolling_memory);
}
 8004352:	ecbd 8b02 	vpop	{d8}
 8004356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	select_noise_models(kf_state, flight_phase_detection, environment,
 800435a:	f7fd b997 	b.w	800168c <select_noise_models>
	...

08004360 <vTaskStateEst>:
void vTaskStateEst(void *argument) {
 8004360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004364:	ed2d 8b04 	vpush	{d8-d9}
 8004368:	f2ad 5dac 	subw	sp, sp, #1452	; 0x5ac
	flight_phase_detection_t flight_phase_detection = { 0 };
 800436c:	2600      	movs	r6, #0
	float sum_press = 0;
 800436e:	ed9f 8a96 	vldr	s16, [pc, #600]	; 80045c8 <vTaskStateEst+0x268>
	init_env(&env);
 8004372:	ad12      	add	r5, sp, #72	; 0x48
	uint16_t calibrate_count = 0;
 8004374:	4634      	mov	r4, r6
	float average_press = 0;
 8004376:	eef0 9a48 	vmov.f32	s19, s16
			update_state_est_data(&state_est_data_global, &kf_state);
 800437a:	f8df 8280 	ldr.w	r8, [pc, #640]	; 80045fc <vTaskStateEst+0x29c>
	init_env(&env);
 800437e:	4628      	mov	r0, r5
	float sum_temp = 0;
 8004380:	eef0 8a48 	vmov.f32	s17, s16
	init_env(&env);
 8004384:	f7fc fe64 	bl	8001050 <init_env>
	state_est_meas_t state_est_meas = { 0 };
 8004388:	2278      	movs	r2, #120	; 0x78
 800438a:	2100      	movs	r1, #0
 800438c:	a816      	add	r0, sp, #88	; 0x58
 800438e:	f00e fc5a 	bl	8012c46 <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 8004392:	2278      	movs	r2, #120	; 0x78
 8004394:	2100      	movs	r1, #0
 8004396:	a834      	add	r0, sp, #208	; 0xd0
 8004398:	f00e fc55 	bl	8012c46 <memset>
	reset_kf_state(&kf_state);
 800439c:	a87f      	add	r0, sp, #508	; 0x1fc
 800439e:	f7fc ffb5 	bl	800130c <reset_kf_state>
	extrapolation_rolling_memory_t extrapolation_rolling_memory = { 0 };
 80043a2:	22b0      	movs	r2, #176	; 0xb0
 80043a4:	2100      	movs	r1, #0
 80043a6:	a852      	add	r0, sp, #328	; 0x148
 80043a8:	f00e fc4d 	bl	8012c46 <memset>
	reset_flight_phase_detection(&flight_phase_detection);
 80043ac:	a80f      	add	r0, sp, #60	; 0x3c
	flight_phase_detection_t flight_phase_detection = { 0 };
 80043ae:	9611      	str	r6, [sp, #68]	; 0x44
	float average_temp = 0;
 80043b0:	eeb0 9a48 	vmov.f32	s18, s16
	flight_phase_detection_t flight_phase_detection = { 0 };
 80043b4:	e9cd 660f 	strd	r6, r6, [sp, #60]	; 0x3c
	reset_flight_phase_detection(&flight_phase_detection);
 80043b8:	f7fc ffa0 	bl	80012fc <reset_flight_phase_detection>
	command_e telemetry_command = IDLE_COMMAND;
 80043bc:	239b      	movs	r3, #155	; 0x9b
	select_noise_models(&kf_state, &flight_phase_detection, &env,
 80043be:	462a      	mov	r2, r5
 80043c0:	a90f      	add	r1, sp, #60	; 0x3c
	command_e telemetry_command = IDLE_COMMAND;
 80043c2:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
	select_noise_models(&kf_state, &flight_phase_detection, &env,
 80043c6:	a87f      	add	r0, sp, #508	; 0x1fc
 80043c8:	ab52      	add	r3, sp, #328	; 0x148
 80043ca:	f7fd f95f 	bl	800168c <select_noise_models>
	osDelay(900);
 80043ce:	f44f 7061 	mov.w	r0, #900	; 0x384
 80043d2:	f00b fa3f 	bl	800f854 <osDelay>
	tick_count = osKernelGetTickCount();
 80043d6:	f00b f9cf 	bl	800f778 <osKernelGetTickCount>
 80043da:	4607      	mov	r7, r0
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 80043dc:	f00b f9e0 	bl	800f7a0 <osKernelGetTickFreq>
 80043e0:	2364      	movs	r3, #100	; 0x64
 80043e2:	fbb0 f3f3 	udiv	r3, r0, r3
	uint32_t reset_counter = 0;
 80043e6:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
		tick_count += tick_update;
 80043ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 80043ec:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
 80043f0:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8004600 <vTaskStateEst+0x2a0>
		tick_count += tick_update;
 80043f4:	441f      	add	r7, r3
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 80043f6:	4875      	ldr	r0, [pc, #468]	; (80045cc <vTaskStateEst+0x26c>)
 80043f8:	2301      	movs	r3, #1
 80043fa:	4649      	mov	r1, r9
 80043fc:	f7fd fcf9 	bl	8001df2 <ReadMutex>
		if (flight_phase_detection.flight_phase == IDLE
 8004400:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004404:	2b01      	cmp	r3, #1
 8004406:	d10d      	bne.n	8004424 <vTaskStateEst+0xc4>
				&& global_telemetry_command == CALIBRATE_SENSORS) {
 8004408:	f899 3000 	ldrb.w	r3, [r9]
 800440c:	2b49      	cmp	r3, #73	; 0x49
 800440e:	d109      	bne.n	8004424 <vTaskStateEst+0xc4>
			resetStateEstimation(&kf_state, &flight_phase_detection, &env,
 8004410:	eef0 0a49 	vmov.f32	s1, s18
 8004414:	ab52      	add	r3, sp, #328	; 0x148
 8004416:	eeb0 0a69 	vmov.f32	s0, s19
 800441a:	462a      	mov	r2, r5
 800441c:	a90f      	add	r1, sp, #60	; 0x3c
 800441e:	a87f      	add	r0, sp, #508	; 0x1fc
 8004420:	f7ff ff70 	bl	8004304 <resetStateEstimation>
		if (reset_counter > 30 * STATE_ESTIMATION_FREQUENCY && !was_reset) {
 8004424:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004428:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800442a:	429a      	cmp	r2, r3
 800442c:	d90b      	bls.n	8004446 <vTaskStateEst+0xe6>
 800442e:	b956      	cbnz	r6, 8004446 <vTaskStateEst+0xe6>
			was_reset = true;
 8004430:	2601      	movs	r6, #1
			resetStateEstimation(&kf_state, &flight_phase_detection, &env,
 8004432:	eef0 0a49 	vmov.f32	s1, s18
 8004436:	eeb0 0a69 	vmov.f32	s0, s19
 800443a:	ab52      	add	r3, sp, #328	; 0x148
 800443c:	462a      	mov	r2, r5
 800443e:	a90f      	add	r1, sp, #60	; 0x3c
 8004440:	a87f      	add	r0, sp, #508	; 0x1fc
 8004442:	f7ff ff5f 	bl	8004304 <resetStateEstimation>
		reset_counter++;
 8004446:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 8004448:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8004604 <vTaskStateEst+0x2a4>
		reset_counter++;
 800444c:	3301      	adds	r3, #1
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 800444e:	4a60      	ldr	r2, [pc, #384]	; (80045d0 <vTaskStateEst+0x270>)
 8004450:	4659      	mov	r1, fp
 8004452:	4860      	ldr	r0, [pc, #384]	; (80045d4 <vTaskStateEst+0x274>)
		reset_counter++;
 8004454:	930c      	str	r3, [sp, #48]	; 0x30
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 8004456:	2301      	movs	r3, #1
		ReadMutexStateEst(&sb2_mutex, &sb2_baro, &sb2_imu, &state_est_meas, 2);
 8004458:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8004608 <vTaskStateEst+0x2a8>
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	ab16      	add	r3, sp, #88	; 0x58
 8004460:	f7fd fcde 	bl	8001e20 <ReadMutexStateEst>
		ReadMutexStateEst(&sb2_mutex, &sb2_baro, &sb2_imu, &state_est_meas, 2);
 8004464:	2302      	movs	r3, #2
 8004466:	4a5c      	ldr	r2, [pc, #368]	; (80045d8 <vTaskStateEst+0x278>)
 8004468:	4651      	mov	r1, sl
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	ab16      	add	r3, sp, #88	; 0x58
 800446e:	485b      	ldr	r0, [pc, #364]	; (80045dc <vTaskStateEst+0x27c>)
 8004470:	f7fd fcd6 	bl	8001e20 <ReadMutexStateEst>
		ReadMutexStateEst(&sb3_mutex, &sb3_baro, &sb3_imu, &state_est_meas, 3);
 8004474:	f8df 9194 	ldr.w	r9, [pc, #404]	; 800460c <vTaskStateEst+0x2ac>
 8004478:	2303      	movs	r3, #3
 800447a:	4a59      	ldr	r2, [pc, #356]	; (80045e0 <vTaskStateEst+0x280>)
 800447c:	4649      	mov	r1, r9
 800447e:	4859      	ldr	r0, [pc, #356]	; (80045e4 <vTaskStateEst+0x284>)
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	ab16      	add	r3, sp, #88	; 0x58
 8004484:	f7fd fccc 	bl	8001e20 <ReadMutexStateEst>
		if (flight_phase_detection.flight_phase == IDLE) {
 8004488:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800448c:	2b01      	cmp	r3, #1
 800448e:	d130      	bne.n	80044f2 <vTaskStateEst+0x192>
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 8004490:	f8da 2000 	ldr.w	r2, [sl]
			calibrate_count += 3;
 8004494:	3403      	adds	r4, #3
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 8004496:	f8db 3000 	ldr.w	r3, [fp]
					+ sb3_baro.temperature)) / 100;
 800449a:	eddf 6a53 	vldr	s13, [pc, #332]	; 80045e8 <vTaskStateEst+0x288>
			calibrate_count += 3;
 800449e:	b2a4      	uxth	r4, r4
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 80044a0:	4413      	add	r3, r2
					+ sb3_baro.pressure);
 80044a2:	f8d9 2000 	ldr.w	r2, [r9]
			if (calibrate_count > 150) {
 80044a6:	2c96      	cmp	r4, #150	; 0x96
					+ sb3_baro.pressure);
 80044a8:	4413      	add	r3, r2
			sum_temp += ((float) (sb1_baro.temperature + sb2_baro.temperature
 80044aa:	f8da 2004 	ldr.w	r2, [sl, #4]
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 80044ae:	ee07 3a90 	vmov	s15, r3
			sum_temp += ((float) (sb1_baro.temperature + sb2_baro.temperature
 80044b2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80044b6:	4413      	add	r3, r2
					+ sb3_baro.temperature)) / 100;
 80044b8:	f8d9 2004 	ldr.w	r2, [r9, #4]
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 80044bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
					+ sb3_baro.temperature)) / 100;
 80044c0:	4413      	add	r3, r2
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 80044c2:	ee38 8a27 	vadd.f32	s16, s16, s15
			sum_temp += ((float) (sb1_baro.temperature + sb2_baro.temperature
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
					+ sb3_baro.temperature)) / 100;
 80044ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			sum_temp += ((float) (sb1_baro.temperature + sb2_baro.temperature
 80044d2:	ee78 8a87 	vadd.f32	s17, s17, s14
			if (calibrate_count > 150) {
 80044d6:	d90c      	bls.n	80044f2 <vTaskStateEst+0x192>
				average_press = sum_press / (float) calibrate_count;
 80044d8:	ee07 4a90 	vmov	s15, r4
				calibrate_count = 0;
 80044dc:	2400      	movs	r4, #0
				average_press = sum_press / (float) calibrate_count;
 80044de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e2:	eec8 9a27 	vdiv.f32	s19, s16, s15
				sum_press = 0;
 80044e6:	ed9f 8a38 	vldr	s16, [pc, #224]	; 80045c8 <vTaskStateEst+0x268>
				average_temp = sum_temp / (float) calibrate_count;
 80044ea:	ee88 9aa7 	vdiv.f32	s18, s17, s15
				sum_temp = 0;
 80044ee:	eef0 8a48 	vmov.f32	s17, s16
		process_measurements(tick_count, &kf_state, &state_est_meas,
 80044f2:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 80044f6:	230c      	movs	r3, #12
 80044f8:	aa0f      	add	r2, sp, #60	; 0x3c
 80044fa:	493c      	ldr	r1, [pc, #240]	; (80045ec <vTaskStateEst+0x28c>)
 80044fc:	483c      	ldr	r0, [pc, #240]	; (80045f0 <vTaskStateEst+0x290>)
 80044fe:	f7fd fc78 	bl	8001df2 <ReadMutex>
		process_measurements(tick_count, &kf_state, &state_est_meas,
 8004502:	ab34      	add	r3, sp, #208	; 0xd0
 8004504:	aa16      	add	r2, sp, #88	; 0x58
 8004506:	a97f      	add	r1, sp, #508	; 0x1fc
 8004508:	4638      	mov	r0, r7
 800450a:	e9cd 5900 	strd	r5, r9, [sp]
 800450e:	f7fd f983 	bl	8001818 <process_measurements>
		select_noise_models(&kf_state, &flight_phase_detection, &env,
 8004512:	464b      	mov	r3, r9
 8004514:	462a      	mov	r2, r5
 8004516:	a90f      	add	r1, sp, #60	; 0x3c
 8004518:	a87f      	add	r0, sp, #508	; 0x1fc
 800451a:	f7fd f8b7 	bl	800168c <select_noise_models>
		kf_prediction(&kf_state);
 800451e:	a87f      	add	r0, sp, #508	; 0x1fc
 8004520:	f7fc ff76 	bl	8001410 <kf_prediction>
		if (kf_state.num_z_active > 0) {
 8004524:	f8dd 340c 	ldr.w	r3, [sp, #1036]	; 0x40c
 8004528:	2b00      	cmp	r3, #0
 800452a:	dd46      	ble.n	80045ba <vTaskStateEst+0x25a>
			select_kf_observation_matrices(&kf_state);
 800452c:	a87f      	add	r0, sp, #508	; 0x1fc
 800452e:	f7fc ffc0 	bl	80014b2 <select_kf_observation_matrices>
			kf_update(&kf_state);
 8004532:	a87f      	add	r0, sp, #508	; 0x1fc
 8004534:	f7fc ffe8 	bl	8001508 <kf_update>
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 8004538:	2278      	movs	r2, #120	; 0x78
 800453a:	a916      	add	r1, sp, #88	; 0x58
 800453c:	a834      	add	r0, sp, #208	; 0xd0
 800453e:	f00e fb77 	bl	8012c30 <memcpy>
		if (AcquireMutex(&state_est_mutex) == osOK) {
 8004542:	482c      	ldr	r0, [pc, #176]	; (80045f4 <vTaskStateEst+0x294>)
 8004544:	f7fd fc47 	bl	8001dd6 <AcquireMutex>
 8004548:	b930      	cbnz	r0, 8004558 <vTaskStateEst+0x1f8>
			update_state_est_data(&state_est_data_global, &kf_state);
 800454a:	4640      	mov	r0, r8
 800454c:	a97f      	add	r1, sp, #508	; 0x1fc
 800454e:	f7fd f87b 	bl	8001648 <update_state_est_data>
			ReleaseMutex(&state_est_mutex);
 8004552:	4828      	ldr	r0, [pc, #160]	; (80045f4 <vTaskStateEst+0x294>)
 8004554:	f7fd fc4a 	bl	8001dec <ReleaseMutex>
		UsbPrint("[DBG] Height: %d; Velocity: %d; t: %lu\n",
 8004558:	463b      	mov	r3, r7
 800455a:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 800455e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8004562:	4825      	ldr	r0, [pc, #148]	; (80045f8 <vTaskStateEst+0x298>)
 8004564:	f7fd fdc0 	bl	80020e8 <UsbPrint>
		if (AcquireMutex(&fsm_mutex) == osOK) {
 8004568:	4821      	ldr	r0, [pc, #132]	; (80045f0 <vTaskStateEst+0x290>)
 800456a:	f7fd fc34 	bl	8001dd6 <AcquireMutex>
 800456e:	b940      	cbnz	r0, 8004582 <vTaskStateEst+0x222>
			global_env = env;
 8004570:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8004610 <vTaskStateEst+0x2b0>
 8004574:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004578:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			ReleaseMutex(&fsm_mutex);
 800457c:	481c      	ldr	r0, [pc, #112]	; (80045f0 <vTaskStateEst+0x290>)
 800457e:	f7fd fc35 	bl	8001dec <ReleaseMutex>
		logEstimatorVar(osKernelGetTickCount(), state_est_data_global);
 8004582:	f00b f8f9 	bl	800f778 <osKernelGetTickCount>
 8004586:	f8df e08c 	ldr.w	lr, [pc, #140]	; 8004614 <vTaskStateEst+0x2b4>
 800458a:	4681      	mov	r9, r0
 800458c:	46ec      	mov	ip, sp
 800458e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004592:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004596:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800459a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800459e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80045a2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80045a6:	f1ae 032c 	sub.w	r3, lr, #44	; 0x2c
 80045aa:	4648      	mov	r0, r9
 80045ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045ae:	f7fd fd27 	bl	8002000 <logEstimatorVar>
		osDelayUntil(tick_count);
 80045b2:	4638      	mov	r0, r7
 80045b4:	f00b f968 	bl	800f888 <osDelayUntil>
		tick_count += tick_update;
 80045b8:	e717      	b.n	80043ea <vTaskStateEst+0x8a>
			memcpy(kf_state.x_est, kf_state.x_priori,
 80045ba:	aacc      	add	r2, sp, #816	; 0x330
 80045bc:	abc0      	add	r3, sp, #768	; 0x300
 80045be:	ca07      	ldmia	r2, {r0, r1, r2}
 80045c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80045c4:	e7b8      	b.n	8004538 <vTaskStateEst+0x1d8>
 80045c6:	bf00      	nop
 80045c8:	00000000 	.word	0x00000000
 80045cc:	2400cec4 	.word	0x2400cec4
 80045d0:	24000254 	.word	0x24000254
 80045d4:	240110cc 	.word	0x240110cc
 80045d8:	24000270 	.word	0x24000270
 80045dc:	2401f828 	.word	0x2401f828
 80045e0:	2400028c 	.word	0x2400028c
 80045e4:	24013248 	.word	0x24013248
 80045e8:	42c80000 	.word	0x42c80000
 80045ec:	2400023c 	.word	0x2400023c
 80045f0:	2400a98c 	.word	0x2400a98c
 80045f4:	24017360 	.word	0x24017360
 80045f8:	080151da 	.word	0x080151da
 80045fc:	2400029c 	.word	0x2400029c
 8004600:	2401738c 	.word	0x2401738c
 8004604:	24000248 	.word	0x24000248
 8004608:	24000264 	.word	0x24000264
 800460c:	24000280 	.word	0x24000280
 8004610:	2400022c 	.word	0x2400022c
 8004614:	240002a8 	.word	0x240002a8

08004618 <HAL_UART_RxCpltCallback>:
		osDelayUntil(tick_count);
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart == &huart7) {
 8004618:	4b16      	ldr	r3, [pc, #88]	; (8004674 <HAL_UART_RxCpltCallback+0x5c>)
 800461a:	4283      	cmp	r3, r0
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800461c:	b430      	push	{r4, r5}
	if (huart == &huart7) {
 800461e:	d126      	bne.n	800466e <HAL_UART_RxCpltCallback+0x56>

		static uint8_t buffer[4];
		buffer[uart_counter] = local_command_rx;
 8004620:	4915      	ldr	r1, [pc, #84]	; (8004678 <HAL_UART_RxCpltCallback+0x60>)
 8004622:	4a16      	ldr	r2, [pc, #88]	; (800467c <HAL_UART_RxCpltCallback+0x64>)
 8004624:	680b      	ldr	r3, [r1, #0]
 8004626:	7814      	ldrb	r4, [r2, #0]
 8004628:	4a15      	ldr	r2, [pc, #84]	; (8004680 <HAL_UART_RxCpltCallback+0x68>)
 800462a:	54d4      	strb	r4, [r2, r3]
		uart_counter++;
 800462c:	3301      	adds	r3, #1
		if (uart_counter == 4) {
 800462e:	2b04      	cmp	r3, #4
		uart_counter++;
 8004630:	600b      	str	r3, [r1, #0]
		if (uart_counter == 4) {
 8004632:	d10e      	bne.n	8004652 <HAL_UART_RxCpltCallback+0x3a>
			uint8_t succesful = 1;
			for (int i = 1; i < 4; i++)
				if (buffer[0] != buffer[i])
 8004634:	7810      	ldrb	r0, [r2, #0]
 8004636:	7853      	ldrb	r3, [r2, #1]
					succesful = 0;
 8004638:	1a1d      	subs	r5, r3, r0
 800463a:	426b      	negs	r3, r5
 800463c:	416b      	adcs	r3, r5
				if (buffer[0] != buffer[i])
 800463e:	7895      	ldrb	r5, [r2, #2]
 8004640:	78d2      	ldrb	r2, [r2, #3]
					succesful = 0;
 8004642:	4285      	cmp	r5, r0
 8004644:	bf18      	it	ne
 8004646:	2300      	movne	r3, #0
				if (buffer[0] != buffer[i])
 8004648:	4282      	cmp	r2, r0
 800464a:	f04f 0200 	mov.w	r2, #0
			uart_counter = 0;
 800464e:	600a      	str	r2, [r1, #0]
				if (buffer[0] != buffer[i])
 8004650:	d005      	beq.n	800465e <HAL_UART_RxCpltCallback+0x46>
				new_command = true;
				local_command = local_command_rx;
			}
		}

		HAL_UART_Receive_IT(huart, (uint8_t*) &local_command_rx, 1);
 8004652:	2201      	movs	r2, #1
 8004654:	4909      	ldr	r1, [pc, #36]	; (800467c <HAL_UART_RxCpltCallback+0x64>)
 8004656:	4807      	ldr	r0, [pc, #28]	; (8004674 <HAL_UART_RxCpltCallback+0x5c>)
	}
}
 8004658:	bc30      	pop	{r4, r5}
		HAL_UART_Receive_IT(huart, (uint8_t*) &local_command_rx, 1);
 800465a:	f006 be9d 	b.w	800b398 <HAL_UART_Receive_IT>
			if (succesful) {
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f7      	beq.n	8004652 <HAL_UART_RxCpltCallback+0x3a>
				new_command = true;
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <HAL_UART_RxCpltCallback+0x6c>)
 8004664:	2201      	movs	r2, #1
 8004666:	701a      	strb	r2, [r3, #0]
				local_command = local_command_rx;
 8004668:	4b07      	ldr	r3, [pc, #28]	; (8004688 <HAL_UART_RxCpltCallback+0x70>)
 800466a:	701c      	strb	r4, [r3, #0]
 800466c:	e7f1      	b.n	8004652 <HAL_UART_RxCpltCallback+0x3a>
}
 800466e:	bc30      	pop	{r4, r5}
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	2400aa24 	.word	0x2400aa24
 8004678:	24000344 	.word	0x24000344
 800467c:	2401fce5 	.word	0x2401fce5
 8004680:	2400033c 	.word	0x2400033c
 8004684:	24000340 	.word	0x24000340
 8004688:	2401fce4 	.word	0x2401fce4

0800468c <calculate_checksum>:

uint8_t calculate_checksum(telemetry_t *cnf) {
 800468c:	f100 025c 	add.w	r2, r0, #92	; 0x5c
	uint8_t cs = 0;
 8004690:	2300      	movs	r3, #0
	uint8_t *data;
	data = (uint8_t*) cnf;
	for (int i = 0; i < sizeof(telemetry_t); i++) {
 8004692:	4290      	cmp	r0, r2
 8004694:	d102      	bne.n	800469c <calculate_checksum+0x10>
		cs += *data++;
	}
	return (255 - cs);
 8004696:	43d8      	mvns	r0, r3
}
 8004698:	b2c0      	uxtb	r0, r0
 800469a:	4770      	bx	lr
		cs += *data++;
 800469c:	f810 1b01 	ldrb.w	r1, [r0], #1
 80046a0:	440b      	add	r3, r1
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	e7f5      	b.n	8004692 <calculate_checksum+0x6>
	...

080046a8 <vTaskXbee>:
void vTaskXbee(void *argument) {
 80046a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	telemetry_t telemetry_send = { 0 };
 80046ac:	225c      	movs	r2, #92	; 0x5c
void vTaskXbee(void *argument) {
 80046ae:	b0af      	sub	sp, #188	; 0xbc
	telemetry_t telemetry_send = { 0 };
 80046b0:	2100      	movs	r1, #0
	local_command_rx = IDLE_COMMAND;
 80046b2:	4f5b      	ldr	r7, [pc, #364]	; (8004820 <vTaskXbee+0x178>)
	telemetry_t telemetry_send = { 0 };
 80046b4:	eb0d 0002 	add.w	r0, sp, r2
	local_command = IDLE_COMMAND;
 80046b8:	4c5a      	ldr	r4, [pc, #360]	; (8004824 <vTaskXbee+0x17c>)
	telemetry_t telemetry_send = { 0 };
 80046ba:	f00e fac4 	bl	8012c46 <memset>
	telemetry_send.flight_phase = IDLE;
 80046be:	2301      	movs	r3, #1
	tick_update_slow = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 80046c0:	f04f 080a 	mov.w	r8, #10
	tick_update_fast = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ_HIGH;
 80046c4:	f04f 0964 	mov.w	r9, #100	; 0x64
	telemetry_send.flight_phase = IDLE;
 80046c8:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
	telemetry_send.startbyte = 0x17;
 80046cc:	2317      	movs	r3, #23
	osDelay(700);
 80046ce:	f44f 702f 	mov.w	r0, #700	; 0x2bc
	bool fast_sampling = false;
 80046d2:	2500      	movs	r5, #0
	telemetry_send.startbyte = 0x17;
 80046d4:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	local_command_rx = IDLE_COMMAND;
 80046d8:	239b      	movs	r3, #155	; 0x9b
		HAL_UART_Receive_IT(&huart7, (uint8_t*) &local_command_rx, 1);
 80046da:	f8df a190 	ldr.w	sl, [pc, #400]	; 800486c <vTaskXbee+0x1c4>
	local_command_rx = IDLE_COMMAND;
 80046de:	703b      	strb	r3, [r7, #0]
	local_command = IDLE_COMMAND;
 80046e0:	7023      	strb	r3, [r4, #0]
	osDelay(700);
 80046e2:	f00b f8b7 	bl	800f854 <osDelay>
		ReadMutex(&sb1_mutex, &sb1_baro, &local_sb_data.baro, sizeof(sb1_baro));
 80046e6:	f8df b188 	ldr.w	fp, [pc, #392]	; 8004870 <vTaskXbee+0x1c8>
	tick_update_slow = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 80046ea:	f00b f859 	bl	800f7a0 <osKernelGetTickFreq>
 80046ee:	fbb0 f8f8 	udiv	r8, r0, r8
	tick_update_fast = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ_HIGH;
 80046f2:	f00b f855 	bl	800f7a0 <osKernelGetTickFreq>
 80046f6:	fbb0 f9f9 	udiv	r9, r0, r9
	tick_count = osKernelGetTickCount();
 80046fa:	f00b f83d 	bl	800f778 <osKernelGetTickCount>
 80046fe:	4606      	mov	r6, r0
		if (fast_sampling) {
 8004700:	2d00      	cmp	r5, #0
 8004702:	f000 8089 	beq.w	8004818 <vTaskXbee+0x170>
			tick_count += tick_update_fast;
 8004706:	444e      	add	r6, r9
		HAL_UART_Receive_IT(&huart7, (uint8_t*) &local_command_rx, 1);
 8004708:	2201      	movs	r2, #1
 800470a:	4945      	ldr	r1, [pc, #276]	; (8004820 <vTaskXbee+0x178>)
 800470c:	4650      	mov	r0, sl
 800470e:	f006 fe43 	bl	800b398 <HAL_UART_Receive_IT>
		UsbPrint("[Telemetry] ts: %u, Received Commmand: %u, Rx_buffer; %u\n",
 8004712:	783b      	ldrb	r3, [r7, #0]
 8004714:	7822      	ldrb	r2, [r4, #0]
 8004716:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8004718:	4843      	ldr	r0, [pc, #268]	; (8004828 <vTaskXbee+0x180>)
 800471a:	f7fd fce5 	bl	80020e8 <UsbPrint>
		if (AcquireMutex(&command_mutex) == osOK) {
 800471e:	4843      	ldr	r0, [pc, #268]	; (800482c <vTaskXbee+0x184>)
 8004720:	f7fd fb59 	bl	8001dd6 <AcquireMutex>
 8004724:	b928      	cbnz	r0, 8004732 <vTaskXbee+0x8a>
			global_telemetry_command = local_command;
 8004726:	7822      	ldrb	r2, [r4, #0]
 8004728:	4b41      	ldr	r3, [pc, #260]	; (8004830 <vTaskXbee+0x188>)
			ReleaseMutex(&command_mutex);
 800472a:	4840      	ldr	r0, [pc, #256]	; (800482c <vTaskXbee+0x184>)
			global_telemetry_command = local_command;
 800472c:	701a      	strb	r2, [r3, #0]
			ReleaseMutex(&command_mutex);
 800472e:	f7fd fb5d 	bl	8001dec <ReleaseMutex>
		if (local_command == TELEMETRY_HIGH_SAMPLING) {
 8004732:	7823      	ldrb	r3, [r4, #0]
 8004734:	2b0d      	cmp	r3, #13
 8004736:	d071      	beq.n	800481c <vTaskXbee+0x174>
			fast_sampling = false;
 8004738:	2bc5      	cmp	r3, #197	; 0xc5
 800473a:	bf08      	it	eq
 800473c:	2500      	moveq	r5, #0
		if (telemetry_send.flight_phase == RECOVERY) {
 800473e:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
			fast_sampling = false;
 8004742:	2b06      	cmp	r3, #6
		if (new_command) {
 8004744:	4b3b      	ldr	r3, [pc, #236]	; (8004834 <vTaskXbee+0x18c>)
 8004746:	781a      	ldrb	r2, [r3, #0]
			fast_sampling = false;
 8004748:	bf08      	it	eq
 800474a:	2500      	moveq	r5, #0
		if (new_command) {
 800474c:	b11a      	cbz	r2, 8004756 <vTaskXbee+0xae>
			local_command = IDLE_COMMAND;
 800474e:	229b      	movs	r2, #155	; 0x9b
 8004750:	7022      	strb	r2, [r4, #0]
			new_command = false;
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
		ReadMutex(&sb1_mutex, &sb1_baro, &local_sb_data.baro, sizeof(sb1_baro));
 8004756:	466a      	mov	r2, sp
 8004758:	230c      	movs	r3, #12
 800475a:	4937      	ldr	r1, [pc, #220]	; (8004838 <vTaskXbee+0x190>)
 800475c:	4658      	mov	r0, fp
 800475e:	f7fd fb48 	bl	8001df2 <ReadMutex>
		ReadMutex(&sb1_mutex, &sb1_imu, &local_sb_data.imu, sizeof(sb1_imu));
 8004762:	aa03      	add	r2, sp, #12
 8004764:	2310      	movs	r3, #16
 8004766:	4935      	ldr	r1, [pc, #212]	; (800483c <vTaskXbee+0x194>)
 8004768:	4658      	mov	r0, fp
 800476a:	f7fd fb42 	bl	8001df2 <ReadMutex>
		telemetry_send.sb_data.pressure = local_sb_data.baro.pressure;
 800476e:	9b00      	ldr	r3, [sp, #0]
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data,
 8004770:	aa08      	add	r2, sp, #32
 8004772:	4933      	ldr	r1, [pc, #204]	; (8004840 <vTaskXbee+0x198>)
		telemetry_send.sb_data.pressure = local_sb_data.baro.pressure;
 8004774:	9318      	str	r3, [sp, #96]	; 0x60
		telemetry_send.sb_data.temperature = local_sb_data.baro.temperature;
 8004776:	9b01      	ldr	r3, [sp, #4]
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data,
 8004778:	4832      	ldr	r0, [pc, #200]	; (8004844 <vTaskXbee+0x19c>)
		telemetry_send.sb_data.temperature = local_sb_data.baro.temperature;
 800477a:	9319      	str	r3, [sp, #100]	; 0x64
		telemetry_send.sb_data.acc_x = local_sb_data.imu.acc_x;
 800477c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8004780:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
		telemetry_send.sb_data.acc_y = local_sb_data.imu.acc_y;
 8004784:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8004788:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		telemetry_send.sb_data.acc_z = local_sb_data.imu.acc_z;
 800478c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8004790:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
		telemetry_send.sb_data.gyro_x = local_sb_data.imu.gyro_x;
 8004794:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004798:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
		telemetry_send.sb_data.gyro_y = local_sb_data.imu.gyro_y;
 800479c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80047a0:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
		telemetry_send.sb_data.gyro_z = local_sb_data.imu.gyro_z;
 80047a4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80047a8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data,
 80047ac:	233c      	movs	r3, #60	; 0x3c
 80047ae:	f7fd fb20 	bl	8001df2 <ReadMutex>
		ReadMutex(&motor_mutex, &global_airbrake_extension,
 80047b2:	aa2a      	add	r2, sp, #168	; 0xa8
 80047b4:	2304      	movs	r3, #4
 80047b6:	4924      	ldr	r1, [pc, #144]	; (8004848 <vTaskXbee+0x1a0>)
 80047b8:	4824      	ldr	r0, [pc, #144]	; (800484c <vTaskXbee+0x1a4>)
 80047ba:	f7fd fb1a 	bl	8001df2 <ReadMutex>
		ReadMutex(&fsm_mutex, &global_flight_phase_detection.flight_phase,
 80047be:	aa2b      	add	r2, sp, #172	; 0xac
 80047c0:	2301      	movs	r3, #1
 80047c2:	4923      	ldr	r1, [pc, #140]	; (8004850 <vTaskXbee+0x1a8>)
 80047c4:	4823      	ldr	r0, [pc, #140]	; (8004854 <vTaskXbee+0x1ac>)
 80047c6:	f7fd fb14 	bl	8001df2 <ReadMutex>
		ReadMutex(&gps_mutex, &globalGPS, &telemetry_send.gps,
 80047ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80047cc:	2324      	movs	r3, #36	; 0x24
 80047ce:	4922      	ldr	r1, [pc, #136]	; (8004858 <vTaskXbee+0x1b0>)
 80047d0:	4822      	ldr	r0, [pc, #136]	; (800485c <vTaskXbee+0x1b4>)
 80047d2:	f7fd fb0e 	bl	8001df2 <ReadMutex>
		ReadMutex(&battery_mutex, &global_battery_data, &telemetry_send.battery,
 80047d6:	aa1d      	add	r2, sp, #116	; 0x74
 80047d8:	4921      	ldr	r1, [pc, #132]	; (8004860 <vTaskXbee+0x1b8>)
 80047da:	2306      	movs	r3, #6
 80047dc:	4821      	ldr	r0, [pc, #132]	; (8004864 <vTaskXbee+0x1bc>)
 80047de:	f7fd fb08 	bl	8001df2 <ReadMutex>
		telemetry_send.height = state_est_data.position_world[2];
 80047e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047e4:	9328      	str	r3, [sp, #160]	; 0xa0
		telemetry_send.velocity = state_est_data.velocity_world[2];
 80047e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80047e8:	9329      	str	r3, [sp, #164]	; 0xa4
		telemetry_send.ts = osKernelGetTickCount();
 80047ea:	f00a ffc5 	bl	800f778 <osKernelGetTickCount>
 80047ee:	902c      	str	r0, [sp, #176]	; 0xb0
		telemetry_send.checksum = calculate_checksum(&telemetry_send);
 80047f0:	a817      	add	r0, sp, #92	; 0x5c
 80047f2:	f7ff ff4b 	bl	800468c <calculate_checksum>
		HAL_UART_Transmit_DMA(&huart7, (uint8_t*) &telemetry_send,
 80047f6:	225c      	movs	r2, #92	; 0x5c
		telemetry_send.checksum = calculate_checksum(&telemetry_send);
 80047f8:	f88d 00b4 	strb.w	r0, [sp, #180]	; 0xb4
		HAL_UART_Transmit_DMA(&huart7, (uint8_t*) &telemetry_send,
 80047fc:	4650      	mov	r0, sl
 80047fe:	eb0d 0102 	add.w	r1, sp, r2
 8004802:	f006 fe41 	bl	800b488 <HAL_UART_Transmit_DMA>
		telemetry_send.checksum = 0;
 8004806:	2300      	movs	r3, #0
		uart_counter = 0;
 8004808:	4a17      	ldr	r2, [pc, #92]	; (8004868 <vTaskXbee+0x1c0>)
		osDelayUntil(tick_count);
 800480a:	4630      	mov	r0, r6
		telemetry_send.checksum = 0;
 800480c:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
		uart_counter = 0;
 8004810:	6013      	str	r3, [r2, #0]
		osDelayUntil(tick_count);
 8004812:	f00b f839 	bl	800f888 <osDelayUntil>
		if (fast_sampling) {
 8004816:	e773      	b.n	8004700 <vTaskXbee+0x58>
			tick_count += tick_update_slow;
 8004818:	4446      	add	r6, r8
 800481a:	e775      	b.n	8004708 <vTaskXbee+0x60>
			fast_sampling = true;
 800481c:	2501      	movs	r5, #1
 800481e:	e78e      	b.n	800473e <vTaskXbee+0x96>
 8004820:	2401fce5 	.word	0x2401fce5
 8004824:	2401fce4 	.word	0x2401fce4
 8004828:	08015202 	.word	0x08015202
 800482c:	2400cec4 	.word	0x2400cec4
 8004830:	2401738c 	.word	0x2401738c
 8004834:	24000340 	.word	0x24000340
 8004838:	24000248 	.word	0x24000248
 800483c:	24000254 	.word	0x24000254
 8004840:	2400029c 	.word	0x2400029c
 8004844:	24017360 	.word	0x24017360
 8004848:	2401b4e8 	.word	0x2401b4e8
 800484c:	2400ab28 	.word	0x2400ab28
 8004850:	2400023c 	.word	0x2400023c
 8004854:	2400a98c 	.word	0x2400a98c
 8004858:	24017368 	.word	0x24017368
 800485c:	2401b3f4 	.word	0x2401b3f4
 8004860:	2400ef68 	.word	0x2400ef68
 8004864:	2400aa1c 	.word	0x2400aa1c
 8004868:	24000344 	.word	0x24000344
 800486c:	2400aa24 	.word	0x2400aa24
 8004870:	240110cc 	.word	0x240110cc

08004874 <trcCDCReceive>:
#include "usbd_cdc_if.h"

extern recBuf commandBuffer;

/* The READ function, used in trcStreamingPort.h */
int32_t trcCDCReceive(void *data, uint32_t size, int32_t *NumBytes) {
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t i, diff;

	if (commandBuffer.idx > 0) {
 8004876:	4c13      	ldr	r4, [pc, #76]	; (80048c4 <trcCDCReceive+0x50>)
int32_t trcCDCReceive(void *data, uint32_t size, int32_t *NumBytes) {
 8004878:	4617      	mov	r7, r2
 800487a:	460d      	mov	r5, r1
	if (commandBuffer.idx > 0) {
 800487c:	6822      	ldr	r2, [r4, #0]
 800487e:	4626      	mov	r6, r4
 8004880:	b1ea      	cbz	r2, 80048be <trcCDCReceive+0x4a>
		if (size >= commandBuffer.idx) {
 8004882:	428a      	cmp	r2, r1
 8004884:	d808      	bhi.n	8004898 <trcCDCReceive+0x24>
			// more than what is stored, number of bytes will be .idx
			memcpy(data, commandBuffer.data, commandBuffer.idx);
 8004886:	1d21      	adds	r1, r4, #4
 8004888:	f00e f9d2 	bl	8012c30 <memcpy>
			*NumBytes = commandBuffer.idx;
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	603b      	str	r3, [r7, #0]
			commandBuffer.idx = 0; // Make the buffer ready for a new command
 8004890:	2300      	movs	r3, #0
 8004892:	6023      	str	r3, [r4, #0]
		}
	} else {
		*NumBytes = 0;
	}
	return 0;
}
 8004894:	2000      	movs	r0, #0
 8004896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			diff = commandBuffer.idx - size;
 8004898:	1a54      	subs	r4, r2, r1
			memcpy(data, commandBuffer.data, size);
 800489a:	460a      	mov	r2, r1
 800489c:	1d31      	adds	r1, r6, #4
 800489e:	f00e f9c7 	bl	8012c30 <memcpy>
 80048a2:	1cf2      	adds	r2, r6, #3
 80048a4:	1ceb      	adds	r3, r5, #3
				commandBuffer.data[i] = commandBuffer.data[i + size];
 80048a6:	4269      	negs	r1, r5
 80048a8:	442a      	add	r2, r5
 80048aa:	4433      	add	r3, r6
 80048ac:	4422      	add	r2, r4
 80048ae:	f813 0f01 	ldrb.w	r0, [r3, #1]!
			for (i = 0; i < diff; i++) {
 80048b2:	4293      	cmp	r3, r2
				commandBuffer.data[i] = commandBuffer.data[i + size];
 80048b4:	5458      	strb	r0, [r3, r1]
			for (i = 0; i < diff; i++) {
 80048b6:	d1fa      	bne.n	80048ae <trcCDCReceive+0x3a>
			*NumBytes = size;
 80048b8:	603d      	str	r5, [r7, #0]
			commandBuffer.idx = diff;
 80048ba:	6034      	str	r4, [r6, #0]
 80048bc:	e7ea      	b.n	8004894 <trcCDCReceive+0x20>
		*NumBytes = 0;
 80048be:	603a      	str	r2, [r7, #0]
 80048c0:	e7e8      	b.n	8004894 <trcCDCReceive+0x20>
 80048c2:	bf00      	nop
 80048c4:	24009bc4 	.word	0x24009bc4

080048c8 <trcCDCTransmit>:

/* The WRITE function, used in trcStreamingPort.h */
int32_t trcCDCTransmit(void *data, uint32_t size, int32_t *noOfBytesSent) {
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	460c      	mov	r4, r1
	int32_t result;
	result = CDC_Transmit_FS(data, size);
 80048cc:	b289      	uxth	r1, r1
int32_t trcCDCTransmit(void *data, uint32_t size, int32_t *noOfBytesSent) {
 80048ce:	4615      	mov	r5, r2
	result = CDC_Transmit_FS(data, size);
 80048d0:	f00d ff8e 	bl	80127f0 <CDC_Transmit_FS>
	*noOfBytesSent = size;

	/* Return value should be 0 on success (not sure what the value of USBD_OK is) */
	if (result == USBD_OK)
 80048d4:	3000      	adds	r0, #0
	*noOfBytesSent = size;
 80048d6:	602c      	str	r4, [r5, #0]
	if (result == USBD_OK)
 80048d8:	bf18      	it	ne
 80048da:	2001      	movne	r0, #1
		return 0;
	else
		return -1;
}
 80048dc:	4240      	negs	r0, r0
 80048de:	bd38      	pop	{r3, r4, r5, pc}

080048e0 <prvTraceGetTaskNumberHigh16>:
{
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
}

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 80048e0:	b508      	push	{r3, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 80048e2:	f00d f8e7 	bl	8011ab4 <uxTaskGetTaskNumber>
}
 80048e6:	0c00      	lsrs	r0, r0, #16
 80048e8:	bd08      	pop	{r3, pc}

080048ea <prvTraceSetTaskNumberHigh16>:
{
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
}

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 80048ea:	b538      	push	{r3, r4, r5, lr}
 80048ec:	4604      	mov	r4, r0
 80048ee:	460d      	mov	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 80048f0:	f00d f8e0 	bl	8011ab4 <uxTaskGetTaskNumber>
 80048f4:	b280      	uxth	r0, r0
 80048f6:	ea40 4105 	orr.w	r1, r0, r5, lsl #16
 80048fa:	4620      	mov	r0, r4
}
 80048fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8004900:	f00d b8db 	b.w	8011aba <vTaskSetTaskNumber>

08004904 <prvTraceGetQueueNumberHigh16>:
{
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
}

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 8004904:	b508      	push	{r3, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8004906:	f00c fac1 	bl	8010e8c <uxQueueGetQueueNumber>
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
}
 800490a:	0c00      	lsrs	r0, r0, #16
 800490c:	bd08      	pop	{r3, pc}

0800490e <prvTraceSetQueueNumberHigh16>:
{
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
}

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 800490e:	b538      	push	{r3, r4, r5, lr}
 8004910:	4604      	mov	r4, r0
 8004912:	460d      	mov	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8004914:	f00c faba 	bl	8010e8c <uxQueueGetQueueNumber>
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 8004918:	b280      	uxth	r0, r0
 800491a:	ea40 4105 	orr.w	r1, r0, r5, lsl #16
 800491e:	4620      	mov	r0, r4
}
 8004920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 8004924:	f00c bab4 	b.w	8010e90 <vQueueSetQueueNumber>

08004928 <prvAddTaskToStackMonitor>:
{
	int i;
	int foundEmptySlot = 0;

	// find an empty slot
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 8004928:	2300      	movs	r3, #0
	{
		if (tasksInStackMonitor[i].tcb == NULL)
 800492a:	4a0a      	ldr	r2, [pc, #40]	; (8004954 <prvAddTaskToStackMonitor+0x2c>)
{
 800492c:	b510      	push	{r4, lr}
		if (tasksInStackMonitor[i].tcb == NULL)
 800492e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8004932:	00d9      	lsls	r1, r3, #3
 8004934:	b934      	cbnz	r4, 8004944 <prvAddTaskToStackMonitor+0x1c>
		{
			tasksInStackMonitor[i].tcb = task;
 8004936:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
 800493a:	440a      	add	r2, r1
 800493c:	f04f 33ff 	mov.w	r3, #4294967295
 8004940:	6053      	str	r3, [r2, #4]

	if (foundEmptySlot == 0)
	{
		tasksNotIncluded++;
	}
}
 8004942:	bd10      	pop	{r4, pc}
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 8004944:	3301      	adds	r3, #1
 8004946:	2b0f      	cmp	r3, #15
 8004948:	d1f1      	bne.n	800492e <prvAddTaskToStackMonitor+0x6>
		tasksNotIncluded++;
 800494a:	4a03      	ldr	r2, [pc, #12]	; (8004958 <prvAddTaskToStackMonitor+0x30>)
 800494c:	6813      	ldr	r3, [r2, #0]
 800494e:	3301      	adds	r3, #1
 8004950:	6013      	str	r3, [r2, #0]
}
 8004952:	e7f6      	b.n	8004942 <prvAddTaskToStackMonitor+0x1a>
 8004954:	24000b54 	.word	0x24000b54
 8004958:	24000bcc 	.word	0x24000bcc

0800495c <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
 800495c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
 8004960:	4c13      	ldr	r4, [pc, #76]	; (80049b0 <prvReportStackUsage+0x54>)
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
 8004962:	4f14      	ldr	r7, [pc, #80]	; (80049b4 <prvReportStackUsage+0x58>)
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
 8004964:	6826      	ldr	r6, [r4, #0]
 8004966:	46b8      	mov	r8, r7
		if (tasksInStackMonitor[i].tcb != NULL)
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 800496e:	b180      	cbz	r0, 8004992 <prvReportStackUsage+0x36>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
 8004970:	f00d f8a6 	bl	8011ac0 <uxTaskGetStackHighWaterMark>

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
 8004974:	6821      	ldr	r1, [r4, #0]
 8004976:	00cb      	lsls	r3, r1, #3
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
 8004978:	f858 1031 	ldr.w	r1, [r8, r1, lsl #3]
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
 800497c:	18fa      	adds	r2, r7, r3
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
 800497e:	4443      	add	r3, r8
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
 8004980:	6855      	ldr	r5, [r2, #4]
 8004982:	4285      	cmp	r5, r0
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
 8004984:	bf88      	it	hi
 8004986:	6050      	strhi	r0, [r2, #4]
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
 8004988:	20ea      	movs	r0, #234	; 0xea
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	f000 fd0a 	bl	80053a4 <prvTraceStoreEvent2>
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
 8004990:	2001      	movs	r0, #1
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	220f      	movs	r2, #15
 8004996:	3301      	adds	r3, #1
 8004998:	fb93 f2f2 	sdiv	r2, r3, r2
 800499c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	6023      	str	r3, [r4, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
 80049a4:	b908      	cbnz	r0, 80049aa <prvReportStackUsage+0x4e>
 80049a6:	42b3      	cmp	r3, r6
 80049a8:	d1de      	bne.n	8004968 <prvReportStackUsage+0xc>
}
 80049aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049ae:	bf00      	nop
 80049b0:	2400034c 	.word	0x2400034c
 80049b4:	24000b54 	.word	0x24000b54

080049b8 <TzCtrl>:
 * Task for sending the trace data from the internal buffer to the stream 
 * interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
 * receiving commands from Tracealyzer. Also does some diagnostics.
 ******************************************************************************/
static portTASK_FUNCTION( TzCtrl, pvParameters )
{
 80049b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (tasksNotIncluded > 0)
 80049bc:	4d28      	ldr	r5, [pc, #160]	; (8004a60 <TzCtrl+0xa8>)
	if (NoRoomForSymbol > 0)
 80049be:	4e29      	ldr	r6, [pc, #164]	; (8004a64 <TzCtrl+0xac>)
	if (NoRoomForObjectData > 0)
 80049c0:	4f29      	ldr	r7, [pc, #164]	; (8004a68 <TzCtrl+0xb0>)
	while (1)
	{
		do
		{
			/* Listen for new commands */
			bytes = 0;
 80049c2:	f04f 0800 	mov.w	r8, #0
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 80049c6:	2108      	movs	r1, #8
 80049c8:	aa01      	add	r2, sp, #4
			bytes = 0;
 80049ca:	f8cd 8004 	str.w	r8, [sp, #4]
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 80049ce:	eb0d 0001 	add.w	r0, sp, r1
 80049d2:	f7ff ff4f 	bl	8004874 <trcCDCReceive>

			if (status != 0)
 80049d6:	2800      	cmp	r0, #0
 80049d8:	d036      	beq.n	8004a48 <TzCtrl+0x90>
			{
				/* The connection has failed, stop tracing */
				vTraceStop();
 80049da:	f000 fc17 	bl	800520c <vTraceStop>

/* If the internal buffer is disabled, the COMMIT macro instead sends the data directly 
   from the "event functions" (using TRC_STREAM_PORT_WRITE_DATA). */			
#if (TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1)
			/* If there is a buffer page, this sends it to the streaming interface using TRC_STREAM_PORT_WRITE_DATA. */
			bytes = prvPagedEventBufferTransfer();
 80049de:	f000 fc19 	bl	8005214 <prvPagedEventBufferTransfer>
 80049e2:	4604      	mov	r4, r0
 80049e4:	9001      	str	r0, [sp, #4]
#endif			
			
		/* If there was data sent or received (bytes != 0), loop around and repeat, if there is more data to send or receive.
		Otherwise, step out of this loop and sleep for a while. */		
		
		} while (bytes != 0);
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d1ed      	bne.n	80049c6 <TzCtrl+0xe>

		if (xTraceIsRecordingEnabled())
 80049ea:	f000 f8d3 	bl	8004b94 <xTraceIsRecordingEnabled>
 80049ee:	b338      	cbz	r0, 8004a40 <TzCtrl+0x88>
	if (tasksNotIncluded > 0)
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	dd03      	ble.n	80049fe <TzCtrl+0x46>
		prvTraceWarning(PSF_WARNING_STACKMON_NO_SLOTS);
 80049f6:	200e      	movs	r0, #14
 80049f8:	f000 fade 	bl	8004fb8 <prvTraceWarning>
		tasksNotIncluded = 0;
 80049fc:	602c      	str	r4, [r5, #0]
	if (NoRoomForSymbol > 0)
 80049fe:	6833      	ldr	r3, [r6, #0]
 8004a00:	b123      	cbz	r3, 8004a0c <TzCtrl+0x54>
		prvTraceWarning(PSF_WARNING_SYMBOL_TABLE_SLOTS);
 8004a02:	2007      	movs	r0, #7
 8004a04:	f000 fad8 	bl	8004fb8 <prvTraceWarning>
		NoRoomForSymbol = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	6033      	str	r3, [r6, #0]
	if (NoRoomForObjectData > 0)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	b123      	cbz	r3, 8004a1a <TzCtrl+0x62>
		prvTraceWarning(PSF_WARNING_OBJECT_DATA_SLOTS);
 8004a10:	2009      	movs	r0, #9
 8004a12:	f000 fad1 	bl	8004fb8 <prvTraceWarning>
		NoRoomForObjectData = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	603b      	str	r3, [r7, #0]
	if (LongestSymbolName > (TRC_CFG_SYMBOL_MAX_LENGTH))
 8004a1a:	4c14      	ldr	r4, [pc, #80]	; (8004a6c <TzCtrl+0xb4>)
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	2b1e      	cmp	r3, #30
 8004a20:	d904      	bls.n	8004a2c <TzCtrl+0x74>
		prvTraceWarning(PSF_WARNING_SYMBOL_MAX_LENGTH);
 8004a22:	2008      	movs	r0, #8
 8004a24:	f000 fac8 	bl	8004fb8 <prvTraceWarning>
		LongestSymbolName = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	6023      	str	r3, [r4, #0]
	if (MaxBytesTruncated > 0)
 8004a2c:	4c10      	ldr	r4, [pc, #64]	; (8004a70 <TzCtrl+0xb8>)
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	b123      	cbz	r3, 8004a3c <TzCtrl+0x84>
		prvTraceWarning(PSF_WARNING_STRING_TOO_LONG);
 8004a32:	200a      	movs	r0, #10
 8004a34:	f000 fac0 	bl	8004fb8 <prvTraceWarning>
		MaxBytesTruncated = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	6023      	str	r3, [r4, #0]
		{
			prvCheckRecorderStatus();
			prvReportStackUsage();
 8004a3c:	f7ff ff8e 	bl	800495c <prvReportStackUsage>
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 8004a40:	200a      	movs	r0, #10
 8004a42:	f00c fec3 	bl	80117cc <vTaskDelay>
	while (1)
 8004a46:	e7bc      	b.n	80049c2 <TzCtrl+0xa>
			if ((status == 0) && (bytes == sizeof(TracealyzerCommandType)))
 8004a48:	9b01      	ldr	r3, [sp, #4]
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d1c7      	bne.n	80049de <TzCtrl+0x26>
				if (prvIsValidCommand(&msg))
 8004a4e:	a802      	add	r0, sp, #8
 8004a50:	f000 f966 	bl	8004d20 <prvIsValidCommand>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d0c2      	beq.n	80049de <TzCtrl+0x26>
					prvProcessCommand(&msg); /* Start or Stop currently... */
 8004a58:	a802      	add	r0, sp, #8
 8004a5a:	f000 fc41 	bl	80052e0 <prvProcessCommand>
 8004a5e:	e7be      	b.n	80049de <TzCtrl+0x26>
 8004a60:	24000bcc 	.word	0x24000bcc
 8004a64:	24000c48 	.word	0x24000c48
 8004a68:	24000c44 	.word	0x24000c44
 8004a6c:	24000c3c 	.word	0x24000c3c
 8004a70:	24000c40 	.word	0x24000c40

08004a74 <vTraceEnable>:
{
 8004a74:	b570      	push	{r4, r5, r6, lr}
	if (HandleTzCtrl == NULL)
 8004a76:	4d2c      	ldr	r5, [pc, #176]	; (8004b28 <vTraceEnable+0xb4>)
{
 8004a78:	b088      	sub	sp, #32
	int32_t bytes = 0;
 8004a7a:	2300      	movs	r3, #0
{
 8004a7c:	4604      	mov	r4, r0
	if (HandleTzCtrl == NULL)
 8004a7e:	682e      	ldr	r6, [r5, #0]
	int32_t bytes = 0;
 8004a80:	9305      	str	r3, [sp, #20]
	if (HandleTzCtrl == NULL)
 8004a82:	b9c6      	cbnz	r6, 8004ab6 <vTraceEnable+0x42>
		TRC_STREAM_PORT_INIT();
 8004a84:	f00d fe54 	bl	8012730 <MX_USB_DEVICE_Init>
		trcWarningChannel = xTraceRegisterString("#WFR"); 
 8004a88:	4828      	ldr	r0, [pc, #160]	; (8004b2c <vTraceEnable+0xb8>)
 8004a8a:	f000 fa33 	bl	8004ef4 <xTraceRegisterString>
 8004a8e:	4b28      	ldr	r3, [pc, #160]	; (8004b30 <vTraceEnable+0xbc>)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
 8004a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a94:	4927      	ldr	r1, [pc, #156]	; (8004b34 <vTraceEnable+0xc0>)
		trcWarningChannel = xTraceRegisterString("#WFR"); 
 8004a96:	6018      	str	r0, [r3, #0]
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
 8004a98:	4b27      	ldr	r3, [pc, #156]	; (8004b38 <vTraceEnable+0xc4>)
 8004a9a:	4828      	ldr	r0, [pc, #160]	; (8004b3c <vTraceEnable+0xc8>)
 8004a9c:	9302      	str	r3, [sp, #8]
 8004a9e:	4b28      	ldr	r3, [pc, #160]	; (8004b40 <vTraceEnable+0xcc>)
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	4633      	mov	r3, r6
 8004aa8:	f00c fc2c 	bl	8011304 <xTaskCreateStatic>
 8004aac:	6028      	str	r0, [r5, #0]
		if (HandleTzCtrl == NULL)
 8004aae:	b910      	cbnz	r0, 8004ab6 <vTraceEnable+0x42>
			prvTraceError(PSF_ERROR_TZCTRLTASK_NOT_CREATED);
 8004ab0:	2005      	movs	r0, #5
 8004ab2:	f000 fc1d 	bl	80052f0 <prvTraceError>
	if (startOption == TRC_START_AWAIT_HOST)
 8004ab6:	2c02      	cmp	r4, #2
 8004ab8:	d110      	bne.n	8004adc <vTraceEnable+0x68>
			bytes = 0;
 8004aba:	2400      	movs	r4, #0
		while (RecorderEnabled == 0);
 8004abc:	4d21      	ldr	r5, [pc, #132]	; (8004b44 <vTraceEnable+0xd0>)
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 8004abe:	aa05      	add	r2, sp, #20
 8004ac0:	2108      	movs	r1, #8
 8004ac2:	a806      	add	r0, sp, #24
			bytes = 0;
 8004ac4:	9405      	str	r4, [sp, #20]
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 8004ac6:	f7ff fed5 	bl	8004874 <trcCDCReceive>
			if (status != 0)
 8004aca:	b1b0      	cbz	r0, 8004afa <vTraceEnable+0x86>
				prvTraceWarning(PSF_WARNING_STREAM_PORT_READ);
 8004acc:	200b      	movs	r0, #11
 8004ace:	f000 fa73 	bl	8004fb8 <prvTraceWarning>
		while (RecorderEnabled == 0);
 8004ad2:	682b      	ldr	r3, [r5, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f2      	beq.n	8004abe <vTraceEnable+0x4a>
}
 8004ad8:	b008      	add	sp, #32
 8004ada:	bd70      	pop	{r4, r5, r6, pc}
	else if (startOption == TRC_START)
 8004adc:	2c01      	cmp	r4, #1
 8004ade:	d109      	bne.n	8004af4 <vTraceEnable+0x80>
		TRC_PORT_SPECIFIC_INIT();
 8004ae0:	f000 fcc2 	bl	8005468 <prvTraceInitCortexM>
		msg.cmdCode = CMD_SET_ACTIVE;
 8004ae4:	a808      	add	r0, sp, #32
 8004ae6:	f240 1301 	movw	r3, #257	; 0x101
 8004aea:	f820 3d08 	strh.w	r3, [r0, #-8]!
		prvProcessCommand(&msg);
 8004aee:	f000 fbf7 	bl	80052e0 <prvProcessCommand>
 8004af2:	e7f1      	b.n	8004ad8 <vTraceEnable+0x64>
		TRC_PORT_SPECIFIC_INIT();
 8004af4:	f000 fcb8 	bl	8005468 <prvTraceInitCortexM>
}
 8004af8:	e7ee      	b.n	8004ad8 <vTraceEnable+0x64>
			if ((status == 0) && (bytes == sizeof(TracealyzerCommandType)))
 8004afa:	9b05      	ldr	r3, [sp, #20]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d1e8      	bne.n	8004ad2 <vTraceEnable+0x5e>
				if (prvIsValidCommand(&msg))
 8004b00:	a806      	add	r0, sp, #24
 8004b02:	f000 f90d 	bl	8004d20 <prvIsValidCommand>
 8004b06:	2800      	cmp	r0, #0
 8004b08:	d0e3      	beq.n	8004ad2 <vTraceEnable+0x5e>
					if (msg.cmdCode == CMD_SET_ACTIVE && msg.param1 == 1)
 8004b0a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d105      	bne.n	8004b1e <vTraceEnable+0xaa>
 8004b12:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <vTraceEnable+0xaa>
						TRC_PORT_SPECIFIC_INIT();
 8004b1a:	f000 fca5 	bl	8005468 <prvTraceInitCortexM>
					prvProcessCommand(&msg);
 8004b1e:	a806      	add	r0, sp, #24
 8004b20:	f000 fbde 	bl	80052e0 <prvProcessCommand>
 8004b24:	e7d5      	b.n	8004ad2 <vTraceEnable+0x5e>
 8004b26:	bf00      	nop
 8004b28:	24000348 	.word	0x24000348
 8004b2c:	0801523c 	.word	0x0801523c
 8004b30:	240223fc 	.word	0x240223fc
 8004b34:	08015241 	.word	0x08015241
 8004b38:	24000bd0 	.word	0x24000bd0
 8004b3c:	080049b9 	.word	0x080049b9
 8004b40:	24000354 	.word	0x24000354
 8004b44:	24000c4c 	.word	0x24000c4c

08004b48 <prvTraceGetCurrentTaskHandle>:
	return xTaskGetCurrentTaskHandle();
 8004b48:	f00c bfca 	b.w	8011ae0 <xTaskGetCurrentTaskHandle>

08004b4c <prvIsNewTCB>:
	if (pCurrentTCB != pNewTCB)
 8004b4c:	4b03      	ldr	r3, [pc, #12]	; (8004b5c <prvIsNewTCB+0x10>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4282      	cmp	r2, r0
		pCurrentTCB = pNewTCB;
 8004b52:	bf1a      	itte	ne
 8004b54:	6018      	strne	r0, [r3, #0]
		return 1;
 8004b56:	2001      	movne	r0, #1
	return 0;
 8004b58:	2000      	moveq	r0, #0
}
 8004b5a:	4770      	bx	lr
 8004b5c:	24000350 	.word	0x24000350

08004b60 <prvAllocateBufferPage>:
static int prvAllocateBufferPage(int prevPage)
{
	int index;
	int count = 0;

	index = (prevPage + 1) % (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT);
 8004b60:	1c42      	adds	r2, r0, #1
 8004b62:	2314      	movs	r3, #20

	while((PageInfo[index].Status != PAGE_STATUS_FREE) && (count ++ < (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT)))
 8004b64:	490a      	ldr	r1, [pc, #40]	; (8004b90 <prvAllocateBufferPage+0x30>)
	index = (prevPage + 1) % (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT);
 8004b66:	fb92 f0f3 	sdiv	r0, r2, r3
 8004b6a:	fb03 2010 	mls	r0, r3, r0, r2
	while((PageInfo[index].Status != PAGE_STATUS_FREE) && (count ++ < (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT)))
 8004b6e:	2215      	movs	r2, #21
{
 8004b70:	b510      	push	{r4, lr}
	while((PageInfo[index].Status != PAGE_STATUS_FREE) && (count ++ < (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT)))
 8004b72:	f831 4030 	ldrh.w	r4, [r1, r0, lsl #3]
 8004b76:	b11c      	cbz	r4, 8004b80 <prvAllocateBufferPage+0x20>
 8004b78:	3a01      	subs	r2, #1
 8004b7a:	d102      	bne.n	8004b82 <prvAllocateBufferPage+0x22>
	if (PageInfo[index].Status == PAGE_STATUS_FREE)
	{
		return index;
	}

	return -1;
 8004b7c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004b80:	bd10      	pop	{r4, pc}
		index = (index + 1) % (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT);
 8004b82:	3001      	adds	r0, #1
 8004b84:	fb90 f4f3 	sdiv	r4, r0, r3
 8004b88:	fb03 0014 	mls	r0, r3, r4, r0
 8004b8c:	e7f1      	b.n	8004b72 <prvAllocateBufferPage+0x12>
 8004b8e:	bf00      	nop
 8004b90:	24022400 	.word	0x24022400

08004b94 <xTraceIsRecordingEnabled>:
}
 8004b94:	4b01      	ldr	r3, [pc, #4]	; (8004b9c <xTraceIsRecordingEnabled+0x8>)
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	24000c4c 	.word	0x24000c4c

08004ba0 <prvTraceSaveObjectSymbol>:
{
 8004ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba2:	f3ef 8610 	mrs	r6, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f383 8810 	msr	PRIMASK, r3
	if (firstFreeSymbolTableIndex < SYMBOL_TABLE_BUFFER_SIZE)
 8004bac:	4d14      	ldr	r5, [pc, #80]	; (8004c00 <prvTraceSaveObjectSymbol+0x60>)
 8004bae:	682a      	ldr	r2, [r5, #0]
 8004bb0:	f5b2 6f07 	cmp.w	r2, #2160	; 0x870
 8004bb4:	d21f      	bcs.n	8004bf6 <prvTraceSaveObjectSymbol+0x56>
		symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[firstFreeSymbolTableIndex / sizeof(uint32_t)] = (uint32_t)address;
 8004bb6:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <prvTraceSaveObjectSymbol+0x64>)
 8004bb8:	0894      	lsrs	r4, r2, #2
 8004bba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		ptrSymbol = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[firstFreeSymbolTableIndex + sizeof(uint32_t)];
 8004bbe:	1d10      	adds	r0, r2, #4
 8004bc0:	1e4c      	subs	r4, r1, #1
 8004bc2:	4418      	add	r0, r3
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 8004bc4:	2300      	movs	r3, #0
			ptrSymbol[i] = (uint8_t)name[i];	/* We do this first to ensure we also get the 0 termination, if there is one */
 8004bc6:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8004bca:	54c7      	strb	r7, [r0, r3]
			if (name[i] == 0)
 8004bcc:	7827      	ldrb	r7, [r4, #0]
 8004bce:	b137      	cbz	r7, 8004bde <prvTraceSaveObjectSymbol+0x3e>
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	2b1e      	cmp	r3, #30
 8004bd4:	d1f7      	bne.n	8004bc6 <prvTraceSaveObjectSymbol+0x26>
		while ((name[i] != 0) && i < 128)
 8004bd6:	5cc8      	ldrb	r0, [r1, r3]
 8004bd8:	b108      	cbz	r0, 8004bde <prvTraceSaveObjectSymbol+0x3e>
 8004bda:	2b80      	cmp	r3, #128	; 0x80
 8004bdc:	d109      	bne.n	8004bf2 <prvTraceSaveObjectSymbol+0x52>
		if (i > LongestSymbolName)
 8004bde:	490a      	ldr	r1, [pc, #40]	; (8004c08 <prvTraceSaveObjectSymbol+0x68>)
 8004be0:	6808      	ldr	r0, [r1, #0]
 8004be2:	4298      	cmp	r0, r3
 8004be4:	d200      	bcs.n	8004be8 <prvTraceSaveObjectSymbol+0x48>
			LongestSymbolName = i;
 8004be6:	600b      	str	r3, [r1, #0]
		firstFreeSymbolTableIndex += SYMBOL_TABLE_SLOT_SIZE;
 8004be8:	3224      	adds	r2, #36	; 0x24
 8004bea:	602a      	str	r2, [r5, #0]
 8004bec:	f386 8810 	msr	PRIMASK, r6
}
 8004bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			i++;
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	e7ef      	b.n	8004bd6 <prvTraceSaveObjectSymbol+0x36>
		NoRoomForSymbol++;
 8004bf6:	4a05      	ldr	r2, [pc, #20]	; (8004c0c <prvTraceSaveObjectSymbol+0x6c>)
 8004bf8:	6813      	ldr	r3, [r2, #0]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e7f5      	b.n	8004bec <prvTraceSaveObjectSymbol+0x4c>
 8004c00:	24000c60 	.word	0x24000c60
 8004c04:	24000df4 	.word	0x24000df4
 8004c08:	24000c3c 	.word	0x24000c3c
 8004c0c:	24000c48 	.word	0x24000c48

08004c10 <prvTraceSaveSymbol>:
{
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4601      	mov	r1, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c14:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f383 8810 	msr	PRIMASK, r3
	if (firstFreeSymbolTableIndex < SYMBOL_TABLE_BUFFER_SIZE)
 8004c1e:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <prvTraceSaveSymbol+0x30>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f5b3 6f07 	cmp.w	r3, #2160	; 0x870
 8004c26:	d208      	bcs.n	8004c3a <prvTraceSaveSymbol+0x2a>
		retVal = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[firstFreeSymbolTableIndex];
 8004c28:	4c06      	ldr	r4, [pc, #24]	; (8004c44 <prvTraceSaveSymbol+0x34>)
 8004c2a:	441c      	add	r4, r3
		prvTraceSaveObjectSymbol(retVal, name);
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	f7ff ffb7 	bl	8004ba0 <prvTraceSaveObjectSymbol>
 8004c32:	f385 8810 	msr	PRIMASK, r5
}
 8004c36:	4620      	mov	r0, r4
 8004c38:	bd38      	pop	{r3, r4, r5, pc}
	void* retVal = 0;
 8004c3a:	2400      	movs	r4, #0
 8004c3c:	e7f9      	b.n	8004c32 <prvTraceSaveSymbol+0x22>
 8004c3e:	bf00      	nop
 8004c40:	24000c60 	.word	0x24000c60
 8004c44:	24000df4 	.word	0x24000df4

08004c48 <prvTraceDeleteSymbol>:
{
 8004c48:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f383 8810 	msr	PRIMASK, r3
	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
 8004c54:	4d15      	ldr	r5, [pc, #84]	; (8004cac <prvTraceDeleteSymbol+0x64>)
 8004c56:	2300      	movs	r3, #0
		if (*ptr == (uint32_t)address)
 8004c58:	4a15      	ldr	r2, [pc, #84]	; (8004cb0 <prvTraceDeleteSymbol+0x68>)
	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
 8004c5a:	6829      	ldr	r1, [r5, #0]
 8004c5c:	4299      	cmp	r1, r3
 8004c5e:	d91b      	bls.n	8004c98 <prvTraceDeleteSymbol+0x50>
		ptr = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i / sizeof(uint32_t)];
 8004c60:	089c      	lsrs	r4, r3, #2
		if (*ptr == (uint32_t)address)
 8004c62:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 8004c66:	42b8      	cmp	r0, r7
 8004c68:	d11d      	bne.n	8004ca6 <prvTraceDeleteSymbol+0x5e>
			if (firstFreeSymbolTableIndex > SYMBOL_TABLE_SLOT_SIZE && i != (firstFreeSymbolTableIndex - SYMBOL_TABLE_SLOT_SIZE))
 8004c6a:	2924      	cmp	r1, #36	; 0x24
 8004c6c:	f1a1 0024 	sub.w	r0, r1, #36	; 0x24
 8004c70:	d915      	bls.n	8004c9e <prvTraceDeleteSymbol+0x56>
 8004c72:	4283      	cmp	r3, r0
 8004c74:	d013      	beq.n	8004c9e <prvTraceDeleteSymbol+0x56>
				lastEntryPtr = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[(firstFreeSymbolTableIndex - SYMBOL_TABLE_SLOT_SIZE) / sizeof(uint32_t)];
 8004c76:	0881      	lsrs	r1, r0, #2
				for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE) / sizeof(uint32_t); j++)
 8004c78:	2300      	movs	r3, #0
				lastEntryPtr = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[(firstFreeSymbolTableIndex - SYMBOL_TABLE_SLOT_SIZE) / sizeof(uint32_t)];
 8004c7a:	eb02 0e81 	add.w	lr, r2, r1, lsl #2
					ptr[j] = lastEntryPtr[j];
 8004c7e:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
 8004c82:	eb04 0c03 	add.w	ip, r4, r3
				for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE) / sizeof(uint32_t); j++)
 8004c86:	3301      	adds	r3, #1
					ptr[j] = lastEntryPtr[j];
 8004c88:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
				for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE) / sizeof(uint32_t); j++)
 8004c8c:	2b09      	cmp	r3, #9
 8004c8e:	d1f6      	bne.n	8004c7e <prvTraceDeleteSymbol+0x36>
				*lastEntryPtr = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			firstFreeSymbolTableIndex -= SYMBOL_TABLE_SLOT_SIZE;
 8004c96:	6028      	str	r0, [r5, #0]
 8004c98:	f386 8810 	msr	PRIMASK, r6
}
 8004c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				*ptr = 0; /* No other entry found, or this is the last entry */
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004ca4:	e7f7      	b.n	8004c96 <prvTraceDeleteSymbol+0x4e>
	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
 8004ca6:	3324      	adds	r3, #36	; 0x24
 8004ca8:	e7d8      	b.n	8004c5c <prvTraceDeleteSymbol+0x14>
 8004caa:	bf00      	nop
 8004cac:	24000c60 	.word	0x24000c60
 8004cb0:	24000df4 	.word	0x24000df4

08004cb4 <prvTraceSaveObjectData>:
{
 8004cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f383 8810 	msr	PRIMASK, r3
	foundSlot = firstFreeObjectDataTableIndex;
 8004cc0:	4c14      	ldr	r4, [pc, #80]	; (8004d14 <prvTraceSaveObjectData+0x60>)
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 8004cc2:	2200      	movs	r2, #0
		if (*ptr == (uint32_t)address)
 8004cc4:	4f14      	ldr	r7, [pc, #80]	; (8004d18 <prvTraceSaveObjectData+0x64>)
	foundSlot = firstFreeObjectDataTableIndex;
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	46a4      	mov	ip, r4
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d30d      	bcc.n	8004cea <prvTraceSaveObjectData+0x36>
	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
 8004cce:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004cd2:	d21a      	bcs.n	8004d0a <prvTraceSaveObjectData+0x56>
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
 8004cd4:	089a      	lsrs	r2, r3, #2
 8004cd6:	4d10      	ldr	r5, [pc, #64]	; (8004d18 <prvTraceSaveObjectData+0x64>)
			firstFreeObjectDataTableIndex += OBJECT_DATA_SLOT_SIZE;
 8004cd8:	3308      	adds	r3, #8
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
 8004cda:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 8004cde:	3201      	adds	r2, #1
			firstFreeObjectDataTableIndex += OBJECT_DATA_SLOT_SIZE;
 8004ce0:	f8cc 3000 	str.w	r3, [ip]
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 8004ce4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8004ce8:	e00c      	b.n	8004d04 <prvTraceSaveObjectData+0x50>
		ptr = &objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i / sizeof(uint32_t)];
 8004cea:	0895      	lsrs	r5, r2, #2
		if (*ptr == (uint32_t)address)
 8004cec:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
 8004cf0:	42a0      	cmp	r0, r4
 8004cf2:	d001      	beq.n	8004cf8 <prvTraceSaveObjectData+0x44>
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 8004cf4:	3208      	adds	r2, #8
 8004cf6:	e7e8      	b.n	8004cca <prvTraceSaveObjectData+0x16>
	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
 8004cf8:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8004cfc:	d205      	bcs.n	8004d0a <prvTraceSaveObjectData+0x56>
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 8004cfe:	3501      	adds	r5, #1
 8004d00:	f847 1025 	str.w	r1, [r7, r5, lsl #2]
 8004d04:	f386 8810 	msr	PRIMASK, r6
}
 8004d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		NoRoomForObjectData++;
 8004d0a:	4a04      	ldr	r2, [pc, #16]	; (8004d1c <prvTraceSaveObjectData+0x68>)
 8004d0c:	6813      	ldr	r3, [r2, #0]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	e7f7      	b.n	8004d04 <prvTraceSaveObjectData+0x50>
 8004d14:	24000c5c 	.word	0x24000c5c
 8004d18:	24000c64 	.word	0x24000c64
 8004d1c:	24000c44 	.word	0x24000c44

08004d20 <prvIsValidCommand>:
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8004d20:	7802      	ldrb	r2, [r0, #0]
												cmd->param1 +
 8004d22:	7843      	ldrb	r3, [r0, #1]
												cmd->param2 +
 8004d24:	7881      	ldrb	r1, [r0, #2]
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8004d26:	4413      	add	r3, r2
												cmd->param1 +
 8004d28:	440b      	add	r3, r1
												cmd->param3 +
 8004d2a:	78c1      	ldrb	r1, [r0, #3]
												cmd->param2 +
 8004d2c:	4419      	add	r1, r3
												cmd->param4 +
 8004d2e:	7903      	ldrb	r3, [r0, #4]
												cmd->param3 +
 8004d30:	4419      	add	r1, r3
												cmd->param5));
 8004d32:	7943      	ldrb	r3, [r0, #5]
												cmd->param4 +
 8004d34:	440b      	add	r3, r1
	if (cmd->checksumMSB != (unsigned char)(checksum >> 8))
 8004d36:	79c1      	ldrb	r1, [r0, #7]
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8004d38:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8004d3c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
	if (cmd->checksumMSB != (unsigned char)(checksum >> 8))
 8004d40:	ebb1 2f13 	cmp.w	r1, r3, lsr #8
 8004d44:	d108      	bne.n	8004d58 <prvIsValidCommand+0x38>
	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFF))
 8004d46:	7981      	ldrb	r1, [r0, #6]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	4299      	cmp	r1, r3
 8004d4c:	d104      	bne.n	8004d58 <prvIsValidCommand+0x38>
	if (cmd->cmdCode > CMD_LAST_COMMAND)
 8004d4e:	2a01      	cmp	r2, #1
 8004d50:	bf8c      	ite	hi
 8004d52:	2000      	movhi	r0, #0
 8004d54:	2001      	movls	r0, #1
 8004d56:	4770      	bx	lr
		return 0;
 8004d58:	2000      	movs	r0, #0
}
 8004d5a:	4770      	bx	lr

08004d5c <prvPagedEventBufferGetWritePointer>:
 * Parameters:
 * - sizeOfEvent: The size of the event that is to be placed in the buffer.
 *
*******************************************************************************/
void* prvPagedEventBufferGetWritePointer(int sizeOfEvent)
{
 8004d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	void* ret;
	static int currentWritePage = -1;

	if (currentWritePage == -1)
 8004d60:	4c20      	ldr	r4, [pc, #128]	; (8004de4 <prvPagedEventBufferGetWritePointer+0x88>)
{
 8004d62:	4605      	mov	r5, r0
	if (currentWritePage == -1)
 8004d64:	6820      	ldr	r0, [r4, #0]
 8004d66:	46a0      	mov	r8, r4
 8004d68:	1c43      	adds	r3, r0, #1
 8004d6a:	d10b      	bne.n	8004d84 <prvPagedEventBufferGetWritePointer+0x28>
	{
	    currentWritePage = prvAllocateBufferPage(currentWritePage);
 8004d6c:	f7ff fef8 	bl	8004b60 <prvAllocateBufferPage>
 8004d70:	6020      	str	r0, [r4, #0]
		if (currentWritePage == -1)
 8004d72:	3001      	adds	r0, #1
 8004d74:	d106      	bne.n	8004d84 <prvPagedEventBufferGetWritePointer+0x28>
		  TotalBytesRemaining_LowWaterMark = TotalBytesRemaining;

		currentWritePage = prvAllocateBufferPage(currentWritePage);
		if (currentWritePage == -1)
		{
		  DroppedEventCounter++;
 8004d76:	4a1c      	ldr	r2, [pc, #112]	; (8004de8 <prvPagedEventBufferGetWritePointer+0x8c>)
		  return NULL;
 8004d78:	2000      	movs	r0, #0
		  DroppedEventCounter++;
 8004d7a:	6813      	ldr	r3, [r2, #0]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	6013      	str	r3, [r2, #0]

	if (TotalBytesRemaining < TotalBytesRemaining_LowWaterMark)
		TotalBytesRemaining_LowWaterMark = TotalBytesRemaining;

	return ret;
}
 8004d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (PageInfo[currentWritePage].BytesRemaining - sizeOfEvent < 0)
 8004d84:	f8d8 0000 	ldr.w	r0, [r8]
 8004d88:	4c18      	ldr	r4, [pc, #96]	; (8004dec <prvPagedEventBufferGetWritePointer+0x90>)
 8004d8a:	4f19      	ldr	r7, [pc, #100]	; (8004df0 <prvPagedEventBufferGetWritePointer+0x94>)
 8004d8c:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
 8004d90:	4e18      	ldr	r6, [pc, #96]	; (8004df4 <prvPagedEventBufferGetWritePointer+0x98>)
 8004d92:	8851      	ldrh	r1, [r2, #2]
 8004d94:	1b4a      	subs	r2, r1, r5
 8004d96:	2a00      	cmp	r2, #0
 8004d98:	da10      	bge.n	8004dbc <prvPagedEventBufferGetWritePointer+0x60>
 8004d9a:	683b      	ldr	r3, [r7, #0]
		PageInfo[currentWritePage].Status = PAGE_STATUS_READ;
 8004d9c:	f04f 0c02 	mov.w	ip, #2
 8004da0:	6832      	ldr	r2, [r6, #0]
		TotalBytesRemaining -= PageInfo[currentWritePage].BytesRemaining; // Last trailing bytes
 8004da2:	1a5b      	subs	r3, r3, r1
		PageInfo[currentWritePage].Status = PAGE_STATUS_READ;
 8004da4:	f824 c030 	strh.w	ip, [r4, r0, lsl #3]
		if (TotalBytesRemaining < TotalBytesRemaining_LowWaterMark)
 8004da8:	4293      	cmp	r3, r2
		TotalBytesRemaining -= PageInfo[currentWritePage].BytesRemaining; // Last trailing bytes
 8004daa:	603b      	str	r3, [r7, #0]
		  TotalBytesRemaining_LowWaterMark = TotalBytesRemaining;
 8004dac:	bf38      	it	cc
 8004dae:	6033      	strcc	r3, [r6, #0]
		currentWritePage = prvAllocateBufferPage(currentWritePage);
 8004db0:	f7ff fed6 	bl	8004b60 <prvAllocateBufferPage>
 8004db4:	f8c8 0000 	str.w	r0, [r8]
		if (currentWritePage == -1)
 8004db8:	3001      	adds	r0, #1
 8004dba:	d0dc      	beq.n	8004d76 <prvPagedEventBufferGetWritePointer+0x1a>
	ret = PageInfo[currentWritePage].WritePointer;
 8004dbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004dc0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8004dc4:	6858      	ldr	r0, [r3, #4]
	PageInfo[currentWritePage].WritePointer += sizeOfEvent;
 8004dc6:	1942      	adds	r2, r0, r5
 8004dc8:	605a      	str	r2, [r3, #4]
	PageInfo[currentWritePage].BytesRemaining = (uint16_t)(PageInfo[currentWritePage].BytesRemaining -sizeOfEvent);
 8004dca:	885a      	ldrh	r2, [r3, #2]
 8004dcc:	1b52      	subs	r2, r2, r5
	TotalBytesRemaining = (TotalBytesRemaining-(uint16_t)sizeOfEvent);
 8004dce:	b2ad      	uxth	r5, r5
	PageInfo[currentWritePage].BytesRemaining = (uint16_t)(PageInfo[currentWritePage].BytesRemaining -sizeOfEvent);
 8004dd0:	805a      	strh	r2, [r3, #2]
	TotalBytesRemaining = (TotalBytesRemaining-(uint16_t)sizeOfEvent);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	1b5d      	subs	r5, r3, r5
	if (TotalBytesRemaining < TotalBytesRemaining_LowWaterMark)
 8004dd6:	6833      	ldr	r3, [r6, #0]
 8004dd8:	429d      	cmp	r5, r3
	TotalBytesRemaining = (TotalBytesRemaining-(uint16_t)sizeOfEvent);
 8004dda:	603d      	str	r5, [r7, #0]
		TotalBytesRemaining_LowWaterMark = TotalBytesRemaining;
 8004ddc:	bf38      	it	cc
 8004dde:	6035      	strcc	r5, [r6, #0]
 8004de0:	e7ce      	b.n	8004d80 <prvPagedEventBufferGetWritePointer+0x24>
 8004de2:	bf00      	nop
 8004de4:	2400001c 	.word	0x2400001c
 8004de8:	24000c30 	.word	0x24000c30
 8004dec:	24022400 	.word	0x24022400
 8004df0:	24000014 	.word	0x24000014
 8004df4:	24000018 	.word	0x24000018

08004df8 <prvTraceStoreStringEventHelper>:
{
 8004df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfc:	468b      	mov	fp, r1
	nStrWords = (len+1+3)/4;
 8004dfe:	1d1c      	adds	r4, r3, #4
 8004e00:	2104      	movs	r1, #4
{
 8004e02:	4680      	mov	r8, r0
 8004e04:	4691      	mov	r9, r2
 8004e06:	461d      	mov	r5, r3
 8004e08:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
	offset = nArgs * 4;
 8004e0c:	0086      	lsls	r6, r0, #2
	nStrWords = (len+1+3)/4;
 8004e0e:	fb94 f4f1 	sdiv	r4, r4, r1
	nWords = nStrWords + nArgs;
 8004e12:	4404      	add	r4, r0
	if (nWords > 15) /* if attempting to store more than 60 byte (= max) */
 8004e14:	2c0f      	cmp	r4, #15
 8004e16:	dd09      	ble.n	8004e2c <prvTraceStoreStringEventHelper+0x34>
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 8004e18:	3c0f      	subs	r4, #15
		if (bytesTruncated > MaxBytesTruncated)
 8004e1a:	4b27      	ldr	r3, [pc, #156]	; (8004eb8 <prvTraceStoreStringEventHelper+0xc0>)
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 8004e1c:	00a4      	lsls	r4, r4, #2
		if (bytesTruncated > MaxBytesTruncated)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	42a2      	cmp	r2, r4
 8004e22:	d200      	bcs.n	8004e26 <prvTraceStoreStringEventHelper+0x2e>
			MaxBytesTruncated = bytesTruncated;
 8004e24:	601c      	str	r4, [r3, #0]
		len = 15 * 4 - offset;
 8004e26:	f1c6 053c 	rsb	r5, r6, #60	; 0x3c
		nWords = 15;
 8004e2a:	240f      	movs	r4, #15
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e2c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e30:	2301      	movs	r3, #1
 8004e32:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 8004e36:	4b21      	ldr	r3, [pc, #132]	; (8004ebc <prvTraceStoreStringEventHelper+0xc4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	b31b      	cbz	r3, 8004e84 <prvTraceStoreStringEventHelper+0x8c>
		eventCounter++;
 8004e3c:	4a20      	ldr	r2, [pc, #128]	; (8004ec0 <prvTraceStoreStringEventHelper+0xc8>)
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 8004e3e:	1ca0      	adds	r0, r4, #2
		eventCounter++;
 8004e40:	6813      	ldr	r3, [r2, #0]
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
 8004e42:	0080      	lsls	r0, r0, #2
		eventCounter++;
 8004e44:	3301      	adds	r3, #1
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	9301      	str	r3, [sp, #4]
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
 8004e4a:	f7ff ff87 	bl	8004d5c <prvPagedEventBufferGetWritePointer>
			if (event != NULL)
 8004e4e:	b1c8      	cbz	r0, 8004e84 <prvTraceStoreStringEventHelper+0x8c>
				event->base.EventCount = (uint16_t)eventCounter;
 8004e50:	9b01      	ldr	r3, [sp, #4]
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8004e52:	ea4b 3404 	orr.w	r4, fp, r4, lsl #12
				data32 = (uint32_t*) &(event->data[0]);
 8004e56:	f100 0108 	add.w	r1, r0, #8
				event->base.EventCount = (uint16_t)eventCounter;
 8004e5a:	8043      	strh	r3, [r0, #2]
	return TRC_HWTC_COUNT;
 8004e5c:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <prvTraceStoreStringEventHelper+0xcc>)
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8004e5e:	8004      	strh	r4, [r0, #0]
	return TRC_HWTC_COUNT;
 8004e60:	681b      	ldr	r3, [r3, #0]
				event->base.TS = prvGetTimestamp32();
 8004e62:	6043      	str	r3, [r0, #4]
				for (i = 0; i < nArgs; i++)
 8004e64:	2300      	movs	r3, #0
 8004e66:	4543      	cmp	r3, r8
 8004e68:	db11      	blt.n	8004e8e <prvTraceStoreStringEventHelper+0x96>
 8004e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e6c:	198a      	adds	r2, r1, r6
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	4611      	mov	r1, r2
				for (i = 0; i < len; i++)
 8004e72:	1a50      	subs	r0, r2, r1
 8004e74:	4285      	cmp	r5, r0
 8004e76:	dc19      	bgt.n	8004eac <prvTraceStoreStringEventHelper+0xb4>
				if (len < (15 * 4 - offset))
 8004e78:	f1c6 063c 	rsb	r6, r6, #60	; 0x3c
 8004e7c:	42ae      	cmp	r6, r5
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 8004e7e:	bfc4      	itt	gt
 8004e80:	2300      	movgt	r3, #0
 8004e82:	554b      	strbgt	r3, [r1, r5]
 8004e84:	f387 8810 	msr	PRIMASK, r7
}
 8004e88:	b003      	add	sp, #12
 8004e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if ((userEvtChannel != NULL) && (i == 0))
 8004e8e:	f1b9 0f00 	cmp.w	r9, #0
 8004e92:	d004      	beq.n	8004e9e <prvTraceStoreStringEventHelper+0xa6>
 8004e94:	b91b      	cbnz	r3, 8004e9e <prvTraceStoreStringEventHelper+0xa6>
						data32[i] = (uint32_t)userEvtChannel;
 8004e96:	f8c0 9008 	str.w	r9, [r0, #8]
				for (i = 0; i < nArgs; i++)
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	e7e3      	b.n	8004e66 <prvTraceStoreStringEventHelper+0x6e>
						data32[i] = va_arg(vl, uint32_t);
 8004e9e:	f8da 4000 	ldr.w	r4, [sl]
 8004ea2:	f10a 0a04 	add.w	sl, sl, #4
 8004ea6:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 8004eaa:	e7f6      	b.n	8004e9a <prvTraceStoreStringEventHelper+0xa2>
					data8[offset + i] = str[i];
 8004eac:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8004eb0:	f802 0b01 	strb.w	r0, [r2], #1
 8004eb4:	e7dd      	b.n	8004e72 <prvTraceStoreStringEventHelper+0x7a>
 8004eb6:	bf00      	nop
 8004eb8:	24000c40 	.word	0x24000c40
 8004ebc:	24000c4c 	.word	0x24000c4c
 8004ec0:	24000c58 	.word	0x24000c58
 8004ec4:	e0001004 	.word	0xe0001004

08004ec8 <prvTraceStoreStringEvent>:
{
 8004ec8:	b40c      	push	{r2, r3}
 8004eca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ecc:	9a06      	ldr	r2, [sp, #24]
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 8004ece:	2300      	movs	r3, #0
 8004ed0:	5cd4      	ldrb	r4, [r2, r3]
 8004ed2:	b10c      	cbz	r4, 8004ed8 <prvTraceStoreStringEvent+0x10>
 8004ed4:	2b34      	cmp	r3, #52	; 0x34
 8004ed6:	d10b      	bne.n	8004ef0 <prvTraceStoreStringEvent+0x28>
	va_start(vl, str);
 8004ed8:	ac07      	add	r4, sp, #28
	prvTraceStoreStringEventHelper(nArgs, eventID, NULL, len, str, vl);
 8004eda:	e9cd 2400 	strd	r2, r4, [sp]
 8004ede:	2200      	movs	r2, #0
	va_start(vl, str);
 8004ee0:	9403      	str	r4, [sp, #12]
	prvTraceStoreStringEventHelper(nArgs, eventID, NULL, len, str, vl);
 8004ee2:	f7ff ff89 	bl	8004df8 <prvTraceStoreStringEventHelper>
}
 8004ee6:	b004      	add	sp, #16
 8004ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eec:	b002      	add	sp, #8
 8004eee:	4770      	bx	lr
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	e7ed      	b.n	8004ed0 <prvTraceStoreStringEvent+0x8>

08004ef4 <xTraceRegisterString>:
{
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4605      	mov	r5, r0
	str = prvTraceSaveSymbol(name);
 8004ef8:	f7ff fe8a 	bl	8004c10 <prvTraceSaveSymbol>
 8004efc:	4604      	mov	r4, r0
	prvTraceStoreStringEvent(1, eventID, (const char*)name, str);
 8004efe:	4603      	mov	r3, r0
 8004f00:	462a      	mov	r2, r5
 8004f02:	2103      	movs	r1, #3
 8004f04:	2001      	movs	r0, #1
 8004f06:	f7ff ffdf 	bl	8004ec8 <prvTraceStoreStringEvent>
}
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004f10 <prvTraceStoreSimpleStringEventHelper>:
{
 8004f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f14:	4605      	mov	r5, r0
 8004f16:	4689      	mov	r9, r1
 8004f18:	4617      	mov	r7, r2
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 8004f1a:	2400      	movs	r4, #0
 8004f1c:	5d3b      	ldrb	r3, [r7, r4]
 8004f1e:	b10b      	cbz	r3, 8004f24 <prvTraceStoreSimpleStringEventHelper+0x14>
 8004f20:	2c34      	cmp	r4, #52	; 0x34
 8004f22:	d139      	bne.n	8004f98 <prvTraceStoreSimpleStringEventHelper+0x88>
	if (userEvtChannel)
 8004f24:	f1b9 0f00 	cmp.w	r9, #0
 8004f28:	d038      	beq.n	8004f9c <prvTraceStoreSimpleStringEventHelper+0x8c>
		eventID++;
 8004f2a:	3501      	adds	r5, #1
		nArgs++;
 8004f2c:	2601      	movs	r6, #1
		eventID++;
 8004f2e:	b2ad      	uxth	r5, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f30:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f34:	2301      	movs	r3, #1
 8004f36:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 8004f3a:	4b1c      	ldr	r3, [pc, #112]	; (8004fac <prvTraceStoreSimpleStringEventHelper+0x9c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	b33b      	cbz	r3, 8004f90 <prvTraceStoreSimpleStringEventHelper+0x80>
	nStrWords = (len+1+3)/4;
 8004f40:	f104 0a04 	add.w	sl, r4, #4
		eventCounter++;
 8004f44:	4a1a      	ldr	r2, [pc, #104]	; (8004fb0 <prvTraceStoreSimpleStringEventHelper+0xa0>)
	nWords = nStrWords + nArgs;
 8004f46:	eb06 0aaa 	add.w	sl, r6, sl, asr #2
		eventCounter++;
 8004f4a:	6813      	ldr	r3, [r2, #0]
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 8004f4c:	f10a 0002 	add.w	r0, sl, #2
		eventCounter++;
 8004f50:	f103 0b01 	add.w	fp, r3, #1
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
 8004f54:	0080      	lsls	r0, r0, #2
		eventCounter++;
 8004f56:	f8c2 b000 	str.w	fp, [r2]
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
 8004f5a:	f7ff feff 	bl	8004d5c <prvPagedEventBufferGetWritePointer>
			if (event != NULL)
 8004f5e:	b1b8      	cbz	r0, 8004f90 <prvTraceStoreSimpleStringEventHelper+0x80>
	return TRC_HWTC_COUNT;
 8004f60:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <prvTraceStoreSimpleStringEventHelper+0xa4>)
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8004f62:	ea45 350a 	orr.w	r5, r5, sl, lsl #12
				event->base.EventCount = (uint16_t)eventCounter;
 8004f66:	f8a0 b002 	strh.w	fp, [r0, #2]
	return TRC_HWTC_COUNT;
 8004f6a:	681b      	ldr	r3, [r3, #0]
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8004f6c:	8005      	strh	r5, [r0, #0]
				event->base.TS = prvGetTimestamp32();
 8004f6e:	6043      	str	r3, [r0, #4]
				if (userEvtChannel != NULL)
 8004f70:	f1b9 0f00 	cmp.w	r9, #0
 8004f74:	d001      	beq.n	8004f7a <prvTraceStoreSimpleStringEventHelper+0x6a>
					data32[0] = (uint32_t)userEvtChannel;
 8004f76:	f8c0 9008 	str.w	r9, [r0, #8]
	offset = nArgs * 4;
 8004f7a:	00b6      	lsls	r6, r6, #2
				data8 = (uint8_t*) &(event->data[0]);
 8004f7c:	3008      	adds	r0, #8
 8004f7e:	1e7a      	subs	r2, r7, #1
 8004f80:	1983      	adds	r3, r0, r6
 8004f82:	461d      	mov	r5, r3
				for (i = 0; i < len; i++)
 8004f84:	1b59      	subs	r1, r3, r5
 8004f86:	428c      	cmp	r4, r1
 8004f88:	dc0a      	bgt.n	8004fa0 <prvTraceStoreSimpleStringEventHelper+0x90>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 8004f8a:	4420      	add	r0, r4
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	5583      	strb	r3, [r0, r6]
 8004f90:	f388 8810 	msr	PRIMASK, r8
}
 8004f94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 8004f98:	3401      	adds	r4, #1
 8004f9a:	e7bf      	b.n	8004f1c <prvTraceStoreSimpleStringEventHelper+0xc>
	int nArgs = 0;
 8004f9c:	464e      	mov	r6, r9
 8004f9e:	e7c7      	b.n	8004f30 <prvTraceStoreSimpleStringEventHelper+0x20>
					data8[offset + i] = str[i];
 8004fa0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004fa4:	f803 1b01 	strb.w	r1, [r3], #1
 8004fa8:	e7ec      	b.n	8004f84 <prvTraceStoreSimpleStringEventHelper+0x74>
 8004faa:	bf00      	nop
 8004fac:	24000c4c 	.word	0x24000c4c
 8004fb0:	24000c58 	.word	0x24000c58
 8004fb4:	e0001004 	.word	0xe0001004

08004fb8 <prvTraceWarning>:
{
 8004fb8:	b410      	push	{r4}
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 8004fba:	3801      	subs	r0, #1
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	4c0b      	ldr	r4, [pc, #44]	; (8004fec <prvTraceWarning+0x34>)
 8004fc0:	4083      	lsls	r3, r0
 8004fc2:	6821      	ldr	r1, [r4, #0]
 8004fc4:	ea13 0201 	ands.w	r2, r3, r1
 8004fc8:	d10d      	bne.n	8004fe6 <prvTraceWarning+0x2e>
		SET_ERROR_WARNING_FLAG(errCode);
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	280d      	cmp	r0, #13
 8004fce:	6023      	str	r3, [r4, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <prvTraceWarning+0x38>)
}
 8004fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8004fd6:	6819      	ldr	r1, [r3, #0]
 8004fd8:	bf9c      	itt	ls
 8004fda:	4b06      	ldrls	r3, [pc, #24]	; (8004ff4 <prvTraceWarning+0x3c>)
 8004fdc:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
 8004fe0:	2090      	movs	r0, #144	; 0x90
 8004fe2:	f7ff bf95 	b.w	8004f10 <prvTraceStoreSimpleStringEventHelper>
}
 8004fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	24000c34 	.word	0x24000c34
 8004ff0:	240223fc 	.word	0x240223fc
 8004ff4:	08015248 	.word	0x08015248

08004ff8 <prvPagedEventBufferInit>:
void prvPagedEventBufferInit(char* buffer)
{
  	int i;
  	TRACE_ALLOC_CRITICAL_SECTION();
    
    EventBuffer = buffer;
 8004ff8:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <prvPagedEventBufferInit+0x38>)
{
 8004ffa:	b530      	push	{r4, r5, lr}
    EventBuffer = buffer;
 8004ffc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ffe:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005002:	2201      	movs	r2, #1
 8005004:	f382 8810 	msr	PRIMASK, r2
 8005008:	681b      	ldr	r3, [r3, #0]
    
	TRACE_ENTER_CRITICAL_SECTION();
	for (i = 0; i < (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT); i++)
	{
		PageInfo[i].BytesRemaining = (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE);
 800500a:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800500e:	4a09      	ldr	r2, [pc, #36]	; (8005034 <prvPagedEventBufferInit+0x3c>)
		PageInfo[i].WritePointer = &EventBuffer[i * (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE)];
		PageInfo[i].Status = PAGE_STATUS_FREE;
 8005010:	2400      	movs	r4, #0
 8005012:	f503 511c 	add.w	r1, r3, #9984	; 0x2700
 8005016:	3110      	adds	r1, #16
		PageInfo[i].WritePointer = &EventBuffer[i * (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE)];
 8005018:	6053      	str	r3, [r2, #4]
 800501a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		PageInfo[i].BytesRemaining = (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE);
 800501e:	8055      	strh	r5, [r2, #2]
	for (i = 0; i < (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT); i++)
 8005020:	428b      	cmp	r3, r1
		PageInfo[i].Status = PAGE_STATUS_FREE;
 8005022:	f822 4b08 	strh.w	r4, [r2], #8
	for (i = 0; i < (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT); i++)
 8005026:	d1f7      	bne.n	8005018 <prvPagedEventBufferInit+0x20>
 8005028:	f380 8810 	msr	PRIMASK, r0
	}
	TRACE_EXIT_CRITICAL_SECTION();

}
 800502c:	bd30      	pop	{r4, r5, pc}
 800502e:	bf00      	nop
 8005030:	24000c38 	.word	0x24000c38
 8005034:	24022400 	.word	0x24022400

08005038 <prvSetRecorderEnabled>:
{
 8005038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (RecorderEnabled == isEnabled)
 800503c:	4e61      	ldr	r6, [pc, #388]	; (80051c4 <prvSetRecorderEnabled+0x18c>)
{
 800503e:	4607      	mov	r7, r0
	if (RecorderEnabled == isEnabled)
 8005040:	6833      	ldr	r3, [r6, #0]
 8005042:	4283      	cmp	r3, r0
 8005044:	f000 80b9 	beq.w	80051ba <prvSetRecorderEnabled+0x182>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005048:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504c:	2501      	movs	r5, #1
 800504e:	f385 8810 	msr	PRIMASK, r5
	if (isEnabled)
 8005052:	2800      	cmp	r0, #0
 8005054:	f000 80ae 	beq.w	80051b4 <prvSetRecorderEnabled+0x17c>
		prvPagedEventBufferInit(_TzTraceData);
 8005058:	485b      	ldr	r0, [pc, #364]	; (80051c8 <prvSetRecorderEnabled+0x190>)
 800505a:	f7ff ffcd 	bl	8004ff8 <prvPagedEventBufferInit>
     	eventCounter = 0;
 800505e:	4c5b      	ldr	r4, [pc, #364]	; (80051cc <prvSetRecorderEnabled+0x194>)
 8005060:	2300      	movs	r3, #0
        ISR_stack_index = -1;
 8005062:	22ff      	movs	r2, #255	; 0xff
     	eventCounter = 0;
 8005064:	6023      	str	r3, [r4, #0]
        ISR_stack_index = -1;
 8005066:	4b5a      	ldr	r3, [pc, #360]	; (80051d0 <prvSetRecorderEnabled+0x198>)
 8005068:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506a:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506e:	f385 8810 	msr	PRIMASK, r5
	  	TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(PSFHeaderInfo, header, sizeof(PSFHeaderInfo));
 8005072:	2018      	movs	r0, #24
 8005074:	f7ff fe72 	bl	8004d5c <prvPagedEventBufferGetWritePointer>
 8005078:	2800      	cmp	r0, #0
 800507a:	d0fa      	beq.n	8005072 <prvSetRecorderEnabled+0x3a>
		header->psf = PSFEndianessIdentifier;
 800507c:	4955      	ldr	r1, [pc, #340]	; (80051d4 <prvSetRecorderEnabled+0x19c>)
		header->platform = TRACE_KERNEL_VERSION;
 800507e:	2500      	movs	r5, #0
		header->psf = PSFEndianessIdentifier;
 8005080:	4b55      	ldr	r3, [pc, #340]	; (80051d8 <prvSetRecorderEnabled+0x1a0>)
		header->symbolCount = (TRC_CFG_SYMBOL_TABLE_SLOTS);
 8005082:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8005200 <prvSetRecorderEnabled+0x1c8>
		header->platform = TRACE_KERNEL_VERSION;
 8005086:	6085      	str	r5, [r0, #8]
		header->psf = PSFEndianessIdentifier;
 8005088:	e9c0 1300 	strd	r1, r3, [r0]
		header->heapCounter = trcHeapCounter;
 800508c:	4b53      	ldr	r3, [pc, #332]	; (80051dc <prvSetRecorderEnabled+0x1a4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60c3      	str	r3, [r0, #12]
		header->symbolCount = (TRC_CFG_SYMBOL_TABLE_SLOTS);
 8005092:	4b53      	ldr	r3, [pc, #332]	; (80051e0 <prvSetRecorderEnabled+0x1a8>)
 8005094:	e9c0 c304 	strd	ip, r3, [r0, #16]
 8005098:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509c:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a0:	2301      	movs	r3, #1
 80050a2:	f383 8810 	msr	PRIMASK, r3
            	data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 80050a6:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005204 <prvSetRecorderEnabled+0x1cc>
			TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(uint32_t, data, SYMBOL_TABLE_SLOT_SIZE);            
 80050aa:	2024      	movs	r0, #36	; 0x24
 80050ac:	f7ff fe56 	bl	8004d5c <prvPagedEventBufferGetWritePointer>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d0fa      	beq.n	80050aa <prvSetRecorderEnabled+0x72>
            for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
 80050b4:	2300      	movs	r3, #0
            	data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 80050b6:	18ea      	adds	r2, r5, r3
 80050b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80050bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
 80050c0:	3301      	adds	r3, #1
 80050c2:	2b09      	cmp	r3, #9
 80050c4:	d1f7      	bne.n	80050b6 <prvSetRecorderEnabled+0x7e>
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
 80050c6:	3509      	adds	r5, #9
 80050c8:	f5b5 7f07 	cmp.w	r5, #540	; 0x21c
 80050cc:	d1ed      	bne.n	80050aa <prvSetRecorderEnabled+0x72>
 80050ce:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050d2:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d6:	2301      	movs	r3, #1
 80050d8:	f383 8810 	msr	PRIMASK, r3
 80050dc:	2500      	movs	r5, #0
            	data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 80050de:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005208 <prvSetRecorderEnabled+0x1d0>
            TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(uint32_t, data, OBJECT_DATA_SLOT_SIZE);
 80050e2:	2008      	movs	r0, #8
 80050e4:	f7ff fe3a 	bl	8004d5c <prvPagedEventBufferGetWritePointer>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d0fa      	beq.n	80050e2 <prvSetRecorderEnabled+0xaa>
            	data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 80050ec:	f855 3009 	ldr.w	r3, [r5, r9]
 80050f0:	6003      	str	r3, [r0, #0]
 80050f2:	eb09 0305 	add.w	r3, r9, r5
 80050f6:	3508      	adds	r5, #8
 80050f8:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 80050fa:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
            	data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 80050fe:	6043      	str	r3, [r0, #4]
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 8005100:	d1ef      	bne.n	80050e2 <prvSetRecorderEnabled+0xaa>
 8005102:	f38a 8810 	msr	PRIMASK, sl
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005106:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510a:	2301      	movs	r3, #1
 800510c:	f383 8810 	msr	PRIMASK, r3
		TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(PSFExtensionInfoType, extinfo, sizeof(PSFExtensionInfoType));
 8005110:	2004      	movs	r0, #4
 8005112:	f7ff fe23 	bl	8004d5c <prvPagedEventBufferGetWritePointer>
 8005116:	2800      	cmp	r0, #0
 8005118:	d0fa      	beq.n	8005110 <prvSetRecorderEnabled+0xd8>
		memcpy(extinfo, &PSFExtensionInfo, sizeof(PSFExtensionInfoType));
 800511a:	4b32      	ldr	r3, [pc, #200]	; (80051e4 <prvSetRecorderEnabled+0x1ac>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6003      	str	r3, [r0, #0]
 8005120:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005124:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005128:	2301      	movs	r3, #1
 800512a:	f383 8810 	msr	PRIMASK, r3
	if (uiTraceSystemState == TRC_STATE_IN_STARTUP)
 800512e:	4b2e      	ldr	r3, [pc, #184]	; (80051e8 <prvSetRecorderEnabled+0x1b0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d043      	beq.n	80051be <prvSetRecorderEnabled+0x186>
		currentTask = TRACE_GET_CURRENT_TASK();
 8005136:	f7ff fd07 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 800513a:	4682      	mov	sl, r0
	eventCounter++;
 800513c:	6825      	ldr	r5, [r4, #0]
 800513e:	3501      	adds	r5, #1
 8005140:	6025      	str	r5, [r4, #0]
		TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(EventWithParam_3, pxEvent, sizeof(EventWithParam_3));
 8005142:	2014      	movs	r0, #20
 8005144:	f7ff fe0a 	bl	8004d5c <prvPagedEventBufferGetWritePointer>
 8005148:	2800      	cmp	r0, #0
 800514a:	d0fa      	beq.n	8005142 <prvSetRecorderEnabled+0x10a>
			pxEvent->base.EventID = PSF_EVENT_TRACE_START | PARAM_COUNT(3);
 800514c:	f243 0301 	movw	r3, #12289	; 0x3001
			pxEvent->param3 = SessionCounter++;
 8005150:	4926      	ldr	r1, [pc, #152]	; (80051ec <prvSetRecorderEnabled+0x1b4>)
			pxEvent->base.EventCount = (uint16_t)eventCounter;
 8005152:	8045      	strh	r5, [r0, #2]
			pxEvent->base.EventID = PSF_EVENT_TRACE_START | PARAM_COUNT(3);
 8005154:	8003      	strh	r3, [r0, #0]
	return TRC_HWTC_COUNT;
 8005156:	4b26      	ldr	r3, [pc, #152]	; (80051f0 <prvSetRecorderEnabled+0x1b8>)
 8005158:	681a      	ldr	r2, [r3, #0]
			pxEvent->base.TS = prvGetTimestamp32();
 800515a:	6042      	str	r2, [r0, #4]
			pxEvent->param1 = (uint32_t)TRACE_GET_OS_TICKS();
 800515c:	4a25      	ldr	r2, [pc, #148]	; (80051f4 <prvSetRecorderEnabled+0x1bc>)
 800515e:	6812      	ldr	r2, [r2, #0]
			pxEvent->param2 = (uint32_t)currentTask;
 8005160:	e9c0 2a02 	strd	r2, sl, [r0, #8]
			pxEvent->param3 = SessionCounter++;
 8005164:	680a      	ldr	r2, [r1, #0]
 8005166:	1c55      	adds	r5, r2, #1
 8005168:	6102      	str	r2, [r0, #16]
 800516a:	600d      	str	r5, [r1, #0]
 800516c:	f389 8810 	msr	PRIMASK, r9
	if (timestampFrequency == 0)
 8005170:	4d21      	ldr	r5, [pc, #132]	; (80051f8 <prvSetRecorderEnabled+0x1c0>)
 8005172:	469a      	mov	sl, r3
 8005174:	682a      	ldr	r2, [r5, #0]
 8005176:	b912      	cbnz	r2, 800517e <prvSetRecorderEnabled+0x146>
		timestampFrequency = TRC_HWTC_FREQ_HZ;
 8005178:	4b20      	ldr	r3, [pc, #128]	; (80051fc <prvSetRecorderEnabled+0x1c4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	602b      	str	r3, [r5, #0]
	eventCounter++;
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	f103 0901 	add.w	r9, r3, #1
 8005184:	f8c4 9000 	str.w	r9, [r4]
		TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(EventWithParam_4, event, sizeof(EventWithParam_4));
 8005188:	2018      	movs	r0, #24
 800518a:	f7ff fde7 	bl	8004d5c <prvPagedEventBufferGetWritePointer>
 800518e:	2800      	cmp	r0, #0
 8005190:	d0fa      	beq.n	8005188 <prvSetRecorderEnabled+0x150>
			event->base.EventID = PSF_EVENT_TS_CONFIG | (uint16_t)PARAM_COUNT(4);
 8005192:	f244 0302 	movw	r3, #16386	; 0x4002
			event->param3 = (uint32_t)(TRC_HWTC_TYPE);
 8005196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
			event->base.EventCount = (uint16_t)eventCounter;
 800519a:	f8a0 9002 	strh.w	r9, [r0, #2]
			event->base.EventID = PSF_EVENT_TS_CONFIG | (uint16_t)PARAM_COUNT(4);
 800519e:	8003      	strh	r3, [r0, #0]
	return TRC_HWTC_COUNT;
 80051a0:	f8da 3000 	ldr.w	r3, [sl]
			event->base.TS = prvGetTimestamp32();
 80051a4:	6043      	str	r3, [r0, #4]
			event->param1 = (uint32_t)timestampFrequency;
 80051a6:	682b      	ldr	r3, [r5, #0]
 80051a8:	6083      	str	r3, [r0, #8]
			event->param3 = (uint32_t)(TRC_HWTC_TYPE);
 80051aa:	2301      	movs	r3, #1
 80051ac:	e9c0 2303 	strd	r2, r3, [r0, #12]
			event->param4 = (uint32_t)(TRC_CFG_ISR_TAILCHAINING_THRESHOLD);
 80051b0:	2300      	movs	r3, #0
 80051b2:	6143      	str	r3, [r0, #20]
	RecorderEnabled = isEnabled;		
 80051b4:	6037      	str	r7, [r6, #0]
 80051b6:	f388 8810 	msr	PRIMASK, r8
}
 80051ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		currentTask = (void*)HANDLE_NO_TASK;
 80051be:	f04f 0a02 	mov.w	sl, #2
 80051c2:	e7bb      	b.n	800513c <prvSetRecorderEnabled+0x104>
 80051c4:	24000c4c 	.word	0x24000c4c
 80051c8:	2401fcec 	.word	0x2401fcec
 80051cc:	24000c58 	.word	0x24000c58
 80051d0:	2400000c 	.word	0x2400000c
 80051d4:	50534600 	.word	0x50534600
 80051d8:	1aa10006 	.word	0x1aa10006
 80051dc:	24001668 	.word	0x24001668
 80051e0:	00320008 	.word	0x00320008
 80051e4:	2400000e 	.word	0x2400000e
 80051e8:	2400166c 	.word	0x2400166c
 80051ec:	24000c50 	.word	0x24000c50
 80051f0:	e0001004 	.word	0xe0001004
 80051f4:	24001670 	.word	0x24001670
 80051f8:	24001664 	.word	0x24001664
 80051fc:	24000000 	.word	0x24000000
 8005200:	003c0024 	.word	0x003c0024
 8005204:	24000df4 	.word	0x24000df4
 8005208:	24000c64 	.word	0x24000c64

0800520c <vTraceStop>:
	prvSetRecorderEnabled(0);
 800520c:	2000      	movs	r0, #0
 800520e:	f7ff bf13 	b.w	8005038 <prvSetRecorderEnabled>
	...

08005214 <prvPagedEventBufferTransfer>:
{
 8005214:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  	int8_t index = (int8_t) ((lastPage + 1) % (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT));
 8005218:	4c2d      	ldr	r4, [pc, #180]	; (80052d0 <prvPagedEventBufferTransfer+0xbc>)
	int32_t bytesTransferredNow = 0;
 800521a:	2300      	movs	r3, #0
  	int8_t index = (int8_t) ((lastPage + 1) % (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT));
 800521c:	2015      	movs	r0, #21
 800521e:	f994 2000 	ldrsb.w	r2, [r4]
	int32_t bytesTransferredNow = 0;
 8005222:	9301      	str	r3, [sp, #4]
  	int8_t index = (int8_t) ((lastPage + 1) % (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT));
 8005224:	2314      	movs	r3, #20
 8005226:	3201      	adds	r2, #1
 8005228:	fb92 f5f3 	sdiv	r5, r2, r3
 800522c:	fb03 2515 	mls	r5, r3, r5, r2
	while((PageInfo[index].Status != PAGE_STATUS_READ) && (count++ < (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT)))
 8005230:	4a28      	ldr	r2, [pc, #160]	; (80052d4 <prvPagedEventBufferTransfer+0xc0>)
  	int8_t index = (int8_t) ((lastPage + 1) % (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT));
 8005232:	b26d      	sxtb	r5, r5
 8005234:	4617      	mov	r7, r2
	while((PageInfo[index].Status != PAGE_STATUS_READ) && (count++ < (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT)))
 8005236:	f832 1035 	ldrh.w	r1, [r2, r5, lsl #3]
 800523a:	2902      	cmp	r1, #2
 800523c:	d00f      	beq.n	800525e <prvPagedEventBufferTransfer+0x4a>
 800523e:	3801      	subs	r0, #1
 8005240:	d102      	bne.n	8005248 <prvPagedEventBufferTransfer+0x34>
}
 8005242:	b002      	add	sp, #8
 8005244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index = (int8_t)((index + 1) % (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT));
 8005248:	1c69      	adds	r1, r5, #1
 800524a:	fb91 f5f3 	sdiv	r5, r1, r3
 800524e:	fb03 1515 	mls	r5, r3, r5, r1
 8005252:	b26d      	sxtb	r5, r5
 8005254:	e7ef      	b.n	8005236 <prvPagedEventBufferTransfer+0x22>
				vTraceStop();
 8005256:	f7ff ffd9 	bl	800520c <vTraceStop>
	return 0;
 800525a:	2000      	movs	r0, #0
 800525c:	e7f1      	b.n	8005242 <prvPagedEventBufferTransfer+0x2e>
		*bytesUsed = (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE) - PageInfo[index].BytesRemaining;
 800525e:	00ee      	lsls	r6, r5, #3
    if (pageToTransfer > -1)
 8005260:	2d00      	cmp	r5, #0
		lastPage = index;
 8005262:	7025      	strb	r5, [r4, #0]
		*bytesUsed = (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE) - PageInfo[index].BytesRemaining;
 8005264:	4432      	add	r2, r6
 8005266:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 800526a:	f5c8 78fa 	rsb	r8, r8, #500	; 0x1f4
    if (pageToTransfer > -1)
 800526e:	dbf4      	blt.n	800525a <prvPagedEventBufferTransfer+0x46>
			if (TRC_STREAM_PORT_WRITE_DATA(
 8005270:	f44f 79fa 	mov.w	r9, #500	; 0x1f4
    int32_t bytesTransferredTotal = 0;
 8005274:	2400      	movs	r4, #0
			if (TRC_STREAM_PORT_WRITE_DATA(
 8005276:	f8df a064 	ldr.w	sl, [pc, #100]	; 80052dc <prvPagedEventBufferTransfer+0xc8>
 800527a:	fb09 f905 	mul.w	r9, r9, r5
 800527e:	eb09 0004 	add.w	r0, r9, r4
 8005282:	f8da 3000 	ldr.w	r3, [sl]
 8005286:	aa01      	add	r2, sp, #4
 8005288:	eba8 0104 	sub.w	r1, r8, r4
 800528c:	4418      	add	r0, r3
 800528e:	f7ff fb1b 	bl	80048c8 <trcCDCTransmit>
 8005292:	2800      	cmp	r0, #0
 8005294:	d1df      	bne.n	8005256 <prvPagedEventBufferTransfer+0x42>
				bytesTransferredTotal += bytesTransferredNow;
 8005296:	9b01      	ldr	r3, [sp, #4]
 8005298:	441c      	add	r4, r3
				if (bytesTransferredTotal == bytesToTransfer)
 800529a:	4544      	cmp	r4, r8
 800529c:	d1ef      	bne.n	800527e <prvPagedEventBufferTransfer+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800529e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a2:	2301      	movs	r3, #1
 80052a4:	f383 8810 	msr	PRIMASK, r3
	PageInfo[pageIndex].BytesRemaining = (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE);
 80052a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80052ac:	443e      	add	r6, r7
	TotalBytesRemaining += (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE);
 80052ae:	4a0a      	ldr	r2, [pc, #40]	; (80052d8 <prvPagedEventBufferTransfer+0xc4>)
	PageInfo[pageIndex].BytesRemaining = (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE);
 80052b0:	8073      	strh	r3, [r6, #2]
	PageInfo[pageIndex].WritePointer = &EventBuffer[pageIndex * (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE)];
 80052b2:	f8da 3000 	ldr.w	r3, [sl]
	PageInfo[pageIndex].Status = PAGE_STATUS_FREE;
 80052b6:	f827 0035 	strh.w	r0, [r7, r5, lsl #3]
	PageInfo[pageIndex].WritePointer = &EventBuffer[pageIndex * (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE)];
 80052ba:	444b      	add	r3, r9
 80052bc:	6073      	str	r3, [r6, #4]
	TotalBytesRemaining += (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE);
 80052be:	6813      	ldr	r3, [r2, #0]
 80052c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	f381 8810 	msr	PRIMASK, r1
					return (uint32_t)bytesTransferredTotal;
 80052ca:	4620      	mov	r0, r4
 80052cc:	e7b9      	b.n	8005242 <prvPagedEventBufferTransfer+0x2e>
 80052ce:	bf00      	nop
 80052d0:	24000020 	.word	0x24000020
 80052d4:	24022400 	.word	0x24022400
 80052d8:	24000014 	.word	0x24000014
 80052dc:	24000c38 	.word	0x24000c38

080052e0 <prvProcessCommand>:
  	switch(cmd->cmdCode)
 80052e0:	7803      	ldrb	r3, [r0, #0]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d102      	bne.n	80052ec <prvProcessCommand+0xc>
		  	prvSetRecorderEnabled(cmd->param1);
 80052e6:	7840      	ldrb	r0, [r0, #1]
 80052e8:	f7ff bea6 	b.w	8005038 <prvSetRecorderEnabled>
}
 80052ec:	4770      	bx	lr
	...

080052f0 <prvTraceError>:
	if (errorCode == PSF_ERROR_NONE)
 80052f0:	4b11      	ldr	r3, [pc, #68]	; (8005338 <prvTraceError+0x48>)
 80052f2:	681a      	ldr	r2, [r3, #0]
{
 80052f4:	b510      	push	{r4, lr}
	if (errorCode == PSF_ERROR_NONE)
 80052f6:	b9f2      	cbnz	r2, 8005336 <prvTraceError+0x46>
		errorCode = errCode;
 80052f8:	6018      	str	r0, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 80052fa:	3801      	subs	r0, #1
 80052fc:	490f      	ldr	r1, [pc, #60]	; (800533c <prvTraceError+0x4c>)
 80052fe:	2301      	movs	r3, #1
 8005300:	280d      	cmp	r0, #13
 8005302:	680c      	ldr	r4, [r1, #0]
 8005304:	fa03 f300 	lsl.w	r3, r3, r0
 8005308:	ea43 0304 	orr.w	r3, r3, r4
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 800530c:	4c0c      	ldr	r4, [pc, #48]	; (8005340 <prvTraceError+0x50>)
		SET_ERROR_WARNING_FLAG(errorCode);
 800530e:	600b      	str	r3, [r1, #0]
 8005310:	bf98      	it	ls
 8005312:	4b0c      	ldrls	r3, [pc, #48]	; (8005344 <prvTraceError+0x54>)
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8005314:	6821      	ldr	r1, [r4, #0]
 8005316:	bf98      	it	ls
 8005318:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
 800531c:	2090      	movs	r0, #144	; 0x90
 800531e:	f7ff fdf7 	bl	8004f10 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8005322:	6821      	ldr	r1, [r4, #0]
 8005324:	2090      	movs	r0, #144	; 0x90
 8005326:	4a08      	ldr	r2, [pc, #32]	; (8005348 <prvTraceError+0x58>)
 8005328:	f7ff fdf2 	bl	8004f10 <prvTraceStoreSimpleStringEventHelper>
		prvSetRecorderEnabled(0);
 800532c:	2000      	movs	r0, #0
}
 800532e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prvSetRecorderEnabled(0);
 8005332:	f7ff be81 	b.w	8005038 <prvSetRecorderEnabled>
}
 8005336:	bd10      	pop	{r4, pc}
 8005338:	24000c54 	.word	0x24000c54
 800533c:	24000c34 	.word	0x24000c34
 8005340:	240223fc 	.word	0x240223fc
 8005344:	08015248 	.word	0x08015248
 8005348:	08015280 	.word	0x08015280

0800534c <prvTraceStoreEvent1>:
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 800534c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
{
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	4605      	mov	r5, r0
 8005354:	460f      	mov	r7, r1
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8005356:	d304      	bcc.n	8005362 <prvTraceStoreEvent1+0x16>
 8005358:	2001      	movs	r0, #1
}
 800535a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 800535e:	f7ff bfc7 	b.w	80052f0 <prvTraceError>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005362:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005366:	2301      	movs	r3, #1
 8005368:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 800536c:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <prvTraceStoreEvent1+0x4c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	b17b      	cbz	r3, 8005392 <prvTraceStoreEvent1+0x46>
		eventCounter++;
 8005372:	4b0a      	ldr	r3, [pc, #40]	; (800539c <prvTraceStoreEvent1+0x50>)
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_1, event, sizeof(EventWithParam_1));
 8005374:	200c      	movs	r0, #12
		eventCounter++;
 8005376:	681c      	ldr	r4, [r3, #0]
 8005378:	3401      	adds	r4, #1
 800537a:	601c      	str	r4, [r3, #0]
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_1, event, sizeof(EventWithParam_1));
 800537c:	f7ff fcee 	bl	8004d5c <prvPagedEventBufferGetWritePointer>
			if (event != NULL)
 8005380:	b138      	cbz	r0, 8005392 <prvTraceStoreEvent1+0x46>
	return TRC_HWTC_COUNT;
 8005382:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <prvTraceStoreEvent1+0x54>)
				event->base.EventID = eventID | PARAM_COUNT(1);
 8005384:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
				event->base.EventCount = (uint16_t)eventCounter;
 8005388:	8044      	strh	r4, [r0, #2]
	return TRC_HWTC_COUNT;
 800538a:	681b      	ldr	r3, [r3, #0]
				event->base.EventID = eventID | PARAM_COUNT(1);
 800538c:	8005      	strh	r5, [r0, #0]
				event->param1 = (uint32_t)param1;
 800538e:	e9c0 3701 	strd	r3, r7, [r0, #4]
 8005392:	f386 8810 	msr	PRIMASK, r6
}
 8005396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005398:	24000c4c 	.word	0x24000c4c
 800539c:	24000c58 	.word	0x24000c58
 80053a0:	e0001004 	.word	0xe0001004

080053a4 <prvTraceStoreEvent2>:
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80053a4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
{
 80053a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ac:	4605      	mov	r5, r0
 80053ae:	4688      	mov	r8, r1
 80053b0:	4617      	mov	r7, r2
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80053b2:	d304      	bcc.n	80053be <prvTraceStoreEvent2+0x1a>
 80053b4:	2001      	movs	r0, #1
}
 80053b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80053ba:	f7ff bf99 	b.w	80052f0 <prvTraceError>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053be:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c2:	2301      	movs	r3, #1
 80053c4:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 80053c8:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <prvTraceStoreEvent2+0x54>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	b183      	cbz	r3, 80053f0 <prvTraceStoreEvent2+0x4c>
		eventCounter++;
 80053ce:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <prvTraceStoreEvent2+0x58>)
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_2, event, sizeof(EventWithParam_2));
 80053d0:	2010      	movs	r0, #16
		eventCounter++;
 80053d2:	681c      	ldr	r4, [r3, #0]
 80053d4:	3401      	adds	r4, #1
 80053d6:	601c      	str	r4, [r3, #0]
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_2, event, sizeof(EventWithParam_2));
 80053d8:	f7ff fcc0 	bl	8004d5c <prvPagedEventBufferGetWritePointer>
			if (event != NULL)
 80053dc:	b140      	cbz	r0, 80053f0 <prvTraceStoreEvent2+0x4c>
	return TRC_HWTC_COUNT;
 80053de:	4b08      	ldr	r3, [pc, #32]	; (8005400 <prvTraceStoreEvent2+0x5c>)
				event->base.EventID = eventID | PARAM_COUNT(2);
 80053e0:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000
				event->base.EventCount = (uint16_t)eventCounter;
 80053e4:	8044      	strh	r4, [r0, #2]
	return TRC_HWTC_COUNT;
 80053e6:	681b      	ldr	r3, [r3, #0]
				event->base.EventID = eventID | PARAM_COUNT(2);
 80053e8:	8005      	strh	r5, [r0, #0]
				event->param2 = param2;
 80053ea:	60c7      	str	r7, [r0, #12]
				event->param1 = (uint32_t)param1;
 80053ec:	e9c0 3801 	strd	r3, r8, [r0, #4]
 80053f0:	f386 8810 	msr	PRIMASK, r6
}
 80053f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053f8:	24000c4c 	.word	0x24000c4c
 80053fc:	24000c58 	.word	0x24000c58
 8005400:	e0001004 	.word	0xe0001004

08005404 <prvTraceStoreEvent3>:
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8005404:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
{
 8005408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800540c:	4605      	mov	r5, r0
 800540e:	4688      	mov	r8, r1
 8005410:	4691      	mov	r9, r2
 8005412:	461f      	mov	r7, r3
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8005414:	d304      	bcc.n	8005420 <prvTraceStoreEvent3+0x1c>
 8005416:	2001      	movs	r0, #1
}
 8005418:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 800541c:	f7ff bf68 	b.w	80052f0 <prvTraceError>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005420:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005424:	2301      	movs	r3, #1
 8005426:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 800542a:	4b0c      	ldr	r3, [pc, #48]	; (800545c <prvTraceStoreEvent3+0x58>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	b18b      	cbz	r3, 8005454 <prvTraceStoreEvent3+0x50>
  		eventCounter++;
 8005430:	480b      	ldr	r0, [pc, #44]	; (8005460 <prvTraceStoreEvent3+0x5c>)
 8005432:	6804      	ldr	r4, [r0, #0]
 8005434:	3401      	adds	r4, #1
 8005436:	6004      	str	r4, [r0, #0]
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_3, event, sizeof(EventWithParam_3));
 8005438:	2014      	movs	r0, #20
 800543a:	f7ff fc8f 	bl	8004d5c <prvPagedEventBufferGetWritePointer>
			if (event != NULL)
 800543e:	b148      	cbz	r0, 8005454 <prvTraceStoreEvent3+0x50>
	return TRC_HWTC_COUNT;
 8005440:	4b08      	ldr	r3, [pc, #32]	; (8005464 <prvTraceStoreEvent3+0x60>)
				event->base.EventID = eventID | PARAM_COUNT(3);
 8005442:	f445 5540 	orr.w	r5, r5, #12288	; 0x3000
				event->base.EventCount = (uint16_t)eventCounter;
 8005446:	8044      	strh	r4, [r0, #2]
	return TRC_HWTC_COUNT;
 8005448:	681b      	ldr	r3, [r3, #0]
				event->base.EventID = eventID | PARAM_COUNT(3);
 800544a:	8005      	strh	r5, [r0, #0]
				event->param1 = (uint32_t)param1;
 800544c:	e9c0 3801 	strd	r3, r8, [r0, #4]
				event->param3 = param3;
 8005450:	e9c0 9703 	strd	r9, r7, [r0, #12]
 8005454:	f386 8810 	msr	PRIMASK, r6
}
 8005458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800545c:	24000c4c 	.word	0x24000c4c
 8005460:	24000c58 	.word	0x24000c58
 8005464:	e0001004 	.word	0xe0001004

08005468 <prvTraceInitCortexM>:
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8005468:	4b0e      	ldr	r3, [pc, #56]	; (80054a4 <prvTraceInitCortexM+0x3c>)
 800546a:	4a0f      	ldr	r2, [pc, #60]	; (80054a8 <prvTraceInitCortexM+0x40>)
 800546c:	601a      	str	r2, [r3, #0]
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 800546e:	f503 434e 	add.w	r3, r3, #52736	; 0xce00
 8005472:	334c      	adds	r3, #76	; 0x4c
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800547a:	601a      	str	r2, [r3, #0]
		if (TRC_REG_DEMCR == 0)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	b913      	cbnz	r3, 8005486 <prvTraceInitCortexM+0x1e>
			prvTraceError(PSF_ERROR_DWT_NOT_SUPPORTED);
 8005480:	2003      	movs	r0, #3
			prvTraceError(PSF_ERROR_DWT_CYCCNT_NOT_SUPPORTED);
 8005482:	f7ff bf35 	b.w	80052f0 <prvTraceError>
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 8005486:	4a09      	ldr	r2, [pc, #36]	; (80054ac <prvTraceInitCortexM+0x44>)
 8005488:	6813      	ldr	r3, [r2, #0]
 800548a:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 800548e:	d001      	beq.n	8005494 <prvTraceInitCortexM+0x2c>
			prvTraceError(PSF_ERROR_DWT_CYCCNT_NOT_SUPPORTED);
 8005490:	2004      	movs	r0, #4
 8005492:	e7f6      	b.n	8005482 <prvTraceInitCortexM+0x1a>
		TRC_REG_DWT_CYCCNT = 0;
 8005494:	4906      	ldr	r1, [pc, #24]	; (80054b0 <prvTraceInitCortexM+0x48>)
 8005496:	600b      	str	r3, [r1, #0]
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8005498:	6813      	ldr	r3, [r2, #0]
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	6013      	str	r3, [r2, #0]
}
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	e0001fb0 	.word	0xe0001fb0
 80054a8:	c5acce55 	.word	0xc5acce55
 80054ac:	e0001000 	.word	0xe0001000
 80054b0:	e0001004 	.word	0xe0001004

080054b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80054b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054ec <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80054b8:	f7fd ff7e 	bl	80033b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80054bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80054be:	e003      	b.n	80054c8 <LoopCopyDataInit>

080054c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80054c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80054c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80054c6:	3104      	adds	r1, #4

080054c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80054c8:	480a      	ldr	r0, [pc, #40]	; (80054f4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80054ca:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80054cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80054ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80054d0:	d3f6      	bcc.n	80054c0 <CopyDataInit>
  ldr  r2, =_sbss
 80054d2:	4a0a      	ldr	r2, [pc, #40]	; (80054fc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80054d4:	e002      	b.n	80054dc <LoopFillZerobss>

080054d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80054d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80054d8:	f842 3b04 	str.w	r3, [r2], #4

080054dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80054dc:	4b08      	ldr	r3, [pc, #32]	; (8005500 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80054de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80054e0:	d3f9      	bcc.n	80054d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80054e2:	f00d fb71 	bl	8012bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054e6:	f7fc fe95 	bl	8002214 <main>
  bx  lr    
 80054ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80054ec:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80054f0:	080159a8 	.word	0x080159a8
  ldr  r0, =_sdata
 80054f4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80054f8:	2400020c 	.word	0x2400020c
  ldr  r2, =_sbss
 80054fc:	2400020c 	.word	0x2400020c
  ldr  r3, = _ebss
 8005500:	2402422c 	.word	0x2402422c

08005504 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005504:	e7fe      	b.n	8005504 <ADC3_IRQHandler>
	...

08005508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005508:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800550a:	2003      	movs	r0, #3
 800550c:	f000 fea0 	bl	8006250 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005510:	f003 f920 	bl	8008754 <HAL_RCC_GetSysClockFreq>
 8005514:	490f      	ldr	r1, [pc, #60]	; (8005554 <HAL_Init+0x4c>)
 8005516:	4a10      	ldr	r2, [pc, #64]	; (8005558 <HAL_Init+0x50>)
 8005518:	698b      	ldr	r3, [r1, #24]
 800551a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800551e:	5cd3      	ldrb	r3, [r2, r3]
 8005520:	f003 031f 	and.w	r3, r3, #31
 8005524:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005526:	698b      	ldr	r3, [r1, #24]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	5cd3      	ldrb	r3, [r2, r3]
 800552e:	4a0b      	ldr	r2, [pc, #44]	; (800555c <HAL_Init+0x54>)
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	fa20 f303 	lsr.w	r3, r0, r3
 8005538:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800553a:	4b09      	ldr	r3, [pc, #36]	; (8005560 <HAL_Init+0x58>)
 800553c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800553e:	2000      	movs	r0, #0
 8005540:	f7fd fe68 	bl	8003214 <HAL_InitTick>
 8005544:	4604      	mov	r4, r0
 8005546:	b918      	cbnz	r0, 8005550 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005548:	f7fd fac0 	bl	8002acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800554c:	4620      	mov	r0, r4
 800554e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005550:	2401      	movs	r4, #1
 8005552:	e7fb      	b.n	800554c <HAL_Init+0x44>
 8005554:	58024400 	.word	0x58024400
 8005558:	08014dc8 	.word	0x08014dc8
 800555c:	24000004 	.word	0x24000004
 8005560:	24000000 	.word	0x24000000

08005564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005564:	4a03      	ldr	r2, [pc, #12]	; (8005574 <HAL_IncTick+0x10>)
 8005566:	4b04      	ldr	r3, [pc, #16]	; (8005578 <HAL_IncTick+0x14>)
 8005568:	6811      	ldr	r1, [r2, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	440b      	add	r3, r1
 800556e:	6013      	str	r3, [r2, #0]
}
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	240224a0 	.word	0x240224a0
 8005578:	24000021 	.word	0x24000021

0800557c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800557c:	4b01      	ldr	r3, [pc, #4]	; (8005584 <HAL_GetTick+0x8>)
 800557e:	6818      	ldr	r0, [r3, #0]
}
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	240224a0 	.word	0x240224a0

08005588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800558c:	f7ff fff6 	bl	800557c <HAL_GetTick>
 8005590:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005592:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005594:	bf1e      	ittt	ne
 8005596:	4b04      	ldrne	r3, [pc, #16]	; (80055a8 <HAL_Delay+0x20>)
 8005598:	781b      	ldrbne	r3, [r3, #0]
 800559a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800559c:	f7ff ffee 	bl	800557c <HAL_GetTick>
 80055a0:	1b40      	subs	r0, r0, r5
 80055a2:	42a0      	cmp	r0, r4
 80055a4:	d3fa      	bcc.n	800559c <HAL_Delay+0x14>
  {
  }
}
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
 80055a8:	24000021 	.word	0x24000021

080055ac <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80055ac:	4b01      	ldr	r3, [pc, #4]	; (80055b4 <HAL_GetREVID+0x8>)
 80055ae:	6818      	ldr	r0, [r3, #0]
}
 80055b0:	0c00      	lsrs	r0, r0, #16
 80055b2:	4770      	bx	lr
 80055b4:	5c001000 	.word	0x5c001000

080055b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80055b8:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80055ba:	0dcc      	lsrs	r4, r1, #23
 80055bc:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 80055be:	f3c1 5104 	ubfx	r1, r1, #20, #5
 80055c2:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80055c4:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 80055c8:	408d      	lsls	r5, r1
 80055ca:	fa02 f101 	lsl.w	r1, r2, r1
 80055ce:	5823      	ldr	r3, [r4, r0]
 80055d0:	ea23 0305 	bic.w	r3, r3, r5
 80055d4:	4319      	orrs	r1, r3
 80055d6:	5021      	str	r1, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80055d8:	bd30      	pop	{r4, r5, pc}

080055da <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055da:	6880      	ldr	r0, [r0, #8]
}
 80055dc:	f000 0001 	and.w	r0, r0, #1
 80055e0:	4770      	bx	lr

080055e2 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055e2:	6880      	ldr	r0, [r0, #8]
}
 80055e4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80055e8:	4770      	bx	lr

080055ea <HAL_ADC_ConvCpltCallback>:
 80055ea:	4770      	bx	lr

080055ec <HAL_ADC_ConvHalfCpltCallback>:
 80055ec:	4770      	bx	lr

080055ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80055ee:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80055f0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80055f2:	f7ff fffb 	bl	80055ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80055f6:	bd08      	pop	{r3, pc}

080055f8 <HAL_ADC_ErrorCallback>:
 80055f8:	4770      	bx	lr

080055fa <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80055fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055fe:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005602:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 8005604:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005606:	d121      	bne.n	800564c <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800560c:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	6811      	ldr	r1, [r2, #0]
 8005612:	0708      	lsls	r0, r1, #28
 8005614:	d516      	bpl.n	8005644 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005616:	68d1      	ldr	r1, [r2, #12]
 8005618:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 800561c:	d10e      	bne.n	800563c <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800561e:	68d2      	ldr	r2, [r2, #12]
 8005620:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005624:	d10a      	bne.n	800563c <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005626:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800562c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800562e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005630:	04d1      	lsls	r1, r2, #19
 8005632:	d403      	bmi.n	800563c <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005636:	f042 0201 	orr.w	r2, r2, #1
 800563a:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff ffd4 	bl	80055ea <HAL_ADC_ConvCpltCallback>
}
 8005642:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005644:	68d2      	ldr	r2, [r2, #12]
 8005646:	f012 0f03 	tst.w	r2, #3
 800564a:	e7eb      	b.n	8005624 <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800564c:	06d2      	lsls	r2, r2, #27
 800564e:	d503      	bpl.n	8005658 <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff ffd1 	bl	80055f8 <HAL_ADC_ErrorCallback>
 8005656:	e7f4      	b.n	8005642 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800565a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800565e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005660:	4718      	bx	r3

08005662 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005662:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005664:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005666:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800566c:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800566e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005670:	f043 0304 	orr.w	r3, r3, #4
 8005674:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005676:	f7ff ffbf 	bl	80055f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800567a:	bd08      	pop	{r3, pc}

0800567c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 800567c:	2300      	movs	r3, #0
{
 800567e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8005680:	9301      	str	r3, [sp, #4]
{
 8005682:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8005684:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8005688:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 800568a:	2b01      	cmp	r3, #1
 800568c:	f000 8173 	beq.w	8005976 <HAL_ADC_ConfigChannel+0x2fa>
 8005690:	2301      	movs	r3, #1
 8005692:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005696:	6800      	ldr	r0, [r0, #0]
 8005698:	f7ff ffa3 	bl	80055e2 <LL_ADC_REG_IsConversionOngoing>
 800569c:	2800      	cmp	r0, #0
 800569e:	f040 8164 	bne.w	800596a <HAL_ADC_ConfigChannel+0x2ee>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80056a2:	680a      	ldr	r2, [r1, #0]
 80056a4:	f3c2 0013 	ubfx	r0, r2, #0, #20
 80056a8:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80056ac:	bb50      	cbnz	r0, 8005704 <HAL_ADC_ConfigChannel+0x88>
 80056ae:	408b      	lsls	r3, r1
 80056b0:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(*preg,
 80056b2:	271f      	movs	r7, #31
 80056b4:	69c2      	ldr	r2, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80056b6:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 80056ba:	4313      	orrs	r3, r2
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80056bc:	686a      	ldr	r2, [r5, #4]
 80056be:	0996      	lsrs	r6, r2, #6
  MODIFY_REG(*preg,
 80056c0:	f002 021f 	and.w	r2, r2, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80056c4:	61c3      	str	r3, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80056c6:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 80056ca:	4097      	lsls	r7, r2
 80056cc:	fa01 f202 	lsl.w	r2, r1, r2
 80056d0:	f856 300c 	ldr.w	r3, [r6, ip]
 80056d4:	ea23 0307 	bic.w	r3, r3, r7
 80056d8:	4313      	orrs	r3, r2
 80056da:	f846 300c 	str.w	r3, [r6, ip]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80056de:	f7ff ff80 	bl	80055e2 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80056e2:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80056e4:	689e      	ldr	r6, [r3, #8]
 80056e6:	f016 0608 	ands.w	r6, r6, #8
 80056ea:	f000 8146 	beq.w	800597a <HAL_ADC_ConfigChannel+0x2fe>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056ee:	6820      	ldr	r0, [r4, #0]
 80056f0:	f7ff ff73 	bl	80055da <LL_ADC_IsEnabled>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d03c      	beq.n	8005772 <HAL_ADC_ConfigChannel+0xf6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056f8:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80056fa:	2300      	movs	r3, #0
 80056fc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005700:	b003      	add	sp, #12
 8005702:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005704:	fa92 f0a2 	rbit	r0, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005708:	fab0 f080 	clz	r0, r0
 800570c:	f000 001f 	and.w	r0, r0, #31
 8005710:	4083      	lsls	r3, r0
 8005712:	e7cd      	b.n	80056b0 <HAL_ADC_ConfigChannel+0x34>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005714:	68d9      	ldr	r1, [r3, #12]
 8005716:	68d8      	ldr	r0, [r3, #12]
 8005718:	06c9      	lsls	r1, r1, #27
 800571a:	f140 8141 	bpl.w	80059a0 <HAL_ADC_ConfigChannel+0x324>
 800571e:	0840      	lsrs	r0, r0, #1
 8005720:	f000 0008 	and.w	r0, r0, #8
 8005724:	e13f      	b.n	80059a6 <HAL_ADC_ConfigChannel+0x32a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005726:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005728:	0692      	lsls	r2, r2, #26
 800572a:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 800572e:	4291      	cmp	r1, r2
 8005730:	d103      	bne.n	800573a <HAL_ADC_ConfigChannel+0xbe>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005732:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005734:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005738:	6619      	str	r1, [r3, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800573a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800573c:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005740:	428a      	cmp	r2, r1
 8005742:	d103      	bne.n	800574c <HAL_ADC_ConfigChannel+0xd0>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005744:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8005746:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800574a:	6659      	str	r1, [r3, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800574c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800574e:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005752:	428a      	cmp	r2, r1
 8005754:	d103      	bne.n	800575e <HAL_ADC_ConfigChannel+0xe2>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005756:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800575c:	6699      	str	r1, [r3, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800575e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8005760:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005764:	428a      	cmp	r2, r1
 8005766:	d1c2      	bne.n	80056ee <HAL_ADC_ConfigChannel+0x72>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005768:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800576a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800576e:	66da      	str	r2, [r3, #108]	; 0x6c
 8005770:	e7bd      	b.n	80056ee <HAL_ADC_ConfigChannel+0x72>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005772:	68ee      	ldr	r6, [r5, #12]
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8005778:	f006 0c18 	and.w	ip, r6, #24
 800577c:	4aa3      	ldr	r2, [pc, #652]	; (8005a0c <HAL_ADC_ConfigChannel+0x390>)
 800577e:	f3c3 0713 	ubfx	r7, r3, #0, #20
 8005782:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 8005786:	fa22 f20c 	lsr.w	r2, r2, ip
 800578a:	ea21 0107 	bic.w	r1, r1, r7
 800578e:	401a      	ands	r2, r3
 8005790:	430a      	orrs	r2, r1
 8005792:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005796:	4a9e      	ldr	r2, [pc, #632]	; (8005a10 <HAL_ADC_ConfigChannel+0x394>)
 8005798:	4296      	cmp	r6, r2
 800579a:	d11d      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x15c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800579c:	2f00      	cmp	r7, #0
 800579e:	d161      	bne.n	8005864 <HAL_ADC_ConfigChannel+0x1e8>
 80057a0:	0e9a      	lsrs	r2, r3, #26
 80057a2:	3201      	adds	r2, #1
 80057a4:	f002 061f 	and.w	r6, r2, #31
 80057a8:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057aa:	2e09      	cmp	r6, #9
 80057ac:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80057b0:	f04f 0201 	mov.w	r2, #1
 80057b4:	fa02 f206 	lsl.w	r2, r2, r6
 80057b8:	f200 8085 	bhi.w	80058c6 <HAL_ADC_ConfigChannel+0x24a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80057bc:	4311      	orrs	r1, r2
 80057be:	2f00      	cmp	r7, #0
 80057c0:	d16b      	bne.n	800589a <HAL_ADC_ConfigChannel+0x21e>
 80057c2:	0e9b      	lsrs	r3, r3, #26
 80057c4:	3301      	adds	r3, #1
 80057c6:	f003 031f 	and.w	r3, r3, #31
 80057ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80057ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057d0:	4319      	orrs	r1, r3
 80057d2:	68aa      	ldr	r2, [r5, #8]
 80057d4:	f7ff fef0 	bl	80055b8 <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	da8c      	bge.n	80056f8 <HAL_ADC_ConfigChannel+0x7c>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057de:	6822      	ldr	r2, [r4, #0]
 80057e0:	498c      	ldr	r1, [pc, #560]	; (8005a14 <HAL_ADC_ConfigChannel+0x398>)
 80057e2:	428a      	cmp	r2, r1
 80057e4:	f000 8089 	beq.w	80058fa <HAL_ADC_ConfigChannel+0x27e>
 80057e8:	4e8b      	ldr	r6, [pc, #556]	; (8005a18 <HAL_ADC_ConfigChannel+0x39c>)
 80057ea:	4b8c      	ldr	r3, [pc, #560]	; (8005a1c <HAL_ADC_ConfigChannel+0x3a0>)
 80057ec:	488c      	ldr	r0, [pc, #560]	; (8005a20 <HAL_ADC_ConfigChannel+0x3a4>)
 80057ee:	42b2      	cmp	r2, r6
 80057f0:	bf08      	it	eq
 80057f2:	4603      	moveq	r3, r0
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057f4:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	d002      	beq.n	8005800 <HAL_ADC_ConfigChannel+0x184>
 80057fa:	4987      	ldr	r1, [pc, #540]	; (8005a18 <HAL_ADC_ConfigChannel+0x39c>)
 80057fc:	428a      	cmp	r2, r1
 80057fe:	d17e      	bne.n	80058fe <HAL_ADC_ConfigChannel+0x282>
 8005800:	4884      	ldr	r0, [pc, #528]	; (8005a14 <HAL_ADC_ConfigChannel+0x398>)
 8005802:	f7ff feea 	bl	80055da <LL_ADC_IsEnabled>
 8005806:	4602      	mov	r2, r0
 8005808:	4883      	ldr	r0, [pc, #524]	; (8005a18 <HAL_ADC_ConfigChannel+0x39c>)
 800580a:	f7ff fee6 	bl	80055da <LL_ADC_IsEnabled>
 800580e:	4302      	orrs	r2, r0
 8005810:	bf0c      	ite	eq
 8005812:	2001      	moveq	r0, #1
 8005814:	2000      	movne	r0, #0
 8005816:	2800      	cmp	r0, #0
 8005818:	f000 80a1 	beq.w	800595e <HAL_ADC_ConfigChannel+0x2e2>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800581c:	6829      	ldr	r1, [r5, #0]
 800581e:	f003 72e0 	and.w	r2, r3, #29360128	; 0x1c00000
 8005822:	4880      	ldr	r0, [pc, #512]	; (8005a24 <HAL_ADC_ConfigChannel+0x3a8>)
 8005824:	4281      	cmp	r1, r0
 8005826:	d171      	bne.n	800590c <HAL_ADC_ConfigChannel+0x290>
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	f53f af65 	bmi.w	80056f8 <HAL_ADC_ConfigChannel+0x7c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800582e:	6821      	ldr	r1, [r4, #0]
 8005830:	4b7d      	ldr	r3, [pc, #500]	; (8005a28 <HAL_ADC_ConfigChannel+0x3ac>)
 8005832:	4299      	cmp	r1, r3
 8005834:	f47f af60 	bne.w	80056f8 <HAL_ADC_ConfigChannel+0x7c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005838:	4978      	ldr	r1, [pc, #480]	; (8005a1c <HAL_ADC_ConfigChannel+0x3a0>)
 800583a:	688b      	ldr	r3, [r1, #8]
 800583c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005840:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005844:	4313      	orrs	r3, r2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005846:	4a79      	ldr	r2, [pc, #484]	; (8005a2c <HAL_ADC_ConfigChannel+0x3b0>)
 8005848:	608b      	str	r3, [r1, #8]
 800584a:	4b79      	ldr	r3, [pc, #484]	; (8005a30 <HAL_ADC_ConfigChannel+0x3b4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005852:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 8005854:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8005856:	9b01      	ldr	r3, [sp, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f43f af4d 	beq.w	80056f8 <HAL_ADC_ConfigChannel+0x7c>
                wait_loop_index--;
 800585e:	9b01      	ldr	r3, [sp, #4]
 8005860:	3b01      	subs	r3, #1
 8005862:	e7f7      	b.n	8005854 <HAL_ADC_ConfigChannel+0x1d8>
 8005864:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005868:	fab2 f282 	clz	r2, r2
 800586c:	3201      	adds	r2, #1
 800586e:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005872:	2a09      	cmp	r2, #9
 8005874:	d816      	bhi.n	80058a4 <HAL_ADC_ConfigChannel+0x228>
 8005876:	fa93 f1a3 	rbit	r1, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800587a:	fab1 f181 	clz	r1, r1
 800587e:	3101      	adds	r1, #1
 8005880:	0689      	lsls	r1, r1, #26
 8005882:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005886:	fa93 f2a3 	rbit	r2, r3
 800588a:	fab2 f282 	clz	r2, r2
 800588e:	3201      	adds	r2, #1
 8005890:	f002 061f 	and.w	r6, r2, #31
 8005894:	2201      	movs	r2, #1
 8005896:	40b2      	lsls	r2, r6
 8005898:	e790      	b.n	80057bc <HAL_ADC_ConfigChannel+0x140>
 800589a:	fa93 f3a3 	rbit	r3, r3
 800589e:	fab3 f383 	clz	r3, r3
 80058a2:	e78f      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x148>
 80058a4:	fa93 f1a3 	rbit	r1, r3
 80058a8:	fab1 f181 	clz	r1, r1
 80058ac:	3101      	adds	r1, #1
 80058ae:	0689      	lsls	r1, r1, #26
 80058b0:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 80058b4:	fa93 f2a3 	rbit	r2, r3
 80058b8:	fab2 f282 	clz	r2, r2
 80058bc:	3201      	adds	r2, #1
 80058be:	f002 061f 	and.w	r6, r2, #31
 80058c2:	2201      	movs	r2, #1
 80058c4:	40b2      	lsls	r2, r6
 80058c6:	430a      	orrs	r2, r1
 80058c8:	b95f      	cbnz	r7, 80058e2 <HAL_ADC_ConfigChannel+0x266>
 80058ca:	0e9b      	lsrs	r3, r3, #26
 80058cc:	3301      	adds	r3, #1
 80058ce:	f003 031f 	and.w	r3, r3, #31
 80058d2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80058d6:	391e      	subs	r1, #30
 80058d8:	0509      	lsls	r1, r1, #20
 80058da:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058de:	4311      	orrs	r1, r2
 80058e0:	e777      	b.n	80057d2 <HAL_ADC_ConfigChannel+0x156>
 80058e2:	fa93 f3a3 	rbit	r3, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80058e6:	fab3 f383 	clz	r3, r3
 80058ea:	3301      	adds	r3, #1
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80058f4:	f1a3 011e 	sub.w	r1, r3, #30
 80058f8:	e7ee      	b.n	80058d8 <HAL_ADC_ConfigChannel+0x25c>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058fa:	4b49      	ldr	r3, [pc, #292]	; (8005a20 <HAL_ADC_ConfigChannel+0x3a4>)
 80058fc:	e77a      	b.n	80057f4 <HAL_ADC_ConfigChannel+0x178>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058fe:	484a      	ldr	r0, [pc, #296]	; (8005a28 <HAL_ADC_ConfigChannel+0x3ac>)
 8005900:	f7ff fe6b 	bl	80055da <LL_ADC_IsEnabled>
 8005904:	fab0 f080 	clz	r0, r0
 8005908:	0940      	lsrs	r0, r0, #5
 800590a:	e784      	b.n	8005816 <HAL_ADC_ConfigChannel+0x19a>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800590c:	4849      	ldr	r0, [pc, #292]	; (8005a34 <HAL_ADC_ConfigChannel+0x3b8>)
 800590e:	4281      	cmp	r1, r0
 8005910:	d111      	bne.n	8005936 <HAL_ADC_ConfigChannel+0x2ba>
 8005912:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
 8005916:	f47f aeef 	bne.w	80056f8 <HAL_ADC_ConfigChannel+0x7c>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800591a:	6821      	ldr	r1, [r4, #0]
 800591c:	4b42      	ldr	r3, [pc, #264]	; (8005a28 <HAL_ADC_ConfigChannel+0x3ac>)
 800591e:	4299      	cmp	r1, r3
 8005920:	f47f aeea 	bne.w	80056f8 <HAL_ADC_ConfigChannel+0x7c>
 8005924:	493d      	ldr	r1, [pc, #244]	; (8005a1c <HAL_ADC_ConfigChannel+0x3a0>)
 8005926:	688b      	ldr	r3, [r1, #8]
 8005928:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800592c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005930:	4313      	orrs	r3, r2
 8005932:	608b      	str	r3, [r1, #8]
 8005934:	e6e1      	b.n	80056fa <HAL_ADC_ConfigChannel+0x7e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005936:	4840      	ldr	r0, [pc, #256]	; (8005a38 <HAL_ADC_ConfigChannel+0x3bc>)
 8005938:	4281      	cmp	r1, r0
 800593a:	f47f aedd 	bne.w	80056f8 <HAL_ADC_ConfigChannel+0x7c>
 800593e:	f413 0080 	ands.w	r0, r3, #4194304	; 0x400000
 8005942:	f47f aed9 	bne.w	80056f8 <HAL_ADC_ConfigChannel+0x7c>
            if (ADC_VREFINT_INSTANCE(hadc))
 8005946:	6821      	ldr	r1, [r4, #0]
 8005948:	4b37      	ldr	r3, [pc, #220]	; (8005a28 <HAL_ADC_ConfigChannel+0x3ac>)
 800594a:	4299      	cmp	r1, r3
 800594c:	f47f aed4 	bne.w	80056f8 <HAL_ADC_ConfigChannel+0x7c>
 8005950:	4932      	ldr	r1, [pc, #200]	; (8005a1c <HAL_ADC_ConfigChannel+0x3a0>)
 8005952:	688b      	ldr	r3, [r1, #8]
 8005954:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005958:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800595c:	e7e8      	b.n	8005930 <HAL_ADC_ConfigChannel+0x2b4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800595e:	6d63      	ldr	r3, [r4, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8005960:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005962:	f043 0320 	orr.w	r3, r3, #32
 8005966:	6563      	str	r3, [r4, #84]	; 0x54
 8005968:	e6c7      	b.n	80056fa <HAL_ADC_ConfigChannel+0x7e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800596a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800596c:	4618      	mov	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800596e:	f042 0220 	orr.w	r2, r2, #32
 8005972:	6562      	str	r2, [r4, #84]	; 0x54
 8005974:	e6c1      	b.n	80056fa <HAL_ADC_ConfigChannel+0x7e>
  __HAL_LOCK(hadc);
 8005976:	2002      	movs	r0, #2
 8005978:	e6c2      	b.n	8005700 <HAL_ADC_ConfigChannel+0x84>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800597a:	2800      	cmp	r0, #0
 800597c:	f47f aeb7 	bne.w	80056ee <HAL_ADC_ConfigChannel+0x72>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005980:	68aa      	ldr	r2, [r5, #8]
 8005982:	4618      	mov	r0, r3
 8005984:	6829      	ldr	r1, [r5, #0]
 8005986:	f7ff fe17 	bl	80055b8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800598a:	4b2c      	ldr	r3, [pc, #176]	; (8005a3c <HAL_ADC_ConfigChannel+0x3c0>)
 800598c:	696a      	ldr	r2, [r5, #20]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	f47f aebb 	bne.w	8005714 <HAL_ADC_ConfigChannel+0x98>
 800599e:	68d8      	ldr	r0, [r3, #12]
 80059a0:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80059a4:	0040      	lsls	r0, r0, #1
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80059a6:	f8d5 c010 	ldr.w	ip, [r5, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80059aa:	fa02 f000 	lsl.w	r0, r2, r0
 80059ae:	682a      	ldr	r2, [r5, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80059b0:	f1bc 0f04 	cmp.w	ip, #4
 80059b4:	f43f aeb7 	beq.w	8005726 <HAL_ADC_ConfigChannel+0xaa>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059b8:	f103 0760 	add.w	r7, r3, #96	; 0x60
    MODIFY_REG(*preg,
 80059bc:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80059c0:	f857 102c 	ldr.w	r1, [r7, ip, lsl #2]
 80059c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80059c8:	430a      	orrs	r2, r1
 80059ca:	4302      	orrs	r2, r0
 80059cc:	f847 202c 	str.w	r2, [r7, ip, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80059d0:	7e6a      	ldrb	r2, [r5, #25]
 80059d2:	6929      	ldr	r1, [r5, #16]
 80059d4:	2a01      	cmp	r2, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80059d6:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
 80059da:	bf14      	ite	ne
 80059dc:	2000      	movne	r0, #0
 80059de:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 80059e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80059e6:	4302      	orrs	r2, r0
 80059e8:	f847 2021 	str.w	r2, [r7, r1, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80059ec:	7e29      	ldrb	r1, [r5, #24]
 80059ee:	692a      	ldr	r2, [r5, #16]
 80059f0:	2901      	cmp	r1, #1
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80059f2:	6919      	ldr	r1, [r3, #16]
 80059f4:	f002 021f 	and.w	r2, r2, #31
 80059f8:	bf08      	it	eq
 80059fa:	f44f 6600 	moveq.w	r6, #2048	; 0x800
 80059fe:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
 8005a02:	fa06 f202 	lsl.w	r2, r6, r2
 8005a06:	430a      	orrs	r2, r1
 8005a08:	611a      	str	r2, [r3, #16]
 8005a0a:	e670      	b.n	80056ee <HAL_ADC_ConfigChannel+0x72>
 8005a0c:	000fffff 	.word	0x000fffff
 8005a10:	47ff0000 	.word	0x47ff0000
 8005a14:	40022000 	.word	0x40022000
 8005a18:	40022100 	.word	0x40022100
 8005a1c:	58026300 	.word	0x58026300
 8005a20:	40022300 	.word	0x40022300
 8005a24:	cb840000 	.word	0xcb840000
 8005a28:	58026000 	.word	0x58026000
 8005a2c:	00030d40 	.word	0x00030d40
 8005a30:	24000000 	.word	0x24000000
 8005a34:	c7520000 	.word	0xc7520000
 8005a38:	cfb80000 	.word	0xcfb80000
 8005a3c:	5c001000 	.word	0x5c001000

08005a40 <ADC_ConversionStop>:
{
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005a44:	6800      	ldr	r0, [r0, #0]
 8005a46:	f7ff fdcc 	bl	80055e2 <LL_ADC_REG_IsConversionOngoing>
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a4a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	0716      	lsls	r6, r2, #28
 8005a50:	d556      	bpl.n	8005b00 <ADC_ConversionStop+0xc0>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	0190      	lsls	r0, r2, #6
 8005a56:	d52b      	bpl.n	8005ab0 <ADC_ConversionStop+0x70>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005a58:	8aa0      	ldrh	r0, [r4, #20]
 8005a5a:	f240 1201 	movw	r2, #257	; 0x101
 8005a5e:	4290      	cmp	r0, r2
 8005a60:	d126      	bne.n	8005ab0 <ADC_ConversionStop+0x70>
 8005a62:	4a29      	ldr	r2, [pc, #164]	; (8005b08 <ADC_ConversionStop+0xc8>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005a64:	6819      	ldr	r1, [r3, #0]
 8005a66:	0649      	lsls	r1, r1, #25
 8005a68:	d516      	bpl.n	8005a98 <ADC_ConversionStop+0x58>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005a6a:	2240      	movs	r2, #64	; 0x40
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005a6c:	2101      	movs	r1, #1
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005a6e:	601a      	str	r2, [r3, #0]
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff fdb6 	bl	80055e2 <LL_ADC_REG_IsConversionOngoing>
 8005a76:	b158      	cbz	r0, 8005a90 <ADC_ConversionStop+0x50>
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005a78:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005a7a:	6893      	ldr	r3, [r2, #8]
 8005a7c:	079e      	lsls	r6, r3, #30
 8005a7e:	d407      	bmi.n	8005a90 <ADC_ConversionStop+0x50>
  MODIFY_REG(ADCx->CR,
 8005a80:	6893      	ldr	r3, [r2, #8]
 8005a82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a8a:	f043 0310 	orr.w	r3, r3, #16
 8005a8e:	6093      	str	r3, [r2, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005a90:	2901      	cmp	r1, #1
 8005a92:	d10f      	bne.n	8005ab4 <ADC_ConversionStop+0x74>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005a94:	2504      	movs	r5, #4
 8005a96:	e022      	b.n	8005ade <ADC_ConversionStop+0x9e>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005a98:	3a01      	subs	r2, #1
 8005a9a:	d1e3      	bne.n	8005a64 <ADC_ConversionStop+0x24>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8005a9e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aa0:	f043 0310 	orr.w	r3, r3, #16
 8005aa4:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005aa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005aa8:	f043 0301 	orr.w	r3, r3, #1
 8005aac:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005ab0:	2902      	cmp	r1, #2
 8005ab2:	d1dd      	bne.n	8005a70 <ADC_ConversionStop+0x30>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005ab4:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005ab6:	6893      	ldr	r3, [r2, #8]
 8005ab8:	0718      	lsls	r0, r3, #28
 8005aba:	d50a      	bpl.n	8005ad2 <ADC_ConversionStop+0x92>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005abc:	6893      	ldr	r3, [r2, #8]
 8005abe:	079b      	lsls	r3, r3, #30
 8005ac0:	d407      	bmi.n	8005ad2 <ADC_ConversionStop+0x92>
  MODIFY_REG(ADCx->CR,
 8005ac2:	6893      	ldr	r3, [r2, #8]
 8005ac4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ac8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005acc:	f043 0320 	orr.w	r3, r3, #32
 8005ad0:	6093      	str	r3, [r2, #8]
    switch (conversion_group_reassigned)
 8005ad2:	2902      	cmp	r1, #2
 8005ad4:	d00c      	beq.n	8005af0 <ADC_ConversionStop+0xb0>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005ad6:	2903      	cmp	r1, #3
 8005ad8:	bf0c      	ite	eq
 8005ada:	250c      	moveq	r5, #12
 8005adc:	2504      	movne	r5, #4
    tickstart = HAL_GetTick();
 8005ade:	f7ff fd4d 	bl	800557c <HAL_GetTick>
 8005ae2:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	422b      	tst	r3, r5
 8005aea:	d103      	bne.n	8005af4 <ADC_ConversionStop+0xb4>
  return HAL_OK;
 8005aec:	2000      	movs	r0, #0
 8005aee:	e7de      	b.n	8005aae <ADC_ConversionStop+0x6e>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005af0:	2508      	movs	r5, #8
 8005af2:	e7f4      	b.n	8005ade <ADC_ConversionStop+0x9e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005af4:	f7ff fd42 	bl	800557c <HAL_GetTick>
 8005af8:	1b80      	subs	r0, r0, r6
 8005afa:	2805      	cmp	r0, #5
 8005afc:	d9f2      	bls.n	8005ae4 <ADC_ConversionStop+0xa4>
 8005afe:	e7cd      	b.n	8005a9c <ADC_ConversionStop+0x5c>
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d1a6      	bne.n	8005a52 <ADC_ConversionStop+0x12>
 8005b04:	e7f2      	b.n	8005aec <ADC_ConversionStop+0xac>
 8005b06:	bf00      	nop
 8005b08:	000cdc01 	.word	0x000cdc01

08005b0c <ADC_Enable>:
{
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b10:	6800      	ldr	r0, [r0, #0]
 8005b12:	f7ff fd62 	bl	80055da <LL_ADC_IsEnabled>
 8005b16:	b108      	cbz	r0, 8005b1c <ADC_Enable+0x10>
  return HAL_OK;
 8005b18:	2000      	movs	r0, #0
}
 8005b1a:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005b1c:	6822      	ldr	r2, [r4, #0]
 8005b1e:	4b21      	ldr	r3, [pc, #132]	; (8005ba4 <ADC_Enable+0x98>)
 8005b20:	6891      	ldr	r1, [r2, #8]
 8005b22:	4219      	tst	r1, r3
 8005b24:	d009      	beq.n	8005b3a <ADC_Enable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b26:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8005b28:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b2a:	f043 0310 	orr.w	r3, r3, #16
 8005b2e:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b32:	f043 0301 	orr.w	r3, r3, #1
 8005b36:	65a3      	str	r3, [r4, #88]	; 0x58
 8005b38:	e7ef      	b.n	8005b1a <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 8005b3a:	6893      	ldr	r3, [r2, #8]
 8005b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b44:	f043 0301 	orr.w	r3, r3, #1
 8005b48:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005b4a:	f7ff fd17 	bl	800557c <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b4e:	6822      	ldr	r2, [r4, #0]
 8005b50:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8005b52:	4605      	mov	r5, r0
 8005b54:	4915      	ldr	r1, [pc, #84]	; (8005bac <ADC_Enable+0xa0>)
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d00e      	beq.n	8005b78 <ADC_Enable+0x6c>
 8005b5a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8005b5e:	4814      	ldr	r0, [pc, #80]	; (8005bb0 <ADC_Enable+0xa4>)
 8005b60:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 8005b64:	428a      	cmp	r2, r1
 8005b66:	bf08      	it	eq
 8005b68:	4603      	moveq	r3, r0
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b6a:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	d101      	bne.n	8005b74 <ADC_Enable+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b70:	06db      	lsls	r3, r3, #27
 8005b72:	d1d1      	bne.n	8005b18 <ADC_Enable+0xc>
  MODIFY_REG(ADCx->CR,
 8005b74:	4e0f      	ldr	r6, [pc, #60]	; (8005bb4 <ADC_Enable+0xa8>)
 8005b76:	e00f      	b.n	8005b98 <ADC_Enable+0x8c>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b78:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <ADC_Enable+0xa4>)
 8005b7a:	e7f6      	b.n	8005b6a <ADC_Enable+0x5e>
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b7c:	f7ff fd2d 	bl	80055da <LL_ADC_IsEnabled>
 8005b80:	b928      	cbnz	r0, 8005b8e <ADC_Enable+0x82>
          LL_ADC_Enable(hadc->Instance);
 8005b82:	6822      	ldr	r2, [r4, #0]
 8005b84:	6893      	ldr	r3, [r2, #8]
 8005b86:	4033      	ands	r3, r6
 8005b88:	f043 0301 	orr.w	r3, r3, #1
 8005b8c:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b8e:	f7ff fcf5 	bl	800557c <HAL_GetTick>
 8005b92:	1b40      	subs	r0, r0, r5
 8005b94:	2802      	cmp	r0, #2
 8005b96:	d8c6      	bhi.n	8005b26 <ADC_Enable+0x1a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b98:	6820      	ldr	r0, [r4, #0]
 8005b9a:	6803      	ldr	r3, [r0, #0]
 8005b9c:	07da      	lsls	r2, r3, #31
 8005b9e:	d5ed      	bpl.n	8005b7c <ADC_Enable+0x70>
 8005ba0:	e7ba      	b.n	8005b18 <ADC_Enable+0xc>
 8005ba2:	bf00      	nop
 8005ba4:	8000003f 	.word	0x8000003f
 8005ba8:	40022000 	.word	0x40022000
 8005bac:	40022100 	.word	0x40022100
 8005bb0:	40022300 	.word	0x40022300
 8005bb4:	7fffffc0 	.word	0x7fffffc0

08005bb8 <HAL_ADC_Start_DMA>:
{
 8005bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bbc:	4b40      	ldr	r3, [pc, #256]	; (8005cc0 <HAL_ADC_Start_DMA+0x108>)
{
 8005bbe:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bc0:	6800      	ldr	r0, [r0, #0]
{
 8005bc2:	460e      	mov	r6, r1
 8005bc4:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bc6:	4298      	cmp	r0, r3
 8005bc8:	d069      	beq.n	8005c9e <HAL_ADC_Start_DMA+0xe6>
 8005bca:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8005bce:	493d      	ldr	r1, [pc, #244]	; (8005cc4 <HAL_ADC_Start_DMA+0x10c>)
 8005bd0:	4a3d      	ldr	r2, [pc, #244]	; (8005cc8 <HAL_ADC_Start_DMA+0x110>)
 8005bd2:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 8005bd6:	4288      	cmp	r0, r1
 8005bd8:	bf08      	it	eq
 8005bda:	4613      	moveq	r3, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005bdc:	689b      	ldr	r3, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005bde:	f7ff fd00 	bl	80055e2 <LL_ADC_REG_IsConversionOngoing>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d165      	bne.n	8005cb2 <HAL_ADC_Start_DMA+0xfa>
    __HAL_LOCK(hadc);
 8005be6:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8005bea:	2a01      	cmp	r2, #1
 8005bec:	d061      	beq.n	8005cb2 <HAL_ADC_Start_DMA+0xfa>
 8005bee:	f003 081f 	and.w	r8, r3, #31
 8005bf2:	2301      	movs	r3, #1
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005bf4:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 8005bf8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005bfc:	d854      	bhi.n	8005ca8 <HAL_ADC_Start_DMA+0xf0>
 8005bfe:	f240 2321 	movw	r3, #545	; 0x221
 8005c02:	fa23 f308 	lsr.w	r3, r3, r8
 8005c06:	43db      	mvns	r3, r3
 8005c08:	f013 0501 	ands.w	r5, r3, #1
 8005c0c:	d14c      	bne.n	8005ca8 <HAL_ADC_Start_DMA+0xf0>
      tmp_hal_status = ADC_Enable(hadc);
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f7ff ff7c 	bl	8005b0c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d144      	bne.n	8005ca2 <HAL_ADC_Start_DMA+0xea>
        ADC_STATE_CLR_SET(hadc->State,
 8005c18:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c1a:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8005c1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c20:	f023 0301 	bic.w	r3, r3, #1
 8005c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c28:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c2a:	4b26      	ldr	r3, [pc, #152]	; (8005cc4 <HAL_ADC_Start_DMA+0x10c>)
 8005c2c:	4299      	cmp	r1, r3
 8005c2e:	d042      	beq.n	8005cb6 <HAL_ADC_Start_DMA+0xfe>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005c30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005c32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c36:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005c38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005c3a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8005c3e:	d002      	beq.n	8005c46 <HAL_ADC_Start_DMA+0x8e>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005c40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c42:	f023 0306 	bic.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8005c46:	65a3      	str	r3, [r4, #88]	; 0x58
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c48:	3140      	adds	r1, #64	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005c4a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005c4c:	4b1f      	ldr	r3, [pc, #124]	; (8005ccc <HAL_ADC_Start_DMA+0x114>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005c4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005c50:	63c3      	str	r3, [r0, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005c52:	4b1f      	ldr	r3, [pc, #124]	; (8005cd0 <HAL_ADC_Start_DMA+0x118>)
 8005c54:	6403      	str	r3, [r0, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005c56:	4b1f      	ldr	r3, [pc, #124]	; (8005cd4 <HAL_ADC_Start_DMA+0x11c>)
 8005c58:	64c3      	str	r3, [r0, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005c5a:	231c      	movs	r3, #28
 8005c5c:	f841 3c40 	str.w	r3, [r1, #-64]
        __HAL_UNLOCK(hadc);
 8005c60:	2300      	movs	r3, #0
 8005c62:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005c66:	f851 3c3c 	ldr.w	r3, [r1, #-60]
 8005c6a:	f043 0310 	orr.w	r3, r3, #16
 8005c6e:	f841 3c3c 	str.w	r3, [r1, #-60]
 8005c72:	f851 3c34 	ldr.w	r3, [r1, #-52]
 8005c76:	f023 0303 	bic.w	r3, r3, #3
 8005c7a:	4313      	orrs	r3, r2
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c7c:	4632      	mov	r2, r6
 8005c7e:	f841 3c34 	str.w	r3, [r1, #-52]
 8005c82:	463b      	mov	r3, r7
 8005c84:	f000 fe8a 	bl	800699c <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005c88:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005c8a:	6893      	ldr	r3, [r2, #8]
 8005c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c94:	f043 0304 	orr.w	r3, r3, #4
 8005c98:	6093      	str	r3, [r2, #8]
}
 8005c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <HAL_ADC_Start_DMA+0x110>)
 8005ca0:	e79c      	b.n	8005bdc <HAL_ADC_Start_DMA+0x24>
        __HAL_UNLOCK(hadc);
 8005ca2:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8005ca6:	e7f8      	b.n	8005c9a <HAL_ADC_Start_DMA+0xe2>
      __HAL_UNLOCK(hadc);
 8005ca8:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
 8005caa:	2001      	movs	r0, #1
      __HAL_UNLOCK(hadc);
 8005cac:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8005cb0:	e7f3      	b.n	8005c9a <HAL_ADC_Start_DMA+0xe2>
    tmp_hal_status = HAL_BUSY;
 8005cb2:	2002      	movs	r0, #2
 8005cb4:	e7f1      	b.n	8005c9a <HAL_ADC_Start_DMA+0xe2>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005cb6:	f1b8 0f00 	cmp.w	r8, #0
 8005cba:	d0b9      	beq.n	8005c30 <HAL_ADC_Start_DMA+0x78>
 8005cbc:	e7bc      	b.n	8005c38 <HAL_ADC_Start_DMA+0x80>
 8005cbe:	bf00      	nop
 8005cc0:	40022000 	.word	0x40022000
 8005cc4:	40022100 	.word	0x40022100
 8005cc8:	40022300 	.word	0x40022300
 8005ccc:	080055fb 	.word	0x080055fb
 8005cd0:	080055ef 	.word	0x080055ef
 8005cd4:	08005663 	.word	0x08005663

08005cd8 <ADC_Disable>:
{
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4604      	mov	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005cdc:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005cde:	6883      	ldr	r3, [r0, #8]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ce4:	f7ff fc79 	bl	80055da <LL_ADC_IsEnabled>
 8005ce8:	b908      	cbnz	r0, 8005cee <ADC_Disable+0x16>
  return HAL_OK;
 8005cea:	2000      	movs	r0, #0
}
 8005cec:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1fb      	bne.n	8005cea <ADC_Disable+0x12>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005cf2:	6822      	ldr	r2, [r4, #0]
 8005cf4:	6893      	ldr	r3, [r2, #8]
 8005cf6:	f003 030d 	and.w	r3, r3, #13
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d115      	bne.n	8005d2a <ADC_Disable+0x52>
  MODIFY_REG(ADCx->CR,
 8005cfe:	6893      	ldr	r3, [r2, #8]
 8005d00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d08:	f043 0302 	orr.w	r3, r3, #2
 8005d0c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005d0e:	2303      	movs	r3, #3
 8005d10:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005d12:	f7ff fc33 	bl	800557c <HAL_GetTick>
 8005d16:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	07db      	lsls	r3, r3, #31
 8005d1e:	d5e4      	bpl.n	8005cea <ADC_Disable+0x12>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005d20:	f7ff fc2c 	bl	800557c <HAL_GetTick>
 8005d24:	1b40      	subs	r0, r0, r5
 8005d26:	2802      	cmp	r0, #2
 8005d28:	d9f6      	bls.n	8005d18 <ADC_Disable+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8005d2c:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d2e:	f043 0310 	orr.w	r3, r3, #16
 8005d32:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d3c:	e7d6      	b.n	8005cec <ADC_Disable+0x14>

08005d3e <HAL_ADC_Stop_DMA>:
{
 8005d3e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8005d40:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8005d44:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d035      	beq.n	8005db6 <HAL_ADC_Stop_DMA+0x78>
 8005d4a:	2301      	movs	r3, #1
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005d4c:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8005d4e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005d52:	f7ff fe75 	bl	8005a40 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8005d56:	4605      	mov	r5, r0
 8005d58:	b9e0      	cbnz	r0, 8005d94 <HAL_ADC_Stop_DMA+0x56>
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8005d5a:	6822      	ldr	r2, [r4, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005d5c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8005d5e:	68d3      	ldr	r3, [r2, #12]
 8005d60:	f023 0303 	bic.w	r3, r3, #3
 8005d64:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005d66:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d107      	bne.n	8005d7e <HAL_ADC_Stop_DMA+0x40>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005d6e:	f000 ff33 	bl	8006bd8 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8005d72:	4605      	mov	r5, r0
 8005d74:	b118      	cbz	r0, 8005d7e <HAL_ADC_Stop_DMA+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005d76:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d7c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005d7e:	6822      	ldr	r2, [r4, #0]
      tmp_hal_status = ADC_Disable(hadc);
 8005d80:	4620      	mov	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005d82:	6853      	ldr	r3, [r2, #4]
 8005d84:	f023 0310 	bic.w	r3, r3, #16
 8005d88:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8005d8a:	b945      	cbnz	r5, 8005d9e <HAL_ADC_Stop_DMA+0x60>
      tmp_hal_status = ADC_Disable(hadc);
 8005d8c:	f7ff ffa4 	bl	8005cd8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8005d90:	4605      	mov	r5, r0
 8005d92:	b138      	cbz	r0, 8005da4 <HAL_ADC_Stop_DMA+0x66>
  __HAL_UNLOCK(hadc);
 8005d94:	2300      	movs	r3, #0
 8005d96:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	bd38      	pop	{r3, r4, r5, pc}
      (void)ADC_Disable(hadc);
 8005d9e:	f7ff ff9b 	bl	8005cd8 <ADC_Disable>
 8005da2:	e7f7      	b.n	8005d94 <HAL_ADC_Stop_DMA+0x56>
      ADC_STATE_CLR_SET(hadc->State,
 8005da4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005da6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005daa:	f023 0301 	bic.w	r3, r3, #1
 8005dae:	f043 0301 	orr.w	r3, r3, #1
 8005db2:	6563      	str	r3, [r4, #84]	; 0x54
 8005db4:	e7ee      	b.n	8005d94 <HAL_ADC_Stop_DMA+0x56>
  __HAL_LOCK(hadc);
 8005db6:	2502      	movs	r5, #2
 8005db8:	e7ef      	b.n	8005d9a <HAL_ADC_Stop_DMA+0x5c>
	...

08005dbc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005dbc:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005dbe:	4a44      	ldr	r2, [pc, #272]	; (8005ed0 <ADC_ConfigureBoostMode+0x114>)
{
 8005dc0:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005dc2:	6803      	ldr	r3, [r0, #0]
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d003      	beq.n	8005dd0 <ADC_ConfigureBoostMode+0x14>
 8005dc8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d118      	bne.n	8005e02 <ADC_ConfigureBoostMode+0x46>
 8005dd0:	4b40      	ldr	r3, [pc, #256]	; (8005ed4 <ADC_ConfigureBoostMode+0x118>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8005dd8:	bf14      	ite	ne
 8005dda:	2301      	movne	r3, #1
 8005ddc:	2300      	moveq	r3, #0
 8005dde:	b30b      	cbz	r3, 8005e24 <ADC_ConfigureBoostMode+0x68>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005de0:	f002 fe7a 	bl	8008ad8 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8005de4:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8005de6:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8005de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dec:	d005      	beq.n	8005dfa <ADC_ConfigureBoostMode+0x3e>
 8005dee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005df2:	d008      	beq.n	8005e06 <ADC_ConfigureBoostMode+0x4a>
 8005df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df8:	d106      	bne.n	8005e08 <ADC_ConfigureBoostMode+0x4c>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005dfa:	0c1b      	lsrs	r3, r3, #16
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005dfc:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8005e00:	e002      	b.n	8005e08 <ADC_ConfigureBoostMode+0x4c>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005e02:	4b35      	ldr	r3, [pc, #212]	; (8005ed8 <ADC_ConfigureBoostMode+0x11c>)
 8005e04:	e7e5      	b.n	8005dd2 <ADC_ConfigureBoostMode+0x16>
        freq /= 4UL;
 8005e06:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005e08:	f7ff fbd0 	bl	80055ac <HAL_GetREVID>
 8005e0c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005e10:	4298      	cmp	r0, r3
 8005e12:	682b      	ldr	r3, [r5, #0]
 8005e14:	d841      	bhi.n	8005e9a <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8005e16:	4a31      	ldr	r2, [pc, #196]	; (8005edc <ADC_ConfigureBoostMode+0x120>)
 8005e18:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005e1a:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 8005e1c:	d939      	bls.n	8005e92 <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e22:	e038      	b.n	8005e96 <ADC_ConfigureBoostMode+0xda>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005e24:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005e28:	f003 fe18 	bl	8009a5c <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8005e2c:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005e2e:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8005e30:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005e34:	d00a      	beq.n	8005e4c <ADC_ConfigureBoostMode+0x90>
 8005e36:	d812      	bhi.n	8005e5e <ADC_ConfigureBoostMode+0xa2>
 8005e38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e3c:	d006      	beq.n	8005e4c <ADC_ConfigureBoostMode+0x90>
 8005e3e:	d808      	bhi.n	8005e52 <ADC_ConfigureBoostMode+0x96>
 8005e40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e44:	d002      	beq.n	8005e4c <ADC_ConfigureBoostMode+0x90>
 8005e46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e4a:	d1dd      	bne.n	8005e08 <ADC_ConfigureBoostMode+0x4c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005e4c:	0c9b      	lsrs	r3, r3, #18
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	e7d4      	b.n	8005dfc <ADC_ConfigureBoostMode+0x40>
    switch (hadc->Init.ClockPrescaler)
 8005e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e56:	d0f9      	beq.n	8005e4c <ADC_ConfigureBoostMode+0x90>
 8005e58:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005e5c:	e7f5      	b.n	8005e4a <ADC_ConfigureBoostMode+0x8e>
 8005e5e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005e62:	d012      	beq.n	8005e8a <ADC_ConfigureBoostMode+0xce>
 8005e64:	d807      	bhi.n	8005e76 <ADC_ConfigureBoostMode+0xba>
 8005e66:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005e6a:	d00c      	beq.n	8005e86 <ADC_ConfigureBoostMode+0xca>
 8005e6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e70:	d1ca      	bne.n	8005e08 <ADC_ConfigureBoostMode+0x4c>
        freq /= 32UL;
 8005e72:	0944      	lsrs	r4, r0, #5
        break;
 8005e74:	e7c8      	b.n	8005e08 <ADC_ConfigureBoostMode+0x4c>
    switch (hadc->Init.ClockPrescaler)
 8005e76:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005e7a:	d008      	beq.n	8005e8e <ADC_ConfigureBoostMode+0xd2>
 8005e7c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005e80:	d1c2      	bne.n	8005e08 <ADC_ConfigureBoostMode+0x4c>
        freq /= 256UL;
 8005e82:	0a04      	lsrs	r4, r0, #8
        break;
 8005e84:	e7c0      	b.n	8005e08 <ADC_ConfigureBoostMode+0x4c>
        freq /= 16UL;
 8005e86:	0904      	lsrs	r4, r0, #4
        break;
 8005e88:	e7be      	b.n	8005e08 <ADC_ConfigureBoostMode+0x4c>
        freq /= 64UL;
 8005e8a:	0984      	lsrs	r4, r0, #6
        break;
 8005e8c:	e7bc      	b.n	8005e08 <ADC_ConfigureBoostMode+0x4c>
        freq /= 128UL;
 8005e8e:	09c4      	lsrs	r4, r0, #7
        break;
 8005e90:	e7ba      	b.n	8005e08 <ADC_ConfigureBoostMode+0x4c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005e92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005e96:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005e98:	bd38      	pop	{r3, r4, r5, pc}
    freq /= 2U; /* divider by 2 for Rev.V */
 8005e9a:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8005e9c:	4a10      	ldr	r2, [pc, #64]	; (8005ee0 <ADC_ConfigureBoostMode+0x124>)
 8005e9e:	4294      	cmp	r4, r2
 8005ea0:	d803      	bhi.n	8005eaa <ADC_ConfigureBoostMode+0xee>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005ea8:	e7f5      	b.n	8005e96 <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 8005eaa:	4a0e      	ldr	r2, [pc, #56]	; (8005ee4 <ADC_ConfigureBoostMode+0x128>)
 8005eac:	4294      	cmp	r4, r2
 8005eae:	d803      	bhi.n	8005eb8 <ADC_ConfigureBoostMode+0xfc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005eb6:	e7b2      	b.n	8005e1e <ADC_ConfigureBoostMode+0x62>
    else if (freq <= 25000000UL)
 8005eb8:	4a0b      	ldr	r2, [pc, #44]	; (8005ee8 <ADC_ConfigureBoostMode+0x12c>)
 8005eba:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	bf96      	itet	ls
 8005ec0:	f422 7240 	bicls.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005ec4:	f442 7240 	orrhi.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005ec8:	f442 7200 	orrls.w	r2, r2, #512	; 0x200
 8005ecc:	e7e3      	b.n	8005e96 <ADC_ConfigureBoostMode+0xda>
 8005ece:	bf00      	nop
 8005ed0:	40022000 	.word	0x40022000
 8005ed4:	40022300 	.word	0x40022300
 8005ed8:	58026300 	.word	0x58026300
 8005edc:	01312d00 	.word	0x01312d00
 8005ee0:	005f5e10 	.word	0x005f5e10
 8005ee4:	00bebc20 	.word	0x00bebc20
 8005ee8:	017d7840 	.word	0x017d7840

08005eec <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 8005eec:	2300      	movs	r3, #0
{
 8005eee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (hadc == NULL)
 8005ef0:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8005ef2:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	f000 80c8 	beq.w	800608a <HAL_ADC_Init+0x19e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005efa:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8005efc:	b925      	cbnz	r5, 8005f08 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 8005efe:	f7fc fdf7 	bl	8002af0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005f02:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8005f04:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005f08:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005f0a:	6883      	ldr	r3, [r0, #8]
 8005f0c:	009d      	lsls	r5, r3, #2
 8005f0e:	d505      	bpl.n	8005f1c <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005f10:	6883      	ldr	r3, [r0, #8]
 8005f12:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005f16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f1a:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005f1c:	6883      	ldr	r3, [r0, #8]
 8005f1e:	00d9      	lsls	r1, r3, #3
 8005f20:	d504      	bpl.n	8005f2c <HAL_ADC_Init+0x40>
 8005f22:	6883      	ldr	r3, [r0, #8]
 8005f24:	00da      	lsls	r2, r3, #3
 8005f26:	d515      	bpl.n	8005f54 <HAL_ADC_Init+0x68>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f28:	2500      	movs	r5, #0
 8005f2a:	e01c      	b.n	8005f66 <HAL_ADC_Init+0x7a>
  MODIFY_REG(ADCx->CR,
 8005f2c:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005f2e:	4a6d      	ldr	r2, [pc, #436]	; (80060e4 <HAL_ADC_Init+0x1f8>)
 8005f30:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005f34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f3c:	6083      	str	r3, [r0, #8]
 8005f3e:	4b6a      	ldr	r3, [pc, #424]	; (80060e8 <HAL_ADC_Init+0x1fc>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8005f46:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005f48:	9b01      	ldr	r3, [sp, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0e9      	beq.n	8005f22 <HAL_ADC_Init+0x36>
      wait_loop_index--;
 8005f4e:	9b01      	ldr	r3, [sp, #4]
 8005f50:	3b01      	subs	r3, #1
 8005f52:	e7f8      	b.n	8005f46 <HAL_ADC_Init+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f54:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8005f56:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f58:	f043 0310 	orr.w	r3, r3, #16
 8005f5c:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f60:	f043 0301 	orr.w	r3, r3, #1
 8005f64:	65a3      	str	r3, [r4, #88]	; 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f66:	f7ff fb3c 	bl	80055e2 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f6c:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8005f70:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f72:	f040 8087 	bne.w	8006084 <HAL_ADC_Init+0x198>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005f76:	2800      	cmp	r0, #0
 8005f78:	f040 8084 	bne.w	8006084 <HAL_ADC_Init+0x198>
    ADC_STATE_CLR_SET(hadc->State,
 8005f7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f80:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8005f82:	f043 0302 	orr.w	r3, r3, #2
 8005f86:	6563      	str	r3, [r4, #84]	; 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f88:	f7ff fb27 	bl	80055da <LL_ADC_IsEnabled>
 8005f8c:	bb30      	cbnz	r0, 8005fdc <HAL_ADC_Init+0xf0>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	4a56      	ldr	r2, [pc, #344]	; (80060ec <HAL_ADC_Init+0x200>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d003      	beq.n	8005f9e <HAL_ADC_Init+0xb2>
 8005f96:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d15f      	bne.n	800605e <HAL_ADC_Init+0x172>
 8005f9e:	4853      	ldr	r0, [pc, #332]	; (80060ec <HAL_ADC_Init+0x200>)
 8005fa0:	f7ff fb1b 	bl	80055da <LL_ADC_IsEnabled>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	4852      	ldr	r0, [pc, #328]	; (80060f0 <HAL_ADC_Init+0x204>)
 8005fa8:	f7ff fb17 	bl	80055da <LL_ADC_IsEnabled>
 8005fac:	4303      	orrs	r3, r0
 8005fae:	bf0c      	ite	eq
 8005fb0:	2001      	moveq	r0, #1
 8005fb2:	2000      	movne	r0, #0
 8005fb4:	b190      	cbz	r0, 8005fdc <HAL_ADC_Init+0xf0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005fb6:	6822      	ldr	r2, [r4, #0]
 8005fb8:	4b4c      	ldr	r3, [pc, #304]	; (80060ec <HAL_ADC_Init+0x200>)
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d056      	beq.n	800606c <HAL_ADC_Init+0x180>
 8005fbe:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8005fc2:	484b      	ldr	r0, [pc, #300]	; (80060f0 <HAL_ADC_Init+0x204>)
 8005fc4:	494b      	ldr	r1, [pc, #300]	; (80060f4 <HAL_ADC_Init+0x208>)
 8005fc6:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 8005fca:	4282      	cmp	r2, r0
 8005fcc:	bf08      	it	eq
 8005fce:	460b      	moveq	r3, r1
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	6861      	ldr	r1, [r4, #4]
 8005fd4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	609a      	str	r2, [r3, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005fdc:	f7ff fae6 	bl	80055ac <HAL_GetREVID>
 8005fe0:	f241 0303 	movw	r3, #4099	; 0x1003
 8005fe4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005fe6:	4298      	cmp	r0, r3
 8005fe8:	7f21      	ldrb	r1, [r4, #28]
 8005fea:	7d60      	ldrb	r0, [r4, #21]
 8005fec:	68a3      	ldr	r3, [r4, #8]
 8005fee:	d93f      	bls.n	8006070 <HAL_ADC_Init+0x184>
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d13d      	bne.n	8006070 <HAL_ADC_Init+0x184>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005ff4:	f042 031c 	orr.w	r3, r2, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005ff8:	2901      	cmp	r1, #1
                  hadc->Init.Overrun                                                    |
 8005ffa:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005ffe:	bf08      	it	eq
 8006000:	6a22      	ldreq	r2, [r4, #32]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006002:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006006:	bf04      	itt	eq
 8006008:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800600c:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006010:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006012:	b122      	cbz	r2, 800601e <HAL_ADC_Init+0x132>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006014:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006018:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800601a:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800601c:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800601e:	6820      	ldr	r0, [r4, #0]
 8006020:	4a35      	ldr	r2, [pc, #212]	; (80060f8 <HAL_ADC_Init+0x20c>)
 8006022:	68c1      	ldr	r1, [r0, #12]
 8006024:	400a      	ands	r2, r1
 8006026:	4313      	orrs	r3, r2
 8006028:	60c3      	str	r3, [r0, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800602a:	f7ff fada 	bl	80055e2 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800602e:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006030:	6893      	ldr	r3, [r2, #8]
 8006032:	071b      	lsls	r3, r3, #28
 8006034:	d52b      	bpl.n	800608e <HAL_ADC_Init+0x1a2>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006036:	68e3      	ldr	r3, [r4, #12]
 8006038:	6822      	ldr	r2, [r4, #0]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d11e      	bne.n	800607c <HAL_ADC_Init+0x190>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800603e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006040:	69a3      	ldr	r3, [r4, #24]
 8006042:	f021 010f 	bic.w	r1, r1, #15
 8006046:	3b01      	subs	r3, #1
 8006048:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800604a:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800604c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800604e:	f023 0303 	bic.w	r3, r3, #3
 8006052:	f043 0301 	orr.w	r3, r3, #1
 8006056:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006058:	4628      	mov	r0, r5
 800605a:	b003      	add	sp, #12
 800605c:	bd30      	pop	{r4, r5, pc}
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800605e:	4827      	ldr	r0, [pc, #156]	; (80060fc <HAL_ADC_Init+0x210>)
 8006060:	f7ff fabb 	bl	80055da <LL_ADC_IsEnabled>
 8006064:	fab0 f080 	clz	r0, r0
 8006068:	0940      	lsrs	r0, r0, #5
 800606a:	e7a3      	b.n	8005fb4 <HAL_ADC_Init+0xc8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800606c:	4b21      	ldr	r3, [pc, #132]	; (80060f4 <HAL_ADC_Init+0x208>)
 800606e:	e7af      	b.n	8005fd0 <HAL_ADC_Init+0xe4>
                  hadc->Init.Overrun                                                    |
 8006070:	4313      	orrs	r3, r2
 8006072:	e7c1      	b.n	8005ff8 <HAL_ADC_Init+0x10c>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006074:	6913      	ldr	r3, [r2, #16]
 8006076:	f023 0301 	bic.w	r3, r3, #1
 800607a:	e028      	b.n	80060ce <HAL_ADC_Init+0x1e2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800607c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800607e:	f023 030f 	bic.w	r3, r3, #15
 8006082:	e7e2      	b.n	800604a <HAL_ADC_Init+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006084:	f043 0310 	orr.w	r3, r3, #16
 8006088:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 800608a:	2501      	movs	r5, #1
 800608c:	e7e4      	b.n	8006058 <HAL_ADC_Init+0x16c>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800608e:	2800      	cmp	r0, #0
 8006090:	d1d1      	bne.n	8006036 <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006092:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006094:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800609a:	f023 0303 	bic.w	r3, r3, #3
 800609e:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 80060a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80060a4:	430b      	orrs	r3, r1
 80060a6:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80060a8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d1e1      	bne.n	8006074 <HAL_ADC_Init+0x188>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80060b0:	6910      	ldr	r0, [r2, #16]
 80060b2:	e9d4 3110 	ldrd	r3, r1, [r4, #64]	; 0x40
 80060b6:	430b      	orrs	r3, r1
 80060b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80060ba:	f043 0301 	orr.w	r3, r3, #1
 80060be:	430b      	orrs	r3, r1
 80060c0:	490f      	ldr	r1, [pc, #60]	; (8006100 <HAL_ADC_Init+0x214>)
 80060c2:	4001      	ands	r1, r0
 80060c4:	430b      	orrs	r3, r1
 80060c6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80060c8:	3901      	subs	r1, #1
 80060ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80060ce:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 80060d0:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80060d2:	6913      	ldr	r3, [r2, #16]
 80060d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80060da:	430b      	orrs	r3, r1
 80060dc:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 80060de:	f7ff fe6d 	bl	8005dbc <ADC_ConfigureBoostMode>
 80060e2:	e7a8      	b.n	8006036 <HAL_ADC_Init+0x14a>
 80060e4:	00030d40 	.word	0x00030d40
 80060e8:	24000000 	.word	0x24000000
 80060ec:	40022000 	.word	0x40022000
 80060f0:	40022100 	.word	0x40022100
 80060f4:	40022300 	.word	0x40022300
 80060f8:	fff0c003 	.word	0xfff0c003
 80060fc:	58026000 	.word	0x58026000
 8006100:	fc00f81e 	.word	0xfc00f81e

08006104 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006104:	6880      	ldr	r0, [r0, #8]
}
 8006106:	f000 0001 	and.w	r0, r0, #1
 800610a:	4770      	bx	lr

0800610c <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800610c:	6880      	ldr	r0, [r0, #8]
}
 800610e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8006112:	4770      	bx	lr

08006114 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006114:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8006118:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800611a:	2a01      	cmp	r2, #1
{
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	b09a      	sub	sp, #104	; 0x68
  __HAL_LOCK(hadc);
 8006120:	f000 808b 	beq.w	800623a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006124:	2201      	movs	r2, #1
 8006126:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800612a:	4a45      	ldr	r2, [pc, #276]	; (8006240 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800612c:	6800      	ldr	r0, [r0, #0]
 800612e:	4290      	cmp	r0, r2
 8006130:	bf0c      	ite	eq
 8006132:	f502 7280 	addeq.w	r2, r2, #256	; 0x100
 8006136:	2200      	movne	r2, #0
 8006138:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 800613a:	9801      	ldr	r0, [sp, #4]
 800613c:	b940      	cbnz	r0, 8006150 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800613e:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006140:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006144:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006146:	f042 0220 	orr.w	r2, r2, #32
 800614a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800614c:	b01a      	add	sp, #104	; 0x68
 800614e:	bd70      	pop	{r4, r5, r6, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006150:	f7ff ffdc 	bl	800610c <LL_ADC_REG_IsConversionOngoing>
 8006154:	4602      	mov	r2, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006156:	6818      	ldr	r0, [r3, #0]
 8006158:	f7ff ffd8 	bl	800610c <LL_ADC_REG_IsConversionOngoing>
 800615c:	2800      	cmp	r0, #0
 800615e:	d166      	bne.n	800622e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006160:	2a00      	cmp	r2, #0
 8006162:	d164      	bne.n	800622e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	4a36      	ldr	r2, [pc, #216]	; (8006240 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8006168:	4290      	cmp	r0, r2
 800616a:	d029      	beq.n	80061c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800616c:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8006170:	4d34      	ldr	r5, [pc, #208]	; (8006244 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8006172:	4c35      	ldr	r4, [pc, #212]	; (8006248 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8006174:	f502 4286 	add.w	r2, r2, #17152	; 0x4300
 8006178:	42a8      	cmp	r0, r5
 800617a:	bf08      	it	eq
 800617c:	4622      	moveq	r2, r4
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800617e:	680c      	ldr	r4, [r1, #0]
 8006180:	4d2f      	ldr	r5, [pc, #188]	; (8006240 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8006182:	2c00      	cmp	r4, #0
 8006184:	d030      	beq.n	80061e8 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006186:	6894      	ldr	r4, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006188:	42a8      	cmp	r0, r5
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800618a:	684e      	ldr	r6, [r1, #4]
 800618c:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
 8006190:	ea44 0406 	orr.w	r4, r4, r6
 8006194:	6094      	str	r4, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006196:	d002      	beq.n	800619e <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8006198:	4c2a      	ldr	r4, [pc, #168]	; (8006244 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 800619a:	42a0      	cmp	r0, r4
 800619c:	d112      	bne.n	80061c4 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
 800619e:	4828      	ldr	r0, [pc, #160]	; (8006240 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80061a0:	f7ff ffb0 	bl	8006104 <LL_ADC_IsEnabled>
 80061a4:	4604      	mov	r4, r0
 80061a6:	4827      	ldr	r0, [pc, #156]	; (8006244 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80061a8:	f7ff ffac 	bl	8006104 <LL_ADC_IsEnabled>
 80061ac:	4320      	orrs	r0, r4
 80061ae:	bf0c      	ite	eq
 80061b0:	2001      	moveq	r0, #1
 80061b2:	2000      	movne	r0, #0
 80061b4:	b968      	cbnz	r0, 80061d2 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061b6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return tmp_hal_status;
 80061be:	e7c5      	b.n	800614c <HAL_ADCEx_MultiModeConfigChannel+0x38>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80061c0:	4a21      	ldr	r2, [pc, #132]	; (8006248 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80061c2:	e7dc      	b.n	800617e <HAL_ADCEx_MultiModeConfigChannel+0x6a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061c4:	4821      	ldr	r0, [pc, #132]	; (800624c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80061c6:	f7ff ff9d 	bl	8006104 <LL_ADC_IsEnabled>
 80061ca:	fab0 f080 	clz	r0, r0
 80061ce:	0940      	lsrs	r0, r0, #5
 80061d0:	e7f0      	b.n	80061b4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
        MODIFY_REG(tmpADC_Common->CCR,
 80061d2:	6808      	ldr	r0, [r1, #0]
 80061d4:	6894      	ldr	r4, [r2, #8]
 80061d6:	6889      	ldr	r1, [r1, #8]
 80061d8:	4301      	orrs	r1, r0
 80061da:	f424 6071 	bic.w	r0, r4, #3856	; 0xf10
 80061de:	f020 000f 	bic.w	r0, r0, #15
 80061e2:	4301      	orrs	r1, r0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80061e4:	6091      	str	r1, [r2, #8]
 80061e6:	e7e6      	b.n	80061b6 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80061e8:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061ea:	42a8      	cmp	r0, r5
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80061ec:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80061f0:	6091      	str	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061f2:	d002      	beq.n	80061fa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
 80061f4:	4913      	ldr	r1, [pc, #76]	; (8006244 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80061f6:	4288      	cmp	r0, r1
 80061f8:	d112      	bne.n	8006220 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
 80061fa:	4811      	ldr	r0, [pc, #68]	; (8006240 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80061fc:	f7ff ff82 	bl	8006104 <LL_ADC_IsEnabled>
 8006200:	4601      	mov	r1, r0
 8006202:	4810      	ldr	r0, [pc, #64]	; (8006244 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8006204:	f7ff ff7e 	bl	8006104 <LL_ADC_IsEnabled>
 8006208:	4301      	orrs	r1, r0
 800620a:	bf0c      	ite	eq
 800620c:	2001      	moveq	r0, #1
 800620e:	2000      	movne	r0, #0
 8006210:	2800      	cmp	r0, #0
 8006212:	d0d0      	beq.n	80061b6 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006214:	6891      	ldr	r1, [r2, #8]
 8006216:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 800621a:	f021 010f 	bic.w	r1, r1, #15
 800621e:	e7e1      	b.n	80061e4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006220:	480a      	ldr	r0, [pc, #40]	; (800624c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8006222:	f7ff ff6f 	bl	8006104 <LL_ADC_IsEnabled>
 8006226:	fab0 f080 	clz	r0, r0
 800622a:	0940      	lsrs	r0, r0, #5
 800622c:	e7f0      	b.n	8006210 <HAL_ADCEx_MultiModeConfigChannel+0xfc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800622e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006230:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006232:	f042 0220 	orr.w	r2, r2, #32
 8006236:	655a      	str	r2, [r3, #84]	; 0x54
 8006238:	e7be      	b.n	80061b8 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
  __HAL_LOCK(hadc);
 800623a:	2002      	movs	r0, #2
 800623c:	e786      	b.n	800614c <HAL_ADCEx_MultiModeConfigChannel+0x38>
 800623e:	bf00      	nop
 8006240:	40022000 	.word	0x40022000
 8006244:	40022100 	.word	0x40022100
 8006248:	40022300 	.word	0x40022300
 800624c:	58026000 	.word	0x58026000

08006250 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006250:	4a07      	ldr	r2, [pc, #28]	; (8006270 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006252:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006254:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006256:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800625a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800625e:	041b      	lsls	r3, r3, #16
 8006260:	0c1b      	lsrs	r3, r3, #16
 8006262:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800626a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800626c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800626e:	4770      	bx	lr
 8006270:	e000ed00 	.word	0xe000ed00

08006274 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006274:	4b16      	ldr	r3, [pc, #88]	; (80062d0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006276:	b570      	push	{r4, r5, r6, lr}
 8006278:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800627a:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800627e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006282:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006286:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006288:	2d04      	cmp	r5, #4
 800628a:	bf28      	it	cs
 800628c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800628e:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006290:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006294:	bf8c      	ite	hi
 8006296:	3c03      	subhi	r4, #3
 8006298:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 800629a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800629c:	ea21 0303 	bic.w	r3, r1, r3
 80062a0:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062a4:	fa06 f404 	lsl.w	r4, r6, r4
 80062a8:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062ac:	ea43 0304 	orr.w	r3, r3, r4
 80062b0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80062b4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80062b6:	db06      	blt.n	80062c6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062b8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80062bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80062c0:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80062c4:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062c6:	f000 000f 	and.w	r0, r0, #15
 80062ca:	4a02      	ldr	r2, [pc, #8]	; (80062d4 <HAL_NVIC_SetPriority+0x60>)
 80062cc:	5413      	strb	r3, [r2, r0]
 80062ce:	e7f9      	b.n	80062c4 <HAL_NVIC_SetPriority+0x50>
 80062d0:	e000ed00 	.word	0xe000ed00
 80062d4:	e000ed14 	.word	0xe000ed14

080062d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80062d8:	2800      	cmp	r0, #0
 80062da:	db08      	blt.n	80062ee <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062dc:	0942      	lsrs	r2, r0, #5
 80062de:	2301      	movs	r3, #1
 80062e0:	f000 001f 	and.w	r0, r0, #31
 80062e4:	fa03 f000 	lsl.w	r0, r3, r0
 80062e8:	4b01      	ldr	r3, [pc, #4]	; (80062f0 <HAL_NVIC_EnableIRQ+0x18>)
 80062ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80062ee:	4770      	bx	lr
 80062f0:	e000e100 	.word	0xe000e100

080062f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062f6:	4d5c      	ldr	r5, [pc, #368]	; (8006468 <DMA_SetConfig+0x174>)
 80062f8:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062fa:	6d87      	ldr	r7, [r0, #88]	; 0x58
 80062fc:	46ac      	mov	ip, r5
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062fe:	42ac      	cmp	r4, r5
 8006300:	d045      	beq.n	800638e <DMA_SetConfig+0x9a>
 8006302:	4e5a      	ldr	r6, [pc, #360]	; (800646c <DMA_SetConfig+0x178>)
 8006304:	42b4      	cmp	r4, r6
 8006306:	d042      	beq.n	800638e <DMA_SetConfig+0x9a>
 8006308:	3618      	adds	r6, #24
 800630a:	42b4      	cmp	r4, r6
 800630c:	d03f      	beq.n	800638e <DMA_SetConfig+0x9a>
 800630e:	3618      	adds	r6, #24
 8006310:	42b4      	cmp	r4, r6
 8006312:	d03c      	beq.n	800638e <DMA_SetConfig+0x9a>
 8006314:	3618      	adds	r6, #24
 8006316:	42b4      	cmp	r4, r6
 8006318:	d039      	beq.n	800638e <DMA_SetConfig+0x9a>
 800631a:	3618      	adds	r6, #24
 800631c:	42b4      	cmp	r4, r6
 800631e:	d036      	beq.n	800638e <DMA_SetConfig+0x9a>
 8006320:	3618      	adds	r6, #24
 8006322:	42b4      	cmp	r4, r6
 8006324:	d033      	beq.n	800638e <DMA_SetConfig+0x9a>
 8006326:	3618      	adds	r6, #24
 8006328:	42b4      	cmp	r4, r6
 800632a:	d030      	beq.n	800638e <DMA_SetConfig+0x9a>
 800632c:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8006330:	42b4      	cmp	r4, r6
 8006332:	d02c      	beq.n	800638e <DMA_SetConfig+0x9a>
 8006334:	3618      	adds	r6, #24
 8006336:	42b4      	cmp	r4, r6
 8006338:	d029      	beq.n	800638e <DMA_SetConfig+0x9a>
 800633a:	3618      	adds	r6, #24
 800633c:	42b4      	cmp	r4, r6
 800633e:	d026      	beq.n	800638e <DMA_SetConfig+0x9a>
 8006340:	3618      	adds	r6, #24
 8006342:	42b4      	cmp	r4, r6
 8006344:	d023      	beq.n	800638e <DMA_SetConfig+0x9a>
 8006346:	3618      	adds	r6, #24
 8006348:	42b4      	cmp	r4, r6
 800634a:	d020      	beq.n	800638e <DMA_SetConfig+0x9a>
 800634c:	3618      	adds	r6, #24
 800634e:	42b4      	cmp	r4, r6
 8006350:	d01d      	beq.n	800638e <DMA_SetConfig+0x9a>
 8006352:	3618      	adds	r6, #24
 8006354:	42b4      	cmp	r4, r6
 8006356:	d01a      	beq.n	800638e <DMA_SetConfig+0x9a>
 8006358:	3618      	adds	r6, #24
 800635a:	42b4      	cmp	r4, r6
 800635c:	d017      	beq.n	800638e <DMA_SetConfig+0x9a>
 800635e:	4e44      	ldr	r6, [pc, #272]	; (8006470 <DMA_SetConfig+0x17c>)
 8006360:	42b4      	cmp	r4, r6
 8006362:	d014      	beq.n	800638e <DMA_SetConfig+0x9a>
 8006364:	3614      	adds	r6, #20
 8006366:	42b4      	cmp	r4, r6
 8006368:	d011      	beq.n	800638e <DMA_SetConfig+0x9a>
 800636a:	3614      	adds	r6, #20
 800636c:	42b4      	cmp	r4, r6
 800636e:	d00e      	beq.n	800638e <DMA_SetConfig+0x9a>
 8006370:	3614      	adds	r6, #20
 8006372:	42b4      	cmp	r4, r6
 8006374:	d00b      	beq.n	800638e <DMA_SetConfig+0x9a>
 8006376:	3614      	adds	r6, #20
 8006378:	42b4      	cmp	r4, r6
 800637a:	d008      	beq.n	800638e <DMA_SetConfig+0x9a>
 800637c:	3614      	adds	r6, #20
 800637e:	42b4      	cmp	r4, r6
 8006380:	d005      	beq.n	800638e <DMA_SetConfig+0x9a>
 8006382:	3614      	adds	r6, #20
 8006384:	42b4      	cmp	r4, r6
 8006386:	d002      	beq.n	800638e <DMA_SetConfig+0x9a>
 8006388:	3614      	adds	r6, #20
 800638a:	42b4      	cmp	r4, r6
 800638c:	d167      	bne.n	800645e <DMA_SetConfig+0x16a>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800638e:	e9d0 6519 	ldrd	r6, r5, [r0, #100]	; 0x64
 8006392:	6075      	str	r5, [r6, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006394:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 8006396:	b116      	cbz	r6, 800639e <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006398:	e9d0 651c 	ldrd	r6, r5, [r0, #112]	; 0x70
 800639c:	6075      	str	r5, [r6, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800639e:	4564      	cmp	r4, ip
 80063a0:	d037      	beq.n	8006412 <DMA_SetConfig+0x11e>
 80063a2:	4d32      	ldr	r5, [pc, #200]	; (800646c <DMA_SetConfig+0x178>)
 80063a4:	42ac      	cmp	r4, r5
 80063a6:	d034      	beq.n	8006412 <DMA_SetConfig+0x11e>
 80063a8:	3518      	adds	r5, #24
 80063aa:	42ac      	cmp	r4, r5
 80063ac:	d031      	beq.n	8006412 <DMA_SetConfig+0x11e>
 80063ae:	3518      	adds	r5, #24
 80063b0:	42ac      	cmp	r4, r5
 80063b2:	d02e      	beq.n	8006412 <DMA_SetConfig+0x11e>
 80063b4:	3518      	adds	r5, #24
 80063b6:	42ac      	cmp	r4, r5
 80063b8:	d02b      	beq.n	8006412 <DMA_SetConfig+0x11e>
 80063ba:	3518      	adds	r5, #24
 80063bc:	42ac      	cmp	r4, r5
 80063be:	d028      	beq.n	8006412 <DMA_SetConfig+0x11e>
 80063c0:	3518      	adds	r5, #24
 80063c2:	42ac      	cmp	r4, r5
 80063c4:	d025      	beq.n	8006412 <DMA_SetConfig+0x11e>
 80063c6:	3518      	adds	r5, #24
 80063c8:	42ac      	cmp	r4, r5
 80063ca:	d022      	beq.n	8006412 <DMA_SetConfig+0x11e>
 80063cc:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80063d0:	42ac      	cmp	r4, r5
 80063d2:	d01e      	beq.n	8006412 <DMA_SetConfig+0x11e>
 80063d4:	3518      	adds	r5, #24
 80063d6:	42ac      	cmp	r4, r5
 80063d8:	d01b      	beq.n	8006412 <DMA_SetConfig+0x11e>
 80063da:	3518      	adds	r5, #24
 80063dc:	42ac      	cmp	r4, r5
 80063de:	d018      	beq.n	8006412 <DMA_SetConfig+0x11e>
 80063e0:	3518      	adds	r5, #24
 80063e2:	42ac      	cmp	r4, r5
 80063e4:	d015      	beq.n	8006412 <DMA_SetConfig+0x11e>
 80063e6:	3518      	adds	r5, #24
 80063e8:	42ac      	cmp	r4, r5
 80063ea:	d012      	beq.n	8006412 <DMA_SetConfig+0x11e>
 80063ec:	3518      	adds	r5, #24
 80063ee:	42ac      	cmp	r4, r5
 80063f0:	d00f      	beq.n	8006412 <DMA_SetConfig+0x11e>
 80063f2:	3518      	adds	r5, #24
 80063f4:	42ac      	cmp	r4, r5
 80063f6:	d00c      	beq.n	8006412 <DMA_SetConfig+0x11e>
 80063f8:	3518      	adds	r5, #24
 80063fa:	42ac      	cmp	r4, r5
 80063fc:	d009      	beq.n	8006412 <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80063fe:	4d1c      	ldr	r5, [pc, #112]	; (8006470 <DMA_SetConfig+0x17c>)
 8006400:	42ac      	cmp	r4, r5
 8006402:	d117      	bne.n	8006434 <DMA_SetConfig+0x140>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006404:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8006406:	f005 061f 	and.w	r6, r5, #31
 800640a:	2501      	movs	r5, #1
 800640c:	40b5      	lsls	r5, r6
 800640e:	607d      	str	r5, [r7, #4]
 8006410:	e009      	b.n	8006426 <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006412:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8006414:	f005 061f 	and.w	r6, r5, #31
 8006418:	253f      	movs	r5, #63	; 0x3f
 800641a:	40b5      	lsls	r5, r6
 800641c:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800641e:	6825      	ldr	r5, [r4, #0]
 8006420:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8006424:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006426:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006428:	6883      	ldr	r3, [r0, #8]
 800642a:	2b40      	cmp	r3, #64	; 0x40
 800642c:	d118      	bne.n	8006460 <DMA_SetConfig+0x16c>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800642e:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006430:	60e1      	str	r1, [r4, #12]
 8006432:	e014      	b.n	800645e <DMA_SetConfig+0x16a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006434:	4d0f      	ldr	r5, [pc, #60]	; (8006474 <DMA_SetConfig+0x180>)
 8006436:	42ac      	cmp	r4, r5
 8006438:	d0e4      	beq.n	8006404 <DMA_SetConfig+0x110>
 800643a:	3514      	adds	r5, #20
 800643c:	42ac      	cmp	r4, r5
 800643e:	d0e1      	beq.n	8006404 <DMA_SetConfig+0x110>
 8006440:	3514      	adds	r5, #20
 8006442:	42ac      	cmp	r4, r5
 8006444:	d0de      	beq.n	8006404 <DMA_SetConfig+0x110>
 8006446:	3514      	adds	r5, #20
 8006448:	42ac      	cmp	r4, r5
 800644a:	d0db      	beq.n	8006404 <DMA_SetConfig+0x110>
 800644c:	3514      	adds	r5, #20
 800644e:	42ac      	cmp	r4, r5
 8006450:	d0d8      	beq.n	8006404 <DMA_SetConfig+0x110>
 8006452:	3514      	adds	r5, #20
 8006454:	42ac      	cmp	r4, r5
 8006456:	d0d5      	beq.n	8006404 <DMA_SetConfig+0x110>
 8006458:	3514      	adds	r5, #20
 800645a:	42ac      	cmp	r4, r5
 800645c:	d0d2      	beq.n	8006404 <DMA_SetConfig+0x110>
  }
  else
  {
    /* Nothing To Do */
  }
}
 800645e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006460:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006462:	60e2      	str	r2, [r4, #12]
}
 8006464:	e7fb      	b.n	800645e <DMA_SetConfig+0x16a>
 8006466:	bf00      	nop
 8006468:	40020010 	.word	0x40020010
 800646c:	40020028 	.word	0x40020028
 8006470:	58025408 	.word	0x58025408
 8006474:	5802541c 	.word	0x5802541c

08006478 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006478:	6803      	ldr	r3, [r0, #0]
 800647a:	4a24      	ldr	r2, [pc, #144]	; (800650c <DMA_CalcBaseAndBitshift+0x94>)
 800647c:	4293      	cmp	r3, r2
{
 800647e:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006480:	d032      	beq.n	80064e8 <DMA_CalcBaseAndBitshift+0x70>
 8006482:	3218      	adds	r2, #24
 8006484:	4293      	cmp	r3, r2
 8006486:	d02f      	beq.n	80064e8 <DMA_CalcBaseAndBitshift+0x70>
 8006488:	3218      	adds	r2, #24
 800648a:	4293      	cmp	r3, r2
 800648c:	d02c      	beq.n	80064e8 <DMA_CalcBaseAndBitshift+0x70>
 800648e:	3218      	adds	r2, #24
 8006490:	4293      	cmp	r3, r2
 8006492:	d029      	beq.n	80064e8 <DMA_CalcBaseAndBitshift+0x70>
 8006494:	3218      	adds	r2, #24
 8006496:	4293      	cmp	r3, r2
 8006498:	d026      	beq.n	80064e8 <DMA_CalcBaseAndBitshift+0x70>
 800649a:	3218      	adds	r2, #24
 800649c:	4293      	cmp	r3, r2
 800649e:	d023      	beq.n	80064e8 <DMA_CalcBaseAndBitshift+0x70>
 80064a0:	3218      	adds	r2, #24
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d020      	beq.n	80064e8 <DMA_CalcBaseAndBitshift+0x70>
 80064a6:	3218      	adds	r2, #24
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d01d      	beq.n	80064e8 <DMA_CalcBaseAndBitshift+0x70>
 80064ac:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d019      	beq.n	80064e8 <DMA_CalcBaseAndBitshift+0x70>
 80064b4:	3218      	adds	r2, #24
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d016      	beq.n	80064e8 <DMA_CalcBaseAndBitshift+0x70>
 80064ba:	3218      	adds	r2, #24
 80064bc:	4293      	cmp	r3, r2
 80064be:	d013      	beq.n	80064e8 <DMA_CalcBaseAndBitshift+0x70>
 80064c0:	3218      	adds	r2, #24
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d010      	beq.n	80064e8 <DMA_CalcBaseAndBitshift+0x70>
 80064c6:	3218      	adds	r2, #24
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00d      	beq.n	80064e8 <DMA_CalcBaseAndBitshift+0x70>
 80064cc:	3218      	adds	r2, #24
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00a      	beq.n	80064e8 <DMA_CalcBaseAndBitshift+0x70>
 80064d2:	3218      	adds	r2, #24
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d007      	beq.n	80064e8 <DMA_CalcBaseAndBitshift+0x70>
 80064d8:	3218      	adds	r2, #24
 80064da:	4293      	cmp	r3, r2
 80064dc:	d004      	beq.n	80064e8 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80064de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80064e2:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 80064e4:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80064e6:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	2118      	movs	r1, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80064ec:	4c08      	ldr	r4, [pc, #32]	; (8006510 <DMA_CalcBaseAndBitshift+0x98>)
 80064ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80064f2:	3a10      	subs	r2, #16
 80064f4:	f023 0303 	bic.w	r3, r3, #3
 80064f8:	fbb2 f2f1 	udiv	r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80064fc:	f002 0107 	and.w	r1, r2, #7
    if (stream_number > 3U)
 8006500:	2a03      	cmp	r2, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006502:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006504:	bf88      	it	hi
 8006506:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006508:	65c1      	str	r1, [r0, #92]	; 0x5c
 800650a:	e7ea      	b.n	80064e2 <DMA_CalcBaseAndBitshift+0x6a>
 800650c:	40020010 	.word	0x40020010
 8006510:	08015500 	.word	0x08015500

08006514 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006514:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006516:	491f      	ldr	r1, [pc, #124]	; (8006594 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8006518:	b2d3      	uxtb	r3, r2
 800651a:	428a      	cmp	r2, r1
 800651c:	d024      	beq.n	8006568 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 800651e:	3114      	adds	r1, #20
 8006520:	428a      	cmp	r2, r1
 8006522:	d021      	beq.n	8006568 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006524:	3114      	adds	r1, #20
 8006526:	428a      	cmp	r2, r1
 8006528:	d01e      	beq.n	8006568 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 800652a:	3114      	adds	r1, #20
 800652c:	428a      	cmp	r2, r1
 800652e:	d01b      	beq.n	8006568 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006530:	3114      	adds	r1, #20
 8006532:	428a      	cmp	r2, r1
 8006534:	d018      	beq.n	8006568 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006536:	3114      	adds	r1, #20
 8006538:	428a      	cmp	r2, r1
 800653a:	d015      	beq.n	8006568 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 800653c:	3114      	adds	r1, #20
 800653e:	428a      	cmp	r2, r1
 8006540:	d012      	beq.n	8006568 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006542:	3114      	adds	r1, #20
 8006544:	428a      	cmp	r2, r1
 8006546:	d00f      	beq.n	8006568 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006548:	2118      	movs	r1, #24
 800654a:	3b10      	subs	r3, #16
 800654c:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006550:	4911      	ldr	r1, [pc, #68]	; (8006598 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8006552:	4411      	add	r1, r2
 8006554:	29a8      	cmp	r1, #168	; 0xa8
 8006556:	d91a      	bls.n	800658e <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006558:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 800655c:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
 8006560:	0092      	lsls	r2, r2, #2
 8006562:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006564:	4a0d      	ldr	r2, [pc, #52]	; (800659c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8006566:	e00a      	b.n	800657e <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006568:	2214      	movs	r2, #20
 800656a:	3b08      	subs	r3, #8
 800656c:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006570:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
 8006574:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
 8006578:	0092      	lsls	r2, r2, #2
 800657a:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800657c:	4a08      	ldr	r2, [pc, #32]	; (80065a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800657e:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006580:	f003 031f 	and.w	r3, r3, #31
 8006584:	2201      	movs	r2, #1
 8006586:	fa02 f303 	lsl.w	r3, r2, r3
 800658a:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 800658c:	4770      	bx	lr
      stream_number += 8U;
 800658e:	3308      	adds	r3, #8
 8006590:	e7e2      	b.n	8006558 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 8006592:	bf00      	nop
 8006594:	58025408 	.word	0x58025408
 8006598:	bffdfbf0 	.word	0xbffdfbf0
 800659c:	40020880 	.word	0x40020880
 80065a0:	58025880 	.word	0x58025880

080065a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80065a4:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80065a6:	1e51      	subs	r1, r2, #1
 80065a8:	2907      	cmp	r1, #7
{
 80065aa:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80065ac:	d821      	bhi.n	80065f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80065ae:	6803      	ldr	r3, [r0, #0]
 80065b0:	4c13      	ldr	r4, [pc, #76]	; (8006600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 80065b2:	42a3      	cmp	r3, r4
 80065b4:	d01e      	beq.n	80065f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80065b6:	3414      	adds	r4, #20
 80065b8:	42a3      	cmp	r3, r4
 80065ba:	d01b      	beq.n	80065f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80065bc:	3414      	adds	r4, #20
 80065be:	42a3      	cmp	r3, r4
 80065c0:	d018      	beq.n	80065f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80065c2:	3414      	adds	r4, #20
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	d015      	beq.n	80065f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80065c8:	3414      	adds	r4, #20
 80065ca:	42a3      	cmp	r3, r4
 80065cc:	d012      	beq.n	80065f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80065ce:	3414      	adds	r4, #20
 80065d0:	42a3      	cmp	r3, r4
 80065d2:	d00f      	beq.n	80065f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80065d4:	3414      	adds	r4, #20
 80065d6:	42a3      	cmp	r3, r4
 80065d8:	d00c      	beq.n	80065f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80065da:	3414      	adds	r4, #20
 80065dc:	42a3      	cmp	r3, r4
 80065de:	d009      	beq.n	80065f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80065e0:	4b08      	ldr	r3, [pc, #32]	; (8006604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80065e8:	4b07      	ldr	r3, [pc, #28]	; (8006608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80065ea:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80065ec:	2301      	movs	r3, #1
 80065ee:	408b      	lsls	r3, r1
 80065f0:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 80065f2:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80065f4:	4b05      	ldr	r3, [pc, #20]	; (800660c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80065fc:	4b04      	ldr	r3, [pc, #16]	; (8006610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 80065fe:	e7f4      	b.n	80065ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x46>
 8006600:	58025408 	.word	0x58025408
 8006604:	1000823f 	.word	0x1000823f
 8006608:	40020940 	.word	0x40020940
 800660c:	1600963f 	.word	0x1600963f
 8006610:	58025940 	.word	0x58025940

08006614 <HAL_DMA_Init>:
{
 8006614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006616:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006618:	f7fe ffb0 	bl	800557c <HAL_GetTick>
 800661c:	4606      	mov	r6, r0
  if(hdma == NULL)
 800661e:	2c00      	cmp	r4, #0
 8006620:	f000 8165 	beq.w	80068ee <HAL_DMA_Init+0x2da>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	4db3      	ldr	r5, [pc, #716]	; (80068f4 <HAL_DMA_Init+0x2e0>)
 8006628:	42ab      	cmp	r3, r5
 800662a:	d06a      	beq.n	8006702 <HAL_DMA_Init+0xee>
 800662c:	4ab2      	ldr	r2, [pc, #712]	; (80068f8 <HAL_DMA_Init+0x2e4>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d067      	beq.n	8006702 <HAL_DMA_Init+0xee>
 8006632:	3218      	adds	r2, #24
 8006634:	4293      	cmp	r3, r2
 8006636:	d064      	beq.n	8006702 <HAL_DMA_Init+0xee>
 8006638:	3218      	adds	r2, #24
 800663a:	4293      	cmp	r3, r2
 800663c:	d061      	beq.n	8006702 <HAL_DMA_Init+0xee>
 800663e:	3218      	adds	r2, #24
 8006640:	4293      	cmp	r3, r2
 8006642:	d05e      	beq.n	8006702 <HAL_DMA_Init+0xee>
 8006644:	3218      	adds	r2, #24
 8006646:	4293      	cmp	r3, r2
 8006648:	d05b      	beq.n	8006702 <HAL_DMA_Init+0xee>
 800664a:	3218      	adds	r2, #24
 800664c:	4293      	cmp	r3, r2
 800664e:	d058      	beq.n	8006702 <HAL_DMA_Init+0xee>
 8006650:	3218      	adds	r2, #24
 8006652:	4293      	cmp	r3, r2
 8006654:	d055      	beq.n	8006702 <HAL_DMA_Init+0xee>
 8006656:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800665a:	4293      	cmp	r3, r2
 800665c:	d051      	beq.n	8006702 <HAL_DMA_Init+0xee>
 800665e:	3218      	adds	r2, #24
 8006660:	4293      	cmp	r3, r2
 8006662:	d04e      	beq.n	8006702 <HAL_DMA_Init+0xee>
 8006664:	3218      	adds	r2, #24
 8006666:	4293      	cmp	r3, r2
 8006668:	d04b      	beq.n	8006702 <HAL_DMA_Init+0xee>
 800666a:	3218      	adds	r2, #24
 800666c:	4293      	cmp	r3, r2
 800666e:	d048      	beq.n	8006702 <HAL_DMA_Init+0xee>
 8006670:	3218      	adds	r2, #24
 8006672:	4293      	cmp	r3, r2
 8006674:	d045      	beq.n	8006702 <HAL_DMA_Init+0xee>
 8006676:	3218      	adds	r2, #24
 8006678:	4293      	cmp	r3, r2
 800667a:	d042      	beq.n	8006702 <HAL_DMA_Init+0xee>
 800667c:	3218      	adds	r2, #24
 800667e:	4293      	cmp	r3, r2
 8006680:	d03f      	beq.n	8006702 <HAL_DMA_Init+0xee>
 8006682:	3218      	adds	r2, #24
 8006684:	4293      	cmp	r3, r2
 8006686:	d03c      	beq.n	8006702 <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006688:	4a9c      	ldr	r2, [pc, #624]	; (80068fc <HAL_DMA_Init+0x2e8>)
 800668a:	4293      	cmp	r3, r2
 800668c:	f040 8160 	bne.w	8006950 <HAL_DMA_Init+0x33c>
    __HAL_UNLOCK(hdma);
 8006690:	2200      	movs	r2, #0
 8006692:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8006696:	2202      	movs	r2, #2
 8006698:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800669c:	68a2      	ldr	r2, [r4, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800669e:	6819      	ldr	r1, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80066a0:	2a40      	cmp	r2, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80066a2:	f421 31ff 	bic.w	r1, r1, #130560	; 0x1fe00
 80066a6:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80066aa:	f000 816f 	beq.w	800698c <HAL_DMA_Init+0x378>
 80066ae:	2a80      	cmp	r2, #128	; 0x80
 80066b0:	bf14      	ite	ne
 80066b2:	2000      	movne	r0, #0
 80066b4:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80066b8:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 80066bc:	08d2      	lsrs	r2, r2, #3
 80066be:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80066c2:	6966      	ldr	r6, [r4, #20]
 80066c4:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80066c8:	69a6      	ldr	r6, [r4, #24]
 80066ca:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80066ce:	69e6      	ldr	r6, [r4, #28]
 80066d0:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80066d4:	6a26      	ldr	r6, [r4, #32]
 80066d6:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 80066da:	430a      	orrs	r2, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80066dc:	4302      	orrs	r2, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066de:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80066e0:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80066e2:	4a87      	ldr	r2, [pc, #540]	; (8006900 <HAL_DMA_Init+0x2ec>)
 80066e4:	441a      	add	r2, r3
 80066e6:	2314      	movs	r3, #20
 80066e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80066ec:	0092      	lsls	r2, r2, #2
 80066ee:	65e2      	str	r2, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066f0:	f7ff fec2 	bl	8006478 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80066f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80066f6:	f003 021f 	and.w	r2, r3, #31
 80066fa:	2301      	movs	r3, #1
 80066fc:	4093      	lsls	r3, r2
 80066fe:	6043      	str	r3, [r0, #4]
 8006700:	e081      	b.n	8006806 <HAL_DMA_Init+0x1f2>
    __HAL_UNLOCK(hdma);
 8006702:	2200      	movs	r2, #0
    __HAL_DMA_DISABLE(hdma);
 8006704:	42ab      	cmp	r3, r5
    __HAL_UNLOCK(hdma);
 8006706:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 800670a:	f04f 0202 	mov.w	r2, #2
 800670e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8006712:	d01e      	beq.n	8006752 <HAL_DMA_Init+0x13e>
 8006714:	4a78      	ldr	r2, [pc, #480]	; (80068f8 <HAL_DMA_Init+0x2e4>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d01b      	beq.n	8006752 <HAL_DMA_Init+0x13e>
 800671a:	3218      	adds	r2, #24
 800671c:	4293      	cmp	r3, r2
 800671e:	d018      	beq.n	8006752 <HAL_DMA_Init+0x13e>
 8006720:	3218      	adds	r2, #24
 8006722:	4293      	cmp	r3, r2
 8006724:	d015      	beq.n	8006752 <HAL_DMA_Init+0x13e>
 8006726:	3218      	adds	r2, #24
 8006728:	4293      	cmp	r3, r2
 800672a:	d012      	beq.n	8006752 <HAL_DMA_Init+0x13e>
 800672c:	3218      	adds	r2, #24
 800672e:	4293      	cmp	r3, r2
 8006730:	d00f      	beq.n	8006752 <HAL_DMA_Init+0x13e>
 8006732:	3218      	adds	r2, #24
 8006734:	4293      	cmp	r3, r2
 8006736:	d00c      	beq.n	8006752 <HAL_DMA_Init+0x13e>
 8006738:	3218      	adds	r2, #24
 800673a:	4293      	cmp	r3, r2
 800673c:	d009      	beq.n	8006752 <HAL_DMA_Init+0x13e>
 800673e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006742:	4293      	cmp	r3, r2
 8006744:	d005      	beq.n	8006752 <HAL_DMA_Init+0x13e>
 8006746:	3218      	adds	r2, #24
 8006748:	4293      	cmp	r3, r2
 800674a:	d002      	beq.n	8006752 <HAL_DMA_Init+0x13e>
 800674c:	3218      	adds	r2, #24
 800674e:	4293      	cmp	r3, r2
 8006750:	d0ff      	beq.n	8006752 <HAL_DMA_Init+0x13e>
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	f022 0201 	bic.w	r2, r2, #1
 8006758:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800675a:	6821      	ldr	r1, [r4, #0]
 800675c:	680b      	ldr	r3, [r1, #0]
 800675e:	07db      	lsls	r3, r3, #31
 8006760:	f100 80ba 	bmi.w	80068d8 <HAL_DMA_Init+0x2c4>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006764:	680b      	ldr	r3, [r1, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006766:	4e67      	ldr	r6, [pc, #412]	; (8006904 <HAL_DMA_Init+0x2f0>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006768:	69a0      	ldr	r0, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800676a:	401e      	ands	r6, r3
    registerValue |=  hdma->Init.Direction           |
 800676c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8006770:	4313      	orrs	r3, r2
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006772:	6922      	ldr	r2, [r4, #16]
 8006774:	4313      	orrs	r3, r2
 8006776:	6962      	ldr	r2, [r4, #20]
 8006778:	4313      	orrs	r3, r2
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800677a:	69e2      	ldr	r2, [r4, #28]
 800677c:	4303      	orrs	r3, r0
 800677e:	4313      	orrs	r3, r2
            hdma->Init.Mode                | hdma->Init.Priority;
 8006780:	6a22      	ldr	r2, [r4, #32]
 8006782:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006784:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006786:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006788:	2e04      	cmp	r6, #4
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800678a:	bf02      	ittt	eq
 800678c:	e9d4 270b 	ldrdeq	r2, r7, [r4, #44]	; 0x2c
 8006790:	433a      	orreq	r2, r7
 8006792:	4313      	orreq	r3, r2
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006794:	4a5c      	ldr	r2, [pc, #368]	; (8006908 <HAL_DMA_Init+0x2f4>)
 8006796:	6812      	ldr	r2, [r2, #0]
 8006798:	0c12      	lsrs	r2, r2, #16
 800679a:	0412      	lsls	r2, r2, #16
 800679c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80067a0:	d30f      	bcc.n	80067c2 <HAL_DMA_Init+0x1ae>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80067a2:	6862      	ldr	r2, [r4, #4]
 80067a4:	f1a2 0c29 	sub.w	ip, r2, #41	; 0x29
 80067a8:	f1bc 0f1f 	cmp.w	ip, #31
 80067ac:	d804      	bhi.n	80067b8 <HAL_DMA_Init+0x1a4>
 80067ae:	4f57      	ldr	r7, [pc, #348]	; (800690c <HAL_DMA_Init+0x2f8>)
 80067b0:	fa27 f70c 	lsr.w	r7, r7, ip
 80067b4:	07ff      	lsls	r7, r7, #31
 80067b6:	d402      	bmi.n	80067be <HAL_DMA_Init+0x1aa>
 80067b8:	3a4f      	subs	r2, #79	; 0x4f
 80067ba:	2a03      	cmp	r2, #3
 80067bc:	d801      	bhi.n	80067c2 <HAL_DMA_Init+0x1ae>
        registerValue |= DMA_SxCR_TRBUFF;
 80067be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80067c2:	600b      	str	r3, [r1, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067c4:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80067c6:	694b      	ldr	r3, [r1, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80067c8:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80067cc:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067d0:	d10f      	bne.n	80067f2 <HAL_DMA_Init+0x1de>
      registerValue |= hdma->Init.FIFOThreshold;
 80067d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80067d6:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067d8:	b15e      	cbz	r6, 80067f2 <HAL_DMA_Init+0x1de>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80067da:	2800      	cmp	r0, #0
 80067dc:	f040 8098 	bne.w	8006910 <HAL_DMA_Init+0x2fc>
    switch (hdma->Init.FIFOThreshold)
 80067e0:	2a01      	cmp	r2, #1
 80067e2:	f000 80a7 	beq.w	8006934 <HAL_DMA_Init+0x320>
 80067e6:	d301      	bcc.n	80067ec <HAL_DMA_Init+0x1d8>
 80067e8:	2a02      	cmp	r2, #2
    switch (hdma->Init.FIFOThreshold)
 80067ea:	d102      	bne.n	80067f2 <HAL_DMA_Init+0x1de>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067ec:	01f2      	lsls	r2, r6, #7
 80067ee:	f100 80a5 	bmi.w	800693c <HAL_DMA_Init+0x328>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80067f2:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067f4:	4620      	mov	r0, r4
 80067f6:	f7ff fe3f 	bl	8006478 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067fa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80067fc:	f003 021f 	and.w	r2, r3, #31
 8006800:	233f      	movs	r3, #63	; 0x3f
 8006802:	4093      	lsls	r3, r2
 8006804:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	42ab      	cmp	r3, r5
 800680a:	d045      	beq.n	8006898 <HAL_DMA_Init+0x284>
 800680c:	4a3a      	ldr	r2, [pc, #232]	; (80068f8 <HAL_DMA_Init+0x2e4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d042      	beq.n	8006898 <HAL_DMA_Init+0x284>
 8006812:	3218      	adds	r2, #24
 8006814:	4293      	cmp	r3, r2
 8006816:	d03f      	beq.n	8006898 <HAL_DMA_Init+0x284>
 8006818:	3218      	adds	r2, #24
 800681a:	4293      	cmp	r3, r2
 800681c:	d03c      	beq.n	8006898 <HAL_DMA_Init+0x284>
 800681e:	3218      	adds	r2, #24
 8006820:	4293      	cmp	r3, r2
 8006822:	d039      	beq.n	8006898 <HAL_DMA_Init+0x284>
 8006824:	3218      	adds	r2, #24
 8006826:	4293      	cmp	r3, r2
 8006828:	d036      	beq.n	8006898 <HAL_DMA_Init+0x284>
 800682a:	3218      	adds	r2, #24
 800682c:	4293      	cmp	r3, r2
 800682e:	d033      	beq.n	8006898 <HAL_DMA_Init+0x284>
 8006830:	3218      	adds	r2, #24
 8006832:	4293      	cmp	r3, r2
 8006834:	d030      	beq.n	8006898 <HAL_DMA_Init+0x284>
 8006836:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800683a:	4293      	cmp	r3, r2
 800683c:	d02c      	beq.n	8006898 <HAL_DMA_Init+0x284>
 800683e:	3218      	adds	r2, #24
 8006840:	4293      	cmp	r3, r2
 8006842:	d029      	beq.n	8006898 <HAL_DMA_Init+0x284>
 8006844:	3218      	adds	r2, #24
 8006846:	4293      	cmp	r3, r2
 8006848:	d026      	beq.n	8006898 <HAL_DMA_Init+0x284>
 800684a:	3218      	adds	r2, #24
 800684c:	4293      	cmp	r3, r2
 800684e:	d023      	beq.n	8006898 <HAL_DMA_Init+0x284>
 8006850:	3218      	adds	r2, #24
 8006852:	4293      	cmp	r3, r2
 8006854:	d020      	beq.n	8006898 <HAL_DMA_Init+0x284>
 8006856:	3218      	adds	r2, #24
 8006858:	4293      	cmp	r3, r2
 800685a:	d01d      	beq.n	8006898 <HAL_DMA_Init+0x284>
 800685c:	3218      	adds	r2, #24
 800685e:	4293      	cmp	r3, r2
 8006860:	d01a      	beq.n	8006898 <HAL_DMA_Init+0x284>
 8006862:	3218      	adds	r2, #24
 8006864:	4293      	cmp	r3, r2
 8006866:	d017      	beq.n	8006898 <HAL_DMA_Init+0x284>
 8006868:	4a24      	ldr	r2, [pc, #144]	; (80068fc <HAL_DMA_Init+0x2e8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d014      	beq.n	8006898 <HAL_DMA_Init+0x284>
 800686e:	3214      	adds	r2, #20
 8006870:	4293      	cmp	r3, r2
 8006872:	d011      	beq.n	8006898 <HAL_DMA_Init+0x284>
 8006874:	3214      	adds	r2, #20
 8006876:	4293      	cmp	r3, r2
 8006878:	d00e      	beq.n	8006898 <HAL_DMA_Init+0x284>
 800687a:	3214      	adds	r2, #20
 800687c:	4293      	cmp	r3, r2
 800687e:	d00b      	beq.n	8006898 <HAL_DMA_Init+0x284>
 8006880:	3214      	adds	r2, #20
 8006882:	4293      	cmp	r3, r2
 8006884:	d008      	beq.n	8006898 <HAL_DMA_Init+0x284>
 8006886:	3214      	adds	r2, #20
 8006888:	4293      	cmp	r3, r2
 800688a:	d005      	beq.n	8006898 <HAL_DMA_Init+0x284>
 800688c:	3214      	adds	r2, #20
 800688e:	4293      	cmp	r3, r2
 8006890:	d002      	beq.n	8006898 <HAL_DMA_Init+0x284>
 8006892:	3214      	adds	r2, #20
 8006894:	4293      	cmp	r3, r2
 8006896:	d119      	bne.n	80068cc <HAL_DMA_Init+0x2b8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006898:	4620      	mov	r0, r4
 800689a:	2500      	movs	r5, #0
 800689c:	f7ff fe3a 	bl	8006514 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80068a0:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80068a2:	6e22      	ldr	r2, [r4, #96]	; 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80068a4:	2b80      	cmp	r3, #128	; 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80068a6:	bf04      	itt	eq
 80068a8:	2300      	moveq	r3, #0
 80068aa:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80068ac:	6863      	ldr	r3, [r4, #4]
 80068ae:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80068b0:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80068b2:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80068b4:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068b6:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
 80068ba:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80068bc:	d868      	bhi.n	8006990 <HAL_DMA_Init+0x37c>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80068be:	f7ff fe71 	bl	80065a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80068c2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80068c4:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068c6:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 80068ca:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068cc:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80068ce:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068d0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80068d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80068d6:	e036      	b.n	8006946 <HAL_DMA_Init+0x332>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068d8:	f7fe fe50 	bl	800557c <HAL_GetTick>
 80068dc:	1b80      	subs	r0, r0, r6
 80068de:	2805      	cmp	r0, #5
 80068e0:	f67f af3b 	bls.w	800675a <HAL_DMA_Init+0x146>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068e4:	2320      	movs	r3, #32
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068e6:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80068e8:	2303      	movs	r3, #3
 80068ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80068ee:	2001      	movs	r0, #1
 80068f0:	e029      	b.n	8006946 <HAL_DMA_Init+0x332>
 80068f2:	bf00      	nop
 80068f4:	40020010 	.word	0x40020010
 80068f8:	40020028 	.word	0x40020028
 80068fc:	58025408 	.word	0x58025408
 8006900:	a7fdabf8 	.word	0xa7fdabf8
 8006904:	fe10803f 	.word	0xfe10803f
 8006908:	5c001000 	.word	0x5c001000
 800690c:	c3c0003f 	.word	0xc3c0003f
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006910:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8006914:	d118      	bne.n	8006948 <HAL_DMA_Init+0x334>
    switch (hdma->Init.FIFOThreshold)
 8006916:	2a03      	cmp	r2, #3
 8006918:	f63f af6b 	bhi.w	80067f2 <HAL_DMA_Init+0x1de>
 800691c:	a001      	add	r0, pc, #4	; (adr r0, 8006924 <HAL_DMA_Init+0x310>)
 800691e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8006922:	bf00      	nop
 8006924:	0800693d 	.word	0x0800693d
 8006928:	080067ed 	.word	0x080067ed
 800692c:	0800693d 	.word	0x0800693d
 8006930:	08006935 	.word	0x08006935
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006934:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 8006938:	f47f af5b 	bne.w	80067f2 <HAL_DMA_Init+0x1de>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800693c:	2340      	movs	r3, #64	; 0x40
          hdma->State = HAL_DMA_STATE_READY;
 800693e:	2001      	movs	r0, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006940:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8006942:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8006946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 8006948:	2a02      	cmp	r2, #2
 800694a:	d9f7      	bls.n	800693c <HAL_DMA_Init+0x328>
 800694c:	2a03      	cmp	r2, #3
 800694e:	e74c      	b.n	80067ea <HAL_DMA_Init+0x1d6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006950:	4a11      	ldr	r2, [pc, #68]	; (8006998 <HAL_DMA_Init+0x384>)
 8006952:	4293      	cmp	r3, r2
 8006954:	f43f ae9c 	beq.w	8006690 <HAL_DMA_Init+0x7c>
 8006958:	3214      	adds	r2, #20
 800695a:	4293      	cmp	r3, r2
 800695c:	f43f ae98 	beq.w	8006690 <HAL_DMA_Init+0x7c>
 8006960:	3214      	adds	r2, #20
 8006962:	4293      	cmp	r3, r2
 8006964:	f43f ae94 	beq.w	8006690 <HAL_DMA_Init+0x7c>
 8006968:	3214      	adds	r2, #20
 800696a:	4293      	cmp	r3, r2
 800696c:	f43f ae90 	beq.w	8006690 <HAL_DMA_Init+0x7c>
 8006970:	3214      	adds	r2, #20
 8006972:	4293      	cmp	r3, r2
 8006974:	f43f ae8c 	beq.w	8006690 <HAL_DMA_Init+0x7c>
 8006978:	3214      	adds	r2, #20
 800697a:	4293      	cmp	r3, r2
 800697c:	f43f ae88 	beq.w	8006690 <HAL_DMA_Init+0x7c>
 8006980:	3214      	adds	r2, #20
 8006982:	4293      	cmp	r3, r2
 8006984:	f43f ae84 	beq.w	8006690 <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006988:	2340      	movs	r3, #64	; 0x40
 800698a:	e7ac      	b.n	80068e6 <HAL_DMA_Init+0x2d2>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800698c:	2010      	movs	r0, #16
 800698e:	e693      	b.n	80066b8 <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 8006990:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006994:	6765      	str	r5, [r4, #116]	; 0x74
 8006996:	e799      	b.n	80068cc <HAL_DMA_Init+0x2b8>
 8006998:	5802541c 	.word	0x5802541c

0800699c <HAL_DMA_Start_IT>:
{
 800699c:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 800699e:	4604      	mov	r4, r0
 80069a0:	2800      	cmp	r0, #0
 80069a2:	f000 810d 	beq.w	8006bc0 <HAL_DMA_Start_IT+0x224>
  __HAL_LOCK(hdma);
 80069a6:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80069aa:	2801      	cmp	r0, #1
 80069ac:	f000 810a 	beq.w	8006bc4 <HAL_DMA_Start_IT+0x228>
 80069b0:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80069b2:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
 80069b6:	4285      	cmp	r5, r0
  __HAL_LOCK(hdma);
 80069b8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 80069bc:	f04f 0500 	mov.w	r5, #0
  if(HAL_DMA_STATE_READY == hdma->State)
 80069c0:	f040 80f8 	bne.w	8006bb4 <HAL_DMA_Start_IT+0x218>
    hdma->State = HAL_DMA_STATE_BUSY;
 80069c4:	2002      	movs	r0, #2
 80069c6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069ca:	6565      	str	r5, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 80069cc:	6820      	ldr	r0, [r4, #0]
 80069ce:	4d7e      	ldr	r5, [pc, #504]	; (8006bc8 <HAL_DMA_Start_IT+0x22c>)
 80069d0:	42a8      	cmp	r0, r5
 80069d2:	d01e      	beq.n	8006a12 <HAL_DMA_Start_IT+0x76>
 80069d4:	4e7d      	ldr	r6, [pc, #500]	; (8006bcc <HAL_DMA_Start_IT+0x230>)
 80069d6:	42b0      	cmp	r0, r6
 80069d8:	d01b      	beq.n	8006a12 <HAL_DMA_Start_IT+0x76>
 80069da:	3618      	adds	r6, #24
 80069dc:	42b0      	cmp	r0, r6
 80069de:	d018      	beq.n	8006a12 <HAL_DMA_Start_IT+0x76>
 80069e0:	3618      	adds	r6, #24
 80069e2:	42b0      	cmp	r0, r6
 80069e4:	d015      	beq.n	8006a12 <HAL_DMA_Start_IT+0x76>
 80069e6:	3618      	adds	r6, #24
 80069e8:	42b0      	cmp	r0, r6
 80069ea:	d012      	beq.n	8006a12 <HAL_DMA_Start_IT+0x76>
 80069ec:	3618      	adds	r6, #24
 80069ee:	42b0      	cmp	r0, r6
 80069f0:	d00f      	beq.n	8006a12 <HAL_DMA_Start_IT+0x76>
 80069f2:	3618      	adds	r6, #24
 80069f4:	42b0      	cmp	r0, r6
 80069f6:	d00c      	beq.n	8006a12 <HAL_DMA_Start_IT+0x76>
 80069f8:	3618      	adds	r6, #24
 80069fa:	42b0      	cmp	r0, r6
 80069fc:	d009      	beq.n	8006a12 <HAL_DMA_Start_IT+0x76>
 80069fe:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8006a02:	42b0      	cmp	r0, r6
 8006a04:	d005      	beq.n	8006a12 <HAL_DMA_Start_IT+0x76>
 8006a06:	3618      	adds	r6, #24
 8006a08:	42b0      	cmp	r0, r6
 8006a0a:	d002      	beq.n	8006a12 <HAL_DMA_Start_IT+0x76>
 8006a0c:	3618      	adds	r6, #24
 8006a0e:	42b0      	cmp	r0, r6
 8006a10:	d0ff      	beq.n	8006a12 <HAL_DMA_Start_IT+0x76>
 8006a12:	6806      	ldr	r6, [r0, #0]
 8006a14:	f026 0601 	bic.w	r6, r6, #1
 8006a18:	6006      	str	r6, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f7ff fc6a 	bl	80062f4 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006a24:	42ab      	cmp	r3, r5
 8006a26:	d053      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x134>
 8006a28:	4a68      	ldr	r2, [pc, #416]	; (8006bcc <HAL_DMA_Start_IT+0x230>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d050      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x134>
 8006a2e:	3218      	adds	r2, #24
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d04d      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x134>
 8006a34:	3218      	adds	r2, #24
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d04a      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x134>
 8006a3a:	3218      	adds	r2, #24
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d047      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x134>
 8006a40:	3218      	adds	r2, #24
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d044      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x134>
 8006a46:	3218      	adds	r2, #24
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d041      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x134>
 8006a4c:	3218      	adds	r2, #24
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d03e      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x134>
 8006a52:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d03a      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x134>
 8006a5a:	3218      	adds	r2, #24
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d037      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x134>
 8006a60:	3218      	adds	r2, #24
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d034      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x134>
 8006a66:	3218      	adds	r2, #24
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d031      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x134>
 8006a6c:	3218      	adds	r2, #24
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d02e      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x134>
 8006a72:	3218      	adds	r2, #24
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d02b      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x134>
 8006a78:	3218      	adds	r2, #24
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d028      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x134>
 8006a7e:	3218      	adds	r2, #24
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d025      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x134>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	f022 020e 	bic.w	r2, r2, #14
 8006a8a:	f042 020a 	orr.w	r2, r2, #10
 8006a8e:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8006a90:	2900      	cmp	r1, #0
 8006a92:	d156      	bne.n	8006b42 <HAL_DMA_Start_IT+0x1a6>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a94:	4a4e      	ldr	r2, [pc, #312]	; (8006bd0 <HAL_DMA_Start_IT+0x234>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d027      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006a9a:	4a4e      	ldr	r2, [pc, #312]	; (8006bd4 <HAL_DMA_Start_IT+0x238>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d024      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006aa0:	3214      	adds	r2, #20
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d021      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006aa6:	3214      	adds	r2, #20
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d01e      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006aac:	3214      	adds	r2, #20
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d01b      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006ab2:	3214      	adds	r2, #20
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d018      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006ab8:	3214      	adds	r2, #20
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d015      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006abe:	3214      	adds	r2, #20
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d012      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
    __HAL_DMA_ENABLE(hdma);
 8006ac4:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8006ac8:	f042 0201 	orr.w	r2, r2, #1
 8006acc:	601a      	str	r2, [r3, #0]
}
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	f022 021e 	bic.w	r2, r2, #30
 8006ad6:	f042 0216 	orr.w	r2, r2, #22
 8006ada:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8006adc:	b119      	cbz	r1, 8006ae6 <HAL_DMA_Start_IT+0x14a>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	f042 0208 	orr.w	r2, r2, #8
 8006ae4:	601a      	str	r2, [r3, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ae6:	42ab      	cmp	r3, r5
 8006ae8:	d130      	bne.n	8006b4c <HAL_DMA_Start_IT+0x1b0>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006aea:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006aec:	6811      	ldr	r1, [r2, #0]
 8006aee:	03c9      	lsls	r1, r1, #15
 8006af0:	d45b      	bmi.n	8006baa <HAL_DMA_Start_IT+0x20e>
      if(hdma->DMAmuxRequestGen != 0U)
 8006af2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006af4:	b11a      	cbz	r2, 8006afe <HAL_DMA_Start_IT+0x162>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006af6:	6811      	ldr	r1, [r2, #0]
 8006af8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006afc:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8006afe:	42ab      	cmp	r3, r5
 8006b00:	d0e0      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x128>
 8006b02:	4a32      	ldr	r2, [pc, #200]	; (8006bcc <HAL_DMA_Start_IT+0x230>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d0dd      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x128>
 8006b08:	3218      	adds	r2, #24
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d0da      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x128>
 8006b0e:	3218      	adds	r2, #24
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d0d7      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x128>
 8006b14:	3218      	adds	r2, #24
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d0d4      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x128>
 8006b1a:	3218      	adds	r2, #24
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d0d1      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x128>
 8006b20:	3218      	adds	r2, #24
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d0ce      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x128>
 8006b26:	3218      	adds	r2, #24
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d0cb      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x128>
 8006b2c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d0c7      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x128>
 8006b34:	3218      	adds	r2, #24
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d0c4      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x128>
 8006b3a:	3218      	adds	r2, #24
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d0c1      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x128>
 8006b40:	e7c0      	b.n	8006ac4 <HAL_DMA_Start_IT+0x128>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	f042 0204 	orr.w	r2, r2, #4
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	e7a3      	b.n	8006a94 <HAL_DMA_Start_IT+0xf8>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b4c:	4a1f      	ldr	r2, [pc, #124]	; (8006bcc <HAL_DMA_Start_IT+0x230>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d0cb      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006b52:	3218      	adds	r2, #24
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d0c8      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006b58:	3218      	adds	r2, #24
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d0c5      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006b5e:	3218      	adds	r2, #24
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d0c2      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006b64:	3218      	adds	r2, #24
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d0bf      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006b6a:	3218      	adds	r2, #24
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d0bc      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006b70:	3218      	adds	r2, #24
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d0b9      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006b76:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d0b5      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006b7e:	3218      	adds	r2, #24
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d0b2      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006b84:	3218      	adds	r2, #24
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d0af      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006b8a:	3218      	adds	r2, #24
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d0ac      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006b90:	3218      	adds	r2, #24
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d0a9      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006b96:	3218      	adds	r2, #24
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d0a6      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006b9c:	3218      	adds	r2, #24
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d0a3      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006ba2:	3218      	adds	r2, #24
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d0a0      	beq.n	8006aea <HAL_DMA_Start_IT+0x14e>
 8006ba8:	e774      	b.n	8006a94 <HAL_DMA_Start_IT+0xf8>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006baa:	6811      	ldr	r1, [r2, #0]
 8006bac:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006bb0:	6011      	str	r1, [r2, #0]
 8006bb2:	e79e      	b.n	8006af2 <HAL_DMA_Start_IT+0x156>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006bb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8006bb8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006bbc:	6563      	str	r3, [r4, #84]	; 0x54
 8006bbe:	e786      	b.n	8006ace <HAL_DMA_Start_IT+0x132>
    return HAL_ERROR;
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	e784      	b.n	8006ace <HAL_DMA_Start_IT+0x132>
  __HAL_LOCK(hdma);
 8006bc4:	2002      	movs	r0, #2
 8006bc6:	e782      	b.n	8006ace <HAL_DMA_Start_IT+0x132>
 8006bc8:	40020010 	.word	0x40020010
 8006bcc:	40020028 	.word	0x40020028
 8006bd0:	58025408 	.word	0x58025408
 8006bd4:	5802541c 	.word	0x5802541c

08006bd8 <HAL_DMA_Abort>:
{
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8006bdc:	f7fe fcce 	bl	800557c <HAL_GetTick>
 8006be0:	4607      	mov	r7, r0
  if(hdma == NULL)
 8006be2:	b145      	cbz	r5, 8006bf6 <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006be4:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d006      	beq.n	8006bfa <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bec:	2380      	movs	r3, #128	; 0x80
 8006bee:	656b      	str	r3, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8006bf6:	2001      	movs	r0, #1
 8006bf8:	e162      	b.n	8006ec0 <HAL_DMA_Abort+0x2e8>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bfa:	682c      	ldr	r4, [r5, #0]
 8006bfc:	4ecc      	ldr	r6, [pc, #816]	; (8006f30 <HAL_DMA_Abort+0x358>)
 8006bfe:	42b4      	cmp	r4, r6
 8006c00:	f000 80d3 	beq.w	8006daa <HAL_DMA_Abort+0x1d2>
 8006c04:	4bcb      	ldr	r3, [pc, #812]	; (8006f34 <HAL_DMA_Abort+0x35c>)
 8006c06:	429c      	cmp	r4, r3
 8006c08:	f000 80cf 	beq.w	8006daa <HAL_DMA_Abort+0x1d2>
 8006c0c:	3318      	adds	r3, #24
 8006c0e:	429c      	cmp	r4, r3
 8006c10:	f000 80cb 	beq.w	8006daa <HAL_DMA_Abort+0x1d2>
 8006c14:	3318      	adds	r3, #24
 8006c16:	429c      	cmp	r4, r3
 8006c18:	f000 80c7 	beq.w	8006daa <HAL_DMA_Abort+0x1d2>
 8006c1c:	3318      	adds	r3, #24
 8006c1e:	429c      	cmp	r4, r3
 8006c20:	f000 80c3 	beq.w	8006daa <HAL_DMA_Abort+0x1d2>
 8006c24:	3318      	adds	r3, #24
 8006c26:	429c      	cmp	r4, r3
 8006c28:	f000 80bf 	beq.w	8006daa <HAL_DMA_Abort+0x1d2>
 8006c2c:	3318      	adds	r3, #24
 8006c2e:	429c      	cmp	r4, r3
 8006c30:	f000 80bb 	beq.w	8006daa <HAL_DMA_Abort+0x1d2>
 8006c34:	3318      	adds	r3, #24
 8006c36:	429c      	cmp	r4, r3
 8006c38:	f000 80b7 	beq.w	8006daa <HAL_DMA_Abort+0x1d2>
 8006c3c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c40:	429c      	cmp	r4, r3
 8006c42:	f000 80b2 	beq.w	8006daa <HAL_DMA_Abort+0x1d2>
 8006c46:	3318      	adds	r3, #24
 8006c48:	429c      	cmp	r4, r3
 8006c4a:	f000 80ae 	beq.w	8006daa <HAL_DMA_Abort+0x1d2>
 8006c4e:	3318      	adds	r3, #24
 8006c50:	429c      	cmp	r4, r3
 8006c52:	f000 80aa 	beq.w	8006daa <HAL_DMA_Abort+0x1d2>
 8006c56:	3318      	adds	r3, #24
 8006c58:	429c      	cmp	r4, r3
 8006c5a:	f000 80a6 	beq.w	8006daa <HAL_DMA_Abort+0x1d2>
 8006c5e:	3318      	adds	r3, #24
 8006c60:	429c      	cmp	r4, r3
 8006c62:	f000 80a2 	beq.w	8006daa <HAL_DMA_Abort+0x1d2>
 8006c66:	3318      	adds	r3, #24
 8006c68:	429c      	cmp	r4, r3
 8006c6a:	f000 809e 	beq.w	8006daa <HAL_DMA_Abort+0x1d2>
 8006c6e:	3318      	adds	r3, #24
 8006c70:	429c      	cmp	r4, r3
 8006c72:	f000 809a 	beq.w	8006daa <HAL_DMA_Abort+0x1d2>
 8006c76:	3318      	adds	r3, #24
 8006c78:	429c      	cmp	r4, r3
 8006c7a:	f000 8096 	beq.w	8006daa <HAL_DMA_Abort+0x1d2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	f023 030e 	bic.w	r3, r3, #14
 8006c84:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c86:	4bac      	ldr	r3, [pc, #688]	; (8006f38 <HAL_DMA_Abort+0x360>)
 8006c88:	429c      	cmp	r4, r3
 8006c8a:	f000 80c7 	beq.w	8006e1c <HAL_DMA_Abort+0x244>
 8006c8e:	3314      	adds	r3, #20
 8006c90:	429c      	cmp	r4, r3
 8006c92:	f000 80c3 	beq.w	8006e1c <HAL_DMA_Abort+0x244>
 8006c96:	3314      	adds	r3, #20
 8006c98:	429c      	cmp	r4, r3
 8006c9a:	f000 80bf 	beq.w	8006e1c <HAL_DMA_Abort+0x244>
 8006c9e:	3314      	adds	r3, #20
 8006ca0:	429c      	cmp	r4, r3
 8006ca2:	f000 80bb 	beq.w	8006e1c <HAL_DMA_Abort+0x244>
 8006ca6:	3314      	adds	r3, #20
 8006ca8:	429c      	cmp	r4, r3
 8006caa:	f000 80b7 	beq.w	8006e1c <HAL_DMA_Abort+0x244>
 8006cae:	3314      	adds	r3, #20
 8006cb0:	429c      	cmp	r4, r3
 8006cb2:	f000 80b3 	beq.w	8006e1c <HAL_DMA_Abort+0x244>
 8006cb6:	3314      	adds	r3, #20
 8006cb8:	429c      	cmp	r4, r3
 8006cba:	f000 80af 	beq.w	8006e1c <HAL_DMA_Abort+0x244>
 8006cbe:	3314      	adds	r3, #20
 8006cc0:	429c      	cmp	r4, r3
 8006cc2:	f000 80ab 	beq.w	8006e1c <HAL_DMA_Abort+0x244>
    __HAL_DMA_DISABLE(hdma);
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	f023 0301 	bic.w	r3, r3, #1
 8006ccc:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	07db      	lsls	r3, r3, #31
 8006cd2:	f100 80d5 	bmi.w	8006e80 <HAL_DMA_Abort+0x2a8>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cd6:	682b      	ldr	r3, [r5, #0]
 8006cd8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8006cda:	42b3      	cmp	r3, r6
 8006cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cde:	f002 021f 	and.w	r2, r2, #31
 8006ce2:	f000 80dc 	beq.w	8006e9e <HAL_DMA_Abort+0x2c6>
 8006ce6:	4993      	ldr	r1, [pc, #588]	; (8006f34 <HAL_DMA_Abort+0x35c>)
 8006ce8:	428b      	cmp	r3, r1
 8006cea:	f000 80d8 	beq.w	8006e9e <HAL_DMA_Abort+0x2c6>
 8006cee:	3118      	adds	r1, #24
 8006cf0:	428b      	cmp	r3, r1
 8006cf2:	f000 80d4 	beq.w	8006e9e <HAL_DMA_Abort+0x2c6>
 8006cf6:	3118      	adds	r1, #24
 8006cf8:	428b      	cmp	r3, r1
 8006cfa:	f000 80d0 	beq.w	8006e9e <HAL_DMA_Abort+0x2c6>
 8006cfe:	3118      	adds	r1, #24
 8006d00:	428b      	cmp	r3, r1
 8006d02:	f000 80cc 	beq.w	8006e9e <HAL_DMA_Abort+0x2c6>
 8006d06:	3118      	adds	r1, #24
 8006d08:	428b      	cmp	r3, r1
 8006d0a:	f000 80c8 	beq.w	8006e9e <HAL_DMA_Abort+0x2c6>
 8006d0e:	3118      	adds	r1, #24
 8006d10:	428b      	cmp	r3, r1
 8006d12:	f000 80c4 	beq.w	8006e9e <HAL_DMA_Abort+0x2c6>
 8006d16:	3118      	adds	r1, #24
 8006d18:	428b      	cmp	r3, r1
 8006d1a:	f000 80c0 	beq.w	8006e9e <HAL_DMA_Abort+0x2c6>
 8006d1e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006d22:	428b      	cmp	r3, r1
 8006d24:	f000 80bb 	beq.w	8006e9e <HAL_DMA_Abort+0x2c6>
 8006d28:	3118      	adds	r1, #24
 8006d2a:	428b      	cmp	r3, r1
 8006d2c:	f000 80b7 	beq.w	8006e9e <HAL_DMA_Abort+0x2c6>
 8006d30:	3118      	adds	r1, #24
 8006d32:	428b      	cmp	r3, r1
 8006d34:	f000 80b3 	beq.w	8006e9e <HAL_DMA_Abort+0x2c6>
 8006d38:	3118      	adds	r1, #24
 8006d3a:	428b      	cmp	r3, r1
 8006d3c:	f000 80af 	beq.w	8006e9e <HAL_DMA_Abort+0x2c6>
 8006d40:	3118      	adds	r1, #24
 8006d42:	428b      	cmp	r3, r1
 8006d44:	f000 80ab 	beq.w	8006e9e <HAL_DMA_Abort+0x2c6>
 8006d48:	3118      	adds	r1, #24
 8006d4a:	428b      	cmp	r3, r1
 8006d4c:	f000 80a7 	beq.w	8006e9e <HAL_DMA_Abort+0x2c6>
 8006d50:	3118      	adds	r1, #24
 8006d52:	428b      	cmp	r3, r1
 8006d54:	f000 80a3 	beq.w	8006e9e <HAL_DMA_Abort+0x2c6>
 8006d58:	3118      	adds	r1, #24
 8006d5a:	428b      	cmp	r3, r1
 8006d5c:	f000 809f 	beq.w	8006e9e <HAL_DMA_Abort+0x2c6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d60:	2101      	movs	r1, #1
 8006d62:	fa01 f202 	lsl.w	r2, r1, r2
 8006d66:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d68:	4a73      	ldr	r2, [pc, #460]	; (8006f38 <HAL_DMA_Abort+0x360>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	f000 809d 	beq.w	8006eaa <HAL_DMA_Abort+0x2d2>
 8006d70:	3214      	adds	r2, #20
 8006d72:	4293      	cmp	r3, r2
 8006d74:	f000 8099 	beq.w	8006eaa <HAL_DMA_Abort+0x2d2>
 8006d78:	3214      	adds	r2, #20
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	f000 8095 	beq.w	8006eaa <HAL_DMA_Abort+0x2d2>
 8006d80:	3214      	adds	r2, #20
 8006d82:	4293      	cmp	r3, r2
 8006d84:	f000 8091 	beq.w	8006eaa <HAL_DMA_Abort+0x2d2>
 8006d88:	3214      	adds	r2, #20
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	f000 808d 	beq.w	8006eaa <HAL_DMA_Abort+0x2d2>
 8006d90:	3214      	adds	r2, #20
 8006d92:	4293      	cmp	r3, r2
 8006d94:	f000 8089 	beq.w	8006eaa <HAL_DMA_Abort+0x2d2>
 8006d98:	3214      	adds	r2, #20
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	f000 8085 	beq.w	8006eaa <HAL_DMA_Abort+0x2d2>
 8006da0:	3214      	adds	r2, #20
 8006da2:	4293      	cmp	r3, r2
 8006da4:	f040 8086 	bne.w	8006eb4 <HAL_DMA_Abort+0x2dc>
 8006da8:	e07f      	b.n	8006eaa <HAL_DMA_Abort+0x2d2>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006daa:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006dac:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006dae:	f023 031e 	bic.w	r3, r3, #30
 8006db2:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006db4:	6963      	ldr	r3, [r4, #20]
 8006db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dba:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006dbc:	d02e      	beq.n	8006e1c <HAL_DMA_Abort+0x244>
 8006dbe:	4b5d      	ldr	r3, [pc, #372]	; (8006f34 <HAL_DMA_Abort+0x35c>)
 8006dc0:	429c      	cmp	r4, r3
 8006dc2:	d02b      	beq.n	8006e1c <HAL_DMA_Abort+0x244>
 8006dc4:	3318      	adds	r3, #24
 8006dc6:	429c      	cmp	r4, r3
 8006dc8:	d028      	beq.n	8006e1c <HAL_DMA_Abort+0x244>
 8006dca:	3318      	adds	r3, #24
 8006dcc:	429c      	cmp	r4, r3
 8006dce:	d025      	beq.n	8006e1c <HAL_DMA_Abort+0x244>
 8006dd0:	3318      	adds	r3, #24
 8006dd2:	429c      	cmp	r4, r3
 8006dd4:	d022      	beq.n	8006e1c <HAL_DMA_Abort+0x244>
 8006dd6:	3318      	adds	r3, #24
 8006dd8:	429c      	cmp	r4, r3
 8006dda:	d01f      	beq.n	8006e1c <HAL_DMA_Abort+0x244>
 8006ddc:	3318      	adds	r3, #24
 8006dde:	429c      	cmp	r4, r3
 8006de0:	d01c      	beq.n	8006e1c <HAL_DMA_Abort+0x244>
 8006de2:	3318      	adds	r3, #24
 8006de4:	429c      	cmp	r4, r3
 8006de6:	d019      	beq.n	8006e1c <HAL_DMA_Abort+0x244>
 8006de8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006dec:	429c      	cmp	r4, r3
 8006dee:	d015      	beq.n	8006e1c <HAL_DMA_Abort+0x244>
 8006df0:	3318      	adds	r3, #24
 8006df2:	429c      	cmp	r4, r3
 8006df4:	d012      	beq.n	8006e1c <HAL_DMA_Abort+0x244>
 8006df6:	3318      	adds	r3, #24
 8006df8:	429c      	cmp	r4, r3
 8006dfa:	d00f      	beq.n	8006e1c <HAL_DMA_Abort+0x244>
 8006dfc:	3318      	adds	r3, #24
 8006dfe:	429c      	cmp	r4, r3
 8006e00:	d00c      	beq.n	8006e1c <HAL_DMA_Abort+0x244>
 8006e02:	3318      	adds	r3, #24
 8006e04:	429c      	cmp	r4, r3
 8006e06:	d009      	beq.n	8006e1c <HAL_DMA_Abort+0x244>
 8006e08:	3318      	adds	r3, #24
 8006e0a:	429c      	cmp	r4, r3
 8006e0c:	d006      	beq.n	8006e1c <HAL_DMA_Abort+0x244>
 8006e0e:	3318      	adds	r3, #24
 8006e10:	429c      	cmp	r4, r3
 8006e12:	d003      	beq.n	8006e1c <HAL_DMA_Abort+0x244>
 8006e14:	3318      	adds	r3, #24
 8006e16:	429c      	cmp	r4, r3
 8006e18:	f47f af35 	bne.w	8006c86 <HAL_DMA_Abort+0xae>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e1c:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    __HAL_DMA_DISABLE(hdma);
 8006e1e:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e20:	6813      	ldr	r3, [r2, #0]
 8006e22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e26:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8006e28:	f43f af4d 	beq.w	8006cc6 <HAL_DMA_Abort+0xee>
 8006e2c:	4b41      	ldr	r3, [pc, #260]	; (8006f34 <HAL_DMA_Abort+0x35c>)
 8006e2e:	429c      	cmp	r4, r3
 8006e30:	f43f af49 	beq.w	8006cc6 <HAL_DMA_Abort+0xee>
 8006e34:	3318      	adds	r3, #24
 8006e36:	429c      	cmp	r4, r3
 8006e38:	f43f af45 	beq.w	8006cc6 <HAL_DMA_Abort+0xee>
 8006e3c:	3318      	adds	r3, #24
 8006e3e:	429c      	cmp	r4, r3
 8006e40:	f43f af41 	beq.w	8006cc6 <HAL_DMA_Abort+0xee>
 8006e44:	3318      	adds	r3, #24
 8006e46:	429c      	cmp	r4, r3
 8006e48:	f43f af3d 	beq.w	8006cc6 <HAL_DMA_Abort+0xee>
 8006e4c:	3318      	adds	r3, #24
 8006e4e:	429c      	cmp	r4, r3
 8006e50:	f43f af39 	beq.w	8006cc6 <HAL_DMA_Abort+0xee>
 8006e54:	3318      	adds	r3, #24
 8006e56:	429c      	cmp	r4, r3
 8006e58:	f43f af35 	beq.w	8006cc6 <HAL_DMA_Abort+0xee>
 8006e5c:	3318      	adds	r3, #24
 8006e5e:	429c      	cmp	r4, r3
 8006e60:	f43f af31 	beq.w	8006cc6 <HAL_DMA_Abort+0xee>
 8006e64:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006e68:	429c      	cmp	r4, r3
 8006e6a:	f43f af2c 	beq.w	8006cc6 <HAL_DMA_Abort+0xee>
 8006e6e:	3318      	adds	r3, #24
 8006e70:	429c      	cmp	r4, r3
 8006e72:	f43f af28 	beq.w	8006cc6 <HAL_DMA_Abort+0xee>
 8006e76:	3318      	adds	r3, #24
 8006e78:	429c      	cmp	r4, r3
 8006e7a:	f43f af24 	beq.w	8006cc6 <HAL_DMA_Abort+0xee>
 8006e7e:	e722      	b.n	8006cc6 <HAL_DMA_Abort+0xee>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e80:	f7fe fb7c 	bl	800557c <HAL_GetTick>
 8006e84:	1bc0      	subs	r0, r0, r7
 8006e86:	2805      	cmp	r0, #5
 8006e88:	f67f af21 	bls.w	8006cce <HAL_DMA_Abort+0xf6>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e8c:	2320      	movs	r3, #32
 8006e8e:	656b      	str	r3, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8006e90:	2300      	movs	r3, #0
 8006e92:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8006e96:	2303      	movs	r3, #3
 8006e98:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 8006e9c:	e6ab      	b.n	8006bf6 <HAL_DMA_Abort+0x1e>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e9e:	213f      	movs	r1, #63	; 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ea0:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8006ea6:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ea8:	d10b      	bne.n	8006ec2 <HAL_DMA_Abort+0x2ea>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006eaa:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	; 0x64
 8006eae:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8006eb0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8006eb2:	bbab      	cbnz	r3, 8006f20 <HAL_DMA_Abort+0x348>
    __HAL_UNLOCK(hdma);
 8006eb4:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8006eb6:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8006eb8:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8006ebc:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8006ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ec2:	4a1c      	ldr	r2, [pc, #112]	; (8006f34 <HAL_DMA_Abort+0x35c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d0f0      	beq.n	8006eaa <HAL_DMA_Abort+0x2d2>
 8006ec8:	3218      	adds	r2, #24
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d0ed      	beq.n	8006eaa <HAL_DMA_Abort+0x2d2>
 8006ece:	3218      	adds	r2, #24
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d0ea      	beq.n	8006eaa <HAL_DMA_Abort+0x2d2>
 8006ed4:	3218      	adds	r2, #24
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d0e7      	beq.n	8006eaa <HAL_DMA_Abort+0x2d2>
 8006eda:	3218      	adds	r2, #24
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d0e4      	beq.n	8006eaa <HAL_DMA_Abort+0x2d2>
 8006ee0:	3218      	adds	r2, #24
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d0e1      	beq.n	8006eaa <HAL_DMA_Abort+0x2d2>
 8006ee6:	3218      	adds	r2, #24
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d0de      	beq.n	8006eaa <HAL_DMA_Abort+0x2d2>
 8006eec:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d0da      	beq.n	8006eaa <HAL_DMA_Abort+0x2d2>
 8006ef4:	3218      	adds	r2, #24
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d0d7      	beq.n	8006eaa <HAL_DMA_Abort+0x2d2>
 8006efa:	3218      	adds	r2, #24
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d0d4      	beq.n	8006eaa <HAL_DMA_Abort+0x2d2>
 8006f00:	3218      	adds	r2, #24
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d0d1      	beq.n	8006eaa <HAL_DMA_Abort+0x2d2>
 8006f06:	3218      	adds	r2, #24
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d0ce      	beq.n	8006eaa <HAL_DMA_Abort+0x2d2>
 8006f0c:	3218      	adds	r2, #24
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d0cb      	beq.n	8006eaa <HAL_DMA_Abort+0x2d2>
 8006f12:	3218      	adds	r2, #24
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d0c8      	beq.n	8006eaa <HAL_DMA_Abort+0x2d2>
 8006f18:	3218      	adds	r2, #24
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d0c5      	beq.n	8006eaa <HAL_DMA_Abort+0x2d2>
 8006f1e:	e723      	b.n	8006d68 <HAL_DMA_Abort+0x190>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f26:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f28:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 8006f2c:	605a      	str	r2, [r3, #4]
 8006f2e:	e7c1      	b.n	8006eb4 <HAL_DMA_Abort+0x2dc>
 8006f30:	40020010 	.word	0x40020010
 8006f34:	40020028 	.word	0x40020028
 8006f38:	58025408 	.word	0x58025408

08006f3c <HAL_DMA_Abort_IT>:
{
 8006f3c:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8006f3e:	b128      	cbz	r0, 8006f4c <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f40:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d003      	beq.n	8006f50 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f48:	2380      	movs	r3, #128	; 0x80
 8006f4a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8006f4c:	2001      	movs	r0, #1
 8006f4e:	e07f      	b.n	8007050 <HAL_DMA_Abort_IT+0x114>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f50:	6803      	ldr	r3, [r0, #0]
 8006f52:	4a50      	ldr	r2, [pc, #320]	; (8007094 <HAL_DMA_Abort_IT+0x158>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d052      	beq.n	8006ffe <HAL_DMA_Abort_IT+0xc2>
 8006f58:	494f      	ldr	r1, [pc, #316]	; (8007098 <HAL_DMA_Abort_IT+0x15c>)
 8006f5a:	428b      	cmp	r3, r1
 8006f5c:	d04f      	beq.n	8006ffe <HAL_DMA_Abort_IT+0xc2>
 8006f5e:	3118      	adds	r1, #24
 8006f60:	428b      	cmp	r3, r1
 8006f62:	d04c      	beq.n	8006ffe <HAL_DMA_Abort_IT+0xc2>
 8006f64:	3118      	adds	r1, #24
 8006f66:	428b      	cmp	r3, r1
 8006f68:	d049      	beq.n	8006ffe <HAL_DMA_Abort_IT+0xc2>
 8006f6a:	3118      	adds	r1, #24
 8006f6c:	428b      	cmp	r3, r1
 8006f6e:	d046      	beq.n	8006ffe <HAL_DMA_Abort_IT+0xc2>
 8006f70:	3118      	adds	r1, #24
 8006f72:	428b      	cmp	r3, r1
 8006f74:	d043      	beq.n	8006ffe <HAL_DMA_Abort_IT+0xc2>
 8006f76:	3118      	adds	r1, #24
 8006f78:	428b      	cmp	r3, r1
 8006f7a:	d040      	beq.n	8006ffe <HAL_DMA_Abort_IT+0xc2>
 8006f7c:	3118      	adds	r1, #24
 8006f7e:	428b      	cmp	r3, r1
 8006f80:	d03d      	beq.n	8006ffe <HAL_DMA_Abort_IT+0xc2>
 8006f82:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006f86:	428b      	cmp	r3, r1
 8006f88:	d039      	beq.n	8006ffe <HAL_DMA_Abort_IT+0xc2>
 8006f8a:	3118      	adds	r1, #24
 8006f8c:	428b      	cmp	r3, r1
 8006f8e:	d036      	beq.n	8006ffe <HAL_DMA_Abort_IT+0xc2>
 8006f90:	3118      	adds	r1, #24
 8006f92:	428b      	cmp	r3, r1
 8006f94:	d033      	beq.n	8006ffe <HAL_DMA_Abort_IT+0xc2>
 8006f96:	3118      	adds	r1, #24
 8006f98:	428b      	cmp	r3, r1
 8006f9a:	d030      	beq.n	8006ffe <HAL_DMA_Abort_IT+0xc2>
 8006f9c:	3118      	adds	r1, #24
 8006f9e:	428b      	cmp	r3, r1
 8006fa0:	d02d      	beq.n	8006ffe <HAL_DMA_Abort_IT+0xc2>
 8006fa2:	3118      	adds	r1, #24
 8006fa4:	428b      	cmp	r3, r1
 8006fa6:	d02a      	beq.n	8006ffe <HAL_DMA_Abort_IT+0xc2>
 8006fa8:	3118      	adds	r1, #24
 8006faa:	428b      	cmp	r3, r1
 8006fac:	d027      	beq.n	8006ffe <HAL_DMA_Abort_IT+0xc2>
 8006fae:	3118      	adds	r1, #24
 8006fb0:	428b      	cmp	r3, r1
 8006fb2:	d024      	beq.n	8006ffe <HAL_DMA_Abort_IT+0xc2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	f022 020e 	bic.w	r2, r2, #14
 8006fba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	f022 0201 	bic.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fc4:	4a35      	ldr	r2, [pc, #212]	; (800709c <HAL_DMA_Abort_IT+0x160>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d143      	bne.n	8007052 <HAL_DMA_Abort_IT+0x116>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006fca:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006fcc:	6813      	ldr	r3, [r2, #0]
 8006fce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fd2:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006fd4:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	; 0x58
 8006fd8:	f003 021f 	and.w	r2, r3, #31
 8006fdc:	2301      	movs	r3, #1
 8006fde:	4093      	lsls	r3, r2
 8006fe0:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fe2:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
 8006fe6:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8006fe8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d046      	beq.n	800707c <HAL_DMA_Abort_IT+0x140>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ff4:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ff6:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	; 0x70
 8006ffa:	605a      	str	r2, [r3, #4]
 8006ffc:	e03e      	b.n	800707c <HAL_DMA_Abort_IT+0x140>
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ffe:	2104      	movs	r1, #4
      __HAL_DMA_DISABLE(hdma);
 8007000:	4293      	cmp	r3, r2
      hdma->State = HAL_DMA_STATE_ABORT;
 8007002:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8007006:	d01e      	beq.n	8007046 <HAL_DMA_Abort_IT+0x10a>
 8007008:	4a23      	ldr	r2, [pc, #140]	; (8007098 <HAL_DMA_Abort_IT+0x15c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d01b      	beq.n	8007046 <HAL_DMA_Abort_IT+0x10a>
 800700e:	3218      	adds	r2, #24
 8007010:	4293      	cmp	r3, r2
 8007012:	d018      	beq.n	8007046 <HAL_DMA_Abort_IT+0x10a>
 8007014:	3218      	adds	r2, #24
 8007016:	4293      	cmp	r3, r2
 8007018:	d015      	beq.n	8007046 <HAL_DMA_Abort_IT+0x10a>
 800701a:	3218      	adds	r2, #24
 800701c:	4293      	cmp	r3, r2
 800701e:	d012      	beq.n	8007046 <HAL_DMA_Abort_IT+0x10a>
 8007020:	3218      	adds	r2, #24
 8007022:	4293      	cmp	r3, r2
 8007024:	d00f      	beq.n	8007046 <HAL_DMA_Abort_IT+0x10a>
 8007026:	3218      	adds	r2, #24
 8007028:	4293      	cmp	r3, r2
 800702a:	d00c      	beq.n	8007046 <HAL_DMA_Abort_IT+0x10a>
 800702c:	3218      	adds	r2, #24
 800702e:	4293      	cmp	r3, r2
 8007030:	d009      	beq.n	8007046 <HAL_DMA_Abort_IT+0x10a>
 8007032:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007036:	4293      	cmp	r3, r2
 8007038:	d005      	beq.n	8007046 <HAL_DMA_Abort_IT+0x10a>
 800703a:	3218      	adds	r2, #24
 800703c:	4293      	cmp	r3, r2
 800703e:	d002      	beq.n	8007046 <HAL_DMA_Abort_IT+0x10a>
 8007040:	3218      	adds	r2, #24
 8007042:	4293      	cmp	r3, r2
 8007044:	d0ff      	beq.n	8007046 <HAL_DMA_Abort_IT+0x10a>
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	f022 0201 	bic.w	r2, r2, #1
 800704c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800704e:	2000      	movs	r0, #0
}
 8007050:	bd10      	pop	{r4, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007052:	4a13      	ldr	r2, [pc, #76]	; (80070a0 <HAL_DMA_Abort_IT+0x164>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d0b8      	beq.n	8006fca <HAL_DMA_Abort_IT+0x8e>
 8007058:	3214      	adds	r2, #20
 800705a:	4293      	cmp	r3, r2
 800705c:	d0b5      	beq.n	8006fca <HAL_DMA_Abort_IT+0x8e>
 800705e:	3214      	adds	r2, #20
 8007060:	4293      	cmp	r3, r2
 8007062:	d0b2      	beq.n	8006fca <HAL_DMA_Abort_IT+0x8e>
 8007064:	3214      	adds	r2, #20
 8007066:	4293      	cmp	r3, r2
 8007068:	d0af      	beq.n	8006fca <HAL_DMA_Abort_IT+0x8e>
 800706a:	3214      	adds	r2, #20
 800706c:	4293      	cmp	r3, r2
 800706e:	d0ac      	beq.n	8006fca <HAL_DMA_Abort_IT+0x8e>
 8007070:	3214      	adds	r2, #20
 8007072:	4293      	cmp	r3, r2
 8007074:	d0a9      	beq.n	8006fca <HAL_DMA_Abort_IT+0x8e>
 8007076:	3214      	adds	r2, #20
 8007078:	4293      	cmp	r3, r2
 800707a:	d0a6      	beq.n	8006fca <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 800707c:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800707e:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8007080:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8007084:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8007086:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800708a:	b10b      	cbz	r3, 8007090 <HAL_DMA_Abort_IT+0x154>
        hdma->XferAbortCallback(hdma);
 800708c:	4798      	blx	r3
 800708e:	e7de      	b.n	800704e <HAL_DMA_Abort_IT+0x112>
  return HAL_OK;
 8007090:	4618      	mov	r0, r3
 8007092:	e7dd      	b.n	8007050 <HAL_DMA_Abort_IT+0x114>
 8007094:	40020010 	.word	0x40020010
 8007098:	40020028 	.word	0x40020028
 800709c:	58025408 	.word	0x58025408
 80070a0:	5802541c 	.word	0x5802541c

080070a4 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 80070a4:	2300      	movs	r3, #0
{
 80070a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 80070aa:	9301      	str	r3, [sp, #4]
{
 80070ac:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 80070ae:	4bb4      	ldr	r3, [pc, #720]	; (8007380 <HAL_DMA_IRQHandler+0x2dc>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80070b0:	4eb4      	ldr	r6, [pc, #720]	; (8007384 <HAL_DMA_IRQHandler+0x2e0>)
  uint32_t timeout = SystemCoreClock / 9600U;
 80070b2:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80070b4:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070b6:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80070b8:	42b3      	cmp	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 80070ba:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 80070be:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80070c2:	d047      	beq.n	8007154 <HAL_DMA_IRQHandler+0xb0>
 80070c4:	4ab0      	ldr	r2, [pc, #704]	; (8007388 <HAL_DMA_IRQHandler+0x2e4>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d044      	beq.n	8007154 <HAL_DMA_IRQHandler+0xb0>
 80070ca:	3218      	adds	r2, #24
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d041      	beq.n	8007154 <HAL_DMA_IRQHandler+0xb0>
 80070d0:	3218      	adds	r2, #24
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d03e      	beq.n	8007154 <HAL_DMA_IRQHandler+0xb0>
 80070d6:	3218      	adds	r2, #24
 80070d8:	4293      	cmp	r3, r2
 80070da:	d03b      	beq.n	8007154 <HAL_DMA_IRQHandler+0xb0>
 80070dc:	3218      	adds	r2, #24
 80070de:	4293      	cmp	r3, r2
 80070e0:	d038      	beq.n	8007154 <HAL_DMA_IRQHandler+0xb0>
 80070e2:	3218      	adds	r2, #24
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d035      	beq.n	8007154 <HAL_DMA_IRQHandler+0xb0>
 80070e8:	3218      	adds	r2, #24
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d032      	beq.n	8007154 <HAL_DMA_IRQHandler+0xb0>
 80070ee:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d02e      	beq.n	8007154 <HAL_DMA_IRQHandler+0xb0>
 80070f6:	3218      	adds	r2, #24
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d02b      	beq.n	8007154 <HAL_DMA_IRQHandler+0xb0>
 80070fc:	3218      	adds	r2, #24
 80070fe:	4293      	cmp	r3, r2
 8007100:	d028      	beq.n	8007154 <HAL_DMA_IRQHandler+0xb0>
 8007102:	3218      	adds	r2, #24
 8007104:	4293      	cmp	r3, r2
 8007106:	d025      	beq.n	8007154 <HAL_DMA_IRQHandler+0xb0>
 8007108:	3218      	adds	r2, #24
 800710a:	4293      	cmp	r3, r2
 800710c:	d022      	beq.n	8007154 <HAL_DMA_IRQHandler+0xb0>
 800710e:	3218      	adds	r2, #24
 8007110:	4293      	cmp	r3, r2
 8007112:	d01f      	beq.n	8007154 <HAL_DMA_IRQHandler+0xb0>
 8007114:	3218      	adds	r2, #24
 8007116:	4293      	cmp	r3, r2
 8007118:	d01c      	beq.n	8007154 <HAL_DMA_IRQHandler+0xb0>
 800711a:	3218      	adds	r2, #24
 800711c:	4293      	cmp	r3, r2
 800711e:	d019      	beq.n	8007154 <HAL_DMA_IRQHandler+0xb0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007120:	4a9a      	ldr	r2, [pc, #616]	; (800738c <HAL_DMA_IRQHandler+0x2e8>)
 8007122:	4293      	cmp	r3, r2
 8007124:	f040 820a 	bne.w	800753c <HAL_DMA_IRQHandler+0x498>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007128:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800712a:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800712c:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800712e:	f001 011f 	and.w	r1, r1, #31
 8007132:	4088      	lsls	r0, r1
 8007134:	ea10 0f0c 	tst.w	r0, ip
 8007138:	f000 8227 	beq.w	800758a <HAL_DMA_IRQHandler+0x4e6>
 800713c:	0756      	lsls	r6, r2, #29
 800713e:	f140 8224 	bpl.w	800758a <HAL_DMA_IRQHandler+0x4e6>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007142:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007144:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007146:	f140 8218 	bpl.w	800757a <HAL_DMA_IRQHandler+0x4d6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800714a:	03d3      	lsls	r3, r2, #15
 800714c:	f100 821b 	bmi.w	8007586 <HAL_DMA_IRQHandler+0x4e2>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007150:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007152:	e17f      	b.n	8007454 <HAL_DMA_IRQHandler+0x3b0>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007154:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007156:	2008      	movs	r0, #8
 8007158:	f002 021f 	and.w	r2, r2, #31
 800715c:	4090      	lsls	r0, r2
 800715e:	ea10 0f08 	tst.w	r0, r8
 8007162:	d03d      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x13c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007164:	42b3      	cmp	r3, r6
 8007166:	d02e      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x122>
 8007168:	4987      	ldr	r1, [pc, #540]	; (8007388 <HAL_DMA_IRQHandler+0x2e4>)
 800716a:	428b      	cmp	r3, r1
 800716c:	d02b      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x122>
 800716e:	3118      	adds	r1, #24
 8007170:	428b      	cmp	r3, r1
 8007172:	d028      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x122>
 8007174:	3118      	adds	r1, #24
 8007176:	428b      	cmp	r3, r1
 8007178:	d025      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x122>
 800717a:	3118      	adds	r1, #24
 800717c:	428b      	cmp	r3, r1
 800717e:	d022      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x122>
 8007180:	3118      	adds	r1, #24
 8007182:	428b      	cmp	r3, r1
 8007184:	d01f      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x122>
 8007186:	3118      	adds	r1, #24
 8007188:	428b      	cmp	r3, r1
 800718a:	d01c      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x122>
 800718c:	3118      	adds	r1, #24
 800718e:	428b      	cmp	r3, r1
 8007190:	d019      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x122>
 8007192:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007196:	428b      	cmp	r3, r1
 8007198:	d015      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x122>
 800719a:	3118      	adds	r1, #24
 800719c:	428b      	cmp	r3, r1
 800719e:	d012      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x122>
 80071a0:	3118      	adds	r1, #24
 80071a2:	428b      	cmp	r3, r1
 80071a4:	d00f      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x122>
 80071a6:	3118      	adds	r1, #24
 80071a8:	428b      	cmp	r3, r1
 80071aa:	d00c      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x122>
 80071ac:	3118      	adds	r1, #24
 80071ae:	428b      	cmp	r3, r1
 80071b0:	d009      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x122>
 80071b2:	3118      	adds	r1, #24
 80071b4:	428b      	cmp	r3, r1
 80071b6:	d006      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x122>
 80071b8:	3118      	adds	r1, #24
 80071ba:	428b      	cmp	r3, r1
 80071bc:	d003      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x122>
 80071be:	3118      	adds	r1, #24
 80071c0:	428b      	cmp	r3, r1
 80071c2:	f040 80c3 	bne.w	800734c <HAL_DMA_IRQHandler+0x2a8>
 80071c6:	6819      	ldr	r1, [r3, #0]
 80071c8:	f3c1 0180 	ubfx	r1, r1, #2, #1
 80071cc:	b141      	cbz	r1, 80071e0 <HAL_DMA_IRQHandler+0x13c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80071ce:	6819      	ldr	r1, [r3, #0]
 80071d0:	f021 0104 	bic.w	r1, r1, #4
 80071d4:	6019      	str	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80071d6:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80071d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80071da:	f041 0101 	orr.w	r1, r1, #1
 80071de:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071e0:	fa28 f102 	lsr.w	r1, r8, r2
 80071e4:	07c8      	lsls	r0, r1, #31
 80071e6:	d534      	bpl.n	8007252 <HAL_DMA_IRQHandler+0x1ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80071e8:	42b3      	cmp	r3, r6
 80071ea:	d02e      	beq.n	800724a <HAL_DMA_IRQHandler+0x1a6>
 80071ec:	4966      	ldr	r1, [pc, #408]	; (8007388 <HAL_DMA_IRQHandler+0x2e4>)
 80071ee:	428b      	cmp	r3, r1
 80071f0:	d02b      	beq.n	800724a <HAL_DMA_IRQHandler+0x1a6>
 80071f2:	3118      	adds	r1, #24
 80071f4:	428b      	cmp	r3, r1
 80071f6:	d028      	beq.n	800724a <HAL_DMA_IRQHandler+0x1a6>
 80071f8:	3118      	adds	r1, #24
 80071fa:	428b      	cmp	r3, r1
 80071fc:	d025      	beq.n	800724a <HAL_DMA_IRQHandler+0x1a6>
 80071fe:	3118      	adds	r1, #24
 8007200:	428b      	cmp	r3, r1
 8007202:	d022      	beq.n	800724a <HAL_DMA_IRQHandler+0x1a6>
 8007204:	3118      	adds	r1, #24
 8007206:	428b      	cmp	r3, r1
 8007208:	d01f      	beq.n	800724a <HAL_DMA_IRQHandler+0x1a6>
 800720a:	3118      	adds	r1, #24
 800720c:	428b      	cmp	r3, r1
 800720e:	d01c      	beq.n	800724a <HAL_DMA_IRQHandler+0x1a6>
 8007210:	3118      	adds	r1, #24
 8007212:	428b      	cmp	r3, r1
 8007214:	d019      	beq.n	800724a <HAL_DMA_IRQHandler+0x1a6>
 8007216:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800721a:	428b      	cmp	r3, r1
 800721c:	d015      	beq.n	800724a <HAL_DMA_IRQHandler+0x1a6>
 800721e:	3118      	adds	r1, #24
 8007220:	428b      	cmp	r3, r1
 8007222:	d012      	beq.n	800724a <HAL_DMA_IRQHandler+0x1a6>
 8007224:	3118      	adds	r1, #24
 8007226:	428b      	cmp	r3, r1
 8007228:	d00f      	beq.n	800724a <HAL_DMA_IRQHandler+0x1a6>
 800722a:	3118      	adds	r1, #24
 800722c:	428b      	cmp	r3, r1
 800722e:	d00c      	beq.n	800724a <HAL_DMA_IRQHandler+0x1a6>
 8007230:	3118      	adds	r1, #24
 8007232:	428b      	cmp	r3, r1
 8007234:	d009      	beq.n	800724a <HAL_DMA_IRQHandler+0x1a6>
 8007236:	3118      	adds	r1, #24
 8007238:	428b      	cmp	r3, r1
 800723a:	d006      	beq.n	800724a <HAL_DMA_IRQHandler+0x1a6>
 800723c:	3118      	adds	r1, #24
 800723e:	428b      	cmp	r3, r1
 8007240:	d003      	beq.n	800724a <HAL_DMA_IRQHandler+0x1a6>
 8007242:	3118      	adds	r1, #24
 8007244:	428b      	cmp	r3, r1
 8007246:	f040 8085 	bne.w	8007354 <HAL_DMA_IRQHandler+0x2b0>
 800724a:	6959      	ldr	r1, [r3, #20]
 800724c:	0609      	lsls	r1, r1, #24
 800724e:	f100 8083 	bmi.w	8007358 <HAL_DMA_IRQHandler+0x2b4>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007252:	2104      	movs	r1, #4
 8007254:	4091      	lsls	r1, r2
 8007256:	ea11 0f08 	tst.w	r1, r8
 800725a:	d032      	beq.n	80072c2 <HAL_DMA_IRQHandler+0x21e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800725c:	42b3      	cmp	r3, r6
 800725e:	d02d      	beq.n	80072bc <HAL_DMA_IRQHandler+0x218>
 8007260:	4849      	ldr	r0, [pc, #292]	; (8007388 <HAL_DMA_IRQHandler+0x2e4>)
 8007262:	4283      	cmp	r3, r0
 8007264:	d02a      	beq.n	80072bc <HAL_DMA_IRQHandler+0x218>
 8007266:	3018      	adds	r0, #24
 8007268:	4283      	cmp	r3, r0
 800726a:	d027      	beq.n	80072bc <HAL_DMA_IRQHandler+0x218>
 800726c:	3018      	adds	r0, #24
 800726e:	4283      	cmp	r3, r0
 8007270:	d024      	beq.n	80072bc <HAL_DMA_IRQHandler+0x218>
 8007272:	3018      	adds	r0, #24
 8007274:	4283      	cmp	r3, r0
 8007276:	d021      	beq.n	80072bc <HAL_DMA_IRQHandler+0x218>
 8007278:	3018      	adds	r0, #24
 800727a:	4283      	cmp	r3, r0
 800727c:	d01e      	beq.n	80072bc <HAL_DMA_IRQHandler+0x218>
 800727e:	3018      	adds	r0, #24
 8007280:	4283      	cmp	r3, r0
 8007282:	d01b      	beq.n	80072bc <HAL_DMA_IRQHandler+0x218>
 8007284:	3018      	adds	r0, #24
 8007286:	4283      	cmp	r3, r0
 8007288:	d018      	beq.n	80072bc <HAL_DMA_IRQHandler+0x218>
 800728a:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800728e:	4283      	cmp	r3, r0
 8007290:	d014      	beq.n	80072bc <HAL_DMA_IRQHandler+0x218>
 8007292:	3018      	adds	r0, #24
 8007294:	4283      	cmp	r3, r0
 8007296:	d011      	beq.n	80072bc <HAL_DMA_IRQHandler+0x218>
 8007298:	3018      	adds	r0, #24
 800729a:	4283      	cmp	r3, r0
 800729c:	d00e      	beq.n	80072bc <HAL_DMA_IRQHandler+0x218>
 800729e:	3018      	adds	r0, #24
 80072a0:	4283      	cmp	r3, r0
 80072a2:	d00b      	beq.n	80072bc <HAL_DMA_IRQHandler+0x218>
 80072a4:	3018      	adds	r0, #24
 80072a6:	4283      	cmp	r3, r0
 80072a8:	d008      	beq.n	80072bc <HAL_DMA_IRQHandler+0x218>
 80072aa:	3018      	adds	r0, #24
 80072ac:	4283      	cmp	r3, r0
 80072ae:	d005      	beq.n	80072bc <HAL_DMA_IRQHandler+0x218>
 80072b0:	3018      	adds	r0, #24
 80072b2:	4283      	cmp	r3, r0
 80072b4:	d002      	beq.n	80072bc <HAL_DMA_IRQHandler+0x218>
 80072b6:	3018      	adds	r0, #24
 80072b8:	4283      	cmp	r3, r0
 80072ba:	d155      	bne.n	8007368 <HAL_DMA_IRQHandler+0x2c4>
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	0780      	lsls	r0, r0, #30
 80072c0:	d454      	bmi.n	800736c <HAL_DMA_IRQHandler+0x2c8>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072c2:	2110      	movs	r1, #16
 80072c4:	fa01 f202 	lsl.w	r2, r1, r2
 80072c8:	ea12 0f08 	tst.w	r2, r8
 80072cc:	d064      	beq.n	8007398 <HAL_DMA_IRQHandler+0x2f4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80072ce:	42b3      	cmp	r3, r6
 80072d0:	d02d      	beq.n	800732e <HAL_DMA_IRQHandler+0x28a>
 80072d2:	492d      	ldr	r1, [pc, #180]	; (8007388 <HAL_DMA_IRQHandler+0x2e4>)
 80072d4:	428b      	cmp	r3, r1
 80072d6:	d02a      	beq.n	800732e <HAL_DMA_IRQHandler+0x28a>
 80072d8:	3118      	adds	r1, #24
 80072da:	428b      	cmp	r3, r1
 80072dc:	d027      	beq.n	800732e <HAL_DMA_IRQHandler+0x28a>
 80072de:	3118      	adds	r1, #24
 80072e0:	428b      	cmp	r3, r1
 80072e2:	d024      	beq.n	800732e <HAL_DMA_IRQHandler+0x28a>
 80072e4:	3118      	adds	r1, #24
 80072e6:	428b      	cmp	r3, r1
 80072e8:	d021      	beq.n	800732e <HAL_DMA_IRQHandler+0x28a>
 80072ea:	3118      	adds	r1, #24
 80072ec:	428b      	cmp	r3, r1
 80072ee:	d01e      	beq.n	800732e <HAL_DMA_IRQHandler+0x28a>
 80072f0:	3118      	adds	r1, #24
 80072f2:	428b      	cmp	r3, r1
 80072f4:	d01b      	beq.n	800732e <HAL_DMA_IRQHandler+0x28a>
 80072f6:	3118      	adds	r1, #24
 80072f8:	428b      	cmp	r3, r1
 80072fa:	d018      	beq.n	800732e <HAL_DMA_IRQHandler+0x28a>
 80072fc:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007300:	428b      	cmp	r3, r1
 8007302:	d014      	beq.n	800732e <HAL_DMA_IRQHandler+0x28a>
 8007304:	3118      	adds	r1, #24
 8007306:	428b      	cmp	r3, r1
 8007308:	d011      	beq.n	800732e <HAL_DMA_IRQHandler+0x28a>
 800730a:	3118      	adds	r1, #24
 800730c:	428b      	cmp	r3, r1
 800730e:	d00e      	beq.n	800732e <HAL_DMA_IRQHandler+0x28a>
 8007310:	3118      	adds	r1, #24
 8007312:	428b      	cmp	r3, r1
 8007314:	d00b      	beq.n	800732e <HAL_DMA_IRQHandler+0x28a>
 8007316:	3118      	adds	r1, #24
 8007318:	428b      	cmp	r3, r1
 800731a:	d008      	beq.n	800732e <HAL_DMA_IRQHandler+0x28a>
 800731c:	3118      	adds	r1, #24
 800731e:	428b      	cmp	r3, r1
 8007320:	d005      	beq.n	800732e <HAL_DMA_IRQHandler+0x28a>
 8007322:	3118      	adds	r1, #24
 8007324:	428b      	cmp	r3, r1
 8007326:	d002      	beq.n	800732e <HAL_DMA_IRQHandler+0x28a>
 8007328:	3118      	adds	r1, #24
 800732a:	428b      	cmp	r3, r1
 800732c:	d124      	bne.n	8007378 <HAL_DMA_IRQHandler+0x2d4>
 800732e:	6819      	ldr	r1, [r3, #0]
 8007330:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8007334:	2900      	cmp	r1, #0
 8007336:	d02f      	beq.n	8007398 <HAL_DMA_IRQHandler+0x2f4>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007338:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	0350      	lsls	r0, r2, #13
 800733e:	f140 8091 	bpl.w	8007464 <HAL_DMA_IRQHandler+0x3c0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	0319      	lsls	r1, r3, #12
 8007346:	d423      	bmi.n	8007390 <HAL_DMA_IRQHandler+0x2ec>
          if(hdma->XferHalfCpltCallback != NULL)
 8007348:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800734a:	e022      	b.n	8007392 <HAL_DMA_IRQHandler+0x2ee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800734c:	6819      	ldr	r1, [r3, #0]
 800734e:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8007352:	e73b      	b.n	80071cc <HAL_DMA_IRQHandler+0x128>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007354:	6819      	ldr	r1, [r3, #0]
 8007356:	e77c      	b.n	8007252 <HAL_DMA_IRQHandler+0x1ae>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007358:	2101      	movs	r1, #1
 800735a:	4091      	lsls	r1, r2
 800735c:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800735e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007360:	f041 0102 	orr.w	r1, r1, #2
 8007364:	6561      	str	r1, [r4, #84]	; 0x54
 8007366:	e774      	b.n	8007252 <HAL_DMA_IRQHandler+0x1ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007368:	6819      	ldr	r1, [r3, #0]
 800736a:	e7aa      	b.n	80072c2 <HAL_DMA_IRQHandler+0x21e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800736c:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800736e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007370:	f041 0104 	orr.w	r1, r1, #4
 8007374:	6561      	str	r1, [r4, #84]	; 0x54
 8007376:	e7a4      	b.n	80072c2 <HAL_DMA_IRQHandler+0x21e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007378:	6819      	ldr	r1, [r3, #0]
 800737a:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800737e:	e7d9      	b.n	8007334 <HAL_DMA_IRQHandler+0x290>
 8007380:	24000000 	.word	0x24000000
 8007384:	40020010 	.word	0x40020010
 8007388:	40020028 	.word	0x40020028
 800738c:	58025408 	.word	0x58025408
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007390:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8007392:	b10b      	cbz	r3, 8007398 <HAL_DMA_IRQHandler+0x2f4>
            hdma->XferHalfCpltCallback(hdma);
 8007394:	4620      	mov	r0, r4
 8007396:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007398:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800739a:	2020      	movs	r0, #32
 800739c:	f001 011f 	and.w	r1, r1, #31
 80073a0:	4088      	lsls	r0, r1
 80073a2:	ea10 0f08 	tst.w	r0, r8
 80073a6:	d073      	beq.n	8007490 <HAL_DMA_IRQHandler+0x3ec>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	42b3      	cmp	r3, r6
 80073ac:	d02d      	beq.n	800740a <HAL_DMA_IRQHandler+0x366>
 80073ae:	4a8f      	ldr	r2, [pc, #572]	; (80075ec <HAL_DMA_IRQHandler+0x548>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d02a      	beq.n	800740a <HAL_DMA_IRQHandler+0x366>
 80073b4:	3218      	adds	r2, #24
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d027      	beq.n	800740a <HAL_DMA_IRQHandler+0x366>
 80073ba:	3218      	adds	r2, #24
 80073bc:	4293      	cmp	r3, r2
 80073be:	d024      	beq.n	800740a <HAL_DMA_IRQHandler+0x366>
 80073c0:	3218      	adds	r2, #24
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d021      	beq.n	800740a <HAL_DMA_IRQHandler+0x366>
 80073c6:	3218      	adds	r2, #24
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d01e      	beq.n	800740a <HAL_DMA_IRQHandler+0x366>
 80073cc:	3218      	adds	r2, #24
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d01b      	beq.n	800740a <HAL_DMA_IRQHandler+0x366>
 80073d2:	3218      	adds	r2, #24
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d018      	beq.n	800740a <HAL_DMA_IRQHandler+0x366>
 80073d8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80073dc:	4293      	cmp	r3, r2
 80073de:	d014      	beq.n	800740a <HAL_DMA_IRQHandler+0x366>
 80073e0:	3218      	adds	r2, #24
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d011      	beq.n	800740a <HAL_DMA_IRQHandler+0x366>
 80073e6:	3218      	adds	r2, #24
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00e      	beq.n	800740a <HAL_DMA_IRQHandler+0x366>
 80073ec:	3218      	adds	r2, #24
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d00b      	beq.n	800740a <HAL_DMA_IRQHandler+0x366>
 80073f2:	3218      	adds	r2, #24
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d008      	beq.n	800740a <HAL_DMA_IRQHandler+0x366>
 80073f8:	3218      	adds	r2, #24
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d005      	beq.n	800740a <HAL_DMA_IRQHandler+0x366>
 80073fe:	3218      	adds	r2, #24
 8007400:	4293      	cmp	r3, r2
 8007402:	d002      	beq.n	800740a <HAL_DMA_IRQHandler+0x366>
 8007404:	3218      	adds	r2, #24
 8007406:	4293      	cmp	r3, r2
 8007408:	d135      	bne.n	8007476 <HAL_DMA_IRQHandler+0x3d2>
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8007410:	2a00      	cmp	r2, #0
 8007412:	d03d      	beq.n	8007490 <HAL_DMA_IRQHandler+0x3ec>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007414:	60a8      	str	r0, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007416:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800741a:	2a04      	cmp	r2, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800741c:	681a      	ldr	r2, [r3, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800741e:	d12e      	bne.n	800747e <HAL_DMA_IRQHandler+0x3da>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007420:	f022 0216 	bic.w	r2, r2, #22
 8007424:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007426:	695a      	ldr	r2, [r3, #20]
 8007428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800742c:	615a      	str	r2, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800742e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007430:	b90a      	cbnz	r2, 8007436 <HAL_DMA_IRQHandler+0x392>
 8007432:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007434:	b11a      	cbz	r2, 800743e <HAL_DMA_IRQHandler+0x39a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	f022 0208 	bic.w	r2, r2, #8
 800743c:	601a      	str	r2, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800743e:	233f      	movs	r3, #63	; 0x3f
 8007440:	fa03 f101 	lsl.w	r1, r3, r1
          __HAL_UNLOCK(hdma);
 8007444:	2300      	movs	r3, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007446:	60a9      	str	r1, [r5, #8]
          __HAL_UNLOCK(hdma);
 8007448:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800744c:	2301      	movs	r3, #1
 800744e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8007452:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (hdma->XferErrorCallback != NULL)
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 808d 	beq.w	8007574 <HAL_DMA_IRQHandler+0x4d0>
        hdma->XferErrorCallback(hdma);
 800745a:	4620      	mov	r0, r4
}
 800745c:	b002      	add	sp, #8
 800745e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8007462:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	05d2      	lsls	r2, r2, #23
 8007468:	f53f af6e 	bmi.w	8007348 <HAL_DMA_IRQHandler+0x2a4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	f022 0208 	bic.w	r2, r2, #8
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	e768      	b.n	8007348 <HAL_DMA_IRQHandler+0x2a4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800747c:	e7c8      	b.n	8007410 <HAL_DMA_IRQHandler+0x36c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800747e:	0355      	lsls	r5, r2, #13
 8007480:	d54d      	bpl.n	800751e <HAL_DMA_IRQHandler+0x47a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	0318      	lsls	r0, r3, #12
 8007486:	d457      	bmi.n	8007538 <HAL_DMA_IRQHandler+0x494>
            if(hdma->XferM1CpltCallback != NULL)
 8007488:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if(hdma->XferCpltCallback != NULL)
 800748a:	b10b      	cbz	r3, 8007490 <HAL_DMA_IRQHandler+0x3ec>
            hdma->XferCpltCallback(hdma);
 800748c:	4620      	mov	r0, r4
 800748e:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007490:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007492:	2b00      	cmp	r3, #0
 8007494:	d06e      	beq.n	8007574 <HAL_DMA_IRQHandler+0x4d0>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007496:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007498:	07d9      	lsls	r1, r3, #31
 800749a:	d53e      	bpl.n	800751a <HAL_DMA_IRQHandler+0x476>
        hdma->State = HAL_DMA_STATE_ABORT;
 800749c:	2304      	movs	r3, #4
 800749e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	42b3      	cmp	r3, r6
 80074a6:	d01e      	beq.n	80074e6 <HAL_DMA_IRQHandler+0x442>
 80074a8:	4a50      	ldr	r2, [pc, #320]	; (80075ec <HAL_DMA_IRQHandler+0x548>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d01b      	beq.n	80074e6 <HAL_DMA_IRQHandler+0x442>
 80074ae:	3218      	adds	r2, #24
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d018      	beq.n	80074e6 <HAL_DMA_IRQHandler+0x442>
 80074b4:	3218      	adds	r2, #24
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d015      	beq.n	80074e6 <HAL_DMA_IRQHandler+0x442>
 80074ba:	3218      	adds	r2, #24
 80074bc:	4293      	cmp	r3, r2
 80074be:	d012      	beq.n	80074e6 <HAL_DMA_IRQHandler+0x442>
 80074c0:	3218      	adds	r2, #24
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00f      	beq.n	80074e6 <HAL_DMA_IRQHandler+0x442>
 80074c6:	3218      	adds	r2, #24
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00c      	beq.n	80074e6 <HAL_DMA_IRQHandler+0x442>
 80074cc:	3218      	adds	r2, #24
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d009      	beq.n	80074e6 <HAL_DMA_IRQHandler+0x442>
 80074d2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d005      	beq.n	80074e6 <HAL_DMA_IRQHandler+0x442>
 80074da:	3218      	adds	r2, #24
 80074dc:	4293      	cmp	r3, r2
 80074de:	d002      	beq.n	80074e6 <HAL_DMA_IRQHandler+0x442>
 80074e0:	3218      	adds	r2, #24
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d0ff      	beq.n	80074e6 <HAL_DMA_IRQHandler+0x442>
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	f022 0201 	bic.w	r2, r2, #1
 80074ec:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80074ee:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80074f2:	fbb7 f7f2 	udiv	r7, r7, r2
          if (++count > timeout)
 80074f6:	9a01      	ldr	r2, [sp, #4]
 80074f8:	3201      	adds	r2, #1
 80074fa:	42ba      	cmp	r2, r7
 80074fc:	9201      	str	r2, [sp, #4]
 80074fe:	d802      	bhi.n	8007506 <HAL_DMA_IRQHandler+0x462>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	07d2      	lsls	r2, r2, #31
 8007504:	d4f7      	bmi.n	80074f6 <HAL_DMA_IRQHandler+0x452>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007506:	681b      	ldr	r3, [r3, #0]
        __HAL_UNLOCK(hdma);
 8007508:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800750a:	07df      	lsls	r7, r3, #31
        __HAL_UNLOCK(hdma);
 800750c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 8007510:	bf4c      	ite	mi
 8007512:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8007514:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 8007516:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800751a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800751c:	e79a      	b.n	8007454 <HAL_DMA_IRQHandler+0x3b0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8007524:	d108      	bne.n	8007538 <HAL_DMA_IRQHandler+0x494>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007526:	6819      	ldr	r1, [r3, #0]
 8007528:	f021 0110 	bic.w	r1, r1, #16
 800752c:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800752e:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8007530:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8007534:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8007538:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800753a:	e7a6      	b.n	800748a <HAL_DMA_IRQHandler+0x3e6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800753c:	4a2c      	ldr	r2, [pc, #176]	; (80075f0 <HAL_DMA_IRQHandler+0x54c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	f43f adf2 	beq.w	8007128 <HAL_DMA_IRQHandler+0x84>
 8007544:	3214      	adds	r2, #20
 8007546:	4293      	cmp	r3, r2
 8007548:	f43f adee 	beq.w	8007128 <HAL_DMA_IRQHandler+0x84>
 800754c:	3214      	adds	r2, #20
 800754e:	4293      	cmp	r3, r2
 8007550:	f43f adea 	beq.w	8007128 <HAL_DMA_IRQHandler+0x84>
 8007554:	3214      	adds	r2, #20
 8007556:	4293      	cmp	r3, r2
 8007558:	f43f ade6 	beq.w	8007128 <HAL_DMA_IRQHandler+0x84>
 800755c:	3214      	adds	r2, #20
 800755e:	4293      	cmp	r3, r2
 8007560:	f43f ade2 	beq.w	8007128 <HAL_DMA_IRQHandler+0x84>
 8007564:	3214      	adds	r2, #20
 8007566:	4293      	cmp	r3, r2
 8007568:	f43f adde 	beq.w	8007128 <HAL_DMA_IRQHandler+0x84>
 800756c:	3214      	adds	r2, #20
 800756e:	4293      	cmp	r3, r2
 8007570:	f43f adda 	beq.w	8007128 <HAL_DMA_IRQHandler+0x84>
}
 8007574:	b002      	add	sp, #8
 8007576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800757a:	0697      	lsls	r7, r2, #26
 800757c:	d403      	bmi.n	8007586 <HAL_DMA_IRQHandler+0x4e2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	f022 0204 	bic.w	r2, r2, #4
 8007584:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8007586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007588:	e764      	b.n	8007454 <HAL_DMA_IRQHandler+0x3b0>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800758a:	2002      	movs	r0, #2
 800758c:	4088      	lsls	r0, r1
 800758e:	ea10 0f0c 	tst.w	r0, ip
 8007592:	d016      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x51e>
 8007594:	0796      	lsls	r6, r2, #30
 8007596:	d514      	bpl.n	80075c2 <HAL_DMA_IRQHandler+0x51e>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007598:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800759a:	0410      	lsls	r0, r2, #16
 800759c:	d503      	bpl.n	80075a6 <HAL_DMA_IRQHandler+0x502>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800759e:	03d1      	lsls	r1, r2, #15
 80075a0:	d40d      	bmi.n	80075be <HAL_DMA_IRQHandler+0x51a>
          if(hdma->XferM1CpltCallback != NULL)
 80075a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80075a4:	e756      	b.n	8007454 <HAL_DMA_IRQHandler+0x3b0>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80075a6:	f012 0220 	ands.w	r2, r2, #32
 80075aa:	d108      	bne.n	80075be <HAL_DMA_IRQHandler+0x51a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80075ac:	6819      	ldr	r1, [r3, #0]
 80075ae:	f021 010a 	bic.w	r1, r1, #10
 80075b2:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80075b4:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80075b6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80075ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80075be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80075c0:	e748      	b.n	8007454 <HAL_DMA_IRQHandler+0x3b0>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80075c2:	2008      	movs	r0, #8
 80075c4:	4088      	lsls	r0, r1
 80075c6:	ea10 0f0c 	tst.w	r0, ip
 80075ca:	d0d3      	beq.n	8007574 <HAL_DMA_IRQHandler+0x4d0>
 80075cc:	0712      	lsls	r2, r2, #28
 80075ce:	d5d1      	bpl.n	8007574 <HAL_DMA_IRQHandler+0x4d0>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	f022 020e 	bic.w	r2, r2, #14
 80075d6:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075d8:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80075da:	2200      	movs	r2, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075dc:	fa03 f101 	lsl.w	r1, r3, r1
 80075e0:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80075e2:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 80075e4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 80075e8:	e795      	b.n	8007516 <HAL_DMA_IRQHandler+0x472>
 80075ea:	bf00      	nop
 80075ec:	40020028 	.word	0x40020028
 80075f0:	5802541c 	.word	0x5802541c

080075f4 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80075f4:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80075f6:	4770      	bx	lr

080075f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80075fc:	680b      	ldr	r3, [r1, #0]
{
 80075fe:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007600:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80077c4 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007604:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007608:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 800760a:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 800760c:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80077c8 <HAL_GPIO_Init+0x1d0>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007610:	9a01      	ldr	r2, [sp, #4]
 8007612:	40da      	lsrs	r2, r3
 8007614:	d102      	bne.n	800761c <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 8007616:	b005      	add	sp, #20
 8007618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800761c:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 800761e:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007620:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8007622:	ea17 0502 	ands.w	r5, r7, r2
 8007626:	f000 80b6 	beq.w	8007796 <HAL_GPIO_Init+0x19e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800762a:	684a      	ldr	r2, [r1, #4]
 800762c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8007630:	2403      	movs	r4, #3
 8007632:	f022 0a10 	bic.w	sl, r2, #16
 8007636:	fa04 f40e 	lsl.w	r4, r4, lr
 800763a:	f10a 36ff 	add.w	r6, sl, #4294967295
 800763e:	43e4      	mvns	r4, r4
 8007640:	2e01      	cmp	r6, #1
 8007642:	d810      	bhi.n	8007666 <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8007644:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007646:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800764a:	68ce      	ldr	r6, [r1, #12]
 800764c:	fa06 f60e 	lsl.w	r6, r6, lr
 8007650:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8007654:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8007656:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007658:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800765c:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8007660:	409e      	lsls	r6, r3
 8007662:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8007664:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8007666:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007668:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800766c:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800766e:	ea07 0704 	and.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007672:	fa06 f60e 	lsl.w	r6, r6, lr
 8007676:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 800767a:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800767c:	d114      	bne.n	80076a8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 800767e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007682:	f003 0b07 	and.w	fp, r3, #7
 8007686:	270f      	movs	r7, #15
 8007688:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800768c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8007690:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007694:	fa07 f70b 	lsl.w	r7, r7, fp
 8007698:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800769c:	690e      	ldr	r6, [r1, #16]
 800769e:	fa06 f60b 	lsl.w	r6, r6, fp
 80076a2:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80076a4:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 80076a8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80076aa:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076ac:	f002 0603 	and.w	r6, r2, #3
 80076b0:	fa06 fe0e 	lsl.w	lr, r6, lr
 80076b4:	ea4e 0404 	orr.w	r4, lr, r4
      GPIOx->MODER = temp;
 80076b8:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80076ba:	00d4      	lsls	r4, r2, #3
 80076bc:	d56b      	bpl.n	8007796 <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076be:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 80076c2:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80076c6:	f003 0703 	and.w	r7, r3, #3
 80076ca:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076ce:	f044 0402 	orr.w	r4, r4, #2
 80076d2:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80076d6:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076d8:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 80076dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80076e0:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 80076e4:	f004 0402 	and.w	r4, r4, #2
 80076e8:	9403      	str	r4, [sp, #12]
 80076ea:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80076ec:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 80076f0:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80076f4:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80076f8:	4c31      	ldr	r4, [pc, #196]	; (80077c0 <HAL_GPIO_Init+0x1c8>)
 80076fa:	42a0      	cmp	r0, r4
 80076fc:	d04d      	beq.n	800779a <HAL_GPIO_Init+0x1a2>
 80076fe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007702:	42a0      	cmp	r0, r4
 8007704:	d04b      	beq.n	800779e <HAL_GPIO_Init+0x1a6>
 8007706:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800770a:	42a0      	cmp	r0, r4
 800770c:	d049      	beq.n	80077a2 <HAL_GPIO_Init+0x1aa>
 800770e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007712:	42a0      	cmp	r0, r4
 8007714:	d047      	beq.n	80077a6 <HAL_GPIO_Init+0x1ae>
 8007716:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800771a:	42a0      	cmp	r0, r4
 800771c:	d045      	beq.n	80077aa <HAL_GPIO_Init+0x1b2>
 800771e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007722:	42a0      	cmp	r0, r4
 8007724:	d043      	beq.n	80077ae <HAL_GPIO_Init+0x1b6>
 8007726:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800772a:	42a0      	cmp	r0, r4
 800772c:	d041      	beq.n	80077b2 <HAL_GPIO_Init+0x1ba>
 800772e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007732:	42a0      	cmp	r0, r4
 8007734:	d03f      	beq.n	80077b6 <HAL_GPIO_Init+0x1be>
 8007736:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800773a:	42a0      	cmp	r0, r4
 800773c:	d03d      	beq.n	80077ba <HAL_GPIO_Init+0x1c2>
 800773e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007742:	42a0      	cmp	r0, r4
 8007744:	bf14      	ite	ne
 8007746:	240a      	movne	r4, #10
 8007748:	2409      	moveq	r4, #9
 800774a:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800774c:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800774e:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007752:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8007754:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 8007758:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 800775c:	bf54      	ite	pl
 800775e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8007760:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007762:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8007764:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8007768:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 800776c:	bf54      	ite	pl
 800776e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8007770:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007772:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 8007774:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8007778:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 800777c:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8007780:	bf54      	ite	pl
 8007782:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8007784:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007786:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8007788:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 800778a:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 800778c:	bf54      	ite	pl
 800778e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8007790:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 8007792:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 8007796:	3301      	adds	r3, #1
 8007798:	e73a      	b.n	8007610 <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800779a:	2400      	movs	r4, #0
 800779c:	e7d5      	b.n	800774a <HAL_GPIO_Init+0x152>
 800779e:	2401      	movs	r4, #1
 80077a0:	e7d3      	b.n	800774a <HAL_GPIO_Init+0x152>
 80077a2:	2402      	movs	r4, #2
 80077a4:	e7d1      	b.n	800774a <HAL_GPIO_Init+0x152>
 80077a6:	2403      	movs	r4, #3
 80077a8:	e7cf      	b.n	800774a <HAL_GPIO_Init+0x152>
 80077aa:	2404      	movs	r4, #4
 80077ac:	e7cd      	b.n	800774a <HAL_GPIO_Init+0x152>
 80077ae:	2405      	movs	r4, #5
 80077b0:	e7cb      	b.n	800774a <HAL_GPIO_Init+0x152>
 80077b2:	2406      	movs	r4, #6
 80077b4:	e7c9      	b.n	800774a <HAL_GPIO_Init+0x152>
 80077b6:	2407      	movs	r4, #7
 80077b8:	e7c7      	b.n	800774a <HAL_GPIO_Init+0x152>
 80077ba:	2408      	movs	r4, #8
 80077bc:	e7c5      	b.n	800774a <HAL_GPIO_Init+0x152>
 80077be:	bf00      	nop
 80077c0:	58020000 	.word	0x58020000
 80077c4:	58024400 	.word	0x58024400
 80077c8:	58000080 	.word	0x58000080

080077cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80077cc:	6903      	ldr	r3, [r0, #16]
 80077ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80077d0:	bf14      	ite	ne
 80077d2:	2001      	movne	r0, #1
 80077d4:	2000      	moveq	r0, #0
 80077d6:	4770      	bx	lr

080077d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077d8:	b10a      	cbz	r2, 80077de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80077da:	6181      	str	r1, [r0, #24]
  }
}
 80077dc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80077de:	0409      	lsls	r1, r1, #16
 80077e0:	e7fb      	b.n	80077da <HAL_GPIO_WritePin+0x2>

080077e2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80077e2:	6943      	ldr	r3, [r0, #20]
 80077e4:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80077e8:	bf08      	it	eq
 80077ea:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80077ec:	6181      	str	r1, [r0, #24]
  }
}
 80077ee:	4770      	bx	lr

080077f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80077f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80077f2:	4604      	mov	r4, r0
{
 80077f4:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 80077f6:	b360      	cbz	r0, 8007852 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80077f8:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 80077fc:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80077fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007802:	b91b      	cbnz	r3, 800780c <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007804:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007808:	f00b f884 	bl	8012914 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800780c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800780e:	466e      	mov	r6, sp
 8007810:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8007812:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007816:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 8007818:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800781a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 800781e:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8007822:	bf08      	it	eq
 8007824:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8007826:	f005 f887 	bl	800c938 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800782a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800782c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800782e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007830:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007832:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007836:	4625      	mov	r5, r4
 8007838:	e886 0003 	stmia.w	r6, {r0, r1}
 800783c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8007840:	f855 0b10 	ldr.w	r0, [r5], #16
 8007844:	f004 ffbc 	bl	800c7c0 <USB_CoreInit>
 8007848:	4606      	mov	r6, r0
 800784a:	b120      	cbz	r0, 8007856 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800784c:	2302      	movs	r3, #2
 800784e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8007852:	2501      	movs	r5, #1
 8007854:	e054      	b.n	8007900 <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007856:	4601      	mov	r1, r0
 8007858:	6820      	ldr	r0, [r4, #0]
 800785a:	f005 f873 	bl	800c944 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800785e:	4630      	mov	r0, r6
 8007860:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007864:	261c      	movs	r6, #28
 8007866:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800786a:	4601      	mov	r1, r0
 800786c:	b2c2      	uxtb	r2, r0
 800786e:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007870:	4594      	cmp	ip, r2
 8007872:	d81b      	bhi.n	80078ac <HAL_PCD_Init+0xbc>
 8007874:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007876:	261c      	movs	r6, #28
 8007878:	4619      	mov	r1, r3
 800787a:	b2d8      	uxtb	r0, r3
 800787c:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800787e:	4584      	cmp	ip, r0
 8007880:	d822      	bhi.n	80078c8 <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007882:	466e      	mov	r6, sp
 8007884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007886:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800788a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800788c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007890:	e886 0003 	stmia.w	r6, {r0, r1}
 8007894:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8007898:	6820      	ldr	r0, [r4, #0]
 800789a:	f005 f895 	bl	800c9c8 <USB_DevInit>
 800789e:	2301      	movs	r3, #1
 80078a0:	4605      	mov	r5, r0
 80078a2:	b300      	cbz	r0, 80078e6 <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80078a4:	2202      	movs	r2, #2
 80078a6:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 80078aa:	e7d2      	b.n	8007852 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 80078ac:	fb06 4302 	mla	r3, r6, r2, r4
 80078b0:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80078b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80078b8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80078bc:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 80078c0:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 80078c2:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
 80078c6:	e7d1      	b.n	800786c <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 80078c8:	fb06 4200 	mla	r2, r6, r0, r4
 80078cc:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80078d0:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80078d4:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80078d8:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80078dc:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80078e0:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 80078e4:	e7c9      	b.n	800787a <HAL_PCD_Init+0x8a>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80078e6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80078ea:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80078ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d102      	bne.n	80078fa <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80078f4:	4620      	mov	r0, r4
 80078f6:	f000 fc58 	bl	80081aa <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80078fa:	6820      	ldr	r0, [r4, #0]
 80078fc:	f005 fb96 	bl	800d02c <USB_DevDisconnect>

  return HAL_OK;
}
 8007900:	4628      	mov	r0, r5
 8007902:	b00b      	add	sp, #44	; 0x2c
 8007904:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007906 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8007906:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800790a:	2b01      	cmp	r3, #1
{
 800790c:	b510      	push	{r4, lr}
 800790e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007910:	d016      	beq.n	8007940 <HAL_PCD_Start+0x3a>
 8007912:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007914:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8007916:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800791a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800791c:	2b01      	cmp	r3, #1
 800791e:	d106      	bne.n	800792e <HAL_PCD_Start+0x28>
 8007920:	69a3      	ldr	r3, [r4, #24]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d003      	beq.n	800792e <HAL_PCD_Start+0x28>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007926:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800792c:	6383      	str	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800792e:	f005 fb71 	bl	800d014 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8007932:	6820      	ldr	r0, [r4, #0]
 8007934:	f004 fffa 	bl	800c92c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8007938:	2000      	movs	r0, #0
 800793a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 800793e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007940:	2002      	movs	r0, #2
 8007942:	e7fc      	b.n	800793e <HAL_PCD_Start+0x38>

08007944 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007948:	6805      	ldr	r5, [r0, #0]
{
 800794a:	b087      	sub	sp, #28
 800794c:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800794e:	4628      	mov	r0, r5
 8007950:	f005 fba7 	bl	800d0a2 <USB_GetMode>
 8007954:	9002      	str	r0, [sp, #8]
 8007956:	2800      	cmp	r0, #0
 8007958:	f040 813a 	bne.w	8007bd0 <HAL_PCD_IRQHandler+0x28c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800795c:	6820      	ldr	r0, [r4, #0]
 800795e:	f005 fb71 	bl	800d044 <USB_ReadInterrupts>
 8007962:	2800      	cmp	r0, #0
 8007964:	f000 8134 	beq.w	8007bd0 <HAL_PCD_IRQHandler+0x28c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007968:	6820      	ldr	r0, [r4, #0]
 800796a:	f005 fb6b 	bl	800d044 <USB_ReadInterrupts>
 800796e:	0782      	lsls	r2, r0, #30
 8007970:	d504      	bpl.n	800797c <HAL_PCD_IRQHandler+0x38>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007972:	6822      	ldr	r2, [r4, #0]
 8007974:	6953      	ldr	r3, [r2, #20]
 8007976:	f003 0302 	and.w	r3, r3, #2
 800797a:	6153      	str	r3, [r2, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800797c:	6820      	ldr	r0, [r4, #0]
 800797e:	f005 fb61 	bl	800d044 <USB_ReadInterrupts>
 8007982:	06c3      	lsls	r3, r0, #27
 8007984:	d52a      	bpl.n	80079dc <HAL_PCD_IRQHandler+0x98>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007986:	6822      	ldr	r2, [r4, #0]
 8007988:	6993      	ldr	r3, [r2, #24]
 800798a:	f023 0310 	bic.w	r3, r3, #16
 800798e:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8007990:	6a2e      	ldr	r6, [r5, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007992:	f3c6 4343 	ubfx	r3, r6, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007996:	f006 080f 	and.w	r8, r6, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800799a:	2b02      	cmp	r3, #2
 800799c:	f040 811b 	bne.w	8007bd6 <HAL_PCD_IRQHandler+0x292>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80079a0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80079a4:	421e      	tst	r6, r3
 80079a6:	d014      	beq.n	80079d2 <HAL_PCD_IRQHandler+0x8e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80079a8:	271c      	movs	r7, #28
 80079aa:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80079ae:	4628      	mov	r0, r5
 80079b0:	fb07 4708 	mla	r7, r7, r8, r4
 80079b4:	4632      	mov	r2, r6
 80079b6:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 80079ba:	f005 fab9 	bl	800cf30 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079be:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80079c2:	4433      	add	r3, r6
 80079c4:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079c8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80079cc:	441e      	add	r6, r3
 80079ce:	f8c7 6214 	str.w	r6, [r7, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80079d2:	6822      	ldr	r2, [r4, #0]
 80079d4:	6993      	ldr	r3, [r2, #24]
 80079d6:	f043 0310 	orr.w	r3, r3, #16
 80079da:	6193      	str	r3, [r2, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	f005 fb31 	bl	800d044 <USB_ReadInterrupts>
 80079e2:	0307      	lsls	r7, r0, #12
 80079e4:	f100 8106 	bmi.w	8007bf4 <HAL_PCD_IRQHandler+0x2b0>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80079e8:	6820      	ldr	r0, [r4, #0]
 80079ea:	f005 fb2b 	bl	800d044 <USB_ReadInterrupts>
 80079ee:	0346      	lsls	r6, r0, #13
 80079f0:	d50b      	bpl.n	8007a0a <HAL_PCD_IRQHandler+0xc6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80079f2:	6820      	ldr	r0, [r4, #0]
 80079f4:	4626      	mov	r6, r4
 80079f6:	f005 fb31 	bl	800d05c <USB_ReadDevAllInEpInterrupt>

      epnum = 0U;
 80079fa:	2700      	movs	r7, #0
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80079fc:	4682      	mov	sl, r0
 80079fe:	f505 6910 	add.w	r9, r5, #2304	; 0x900

      while (ep_intr != 0U)
 8007a02:	f1ba 0f00 	cmp.w	sl, #0
 8007a06:	f040 81a3 	bne.w	8007d50 <HAL_PCD_IRQHandler+0x40c>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007a0a:	6820      	ldr	r0, [r4, #0]
 8007a0c:	f005 fb1a 	bl	800d044 <USB_ReadInterrupts>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	da15      	bge.n	8007a40 <HAL_PCD_IRQHandler+0xfc>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007a14:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8007a18:	f023 0301 	bic.w	r3, r3, #1
 8007a1c:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8007a20:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	f040 822e 	bne.w	8007e86 <HAL_PCD_IRQHandler+0x542>
      {
        hpcd->LPM_State = LPM_L0;
 8007a2a:	2100      	movs	r1, #0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007a2c:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8007a2e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007a32:	f000 fbcd 	bl	80081d0 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007a36:	6822      	ldr	r2, [r4, #0]
 8007a38:	6953      	ldr	r3, [r2, #20]
 8007a3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a3e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007a40:	6820      	ldr	r0, [r4, #0]
 8007a42:	f005 faff 	bl	800d044 <USB_ReadInterrupts>
 8007a46:	0500      	lsls	r0, r0, #20
 8007a48:	d50b      	bpl.n	8007a62 <HAL_PCD_IRQHandler+0x11e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007a4a:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8007a4e:	07d9      	lsls	r1, r3, #31
 8007a50:	d502      	bpl.n	8007a58 <HAL_PCD_IRQHandler+0x114>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007a52:	4620      	mov	r0, r4
 8007a54:	f00a ffcc 	bl	80129f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007a58:	6822      	ldr	r2, [r4, #0]
 8007a5a:	6953      	ldr	r3, [r2, #20]
 8007a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a60:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007a62:	6820      	ldr	r0, [r4, #0]
 8007a64:	f005 faee 	bl	800d044 <USB_ReadInterrupts>
 8007a68:	0102      	lsls	r2, r0, #4
 8007a6a:	d514      	bpl.n	8007a96 <HAL_PCD_IRQHandler+0x152>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	695a      	ldr	r2, [r3, #20]
 8007a70:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007a74:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007a76:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 8007a7a:	2a00      	cmp	r2, #0
 8007a7c:	f040 8207 	bne.w	8007e8e <HAL_PCD_IRQHandler+0x54a>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8007a82:	2101      	movs	r1, #1

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007a84:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007a86:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8007a8a:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007a8e:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007a92:	f000 fb9d 	bl	80081d0 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007a96:	6820      	ldr	r0, [r4, #0]
 8007a98:	f005 fad4 	bl	800d044 <USB_ReadInterrupts>
 8007a9c:	04c3      	lsls	r3, r0, #19
 8007a9e:	d535      	bpl.n	8007b0c <HAL_PCD_IRQHandler+0x1c8>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007aa0:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 8007aa4:	6873      	ldr	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007aa6:	2110      	movs	r1, #16
 8007aa8:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007aaa:	f023 0301 	bic.w	r3, r3, #1
 8007aae:	6073      	str	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007ab0:	f004 ff60 	bl	800c974 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ab4:	6860      	ldr	r0, [r4, #4]
 8007ab6:	f505 6310 	add.w	r3, r5, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007aba:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007abe:	9a02      	ldr	r2, [sp, #8]
 8007ac0:	4290      	cmp	r0, r2
 8007ac2:	f040 81e8 	bne.w	8007e96 <HAL_PCD_IRQHandler+0x552>
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007ac6:	69f3      	ldr	r3, [r6, #28]
 8007ac8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007acc:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007ace:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 8200 	beq.w	8007ed6 <HAL_PCD_IRQHandler+0x592>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007ad6:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8007ada:	f043 030b 	orr.w	r3, r3, #11
 8007ade:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007ae2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8007ae4:	f043 030b 	orr.w	r3, r3, #11
 8007ae8:	6473      	str	r3, [r6, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007aea:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007aee:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007af2:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007af4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007af8:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007afa:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007afe:	f005 fae5 	bl	800d0cc <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007b02:	6822      	ldr	r2, [r4, #0]
 8007b04:	6953      	ldr	r3, [r2, #20]
 8007b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b0a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	f005 fa99 	bl	800d044 <USB_ReadInterrupts>
 8007b12:	0487      	lsls	r7, r0, #18
 8007b14:	d516      	bpl.n	8007b44 <HAL_PCD_IRQHandler+0x200>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007b16:	6820      	ldr	r0, [r4, #0]
 8007b18:	f005 fac7 	bl	800d0aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007b1c:	6820      	ldr	r0, [r4, #0]
 8007b1e:	f005 f80b 	bl	800cb38 <USB_GetDevSpeed>

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b22:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007b24:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b26:	f000 ffd7 	bl	8008ad8 <HAL_RCC_GetHCLKFreq>
 8007b2a:	7b22      	ldrb	r2, [r4, #12]
 8007b2c:	4601      	mov	r1, r0
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f004 fe88 	bl	800c844 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007b34:	4620      	mov	r0, r4
 8007b36:	f00a ff48 	bl	80129ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007b3a:	6822      	ldr	r2, [r4, #0]
 8007b3c:	6953      	ldr	r3, [r2, #20]
 8007b3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b42:	6153      	str	r3, [r2, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007b44:	6820      	ldr	r0, [r4, #0]
 8007b46:	f005 fa7d 	bl	800d044 <USB_ReadInterrupts>
 8007b4a:	0706      	lsls	r6, r0, #28
 8007b4c:	d507      	bpl.n	8007b5e <HAL_PCD_IRQHandler+0x21a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f00a ff37 	bl	80129c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007b54:	6822      	ldr	r2, [r4, #0]
 8007b56:	6953      	ldr	r3, [r2, #20]
 8007b58:	f003 0308 	and.w	r3, r3, #8
 8007b5c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007b5e:	6820      	ldr	r0, [r4, #0]
 8007b60:	f005 fa70 	bl	800d044 <USB_ReadInterrupts>
 8007b64:	02c5      	lsls	r5, r0, #11
 8007b66:	d508      	bpl.n	8007b7a <HAL_PCD_IRQHandler+0x236>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007b68:	2100      	movs	r1, #0
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f00a ff60 	bl	8012a30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007b70:	6822      	ldr	r2, [r4, #0]
 8007b72:	6953      	ldr	r3, [r2, #20]
 8007b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b78:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007b7a:	6820      	ldr	r0, [r4, #0]
 8007b7c:	f005 fa62 	bl	800d044 <USB_ReadInterrupts>
 8007b80:	0280      	lsls	r0, r0, #10
 8007b82:	d508      	bpl.n	8007b96 <HAL_PCD_IRQHandler+0x252>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007b84:	2100      	movs	r1, #0
 8007b86:	4620      	mov	r0, r4
 8007b88:	f00a ff4e 	bl	8012a28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007b8c:	6822      	ldr	r2, [r4, #0]
 8007b8e:	6953      	ldr	r3, [r2, #20]
 8007b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b94:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007b96:	6820      	ldr	r0, [r4, #0]
 8007b98:	f005 fa54 	bl	800d044 <USB_ReadInterrupts>
 8007b9c:	0041      	lsls	r1, r0, #1
 8007b9e:	d507      	bpl.n	8007bb0 <HAL_PCD_IRQHandler+0x26c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f00a ff49 	bl	8012a38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007ba6:	6822      	ldr	r2, [r4, #0]
 8007ba8:	6953      	ldr	r3, [r2, #20]
 8007baa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bae:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007bb0:	6820      	ldr	r0, [r4, #0]
 8007bb2:	f005 fa47 	bl	800d044 <USB_ReadInterrupts>
 8007bb6:	0742      	lsls	r2, r0, #29
 8007bb8:	d50a      	bpl.n	8007bd0 <HAL_PCD_IRQHandler+0x28c>
    {
      temp = hpcd->Instance->GOTGINT;
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007bbe:	076b      	lsls	r3, r5, #29
 8007bc0:	d502      	bpl.n	8007bc8 <HAL_PCD_IRQHandler+0x284>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f00a ff3c 	bl	8012a40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007bc8:	6822      	ldr	r2, [r4, #0]
 8007bca:	6853      	ldr	r3, [r2, #4]
 8007bcc:	432b      	orrs	r3, r5
 8007bce:	6053      	str	r3, [r2, #4]
    }
  }
}
 8007bd0:	b007      	add	sp, #28
 8007bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007bd6:	2b06      	cmp	r3, #6
 8007bd8:	f47f aefb 	bne.w	80079d2 <HAL_PCD_IRQHandler+0x8e>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007bdc:	271c      	movs	r7, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007bde:	2208      	movs	r2, #8
 8007be0:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8007be4:	4628      	mov	r0, r5
 8007be6:	f005 f9a3 	bl	800cf30 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007bea:	fb07 4708 	mla	r7, r7, r8, r4
 8007bee:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8007bf2:	e6e9      	b.n	80079c8 <HAL_PCD_IRQHandler+0x84>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007bf4:	6820      	ldr	r0, [r4, #0]
      epnum = 0U;
 8007bf6:	2600      	movs	r6, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007bf8:	f005 fa28 	bl	800d04c <USB_ReadDevAllOutEpInterrupt>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bfc:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 8007eec <HAL_PCD_IRQHandler+0x5a8>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007c00:	4680      	mov	r8, r0
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007c02:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 8007ef0 <HAL_PCD_IRQHandler+0x5ac>
      while (ep_intr != 0U)
 8007c06:	f1b8 0f00 	cmp.w	r8, #0
 8007c0a:	f43f aeed 	beq.w	80079e8 <HAL_PCD_IRQHandler+0xa4>
        if ((ep_intr & 0x1U) != 0U)
 8007c0e:	f018 0f01 	tst.w	r8, #1
 8007c12:	d061      	beq.n	8007cd8 <HAL_PCD_IRQHandler+0x394>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007c14:	fa5f fa86 	uxtb.w	sl, r6
 8007c18:	6820      	ldr	r0, [r4, #0]
 8007c1a:	4651      	mov	r1, sl
 8007c1c:	f005 fa26 	bl	800d06c <USB_ReadDevOutEPInterrupt>
 8007c20:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007c22:	07f8      	lsls	r0, r7, #31
 8007c24:	d51c      	bpl.n	8007c60 <HAL_PCD_IRQHandler+0x31c>
 8007c26:	0173      	lsls	r3, r6, #5
 8007c28:	f505 6230 	add.w	r2, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007c2c:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c2e:	6820      	ldr	r0, [r4, #0]
 8007c30:	441a      	add	r2, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007c32:	6091      	str	r1, [r2, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c34:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 8007c38:	6921      	ldr	r1, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c3a:	4413      	add	r3, r2
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c3c:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  if (hpcd->Init.dma_enable == 1U)
 8007c40:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c42:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8007c44:	d16d      	bne.n	8007d22 <HAL_PCD_IRQHandler+0x3de>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007c46:	0711      	lsls	r1, r2, #28
 8007c48:	d506      	bpl.n	8007c58 <HAL_PCD_IRQHandler+0x314>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c4a:	45cc      	cmp	ip, r9
 8007c4c:	d908      	bls.n	8007c60 <HAL_PCD_IRQHandler+0x31c>
 8007c4e:	0410      	lsls	r0, r2, #16
 8007c50:	d506      	bpl.n	8007c60 <HAL_PCD_IRQHandler+0x31c>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007c56:	e002      	b.n	8007c5e <HAL_PCD_IRQHandler+0x31a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007c58:	0691      	lsls	r1, r2, #26
 8007c5a:	d541      	bpl.n	8007ce0 <HAL_PCD_IRQHandler+0x39c>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c5c:	2220      	movs	r2, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c5e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007c60:	0738      	lsls	r0, r7, #28
 8007c62:	d520      	bpl.n	8007ca6 <HAL_PCD_IRQHandler+0x362>
 8007c64:	0173      	lsls	r3, r6, #5
 8007c66:	f505 6230 	add.w	r2, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007c6a:	2108      	movs	r1, #8
 8007c6c:	441a      	add	r2, r3
 8007c6e:	6091      	str	r1, [r2, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c70:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c72:	f8d2 a040 	ldr.w	sl, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c7a:	45ca      	cmp	sl, r9
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c7c:	4413      	add	r3, r2
 8007c7e:	689a      	ldr	r2, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c80:	d904      	bls.n	8007c8c <HAL_PCD_IRQHandler+0x348>
 8007c82:	0411      	lsls	r1, r2, #16
 8007c84:	d502      	bpl.n	8007c8c <HAL_PCD_IRQHandler+0x348>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007c8a:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f00a fe81 	bl	8012994 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007c92:	45ca      	cmp	sl, r9
 8007c94:	d907      	bls.n	8007ca6 <HAL_PCD_IRQHandler+0x362>
 8007c96:	6921      	ldr	r1, [r4, #16]
 8007c98:	2901      	cmp	r1, #1
 8007c9a:	d104      	bne.n	8007ca6 <HAL_PCD_IRQHandler+0x362>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c9c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007ca0:	6820      	ldr	r0, [r4, #0]
 8007ca2:	f005 fa13 	bl	800d0cc <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007ca6:	06fa      	lsls	r2, r7, #27
 8007ca8:	d505      	bpl.n	8007cb6 <HAL_PCD_IRQHandler+0x372>
 8007caa:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007cae:	2210      	movs	r2, #16
 8007cb0:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8007cb4:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007cb6:	06bb      	lsls	r3, r7, #26
 8007cb8:	d505      	bpl.n	8007cc6 <HAL_PCD_IRQHandler+0x382>
 8007cba:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8007cc4:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007cc6:	04bf      	lsls	r7, r7, #18
 8007cc8:	d506      	bpl.n	8007cd8 <HAL_PCD_IRQHandler+0x394>
 8007cca:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007cd2:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8007cd6:	609a      	str	r2, [r3, #8]
        epnum++;
 8007cd8:	3601      	adds	r6, #1
        ep_intr >>= 1U;
 8007cda:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8007cde:	e792      	b.n	8007c06 <HAL_PCD_IRQHandler+0x2c2>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007ce0:	f012 0f28 	tst.w	r2, #40	; 0x28
 8007ce4:	d1bc      	bne.n	8007c60 <HAL_PCD_IRQHandler+0x31c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ce6:	45cc      	cmp	ip, r9
 8007ce8:	d901      	bls.n	8007cee <HAL_PCD_IRQHandler+0x3aa>
 8007cea:	0412      	lsls	r2, r2, #16
 8007cec:	d4b1      	bmi.n	8007c52 <HAL_PCD_IRQHandler+0x30e>
 8007cee:	221c      	movs	r2, #28
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	fb02 4206 	mla	r2, r2, r6, r4
 8007cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007cfa:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8007cfe:	1acb      	subs	r3, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007d00:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007d04:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8007d08:	4419      	add	r1, r3
 8007d0a:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007d0e:	b986      	cbnz	r6, 8007d32 <HAL_PCD_IRQHandler+0x3ee>
 8007d10:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8007d14:	b96b      	cbnz	r3, 8007d32 <HAL_PCD_IRQHandler+0x3ee>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d16:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007d1a:	2101      	movs	r1, #1
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007d1c:	f005 f9d6 	bl	800d0cc <USB_EP0_OutStart>
 8007d20:	e007      	b.n	8007d32 <HAL_PCD_IRQHandler+0x3ee>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007d22:	45dc      	cmp	ip, fp
 8007d24:	d10a      	bne.n	8007d3c <HAL_PCD_IRQHandler+0x3f8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007d26:	0411      	lsls	r1, r2, #16
 8007d28:	d493      	bmi.n	8007c52 <HAL_PCD_IRQHandler+0x30e>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007d2a:	0692      	lsls	r2, r2, #26
 8007d2c:	d501      	bpl.n	8007d32 <HAL_PCD_IRQHandler+0x3ee>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d2e:	2220      	movs	r2, #32
 8007d30:	609a      	str	r2, [r3, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d32:	4651      	mov	r1, sl
 8007d34:	4620      	mov	r0, r4
 8007d36:	f00a fe33 	bl	80129a0 <HAL_PCD_DataOutStageCallback>
 8007d3a:	e791      	b.n	8007c60 <HAL_PCD_IRQHandler+0x31c>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007d3c:	2e00      	cmp	r6, #0
 8007d3e:	d1f8      	bne.n	8007d32 <HAL_PCD_IRQHandler+0x3ee>
 8007d40:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1f4      	bne.n	8007d32 <HAL_PCD_IRQHandler+0x3ee>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007d48:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007d4c:	4631      	mov	r1, r6
 8007d4e:	e7e5      	b.n	8007d1c <HAL_PCD_IRQHandler+0x3d8>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007d50:	f01a 0f01 	tst.w	sl, #1
 8007d54:	d074      	beq.n	8007e40 <HAL_PCD_IRQHandler+0x4fc>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007d56:	fa5f fb87 	uxtb.w	fp, r7
 8007d5a:	6820      	ldr	r0, [r4, #0]
 8007d5c:	4659      	mov	r1, fp
 8007d5e:	f005 f98e 	bl	800d07e <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007d62:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007d66:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007d68:	d020      	beq.n	8007dac <HAL_PCD_IRQHandler+0x468>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007d6a:	2001      	movs	r0, #1
 8007d6c:	f007 020f 	and.w	r2, r7, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007d70:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007d74:	fa00 f202 	lsl.w	r2, r0, r2
            if (hpcd->Init.dma_enable == 1U)
 8007d78:	6921      	ldr	r1, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007d7a:	ea23 0302 	bic.w	r3, r3, r2
            if (hpcd->Init.dma_enable == 1U)
 8007d7e:	4281      	cmp	r1, r0
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007d80:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
 8007d84:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007d88:	6098      	str	r0, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 8007d8a:	d10b      	bne.n	8007da4 <HAL_PCD_IRQHandler+0x460>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007d8c:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 8007d90:	4413      	add	r3, r2
 8007d92:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007d94:	b937      	cbnz	r7, 8007da4 <HAL_PCD_IRQHandler+0x460>
 8007d96:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007d98:	b923      	cbnz	r3, 8007da4 <HAL_PCD_IRQHandler+0x460>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d9a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007d9e:	6820      	ldr	r0, [r4, #0]
 8007da0:	f005 f994 	bl	800d0cc <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007da4:	4659      	mov	r1, fp
 8007da6:	4620      	mov	r0, r4
 8007da8:	f00a fe03 	bl	80129b2 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007dac:	f018 0f08 	tst.w	r8, #8
 8007db0:	d003      	beq.n	8007dba <HAL_PCD_IRQHandler+0x476>
 8007db2:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007db6:	2208      	movs	r2, #8
 8007db8:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007dba:	f018 0f10 	tst.w	r8, #16
 8007dbe:	d003      	beq.n	8007dc8 <HAL_PCD_IRQHandler+0x484>
 8007dc0:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007dc4:	2210      	movs	r2, #16
 8007dc6:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007dc8:	f018 0f40 	tst.w	r8, #64	; 0x40
 8007dcc:	d003      	beq.n	8007dd6 <HAL_PCD_IRQHandler+0x492>
 8007dce:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007dd2:	2240      	movs	r2, #64	; 0x40
 8007dd4:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007dd6:	f018 0f02 	tst.w	r8, #2
 8007dda:	d003      	beq.n	8007de4 <HAL_PCD_IRQHandler+0x4a0>
 8007ddc:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007de0:	2202      	movs	r2, #2
 8007de2:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007de4:	f018 0f80 	tst.w	r8, #128	; 0x80
 8007de8:	d02a      	beq.n	8007e40 <HAL_PCD_IRQHandler+0x4fc>
  if (ep->xfer_count > ep->xfer_len)
 8007dea:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d826      	bhi.n	8007e40 <HAL_PCD_IRQHandler+0x4fc>
  len = ep->xfer_len - ep->xfer_count;
 8007df2:	1a9b      	subs	r3, r3, r2
  len32b = (len + 3U) / 4U;
 8007df4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8007df6:	6821      	ldr	r1, [r4, #0]
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	9103      	str	r1, [sp, #12]
 8007dfc:	bf28      	it	cs
 8007dfe:	4613      	movcs	r3, r2
 8007e00:	3303      	adds	r3, #3
 8007e02:	089b      	lsrs	r3, r3, #2
 8007e04:	9304      	str	r3, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e06:	f501 6310 	add.w	r3, r1, #2304	; 0x900
 8007e0a:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 8007e0e:	9305      	str	r3, [sp, #20]
 8007e10:	9b05      	ldr	r3, [sp, #20]
 8007e12:	9804      	ldr	r0, [sp, #16]
 8007e14:	6999      	ldr	r1, [r3, #24]
 8007e16:	b289      	uxth	r1, r1
 8007e18:	4281      	cmp	r1, r0
 8007e1a:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
 8007e1e:	d214      	bcs.n	8007e4a <HAL_PCD_IRQHandler+0x506>
  if (ep->xfer_len <= ep->xfer_count)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d80d      	bhi.n	8007e40 <HAL_PCD_IRQHandler+0x4fc>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007e24:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007e26:	f007 020f 	and.w	r2, r7, #15
 8007e2a:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007e2c:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8007e30:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007e34:	fa01 f202 	lsl.w	r2, r1, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007e38:	ea23 0302 	bic.w	r3, r3, r2
 8007e3c:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
        epnum++;
 8007e40:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 8007e42:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 8007e46:	361c      	adds	r6, #28
 8007e48:	e5db      	b.n	8007a02 <HAL_PCD_IRQHandler+0xbe>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d9ea      	bls.n	8007e24 <HAL_PCD_IRQHandler+0x4e0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d0e8      	beq.n	8007e24 <HAL_PCD_IRQHandler+0x4e0>
    len = ep->xfer_len - ep->xfer_count;
 8007e52:	eba3 0802 	sub.w	r8, r3, r2
 8007e56:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007e58:	465a      	mov	r2, fp
 8007e5a:	9803      	ldr	r0, [sp, #12]
 8007e5c:	4598      	cmp	r8, r3
 8007e5e:	bf28      	it	cs
 8007e60:	4698      	movcs	r8, r3
    len32b = (len + 3U) / 4U;
 8007e62:	f108 0303 	add.w	r3, r8, #3
 8007e66:	089b      	lsrs	r3, r3, #2
 8007e68:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007e6a:	7c23      	ldrb	r3, [r4, #16]
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	fa1f f388 	uxth.w	r3, r8
 8007e72:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8007e74:	f004 ff70 	bl	800cd58 <USB_WritePacket>
    ep->xfer_buff  += len;
 8007e78:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8007e7a:	4443      	add	r3, r8
 8007e7c:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8007e7e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8007e80:	4443      	add	r3, r8
 8007e82:	6573      	str	r3, [r6, #84]	; 0x54
 8007e84:	e7c4      	b.n	8007e10 <HAL_PCD_IRQHandler+0x4cc>
        HAL_PCD_ResumeCallback(hpcd);
 8007e86:	4620      	mov	r0, r4
 8007e88:	f00a fdca 	bl	8012a20 <HAL_PCD_ResumeCallback>
 8007e8c:	e5d3      	b.n	8007a36 <HAL_PCD_IRQHandler+0xf2>
        HAL_PCD_SuspendCallback(hpcd);
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f00a fdae 	bl	80129f0 <HAL_PCD_SuspendCallback>
 8007e94:	e5ff      	b.n	8007a96 <HAL_PCD_IRQHandler+0x152>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007e96:	6099      	str	r1, [r3, #8]
 8007e98:	3320      	adds	r3, #32
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e9a:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8007e9e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007ea2:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ea6:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8007eaa:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007eae:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007eb2:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007eb6:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8007eba:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007ebe:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ec2:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8007ec6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007eca:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ece:	9a02      	ldr	r2, [sp, #8]
 8007ed0:	3201      	adds	r2, #1
 8007ed2:	9202      	str	r2, [sp, #8]
 8007ed4:	e5f3      	b.n	8007abe <HAL_PCD_IRQHandler+0x17a>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007ed6:	6973      	ldr	r3, [r6, #20]
 8007ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007edc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007ee0:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007ee2:	6933      	ldr	r3, [r6, #16]
 8007ee4:	f043 030b 	orr.w	r3, r3, #11
 8007ee8:	6133      	str	r3, [r6, #16]
 8007eea:	e5fe      	b.n	8007aea <HAL_PCD_IRQHandler+0x1a6>
 8007eec:	4f54300a 	.word	0x4f54300a
 8007ef0:	4f54310a 	.word	0x4f54310a

08007ef4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8007ef4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8007ef8:	2a01      	cmp	r2, #1
{
 8007efa:	b510      	push	{r4, lr}
 8007efc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007efe:	d00b      	beq.n	8007f18 <HAL_PCD_SetAddress+0x24>
 8007f00:	2201      	movs	r2, #1
 8007f02:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007f06:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007f0a:	6800      	ldr	r0, [r0, #0]
 8007f0c:	f005 f872 	bl	800cff4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007f10:	2000      	movs	r0, #0
 8007f12:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007f16:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007f18:	2002      	movs	r0, #2
 8007f1a:	e7fc      	b.n	8007f16 <HAL_PCD_SetAddress+0x22>

08007f1c <HAL_PCD_EP_Open>:
{
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	f001 050f 	and.w	r5, r1, #15
 8007f22:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8007f24:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007f28:	f04f 061c 	mov.w	r6, #28
 8007f2c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 8007f30:	ea4f 0080 	mov.w	r0, r0, lsl #2
 8007f34:	d01f      	beq.n	8007f76 <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f36:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 8007f3a:	fb06 4605 	mla	r6, r6, r5, r4
 8007f3e:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f40:	4421      	add	r1, r4
    ep->is_in = 1U;
 8007f42:	f886 003d 	strb.w	r0, [r6, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 8007f46:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8007f48:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f4a:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 8007f4c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8007f4e:	b102      	cbz	r2, 8007f52 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8007f50:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8007f52:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8007f54:	bf04      	itt	eq
 8007f56:	2300      	moveq	r3, #0
 8007f58:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8007f5a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d012      	beq.n	8007f88 <HAL_PCD_EP_Open+0x6c>
 8007f62:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007f64:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007f66:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007f6a:	f004 fdf0 	bl	800cb4e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007f6e:	2000      	movs	r0, #0
 8007f70:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007f74:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f76:	f500 71fe 	add.w	r1, r0, #508	; 0x1fc
    ep->is_in = 0U;
 8007f7a:	fb06 4605 	mla	r6, r6, r5, r4
 8007f7e:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f80:	4421      	add	r1, r4
    ep->is_in = 0U;
 8007f82:	f886 01fd 	strb.w	r0, [r6, #509]	; 0x1fd
 8007f86:	e7de      	b.n	8007f46 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8007f88:	2002      	movs	r0, #2
 8007f8a:	e7f3      	b.n	8007f74 <HAL_PCD_EP_Open+0x58>

08007f8c <HAL_PCD_EP_Close>:
{
 8007f8c:	b510      	push	{r4, lr}
 8007f8e:	4604      	mov	r4, r0
 8007f90:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8007f94:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007f98:	f04f 021c 	mov.w	r2, #28
 8007f9c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8007fa0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007fa4:	d016      	beq.n	8007fd4 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fa6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8007faa:	fb02 4200 	mla	r2, r2, r0, r4
 8007fae:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fb0:	4421      	add	r1, r4
    ep->is_in = 1U;
 8007fb2:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007fb6:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8007fb8:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d012      	beq.n	8007fe6 <HAL_PCD_EP_Close+0x5a>
 8007fc0:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007fc2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007fc4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007fc8:	f004 fe00 	bl	800cbcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007fcc:	2000      	movs	r0, #0
 8007fce:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007fd2:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fd4:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8007fd8:	fb02 4200 	mla	r2, r2, r0, r4
 8007fdc:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fde:	4421      	add	r1, r4
    ep->is_in = 0U;
 8007fe0:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 8007fe4:	e7e7      	b.n	8007fb6 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8007fe6:	2002      	movs	r0, #2
 8007fe8:	e7f3      	b.n	8007fd2 <HAL_PCD_EP_Close+0x46>

08007fea <HAL_PCD_EP_Receive>:
{
 8007fea:	b538      	push	{r3, r4, r5, lr}
 8007fec:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ff0:	241c      	movs	r4, #28
 8007ff2:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8007ff6:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ffa:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8007ffe:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8008002:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8008004:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8008008:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 800800c:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8008010:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8008014:	6903      	ldr	r3, [r0, #16]
 8008016:	6800      	ldr	r0, [r0, #0]
 8008018:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800801a:	bf08      	it	eq
 800801c:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 8008020:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008022:	b91d      	cbnz	r5, 800802c <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008024:	f004 fe24 	bl	800cc70 <USB_EP0StartXfer>
}
 8008028:	2000      	movs	r0, #0
 800802a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800802c:	f004 fea8 	bl	800cd80 <USB_EPStartXfer>
 8008030:	e7fa      	b.n	8008028 <HAL_PCD_EP_Receive+0x3e>

08008032 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008032:	231c      	movs	r3, #28
 8008034:	f001 010f 	and.w	r1, r1, #15
 8008038:	fb03 0101 	mla	r1, r3, r1, r0
}
 800803c:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8008040:	4770      	bx	lr

08008042 <HAL_PCD_EP_Transmit>:
{
 8008042:	b538      	push	{r3, r4, r5, lr}
 8008044:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008048:	241c      	movs	r4, #28
 800804a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800804e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008052:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8008054:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8008056:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8008058:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 800805a:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 800805c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800805e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 8008062:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8008066:	6903      	ldr	r3, [r0, #16]
 8008068:	6800      	ldr	r0, [r0, #0]
 800806a:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800806c:	bf08      	it	eq
 800806e:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8008070:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008072:	b91d      	cbnz	r5, 800807c <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008074:	f004 fdfc 	bl	800cc70 <USB_EP0StartXfer>
}
 8008078:	2000      	movs	r0, #0
 800807a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800807c:	f004 fe80 	bl	800cd80 <USB_EPStartXfer>
 8008080:	e7fa      	b.n	8008078 <HAL_PCD_EP_Transmit+0x36>

08008082 <HAL_PCD_EP_SetStall>:
{
 8008082:	b538      	push	{r3, r4, r5, lr}
 8008084:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008088:	6843      	ldr	r3, [r0, #4]
{
 800808a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800808c:	429d      	cmp	r5, r3
 800808e:	d82e      	bhi.n	80080ee <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8008090:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008094:	f04f 021c 	mov.w	r2, #28
 8008098:	d01f      	beq.n	80080da <HAL_PCD_EP_SetStall+0x58>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800809a:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 800809e:	fb02 0105 	mla	r1, r2, r5, r0
 80080a2:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080a4:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 80080a6:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 80080aa:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80080ac:	701d      	strb	r5, [r3, #0]
  ep->is_stall = 1U;
 80080ae:	709a      	strb	r2, [r3, #2]
  __HAL_LOCK(hpcd);
 80080b0:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 80080b4:	4291      	cmp	r1, r2
 80080b6:	d01c      	beq.n	80080f2 <HAL_PCD_EP_SetStall+0x70>
 80080b8:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80080bc:	4619      	mov	r1, r3
 80080be:	6820      	ldr	r0, [r4, #0]
 80080c0:	f004 ff44 	bl	800cf4c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80080c4:	b92d      	cbnz	r5, 80080d2 <HAL_PCD_EP_SetStall+0x50>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80080c6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80080ca:	7c21      	ldrb	r1, [r4, #16]
 80080cc:	6820      	ldr	r0, [r4, #0]
 80080ce:	f004 fffd 	bl	800d0cc <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80080d2:	2000      	movs	r0, #0
 80080d4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80080d8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80080da:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 80080de:	fb02 0101 	mla	r1, r2, r1, r0
 80080e2:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80080e4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80080e8:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 80080ec:	e7dd      	b.n	80080aa <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80080ee:	2001      	movs	r0, #1
 80080f0:	e7f2      	b.n	80080d8 <HAL_PCD_EP_SetStall+0x56>
  __HAL_LOCK(hpcd);
 80080f2:	2002      	movs	r0, #2
 80080f4:	e7f0      	b.n	80080d8 <HAL_PCD_EP_SetStall+0x56>

080080f6 <HAL_PCD_EP_ClrStall>:
{
 80080f6:	b538      	push	{r3, r4, r5, lr}
 80080f8:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80080fc:	6843      	ldr	r3, [r0, #4]
{
 80080fe:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008100:	429a      	cmp	r2, r3
 8008102:	d82a      	bhi.n	800815a <HAL_PCD_EP_ClrStall+0x64>
 8008104:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8008108:	f011 0f80 	tst.w	r1, #128	; 0x80
 800810c:	f04f 001c 	mov.w	r0, #28
 8008110:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008114:	d018      	beq.n	8008148 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008116:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 800811a:	fb00 4002 	mla	r0, r0, r2, r4
 800811e:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008120:	4421      	add	r1, r4
    ep->is_in = 1U;
 8008122:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 0U;
 8008126:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8008128:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800812a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800812c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8008130:	2b01      	cmp	r3, #1
 8008132:	d014      	beq.n	800815e <HAL_PCD_EP_ClrStall+0x68>
 8008134:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008136:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008138:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800813c:	f004 ff31 	bl	800cfa2 <USB_EPClearStall>
  return HAL_OK;
 8008140:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8008142:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 8008146:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008148:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 800814c:	fb00 4002 	mla	r0, r0, r2, r4
 8008150:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008152:	4421      	add	r1, r4
    ep->is_in = 0U;
 8008154:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 8008158:	e7e5      	b.n	8008126 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 800815a:	2001      	movs	r0, #1
 800815c:	e7f3      	b.n	8008146 <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 800815e:	2002      	movs	r0, #2
 8008160:	e7f1      	b.n	8008146 <HAL_PCD_EP_ClrStall+0x50>

08008162 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008162:	6800      	ldr	r0, [r0, #0]
 8008164:	0412      	lsls	r2, r2, #16
{
 8008166:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008168:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if (fifo == 0U)
 800816a:	b919      	cbnz	r1, 8008174 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800816c:	4322      	orrs	r2, r4
 800816e:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8008170:	2000      	movs	r0, #0
 8008172:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008174:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8008176:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008178:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800817c:	2300      	movs	r3, #0
 800817e:	1c5e      	adds	r6, r3, #1
 8008180:	b2db      	uxtb	r3, r3
 8008182:	429d      	cmp	r5, r3
 8008184:	d805      	bhi.n	8008192 <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008186:	313f      	adds	r1, #63	; 0x3f
 8008188:	4322      	orrs	r2, r4
 800818a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800818e:	6042      	str	r2, [r0, #4]
 8008190:	e7ee      	b.n	8008170 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008192:	3340      	adds	r3, #64	; 0x40
 8008194:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800819e:	4633      	mov	r3, r6
 80081a0:	e7ed      	b.n	800817e <HAL_PCDEx_SetTxFiFo+0x1c>

080081a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80081a2:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80081a4:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80081a6:	6259      	str	r1, [r3, #36]	; 0x24
}
 80081a8:	4770      	bx	lr

080081aa <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 80081aa:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081ac:	6802      	ldr	r2, [r0, #0]
{
 80081ae:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 80081b0:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80081b4:	2000      	movs	r0, #0
 80081b6:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80081ba:	6993      	ldr	r3, [r2, #24]
 80081bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081c0:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80081c2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80081c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081c8:	f043 0303 	orr.w	r3, r3, #3
 80081cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80081ce:	4770      	bx	lr

080081d0 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80081d0:	4770      	bx	lr
	...

080081d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80081d4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80081d6:	4c10      	ldr	r4, [pc, #64]	; (8008218 <HAL_PWREx_ConfigSupply+0x44>)
 80081d8:	68e3      	ldr	r3, [r4, #12]
 80081da:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80081de:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80081e0:	d105      	bne.n	80081ee <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80081e2:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80081e6:	1a18      	subs	r0, r3, r0
 80081e8:	bf18      	it	ne
 80081ea:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80081ec:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80081ee:	f023 0307 	bic.w	r3, r3, #7
 80081f2:	4318      	orrs	r0, r3
 80081f4:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 80081f6:	f7fd f9c1 	bl	800557c <HAL_GetTick>
 80081fa:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80081fc:	6863      	ldr	r3, [r4, #4]
 80081fe:	049b      	lsls	r3, r3, #18
 8008200:	d501      	bpl.n	8008206 <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 8008202:	2000      	movs	r0, #0
 8008204:	e7f2      	b.n	80081ec <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008206:	f7fd f9b9 	bl	800557c <HAL_GetTick>
 800820a:	1b40      	subs	r0, r0, r5
 800820c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008210:	d9f4      	bls.n	80081fc <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8008212:	2001      	movs	r0, #1
 8008214:	e7ea      	b.n	80081ec <HAL_PWREx_ConfigSupply+0x18>
 8008216:	bf00      	nop
 8008218:	58024800 	.word	0x58024800

0800821c <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800821c:	4a02      	ldr	r2, [pc, #8]	; (8008228 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800821e:	68d3      	ldr	r3, [r2, #12]
 8008220:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008224:	60d3      	str	r3, [r2, #12]
}
 8008226:	4770      	bx	lr
 8008228:	58024800 	.word	0x58024800

0800822c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800822e:	4604      	mov	r4, r0
 8008230:	b908      	cbnz	r0, 8008236 <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8008232:	2001      	movs	r0, #1
 8008234:	e08c      	b.n	8008350 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008236:	6803      	ldr	r3, [r0, #0]
 8008238:	07d8      	lsls	r0, r3, #31
 800823a:	d45e      	bmi.n	80082fa <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	0799      	lsls	r1, r3, #30
 8008240:	f100 80ac 	bmi.w	800839c <HAL_RCC_OscConfig+0x170>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	06da      	lsls	r2, r3, #27
 8008248:	d527      	bpl.n	800829a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800824a:	4ba8      	ldr	r3, [pc, #672]	; (80084ec <HAL_RCC_OscConfig+0x2c0>)
 800824c:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800824e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008250:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008254:	2a08      	cmp	r2, #8
 8008256:	d007      	beq.n	8008268 <HAL_RCC_OscConfig+0x3c>
 8008258:	2a18      	cmp	r2, #24
 800825a:	f040 810a 	bne.w	8008472 <HAL_RCC_OscConfig+0x246>
 800825e:	f001 0203 	and.w	r2, r1, #3
 8008262:	2a01      	cmp	r2, #1
 8008264:	f040 8105 	bne.w	8008472 <HAL_RCC_OscConfig+0x246>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	05db      	lsls	r3, r3, #23
 800826c:	d502      	bpl.n	8008274 <HAL_RCC_OscConfig+0x48>
 800826e:	69e3      	ldr	r3, [r4, #28]
 8008270:	2b80      	cmp	r3, #128	; 0x80
 8008272:	d1de      	bne.n	8008232 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008274:	f7fd f99a 	bl	80055ac <HAL_GetREVID>
 8008278:	f241 0303 	movw	r3, #4099	; 0x1003
 800827c:	6a21      	ldr	r1, [r4, #32]
 800827e:	4298      	cmp	r0, r3
 8008280:	4b9a      	ldr	r3, [pc, #616]	; (80084ec <HAL_RCC_OscConfig+0x2c0>)
 8008282:	f200 80ef 	bhi.w	8008464 <HAL_RCC_OscConfig+0x238>
 8008286:	685a      	ldr	r2, [r3, #4]
 8008288:	2920      	cmp	r1, #32
 800828a:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 800828e:	bf0c      	ite	eq
 8008290:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8008294:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8008298:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	0719      	lsls	r1, r3, #28
 800829e:	f100 8129 	bmi.w	80084f4 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	069a      	lsls	r2, r3, #26
 80082a6:	f100 814a 	bmi.w	800853e <HAL_RCC_OscConfig+0x312>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	075d      	lsls	r5, r3, #29
 80082ae:	d51e      	bpl.n	80082ee <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 80082b0:	4d8f      	ldr	r5, [pc, #572]	; (80084f0 <HAL_RCC_OscConfig+0x2c4>)
 80082b2:	682b      	ldr	r3, [r5, #0]
 80082b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082b8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80082ba:	f7fd f95f 	bl	800557c <HAL_GetTick>
 80082be:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	05da      	lsls	r2, r3, #23
 80082c4:	f140 8160 	bpl.w	8008588 <HAL_RCC_OscConfig+0x35c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082c8:	68a3      	ldr	r3, [r4, #8]
 80082ca:	4d88      	ldr	r5, [pc, #544]	; (80084ec <HAL_RCC_OscConfig+0x2c0>)
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	f040 8162 	bne.w	8008596 <HAL_RCC_OscConfig+0x36a>
 80082d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80082d4:	f043 0301 	orr.w	r3, r3, #1
 80082d8:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082da:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80082de:	f7fd f94d 	bl	800557c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082e2:	4e82      	ldr	r6, [pc, #520]	; (80084ec <HAL_RCC_OscConfig+0x2c0>)
      tickstart = HAL_GetTick();
 80082e4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082e6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80082e8:	079b      	lsls	r3, r3, #30
 80082ea:	f140 817a 	bpl.w	80085e2 <HAL_RCC_OscConfig+0x3b6>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80082f0:	2800      	cmp	r0, #0
 80082f2:	f040 817d 	bne.w	80085f0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
  }
  return HAL_OK;
 80082f6:	2000      	movs	r0, #0
 80082f8:	e02a      	b.n	8008350 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082fa:	4b7c      	ldr	r3, [pc, #496]	; (80084ec <HAL_RCC_OscConfig+0x2c0>)
 80082fc:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008300:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008304:	2a10      	cmp	r2, #16
 8008306:	d005      	beq.n	8008314 <HAL_RCC_OscConfig+0xe8>
 8008308:	2a18      	cmp	r2, #24
 800830a:	d10a      	bne.n	8008322 <HAL_RCC_OscConfig+0xf6>
 800830c:	f001 0203 	and.w	r2, r1, #3
 8008310:	2a02      	cmp	r2, #2
 8008312:	d106      	bne.n	8008322 <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	039a      	lsls	r2, r3, #14
 8008318:	d590      	bpl.n	800823c <HAL_RCC_OscConfig+0x10>
 800831a:	6863      	ldr	r3, [r4, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d18d      	bne.n	800823c <HAL_RCC_OscConfig+0x10>
 8008320:	e787      	b.n	8008232 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008322:	6863      	ldr	r3, [r4, #4]
 8008324:	4d71      	ldr	r5, [pc, #452]	; (80084ec <HAL_RCC_OscConfig+0x2c0>)
 8008326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800832a:	d112      	bne.n	8008352 <HAL_RCC_OscConfig+0x126>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008332:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008334:	f7fd f922 	bl	800557c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008338:	4d6c      	ldr	r5, [pc, #432]	; (80084ec <HAL_RCC_OscConfig+0x2c0>)
        tickstart = HAL_GetTick();
 800833a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	039b      	lsls	r3, r3, #14
 8008340:	f53f af7c 	bmi.w	800823c <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008344:	f7fd f91a 	bl	800557c <HAL_GetTick>
 8008348:	1b80      	subs	r0, r0, r6
 800834a:	2864      	cmp	r0, #100	; 0x64
 800834c:	d9f6      	bls.n	800833c <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800834e:	2003      	movs	r0, #3
}
 8008350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008352:	b9a3      	cbnz	r3, 800837e <HAL_RCC_OscConfig+0x152>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800835a:	602b      	str	r3, [r5, #0]
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008362:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008364:	f7fd f90a 	bl	800557c <HAL_GetTick>
 8008368:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800836a:	682b      	ldr	r3, [r5, #0]
 800836c:	039f      	lsls	r7, r3, #14
 800836e:	f57f af65 	bpl.w	800823c <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008372:	f7fd f903 	bl	800557c <HAL_GetTick>
 8008376:	1b80      	subs	r0, r0, r6
 8008378:	2864      	cmp	r0, #100	; 0x64
 800837a:	d9f6      	bls.n	800836a <HAL_RCC_OscConfig+0x13e>
 800837c:	e7e7      	b.n	800834e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800837e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008382:	682b      	ldr	r3, [r5, #0]
 8008384:	d103      	bne.n	800838e <HAL_RCC_OscConfig+0x162>
 8008386:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800838a:	602b      	str	r3, [r5, #0]
 800838c:	e7ce      	b.n	800832c <HAL_RCC_OscConfig+0x100>
 800838e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008392:	602b      	str	r3, [r5, #0]
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800839a:	e7ca      	b.n	8008332 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800839c:	4b53      	ldr	r3, [pc, #332]	; (80084ec <HAL_RCC_OscConfig+0x2c0>)
 800839e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083a0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80083a2:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 80083a6:	d003      	beq.n	80083b0 <HAL_RCC_OscConfig+0x184>
 80083a8:	2a18      	cmp	r2, #24
 80083aa:	d120      	bne.n	80083ee <HAL_RCC_OscConfig+0x1c2>
 80083ac:	078e      	lsls	r6, r1, #30
 80083ae:	d11e      	bne.n	80083ee <HAL_RCC_OscConfig+0x1c2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	075d      	lsls	r5, r3, #29
 80083b4:	d503      	bpl.n	80083be <HAL_RCC_OscConfig+0x192>
 80083b6:	68e3      	ldr	r3, [r4, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f43f af3a 	beq.w	8008232 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083be:	f7fd f8f5 	bl	80055ac <HAL_GetREVID>
 80083c2:	f241 0303 	movw	r3, #4099	; 0x1003
 80083c6:	6921      	ldr	r1, [r4, #16]
 80083c8:	4298      	cmp	r0, r3
 80083ca:	4b48      	ldr	r3, [pc, #288]	; (80084ec <HAL_RCC_OscConfig+0x2c0>)
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	d809      	bhi.n	80083e4 <HAL_RCC_OscConfig+0x1b8>
 80083d0:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80083d4:	2940      	cmp	r1, #64	; 0x40
 80083d6:	bf0c      	ite	eq
 80083d8:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 80083dc:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 80083e0:	605a      	str	r2, [r3, #4]
 80083e2:	e72f      	b.n	8008244 <HAL_RCC_OscConfig+0x18>
 80083e4:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80083e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80083ec:	e7f8      	b.n	80083e0 <HAL_RCC_OscConfig+0x1b4>
 80083ee:	4d3f      	ldr	r5, [pc, #252]	; (80084ec <HAL_RCC_OscConfig+0x2c0>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083f0:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083f2:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083f4:	b332      	cbz	r2, 8008444 <HAL_RCC_OscConfig+0x218>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083f6:	f023 0319 	bic.w	r3, r3, #25
 80083fa:	4313      	orrs	r3, r2
 80083fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80083fe:	f7fd f8bd 	bl	800557c <HAL_GetTick>
 8008402:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	0758      	lsls	r0, r3, #29
 8008408:	d511      	bpl.n	800842e <HAL_RCC_OscConfig+0x202>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800840a:	f7fd f8cf 	bl	80055ac <HAL_GetREVID>
 800840e:	f241 0303 	movw	r3, #4099	; 0x1003
 8008412:	6922      	ldr	r2, [r4, #16]
 8008414:	4298      	cmp	r0, r3
 8008416:	686b      	ldr	r3, [r5, #4]
 8008418:	d80f      	bhi.n	800843a <HAL_RCC_OscConfig+0x20e>
 800841a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800841e:	2a40      	cmp	r2, #64	; 0x40
 8008420:	bf0c      	ite	eq
 8008422:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8008426:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800842a:	606b      	str	r3, [r5, #4]
 800842c:	e70a      	b.n	8008244 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800842e:	f7fd f8a5 	bl	800557c <HAL_GetTick>
 8008432:	1b80      	subs	r0, r0, r6
 8008434:	2802      	cmp	r0, #2
 8008436:	d9e5      	bls.n	8008404 <HAL_RCC_OscConfig+0x1d8>
 8008438:	e789      	b.n	800834e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800843a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800843e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008442:	e7f2      	b.n	800842a <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_DISABLE();
 8008444:	f023 0301 	bic.w	r3, r3, #1
 8008448:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800844a:	f7fd f897 	bl	800557c <HAL_GetTick>
 800844e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	0759      	lsls	r1, r3, #29
 8008454:	f57f aef6 	bpl.w	8008244 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008458:	f7fd f890 	bl	800557c <HAL_GetTick>
 800845c:	1b80      	subs	r0, r0, r6
 800845e:	2802      	cmp	r0, #2
 8008460:	d9f6      	bls.n	8008450 <HAL_RCC_OscConfig+0x224>
 8008462:	e774      	b.n	800834e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008464:	68da      	ldr	r2, [r3, #12]
 8008466:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 800846a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800846e:	60da      	str	r2, [r3, #12]
 8008470:	e713      	b.n	800829a <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008472:	69e3      	ldr	r3, [r4, #28]
 8008474:	4d1d      	ldr	r5, [pc, #116]	; (80084ec <HAL_RCC_OscConfig+0x2c0>)
 8008476:	b343      	cbz	r3, 80084ca <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_CSI_ENABLE();
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800847e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008480:	f7fd f87c 	bl	800557c <HAL_GetTick>
 8008484:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008486:	682b      	ldr	r3, [r5, #0]
 8008488:	05df      	lsls	r7, r3, #23
 800848a:	d511      	bpl.n	80084b0 <HAL_RCC_OscConfig+0x284>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800848c:	f7fd f88e 	bl	80055ac <HAL_GetREVID>
 8008490:	f241 0303 	movw	r3, #4099	; 0x1003
 8008494:	6a22      	ldr	r2, [r4, #32]
 8008496:	4298      	cmp	r0, r3
 8008498:	d810      	bhi.n	80084bc <HAL_RCC_OscConfig+0x290>
 800849a:	686b      	ldr	r3, [r5, #4]
 800849c:	2a20      	cmp	r2, #32
 800849e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80084a2:	bf0c      	ite	eq
 80084a4:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80084a8:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80084ac:	606b      	str	r3, [r5, #4]
 80084ae:	e6f4      	b.n	800829a <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80084b0:	f7fd f864 	bl	800557c <HAL_GetTick>
 80084b4:	1b80      	subs	r0, r0, r6
 80084b6:	2802      	cmp	r0, #2
 80084b8:	d9e5      	bls.n	8008486 <HAL_RCC_OscConfig+0x25a>
 80084ba:	e748      	b.n	800834e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084bc:	68eb      	ldr	r3, [r5, #12]
 80084be:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80084c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80084c6:	60eb      	str	r3, [r5, #12]
 80084c8:	e6e7      	b.n	800829a <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_CSI_DISABLE();
 80084ca:	682b      	ldr	r3, [r5, #0]
 80084cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80084d2:	f7fd f853 	bl	800557c <HAL_GetTick>
 80084d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80084d8:	682b      	ldr	r3, [r5, #0]
 80084da:	05d8      	lsls	r0, r3, #23
 80084dc:	f57f aedd 	bpl.w	800829a <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80084e0:	f7fd f84c 	bl	800557c <HAL_GetTick>
 80084e4:	1b80      	subs	r0, r0, r6
 80084e6:	2802      	cmp	r0, #2
 80084e8:	d9f6      	bls.n	80084d8 <HAL_RCC_OscConfig+0x2ac>
 80084ea:	e730      	b.n	800834e <HAL_RCC_OscConfig+0x122>
 80084ec:	58024400 	.word	0x58024400
 80084f0:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80084f4:	6963      	ldr	r3, [r4, #20]
 80084f6:	4d96      	ldr	r5, [pc, #600]	; (8008750 <HAL_RCC_OscConfig+0x524>)
 80084f8:	b183      	cbz	r3, 800851c <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_LSI_ENABLE();
 80084fa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80084fc:	f043 0301 	orr.w	r3, r3, #1
 8008500:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008502:	f7fd f83b 	bl	800557c <HAL_GetTick>
 8008506:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008508:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800850a:	079b      	lsls	r3, r3, #30
 800850c:	f53f aec9 	bmi.w	80082a2 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008510:	f7fd f834 	bl	800557c <HAL_GetTick>
 8008514:	1b80      	subs	r0, r0, r6
 8008516:	2802      	cmp	r0, #2
 8008518:	d9f6      	bls.n	8008508 <HAL_RCC_OscConfig+0x2dc>
 800851a:	e718      	b.n	800834e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800851c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800851e:	f023 0301 	bic.w	r3, r3, #1
 8008522:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008524:	f7fd f82a 	bl	800557c <HAL_GetTick>
 8008528:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800852a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800852c:	079f      	lsls	r7, r3, #30
 800852e:	f57f aeb8 	bpl.w	80082a2 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008532:	f7fd f823 	bl	800557c <HAL_GetTick>
 8008536:	1b80      	subs	r0, r0, r6
 8008538:	2802      	cmp	r0, #2
 800853a:	d9f6      	bls.n	800852a <HAL_RCC_OscConfig+0x2fe>
 800853c:	e707      	b.n	800834e <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800853e:	69a3      	ldr	r3, [r4, #24]
 8008540:	4d83      	ldr	r5, [pc, #524]	; (8008750 <HAL_RCC_OscConfig+0x524>)
 8008542:	b183      	cbz	r3, 8008566 <HAL_RCC_OscConfig+0x33a>
      __HAL_RCC_HSI48_ENABLE();
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800854a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800854c:	f7fd f816 	bl	800557c <HAL_GetTick>
 8008550:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008552:	682b      	ldr	r3, [r5, #0]
 8008554:	0498      	lsls	r0, r3, #18
 8008556:	f53f aea8 	bmi.w	80082aa <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800855a:	f7fd f80f 	bl	800557c <HAL_GetTick>
 800855e:	1b80      	subs	r0, r0, r6
 8008560:	2802      	cmp	r0, #2
 8008562:	d9f6      	bls.n	8008552 <HAL_RCC_OscConfig+0x326>
 8008564:	e6f3      	b.n	800834e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8008566:	682b      	ldr	r3, [r5, #0]
 8008568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800856c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800856e:	f7fd f805 	bl	800557c <HAL_GetTick>
 8008572:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008574:	682b      	ldr	r3, [r5, #0]
 8008576:	0499      	lsls	r1, r3, #18
 8008578:	f57f ae97 	bpl.w	80082aa <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800857c:	f7fc fffe 	bl	800557c <HAL_GetTick>
 8008580:	1b80      	subs	r0, r0, r6
 8008582:	2802      	cmp	r0, #2
 8008584:	d9f6      	bls.n	8008574 <HAL_RCC_OscConfig+0x348>
 8008586:	e6e2      	b.n	800834e <HAL_RCC_OscConfig+0x122>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008588:	f7fc fff8 	bl	800557c <HAL_GetTick>
 800858c:	1b80      	subs	r0, r0, r6
 800858e:	2864      	cmp	r0, #100	; 0x64
 8008590:	f67f ae96 	bls.w	80082c0 <HAL_RCC_OscConfig+0x94>
 8008594:	e6db      	b.n	800834e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008596:	b9b3      	cbnz	r3, 80085c6 <HAL_RCC_OscConfig+0x39a>
 8008598:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800859a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800859e:	f023 0301 	bic.w	r3, r3, #1
 80085a2:	672b      	str	r3, [r5, #112]	; 0x70
 80085a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80085a6:	f023 0304 	bic.w	r3, r3, #4
 80085aa:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80085ac:	f7fc ffe6 	bl	800557c <HAL_GetTick>
 80085b0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80085b4:	0798      	lsls	r0, r3, #30
 80085b6:	f57f ae9a 	bpl.w	80082ee <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085ba:	f7fc ffdf 	bl	800557c <HAL_GetTick>
 80085be:	1b80      	subs	r0, r0, r6
 80085c0:	42b8      	cmp	r0, r7
 80085c2:	d9f6      	bls.n	80085b2 <HAL_RCC_OscConfig+0x386>
 80085c4:	e6c3      	b.n	800834e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085c6:	2b05      	cmp	r3, #5
 80085c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80085ca:	d103      	bne.n	80085d4 <HAL_RCC_OscConfig+0x3a8>
 80085cc:	f043 0304 	orr.w	r3, r3, #4
 80085d0:	672b      	str	r3, [r5, #112]	; 0x70
 80085d2:	e67e      	b.n	80082d2 <HAL_RCC_OscConfig+0xa6>
 80085d4:	f023 0301 	bic.w	r3, r3, #1
 80085d8:	672b      	str	r3, [r5, #112]	; 0x70
 80085da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80085dc:	f023 0304 	bic.w	r3, r3, #4
 80085e0:	e67a      	b.n	80082d8 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085e2:	f7fc ffcb 	bl	800557c <HAL_GetTick>
 80085e6:	1bc0      	subs	r0, r0, r7
 80085e8:	42a8      	cmp	r0, r5
 80085ea:	f67f ae7c 	bls.w	80082e6 <HAL_RCC_OscConfig+0xba>
 80085ee:	e6ae      	b.n	800834e <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80085f0:	4d57      	ldr	r5, [pc, #348]	; (8008750 <HAL_RCC_OscConfig+0x524>)
 80085f2:	692b      	ldr	r3, [r5, #16]
 80085f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085f8:	2b18      	cmp	r3, #24
 80085fa:	d07a      	beq.n	80086f2 <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_PLL_DISABLE();
 80085fc:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085fe:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8008600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008604:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008606:	d167      	bne.n	80086d8 <HAL_RCC_OscConfig+0x4ac>
        tickstart = HAL_GetTick();
 8008608:	f7fc ffb8 	bl	800557c <HAL_GetTick>
 800860c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800860e:	682b      	ldr	r3, [r5, #0]
 8008610:	0199      	lsls	r1, r3, #6
 8008612:	d45b      	bmi.n	80086cc <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008614:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008616:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008618:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 800861c:	f023 0303 	bic.w	r3, r3, #3
 8008620:	4313      	orrs	r3, r2
 8008622:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008624:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008628:	62ab      	str	r3, [r5, #40]	; 0x28
 800862a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800862c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800862e:	3b01      	subs	r3, #1
 8008630:	3a01      	subs	r2, #1
 8008632:	025b      	lsls	r3, r3, #9
 8008634:	0412      	lsls	r2, r2, #16
 8008636:	b29b      	uxth	r3, r3
 8008638:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800863c:	4313      	orrs	r3, r2
 800863e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008640:	3a01      	subs	r2, #1
 8008642:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008646:	4313      	orrs	r3, r2
 8008648:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800864a:	3a01      	subs	r2, #1
 800864c:	0612      	lsls	r2, r2, #24
 800864e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008652:	4313      	orrs	r3, r2
 8008654:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8008656:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008658:	f023 0301 	bic.w	r3, r3, #1
 800865c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800865e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008660:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008666:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800866a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800866e:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008670:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008672:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008674:	f023 030c 	bic.w	r3, r3, #12
 8008678:	4313      	orrs	r3, r2
 800867a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800867c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800867e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008680:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008684:	4c32      	ldr	r4, [pc, #200]	; (8008750 <HAL_RCC_OscConfig+0x524>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008686:	4313      	orrs	r3, r2
 8008688:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800868a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800868c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008690:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008692:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008698:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800869a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800869c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086a0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80086a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086a4:	f043 0301 	orr.w	r3, r3, #1
 80086a8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80086aa:	682b      	ldr	r3, [r5, #0]
 80086ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80086b2:	f7fc ff63 	bl	800557c <HAL_GetTick>
 80086b6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	019a      	lsls	r2, r3, #6
 80086bc:	f53f ae1b 	bmi.w	80082f6 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086c0:	f7fc ff5c 	bl	800557c <HAL_GetTick>
 80086c4:	1b40      	subs	r0, r0, r5
 80086c6:	2802      	cmp	r0, #2
 80086c8:	d9f6      	bls.n	80086b8 <HAL_RCC_OscConfig+0x48c>
 80086ca:	e640      	b.n	800834e <HAL_RCC_OscConfig+0x122>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086cc:	f7fc ff56 	bl	800557c <HAL_GetTick>
 80086d0:	1b80      	subs	r0, r0, r6
 80086d2:	2802      	cmp	r0, #2
 80086d4:	d99b      	bls.n	800860e <HAL_RCC_OscConfig+0x3e2>
 80086d6:	e63a      	b.n	800834e <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 80086d8:	f7fc ff50 	bl	800557c <HAL_GetTick>
 80086dc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086de:	682b      	ldr	r3, [r5, #0]
 80086e0:	019b      	lsls	r3, r3, #6
 80086e2:	f57f ae08 	bpl.w	80082f6 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086e6:	f7fc ff49 	bl	800557c <HAL_GetTick>
 80086ea:	1b00      	subs	r0, r0, r4
 80086ec:	2802      	cmp	r0, #2
 80086ee:	d9f6      	bls.n	80086de <HAL_RCC_OscConfig+0x4b2>
 80086f0:	e62d      	b.n	800834e <HAL_RCC_OscConfig+0x122>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086f2:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80086f4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80086f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086f8:	f43f ae2a 	beq.w	8008350 <HAL_RCC_OscConfig+0x124>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086fc:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008700:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008702:	4281      	cmp	r1, r0
 8008704:	f47f ad95 	bne.w	8008232 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008708:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800870c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800870e:	428a      	cmp	r2, r1
 8008710:	f47f ad8f 	bne.w	8008232 <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008714:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008716:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800871a:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800871c:	4291      	cmp	r1, r2
 800871e:	f47f ad88 	bne.w	8008232 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008722:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008724:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8008728:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800872a:	4291      	cmp	r1, r2
 800872c:	f47f ad81 	bne.w	8008232 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008730:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008732:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8008736:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008738:	4291      	cmp	r1, r2
 800873a:	f47f ad7a 	bne.w	8008232 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800873e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008740:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008744:	3801      	subs	r0, #1
    return HAL_ERROR;
 8008746:	1a18      	subs	r0, r3, r0
 8008748:	bf18      	it	ne
 800874a:	2001      	movne	r0, #1
 800874c:	e600      	b.n	8008350 <HAL_RCC_OscConfig+0x124>
 800874e:	bf00      	nop
 8008750:	58024400 	.word	0x58024400

08008754 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008754:	4b46      	ldr	r3, [pc, #280]	; (8008870 <HAL_RCC_GetSysClockFreq+0x11c>)
 8008756:	691a      	ldr	r2, [r3, #16]
 8008758:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800875c:	2a10      	cmp	r2, #16
{
 800875e:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008760:	f000 8084 	beq.w	800886c <HAL_RCC_GetSysClockFreq+0x118>
 8008764:	2a18      	cmp	r2, #24
 8008766:	d00c      	beq.n	8008782 <HAL_RCC_GetSysClockFreq+0x2e>
 8008768:	b10a      	cbz	r2, 800876e <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800876a:	4842      	ldr	r0, [pc, #264]	; (8008874 <HAL_RCC_GetSysClockFreq+0x120>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800876c:	bd10      	pop	{r4, pc}
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	4841      	ldr	r0, [pc, #260]	; (8008878 <HAL_RCC_GetSysClockFreq+0x124>)
 8008772:	f012 0f20 	tst.w	r2, #32
 8008776:	d0f9      	beq.n	800876c <HAL_RCC_GetSysClockFreq+0x18>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800877e:	40d8      	lsrs	r0, r3
 8008780:	e7f4      	b.n	800876c <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008782:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008784:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008788:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800878c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 800878e:	2800      	cmp	r0, #0
 8008790:	d0ec      	beq.n	800876c <HAL_RCC_GetSysClockFreq+0x18>
 8008792:	ee07 0a90 	vmov	s15, r0
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008796:	f002 0201 	and.w	r2, r2, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800879a:	f3c4 00cc 	ubfx	r0, r4, #3, #13
 800879e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80087a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80087a6:	4342      	muls	r2, r0
 80087a8:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087ac:	f001 0203 	and.w	r2, r1, #3
      switch (pllsource)
 80087b0:	2a01      	cmp	r2, #1
 80087b2:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 80087b6:	d002      	beq.n	80087be <HAL_RCC_GetSysClockFreq+0x6a>
 80087b8:	d30f      	bcc.n	80087da <HAL_RCC_GetSysClockFreq+0x86>
 80087ba:	2a02      	cmp	r2, #2
 80087bc:	d048      	beq.n	8008850 <HAL_RCC_GetSysClockFreq+0xfc>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c4:	ee07 3a10 	vmov	s14, r3
 80087c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80087cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087d0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80087d4:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800887c <HAL_RCC_GetSysClockFreq+0x128>
 80087d8:	e037      	b.n	800884a <HAL_RCC_GetSysClockFreq+0xf6>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	0692      	lsls	r2, r2, #26
 80087de:	d527      	bpl.n	8008830 <HAL_RCC_GetSysClockFreq+0xdc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087e0:	6819      	ldr	r1, [r3, #0]
 80087e2:	4a25      	ldr	r2, [pc, #148]	; (8008878 <HAL_RCC_GetSysClockFreq+0x124>)
 80087e4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087ea:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f0:	ee07 2a10 	vmov	s14, r2
 80087f4:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80087f8:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80087fc:	ee06 3a90 	vmov	s13, r3
 8008800:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008804:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008808:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800880c:	4b18      	ldr	r3, [pc, #96]	; (8008870 <HAL_RCC_GetSysClockFreq+0x11c>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800880e:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008814:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008818:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800881a:	ee07 3a10 	vmov	s14, r3
 800881e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008822:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008826:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800882a:	ee17 0a90 	vmov	r0, s15
 800882e:	e79d      	b.n	800876c <HAL_RCC_GetSysClockFreq+0x18>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008836:	ee07 3a10 	vmov	s14, r3
 800883a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800883e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008842:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008846:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8008880 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800884a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800884e:	e7dd      	b.n	800880c <HAL_RCC_GetSysClockFreq+0xb8>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008856:	ee07 3a10 	vmov	s14, r3
 800885a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800885e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008862:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008866:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8008884 <HAL_RCC_GetSysClockFreq+0x130>
 800886a:	e7ee      	b.n	800884a <HAL_RCC_GetSysClockFreq+0xf6>
    sysclockfreq = HSE_VALUE;
 800886c:	4806      	ldr	r0, [pc, #24]	; (8008888 <HAL_RCC_GetSysClockFreq+0x134>)
 800886e:	e77d      	b.n	800876c <HAL_RCC_GetSysClockFreq+0x18>
 8008870:	58024400 	.word	0x58024400
 8008874:	003d0900 	.word	0x003d0900
 8008878:	03d09000 	.word	0x03d09000
 800887c:	4a742400 	.word	0x4a742400
 8008880:	4c742400 	.word	0x4c742400
 8008884:	4af42400 	.word	0x4af42400
 8008888:	007a1200 	.word	0x007a1200

0800888c <HAL_RCC_ClockConfig>:
{
 800888c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008890:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8008892:	4604      	mov	r4, r0
 8008894:	b910      	cbnz	r0, 800889c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8008896:	2001      	movs	r0, #1
}
 8008898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800889c:	4a88      	ldr	r2, [pc, #544]	; (8008ac0 <HAL_RCC_ClockConfig+0x234>)
 800889e:	6813      	ldr	r3, [r2, #0]
 80088a0:	f003 030f 	and.w	r3, r3, #15
 80088a4:	428b      	cmp	r3, r1
 80088a6:	f0c0 8093 	bcc.w	80089d0 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	075f      	lsls	r7, r3, #29
 80088ae:	f100 809b 	bmi.w	80089e8 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088b2:	071e      	lsls	r6, r3, #28
 80088b4:	d50b      	bpl.n	80088ce <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80088b6:	4983      	ldr	r1, [pc, #524]	; (8008ac4 <HAL_RCC_ClockConfig+0x238>)
 80088b8:	6966      	ldr	r6, [r4, #20]
 80088ba:	69c8      	ldr	r0, [r1, #28]
 80088bc:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80088c0:	4286      	cmp	r6, r0
 80088c2:	d904      	bls.n	80088ce <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80088c4:	69ca      	ldr	r2, [r1, #28]
 80088c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80088ca:	4332      	orrs	r2, r6
 80088cc:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088ce:	06d8      	lsls	r0, r3, #27
 80088d0:	d50b      	bpl.n	80088ea <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80088d2:	497c      	ldr	r1, [pc, #496]	; (8008ac4 <HAL_RCC_ClockConfig+0x238>)
 80088d4:	69a6      	ldr	r6, [r4, #24]
 80088d6:	69c8      	ldr	r0, [r1, #28]
 80088d8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80088dc:	4286      	cmp	r6, r0
 80088de:	d904      	bls.n	80088ea <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088e0:	69ca      	ldr	r2, [r1, #28]
 80088e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80088e6:	4332      	orrs	r2, r6
 80088e8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088ea:	0699      	lsls	r1, r3, #26
 80088ec:	d50b      	bpl.n	8008906 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088ee:	4975      	ldr	r1, [pc, #468]	; (8008ac4 <HAL_RCC_ClockConfig+0x238>)
 80088f0:	69e6      	ldr	r6, [r4, #28]
 80088f2:	6a08      	ldr	r0, [r1, #32]
 80088f4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80088f8:	4286      	cmp	r6, r0
 80088fa:	d904      	bls.n	8008906 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80088fc:	6a0a      	ldr	r2, [r1, #32]
 80088fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008902:	4332      	orrs	r2, r6
 8008904:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008906:	079a      	lsls	r2, r3, #30
 8008908:	d50b      	bpl.n	8008922 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800890a:	496e      	ldr	r1, [pc, #440]	; (8008ac4 <HAL_RCC_ClockConfig+0x238>)
 800890c:	68e6      	ldr	r6, [r4, #12]
 800890e:	6988      	ldr	r0, [r1, #24]
 8008910:	f000 000f 	and.w	r0, r0, #15
 8008914:	4286      	cmp	r6, r0
 8008916:	d904      	bls.n	8008922 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008918:	698a      	ldr	r2, [r1, #24]
 800891a:	f022 020f 	bic.w	r2, r2, #15
 800891e:	4332      	orrs	r2, r6
 8008920:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008922:	07df      	lsls	r7, r3, #31
 8008924:	d46e      	bmi.n	8008a04 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	079e      	lsls	r6, r3, #30
 800892a:	f100 80a1 	bmi.w	8008a70 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800892e:	4964      	ldr	r1, [pc, #400]	; (8008ac0 <HAL_RCC_ClockConfig+0x234>)
 8008930:	680a      	ldr	r2, [r1, #0]
 8008932:	f002 020f 	and.w	r2, r2, #15
 8008936:	42aa      	cmp	r2, r5
 8008938:	f200 80a8 	bhi.w	8008a8c <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800893c:	0758      	lsls	r0, r3, #29
 800893e:	f100 80b1 	bmi.w	8008aa4 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008942:	0719      	lsls	r1, r3, #28
 8008944:	d50b      	bpl.n	800895e <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008946:	495f      	ldr	r1, [pc, #380]	; (8008ac4 <HAL_RCC_ClockConfig+0x238>)
 8008948:	6965      	ldr	r5, [r4, #20]
 800894a:	69c8      	ldr	r0, [r1, #28]
 800894c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008950:	4285      	cmp	r5, r0
 8008952:	d204      	bcs.n	800895e <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008954:	69ca      	ldr	r2, [r1, #28]
 8008956:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800895a:	432a      	orrs	r2, r5
 800895c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800895e:	06da      	lsls	r2, r3, #27
 8008960:	d50b      	bpl.n	800897a <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008962:	4958      	ldr	r1, [pc, #352]	; (8008ac4 <HAL_RCC_ClockConfig+0x238>)
 8008964:	69a5      	ldr	r5, [r4, #24]
 8008966:	69c8      	ldr	r0, [r1, #28]
 8008968:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800896c:	4285      	cmp	r5, r0
 800896e:	d204      	bcs.n	800897a <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008970:	69ca      	ldr	r2, [r1, #28]
 8008972:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008976:	432a      	orrs	r2, r5
 8008978:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800897a:	069b      	lsls	r3, r3, #26
 800897c:	d50b      	bpl.n	8008996 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800897e:	4a51      	ldr	r2, [pc, #324]	; (8008ac4 <HAL_RCC_ClockConfig+0x238>)
 8008980:	69e0      	ldr	r0, [r4, #28]
 8008982:	6a11      	ldr	r1, [r2, #32]
 8008984:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8008988:	4288      	cmp	r0, r1
 800898a:	d204      	bcs.n	8008996 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800898c:	6a13      	ldr	r3, [r2, #32]
 800898e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008992:	4303      	orrs	r3, r0
 8008994:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008996:	f7ff fedd 	bl	8008754 <HAL_RCC_GetSysClockFreq>
 800899a:	494a      	ldr	r1, [pc, #296]	; (8008ac4 <HAL_RCC_ClockConfig+0x238>)
 800899c:	4a4a      	ldr	r2, [pc, #296]	; (8008ac8 <HAL_RCC_ClockConfig+0x23c>)
 800899e:	698b      	ldr	r3, [r1, #24]
 80089a0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80089a4:	5cd3      	ldrb	r3, [r2, r3]
 80089a6:	f003 031f 	and.w	r3, r3, #31
 80089aa:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089ac:	698b      	ldr	r3, [r1, #24]
 80089ae:	f003 030f 	and.w	r3, r3, #15
 80089b2:	5cd3      	ldrb	r3, [r2, r3]
 80089b4:	4a45      	ldr	r2, [pc, #276]	; (8008acc <HAL_RCC_ClockConfig+0x240>)
 80089b6:	f003 031f 	and.w	r3, r3, #31
 80089ba:	fa20 f303 	lsr.w	r3, r0, r3
 80089be:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80089c0:	4b43      	ldr	r3, [pc, #268]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 80089c2:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80089c4:	4b43      	ldr	r3, [pc, #268]	; (8008ad4 <HAL_RCC_ClockConfig+0x248>)
}
 80089c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80089ca:	6818      	ldr	r0, [r3, #0]
 80089cc:	f7fa bc22 	b.w	8003214 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089d0:	6813      	ldr	r3, [r2, #0]
 80089d2:	f023 030f 	bic.w	r3, r3, #15
 80089d6:	430b      	orrs	r3, r1
 80089d8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089da:	6813      	ldr	r3, [r2, #0]
 80089dc:	f003 030f 	and.w	r3, r3, #15
 80089e0:	428b      	cmp	r3, r1
 80089e2:	f47f af58 	bne.w	8008896 <HAL_RCC_ClockConfig+0xa>
 80089e6:	e760      	b.n	80088aa <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80089e8:	4936      	ldr	r1, [pc, #216]	; (8008ac4 <HAL_RCC_ClockConfig+0x238>)
 80089ea:	6926      	ldr	r6, [r4, #16]
 80089ec:	6988      	ldr	r0, [r1, #24]
 80089ee:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80089f2:	4286      	cmp	r6, r0
 80089f4:	f67f af5d 	bls.w	80088b2 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80089f8:	698a      	ldr	r2, [r1, #24]
 80089fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80089fe:	4332      	orrs	r2, r6
 8008a00:	618a      	str	r2, [r1, #24]
 8008a02:	e756      	b.n	80088b2 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008a04:	4b2f      	ldr	r3, [pc, #188]	; (8008ac4 <HAL_RCC_ClockConfig+0x238>)
 8008a06:	68a1      	ldr	r1, [r4, #8]
 8008a08:	699a      	ldr	r2, [r3, #24]
 8008a0a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a12:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a14:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a16:	2902      	cmp	r1, #2
 8008a18:	d11d      	bne.n	8008a56 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a1a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a1e:	f43f af3a 	beq.w	8008896 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a22:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a24:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a28:	4e26      	ldr	r6, [pc, #152]	; (8008ac4 <HAL_RCC_ClockConfig+0x238>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a2a:	f022 0207 	bic.w	r2, r2, #7
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8008a32:	f7fc fda3 	bl	800557c <HAL_GetTick>
 8008a36:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a38:	6933      	ldr	r3, [r6, #16]
 8008a3a:	6862      	ldr	r2, [r4, #4]
 8008a3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a40:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8008a44:	f43f af6f 	beq.w	8008926 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a48:	f7fc fd98 	bl	800557c <HAL_GetTick>
 8008a4c:	1bc0      	subs	r0, r0, r7
 8008a4e:	4540      	cmp	r0, r8
 8008a50:	d9f2      	bls.n	8008a38 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8008a52:	2003      	movs	r0, #3
 8008a54:	e720      	b.n	8008898 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a56:	2903      	cmp	r1, #3
 8008a58:	d102      	bne.n	8008a60 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a5a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8008a5e:	e7de      	b.n	8008a1e <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a60:	2901      	cmp	r1, #1
 8008a62:	d102      	bne.n	8008a6a <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a64:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008a68:	e7d9      	b.n	8008a1e <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a6a:	f012 0f04 	tst.w	r2, #4
 8008a6e:	e7d6      	b.n	8008a1e <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a70:	4914      	ldr	r1, [pc, #80]	; (8008ac4 <HAL_RCC_ClockConfig+0x238>)
 8008a72:	68e6      	ldr	r6, [r4, #12]
 8008a74:	6988      	ldr	r0, [r1, #24]
 8008a76:	f000 000f 	and.w	r0, r0, #15
 8008a7a:	4286      	cmp	r6, r0
 8008a7c:	f4bf af57 	bcs.w	800892e <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a80:	698a      	ldr	r2, [r1, #24]
 8008a82:	f022 020f 	bic.w	r2, r2, #15
 8008a86:	4332      	orrs	r2, r6
 8008a88:	618a      	str	r2, [r1, #24]
 8008a8a:	e750      	b.n	800892e <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a8c:	680a      	ldr	r2, [r1, #0]
 8008a8e:	f022 020f 	bic.w	r2, r2, #15
 8008a92:	432a      	orrs	r2, r5
 8008a94:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a96:	680a      	ldr	r2, [r1, #0]
 8008a98:	f002 020f 	and.w	r2, r2, #15
 8008a9c:	42aa      	cmp	r2, r5
 8008a9e:	f47f aefa 	bne.w	8008896 <HAL_RCC_ClockConfig+0xa>
 8008aa2:	e74b      	b.n	800893c <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008aa4:	4907      	ldr	r1, [pc, #28]	; (8008ac4 <HAL_RCC_ClockConfig+0x238>)
 8008aa6:	6925      	ldr	r5, [r4, #16]
 8008aa8:	6988      	ldr	r0, [r1, #24]
 8008aaa:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008aae:	4285      	cmp	r5, r0
 8008ab0:	f4bf af47 	bcs.w	8008942 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ab4:	698a      	ldr	r2, [r1, #24]
 8008ab6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008aba:	432a      	orrs	r2, r5
 8008abc:	618a      	str	r2, [r1, #24]
 8008abe:	e740      	b.n	8008942 <HAL_RCC_ClockConfig+0xb6>
 8008ac0:	52002000 	.word	0x52002000
 8008ac4:	58024400 	.word	0x58024400
 8008ac8:	08014dc8 	.word	0x08014dc8
 8008acc:	24000004 	.word	0x24000004
 8008ad0:	24000000 	.word	0x24000000
 8008ad4:	24000024 	.word	0x24000024

08008ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ad8:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ada:	f7ff fe3b 	bl	8008754 <HAL_RCC_GetSysClockFreq>
 8008ade:	4a0b      	ldr	r2, [pc, #44]	; (8008b0c <HAL_RCC_GetHCLKFreq+0x34>)
 8008ae0:	490b      	ldr	r1, [pc, #44]	; (8008b10 <HAL_RCC_GetHCLKFreq+0x38>)
 8008ae2:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ae4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ae6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008aea:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008aee:	5ccb      	ldrb	r3, [r1, r3]
 8008af0:	f003 031f 	and.w	r3, r3, #31
 8008af4:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008af8:	5c88      	ldrb	r0, [r1, r2]
 8008afa:	4a06      	ldr	r2, [pc, #24]	; (8008b14 <HAL_RCC_GetHCLKFreq+0x3c>)
 8008afc:	f000 001f 	and.w	r0, r0, #31
 8008b00:	fa23 f000 	lsr.w	r0, r3, r0
 8008b04:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b06:	4a04      	ldr	r2, [pc, #16]	; (8008b18 <HAL_RCC_GetHCLKFreq+0x40>)
 8008b08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008b0a:	bd08      	pop	{r3, pc}
 8008b0c:	58024400 	.word	0x58024400
 8008b10:	08014dc8 	.word	0x08014dc8
 8008b14:	24000004 	.word	0x24000004
 8008b18:	24000000 	.word	0x24000000

08008b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b1c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008b1e:	f7ff ffdb 	bl	8008ad8 <HAL_RCC_GetHCLKFreq>
 8008b22:	4b05      	ldr	r3, [pc, #20]	; (8008b38 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008b24:	4a05      	ldr	r2, [pc, #20]	; (8008b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008b2c:	5cd3      	ldrb	r3, [r2, r3]
 8008b2e:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008b32:	40d8      	lsrs	r0, r3
 8008b34:	bd08      	pop	{r3, pc}
 8008b36:	bf00      	nop
 8008b38:	58024400 	.word	0x58024400
 8008b3c:	08014dc8 	.word	0x08014dc8

08008b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b40:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008b42:	f7ff ffc9 	bl	8008ad8 <HAL_RCC_GetHCLKFreq>
 8008b46:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008b48:	4a05      	ldr	r2, [pc, #20]	; (8008b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b4a:	69db      	ldr	r3, [r3, #28]
 8008b4c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008b50:	5cd3      	ldrb	r3, [r2, r3]
 8008b52:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008b56:	40d8      	lsrs	r0, r3
 8008b58:	bd08      	pop	{r3, pc}
 8008b5a:	bf00      	nop
 8008b5c:	58024400 	.word	0x58024400
 8008b60:	08014dc8 	.word	0x08014dc8

08008b64 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008b64:	233f      	movs	r3, #63	; 0x3f
 8008b66:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008b68:	4b11      	ldr	r3, [pc, #68]	; (8008bb0 <HAL_RCC_GetClockConfig+0x4c>)
 8008b6a:	691a      	ldr	r2, [r3, #16]
 8008b6c:	f002 0207 	and.w	r2, r2, #7
 8008b70:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008b72:	699a      	ldr	r2, [r3, #24]
 8008b74:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8008b78:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008b7a:	699a      	ldr	r2, [r3, #24]
 8008b7c:	f002 020f 	and.w	r2, r2, #15
 8008b80:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008b82:	699a      	ldr	r2, [r3, #24]
 8008b84:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008b88:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008b8a:	69da      	ldr	r2, [r3, #28]
 8008b8c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008b90:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008b92:	69da      	ldr	r2, [r3, #28]
 8008b94:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008b98:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
 8008b9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ba0:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008ba2:	4b04      	ldr	r3, [pc, #16]	; (8008bb4 <HAL_RCC_GetClockConfig+0x50>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 030f 	and.w	r3, r3, #15
 8008baa:	600b      	str	r3, [r1, #0]
}
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	58024400 	.word	0x58024400
 8008bb4:	52002000 	.word	0x52002000

08008bb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bba:	4c3a      	ldr	r4, [pc, #232]	; (8008ca4 <RCCEx_PLL2_Config+0xec>)
{
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008bc2:	f003 0303 	and.w	r3, r3, #3
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d069      	beq.n	8008c9e <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008bd0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bd2:	f7fc fcd3 	bl	800557c <HAL_GetTick>
 8008bd6:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	011a      	lsls	r2, r3, #4
 8008bdc:	d44b      	bmi.n	8008c76 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008bde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008be0:	6832      	ldr	r2, [r6, #0]
 8008be2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008be6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008bea:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bec:	68b3      	ldr	r3, [r6, #8]
 8008bee:	68f2      	ldr	r2, [r6, #12]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	3a01      	subs	r2, #1
 8008bf4:	025b      	lsls	r3, r3, #9
 8008bf6:	0412      	lsls	r2, r2, #16
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	6872      	ldr	r2, [r6, #4]
 8008c02:	3a01      	subs	r2, #1
 8008c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	6932      	ldr	r2, [r6, #16]
 8008c0c:	3a01      	subs	r2, #1
 8008c0e:	0612      	lsls	r2, r2, #24
 8008c10:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008c14:	4313      	orrs	r3, r2
 8008c16:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008c18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c1a:	6972      	ldr	r2, [r6, #20]
 8008c1c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c20:	4313      	orrs	r3, r2
 8008c22:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008c24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c26:	69b2      	ldr	r2, [r6, #24]
 8008c28:	f023 0320 	bic.w	r3, r3, #32
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008c30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c32:	f023 0310 	bic.w	r3, r3, #16
 8008c36:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c3a:	69f2      	ldr	r2, [r6, #28]
 8008c3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c40:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008c44:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008c48:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008c4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c4c:	f043 0310 	orr.w	r3, r3, #16
 8008c50:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008c54:	b9b5      	cbnz	r5, 8008c84 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c5a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008c5c:	4c11      	ldr	r4, [pc, #68]	; (8008ca4 <RCCEx_PLL2_Config+0xec>)
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c64:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c66:	f7fc fc89 	bl	800557c <HAL_GetTick>
 8008c6a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c6c:	6823      	ldr	r3, [r4, #0]
 8008c6e:	011b      	lsls	r3, r3, #4
 8008c70:	d50f      	bpl.n	8008c92 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8008c72:	2000      	movs	r0, #0
 8008c74:	e005      	b.n	8008c82 <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c76:	f7fc fc81 	bl	800557c <HAL_GetTick>
 8008c7a:	1bc0      	subs	r0, r0, r7
 8008c7c:	2802      	cmp	r0, #2
 8008c7e:	d9ab      	bls.n	8008bd8 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8008c80:	2003      	movs	r0, #3
}
 8008c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8008c84:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008c86:	bf0c      	ite	eq
 8008c88:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c8c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008c90:	e7e3      	b.n	8008c5a <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c92:	f7fc fc73 	bl	800557c <HAL_GetTick>
 8008c96:	1b40      	subs	r0, r0, r5
 8008c98:	2802      	cmp	r0, #2
 8008c9a:	d9e7      	bls.n	8008c6c <RCCEx_PLL2_Config+0xb4>
 8008c9c:	e7f0      	b.n	8008c80 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8008c9e:	2001      	movs	r0, #1
 8008ca0:	e7ef      	b.n	8008c82 <RCCEx_PLL2_Config+0xca>
 8008ca2:	bf00      	nop
 8008ca4:	58024400 	.word	0x58024400

08008ca8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008caa:	4c3a      	ldr	r4, [pc, #232]	; (8008d94 <RCCEx_PLL3_Config+0xec>)
{
 8008cac:	4606      	mov	r6, r0
 8008cae:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008cb2:	f003 0303 	and.w	r3, r3, #3
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d069      	beq.n	8008d8e <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cc0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cc2:	f7fc fc5b 	bl	800557c <HAL_GetTick>
 8008cc6:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	009a      	lsls	r2, r3, #2
 8008ccc:	d44b      	bmi.n	8008d66 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008cce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008cd0:	6832      	ldr	r2, [r6, #0]
 8008cd2:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8008cd6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008cda:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cdc:	68b3      	ldr	r3, [r6, #8]
 8008cde:	68f2      	ldr	r2, [r6, #12]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	3a01      	subs	r2, #1
 8008ce4:	025b      	lsls	r3, r3, #9
 8008ce6:	0412      	lsls	r2, r2, #16
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	6872      	ldr	r2, [r6, #4]
 8008cf2:	3a01      	subs	r2, #1
 8008cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	6932      	ldr	r2, [r6, #16]
 8008cfc:	3a01      	subs	r2, #1
 8008cfe:	0612      	lsls	r2, r2, #24
 8008d00:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008d04:	4313      	orrs	r3, r2
 8008d06:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008d08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d0a:	6972      	ldr	r2, [r6, #20]
 8008d0c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008d10:	4313      	orrs	r3, r2
 8008d12:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008d14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d16:	69b2      	ldr	r2, [r6, #24]
 8008d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008d20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d26:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008d2a:	69f2      	ldr	r2, [r6, #28]
 8008d2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008d34:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008d38:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d40:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008d44:	b9b5      	cbnz	r5, 8008d74 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d4a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d4c:	4c11      	ldr	r4, [pc, #68]	; (8008d94 <RCCEx_PLL3_Config+0xec>)
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d54:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d56:	f7fc fc11 	bl	800557c <HAL_GetTick>
 8008d5a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	d50f      	bpl.n	8008d82 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8008d62:	2000      	movs	r0, #0
 8008d64:	e005      	b.n	8008d72 <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d66:	f7fc fc09 	bl	800557c <HAL_GetTick>
 8008d6a:	1bc0      	subs	r0, r0, r7
 8008d6c:	2802      	cmp	r0, #2
 8008d6e:	d9ab      	bls.n	8008cc8 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8008d70:	2003      	movs	r0, #3
}
 8008d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d74:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d76:	bf0c      	ite	eq
 8008d78:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d7c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008d80:	e7e3      	b.n	8008d4a <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d82:	f7fc fbfb 	bl	800557c <HAL_GetTick>
 8008d86:	1b40      	subs	r0, r0, r5
 8008d88:	2802      	cmp	r0, #2
 8008d8a:	d9e7      	bls.n	8008d5c <RCCEx_PLL3_Config+0xb4>
 8008d8c:	e7f0      	b.n	8008d70 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8008d8e:	2001      	movs	r0, #1
 8008d90:	e7ef      	b.n	8008d72 <RCCEx_PLL3_Config+0xca>
 8008d92:	bf00      	nop
 8008d94:	58024400 	.word	0x58024400

08008d98 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d9c:	6806      	ldr	r6, [r0, #0]
{
 8008d9e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008da0:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8008da4:	d023      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008da6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dac:	d018      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8008dae:	d802      	bhi.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8008db0:	b183      	cbz	r3, 8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8008db2:	2601      	movs	r6, #1
 8008db4:	e01b      	b.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008db6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dba:	d023      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8008dbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008dc0:	d1f7      	bne.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008dc2:	4a9f      	ldr	r2, [pc, #636]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008dc4:	2600      	movs	r6, #0
 8008dc6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008dc8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008dca:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008dce:	430b      	orrs	r3, r1
 8008dd0:	6513      	str	r3, [r2, #80]	; 0x50
 8008dd2:	e00c      	b.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dd4:	4a9a      	ldr	r2, [pc, #616]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008dd6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ddc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008dde:	e7f0      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008de0:	2102      	movs	r1, #2
 8008de2:	3004      	adds	r0, #4
 8008de4:	f7ff fee8 	bl	8008bb8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008de8:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d0e9      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	05dd      	lsls	r5, r3, #23
 8008df2:	d534      	bpl.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008df4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008df6:	2b04      	cmp	r3, #4
 8008df8:	d830      	bhi.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8008dfa:	e8df f003 	tbb	[pc, r3]
 8008dfe:	0f08      	.short	0x0f08
 8008e00:	0d29      	.short	0x0d29
 8008e02:	0d          	.byte	0x0d
 8008e03:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e04:	2102      	movs	r1, #2
 8008e06:	3024      	adds	r0, #36	; 0x24
 8008e08:	f7ff ff4e 	bl	8008ca8 <RCCEx_PLL3_Config>
 8008e0c:	e7ec      	b.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e0e:	4a8c      	ldr	r2, [pc, #560]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008e10:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e16:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8008e18:	4635      	mov	r5, r6
 8008e1a:	e004      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	1d20      	adds	r0, r4, #4
 8008e20:	f7ff feca 	bl	8008bb8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e24:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008e26:	b9e5      	cbnz	r5, 8008e62 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e28:	4a85      	ldr	r2, [pc, #532]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008e2a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008e2c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008e2e:	f023 0307 	bic.w	r3, r3, #7
 8008e32:	430b      	orrs	r3, r1
 8008e34:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	0598      	lsls	r0, r3, #22
 8008e3a:	d521      	bpl.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008e3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e3e:	2b80      	cmp	r3, #128	; 0x80
 8008e40:	d03b      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x122>
 8008e42:	d810      	bhi.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8008e44:	b36b      	cbz	r3, 8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8008e46:	2b40      	cmp	r3, #64	; 0x40
 8008e48:	d031      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x116>
      ret = HAL_ERROR;
 8008e4a:	2601      	movs	r6, #1
 8008e4c:	4635      	mov	r5, r6
 8008e4e:	e017      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e50:	2100      	movs	r1, #0
 8008e52:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008e56:	f7ff ff27 	bl	8008ca8 <RCCEx_PLL3_Config>
 8008e5a:	e7e3      	b.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = HAL_ERROR;
 8008e5c:	2601      	movs	r6, #1
 8008e5e:	4635      	mov	r5, r6
 8008e60:	e7e9      	b.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8008e62:	462e      	mov	r6, r5
 8008e64:	e7e7      	b.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008e66:	2bc0      	cmp	r3, #192	; 0xc0
 8008e68:	d002      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8008e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e6e:	d1ec      	bne.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xb2>
    if(ret == HAL_OK)
 8008e70:	bb4d      	cbnz	r5, 8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008e72:	4a73      	ldr	r2, [pc, #460]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008e74:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008e76:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008e78:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8008e7c:	430b      	orrs	r3, r1
 8008e7e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	0559      	lsls	r1, r3, #21
 8008e84:	d530      	bpl.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008e86:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8008e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e8e:	d047      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8008e90:	d81b      	bhi.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x132>
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d038      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8008e96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e9a:	d03b      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = HAL_ERROR;
 8008e9c:	2601      	movs	r6, #1
 8008e9e:	4635      	mov	r5, r6
 8008ea0:	e022      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ea2:	4a67      	ldr	r2, [pc, #412]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008ea4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008eaa:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008eac:	e7e0      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008eae:	2100      	movs	r1, #0
 8008eb0:	1d20      	adds	r0, r4, #4
 8008eb2:	f7ff fe81 	bl	8008bb8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008eb6:	4605      	mov	r5, r0
      break;
 8008eb8:	e7da      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008eba:	2100      	movs	r1, #0
 8008ebc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008ec0:	f7ff fef2 	bl	8008ca8 <RCCEx_PLL3_Config>
 8008ec4:	e7f7      	b.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8008ec6:	462e      	mov	r6, r5
 8008ec8:	e7da      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008eca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ece:	d002      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8008ed0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ed4:	d1e2      	bne.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(ret == HAL_OK)
 8008ed6:	bb4d      	cbnz	r5, 8008f2c <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008ed8:	4a59      	ldr	r2, [pc, #356]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008eda:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8008ede:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008ee0:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8008ee4:	430b      	orrs	r3, r1
 8008ee6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	051a      	lsls	r2, r3, #20
 8008eec:	d52f      	bpl.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008eee:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8008ef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ef6:	d041      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008ef8:	d81a      	bhi.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008efa:	b39b      	cbz	r3, 8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f00:	d036      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      ret = HAL_ERROR;
 8008f02:	2601      	movs	r6, #1
 8008f04:	4635      	mov	r5, r6
 8008f06:	e022      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f08:	4a4d      	ldr	r2, [pc, #308]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008f0a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f10:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008f12:	e7e0      	b.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f14:	2100      	movs	r1, #0
 8008f16:	1d20      	adds	r0, r4, #4
 8008f18:	f7ff fe4e 	bl	8008bb8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f1c:	4605      	mov	r5, r0
      break;
 8008f1e:	e7da      	b.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f20:	2100      	movs	r1, #0
 8008f22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008f26:	f7ff febf 	bl	8008ca8 <RCCEx_PLL3_Config>
 8008f2a:	e7f7      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x184>
 8008f2c:	462e      	mov	r6, r5
 8008f2e:	e7db      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008f30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f34:	d002      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008f36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f3a:	d1e2      	bne.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    if(ret == HAL_OK)
 8008f3c:	bb25      	cbnz	r5, 8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008f3e:	4a40      	ldr	r2, [pc, #256]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008f40:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8008f44:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008f46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008f4a:	430b      	orrs	r3, r1
 8008f4c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	019b      	lsls	r3, r3, #6
 8008f52:	d527      	bpl.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->QspiClockSelection)
 8008f54:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008f56:	2b10      	cmp	r3, #16
 8008f58:	d033      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008f5a:	d817      	bhi.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8008f5c:	b1d3      	cbz	r3, 8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = HAL_ERROR;
 8008f5e:	2601      	movs	r6, #1
 8008f60:	4635      	mov	r5, r6
 8008f62:	e01f      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f64:	4a36      	ldr	r2, [pc, #216]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008f66:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f6c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008f6e:	e7e5      	b.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f70:	2100      	movs	r1, #0
 8008f72:	1d20      	adds	r0, r4, #4
 8008f74:	f7ff fe20 	bl	8008bb8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f78:	4605      	mov	r5, r0
      break;
 8008f7a:	e7df      	b.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008f82:	f7ff fe91 	bl	8008ca8 <RCCEx_PLL3_Config>
 8008f86:	e7f7      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8008f88:	462e      	mov	r6, r5
 8008f8a:	e7e0      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->QspiClockSelection)
 8008f8c:	2b20      	cmp	r3, #32
 8008f8e:	d01e      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x236>
 8008f90:	2b30      	cmp	r3, #48	; 0x30
 8008f92:	d1e4      	bne.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    if(ret == HAL_OK)
 8008f94:	bb0d      	cbnz	r5, 8008fda <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008f96:	4a2a      	ldr	r2, [pc, #168]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008f98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008f9a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008f9c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008fa0:	430b      	orrs	r3, r1
 8008fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008fa4:	6823      	ldr	r3, [r4, #0]
 8008fa6:	04df      	lsls	r7, r3, #19
 8008fa8:	d527      	bpl.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x262>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008faa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fb0:	d03e      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008fb2:	d814      	bhi.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x246>
 8008fb4:	b383      	cbz	r3, 8009018 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8008fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fba:	d033      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = HAL_ERROR;
 8008fbc:	2601      	movs	r6, #1
 8008fbe:	4635      	mov	r5, r6
 8008fc0:	e01b      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fc2:	4a1f      	ldr	r2, [pc, #124]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008fc4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fca:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008fcc:	e7e2      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008fce:	2102      	movs	r1, #2
 8008fd0:	1d20      	adds	r0, r4, #4
 8008fd2:	f7ff fdf1 	bl	8008bb8 <RCCEx_PLL2_Config>
 8008fd6:	4605      	mov	r5, r0
      break;
 8008fd8:	e7dc      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8008fda:	462e      	mov	r6, r5
 8008fdc:	e7e2      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008fde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008fe2:	d002      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x252>
 8008fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fe8:	d1e8      	bne.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 8008fea:	bb3d      	cbnz	r5, 800903c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008fec:	4a14      	ldr	r2, [pc, #80]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008fee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008ff0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ff6:	430b      	orrs	r3, r1
 8008ff8:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	0498      	lsls	r0, r3, #18
 8008ffe:	d532      	bpl.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009000:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009006:	d044      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8009008:	d81c      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800900a:	b323      	cbz	r3, 8009056 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800900c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009010:	d039      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = HAL_ERROR;
 8009012:	2601      	movs	r6, #1
 8009014:	4635      	mov	r5, r6
 8009016:	e026      	b.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009018:	4a09      	ldr	r2, [pc, #36]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800901a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800901c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009020:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009022:	e7e2      	b.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009024:	2100      	movs	r1, #0
 8009026:	1d20      	adds	r0, r4, #4
 8009028:	f7ff fdc6 	bl	8008bb8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800902c:	4605      	mov	r5, r0
      break;
 800902e:	e7dc      	b.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009030:	2100      	movs	r1, #0
 8009032:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009036:	f7ff fe37 	bl	8008ca8 <RCCEx_PLL3_Config>
 800903a:	e7f7      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x294>
 800903c:	462e      	mov	r6, r5
 800903e:	e7dc      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009040:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 8009044:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009048:	d005      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800904a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800904e:	d002      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8009050:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009054:	d1dd      	bne.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(ret == HAL_OK)
 8009056:	bb15      	cbnz	r5, 800909e <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009058:	4aa0      	ldr	r2, [pc, #640]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800905a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800905c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800905e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8009062:	430b      	orrs	r3, r1
 8009064:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	0459      	lsls	r1, r3, #17
 800906a:	d52d      	bpl.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Spi6ClockSelection)
 800906c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8009070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009074:	d04b      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009076:	d814      	bhi.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8009078:	b1e3      	cbz	r3, 80090b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800907a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800907e:	d040      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      ret = HAL_ERROR;
 8009080:	2601      	movs	r6, #1
 8009082:	4635      	mov	r5, r6
 8009084:	e020      	b.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009086:	2101      	movs	r1, #1
 8009088:	1d20      	adds	r0, r4, #4
 800908a:	f7ff fd95 	bl	8008bb8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800908e:	4605      	mov	r5, r0
      break;
 8009090:	e7e1      	b.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009092:	2101      	movs	r1, #1
 8009094:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009098:	f7ff fe06 	bl	8008ca8 <RCCEx_PLL3_Config>
 800909c:	e7f7      	b.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 800909e:	462e      	mov	r6, r5
 80090a0:	e7e1      	b.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi6ClockSelection)
 80090a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090a6:	d005      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80090a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090ac:	d002      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80090ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090b2:	d1e5      	bne.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if(ret == HAL_OK)
 80090b4:	2d00      	cmp	r5, #0
 80090b6:	d130      	bne.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x382>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80090b8:	4a88      	ldr	r2, [pc, #544]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80090ba:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80090be:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80090c0:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80090c4:	430b      	orrs	r3, r1
 80090c6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	041a      	lsls	r2, r3, #16
 80090cc:	d50f      	bpl.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->FdcanClockSelection)
 80090ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80090d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090d4:	d023      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x386>
 80090d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090da:	d026      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x392>
 80090dc:	bb5b      	cbnz	r3, 8009136 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    if(ret == HAL_OK)
 80090de:	bb6d      	cbnz	r5, 800913c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80090e0:	4a7e      	ldr	r2, [pc, #504]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80090e2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80090e4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80090e6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80090ea:	430b      	orrs	r3, r1
 80090ec:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	01db      	lsls	r3, r3, #7
 80090f2:	d533      	bpl.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch(PeriphClkInit->FmcClockSelection)
 80090f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d874      	bhi.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 80090fa:	e8df f003 	tbb	[pc, r3]
 80090fe:	2126      	.short	0x2126
 8009100:	266d      	.short	0x266d
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009102:	2101      	movs	r1, #1
 8009104:	1d20      	adds	r0, r4, #4
 8009106:	f7ff fd57 	bl	8008bb8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800910a:	4605      	mov	r5, r0
      break;
 800910c:	e7d2      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800910e:	2101      	movs	r1, #1
 8009110:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009114:	f7ff fdc8 	bl	8008ca8 <RCCEx_PLL3_Config>
 8009118:	e7f7      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800911a:	462e      	mov	r6, r5
 800911c:	e7d4      	b.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800911e:	4a6f      	ldr	r2, [pc, #444]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009120:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009126:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009128:	e7d9      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800912a:	2101      	movs	r1, #1
 800912c:	1d20      	adds	r0, r4, #4
 800912e:	f7ff fd43 	bl	8008bb8 <RCCEx_PLL2_Config>
 8009132:	4605      	mov	r5, r0
      break;
 8009134:	e7d3      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = HAL_ERROR;
 8009136:	2601      	movs	r6, #1
 8009138:	4635      	mov	r5, r6
 800913a:	e7d8      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x356>
 800913c:	462e      	mov	r6, r5
 800913e:	e7d6      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009140:	4a66      	ldr	r2, [pc, #408]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009142:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009148:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800914a:	2d00      	cmp	r5, #0
 800914c:	d14d      	bne.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800914e:	4a63      	ldr	r2, [pc, #396]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009150:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009152:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009154:	f023 0303 	bic.w	r3, r3, #3
 8009158:	430b      	orrs	r3, r1
 800915a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	025f      	lsls	r7, r3, #9
 8009160:	d54d      	bpl.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x466>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009162:	4f5f      	ldr	r7, [pc, #380]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800916a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800916c:	f7fc fa06 	bl	800557c <HAL_GetTick>
 8009170:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	05d8      	lsls	r0, r3, #23
 8009176:	d53a      	bpl.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x456>
    if(ret == HAL_OK)
 8009178:	2d00      	cmp	r5, #0
 800917a:	d161      	bne.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800917c:	4b57      	ldr	r3, [pc, #348]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800917e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8009182:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009184:	4042      	eors	r2, r0
 8009186:	f412 7f40 	tst.w	r2, #768	; 0x300
 800918a:	d00b      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800918c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800918e:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009190:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009194:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8009198:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800919a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800919c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80091a0:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80091a2:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80091a4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80091a8:	d036      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091aa:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80091ae:	494b      	ldr	r1, [pc, #300]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80091b0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80091b4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80091b8:	d13e      	bne.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80091ba:	6908      	ldr	r0, [r1, #16]
 80091bc:	4a49      	ldr	r2, [pc, #292]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80091be:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80091c2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80091c6:	4302      	orrs	r2, r0
 80091c8:	610a      	str	r2, [r1, #16]
 80091ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091ce:	4a43      	ldr	r2, [pc, #268]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80091d0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80091d2:	430b      	orrs	r3, r1
 80091d4:	6713      	str	r3, [r2, #112]	; 0x70
 80091d6:	e012      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x466>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091d8:	2102      	movs	r1, #2
 80091da:	1d20      	adds	r0, r4, #4
 80091dc:	f7ff fcec 	bl	8008bb8 <RCCEx_PLL2_Config>
 80091e0:	4605      	mov	r5, r0
      break;
 80091e2:	e7b2      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = HAL_ERROR;
 80091e4:	2601      	movs	r6, #1
 80091e6:	4635      	mov	r5, r6
 80091e8:	e7b8      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80091ea:	462e      	mov	r6, r5
 80091ec:	e7b6      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091ee:	f7fc f9c5 	bl	800557c <HAL_GetTick>
 80091f2:	eba0 0008 	sub.w	r0, r0, r8
 80091f6:	2864      	cmp	r0, #100	; 0x64
 80091f8:	d9bb      	bls.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x3da>
        ret = HAL_TIMEOUT;
 80091fa:	2603      	movs	r6, #3
 80091fc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	07da      	lsls	r2, r3, #31
 8009202:	d52d      	bpl.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009204:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009206:	2b10      	cmp	r3, #16
 8009208:	d03b      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800920a:	d81b      	bhi.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 800920c:	b303      	cbz	r3, 8009250 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 800920e:	2b08      	cmp	r3, #8
 8009210:	d031      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = HAL_ERROR;
 8009212:	2601      	movs	r6, #1
 8009214:	4635      	mov	r5, r6
 8009216:	e023      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        tickstart = HAL_GetTick();
 8009218:	f7fc f9b0 	bl	800557c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800921c:	4f2f      	ldr	r7, [pc, #188]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x544>)
        tickstart = HAL_GetTick();
 800921e:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009220:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009226:	0799      	lsls	r1, r3, #30
 8009228:	d4bf      	bmi.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x412>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800922a:	f7fc f9a7 	bl	800557c <HAL_GetTick>
 800922e:	eba0 0008 	sub.w	r0, r0, r8
 8009232:	4548      	cmp	r0, r9
 8009234:	d9f6      	bls.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009236:	e7e0      	b.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x462>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009238:	690a      	ldr	r2, [r1, #16]
 800923a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800923e:	e7c3      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8009240:	462e      	mov	r6, r5
 8009242:	e7dc      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x466>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009244:	2b20      	cmp	r3, #32
 8009246:	d003      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8009248:	2b28      	cmp	r3, #40	; 0x28
 800924a:	d001      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 800924c:	2b18      	cmp	r3, #24
 800924e:	d1e0      	bne.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    if(ret == HAL_OK)
 8009250:	b9ed      	cbnz	r5, 800928e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009252:	4a22      	ldr	r2, [pc, #136]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009254:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8009256:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009258:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800925c:	430b      	orrs	r3, r1
 800925e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	079b      	lsls	r3, r3, #30
 8009264:	d522      	bpl.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009266:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009268:	2b05      	cmp	r3, #5
 800926a:	d831      	bhi.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800926c:	e8df f003 	tbb	[pc, r3]
 8009270:	162a1116 	.word	0x162a1116
 8009274:	1616      	.short	0x1616
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009276:	2101      	movs	r1, #1
 8009278:	1d20      	adds	r0, r4, #4
 800927a:	f7ff fc9d 	bl	8008bb8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800927e:	4605      	mov	r5, r0
      break;
 8009280:	e7e6      	b.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009282:	2101      	movs	r1, #1
 8009284:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009288:	f7ff fd0e 	bl	8008ca8 <RCCEx_PLL3_Config>
 800928c:	e7f7      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800928e:	462e      	mov	r6, r5
 8009290:	e7e6      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009292:	2101      	movs	r1, #1
 8009294:	1d20      	adds	r0, r4, #4
 8009296:	f7ff fc8f 	bl	8008bb8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800929a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800929c:	b9dd      	cbnz	r5, 80092d6 <HAL_RCCEx_PeriphCLKConfig+0x53e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800929e:	4a0f      	ldr	r2, [pc, #60]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80092a0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80092a2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80092a4:	f023 0307 	bic.w	r3, r3, #7
 80092a8:	430b      	orrs	r3, r1
 80092aa:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	075f      	lsls	r7, r3, #29
 80092b0:	d528      	bpl.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80092b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80092b6:	2b05      	cmp	r3, #5
 80092b8:	d83a      	bhi.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80092ba:	e8df f003 	tbb	[pc, r3]
 80092be:	151a      	.short	0x151a
 80092c0:	1a1a1a33 	.word	0x1a1a1a33
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092c4:	2101      	movs	r1, #1
 80092c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80092ca:	f7ff fced 	bl	8008ca8 <RCCEx_PLL3_Config>
 80092ce:	e7e4      	b.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x502>
      ret = HAL_ERROR;
 80092d0:	2601      	movs	r6, #1
 80092d2:	4635      	mov	r5, r6
 80092d4:	e7ea      	b.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 80092d6:	462e      	mov	r6, r5
 80092d8:	e7e8      	b.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 80092da:	bf00      	nop
 80092dc:	58024400 	.word	0x58024400
 80092e0:	58024800 	.word	0x58024800
 80092e4:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092e8:	2101      	movs	r1, #1
 80092ea:	1d20      	adds	r0, r4, #4
 80092ec:	f7ff fc64 	bl	8008bb8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092f0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80092f2:	bb05      	cbnz	r5, 8009336 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80092f4:	4a98      	ldr	r2, [pc, #608]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80092f6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80092fa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80092fc:	f023 0307 	bic.w	r3, r3, #7
 8009300:	430b      	orrs	r3, r1
 8009302:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	0698      	lsls	r0, r3, #26
 8009308:	d529      	bpl.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800930a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800930e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009312:	d03a      	beq.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8009314:	d811      	bhi.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009316:	b1cb      	cbz	r3, 800934c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8009318:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800931c:	d02f      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      ret = HAL_ERROR;
 800931e:	2601      	movs	r6, #1
 8009320:	4635      	mov	r5, r6
 8009322:	e01c      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009324:	2101      	movs	r1, #1
 8009326:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800932a:	f7ff fcbd 	bl	8008ca8 <RCCEx_PLL3_Config>
 800932e:	e7df      	b.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x558>
      ret = HAL_ERROR;
 8009330:	2601      	movs	r6, #1
 8009332:	4635      	mov	r5, r6
 8009334:	e7e6      	b.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 8009336:	462e      	mov	r6, r5
 8009338:	e7e4      	b.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800933a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800933e:	d005      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8009340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009344:	d002      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8009346:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800934a:	d1e8      	bne.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x586>
    if(ret == HAL_OK)
 800934c:	bb1d      	cbnz	r5, 8009396 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800934e:	4a82      	ldr	r2, [pc, #520]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009350:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009354:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009356:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800935a:	430b      	orrs	r3, r1
 800935c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	0659      	lsls	r1, r3, #25
 8009362:	d52c      	bpl.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009364:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800936c:	d03f      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x656>
 800936e:	d814      	bhi.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x602>
 8009370:	b1e3      	cbz	r3, 80093ac <HAL_RCCEx_PeriphCLKConfig+0x614>
 8009372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009376:	d034      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      ret = HAL_ERROR;
 8009378:	2601      	movs	r6, #1
 800937a:	4635      	mov	r5, r6
 800937c:	e01f      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x626>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800937e:	2100      	movs	r1, #0
 8009380:	1d20      	adds	r0, r4, #4
 8009382:	f7ff fc19 	bl	8008bb8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009386:	4605      	mov	r5, r0
      break;
 8009388:	e7e0      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800938a:	2102      	movs	r1, #2
 800938c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009390:	f7ff fc8a 	bl	8008ca8 <RCCEx_PLL3_Config>
 8009394:	e7f7      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8009396:	462e      	mov	r6, r5
 8009398:	e7e1      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800939a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800939e:	d005      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x614>
 80093a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80093a4:	d002      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x614>
 80093a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093aa:	d1e5      	bne.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    if(ret == HAL_OK)
 80093ac:	bb2d      	cbnz	r5, 80093fa <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80093ae:	4a6a      	ldr	r2, [pc, #424]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80093b0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80093b4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80093b6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80093ba:	430b      	orrs	r3, r1
 80093bc:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	061a      	lsls	r2, r3, #24
 80093c2:	d530      	bpl.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80093c4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80093c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093cc:	f000 80a4 	beq.w	8009518 <HAL_RCCEx_PeriphCLKConfig+0x780>
 80093d0:	d815      	bhi.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x666>
 80093d2:	b1eb      	cbz	r3, 8009410 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80093d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093d8:	f000 8098 	beq.w	800950c <HAL_RCCEx_PeriphCLKConfig+0x774>
      ret = HAL_ERROR;
 80093dc:	2601      	movs	r6, #1
 80093de:	4635      	mov	r5, r6
 80093e0:	e021      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093e2:	2100      	movs	r1, #0
 80093e4:	1d20      	adds	r0, r4, #4
 80093e6:	f7ff fbe7 	bl	8008bb8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093ea:	4605      	mov	r5, r0
      break;
 80093ec:	e7de      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x614>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093ee:	2102      	movs	r1, #2
 80093f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80093f4:	f7ff fc58 	bl	8008ca8 <RCCEx_PLL3_Config>
 80093f8:	e7f7      	b.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x652>
 80093fa:	462e      	mov	r6, r5
 80093fc:	e7df      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80093fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009402:	d005      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8009404:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009408:	d002      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800940a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800940e:	d1e5      	bne.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x644>
    if(ret == HAL_OK)
 8009410:	2d00      	cmp	r5, #0
 8009412:	f040 8087 	bne.w	8009524 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009416:	4a50      	ldr	r2, [pc, #320]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009418:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800941c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800941e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009422:	430b      	orrs	r3, r1
 8009424:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	071b      	lsls	r3, r3, #28
 800942a:	d514      	bpl.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x6be>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800942c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009434:	d107      	bne.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009436:	2102      	movs	r1, #2
 8009438:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800943c:	f7ff fc34 	bl	8008ca8 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8009440:	2800      	cmp	r0, #0
 8009442:	bf18      	it	ne
 8009444:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009446:	4a44      	ldr	r2, [pc, #272]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009448:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800944c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800944e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009452:	430b      	orrs	r3, r1
 8009454:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	06df      	lsls	r7, r3, #27
 800945a:	d514      	bpl.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800945c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009464:	d107      	bne.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x6de>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009466:	2102      	movs	r1, #2
 8009468:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800946c:	f7ff fc1c 	bl	8008ca8 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8009470:	2800      	cmp	r0, #0
 8009472:	bf18      	it	ne
 8009474:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009476:	4a38      	ldr	r2, [pc, #224]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009478:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800947c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800947e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009482:	430b      	orrs	r3, r1
 8009484:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	0318      	lsls	r0, r3, #12
 800948a:	d517      	bpl.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x724>
    switch(PeriphClkInit->AdcClockSelection)
 800948c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8009490:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009494:	d048      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8009496:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800949a:	d005      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x710>
 800949c:	2900      	cmp	r1, #0
 800949e:	d149      	bne.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094a0:	1d20      	adds	r0, r4, #4
 80094a2:	f7ff fb89 	bl	8008bb8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80094a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80094a8:	2d00      	cmp	r5, #0
 80094aa:	d146      	bne.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80094ac:	4a2a      	ldr	r2, [pc, #168]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80094ae:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80094b2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80094b4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80094b8:	430b      	orrs	r3, r1
 80094ba:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	0359      	lsls	r1, r3, #13
 80094c0:	d518      	bpl.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch(PeriphClkInit->UsbClockSelection)
 80094c2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80094c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094ca:	d038      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80094cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094d0:	d007      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80094d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094d6:	d139      	bne.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094d8:	4a1f      	ldr	r2, [pc, #124]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80094da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80094dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80094e2:	bbb5      	cbnz	r5, 8009552 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094e4:	4a1c      	ldr	r2, [pc, #112]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80094e6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80094ea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80094ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80094f0:	430b      	orrs	r3, r1
 80094f2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	03da      	lsls	r2, r3, #15
 80094f8:	d53e      	bpl.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->SdmmcClockSelection)
 80094fa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80094fc:	b373      	cbz	r3, 800955c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 80094fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009502:	f000 808c 	beq.w	800961e <HAL_RCCEx_PeriphCLKConfig+0x886>
      ret = HAL_ERROR;
 8009506:	2601      	movs	r6, #1
 8009508:	4635      	mov	r5, r6
 800950a:	e035      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800950c:	2100      	movs	r1, #0
 800950e:	1d20      	adds	r0, r4, #4
 8009510:	f7ff fb52 	bl	8008bb8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009514:	4605      	mov	r5, r0
      break;
 8009516:	e77b      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x678>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009518:	2102      	movs	r1, #2
 800951a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800951e:	f7ff fbc3 	bl	8008ca8 <RCCEx_PLL3_Config>
 8009522:	e7f7      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8009524:	462e      	mov	r6, r5
 8009526:	e77e      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009528:	2102      	movs	r1, #2
 800952a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800952e:	f7ff fbbb 	bl	8008ca8 <RCCEx_PLL3_Config>
 8009532:	e7b8      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
      ret = HAL_ERROR;
 8009534:	2601      	movs	r6, #1
 8009536:	4635      	mov	r5, r6
 8009538:	e7c0      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x724>
 800953a:	462e      	mov	r6, r5
 800953c:	e7be      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x724>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800953e:	2101      	movs	r1, #1
 8009540:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009544:	f7ff fbb0 	bl	8008ca8 <RCCEx_PLL3_Config>
 8009548:	4605      	mov	r5, r0
      break;
 800954a:	e7ca      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      ret = HAL_ERROR;
 800954c:	2601      	movs	r6, #1
 800954e:	4635      	mov	r5, r6
 8009550:	e7d0      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8009552:	462e      	mov	r6, r5
 8009554:	e7ce      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8009556:	bf00      	nop
 8009558:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800955c:	4a3c      	ldr	r2, [pc, #240]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800955e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009564:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009566:	2d00      	cmp	r5, #0
 8009568:	d15f      	bne.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x892>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800956a:	4a39      	ldr	r2, [pc, #228]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800956c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800956e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009574:	430b      	orrs	r3, r1
 8009576:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	d507      	bpl.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800957e:	2102      	movs	r1, #2
 8009580:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009584:	f7ff fb90 	bl	8008ca8 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8009588:	2800      	cmp	r0, #0
 800958a:	bf18      	it	ne
 800958c:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	039f      	lsls	r7, r3, #14
 8009592:	d50e      	bpl.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch(PeriphClkInit->RngClockSelection)
 8009594:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8009596:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800959a:	d050      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800959c:	d847      	bhi.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x896>
 800959e:	2900      	cmp	r1, #0
 80095a0:	d14b      	bne.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    if(ret == HAL_OK)
 80095a2:	2d00      	cmp	r5, #0
 80095a4:	d151      	bne.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80095a6:	482a      	ldr	r0, [pc, #168]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80095a8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80095aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80095ae:	430a      	orrs	r2, r1
 80095b0:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80095b2:	02dd      	lsls	r5, r3, #11
 80095b4:	d506      	bpl.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80095b6:	4926      	ldr	r1, [pc, #152]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80095b8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80095ba:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80095bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80095c0:	4302      	orrs	r2, r0
 80095c2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80095c4:	00d8      	lsls	r0, r3, #3
 80095c6:	d507      	bpl.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80095c8:	4921      	ldr	r1, [pc, #132]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80095ca:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80095ce:	690a      	ldr	r2, [r1, #16]
 80095d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80095d4:	4302      	orrs	r2, r0
 80095d6:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80095d8:	0299      	lsls	r1, r3, #10
 80095da:	d506      	bpl.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80095dc:	491c      	ldr	r1, [pc, #112]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80095de:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80095e0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80095e2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80095e6:	4302      	orrs	r2, r0
 80095e8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80095ea:	005a      	lsls	r2, r3, #1
 80095ec:	d509      	bpl.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x86a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80095ee:	4a18      	ldr	r2, [pc, #96]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80095f0:	6911      	ldr	r1, [r2, #16]
 80095f2:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80095f6:	6111      	str	r1, [r2, #16]
 80095f8:	6911      	ldr	r1, [r2, #16]
 80095fa:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80095fe:	4301      	orrs	r1, r0
 8009600:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009602:	2b00      	cmp	r3, #0
 8009604:	da06      	bge.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x87c>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009606:	4a12      	ldr	r2, [pc, #72]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009608:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800960a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800960c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009610:	430b      	orrs	r3, r1
 8009612:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8009614:	1c30      	adds	r0, r6, #0
 8009616:	bf18      	it	ne
 8009618:	2001      	movne	r0, #1
 800961a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800961e:	2102      	movs	r1, #2
 8009620:	1d20      	adds	r0, r4, #4
 8009622:	f7ff fac9 	bl	8008bb8 <RCCEx_PLL2_Config>
 8009626:	4605      	mov	r5, r0
      break;
 8009628:	e79d      	b.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800962a:	462e      	mov	r6, r5
 800962c:	e7a4      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->RngClockSelection)
 800962e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009632:	d0b6      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8009634:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8009638:	d0b3      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      ret = HAL_ERROR;
 800963a:	2601      	movs	r6, #1
 800963c:	e7b9      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800963e:	4804      	ldr	r0, [pc, #16]	; (8009650 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009640:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009642:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009646:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8009648:	e7ab      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800964a:	462e      	mov	r6, r5
 800964c:	e7b1      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800964e:	bf00      	nop
 8009650:	58024400 	.word	0x58024400

08009654 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8009654:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009656:	f7ff fa3f 	bl	8008ad8 <HAL_RCC_GetHCLKFreq>
 800965a:	4b05      	ldr	r3, [pc, #20]	; (8009670 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800965c:	4a05      	ldr	r2, [pc, #20]	; (8009674 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800965e:	6a1b      	ldr	r3, [r3, #32]
 8009660:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009664:	5cd3      	ldrb	r3, [r2, r3]
 8009666:	f003 031f 	and.w	r3, r3, #31
}
 800966a:	40d8      	lsrs	r0, r3
 800966c:	bd08      	pop	{r3, pc}
 800966e:	bf00      	nop
 8009670:	58024400 	.word	0x58024400
 8009674:	08014dc8 	.word	0x08014dc8

08009678 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009678:	494d      	ldr	r1, [pc, #308]	; (80097b0 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
{
 800967a:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800967c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800967e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009680:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009682:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009686:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 808c 	beq.w	80097a6 <HAL_RCCEx_GetPLL2ClockFreq+0x12e>
 800968e:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009692:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009696:	f3c2 1300 	ubfx	r3, r2, #4, #1
 800969a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800969e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80096a2:	436b      	muls	r3, r5
 80096a4:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096a8:	f004 0303 	and.w	r3, r4, #3
    switch (pllsource)
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 80096b2:	d002      	beq.n	80096ba <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 80096b4:	d30f      	bcc.n	80096d6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d067      	beq.n	800978a <HAL_RCCEx_GetPLL2ClockFreq+0x112>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096ba:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80096bc:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80097b4 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>
 80096c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c4:	ee07 3a10 	vmov	s14, r3
 80096c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80096cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096d0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80096d4:	e056      	b.n	8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096d6:	680b      	ldr	r3, [r1, #0]
 80096d8:	069b      	lsls	r3, r3, #26
 80096da:	d546      	bpl.n	800976a <HAL_RCCEx_GetPLL2ClockFreq+0xf2>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096dc:	680a      	ldr	r2, [r1, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096de:	6b8b      	ldr	r3, [r1, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096e0:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 80096e4:	4a34      	ldr	r2, [pc, #208]	; (80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096ea:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096ec:	ee07 2a10 	vmov	s14, r2
 80096f0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80096f4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80096f8:	ee06 3a90 	vmov	s13, r3
 80096fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009704:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009708:	4a29      	ldr	r2, [pc, #164]	; (80097b0 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800970a:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800970e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009710:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009714:	ee07 3a10 	vmov	s14, r3
 8009718:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800971c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009720:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009724:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009728:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800972c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800972e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009732:	ee07 3a10 	vmov	s14, r3
 8009736:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800973a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800973e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009742:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009746:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800974a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800974c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009750:	ee07 3a10 	vmov	s14, r3
 8009754:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009758:	ee37 6a06 	vadd.f32	s12, s14, s12
 800975c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8009760:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009764:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009768:	bd30      	pop	{r4, r5, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800976a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800976c:	eddf 5a13 	vldr	s11, [pc, #76]	; 80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8009770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009774:	ee07 3a10 	vmov	s14, r3
 8009778:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800977c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009780:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009784:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009788:	e7be      	b.n	8009708 <HAL_RCCEx_GetPLL2ClockFreq+0x90>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800978a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800978c:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80097c0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8009790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009794:	ee07 3a10 	vmov	s14, r3
 8009798:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800979c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097a0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80097a4:	e7ee      	b.n	8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x10c>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80097a6:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80097aa:	6083      	str	r3, [r0, #8]
}
 80097ac:	e7dc      	b.n	8009768 <HAL_RCCEx_GetPLL2ClockFreq+0xf0>
 80097ae:	bf00      	nop
 80097b0:	58024400 	.word	0x58024400
 80097b4:	4a742400 	.word	0x4a742400
 80097b8:	03d09000 	.word	0x03d09000
 80097bc:	4c742400 	.word	0x4c742400
 80097c0:	4af42400 	.word	0x4af42400

080097c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097c4:	494d      	ldr	r1, [pc, #308]	; (80098fc <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
{
 80097c6:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097c8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80097ca:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80097cc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80097ce:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80097d2:	6c4d      	ldr	r5, [r1, #68]	; 0x44
  if (pll3m != 0U)
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f000 808c 	beq.w	80098f2 <HAL_RCCEx_GetPLL3ClockFreq+0x12e>
 80097da:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80097de:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80097e2:	f3c2 2300 	ubfx	r3, r2, #8, #1
 80097e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80097ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80097ee:	436b      	muls	r3, r5
 80097f0:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097f4:	f004 0303 	and.w	r3, r4, #3
    switch (pllsource)
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 80097fe:	d002      	beq.n	8009806 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8009800:	d30f      	bcc.n	8009822 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8009802:	2b02      	cmp	r3, #2
 8009804:	d067      	beq.n	80098d6 <HAL_RCCEx_GetPLL3ClockFreq+0x112>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009806:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009808:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8009900 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>
 800980c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009810:	ee07 3a10 	vmov	s14, r3
 8009814:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800981c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009820:	e056      	b.n	80098d0 <HAL_RCCEx_GetPLL3ClockFreq+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009822:	680b      	ldr	r3, [r1, #0]
 8009824:	069b      	lsls	r3, r3, #26
 8009826:	d546      	bpl.n	80098b6 <HAL_RCCEx_GetPLL3ClockFreq+0xf2>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009828:	680a      	ldr	r2, [r1, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800982a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800982c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8009830:	4a34      	ldr	r2, [pc, #208]	; (8009904 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009832:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009836:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009838:	ee07 2a10 	vmov	s14, r2
 800983c:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8009840:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009844:	ee06 3a90 	vmov	s13, r3
 8009848:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800984c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009850:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009854:	4a29      	ldr	r2, [pc, #164]	; (80098fc <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009856:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800985a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800985c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009860:	ee07 3a10 	vmov	s14, r3
 8009864:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009868:	ee37 7a06 	vadd.f32	s14, s14, s12
 800986c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009870:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009874:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009878:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800987a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800987e:	ee07 3a10 	vmov	s14, r3
 8009882:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009886:	ee37 7a06 	vadd.f32	s14, s14, s12
 800988a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800988e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009892:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009896:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009898:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800989c:	ee07 3a10 	vmov	s14, r3
 80098a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80098a4:	ee37 6a06 	vadd.f32	s12, s14, s12
 80098a8:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80098ac:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80098b0:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80098b4:	bd30      	pop	{r4, r5, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098b8:	eddf 5a13 	vldr	s11, [pc, #76]	; 8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80098bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c0:	ee07 3a10 	vmov	s14, r3
 80098c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80098c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098cc:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098d0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80098d4:	e7be      	b.n	8009854 <HAL_RCCEx_GetPLL3ClockFreq+0x90>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098d8:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800990c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80098dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e0:	ee07 3a10 	vmov	s14, r3
 80098e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80098e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098ec:	ee77 7a86 	vadd.f32	s15, s15, s12
 80098f0:	e7ee      	b.n	80098d0 <HAL_RCCEx_GetPLL3ClockFreq+0x10c>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80098f2:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80098f6:	6083      	str	r3, [r0, #8]
}
 80098f8:	e7dc      	b.n	80098b4 <HAL_RCCEx_GetPLL3ClockFreq+0xf0>
 80098fa:	bf00      	nop
 80098fc:	58024400 	.word	0x58024400
 8009900:	4a742400 	.word	0x4a742400
 8009904:	03d09000 	.word	0x03d09000
 8009908:	4c742400 	.word	0x4c742400
 800990c:	4af42400 	.word	0x4af42400

08009910 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009910:	494d      	ldr	r1, [pc, #308]	; (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x138>)
{
 8009912:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009914:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009916:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009918:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800991a:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800991e:	6b4d      	ldr	r5, [r1, #52]	; 0x34
  if (pll1m != 0U)
 8009920:	2b00      	cmp	r3, #0
 8009922:	f000 808c 	beq.w	8009a3e <HAL_RCCEx_GetPLL1ClockFreq+0x12e>
 8009926:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800992a:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800992e:	f002 0301 	and.w	r3, r2, #1
 8009932:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009936:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800993a:	436b      	muls	r3, r5
 800993c:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009940:	f004 0303 	and.w	r3, r4, #3
    switch (pllsource)
 8009944:	2b01      	cmp	r3, #1
 8009946:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800994a:	d002      	beq.n	8009952 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 800994c:	d30f      	bcc.n	800996e <HAL_RCCEx_GetPLL1ClockFreq+0x5e>
 800994e:	2b02      	cmp	r3, #2
 8009950:	d067      	beq.n	8009a22 <HAL_RCCEx_GetPLL1ClockFreq+0x112>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009952:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8009954:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8009a4c <HAL_RCCEx_GetPLL1ClockFreq+0x13c>
 8009958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995c:	ee07 3a10 	vmov	s14, r3
 8009960:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009968:	ee77 7a86 	vadd.f32	s15, s15, s12
 800996c:	e056      	b.n	8009a1c <HAL_RCCEx_GetPLL1ClockFreq+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800996e:	680b      	ldr	r3, [r1, #0]
 8009970:	069b      	lsls	r3, r3, #26
 8009972:	d546      	bpl.n	8009a02 <HAL_RCCEx_GetPLL1ClockFreq+0xf2>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009974:	680a      	ldr	r2, [r1, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009976:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009978:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800997c:	4a34      	ldr	r2, [pc, #208]	; (8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800997e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009982:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009984:	ee07 2a10 	vmov	s14, r2
 8009988:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800998c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009990:	ee06 3a90 	vmov	s13, r3
 8009994:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009998:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800999c:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80099a0:	4a29      	ldr	r2, [pc, #164]	; (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x138>)
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099a2:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80099a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80099a8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80099ac:	ee07 3a10 	vmov	s14, r3
 80099b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80099b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80099bc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80099c0:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80099c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80099c6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80099ca:	ee07 3a10 	vmov	s14, r3
 80099ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099d2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80099d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80099da:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80099de:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80099e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80099e4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80099e8:	ee07 3a10 	vmov	s14, r3
 80099ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099f0:	ee37 6a06 	vadd.f32	s12, s14, s12
 80099f4:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80099f8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80099fc:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009a00:	bd30      	pop	{r4, r5, pc}
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a02:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8009a04:	eddf 5a13 	vldr	s11, [pc, #76]	; 8009a54 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8009a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a0c:	ee07 3a10 	vmov	s14, r3
 8009a10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a18:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a1c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009a20:	e7be      	b.n	80099a0 <HAL_RCCEx_GetPLL1ClockFreq+0x90>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a22:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8009a24:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8009a58 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8009a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a2c:	ee07 3a10 	vmov	s14, r3
 8009a30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a38:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009a3c:	e7ee      	b.n	8009a1c <HAL_RCCEx_GetPLL1ClockFreq+0x10c>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009a3e:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009a42:	6083      	str	r3, [r0, #8]
}
 8009a44:	e7dc      	b.n	8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0xf0>
 8009a46:	bf00      	nop
 8009a48:	58024400 	.word	0x58024400
 8009a4c:	4a742400 	.word	0x4a742400
 8009a50:	03d09000 	.word	0x03d09000
 8009a54:	4c742400 	.word	0x4c742400
 8009a58:	4af42400 	.word	0x4af42400

08009a5c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009a5c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8009a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009a62:	d122      	bne.n	8009aaa <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009a64:	4b6a      	ldr	r3, [pc, #424]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009a66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a68:	f002 0207 	and.w	r2, r2, #7
      switch (saiclocksource)
 8009a6c:	2a04      	cmp	r2, #4
 8009a6e:	d82a      	bhi.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8009a70:	e8df f002 	tbb	[pc, r2]
 8009a74:	c9088503 	.word	0xc9088503
 8009a78:	0c          	.byte	0x0c
 8009a79:	00          	.byte	0x00
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a7a:	a801      	add	r0, sp, #4
 8009a7c:	f7ff ff48 	bl	8009910 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a80:	9802      	ldr	r0, [sp, #8]
          break;
 8009a82:	e080      	b.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a84:	a801      	add	r0, sp, #4
 8009a86:	f7ff fe9d 	bl	80097c4 <HAL_RCCEx_GetPLL3ClockFreq>
 8009a8a:	e07b      	b.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009a8e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8009a92:	f000 80ad 	beq.w	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009a96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a9a:	f000 80b6 	beq.w	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            frequency = HSE_VALUE;
 8009a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aa2:	485c      	ldr	r0, [pc, #368]	; (8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8009aa4:	bf18      	it	ne
 8009aa6:	2000      	movne	r0, #0
 8009aa8:	e06d      	b.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009aaa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009aae:	d114      	bne.n	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009ab0:	4a57      	ldr	r2, [pc, #348]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009ab2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009ab4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8009ab8:	2b80      	cmp	r3, #128	; 0x80
 8009aba:	d0e3      	beq.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8009abc:	d805      	bhi.n	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d0db      	beq.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 8009ac2:	2b40      	cmp	r3, #64	; 0x40
      switch (srcclk)
 8009ac4:	d05b      	beq.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          frequency = 0;
 8009ac6:	2000      	movs	r0, #0
  return frequency;
 8009ac8:	e05d      	b.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
      switch (saiclocksource)
 8009aca:	2bc0      	cmp	r3, #192	; 0xc0
 8009acc:	f000 809b 	beq.w	8009c06 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
      switch (srcclk)
 8009ad4:	d1f7      	bne.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009ad6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009ad8:	e7d9      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x32>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009ada:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009ade:	d113      	bne.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009ae0:	4a4b      	ldr	r2, [pc, #300]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009ae2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009ae4:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8009ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009aec:	d0ca      	beq.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8009aee:	d804      	bhi.n	8009afa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d0c2      	beq.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 8009af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009af8:	e7e4      	b.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8009afa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009afe:	f000 8082 	beq.w	8009c06 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009b02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b06:	e7e5      	b.n	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009b08:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8009b0c:	d112      	bne.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009b0e:	4a40      	ldr	r2, [pc, #256]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009b10:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009b12:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8009b16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b1a:	d0b3      	beq.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8009b1c:	d804      	bhi.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d0ab      	beq.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 8009b22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b26:	e7cd      	b.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8009b28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b2c:	d06b      	beq.n	8009c06 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009b2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b32:	e7cf      	b.n	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009b34:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009b38:	d112      	bne.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009b3a:	4a35      	ldr	r2, [pc, #212]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009b3c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009b3e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8009b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b46:	d09d      	beq.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8009b48:	d804      	bhi.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d095      	beq.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 8009b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b52:	e7b7      	b.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8009b54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b58:	d055      	beq.n	8009c06 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009b5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b5e:	e7b9      	b.n	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009b60:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8009b64:	d117      	bne.n	8009b96 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009b66:	4a2a      	ldr	r2, [pc, #168]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009b68:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009b6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8009b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b72:	d00b      	beq.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8009b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b78:	d0ad      	beq.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1a3      	bne.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b7e:	a801      	add	r0, sp, #4
 8009b80:	f7ff fd7a 	bl	8009678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b84:	9801      	ldr	r0, [sp, #4]
}
 8009b86:	b005      	add	sp, #20
 8009b88:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b8c:	a801      	add	r0, sp, #4
 8009b8e:	f7ff fe19 	bl	80097c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009b92:	9803      	ldr	r0, [sp, #12]
          break;
 8009b94:	e7f7      	b.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009b96:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8009b9a:	d10b      	bne.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009b9c:	4b1c      	ldr	r3, [pc, #112]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8009ba0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8009ba4:	f43f af69 	beq.w	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d08c      	beq.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bac:	a801      	add	r0, sp, #4
 8009bae:	f7ff fd63 	bl	8009678 <HAL_RCCEx_GetPLL2ClockFreq>
 8009bb2:	e7ee      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009bb4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8009bb8:	d185      	bne.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009bba:	4b15      	ldr	r3, [pc, #84]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bbe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8009bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bc6:	d018      	beq.n	8009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8009bc8:	d808      	bhi.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 8009bca:	b19b      	cbz	r3, 8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8009bcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bd0:	f47f af79 	bne.w	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bd4:	a801      	add	r0, sp, #4
 8009bd6:	f7ff fd4f 	bl	8009678 <HAL_RCCEx_GetPLL2ClockFreq>
 8009bda:	e751      	b.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
      switch (srcclk)
 8009bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009be0:	d013      	beq.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8009be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009be6:	d00c      	beq.n	8009c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8009be8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bec:	f47f af6b 	bne.w	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
            frequency = HSI_VALUE;
 8009bf0:	4809      	ldr	r0, [pc, #36]	; (8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8009bf2:	e7c8      	b.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009bf4:	f7ff fd2e 	bl	8009654 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 8009bf8:	e7c5      	b.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bfa:	a801      	add	r0, sp, #4
 8009bfc:	f7ff fde2 	bl	80097c4 <HAL_RCCEx_GetPLL3ClockFreq>
 8009c00:	e73e      	b.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          frequency = HSE_VALUE;
 8009c02:	4804      	ldr	r0, [pc, #16]	; (8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
          break;
 8009c04:	e7bf      	b.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          frequency = EXTERNAL_CLOCK_VALUE;
 8009c06:	4805      	ldr	r0, [pc, #20]	; (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8009c08:	e7bd      	b.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            frequency = CSI_VALUE;
 8009c0a:	4805      	ldr	r0, [pc, #20]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8009c0c:	e7bb      	b.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8009c0e:	bf00      	nop
 8009c10:	58024400 	.word	0x58024400
 8009c14:	007a1200 	.word	0x007a1200
 8009c18:	03d09000 	.word	0x03d09000
 8009c1c:	00bb8000 	.word	0x00bb8000
 8009c20:	003d0900 	.word	0x003d0900

08009c24 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c28:	4606      	mov	r6, r0
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c2e:	f7fb fca5 	bl	800557c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009c32:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8009c34:	4682      	mov	sl, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009c36:	6830      	ldr	r0, [r6, #0]
 8009c38:	f002 fb50 	bl	800c2dc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	bb50      	cbnz	r0, 8009c96 <SD_FindSCR+0x72>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009c40:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8009c42:	6830      	ldr	r0, [r6, #0]
 8009c44:	0409      	lsls	r1, r1, #16
 8009c46:	f002 fc75 	bl	800c534 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	bb18      	cbnz	r0, 8009c96 <SD_FindSCR+0x72>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 8009c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c52:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c54:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c56:	9004      	str	r0, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c58:	6830      	ldr	r0, [r6, #0]
  config.DataLength    = 8U;
 8009c5a:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c5e:	2302      	movs	r3, #2
 8009c60:	e9cd 1302 	strd	r1, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009c64:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c66:	4669      	mov	r1, sp
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009c68:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c6a:	f002 fb24 	bl	800c2b6 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009c6e:	6830      	ldr	r0, [r6, #0]
 8009c70:	f002 fca8 	bl	800c5c4 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c74:	4604      	mov	r4, r0
 8009c76:	b970      	cbnz	r0, 8009c96 <SD_FindSCR+0x72>
  uint32_t index = 0U;
 8009c78:	4683      	mov	fp, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009c7a:	4605      	mov	r5, r0
 8009c7c:	4607      	mov	r7, r0
  {
    return errorstate;
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009c7e:	f240 592a 	movw	r9, #1322	; 0x52a
 8009c82:	6830      	ldr	r0, [r6, #0]
 8009c84:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009c86:	ea13 0f09 	tst.w	r3, r9
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009c8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009c8c:	d007      	beq.n	8009c9e <SD_FindSCR+0x7a>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009c8e:	0719      	lsls	r1, r3, #28
 8009c90:	d51c      	bpl.n	8009ccc <SD_FindSCR+0xa8>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009c92:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009c94:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8009c96:	4620      	mov	r0, r4
 8009c98:	b007      	add	sp, #28
 8009c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009c9e:	031b      	lsls	r3, r3, #12
 8009ca0:	d40b      	bmi.n	8009cba <SD_FindSCR+0x96>
 8009ca2:	f1bb 0f00 	cmp.w	fp, #0
 8009ca6:	d108      	bne.n	8009cba <SD_FindSCR+0x96>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009ca8:	f002 fadc 	bl	800c264 <SDMMC_ReadFIFO>
 8009cac:	4607      	mov	r7, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009cae:	6830      	ldr	r0, [r6, #0]
      index++;
 8009cb0:	f04f 0b01 	mov.w	fp, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009cb4:	f002 fad6 	bl	800c264 <SDMMC_ReadFIFO>
 8009cb8:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009cba:	f7fb fc5f 	bl	800557c <HAL_GetTick>
 8009cbe:	eba0 000a 	sub.w	r0, r0, sl
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	d1dd      	bne.n	8009c82 <SD_FindSCR+0x5e>
      return HAL_SD_ERROR_TIMEOUT;
 8009cc6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009cca:	e7e4      	b.n	8009c96 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ccc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009cce:	079a      	lsls	r2, r3, #30
 8009cd0:	d501      	bpl.n	8009cd6 <SD_FindSCR+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009cd2:	2402      	movs	r4, #2
 8009cd4:	e7de      	b.n	8009c94 <SD_FindSCR+0x70>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009cd6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009cd8:	069b      	lsls	r3, r3, #26
 8009cda:	d501      	bpl.n	8009ce0 <SD_FindSCR+0xbc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009cdc:	2420      	movs	r4, #32
 8009cde:	e7d9      	b.n	8009c94 <SD_FindSCR+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ce0:	4b04      	ldr	r3, [pc, #16]	; (8009cf4 <SD_FindSCR+0xd0>)
 8009ce2:	ba2d      	rev	r5, r5
 8009ce4:	ba3f      	rev	r7, r7
 8009ce6:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009ce8:	f8c8 5000 	str.w	r5, [r8]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009cec:	f8c8 7004 	str.w	r7, [r8, #4]
  return HAL_SD_ERROR_NONE;
 8009cf0:	e7d1      	b.n	8009c96 <SD_FindSCR+0x72>
 8009cf2:	bf00      	nop
 8009cf4:	18000f3a 	.word	0x18000f3a

08009cf8 <HAL_SD_ReadBlocks_DMA>:
{
 8009cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	b087      	sub	sp, #28
 8009cfe:	4615      	mov	r5, r2
 8009d00:	461e      	mov	r6, r3
  if(NULL == pData)
 8009d02:	460f      	mov	r7, r1
 8009d04:	b931      	cbnz	r1, 8009d14 <HAL_SD_ReadBlocks_DMA+0x1c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d06:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009d08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d0c:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8009d0e:	2001      	movs	r0, #1
}
 8009d10:	b007      	add	sp, #28
 8009d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8009d14:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8009d18:	b2c0      	uxtb	r0, r0
 8009d1a:	2801      	cmp	r0, #1
 8009d1c:	d14c      	bne.n	8009db8 <HAL_SD_ReadBlocks_DMA+0xc0>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009d1e:	18d3      	adds	r3, r2, r3
 8009d20:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009d22:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009d24:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009d26:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009d28:	d904      	bls.n	8009d34 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009d2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009d30:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8009d32:	e7ed      	b.n	8009d10 <HAL_SD_ReadBlocks_DMA+0x18>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009d34:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 8009d36:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8009d38:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009d3a:	2a01      	cmp	r2, #1
    hsd->State = HAL_SD_STATE_BUSY;
 8009d3c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d40:	f04f 32ff 	mov.w	r2, #4294967295
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009d44:	ea4f 2346 	mov.w	r3, r6, lsl #9
    hsd->Instance->DCTRL = 0U;
 8009d48:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d4a:	4669      	mov	r1, sp
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
      add *= 512U;
 8009d4e:	bf18      	it	ne
 8009d50:	026d      	lslne	r5, r5, #9
    hsd->pRxBuffPtr = pData;
 8009d52:	62a7      	str	r7, [r4, #40]	; 0x28
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009d54:	e9cd 2300 	strd	r2, r3, [sp]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d58:	2290      	movs	r2, #144	; 0x90
 8009d5a:	2302      	movs	r3, #2
 8009d5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d60:	2300      	movs	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009d62:	e9cd 3304 	strd	r3, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d66:	f002 faa6 	bl	800c2b6 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009d6a:	6820      	ldr	r0, [r4, #0]
 8009d6c:	68c3      	ldr	r3, [r0, #12]
 8009d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d72:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009d74:	2301      	movs	r3, #1
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009d76:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 8009d78:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009d7a:	6503      	str	r3, [r0, #80]	; 0x50
    if(NumberOfBlocks > 1U)
 8009d7c:	d911      	bls.n	8009da2 <HAL_SD_ReadBlocks_DMA+0xaa>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009d7e:	2382      	movs	r3, #130	; 0x82
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009d80:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009d82:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009d84:	f002 fadc 	bl	800c340 <SDMMC_CmdReadMultiBlock>
 8009d88:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d8a:	b180      	cbz	r0, 8009dae <HAL_SD_ReadBlocks_DMA+0xb6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d8c:	4a0b      	ldr	r2, [pc, #44]	; (8009dbc <HAL_SD_ReadBlocks_DMA+0xc4>)
 8009d8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009d90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d92:	4318      	orrs	r0, r3
      hsd->Context = SD_CONTEXT_NONE;
 8009d94:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 8009d96:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d98:	2001      	movs	r0, #1
 8009d9a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d9e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8009da0:	e7b6      	b.n	8009d10 <HAL_SD_ReadBlocks_DMA+0x18>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009da2:	2381      	movs	r3, #129	; 0x81
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009da4:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009da6:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009da8:	f002 fab1 	bl	800c30e <SDMMC_CmdReadSingleBlock>
 8009dac:	e7ec      	b.n	8009d88 <HAL_SD_ReadBlocks_DMA+0x90>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009db0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009db4:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_OK;
 8009db6:	e7ab      	b.n	8009d10 <HAL_SD_ReadBlocks_DMA+0x18>
    return HAL_BUSY;
 8009db8:	2002      	movs	r0, #2
 8009dba:	e7a9      	b.n	8009d10 <HAL_SD_ReadBlocks_DMA+0x18>
 8009dbc:	1fe00fff 	.word	0x1fe00fff

08009dc0 <HAL_SD_WriteBlocks_DMA>:
{
 8009dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	4615      	mov	r5, r2
 8009dca:	461e      	mov	r6, r3
  if(NULL == pData)
 8009dcc:	460f      	mov	r7, r1
 8009dce:	b939      	cbnz	r1, 8009de0 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009dd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009dd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009dd6:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8009dd8:	2001      	movs	r0, #1
}
 8009dda:	b006      	add	sp, #24
 8009ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8009de0:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8009de4:	b2c0      	uxtb	r0, r0
 8009de6:	2801      	cmp	r0, #1
 8009de8:	d14c      	bne.n	8009e84 <HAL_SD_WriteBlocks_DMA+0xc4>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009dea:	18d3      	adds	r3, r2, r3
 8009dec:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009dee:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009df0:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009df2:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009df4:	d904      	bls.n	8009e00 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009df6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009df8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009dfc:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8009dfe:	e7ec      	b.n	8009dda <HAL_SD_WriteBlocks_DMA+0x1a>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009e00:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 8009e02:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8009e04:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009e06:	f04f 0890 	mov.w	r8, #144	; 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009e0a:	2a01      	cmp	r2, #1
    hsd->State = HAL_SD_STATE_BUSY;
 8009e0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e10:	f04f 32ff 	mov.w	r2, #4294967295
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009e14:	ea4f 2346 	mov.w	r3, r6, lsl #9
    hsd->Instance->DCTRL = 0U;
 8009e18:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e1a:	4669      	mov	r1, sp
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009e1c:	6263      	str	r3, [r4, #36]	; 0x24
      add *= 512U;
 8009e1e:	bf18      	it	ne
 8009e20:	026d      	lslne	r5, r5, #9
    hsd->pTxBuffPtr = pData;
 8009e22:	6227      	str	r7, [r4, #32]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009e24:	e9cd 2300 	strd	r2, r3, [sp]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	e9cd 8302 	strd	r8, r3, [sp, #8]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009e2e:	e9cd 3304 	strd	r3, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e32:	f002 fa40 	bl	800c2b6 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009e36:	6820      	ldr	r0, [r4, #0]
 8009e38:	68c3      	ldr	r3, [r0, #12]
 8009e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e3e:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009e40:	2301      	movs	r3, #1
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009e42:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 8009e44:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009e46:	6503      	str	r3, [r0, #80]	; 0x50
    if(NumberOfBlocks > 1U)
 8009e48:	d911      	bls.n	8009e6e <HAL_SD_WriteBlocks_DMA+0xae>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009e4a:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009e4c:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009e4e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009e50:	f002 faa8 	bl	800c3a4 <SDMMC_CmdWriteMultiBlock>
 8009e54:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e56:	b180      	cbz	r0, 8009e7a <HAL_SD_WriteBlocks_DMA+0xba>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e58:	4a0b      	ldr	r2, [pc, #44]	; (8009e88 <HAL_SD_WriteBlocks_DMA+0xc8>)
 8009e5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009e5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e5e:	4318      	orrs	r0, r3
      hsd->Context = SD_CONTEXT_NONE;
 8009e60:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 8009e62:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009e64:	2001      	movs	r0, #1
 8009e66:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009e6a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8009e6c:	e7b5      	b.n	8009dda <HAL_SD_WriteBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009e6e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009e72:	4629      	mov	r1, r5
 8009e74:	f002 fa7d 	bl	800c372 <SDMMC_CmdWriteSingleBlock>
 8009e78:	e7ec      	b.n	8009e54 <HAL_SD_WriteBlocks_DMA+0x94>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8009e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e7c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8009e80:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_OK;
 8009e82:	e7aa      	b.n	8009dda <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 8009e84:	2002      	movs	r0, #2
 8009e86:	e7a8      	b.n	8009dda <HAL_SD_WriteBlocks_DMA+0x1a>
 8009e88:	1fe00fff 	.word	0x1fe00fff

08009e8c <HAL_SD_ErrorCallback>:
 8009e8c:	4770      	bx	lr

08009e8e <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 8009e8e:	4770      	bx	lr

08009e90 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009e90:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8009e92:	0f9a      	lsrs	r2, r3, #30
 8009e94:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009e96:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8009e9a:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009e9c:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8009ea0:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009ea2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009ea6:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009ea8:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009eac:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009eae:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009eb0:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009eb2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8009eb4:	0d1a      	lsrs	r2, r3, #20
 8009eb6:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009eb8:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8009ebc:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009ebe:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8009ec2:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009ec4:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8009ec8:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009eca:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8009ece:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009ed0:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8009ed4:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8009eda:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 8009edc:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8009ede:	2a00      	cmp	r2, #0
 8009ee0:	d16b      	bne.n	8009fba <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009ee2:	f640 74fc 	movw	r4, #4092	; 0xffc
 8009ee6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8009ee8:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8009eec:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8009ef0:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009ef2:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8009ef6:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009ef8:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8009efc:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009efe:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8009f02:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009f04:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009f08:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009f0c:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009f0e:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009f10:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009f12:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009f14:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009f16:	f002 0207 	and.w	r2, r2, #7
 8009f1a:	3202      	adds	r2, #2
 8009f1c:	4093      	lsls	r3, r2
 8009f1e:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009f20:	7a0a      	ldrb	r2, [r1, #8]
 8009f22:	f002 040f 	and.w	r4, r2, #15
 8009f26:	2201      	movs	r2, #1
 8009f28:	40a2      	lsls	r2, r4
 8009f2a:	6502      	str	r2, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009f2c:	0a52      	lsrs	r2, r2, #9
 8009f2e:	4353      	muls	r3, r2
 8009f30:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8009f32:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009f36:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009f38:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009f3a:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8009f3e:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009f40:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009f48:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009f4a:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009f4c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->Reserved3 = 0;
 8009f4e:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009f50:	0fda      	lsrs	r2, r3, #31
 8009f52:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009f54:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8009f58:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009f5a:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8009f5e:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009f60:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8009f64:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009f66:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8009f6a:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009f6e:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8009f72:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009f76:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009f7a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8009f7e:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009f82:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8009f86:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009f8a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8009f8e:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009f92:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8009f96:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009f9a:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8009f9e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009fa2:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009fa6:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009faa:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009fae:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8009fb8:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009fba:	2a01      	cmp	r2, #1
 8009fbc:	d10f      	bne.n	8009fde <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009fbe:	041b      	lsls	r3, r3, #16
 8009fc0:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8009fc4:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009fcc:	690b      	ldr	r3, [r1, #16]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	029b      	lsls	r3, r3, #10
 8009fd2:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009fd4:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8009fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fda:	6503      	str	r3, [r0, #80]	; 0x50
 8009fdc:	e7ab      	b.n	8009f36 <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009fde:	6803      	ldr	r3, [r0, #0]
 8009fe0:	4a05      	ldr	r2, [pc, #20]	; (8009ff8 <HAL_SD_GetCardCSD+0x168>)
 8009fe2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fe4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fea:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009fec:	2301      	movs	r3, #1
 8009fee:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	e7e0      	b.n	8009fb8 <HAL_SD_GetCardCSD+0x128>
 8009ff6:	bf00      	nop
 8009ff8:	1fe00fff 	.word	0x1fe00fff

08009ffc <HAL_SD_InitCard>:
{
 8009ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a000:	2300      	movs	r3, #0
{
 800a002:	b098      	sub	sp, #96	; 0x60
 800a004:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a006:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800a00a:	4da1      	ldr	r5, [pc, #644]	; (800a290 <HAL_SD_InitCard+0x294>)
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a00c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a010:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a014:	f7ff fd22 	bl	8009a5c <HAL_RCCEx_GetPeriphCLKFreq>
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a018:	69a3      	ldr	r3, [r4, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a01a:	4606      	mov	r6, r0
 800a01c:	6827      	ldr	r7, [r4, #0]
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a01e:	2b02      	cmp	r3, #2
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800a020:	fbb0 f5f5 	udiv	r5, r0, r5
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a024:	d103      	bne.n	800a02e <HAL_SD_InitCard+0x32>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	f043 0310 	orr.w	r3, r3, #16
 800a02c:	603b      	str	r3, [r7, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 800a02e:	ab0a      	add	r3, sp, #40	; 0x28
 800a030:	950b      	str	r5, [sp, #44]	; 0x2c
 800a032:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a036:	ab07      	add	r3, sp, #28
 800a038:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a03c:	4638      	mov	r0, r7
 800a03e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a040:	f002 f8f6 	bl	800c230 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a044:	6820      	ldr	r0, [r4, #0]
 800a046:	f002 f915 	bl	800c274 <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800a04a:	0068      	lsls	r0, r5, #1
 800a04c:	fbb6 f0f0 	udiv	r0, r6, r0
  if(sdmmc_clk != 0U)
 800a050:	b1f8      	cbz	r0, 800a092 <HAL_SD_InitCard+0x96>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800a052:	4d90      	ldr	r5, [pc, #576]	; (800a294 <HAL_SD_InitCard+0x298>)
 800a054:	fbb5 f0f0 	udiv	r0, r5, r0
 800a058:	3001      	adds	r0, #1
    HAL_Delay(2U);
 800a05a:	f7fb fa95 	bl	8005588 <HAL_Delay>
  __IO uint32_t count = 0U;
 800a05e:	2300      	movs	r3, #0
 800a060:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 800a062:	f7fb fa8b 	bl	800557c <HAL_GetTick>
 800a066:	4607      	mov	r7, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a068:	6820      	ldr	r0, [r4, #0]
 800a06a:	f002 f9f9 	bl	800c460 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a06e:	4605      	mov	r5, r0
 800a070:	b940      	cbnz	r0, 800a084 <HAL_SD_InitCard+0x88>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a072:	6820      	ldr	r0, [r4, #0]
 800a074:	f002 fa1e 	bl	800c4b4 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a078:	b168      	cbz	r0, 800a096 <HAL_SD_InitCard+0x9a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a07a:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a07c:	6820      	ldr	r0, [r4, #0]
 800a07e:	f002 f9ef 	bl	800c460 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a082:	b150      	cbz	r0, 800a09a <HAL_SD_InitCard+0x9e>
    hsd->State = HAL_SD_STATE_READY;
 800a084:	2501      	movs	r5, #1
 800a086:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a08a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a08c:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 800a08e:	63a0      	str	r0, [r4, #56]	; 0x38
    return HAL_ERROR;
 800a090:	e0b0      	b.n	800a1f4 <HAL_SD_InitCard+0x1f8>
    HAL_Delay(2U);
 800a092:	2002      	movs	r0, #2
 800a094:	e7e1      	b.n	800a05a <HAL_SD_InitCard+0x5e>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a096:	2301      	movs	r3, #1
 800a098:	6423      	str	r3, [r4, #64]	; 0x40
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a09a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d127      	bne.n	800a0f0 <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	6820      	ldr	r0, [r4, #0]
 800a0a4:	f002 fa46 	bl	800c534 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0a8:	b310      	cbz	r0, 800a0f0 <HAL_SD_InitCard+0xf4>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0aa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800a0ae:	e7e9      	b.n	800a084 <HAL_SD_InitCard+0x88>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a0b0:	4631      	mov	r1, r6
 800a0b2:	6820      	ldr	r0, [r4, #0]
 800a0b4:	f002 fa3e 	bl	800c534 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d1e3      	bne.n	800a084 <HAL_SD_InitCard+0x88>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a0bc:	4651      	mov	r1, sl
 800a0be:	6820      	ldr	r0, [r4, #0]
 800a0c0:	f002 fa51 	bl	800c566 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	d1f0      	bne.n	800a0aa <HAL_SD_InitCard+0xae>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a0c8:	4631      	mov	r1, r6
 800a0ca:	6820      	ldr	r0, [r4, #0]
 800a0cc:	f002 f8f0 	bl	800c2b0 <SDMMC_GetResponse>
    count++;
 800a0d0:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a0d2:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a0d4:	0fc6      	lsrs	r6, r0, #31
    count++;
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a0da:	9b06      	ldr	r3, [sp, #24]
 800a0dc:	4543      	cmp	r3, r8
 800a0de:	d801      	bhi.n	800a0e4 <HAL_SD_InitCard+0xe8>
 800a0e0:	2e00      	cmp	r6, #0
 800a0e2:	d0e5      	beq.n	800a0b0 <HAL_SD_InitCard+0xb4>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a0e4:	9b06      	ldr	r3, [sp, #24]
 800a0e6:	454b      	cmp	r3, r9
 800a0e8:	d909      	bls.n	800a0fe <HAL_SD_InitCard+0x102>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a0ea:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800a0ee:	e7c9      	b.n	800a084 <HAL_SD_InitCard+0x88>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a0f0:	f64f 78fe 	movw	r8, #65534	; 0xfffe
{
 800a0f4:	2600      	movs	r6, #0
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a0f6:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 800a29c <HAL_SD_InitCard+0x2a0>
 800a0fa:	46c1      	mov	r9, r8
 800a0fc:	e7ed      	b.n	800a0da <HAL_SD_InitCard+0xde>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a0fe:	006b      	lsls	r3, r5, #1
 800a100:	d533      	bpl.n	800a16a <HAL_SD_InitCard+0x16e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a102:	2301      	movs	r3, #1
 800a104:	6820      	ldr	r0, [r4, #0]
 800a106:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a108:	69a3      	ldr	r3, [r4, #24]
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d12d      	bne.n	800a16a <HAL_SD_InitCard+0x16e>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800a10e:	01ee      	lsls	r6, r5, #7
 800a110:	d52b      	bpl.n	800a16a <HAL_SD_InitCard+0x16e>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a112:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a116:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800a118:	6803      	ldr	r3, [r0, #0]
 800a11a:	f043 0308 	orr.w	r3, r3, #8
 800a11e:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800a120:	f002 fb1c 	bl	800c75c <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800a124:	2800      	cmp	r0, #0
 800a126:	d1ad      	bne.n	800a084 <HAL_SD_InitCard+0x88>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a12c:	0155      	lsls	r5, r2, #5
 800a12e:	d565      	bpl.n	800a1fc <HAL_SD_InitCard+0x200>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800a130:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a134:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800a136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a138:	02d8      	lsls	r0, r3, #11
 800a13a:	d5b6      	bpl.n	800a0aa <HAL_SD_InitCard+0xae>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800a13c:	2001      	movs	r0, #1
 800a13e:	f7ff fea6 	bl	8009e8e <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800a142:	6822      	ldr	r2, [r4, #0]
 800a144:	6813      	ldr	r3, [r2, #0]
 800a146:	f043 0304 	orr.w	r3, r3, #4
 800a14a:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a14c:	6823      	ldr	r3, [r4, #0]
 800a14e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a150:	0191      	lsls	r1, r2, #6
 800a152:	d55b      	bpl.n	800a20c <HAL_SD_InitCard+0x210>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800a154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a158:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800a15a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a15c:	02d2      	lsls	r2, r2, #11
 800a15e:	d4c4      	bmi.n	800a0ea <HAL_SD_InitCard+0xee>
          hsd->Instance->POWER = 0x13U;
 800a160:	2213      	movs	r2, #19
 800a162:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800a164:	f04f 32ff 	mov.w	r2, #4294967295
 800a168:	639a      	str	r2, [r3, #56]	; 0x38
  uint16_t sd_rca = 1U;
 800a16a:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a16c:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 800a16e:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a172:	f002 f885 	bl	800c280 <SDMMC_GetPowerState>
 800a176:	2800      	cmp	r0, #0
 800a178:	d07c      	beq.n	800a274 <HAL_SD_InitCard+0x278>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a17a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	d018      	beq.n	800a1b2 <HAL_SD_InitCard+0x1b6>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a180:	6820      	ldr	r0, [r4, #0]
 800a182:	f002 fa38 	bl	800c5f6 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a186:	2800      	cmp	r0, #0
 800a188:	d14d      	bne.n	800a226 <HAL_SD_InitCard+0x22a>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a18a:	4601      	mov	r1, r0
 800a18c:	6820      	ldr	r0, [r4, #0]
 800a18e:	f002 f88f 	bl	800c2b0 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a192:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a194:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a196:	6820      	ldr	r0, [r4, #0]
 800a198:	f002 f88a 	bl	800c2b0 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a19c:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a19e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a1a0:	6820      	ldr	r0, [r4, #0]
 800a1a2:	f002 f885 	bl	800c2b0 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a1a6:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a1a8:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a1aa:	6820      	ldr	r0, [r4, #0]
 800a1ac:	f002 f880 	bl	800c2b0 <SDMMC_GetResponse>
 800a1b0:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a1b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a1b4:	2b03      	cmp	r3, #3
 800a1b6:	d12f      	bne.n	800a218 <HAL_SD_InitCard+0x21c>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a1b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a1ba:	2b03      	cmp	r3, #3
 800a1bc:	d139      	bne.n	800a232 <HAL_SD_InitCard+0x236>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a1be:	2104      	movs	r1, #4
 800a1c0:	6820      	ldr	r0, [r4, #0]
 800a1c2:	f002 f875 	bl	800c2b0 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a1c6:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a1c8:	0d00      	lsrs	r0, r0, #20
 800a1ca:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f7ff fe5f 	bl	8009e90 <HAL_SD_GetCardCSD>
 800a1d2:	4605      	mov	r5, r0
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d14a      	bne.n	800a26e <HAL_SD_InitCard+0x272>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a1d8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a1da:	4603      	mov	r3, r0
 800a1dc:	6820      	ldr	r0, [r4, #0]
 800a1de:	0412      	lsls	r2, r2, #16
 800a1e0:	f002 f924 	bl	800c42c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1e4:	b9f8      	cbnz	r0, 800a226 <HAL_SD_InitCard+0x22a>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a1e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1ea:	6820      	ldr	r0, [r4, #0]
 800a1ec:	f002 f876 	bl	800c2dc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d142      	bne.n	800a27a <HAL_SD_InitCard+0x27e>
}
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	b018      	add	sp, #96	; 0x60
 800a1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a1fc:	f7fb f9be 	bl	800557c <HAL_GetTick>
 800a200:	1bc0      	subs	r0, r0, r7
 800a202:	3001      	adds	r0, #1
 800a204:	d190      	bne.n	800a128 <HAL_SD_InitCard+0x12c>
            return HAL_SD_ERROR_TIMEOUT;
 800a206:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a20a:	e73b      	b.n	800a084 <HAL_SD_InitCard+0x88>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a20c:	f7fb f9b6 	bl	800557c <HAL_GetTick>
 800a210:	1bc0      	subs	r0, r0, r7
 800a212:	3001      	adds	r0, #1
 800a214:	d19a      	bne.n	800a14c <HAL_SD_InitCard+0x150>
 800a216:	e7f6      	b.n	800a206 <HAL_SD_InitCard+0x20a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a218:	f10d 0116 	add.w	r1, sp, #22
 800a21c:	6820      	ldr	r0, [r4, #0]
 800a21e:	f002 fa17 	bl	800c650 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a222:	2800      	cmp	r0, #0
 800a224:	d0c8      	beq.n	800a1b8 <HAL_SD_InitCard+0x1bc>
    hsd->State = HAL_SD_STATE_READY;
 800a226:	2501      	movs	r5, #1
 800a228:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a22c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a22e:	4308      	orrs	r0, r1
 800a230:	e72d      	b.n	800a08e <HAL_SD_InitCard+0x92>
    hsd->SdCard.RelCardAdd = sd_rca;
 800a232:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a236:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800a238:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a23a:	0409      	lsls	r1, r1, #16
 800a23c:	f002 f9f1 	bl	800c622 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a240:	2800      	cmp	r0, #0
 800a242:	d1f0      	bne.n	800a226 <HAL_SD_InitCard+0x22a>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a244:	4601      	mov	r1, r0
 800a246:	6820      	ldr	r0, [r4, #0]
 800a248:	f002 f832 	bl	800c2b0 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a24c:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a24e:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a250:	6820      	ldr	r0, [r4, #0]
 800a252:	f002 f82d 	bl	800c2b0 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a256:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a258:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a25a:	6820      	ldr	r0, [r4, #0]
 800a25c:	f002 f828 	bl	800c2b0 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a260:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a262:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a264:	6820      	ldr	r0, [r4, #0]
 800a266:	f002 f823 	bl	800c2b0 <SDMMC_GetResponse>
 800a26a:	66e0      	str	r0, [r4, #108]	; 0x6c
 800a26c:	e7a7      	b.n	800a1be <HAL_SD_InitCard+0x1c2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a26e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800a272:	e7d8      	b.n	800a226 <HAL_SD_InitCard+0x22a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a274:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a278:	e7d5      	b.n	800a226 <HAL_SD_InitCard+0x22a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a27a:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800a27c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a27e:	4a06      	ldr	r2, [pc, #24]	; (800a298 <HAL_SD_InitCard+0x29c>)
 800a280:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a282:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a284:	4318      	orrs	r0, r3
 800a286:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a288:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 800a28c:	e7b2      	b.n	800a1f4 <HAL_SD_InitCard+0x1f8>
 800a28e:	bf00      	nop
 800a290:	000c3500 	.word	0x000c3500
 800a294:	00012110 	.word	0x00012110
 800a298:	1fe00fff 	.word	0x1fe00fff
 800a29c:	c1100000 	.word	0xc1100000

0800a2a0 <HAL_SD_GetCardStatus>:
{
 800a2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a4:	4604      	mov	r4, r0
 800a2a6:	b096      	sub	sp, #88	; 0x58
 800a2a8:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 800a2aa:	f7fb f967 	bl	800557c <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a2ae:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800a2b0:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a2b2:	6820      	ldr	r0, [r4, #0]
 800a2b4:	f001 fffc 	bl	800c2b0 <SDMMC_GetResponse>
 800a2b8:	0183      	lsls	r3, r0, #6
 800a2ba:	d50b      	bpl.n	800a2d4 <HAL_SD_GetCardStatus+0x34>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a2bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2c0:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800a2c2:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2c4:	4a53      	ldr	r2, [pc, #332]	; (800a414 <HAL_SD_GetCardStatus+0x174>)
 800a2c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a2c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2ca:	4318      	orrs	r0, r3
 800a2cc:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a2ce:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800a2d2:	e08a      	b.n	800a3ea <HAL_SD_GetCardStatus+0x14a>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a2d4:	2140      	movs	r1, #64	; 0x40
 800a2d6:	6820      	ldr	r0, [r4, #0]
 800a2d8:	f002 f800 	bl	800c2dc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2dc:	b110      	cbz	r0, 800a2e4 <HAL_SD_GetCardStatus+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a2de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2e0:	63a3      	str	r3, [r4, #56]	; 0x38
 800a2e2:	e7ed      	b.n	800a2c0 <HAL_SD_GetCardStatus+0x20>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a2e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a2e6:	6820      	ldr	r0, [r4, #0]
 800a2e8:	0409      	lsls	r1, r1, #16
 800a2ea:	f002 f923 	bl	800c534 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	d1f5      	bne.n	800a2de <HAL_SD_GetCardStatus+0x3e>
  config.DataLength    = 64U;
 800a2f2:	2340      	movs	r3, #64	; 0x40
 800a2f4:	f04f 35ff 	mov.w	r5, #4294967295
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a2f8:	2760      	movs	r7, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a2fa:	9004      	str	r0, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a2fc:	4669      	mov	r1, sp
 800a2fe:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 800a300:	e9cd 5300 	strd	r5, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a304:	2302      	movs	r3, #2
 800a306:	e9cd 7302 	strd	r7, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a30a:	2301      	movs	r3, #1
 800a30c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a30e:	f001 ffd2 	bl	800c2b6 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a312:	6820      	ldr	r0, [r4, #0]
 800a314:	f002 fa09 	bl	800c72a <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a318:	2800      	cmp	r0, #0
 800a31a:	d1e0      	bne.n	800a2de <HAL_SD_GetCardStatus+0x3e>
  uint32_t *pData = pSDstatus;
 800a31c:	af06      	add	r7, sp, #24
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a322:	f412 7f95 	tst.w	r2, #298	; 0x12a
 800a326:	d00a      	beq.n	800a33e <HAL_SD_GetCardStatus+0x9e>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a32a:	0711      	lsls	r1, r2, #28
 800a32c:	d470      	bmi.n	800a410 <HAL_SD_GetCardStatus+0x170>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a32e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a330:	0792      	lsls	r2, r2, #30
 800a332:	d46b      	bmi.n	800a40c <HAL_SD_GetCardStatus+0x16c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a336:	069b      	lsls	r3, r3, #26
 800a338:	d520      	bpl.n	800a37c <HAL_SD_GetCardStatus+0xdc>
    return HAL_SD_ERROR_RX_OVERRUN;
 800a33a:	2020      	movs	r0, #32
 800a33c:	e7c0      	b.n	800a2c0 <HAL_SD_GetCardStatus+0x20>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a340:	0418      	lsls	r0, r3, #16
 800a342:	d508      	bpl.n	800a356 <HAL_SD_GetCardStatus+0xb6>
 800a344:	f107 0520 	add.w	r5, r7, #32
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a348:	6820      	ldr	r0, [r4, #0]
 800a34a:	f001 ff8b 	bl	800c264 <SDMMC_ReadFIFO>
 800a34e:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 800a352:	42af      	cmp	r7, r5
 800a354:	d1f8      	bne.n	800a348 <HAL_SD_GetCardStatus+0xa8>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a356:	f7fb f911 	bl	800557c <HAL_GetTick>
 800a35a:	eba0 0008 	sub.w	r0, r0, r8
 800a35e:	3001      	adds	r0, #1
 800a360:	d1dd      	bne.n	800a31e <HAL_SD_GetCardStatus+0x7e>
      return HAL_SD_ERROR_TIMEOUT;
 800a362:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a366:	e7ab      	b.n	800a2c0 <HAL_SD_GetCardStatus+0x20>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a368:	f001 ff7c 	bl	800c264 <SDMMC_ReadFIFO>
 800a36c:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a370:	f7fb f904 	bl	800557c <HAL_GetTick>
 800a374:	eba0 0008 	sub.w	r0, r0, r8
 800a378:	3001      	adds	r0, #1
 800a37a:	d0f2      	beq.n	800a362 <HAL_SD_GetCardStatus+0xc2>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a37c:	6820      	ldr	r0, [r4, #0]
 800a37e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800a380:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
 800a384:	d1f0      	bne.n	800a368 <HAL_SD_GetCardStatus+0xc8>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a386:	9a06      	ldr	r2, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a388:	4b23      	ldr	r3, [pc, #140]	; (800a418 <HAL_SD_GetCardStatus+0x178>)
 800a38a:	6383      	str	r3, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a38c:	f3c2 1381 	ubfx	r3, r2, #6, #2
 800a390:	7033      	strb	r3, [r6, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a392:	f3c2 1340 	ubfx	r3, r2, #5, #1
 800a396:	7073      	strb	r3, [r6, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a398:	0a13      	lsrs	r3, r2, #8
 800a39a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a39e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	8073      	strh	r3, [r6, #2]
 800a3a6:	9b07      	ldr	r3, [sp, #28]
 800a3a8:	ba1b      	rev	r3, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a3aa:	6073      	str	r3, [r6, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a3ac:	9b08      	ldr	r3, [sp, #32]
 800a3ae:	b2da      	uxtb	r2, r3
 800a3b0:	7232      	strb	r2, [r6, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a3b2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a3b6:	7272      	strb	r2, [r6, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a3b8:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a3bc:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a3be:	72b2      	strb	r2, [r6, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a3c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a3c6:	b2d1      	uxtb	r1, r2
 800a3c8:	430b      	orrs	r3, r1
 800a3ca:	81b3      	strh	r3, [r6, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a3cc:	f3c2 2385 	ubfx	r3, r2, #10, #6
 800a3d0:	73b3      	strb	r3, [r6, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a3d2:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800a3d6:	73f3      	strb	r3, [r6, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a3d8:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a3dc:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a3e0:	7433      	strb	r3, [r6, #16]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a3e2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a3e6:	7472      	strb	r2, [r6, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a3e8:	74b3      	strb	r3, [r6, #18]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a3ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a3ee:	6820      	ldr	r0, [r4, #0]
 800a3f0:	f001 ff74 	bl	800c2dc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3f4:	b130      	cbz	r0, 800a404 <HAL_SD_GetCardStatus+0x164>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3f6:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800a3f8:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3fa:	4a06      	ldr	r2, [pc, #24]	; (800a414 <HAL_SD_GetCardStatus+0x174>)
 800a3fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a3fe:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a400:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
}
 800a404:	4628      	mov	r0, r5
 800a406:	b016      	add	sp, #88	; 0x58
 800a408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a40c:	2002      	movs	r0, #2
 800a40e:	e757      	b.n	800a2c0 <HAL_SD_GetCardStatus+0x20>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a410:	2008      	movs	r0, #8
 800a412:	e755      	b.n	800a2c0 <HAL_SD_GetCardStatus+0x20>
 800a414:	1fe00fff 	.word	0x1fe00fff
 800a418:	18000f3a 	.word	0x18000f3a

0800a41c <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a41c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a41e:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a420:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a422:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a424:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a426:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a428:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800a42a:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a42c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a42e:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a430:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a432:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a434:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a436:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a438:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 800a43a:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a43c:	61cb      	str	r3, [r1, #28]
}
 800a43e:	4770      	bx	lr

0800a440 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 800a440:	2303      	movs	r3, #3
{
 800a442:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800a444:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 800a448:	b08a      	sub	sp, #40	; 0x28
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a44a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 800a44c:	4604      	mov	r4, r0
 800a44e:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a450:	2b03      	cmp	r3, #3
 800a452:	d002      	beq.n	800a45a <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a454:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a458:	d103      	bne.n	800a462 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a45a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a45c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a460:	e064      	b.n	800a52c <HAL_SD_ConfigWideBusOperation+0xec>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a462:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800a466:	6800      	ldr	r0, [r0, #0]
 800a468:	d13b      	bne.n	800a4e2 <HAL_SD_ConfigWideBusOperation+0xa2>
  uint32_t scr[2U] = {0UL, 0UL};
 800a46a:	2100      	movs	r1, #0
 800a46c:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a470:	f001 ff1e 	bl	800c2b0 <SDMMC_GetResponse>
 800a474:	0180      	lsls	r0, r0, #6
 800a476:	d42e      	bmi.n	800a4d6 <HAL_SD_ConfigWideBusOperation+0x96>
  errorstate = SD_FindSCR(hsd, scr);
 800a478:	a904      	add	r1, sp, #16
 800a47a:	4620      	mov	r0, r4
 800a47c:	f7ff fbd2 	bl	8009c24 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a480:	b960      	cbnz	r0, 800a49c <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a482:	9b05      	ldr	r3, [sp, #20]
 800a484:	0359      	lsls	r1, r3, #13
 800a486:	d529      	bpl.n	800a4dc <HAL_SD_ConfigWideBusOperation+0x9c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a488:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a48a:	6820      	ldr	r0, [r4, #0]
 800a48c:	0409      	lsls	r1, r1, #16
 800a48e:	f002 f851 	bl	800c534 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a492:	b918      	cbnz	r0, 800a49c <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a494:	2102      	movs	r1, #2
 800a496:	6820      	ldr	r0, [r4, #0]
 800a498:	f002 f87b 	bl	800c592 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800a49c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a49e:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 800a4a0:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a4a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a4a4:	6826      	ldr	r6, [r4, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d042      	beq.n	800a530 <HAL_SD_ConfigWideBusOperation+0xf0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4aa:	4b32      	ldr	r3, [pc, #200]	; (800a574 <HAL_SD_ConfigWideBusOperation+0x134>)
    status = HAL_ERROR;
 800a4ac:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4ae:	63b3      	str	r3, [r6, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a4b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a4b4:	6820      	ldr	r0, [r4, #0]
 800a4b6:	f001 ff11 	bl	800c2dc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4ba:	b130      	cbz	r0, 800a4ca <HAL_SD_ConfigWideBusOperation+0x8a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4bc:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800a4be:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4c0:	4a2c      	ldr	r2, [pc, #176]	; (800a574 <HAL_SD_ConfigWideBusOperation+0x134>)
 800a4c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a4c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a4c6:	4318      	orrs	r0, r3
 800a4c8:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 800a4ca:	2301      	movs	r3, #1
}
 800a4cc:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800a4ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a4d2:	b00a      	add	sp, #40	; 0x28
 800a4d4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a4d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a4da:	e7df      	b.n	800a49c <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a4dc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a4e0:	e7dc      	b.n	800a49c <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a4e2:	bb01      	cbnz	r1, 800a526 <HAL_SD_ConfigWideBusOperation+0xe6>
  uint32_t scr[2U] = {0UL, 0UL};
 800a4e4:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a4e8:	f001 fee2 	bl	800c2b0 <SDMMC_GetResponse>
 800a4ec:	0182      	lsls	r2, r0, #6
 800a4ee:	d414      	bmi.n	800a51a <HAL_SD_ConfigWideBusOperation+0xda>
  errorstate = SD_FindSCR(hsd, scr);
 800a4f0:	a904      	add	r1, sp, #16
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f7ff fb96 	bl	8009c24 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4f8:	b960      	cbnz	r0, 800a514 <HAL_SD_ConfigWideBusOperation+0xd4>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a4fa:	9b05      	ldr	r3, [sp, #20]
 800a4fc:	03db      	lsls	r3, r3, #15
 800a4fe:	d50f      	bpl.n	800a520 <HAL_SD_ConfigWideBusOperation+0xe0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a500:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a502:	6820      	ldr	r0, [r4, #0]
 800a504:	0409      	lsls	r1, r1, #16
 800a506:	f002 f815 	bl	800c534 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a50a:	b918      	cbnz	r0, 800a514 <HAL_SD_ConfigWideBusOperation+0xd4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a50c:	4601      	mov	r1, r0
 800a50e:	6820      	ldr	r0, [r4, #0]
 800a510:	f002 f83f 	bl	800c592 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800a514:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a516:	4308      	orrs	r0, r1
 800a518:	e7c2      	b.n	800a4a0 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a51a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a51e:	e7f9      	b.n	800a514 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a520:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a524:	e7f6      	b.n	800a514 <HAL_SD_ConfigWideBusOperation+0xd4>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a526:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a528:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a52c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a52e:	e7b8      	b.n	800a4a2 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a530:	6863      	ldr	r3, [r4, #4]
 800a532:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a534:	68a3      	ldr	r3, [r4, #8]
    Init.BusWide             = WideMode;
 800a536:	e9cd 3505 	strd	r3, r5, [sp, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a53a:	6923      	ldr	r3, [r4, #16]
 800a53c:	9307      	str	r3, [sp, #28]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800a53e:	6963      	ldr	r3, [r4, #20]
 800a540:	2b03      	cmp	r3, #3
 800a542:	d90c      	bls.n	800a55e <HAL_SD_ConfigWideBusOperation+0x11e>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800a544:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800a546:	ab0a      	add	r3, sp, #40	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 800a548:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 800a54a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800a54e:	ab04      	add	r3, sp, #16
 800a550:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a554:	4630      	mov	r0, r6
 800a556:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a558:	f001 fe6a 	bl	800c230 <SDMMC_Init>
 800a55c:	e7a8      	b.n	800a4b0 <HAL_SD_ConfigWideBusOperation+0x70>
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a55e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a560:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a564:	d0ee      	beq.n	800a544 <HAL_SD_ConfigWideBusOperation+0x104>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a566:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800a56a:	bf0c      	ite	eq
 800a56c:	2302      	moveq	r3, #2
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800a56e:	2304      	movne	r3, #4
 800a570:	e7e8      	b.n	800a544 <HAL_SD_ConfigWideBusOperation+0x104>
 800a572:	bf00      	nop
 800a574:	1fe00fff 	.word	0x1fe00fff

0800a578 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a578:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 800a57a:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a57c:	0409      	lsls	r1, r1, #16
{
 800a57e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a580:	6800      	ldr	r0, [r0, #0]
 800a582:	f002 f8b9 	bl	800c6f8 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a586:	4601      	mov	r1, r0
 800a588:	b928      	cbnz	r0, 800a596 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a58a:	6820      	ldr	r0, [r4, #0]
 800a58c:	f001 fe90 	bl	800c2b0 <SDMMC_GetResponse>
}
 800a590:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800a594:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 800a596:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 800a598:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 800a59a:	4319      	orrs	r1, r3
 800a59c:	63a1      	str	r1, [r4, #56]	; 0x38
 800a59e:	e7f7      	b.n	800a590 <HAL_SD_GetCardState+0x18>

0800a5a0 <HAL_SD_Init>:
{
 800a5a0:	b570      	push	{r4, r5, r6, lr}
  if(hsd == NULL)
 800a5a2:	4604      	mov	r4, r0
{
 800a5a4:	b086      	sub	sp, #24
  if(hsd == NULL)
 800a5a6:	b918      	cbnz	r0, 800a5b0 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 800a5a8:	2501      	movs	r5, #1
}
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	b006      	add	sp, #24
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 800a5b0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800a5b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a5b8:	b93b      	cbnz	r3, 800a5ca <HAL_SD_Init+0x2a>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800a5ba:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 800a5bc:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800a5be:	b90b      	cbnz	r3, 800a5c4 <HAL_SD_Init+0x24>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f7f8 fb01 	bl	8002bcc <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800a5ca:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a5cc:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800a5ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a5d2:	f7ff fd13 	bl	8009ffc <HAL_SD_InitCard>
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d1e6      	bne.n	800a5a8 <HAL_SD_Init+0x8>
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a5da:	a901      	add	r1, sp, #4
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f7ff fe5f 	bl	800a2a0 <HAL_SD_GetCardStatus>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	d1e0      	bne.n	800a5a8 <HAL_SD_Init+0x8>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a5e6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 800a5e8:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a5ec:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a5ee:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800a5f2:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a5f4:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a5f6:	d11d      	bne.n	800a634 <HAL_SD_Init+0x94>
 800a5f8:	b902      	cbnz	r2, 800a5fc <HAL_SD_Init+0x5c>
 800a5fa:	b1c3      	cbz	r3, 800a62e <HAL_SD_Init+0x8e>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a5fc:	f44f 7300 	mov.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a600:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a602:	68e1      	ldr	r1, [r4, #12]
 800a604:	4620      	mov	r0, r4
 800a606:	f7ff ff1b 	bl	800a440 <HAL_SD_ConfigWideBusOperation>
 800a60a:	4605      	mov	r5, r0
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d1cb      	bne.n	800a5a8 <HAL_SD_Init+0x8>
  tickstart = HAL_GetTick();
 800a610:	f7fa ffb4 	bl	800557c <HAL_GetTick>
 800a614:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a616:	4620      	mov	r0, r4
 800a618:	f7ff ffae 	bl	800a578 <HAL_SD_GetCardState>
 800a61c:	2804      	cmp	r0, #4
 800a61e:	d10b      	bne.n	800a638 <HAL_SD_Init+0x98>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a620:	2300      	movs	r3, #0
 800a622:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800a624:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800a626:	2301      	movs	r3, #1
 800a628:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800a62c:	e7bd      	b.n	800a5aa <HAL_SD_Init+0xa>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a62e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a632:	e7e5      	b.n	800a600 <HAL_SD_Init+0x60>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a634:	65e0      	str	r0, [r4, #92]	; 0x5c
 800a636:	e7e4      	b.n	800a602 <HAL_SD_Init+0x62>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800a638:	f7fa ffa0 	bl	800557c <HAL_GetTick>
 800a63c:	1b80      	subs	r0, r0, r6
 800a63e:	3001      	adds	r0, #1
 800a640:	d1e9      	bne.n	800a616 <HAL_SD_Init+0x76>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a642:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
      return HAL_TIMEOUT;
 800a646:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a648:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800a64a:	2301      	movs	r3, #1
 800a64c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 800a650:	e7ab      	b.n	800a5aa <HAL_SD_Init+0xa>

0800a652 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a652:	4770      	bx	lr

0800a654 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800a654:	4770      	bx	lr

0800a656 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800a656:	4770      	bx	lr

0800a658 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 800a658:	4770      	bx	lr
	...

0800a65c <HAL_SD_IRQHandler>:
{
 800a65c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t context = hsd->Context;
 800a65e:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 800a660:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a662:	6800      	ldr	r0, [r0, #0]
 800a664:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a666:	041b      	lsls	r3, r3, #16
 800a668:	d520      	bpl.n	800a6ac <HAL_SD_IRQHandler+0x50>
 800a66a:	072f      	lsls	r7, r5, #28
 800a66c:	d51e      	bpl.n	800a6ac <HAL_SD_IRQHandler+0x50>
  if (hsd->RxXferSize >= 32U)
 800a66e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a670:	2b1f      	cmp	r3, #31
 800a672:	d919      	bls.n	800a6a8 <HAL_SD_IRQHandler+0x4c>
  tmp = hsd->pRxBuffPtr;
 800a674:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a676:	1d35      	adds	r5, r6, #4
 800a678:	f106 0724 	add.w	r7, r6, #36	; 0x24
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a67c:	6820      	ldr	r0, [r4, #0]
 800a67e:	3504      	adds	r5, #4
 800a680:	f001 fdf0 	bl	800c264 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800a684:	f805 0c08 	strb.w	r0, [r5, #-8]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a688:	0a03      	lsrs	r3, r0, #8
 800a68a:	f805 3c07 	strb.w	r3, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a68e:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a690:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a692:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a696:	f805 0c05 	strb.w	r0, [r5, #-5]
    for(count = 0U; count < 8U; count++)
 800a69a:	42bd      	cmp	r5, r7
 800a69c:	d1ee      	bne.n	800a67c <HAL_SD_IRQHandler+0x20>
    hsd->RxXferSize -= 32U;
 800a69e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hsd->pRxBuffPtr = tmp;
 800a6a0:	3620      	adds	r6, #32
    hsd->RxXferSize -= 32U;
 800a6a2:	3b20      	subs	r3, #32
    hsd->pRxBuffPtr = tmp;
 800a6a4:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800a6a6:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800a6a8:	b003      	add	sp, #12
 800a6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a6ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a6ae:	05de      	lsls	r6, r3, #23
 800a6b0:	d553      	bpl.n	800a75a <HAL_SD_IRQHandler+0xfe>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a6b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6b6:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800a6b8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a6ba:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800a6be:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a6c2:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a6c4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a6c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6ca:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a6cc:	68c3      	ldr	r3, [r0, #12]
 800a6ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6d2:	60c3      	str	r3, [r0, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800a6d4:	f015 0308 	ands.w	r3, r5, #8
 800a6d8:	d01f      	beq.n	800a71a <HAL_SD_IRQHandler+0xbe>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a6da:	f015 0f22 	tst.w	r5, #34	; 0x22
 800a6de:	d008      	beq.n	800a6f2 <HAL_SD_IRQHandler+0x96>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a6e0:	f001 fe7a 	bl	800c3d8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800a6e4:	b128      	cbz	r0, 800a6f2 <HAL_SD_IRQHandler+0x96>
          hsd->ErrorCode |= errorstate;
 800a6e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a6e8:	4318      	orrs	r0, r3
 800a6ea:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f7ff fbcd 	bl	8009e8c <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a6f2:	6823      	ldr	r3, [r4, #0]
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a6f4:	07a9      	lsls	r1, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a6f6:	4a69      	ldr	r2, [pc, #420]	; (800a89c <HAL_SD_IRQHandler+0x240>)
 800a6f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a6fa:	f04f 0301 	mov.w	r3, #1
 800a6fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a702:	f04f 0300 	mov.w	r3, #0
 800a706:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a708:	d003      	beq.n	800a712 <HAL_SD_IRQHandler+0xb6>
        HAL_SD_RxCpltCallback(hsd);
 800a70a:	4620      	mov	r0, r4
 800a70c:	f002 fd44 	bl	800d198 <HAL_SD_RxCpltCallback>
 800a710:	e7ca      	b.n	800a6a8 <HAL_SD_IRQHandler+0x4c>
        HAL_SD_TxCpltCallback(hsd);
 800a712:	4620      	mov	r0, r4
 800a714:	f002 fd3c 	bl	800d190 <HAL_SD_TxCpltCallback>
 800a718:	e7c6      	b.n	800a6a8 <HAL_SD_IRQHandler+0x4c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a71a:	062a      	lsls	r2, r5, #24
 800a71c:	d5c4      	bpl.n	800a6a8 <HAL_SD_IRQHandler+0x4c>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a71e:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800a722:	6283      	str	r3, [r0, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a724:	62c3      	str	r3, [r0, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a726:	6503      	str	r3, [r0, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a728:	d008      	beq.n	800a73c <HAL_SD_IRQHandler+0xe0>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a72a:	f001 fe55 	bl	800c3d8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800a72e:	b128      	cbz	r0, 800a73c <HAL_SD_IRQHandler+0xe0>
          hsd->ErrorCode |= errorstate;
 800a730:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a732:	4318      	orrs	r0, r3
 800a734:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a736:	4620      	mov	r0, r4
 800a738:	f7ff fba8 	bl	8009e8c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a73c:	2301      	movs	r3, #1
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a73e:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800a742:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a746:	f04f 0300 	mov.w	r3, #0
 800a74a:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a74c:	d002      	beq.n	800a754 <HAL_SD_IRQHandler+0xf8>
        HAL_SD_TxCpltCallback(hsd);
 800a74e:	4620      	mov	r0, r4
 800a750:	f002 fd1e 	bl	800d190 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a754:	07af      	lsls	r7, r5, #30
 800a756:	d0a7      	beq.n	800a6a8 <HAL_SD_IRQHandler+0x4c>
 800a758:	e7d7      	b.n	800a70a <HAL_SD_IRQHandler+0xae>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a75a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a75c:	045e      	lsls	r6, r3, #17
 800a75e:	d527      	bpl.n	800a7b0 <HAL_SD_IRQHandler+0x154>
 800a760:	0729      	lsls	r1, r5, #28
 800a762:	d525      	bpl.n	800a7b0 <HAL_SD_IRQHandler+0x154>
  if (hsd->TxXferSize >= 32U)
 800a764:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a766:	2b1f      	cmp	r3, #31
 800a768:	d99e      	bls.n	800a6a8 <HAL_SD_IRQHandler+0x4c>
  tmp = hsd->pTxBuffPtr;
 800a76a:	6a26      	ldr	r6, [r4, #32]
 800a76c:	1d35      	adds	r5, r6, #4
 800a76e:	f106 0724 	add.w	r7, r6, #36	; 0x24
      data = (uint32_t)(*tmp);
 800a772:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800a776:	3504      	adds	r5, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a778:	a901      	add	r1, sp, #4
 800a77a:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800a77c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800a77e:	f815 2c07 	ldrb.w	r2, [r5, #-7]
 800a782:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a786:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800a788:	f815 2c06 	ldrb.w	r2, [r5, #-6]
 800a78c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a790:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800a792:	f815 2c05 	ldrb.w	r2, [r5, #-5]
 800a796:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a79a:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a79c:	f001 fd65 	bl	800c26a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a7a0:	42af      	cmp	r7, r5
 800a7a2:	d1e6      	bne.n	800a772 <HAL_SD_IRQHandler+0x116>
    hsd->TxXferSize -= 32U;
 800a7a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsd->pTxBuffPtr = tmp;
 800a7a6:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800a7a8:	3b20      	subs	r3, #32
    hsd->pTxBuffPtr = tmp;
 800a7aa:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize -= 32U;
 800a7ac:	6263      	str	r3, [r4, #36]	; 0x24
 800a7ae:	e77b      	b.n	800a6a8 <HAL_SD_IRQHandler+0x4c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a7b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a7b2:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a7b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a7b8:	d056      	beq.n	800a868 <HAL_SD_IRQHandler+0x20c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a7ba:	079a      	lsls	r2, r3, #30
 800a7bc:	d503      	bpl.n	800a7c6 <HAL_SD_IRQHandler+0x16a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a7be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a7c0:	f043 0302 	orr.w	r3, r3, #2
 800a7c4:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a7c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a7c8:	071b      	lsls	r3, r3, #28
 800a7ca:	d503      	bpl.n	800a7d4 <HAL_SD_IRQHandler+0x178>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a7cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a7ce:	f043 0308 	orr.w	r3, r3, #8
 800a7d2:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a7d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a7d6:	069f      	lsls	r7, r3, #26
 800a7d8:	d503      	bpl.n	800a7e2 <HAL_SD_IRQHandler+0x186>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a7da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a7dc:	f043 0320 	orr.w	r3, r3, #32
 800a7e0:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a7e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a7e4:	06de      	lsls	r6, r3, #27
 800a7e6:	d503      	bpl.n	800a7f0 <HAL_SD_IRQHandler+0x194>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a7e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a7ea:	f043 0310 	orr.w	r3, r3, #16
 800a7ee:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a7f0:	4b2a      	ldr	r3, [pc, #168]	; (800a89c <HAL_SD_IRQHandler+0x240>)
 800a7f2:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a7f4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a7f6:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800a7fa:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a7fc:	68c3      	ldr	r3, [r0, #12]
 800a7fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a802:	60c3      	str	r3, [r0, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a804:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a806:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a80a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a80c:	68c3      	ldr	r3, [r0, #12]
 800a80e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a812:	60c3      	str	r3, [r0, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a814:	f001 fde0 	bl	800c3d8 <SDMMC_CmdStopTransfer>
 800a818:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a81a:	f015 0108 	ands.w	r1, r5, #8
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a81e:	ea40 0003 	orr.w	r0, r0, r3
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a822:	6823      	ldr	r3, [r4, #0]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a824:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a826:	68da      	ldr	r2, [r3, #12]
 800a828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a82c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a82e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a832:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a834:	d008      	beq.n	800a848 <HAL_SD_IRQHandler+0x1ec>
      hsd->State = HAL_SD_STATE_READY;
 800a836:	2301      	movs	r3, #1
 800a838:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a83c:	2300      	movs	r3, #0
 800a83e:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a840:	4620      	mov	r0, r4
 800a842:	f7ff fb23 	bl	8009e8c <HAL_SD_ErrorCallback>
 800a846:	e72f      	b.n	800a6a8 <HAL_SD_IRQHandler+0x4c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a848:	0628      	lsls	r0, r5, #24
 800a84a:	f57f af2d 	bpl.w	800a6a8 <HAL_SD_IRQHandler+0x4c>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a84e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a850:	2a00      	cmp	r2, #0
 800a852:	f43f af29 	beq.w	800a6a8 <HAL_SD_IRQHandler+0x4c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a858:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a85c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a85e:	6519      	str	r1, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a860:	2301      	movs	r3, #1
 800a862:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800a866:	e7eb      	b.n	800a840 <HAL_SD_IRQHandler+0x1e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a868:	00da      	lsls	r2, r3, #3
 800a86a:	f57f af1d 	bpl.w	800a6a8 <HAL_SD_IRQHandler+0x4c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a86e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a872:	f005 0520 	and.w	r5, r5, #32
 800a876:	6383      	str	r3, [r0, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a878:	6d03      	ldr	r3, [r0, #80]	; 0x50
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a87a:	4620      	mov	r0, r4
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a87c:	075b      	lsls	r3, r3, #29
 800a87e:	d406      	bmi.n	800a88e <HAL_SD_IRQHandler+0x232>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a880:	b115      	cbz	r5, 800a888 <HAL_SD_IRQHandler+0x22c>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a882:	f7ff fee9 	bl	800a658 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800a886:	e70f      	b.n	800a6a8 <HAL_SD_IRQHandler+0x4c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a888:	f7ff fee4 	bl	800a654 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800a88c:	e70c      	b.n	800a6a8 <HAL_SD_IRQHandler+0x4c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a88e:	b115      	cbz	r5, 800a896 <HAL_SD_IRQHandler+0x23a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a890:	f7ff fee1 	bl	800a656 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800a894:	e708      	b.n	800a6a8 <HAL_SD_IRQHandler+0x4c>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a896:	f7ff fedc 	bl	800a652 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a89a:	e705      	b.n	800a6a8 <HAL_SD_IRQHandler+0x4c>
 800a89c:	18000f3a 	.word	0x18000f3a

0800a8a0 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800a8a0:	6803      	ldr	r3, [r0, #0]
 800a8a2:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a8a4:	699a      	ldr	r2, [r3, #24]
 800a8a6:	f042 0208 	orr.w	r2, r2, #8
 800a8aa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a8ac:	699a      	ldr	r2, [r3, #24]
 800a8ae:	f042 0210 	orr.w	r2, r2, #16
 800a8b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	f022 0201 	bic.w	r2, r2, #1
 800a8ba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a8bc:	691a      	ldr	r2, [r3, #16]
 800a8be:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
 800a8c2:	f022 0203 	bic.w	r2, r2, #3
 800a8c6:	611a      	str	r2, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a8c8:	689a      	ldr	r2, [r3, #8]
 800a8ca:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a8ce:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a8d0:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a8d4:	2a04      	cmp	r2, #4
 800a8d6:	d00b      	beq.n	800a8f0 <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a8d8:	068a      	lsls	r2, r1, #26
 800a8da:	d509      	bpl.n	800a8f0 <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a8dc:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a8e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a8e4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a8e8:	699a      	ldr	r2, [r3, #24]
 800a8ea:	f042 0220 	orr.w	r2, r2, #32
 800a8ee:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a8f0:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a8f4:	2a03      	cmp	r2, #3
 800a8f6:	d00b      	beq.n	800a910 <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a8f8:	064a      	lsls	r2, r1, #25
 800a8fa:	d509      	bpl.n	800a910 <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a8fc:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a900:	f042 0204 	orr.w	r2, r2, #4
 800a904:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a908:	699a      	ldr	r2, [r3, #24]
 800a90a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a90e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a910:	058a      	lsls	r2, r1, #22
 800a912:	d509      	bpl.n	800a928 <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a914:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a918:	f042 0201 	orr.w	r2, r2, #1
 800a91c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a920:	699a      	ldr	r2, [r3, #24]
 800a922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a926:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a928:	05ca      	lsls	r2, r1, #23
 800a92a:	d509      	bpl.n	800a940 <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a92c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a930:	f042 0208 	orr.w	r2, r2, #8
 800a934:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a938:	699a      	ldr	r2, [r3, #24]
 800a93a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a93e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a940:	2300      	movs	r3, #0
 800a942:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a946:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800a94a:	4770      	bx	lr

0800a94c <HAL_SPI_Init>:
{
 800a94c:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800a94e:	4604      	mov	r4, r0
 800a950:	b908      	cbnz	r0, 800a956 <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 800a952:	2001      	movs	r0, #1
}
 800a954:	bd70      	pop	{r4, r5, r6, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a956:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a958:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a95a:	4940      	ldr	r1, [pc, #256]	; (800aa5c <HAL_SPI_Init+0x110>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a95c:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a95e:	428a      	cmp	r2, r1
 800a960:	68c3      	ldr	r3, [r0, #12]
 800a962:	d009      	beq.n	800a978 <HAL_SPI_Init+0x2c>
 800a964:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 800a968:	428a      	cmp	r2, r1
 800a96a:	d005      	beq.n	800a978 <HAL_SPI_Init+0x2c>
 800a96c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a970:	428a      	cmp	r2, r1
 800a972:	d001      	beq.n	800a978 <HAL_SPI_Init+0x2c>
 800a974:	2b0f      	cmp	r3, #15
 800a976:	d8ec      	bhi.n	800a952 <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a978:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a97a:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a97c:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800a97e:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 800a980:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a984:	4935      	ldr	r1, [pc, #212]	; (800aa5c <HAL_SPI_Init+0x110>)
 800a986:	428a      	cmp	r2, r1
 800a988:	d066      	beq.n	800aa58 <HAL_SPI_Init+0x10c>
 800a98a:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 800a98e:	428a      	cmp	r2, r1
 800a990:	d062      	beq.n	800aa58 <HAL_SPI_Init+0x10c>
 800a992:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a996:	428a      	cmp	r2, r1
 800a998:	d05e      	beq.n	800aa58 <HAL_SPI_Init+0x10c>
 800a99a:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a99c:	d8d9      	bhi.n	800a952 <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a99e:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800a9a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a9a6:	b923      	cbnz	r3, 800a9b2 <HAL_SPI_Init+0x66>
    hspi->Lock = HAL_UNLOCKED;
 800a9a8:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f7f8 f96b 	bl	8002c88 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a9b2:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800a9b4:	6822      	ldr	r2, [r4, #0]
 800a9b6:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 800a9b8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800a9bc:	6813      	ldr	r3, [r2, #0]
 800a9be:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800a9c0:	f023 0301 	bic.w	r3, r3, #1
 800a9c4:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800a9c6:	69a3      	ldr	r3, [r4, #24]
 800a9c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9cc:	d107      	bne.n	800a9de <HAL_SPI_Init+0x92>
 800a9ce:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800a9d2:	d104      	bne.n	800a9de <HAL_SPI_Init+0x92>
 800a9d4:	b91d      	cbnz	r5, 800a9de <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a9d6:	6810      	ldr	r0, [r2, #0]
 800a9d8:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800a9dc:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a9de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a9e0:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a9e2:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a9e4:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a9e6:	4330      	orrs	r0, r6
 800a9e8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800a9ea:	4330      	orrs	r0, r6
 800a9ec:	68e6      	ldr	r6, [r4, #12]
 800a9ee:	4330      	orrs	r0, r6
 800a9f0:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a9f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a9f4:	4303      	orrs	r3, r0
 800a9f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a9f8:	4303      	orrs	r3, r0
 800a9fa:	6920      	ldr	r0, [r4, #16]
 800a9fc:	4303      	orrs	r3, r0
 800a9fe:	6960      	ldr	r0, [r4, #20]
 800aa00:	4303      	orrs	r3, r0
 800aa02:	6a20      	ldr	r0, [r4, #32]
 800aa04:	4303      	orrs	r3, r0
 800aa06:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800aa08:	4303      	orrs	r3, r0
 800aa0a:	68a0      	ldr	r0, [r4, #8]
 800aa0c:	4303      	orrs	r3, r0
 800aa0e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800aa10:	4303      	orrs	r3, r0
 800aa12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa14:	4303      	orrs	r3, r0
 800aa16:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800aa18:	b959      	cbnz	r1, 800aa32 <HAL_SPI_Init+0xe6>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800aa1a:	6893      	ldr	r3, [r2, #8]
 800aa1c:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800aa20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aa24:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800aa26:	6893      	ldr	r3, [r2, #8]
 800aa28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aa2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aa30:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aa32:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800aa34:	f023 0301 	bic.w	r3, r3, #1
 800aa38:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800aa3a:	024b      	lsls	r3, r1, #9
 800aa3c:	d505      	bpl.n	800aa4a <HAL_SPI_Init+0xfe>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800aa3e:	68d3      	ldr	r3, [r2, #12]
 800aa40:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800aa42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa46:	430b      	orrs	r3, r1
 800aa48:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa4a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800aa4c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa4e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800aa52:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 800aa56:	e77d      	b.n	800a954 <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aa58:	2b10      	cmp	r3, #16
 800aa5a:	e79f      	b.n	800a99c <HAL_SPI_Init+0x50>
 800aa5c:	40013000 	.word	0x40013000

0800aa60 <HAL_SPI_TransmitReceive_DMA>:
{
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800aa64:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 800aa68:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d012      	beq.n	800aa94 <HAL_SPI_TransmitReceive_DMA+0x34>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tmp_state   = hspi->State;
 800aa74:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 800aa78:	6840      	ldr	r0, [r0, #4]
  tmp_state   = hspi->State;
 800aa7a:	b2db      	uxtb	r3, r3
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 800aa7c:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800aa80:	d103      	bne.n	800aa8a <HAL_SPI_TransmitReceive_DMA+0x2a>
 800aa82:	68a0      	ldr	r0, [r4, #8]
 800aa84:	b908      	cbnz	r0, 800aa8a <HAL_SPI_TransmitReceive_DMA+0x2a>
 800aa86:	2b04      	cmp	r3, #4
 800aa88:	d006      	beq.n	800aa98 <HAL_SPI_TransmitReceive_DMA+0x38>
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d004      	beq.n	800aa98 <HAL_SPI_TransmitReceive_DMA+0x38>
    __HAL_UNLOCK(hspi);
 800aa8e:	2300      	movs	r3, #0
 800aa90:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800aa94:	2002      	movs	r0, #2
 800aa96:	e004      	b.n	800aaa2 <HAL_SPI_TransmitReceive_DMA+0x42>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800aa98:	b921      	cbnz	r1, 800aaa4 <HAL_SPI_TransmitReceive_DMA+0x44>
    __HAL_UNLOCK(hspi);
 800aa9a:	2300      	movs	r3, #0
    return errorcode;
 800aa9c:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800aa9e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800aaa2:	bd70      	pop	{r4, r5, r6, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800aaa4:	2a00      	cmp	r2, #0
 800aaa6:	d0f8      	beq.n	800aa9a <HAL_SPI_TransmitReceive_DMA+0x3a>
 800aaa8:	2d00      	cmp	r5, #0
 800aaaa:	d0f6      	beq.n	800aa9a <HAL_SPI_TransmitReceive_DMA+0x3a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aaac:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800aab0:	2b04      	cmp	r3, #4
 800aab2:	d002      	beq.n	800aaba <HAL_SPI_TransmitReceive_DMA+0x5a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aab4:	2305      	movs	r3, #5
 800aab6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aaba:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aabc:	65e1      	str	r1, [r4, #92]	; 0x5c
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aabe:	6821      	ldr	r1, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aac0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800aac4:	68e6      	ldr	r6, [r4, #12]
  hspi->TxXferCount = Size;
 800aac6:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->RxXferCount = Size;
 800aaca:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800aace:	2e0f      	cmp	r6, #15
 800aad0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  hspi->TxXferSize  = Size;
 800aad2:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aad6:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800aad8:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->TxISR       = NULL;
 800aadc:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aae0:	688b      	ldr	r3, [r1, #8]
 800aae2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800aae6:	608b      	str	r3, [r1, #8]
 800aae8:	6983      	ldr	r3, [r0, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800aaea:	d924      	bls.n	800ab36 <HAL_SPI_TransmitReceive_DMA+0xd6>
 800aaec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aaf0:	d1d3      	bne.n	800aa9a <HAL_SPI_TransmitReceive_DMA+0x3a>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800aaf2:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800aaf6:	3130      	adds	r1, #48	; 0x30
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800aaf8:	2b04      	cmp	r3, #4
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800aafa:	bf0b      	itete	eq
 800aafc:	4b48      	ldreq	r3, [pc, #288]	; (800ac20 <HAL_SPI_TransmitReceive_DMA+0x1c0>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800aafe:	4b49      	ldrne	r3, [pc, #292]	; (800ac24 <HAL_SPI_TransmitReceive_DMA+0x1c4>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ab00:	6403      	streq	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ab02:	6403      	strne	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800ab04:	bf0c      	ite	eq
 800ab06:	4b48      	ldreq	r3, [pc, #288]	; (800ac28 <HAL_SPI_TransmitReceive_DMA+0x1c8>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ab08:	4b48      	ldrne	r3, [pc, #288]	; (800ac2c <HAL_SPI_TransmitReceive_DMA+0x1cc>)
 800ab0a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ab0c:	4b48      	ldr	r3, [pc, #288]	; (800ac30 <HAL_SPI_TransmitReceive_DMA+0x1d0>)
 800ab0e:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800ab10:	2300      	movs	r3, #0
 800ab12:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800ab14:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ab18:	f7fb ff40 	bl	800699c <HAL_DMA_Start_IT>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d045      	beq.n	800abae <HAL_SPI_TransmitReceive_DMA+0x14e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ab22:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ab26:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ab28:	f043 0310 	orr.w	r3, r3, #16
 800ab2c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ab30:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
 800ab34:	e7b5      	b.n	800aaa2 <HAL_SPI_TransmitReceive_DMA+0x42>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ab36:	2e07      	cmp	r6, #7
 800ab38:	d914      	bls.n	800ab64 <HAL_SPI_TransmitReceive_DMA+0x104>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ab3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab3e:	d002      	beq.n	800ab46 <HAL_SPI_TransmitReceive_DMA+0xe6>
 800ab40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab44:	d1a9      	bne.n	800aa9a <HAL_SPI_TransmitReceive_DMA+0x3a>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ab46:	6fa6      	ldr	r6, [r4, #120]	; 0x78
 800ab48:	69b6      	ldr	r6, [r6, #24]
 800ab4a:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 800ab4e:	d105      	bne.n	800ab5c <HAL_SPI_TransmitReceive_DMA+0xfc>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800ab50:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800ab54:	3601      	adds	r6, #1
 800ab56:	0876      	lsrs	r6, r6, #1
 800ab58:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ab5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab60:	d1c7      	bne.n	800aaf2 <HAL_SPI_TransmitReceive_DMA+0x92>
 800ab62:	e00d      	b.n	800ab80 <HAL_SPI_TransmitReceive_DMA+0x120>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ab64:	6fa6      	ldr	r6, [r4, #120]	; 0x78
 800ab66:	69b6      	ldr	r6, [r6, #24]
 800ab68:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800ab6c:	d10d      	bne.n	800ab8a <HAL_SPI_TransmitReceive_DMA+0x12a>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800ab6e:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800ab72:	3601      	adds	r6, #1
 800ab74:	0876      	lsrs	r6, r6, #1
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800ab76:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ab7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab7e:	d10c      	bne.n	800ab9a <HAL_SPI_TransmitReceive_DMA+0x13a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ab80:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ab84:	3301      	adds	r3, #1
 800ab86:	085b      	lsrs	r3, r3, #1
 800ab88:	e00e      	b.n	800aba8 <HAL_SPI_TransmitReceive_DMA+0x148>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ab8a:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 800ab8e:	d1f4      	bne.n	800ab7a <HAL_SPI_TransmitReceive_DMA+0x11a>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800ab90:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800ab94:	3603      	adds	r6, #3
 800ab96:	08b6      	lsrs	r6, r6, #2
 800ab98:	e7ed      	b.n	800ab76 <HAL_SPI_TransmitReceive_DMA+0x116>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ab9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab9e:	d1a8      	bne.n	800aaf2 <HAL_SPI_TransmitReceive_DMA+0x92>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800aba0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800aba4:	3303      	adds	r3, #3
 800aba6:	089b      	lsrs	r3, r3, #2
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800aba8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800abac:	e7a1      	b.n	800aaf2 <HAL_SPI_TransmitReceive_DMA+0x92>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800abae:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800abb0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800abb2:	6891      	ldr	r1, [r2, #8]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800abb4:	3220      	adds	r2, #32
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800abb6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800abba:	f842 1c18 	str.w	r1, [r2, #-24]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800abbe:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  hspi->hdmatx->XferCpltCallback     = NULL;
 800abc0:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800abc4:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800abc8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800abcc:	f7fb fee6 	bl	800699c <HAL_DMA_Start_IT>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d1a6      	bne.n	800ab22 <HAL_SPI_TransmitReceive_DMA+0xc2>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800abd4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800abd6:	6822      	ldr	r2, [r4, #0]
 800abd8:	69db      	ldr	r3, [r3, #28]
 800abda:	4916      	ldr	r1, [pc, #88]	; (800ac34 <HAL_SPI_TransmitReceive_DMA+0x1d4>)
 800abdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abe0:	d11a      	bne.n	800ac18 <HAL_SPI_TransmitReceive_DMA+0x1b8>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800abe2:	6855      	ldr	r5, [r2, #4]
 800abe4:	400d      	ands	r5, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800abe6:	6055      	str	r5, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800abe8:	6893      	ldr	r3, [r2, #8]
 800abea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abee:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800abf0:	6913      	ldr	r3, [r2, #16]
 800abf2:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800abf6:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800abf8:	6813      	ldr	r3, [r2, #0]
 800abfa:	f043 0301 	orr.w	r3, r3, #1
 800abfe:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac00:	6863      	ldr	r3, [r4, #4]
 800ac02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac06:	d103      	bne.n	800ac10 <HAL_SPI_TransmitReceive_DMA+0x1b0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ac08:	6813      	ldr	r3, [r2, #0]
 800ac0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac0e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800ac10:	2300      	movs	r3, #0
 800ac12:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 800ac16:	e744      	b.n	800aaa2 <HAL_SPI_TransmitReceive_DMA+0x42>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ac18:	6853      	ldr	r3, [r2, #4]
 800ac1a:	400b      	ands	r3, r1
 800ac1c:	431d      	orrs	r5, r3
 800ac1e:	e7e2      	b.n	800abe6 <HAL_SPI_TransmitReceive_DMA+0x186>
 800ac20:	0800ae09 	.word	0x0800ae09
 800ac24:	0800ae15 	.word	0x0800ae15
 800ac28:	0800adb5 	.word	0x0800adb5
 800ac2c:	0800addf 	.word	0x0800addf
 800ac30:	0800ae21 	.word	0x0800ae21
 800ac34:	ffff0000 	.word	0xffff0000

0800ac38 <HAL_SPI_Receive_DMA>:
{
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	4615      	mov	r5, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ac3c:	6882      	ldr	r2, [r0, #8]
{
 800ac3e:	4604      	mov	r4, r0
 800ac40:	460e      	mov	r6, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ac42:	b962      	cbnz	r2, 800ac5e <HAL_SPI_Receive_DMA+0x26>
 800ac44:	6843      	ldr	r3, [r0, #4]
 800ac46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac4a:	d108      	bne.n	800ac5e <HAL_SPI_Receive_DMA+0x26>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ac4c:	2304      	movs	r3, #4
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800ac4e:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ac50:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800ac54:	462b      	mov	r3, r5
}
 800ac56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800ac5a:	f7ff bf01 	b.w	800aa60 <HAL_SPI_TransmitReceive_DMA>
  __HAL_LOCK(hspi);
 800ac5e:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d009      	beq.n	800ac7a <HAL_SPI_Receive_DMA+0x42>
 800ac66:	2301      	movs	r3, #1
 800ac68:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800ac6c:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d004      	beq.n	800ac7e <HAL_SPI_Receive_DMA+0x46>
    __HAL_UNLOCK(hspi);
 800ac74:	2300      	movs	r3, #0
 800ac76:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800ac7a:	2002      	movs	r0, #2
 800ac7c:	e004      	b.n	800ac88 <HAL_SPI_Receive_DMA+0x50>
  if ((pData == NULL) || (Size == 0UL))
 800ac7e:	b926      	cbnz	r6, 800ac8a <HAL_SPI_Receive_DMA+0x52>
    __HAL_UNLOCK(hspi);
 800ac80:	2300      	movs	r3, #0
    return errorcode;
 800ac82:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800ac84:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800ac88:	bd70      	pop	{r4, r5, r6, pc}
  if ((pData == NULL) || (Size == 0UL))
 800ac8a:	2d00      	cmp	r5, #0
 800ac8c:	d0f8      	beq.n	800ac80 <HAL_SPI_Receive_DMA+0x48>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ac8e:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac90:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ac94:	6666      	str	r6, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ac96:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac9a:	f04f 0300 	mov.w	r3, #0
  hspi->RxXferSize  = Size;
 800ac9e:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aca2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800aca6:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 800acaa:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800acae:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 800acb2:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800acb6:	d104      	bne.n	800acc2 <HAL_SPI_Receive_DMA+0x8a>
    SPI_1LINE_RX(hspi);
 800acb8:	6822      	ldr	r2, [r4, #0]
 800acba:	6813      	ldr	r3, [r2, #0]
 800acbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acc0:	6013      	str	r3, [r2, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800acc2:	68e3      	ldr	r3, [r4, #12]
 800acc4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800acc6:	2b0f      	cmp	r3, #15
 800acc8:	d90b      	bls.n	800ace2 <HAL_SPI_Receive_DMA+0xaa>
 800acca:	6982      	ldr	r2, [r0, #24]
 800accc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800acd0:	d1d6      	bne.n	800ac80 <HAL_SPI_Receive_DMA+0x48>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800acd2:	6982      	ldr	r2, [r0, #24]
 800acd4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800acd8:	d005      	beq.n	800ace6 <HAL_SPI_Receive_DMA+0xae>
 800acda:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800acde:	d1cf      	bne.n	800ac80 <HAL_SPI_Receive_DMA+0x48>
 800ace0:	e001      	b.n	800ace6 <HAL_SPI_Receive_DMA+0xae>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ace2:	2b07      	cmp	r3, #7
 800ace4:	d8f5      	bhi.n	800acd2 <HAL_SPI_Receive_DMA+0x9a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ace6:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ace8:	2b07      	cmp	r3, #7
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800acea:	688a      	ldr	r2, [r1, #8]
 800acec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800acf0:	608a      	str	r2, [r1, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800acf2:	d812      	bhi.n	800ad1a <HAL_SPI_Receive_DMA+0xe2>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800acf4:	6983      	ldr	r3, [r0, #24]
 800acf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acfa:	d104      	bne.n	800ad06 <HAL_SPI_Receive_DMA+0xce>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800acfc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ad00:	3301      	adds	r3, #1
 800ad02:	085b      	lsrs	r3, r3, #1
 800ad04:	e006      	b.n	800ad14 <HAL_SPI_Receive_DMA+0xdc>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ad06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad0a:	d10c      	bne.n	800ad26 <HAL_SPI_Receive_DMA+0xee>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800ad0c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ad10:	3303      	adds	r3, #3
 800ad12:	089b      	lsrs	r3, r3, #2
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ad14:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800ad18:	e005      	b.n	800ad26 <HAL_SPI_Receive_DMA+0xee>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800ad1a:	2b0f      	cmp	r3, #15
 800ad1c:	d803      	bhi.n	800ad26 <HAL_SPI_Receive_DMA+0xee>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ad1e:	6983      	ldr	r3, [r0, #24]
 800ad20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad24:	d0ea      	beq.n	800acfc <HAL_SPI_Receive_DMA+0xc4>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ad26:	4b1e      	ldr	r3, [pc, #120]	; (800ada0 <HAL_SPI_Receive_DMA+0x168>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800ad28:	4632      	mov	r2, r6
 800ad2a:	3130      	adds	r1, #48	; 0x30
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ad2c:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800ad2e:	4b1d      	ldr	r3, [pc, #116]	; (800ada4 <HAL_SPI_Receive_DMA+0x16c>)
 800ad30:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ad32:	4b1d      	ldr	r3, [pc, #116]	; (800ada8 <HAL_SPI_Receive_DMA+0x170>)
 800ad34:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800ad36:	2300      	movs	r3, #0
 800ad38:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800ad3a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ad3e:	f7fb fe2d 	bl	800699c <HAL_DMA_Start_IT>
 800ad42:	b148      	cbz	r0, 800ad58 <HAL_SPI_Receive_DMA+0x120>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad44:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ad48:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad4a:	f043 0310 	orr.w	r3, r3, #16
 800ad4e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ad52:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
    return errorcode;
 800ad56:	e797      	b.n	800ac88 <HAL_SPI_Receive_DMA+0x50>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ad58:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ad5a:	6821      	ldr	r1, [r4, #0]
 800ad5c:	69db      	ldr	r3, [r3, #28]
 800ad5e:	4a13      	ldr	r2, [pc, #76]	; (800adac <HAL_SPI_Receive_DMA+0x174>)
 800ad60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ad64:	684b      	ldr	r3, [r1, #4]
 800ad66:	ea03 0302 	and.w	r3, r3, r2
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ad6a:	bf18      	it	ne
 800ad6c:	432b      	orrne	r3, r5
 800ad6e:	604b      	str	r3, [r1, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ad70:	688b      	ldr	r3, [r1, #8]
 800ad72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad76:	608b      	str	r3, [r1, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800ad78:	690b      	ldr	r3, [r1, #16]
 800ad7a:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800ad7e:	610b      	str	r3, [r1, #16]
  __HAL_SPI_ENABLE(hspi);
 800ad80:	680b      	ldr	r3, [r1, #0]
 800ad82:	f043 0301 	orr.w	r3, r3, #1
 800ad86:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad88:	6863      	ldr	r3, [r4, #4]
 800ad8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad8e:	d103      	bne.n	800ad98 <HAL_SPI_Receive_DMA+0x160>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ad90:	680b      	ldr	r3, [r1, #0]
 800ad92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad96:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(hspi);
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800ad9e:	e773      	b.n	800ac88 <HAL_SPI_Receive_DMA+0x50>
 800ada0:	0800ae09 	.word	0x0800ae09
 800ada4:	0800adb5 	.word	0x0800adb5
 800ada8:	0800ae21 	.word	0x0800ae21
 800adac:	ffff0000 	.word	0xffff0000

0800adb0 <HAL_SPI_TxCpltCallback>:
 800adb0:	4770      	bx	lr

0800adb2 <HAL_SPI_RxCpltCallback>:
 800adb2:	4770      	bx	lr

0800adb4 <SPI_DMAReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adb4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800adb6:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800adb8:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800adbc:	2b07      	cmp	r3, #7
 800adbe:	d006      	beq.n	800adce <SPI_DMAReceiveCplt+0x1a>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800adc0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800adc2:	69db      	ldr	r3, [r3, #28]
 800adc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adc8:	d102      	bne.n	800add0 <SPI_DMAReceiveCplt+0x1c>
      HAL_SPI_RxCpltCallback(hspi);
 800adca:	f7ff fff2 	bl	800adb2 <HAL_SPI_RxCpltCallback>
}
 800adce:	bd08      	pop	{r3, pc}
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800add0:	6802      	ldr	r2, [r0, #0]
 800add2:	6913      	ldr	r3, [r2, #16]
 800add4:	f043 0308 	orr.w	r3, r3, #8
 800add8:	6113      	str	r3, [r2, #16]
}
 800adda:	e7f8      	b.n	800adce <SPI_DMAReceiveCplt+0x1a>

0800addc <HAL_SPI_TxRxCpltCallback>:
 800addc:	4770      	bx	lr

0800adde <SPI_DMATransmitReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adde:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800ade0:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ade2:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800ade6:	2b07      	cmp	r3, #7
 800ade8:	d006      	beq.n	800adf8 <SPI_DMATransmitReceiveCplt+0x1a>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800adea:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800adec:	69db      	ldr	r3, [r3, #28]
 800adee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adf2:	d102      	bne.n	800adfa <SPI_DMATransmitReceiveCplt+0x1c>
      HAL_SPI_TxRxCpltCallback(hspi);
 800adf4:	f7ff fff2 	bl	800addc <HAL_SPI_TxRxCpltCallback>
}
 800adf8:	bd08      	pop	{r3, pc}
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800adfa:	6802      	ldr	r2, [r0, #0]
 800adfc:	6913      	ldr	r3, [r2, #16]
 800adfe:	f043 0308 	orr.w	r3, r3, #8
 800ae02:	6113      	str	r3, [r2, #16]
}
 800ae04:	e7f8      	b.n	800adf8 <SPI_DMATransmitReceiveCplt+0x1a>

0800ae06 <HAL_SPI_RxHalfCpltCallback>:
 800ae06:	4770      	bx	lr

0800ae08 <SPI_DMAHalfReceiveCplt>:
{
 800ae08:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ae0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800ae0c:	f7ff fffb 	bl	800ae06 <HAL_SPI_RxHalfCpltCallback>
}
 800ae10:	bd08      	pop	{r3, pc}

0800ae12 <HAL_SPI_TxRxHalfCpltCallback>:
 800ae12:	4770      	bx	lr

0800ae14 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800ae14:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ae16:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800ae18:	f7ff fffb 	bl	800ae12 <HAL_SPI_TxRxHalfCpltCallback>
}
 800ae1c:	bd08      	pop	{r3, pc}

0800ae1e <HAL_SPI_ErrorCallback>:
 800ae1e:	4770      	bx	lr

0800ae20 <SPI_DMAError>:
{
 800ae20:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae22:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ae24:	f7fc fbe6 	bl	80075f4 <HAL_DMA_GetError>
 800ae28:	2802      	cmp	r0, #2
 800ae2a:	d00d      	beq.n	800ae48 <SPI_DMAError+0x28>
    SPI_CloseTransfer(hspi);
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	f7ff fd37 	bl	800a8a0 <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ae32:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ae36:	f043 0310 	orr.w	r3, r3, #16
 800ae3a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800ae44:	f7ff ffeb 	bl	800ae1e <HAL_SPI_ErrorCallback>
}
 800ae48:	bd10      	pop	{r4, pc}
	...

0800ae4c <HAL_SPI_IRQHandler>:
{
 800ae4c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t itsource = hspi->Instance->IER;
 800ae50:	6807      	ldr	r7, [r0, #0]
{
 800ae52:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800ae54:	f8d7 8010 	ldr.w	r8, [r7, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800ae58:	f8d7 9014 	ldr.w	r9, [r7, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800ae5c:	68be      	ldr	r6, [r7, #8]
  uint32_t trigger  = itsource & itflag;
 800ae5e:	ea08 0a09 	and.w	sl, r8, r9
  HAL_SPI_StateTypeDef State = hspi->State;
 800ae62:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800ae66:	f00a 0364 	and.w	r3, sl, #100	; 0x64
  HAL_SPI_StateTypeDef State = hspi->State;
 800ae6a:	b2ed      	uxtb	r5, r5
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800ae6c:	2b04      	cmp	r3, #4
 800ae6e:	d118      	bne.n	800aea2 <HAL_SPI_IRQHandler+0x56>
    hspi->TxISR(hspi);
 800ae70:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800ae72:	4798      	blx	r3
    hspi->RxISR(hspi);
 800ae74:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ae76:	4620      	mov	r0, r4
 800ae78:	4798      	blx	r3
    handled = 1UL;
 800ae7a:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ae7c:	f00a 0b45 	and.w	fp, sl, #69	; 0x45
 800ae80:	f1bb 0f01 	cmp.w	fp, #1
 800ae84:	d103      	bne.n	800ae8e <HAL_SPI_IRQHandler+0x42>
    hspi->RxISR(hspi);
 800ae86:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ae88:	4620      	mov	r0, r4
 800ae8a:	4798      	blx	r3
    handled = 1UL;
 800ae8c:	465b      	mov	r3, fp
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ae8e:	f00a 0226 	and.w	r2, sl, #38	; 0x26
 800ae92:	2a02      	cmp	r2, #2
 800ae94:	d107      	bne.n	800aea6 <HAL_SPI_IRQHandler+0x5a>
    hspi->TxISR(hspi);
 800ae96:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800ae98:	4620      	mov	r0, r4
}
 800ae9a:	b001      	add	sp, #4
 800ae9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    hspi->TxISR(hspi);
 800aea0:	4718      	bx	r3
  uint32_t handled  = 0UL;
 800aea2:	2300      	movs	r3, #0
 800aea4:	e7ea      	b.n	800ae7c <HAL_SPI_IRQHandler+0x30>
  if (handled != 0UL)
 800aea6:	bb03      	cbnz	r3, 800aeea <HAL_SPI_IRQHandler+0x9e>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800aea8:	f01a 0f08 	tst.w	sl, #8
 800aeac:	d065      	beq.n	800af7a <HAL_SPI_IRQHandler+0x12e>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aeae:	6823      	ldr	r3, [r4, #0]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800aeb0:	f416 4f40 	tst.w	r6, #49152	; 0xc000
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aeb4:	699a      	ldr	r2, [r3, #24]
 800aeb6:	f042 0208 	orr.w	r2, r2, #8
 800aeba:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aebc:	699a      	ldr	r2, [r3, #24]
 800aebe:	f042 0210 	orr.w	r2, r2, #16
 800aec2:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800aec4:	699a      	ldr	r2, [r3, #24]
 800aec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aeca:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800aecc:	691a      	ldr	r2, [r3, #16]
 800aece:	f022 0208 	bic.w	r2, r2, #8
 800aed2:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800aed4:	d00f      	beq.n	800aef6 <HAL_SPI_IRQHandler+0xaa>
 800aed6:	2d04      	cmp	r5, #4
 800aed8:	d00a      	beq.n	800aef0 <HAL_SPI_IRQHandler+0xa4>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800aeda:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800aedc:	69d2      	ldr	r2, [r2, #28]
 800aede:	b152      	cbz	r2, 800aef6 <HAL_SPI_IRQHandler+0xaa>
 800aee0:	2d03      	cmp	r5, #3
 800aee2:	d105      	bne.n	800aef0 <HAL_SPI_IRQHandler+0xa4>
      HAL_SPI_TxCpltCallback(hspi);
 800aee4:	4620      	mov	r0, r4
 800aee6:	f7ff ff63 	bl	800adb0 <HAL_SPI_TxCpltCallback>
}
 800aeea:	b001      	add	sp, #4
 800aeec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800aef0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800aef2:	69d2      	ldr	r2, [r2, #28]
 800aef4:	bb92      	cbnz	r2, 800af5c <HAL_SPI_IRQHandler+0x110>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800aefc:	d01b      	beq.n	800af36 <HAL_SPI_IRQHandler+0xea>
      SPI_CloseTransfer(hspi);
 800aefe:	4620      	mov	r0, r4
 800af00:	f7ff fcce 	bl	800a8a0 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 800af04:	2301      	movs	r3, #1
 800af06:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af0a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800af0e:	b32b      	cbz	r3, 800af5c <HAL_SPI_IRQHandler+0x110>
        HAL_SPI_ErrorCallback(hspi);
 800af10:	4620      	mov	r0, r4
 800af12:	f7ff ff84 	bl	800ae1e <HAL_SPI_ErrorCallback>
 800af16:	e7e8      	b.n	800aeea <HAL_SPI_IRQHandler+0x9e>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800af18:	68e2      	ldr	r2, [r4, #12]
 800af1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af1c:	2a0f      	cmp	r2, #15
 800af1e:	d910      	bls.n	800af42 <HAL_SPI_IRQHandler+0xf6>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800af20:	6822      	ldr	r2, [r4, #0]
 800af22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800af24:	f843 2b04 	str.w	r2, [r3], #4
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800af28:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800af2a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800af2e:	3b01      	subs	r3, #1
 800af30:	b29b      	uxth	r3, r3
 800af32:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800af36:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1eb      	bne.n	800af18 <HAL_SPI_IRQHandler+0xcc>
 800af40:	e7dd      	b.n	800aefe <HAL_SPI_IRQHandler+0xb2>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af42:	2a07      	cmp	r2, #7
 800af44:	d903      	bls.n	800af4e <HAL_SPI_IRQHandler+0x102>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800af46:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800af48:	f823 2b02 	strh.w	r2, [r3], #2
 800af4c:	e7ec      	b.n	800af28 <HAL_SPI_IRQHandler+0xdc>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800af4e:	6822      	ldr	r2, [r4, #0]
 800af50:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800af54:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800af56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af58:	3301      	adds	r3, #1
 800af5a:	e7e5      	b.n	800af28 <HAL_SPI_IRQHandler+0xdc>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800af5c:	2d05      	cmp	r5, #5
 800af5e:	d103      	bne.n	800af68 <HAL_SPI_IRQHandler+0x11c>
      HAL_SPI_TxRxCpltCallback(hspi);
 800af60:	4620      	mov	r0, r4
 800af62:	f7ff ff3b 	bl	800addc <HAL_SPI_TxRxCpltCallback>
 800af66:	e7c0      	b.n	800aeea <HAL_SPI_IRQHandler+0x9e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800af68:	2d04      	cmp	r5, #4
 800af6a:	d103      	bne.n	800af74 <HAL_SPI_IRQHandler+0x128>
      HAL_SPI_RxCpltCallback(hspi);
 800af6c:	4620      	mov	r0, r4
 800af6e:	f7ff ff20 	bl	800adb2 <HAL_SPI_RxCpltCallback>
 800af72:	e7ba      	b.n	800aeea <HAL_SPI_IRQHandler+0x9e>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800af74:	2d03      	cmp	r5, #3
 800af76:	d1b8      	bne.n	800aeea <HAL_SPI_IRQHandler+0x9e>
 800af78:	e7b4      	b.n	800aee4 <HAL_SPI_IRQHandler+0x98>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800af7a:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800af7e:	d008      	beq.n	800af92 <HAL_SPI_IRQHandler+0x146>
 800af80:	f018 0f08 	tst.w	r8, #8
 800af84:	d005      	beq.n	800af92 <HAL_SPI_IRQHandler+0x146>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800af86:	6822      	ldr	r2, [r4, #0]
 800af88:	6993      	ldr	r3, [r2, #24]
 800af8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800af8e:	6193      	str	r3, [r2, #24]
    return;
 800af90:	e7ab      	b.n	800aeea <HAL_SPI_IRQHandler+0x9e>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800af92:	f41a 7f58 	tst.w	sl, #864	; 0x360
 800af96:	d0a8      	beq.n	800aeea <HAL_SPI_IRQHandler+0x9e>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800af98:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800af9c:	d00a      	beq.n	800afb4 <HAL_SPI_IRQHandler+0x168>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800af9e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800afa2:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800afa4:	f043 0304 	orr.w	r3, r3, #4
 800afa8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800afac:	6993      	ldr	r3, [r2, #24]
 800afae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afb2:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800afb4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800afb8:	d00a      	beq.n	800afd0 <HAL_SPI_IRQHandler+0x184>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800afba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800afbe:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800afc0:	f043 0301 	orr.w	r3, r3, #1
 800afc4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800afc8:	6993      	ldr	r3, [r2, #24]
 800afca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800afce:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800afd0:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800afd4:	d00a      	beq.n	800afec <HAL_SPI_IRQHandler+0x1a0>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800afd6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800afda:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800afdc:	f043 0308 	orr.w	r3, r3, #8
 800afe0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800afe4:	6993      	ldr	r3, [r2, #24]
 800afe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afea:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800afec:	f01a 0f20 	tst.w	sl, #32
 800aff0:	d00a      	beq.n	800b008 <HAL_SPI_IRQHandler+0x1bc>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800aff2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800aff6:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800aff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800affc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b000:	6993      	ldr	r3, [r2, #24]
 800b002:	f043 0320 	orr.w	r3, r3, #32
 800b006:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b008:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f43f af6c 	beq.w	800aeea <HAL_SPI_IRQHandler+0x9e>
      __HAL_SPI_DISABLE(hspi);
 800b012:	6823      	ldr	r3, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b014:	f406 4640 	and.w	r6, r6, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800b018:	681a      	ldr	r2, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b01a:	f5b6 4f40 	cmp.w	r6, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800b01e:	f022 0201 	bic.w	r2, r2, #1
 800b022:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800b024:	691a      	ldr	r2, [r3, #16]
 800b026:	f422 725a 	bic.w	r2, r2, #872	; 0x368
 800b02a:	f022 0203 	bic.w	r2, r2, #3
 800b02e:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b030:	d122      	bne.n	800b078 <HAL_SPI_IRQHandler+0x22c>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b032:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800b034:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b036:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b03a:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800b03c:	b150      	cbz	r0, 800b054 <HAL_SPI_IRQHandler+0x208>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b03e:	4b10      	ldr	r3, [pc, #64]	; (800b080 <HAL_SPI_IRQHandler+0x234>)
 800b040:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b042:	f7fb ff7b 	bl	8006f3c <HAL_DMA_Abort_IT>
 800b046:	b128      	cbz	r0, 800b054 <HAL_SPI_IRQHandler+0x208>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b048:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b04c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b050:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800b054:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b056:	2800      	cmp	r0, #0
 800b058:	f43f af47 	beq.w	800aeea <HAL_SPI_IRQHandler+0x9e>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b05c:	4b08      	ldr	r3, [pc, #32]	; (800b080 <HAL_SPI_IRQHandler+0x234>)
 800b05e:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b060:	f7fb ff6c 	bl	8006f3c <HAL_DMA_Abort_IT>
 800b064:	2800      	cmp	r0, #0
 800b066:	f43f af40 	beq.w	800aeea <HAL_SPI_IRQHandler+0x9e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b06a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b072:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b076:	e738      	b.n	800aeea <HAL_SPI_IRQHandler+0x9e>
        hspi->State = HAL_SPI_STATE_READY;
 800b078:	2301      	movs	r3, #1
 800b07a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800b07e:	e747      	b.n	800af10 <HAL_SPI_IRQHandler+0xc4>
 800b080:	0800b085 	.word	0x0800b085

0800b084 <SPI_DMAAbortOnError>:
{
 800b084:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b086:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800b088:	2300      	movs	r3, #0
 800b08a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b08e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800b092:	2301      	movs	r3, #1
 800b094:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800b098:	f7ff fec1 	bl	800ae1e <HAL_SPI_ErrorCallback>
}
 800b09c:	bd08      	pop	{r3, pc}

0800b09e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b09e:	4770      	bx	lr

0800b0a0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b0a0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d115      	bne.n	800b0d4 <HAL_TIM_Base_Start_IT+0x34>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0a8:	2302      	movs	r3, #2
 800b0aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b0ae:	6803      	ldr	r3, [r0, #0]
 800b0b0:	68da      	ldr	r2, [r3, #12]
 800b0b2:	f042 0201 	orr.w	r2, r2, #1
 800b0b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0b8:	4a07      	ldr	r2, [pc, #28]	; (800b0d8 <HAL_TIM_Base_Start_IT+0x38>)
 800b0ba:	6899      	ldr	r1, [r3, #8]
 800b0bc:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0be:	2a06      	cmp	r2, #6
 800b0c0:	d006      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x30>
 800b0c2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b0c6:	d003      	beq.n	800b0d0 <HAL_TIM_Base_Start_IT+0x30>
  {
    __HAL_TIM_ENABLE(htim);
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	f042 0201 	orr.w	r2, r2, #1
 800b0ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b0d0:	2000      	movs	r0, #0
}
 800b0d2:	4770      	bx	lr
    return HAL_ERROR;
 800b0d4:	2001      	movs	r0, #1
 800b0d6:	4770      	bx	lr
 800b0d8:	00010007 	.word	0x00010007

0800b0dc <HAL_TIM_OC_DelayElapsedCallback>:
 800b0dc:	4770      	bx	lr

0800b0de <HAL_TIM_IC_CaptureCallback>:
 800b0de:	4770      	bx	lr

0800b0e0 <HAL_TIM_PWM_PulseFinishedCallback>:
 800b0e0:	4770      	bx	lr

0800b0e2 <HAL_TIM_TriggerCallback>:
 800b0e2:	4770      	bx	lr

0800b0e4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b0e4:	6803      	ldr	r3, [r0, #0]
 800b0e6:	691a      	ldr	r2, [r3, #16]
 800b0e8:	0791      	lsls	r1, r2, #30
{
 800b0ea:	b510      	push	{r4, lr}
 800b0ec:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b0ee:	d50f      	bpl.n	800b110 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b0f0:	68da      	ldr	r2, [r3, #12]
 800b0f2:	0792      	lsls	r2, r2, #30
 800b0f4:	d50c      	bpl.n	800b110 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b0f6:	f06f 0202 	mvn.w	r2, #2
 800b0fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0fc:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0fe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b100:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b102:	0799      	lsls	r1, r3, #30
 800b104:	f000 8085 	beq.w	800b212 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b108:	f7ff ffe9 	bl	800b0de <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b10c:	2300      	movs	r3, #0
 800b10e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b110:	6823      	ldr	r3, [r4, #0]
 800b112:	691a      	ldr	r2, [r3, #16]
 800b114:	0752      	lsls	r2, r2, #29
 800b116:	d510      	bpl.n	800b13a <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b118:	68da      	ldr	r2, [r3, #12]
 800b11a:	0750      	lsls	r0, r2, #29
 800b11c:	d50d      	bpl.n	800b13a <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b11e:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b122:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b126:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b128:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b12a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b12c:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b130:	d075      	beq.n	800b21e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800b132:	f7ff ffd4 	bl	800b0de <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b136:	2300      	movs	r3, #0
 800b138:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	691a      	ldr	r2, [r3, #16]
 800b13e:	0711      	lsls	r1, r2, #28
 800b140:	d50f      	bpl.n	800b162 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b142:	68da      	ldr	r2, [r3, #12]
 800b144:	0712      	lsls	r2, r2, #28
 800b146:	d50c      	bpl.n	800b162 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b148:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b14c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b14e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b150:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b152:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b154:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b156:	079b      	lsls	r3, r3, #30
 800b158:	d067      	beq.n	800b22a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800b15a:	f7ff ffc0 	bl	800b0de <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b15e:	2300      	movs	r3, #0
 800b160:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	691a      	ldr	r2, [r3, #16]
 800b166:	06d0      	lsls	r0, r2, #27
 800b168:	d510      	bpl.n	800b18c <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b16a:	68da      	ldr	r2, [r3, #12]
 800b16c:	06d1      	lsls	r1, r2, #27
 800b16e:	d50d      	bpl.n	800b18c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b170:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b174:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b178:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b17a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b17c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b17e:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b182:	d058      	beq.n	800b236 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800b184:	f7ff ffab 	bl	800b0de <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b188:	2300      	movs	r3, #0
 800b18a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b18c:	6823      	ldr	r3, [r4, #0]
 800b18e:	691a      	ldr	r2, [r3, #16]
 800b190:	07d2      	lsls	r2, r2, #31
 800b192:	d508      	bpl.n	800b1a6 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b194:	68da      	ldr	r2, [r3, #12]
 800b196:	07d0      	lsls	r0, r2, #31
 800b198:	d505      	bpl.n	800b1a6 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b19a:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b19e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b1a0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1a2:	f7f7 fc87 	bl	8002ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	691a      	ldr	r2, [r3, #16]
 800b1aa:	0611      	lsls	r1, r2, #24
 800b1ac:	d508      	bpl.n	800b1c0 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b1ae:	68da      	ldr	r2, [r3, #12]
 800b1b0:	0612      	lsls	r2, r2, #24
 800b1b2:	d505      	bpl.n	800b1c0 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b1b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b1b8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b1ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b1bc:	f000 f8d9 	bl	800b372 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	691a      	ldr	r2, [r3, #16]
 800b1c4:	05d0      	lsls	r0, r2, #23
 800b1c6:	d508      	bpl.n	800b1da <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b1c8:	68da      	ldr	r2, [r3, #12]
 800b1ca:	0611      	lsls	r1, r2, #24
 800b1cc:	d505      	bpl.n	800b1da <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b1ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b1d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b1d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800b1d6:	f000 f8cd 	bl	800b374 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b1da:	6823      	ldr	r3, [r4, #0]
 800b1dc:	691a      	ldr	r2, [r3, #16]
 800b1de:	0652      	lsls	r2, r2, #25
 800b1e0:	d508      	bpl.n	800b1f4 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b1e2:	68da      	ldr	r2, [r3, #12]
 800b1e4:	0650      	lsls	r0, r2, #25
 800b1e6:	d505      	bpl.n	800b1f4 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b1e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b1ec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b1ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b1f0:	f7ff ff77 	bl	800b0e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b1f4:	6823      	ldr	r3, [r4, #0]
 800b1f6:	691a      	ldr	r2, [r3, #16]
 800b1f8:	0691      	lsls	r1, r2, #26
 800b1fa:	d522      	bpl.n	800b242 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b1fc:	68da      	ldr	r2, [r3, #12]
 800b1fe:	0692      	lsls	r2, r2, #26
 800b200:	d51f      	bpl.n	800b242 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b202:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b206:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b208:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800b20e:	f000 b8af 	b.w	800b370 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b212:	f7ff ff63 	bl	800b0dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b216:	4620      	mov	r0, r4
 800b218:	f7ff ff62 	bl	800b0e0 <HAL_TIM_PWM_PulseFinishedCallback>
 800b21c:	e776      	b.n	800b10c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b21e:	f7ff ff5d 	bl	800b0dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b222:	4620      	mov	r0, r4
 800b224:	f7ff ff5c 	bl	800b0e0 <HAL_TIM_PWM_PulseFinishedCallback>
 800b228:	e785      	b.n	800b136 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b22a:	f7ff ff57 	bl	800b0dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b22e:	4620      	mov	r0, r4
 800b230:	f7ff ff56 	bl	800b0e0 <HAL_TIM_PWM_PulseFinishedCallback>
 800b234:	e793      	b.n	800b15e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b236:	f7ff ff51 	bl	800b0dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b23a:	4620      	mov	r0, r4
 800b23c:	f7ff ff50 	bl	800b0e0 <HAL_TIM_PWM_PulseFinishedCallback>
 800b240:	e7a2      	b.n	800b188 <HAL_TIM_IRQHandler+0xa4>
}
 800b242:	bd10      	pop	{r4, pc}

0800b244 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b244:	4a30      	ldr	r2, [pc, #192]	; (800b308 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800b246:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b248:	4290      	cmp	r0, r2
 800b24a:	d012      	beq.n	800b272 <TIM_Base_SetConfig+0x2e>
 800b24c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b250:	d00f      	beq.n	800b272 <TIM_Base_SetConfig+0x2e>
 800b252:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b256:	4290      	cmp	r0, r2
 800b258:	d00b      	beq.n	800b272 <TIM_Base_SetConfig+0x2e>
 800b25a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b25e:	4290      	cmp	r0, r2
 800b260:	d007      	beq.n	800b272 <TIM_Base_SetConfig+0x2e>
 800b262:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b266:	4290      	cmp	r0, r2
 800b268:	d003      	beq.n	800b272 <TIM_Base_SetConfig+0x2e>
 800b26a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b26e:	4290      	cmp	r0, r2
 800b270:	d119      	bne.n	800b2a6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800b272:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b278:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b27a:	4a23      	ldr	r2, [pc, #140]	; (800b308 <TIM_Base_SetConfig+0xc4>)
 800b27c:	4290      	cmp	r0, r2
 800b27e:	d01d      	beq.n	800b2bc <TIM_Base_SetConfig+0x78>
 800b280:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b284:	d01a      	beq.n	800b2bc <TIM_Base_SetConfig+0x78>
 800b286:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b28a:	4290      	cmp	r0, r2
 800b28c:	d016      	beq.n	800b2bc <TIM_Base_SetConfig+0x78>
 800b28e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b292:	4290      	cmp	r0, r2
 800b294:	d012      	beq.n	800b2bc <TIM_Base_SetConfig+0x78>
 800b296:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b29a:	4290      	cmp	r0, r2
 800b29c:	d00e      	beq.n	800b2bc <TIM_Base_SetConfig+0x78>
 800b29e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b2a2:	4290      	cmp	r0, r2
 800b2a4:	d00a      	beq.n	800b2bc <TIM_Base_SetConfig+0x78>
 800b2a6:	4a19      	ldr	r2, [pc, #100]	; (800b30c <TIM_Base_SetConfig+0xc8>)
 800b2a8:	4290      	cmp	r0, r2
 800b2aa:	d007      	beq.n	800b2bc <TIM_Base_SetConfig+0x78>
 800b2ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b2b0:	4290      	cmp	r0, r2
 800b2b2:	d003      	beq.n	800b2bc <TIM_Base_SetConfig+0x78>
 800b2b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b2b8:	4290      	cmp	r0, r2
 800b2ba:	d103      	bne.n	800b2c4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2c0:	68ca      	ldr	r2, [r1, #12]
 800b2c2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2c4:	694a      	ldr	r2, [r1, #20]
 800b2c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2ca:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800b2cc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2ce:	688b      	ldr	r3, [r1, #8]
 800b2d0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2d2:	680b      	ldr	r3, [r1, #0]
 800b2d4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2d6:	4b0c      	ldr	r3, [pc, #48]	; (800b308 <TIM_Base_SetConfig+0xc4>)
 800b2d8:	4298      	cmp	r0, r3
 800b2da:	d00f      	beq.n	800b2fc <TIM_Base_SetConfig+0xb8>
 800b2dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2e0:	4298      	cmp	r0, r3
 800b2e2:	d00b      	beq.n	800b2fc <TIM_Base_SetConfig+0xb8>
 800b2e4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b2e8:	4298      	cmp	r0, r3
 800b2ea:	d007      	beq.n	800b2fc <TIM_Base_SetConfig+0xb8>
 800b2ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2f0:	4298      	cmp	r0, r3
 800b2f2:	d003      	beq.n	800b2fc <TIM_Base_SetConfig+0xb8>
 800b2f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2f8:	4298      	cmp	r0, r3
 800b2fa:	d101      	bne.n	800b300 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2fc:	690b      	ldr	r3, [r1, #16]
 800b2fe:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b300:	2301      	movs	r3, #1
 800b302:	6143      	str	r3, [r0, #20]
}
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	40010000 	.word	0x40010000
 800b30c:	40014000 	.word	0x40014000

0800b310 <HAL_TIM_Base_Init>:
{
 800b310:	b510      	push	{r4, lr}
  if (htim == NULL)
 800b312:	4604      	mov	r4, r0
 800b314:	b350      	cbz	r0, 800b36c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800b316:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b31a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b31e:	b91b      	cbnz	r3, 800b328 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800b320:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b324:	f7ff febb 	bl	800b09e <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800b328:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b32a:	6820      	ldr	r0, [r4, #0]
 800b32c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800b32e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b332:	f7ff ff87 	bl	800b244 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b336:	2301      	movs	r3, #1
  return HAL_OK;
 800b338:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b33a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b33e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b342:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b346:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b34a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800b34e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b356:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b35a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b35e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800b362:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b366:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800b36a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b36c:	2001      	movs	r0, #1
 800b36e:	e7fc      	b.n	800b36a <HAL_TIM_Base_Init+0x5a>

0800b370 <HAL_TIMEx_CommutCallback>:
 800b370:	4770      	bx	lr

0800b372 <HAL_TIMEx_BreakCallback>:
 800b372:	4770      	bx	lr

0800b374 <HAL_TIMEx_Break2Callback>:
 800b374:	4770      	bx	lr

0800b376 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b376:	6802      	ldr	r2, [r0, #0]
 800b378:	6813      	ldr	r3, [r2, #0]
 800b37a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b37e:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b380:	6893      	ldr	r3, [r2, #8]
 800b382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b386:	f023 0301 	bic.w	r3, r3, #1
 800b38a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b38c:	2320      	movs	r3, #32
 800b38e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b392:	2300      	movs	r3, #0
 800b394:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800b396:	4770      	bx	lr

0800b398 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800b398:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800b39c:	2b20      	cmp	r3, #32
{
 800b39e:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800b3a0:	d167      	bne.n	800b472 <HAL_UART_Receive_IT+0xda>
    if ((pData == NULL) || (Size == 0U))
 800b3a2:	2900      	cmp	r1, #0
 800b3a4:	d063      	beq.n	800b46e <HAL_UART_Receive_IT+0xd6>
 800b3a6:	2a00      	cmp	r2, #0
 800b3a8:	d061      	beq.n	800b46e <HAL_UART_Receive_IT+0xd6>
    __HAL_LOCK(huart);
 800b3aa:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d05f      	beq.n	800b472 <HAL_UART_Receive_IT+0xda>
 800b3b2:	2301      	movs	r3, #1
    huart->pRxBuffPtr  = pData;
 800b3b4:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxISR       = NULL;
 800b3b6:	2100      	movs	r1, #0
    huart->RxXferSize  = Size;
 800b3b8:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    __HAL_LOCK(huart);
 800b3bc:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    UART_MASK_COMPUTATION(huart);
 800b3c0:	6883      	ldr	r3, [r0, #8]
    huart->RxXferCount = Size;
 800b3c2:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 800b3c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxISR       = NULL;
 800b3ca:	66c1      	str	r1, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 800b3cc:	d12e      	bne.n	800b42c <HAL_UART_Receive_IT+0x94>
 800b3ce:	6901      	ldr	r1, [r0, #16]
 800b3d0:	bb51      	cbnz	r1, 800b428 <HAL_UART_Receive_IT+0x90>
 800b3d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b3d6:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3da:	2100      	movs	r1, #0
 800b3dc:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3e0:	2122      	movs	r1, #34	; 0x22
 800b3e2:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3e6:	6801      	ldr	r1, [r0, #0]
 800b3e8:	688c      	ldr	r4, [r1, #8]
 800b3ea:	f044 0401 	orr.w	r4, r4, #1
 800b3ee:	608c      	str	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b3f0:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800b3f2:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 800b3f6:	d129      	bne.n	800b44c <HAL_UART_Receive_IT+0xb4>
 800b3f8:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 800b3fc:	4294      	cmp	r4, r2
 800b3fe:	d825      	bhi.n	800b44c <HAL_UART_Receive_IT+0xb4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b404:	d120      	bne.n	800b448 <HAL_UART_Receive_IT+0xb0>
 800b406:	6903      	ldr	r3, [r0, #16]
 800b408:	b9f3      	cbnz	r3, 800b448 <HAL_UART_Receive_IT+0xb0>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b40a:	4b1b      	ldr	r3, [pc, #108]	; (800b478 <HAL_UART_Receive_IT+0xe0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b40c:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b40e:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 800b410:	2300      	movs	r3, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 800b416:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b41a:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b41c:	688a      	ldr	r2, [r1, #8]
 800b41e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b422:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 800b424:	4618      	mov	r0, r3
}
 800b426:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 800b428:	21ff      	movs	r1, #255	; 0xff
 800b42a:	e7d4      	b.n	800b3d6 <HAL_UART_Receive_IT+0x3e>
 800b42c:	b923      	cbnz	r3, 800b438 <HAL_UART_Receive_IT+0xa0>
 800b42e:	6901      	ldr	r1, [r0, #16]
 800b430:	2900      	cmp	r1, #0
 800b432:	d0f9      	beq.n	800b428 <HAL_UART_Receive_IT+0x90>
 800b434:	217f      	movs	r1, #127	; 0x7f
 800b436:	e7ce      	b.n	800b3d6 <HAL_UART_Receive_IT+0x3e>
 800b438:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b43c:	d1cb      	bne.n	800b3d6 <HAL_UART_Receive_IT+0x3e>
 800b43e:	6901      	ldr	r1, [r0, #16]
 800b440:	2900      	cmp	r1, #0
 800b442:	d0f7      	beq.n	800b434 <HAL_UART_Receive_IT+0x9c>
 800b444:	213f      	movs	r1, #63	; 0x3f
 800b446:	e7c6      	b.n	800b3d6 <HAL_UART_Receive_IT+0x3e>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b448:	4b0c      	ldr	r3, [pc, #48]	; (800b47c <HAL_UART_Receive_IT+0xe4>)
 800b44a:	e7df      	b.n	800b40c <HAL_UART_Receive_IT+0x74>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b44c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b450:	d10b      	bne.n	800b46a <HAL_UART_Receive_IT+0xd2>
 800b452:	6903      	ldr	r3, [r0, #16]
 800b454:	b94b      	cbnz	r3, 800b46a <HAL_UART_Receive_IT+0xd2>
        huart->RxISR = UART_RxISR_16BIT;
 800b456:	4b0a      	ldr	r3, [pc, #40]	; (800b480 <HAL_UART_Receive_IT+0xe8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b458:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT;
 800b45a:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 800b45c:	2300      	movs	r3, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b45e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
      __HAL_UNLOCK(huart);
 800b462:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b466:	600a      	str	r2, [r1, #0]
 800b468:	e7dc      	b.n	800b424 <HAL_UART_Receive_IT+0x8c>
        huart->RxISR = UART_RxISR_8BIT;
 800b46a:	4b06      	ldr	r3, [pc, #24]	; (800b484 <HAL_UART_Receive_IT+0xec>)
 800b46c:	e7f4      	b.n	800b458 <HAL_UART_Receive_IT+0xc0>
      return HAL_ERROR;
 800b46e:	2001      	movs	r0, #1
 800b470:	e7d9      	b.n	800b426 <HAL_UART_Receive_IT+0x8e>
    return HAL_BUSY;
 800b472:	2002      	movs	r0, #2
 800b474:	e7d7      	b.n	800b426 <HAL_UART_Receive_IT+0x8e>
 800b476:	bf00      	nop
 800b478:	0800b885 	.word	0x0800b885
 800b47c:	0800b7e1 	.word	0x0800b7e1
 800b480:	0800b787 	.word	0x0800b787
 800b484:	0800b72b 	.word	0x0800b72b

0800b488 <HAL_UART_Transmit_DMA>:
{
 800b488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48a:	4604      	mov	r4, r0
 800b48c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800b48e:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800b492:	2f20      	cmp	r7, #32
 800b494:	d13a      	bne.n	800b50c <HAL_UART_Transmit_DMA+0x84>
    if ((pData == NULL) || (Size == 0U))
 800b496:	b361      	cbz	r1, 800b4f2 <HAL_UART_Transmit_DMA+0x6a>
 800b498:	b35a      	cbz	r2, 800b4f2 <HAL_UART_Transmit_DMA+0x6a>
    __HAL_LOCK(huart);
 800b49a:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 800b49e:	2a01      	cmp	r2, #1
 800b4a0:	d034      	beq.n	800b50c <HAL_UART_Transmit_DMA+0x84>
 800b4a2:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4a4:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4a6:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 800b4a8:	6f60      	ldr	r0, [r4, #116]	; 0x74
    huart->TxXferCount = Size;
 800b4aa:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    __HAL_LOCK(huart);
 800b4ae:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4b2:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    huart->pTxBuffPtr  = pData;
 800b4b6:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b4b8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4bc:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->hdmatx != NULL)
 800b4c0:	b1c8      	cbz	r0, 800b4f6 <HAL_UART_Transmit_DMA+0x6e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b4c2:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800b510 <HAL_UART_Transmit_DMA+0x88>
 800b4c6:	6822      	ldr	r2, [r4, #0]
 800b4c8:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b4cc:	f8df c044 	ldr.w	ip, [pc, #68]	; 800b514 <HAL_UART_Transmit_DMA+0x8c>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b4d0:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b4d2:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b4d6:	f8df c040 	ldr.w	ip, [pc, #64]	; 800b518 <HAL_UART_Transmit_DMA+0x90>
      huart->hdmatx->XferAbortCallback = NULL;
 800b4da:	e9c0 c613 	strd	ip, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b4de:	f7fb fa5d 	bl	800699c <HAL_DMA_Start_IT>
 800b4e2:	b140      	cbz	r0, 800b4f6 <HAL_UART_Transmit_DMA+0x6e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b4e4:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800b4e6:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b4ea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 800b4ee:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
      return HAL_ERROR;
 800b4f2:	2001      	movs	r0, #1
 800b4f4:	e009      	b.n	800b50a <HAL_UART_Transmit_DMA+0x82>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 800b4fa:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b4fc:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b4fe:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 800b500:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b504:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b508:	609a      	str	r2, [r3, #8]
}
 800b50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800b50c:	2002      	movs	r0, #2
 800b50e:	e7fc      	b.n	800b50a <HAL_UART_Transmit_DMA+0x82>
 800b510:	0800b6f1 	.word	0x0800b6f1
 800b514:	0800b721 	.word	0x0800b721
 800b518:	0800b96d 	.word	0x0800b96d

0800b51c <HAL_UART_Receive_DMA>:
{
 800b51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800b51e:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
{
 800b522:	4604      	mov	r4, r0
 800b524:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800b526:	2f20      	cmp	r7, #32
 800b528:	d13c      	bne.n	800b5a4 <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 800b52a:	b341      	cbz	r1, 800b57e <HAL_UART_Receive_DMA+0x62>
 800b52c:	b33a      	cbz	r2, 800b57e <HAL_UART_Receive_DMA+0x62>
    __HAL_LOCK(huart);
 800b52e:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 800b532:	2a01      	cmp	r2, #1
 800b534:	d036      	beq.n	800b5a4 <HAL_UART_Receive_DMA+0x88>
 800b536:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b538:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b53a:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 800b53c:	6581      	str	r1, [r0, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b53e:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
    __HAL_LOCK(huart);
 800b542:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxXferSize = Size;
 800b546:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b54a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmarx != NULL)
 800b54e:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800b550:	b1b8      	cbz	r0, 800b582 <HAL_UART_Receive_DMA+0x66>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b552:	4a15      	ldr	r2, [pc, #84]	; (800b5a8 <HAL_UART_Receive_DMA+0x8c>)
 800b554:	f8d4 c000 	ldr.w	ip, [r4]
 800b558:	63c2      	str	r2, [r0, #60]	; 0x3c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b55a:	4a14      	ldr	r2, [pc, #80]	; (800b5ac <HAL_UART_Receive_DMA+0x90>)
 800b55c:	6402      	str	r2, [r0, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b55e:	4a14      	ldr	r2, [pc, #80]	; (800b5b0 <HAL_UART_Receive_DMA+0x94>)
      huart->hdmarx->XferAbortCallback = NULL;
 800b560:	e9c0 2613 	strd	r2, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b564:	460a      	mov	r2, r1
 800b566:	f10c 0124 	add.w	r1, ip, #36	; 0x24
 800b56a:	f7fb fa17 	bl	800699c <HAL_DMA_Start_IT>
 800b56e:	b140      	cbz	r0, 800b582 <HAL_UART_Receive_DMA+0x66>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b570:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800b572:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b576:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 800b57a:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
      return HAL_ERROR;
 800b57e:	2001      	movs	r0, #1
 800b580:	e00f      	b.n	800b5a2 <HAL_UART_Receive_DMA+0x86>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b582:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 800b584:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b586:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800b588:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b58c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b590:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b592:	689a      	ldr	r2, [r3, #8]
 800b594:	f042 0201 	orr.w	r2, r2, #1
 800b598:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b59a:	689a      	ldr	r2, [r3, #8]
 800b59c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5a0:	609a      	str	r2, [r3, #8]
}
 800b5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800b5a4:	2002      	movs	r0, #2
 800b5a6:	e7fc      	b.n	800b5a2 <HAL_UART_Receive_DMA+0x86>
 800b5a8:	0800b925 	.word	0x0800b925
 800b5ac:	0800b961 	.word	0x0800b961
 800b5b0:	0800b96d 	.word	0x0800b96d

0800b5b4 <HAL_UART_DMAPause>:
  __HAL_LOCK(huart);
 800b5b4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b5b8:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  __HAL_LOCK(huart);
 800b5bc:	2b01      	cmp	r3, #1
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b5be:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 800b5c2:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 800b5c4:	d022      	beq.n	800b60c <HAL_UART_DMAPause+0x58>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b5cc:	6803      	ldr	r3, [r0, #0]
 800b5ce:	689c      	ldr	r4, [r3, #8]
 800b5d0:	0624      	lsls	r4, r4, #24
 800b5d2:	d505      	bpl.n	800b5e0 <HAL_UART_DMAPause+0x2c>
 800b5d4:	2a21      	cmp	r2, #33	; 0x21
 800b5d6:	d103      	bne.n	800b5e0 <HAL_UART_DMAPause+0x2c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b5d8:	689a      	ldr	r2, [r3, #8]
 800b5da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b5de:	609a      	str	r2, [r3, #8]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b5e0:	689a      	ldr	r2, [r3, #8]
 800b5e2:	0652      	lsls	r2, r2, #25
 800b5e4:	d50d      	bpl.n	800b602 <HAL_UART_DMAPause+0x4e>
 800b5e6:	2922      	cmp	r1, #34	; 0x22
 800b5e8:	d10b      	bne.n	800b602 <HAL_UART_DMAPause+0x4e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5f0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5f2:	689a      	ldr	r2, [r3, #8]
 800b5f4:	f022 0201 	bic.w	r2, r2, #1
 800b5f8:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5fa:	689a      	ldr	r2, [r3, #8]
 800b5fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b600:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(huart);
 800b602:	2300      	movs	r3, #0
 800b604:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800b608:	4618      	mov	r0, r3
}
 800b60a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800b60c:	2002      	movs	r0, #2
 800b60e:	e7fc      	b.n	800b60a <HAL_UART_DMAPause+0x56>

0800b610 <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 800b610:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800b614:	2b01      	cmp	r3, #1
 800b616:	d023      	beq.n	800b660 <HAL_UART_DMAResume+0x50>
 800b618:	2301      	movs	r3, #1
 800b61a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b61e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800b622:	2b21      	cmp	r3, #33	; 0x21
 800b624:	d104      	bne.n	800b630 <HAL_UART_DMAResume+0x20>
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b626:	6802      	ldr	r2, [r0, #0]
 800b628:	6893      	ldr	r3, [r2, #8]
 800b62a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b62e:	6093      	str	r3, [r2, #8]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b630:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800b634:	2b22      	cmp	r3, #34	; 0x22
 800b636:	d10e      	bne.n	800b656 <HAL_UART_DMAResume+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b638:	6803      	ldr	r3, [r0, #0]
 800b63a:	2208      	movs	r2, #8
 800b63c:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b644:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b646:	689a      	ldr	r2, [r3, #8]
 800b648:	f042 0201 	orr.w	r2, r2, #1
 800b64c:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b64e:	689a      	ldr	r2, [r3, #8]
 800b650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b654:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(huart);
 800b656:	2300      	movs	r3, #0
 800b658:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800b65c:	4618      	mov	r0, r3
 800b65e:	4770      	bx	lr
  __HAL_LOCK(huart);
 800b660:	2002      	movs	r0, #2
}
 800b662:	4770      	bx	lr

0800b664 <HAL_UART_DMAStop>:
{
 800b664:	b538      	push	{r3, r4, r5, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b666:	6803      	ldr	r3, [r0, #0]
{
 800b668:	4604      	mov	r4, r0
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b66a:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b66e:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b672:	6899      	ldr	r1, [r3, #8]
 800b674:	0609      	lsls	r1, r1, #24
 800b676:	d520      	bpl.n	800b6ba <HAL_UART_DMAStop+0x56>
 800b678:	2a21      	cmp	r2, #33	; 0x21
 800b67a:	d11e      	bne.n	800b6ba <HAL_UART_DMAStop+0x56>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b67c:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800b67e:	6f40      	ldr	r0, [r0, #116]	; 0x74
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b684:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800b686:	b160      	cbz	r0, 800b6a2 <HAL_UART_DMAStop+0x3e>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b688:	f7fb faa6 	bl	8006bd8 <HAL_DMA_Abort>
 800b68c:	b148      	cbz	r0, 800b6a2 <HAL_UART_DMAStop+0x3e>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b68e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800b690:	f7fb ffb0 	bl	80075f4 <HAL_DMA_GetError>
 800b694:	2820      	cmp	r0, #32
 800b696:	d104      	bne.n	800b6a2 <HAL_UART_DMAStop+0x3e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b698:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 800b69a:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b69c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800b6a0:	bd38      	pop	{r3, r4, r5, pc}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b6aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b6ac:	689a      	ldr	r2, [r3, #8]
 800b6ae:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800b6b2:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 800b6b4:	2320      	movs	r3, #32
 800b6b6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b6ba:	6823      	ldr	r3, [r4, #0]
 800b6bc:	6898      	ldr	r0, [r3, #8]
 800b6be:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800b6c2:	d0ed      	beq.n	800b6a0 <HAL_UART_DMAStop+0x3c>
 800b6c4:	2d22      	cmp	r5, #34	; 0x22
 800b6c6:	d110      	bne.n	800b6ea <HAL_UART_DMAStop+0x86>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6c8:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800b6ca:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6d0:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800b6d2:	b138      	cbz	r0, 800b6e4 <HAL_UART_DMAStop+0x80>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b6d4:	f7fb fa80 	bl	8006bd8 <HAL_DMA_Abort>
 800b6d8:	b120      	cbz	r0, 800b6e4 <HAL_UART_DMAStop+0x80>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b6da:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b6dc:	f7fb ff8a 	bl	80075f4 <HAL_DMA_GetError>
 800b6e0:	2820      	cmp	r0, #32
 800b6e2:	d0d9      	beq.n	800b698 <HAL_UART_DMAStop+0x34>
    UART_EndRxTransfer(huart);
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f7ff fe46 	bl	800b376 <UART_EndRxTransfer>
  return HAL_OK;
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	e7d8      	b.n	800b6a0 <HAL_UART_DMAStop+0x3c>

0800b6ee <HAL_UART_TxCpltCallback>:
 800b6ee:	4770      	bx	lr

0800b6f0 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b6f0:	69c2      	ldr	r2, [r0, #28]
 800b6f2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 800b6f6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b6fa:	d00c      	beq.n	800b716 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	689a      	ldr	r2, [r3, #8]
 800b706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b70a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b712:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b714:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800b716:	4618      	mov	r0, r3
 800b718:	f7ff ffe9 	bl	800b6ee <HAL_UART_TxCpltCallback>
}
 800b71c:	e7fa      	b.n	800b714 <UART_DMATransmitCplt+0x24>

0800b71e <HAL_UART_TxHalfCpltCallback>:
 800b71e:	4770      	bx	lr

0800b720 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b720:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b722:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b724:	f7ff fffb 	bl	800b71e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b728:	bd08      	pop	{r3, pc}

0800b72a <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b72a:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800b72e:	6802      	ldr	r2, [r0, #0]
 800b730:	2922      	cmp	r1, #34	; 0x22
{
 800b732:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b734:	d122      	bne.n	800b77c <UART_RxISR_8BIT+0x52>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b736:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b738:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800b73c:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800b73e:	4022      	ands	r2, r4
 800b740:	700a      	strb	r2, [r1, #0]
    huart->pRxBuffPtr++;
 800b742:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800b744:	3201      	adds	r2, #1
 800b746:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800b748:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800b74c:	3a01      	subs	r2, #1
 800b74e:	b292      	uxth	r2, r2
 800b750:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b754:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800b758:	b292      	uxth	r2, r2
 800b75a:	b972      	cbnz	r2, 800b77a <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b75c:	6801      	ldr	r1, [r0, #0]
 800b75e:	680c      	ldr	r4, [r1, #0]
 800b760:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800b764:	600c      	str	r4, [r1, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b766:	688c      	ldr	r4, [r1, #8]
 800b768:	f024 0401 	bic.w	r4, r4, #1
 800b76c:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b76e:	2120      	movs	r1, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b770:	66c2      	str	r2, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 800b772:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b776:	f7f8 ff4f 	bl	8004618 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b77a:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b77c:	6993      	ldr	r3, [r2, #24]
 800b77e:	f043 0308 	orr.w	r3, r3, #8
 800b782:	6193      	str	r3, [r2, #24]
}
 800b784:	e7f9      	b.n	800b77a <UART_RxISR_8BIT+0x50>

0800b786 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b786:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800b78a:	6802      	ldr	r2, [r0, #0]
 800b78c:	2922      	cmp	r1, #34	; 0x22
{
 800b78e:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b790:	d120      	bne.n	800b7d4 <UART_RxISR_16BIT+0x4e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b792:	6a54      	ldr	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 800b794:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 800b798:	400c      	ands	r4, r1
 800b79a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800b79c:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2U;
 800b7a0:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800b7a2:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 800b7a6:	3901      	subs	r1, #1
 800b7a8:	b289      	uxth	r1, r1
 800b7aa:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b7ae:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 800b7b2:	b289      	uxth	r1, r1
 800b7b4:	b969      	cbnz	r1, 800b7d2 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7b6:	6814      	ldr	r4, [r2, #0]
 800b7b8:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800b7bc:	6014      	str	r4, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7be:	6894      	ldr	r4, [r2, #8]
 800b7c0:	f024 0401 	bic.w	r4, r4, #1
 800b7c4:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7c6:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b7c8:	66c1      	str	r1, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 800b7ca:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b7ce:	f7f8 ff23 	bl	8004618 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b7d2:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b7d4:	6993      	ldr	r3, [r2, #24]
 800b7d6:	f043 0308 	orr.w	r3, r3, #8
 800b7da:	6193      	str	r3, [r2, #24]
}
 800b7dc:	e7f9      	b.n	800b7d2 <UART_RxISR_16BIT+0x4c>
	...

0800b7e0 <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7e0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800b7e4:	2b22      	cmp	r3, #34	; 0x22
{
 800b7e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ea:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7ec:	d13f      	bne.n	800b86e <UART_RxISR_8BIT_FIFOEN+0x8e>
  uint16_t  uhMask = huart->Mask;
 800b7ee:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b7f2:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800b7f6:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7fa:	4f20      	ldr	r7, [pc, #128]	; (800b87c <UART_RxISR_8BIT_FIFOEN+0x9c>)
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800b7fc:	b9a5      	cbnz	r5, 800b828 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b7fe:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800b802:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b804:	b173      	cbz	r3, 800b824 <UART_RxISR_8BIT_FIFOEN+0x44>
 800b806:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d90a      	bls.n	800b824 <UART_RxISR_8BIT_FIFOEN+0x44>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b80e:	6823      	ldr	r3, [r4, #0]
 800b810:	689a      	ldr	r2, [r3, #8]
 800b812:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b816:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b818:	4a19      	ldr	r2, [pc, #100]	; (800b880 <UART_RxISR_8BIT_FIFOEN+0xa0>)
 800b81a:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	f042 0220 	orr.w	r2, r2, #32
 800b822:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b828:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b82a:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b82e:	4033      	ands	r3, r6
 800b830:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800b832:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b834:	3301      	adds	r3, #1
 800b836:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800b838:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800b83c:	3b01      	subs	r3, #1
 800b83e:	b29b      	uxth	r3, r3
 800b840:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800b844:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800b848:	b29b      	uxth	r3, r3
 800b84a:	b96b      	cbnz	r3, 800b868 <UART_RxISR_8BIT_FIFOEN+0x88>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b84c:	6822      	ldr	r2, [r4, #0]
        HAL_UART_RxCpltCallback(huart);
 800b84e:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b850:	6811      	ldr	r1, [r2, #0]
 800b852:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800b856:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b858:	6891      	ldr	r1, [r2, #8]
 800b85a:	4039      	ands	r1, r7
 800b85c:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800b85e:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 800b862:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800b864:	f7f8 fed8 	bl	8004618 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800b868:	3d01      	subs	r5, #1
 800b86a:	b2ad      	uxth	r5, r5
 800b86c:	e7c6      	b.n	800b7fc <UART_RxISR_8BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b86e:	6802      	ldr	r2, [r0, #0]
 800b870:	6993      	ldr	r3, [r2, #24]
 800b872:	f043 0308 	orr.w	r3, r3, #8
 800b876:	6193      	str	r3, [r2, #24]
}
 800b878:	e7d4      	b.n	800b824 <UART_RxISR_8BIT_FIFOEN+0x44>
 800b87a:	bf00      	nop
 800b87c:	effffffe 	.word	0xeffffffe
 800b880:	0800b72b 	.word	0x0800b72b

0800b884 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b884:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800b888:	2b22      	cmp	r3, #34	; 0x22
{
 800b88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b88e:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b890:	d13d      	bne.n	800b90e <UART_RxISR_16BIT_FIFOEN+0x8a>
  uint16_t  uhMask = huart->Mask;
 800b892:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b896:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800b89a:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b89e:	4f1f      	ldr	r7, [pc, #124]	; (800b91c <UART_RxISR_16BIT_FIFOEN+0x98>)
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800b8a0:	b9a5      	cbnz	r5, 800b8cc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b8a2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800b8a6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b8a8:	b173      	cbz	r3, 800b8c8 <UART_RxISR_16BIT_FIFOEN+0x44>
 800b8aa:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d90a      	bls.n	800b8c8 <UART_RxISR_16BIT_FIFOEN+0x44>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b8b2:	6823      	ldr	r3, [r4, #0]
 800b8b4:	689a      	ldr	r2, [r3, #8]
 800b8b6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b8ba:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b8bc:	4a18      	ldr	r2, [pc, #96]	; (800b920 <UART_RxISR_16BIT_FIFOEN+0x9c>)
 800b8be:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	f042 0220 	orr.w	r2, r2, #32
 800b8c6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b8cc:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 800b8ce:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b8d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800b8d2:	4031      	ands	r1, r6
 800b8d4:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 800b8d8:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800b8da:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800b8de:	3a01      	subs	r2, #1
 800b8e0:	b292      	uxth	r2, r2
 800b8e2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800b8e6:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800b8ea:	b292      	uxth	r2, r2
 800b8ec:	b962      	cbnz	r2, 800b908 <UART_RxISR_16BIT_FIFOEN+0x84>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8ee:	6819      	ldr	r1, [r3, #0]
        HAL_UART_RxCpltCallback(huart);
 800b8f0:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8f2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800b8f6:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8f8:	6899      	ldr	r1, [r3, #8]
 800b8fa:	4039      	ands	r1, r7
 800b8fc:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800b8fe:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 800b902:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800b904:	f7f8 fe88 	bl	8004618 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800b908:	3d01      	subs	r5, #1
 800b90a:	b2ad      	uxth	r5, r5
 800b90c:	e7c8      	b.n	800b8a0 <UART_RxISR_16BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b90e:	6802      	ldr	r2, [r0, #0]
 800b910:	6993      	ldr	r3, [r2, #24]
 800b912:	f043 0308 	orr.w	r3, r3, #8
 800b916:	6193      	str	r3, [r2, #24]
}
 800b918:	e7d6      	b.n	800b8c8 <UART_RxISR_16BIT_FIFOEN+0x44>
 800b91a:	bf00      	nop
 800b91c:	effffffe 	.word	0xeffffffe
 800b920:	0800b787 	.word	0x0800b787

0800b924 <UART_DMAReceiveCplt>:
{
 800b924:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b926:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b928:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b92a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b92e:	d012      	beq.n	800b956 <UART_DMAReceiveCplt+0x32>
    huart->RxXferCount = 0U;
 800b930:	2300      	movs	r3, #0
 800b932:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b936:	6813      	ldr	r3, [r2, #0]
 800b938:	6819      	ldr	r1, [r3, #0]
 800b93a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800b93e:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b940:	6899      	ldr	r1, [r3, #8]
 800b942:	f021 0101 	bic.w	r1, r1, #1
 800b946:	6099      	str	r1, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b948:	6899      	ldr	r1, [r3, #8]
 800b94a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b94e:	6099      	str	r1, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800b950:	2320      	movs	r3, #32
 800b952:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  HAL_UART_RxCpltCallback(huart);
 800b956:	4610      	mov	r0, r2
 800b958:	f7f8 fe5e 	bl	8004618 <HAL_UART_RxCpltCallback>
}
 800b95c:	bd08      	pop	{r3, pc}

0800b95e <HAL_UART_RxHalfCpltCallback>:
 800b95e:	4770      	bx	lr

0800b960 <UART_DMARxHalfCplt>:
{
 800b960:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800b962:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b964:	f7ff fffb 	bl	800b95e <HAL_UART_RxHalfCpltCallback>
}
 800b968:	bd08      	pop	{r3, pc}

0800b96a <HAL_UART_ErrorCallback>:
 800b96a:	4770      	bx	lr

0800b96c <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b96c:	6b81      	ldr	r1, [r0, #56]	; 0x38
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b96e:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b970:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b974:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
{
 800b978:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b97a:	689c      	ldr	r4, [r3, #8]
 800b97c:	0624      	lsls	r4, r4, #24
 800b97e:	d50f      	bpl.n	800b9a0 <UART_DMAError+0x34>
 800b980:	2a21      	cmp	r2, #33	; 0x21
 800b982:	d10d      	bne.n	800b9a0 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
 800b984:	2200      	movs	r2, #0
 800b986:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b990:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b992:	689a      	ldr	r2, [r3, #8]
 800b994:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800b998:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 800b99a:	2220      	movs	r2, #32
 800b99c:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	065b      	lsls	r3, r3, #25
 800b9a4:	d507      	bpl.n	800b9b6 <UART_DMAError+0x4a>
 800b9a6:	2822      	cmp	r0, #34	; 0x22
 800b9a8:	d105      	bne.n	800b9b6 <UART_DMAError+0x4a>
    huart->RxXferCount = 0U;
 800b9aa:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 800b9ac:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 800b9ae:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b9b2:	f7ff fce0 	bl	800b376 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b9b6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
  HAL_UART_ErrorCallback(huart);
 800b9ba:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b9bc:	f043 0310 	orr.w	r3, r3, #16
 800b9c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  HAL_UART_ErrorCallback(huart);
 800b9c4:	f7ff ffd1 	bl	800b96a <HAL_UART_ErrorCallback>
}
 800b9c8:	bd10      	pop	{r4, pc}
	...

0800b9cc <UART_SetConfig>:
{
 800b9cc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800b9d0:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800b9d2:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9d4:	69c0      	ldr	r0, [r0, #28]
{
 800b9d6:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9d8:	6921      	ldr	r1, [r4, #16]
 800b9da:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9dc:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9de:	430a      	orrs	r2, r1
 800b9e0:	6961      	ldr	r1, [r4, #20]
 800b9e2:	430a      	orrs	r2, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 800b9e4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9e6:	4302      	orrs	r2, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 800b9e8:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9ea:	49a8      	ldr	r1, [pc, #672]	; (800bc8c <UART_SetConfig+0x2c0>)
 800b9ec:	4029      	ands	r1, r5
 800b9ee:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9f0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9f2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9f4:	685a      	ldr	r2, [r3, #4]
 800b9f6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800b9fa:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b9fc:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9fe:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba00:	4aa3      	ldr	r2, [pc, #652]	; (800bc90 <UART_SetConfig+0x2c4>)
 800ba02:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800ba04:	bf1c      	itt	ne
 800ba06:	6a22      	ldrne	r2, [r4, #32]
 800ba08:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba0a:	689a      	ldr	r2, [r3, #8]
 800ba0c:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 800ba10:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800ba14:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba16:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba18:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba1c:	f022 020f 	bic.w	r2, r2, #15
 800ba20:	430a      	orrs	r2, r1
 800ba22:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba24:	4a9b      	ldr	r2, [pc, #620]	; (800bc94 <UART_SetConfig+0x2c8>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d11c      	bne.n	800ba64 <UART_SetConfig+0x98>
 800ba2a:	4b9b      	ldr	r3, [pc, #620]	; (800bc98 <UART_SetConfig+0x2cc>)
 800ba2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba32:	2b28      	cmp	r3, #40	; 0x28
 800ba34:	d86c      	bhi.n	800bb10 <UART_SetConfig+0x144>
 800ba36:	4a99      	ldr	r2, [pc, #612]	; (800bc9c <UART_SetConfig+0x2d0>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba38:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ba3c:	5cd3      	ldrb	r3, [r2, r3]
 800ba3e:	f040 8104 	bne.w	800bc4a <UART_SetConfig+0x27e>
    switch (clocksource)
 800ba42:	2b08      	cmp	r3, #8
 800ba44:	f000 80fa 	beq.w	800bc3c <UART_SetConfig+0x270>
 800ba48:	f200 80c3 	bhi.w	800bbd2 <UART_SetConfig+0x206>
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	f000 80f2 	beq.w	800bc36 <UART_SetConfig+0x26a>
 800ba52:	f0c0 80eb 	bcc.w	800bc2c <UART_SetConfig+0x260>
 800ba56:	2b04      	cmp	r3, #4
 800ba58:	d15a      	bne.n	800bb10 <UART_SetConfig+0x144>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba5a:	4668      	mov	r0, sp
 800ba5c:	f7fd fe0c 	bl	8009678 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba60:	9801      	ldr	r0, [sp, #4]
        break;
 800ba62:	e0e5      	b.n	800bc30 <UART_SetConfig+0x264>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba64:	4a8e      	ldr	r2, [pc, #568]	; (800bca0 <UART_SetConfig+0x2d4>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d107      	bne.n	800ba7a <UART_SetConfig+0xae>
 800ba6a:	4b8b      	ldr	r3, [pc, #556]	; (800bc98 <UART_SetConfig+0x2cc>)
 800ba6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba6e:	f003 0307 	and.w	r3, r3, #7
 800ba72:	2b05      	cmp	r3, #5
 800ba74:	d84c      	bhi.n	800bb10 <UART_SetConfig+0x144>
 800ba76:	4a8b      	ldr	r2, [pc, #556]	; (800bca4 <UART_SetConfig+0x2d8>)
 800ba78:	e7de      	b.n	800ba38 <UART_SetConfig+0x6c>
 800ba7a:	4a8b      	ldr	r2, [pc, #556]	; (800bca8 <UART_SetConfig+0x2dc>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d107      	bne.n	800ba90 <UART_SetConfig+0xc4>
 800ba80:	4b85      	ldr	r3, [pc, #532]	; (800bc98 <UART_SetConfig+0x2cc>)
 800ba82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba84:	f003 0307 	and.w	r3, r3, #7
 800ba88:	2b05      	cmp	r3, #5
 800ba8a:	d841      	bhi.n	800bb10 <UART_SetConfig+0x144>
 800ba8c:	4a87      	ldr	r2, [pc, #540]	; (800bcac <UART_SetConfig+0x2e0>)
 800ba8e:	e7d3      	b.n	800ba38 <UART_SetConfig+0x6c>
 800ba90:	4a87      	ldr	r2, [pc, #540]	; (800bcb0 <UART_SetConfig+0x2e4>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d107      	bne.n	800baa6 <UART_SetConfig+0xda>
 800ba96:	4b80      	ldr	r3, [pc, #512]	; (800bc98 <UART_SetConfig+0x2cc>)
 800ba98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba9a:	f003 0307 	and.w	r3, r3, #7
 800ba9e:	2b05      	cmp	r3, #5
 800baa0:	d836      	bhi.n	800bb10 <UART_SetConfig+0x144>
 800baa2:	4a84      	ldr	r2, [pc, #528]	; (800bcb4 <UART_SetConfig+0x2e8>)
 800baa4:	e7c8      	b.n	800ba38 <UART_SetConfig+0x6c>
 800baa6:	4a84      	ldr	r2, [pc, #528]	; (800bcb8 <UART_SetConfig+0x2ec>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d107      	bne.n	800babc <UART_SetConfig+0xf0>
 800baac:	4b7a      	ldr	r3, [pc, #488]	; (800bc98 <UART_SetConfig+0x2cc>)
 800baae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bab0:	f003 0307 	and.w	r3, r3, #7
 800bab4:	2b05      	cmp	r3, #5
 800bab6:	d82b      	bhi.n	800bb10 <UART_SetConfig+0x144>
 800bab8:	4a80      	ldr	r2, [pc, #512]	; (800bcbc <UART_SetConfig+0x2f0>)
 800baba:	e7bd      	b.n	800ba38 <UART_SetConfig+0x6c>
 800babc:	4a80      	ldr	r2, [pc, #512]	; (800bcc0 <UART_SetConfig+0x2f4>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d107      	bne.n	800bad2 <UART_SetConfig+0x106>
 800bac2:	4b75      	ldr	r3, [pc, #468]	; (800bc98 <UART_SetConfig+0x2cc>)
 800bac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800baca:	2b28      	cmp	r3, #40	; 0x28
 800bacc:	d820      	bhi.n	800bb10 <UART_SetConfig+0x144>
 800bace:	4a7d      	ldr	r2, [pc, #500]	; (800bcc4 <UART_SetConfig+0x2f8>)
 800bad0:	e7b2      	b.n	800ba38 <UART_SetConfig+0x6c>
 800bad2:	4a7d      	ldr	r2, [pc, #500]	; (800bcc8 <UART_SetConfig+0x2fc>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d107      	bne.n	800bae8 <UART_SetConfig+0x11c>
 800bad8:	4b6f      	ldr	r3, [pc, #444]	; (800bc98 <UART_SetConfig+0x2cc>)
 800bada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800badc:	f003 0307 	and.w	r3, r3, #7
 800bae0:	2b05      	cmp	r3, #5
 800bae2:	d815      	bhi.n	800bb10 <UART_SetConfig+0x144>
 800bae4:	4a79      	ldr	r2, [pc, #484]	; (800bccc <UART_SetConfig+0x300>)
 800bae6:	e7a7      	b.n	800ba38 <UART_SetConfig+0x6c>
 800bae8:	4a79      	ldr	r2, [pc, #484]	; (800bcd0 <UART_SetConfig+0x304>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d107      	bne.n	800bafe <UART_SetConfig+0x132>
 800baee:	4b6a      	ldr	r3, [pc, #424]	; (800bc98 <UART_SetConfig+0x2cc>)
 800baf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baf2:	f003 0307 	and.w	r3, r3, #7
 800baf6:	2b05      	cmp	r3, #5
 800baf8:	d80a      	bhi.n	800bb10 <UART_SetConfig+0x144>
 800bafa:	4a76      	ldr	r2, [pc, #472]	; (800bcd4 <UART_SetConfig+0x308>)
 800bafc:	e79c      	b.n	800ba38 <UART_SetConfig+0x6c>
 800bafe:	4a64      	ldr	r2, [pc, #400]	; (800bc90 <UART_SetConfig+0x2c4>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d105      	bne.n	800bb10 <UART_SetConfig+0x144>
 800bb04:	4b64      	ldr	r3, [pc, #400]	; (800bc98 <UART_SetConfig+0x2cc>)
 800bb06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb08:	f003 0307 	and.w	r3, r3, #7
 800bb0c:	2b05      	cmp	r3, #5
 800bb0e:	d901      	bls.n	800bb14 <UART_SetConfig+0x148>
        ret = HAL_ERROR;
 800bb10:	2001      	movs	r0, #1
 800bb12:	e04b      	b.n	800bbac <UART_SetConfig+0x1e0>
    switch (clocksource)
 800bb14:	4a70      	ldr	r2, [pc, #448]	; (800bcd8 <UART_SetConfig+0x30c>)
 800bb16:	5cd3      	ldrb	r3, [r2, r3]
 800bb18:	2b08      	cmp	r3, #8
 800bb1a:	d050      	beq.n	800bbbe <UART_SetConfig+0x1f2>
 800bb1c:	d808      	bhi.n	800bb30 <UART_SetConfig+0x164>
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d03f      	beq.n	800bba2 <UART_SetConfig+0x1d6>
 800bb22:	2b04      	cmp	r3, #4
 800bb24:	d1f4      	bne.n	800bb10 <UART_SetConfig+0x144>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb26:	4668      	mov	r0, sp
 800bb28:	f7fd fda6 	bl	8009678 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb2c:	9801      	ldr	r0, [sp, #4]
        break;
 800bb2e:	e03a      	b.n	800bba6 <UART_SetConfig+0x1da>
    switch (clocksource)
 800bb30:	2b20      	cmp	r3, #32
 800bb32:	d04c      	beq.n	800bbce <UART_SetConfig+0x202>
 800bb34:	2b40      	cmp	r3, #64	; 0x40
 800bb36:	d047      	beq.n	800bbc8 <UART_SetConfig+0x1fc>
 800bb38:	2b10      	cmp	r3, #16
 800bb3a:	d1e9      	bne.n	800bb10 <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb3c:	4b56      	ldr	r3, [pc, #344]	; (800bc98 <UART_SetConfig+0x2cc>)
 800bb3e:	4867      	ldr	r0, [pc, #412]	; (800bcdc <UART_SetConfig+0x310>)
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	f012 0f20 	tst.w	r2, #32
 800bb46:	d003      	beq.n	800bb50 <UART_SetConfig+0x184>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bb4e:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bb50:	4b63      	ldr	r3, [pc, #396]	; (800bce0 <UART_SetConfig+0x314>)
 800bb52:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb54:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bb56:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb5a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bb5e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb62:	4299      	cmp	r1, r3
 800bb64:	d8d4      	bhi.n	800bb10 <UART_SetConfig+0x144>
 800bb66:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800bb6a:	d8d1      	bhi.n	800bb10 <UART_SetConfig+0x144>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	2100      	movs	r1, #0
 800bb70:	f7f4 fc0e 	bl	8000390 <__aeabi_uldivmod>
 800bb74:	462a      	mov	r2, r5
 800bb76:	020f      	lsls	r7, r1, #8
 800bb78:	2300      	movs	r3, #0
 800bb7a:	0206      	lsls	r6, r0, #8
 800bb7c:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800bb80:	0868      	lsrs	r0, r5, #1
 800bb82:	eb16 0b00 	adds.w	fp, r6, r0
 800bb86:	f147 0c00 	adc.w	ip, r7, #0
 800bb8a:	4658      	mov	r0, fp
 800bb8c:	4661      	mov	r1, ip
 800bb8e:	f7f4 fbff 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bb92:	4b54      	ldr	r3, [pc, #336]	; (800bce4 <UART_SetConfig+0x318>)
 800bb94:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d8b9      	bhi.n	800bb10 <UART_SetConfig+0x144>
          huart->Instance->BRR = usartdiv;
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	60d8      	str	r0, [r3, #12]
 800bba0:	e003      	b.n	800bbaa <UART_SetConfig+0x1de>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bba2:	f7fd fd57 	bl	8009654 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800bba6:	2800      	cmp	r0, #0
 800bba8:	d1d2      	bne.n	800bb50 <UART_SetConfig+0x184>
 800bbaa:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800bbac:	2300      	movs	r3, #0
 800bbae:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800bbb2:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800bbb6:	6723      	str	r3, [r4, #112]	; 0x70
}
 800bbb8:	b006      	add	sp, #24
 800bbba:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbbe:	a803      	add	r0, sp, #12
 800bbc0:	f7fd fe00 	bl	80097c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bbc4:	9804      	ldr	r0, [sp, #16]
        break;
 800bbc6:	e7ee      	b.n	800bba6 <UART_SetConfig+0x1da>
        pclk = (uint32_t) LSE_VALUE;
 800bbc8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bbcc:	e7c0      	b.n	800bb50 <UART_SetConfig+0x184>
        pclk = (uint32_t) CSI_VALUE;
 800bbce:	4846      	ldr	r0, [pc, #280]	; (800bce8 <UART_SetConfig+0x31c>)
 800bbd0:	e7be      	b.n	800bb50 <UART_SetConfig+0x184>
    switch (clocksource)
 800bbd2:	2b20      	cmp	r3, #32
 800bbd4:	d037      	beq.n	800bc46 <UART_SetConfig+0x27a>
 800bbd6:	2b40      	cmp	r3, #64	; 0x40
 800bbd8:	d00b      	beq.n	800bbf2 <UART_SetConfig+0x226>
 800bbda:	2b10      	cmp	r3, #16
 800bbdc:	d198      	bne.n	800bb10 <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbde:	4b2e      	ldr	r3, [pc, #184]	; (800bc98 <UART_SetConfig+0x2cc>)
 800bbe0:	483e      	ldr	r0, [pc, #248]	; (800bcdc <UART_SetConfig+0x310>)
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	f012 0f20 	tst.w	r2, #32
 800bbe8:	d003      	beq.n	800bbf2 <UART_SetConfig+0x226>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bbf0:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbf2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bbf4:	4b3a      	ldr	r3, [pc, #232]	; (800bce0 <UART_SetConfig+0x314>)
 800bbf6:	6862      	ldr	r2, [r4, #4]
 800bbf8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800bbfc:	fbb0 f0f3 	udiv	r0, r0, r3
 800bc00:	0853      	lsrs	r3, r2, #1
 800bc02:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800bc06:	fbb0 f0f2 	udiv	r0, r0, r2
 800bc0a:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc0c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800bc10:	f1a3 0110 	sub.w	r1, r3, #16
 800bc14:	4291      	cmp	r1, r2
 800bc16:	f63f af7b 	bhi.w	800bb10 <UART_SetConfig+0x144>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bc1a:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bc1e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800bc22:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bc24:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 800bc26:	4318      	orrs	r0, r3
 800bc28:	60d0      	str	r0, [r2, #12]
 800bc2a:	e7be      	b.n	800bbaa <UART_SetConfig+0x1de>
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc2c:	f7fc ff76 	bl	8008b1c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800bc30:	2800      	cmp	r0, #0
 800bc32:	d0ba      	beq.n	800bbaa <UART_SetConfig+0x1de>
 800bc34:	e7dd      	b.n	800bbf2 <UART_SetConfig+0x226>
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc36:	f7fc ff83 	bl	8008b40 <HAL_RCC_GetPCLK2Freq>
        break;
 800bc3a:	e7f9      	b.n	800bc30 <UART_SetConfig+0x264>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc3c:	a803      	add	r0, sp, #12
 800bc3e:	f7fd fdc1 	bl	80097c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc42:	9804      	ldr	r0, [sp, #16]
        break;
 800bc44:	e7f4      	b.n	800bc30 <UART_SetConfig+0x264>
        pclk = (uint32_t) CSI_VALUE;
 800bc46:	4828      	ldr	r0, [pc, #160]	; (800bce8 <UART_SetConfig+0x31c>)
 800bc48:	e7d3      	b.n	800bbf2 <UART_SetConfig+0x226>
    switch (clocksource)
 800bc4a:	2b08      	cmp	r3, #8
 800bc4c:	d06a      	beq.n	800bd24 <UART_SetConfig+0x358>
 800bc4e:	d80a      	bhi.n	800bc66 <UART_SetConfig+0x29a>
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d064      	beq.n	800bd1e <UART_SetConfig+0x352>
 800bc54:	d35d      	bcc.n	800bd12 <UART_SetConfig+0x346>
 800bc56:	2b04      	cmp	r3, #4
 800bc58:	f47f af5a 	bne.w	800bb10 <UART_SetConfig+0x144>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc5c:	4668      	mov	r0, sp
 800bc5e:	f7fd fd0b 	bl	8009678 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc62:	9801      	ldr	r0, [sp, #4]
        break;
 800bc64:	e057      	b.n	800bd16 <UART_SetConfig+0x34a>
    switch (clocksource)
 800bc66:	2b20      	cmp	r3, #32
 800bc68:	d061      	beq.n	800bd2e <UART_SetConfig+0x362>
 800bc6a:	2b40      	cmp	r3, #64	; 0x40
 800bc6c:	d03e      	beq.n	800bcec <UART_SetConfig+0x320>
 800bc6e:	2b10      	cmp	r3, #16
 800bc70:	f47f af4e 	bne.w	800bb10 <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc74:	4b08      	ldr	r3, [pc, #32]	; (800bc98 <UART_SetConfig+0x2cc>)
 800bc76:	4819      	ldr	r0, [pc, #100]	; (800bcdc <UART_SetConfig+0x310>)
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	f012 0f20 	tst.w	r2, #32
 800bc7e:	d037      	beq.n	800bcf0 <UART_SetConfig+0x324>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bc86:	40d8      	lsrs	r0, r3
 800bc88:	e032      	b.n	800bcf0 <UART_SetConfig+0x324>
 800bc8a:	bf00      	nop
 800bc8c:	cfff69f3 	.word	0xcfff69f3
 800bc90:	58000c00 	.word	0x58000c00
 800bc94:	40011000 	.word	0x40011000
 800bc98:	58024400 	.word	0x58024400
 800bc9c:	08015508 	.word	0x08015508
 800bca0:	40004400 	.word	0x40004400
 800bca4:	08015531 	.word	0x08015531
 800bca8:	40004800 	.word	0x40004800
 800bcac:	08015531 	.word	0x08015531
 800bcb0:	40004c00 	.word	0x40004c00
 800bcb4:	08015531 	.word	0x08015531
 800bcb8:	40005000 	.word	0x40005000
 800bcbc:	08015531 	.word	0x08015531
 800bcc0:	40011400 	.word	0x40011400
 800bcc4:	08015508 	.word	0x08015508
 800bcc8:	40007800 	.word	0x40007800
 800bccc:	08015531 	.word	0x08015531
 800bcd0:	40007c00 	.word	0x40007c00
 800bcd4:	08015531 	.word	0x08015531
 800bcd8:	08015537 	.word	0x08015537
 800bcdc:	03d09000 	.word	0x03d09000
 800bce0:	0801553e 	.word	0x0801553e
 800bce4:	000ffcff 	.word	0x000ffcff
 800bce8:	003d0900 	.word	0x003d0900
        pclk = (uint32_t) LSE_VALUE;
 800bcec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bcf2:	4a10      	ldr	r2, [pc, #64]	; (800bd34 <UART_SetConfig+0x368>)
 800bcf4:	6863      	ldr	r3, [r4, #4]
 800bcf6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800bcfa:	fbb0 f0f2 	udiv	r0, r0, r2
 800bcfe:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800bd02:	fbb0 f0f3 	udiv	r0, r0, r3
 800bd06:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd08:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800bd0c:	f1a0 0210 	sub.w	r2, r0, #16
 800bd10:	e742      	b.n	800bb98 <UART_SetConfig+0x1cc>
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd12:	f7fc ff03 	bl	8008b1c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800bd16:	2800      	cmp	r0, #0
 800bd18:	f43f af47 	beq.w	800bbaa <UART_SetConfig+0x1de>
 800bd1c:	e7e8      	b.n	800bcf0 <UART_SetConfig+0x324>
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd1e:	f7fc ff0f 	bl	8008b40 <HAL_RCC_GetPCLK2Freq>
        break;
 800bd22:	e7f8      	b.n	800bd16 <UART_SetConfig+0x34a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd24:	a803      	add	r0, sp, #12
 800bd26:	f7fd fd4d 	bl	80097c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bd2a:	9804      	ldr	r0, [sp, #16]
        break;
 800bd2c:	e7f3      	b.n	800bd16 <UART_SetConfig+0x34a>
        pclk = (uint32_t) CSI_VALUE;
 800bd2e:	4802      	ldr	r0, [pc, #8]	; (800bd38 <UART_SetConfig+0x36c>)
 800bd30:	e7de      	b.n	800bcf0 <UART_SetConfig+0x324>
 800bd32:	bf00      	nop
 800bd34:	0801553e 	.word	0x0801553e
 800bd38:	003d0900 	.word	0x003d0900

0800bd3c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bd3e:	07da      	lsls	r2, r3, #31
{
 800bd40:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd42:	d506      	bpl.n	800bd52 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd44:	6801      	ldr	r1, [r0, #0]
 800bd46:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800bd48:	684a      	ldr	r2, [r1, #4]
 800bd4a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800bd4e:	4322      	orrs	r2, r4
 800bd50:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd52:	079c      	lsls	r4, r3, #30
 800bd54:	d506      	bpl.n	800bd64 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd56:	6801      	ldr	r1, [r0, #0]
 800bd58:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800bd5a:	684a      	ldr	r2, [r1, #4]
 800bd5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bd60:	4322      	orrs	r2, r4
 800bd62:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd64:	0759      	lsls	r1, r3, #29
 800bd66:	d506      	bpl.n	800bd76 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd68:	6801      	ldr	r1, [r0, #0]
 800bd6a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800bd6c:	684a      	ldr	r2, [r1, #4]
 800bd6e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bd72:	4322      	orrs	r2, r4
 800bd74:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd76:	071a      	lsls	r2, r3, #28
 800bd78:	d506      	bpl.n	800bd88 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd7a:	6801      	ldr	r1, [r0, #0]
 800bd7c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800bd7e:	684a      	ldr	r2, [r1, #4]
 800bd80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bd84:	4322      	orrs	r2, r4
 800bd86:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd88:	06dc      	lsls	r4, r3, #27
 800bd8a:	d506      	bpl.n	800bd9a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd8c:	6801      	ldr	r1, [r0, #0]
 800bd8e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800bd90:	688a      	ldr	r2, [r1, #8]
 800bd92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bd96:	4322      	orrs	r2, r4
 800bd98:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd9a:	0699      	lsls	r1, r3, #26
 800bd9c:	d506      	bpl.n	800bdac <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd9e:	6801      	ldr	r1, [r0, #0]
 800bda0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800bda2:	688a      	ldr	r2, [r1, #8]
 800bda4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bda8:	4322      	orrs	r2, r4
 800bdaa:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bdac:	065a      	lsls	r2, r3, #25
 800bdae:	d510      	bpl.n	800bdd2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bdb0:	6801      	ldr	r1, [r0, #0]
 800bdb2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800bdb4:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bdb6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bdba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800bdbe:	ea42 0204 	orr.w	r2, r2, r4
 800bdc2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bdc4:	d105      	bne.n	800bdd2 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bdc6:	684a      	ldr	r2, [r1, #4]
 800bdc8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800bdca:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800bdce:	4322      	orrs	r2, r4
 800bdd0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdd2:	061b      	lsls	r3, r3, #24
 800bdd4:	d506      	bpl.n	800bde4 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bdd6:	6802      	ldr	r2, [r0, #0]
 800bdd8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800bdda:	6853      	ldr	r3, [r2, #4]
 800bddc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800bde0:	430b      	orrs	r3, r1
 800bde2:	6053      	str	r3, [r2, #4]
}
 800bde4:	bd10      	pop	{r4, pc}

0800bde6 <UART_WaitOnFlagUntilTimeout>:
{
 800bde6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdea:	9d06      	ldr	r5, [sp, #24]
 800bdec:	4604      	mov	r4, r0
 800bdee:	460f      	mov	r7, r1
 800bdf0:	4616      	mov	r6, r2
 800bdf2:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdf4:	6821      	ldr	r1, [r4, #0]
 800bdf6:	69ca      	ldr	r2, [r1, #28]
 800bdf8:	ea37 0302 	bics.w	r3, r7, r2
 800bdfc:	bf0c      	ite	eq
 800bdfe:	2201      	moveq	r2, #1
 800be00:	2200      	movne	r2, #0
 800be02:	42b2      	cmp	r2, r6
 800be04:	d001      	beq.n	800be0a <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800be06:	2000      	movs	r0, #0
 800be08:	e01a      	b.n	800be40 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800be0a:	1c68      	adds	r0, r5, #1
 800be0c:	d0f3      	beq.n	800bdf6 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be0e:	f7f9 fbb5 	bl	800557c <HAL_GetTick>
 800be12:	eba0 0008 	sub.w	r0, r0, r8
 800be16:	42a8      	cmp	r0, r5
 800be18:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800be1a:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be1c:	d800      	bhi.n	800be20 <UART_WaitOnFlagUntilTimeout+0x3a>
 800be1e:	b98d      	cbnz	r5, 800be44 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800be20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800be24:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be26:	6883      	ldr	r3, [r0, #8]
 800be28:	f023 0301 	bic.w	r3, r3, #1
 800be2c:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800be2e:	2320      	movs	r3, #32
 800be30:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800be34:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800be38:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800be3a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800be3c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 800be40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800be44:	075a      	lsls	r2, r3, #29
 800be46:	d5d5      	bpl.n	800bdf4 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be48:	69c3      	ldr	r3, [r0, #28]
 800be4a:	051b      	lsls	r3, r3, #20
 800be4c:	d5d2      	bpl.n	800bdf4 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be52:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800be54:	6803      	ldr	r3, [r0, #0]
 800be56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800be5a:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be5c:	6883      	ldr	r3, [r0, #8]
 800be5e:	f023 0301 	bic.w	r3, r3, #1
 800be62:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800be64:	2320      	movs	r3, #32
 800be66:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800be6a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be6e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800be72:	e7e1      	b.n	800be38 <UART_WaitOnFlagUntilTimeout+0x52>

0800be74 <UART_CheckIdleState>:
{
 800be74:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be76:	2600      	movs	r6, #0
{
 800be78:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be7a:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 800be7e:	f7f9 fb7d 	bl	800557c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be82:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800be84:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	071a      	lsls	r2, r3, #28
 800be8a:	d417      	bmi.n	800bebc <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be8c:	6823      	ldr	r3, [r4, #0]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	075b      	lsls	r3, r3, #29
 800be92:	d50a      	bpl.n	800beaa <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be98:	2200      	movs	r2, #0
 800be9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800be9e:	4620      	mov	r0, r4
 800bea0:	9300      	str	r3, [sp, #0]
 800bea2:	462b      	mov	r3, r5
 800bea4:	f7ff ff9f 	bl	800bde6 <UART_WaitOnFlagUntilTimeout>
 800bea8:	b9a0      	cbnz	r0, 800bed4 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 800beaa:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800beac:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800beae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800beb2:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800beb6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 800beba:	e00c      	b.n	800bed6 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bec0:	4632      	mov	r2, r6
 800bec2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	4603      	mov	r3, r0
 800beca:	4620      	mov	r0, r4
 800becc:	f7ff ff8b 	bl	800bde6 <UART_WaitOnFlagUntilTimeout>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d0db      	beq.n	800be8c <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800bed4:	2003      	movs	r0, #3
}
 800bed6:	b002      	add	sp, #8
 800bed8:	bd70      	pop	{r4, r5, r6, pc}

0800beda <HAL_UART_Init>:
{
 800beda:	b510      	push	{r4, lr}
  if (huart == NULL)
 800bedc:	4604      	mov	r4, r0
 800bede:	b350      	cbz	r0, 800bf36 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800bee0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800bee4:	b91b      	cbnz	r3, 800beee <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800bee6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 800beea:	f7f7 f873 	bl	8002fd4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800beee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800bef0:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bef2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800bef4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 800bef8:	6813      	ldr	r3, [r2, #0]
 800befa:	f023 0301 	bic.w	r3, r3, #1
 800befe:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf00:	f7ff fd64 	bl	800b9cc <UART_SetConfig>
 800bf04:	2801      	cmp	r0, #1
 800bf06:	d016      	beq.n	800bf36 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bf0a:	b113      	cbz	r3, 800bf12 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f7ff ff15 	bl	800bd3c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf12:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800bf14:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf16:	685a      	ldr	r2, [r3, #4]
 800bf18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf1e:	689a      	ldr	r2, [r3, #8]
 800bf20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf24:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	f042 0201 	orr.w	r2, r2, #1
}
 800bf2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800bf30:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800bf32:	f7ff bf9f 	b.w	800be74 <UART_CheckIdleState>
}
 800bf36:	2001      	movs	r0, #1
 800bf38:	bd10      	pop	{r4, pc}
	...

0800bf3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf3c:	b084      	sub	sp, #16
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bf3e:	f240 1307 	movw	r3, #263	; 0x107
 800bf42:	4a17      	ldr	r2, [pc, #92]	; (800bfa0 <UARTEx_SetNbDataToProcess+0x64>)
 800bf44:	e9cd 2300 	strd	r2, r3, [sp]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bf48:	4b16      	ldr	r3, [pc, #88]	; (800bfa4 <UARTEx_SetNbDataToProcess+0x68>)
 800bf4a:	9302      	str	r3, [sp, #8]
 800bf4c:	f1a3 2303 	sub.w	r3, r3, #50332416	; 0x3000300
 800bf50:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800bf54:	9303      	str	r3, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf56:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800bf58:	b923      	cbnz	r3, 800bf64 <UARTEx_SetNbDataToProcess+0x28>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 800bf5a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800bf5e:	6683      	str	r3, [r0, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bf60:	b004      	add	sp, #16
 800bf62:	4770      	bx	lr
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bf64:	6802      	ldr	r2, [r0, #0]
 800bf66:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bf68:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bf6a:	aa04      	add	r2, sp, #16
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bf6c:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bf70:	eb02 7151 	add.w	r1, r2, r1, lsr #29
 800bf74:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800bf78:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 800bf7c:	0112      	lsls	r2, r2, #4
 800bf7e:	fb92 f2f1 	sdiv	r2, r2, r1
 800bf82:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bf86:	aa04      	add	r2, sp, #16
 800bf88:	4413      	add	r3, r2
 800bf8a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800bf8e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800bf92:	0112      	lsls	r2, r2, #4
 800bf94:	fb92 f3f3 	sdiv	r3, r2, r3
 800bf98:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 800bf9c:	e7e0      	b.n	800bf60 <UARTEx_SetNbDataToProcess+0x24>
 800bf9e:	bf00      	nop
 800bfa0:	03010101 	.word	0x03010101
 800bfa4:	04020408 	.word	0x04020408

0800bfa8 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800bfa8:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d014      	beq.n	800bfda <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfb0:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800bfb2:	2324      	movs	r3, #36	; 0x24
 800bfb4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfb8:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800bfba:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bfbc:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800bfc0:	f023 0301 	bic.w	r3, r3, #1
 800bfc4:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfca:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800bfcc:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800bfce:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_READY;
 800bfd2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return HAL_OK;
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	4770      	bx	lr
  __HAL_LOCK(huart);
 800bfda:	2002      	movs	r0, #2
}
 800bfdc:	4770      	bx	lr

0800bfde <HAL_UARTEx_SetTxFifoThreshold>:
{
 800bfde:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800bfe0:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 800bfe4:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d01b      	beq.n	800c022 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800bfea:	2301      	movs	r3, #1
 800bfec:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800bff0:	2324      	movs	r3, #36	; 0x24
 800bff2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bff6:	6803      	ldr	r3, [r0, #0]
 800bff8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	f022 0201 	bic.w	r2, r2, #1
 800c000:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c002:	689a      	ldr	r2, [r3, #8]
 800c004:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800c008:	4311      	orrs	r1, r2
 800c00a:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c00c:	f7ff ff96 	bl	800bf3c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c010:	6803      	ldr	r3, [r0, #0]
 800c012:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c014:	2320      	movs	r3, #32
 800c016:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800c01a:	2000      	movs	r0, #0
 800c01c:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800c020:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800c022:	2002      	movs	r0, #2
 800c024:	e7fc      	b.n	800c020 <HAL_UARTEx_SetTxFifoThreshold+0x42>

0800c026 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800c026:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800c028:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 800c02c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800c02e:	2b01      	cmp	r3, #1
 800c030:	d01b      	beq.n	800c06a <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800c032:	2301      	movs	r3, #1
 800c034:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800c038:	2324      	movs	r3, #36	; 0x24
 800c03a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c03e:	6803      	ldr	r3, [r0, #0]
 800c040:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	f022 0201 	bic.w	r2, r2, #1
 800c048:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c04a:	689a      	ldr	r2, [r3, #8]
 800c04c:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800c050:	4311      	orrs	r1, r2
 800c052:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c054:	f7ff ff72 	bl	800bf3c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c058:	6803      	ldr	r3, [r0, #0]
 800c05a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c05c:	2320      	movs	r3, #32
 800c05e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800c062:	2000      	movs	r0, #0
 800c064:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800c068:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800c06a:	2002      	movs	r0, #2
 800c06c:	e7fc      	b.n	800c068 <HAL_UARTEx_SetRxFifoThreshold+0x42>
	...

0800c070 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c070:	4b12      	ldr	r3, [pc, #72]	; (800c0bc <SDMMC_GetCmdResp2+0x4c>)
 800c072:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	fbb3 f2f2 	udiv	r2, r3, r2
 800c07c:	f241 3388 	movw	r3, #5000	; 0x1388
 800c080:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800c082:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c086:	d315      	bcc.n	800c0b4 <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800c088:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c08a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c08e:	d0f8      	beq.n	800c082 <SDMMC_GetCmdResp2+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c090:	0492      	lsls	r2, r2, #18
 800c092:	d4f6      	bmi.n	800c082 <SDMMC_GetCmdResp2+0x12>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c094:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c096:	075b      	lsls	r3, r3, #29
 800c098:	d503      	bpl.n	800c0a2 <SDMMC_GetCmdResp2+0x32>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c09a:	2304      	movs	r3, #4

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c09c:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c0a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c0a4:	f013 0301 	ands.w	r3, r3, #1
 800c0a8:	d001      	beq.n	800c0ae <SDMMC_GetCmdResp2+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e7f6      	b.n	800c09c <SDMMC_GetCmdResp2+0x2c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c0ae:	4a04      	ldr	r2, [pc, #16]	; (800c0c0 <SDMMC_GetCmdResp2+0x50>)
 800c0b0:	6382      	str	r2, [r0, #56]	; 0x38
 800c0b2:	e7f4      	b.n	800c09e <SDMMC_GetCmdResp2+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800c0b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c0b8:	e7f1      	b.n	800c09e <SDMMC_GetCmdResp2+0x2e>
 800c0ba:	bf00      	nop
 800c0bc:	24000000 	.word	0x24000000
 800c0c0:	002000c5 	.word	0x002000c5

0800c0c4 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c0c4:	4b0f      	ldr	r3, [pc, #60]	; (800c104 <SDMMC_GetCmdResp3+0x40>)
 800c0c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	fbb3 f2f2 	udiv	r2, r3, r2
 800c0d0:	f241 3388 	movw	r3, #5000	; 0x1388
 800c0d4:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800c0d6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c0da:	d310      	bcc.n	800c0fe <SDMMC_GetCmdResp3+0x3a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800c0dc:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c0de:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c0e2:	d0f8      	beq.n	800c0d6 <SDMMC_GetCmdResp3+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c0e4:	0492      	lsls	r2, r2, #18
 800c0e6:	d4f6      	bmi.n	800c0d6 <SDMMC_GetCmdResp3+0x12>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c0e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c0ea:	f013 0304 	ands.w	r3, r3, #4
 800c0ee:	d003      	beq.n	800c0f8 <SDMMC_GetCmdResp3+0x34>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0f0:	2304      	movs	r3, #4
 800c0f2:	6383      	str	r3, [r0, #56]	; 0x38
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c0f8:	4a03      	ldr	r2, [pc, #12]	; (800c108 <SDMMC_GetCmdResp3+0x44>)
 800c0fa:	6382      	str	r2, [r0, #56]	; 0x38
 800c0fc:	e7fa      	b.n	800c0f4 <SDMMC_GetCmdResp3+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c0fe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c102:	4770      	bx	lr
 800c104:	24000000 	.word	0x24000000
 800c108:	002000c5 	.word	0x002000c5

0800c10c <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c10c:	4b44      	ldr	r3, [pc, #272]	; (800c220 <SDMMC_GetCmdResp1+0x114>)
{
 800c10e:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 800c116:	fbb3 f3f4 	udiv	r3, r3, r4
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c11a:	4c42      	ldr	r4, [pc, #264]	; (800c224 <SDMMC_GetCmdResp1+0x118>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c11c:	435a      	muls	r2, r3
    if (count-- == 0U)
 800c11e:	2a00      	cmp	r2, #0
 800c120:	d049      	beq.n	800c1b6 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 800c122:	6b43      	ldr	r3, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c124:	4223      	tst	r3, r4
 800c126:	d008      	beq.n	800c13a <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c128:	049b      	lsls	r3, r3, #18
 800c12a:	d406      	bmi.n	800c13a <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c12c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c12e:	075b      	lsls	r3, r3, #29
 800c130:	d505      	bpl.n	800c13e <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c132:	2304      	movs	r3, #4
 800c134:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c136:	4618      	mov	r0, r3
}
 800c138:	bd10      	pop	{r4, pc}
 800c13a:	3a01      	subs	r2, #1
 800c13c:	e7ef      	b.n	800c11e <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c13e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c140:	07dc      	lsls	r4, r3, #31
 800c142:	d503      	bpl.n	800c14c <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c144:	2301      	movs	r3, #1
 800c146:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c148:	2001      	movs	r0, #1
 800c14a:	e7f5      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c14c:	4b36      	ldr	r3, [pc, #216]	; (800c228 <SDMMC_GetCmdResp1+0x11c>)
 800c14e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c150:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c152:	b2db      	uxtb	r3, r3
 800c154:	4299      	cmp	r1, r3
 800c156:	d1f7      	bne.n	800c148 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 800c158:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c15a:	4834      	ldr	r0, [pc, #208]	; (800c22c <SDMMC_GetCmdResp1+0x120>)
 800c15c:	4018      	ands	r0, r3
 800c15e:	2800      	cmp	r0, #0
 800c160:	d0ea      	beq.n	800c138 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c162:	2b00      	cmp	r3, #0
 800c164:	db2a      	blt.n	800c1bc <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c166:	005a      	lsls	r2, r3, #1
 800c168:	d42b      	bmi.n	800c1c2 <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c16a:	009c      	lsls	r4, r3, #2
 800c16c:	d42b      	bmi.n	800c1c6 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c16e:	00d9      	lsls	r1, r3, #3
 800c170:	d42b      	bmi.n	800c1ca <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c172:	011a      	lsls	r2, r3, #4
 800c174:	d42c      	bmi.n	800c1d0 <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c176:	015c      	lsls	r4, r3, #5
 800c178:	d42d      	bmi.n	800c1d6 <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c17a:	01d9      	lsls	r1, r3, #7
 800c17c:	d42e      	bmi.n	800c1dc <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c17e:	021a      	lsls	r2, r3, #8
 800c180:	d42f      	bmi.n	800c1e2 <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c182:	025c      	lsls	r4, r3, #9
 800c184:	d430      	bmi.n	800c1e8 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c186:	0299      	lsls	r1, r3, #10
 800c188:	d431      	bmi.n	800c1ee <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c18a:	02da      	lsls	r2, r3, #11
 800c18c:	d432      	bmi.n	800c1f4 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c18e:	035c      	lsls	r4, r3, #13
 800c190:	d433      	bmi.n	800c1fa <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c192:	0399      	lsls	r1, r3, #14
 800c194:	d434      	bmi.n	800c200 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c196:	03da      	lsls	r2, r3, #15
 800c198:	d435      	bmi.n	800c206 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c19a:	041c      	lsls	r4, r3, #16
 800c19c:	d436      	bmi.n	800c20c <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c19e:	0459      	lsls	r1, r3, #17
 800c1a0:	d437      	bmi.n	800c212 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c1a2:	049a      	lsls	r2, r3, #18
 800c1a4:	d438      	bmi.n	800c218 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c1a6:	f013 0f08 	tst.w	r3, #8
 800c1aa:	bf0c      	ite	eq
 800c1ac:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c1b0:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c1b4:	e7c0      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800c1b6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c1ba:	e7bd      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c1bc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c1c0:	e7ba      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c1c2:	2040      	movs	r0, #64	; 0x40
 800c1c4:	e7b8      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c1c6:	2080      	movs	r0, #128	; 0x80
 800c1c8:	e7b6      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c1ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c1ce:	e7b3      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c1d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c1d4:	e7b0      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c1d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c1da:	e7ad      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c1dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c1e0:	e7aa      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c1e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c1e6:	e7a7      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c1e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c1ec:	e7a4      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c1ee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c1f2:	e7a1      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 800c1f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c1f8:	e79e      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c1fa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c1fe:	e79b      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c200:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c204:	e798      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c206:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c20a:	e795      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c20c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c210:	e792      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c212:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c216:	e78f      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 800c218:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800c21c:	e78c      	b.n	800c138 <SDMMC_GetCmdResp1+0x2c>
 800c21e:	bf00      	nop
 800c220:	24000000 	.word	0x24000000
 800c224:	00200045 	.word	0x00200045
 800c228:	002000c5 	.word	0x002000c5
 800c22c:	fdffe008 	.word	0xfdffe008

0800c230 <SDMMC_Init>:
{
 800c230:	b084      	sub	sp, #16
 800c232:	b510      	push	{r4, lr}
 800c234:	ac03      	add	r4, sp, #12
 800c236:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800c23a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c23e:	6841      	ldr	r1, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 800c240:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 800c242:	9a05      	ldr	r2, [sp, #20]
 800c244:	4313      	orrs	r3, r2
             Init.BusWide             |\
 800c246:	9a06      	ldr	r2, [sp, #24]
 800c248:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 800c24a:	9a07      	ldr	r2, [sp, #28]
 800c24c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c24e:	4a04      	ldr	r2, [pc, #16]	; (800c260 <SDMMC_Init+0x30>)
 800c250:	400a      	ands	r2, r1
}
 800c252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c256:	4313      	orrs	r3, r2
}
 800c258:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c25a:	6043      	str	r3, [r0, #4]
}
 800c25c:	2000      	movs	r0, #0
 800c25e:	4770      	bx	lr
 800c260:	ffc02c00 	.word	0xffc02c00

0800c264 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800c264:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800c268:	4770      	bx	lr

0800c26a <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800c26a:	680b      	ldr	r3, [r1, #0]
 800c26c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800c270:	2000      	movs	r0, #0
 800c272:	4770      	bx	lr

0800c274 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c274:	6803      	ldr	r3, [r0, #0]
 800c276:	f043 0303 	orr.w	r3, r3, #3
 800c27a:	6003      	str	r3, [r0, #0]
}
 800c27c:	2000      	movs	r0, #0
 800c27e:	4770      	bx	lr

0800c280 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c280:	6800      	ldr	r0, [r0, #0]
}
 800c282:	f000 0003 	and.w	r0, r0, #3
 800c286:	4770      	bx	lr

0800c288 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800c288:	680b      	ldr	r3, [r1, #0]
{
 800c28a:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 800c28c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c28e:	68c4      	ldr	r4, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c290:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 800c294:	4313      	orrs	r3, r2
                       Command->Response         |\
 800c296:	68ca      	ldr	r2, [r1, #12]
 800c298:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800c29a:	690a      	ldr	r2, [r1, #16]
 800c29c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c29e:	4a03      	ldr	r2, [pc, #12]	; (800c2ac <SDMMC_SendCommand+0x24>)
 800c2a0:	4022      	ands	r2, r4
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	60c3      	str	r3, [r0, #12]
}
 800c2a6:	2000      	movs	r0, #0
 800c2a8:	bd10      	pop	{r4, pc}
 800c2aa:	bf00      	nop
 800c2ac:	fffee0c0 	.word	0xfffee0c0

0800c2b0 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c2b0:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800c2b2:	5840      	ldr	r0, [r0, r1]
}
 800c2b4:	4770      	bx	lr

0800c2b6 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c2b6:	680b      	ldr	r3, [r1, #0]
{
 800c2b8:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c2ba:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800c2bc:	684b      	ldr	r3, [r1, #4]
 800c2be:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c2c0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c2c2:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c2c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c2ca:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 800c2cc:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 800c2ce:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 800c2d0:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800c2d2:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800c2d8:	2000      	movs	r0, #0
 800c2da:	bd10      	pop	{r4, pc}

0800c2dc <SDMMC_CmdBlockLength>:
{
 800c2dc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2de:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c2e2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2e4:	2410      	movs	r4, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2e6:	2200      	movs	r2, #0
{
 800c2e8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c2ea:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2ec:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2ee:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2fa:	f7ff ffc5 	bl	800c288 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c2fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800c302:	4621      	mov	r1, r4
 800c304:	4628      	mov	r0, r5
 800c306:	f7ff ff01 	bl	800c10c <SDMMC_GetCmdResp1>
}
 800c30a:	b007      	add	sp, #28
 800c30c:	bd30      	pop	{r4, r5, pc}

0800c30e <SDMMC_CmdReadSingleBlock>:
{
 800c30e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c310:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c314:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c316:	2411      	movs	r4, #17
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c318:	2200      	movs	r2, #0
{
 800c31a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c31c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c31e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c320:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c328:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c32c:	f7ff ffac 	bl	800c288 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c330:	f241 3288 	movw	r2, #5000	; 0x1388
 800c334:	4621      	mov	r1, r4
 800c336:	4628      	mov	r0, r5
 800c338:	f7ff fee8 	bl	800c10c <SDMMC_GetCmdResp1>
}
 800c33c:	b007      	add	sp, #28
 800c33e:	bd30      	pop	{r4, r5, pc}

0800c340 <SDMMC_CmdReadMultiBlock>:
{
 800c340:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c342:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c346:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c348:	2412      	movs	r4, #18
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c34a:	2200      	movs	r2, #0
{
 800c34c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c34e:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c350:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c352:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c35a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c35e:	f7ff ff93 	bl	800c288 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c362:	f241 3288 	movw	r2, #5000	; 0x1388
 800c366:	4621      	mov	r1, r4
 800c368:	4628      	mov	r0, r5
 800c36a:	f7ff fecf 	bl	800c10c <SDMMC_GetCmdResp1>
}
 800c36e:	b007      	add	sp, #28
 800c370:	bd30      	pop	{r4, r5, pc}

0800c372 <SDMMC_CmdWriteSingleBlock>:
{
 800c372:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c374:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c378:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c37a:	2418      	movs	r4, #24
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c37c:	2200      	movs	r2, #0
{
 800c37e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c380:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c382:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c384:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c38c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c390:	f7ff ff7a 	bl	800c288 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c394:	f241 3288 	movw	r2, #5000	; 0x1388
 800c398:	4621      	mov	r1, r4
 800c39a:	4628      	mov	r0, r5
 800c39c:	f7ff feb6 	bl	800c10c <SDMMC_GetCmdResp1>
}
 800c3a0:	b007      	add	sp, #28
 800c3a2:	bd30      	pop	{r4, r5, pc}

0800c3a4 <SDMMC_CmdWriteMultiBlock>:
{
 800c3a4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3a6:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c3aa:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3ac:	2419      	movs	r4, #25
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3ae:	2200      	movs	r2, #0
{
 800c3b0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c3b2:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3b4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3b6:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3be:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3c2:	f7ff ff61 	bl	800c288 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c3c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3ca:	4621      	mov	r1, r4
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	f7ff fe9d 	bl	800c10c <SDMMC_GetCmdResp1>
}
 800c3d2:	b007      	add	sp, #28
 800c3d4:	bd30      	pop	{r4, r5, pc}
	...

0800c3d8 <SDMMC_CmdStopTransfer>:
{
 800c3d8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c3da:	2300      	movs	r3, #0
{
 800c3dc:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c3de:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3e0:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800c3e4:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3e6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3e8:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c3ec:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3f4:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c3f6:	68c3      	ldr	r3, [r0, #12]
 800c3f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3fc:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c3fe:	68c3      	ldr	r3, [r0, #12]
 800c400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c404:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c406:	f7ff ff3f 	bl	800c288 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c40a:	4a07      	ldr	r2, [pc, #28]	; (800c428 <SDMMC_CmdStopTransfer+0x50>)
 800c40c:	4629      	mov	r1, r5
 800c40e:	4620      	mov	r0, r4
 800c410:	f7ff fe7c 	bl	800c10c <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c414:	68e3      	ldr	r3, [r4, #12]
}
 800c416:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800c41a:	bf08      	it	eq
 800c41c:	2000      	moveq	r0, #0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c41e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c422:	60e3      	str	r3, [r4, #12]
}
 800c424:	b007      	add	sp, #28
 800c426:	bd30      	pop	{r4, r5, pc}
 800c428:	05f5e100 	.word	0x05f5e100

0800c42c <SDMMC_CmdSelDesel>:
{
 800c42c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c42e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c432:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c434:	2407      	movs	r4, #7
{
 800c436:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c438:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c43a:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c43c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c43e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c446:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c44a:	f7ff ff1d 	bl	800c288 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c44e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c452:	4621      	mov	r1, r4
 800c454:	4628      	mov	r0, r5
 800c456:	f7ff fe59 	bl	800c10c <SDMMC_GetCmdResp1>
}
 800c45a:	b007      	add	sp, #28
 800c45c:	bd30      	pop	{r4, r5, pc}
	...

0800c460 <SDMMC_CmdGoIdleState>:
{
 800c460:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 800c462:	2300      	movs	r3, #0
{
 800c464:	b086      	sub	sp, #24
 800c466:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c468:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c46a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c46e:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c476:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c478:	f7ff ff06 	bl	800c288 <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c47c:	4b0b      	ldr	r3, [pc, #44]	; (800c4ac <SDMMC_CmdGoIdleState+0x4c>)
 800c47e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	fbb3 f2f2 	udiv	r2, r3, r2
 800c488:	f241 3388 	movw	r3, #5000	; 0x1388
 800c48c:	4353      	muls	r3, r2
    if (count-- == 0U)
 800c48e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c492:	d307      	bcc.n	800c4a4 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c494:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c496:	0612      	lsls	r2, r2, #24
 800c498:	d5f9      	bpl.n	800c48e <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c49a:	4b05      	ldr	r3, [pc, #20]	; (800c4b0 <SDMMC_CmdGoIdleState+0x50>)
  return SDMMC_ERROR_NONE;
 800c49c:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c49e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800c4a0:	b006      	add	sp, #24
 800c4a2:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800c4a4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800c4a8:	e7fa      	b.n	800c4a0 <SDMMC_CmdGoIdleState+0x40>
 800c4aa:	bf00      	nop
 800c4ac:	24000000 	.word	0x24000000
 800c4b0:	002000c5 	.word	0x002000c5

0800c4b4 <SDMMC_CmdOperCond>:
{
 800c4b4:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c4b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
{
 800c4ba:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c4bc:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4be:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 800c4c2:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c4c4:	e9cd 1301 	strd	r1, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4c8:	2300      	movs	r3, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4ca:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4cc:	e9cd c303 	strd	ip, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4d4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4d6:	f7ff fed7 	bl	800c288 <SDMMC_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4da:	4b15      	ldr	r3, [pc, #84]	; (800c530 <SDMMC_CmdOperCond+0x7c>)
 800c4dc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c4e6:	f241 3388 	movw	r3, #5000	; 0x1388
 800c4ea:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800c4ec:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c4f0:	d31a      	bcc.n	800c528 <SDMMC_CmdOperCond+0x74>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800c4f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c4f4:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c4f8:	d0f8      	beq.n	800c4ec <SDMMC_CmdOperCond+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4fa:	0492      	lsls	r2, r2, #18
 800c4fc:	d4f6      	bmi.n	800c4ec <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c500:	075b      	lsls	r3, r3, #29
 800c502:	d503      	bpl.n	800c50c <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c504:	2004      	movs	r0, #4
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c506:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800c508:	b006      	add	sp, #24
 800c50a:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c50c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c50e:	f012 0201 	ands.w	r2, r2, #1
 800c512:	d001      	beq.n	800c518 <SDMMC_CmdOperCond+0x64>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c514:	2001      	movs	r0, #1
 800c516:	e7f6      	b.n	800c506 <SDMMC_CmdOperCond+0x52>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c518:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800c51a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800c51e:	d0f3      	beq.n	800c508 <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c520:	2340      	movs	r3, #64	; 0x40
  }

  return SDMMC_ERROR_NONE;
 800c522:	4610      	mov	r0, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c524:	63a3      	str	r3, [r4, #56]	; 0x38
 800c526:	e7ef      	b.n	800c508 <SDMMC_CmdOperCond+0x54>
      return SDMMC_ERROR_TIMEOUT;
 800c528:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c52c:	e7ec      	b.n	800c508 <SDMMC_CmdOperCond+0x54>
 800c52e:	bf00      	nop
 800c530:	24000000 	.word	0x24000000

0800c534 <SDMMC_CmdAppCommand>:
{
 800c534:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c536:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c53a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c53c:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c53e:	2200      	movs	r2, #0
{
 800c540:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c542:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c544:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c546:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c54a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c54e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c552:	f7ff fe99 	bl	800c288 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c556:	f241 3288 	movw	r2, #5000	; 0x1388
 800c55a:	4621      	mov	r1, r4
 800c55c:	4628      	mov	r0, r5
 800c55e:	f7ff fdd5 	bl	800c10c <SDMMC_GetCmdResp1>
}
 800c562:	b007      	add	sp, #28
 800c564:	bd30      	pop	{r4, r5, pc}

0800c566 <SDMMC_CmdAppOperCommand>:
{
 800c566:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c568:	2229      	movs	r2, #41	; 0x29
{
 800c56a:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c56c:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c570:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800c572:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c574:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c576:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c57a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c57e:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c582:	a901      	add	r1, sp, #4
 800c584:	f7ff fe80 	bl	800c288 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c588:	4620      	mov	r0, r4
 800c58a:	f7ff fd9b 	bl	800c0c4 <SDMMC_GetCmdResp3>
}
 800c58e:	b006      	add	sp, #24
 800c590:	bd10      	pop	{r4, pc}

0800c592 <SDMMC_CmdBusWidth>:
{
 800c592:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c594:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c598:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c59a:	2406      	movs	r4, #6
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c59c:	2200      	movs	r2, #0
{
 800c59e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c5a0:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5a2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5a4:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5b0:	f7ff fe6a 	bl	800c288 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c5b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5b8:	4621      	mov	r1, r4
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	f7ff fda6 	bl	800c10c <SDMMC_GetCmdResp1>
}
 800c5c0:	b007      	add	sp, #28
 800c5c2:	bd30      	pop	{r4, r5, pc}

0800c5c4 <SDMMC_CmdSendSCR>:
{
 800c5c4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c5c6:	2300      	movs	r3, #0
{
 800c5c8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c5ca:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5cc:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800c5d0:	4605      	mov	r5, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5d2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5d4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c5d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5e0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5e2:	f7ff fe51 	bl	800c288 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c5e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	f7ff fd8d 	bl	800c10c <SDMMC_GetCmdResp1>
}
 800c5f2:	b007      	add	sp, #28
 800c5f4:	bd30      	pop	{r4, r5, pc}

0800c5f6 <SDMMC_CmdSendCID>:
{
 800c5f6:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c5f8:	2300      	movs	r3, #0
{
 800c5fa:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c5fc:	2202      	movs	r2, #2
{
 800c5fe:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c600:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c602:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c606:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c60a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c60e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c612:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c614:	f7ff fe38 	bl	800c288 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c618:	4620      	mov	r0, r4
 800c61a:	f7ff fd29 	bl	800c070 <SDMMC_GetCmdResp2>
}
 800c61e:	b006      	add	sp, #24
 800c620:	bd10      	pop	{r4, pc}

0800c622 <SDMMC_CmdSendCSD>:
{
 800c622:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c624:	2209      	movs	r2, #9
{
 800c626:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c628:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 800c62c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800c62e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c630:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c632:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c63a:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c63e:	a901      	add	r1, sp, #4
 800c640:	f7ff fe22 	bl	800c288 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c644:	4620      	mov	r0, r4
 800c646:	f7ff fd13 	bl	800c070 <SDMMC_GetCmdResp2>
}
 800c64a:	b006      	add	sp, #24
 800c64c:	bd10      	pop	{r4, pc}
	...

0800c650 <SDMMC_CmdSetRelAdd>:
{
 800c650:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c652:	2300      	movs	r3, #0
{
 800c654:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c656:	2203      	movs	r2, #3
{
 800c658:	460d      	mov	r5, r1
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c65a:	a901      	add	r1, sp, #4
{
 800c65c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c65e:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c662:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c666:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c66a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c66e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c670:	f7ff fe0a 	bl	800c288 <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c674:	4b1e      	ldr	r3, [pc, #120]	; (800c6f0 <SDMMC_CmdSetRelAdd+0xa0>)
 800c676:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c680:	f241 3388 	movw	r3, #5000	; 0x1388
 800c684:	4353      	muls	r3, r2
    if (count-- == 0U)
 800c686:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c68a:	d328      	bcc.n	800c6de <SDMMC_CmdSetRelAdd+0x8e>
    sta_reg = SDMMCx->STA;
 800c68c:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c68e:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c692:	d0f8      	beq.n	800c686 <SDMMC_CmdSetRelAdd+0x36>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c694:	0492      	lsls	r2, r2, #18
 800c696:	d4f6      	bmi.n	800c686 <SDMMC_CmdSetRelAdd+0x36>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c698:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c69a:	0758      	lsls	r0, r3, #29
 800c69c:	d503      	bpl.n	800c6a6 <SDMMC_CmdSetRelAdd+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c69e:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6a0:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800c6a2:	b007      	add	sp, #28
 800c6a4:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c6a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6a8:	07d9      	lsls	r1, r3, #31
 800c6aa:	d501      	bpl.n	800c6b0 <SDMMC_CmdSetRelAdd+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6ac:	2001      	movs	r0, #1
 800c6ae:	e7f7      	b.n	800c6a0 <SDMMC_CmdSetRelAdd+0x50>
  return (uint8_t)(SDMMCx->RESPCMD);
 800c6b0:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	2b03      	cmp	r3, #3
 800c6b6:	d115      	bne.n	800c6e4 <SDMMC_CmdSetRelAdd+0x94>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6b8:	4b0e      	ldr	r3, [pc, #56]	; (800c6f4 <SDMMC_CmdSetRelAdd+0xa4>)
 800c6ba:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800c6bc:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c6be:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800c6c2:	d102      	bne.n	800c6ca <SDMMC_CmdSetRelAdd+0x7a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c6c4:	0c1b      	lsrs	r3, r3, #16
 800c6c6:	802b      	strh	r3, [r5, #0]
 800c6c8:	e7eb      	b.n	800c6a2 <SDMMC_CmdSetRelAdd+0x52>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c6ca:	045a      	lsls	r2, r3, #17
 800c6cc:	d40c      	bmi.n	800c6e8 <SDMMC_CmdSetRelAdd+0x98>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c6ce:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800c6d2:	bf0c      	ite	eq
 800c6d4:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c6d8:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800c6dc:	e7e1      	b.n	800c6a2 <SDMMC_CmdSetRelAdd+0x52>
      return SDMMC_ERROR_TIMEOUT;
 800c6de:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c6e2:	e7de      	b.n	800c6a2 <SDMMC_CmdSetRelAdd+0x52>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6e4:	2001      	movs	r0, #1
 800c6e6:	e7dc      	b.n	800c6a2 <SDMMC_CmdSetRelAdd+0x52>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c6e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c6ec:	e7d9      	b.n	800c6a2 <SDMMC_CmdSetRelAdd+0x52>
 800c6ee:	bf00      	nop
 800c6f0:	24000000 	.word	0x24000000
 800c6f4:	002000c5 	.word	0x002000c5

0800c6f8 <SDMMC_CmdSendStatus>:
{
 800c6f8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6fa:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c6fe:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c700:	240d      	movs	r4, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c702:	2200      	movs	r2, #0
{
 800c704:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 800c706:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c708:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c70a:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c70e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c712:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c716:	f7ff fdb7 	bl	800c288 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c71a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c71e:	4621      	mov	r1, r4
 800c720:	4628      	mov	r0, r5
 800c722:	f7ff fcf3 	bl	800c10c <SDMMC_GetCmdResp1>
}
 800c726:	b007      	add	sp, #28
 800c728:	bd30      	pop	{r4, r5, pc}

0800c72a <SDMMC_CmdStatusRegister>:
{
 800c72a:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c72c:	2300      	movs	r3, #0
{
 800c72e:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c730:	240d      	movs	r4, #13
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c732:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800c736:	4605      	mov	r5, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c738:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c73a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c73e:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c746:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c748:	f7ff fd9e 	bl	800c288 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c750:	4621      	mov	r1, r4
 800c752:	4628      	mov	r0, r5
 800c754:	f7ff fcda 	bl	800c10c <SDMMC_GetCmdResp1>
}
 800c758:	b007      	add	sp, #28
 800c75a:	bd30      	pop	{r4, r5, pc}

0800c75c <SDMMC_CmdVoltageSwitch>:
{
 800c75c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800c75e:	2300      	movs	r3, #0
{
 800c760:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800c762:	240b      	movs	r4, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c764:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800c768:	4605      	mov	r5, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c76a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c76c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800c770:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c778:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c77a:	f7ff fd85 	bl	800c288 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800c77e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c782:	4621      	mov	r1, r4
 800c784:	4628      	mov	r0, r5
 800c786:	f7ff fcc1 	bl	800c10c <SDMMC_GetCmdResp1>
}
 800c78a:	b007      	add	sp, #28
 800c78c:	bd30      	pop	{r4, r5, pc}
	...

0800c790 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c790:	4b0a      	ldr	r3, [pc, #40]	; (800c7bc <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c792:	3b01      	subs	r3, #1
 800c794:	d00f      	beq.n	800c7b6 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c796:	6902      	ldr	r2, [r0, #16]
 800c798:	2a00      	cmp	r2, #0
 800c79a:	dafa      	bge.n	800c792 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c79c:	6903      	ldr	r3, [r0, #16]
 800c79e:	4a07      	ldr	r2, [pc, #28]	; (800c7bc <USB_CoreReset+0x2c>)
 800c7a0:	f043 0301 	orr.w	r3, r3, #1
 800c7a4:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800c7a6:	3a01      	subs	r2, #1
 800c7a8:	d005      	beq.n	800c7b6 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c7aa:	6903      	ldr	r3, [r0, #16]
 800c7ac:	f013 0301 	ands.w	r3, r3, #1
 800c7b0:	d1f9      	bne.n	800c7a6 <USB_CoreReset+0x16>

  return HAL_OK;
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	4770      	bx	lr
      return HAL_TIMEOUT;
 800c7b6:	2003      	movs	r0, #3
}
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop
 800c7bc:	00030d41 	.word	0x00030d41

0800c7c0 <USB_CoreInit>:
{
 800c7c0:	b084      	sub	sp, #16
 800c7c2:	b538      	push	{r3, r4, r5, lr}
 800c7c4:	ad05      	add	r5, sp, #20
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c7cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d126      	bne.n	800c820 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c7d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c7d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7d8:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c7da:	68c3      	ldr	r3, [r0, #12]
 800c7dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c7e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7e4:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c7e6:	68c3      	ldr	r3, [r0, #12]
 800c7e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c7ec:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800c7ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d103      	bne.n	800c7fc <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c7f4:	68c3      	ldr	r3, [r0, #12]
 800c7f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7fa:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f7ff ffc7 	bl	800c790 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800c802:	9b08      	ldr	r3, [sp, #32]
 800c804:	2b01      	cmp	r3, #1
 800c806:	d107      	bne.n	800c818 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c808:	68a3      	ldr	r3, [r4, #8]
 800c80a:	f043 0306 	orr.w	r3, r3, #6
 800c80e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c810:	68a3      	ldr	r3, [r4, #8]
 800c812:	f043 0320 	orr.w	r3, r3, #32
 800c816:	60a3      	str	r3, [r4, #8]
}
 800c818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c81c:	b004      	add	sp, #16
 800c81e:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c820:	68c3      	ldr	r3, [r0, #12]
 800c822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c826:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800c828:	f7ff ffb2 	bl	800c790 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800c82c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c82e:	b923      	cbnz	r3, 800c83a <USB_CoreInit+0x7a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c830:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c836:	63a3      	str	r3, [r4, #56]	; 0x38
 800c838:	e7e3      	b.n	800c802 <USB_CoreInit+0x42>
 800c83a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c83c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c840:	e7f9      	b.n	800c836 <USB_CoreInit+0x76>
	...

0800c844 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800c844:	2a02      	cmp	r2, #2
 800c846:	d158      	bne.n	800c8fa <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c848:	4b2e      	ldr	r3, [pc, #184]	; (800c904 <USB_SetTurnaroundTime+0xc0>)
 800c84a:	4a2f      	ldr	r2, [pc, #188]	; (800c908 <USB_SetTurnaroundTime+0xc4>)
 800c84c:	440b      	add	r3, r1
 800c84e:	4293      	cmp	r3, r2
 800c850:	d947      	bls.n	800c8e2 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c852:	4b2e      	ldr	r3, [pc, #184]	; (800c90c <USB_SetTurnaroundTime+0xc8>)
 800c854:	4a2e      	ldr	r2, [pc, #184]	; (800c910 <USB_SetTurnaroundTime+0xcc>)
 800c856:	440b      	add	r3, r1
 800c858:	4293      	cmp	r3, r2
 800c85a:	d944      	bls.n	800c8e6 <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c85c:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800c860:	4a2c      	ldr	r2, [pc, #176]	; (800c914 <USB_SetTurnaroundTime+0xd0>)
 800c862:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800c866:	4293      	cmp	r3, r2
 800c868:	d93f      	bls.n	800c8ea <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c86a:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800c86e:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 800c872:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800c876:	32a0      	adds	r2, #160	; 0xa0
 800c878:	4293      	cmp	r3, r2
 800c87a:	d938      	bls.n	800c8ee <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c87c:	4b26      	ldr	r3, [pc, #152]	; (800c918 <USB_SetTurnaroundTime+0xd4>)
 800c87e:	4a27      	ldr	r2, [pc, #156]	; (800c91c <USB_SetTurnaroundTime+0xd8>)
 800c880:	440b      	add	r3, r1
 800c882:	4293      	cmp	r3, r2
 800c884:	d935      	bls.n	800c8f2 <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c886:	4b26      	ldr	r3, [pc, #152]	; (800c920 <USB_SetTurnaroundTime+0xdc>)
 800c888:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 800c88c:	440b      	add	r3, r1
 800c88e:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800c892:	4293      	cmp	r3, r2
 800c894:	d92f      	bls.n	800c8f6 <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c896:	4b23      	ldr	r3, [pc, #140]	; (800c924 <USB_SetTurnaroundTime+0xe0>)
 800c898:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 800c89c:	440b      	add	r3, r1
 800c89e:	f502 7220 	add.w	r2, r2, #640	; 0x280
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d929      	bls.n	800c8fa <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c8a6:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800c8aa:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 800c8ae:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 800c8b2:	f502 7258 	add.w	r2, r2, #864	; 0x360
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d921      	bls.n	800c8fe <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c8ba:	4b1b      	ldr	r3, [pc, #108]	; (800c928 <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 800c8bc:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c8c0:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 800c8c2:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	bf94      	ite	ls
 800c8ca:	2307      	movls	r3, #7
 800c8cc:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c8ce:	68c2      	ldr	r2, [r0, #12]
 800c8d0:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800c8d4:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c8d6:	68c2      	ldr	r2, [r0, #12]
 800c8d8:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 800c8dc:	60c3      	str	r3, [r0, #12]
}
 800c8de:	2000      	movs	r0, #0
 800c8e0:	4770      	bx	lr
      UsbTrd = 0xFU;
 800c8e2:	230f      	movs	r3, #15
 800c8e4:	e7f3      	b.n	800c8ce <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 800c8e6:	230e      	movs	r3, #14
 800c8e8:	e7f1      	b.n	800c8ce <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 800c8ea:	230d      	movs	r3, #13
 800c8ec:	e7ef      	b.n	800c8ce <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 800c8ee:	230c      	movs	r3, #12
 800c8f0:	e7ed      	b.n	800c8ce <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 800c8f2:	230b      	movs	r3, #11
 800c8f4:	e7eb      	b.n	800c8ce <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 800c8f6:	230a      	movs	r3, #10
 800c8f8:	e7e9      	b.n	800c8ce <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c8fa:	2309      	movs	r3, #9
 800c8fc:	e7e7      	b.n	800c8ce <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 800c8fe:	2308      	movs	r3, #8
 800c900:	e7e5      	b.n	800c8ce <USB_SetTurnaroundTime+0x8a>
 800c902:	bf00      	nop
 800c904:	ff275340 	.word	0xff275340
 800c908:	000c34ff 	.word	0x000c34ff
 800c90c:	ff1b1e40 	.word	0xff1b1e40
 800c910:	000f423f 	.word	0x000f423f
 800c914:	00124f7f 	.word	0x00124f7f
 800c918:	fee5b660 	.word	0xfee5b660
 800c91c:	0016e35f 	.word	0x0016e35f
 800c920:	feced300 	.word	0xfeced300
 800c924:	feb35bc0 	.word	0xfeb35bc0
 800c928:	fe5954e0 	.word	0xfe5954e0

0800c92c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c92c:	6883      	ldr	r3, [r0, #8]
 800c92e:	f043 0301 	orr.w	r3, r3, #1
 800c932:	6083      	str	r3, [r0, #8]
}
 800c934:	2000      	movs	r0, #0
 800c936:	4770      	bx	lr

0800c938 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c938:	6883      	ldr	r3, [r0, #8]
 800c93a:	f023 0301 	bic.w	r3, r3, #1
 800c93e:	6083      	str	r3, [r0, #8]
}
 800c940:	2000      	movs	r0, #0
 800c942:	4770      	bx	lr

0800c944 <USB_SetCurrentMode>:
{
 800c944:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c946:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800c948:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c94a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c94e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800c950:	d108      	bne.n	800c964 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c952:	68c3      	ldr	r3, [r0, #12]
 800c954:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c958:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800c95a:	2032      	movs	r0, #50	; 0x32
 800c95c:	f7f8 fe14 	bl	8005588 <HAL_Delay>
  return HAL_OK;
 800c960:	2000      	movs	r0, #0
}
 800c962:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800c964:	b919      	cbnz	r1, 800c96e <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c966:	68c3      	ldr	r3, [r0, #12]
 800c968:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c96c:	e7f4      	b.n	800c958 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800c96e:	2001      	movs	r0, #1
 800c970:	e7f7      	b.n	800c962 <USB_SetCurrentMode+0x1e>
	...

0800c974 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c974:	0189      	lsls	r1, r1, #6
 800c976:	4a07      	ldr	r2, [pc, #28]	; (800c994 <USB_FlushTxFifo+0x20>)
 800c978:	f041 0120 	orr.w	r1, r1, #32
 800c97c:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800c97e:	3a01      	subs	r2, #1
 800c980:	d005      	beq.n	800c98e <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c982:	6903      	ldr	r3, [r0, #16]
 800c984:	f013 0320 	ands.w	r3, r3, #32
 800c988:	d1f9      	bne.n	800c97e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800c98a:	4618      	mov	r0, r3
 800c98c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800c98e:	2003      	movs	r0, #3
}
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	00030d41 	.word	0x00030d41

0800c998 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c998:	2310      	movs	r3, #16
 800c99a:	4a06      	ldr	r2, [pc, #24]	; (800c9b4 <USB_FlushRxFifo+0x1c>)
 800c99c:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800c99e:	3a01      	subs	r2, #1
 800c9a0:	d005      	beq.n	800c9ae <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c9a2:	6903      	ldr	r3, [r0, #16]
 800c9a4:	f013 0310 	ands.w	r3, r3, #16
 800c9a8:	d1f9      	bne.n	800c99e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	4770      	bx	lr
      return HAL_TIMEOUT;
 800c9ae:	2003      	movs	r0, #3
}
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	00030d41 	.word	0x00030d41

0800c9b8 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800c9b8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800c9bc:	4319      	orrs	r1, r3
 800c9be:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800c9c2:	2000      	movs	r0, #0
 800c9c4:	4770      	bx	lr
	...

0800c9c8 <USB_DevInit>:
{
 800c9c8:	b084      	sub	sp, #16
 800c9ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	a809      	add	r0, sp, #36	; 0x24
 800c9d2:	460f      	mov	r7, r1
 800c9d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800c9d8:	2300      	movs	r3, #0
 800c9da:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 800c9dc:	4619      	mov	r1, r3
 800c9de:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 800c9e2:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 800c9e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800c9e8:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800c9ea:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800c9ec:	d1f7      	bne.n	800c9de <USB_DevInit+0x16>
 800c9ee:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 800c9f2:	2d00      	cmp	r5, #0
 800c9f4:	d16c      	bne.n	800cad0 <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c9f6:	6873      	ldr	r3, [r6, #4]
 800c9f8:	f043 0302 	orr.w	r3, r3, #2
 800c9fc:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c9fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ca00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ca04:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca0c:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ca0e:	6823      	ldr	r3, [r4, #0]
 800ca10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca14:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800ca16:	2300      	movs	r3, #0
 800ca18:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ca1c:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800ca20:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ca24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d159      	bne.n	800cade <USB_DevInit+0x116>
    if (cfg.speed == USBD_HS_SPEED)
 800ca2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca2c:	2900      	cmp	r1, #0
 800ca2e:	d154      	bne.n	800cada <USB_DevInit+0x112>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ca30:	4620      	mov	r0, r4
 800ca32:	f7ff ffc1 	bl	800c9b8 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ca36:	2110      	movs	r1, #16
 800ca38:	4620      	mov	r0, r4
 800ca3a:	f7ff ff9b 	bl	800c974 <USB_FlushTxFifo>
 800ca3e:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ca40:	4620      	mov	r0, r4
 800ca42:	f7ff ffa9 	bl	800c998 <USB_FlushRxFifo>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d14b      	bne.n	800cae2 <USB_DevInit+0x11a>
  HAL_StatusTypeDef ret = HAL_OK;
 800ca4a:	1c08      	adds	r0, r1, #0
 800ca4c:	bf18      	it	ne
 800ca4e:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800ca50:	2300      	movs	r3, #0
 800ca52:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ca56:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ca5a:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800ca5e:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ca60:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 800ca64:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ca66:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ca68:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca6a:	42bb      	cmp	r3, r7
 800ca6c:	d13b      	bne.n	800cae6 <USB_DevInit+0x11e>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca6e:	2100      	movs	r1, #0
 800ca70:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ca74:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ca78:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ca7c:	460f      	mov	r7, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ca7e:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca82:	428b      	cmp	r3, r1
 800ca84:	d142      	bne.n	800cb0c <USB_DevInit+0x144>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ca86:	6933      	ldr	r3, [r6, #16]
 800ca88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca8c:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ca92:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800ca96:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800ca98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca9a:	b91b      	cbnz	r3, 800caa4 <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ca9c:	69a3      	ldr	r3, [r4, #24]
 800ca9e:	f043 0310 	orr.w	r3, r3, #16
 800caa2:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800caa4:	69a2      	ldr	r2, [r4, #24]
 800caa6:	4b23      	ldr	r3, [pc, #140]	; (800cb34 <USB_DevInit+0x16c>)
 800caa8:	4313      	orrs	r3, r2
 800caaa:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800caac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800caae:	b11b      	cbz	r3, 800cab8 <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cab0:	69a3      	ldr	r3, [r4, #24]
 800cab2:	f043 0308 	orr.w	r3, r3, #8
 800cab6:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800cab8:	2d01      	cmp	r5, #1
 800caba:	d105      	bne.n	800cac8 <USB_DevInit+0x100>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cabc:	69a3      	ldr	r3, [r4, #24]
 800cabe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cac2:	f043 0304 	orr.w	r3, r3, #4
 800cac6:	61a3      	str	r3, [r4, #24]
}
 800cac8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cacc:	b004      	add	sp, #16
 800cace:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cad0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cad2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cad6:	63a3      	str	r3, [r4, #56]	; 0x38
 800cad8:	e79d      	b.n	800ca16 <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cada:	4619      	mov	r1, r3
 800cadc:	e7a8      	b.n	800ca30 <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cade:	2103      	movs	r1, #3
 800cae0:	e7a6      	b.n	800ca30 <USB_DevInit+0x68>
    ret = HAL_ERROR;
 800cae2:	2001      	movs	r0, #1
 800cae4:	e7b4      	b.n	800ca50 <USB_DevInit+0x88>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cae6:	f8d2 9000 	ldr.w	r9, [r2]
 800caea:	f1b9 0f00 	cmp.w	r9, #0
 800caee:	da0b      	bge.n	800cb08 <USB_DevInit+0x140>
      if (i == 0U)
 800caf0:	b93b      	cbnz	r3, 800cb02 <USB_DevInit+0x13a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800caf2:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800caf6:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800caf8:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cafa:	f8c2 8008 	str.w	r8, [r2, #8]
 800cafe:	3220      	adds	r2, #32
 800cb00:	e7b3      	b.n	800ca6a <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cb02:	f8c2 c000 	str.w	ip, [r2]
 800cb06:	e7f6      	b.n	800caf6 <USB_DevInit+0x12e>
      USBx_INEP(i)->DIEPCTL = 0U;
 800cb08:	6011      	str	r1, [r2, #0]
 800cb0a:	e7f4      	b.n	800caf6 <USB_DevInit+0x12e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb0c:	f8d2 9000 	ldr.w	r9, [r2]
 800cb10:	f1b9 0f00 	cmp.w	r9, #0
 800cb14:	da0b      	bge.n	800cb2e <USB_DevInit+0x166>
      if (i == 0U)
 800cb16:	b939      	cbnz	r1, 800cb28 <USB_DevInit+0x160>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cb18:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cb1c:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb1e:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cb20:	f8c2 8008 	str.w	r8, [r2, #8]
 800cb24:	3220      	adds	r2, #32
 800cb26:	e7ac      	b.n	800ca82 <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cb28:	f8c2 c000 	str.w	ip, [r2]
 800cb2c:	e7f6      	b.n	800cb1c <USB_DevInit+0x154>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cb2e:	6017      	str	r7, [r2, #0]
 800cb30:	e7f4      	b.n	800cb1c <USB_DevInit+0x154>
 800cb32:	bf00      	nop
 800cb34:	803c3800 	.word	0x803c3800

0800cb38 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cb38:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cb3c:	f013 0006 	ands.w	r0, r3, #6
 800cb40:	d004      	beq.n	800cb4c <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cb42:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 800cb46:	bf14      	ite	ne
 800cb48:	2002      	movne	r0, #2
 800cb4a:	200f      	moveq	r0, #15
}
 800cb4c:	4770      	bx	lr

0800cb4e <USB_ActivateEndpoint>:
{
 800cb4e:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800cb50:	780d      	ldrb	r5, [r1, #0]
 800cb52:	2401      	movs	r4, #1
 800cb54:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800cb58:	f005 030f 	and.w	r3, r5, #15
 800cb5c:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 800cb60:	409c      	lsls	r4, r3
  if (ep->is_in == 1U)
 800cb62:	784b      	ldrb	r3, [r1, #1]
 800cb64:	2b01      	cmp	r3, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cb66:	69d3      	ldr	r3, [r2, #28]
  if (ep->is_in == 1U)
 800cb68:	d118      	bne.n	800cb9c <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cb6a:	431c      	orrs	r4, r3
 800cb6c:	61d4      	str	r4, [r2, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cb6e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800cb72:	041a      	lsls	r2, r3, #16
 800cb74:	d410      	bmi.n	800cb98 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb76:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cb78:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb7e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800cb82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb8a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800cb8e:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 800cb92:	4313      	orrs	r3, r2
 800cb94:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800cb98:	2000      	movs	r0, #0
 800cb9a:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cb9c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800cba0:	61d4      	str	r4, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cba2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800cba6:	041b      	lsls	r3, r3, #16
 800cba8:	d4f6      	bmi.n	800cb98 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cbaa:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 800cbac:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cbae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cbb2:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800cbb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbbe:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800cbc8:	e7e6      	b.n	800cb98 <USB_ActivateEndpoint+0x4a>
	...

0800cbcc <USB_DeactivateEndpoint>:
{
 800cbcc:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800cbce:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800cbd0:	7849      	ldrb	r1, [r1, #1]
 800cbd2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 800cbd6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800cbda:	2901      	cmp	r1, #1
 800cbdc:	f002 010f 	and.w	r1, r2, #15
 800cbe0:	d120      	bne.n	800cc24 <USB_DeactivateEndpoint+0x58>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cbe2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800cbe6:	2a00      	cmp	r2, #0
 800cbe8:	da0b      	bge.n	800cc02 <USB_DeactivateEndpoint+0x36>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cbea:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800cbee:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800cbf2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cbf6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800cbfa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800cbfe:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cc02:	2201      	movs	r2, #1
 800cc04:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800cc06:	408a      	lsls	r2, r1
 800cc08:	43d2      	mvns	r2, r2
 800cc0a:	4014      	ands	r4, r2
 800cc0c:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cc0e:	69c1      	ldr	r1, [r0, #28]
 800cc10:	400a      	ands	r2, r1
 800cc12:	61c2      	str	r2, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cc14:	4a14      	ldr	r2, [pc, #80]	; (800cc68 <USB_DeactivateEndpoint+0x9c>)
 800cc16:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800cc1a:	400a      	ands	r2, r1
 800cc1c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 800cc20:	2000      	movs	r0, #0
 800cc22:	bd10      	pop	{r4, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc24:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800cc28:	2a00      	cmp	r2, #0
 800cc2a:	da0b      	bge.n	800cc44 <USB_DeactivateEndpoint+0x78>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cc2c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800cc30:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800cc34:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cc38:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800cc3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800cc40:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cc44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cc48:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800cc4a:	408a      	lsls	r2, r1
 800cc4c:	43d2      	mvns	r2, r2
 800cc4e:	4014      	ands	r4, r2
 800cc50:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cc52:	69c1      	ldr	r1, [r0, #28]
 800cc54:	400a      	ands	r2, r1
 800cc56:	61c2      	str	r2, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cc58:	4a04      	ldr	r2, [pc, #16]	; (800cc6c <USB_DeactivateEndpoint+0xa0>)
 800cc5a:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800cc5e:	400a      	ands	r2, r1
 800cc60:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800cc64:	e7dc      	b.n	800cc20 <USB_DeactivateEndpoint+0x54>
 800cc66:	bf00      	nop
 800cc68:	ec337800 	.word	0xec337800
 800cc6c:	eff37800 	.word	0xeff37800

0800cc70 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 800cc70:	784b      	ldrb	r3, [r1, #1]
{
 800cc72:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	780c      	ldrb	r4, [r1, #0]
 800cc78:	694d      	ldr	r5, [r1, #20]
 800cc7a:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800cc7e:	4e34      	ldr	r6, [pc, #208]	; (800cd50 <USB_EP0StartXfer+0xe0>)
 800cc80:	4f34      	ldr	r7, [pc, #208]	; (800cd54 <USB_EP0StartXfer+0xe4>)
 800cc82:	d144      	bne.n	800cd0e <USB_EP0StartXfer+0x9e>
 800cc84:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800cc88:	b9b5      	cbnz	r5, 800ccb8 <USB_EP0StartXfer+0x48>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cc8a:	691d      	ldr	r5, [r3, #16]
 800cc8c:	402e      	ands	r6, r5
 800cc8e:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cc90:	691d      	ldr	r5, [r3, #16]
 800cc92:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800cc96:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cc98:	691d      	ldr	r5, [r3, #16]
 800cc9a:	402f      	ands	r7, r5
 800cc9c:	611f      	str	r7, [r3, #16]
    if (dma == 1U)
 800cc9e:	2a01      	cmp	r2, #1
 800cca0:	d121      	bne.n	800cce6 <USB_EP0StartXfer+0x76>
      if ((uint32_t)ep->dma_addr != 0U)
 800cca2:	690a      	ldr	r2, [r1, #16]
 800cca4:	b102      	cbz	r2, 800cca8 <USB_EP0StartXfer+0x38>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cca6:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cca8:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800ccac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ccb0:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ccb8:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800ccbc:	ea0c 0707 	and.w	r7, ip, r7
 800ccc0:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ccc2:	691f      	ldr	r7, [r3, #16]
 800ccc4:	403e      	ands	r6, r7
 800ccc6:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800ccc8:	688e      	ldr	r6, [r1, #8]
 800ccca:	42ae      	cmp	r6, r5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cccc:	691d      	ldr	r5, [r3, #16]
 800ccce:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 800ccd2:	bf38      	it	cc
 800ccd4:	614e      	strcc	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ccd6:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ccd8:	694d      	ldr	r5, [r1, #20]
 800ccda:	691e      	ldr	r6, [r3, #16]
 800ccdc:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800cce0:	4335      	orrs	r5, r6
 800cce2:	611d      	str	r5, [r3, #16]
 800cce4:	e7db      	b.n	800cc9e <USB_EP0StartXfer+0x2e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cce6:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800ccea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ccee:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800ccf2:	694b      	ldr	r3, [r1, #20]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d0dd      	beq.n	800ccb4 <USB_EP0StartXfer+0x44>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ccf8:	780b      	ldrb	r3, [r1, #0]
 800ccfa:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800ccfe:	f003 020f 	and.w	r2, r3, #15
 800cd02:	2301      	movs	r3, #1
 800cd04:	4093      	lsls	r3, r2
 800cd06:	4323      	orrs	r3, r4
 800cd08:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800cd0c:	e7d2      	b.n	800ccb4 <USB_EP0StartXfer+0x44>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cd0e:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800cd12:	6918      	ldr	r0, [r3, #16]
 800cd14:	4038      	ands	r0, r7
 800cd16:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cd18:	6918      	ldr	r0, [r3, #16]
 800cd1a:	4030      	ands	r0, r6
 800cd1c:	6118      	str	r0, [r3, #16]
 800cd1e:	6888      	ldr	r0, [r1, #8]
    if (ep->xfer_len > 0U)
 800cd20:	b105      	cbz	r5, 800cd24 <USB_EP0StartXfer+0xb4>
      ep->xfer_len = ep->maxpacket;
 800cd22:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cd24:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800cd26:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 800cd2a:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cd2c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800cd30:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800cd32:	691d      	ldr	r5, [r3, #16]
 800cd34:	ea40 0005 	orr.w	r0, r0, r5
 800cd38:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800cd3a:	d102      	bne.n	800cd42 <USB_EP0StartXfer+0xd2>
      if ((uint32_t)ep->xfer_buff != 0U)
 800cd3c:	68ca      	ldr	r2, [r1, #12]
 800cd3e:	b102      	cbz	r2, 800cd42 <USB_EP0StartXfer+0xd2>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cd40:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cd42:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800cd46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd4a:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800cd4e:	e7b1      	b.n	800ccb4 <USB_EP0StartXfer+0x44>
 800cd50:	e007ffff 	.word	0xe007ffff
 800cd54:	fff80000 	.word	0xfff80000

0800cd58 <USB_WritePacket>:
{
 800cd58:	b510      	push	{r4, lr}
 800cd5a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800cd5e:	b94c      	cbnz	r4, 800cd74 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 800cd60:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cd62:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    count32b = ((uint32_t)len + 3U) / 4U;
 800cd66:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cd68:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800cd6c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 800cd70:	4299      	cmp	r1, r3
 800cd72:	d101      	bne.n	800cd78 <USB_WritePacket+0x20>
}
 800cd74:	2000      	movs	r0, #0
 800cd76:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cd78:	f851 2b04 	ldr.w	r2, [r1], #4
 800cd7c:	6002      	str	r2, [r0, #0]
 800cd7e:	e7f7      	b.n	800cd70 <USB_WritePacket+0x18>

0800cd80 <USB_EPStartXfer>:
{
 800cd80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800cd82:	784d      	ldrb	r5, [r1, #1]
 800cd84:	780c      	ldrb	r4, [r1, #0]
 800cd86:	2d01      	cmp	r5, #1
 800cd88:	694b      	ldr	r3, [r1, #20]
 800cd8a:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800cd8e:	78ce      	ldrb	r6, [r1, #3]
 800cd90:	f8df c194 	ldr.w	ip, [pc, #404]	; 800cf28 <USB_EPStartXfer+0x1a8>
 800cd94:	f8df e194 	ldr.w	lr, [pc, #404]	; 800cf2c <USB_EPStartXfer+0x1ac>
 800cd98:	d17d      	bne.n	800ce96 <USB_EPStartXfer+0x116>
 800cd9a:	f504 6510 	add.w	r5, r4, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cd9e:	692f      	ldr	r7, [r5, #16]
    if (ep->xfer_len == 0U)
 800cda0:	bb3b      	cbnz	r3, 800cdf2 <USB_EPStartXfer+0x72>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cda2:	ea07 070c 	and.w	r7, r7, ip
 800cda6:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cda8:	692f      	ldr	r7, [r5, #16]
 800cdaa:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800cdae:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cdb0:	692f      	ldr	r7, [r5, #16]
 800cdb2:	ea07 070e 	and.w	r7, r7, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cdb6:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 800cdb8:	2a01      	cmp	r2, #1
 800cdba:	d142      	bne.n	800ce42 <USB_EPStartXfer+0xc2>
      if ((uint32_t)ep->dma_addr != 0U)
 800cdbc:	690b      	ldr	r3, [r1, #16]
 800cdbe:	b103      	cbz	r3, 800cdc2 <USB_EPStartXfer+0x42>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cdc0:	616b      	str	r3, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 800cdc2:	2e01      	cmp	r6, #1
 800cdc4:	d10c      	bne.n	800cde0 <USB_EPStartXfer+0x60>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cdc6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800cdca:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cdce:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800cdd2:	bf0c      	ite	eq
 800cdd4:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cdd8:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800cddc:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cde0:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800cde4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cde8:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800cdec:	2000      	movs	r0, #0
 800cdee:	b003      	add	sp, #12
 800cdf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cdf2:	ea07 070e 	and.w	r7, r7, lr
      if (ep->type == EP_TYPE_ISOC)
 800cdf6:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cdf8:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cdfa:	692f      	ldr	r7, [r5, #16]
 800cdfc:	ea07 070c 	and.w	r7, r7, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ce00:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ce04:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ce06:	eb0c 0703 	add.w	r7, ip, r3
 800ce0a:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800ce0e:	f107 37ff 	add.w	r7, r7, #4294967295
 800ce12:	fbb7 fcfc 	udiv	ip, r7, ip
 800ce16:	4f43      	ldr	r7, [pc, #268]	; (800cf24 <USB_EPStartXfer+0x1a4>)
 800ce18:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 800ce1c:	ea47 070e 	orr.w	r7, r7, lr
 800ce20:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ce22:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800ce26:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800ce2a:	ea47 070c 	orr.w	r7, r7, ip
 800ce2e:	612f      	str	r7, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800ce30:	d1c2      	bne.n	800cdb8 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ce32:	692f      	ldr	r7, [r5, #16]
 800ce34:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 800ce38:	612f      	str	r7, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ce3a:	692f      	ldr	r7, [r5, #16]
 800ce3c:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800ce40:	e7b9      	b.n	800cdb6 <USB_EPStartXfer+0x36>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ce42:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800ce46:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ce48:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800ce4c:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800ce50:	d00c      	beq.n	800ce6c <USB_EPStartXfer+0xec>
        if (ep->xfer_len > 0U)
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d0ca      	beq.n	800cdec <USB_EPStartXfer+0x6c>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ce56:	780b      	ldrb	r3, [r1, #0]
 800ce58:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800ce5c:	f003 020f 	and.w	r2, r3, #15
 800ce60:	2301      	movs	r3, #1
 800ce62:	4093      	lsls	r3, r2
 800ce64:	4323      	orrs	r3, r4
 800ce66:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800ce6a:	e7bf      	b.n	800cdec <USB_EPStartXfer+0x6c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ce6c:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ce70:	b29b      	uxth	r3, r3
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ce72:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ce76:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 800ce7a:	bf0c      	ite	eq
 800ce7c:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ce80:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 800ce84:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ce88:	780c      	ldrb	r4, [r1, #0]
 800ce8a:	9200      	str	r2, [sp, #0]
 800ce8c:	4622      	mov	r2, r4
 800ce8e:	68c9      	ldr	r1, [r1, #12]
 800ce90:	f7ff ff62 	bl	800cd58 <USB_WritePacket>
 800ce94:	e7aa      	b.n	800cdec <USB_EPStartXfer+0x6c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ce96:	f504 6730 	add.w	r7, r4, #2816	; 0xb00
 800ce9a:	693d      	ldr	r5, [r7, #16]
 800ce9c:	ea05 050e 	and.w	r5, r5, lr
 800cea0:	613d      	str	r5, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cea2:	693d      	ldr	r5, [r7, #16]
 800cea4:	ea05 050c 	and.w	r5, r5, ip
 800cea8:	613d      	str	r5, [r7, #16]
 800ceaa:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 800ceac:	bb1b      	cbnz	r3, 800cef6 <USB_EPStartXfer+0x176>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800ceb4:	431d      	orrs	r5, r3
 800ceb6:	613d      	str	r5, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (dma == 1U)
 800cebe:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800cec0:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 800cec2:	d102      	bne.n	800ceca <USB_EPStartXfer+0x14a>
      if ((uint32_t)ep->xfer_buff != 0U)
 800cec4:	68cb      	ldr	r3, [r1, #12]
 800cec6:	b103      	cbz	r3, 800ceca <USB_EPStartXfer+0x14a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cec8:	617b      	str	r3, [r7, #20]
    if (ep->type == EP_TYPE_ISOC)
 800ceca:	2e01      	cmp	r6, #1
 800cecc:	d10c      	bne.n	800cee8 <USB_EPStartXfer+0x168>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cece:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800ced2:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ced6:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800ceda:	bf0c      	ite	eq
 800cedc:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cee0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800cee4:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cee8:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800ceec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cef0:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800cef4:	e77a      	b.n	800cdec <USB_EPStartXfer+0x6c>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cef6:	442b      	add	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cef8:	f8df c028 	ldr.w	ip, [pc, #40]	; 800cf24 <USB_EPStartXfer+0x1a4>
 800cefc:	f8d7 e010 	ldr.w	lr, [r7, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cf00:	3b01      	subs	r3, #1
 800cf02:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cf06:	ea0c 4cc3 	and.w	ip, ip, r3, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800cf0a:	b29b      	uxth	r3, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cf0c:	ea4c 0c0e 	orr.w	ip, ip, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800cf10:	436b      	muls	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cf12:	f8c7 c010 	str.w	ip, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800cf16:	f8d7 c010 	ldr.w	ip, [r7, #16]
 800cf1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf1e:	ea43 030c 	orr.w	r3, r3, ip
 800cf22:	e7cc      	b.n	800cebe <USB_EPStartXfer+0x13e>
 800cf24:	1ff80000 	.word	0x1ff80000
 800cf28:	e007ffff 	.word	0xe007ffff
 800cf2c:	fff80000 	.word	0xfff80000

0800cf30 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800cf30:	3203      	adds	r2, #3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cf32:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800cf36:	0892      	lsrs	r2, r2, #2
 800cf38:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
 800cf3c:	4291      	cmp	r1, r2
 800cf3e:	d101      	bne.n	800cf44 <USB_ReadPacket+0x14>
}
 800cf40:	4608      	mov	r0, r1
 800cf42:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cf44:	6803      	ldr	r3, [r0, #0]
 800cf46:	f841 3b04 	str.w	r3, [r1], #4
 800cf4a:	e7f7      	b.n	800cf3c <USB_ReadPacket+0xc>

0800cf4c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800cf4c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800cf4e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800cf50:	2a01      	cmp	r2, #1
 800cf52:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800cf56:	d112      	bne.n	800cf7e <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cf58:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800cf5c:	2a00      	cmp	r2, #0
 800cf5e:	db06      	blt.n	800cf6e <USB_EPSetStall+0x22>
 800cf60:	b12b      	cbz	r3, 800cf6e <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cf62:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800cf66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cf6a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cf6e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800cf72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf76:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800cf7a:	2000      	movs	r0, #0
 800cf7c:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cf7e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800cf82:	2a00      	cmp	r2, #0
 800cf84:	db06      	blt.n	800cf94 <USB_EPSetStall+0x48>
 800cf86:	b12b      	cbz	r3, 800cf94 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cf88:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800cf8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cf90:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cf94:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800cf98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf9c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800cfa0:	e7eb      	b.n	800cf7a <USB_EPSetStall+0x2e>

0800cfa2 <USB_EPClearStall>:
{
 800cfa2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800cfa4:	784a      	ldrb	r2, [r1, #1]
 800cfa6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800cfaa:	78cb      	ldrb	r3, [r1, #3]
 800cfac:	2a01      	cmp	r2, #1
 800cfae:	f1a3 0302 	sub.w	r3, r3, #2
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	d10f      	bne.n	800cfd6 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cfb6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cfba:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cfbc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800cfc0:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cfc4:	d805      	bhi.n	800cfd2 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cfc6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800cfca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfce:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cfd6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cfda:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cfdc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800cfe0:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cfe4:	d8f5      	bhi.n	800cfd2 <USB_EPClearStall+0x30>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cfe6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800cfea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfee:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800cff2:	e7ee      	b.n	800cfd2 <USB_EPClearStall+0x30>

0800cff4 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cff4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cff8:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cffa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cffe:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d002:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d006:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800d00a:	4319      	orrs	r1, r3
 800d00c:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800d010:	2000      	movs	r0, #0
 800d012:	4770      	bx	lr

0800d014 <USB_DevConnect>:
{
 800d014:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d016:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800d01a:	f023 0302 	bic.w	r3, r3, #2
 800d01e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800d022:	2003      	movs	r0, #3
 800d024:	f7f8 fab0 	bl	8005588 <HAL_Delay>
}
 800d028:	2000      	movs	r0, #0
 800d02a:	bd08      	pop	{r3, pc}

0800d02c <USB_DevDisconnect>:
{
 800d02c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d02e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800d032:	f043 0302 	orr.w	r3, r3, #2
 800d036:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800d03a:	2003      	movs	r0, #3
 800d03c:	f7f8 faa4 	bl	8005588 <HAL_Delay>
}
 800d040:	2000      	movs	r0, #0
 800d042:	bd08      	pop	{r3, pc}

0800d044 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800d044:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800d046:	6980      	ldr	r0, [r0, #24]
}
 800d048:	4010      	ands	r0, r2
 800d04a:	4770      	bx	lr

0800d04c <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800d04c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800d050:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d054:	69c0      	ldr	r0, [r0, #28]
 800d056:	4018      	ands	r0, r3
}
 800d058:	0c00      	lsrs	r0, r0, #16
 800d05a:	4770      	bx	lr

0800d05c <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800d05c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800d060:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d064:	69c0      	ldr	r0, [r0, #28]
 800d066:	4018      	ands	r0, r3
}
 800d068:	b280      	uxth	r0, r0
 800d06a:	4770      	bx	lr

0800d06c <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d06c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d070:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d074:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d078:	6940      	ldr	r0, [r0, #20]
}
 800d07a:	4010      	ands	r0, r2
 800d07c:	4770      	bx	lr

0800d07e <USB_ReadDevInEPInterrupt>:
{
 800d07e:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 800d080:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d084:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d088:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d08c:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d090:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d094:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d096:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d098:	01db      	lsls	r3, r3, #7
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	4323      	orrs	r3, r4
}
 800d09e:	4018      	ands	r0, r3
 800d0a0:	bd10      	pop	{r4, pc}

0800d0a2 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800d0a2:	6940      	ldr	r0, [r0, #20]
}
 800d0a4:	f000 0001 	and.w	r0, r0, #1
 800d0a8:	4770      	bx	lr

0800d0aa <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d0aa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d0ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d0b2:	f023 0307 	bic.w	r3, r3, #7
 800d0b6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d0ba:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800d0be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0c2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	4770      	bx	lr
	...

0800d0cc <USB_EP0_OutStart>:
{
 800d0cc:	b530      	push	{r4, r5, lr}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d0ce:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800d0d0:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d0d4:	4c0f      	ldr	r4, [pc, #60]	; (800d114 <USB_EP0_OutStart+0x48>)
 800d0d6:	42a5      	cmp	r5, r4
 800d0d8:	d903      	bls.n	800d0e2 <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d0da:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800d0de:	2c00      	cmp	r4, #0
 800d0e0:	db16      	blt.n	800d110 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d0e2:	2400      	movs	r4, #0
  if (dma == 1U)
 800d0e4:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d0e6:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d0e8:	691c      	ldr	r4, [r3, #16]
 800d0ea:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800d0ee:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d0f0:	691c      	ldr	r4, [r3, #16]
 800d0f2:	f044 0418 	orr.w	r4, r4, #24
 800d0f6:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d0f8:	691c      	ldr	r4, [r3, #16]
 800d0fa:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800d0fe:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 800d100:	d106      	bne.n	800d110 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d102:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d104:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d108:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d10c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800d110:	2000      	movs	r0, #0
 800d112:	bd30      	pop	{r4, r5, pc}
 800d114:	4f54300a 	.word	0x4f54300a

0800d118 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d118:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d11a:	4903      	ldr	r1, [pc, #12]	; (800d128 <MX_FATFS_Init+0x10>)
 800d11c:	4803      	ldr	r0, [pc, #12]	; (800d12c <MX_FATFS_Init+0x14>)
 800d11e:	f002 fab3 	bl	800f688 <FATFS_LinkDriver>
 800d122:	4b03      	ldr	r3, [pc, #12]	; (800d130 <MX_FATFS_Init+0x18>)
 800d124:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d126:	bd08      	pop	{r3, pc}
 800d128:	240224a5 	.word	0x240224a5
 800d12c:	08015558 	.word	0x08015558
 800d130:	240224a4 	.word	0x240224a4

0800d134 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800d134:	2000      	movs	r0, #0
 800d136:	4770      	bx	lr

0800d138 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d138:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d13a:	4613      	mov	r3, r2
 800d13c:	460a      	mov	r2, r1
 800d13e:	4601      	mov	r1, r0
 800d140:	4803      	ldr	r0, [pc, #12]	; (800d150 <BSP_SD_ReadBlocks_DMA+0x18>)
 800d142:	f7fc fdd9 	bl	8009cf8 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800d146:	3000      	adds	r0, #0
 800d148:	bf18      	it	ne
 800d14a:	2001      	movne	r0, #1
 800d14c:	bd08      	pop	{r3, pc}
 800d14e:	bf00      	nop
 800d150:	2400cd60 	.word	0x2400cd60

0800d154 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d154:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d156:	4613      	mov	r3, r2
 800d158:	460a      	mov	r2, r1
 800d15a:	4601      	mov	r1, r0
 800d15c:	4803      	ldr	r0, [pc, #12]	; (800d16c <BSP_SD_WriteBlocks_DMA+0x18>)
 800d15e:	f7fc fe2f 	bl	8009dc0 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800d162:	3000      	adds	r0, #0
 800d164:	bf18      	it	ne
 800d166:	2001      	movne	r0, #1
 800d168:	bd08      	pop	{r3, pc}
 800d16a:	bf00      	nop
 800d16c:	2400cd60 	.word	0x2400cd60

0800d170 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d170:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d172:	4803      	ldr	r0, [pc, #12]	; (800d180 <BSP_SD_GetCardState+0x10>)
 800d174:	f7fd fa00 	bl	800a578 <HAL_SD_GetCardState>
}
 800d178:	3804      	subs	r0, #4
 800d17a:	bf18      	it	ne
 800d17c:	2001      	movne	r0, #1
 800d17e:	bd08      	pop	{r3, pc}
 800d180:	2400cd60 	.word	0x2400cd60

0800d184 <BSP_SD_GetCardInfo>:
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d184:	4601      	mov	r1, r0
 800d186:	4801      	ldr	r0, [pc, #4]	; (800d18c <BSP_SD_GetCardInfo+0x8>)
 800d188:	f7fd b948 	b.w	800a41c <HAL_SD_GetCardInfo>
 800d18c:	2400cd60 	.word	0x2400cd60

0800d190 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d190:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800d192:	f000 f907 	bl	800d3a4 <BSP_SD_WriteCpltCallback>
}
 800d196:	bd08      	pop	{r3, pc}

0800d198 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d198:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800d19a:	f000 f913 	bl	800d3c4 <BSP_SD_ReadCpltCallback>
}
 800d19e:	bd08      	pop	{r3, pc}

0800d1a0 <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 800d1a0:	2301      	movs	r3, #1
{
 800d1a2:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 800d1a4:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d1a8:	f000 f81e 	bl	800d1e8 <BSP_PlatformIsDetected>
 800d1ac:	b908      	cbnz	r0, 800d1b2 <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 800d1ae:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800d1b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800d1b6:	b003      	add	sp, #12
 800d1b8:	f85d fb04 	ldr.w	pc, [sp], #4

0800d1bc <BSP_SD_Init>:
{
 800d1bc:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d1be:	f7ff ffef 	bl	800d1a0 <BSP_SD_IsDetected>
 800d1c2:	2801      	cmp	r0, #1
 800d1c4:	d10c      	bne.n	800d1e0 <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd1);
 800d1c6:	4807      	ldr	r0, [pc, #28]	; (800d1e4 <BSP_SD_Init+0x28>)
 800d1c8:	f7fd f9ea 	bl	800a5a0 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800d1cc:	b938      	cbnz	r0, 800d1de <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d1ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d1d2:	4804      	ldr	r0, [pc, #16]	; (800d1e4 <BSP_SD_Init+0x28>)
 800d1d4:	f7fd f934 	bl	800a440 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800d1d8:	3000      	adds	r0, #0
 800d1da:	bf18      	it	ne
 800d1dc:	2001      	movne	r0, #1
}
 800d1de:	bd08      	pop	{r3, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 800d1e0:	2002      	movs	r0, #2
 800d1e2:	e7fc      	b.n	800d1de <BSP_SD_Init+0x22>
 800d1e4:	2400cd60 	.word	0x2400cd60

0800d1e8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d1e8:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d1ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d1ee:	4803      	ldr	r0, [pc, #12]	; (800d1fc <BSP_PlatformIsDetected+0x14>)
 800d1f0:	f7fa faec 	bl	80077cc <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800d1f4:	fab0 f080 	clz	r0, r0
 800d1f8:	0940      	lsrs	r0, r0, #5
 800d1fa:	bd08      	pop	{r3, pc}
 800d1fc:	58020800 	.word	0x58020800

0800d200 <SD_CheckStatus.isra.0>:
  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
  Stat = STA_NOINIT;
 800d200:	2301      	movs	r3, #1
static DSTATUS SD_CheckStatus(BYTE lun)
 800d202:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800d204:	4c05      	ldr	r4, [pc, #20]	; (800d21c <SD_CheckStatus.isra.0+0x1c>)
 800d206:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d208:	f7ff ffb2 	bl	800d170 <BSP_SD_GetCardState>
 800d20c:	4623      	mov	r3, r4
 800d20e:	b918      	cbnz	r0, 800d218 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 800d210:	7822      	ldrb	r2, [r4, #0]
 800d212:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d216:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 800d218:	7818      	ldrb	r0, [r3, #0]
}
 800d21a:	bd10      	pop	{r4, pc}
 800d21c:	24000028 	.word	0x24000028

0800d220 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d220:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800d222:	2301      	movs	r3, #1
 800d224:	4c0f      	ldr	r4, [pc, #60]	; (800d264 <SD_initialize+0x44>)
 800d226:	7023      	strb	r3, [r4, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800d228:	f002 fa76 	bl	800f718 <osKernelGetState>
 800d22c:	2802      	cmp	r0, #2
 800d22e:	d116      	bne.n	800d25e <SD_initialize+0x3e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d230:	f7ff ffc4 	bl	800d1bc <BSP_SD_Init>
 800d234:	b910      	cbnz	r0, 800d23c <SD_initialize+0x1c>
    {
      Stat = SD_CheckStatus(lun);
 800d236:	f7ff ffe3 	bl	800d200 <SD_CheckStatus.isra.0>
 800d23a:	7020      	strb	r0, [r4, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d23c:	7823      	ldrb	r3, [r4, #0]
 800d23e:	2b01      	cmp	r3, #1
 800d240:	d00d      	beq.n	800d25e <SD_initialize+0x3e>
    {
      if (SDQueueID == NULL)
 800d242:	4d09      	ldr	r5, [pc, #36]	; (800d268 <SD_initialize+0x48>)
 800d244:	682a      	ldr	r2, [r5, #0]
 800d246:	b922      	cbnz	r2, 800d252 <SD_initialize+0x32>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800d248:	2102      	movs	r1, #2
 800d24a:	200a      	movs	r0, #10
 800d24c:	f002 fcc6 	bl	800fbdc <osMessageQueueNew>
 800d250:	6028      	str	r0, [r5, #0]
#endif
      }

      if (SDQueueID == NULL)
 800d252:	682b      	ldr	r3, [r5, #0]
 800d254:	b91b      	cbnz	r3, 800d25e <SD_initialize+0x3e>
      {
        Stat |= STA_NOINIT;
 800d256:	7823      	ldrb	r3, [r4, #0]
 800d258:	f043 0301 	orr.w	r3, r3, #1
 800d25c:	7023      	strb	r3, [r4, #0]
      }
    }
  }

  return Stat;
 800d25e:	7820      	ldrb	r0, [r4, #0]
}
 800d260:	bd38      	pop	{r3, r4, r5, pc}
 800d262:	bf00      	nop
 800d264:	24000028 	.word	0x24000028
 800d268:	24001674 	.word	0x24001674

0800d26c <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 800d26c:	f7ff bfc8 	b.w	800d200 <SD_CheckStatus.isra.0>

0800d270 <SD_read.part.1>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
 800d270:	b538      	push	{r3, r4, r5, lr}
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
          if ((status == osOK) && (event == READ_CPLT_MSG))
          {
            timer = osKernelGetTickCount();
 800d272:	f002 fa81 	bl	800f778 <osKernelGetTickCount>
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800d276:	f247 542f 	movw	r4, #29999	; 0x752f
            timer = osKernelGetTickCount();
 800d27a:	4605      	mov	r5, r0
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800d27c:	f002 fa7c 	bl	800f778 <osKernelGetTickCount>
 800d280:	1b40      	subs	r0, r0, r5
 800d282:	42a0      	cmp	r0, r4
 800d284:	d901      	bls.n	800d28a <SD_read.part.1+0x1a>
  DRESULT res = RES_ERROR;
 800d286:	2001      	movs	r0, #1
 800d288:	e003      	b.n	800d292 <SD_read.part.1+0x22>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d28a:	f7ff ff71 	bl	800d170 <BSP_SD_GetCardState>
 800d28e:	2800      	cmp	r0, #0
 800d290:	d1f4      	bne.n	800d27c <SD_read.part.1+0xc>
      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
}
 800d292:	bd38      	pop	{r3, r4, r5, pc}

0800d294 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d294:	4b12      	ldr	r3, [pc, #72]	; (800d2e0 <SD_ioctl+0x4c>)
{
 800d296:	b510      	push	{r4, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d298:	781b      	ldrb	r3, [r3, #0]
{
 800d29a:	b08a      	sub	sp, #40	; 0x28
 800d29c:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d29e:	07db      	lsls	r3, r3, #31
 800d2a0:	d41b      	bmi.n	800d2da <SD_ioctl+0x46>

  switch (cmd)
 800d2a2:	2903      	cmp	r1, #3
 800d2a4:	d803      	bhi.n	800d2ae <SD_ioctl+0x1a>
 800d2a6:	e8df f001 	tbb	[pc, r1]
 800d2aa:	0510      	.short	0x0510
 800d2ac:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 800d2ae:	2004      	movs	r0, #4
  }

  return res;
}
 800d2b0:	b00a      	add	sp, #40	; 0x28
 800d2b2:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800d2b4:	a801      	add	r0, sp, #4
 800d2b6:	f7ff ff65 	bl	800d184 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d2ba:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d2bc:	6023      	str	r3, [r4, #0]
 800d2be:	e004      	b.n	800d2ca <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 800d2c0:	a801      	add	r0, sp, #4
 800d2c2:	f7ff ff5f 	bl	800d184 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d2c6:	9b08      	ldr	r3, [sp, #32]
 800d2c8:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	e7f0      	b.n	800d2b0 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 800d2ce:	a801      	add	r0, sp, #4
 800d2d0:	f7ff ff58 	bl	800d184 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d2d4:	9b08      	ldr	r3, [sp, #32]
 800d2d6:	0a5b      	lsrs	r3, r3, #9
 800d2d8:	e7f0      	b.n	800d2bc <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d2da:	2003      	movs	r0, #3
 800d2dc:	e7e8      	b.n	800d2b0 <SD_ioctl+0x1c>
 800d2de:	bf00      	nop
 800d2e0:	24000028 	.word	0x24000028

0800d2e4 <SD_CheckStatusWithTimeout.constprop.4>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 800d2e4:	b538      	push	{r3, r4, r5, lr}
  timer = osKernelGetTickCount();
 800d2e6:	f002 fa47 	bl	800f778 <osKernelGetTickCount>
  while( osKernelGetTickCount() - timer < timeout)
 800d2ea:	f247 542f 	movw	r4, #29999	; 0x752f
  timer = osKernelGetTickCount();
 800d2ee:	4605      	mov	r5, r0
  while( osKernelGetTickCount() - timer < timeout)
 800d2f0:	f002 fa42 	bl	800f778 <osKernelGetTickCount>
 800d2f4:	1b40      	subs	r0, r0, r5
 800d2f6:	42a0      	cmp	r0, r4
 800d2f8:	d902      	bls.n	800d300 <SD_CheckStatusWithTimeout.constprop.4+0x1c>
  return -1;
 800d2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d2fe:	e003      	b.n	800d308 <SD_CheckStatusWithTimeout.constprop.4+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d300:	f7ff ff36 	bl	800d170 <BSP_SD_GetCardState>
 800d304:	2800      	cmp	r0, #0
 800d306:	d1f3      	bne.n	800d2f0 <SD_CheckStatusWithTimeout.constprop.4+0xc>
}
 800d308:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d30c <SD_write>:
{
 800d30c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d30e:	460c      	mov	r4, r1
 800d310:	4615      	mov	r5, r2
 800d312:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d314:	f7ff ffe6 	bl	800d2e4 <SD_CheckStatusWithTimeout.constprop.4>
 800d318:	2800      	cmp	r0, #0
 800d31a:	da02      	bge.n	800d322 <SD_write+0x16>
    return res;
 800d31c:	2001      	movs	r0, #1
}
 800d31e:	b002      	add	sp, #8
 800d320:	bd70      	pop	{r4, r5, r6, pc}
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d322:	4632      	mov	r2, r6
 800d324:	4629      	mov	r1, r5
 800d326:	4620      	mov	r0, r4
 800d328:	f7ff ff14 	bl	800d154 <BSP_SD_WriteBlocks_DMA>
 800d32c:	4602      	mov	r2, r0
 800d32e:	2800      	cmp	r0, #0
 800d330:	d1f4      	bne.n	800d31c <SD_write+0x10>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800d332:	4808      	ldr	r0, [pc, #32]	; (800d354 <SD_write+0x48>)
 800d334:	f247 5330 	movw	r3, #30000	; 0x7530
 800d338:	f10d 0106 	add.w	r1, sp, #6
 800d33c:	6800      	ldr	r0, [r0, #0]
 800d33e:	f002 fcd5 	bl	800fcec <osMessageQueueGet>
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800d342:	2800      	cmp	r0, #0
 800d344:	d1ea      	bne.n	800d31c <SD_write+0x10>
 800d346:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	d1e6      	bne.n	800d31c <SD_write+0x10>
 800d34e:	f7ff ff8f 	bl	800d270 <SD_read.part.1>
 800d352:	e7e4      	b.n	800d31e <SD_write+0x12>
 800d354:	24001674 	.word	0x24001674

0800d358 <SD_read>:
{
 800d358:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d35a:	460c      	mov	r4, r1
 800d35c:	4615      	mov	r5, r2
 800d35e:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d360:	f7ff ffc0 	bl	800d2e4 <SD_CheckStatusWithTimeout.constprop.4>
 800d364:	2800      	cmp	r0, #0
 800d366:	da02      	bge.n	800d36e <SD_read+0x16>
    return res;
 800d368:	2001      	movs	r0, #1
}
 800d36a:	b002      	add	sp, #8
 800d36c:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d36e:	4632      	mov	r2, r6
 800d370:	4629      	mov	r1, r5
 800d372:	4620      	mov	r0, r4
 800d374:	f7ff fee0 	bl	800d138 <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 800d378:	4602      	mov	r2, r0
 800d37a:	2800      	cmp	r0, #0
 800d37c:	d1f4      	bne.n	800d368 <SD_read+0x10>
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800d37e:	4808      	ldr	r0, [pc, #32]	; (800d3a0 <SD_read+0x48>)
 800d380:	f247 5330 	movw	r3, #30000	; 0x7530
 800d384:	f10d 0106 	add.w	r1, sp, #6
 800d388:	6800      	ldr	r0, [r0, #0]
 800d38a:	f002 fcaf 	bl	800fcec <osMessageQueueGet>
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800d38e:	2800      	cmp	r0, #0
 800d390:	d1ea      	bne.n	800d368 <SD_read+0x10>
 800d392:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d396:	2b01      	cmp	r3, #1
 800d398:	d1e6      	bne.n	800d368 <SD_read+0x10>
 800d39a:	f7ff ff69 	bl	800d270 <SD_read.part.1>
 800d39e:	e7e4      	b.n	800d36a <SD_read+0x12>
 800d3a0:	24001674 	.word	0x24001674

0800d3a4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d3a4:	b507      	push	{r0, r1, r2, lr}
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800d3a6:	2302      	movs	r3, #2
 800d3a8:	a902      	add	r1, sp, #8
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800d3aa:	4805      	ldr	r0, [pc, #20]	; (800d3c0 <BSP_SD_WriteCpltCallback+0x1c>)
   const uint16_t msg = WRITE_CPLT_MSG;
 800d3ac:	f821 3d02 	strh.w	r3, [r1, #-2]!
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	6800      	ldr	r0, [r0, #0]
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	f002 fc57 	bl	800fc68 <osMessageQueuePut>
#endif
}
 800d3ba:	b003      	add	sp, #12
 800d3bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d3c0:	24001674 	.word	0x24001674

0800d3c4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d3c4:	b507      	push	{r0, r1, r2, lr}
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	a902      	add	r1, sp, #8
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800d3ca:	4805      	ldr	r0, [pc, #20]	; (800d3e0 <BSP_SD_ReadCpltCallback+0x1c>)
   const uint16_t msg = READ_CPLT_MSG;
 800d3cc:	f821 3d02 	strh.w	r3, [r1, #-2]!
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	6800      	ldr	r0, [r0, #0]
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	f002 fc47 	bl	800fc68 <osMessageQueuePut>
#endif
}
 800d3da:	b003      	add	sp, #12
 800d3dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d3e0:	24001674 	.word	0x24001674

0800d3e4 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d3e4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
{
 800d3e8:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d3ea:	b16b      	cbz	r3, 800d408 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d3ec:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d3f0:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800d3f4:	28ff      	cmp	r0, #255	; 0xff
 800d3f6:	d007      	beq.n	800d408 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d3f8:	689b      	ldr	r3, [r3, #8]
 800d3fa:	4621      	mov	r1, r4
 800d3fc:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800d400:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800d402:	23ff      	movs	r3, #255	; 0xff
 800d404:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 800d408:	2000      	movs	r0, #0
 800d40a:	bd10      	pop	{r4, pc}

0800d40c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d40c:	2343      	movs	r3, #67	; 0x43
 800d40e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800d410:	4800      	ldr	r0, [pc, #0]	; (800d414 <USBD_CDC_GetFSCfgDesc+0x8>)
 800d412:	4770      	bx	lr
 800d414:	24000064 	.word	0x24000064

0800d418 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d418:	2343      	movs	r3, #67	; 0x43
 800d41a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800d41c:	4800      	ldr	r0, [pc, #0]	; (800d420 <USBD_CDC_GetHSCfgDesc+0x8>)
 800d41e:	4770      	bx	lr
 800d420:	240000a8 	.word	0x240000a8

0800d424 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d424:	2343      	movs	r3, #67	; 0x43
 800d426:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800d428:	4800      	ldr	r0, [pc, #0]	; (800d42c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800d42a:	4770      	bx	lr
 800d42c:	240000f8 	.word	0x240000f8

0800d430 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d430:	230a      	movs	r3, #10
 800d432:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800d434:	4800      	ldr	r0, [pc, #0]	; (800d438 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800d436:	4770      	bx	lr
 800d438:	240000ec 	.word	0x240000ec

0800d43c <USBD_CDC_DataOut>:
{
 800d43c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d43e:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
{
 800d442:	4605      	mov	r5, r0
  if (pdev->pClassData == NULL)
 800d444:	b16c      	cbz	r4, 800d462 <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d446:	f005 fbb5 	bl	8012bb4 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d44a:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d44e:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d452:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800d45c:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800d45e:	2000      	movs	r0, #0
}
 800d460:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800d462:	2003      	movs	r0, #3
 800d464:	e7fc      	b.n	800d460 <USBD_CDC_DataOut+0x24>

0800d466 <USBD_CDC_DataIn>:
{
 800d466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 800d468:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 800d46c:	4605      	mov	r5, r0
 800d46e:	460a      	mov	r2, r1
  if (pdev->pClassData == NULL)
 800d470:	b323      	cbz	r3, 800d4bc <USBD_CDC_DataIn+0x56>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d472:	2614      	movs	r6, #20
 800d474:	fb06 0601 	mla	r6, r6, r1, r0
 800d478:	69b7      	ldr	r7, [r6, #24]
 800d47a:	b19f      	cbz	r7, 800d4a4 <USBD_CDC_DataIn+0x3e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d47c:	f04f 0c1c 	mov.w	ip, #28
 800d480:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800d484:	fb0c 4401 	mla	r4, ip, r1, r4
 800d488:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 800d48c:	fbb7 f4fc 	udiv	r4, r7, ip
 800d490:	fb0c 7414 	mls	r4, ip, r4, r7
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d494:	b934      	cbnz	r4, 800d4a4 <USBD_CDC_DataIn+0x3e>
    pdev->ep_in[epnum].total_length = 0U;
 800d496:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d498:	4623      	mov	r3, r4
 800d49a:	4622      	mov	r2, r4
 800d49c:	f005 fb6e 	bl	8012b7c <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800d4a0:	4620      	mov	r0, r4
}
 800d4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hcdc->TxState = 0U;
 800d4a4:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d4a6:	f8d5 12c0 	ldr.w	r1, [r5, #704]	; 0x2c0
 800d4aa:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800d4ae:	690d      	ldr	r5, [r1, #16]
 800d4b0:	f503 7104 	add.w	r1, r3, #528	; 0x210
    hcdc->TxState = 0U;
 800d4b4:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d4b8:	47a8      	blx	r5
 800d4ba:	e7f1      	b.n	800d4a0 <USBD_CDC_DataIn+0x3a>
    return (uint8_t)USBD_FAIL;
 800d4bc:	2003      	movs	r0, #3
 800d4be:	e7f0      	b.n	800d4a2 <USBD_CDC_DataIn+0x3c>

0800d4c0 <USBD_CDC_Setup>:
{
 800d4c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4c4:	780a      	ldrb	r2, [r1, #0]
  uint8_t ifalt = 0U;
 800d4c6:	f04f 0800 	mov.w	r8, #0
{
 800d4ca:	4605      	mov	r5, r0
 800d4cc:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4ce:	f012 0360 	ands.w	r3, r2, #96	; 0x60
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d4d2:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800d4d6:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800d4da:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4de:	d025      	beq.n	800d52c <USBD_CDC_Setup+0x6c>
 800d4e0:	2b20      	cmp	r3, #32
 800d4e2:	d155      	bne.n	800d590 <USBD_CDC_Setup+0xd0>
    if (req->wLength != 0U)
 800d4e4:	88cc      	ldrh	r4, [r1, #6]
 800d4e6:	784b      	ldrb	r3, [r1, #1]
 800d4e8:	b1cc      	cbz	r4, 800d51e <USBD_CDC_Setup+0x5e>
      if ((req->bmRequest & 0x80U) != 0U)
 800d4ea:	0612      	lsls	r2, r2, #24
 800d4ec:	d50d      	bpl.n	800d50a <USBD_CDC_Setup+0x4a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d4ee:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800d4f2:	4639      	mov	r1, r7
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800d4fa:	4622      	mov	r2, r4
 800d4fc:	47c8      	blx	r9
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d4fe:	88f2      	ldrh	r2, [r6, #6]
 800d500:	4639      	mov	r1, r7
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d502:	4628      	mov	r0, r5
 800d504:	f000 fc90 	bl	800de28 <USBD_CtlSendData>
 800d508:	e007      	b.n	800d51a <USBD_CDC_Setup+0x5a>
        hcdc->CmdOpCode = req->bRequest;
 800d50a:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d50e:	4622      	mov	r2, r4
        hcdc->CmdLength = (uint8_t)req->wLength;
 800d510:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d514:	4639      	mov	r1, r7
 800d516:	f000 fc9c 	bl	800de52 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800d51a:	2000      	movs	r0, #0
 800d51c:	e03d      	b.n	800d59a <USBD_CDC_Setup+0xda>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d51e:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800d522:	4618      	mov	r0, r3
 800d524:	6895      	ldr	r5, [r2, #8]
 800d526:	4622      	mov	r2, r4
 800d528:	47a8      	blx	r5
 800d52a:	e7f6      	b.n	800d51a <USBD_CDC_Setup+0x5a>
    switch (req->bRequest)
 800d52c:	784b      	ldrb	r3, [r1, #1]
 800d52e:	2b0b      	cmp	r3, #11
 800d530:	d82e      	bhi.n	800d590 <USBD_CDC_Setup+0xd0>
 800d532:	a201      	add	r2, pc, #4	; (adr r2, 800d538 <USBD_CDC_Setup+0x78>)
 800d534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d538:	0800d569 	.word	0x0800d569
 800d53c:	0800d51b 	.word	0x0800d51b
 800d540:	0800d591 	.word	0x0800d591
 800d544:	0800d591 	.word	0x0800d591
 800d548:	0800d591 	.word	0x0800d591
 800d54c:	0800d591 	.word	0x0800d591
 800d550:	0800d591 	.word	0x0800d591
 800d554:	0800d591 	.word	0x0800d591
 800d558:	0800d591 	.word	0x0800d591
 800d55c:	0800d591 	.word	0x0800d591
 800d560:	0800d579 	.word	0x0800d579
 800d564:	0800d589 	.word	0x0800d589
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d568:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800d56c:	2b03      	cmp	r3, #3
 800d56e:	d10f      	bne.n	800d590 <USBD_CDC_Setup+0xd0>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d570:	2202      	movs	r2, #2
 800d572:	f10d 0106 	add.w	r1, sp, #6
 800d576:	e7c4      	b.n	800d502 <USBD_CDC_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d578:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800d57c:	2b03      	cmp	r3, #3
 800d57e:	d107      	bne.n	800d590 <USBD_CDC_Setup+0xd0>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d580:	2201      	movs	r2, #1
 800d582:	f10d 0105 	add.w	r1, sp, #5
 800d586:	e7bc      	b.n	800d502 <USBD_CDC_Setup+0x42>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d588:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800d58c:	2b03      	cmp	r3, #3
 800d58e:	d0c4      	beq.n	800d51a <USBD_CDC_Setup+0x5a>
      USBD_CtlError(pdev, req);
 800d590:	4628      	mov	r0, r5
 800d592:	4631      	mov	r1, r6
 800d594:	f000 fc21 	bl	800ddda <USBD_CtlError>
      ret = USBD_FAIL;
 800d598:	2003      	movs	r0, #3
}
 800d59a:	b003      	add	sp, #12
 800d59c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d5a0 <USBD_CDC_DeInit>:
{
 800d5a0:	b538      	push	{r3, r4, r5, lr}
 800d5a2:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d5a4:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d5a6:	2181      	movs	r1, #129	; 0x81
 800d5a8:	f005 fa9c 	bl	8012ae4 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d5ac:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d5ae:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	f005 fa97 	bl	8012ae4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d5b6:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d5ba:	2182      	movs	r1, #130	; 0x82
 800d5bc:	4620      	mov	r0, r4
 800d5be:	f005 fa91 	bl	8012ae4 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800d5c2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d5c6:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800d5c8:	b14b      	cbz	r3, 800d5de <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d5ca:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d5d2:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800d5d6:	f005 fb23 	bl	8012c20 <free>
    pdev->pClassData = NULL;
 800d5da:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800d5de:	2000      	movs	r0, #0
 800d5e0:	bd38      	pop	{r3, r4, r5, pc}

0800d5e2 <USBD_CDC_Init>:
{
 800d5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e6:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d5e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d5ec:	f005 fb10 	bl	8012c10 <malloc>
  if (hcdc == NULL)
 800d5f0:	4606      	mov	r6, r0
    pdev->pClassData = NULL;
 800d5f2:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (hcdc == NULL)
 800d5f6:	b910      	cbnz	r0, 800d5fe <USBD_CDC_Init+0x1c>
    return (uint8_t)USBD_EMEM;
 800d5f8:	2002      	movs	r0, #2
}
 800d5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5fe:	7c23      	ldrb	r3, [r4, #16]
 800d600:	bbab      	cbnz	r3, 800d66e <USBD_CDC_Init+0x8c>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d602:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d606:	2202      	movs	r2, #2
 800d608:	2181      	movs	r1, #129	; 0x81
 800d60a:	4620      	mov	r0, r4
 800d60c:	f005 fa5a 	bl	8012ac4 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d610:	2501      	movs	r5, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d612:	f44f 7300 	mov.w	r3, #512	; 0x200
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d616:	8725      	strh	r5, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d618:	4629      	mov	r1, r5
 800d61a:	2202      	movs	r2, #2
 800d61c:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d61e:	2701      	movs	r7, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d620:	f005 fa50 	bl	8012ac4 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d624:	2310      	movs	r3, #16
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d626:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d62a:	2203      	movs	r2, #3
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d62c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d630:	2182      	movs	r1, #130	; 0x82
 800d632:	2308      	movs	r3, #8
 800d634:	4620      	mov	r0, r4
 800d636:	f005 fa45 	bl	8012ac4 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d63a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d63e:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  hcdc->TxState = 0U;
 800d642:	2500      	movs	r5, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d648:	f894 8010 	ldrb.w	r8, [r4, #16]
  hcdc->TxState = 0U;
 800d64c:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800d650:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d654:	f1b8 0f00 	cmp.w	r8, #0
 800d658:	d113      	bne.n	800d682 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d65a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d65e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800d662:	4639      	mov	r1, r7
 800d664:	4620      	mov	r0, r4
 800d666:	f005 fa97 	bl	8012b98 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800d66a:	4640      	mov	r0, r8
 800d66c:	e7c5      	b.n	800d5fa <USBD_CDC_Init+0x18>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d66e:	2501      	movs	r5, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d670:	2340      	movs	r3, #64	; 0x40
 800d672:	2202      	movs	r2, #2
 800d674:	2181      	movs	r1, #129	; 0x81
 800d676:	4620      	mov	r0, r4
 800d678:	f005 fa24 	bl	8012ac4 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d67c:	8725      	strh	r5, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d67e:	2340      	movs	r3, #64	; 0x40
 800d680:	e7ca      	b.n	800d618 <USBD_CDC_Init+0x36>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d682:	2340      	movs	r3, #64	; 0x40
 800d684:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800d688:	4639      	mov	r1, r7
 800d68a:	4620      	mov	r0, r4
 800d68c:	f005 fa84 	bl	8012b98 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800d690:	4628      	mov	r0, r5
 800d692:	e7b2      	b.n	800d5fa <USBD_CDC_Init+0x18>

0800d694 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800d694:	b119      	cbz	r1, 800d69e <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800d696:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d69a:	2000      	movs	r0, #0
 800d69c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800d69e:	2003      	movs	r0, #3
}
 800d6a0:	4770      	bx	lr

0800d6a2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d6a2:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 800d6a6:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800d6a8:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d6ac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800d6b0:	4770      	bx	lr

0800d6b2 <USBD_CDC_SetRxBuffer>:
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800d6b2:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
}
 800d6b6:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800d6b8:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800d6bc:	4770      	bx	lr

0800d6be <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d6be:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800d6c2:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800d6c4:	b17a      	cbz	r2, 800d6e6 <USBD_CDC_TransmitPacket+0x28>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800d6c6:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	b96c      	cbnz	r4, 800d6ea <USBD_CDC_TransmitPacket+0x2c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d6ce:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d6d2:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d6d4:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d6d8:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d6dc:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d6de:	f005 fa4d 	bl	8012b7c <USBD_LL_Transmit>

    ret = USBD_OK;
 800d6e2:	4620      	mov	r0, r4
  }

  return (uint8_t)ret;
}
 800d6e4:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800d6e6:	2003      	movs	r0, #3
 800d6e8:	e7fc      	b.n	800d6e4 <USBD_CDC_TransmitPacket+0x26>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	e7fa      	b.n	800d6e4 <USBD_CDC_TransmitPacket+0x26>

0800d6ee <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d6ee:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800d6f2:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800d6f4:	b162      	cbz	r2, 800d710 <USBD_CDC_ReceivePacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6f6:	7c04      	ldrb	r4, [r0, #16]
 800d6f8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800d6fc:	b934      	cbnz	r4, 800d70c <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d6fe:	f44f 7300 	mov.w	r3, #512	; 0x200
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d702:	2101      	movs	r1, #1
 800d704:	f005 fa48 	bl	8012b98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d708:	2000      	movs	r0, #0
}
 800d70a:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d70c:	2340      	movs	r3, #64	; 0x40
 800d70e:	e7f8      	b.n	800d702 <USBD_CDC_ReceivePacket+0x14>
    return (uint8_t)USBD_FAIL;
 800d710:	2003      	movs	r0, #3
 800d712:	e7fa      	b.n	800d70a <USBD_CDC_ReceivePacket+0x1c>

0800d714 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d714:	b1a0      	cbz	r0, 800d740 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800d716:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800d71a:	b113      	cbz	r3, 800d722 <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 800d71c:	2300      	movs	r3, #0
 800d71e:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800d722:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 800d726:	b113      	cbz	r3, 800d72e <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 800d728:	2300      	movs	r3, #0
 800d72a:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d72e:	b109      	cbz	r1, 800d734 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 800d730:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d734:	2301      	movs	r3, #1
  pdev->id = id;
 800d736:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d738:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d73c:	f005 b984 	b.w	8012a48 <USBD_LL_Init>

  return ret;
}
 800d740:	2003      	movs	r0, #3
 800d742:	4770      	bx	lr

0800d744 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d744:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t len = 0U;
 800d746:	2400      	movs	r4, #0
{
 800d748:	4605      	mov	r5, r0
  uint16_t len = 0U;
 800d74a:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800d74e:	b151      	cbz	r1, 800d766 <USBD_RegisterClass+0x22>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d750:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d754:	f10d 0006 	add.w	r0, sp, #6
 800d758:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800d75a:	4798      	blx	r3
 800d75c:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800d760:	4620      	mov	r0, r4
}
 800d762:	b003      	add	sp, #12
 800d764:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800d766:	2003      	movs	r0, #3
 800d768:	e7fb      	b.n	800d762 <USBD_RegisterClass+0x1e>

0800d76a <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d76a:	f005 b99d 	b.w	8012aa8 <USBD_LL_Start>

0800d76e <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800d76e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800d772:	b10b      	cbz	r3, 800d778 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4718      	bx	r3
  }

  return ret;
}
 800d778:	2003      	movs	r0, #3
 800d77a:	4770      	bx	lr

0800d77c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d77c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d77e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800d782:	b10b      	cbz	r3, 800d788 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	4798      	blx	r3
  }

  return USBD_OK;
}
 800d788:	2000      	movs	r0, #0
 800d78a:	bd08      	pop	{r3, pc}

0800d78c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d78c:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d78e:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800d792:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d794:	4628      	mov	r0, r5
 800d796:	f000 fb0c 	bl	800ddb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d79a:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800d79c:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800d7a0:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800d7a4:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800d7a8:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800d7ac:	f001 031f 	and.w	r3, r1, #31
 800d7b0:	2b01      	cmp	r3, #1
 800d7b2:	d00f      	beq.n	800d7d4 <USBD_LL_SetupStage+0x48>
 800d7b4:	d308      	bcc.n	800d7c8 <USBD_LL_SetupStage+0x3c>
 800d7b6:	2b02      	cmp	r3, #2
 800d7b8:	d012      	beq.n	800d7e0 <USBD_LL_SetupStage+0x54>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800d7c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d7c4:	f005 b99c 	b.w	8012b00 <USBD_LL_StallEP>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d7c8:	4629      	mov	r1, r5
 800d7ca:	4620      	mov	r0, r4
}
 800d7cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d7d0:	f000 b8f4 	b.w	800d9bc <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d7d4:	4629      	mov	r1, r5
 800d7d6:	4620      	mov	r0, r4
}
 800d7d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d7dc:	f000 ba2e 	b.w	800dc3c <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d7e0:	4629      	mov	r1, r5
 800d7e2:	4620      	mov	r0, r4
}
 800d7e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d7e8:	f000 ba4f 	b.w	800dc8a <USBD_StdEPReq>

0800d7ec <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d7ec:	b570      	push	{r4, r5, r6, lr}
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d7f2:	bb09      	cbnz	r1, 800d838 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d7f4:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800d7f8:	2b03      	cmp	r3, #3
 800d7fa:	d10e      	bne.n	800d81a <USBD_LL_DataOutStage+0x2e>
    {
      if (pep->rem_length > pep->maxpacket)
 800d7fc:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
 800d800:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800d804:	4293      	cmp	r3, r2
 800d806:	d90a      	bls.n	800d81e <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 800d808:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d80a:	4631      	mov	r1, r6
 800d80c:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800d80e:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d812:	bf28      	it	cs
 800d814:	461a      	movcs	r2, r3
 800d816:	f000 fb2b 	bl	800de70 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800d81a:	2000      	movs	r0, #0
}
 800d81c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d81e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800d822:	691b      	ldr	r3, [r3, #16]
 800d824:	b123      	cbz	r3, 800d830 <USBD_LL_DataOutStage+0x44>
 800d826:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800d82a:	2a03      	cmp	r2, #3
 800d82c:	d100      	bne.n	800d830 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 800d82e:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 800d830:	4620      	mov	r0, r4
 800d832:	f000 fb25 	bl	800de80 <USBD_CtlSendStatus>
 800d836:	e7f0      	b.n	800d81a <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 800d838:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800d83c:	699b      	ldr	r3, [r3, #24]
 800d83e:	b133      	cbz	r3, 800d84e <USBD_LL_DataOutStage+0x62>
 800d840:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800d844:	2a03      	cmp	r2, #3
 800d846:	d102      	bne.n	800d84e <USBD_LL_DataOutStage+0x62>
}
 800d848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d84c:	4718      	bx	r3
    return USBD_FAIL;
 800d84e:	2003      	movs	r0, #3
 800d850:	e7e4      	b.n	800d81c <USBD_LL_DataOutStage+0x30>

0800d852 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d852:	b570      	push	{r4, r5, r6, lr}
 800d854:	4604      	mov	r4, r0
 800d856:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d858:	460d      	mov	r5, r1
 800d85a:	bbd1      	cbnz	r1, 800d8d2 <USBD_LL_DataInStage+0x80>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d85c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800d860:	2b02      	cmp	r3, #2
 800d862:	d10e      	bne.n	800d882 <USBD_LL_DataInStage+0x30>
    {
      if (pep->rem_length > pep->maxpacket)
 800d864:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d912      	bls.n	800d892 <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 800d86c:	1ad2      	subs	r2, r2, r3

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d86e:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 800d870:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d872:	f000 fae6 	bl	800de42 <USBD_CtlContinueSendData>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d876:	462b      	mov	r3, r5
 800d878:	462a      	mov	r2, r5
 800d87a:	4629      	mov	r1, r5
 800d87c:	4620      	mov	r0, r4
 800d87e:	f005 f98b 	bl	8012b98 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d882:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800d886:	2000      	movs	r0, #0
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d101      	bne.n	800d890 <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800d88c:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800d890:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 800d892:	d10c      	bne.n	800d8ae <USBD_LL_DataInStage+0x5c>
            (pep->total_length >= pep->maxpacket) &&
 800d894:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800d896:	429a      	cmp	r2, r3
 800d898:	d809      	bhi.n	800d8ae <USBD_LL_DataInStage+0x5c>
            (pep->total_length >= pep->maxpacket) &&
 800d89a:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d205      	bcs.n	800d8ae <USBD_LL_DataInStage+0x5c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d8a2:	460a      	mov	r2, r1
 800d8a4:	f000 facd 	bl	800de42 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d8a8:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800d8ac:	e7e3      	b.n	800d876 <USBD_LL_DataInStage+0x24>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d8ae:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	b12b      	cbz	r3, 800d8c2 <USBD_LL_DataInStage+0x70>
 800d8b6:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800d8ba:	2a03      	cmp	r2, #3
 800d8bc:	d101      	bne.n	800d8c2 <USBD_LL_DataInStage+0x70>
            pdev->pClass->EP0_TxSent(pdev);
 800d8be:	4620      	mov	r0, r4
 800d8c0:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8c2:	2180      	movs	r1, #128	; 0x80
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f005 f91b 	bl	8012b00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	f000 fae3 	bl	800de96 <USBD_CtlReceiveStatus>
 800d8d0:	e7d7      	b.n	800d882 <USBD_LL_DataInStage+0x30>
  else if ((pdev->pClass->DataIn != NULL) &&
 800d8d2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800d8d6:	695b      	ldr	r3, [r3, #20]
 800d8d8:	b133      	cbz	r3, 800d8e8 <USBD_LL_DataInStage+0x96>
 800d8da:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800d8de:	2a03      	cmp	r2, #3
 800d8e0:	d102      	bne.n	800d8e8 <USBD_LL_DataInStage+0x96>
}
 800d8e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d8e6:	4718      	bx	r3
    return USBD_FAIL;
 800d8e8:	2003      	movs	r0, #3
 800d8ea:	e7d1      	b.n	800d890 <USBD_LL_DataInStage+0x3e>

0800d8ec <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d8ec:	2301      	movs	r3, #1
  pdev->ep0_state = USBD_EP0_IDLE;
 800d8ee:	2100      	movs	r1, #0
{
 800d8f0:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d8f2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
{
 800d8f6:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 800d8f8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  pdev->ep0_state = USBD_EP0_IDLE;
 800d8fc:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800d900:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800d902:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 800d906:	b11b      	cbz	r3, 800d910 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d908:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d910:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d912:	2540      	movs	r5, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d914:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d916:	2340      	movs	r3, #64	; 0x40
 800d918:	4611      	mov	r1, r2
 800d91a:	4620      	mov	r0, r4
 800d91c:	f005 f8d2 	bl	8012ac4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d920:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d924:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d928:	462b      	mov	r3, r5
 800d92a:	2200      	movs	r2, #0
 800d92c:	2180      	movs	r1, #128	; 0x80
 800d92e:	4620      	mov	r0, r4
 800d930:	f005 f8c8 	bl	8012ac4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d934:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d936:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 800d938:	2000      	movs	r0, #0
 800d93a:	bd70      	pop	{r4, r5, r6, pc}

0800d93c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800d93c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800d93e:	2000      	movs	r0, #0
 800d940:	4770      	bx	lr

0800d942 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800d942:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800d946:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d94a:	2304      	movs	r3, #4
 800d94c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800d950:	2000      	movs	r0, #0
 800d952:	4770      	bx	lr

0800d954 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d954:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800d958:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800d95a:	bf04      	itt	eq
 800d95c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800d960:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800d964:	2000      	movs	r0, #0
 800d966:	4770      	bx	lr

0800d968 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d968:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d96a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800d96e:	2a03      	cmp	r2, #3
 800d970:	d104      	bne.n	800d97c <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800d972:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800d976:	69db      	ldr	r3, [r3, #28]
 800d978:	b103      	cbz	r3, 800d97c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800d97a:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800d97c:	2000      	movs	r0, #0
 800d97e:	bd08      	pop	{r3, pc}

0800d980 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800d980:	2000      	movs	r0, #0
 800d982:	4770      	bx	lr

0800d984 <USBD_LL_IsoOUTIncomplete>:
 800d984:	2000      	movs	r0, #0
 800d986:	4770      	bx	lr

0800d988 <USBD_LL_DevConnected>:
 800d988:	2000      	movs	r0, #0
 800d98a:	4770      	bx	lr

0800d98c <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d98c:	2201      	movs	r2, #1
{
 800d98e:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d990:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800d994:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800d998:	b112      	cbz	r2, 800d9a0 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d99a:	6852      	ldr	r2, [r2, #4]
 800d99c:	7901      	ldrb	r1, [r0, #4]
 800d99e:	4790      	blx	r2
  }

  return USBD_OK;
}
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	bd08      	pop	{r3, pc}

0800d9a4 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800d9a4:	b510      	push	{r4, lr}
 800d9a6:	4604      	mov	r4, r0
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9a8:	2180      	movs	r1, #128	; 0x80
 800d9aa:	f005 f8a9 	bl	8012b00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d9ae:	2100      	movs	r1, #0
 800d9b0:	4620      	mov	r0, r4
}
 800d9b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800d9b6:	f005 b8a3 	b.w	8012b00 <USBD_LL_StallEP>
	...

0800d9bc <USBD_StdDevReq>:
{
 800d9bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d9be:	780b      	ldrb	r3, [r1, #0]
{
 800d9c0:	4604      	mov	r4, r0
 800d9c2:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d9c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d9c8:	2b20      	cmp	r3, #32
 800d9ca:	d012      	beq.n	800d9f2 <USBD_StdDevReq+0x36>
 800d9cc:	2b40      	cmp	r3, #64	; 0x40
 800d9ce:	d010      	beq.n	800d9f2 <USBD_StdDevReq+0x36>
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d158      	bne.n	800da86 <USBD_StdDevReq+0xca>
    switch (req->bRequest)
 800d9d4:	784b      	ldrb	r3, [r1, #1]
 800d9d6:	2b09      	cmp	r3, #9
 800d9d8:	d855      	bhi.n	800da86 <USBD_StdDevReq+0xca>
 800d9da:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d9de:	0100      	.short	0x0100
 800d9e0:	0054011e 	.word	0x0054011e
 800d9e4:	00540115 	.word	0x00540115
 800d9e8:	00140081 	.word	0x00140081
 800d9ec:	00e90054 	.word	0x00e90054
 800d9f0:	00a0      	.short	0x00a0
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d9f2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800d9f6:	4631      	mov	r1, r6
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	4798      	blx	r3
 800d9fe:	4605      	mov	r5, r0
}
 800da00:	4628      	mov	r0, r5
 800da02:	b003      	add	sp, #12
 800da04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t len = 0U;
 800da06:	2300      	movs	r3, #0
 800da08:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800da0c:	884b      	ldrh	r3, [r1, #2]
 800da0e:	0a1a      	lsrs	r2, r3, #8
 800da10:	3a01      	subs	r2, #1
 800da12:	2a06      	cmp	r2, #6
 800da14:	d837      	bhi.n	800da86 <USBD_StdDevReq+0xca>
 800da16:	e8df f002 	tbb	[pc, r2]
 800da1a:	1c04      	.short	0x1c04
 800da1c:	4e363629 	.word	0x4e363629
 800da20:	58          	.byte	0x58
 800da21:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800da22:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800da26:	681b      	ldr	r3, [r3, #0]
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800da28:	f10d 0106 	add.w	r1, sp, #6
 800da2c:	7c20      	ldrb	r0, [r4, #16]
 800da2e:	4798      	blx	r3
    if (req->wLength != 0U)
 800da30:	88f2      	ldrh	r2, [r6, #6]
 800da32:	2a00      	cmp	r2, #0
 800da34:	f000 80ed 	beq.w	800dc12 <USBD_StdDevReq+0x256>
      if (len != 0U)
 800da38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800da3c:	b31b      	cbz	r3, 800da86 <USBD_StdDevReq+0xca>
        len = MIN(len, req->wLength);
 800da3e:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800da40:	4601      	mov	r1, r0
        len = MIN(len, req->wLength);
 800da42:	bf28      	it	cs
 800da44:	461a      	movcs	r2, r3
 800da46:	f8ad 2006 	strh.w	r2, [sp, #6]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800da4a:	4620      	mov	r0, r4
 800da4c:	f000 f9ec 	bl	800de28 <USBD_CtlSendData>
 800da50:	e05f      	b.n	800db12 <USBD_StdDevReq+0x156>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da52:	7c02      	ldrb	r2, [r0, #16]
 800da54:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800da58:	b932      	cbnz	r2, 800da68 <USBD_StdDevReq+0xac>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800da5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800da5c:	f10d 0006 	add.w	r0, sp, #6
 800da60:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800da62:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800da64:	7043      	strb	r3, [r0, #1]
 800da66:	e7e3      	b.n	800da30 <USBD_StdDevReq+0x74>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800da68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da6a:	e7f7      	b.n	800da5c <USBD_StdDevReq+0xa0>
    switch ((uint8_t)(req->wValue))
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	2b05      	cmp	r3, #5
 800da70:	d809      	bhi.n	800da86 <USBD_StdDevReq+0xca>
 800da72:	e8df f003 	tbb	[pc, r3]
 800da76:	0c03      	.short	0x0c03
 800da78:	1c181410 	.word	0x1c181410
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800da7c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800da80:	685b      	ldr	r3, [r3, #4]
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1d0      	bne.n	800da28 <USBD_StdDevReq+0x6c>
      USBD_CtlError(pdev, req);
 800da86:	4620      	mov	r0, r4
 800da88:	f7ff ff8c 	bl	800d9a4 <USBD_CtlError.constprop.1>
 800da8c:	e041      	b.n	800db12 <USBD_StdDevReq+0x156>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800da8e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	e7f5      	b.n	800da82 <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800da96:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	e7f1      	b.n	800da82 <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800da9e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800daa2:	691b      	ldr	r3, [r3, #16]
 800daa4:	e7ed      	b.n	800da82 <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800daa6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800daaa:	695b      	ldr	r3, [r3, #20]
 800daac:	e7e9      	b.n	800da82 <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800daae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dab2:	699b      	ldr	r3, [r3, #24]
 800dab4:	e7e5      	b.n	800da82 <USBD_StdDevReq+0xc6>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dab6:	7c03      	ldrb	r3, [r0, #16]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d1e4      	bne.n	800da86 <USBD_StdDevReq+0xca>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800dabc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dac0:	f10d 0006 	add.w	r0, sp, #6
 800dac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac6:	4798      	blx	r3
 800dac8:	e7b2      	b.n	800da30 <USBD_StdDevReq+0x74>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800daca:	7c03      	ldrb	r3, [r0, #16]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d1da      	bne.n	800da86 <USBD_StdDevReq+0xca>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dad0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dad4:	f10d 0006 	add.w	r0, sp, #6
 800dad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dada:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dadc:	2307      	movs	r3, #7
 800dade:	e7c1      	b.n	800da64 <USBD_StdDevReq+0xa8>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dae0:	888b      	ldrh	r3, [r1, #4]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d1cf      	bne.n	800da86 <USBD_StdDevReq+0xca>
 800dae6:	88cf      	ldrh	r7, [r1, #6]
 800dae8:	2f00      	cmp	r7, #0
 800daea:	d1cc      	bne.n	800da86 <USBD_StdDevReq+0xca>
 800daec:	884d      	ldrh	r5, [r1, #2]
 800daee:	2d7f      	cmp	r5, #127	; 0x7f
 800daf0:	d8c9      	bhi.n	800da86 <USBD_StdDevReq+0xca>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daf2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800daf6:	2b03      	cmp	r3, #3
 800daf8:	d0c5      	beq.n	800da86 <USBD_StdDevReq+0xca>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dafa:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800dafc:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800db00:	f005 f82e 	bl	8012b60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800db04:	4620      	mov	r0, r4
 800db06:	f000 f9bb 	bl	800de80 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800db0a:	b125      	cbz	r5, 800db16 <USBD_StdDevReq+0x15a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800db0c:	2302      	movs	r3, #2
 800db0e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
  USBD_StatusTypeDef ret = USBD_OK;
 800db12:	2500      	movs	r5, #0
 800db14:	e774      	b.n	800da00 <USBD_StdDevReq+0x44>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800db16:	2301      	movs	r3, #1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800db18:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800db1c:	e770      	b.n	800da00 <USBD_StdDevReq+0x44>
  cfgidx = (uint8_t)(req->wValue);
 800db1e:	788d      	ldrb	r5, [r1, #2]
 800db20:	4e45      	ldr	r6, [pc, #276]	; (800dc38 <USBD_StdDevReq+0x27c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800db22:	2d01      	cmp	r5, #1
  cfgidx = (uint8_t)(req->wValue);
 800db24:	7035      	strb	r5, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800db26:	d903      	bls.n	800db30 <USBD_StdDevReq+0x174>
    USBD_CtlError(pdev, req);
 800db28:	f7ff ff3c 	bl	800d9a4 <USBD_CtlError.constprop.1>
    ret = USBD_FAIL;
 800db2c:	2503      	movs	r5, #3
 800db2e:	e767      	b.n	800da00 <USBD_StdDevReq+0x44>
  switch (pdev->dev_state)
 800db30:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800db34:	2b02      	cmp	r3, #2
 800db36:	d008      	beq.n	800db4a <USBD_StdDevReq+0x18e>
 800db38:	2b03      	cmp	r3, #3
 800db3a:	d016      	beq.n	800db6a <USBD_StdDevReq+0x1ae>
    USBD_CtlError(pdev, req);
 800db3c:	f7ff ff32 	bl	800d9a4 <USBD_CtlError.constprop.1>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db40:	7831      	ldrb	r1, [r6, #0]
 800db42:	4620      	mov	r0, r4
 800db44:	f7ff fe1a 	bl	800d77c <USBD_ClrClassConfig>
 800db48:	e7f0      	b.n	800db2c <USBD_StdDevReq+0x170>
    if (cfgidx != 0U)
 800db4a:	2d00      	cmp	r5, #0
 800db4c:	d061      	beq.n	800dc12 <USBD_StdDevReq+0x256>
      pdev->dev_config = cfgidx;
 800db4e:	2101      	movs	r1, #1
 800db50:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800db52:	f7ff fe0c 	bl	800d76e <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800db56:	4605      	mov	r5, r0
        USBD_CtlError(pdev, req);
 800db58:	4620      	mov	r0, r4
      if (ret != USBD_OK)
 800db5a:	b115      	cbz	r5, 800db62 <USBD_StdDevReq+0x1a6>
        USBD_CtlError(pdev, req);
 800db5c:	f7ff ff22 	bl	800d9a4 <USBD_CtlError.constprop.1>
 800db60:	e74e      	b.n	800da00 <USBD_StdDevReq+0x44>
        (void)USBD_CtlSendStatus(pdev);
 800db62:	f000 f98d 	bl	800de80 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800db66:	2303      	movs	r3, #3
 800db68:	e7d6      	b.n	800db18 <USBD_StdDevReq+0x15c>
    if (cfgidx == 0U)
 800db6a:	b955      	cbnz	r5, 800db82 <USBD_StdDevReq+0x1c6>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800db6c:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 800db6e:	6045      	str	r5, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db70:	4629      	mov	r1, r5
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800db72:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db76:	f7ff fe01 	bl	800d77c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800db7a:	4620      	mov	r0, r4
 800db7c:	f000 f980 	bl	800de80 <USBD_CtlSendStatus>
 800db80:	e73e      	b.n	800da00 <USBD_StdDevReq+0x44>
    else if (cfgidx != pdev->dev_config)
 800db82:	6841      	ldr	r1, [r0, #4]
 800db84:	2901      	cmp	r1, #1
 800db86:	d044      	beq.n	800dc12 <USBD_StdDevReq+0x256>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db88:	b2c9      	uxtb	r1, r1
 800db8a:	f7ff fdf7 	bl	800d77c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800db8e:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800db90:	4620      	mov	r0, r4
      pdev->dev_config = cfgidx;
 800db92:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800db94:	f7ff fdeb 	bl	800d76e <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800db98:	4605      	mov	r5, r0
 800db9a:	2800      	cmp	r0, #0
 800db9c:	d039      	beq.n	800dc12 <USBD_StdDevReq+0x256>
        USBD_CtlError(pdev, req);
 800db9e:	4620      	mov	r0, r4
 800dba0:	f7ff ff00 	bl	800d9a4 <USBD_CtlError.constprop.1>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dba4:	7921      	ldrb	r1, [r4, #4]
 800dba6:	4620      	mov	r0, r4
 800dba8:	f7ff fde8 	bl	800d77c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dbac:	2302      	movs	r3, #2
 800dbae:	e7b3      	b.n	800db18 <USBD_StdDevReq+0x15c>
  if (req->wLength != 1U)
 800dbb0:	88ca      	ldrh	r2, [r1, #6]
 800dbb2:	2a01      	cmp	r2, #1
 800dbb4:	f47f af67 	bne.w	800da86 <USBD_StdDevReq+0xca>
    switch (pdev->dev_state)
 800dbb8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	f43f af62 	beq.w	800da86 <USBD_StdDevReq+0xca>
 800dbc2:	2b02      	cmp	r3, #2
 800dbc4:	d904      	bls.n	800dbd0 <USBD_StdDevReq+0x214>
 800dbc6:	2b03      	cmp	r3, #3
 800dbc8:	f47f af5d 	bne.w	800da86 <USBD_StdDevReq+0xca>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dbcc:	1d01      	adds	r1, r0, #4
 800dbce:	e73c      	b.n	800da4a <USBD_StdDevReq+0x8e>
      pdev->dev_default_config = 0U;
 800dbd0:	2500      	movs	r5, #0
 800dbd2:	4601      	mov	r1, r0
 800dbd4:	f841 5f08 	str.w	r5, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dbd8:	f000 f926 	bl	800de28 <USBD_CtlSendData>
 800dbdc:	e710      	b.n	800da00 <USBD_StdDevReq+0x44>
  switch (pdev->dev_state)
 800dbde:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dbe2:	3b01      	subs	r3, #1
 800dbe4:	2b02      	cmp	r3, #2
 800dbe6:	f63f af4e 	bhi.w	800da86 <USBD_StdDevReq+0xca>
    if (req->wLength != 0x2U)
 800dbea:	88cb      	ldrh	r3, [r1, #6]
 800dbec:	2b02      	cmp	r3, #2
 800dbee:	f47f af4a 	bne.w	800da86 <USBD_StdDevReq+0xca>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 800dbf6:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800dbfa:	b10b      	cbz	r3, 800dc00 <USBD_StdDevReq+0x244>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dbfc:	2303      	movs	r3, #3
 800dbfe:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dc00:	2202      	movs	r2, #2
 800dc02:	f104 010c 	add.w	r1, r4, #12
 800dc06:	e720      	b.n	800da4a <USBD_StdDevReq+0x8e>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc08:	884b      	ldrh	r3, [r1, #2]
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d181      	bne.n	800db12 <USBD_StdDevReq+0x156>
    pdev->dev_remote_wakeup = 1U;
 800dc0e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dc12:	4620      	mov	r0, r4
 800dc14:	f000 f934 	bl	800de80 <USBD_CtlSendStatus>
 800dc18:	e77b      	b.n	800db12 <USBD_StdDevReq+0x156>
  switch (pdev->dev_state)
 800dc1a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dc1e:	3b01      	subs	r3, #1
 800dc20:	2b02      	cmp	r3, #2
 800dc22:	f63f af30 	bhi.w	800da86 <USBD_StdDevReq+0xca>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc26:	884b      	ldrh	r3, [r1, #2]
 800dc28:	2500      	movs	r5, #0
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	f47f aee8 	bne.w	800da00 <USBD_StdDevReq+0x44>
        pdev->dev_remote_wakeup = 0U;
 800dc30:	f8c0 52a4 	str.w	r5, [r0, #676]	; 0x2a4
 800dc34:	e7a1      	b.n	800db7a <USBD_StdDevReq+0x1be>
 800dc36:	bf00      	nop
 800dc38:	24001678 	.word	0x24001678

0800dc3c <USBD_StdItfReq>:
{
 800dc3c:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc3e:	780b      	ldrb	r3, [r1, #0]
{
 800dc40:	4604      	mov	r4, r0
 800dc42:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc48:	2b20      	cmp	r3, #32
 800dc4a:	d002      	beq.n	800dc52 <USBD_StdItfReq+0x16>
 800dc4c:	2b40      	cmp	r3, #64	; 0x40
 800dc4e:	d000      	beq.n	800dc52 <USBD_StdItfReq+0x16>
 800dc50:	b9b3      	cbnz	r3, 800dc80 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 800dc52:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800dc56:	3b01      	subs	r3, #1
 800dc58:	2b02      	cmp	r3, #2
 800dc5a:	d811      	bhi.n	800dc80 <USBD_StdItfReq+0x44>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dc5c:	7933      	ldrb	r3, [r6, #4]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d80e      	bhi.n	800dc80 <USBD_StdItfReq+0x44>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dc62:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800dc66:	4631      	mov	r1, r6
 800dc68:	4620      	mov	r0, r4
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800dc6e:	88f3      	ldrh	r3, [r6, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dc70:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800dc72:	b91b      	cbnz	r3, 800dc7c <USBD_StdItfReq+0x40>
 800dc74:	b910      	cbnz	r0, 800dc7c <USBD_StdItfReq+0x40>
          (void)USBD_CtlSendStatus(pdev);
 800dc76:	4620      	mov	r0, r4
 800dc78:	f000 f902 	bl	800de80 <USBD_CtlSendStatus>
}
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	bd70      	pop	{r4, r5, r6, pc}
      USBD_CtlError(pdev, req);
 800dc80:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800dc82:	2500      	movs	r5, #0
      USBD_CtlError(pdev, req);
 800dc84:	f7ff fe8e 	bl	800d9a4 <USBD_CtlError.constprop.1>
      break;
 800dc88:	e7f8      	b.n	800dc7c <USBD_StdItfReq+0x40>

0800dc8a <USBD_StdEPReq>:
{
 800dc8a:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc8c:	780b      	ldrb	r3, [r1, #0]
{
 800dc8e:	4604      	mov	r4, r0
 800dc90:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc96:	2b20      	cmp	r3, #32
 800dc98:	d014      	beq.n	800dcc4 <USBD_StdEPReq+0x3a>
 800dc9a:	2b40      	cmp	r3, #64	; 0x40
 800dc9c:	d012      	beq.n	800dcc4 <USBD_StdEPReq+0x3a>
 800dc9e:	b96b      	cbnz	r3, 800dcbc <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 800dca0:	786a      	ldrb	r2, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 800dca2:	888b      	ldrh	r3, [r1, #4]
    switch (req->bRequest)
 800dca4:	2a01      	cmp	r2, #1
  ep_addr = LOBYTE(req->wIndex);
 800dca6:	b2d9      	uxtb	r1, r3
    switch (req->bRequest)
 800dca8:	d021      	beq.n	800dcee <USBD_StdEPReq+0x64>
 800dcaa:	d340      	bcc.n	800dd2e <USBD_StdEPReq+0xa4>
 800dcac:	2a03      	cmp	r2, #3
 800dcae:	d105      	bne.n	800dcbc <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 800dcb0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dcb4:	2b02      	cmp	r3, #2
 800dcb6:	d031      	beq.n	800dd1c <USBD_StdEPReq+0x92>
 800dcb8:	2b03      	cmp	r3, #3
 800dcba:	d00b      	beq.n	800dcd4 <USBD_StdEPReq+0x4a>
        USBD_CtlError(pdev, req);
 800dcbc:	4620      	mov	r0, r4
 800dcbe:	f7ff fe71 	bl	800d9a4 <USBD_CtlError.constprop.1>
        break;
 800dcc2:	e012      	b.n	800dcea <USBD_StdEPReq+0x60>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dcc4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800dcc8:	4629      	mov	r1, r5
 800dcca:	4620      	mov	r0, r4
 800dccc:	689b      	ldr	r3, [r3, #8]
}
 800dcce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dcd2:	4718      	bx	r3
        if (req->wValue == USB_FEATURE_EP_HALT)
 800dcd4:	886b      	ldrh	r3, [r5, #2]
 800dcd6:	b92b      	cbnz	r3, 800dce4 <USBD_StdEPReq+0x5a>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dcd8:	064a      	lsls	r2, r1, #25
 800dcda:	d003      	beq.n	800dce4 <USBD_StdEPReq+0x5a>
 800dcdc:	88eb      	ldrh	r3, [r5, #6]
 800dcde:	b90b      	cbnz	r3, 800dce4 <USBD_StdEPReq+0x5a>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800dce0:	f004 ff0e 	bl	8012b00 <USBD_LL_StallEP>
        (void)USBD_CtlSendStatus(pdev);
 800dce4:	4620      	mov	r0, r4
 800dce6:	f000 f8cb 	bl	800de80 <USBD_CtlSendStatus>
}
 800dcea:	2000      	movs	r0, #0
 800dcec:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800dcee:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dcf2:	2b02      	cmp	r3, #2
 800dcf4:	d012      	beq.n	800dd1c <USBD_StdEPReq+0x92>
 800dcf6:	2b03      	cmp	r3, #3
 800dcf8:	d1e0      	bne.n	800dcbc <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800dcfa:	886b      	ldrh	r3, [r5, #2]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d1f4      	bne.n	800dcea <USBD_StdEPReq+0x60>
          if ((ep_addr & 0x7FU) != 0x00U)
 800dd00:	064e      	lsls	r6, r1, #25
 800dd02:	d001      	beq.n	800dd08 <USBD_StdEPReq+0x7e>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dd04:	f004 ff0a 	bl	8012b1c <USBD_LL_ClearStallEP>
          (void)USBD_CtlSendStatus(pdev);
 800dd08:	4620      	mov	r0, r4
 800dd0a:	f000 f8b9 	bl	800de80 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd0e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800dd12:	4629      	mov	r1, r5
 800dd14:	4620      	mov	r0, r4
 800dd16:	689b      	ldr	r3, [r3, #8]
 800dd18:	4798      	blx	r3
 800dd1a:	e7e6      	b.n	800dcea <USBD_StdEPReq+0x60>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd1c:	064b      	lsls	r3, r1, #25
 800dd1e:	d0cd      	beq.n	800dcbc <USBD_StdEPReq+0x32>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd20:	f004 feee 	bl	8012b00 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd24:	2180      	movs	r1, #128	; 0x80
 800dd26:	4620      	mov	r0, r4
 800dd28:	f004 feea 	bl	8012b00 <USBD_LL_StallEP>
 800dd2c:	e7dd      	b.n	800dcea <USBD_StdEPReq+0x60>
      switch (pdev->dev_state)
 800dd2e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800dd32:	2a02      	cmp	r2, #2
 800dd34:	d019      	beq.n	800dd6a <USBD_StdEPReq+0xe0>
 800dd36:	2a03      	cmp	r2, #3
 800dd38:	d1c0      	bne.n	800dcbc <USBD_StdEPReq+0x32>
 800dd3a:	f001 020f 	and.w	r2, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 800dd3e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dd42:	f04f 0314 	mov.w	r3, #20
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dd46:	fb03 0202 	mla	r2, r3, r2, r0
        if ((ep_addr & 0x80U) == 0x80U)
 800dd4a:	d01f      	beq.n	800dd8c <USBD_StdEPReq+0x102>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dd4c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800dd4e:	2a00      	cmp	r2, #0
 800dd50:	d0b4      	beq.n	800dcbc <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd52:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800dd56:	fb05 3503 	mla	r5, r5, r3, r3
 800dd5a:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dd5c:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800dd60:	d11f      	bne.n	800dda2 <USBD_StdEPReq+0x118>
            pep->status = 0x0001U;
 800dd62:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dd64:	2202      	movs	r2, #2
 800dd66:	4629      	mov	r1, r5
 800dd68:	e00c      	b.n	800dd84 <USBD_StdEPReq+0xfa>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd6a:	064a      	lsls	r2, r1, #25
 800dd6c:	d1a6      	bne.n	800dcbc <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd6e:	061b      	lsls	r3, r3, #24
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dd70:	f04f 0202 	mov.w	r2, #2
        pep->status = 0x0000U;
 800dd74:	f04f 0300 	mov.w	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd78:	bf4c      	ite	mi
 800dd7a:	f100 0114 	addmi.w	r1, r0, #20
 800dd7e:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
        pep->status = 0x0000U;
 800dd82:	600b      	str	r3, [r1, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dd84:	4620      	mov	r0, r4
 800dd86:	f000 f84f 	bl	800de28 <USBD_CtlSendData>
          break;
 800dd8a:	e7ae      	b.n	800dcea <USBD_StdEPReq+0x60>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dd8c:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800dd90:	2a00      	cmp	r2, #0
 800dd92:	d093      	beq.n	800dcbc <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd94:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800dd98:	fb03 0505 	mla	r5, r3, r5, r0
 800dd9c:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800dda0:	e7dc      	b.n	800dd5c <USBD_StdEPReq+0xd2>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dda2:	4620      	mov	r0, r4
 800dda4:	f004 fec8 	bl	8012b38 <USBD_LL_IsStallEP>
 800dda8:	b108      	cbz	r0, 800ddae <USBD_StdEPReq+0x124>
            pep->status = 0x0001U;
 800ddaa:	2301      	movs	r3, #1
 800ddac:	e7d9      	b.n	800dd62 <USBD_StdEPReq+0xd8>
            pep->status = 0x0000U;
 800ddae:	6028      	str	r0, [r5, #0]
 800ddb0:	e7d8      	b.n	800dd64 <USBD_StdEPReq+0xda>

0800ddb2 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800ddb2:	780b      	ldrb	r3, [r1, #0]
 800ddb4:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800ddb6:	784b      	ldrb	r3, [r1, #1]
 800ddb8:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ddba:	78ca      	ldrb	r2, [r1, #3]
 800ddbc:	788b      	ldrb	r3, [r1, #2]
 800ddbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800ddc2:	8043      	strh	r3, [r0, #2]
 800ddc4:	794a      	ldrb	r2, [r1, #5]
 800ddc6:	790b      	ldrb	r3, [r1, #4]
 800ddc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800ddcc:	8083      	strh	r3, [r0, #4]
 800ddce:	79ca      	ldrb	r2, [r1, #7]
 800ddd0:	798b      	ldrb	r3, [r1, #6]
 800ddd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800ddd6:	80c3      	strh	r3, [r0, #6]
}
 800ddd8:	4770      	bx	lr

0800ddda <USBD_CtlError>:
{
 800ddda:	b510      	push	{r4, lr}
 800dddc:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddde:	2180      	movs	r1, #128	; 0x80
 800dde0:	f004 fe8e 	bl	8012b00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dde4:	2100      	movs	r1, #0
 800dde6:	4620      	mov	r0, r4
}
 800dde8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800ddec:	f004 be88 	b.w	8012b00 <USBD_LL_StallEP>

0800ddf0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ddf0:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800ddf2:	b188      	cbz	r0, 800de18 <USBD_GetString+0x28>
 800ddf4:	4605      	mov	r5, r0
 800ddf6:	1a2b      	subs	r3, r5, r0
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800ddf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	2c00      	cmp	r4, #0
 800de00:	d1f9      	bne.n	800ddf6 <USBD_GetString+0x6>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800de02:	3301      	adds	r3, #1
 800de04:	3801      	subs	r0, #1
 800de06:	005b      	lsls	r3, r3, #1
 800de08:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800de0a:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800de0c:	2303      	movs	r3, #3
 800de0e:	704b      	strb	r3, [r1, #1]
  idx++;
 800de10:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800de12:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800de16:	b902      	cbnz	r2, 800de1a <USBD_GetString+0x2a>
}
 800de18:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 800de1a:	54ca      	strb	r2, [r1, r3]
    idx++;
 800de1c:	1c5a      	adds	r2, r3, #1
    idx++;
 800de1e:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800de20:	b2d2      	uxtb	r2, r2
    idx++;
 800de22:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800de24:	548c      	strb	r4, [r1, r2]
 800de26:	e7f4      	b.n	800de12 <USBD_GetString+0x22>

0800de28 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800de28:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800de2a:	2202      	movs	r2, #2
{
 800de2c:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800de2e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de32:	460a      	mov	r2, r1
 800de34:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length = len;
 800de36:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de3a:	f004 fe9f 	bl	8012b7c <USBD_LL_Transmit>

  return USBD_OK;
}
 800de3e:	2000      	movs	r0, #0
 800de40:	bd10      	pop	{r4, pc}

0800de42 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800de42:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de44:	4613      	mov	r3, r2
 800de46:	460a      	mov	r2, r1
 800de48:	2100      	movs	r1, #0
 800de4a:	f004 fe97 	bl	8012b7c <USBD_LL_Transmit>

  return USBD_OK;
}
 800de4e:	2000      	movs	r0, #0
 800de50:	bd08      	pop	{r3, pc}

0800de52 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800de52:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800de54:	2203      	movs	r2, #3
{
 800de56:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800de58:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800de5c:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 800de5e:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800de62:	2100      	movs	r1, #0
  pdev->ep_out[0].rem_length = len;
 800de64:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800de68:	f004 fe96 	bl	8012b98 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800de6c:	2000      	movs	r0, #0
 800de6e:	bd10      	pop	{r4, pc}

0800de70 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800de70:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800de72:	4613      	mov	r3, r2
 800de74:	460a      	mov	r2, r1
 800de76:	2100      	movs	r1, #0
 800de78:	f004 fe8e 	bl	8012b98 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800de7c:	2000      	movs	r0, #0
 800de7e:	bd08      	pop	{r3, pc}

0800de80 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800de80:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800de82:	2304      	movs	r3, #4
 800de84:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800de88:	2300      	movs	r3, #0
 800de8a:	461a      	mov	r2, r3
 800de8c:	4619      	mov	r1, r3
 800de8e:	f004 fe75 	bl	8012b7c <USBD_LL_Transmit>

  return USBD_OK;
}
 800de92:	2000      	movs	r0, #0
 800de94:	bd08      	pop	{r3, pc}

0800de96 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800de96:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800de98:	2305      	movs	r3, #5
 800de9a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de9e:	2300      	movs	r3, #0
 800dea0:	461a      	mov	r2, r3
 800dea2:	4619      	mov	r1, r3
 800dea4:	f004 fe78 	bl	8012b98 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800dea8:	2000      	movs	r0, #0
 800deaa:	bd08      	pop	{r3, pc}

0800deac <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800deac:	4b03      	ldr	r3, [pc, #12]	; (800debc <disk_status+0x10>)
 800deae:	181a      	adds	r2, r3, r0
 800deb0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	7a10      	ldrb	r0, [r2, #8]
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	4718      	bx	r3
 800debc:	240016a4 	.word	0x240016a4

0800dec0 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800dec0:	4b06      	ldr	r3, [pc, #24]	; (800dedc <disk_initialize+0x1c>)
 800dec2:	5c1a      	ldrb	r2, [r3, r0]
 800dec4:	b942      	cbnz	r2, 800ded8 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 800dec6:	2201      	movs	r2, #1
 800dec8:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800deca:	181a      	adds	r2, r3, r0
 800decc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ded0:	7a10      	ldrb	r0, [r2, #8]
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	4718      	bx	r3
  }
  return stat;
}
 800ded8:	2000      	movs	r0, #0
 800deda:	4770      	bx	lr
 800dedc:	240016a4 	.word	0x240016a4

0800dee0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800dee0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dee2:	4c05      	ldr	r4, [pc, #20]	; (800def8 <disk_read+0x18>)
 800dee4:	1825      	adds	r5, r4, r0
 800dee6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800deea:	6860      	ldr	r0, [r4, #4]
 800deec:	6884      	ldr	r4, [r0, #8]
 800deee:	7a28      	ldrb	r0, [r5, #8]
 800def0:	46a4      	mov	ip, r4
  return res;
}
 800def2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800def4:	4760      	bx	ip
 800def6:	bf00      	nop
 800def8:	240016a4 	.word	0x240016a4

0800defc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800defc:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800defe:	4c05      	ldr	r4, [pc, #20]	; (800df14 <disk_write+0x18>)
 800df00:	1825      	adds	r5, r4, r0
 800df02:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800df06:	6860      	ldr	r0, [r4, #4]
 800df08:	68c4      	ldr	r4, [r0, #12]
 800df0a:	7a28      	ldrb	r0, [r5, #8]
 800df0c:	46a4      	mov	ip, r4
  return res;
}
 800df0e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800df10:	4760      	bx	ip
 800df12:	bf00      	nop
 800df14:	240016a4 	.word	0x240016a4

0800df18 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800df18:	4b05      	ldr	r3, [pc, #20]	; (800df30 <disk_ioctl+0x18>)
{
 800df1a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800df1c:	181c      	adds	r4, r3, r0
 800df1e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	7a20      	ldrb	r0, [r4, #8]
 800df26:	691b      	ldr	r3, [r3, #16]
  return res;
}
 800df28:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800df2c:	4718      	bx	r3
 800df2e:	bf00      	nop
 800df30:	240016a4 	.word	0x240016a4

0800df34 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 800df34:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 800df36:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 800df38:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 800df3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 800df3e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800df42:	4770      	bx	lr

0800df44 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800df44:	0a0b      	lsrs	r3, r1, #8
 800df46:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800df48:	7043      	strb	r3, [r0, #1]
 800df4a:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800df4c:	0e09      	lsrs	r1, r1, #24
 800df4e:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800df50:	70c1      	strb	r1, [r0, #3]
}
 800df52:	4770      	bx	lr

0800df54 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800df54:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800df56:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 800df5a:	4290      	cmp	r0, r2
 800df5c:	d1fb      	bne.n	800df56 <mem_set+0x2>
}
 800df5e:	4770      	bx	lr

0800df60 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800df60:	4a1b      	ldr	r2, [pc, #108]	; (800dfd0 <chk_lock+0x70>)
 800df62:	6813      	ldr	r3, [r2, #0]
{
 800df64:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 800df66:	b163      	cbz	r3, 800df82 <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800df68:	6804      	ldr	r4, [r0, #0]
 800df6a:	429c      	cmp	r4, r3
 800df6c:	d107      	bne.n	800df7e <chk_lock+0x1e>
 800df6e:	6854      	ldr	r4, [r2, #4]
 800df70:	6883      	ldr	r3, [r0, #8]
 800df72:	429c      	cmp	r4, r3
 800df74:	d103      	bne.n	800df7e <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 800df76:	6894      	ldr	r4, [r2, #8]
 800df78:	6943      	ldr	r3, [r0, #20]
 800df7a:	429c      	cmp	r4, r3
 800df7c:	d020      	beq.n	800dfc0 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800df7e:	2400      	movs	r4, #0
 800df80:	e000      	b.n	800df84 <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 800df82:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 800df84:	6913      	ldr	r3, [r2, #16]
 800df86:	b1cb      	cbz	r3, 800dfbc <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800df88:	6805      	ldr	r5, [r0, #0]
 800df8a:	42ab      	cmp	r3, r5
 800df8c:	d107      	bne.n	800df9e <chk_lock+0x3e>
 800df8e:	6955      	ldr	r5, [r2, #20]
 800df90:	6883      	ldr	r3, [r0, #8]
 800df92:	429d      	cmp	r5, r3
 800df94:	d103      	bne.n	800df9e <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 800df96:	6995      	ldr	r5, [r2, #24]
 800df98:	6943      	ldr	r3, [r0, #20]
 800df9a:	429d      	cmp	r5, r3
 800df9c:	d015      	beq.n	800dfca <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800df9e:	b96c      	cbnz	r4, 800dfbc <chk_lock+0x5c>
 800dfa0:	2902      	cmp	r1, #2
 800dfa2:	bf0c      	ite	eq
 800dfa4:	2000      	moveq	r0, #0
 800dfa6:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 800dfa8:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800dfaa:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800dfae:	8993      	ldrh	r3, [r2, #12]
 800dfb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfb4:	bf14      	ite	ne
 800dfb6:	2000      	movne	r0, #0
 800dfb8:	2010      	moveq	r0, #16
 800dfba:	e7f5      	b.n	800dfa8 <chk_lock+0x48>
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	e7f3      	b.n	800dfa8 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dfc0:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800dfc2:	2900      	cmp	r1, #0
 800dfc4:	d0f1      	beq.n	800dfaa <chk_lock+0x4a>
 800dfc6:	2010      	movs	r0, #16
 800dfc8:	e7ee      	b.n	800dfa8 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e7f9      	b.n	800dfc2 <chk_lock+0x62>
 800dfce:	bf00      	nop
 800dfd0:	24001680 	.word	0x24001680

0800dfd4 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800dfd4:	4a1e      	ldr	r2, [pc, #120]	; (800e050 <inc_lock+0x7c>)
{
 800dfd6:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 800dfd8:	6813      	ldr	r3, [r2, #0]
 800dfda:	6805      	ldr	r5, [r0, #0]
 800dfdc:	429d      	cmp	r5, r3
 800dfde:	d107      	bne.n	800dff0 <inc_lock+0x1c>
 800dfe0:	6856      	ldr	r6, [r2, #4]
 800dfe2:	6884      	ldr	r4, [r0, #8]
 800dfe4:	42a6      	cmp	r6, r4
 800dfe6:	d103      	bne.n	800dff0 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 800dfe8:	6946      	ldr	r6, [r0, #20]
 800dfea:	6894      	ldr	r4, [r2, #8]
 800dfec:	42a6      	cmp	r6, r4
 800dfee:	d021      	beq.n	800e034 <inc_lock+0x60>
		if (Files[i].fs == dp->obj.fs &&
 800dff0:	6914      	ldr	r4, [r2, #16]
 800dff2:	42ac      	cmp	r4, r5
 800dff4:	d107      	bne.n	800e006 <inc_lock+0x32>
 800dff6:	6957      	ldr	r7, [r2, #20]
 800dff8:	6886      	ldr	r6, [r0, #8]
 800dffa:	42b7      	cmp	r7, r6
 800dffc:	d103      	bne.n	800e006 <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 800dffe:	6997      	ldr	r7, [r2, #24]
 800e000:	6946      	ldr	r6, [r0, #20]
 800e002:	42b7      	cmp	r7, r6
 800e004:	d020      	beq.n	800e048 <inc_lock+0x74>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e006:	b10b      	cbz	r3, 800e00c <inc_lock+0x38>
 800e008:	bb04      	cbnz	r4, 800e04c <inc_lock+0x78>
 800e00a:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 800e00c:	011e      	lsls	r6, r3, #4
 800e00e:	1994      	adds	r4, r2, r6
 800e010:	5195      	str	r5, [r2, r6]
		Files[i].clu = dp->obj.sclust;
 800e012:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 800e014:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 800e016:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 800e018:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 800e01a:	2000      	movs	r0, #0
 800e01c:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e01e:	b981      	cbnz	r1, 800e042 <inc_lock+0x6e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e020:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 800e024:	8989      	ldrh	r1, [r1, #12]
 800e026:	3101      	adds	r1, #1
 800e028:	b289      	uxth	r1, r1
 800e02a:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 800e02e:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e030:	8191      	strh	r1, [r2, #12]
}
 800e032:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e034:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e036:	2900      	cmp	r1, #0
 800e038:	d0f2      	beq.n	800e020 <inc_lock+0x4c>
 800e03a:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 800e03e:	8989      	ldrh	r1, [r1, #12]
 800e040:	b921      	cbnz	r1, 800e04c <inc_lock+0x78>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e042:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e046:	e7f0      	b.n	800e02a <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e048:	2301      	movs	r3, #1
 800e04a:	e7f4      	b.n	800e036 <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e04c:	2000      	movs	r0, #0
 800e04e:	e7f0      	b.n	800e032 <inc_lock+0x5e>
 800e050:	24001680 	.word	0x24001680

0800e054 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e054:	3801      	subs	r0, #1
 800e056:	2801      	cmp	r0, #1
 800e058:	d814      	bhi.n	800e084 <dec_lock+0x30>
		n = Files[i].ctr;
 800e05a:	490b      	ldr	r1, [pc, #44]	; (800e088 <dec_lock+0x34>)
 800e05c:	0102      	lsls	r2, r0, #4
 800e05e:	1888      	adds	r0, r1, r2
 800e060:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e066:	d104      	bne.n	800e072 <dec_lock+0x1e>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 800e068:	2300      	movs	r3, #0
 800e06a:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e06c:	2000      	movs	r0, #0
 800e06e:	5088      	str	r0, [r1, r2]
 800e070:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 800e072:	2b00      	cmp	r3, #0
 800e074:	d0fa      	beq.n	800e06c <dec_lock+0x18>
 800e076:	3b01      	subs	r3, #1
 800e078:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 800e07a:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d0f5      	beq.n	800e06c <dec_lock+0x18>
		res = FR_OK;
 800e080:	2000      	movs	r0, #0
 800e082:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e084:	2002      	movs	r0, #2
	}
	return res;
}
 800e086:	4770      	bx	lr
 800e088:	24001680 	.word	0x24001680

0800e08c <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e08c:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 800e08e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e090:	3b02      	subs	r3, #2
 800e092:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 800e094:	bf83      	ittte	hi
 800e096:	8943      	ldrhhi	r3, [r0, #10]
 800e098:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
 800e09a:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e09e:	2000      	movls	r0, #0
}
 800e0a0:	4770      	bx	lr

0800e0a2 <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e0a2:	6802      	ldr	r2, [r0, #0]
 800e0a4:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e0a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e0a8:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e0aa:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e0ac:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e0b0:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e0b2:	b130      	cbz	r0, 800e0c2 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 800e0b4:	4281      	cmp	r1, r0
 800e0b6:	d302      	bcc.n	800e0be <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 800e0b8:	1a09      	subs	r1, r1, r0
 800e0ba:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e0bc:	e7f8      	b.n	800e0b0 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 800e0be:	6858      	ldr	r0, [r3, #4]
 800e0c0:	4408      	add	r0, r1
}
 800e0c2:	4770      	bx	lr

0800e0c4 <get_achar>:
)
{
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800e0c4:	6803      	ldr	r3, [r0, #0]
 800e0c6:	1c5a      	adds	r2, r3, #1
 800e0c8:	6002      	str	r2, [r0, #0]
 800e0ca:	781a      	ldrb	r2, [r3, #0]
 800e0cc:	b290      	uxth	r0, r2
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800e0ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e0d2:	2b19      	cmp	r3, #25
 800e0d4:	d802      	bhi.n	800e0dc <get_achar+0x18>
 800e0d6:	3820      	subs	r0, #32
 800e0d8:	b280      	uxth	r0, r0
 800e0da:	4770      	bx	lr
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800e0dc:	287f      	cmp	r0, #127	; 0x7f
 800e0de:	bf82      	ittt	hi
 800e0e0:	4b02      	ldrhi	r3, [pc, #8]	; (800e0ec <get_achar+0x28>)
 800e0e2:	189b      	addhi	r3, r3, r2
 800e0e4:	f813 0c80 	ldrbhi.w	r0, [r3, #-128]
#endif
	return chr;
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800e0e8:	4770      	bx	lr
 800e0ea:	bf00      	nop
 800e0ec:	0801556c 	.word	0x0801556c

0800e0f0 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800e0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0f2:	b085      	sub	sp, #20
 800e0f4:	4605      	mov	r5, r0
 800e0f6:	461e      	mov	r6, r3
 800e0f8:	ac04      	add	r4, sp, #16
 800e0fa:	f844 1d0c 	str.w	r1, [r4, #-12]!
 800e0fe:	4611      	mov	r1, r2
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800e100:	b929      	cbnz	r1, 800e10e <pattern_matching+0x1e>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800e102:	782b      	ldrb	r3, [r5, #0]
 800e104:	b95b      	cbnz	r3, 800e11e <pattern_matching+0x2e>
 800e106:	b156      	cbz	r6, 800e11e <pattern_matching+0x2e>
 800e108:	2001      	movs	r0, #1
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800e10a:	b005      	add	sp, #20
 800e10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800e10e:	4620      	mov	r0, r4
 800e110:	f7ff ffd8 	bl	800e0c4 <get_achar>
 800e114:	3901      	subs	r1, #1
 800e116:	2800      	cmp	r0, #0
 800e118:	d1f2      	bne.n	800e100 <pattern_matching+0x10>
 800e11a:	2000      	movs	r0, #0
 800e11c:	e7f5      	b.n	800e10a <pattern_matching+0x1a>
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800e11e:	ac04      	add	r4, sp, #16
 800e120:	9b01      	ldr	r3, [sp, #4]
 800e122:	9502      	str	r5, [sp, #8]
 800e124:	f844 3d04 	str.w	r3, [r4, #-4]!
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800e128:	9b02      	ldr	r3, [sp, #8]
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	2b3f      	cmp	r3, #63	; 0x3f
 800e12e:	d001      	beq.n	800e134 <pattern_matching+0x44>
 800e130:	2b2a      	cmp	r3, #42	; 0x2a
 800e132:	d11d      	bne.n	800e170 <pattern_matching+0x80>
 800e134:	2300      	movs	r3, #0
 800e136:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800e138:	9902      	ldr	r1, [sp, #8]
 800e13a:	1c48      	adds	r0, r1, #1
 800e13c:	9002      	str	r0, [sp, #8]
 800e13e:	780c      	ldrb	r4, [r1, #0]
				} while (*pp == '?' || *pp == '*');
 800e140:	7849      	ldrb	r1, [r1, #1]
					if (*pp++ == '?') nm++; else nx = 1;
 800e142:	2c3f      	cmp	r4, #63	; 0x3f
 800e144:	bf0c      	ite	eq
 800e146:	3201      	addeq	r2, #1
 800e148:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800e14a:	293f      	cmp	r1, #63	; 0x3f
 800e14c:	d0f4      	beq.n	800e138 <pattern_matching+0x48>
 800e14e:	292a      	cmp	r1, #42	; 0x2a
 800e150:	d0f2      	beq.n	800e138 <pattern_matching+0x48>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800e152:	9903      	ldr	r1, [sp, #12]
 800e154:	f7ff ffcc 	bl	800e0f0 <pattern_matching>
 800e158:	2800      	cmp	r0, #0
 800e15a:	d1d5      	bne.n	800e108 <pattern_matching+0x18>
				nc = *np; break;	/* Branch mismatched */
 800e15c:	9b03      	ldr	r3, [sp, #12]
 800e15e:	7819      	ldrb	r1, [r3, #0]
		get_achar(&nam);			/* nam++ */
 800e160:	a801      	add	r0, sp, #4
 800e162:	f7ff ffaf 	bl	800e0c4 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800e166:	2e00      	cmp	r6, #0
 800e168:	d0d7      	beq.n	800e11a <pattern_matching+0x2a>
 800e16a:	2900      	cmp	r1, #0
 800e16c:	d1d7      	bne.n	800e11e <pattern_matching+0x2e>
 800e16e:	e7d4      	b.n	800e11a <pattern_matching+0x2a>
			pc = get_achar(&pp);	/* Get a pattern char */
 800e170:	a802      	add	r0, sp, #8
 800e172:	f7ff ffa7 	bl	800e0c4 <get_achar>
 800e176:	4607      	mov	r7, r0
			nc = get_achar(&np);	/* Get a name char */
 800e178:	4620      	mov	r0, r4
 800e17a:	f7ff ffa3 	bl	800e0c4 <get_achar>
			if (pc != nc) break;	/* Branch mismatched? */
 800e17e:	4287      	cmp	r7, r0
			nc = get_achar(&np);	/* Get a name char */
 800e180:	4601      	mov	r1, r0
			if (pc != nc) break;	/* Branch mismatched? */
 800e182:	d1ed      	bne.n	800e160 <pattern_matching+0x70>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800e184:	2f00      	cmp	r7, #0
 800e186:	d1cf      	bne.n	800e128 <pattern_matching+0x38>
 800e188:	e7be      	b.n	800e108 <pattern_matching+0x18>

0800e18a <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e18a:	6802      	ldr	r2, [r0, #0]
{
 800e18c:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 800e18e:	b152      	cbz	r2, 800e1a6 <get_ldnumber+0x1c>
 800e190:	4611      	mov	r1, r2
 800e192:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e194:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e198:	2c20      	cmp	r4, #32
 800e19a:	d90c      	bls.n	800e1b6 <get_ldnumber+0x2c>
 800e19c:	2c3a      	cmp	r4, #58	; 0x3a
 800e19e:	d1f8      	bne.n	800e192 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 800e1a0:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e1a2:	428b      	cmp	r3, r1
 800e1a4:	d002      	beq.n	800e1ac <get_ldnumber+0x22>
	int vol = -1;
 800e1a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e1aa:	e005      	b.n	800e1b8 <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e1ac:	7812      	ldrb	r2, [r2, #0]
 800e1ae:	2a30      	cmp	r2, #48	; 0x30
 800e1b0:	d1f9      	bne.n	800e1a6 <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e1b6:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800e1b8:	bd10      	pop	{r4, pc}

0800e1ba <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e1ba:	3801      	subs	r0, #1
 800e1bc:	440a      	add	r2, r1
			*d++ = *s++;
 800e1be:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800e1c2:	4291      	cmp	r1, r2
			*d++ = *s++;
 800e1c4:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800e1c8:	d1f9      	bne.n	800e1be <mem_cpy.part.0+0x4>
}
 800e1ca:	4770      	bx	lr

0800e1cc <ld_clust.isra.1>:
	if (fs->fs_type == FS_FAT32) {
 800e1cc:	2803      	cmp	r0, #3
	rv = rv << 8 | ptr[0];
 800e1ce:	7eca      	ldrb	r2, [r1, #27]
 800e1d0:	7e8b      	ldrb	r3, [r1, #26]
 800e1d2:	bf08      	it	eq
 800e1d4:	7d48      	ldrbeq	r0, [r1, #21]
	cl = ld_word(dir + DIR_FstClusLO);
 800e1d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800e1da:	bf02      	ittt	eq
 800e1dc:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e1de:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 800e1e2:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	4770      	bx	lr

0800e1ea <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 800e1ea:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e1ee:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800e1f0:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 800e1f2:	7803      	ldrb	r3, [r0, #0]
 800e1f4:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e1f6:	bf01      	itttt	eq
 800e1f8:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800e1fa:	750a      	strbeq	r2, [r1, #20]
 800e1fc:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800e1fe:	754a      	strbeq	r2, [r1, #21]
}
 800e200:	4770      	bx	lr

0800e202 <get_fileinfo.part.3>:
void get_fileinfo (		/* No return code */
 800e202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		c = (TCHAR)dp->dir[i++];
 800e204:	6a04      	ldr	r4, [r0, #32]
	i = j = 0;
 800e206:	2300      	movs	r3, #0
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e208:	262e      	movs	r6, #46	; 0x2e
 800e20a:	1e65      	subs	r5, r4, #1
	i = j = 0;
 800e20c:	4618      	mov	r0, r3
		c = (TCHAR)dp->dir[i++];
 800e20e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800e212:	3001      	adds	r0, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800e214:	2a20      	cmp	r2, #32
 800e216:	d00a      	beq.n	800e22e <get_fileinfo.part.3+0x2c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e218:	2a05      	cmp	r2, #5
 800e21a:	bf08      	it	eq
 800e21c:	22e5      	moveq	r2, #229	; 0xe5
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e21e:	2809      	cmp	r0, #9
 800e220:	bf02      	ittt	eq
 800e222:	18cf      	addeq	r7, r1, r3
 800e224:	3301      	addeq	r3, #1
 800e226:	727e      	strbeq	r6, [r7, #9]
		fno->fname[j++] = c;
 800e228:	18cf      	adds	r7, r1, r3
 800e22a:	3301      	adds	r3, #1
 800e22c:	727a      	strb	r2, [r7, #9]
	while (i < 11) {		/* Copy name body and extension */
 800e22e:	280b      	cmp	r0, #11
 800e230:	d1ed      	bne.n	800e20e <get_fileinfo.part.3+0xc>
	fno->fname[j] = 0;
 800e232:	440b      	add	r3, r1
 800e234:	2200      	movs	r2, #0
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e236:	f104 001c 	add.w	r0, r4, #28
	fno->fname[j] = 0;
 800e23a:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e23c:	7ae3      	ldrb	r3, [r4, #11]
 800e23e:	720b      	strb	r3, [r1, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e240:	f7ff fe78 	bl	800df34 <ld_dword>
 800e244:	6008      	str	r0, [r1, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e246:	f104 0016 	add.w	r0, r4, #22
 800e24a:	f7ff fe73 	bl	800df34 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e24e:	80c8      	strh	r0, [r1, #6]
 800e250:	0c00      	lsrs	r0, r0, #16
 800e252:	8088      	strh	r0, [r1, #4]
}
 800e254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e256 <sync_window.part.5>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800e256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 800e258:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e25a:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800e25e:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e260:	2301      	movs	r3, #1
 800e262:	462a      	mov	r2, r5
 800e264:	4639      	mov	r1, r7
 800e266:	7840      	ldrb	r0, [r0, #1]
 800e268:	f7ff fe48 	bl	800defc <disk_write>
 800e26c:	b9a0      	cbnz	r0, 800e298 <sync_window.part.5+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e26e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e270:	69e2      	ldr	r2, [r4, #28]
 800e272:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 800e274:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e276:	4293      	cmp	r3, r2
 800e278:	d301      	bcc.n	800e27e <sync_window.part.5+0x28>
	FRESULT res = FR_OK;
 800e27a:	2000      	movs	r0, #0
}
 800e27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e27e:	78a6      	ldrb	r6, [r4, #2]
 800e280:	2e01      	cmp	r6, #1
 800e282:	d9fa      	bls.n	800e27a <sync_window.part.5+0x24>
					wsect += fs->fsize;
 800e284:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e286:	4639      	mov	r1, r7
 800e288:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e28a:	3e01      	subs	r6, #1
					wsect += fs->fsize;
 800e28c:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800e28e:	2301      	movs	r3, #1
 800e290:	462a      	mov	r2, r5
 800e292:	f7ff fe33 	bl	800defc <disk_write>
 800e296:	e7f3      	b.n	800e280 <sync_window.part.5+0x2a>
			res = FR_DISK_ERR;
 800e298:	2001      	movs	r0, #1
 800e29a:	e7ef      	b.n	800e27c <sync_window.part.5+0x26>

0800e29c <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e29c:	78c3      	ldrb	r3, [r0, #3]
 800e29e:	b10b      	cbz	r3, 800e2a4 <sync_window+0x8>
 800e2a0:	f7ff bfd9 	b.w	800e256 <sync_window.part.5>
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	4770      	bx	lr

0800e2a8 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 800e2a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e2aa:	428b      	cmp	r3, r1
{
 800e2ac:	b570      	push	{r4, r5, r6, lr}
 800e2ae:	4606      	mov	r6, r0
 800e2b0:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800e2b2:	d012      	beq.n	800e2da <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 800e2b4:	f7ff fff2 	bl	800e29c <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	b960      	cbnz	r0, 800e2d6 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e2bc:	462a      	mov	r2, r5
 800e2be:	2301      	movs	r3, #1
 800e2c0:	f106 0134 	add.w	r1, r6, #52	; 0x34
 800e2c4:	7870      	ldrb	r0, [r6, #1]
 800e2c6:	f7ff fe0b 	bl	800dee0 <disk_read>
 800e2ca:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 800e2cc:	bf1c      	itt	ne
 800e2ce:	f04f 35ff 	movne.w	r5, #4294967295
 800e2d2:	2401      	movne	r4, #1
			fs->winsect = sector;
 800e2d4:	6335      	str	r5, [r6, #48]	; 0x30
}
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 800e2da:	2400      	movs	r4, #0
 800e2dc:	e7fb      	b.n	800e2d6 <move_window+0x2e>
	...

0800e2e0 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e2e0:	2300      	movs	r3, #0
{
 800e2e2:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e2e4:	70c3      	strb	r3, [r0, #3]
 800e2e6:	f04f 33ff 	mov.w	r3, #4294967295
{
 800e2ea:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e2ec:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e2ee:	f7ff ffdb 	bl	800e2a8 <move_window>
 800e2f2:	bb30      	cbnz	r0, 800e342 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 800e2f4:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 800e2f8:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 800e2fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e300:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800e304:	4293      	cmp	r3, r2
 800e306:	d11e      	bne.n	800e346 <check_fs+0x66>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e308:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800e30c:	2be9      	cmp	r3, #233	; 0xe9
 800e30e:	d005      	beq.n	800e31c <check_fs+0x3c>
 800e310:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e312:	4a10      	ldr	r2, [pc, #64]	; (800e354 <check_fs+0x74>)
 800e314:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800e318:	4293      	cmp	r3, r2
 800e31a:	d116      	bne.n	800e34a <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e31c:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 800e320:	f7ff fe08 	bl	800df34 <ld_dword>
 800e324:	4b0c      	ldr	r3, [pc, #48]	; (800e358 <check_fs+0x78>)
 800e326:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800e32a:	4298      	cmp	r0, r3
 800e32c:	d00f      	beq.n	800e34e <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e32e:	f104 0086 	add.w	r0, r4, #134	; 0x86
 800e332:	f7ff fdff 	bl	800df34 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e336:	4b09      	ldr	r3, [pc, #36]	; (800e35c <check_fs+0x7c>)
 800e338:	4298      	cmp	r0, r3
 800e33a:	bf14      	ite	ne
 800e33c:	2002      	movne	r0, #2
 800e33e:	2000      	moveq	r0, #0
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800e340:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e342:	2004      	movs	r0, #4
 800e344:	e7fc      	b.n	800e340 <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e346:	2003      	movs	r0, #3
 800e348:	e7fa      	b.n	800e340 <check_fs+0x60>
	return 2;
 800e34a:	2002      	movs	r0, #2
 800e34c:	e7f8      	b.n	800e340 <check_fs+0x60>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e34e:	2000      	movs	r0, #0
 800e350:	e7f6      	b.n	800e340 <check_fs+0x60>
 800e352:	bf00      	nop
 800e354:	009000eb 	.word	0x009000eb
 800e358:	00544146 	.word	0x00544146
 800e35c:	33544146 	.word	0x33544146

0800e360 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e360:	2300      	movs	r3, #0
{
 800e362:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 800e366:	600b      	str	r3, [r1, #0]
{
 800e368:	b085      	sub	sp, #20
 800e36a:	460f      	mov	r7, r1
 800e36c:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800e36e:	f7ff ff0c 	bl	800e18a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800e372:	1e06      	subs	r6, r0, #0
 800e374:	f2c0 813f 	blt.w	800e5f6 <find_volume+0x296>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e378:	4ba4      	ldr	r3, [pc, #656]	; (800e60c <find_volume+0x2ac>)
 800e37a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e37e:	2c00      	cmp	r4, #0
 800e380:	f000 813b 	beq.w	800e5fa <find_volume+0x29a>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e384:	68e0      	ldr	r0, [r4, #12]
 800e386:	f001 f993 	bl	800f6b0 <ff_req_grant>
 800e38a:	2800      	cmp	r0, #0
 800e38c:	f000 8137 	beq.w	800e5fe <find_volume+0x29e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e390:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e392:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e396:	7823      	ldrb	r3, [r4, #0]
 800e398:	b173      	cbz	r3, 800e3b8 <find_volume+0x58>
		stat = disk_status(fs->drv);
 800e39a:	7860      	ldrb	r0, [r4, #1]
 800e39c:	f7ff fd86 	bl	800deac <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e3a0:	07c1      	lsls	r1, r0, #31
 800e3a2:	d409      	bmi.n	800e3b8 <find_volume+0x58>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e3a4:	2d00      	cmp	r5, #0
 800e3a6:	f000 812c 	beq.w	800e602 <find_volume+0x2a2>
 800e3aa:	f010 0004 	ands.w	r0, r0, #4
 800e3ae:	d000      	beq.n	800e3b2 <find_volume+0x52>
				return FR_WRITE_PROTECTED;
 800e3b0:	200a      	movs	r0, #10
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800e3b2:	b005      	add	sp, #20
 800e3b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800e3b8:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e3ba:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800e3bc:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e3be:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e3c0:	f7ff fd7e 	bl	800dec0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e3c4:	07c2      	lsls	r2, r0, #31
 800e3c6:	f100 811e 	bmi.w	800e606 <find_volume+0x2a6>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e3ca:	b10d      	cbz	r5, 800e3d0 <find_volume+0x70>
 800e3cc:	0743      	lsls	r3, r0, #29
 800e3ce:	d4ef      	bmi.n	800e3b0 <find_volume+0x50>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	f7ff ff84 	bl	800e2e0 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e3d8:	2802      	cmp	r0, #2
 800e3da:	f040 80f3 	bne.w	800e5c4 <find_volume+0x264>
 800e3de:	f504 75fd 	add.w	r5, r4, #506	; 0x1fa
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e3e2:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e3e4:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 800e3e8:	b110      	cbz	r0, 800e3f0 <find_volume+0x90>
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	f7ff fda2 	bl	800df34 <ld_dword>
 800e3f0:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e3f4:	3101      	adds	r1, #1
 800e3f6:	3510      	adds	r5, #16
 800e3f8:	2904      	cmp	r1, #4
 800e3fa:	d1f3      	bne.n	800e3e4 <find_volume+0x84>
 800e3fc:	2600      	movs	r6, #0
			bsect = br[i];
 800e3fe:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e402:	2d00      	cmp	r5, #0
 800e404:	f000 80d5 	beq.w	800e5b2 <find_volume+0x252>
 800e408:	4629      	mov	r1, r5
 800e40a:	4620      	mov	r0, r4
 800e40c:	f7ff ff68 	bl	800e2e0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e410:	2801      	cmp	r0, #1
 800e412:	f200 80cf 	bhi.w	800e5b4 <find_volume+0x254>
	rv = rv << 8 | ptr[0];
 800e416:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800e41a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800e41e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e426:	f040 80d1 	bne.w	800e5cc <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 800e42a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800e42e:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e432:	ea56 2603 	orrs.w	r6, r6, r3, lsl #8
 800e436:	d104      	bne.n	800e442 <find_volume+0xe2>
 800e438:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e43c:	f7ff fd7a 	bl	800df34 <ld_dword>
 800e440:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e442:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
		fs->fsize = fasize;
 800e446:	61e6      	str	r6, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e448:	f109 33ff 	add.w	r3, r9, #4294967295
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e44c:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e450:	2b01      	cmp	r3, #1
 800e452:	f200 80bb 	bhi.w	800e5cc <find_volume+0x26c>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e456:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
 800e45a:	b2bb      	uxth	r3, r7
 800e45c:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e45e:	2b00      	cmp	r3, #0
 800e460:	f000 80b4 	beq.w	800e5cc <find_volume+0x26c>
 800e464:	1e7b      	subs	r3, r7, #1
 800e466:	423b      	tst	r3, r7
 800e468:	f040 80b0 	bne.w	800e5cc <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 800e46c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e470:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 800e474:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e478:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e47c:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e480:	f040 80a4 	bne.w	800e5cc <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 800e484:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800e488:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e48c:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 800e490:	d103      	bne.n	800e49a <find_volume+0x13a>
 800e492:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800e496:	f7ff fd4d 	bl	800df34 <ld_dword>
	rv = rv << 8 | ptr[0];
 800e49a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e49e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e4a2:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800e4a6:	f000 8091 	beq.w	800e5cc <find_volume+0x26c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e4aa:	fb06 fc09 	mul.w	ip, r6, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e4ae:	eb03 1218 	add.w	r2, r3, r8, lsr #4
 800e4b2:	4462      	add	r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e4b4:	4290      	cmp	r0, r2
 800e4b6:	f0c0 8089 	bcc.w	800e5cc <find_volume+0x26c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e4ba:	1a81      	subs	r1, r0, r2
 800e4bc:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e4c0:	2900      	cmp	r1, #0
 800e4c2:	f000 8083 	beq.w	800e5cc <find_volume+0x26c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e4c6:	f64f 77f5 	movw	r7, #65525	; 0xfff5
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e4ca:	f640 70f5 	movw	r0, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e4ce:	442b      	add	r3, r5
		fs->database = bsect + sysect;					/* Data start sector */
 800e4d0:	442a      	add	r2, r5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e4d2:	42b9      	cmp	r1, r7
 800e4d4:	bf8c      	ite	hi
 800e4d6:	2703      	movhi	r7, #3
 800e4d8:	2702      	movls	r7, #2
		fs->volbase = bsect;							/* Volume start sector */
 800e4da:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e4dc:	6263      	str	r3, [r4, #36]	; 0x24
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e4de:	4281      	cmp	r1, r0
 800e4e0:	bf98      	it	ls
 800e4e2:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e4e4:	3102      	adds	r1, #2
		fs->database = bsect + sysect;					/* Data start sector */
 800e4e6:	62e2      	str	r2, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e4e8:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e4ea:	61a1      	str	r1, [r4, #24]
		if (fmt == FS_FAT32) {
 800e4ec:	d172      	bne.n	800e5d4 <find_volume+0x274>
	rv = rv << 8 | ptr[0];
 800e4ee:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 800e4f2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e4f6:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800e4fa:	d167      	bne.n	800e5cc <find_volume+0x26c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e4fc:	f1b8 0f00 	cmp.w	r8, #0
 800e500:	d164      	bne.n	800e5cc <find_volume+0x26c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e502:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800e506:	f7ff fd15 	bl	800df34 <ld_dword>
 800e50a:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e50c:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e50e:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 800e512:	ebb6 2f51 	cmp.w	r6, r1, lsr #9
 800e516:	d359      	bcc.n	800e5cc <find_volume+0x26c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e518:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e51c:	2f03      	cmp	r7, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e51e:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800e522:	f04f 0380 	mov.w	r3, #128	; 0x80
 800e526:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e528:	d12f      	bne.n	800e58a <find_volume+0x22a>
	rv = rv << 8 | ptr[0];
 800e52a:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 800e52e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800e532:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e536:	2b01      	cmp	r3, #1
 800e538:	d127      	bne.n	800e58a <find_volume+0x22a>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e53a:	1c69      	adds	r1, r5, #1
 800e53c:	4620      	mov	r0, r4
 800e53e:	f7ff feb3 	bl	800e2a8 <move_window>
 800e542:	bb10      	cbnz	r0, 800e58a <find_volume+0x22a>
	rv = rv << 8 | ptr[0];
 800e544:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 800e548:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 800e54c:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 800e54e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e552:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800e556:	4293      	cmp	r3, r2
 800e558:	d117      	bne.n	800e58a <find_volume+0x22a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e55a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800e55e:	f7ff fce9 	bl	800df34 <ld_dword>
 800e562:	4b2b      	ldr	r3, [pc, #172]	; (800e610 <find_volume+0x2b0>)
 800e564:	4298      	cmp	r0, r3
 800e566:	d110      	bne.n	800e58a <find_volume+0x22a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e568:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800e56c:	f7ff fce2 	bl	800df34 <ld_dword>
 800e570:	4b28      	ldr	r3, [pc, #160]	; (800e614 <find_volume+0x2b4>)
 800e572:	4298      	cmp	r0, r3
 800e574:	d109      	bne.n	800e58a <find_volume+0x22a>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e576:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800e57a:	f7ff fcdb 	bl	800df34 <ld_dword>
 800e57e:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e580:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800e584:	f7ff fcd6 	bl	800df34 <ld_dword>
 800e588:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 800e58a:	4a23      	ldr	r2, [pc, #140]	; (800e618 <find_volume+0x2b8>)
 800e58c:	2000      	movs	r0, #0
	fs->fs_type = fmt;		/* FAT sub-type */
 800e58e:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e590:	8813      	ldrh	r3, [r2, #0]
 800e592:	3301      	adds	r3, #1
 800e594:	b29b      	uxth	r3, r3
 800e596:	8013      	strh	r3, [r2, #0]
 800e598:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e59a:	4b20      	ldr	r3, [pc, #128]	; (800e61c <find_volume+0x2bc>)
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	4294      	cmp	r4, r2
 800e5a0:	bf04      	itt	eq
 800e5a2:	2200      	moveq	r2, #0
 800e5a4:	601a      	streq	r2, [r3, #0]
 800e5a6:	691a      	ldr	r2, [r3, #16]
 800e5a8:	4294      	cmp	r4, r2
 800e5aa:	f47f af02 	bne.w	800e3b2 <find_volume+0x52>
 800e5ae:	6118      	str	r0, [r3, #16]
 800e5b0:	e6ff      	b.n	800e3b2 <find_volume+0x52>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e5b2:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e5b4:	3601      	adds	r6, #1
 800e5b6:	2e04      	cmp	r6, #4
 800e5b8:	f47f af21 	bne.w	800e3fe <find_volume+0x9e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e5bc:	2804      	cmp	r0, #4
 800e5be:	d105      	bne.n	800e5cc <find_volume+0x26c>
 800e5c0:	2001      	movs	r0, #1
 800e5c2:	e6f6      	b.n	800e3b2 <find_volume+0x52>
 800e5c4:	2804      	cmp	r0, #4
 800e5c6:	d0fb      	beq.n	800e5c0 <find_volume+0x260>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e5c8:	2801      	cmp	r0, #1
 800e5ca:	d901      	bls.n	800e5d0 <find_volume+0x270>
 800e5cc:	200d      	movs	r0, #13
 800e5ce:	e6f0      	b.n	800e3b2 <find_volume+0x52>
	bsect = 0;
 800e5d0:	2500      	movs	r5, #0
 800e5d2:	e720      	b.n	800e416 <find_volume+0xb6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e5d4:	f1b8 0f00 	cmp.w	r8, #0
 800e5d8:	d0f8      	beq.n	800e5cc <find_volume+0x26c>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e5da:	2f02      	cmp	r7, #2
 800e5dc:	ea4f 0041 	mov.w	r0, r1, lsl #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e5e0:	4463      	add	r3, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e5e2:	bf1c      	itt	ne
 800e5e4:	1840      	addne	r0, r0, r1
 800e5e6:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e5ea:	62a3      	str	r3, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e5ec:	bf0c      	ite	eq
 800e5ee:	4601      	moveq	r1, r0
 800e5f0:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 800e5f4:	e78b      	b.n	800e50e <find_volume+0x1ae>
	if (vol < 0) return FR_INVALID_DRIVE;
 800e5f6:	200b      	movs	r0, #11
 800e5f8:	e6db      	b.n	800e3b2 <find_volume+0x52>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e5fa:	200c      	movs	r0, #12
 800e5fc:	e6d9      	b.n	800e3b2 <find_volume+0x52>
	ENTER_FF(fs);						/* Lock the volume */
 800e5fe:	200f      	movs	r0, #15
 800e600:	e6d7      	b.n	800e3b2 <find_volume+0x52>
			return FR_OK;				/* The file system object is valid */
 800e602:	4628      	mov	r0, r5
 800e604:	e6d5      	b.n	800e3b2 <find_volume+0x52>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e606:	2003      	movs	r0, #3
 800e608:	e6d3      	b.n	800e3b2 <find_volume+0x52>
 800e60a:	bf00      	nop
 800e60c:	2400167c 	.word	0x2400167c
 800e610:	41615252 	.word	0x41615252
 800e614:	61417272 	.word	0x61417272
 800e618:	240016a0 	.word	0x240016a0
 800e61c:	24001680 	.word	0x24001680

0800e620 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e620:	2901      	cmp	r1, #1
{
 800e622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e626:	4605      	mov	r5, r0
 800e628:	460c      	mov	r4, r1
 800e62a:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e62c:	d973      	bls.n	800e716 <put_fat+0xf6>
 800e62e:	6983      	ldr	r3, [r0, #24]
 800e630:	428b      	cmp	r3, r1
 800e632:	d970      	bls.n	800e716 <put_fat+0xf6>
		switch (fs->fs_type) {
 800e634:	7803      	ldrb	r3, [r0, #0]
 800e636:	2b02      	cmp	r3, #2
 800e638:	d040      	beq.n	800e6bc <put_fat+0x9c>
 800e63a:	2b03      	cmp	r3, #3
 800e63c:	d051      	beq.n	800e6e2 <put_fat+0xc2>
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d169      	bne.n	800e716 <put_fat+0xf6>
			bc = (UINT)clst; bc += bc / 2;
 800e642:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e646:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800e648:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800e64c:	f7ff fe2c 	bl	800e2a8 <move_window>
 800e650:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 800e652:	bb40      	cbnz	r0, 800e6a6 <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e654:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 800e658:	f105 0934 	add.w	r9, r5, #52	; 0x34
 800e65c:	f108 0a01 	add.w	sl, r8, #1
 800e660:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e664:	bf08      	it	eq
 800e666:	b2fb      	uxtbeq	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e668:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e66a:	bf1f      	itttt	ne
 800e66c:	f819 3008 	ldrbne.w	r3, [r9, r8]
 800e670:	f003 020f 	andne.w	r2, r3, #15
 800e674:	013b      	lslne	r3, r7, #4
 800e676:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 800e67a:	bf18      	it	ne
 800e67c:	4313      	orrne	r3, r2
 800e67e:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 800e682:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e684:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 800e686:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e688:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800e68c:	f7ff fe0c 	bl	800e2a8 <move_window>
			if (res != FR_OK) break;
 800e690:	4606      	mov	r6, r0
 800e692:	b940      	cbnz	r0, 800e6a6 <put_fat+0x86>
			p = fs->win + bc % SS(fs);
 800e694:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e698:	b144      	cbz	r4, 800e6ac <put_fat+0x8c>
 800e69a:	f3c7 1707 	ubfx	r7, r7, #4, #8
 800e69e:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	70eb      	strb	r3, [r5, #3]
}
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e6ac:	f819 300a 	ldrb.w	r3, [r9, sl]
 800e6b0:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800e6b4:	f023 030f 	bic.w	r3, r3, #15
 800e6b8:	431f      	orrs	r7, r3
 800e6ba:	e7f0      	b.n	800e69e <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e6bc:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800e6be:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e6c2:	f7ff fdf1 	bl	800e2a8 <move_window>
			if (res != FR_OK) break;
 800e6c6:	4606      	mov	r6, r0
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	d1ec      	bne.n	800e6a6 <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e6cc:	0064      	lsls	r4, r4, #1
 800e6ce:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800e6d2:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800e6d6:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e6d8:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800e6da:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 800e6de:	7057      	strb	r7, [r2, #1]
 800e6e0:	e7df      	b.n	800e6a2 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e6e2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800e6e4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e6e8:	f7ff fdde 	bl	800e2a8 <move_window>
			if (res != FR_OK) break;
 800e6ec:	4606      	mov	r6, r0
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	d1d9      	bne.n	800e6a6 <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e6f2:	00a4      	lsls	r4, r4, #2
 800e6f4:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800e6f8:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 800e6fc:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800e700:	441c      	add	r4, r3
 800e702:	4620      	mov	r0, r4
 800e704:	f7ff fc16 	bl	800df34 <ld_dword>
 800e708:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e70c:	4620      	mov	r0, r4
 800e70e:	4339      	orrs	r1, r7
 800e710:	f7ff fc18 	bl	800df44 <st_dword>
 800e714:	e7c5      	b.n	800e6a2 <put_fat+0x82>
	FRESULT res = FR_INT_ERR;
 800e716:	2602      	movs	r6, #2
 800e718:	e7c5      	b.n	800e6a6 <put_fat+0x86>

0800e71a <get_fat.isra.9>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e71a:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800e71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e71e:	4605      	mov	r5, r0
 800e720:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e722:	d952      	bls.n	800e7ca <get_fat.isra.9+0xb0>
 800e724:	6983      	ldr	r3, [r0, #24]
 800e726:	4299      	cmp	r1, r3
 800e728:	d24f      	bcs.n	800e7ca <get_fat.isra.9+0xb0>
		switch (fs->fs_type) {
 800e72a:	7803      	ldrb	r3, [r0, #0]
 800e72c:	2b02      	cmp	r3, #2
 800e72e:	d029      	beq.n	800e784 <get_fat.isra.9+0x6a>
 800e730:	2b03      	cmp	r3, #3
 800e732:	d038      	beq.n	800e7a6 <get_fat.isra.9+0x8c>
 800e734:	2b01      	cmp	r3, #1
 800e736:	d148      	bne.n	800e7ca <get_fat.isra.9+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 800e738:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e73c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800e73e:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800e742:	f7ff fdb1 	bl	800e2a8 <move_window>
 800e746:	b110      	cbz	r0, 800e74e <get_fat.isra.9+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e748:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800e74e:	1c77      	adds	r7, r6, #1
 800e750:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e754:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800e756:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800e758:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e75a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800e75e:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e762:	f7ff fda1 	bl	800e2a8 <move_window>
 800e766:	2800      	cmp	r0, #0
 800e768:	d1ee      	bne.n	800e748 <get_fat.isra.9+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e76a:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e76e:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800e770:	443d      	add	r5, r7
 800e772:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800e776:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e77a:	bf4c      	ite	mi
 800e77c:	0900      	lsrmi	r0, r0, #4
 800e77e:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800e782:	e7e3      	b.n	800e74c <get_fat.isra.9+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e784:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800e786:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e78a:	f7ff fd8d 	bl	800e2a8 <move_window>
 800e78e:	2800      	cmp	r0, #0
 800e790:	d1da      	bne.n	800e748 <get_fat.isra.9+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e792:	0064      	lsls	r4, r4, #1
 800e794:	3534      	adds	r5, #52	; 0x34
 800e796:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800e79a:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 800e79c:	5d28      	ldrb	r0, [r5, r4]
 800e79e:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e7a0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800e7a4:	e7d2      	b.n	800e74c <get_fat.isra.9+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e7a6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800e7a8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e7ac:	f7ff fd7c 	bl	800e2a8 <move_window>
 800e7b0:	2800      	cmp	r0, #0
 800e7b2:	d1c9      	bne.n	800e748 <get_fat.isra.9+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e7b4:	00a4      	lsls	r4, r4, #2
 800e7b6:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800e7ba:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800e7be:	4420      	add	r0, r4
 800e7c0:	f7ff fbb8 	bl	800df34 <ld_dword>
 800e7c4:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800e7c8:	e7c0      	b.n	800e74c <get_fat.isra.9+0x32>
			val = 1;	/* Internal error */
 800e7ca:	2001      	movs	r0, #1
 800e7cc:	e7be      	b.n	800e74c <get_fat.isra.9+0x32>

0800e7ce <create_chain>:
{
 800e7ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d2:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800e7d4:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800e7d6:	460f      	mov	r7, r1
 800e7d8:	b971      	cbnz	r1, 800e7f8 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e7da:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e7dc:	b1f6      	cbz	r6, 800e81c <create_chain+0x4e>
 800e7de:	69ab      	ldr	r3, [r5, #24]
 800e7e0:	42b3      	cmp	r3, r6
 800e7e2:	bf98      	it	ls
 800e7e4:	2601      	movls	r6, #1
 800e7e6:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800e7e8:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e7ea:	69ab      	ldr	r3, [r5, #24]
 800e7ec:	42a3      	cmp	r3, r4
 800e7ee:	d818      	bhi.n	800e822 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 800e7f0:	2e01      	cmp	r6, #1
 800e7f2:	d815      	bhi.n	800e820 <create_chain+0x52>
 800e7f4:	2400      	movs	r4, #0
 800e7f6:	e009      	b.n	800e80c <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e7f8:	4628      	mov	r0, r5
 800e7fa:	f7ff ff8e 	bl	800e71a <get_fat.isra.9>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e7fe:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e800:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e802:	d937      	bls.n	800e874 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e804:	1c43      	adds	r3, r0, #1
 800e806:	d104      	bne.n	800e812 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e808:	f04f 34ff 	mov.w	r4, #4294967295
}
 800e80c:	4620      	mov	r0, r4
 800e80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e812:	69ab      	ldr	r3, [r5, #24]
 800e814:	4283      	cmp	r3, r0
 800e816:	d8f9      	bhi.n	800e80c <create_chain+0x3e>
 800e818:	463e      	mov	r6, r7
 800e81a:	e7e4      	b.n	800e7e6 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e81c:	2601      	movs	r6, #1
 800e81e:	e7e2      	b.n	800e7e6 <create_chain+0x18>
				ncl = 2;
 800e820:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e822:	4621      	mov	r1, r4
 800e824:	f8d8 0000 	ldr.w	r0, [r8]
 800e828:	f7ff ff77 	bl	800e71a <get_fat.isra.9>
			if (cs == 0) break;				/* Found a free cluster */
 800e82c:	b130      	cbz	r0, 800e83c <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e82e:	2801      	cmp	r0, #1
 800e830:	d020      	beq.n	800e874 <create_chain+0xa6>
 800e832:	3001      	adds	r0, #1
 800e834:	d0e8      	beq.n	800e808 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 800e836:	42b4      	cmp	r4, r6
 800e838:	d1d6      	bne.n	800e7e8 <create_chain+0x1a>
 800e83a:	e7db      	b.n	800e7f4 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e83c:	f04f 32ff 	mov.w	r2, #4294967295
 800e840:	4621      	mov	r1, r4
 800e842:	4628      	mov	r0, r5
 800e844:	f7ff feec 	bl	800e620 <put_fat>
		if (res == FR_OK && clst != 0) {
 800e848:	b990      	cbnz	r0, 800e870 <create_chain+0xa2>
 800e84a:	b957      	cbnz	r7, 800e862 <create_chain+0x94>
		fs->last_clst = ncl;
 800e84c:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e84e:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 800e852:	3a02      	subs	r2, #2
 800e854:	4293      	cmp	r3, r2
 800e856:	d90f      	bls.n	800e878 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 800e858:	792b      	ldrb	r3, [r5, #4]
 800e85a:	f043 0301 	orr.w	r3, r3, #1
 800e85e:	712b      	strb	r3, [r5, #4]
 800e860:	e7d4      	b.n	800e80c <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e862:	4622      	mov	r2, r4
 800e864:	4639      	mov	r1, r7
 800e866:	4628      	mov	r0, r5
 800e868:	f7ff feda 	bl	800e620 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e86c:	2800      	cmp	r0, #0
 800e86e:	d0ed      	beq.n	800e84c <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e870:	2801      	cmp	r0, #1
 800e872:	d0c9      	beq.n	800e808 <create_chain+0x3a>
 800e874:	2401      	movs	r4, #1
 800e876:	e7c9      	b.n	800e80c <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e878:	3b01      	subs	r3, #1
 800e87a:	616b      	str	r3, [r5, #20]
 800e87c:	e7ec      	b.n	800e858 <create_chain+0x8a>

0800e87e <remove_chain>:
{
 800e87e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e880:	460d      	mov	r5, r1
 800e882:	4607      	mov	r7, r0
 800e884:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e886:	2d01      	cmp	r5, #1
 800e888:	d92c      	bls.n	800e8e4 <remove_chain+0x66>
	FATFS *fs = obj->fs;
 800e88a:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e88c:	69a3      	ldr	r3, [r4, #24]
 800e88e:	42ab      	cmp	r3, r5
 800e890:	d928      	bls.n	800e8e4 <remove_chain+0x66>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e892:	b12a      	cbz	r2, 800e8a0 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e894:	f04f 32ff 	mov.w	r2, #4294967295
 800e898:	4620      	mov	r0, r4
 800e89a:	f7ff fec1 	bl	800e620 <put_fat>
		if (res != FR_OK) return res;
 800e89e:	b930      	cbnz	r0, 800e8ae <remove_chain+0x30>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e8a0:	4629      	mov	r1, r5
 800e8a2:	6838      	ldr	r0, [r7, #0]
 800e8a4:	f7ff ff39 	bl	800e71a <get_fat.isra.9>
		if (nxt == 0) break;				/* Empty cluster? */
 800e8a8:	4606      	mov	r6, r0
 800e8aa:	b908      	cbnz	r0, 800e8b0 <remove_chain+0x32>
	return FR_OK;
 800e8ac:	2000      	movs	r0, #0
}
 800e8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e8b0:	2801      	cmp	r0, #1
 800e8b2:	d017      	beq.n	800e8e4 <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e8b4:	1c43      	adds	r3, r0, #1
 800e8b6:	d017      	beq.n	800e8e8 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	4629      	mov	r1, r5
 800e8bc:	4620      	mov	r0, r4
 800e8be:	f7ff feaf 	bl	800e620 <put_fat>
			if (res != FR_OK) return res;
 800e8c2:	2800      	cmp	r0, #0
 800e8c4:	d1f3      	bne.n	800e8ae <remove_chain+0x30>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e8c6:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800e8ca:	1e91      	subs	r1, r2, #2
 800e8cc:	428b      	cmp	r3, r1
 800e8ce:	d205      	bcs.n	800e8dc <remove_chain+0x5e>
			fs->free_clst++;
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 800e8d4:	7923      	ldrb	r3, [r4, #4]
 800e8d6:	f043 0301 	orr.w	r3, r3, #1
 800e8da:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e8dc:	42b2      	cmp	r2, r6
 800e8de:	4635      	mov	r5, r6
 800e8e0:	d8de      	bhi.n	800e8a0 <remove_chain+0x22>
 800e8e2:	e7e3      	b.n	800e8ac <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e8e4:	2002      	movs	r0, #2
 800e8e6:	e7e2      	b.n	800e8ae <remove_chain+0x30>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e8e8:	2001      	movs	r0, #1
 800e8ea:	e7e0      	b.n	800e8ae <remove_chain+0x30>

0800e8ec <unlock_fs>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800e8ec:	b140      	cbz	r0, 800e900 <unlock_fs+0x14>
 800e8ee:	f1a1 030b 	sub.w	r3, r1, #11
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d904      	bls.n	800e900 <unlock_fs+0x14>
 800e8f6:	290f      	cmp	r1, #15
 800e8f8:	d002      	beq.n	800e900 <unlock_fs+0x14>
		ff_rel_grant(fs->sobj);
 800e8fa:	68c0      	ldr	r0, [r0, #12]
 800e8fc:	f000 bee1 	b.w	800f6c2 <ff_rel_grant>
}
 800e900:	4770      	bx	lr

0800e902 <sync_fs>:
{
 800e902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e904:	4604      	mov	r4, r0
	res = sync_window(fs);
 800e906:	f7ff fcc9 	bl	800e29c <sync_window>
 800e90a:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800e90c:	2800      	cmp	r0, #0
 800e90e:	d142      	bne.n	800e996 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e910:	7823      	ldrb	r3, [r4, #0]
 800e912:	2b03      	cmp	r3, #3
 800e914:	d137      	bne.n	800e986 <sync_fs+0x84>
 800e916:	7927      	ldrb	r7, [r4, #4]
 800e918:	2f01      	cmp	r7, #1
 800e91a:	d134      	bne.n	800e986 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 800e91c:	f104 0634 	add.w	r6, r4, #52	; 0x34
 800e920:	4601      	mov	r1, r0
 800e922:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e926:	4630      	mov	r0, r6
 800e928:	f7ff fb14 	bl	800df54 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800e92c:	2355      	movs	r3, #85	; 0x55
	*ptr++ = (BYTE)val;
 800e92e:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800e930:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val; val >>= 8;
 800e932:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 800e936:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE)val;
 800e938:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e93c:	f504 7007 	add.w	r0, r4, #540	; 0x21c
	*ptr++ = (BYTE)val;
 800e940:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 800e944:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val; val >>= 8;
 800e946:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val; val >>= 8;
 800e94a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800e94e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 800e952:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 800e954:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 800e958:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 800e95c:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 800e960:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e964:	6961      	ldr	r1, [r4, #20]
 800e966:	f7ff faed 	bl	800df44 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e96a:	6921      	ldr	r1, [r4, #16]
 800e96c:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800e970:	f7ff fae8 	bl	800df44 <st_dword>
			fs->winsect = fs->volbase + 1;
 800e974:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e976:	463b      	mov	r3, r7
 800e978:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800e97a:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e97c:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800e97e:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e980:	f7ff fabc 	bl	800defc <disk_write>
			fs->fsi_flag = 0;
 800e984:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e986:	2200      	movs	r2, #0
 800e988:	7860      	ldrb	r0, [r4, #1]
 800e98a:	4611      	mov	r1, r2
 800e98c:	f7ff fac4 	bl	800df18 <disk_ioctl>
 800e990:	3000      	adds	r0, #0
 800e992:	bf18      	it	ne
 800e994:	2001      	movne	r0, #1
}
 800e996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e998 <dir_sdi.constprop.14>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800e998:	b538      	push	{r3, r4, r5, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e99a:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 800e99c:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800e99e:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800e9a0:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800e9a2:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e9a4:	b992      	cbnz	r2, 800e9cc <dir_sdi.constprop.14+0x34>
 800e9a6:	7823      	ldrb	r3, [r4, #0]
 800e9a8:	2b02      	cmp	r3, #2
 800e9aa:	d901      	bls.n	800e9b0 <dir_sdi.constprop.14+0x18>
		clst = fs->dirbase;
 800e9ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e9ae:	b973      	cbnz	r3, 800e9ce <dir_sdi.constprop.14+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e9b0:	8923      	ldrh	r3, [r4, #8]
 800e9b2:	b90b      	cbnz	r3, 800e9b8 <dir_sdi.constprop.14+0x20>
 800e9b4:	2002      	movs	r0, #2
}
 800e9b6:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 800e9b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e9ba:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 800e9bc:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 800e9be:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d0f7      	beq.n	800e9b4 <dir_sdi.constprop.14+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e9c4:	3434      	adds	r4, #52	; 0x34
	return FR_OK;
 800e9c6:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e9c8:	622c      	str	r4, [r5, #32]
 800e9ca:	e7f4      	b.n	800e9b6 <dir_sdi.constprop.14+0x1e>
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e9cc:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e9ce:	8961      	ldrh	r1, [r4, #10]
 800e9d0:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 800e9d2:	b961      	cbnz	r1, 800e9ee <dir_sdi.constprop.14+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e9d4:	4611      	mov	r1, r2
 800e9d6:	6828      	ldr	r0, [r5, #0]
 800e9d8:	f7ff fe9f 	bl	800e71a <get_fat.isra.9>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e9dc:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e9de:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e9e0:	d00b      	beq.n	800e9fa <dir_sdi.constprop.14+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e9e2:	2801      	cmp	r0, #1
 800e9e4:	d9e6      	bls.n	800e9b4 <dir_sdi.constprop.14+0x1c>
 800e9e6:	69a3      	ldr	r3, [r4, #24]
 800e9e8:	4298      	cmp	r0, r3
 800e9ea:	d3f3      	bcc.n	800e9d4 <dir_sdi.constprop.14+0x3c>
 800e9ec:	e7e2      	b.n	800e9b4 <dir_sdi.constprop.14+0x1c>
		dp->sect = clust2sect(fs, clst);
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	f7ff fb4b 	bl	800e08c <clust2sect>
 800e9f6:	61e8      	str	r0, [r5, #28]
 800e9f8:	e7e0      	b.n	800e9bc <dir_sdi.constprop.14+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e9fa:	2001      	movs	r0, #1
 800e9fc:	e7db      	b.n	800e9b6 <dir_sdi.constprop.14+0x1e>

0800e9fe <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e9fe:	69c3      	ldr	r3, [r0, #28]
{
 800ea00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea04:	4605      	mov	r5, r0
 800ea06:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ea08:	b1ab      	cbz	r3, 800ea36 <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ea0a:	6942      	ldr	r2, [r0, #20]
 800ea0c:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ea10:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 800ea14:	d20f      	bcs.n	800ea36 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ea16:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 800ea1a:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ea1c:	f1b9 0f00 	cmp.w	r9, #0
 800ea20:	d14d      	bne.n	800eabe <dir_next+0xc0>
		dp->sect++;				/* Next sector */
 800ea22:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800ea24:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800ea26:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800ea28:	b939      	cbnz	r1, 800ea3a <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ea2a:	8923      	ldrh	r3, [r4, #8]
 800ea2c:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 800ea30:	d845      	bhi.n	800eabe <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 800ea32:	2300      	movs	r3, #0
 800ea34:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ea36:	2004      	movs	r0, #4
 800ea38:	e00b      	b.n	800ea52 <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ea3a:	8963      	ldrh	r3, [r4, #10]
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 800ea42:	d13c      	bne.n	800eabe <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ea44:	4620      	mov	r0, r4
 800ea46:	f7ff fe68 	bl	800e71a <get_fat.isra.9>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ea4a:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ea4c:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ea4e:	d802      	bhi.n	800ea56 <dir_next+0x58>
 800ea50:	2002      	movs	r0, #2
}
 800ea52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ea56:	1c42      	adds	r2, r0, #1
 800ea58:	d101      	bne.n	800ea5e <dir_next+0x60>
 800ea5a:	2001      	movs	r0, #1
 800ea5c:	e7f9      	b.n	800ea52 <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ea5e:	69a3      	ldr	r3, [r4, #24]
 800ea60:	4283      	cmp	r3, r0
 800ea62:	d826      	bhi.n	800eab2 <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 800ea64:	2f00      	cmp	r7, #0
 800ea66:	d0e4      	beq.n	800ea32 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ea68:	69a9      	ldr	r1, [r5, #24]
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	f7ff feaf 	bl	800e7ce <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ea70:	4606      	mov	r6, r0
 800ea72:	2800      	cmp	r0, #0
 800ea74:	d036      	beq.n	800eae4 <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ea76:	2801      	cmp	r0, #1
 800ea78:	d0ea      	beq.n	800ea50 <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ea7a:	1c43      	adds	r3, r0, #1
 800ea7c:	d0ed      	beq.n	800ea5a <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ea7e:	4620      	mov	r0, r4
 800ea80:	f7ff fc0c 	bl	800e29c <sync_window>
 800ea84:	4607      	mov	r7, r0
 800ea86:	2800      	cmp	r0, #0
 800ea88:	d1e7      	bne.n	800ea5a <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ea8a:	4601      	mov	r1, r0
 800ea8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea90:	f104 0034 	add.w	r0, r4, #52	; 0x34
						fs->wflag = 1;
 800ea94:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ea98:	f7ff fa5c 	bl	800df54 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ea9c:	4631      	mov	r1, r6
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	f7ff faf4 	bl	800e08c <clust2sect>
 800eaa4:	6320      	str	r0, [r4, #48]	; 0x30
 800eaa6:	8963      	ldrh	r3, [r4, #10]
 800eaa8:	429f      	cmp	r7, r3
 800eaaa:	d30f      	bcc.n	800eacc <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 800eaac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eaae:	1bdf      	subs	r7, r3, r7
 800eab0:	6327      	str	r7, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 800eab2:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 800eab4:	4631      	mov	r1, r6
 800eab6:	4620      	mov	r0, r4
 800eab8:	f7ff fae8 	bl	800e08c <clust2sect>
 800eabc:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800eabe:	3434      	adds	r4, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800eac0:	f8c5 8014 	str.w	r8, [r5, #20]
	return FR_OK;
 800eac4:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800eac6:	444c      	add	r4, r9
 800eac8:	622c      	str	r4, [r5, #32]
	return FR_OK;
 800eaca:	e7c2      	b.n	800ea52 <dir_next+0x54>
						fs->wflag = 1;
 800eacc:	f884 a003 	strb.w	sl, [r4, #3]
 800ead0:	4620      	mov	r0, r4
 800ead2:	f7ff fbc0 	bl	800e256 <sync_window.part.5>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d1bf      	bne.n	800ea5a <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eada:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eadc:	3701      	adds	r7, #1
 800eade:	3301      	adds	r3, #1
 800eae0:	6323      	str	r3, [r4, #48]	; 0x30
 800eae2:	e7e0      	b.n	800eaa6 <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800eae4:	2007      	movs	r0, #7
 800eae6:	e7b4      	b.n	800ea52 <dir_next+0x54>

0800eae8 <follow_path>:
{
 800eae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaec:	4604      	mov	r4, r0
	FATFS *fs = obj->fs;
 800eaee:	6807      	ldr	r7, [r0, #0]
 800eaf0:	460d      	mov	r5, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800eaf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eaf6:	2b2f      	cmp	r3, #47	; 0x2f
 800eaf8:	d0fa      	beq.n	800eaf0 <follow_path+0x8>
 800eafa:	2b5c      	cmp	r3, #92	; 0x5c
 800eafc:	d0f8      	beq.n	800eaf0 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 800eafe:	2300      	movs	r3, #0
 800eb00:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800eb02:	782b      	ldrb	r3, [r5, #0]
 800eb04:	2b1f      	cmp	r3, #31
 800eb06:	d95a      	bls.n	800ebbe <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800eb08:	f8df 814c 	ldr.w	r8, [pc, #332]	; 800ec58 <follow_path+0x170>
	p = *path; sfn = dp->fn;
 800eb0c:	f104 0624 	add.w	r6, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 800eb10:	220b      	movs	r2, #11
 800eb12:	2120      	movs	r1, #32
 800eb14:	4630      	mov	r0, r6
 800eb16:	f7ff fa1d 	bl	800df54 <mem_set>
	si = i = 0; ni = 8;
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	f105 3cff 	add.w	ip, r5, #4294967295
 800eb20:	2008      	movs	r0, #8
 800eb22:	4611      	mov	r1, r2
		c = (BYTE)p[si++];
 800eb24:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800eb28:	3101      	adds	r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 800eb2a:	2b20      	cmp	r3, #32
 800eb2c:	d90d      	bls.n	800eb4a <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800eb2e:	2b2f      	cmp	r3, #47	; 0x2f
 800eb30:	d001      	beq.n	800eb36 <follow_path+0x4e>
 800eb32:	2b5c      	cmp	r3, #92	; 0x5c
 800eb34:	d14b      	bne.n	800ebce <follow_path+0xe6>
 800eb36:	1868      	adds	r0, r5, r1
 800eb38:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800eb3a:	f810 cb01 	ldrb.w	ip, [r0], #1
 800eb3e:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800eb42:	d0f9      	beq.n	800eb38 <follow_path+0x50>
 800eb44:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
 800eb48:	d0f6      	beq.n	800eb38 <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 800eb4a:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800eb4c:	2a00      	cmp	r2, #0
 800eb4e:	d051      	beq.n	800ebf4 <follow_path+0x10c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800eb50:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800eb54:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800eb56:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800eb5a:	2ae5      	cmp	r2, #229	; 0xe5
 800eb5c:	bf04      	itt	eq
 800eb5e:	2205      	moveq	r2, #5
 800eb60:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800eb64:	2b21      	cmp	r3, #33	; 0x21
 800eb66:	bf34      	ite	cc
 800eb68:	2304      	movcc	r3, #4
 800eb6a:	2300      	movcs	r3, #0
 800eb6c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800eb70:	f7ff ff12 	bl	800e998 <dir_sdi.constprop.14>
	if (res != FR_OK) return res;
 800eb74:	2800      	cmp	r0, #0
 800eb76:	d141      	bne.n	800ebfc <follow_path+0x114>
		res = move_window(fs, dp->sect);
 800eb78:	69e1      	ldr	r1, [r4, #28]
 800eb7a:	4648      	mov	r0, r9
 800eb7c:	f7ff fb94 	bl	800e2a8 <move_window>
		if (res != FR_OK) break;
 800eb80:	2800      	cmp	r0, #0
 800eb82:	d13b      	bne.n	800ebfc <follow_path+0x114>
		c = dp->dir[DIR_Name];
 800eb84:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800eb86:	781a      	ldrb	r2, [r3, #0]
 800eb88:	2a00      	cmp	r2, #0
 800eb8a:	d042      	beq.n	800ec12 <follow_path+0x12a>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800eb8c:	7ada      	ldrb	r2, [r3, #11]
 800eb8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800eb92:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800eb94:	7ada      	ldrb	r2, [r3, #11]
 800eb96:	0711      	lsls	r1, r2, #28
 800eb98:	d40c      	bmi.n	800ebb4 <follow_path+0xcc>
 800eb9a:	f103 0c0b 	add.w	ip, r3, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800eb9e:	4631      	mov	r1, r6
		r = *d++ - *s++;
 800eba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eba4:	f811 eb01 	ldrb.w	lr, [r1], #1
	} while (--cnt && r == 0);
 800eba8:	459c      	cmp	ip, r3
		r = *d++ - *s++;
 800ebaa:	eba2 020e 	sub.w	r2, r2, lr
	} while (--cnt && r == 0);
 800ebae:	d023      	beq.n	800ebf8 <follow_path+0x110>
 800ebb0:	2a00      	cmp	r2, #0
 800ebb2:	d0f5      	beq.n	800eba0 <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 800ebb4:	2100      	movs	r1, #0
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	f7ff ff21 	bl	800e9fe <dir_next>
 800ebbc:	e7da      	b.n	800eb74 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 800ebbe:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800ebc0:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 800ebc2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}
 800ebc6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 800ebca:	f7ff bee5 	b.w	800e998 <dir_sdi.constprop.14>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ebce:	2b2e      	cmp	r3, #46	; 0x2e
 800ebd0:	d033      	beq.n	800ec3a <follow_path+0x152>
 800ebd2:	4290      	cmp	r0, r2
 800ebd4:	d90e      	bls.n	800ebf4 <follow_path+0x10c>
		if (c >= 0x80) {				/* Extended character? */
 800ebd6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ebda:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800ec5c <follow_path+0x174>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ebde:	bf1c      	itt	ne
 800ebe0:	3b80      	subne	r3, #128	; 0x80
 800ebe2:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 800ebe6:	f819 ef01 	ldrb.w	lr, [r9, #1]!
 800ebea:	f1be 0f00 	cmp.w	lr, #0
 800ebee:	d029      	beq.n	800ec44 <follow_path+0x15c>
 800ebf0:	4573      	cmp	r3, lr
 800ebf2:	d1f8      	bne.n	800ebe6 <follow_path+0xfe>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ebf4:	2006      	movs	r0, #6
	return res;
 800ebf6:	e00a      	b.n	800ec0e <follow_path+0x126>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ebf8:	2a00      	cmp	r2, #0
 800ebfa:	d1db      	bne.n	800ebb4 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 800ebfc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800ec00:	b148      	cbz	r0, 800ec16 <follow_path+0x12e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ec02:	2804      	cmp	r0, #4
 800ec04:	d103      	bne.n	800ec0e <follow_path+0x126>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ec06:	f013 0f04 	tst.w	r3, #4
 800ec0a:	bf08      	it	eq
 800ec0c:	2005      	moveq	r0, #5
}
 800ec0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ec12:	2004      	movs	r0, #4
 800ec14:	e7f2      	b.n	800ebfc <follow_path+0x114>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ec16:	075a      	lsls	r2, r3, #29
 800ec18:	d4f9      	bmi.n	800ec0e <follow_path+0x126>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ec1a:	79a3      	ldrb	r3, [r4, #6]
 800ec1c:	06db      	lsls	r3, r3, #27
 800ec1e:	d50a      	bpl.n	800ec36 <follow_path+0x14e>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ec20:	6963      	ldr	r3, [r4, #20]
 800ec22:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800ec26:	7838      	ldrb	r0, [r7, #0]
 800ec28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec2c:	4419      	add	r1, r3
 800ec2e:	f7ff facd 	bl	800e1cc <ld_clust.isra.1>
 800ec32:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ec34:	e76a      	b.n	800eb0c <follow_path+0x24>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ec36:	2005      	movs	r0, #5
 800ec38:	e7e9      	b.n	800ec0e <follow_path+0x126>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ec3a:	280b      	cmp	r0, #11
 800ec3c:	d0da      	beq.n	800ebf4 <follow_path+0x10c>
			i = 8; ni = 11;				/* Goto extension */
 800ec3e:	2208      	movs	r2, #8
 800ec40:	200b      	movs	r0, #11
 800ec42:	e76f      	b.n	800eb24 <follow_path+0x3c>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ec44:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 800ec48:	f1be 0f19 	cmp.w	lr, #25
 800ec4c:	d801      	bhi.n	800ec52 <follow_path+0x16a>
 800ec4e:	3b20      	subs	r3, #32
 800ec50:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 800ec52:	54b3      	strb	r3, [r6, r2]
 800ec54:	3201      	adds	r2, #1
 800ec56:	e765      	b.n	800eb24 <follow_path+0x3c>
 800ec58:	0801556c 	.word	0x0801556c
 800ec5c:	080155eb 	.word	0x080155eb

0800ec60 <dir_read.constprop.12>:
FRESULT dir_read (
 800ec60:	b538      	push	{r3, r4, r5, lr}
 800ec62:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800ec64:	6805      	ldr	r5, [r0, #0]
	FRESULT res = FR_NO_FILE;
 800ec66:	2004      	movs	r0, #4
	while (dp->sect) {
 800ec68:	69e1      	ldr	r1, [r4, #28]
 800ec6a:	b909      	cbnz	r1, 800ec70 <dir_read.constprop.12+0x10>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ec6c:	b1a8      	cbz	r0, 800ec9a <dir_read.constprop.12+0x3a>
 800ec6e:	e01c      	b.n	800ecaa <dir_read.constprop.12+0x4a>
		res = move_window(fs, dp->sect);
 800ec70:	4628      	mov	r0, r5
 800ec72:	f7ff fb19 	bl	800e2a8 <move_window>
		if (res != FR_OK) break;
 800ec76:	b9c0      	cbnz	r0, 800ecaa <dir_read.constprop.12+0x4a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ec78:	6a23      	ldr	r3, [r4, #32]
 800ec7a:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) {
 800ec7c:	b1c2      	cbz	r2, 800ecb0 <dir_read.constprop.12+0x50>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ec7e:	7adb      	ldrb	r3, [r3, #11]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800ec80:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ec82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec86:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800ec88:	d009      	beq.n	800ec9e <dir_read.constprop.12+0x3e>
 800ec8a:	2a2e      	cmp	r2, #46	; 0x2e
 800ec8c:	d007      	beq.n	800ec9e <dir_read.constprop.12+0x3e>
 800ec8e:	2b0f      	cmp	r3, #15
 800ec90:	d005      	beq.n	800ec9e <dir_read.constprop.12+0x3e>
 800ec92:	f023 0320 	bic.w	r3, r3, #32
 800ec96:	2b08      	cmp	r3, #8
 800ec98:	d001      	beq.n	800ec9e <dir_read.constprop.12+0x3e>
		res = move_window(fs, dp->sect);
 800ec9a:	2000      	movs	r0, #0
}
 800ec9c:	bd38      	pop	{r3, r4, r5, pc}
		res = dir_next(dp, 0);		/* Next entry */
 800ec9e:	2100      	movs	r1, #0
 800eca0:	4620      	mov	r0, r4
 800eca2:	f7ff feac 	bl	800e9fe <dir_next>
		if (res != FR_OK) break;
 800eca6:	2800      	cmp	r0, #0
 800eca8:	d0de      	beq.n	800ec68 <dir_read.constprop.12+0x8>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ecaa:	2300      	movs	r3, #0
 800ecac:	61e3      	str	r3, [r4, #28]
 800ecae:	e7f5      	b.n	800ec9c <dir_read.constprop.12+0x3c>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ecb0:	2004      	movs	r0, #4
 800ecb2:	e7fa      	b.n	800ecaa <dir_read.constprop.12+0x4a>

0800ecb4 <dir_register>:
{
 800ecb4:	b570      	push	{r4, r5, r6, lr}
 800ecb6:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800ecb8:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800ecba:	f7ff fe6d 	bl	800e998 <dir_sdi.constprop.14>
	if (res == FR_OK) {
 800ecbe:	4604      	mov	r4, r0
 800ecc0:	bb28      	cbnz	r0, 800ed0e <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 800ecc2:	69e9      	ldr	r1, [r5, #28]
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	f7ff faef 	bl	800e2a8 <move_window>
			if (res != FR_OK) break;
 800ecca:	4604      	mov	r4, r0
 800eccc:	b9f8      	cbnz	r0, 800ed0e <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ecce:	6a2b      	ldr	r3, [r5, #32]
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	2be5      	cmp	r3, #229	; 0xe5
 800ecd4:	d114      	bne.n	800ed00 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 800ecd6:	69e9      	ldr	r1, [r5, #28]
 800ecd8:	4630      	mov	r0, r6
 800ecda:	f7ff fae5 	bl	800e2a8 <move_window>
		if (res == FR_OK) {
 800ecde:	4604      	mov	r4, r0
 800ece0:	b960      	cbnz	r0, 800ecfc <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ece2:	4601      	mov	r1, r0
 800ece4:	2220      	movs	r2, #32
 800ece6:	6a28      	ldr	r0, [r5, #32]
 800ece8:	f7ff f934 	bl	800df54 <mem_set>
 800ecec:	220b      	movs	r2, #11
 800ecee:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800ecf2:	6a28      	ldr	r0, [r5, #32]
 800ecf4:	f7ff fa61 	bl	800e1ba <mem_cpy.part.0>
			fs->wflag = 1;
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	70f3      	strb	r3, [r6, #3]
}
 800ecfc:	4620      	mov	r0, r4
 800ecfe:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d0e8      	beq.n	800ecd6 <dir_register+0x22>
			res = dir_next(dp, 1);
 800ed04:	2101      	movs	r1, #1
 800ed06:	4628      	mov	r0, r5
 800ed08:	f7ff fe79 	bl	800e9fe <dir_next>
 800ed0c:	e7d7      	b.n	800ecbe <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ed0e:	2c04      	cmp	r4, #4
 800ed10:	bf08      	it	eq
 800ed12:	2407      	moveq	r4, #7
 800ed14:	e7f2      	b.n	800ecfc <dir_register+0x48>

0800ed16 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ed16:	b538      	push	{r3, r4, r5, lr}
 800ed18:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ed1a:	4604      	mov	r4, r0
 800ed1c:	b1d0      	cbz	r0, 800ed54 <validate+0x3e>
 800ed1e:	6803      	ldr	r3, [r0, #0]
 800ed20:	b1db      	cbz	r3, 800ed5a <validate+0x44>
 800ed22:	781a      	ldrb	r2, [r3, #0]
 800ed24:	b1b2      	cbz	r2, 800ed54 <validate+0x3e>
 800ed26:	8881      	ldrh	r1, [r0, #4]
 800ed28:	88da      	ldrh	r2, [r3, #6]
 800ed2a:	4291      	cmp	r1, r2
 800ed2c:	d112      	bne.n	800ed54 <validate+0x3e>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ed2e:	68d8      	ldr	r0, [r3, #12]
 800ed30:	f000 fcbe 	bl	800f6b0 <ff_req_grant>
 800ed34:	4603      	mov	r3, r0
 800ed36:	b190      	cbz	r0, 800ed5e <validate+0x48>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ed38:	6823      	ldr	r3, [r4, #0]
 800ed3a:	7858      	ldrb	r0, [r3, #1]
 800ed3c:	f7ff f8b6 	bl	800deac <disk_status>
 800ed40:	f010 0001 	ands.w	r0, r0, #1
 800ed44:	d102      	bne.n	800ed4c <validate+0x36>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ed46:	6823      	ldr	r3, [r4, #0]
 800ed48:	602b      	str	r3, [r5, #0]
	return res;
}
 800ed4a:	bd38      	pop	{r3, r4, r5, pc}
				unlock_fs(obj->fs, FR_OK);
 800ed4c:	2100      	movs	r1, #0
 800ed4e:	6820      	ldr	r0, [r4, #0]
 800ed50:	f7ff fdcc 	bl	800e8ec <unlock_fs>
	FRESULT res = FR_INVALID_OBJECT;
 800ed54:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ed56:	2300      	movs	r3, #0
 800ed58:	e7f6      	b.n	800ed48 <validate+0x32>
	FRESULT res = FR_INVALID_OBJECT;
 800ed5a:	2009      	movs	r0, #9
 800ed5c:	e7f4      	b.n	800ed48 <validate+0x32>
			res = FR_TIMEOUT;
 800ed5e:	200f      	movs	r0, #15
 800ed60:	e7f2      	b.n	800ed48 <validate+0x32>
	...

0800ed64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ed64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed66:	b085      	sub	sp, #20
 800ed68:	4616      	mov	r6, r2
 800ed6a:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ed6e:	a804      	add	r0, sp, #16
 800ed70:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ed74:	f7ff fa09 	bl	800e18a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800ed78:	1e07      	subs	r7, r0, #0
 800ed7a:	db35      	blt.n	800ede8 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ed7c:	4d1c      	ldr	r5, [pc, #112]	; (800edf0 <f_mount+0x8c>)
 800ed7e:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]

	if (cfs) {
 800ed82:	b1a4      	cbz	r4, 800edae <f_mount+0x4a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ed84:	4b1b      	ldr	r3, [pc, #108]	; (800edf4 <f_mount+0x90>)
#if _FS_LOCK != 0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800ed86:	68e0      	ldr	r0, [r4, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	4294      	cmp	r4, r2
 800ed8c:	bf04      	itt	eq
 800ed8e:	2200      	moveq	r2, #0
 800ed90:	601a      	streq	r2, [r3, #0]
 800ed92:	691a      	ldr	r2, [r3, #16]
 800ed94:	4294      	cmp	r4, r2
 800ed96:	bf04      	itt	eq
 800ed98:	2200      	moveq	r2, #0
 800ed9a:	611a      	streq	r2, [r3, #16]
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800ed9c:	f000 fc83 	bl	800f6a6 <ff_del_syncobj>
 800eda0:	b918      	cbnz	r0, 800edaa <f_mount+0x46>
 800eda2:	2402      	movs	r4, #2

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800eda4:	4620      	mov	r0, r4
 800eda6:	b005      	add	sp, #20
 800eda8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cfs->fs_type = 0;				/* Clear old fs object */
 800edaa:	2300      	movs	r3, #0
 800edac:	7023      	strb	r3, [r4, #0]
	if (fs) {
 800edae:	9901      	ldr	r1, [sp, #4]
 800edb0:	b989      	cbnz	r1, 800edd6 <f_mount+0x72>
	FatFs[vol] = fs;					/* Register new fs object */
 800edb2:	9c01      	ldr	r4, [sp, #4]
 800edb4:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800edb8:	2c00      	cmp	r4, #0
 800edba:	d0f3      	beq.n	800eda4 <f_mount+0x40>
 800edbc:	2e01      	cmp	r6, #1
 800edbe:	d115      	bne.n	800edec <f_mount+0x88>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800edc0:	a901      	add	r1, sp, #4
 800edc2:	2200      	movs	r2, #0
 800edc4:	4668      	mov	r0, sp
 800edc6:	f7ff facb 	bl	800e360 <find_volume>
 800edca:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 800edcc:	4601      	mov	r1, r0
 800edce:	9801      	ldr	r0, [sp, #4]
 800edd0:	f7ff fd8c 	bl	800e8ec <unlock_fs>
 800edd4:	e7e6      	b.n	800eda4 <f_mount+0x40>
		fs->fs_type = 0;				/* Clear new fs object */
 800edd6:	2300      	movs	r3, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800edd8:	b2f8      	uxtb	r0, r7
		fs->fs_type = 0;				/* Clear new fs object */
 800edda:	f801 3b0c 	strb.w	r3, [r1], #12
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800edde:	f000 fc56 	bl	800f68e <ff_cre_syncobj>
 800ede2:	2800      	cmp	r0, #0
 800ede4:	d1e5      	bne.n	800edb2 <f_mount+0x4e>
 800ede6:	e7dc      	b.n	800eda2 <f_mount+0x3e>
	if (vol < 0) return FR_INVALID_DRIVE;
 800ede8:	240b      	movs	r4, #11
 800edea:	e7db      	b.n	800eda4 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800edec:	2400      	movs	r4, #0
 800edee:	e7d9      	b.n	800eda4 <f_mount+0x40>
 800edf0:	2400167c 	.word	0x2400167c
 800edf4:	24001680 	.word	0x24001680

0800edf8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800edf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edfc:	b090      	sub	sp, #64	; 0x40
 800edfe:	4690      	mov	r8, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ee00:	4604      	mov	r4, r0
{
 800ee02:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 800ee04:	2800      	cmp	r0, #0
 800ee06:	f000 80bb 	beq.w	800ef80 <f_open+0x188>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ee0a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800ee0e:	a902      	add	r1, sp, #8
 800ee10:	a801      	add	r0, sp, #4
 800ee12:	462a      	mov	r2, r5
 800ee14:	f7ff faa4 	bl	800e360 <find_volume>
	if (res == FR_OK) {
 800ee18:	4607      	mov	r7, r0
 800ee1a:	2800      	cmp	r0, #0
 800ee1c:	d165      	bne.n	800eeea <f_open+0xf2>
		dj.obj.fs = fs;
 800ee1e:	ae10      	add	r6, sp, #64	; 0x40
 800ee20:	9b02      	ldr	r3, [sp, #8]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ee22:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800ee24:	f846 3d34 	str.w	r3, [r6, #-52]!
		res = follow_path(&dj, path);	/* Follow the file path */
 800ee28:	4630      	mov	r0, r6
 800ee2a:	f7ff fe5d 	bl	800eae8 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ee2e:	b958      	cbnz	r0, 800ee48 <f_open+0x50>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ee30:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	db63      	blt.n	800ef00 <f_open+0x108>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ee38:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	bf14      	ite	ne
 800ee40:	2101      	movne	r1, #1
 800ee42:	2100      	moveq	r1, #0
 800ee44:	f7ff f88c 	bl	800df60 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ee48:	f018 0f1c 	tst.w	r8, #28
 800ee4c:	d064      	beq.n	800ef18 <f_open+0x120>
			if (res != FR_OK) {					/* No file, create new */
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	d058      	beq.n	800ef04 <f_open+0x10c>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ee52:	2804      	cmp	r0, #4
 800ee54:	d149      	bne.n	800eeea <f_open+0xf2>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ee56:	4b6f      	ldr	r3, [pc, #444]	; (800f014 <f_open+0x21c>)
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	b11a      	cbz	r2, 800ee64 <f_open+0x6c>
 800ee5c:	691b      	ldr	r3, [r3, #16]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	f040 8088 	bne.w	800ef74 <f_open+0x17c>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ee64:	4630      	mov	r0, r6
 800ee66:	f7ff ff25 	bl	800ecb4 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	d13d      	bne.n	800eeea <f_open+0xf2>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ee6e:	f045 0508 	orr.w	r5, r5, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ee72:	0728      	lsls	r0, r5, #28
 800ee74:	d55b      	bpl.n	800ef2e <f_open+0x136>
				dw = GET_FATTIME();
 800ee76:	f7fe f95d 	bl	800d134 <get_fattime>
 800ee7a:	4602      	mov	r2, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ee7c:	4601      	mov	r1, r0
 800ee7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ee80:	300e      	adds	r0, #14
 800ee82:	f7ff f85f 	bl	800df44 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ee86:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ee88:	4611      	mov	r1, r2
 800ee8a:	3016      	adds	r0, #22
 800ee8c:	f7ff f85a 	bl	800df44 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ee90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee92:	2220      	movs	r2, #32
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ee94:	f8dd 9008 	ldr.w	r9, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ee98:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ee9a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800ee9e:	f899 0000 	ldrb.w	r0, [r9]
 800eea2:	4651      	mov	r1, sl
 800eea4:	f7ff f992 	bl	800e1cc <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800eea8:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800eeaa:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800eeac:	4648      	mov	r0, r9
 800eeae:	f7ff f99c 	bl	800e1ea <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 800eeb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800eeb4:	2200      	movs	r2, #0
					fs->wflag = 1;
 800eeb6:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800eeb8:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800eeba:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 800eebc:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 800eebe:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 800eec0:	9b02      	ldr	r3, [sp, #8]
 800eec2:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800eec4:	f1b8 0f00 	cmp.w	r8, #0
 800eec8:	d031      	beq.n	800ef2e <f_open+0x136>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 800eeca:	4641      	mov	r1, r8
 800eecc:	4630      	mov	r0, r6
						dw = fs->winsect;
 800eece:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800eed2:	f7ff fcd4 	bl	800e87e <remove_chain>
						if (res == FR_OK) {
 800eed6:	b940      	cbnz	r0, 800eeea <f_open+0xf2>
							res = move_window(fs, dw);
 800eed8:	4649      	mov	r1, r9
 800eeda:	9802      	ldr	r0, [sp, #8]
 800eedc:	f7ff f9e4 	bl	800e2a8 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800eee0:	f108 33ff 	add.w	r3, r8, #4294967295
 800eee4:	9a02      	ldr	r2, [sp, #8]
 800eee6:	6113      	str	r3, [r2, #16]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 800eee8:	b308      	cbz	r0, 800ef2e <f_open+0x136>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eeea:	2300      	movs	r3, #0
 800eeec:	4607      	mov	r7, r0
 800eeee:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
 800eef0:	4639      	mov	r1, r7
 800eef2:	9802      	ldr	r0, [sp, #8]
 800eef4:	f7ff fcfa 	bl	800e8ec <unlock_fs>
}
 800eef8:	4638      	mov	r0, r7
 800eefa:	b010      	add	sp, #64	; 0x40
 800eefc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 800ef00:	2006      	movs	r0, #6
 800ef02:	e7a1      	b.n	800ee48 <f_open+0x50>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ef04:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800ef08:	f013 0f11 	tst.w	r3, #17
 800ef0c:	d136      	bne.n	800ef7c <f_open+0x184>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ef0e:	f018 0f04 	tst.w	r8, #4
 800ef12:	d0ae      	beq.n	800ee72 <f_open+0x7a>
 800ef14:	2008      	movs	r0, #8
 800ef16:	e7e8      	b.n	800eeea <f_open+0xf2>
			if (res == FR_OK) {					/* Following succeeded */
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	d1e6      	bne.n	800eeea <f_open+0xf2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ef1c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800ef20:	06da      	lsls	r2, r3, #27
 800ef22:	d429      	bmi.n	800ef78 <f_open+0x180>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ef24:	f018 0f02 	tst.w	r8, #2
 800ef28:	d001      	beq.n	800ef2e <f_open+0x136>
 800ef2a:	07db      	lsls	r3, r3, #31
 800ef2c:	d426      	bmi.n	800ef7c <f_open+0x184>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ef2e:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ef30:	9b02      	ldr	r3, [sp, #8]
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ef32:	4630      	mov	r0, r6
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ef34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				mode |= FA_MODIFIED;
 800ef36:	bf48      	it	mi
 800ef38:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ef3c:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ef3e:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 800ef42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ef44:	bf14      	ite	ne
 800ef46:	2101      	movne	r1, #1
 800ef48:	2100      	moveq	r1, #0
			fp->dir_ptr = dj.dir;
 800ef4a:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ef4c:	f7ff f842 	bl	800dfd4 <inc_lock>
 800ef50:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ef52:	b9b8      	cbnz	r0, 800ef84 <f_open+0x18c>
 800ef54:	2002      	movs	r0, #2
 800ef56:	e7c8      	b.n	800eeea <f_open+0xf2>
					clst = get_fat(&fp->obj, clst);
 800ef58:	6820      	ldr	r0, [r4, #0]
 800ef5a:	eba5 0508 	sub.w	r5, r5, r8
 800ef5e:	f7ff fbdc 	bl	800e71a <get_fat.isra.9>
					if (clst <= 1) res = FR_INT_ERR;
 800ef62:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800ef64:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800ef66:	d903      	bls.n	800ef70 <f_open+0x178>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ef68:	1c42      	adds	r2, r0, #1
 800ef6a:	d134      	bne.n	800efd6 <f_open+0x1de>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ef6c:	2001      	movs	r0, #1
 800ef6e:	e035      	b.n	800efdc <f_open+0x1e4>
					if (clst <= 1) res = FR_INT_ERR;
 800ef70:	2002      	movs	r0, #2
 800ef72:	e033      	b.n	800efdc <f_open+0x1e4>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ef74:	2012      	movs	r0, #18
 800ef76:	e7b8      	b.n	800eeea <f_open+0xf2>
					res = FR_NO_FILE;
 800ef78:	2004      	movs	r0, #4
 800ef7a:	e7b6      	b.n	800eeea <f_open+0xf2>
					res = FR_DENIED;
 800ef7c:	2007      	movs	r0, #7
 800ef7e:	e7b4      	b.n	800eeea <f_open+0xf2>
	if (!fp) return FR_INVALID_OBJECT;
 800ef80:	2709      	movs	r7, #9
 800ef82:	e7b9      	b.n	800eef8 <f_open+0x100>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ef84:	9e02      	ldr	r6, [sp, #8]
 800ef86:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800ef8a:	7830      	ldrb	r0, [r6, #0]
 800ef8c:	4641      	mov	r1, r8
 800ef8e:	f7ff f91d 	bl	800e1cc <ld_clust.isra.1>
 800ef92:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ef94:	f108 001c 	add.w	r0, r8, #28
 800ef98:	f7fe ffcc 	bl	800df34 <ld_dword>
			fp->obj.id = fs->id;
 800ef9c:	88f3      	ldrh	r3, [r6, #6]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ef9e:	2100      	movs	r1, #0
			fp->obj.fs = fs;	 	/* Validate the file object */
 800efa0:	6026      	str	r6, [r4, #0]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800efa2:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800efa6:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 800efa8:	80a3      	strh	r3, [r4, #4]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800efaa:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 800efae:	62e1      	str	r1, [r4, #44]	; 0x2c
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800efb0:	4630      	mov	r0, r6
			fp->flag = mode;		/* Set file access mode */
 800efb2:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 800efb4:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800efb6:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800efb8:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800efba:	f7fe ffcb 	bl	800df54 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800efbe:	06ab      	lsls	r3, r5, #26
 800efc0:	d596      	bpl.n	800eef0 <f_open+0xf8>
 800efc2:	68e5      	ldr	r5, [r4, #12]
 800efc4:	2d00      	cmp	r5, #0
 800efc6:	d093      	beq.n	800eef0 <f_open+0xf8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800efc8:	9b02      	ldr	r3, [sp, #8]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800efca:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800efcc:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800efd0:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800efd2:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800efd6:	45a8      	cmp	r8, r5
 800efd8:	d3be      	bcc.n	800ef58 <f_open+0x160>
 800efda:	2000      	movs	r0, #0
				fp->clust = clst;
 800efdc:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800efde:	2800      	cmp	r0, #0
 800efe0:	d183      	bne.n	800eeea <f_open+0xf2>
 800efe2:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d082      	beq.n	800eef0 <f_open+0xf8>
 800efea:	f8dd 8008 	ldr.w	r8, [sp, #8]
					if ((sc = clust2sect(fs, clst)) == 0) {
 800efee:	4640      	mov	r0, r8
 800eff0:	f7ff f84c 	bl	800e08c <clust2sect>
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d0ad      	beq.n	800ef54 <f_open+0x15c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800eff8:	eb00 2255 	add.w	r2, r0, r5, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800effc:	2301      	movs	r3, #1
 800effe:	4631      	mov	r1, r6
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f000:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f002:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f006:	f7fe ff6b 	bl	800dee0 <disk_read>
 800f00a:	2800      	cmp	r0, #0
 800f00c:	f43f af70 	beq.w	800eef0 <f_open+0xf8>
 800f010:	2001      	movs	r0, #1
 800f012:	e76a      	b.n	800eeea <f_open+0xf2>
 800f014:	24001680 	.word	0x24001680

0800f018 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f01c:	469b      	mov	fp, r3
 800f01e:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800f020:	2300      	movs	r3, #0
{
 800f022:	4689      	mov	r9, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f024:	a903      	add	r1, sp, #12
{
 800f026:	4604      	mov	r4, r0
	*bw = 0;	/* Clear write byte counter */
 800f028:	f8cb 3000 	str.w	r3, [fp]
{
 800f02c:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f02e:	f7ff fe72 	bl	800ed16 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f032:	4605      	mov	r5, r0
 800f034:	b908      	cbnz	r0, 800f03a <f_write+0x22>
 800f036:	7d65      	ldrb	r5, [r4, #21]
 800f038:	b10d      	cbz	r5, 800f03e <f_write+0x26>
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
 800f03a:	4629      	mov	r1, r5
 800f03c:	e01e      	b.n	800f07c <f_write+0x64>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f03e:	7d23      	ldrb	r3, [r4, #20]
 800f040:	079a      	lsls	r2, r3, #30
 800f042:	d408      	bmi.n	800f056 <f_write+0x3e>
 800f044:	2507      	movs	r5, #7
 800f046:	2107      	movs	r1, #7
 800f048:	9803      	ldr	r0, [sp, #12]
 800f04a:	f7ff fc4f 	bl	800e8ec <unlock_fs>
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800f04e:	4628      	mov	r0, r5
 800f050:	b005      	add	sp, #20
 800f052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f056:	69a3      	ldr	r3, [r4, #24]
 800f058:	42fb      	cmn	r3, r7
 800f05a:	d300      	bcc.n	800f05e <f_write+0x46>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f05c:	43df      	mvns	r7, r3
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f05e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800f062:	9300      	str	r3, [sp, #0]
 800f064:	e070      	b.n	800f148 <f_write+0x130>
					if (fp->cltbl) {
 800f066:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f068:	b163      	cbz	r3, 800f084 <f_write+0x6c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f06a:	4620      	mov	r0, r4
 800f06c:	f7ff f819 	bl	800e0a2 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f070:	b950      	cbnz	r0, 800f088 <f_write+0x70>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f072:	7d23      	ldrb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800f074:	2100      	movs	r1, #0
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f07a:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800f07c:	9803      	ldr	r0, [sp, #12]
 800f07e:	f7ff fc35 	bl	800e8ec <unlock_fs>
 800f082:	e7e4      	b.n	800f04e <f_write+0x36>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f084:	69e1      	ldr	r1, [r4, #28]
 800f086:	e073      	b.n	800f170 <f_write+0x158>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f088:	2801      	cmp	r0, #1
 800f08a:	d102      	bne.n	800f092 <f_write+0x7a>
 800f08c:	2502      	movs	r5, #2
					ABORT(fs, FR_DISK_ERR);
 800f08e:	7565      	strb	r5, [r4, #21]
 800f090:	e7d3      	b.n	800f03a <f_write+0x22>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f092:	1c43      	adds	r3, r0, #1
 800f094:	d101      	bne.n	800f09a <f_write+0x82>
					ABORT(fs, FR_DISK_ERR);
 800f096:	2501      	movs	r5, #1
 800f098:	e7f9      	b.n	800f08e <f_write+0x76>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f09a:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800f09c:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f09e:	b903      	cbnz	r3, 800f0a2 <f_write+0x8a>
 800f0a0:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f0a2:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	da0c      	bge.n	800f0c4 <f_write+0xac>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f0aa:	9803      	ldr	r0, [sp, #12]
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	6a22      	ldr	r2, [r4, #32]
 800f0b0:	9900      	ldr	r1, [sp, #0]
 800f0b2:	7840      	ldrb	r0, [r0, #1]
 800f0b4:	f7fe ff22 	bl	800defc <disk_write>
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d1ec      	bne.n	800f096 <f_write+0x7e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f0bc:	7d23      	ldrb	r3, [r4, #20]
 800f0be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0c2:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f0c4:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800f0c8:	69e1      	ldr	r1, [r4, #28]
 800f0ca:	4650      	mov	r0, sl
 800f0cc:	f7fe ffde 	bl	800e08c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f0d0:	b920      	cbnz	r0, 800f0dc <f_write+0xc4>
 800f0d2:	2502      	movs	r5, #2
 800f0d4:	4650      	mov	r0, sl
 800f0d6:	7565      	strb	r5, [r4, #21]
 800f0d8:	4629      	mov	r1, r5
 800f0da:	e7d0      	b.n	800f07e <f_write+0x66>
			sect += csect;
 800f0dc:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f0de:	0a7e      	lsrs	r6, r7, #9
			sect += csect;
 800f0e0:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f0e4:	d048      	beq.n	800f178 <f_write+0x160>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f0e6:	9a01      	ldr	r2, [sp, #4]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f0e8:	4649      	mov	r1, r9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f0ea:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 800f0ee:	4432      	add	r2, r6
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f0f0:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f0f4:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800f0f6:	bf84      	itt	hi
 800f0f8:	9a01      	ldrhi	r2, [sp, #4]
 800f0fa:	1a9e      	subhi	r6, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f0fc:	4642      	mov	r2, r8
 800f0fe:	4633      	mov	r3, r6
 800f100:	f7fe fefc 	bl	800defc <disk_write>
 800f104:	2800      	cmp	r0, #0
 800f106:	d1c6      	bne.n	800f096 <f_write+0x7e>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f108:	6a21      	ldr	r1, [r4, #32]
 800f10a:	eba1 0108 	sub.w	r1, r1, r8
 800f10e:	42b1      	cmp	r1, r6
 800f110:	d20a      	bcs.n	800f128 <f_write+0x110>
 800f112:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f116:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 800f11a:	9800      	ldr	r0, [sp, #0]
 800f11c:	f7ff f84d 	bl	800e1ba <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f120:	7d23      	ldrb	r3, [r4, #20]
 800f122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f126:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f128:	0276      	lsls	r6, r6, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f12a:	69a3      	ldr	r3, [r4, #24]
 800f12c:	44b1      	add	r9, r6
 800f12e:	68e2      	ldr	r2, [r4, #12]
 800f130:	1bbf      	subs	r7, r7, r6
 800f132:	4433      	add	r3, r6
 800f134:	61a3      	str	r3, [r4, #24]
 800f136:	429a      	cmp	r2, r3
 800f138:	bf2c      	ite	cs
 800f13a:	60e2      	strcs	r2, [r4, #12]
 800f13c:	60e3      	strcc	r3, [r4, #12]
 800f13e:	f8db 3000 	ldr.w	r3, [fp]
 800f142:	4433      	add	r3, r6
 800f144:	f8cb 3000 	str.w	r3, [fp]
	for ( ;  btw;							/* Repeat until all data written */
 800f148:	2f00      	cmp	r7, #0
 800f14a:	d092      	beq.n	800f072 <f_write+0x5a>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f14c:	69a1      	ldr	r1, [r4, #24]
 800f14e:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800f152:	bb23      	cbnz	r3, 800f19e <f_write+0x186>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f154:	9b03      	ldr	r3, [sp, #12]
 800f156:	895b      	ldrh	r3, [r3, #10]
 800f158:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800f15a:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 800f15e:	9301      	str	r3, [sp, #4]
 800f160:	d19f      	bne.n	800f0a2 <f_write+0x8a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f162:	2900      	cmp	r1, #0
 800f164:	f47f af7f 	bne.w	800f066 <f_write+0x4e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f168:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800f16a:	2800      	cmp	r0, #0
 800f16c:	d18c      	bne.n	800f088 <f_write+0x70>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f16e:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f170:	4620      	mov	r0, r4
 800f172:	f7ff fb2c 	bl	800e7ce <create_chain>
 800f176:	e77b      	b.n	800f070 <f_write+0x58>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f178:	6a23      	ldr	r3, [r4, #32]
 800f17a:	4543      	cmp	r3, r8
 800f17c:	d00d      	beq.n	800f19a <f_write+0x182>
 800f17e:	68e2      	ldr	r2, [r4, #12]
 800f180:	69a3      	ldr	r3, [r4, #24]
 800f182:	429a      	cmp	r2, r3
 800f184:	d909      	bls.n	800f19a <f_write+0x182>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f186:	2301      	movs	r3, #1
 800f188:	4642      	mov	r2, r8
 800f18a:	9900      	ldr	r1, [sp, #0]
 800f18c:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800f190:	f7fe fea6 	bl	800dee0 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800f194:	2800      	cmp	r0, #0
 800f196:	f47f af7e 	bne.w	800f096 <f_write+0x7e>
			fp->sect = sect;
 800f19a:	f8c4 8020 	str.w	r8, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f19e:	69a0      	ldr	r0, [r4, #24]
 800f1a0:	4649      	mov	r1, r9
 800f1a2:	9b00      	ldr	r3, [sp, #0]
 800f1a4:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800f1a8:	f5c0 7600 	rsb	r6, r0, #512	; 0x200
 800f1ac:	4418      	add	r0, r3
 800f1ae:	42be      	cmp	r6, r7
 800f1b0:	bf28      	it	cs
 800f1b2:	463e      	movcs	r6, r7
 800f1b4:	4632      	mov	r2, r6
 800f1b6:	f7ff f800 	bl	800e1ba <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 800f1ba:	7d23      	ldrb	r3, [r4, #20]
 800f1bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f1c0:	7523      	strb	r3, [r4, #20]
 800f1c2:	e7b2      	b.n	800f12a <f_write+0x112>

0800f1c4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f1c6:	a901      	add	r1, sp, #4
{
 800f1c8:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f1ca:	f7ff fda4 	bl	800ed16 <validate>
	if (res == FR_OK) {
 800f1ce:	4605      	mov	r5, r0
 800f1d0:	2800      	cmp	r0, #0
 800f1d2:	d142      	bne.n	800f25a <f_sync+0x96>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f1d4:	7d23      	ldrb	r3, [r4, #20]
 800f1d6:	065a      	lsls	r2, r3, #25
 800f1d8:	d53f      	bpl.n	800f25a <f_sync+0x96>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f1da:	061b      	lsls	r3, r3, #24
 800f1dc:	d514      	bpl.n	800f208 <f_sync+0x44>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f1de:	9801      	ldr	r0, [sp, #4]
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	6a22      	ldr	r2, [r4, #32]
 800f1e4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800f1e8:	7840      	ldrb	r0, [r0, #1]
 800f1ea:	f7fe fe87 	bl	800defc <disk_write>
 800f1ee:	b138      	cbz	r0, 800f200 <f_sync+0x3c>
 800f1f0:	2501      	movs	r5, #1
 800f1f2:	2101      	movs	r1, #1
 800f1f4:	9801      	ldr	r0, [sp, #4]
 800f1f6:	f7ff fb79 	bl	800e8ec <unlock_fs>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	b003      	add	sp, #12
 800f1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
				fp->flag &= (BYTE)~FA_DIRTY;
 800f200:	7d23      	ldrb	r3, [r4, #20]
 800f202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f206:	7523      	strb	r3, [r4, #20]
			tm = GET_FATTIME();				/* Modified time */
 800f208:	f7fd ff94 	bl	800d134 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800f20c:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 800f20e:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 800f210:	9801      	ldr	r0, [sp, #4]
 800f212:	f7ff f849 	bl	800e2a8 <move_window>
				if (res == FR_OK) {
 800f216:	4605      	mov	r5, r0
 800f218:	b9f8      	cbnz	r0, 800f25a <f_sync+0x96>
					dir = fp->dir_ptr;
 800f21a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f21c:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f21e:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f220:	f043 0320 	orr.w	r3, r3, #32
 800f224:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f226:	68a2      	ldr	r2, [r4, #8]
 800f228:	6820      	ldr	r0, [r4, #0]
 800f22a:	f7fe ffde 	bl	800e1ea <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f22e:	68e1      	ldr	r1, [r4, #12]
 800f230:	f106 001c 	add.w	r0, r6, #28
 800f234:	f7fe fe86 	bl	800df44 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f238:	4639      	mov	r1, r7
 800f23a:	f106 0016 	add.w	r0, r6, #22
 800f23e:	f7fe fe81 	bl	800df44 <st_dword>
					fs->wflag = 1;
 800f242:	2301      	movs	r3, #1
 800f244:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800f246:	74b5      	strb	r5, [r6, #18]
	*ptr++ = (BYTE)val;
 800f248:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 800f24a:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f24c:	f7ff fb59 	bl	800e902 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f250:	7d23      	ldrb	r3, [r4, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f252:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f258:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, res);
 800f25a:	4629      	mov	r1, r5
 800f25c:	9801      	ldr	r0, [sp, #4]
 800f25e:	f7ff fb45 	bl	800e8ec <unlock_fs>
 800f262:	e7ca      	b.n	800f1fa <f_sync+0x36>

0800f264 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f266:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f268:	f7ff ffac 	bl	800f1c4 <f_sync>
	if (res == FR_OK)
 800f26c:	4604      	mov	r4, r0
 800f26e:	b978      	cbnz	r0, 800f290 <f_close+0x2c>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f270:	a901      	add	r1, sp, #4
 800f272:	4628      	mov	r0, r5
 800f274:	f7ff fd4f 	bl	800ed16 <validate>
		if (res == FR_OK) {
 800f278:	4604      	mov	r4, r0
 800f27a:	b948      	cbnz	r0, 800f290 <f_close+0x2c>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f27c:	6928      	ldr	r0, [r5, #16]
 800f27e:	f7fe fee9 	bl	800e054 <dec_lock>
			if (res == FR_OK)
 800f282:	4604      	mov	r4, r0
 800f284:	b900      	cbnz	r0, 800f288 <f_close+0x24>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f286:	6028      	str	r0, [r5, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f288:	2100      	movs	r1, #0
 800f28a:	9801      	ldr	r0, [sp, #4]
 800f28c:	f7ff fb2e 	bl	800e8ec <unlock_fs>
#endif
		}
	}
	return res;
}
 800f290:	4620      	mov	r0, r4
 800f292:	b003      	add	sp, #12
 800f294:	bd30      	pop	{r4, r5, pc}

0800f296 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f296:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f29a:	460e      	mov	r6, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f29c:	a901      	add	r1, sp, #4
{
 800f29e:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f2a0:	f7ff fd39 	bl	800ed16 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	b908      	cbnz	r0, 800f2ac <f_lseek+0x16>
 800f2a8:	7d6c      	ldrb	r4, [r5, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f2aa:	b114      	cbz	r4, 800f2b2 <f_lseek+0x1c>
#endif
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
 800f2ac:	4621      	mov	r1, r4
 800f2ae:	9801      	ldr	r0, [sp, #4]
 800f2b0:	e051      	b.n	800f356 <f_lseek+0xc0>
	if (fp->cltbl) {	/* Fast seek */
 800f2b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d07c      	beq.n	800f3b2 <f_lseek+0x11c>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f2b8:	1c72      	adds	r2, r6, #1
 800f2ba:	d134      	bne.n	800f326 <f_lseek+0x90>
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f2bc:	68af      	ldr	r7, [r5, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f2be:	f103 0904 	add.w	r9, r3, #4
 800f2c2:	f8d3 a000 	ldr.w	sl, [r3]
 800f2c6:	2602      	movs	r6, #2
			if (cl) {
 800f2c8:	b327      	cbz	r7, 800f314 <f_lseek+0x7e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f2ca:	f04f 0800 	mov.w	r8, #0
 800f2ce:	eb07 0108 	add.w	r1, r7, r8
						cl = get_fat(&fp->obj, cl);
 800f2d2:	6828      	ldr	r0, [r5, #0]
 800f2d4:	f7ff fa21 	bl	800e71a <get_fat.isra.9>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f2d8:	2801      	cmp	r0, #1
						cl = get_fat(&fp->obj, cl);
 800f2da:	f108 0801 	add.w	r8, r8, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f2de:	d804      	bhi.n	800f2ea <f_lseek+0x54>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f2e0:	2402      	movs	r4, #2
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f2e2:	756c      	strb	r4, [r5, #21]
 800f2e4:	e7e2      	b.n	800f2ac <f_lseek+0x16>
 800f2e6:	4607      	mov	r7, r0
 800f2e8:	e7ef      	b.n	800f2ca <f_lseek+0x34>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f2ea:	1c43      	adds	r3, r0, #1
 800f2ec:	d101      	bne.n	800f2f2 <f_lseek+0x5c>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f2ee:	2401      	movs	r4, #1
 800f2f0:	e7f7      	b.n	800f2e2 <f_lseek+0x4c>
					} while (cl == pcl + 1);
 800f2f2:	eb07 0308 	add.w	r3, r7, r8
 800f2f6:	4283      	cmp	r3, r0
 800f2f8:	d0e9      	beq.n	800f2ce <f_lseek+0x38>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f2fa:	3602      	adds	r6, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f2fc:	45b2      	cmp	sl, r6
						*tbl++ = ncl; *tbl++ = tcl;
 800f2fe:	bf21      	itttt	cs
 800f300:	464b      	movcs	r3, r9
 800f302:	f843 8b08 	strcs.w	r8, [r3], #8
 800f306:	f8c9 7004 	strcs.w	r7, [r9, #4]
 800f30a:	4699      	movcs	r9, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f30c:	9b01      	ldr	r3, [sp, #4]
 800f30e:	699b      	ldr	r3, [r3, #24]
 800f310:	4283      	cmp	r3, r0
 800f312:	d8e8      	bhi.n	800f2e6 <f_lseek+0x50>
			*fp->cltbl = ulen;	/* Number of items used */
 800f314:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			if (ulen <= tlen) {
 800f316:	4556      	cmp	r6, sl
			*fp->cltbl = ulen;	/* Number of items used */
 800f318:	601e      	str	r6, [r3, #0]
			if (ulen <= tlen) {
 800f31a:	f200 80e4 	bhi.w	800f4e6 <f_lseek+0x250>
				*tbl = 0;		/* Terminate table */
 800f31e:	2300      	movs	r3, #0
 800f320:	f8c9 3000 	str.w	r3, [r9]
 800f324:	e7c2      	b.n	800f2ac <f_lseek+0x16>
 800f326:	68e8      	ldr	r0, [r5, #12]
 800f328:	4286      	cmp	r6, r0
 800f32a:	bf28      	it	cs
 800f32c:	4606      	movcs	r6, r0
			fp->fptr = ofs;				/* Set file pointer */
 800f32e:	61ae      	str	r6, [r5, #24]
			if (ofs) {
 800f330:	2e00      	cmp	r6, #0
 800f332:	d0bb      	beq.n	800f2ac <f_lseek+0x16>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f334:	f106 38ff 	add.w	r8, r6, #4294967295
 800f338:	9f01      	ldr	r7, [sp, #4]
 800f33a:	4628      	mov	r0, r5
 800f33c:	4641      	mov	r1, r8
 800f33e:	f7fe feb0 	bl	800e0a2 <clmt_clust>
 800f342:	4601      	mov	r1, r0
 800f344:	61e8      	str	r0, [r5, #28]
				dsc = clust2sect(fs, fp->clust);
 800f346:	4638      	mov	r0, r7
 800f348:	f7fe fea0 	bl	800e08c <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f34c:	b948      	cbnz	r0, 800f362 <f_lseek+0xcc>
 800f34e:	2402      	movs	r4, #2
 800f350:	4638      	mov	r0, r7
 800f352:	4621      	mov	r1, r4
 800f354:	756c      	strb	r4, [r5, #21]
	LEAVE_FF(fs, res);
 800f356:	f7ff fac9 	bl	800e8ec <unlock_fs>
}
 800f35a:	4620      	mov	r0, r4
 800f35c:	b002      	add	sp, #8
 800f35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f362:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800f366:	2e00      	cmp	r6, #0
 800f368:	d0a0      	beq.n	800f2ac <f_lseek+0x16>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f36a:	897e      	ldrh	r6, [r7, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f36c:	6a2a      	ldr	r2, [r5, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f36e:	3e01      	subs	r6, #1
 800f370:	ea06 2658 	and.w	r6, r6, r8, lsr #9
 800f374:	4406      	add	r6, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f376:	42b2      	cmp	r2, r6
 800f378:	d098      	beq.n	800f2ac <f_lseek+0x16>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f37a:	f995 3014 	ldrsb.w	r3, [r5, #20]
 800f37e:	f105 0830 	add.w	r8, r5, #48	; 0x30
 800f382:	2b00      	cmp	r3, #0
 800f384:	da0a      	bge.n	800f39c <f_lseek+0x106>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f386:	2301      	movs	r3, #1
 800f388:	4641      	mov	r1, r8
 800f38a:	7878      	ldrb	r0, [r7, #1]
 800f38c:	f7fe fdb6 	bl	800defc <disk_write>
 800f390:	2800      	cmp	r0, #0
 800f392:	d1ac      	bne.n	800f2ee <f_lseek+0x58>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f394:	7d2b      	ldrb	r3, [r5, #20]
 800f396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f39a:	752b      	strb	r3, [r5, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f39c:	9801      	ldr	r0, [sp, #4]
 800f39e:	2301      	movs	r3, #1
 800f3a0:	4632      	mov	r2, r6
 800f3a2:	4641      	mov	r1, r8
 800f3a4:	7840      	ldrb	r0, [r0, #1]
 800f3a6:	f7fe fd9b 	bl	800dee0 <disk_read>
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	d19f      	bne.n	800f2ee <f_lseek+0x58>
					fp->sect = dsc;
 800f3ae:	622e      	str	r6, [r5, #32]
 800f3b0:	e77c      	b.n	800f2ac <f_lseek+0x16>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f3b2:	68eb      	ldr	r3, [r5, #12]
 800f3b4:	42b3      	cmp	r3, r6
 800f3b6:	d204      	bcs.n	800f3c2 <f_lseek+0x12c>
 800f3b8:	7d2a      	ldrb	r2, [r5, #20]
 800f3ba:	f012 0f02 	tst.w	r2, #2
 800f3be:	bf08      	it	eq
 800f3c0:	461e      	moveq	r6, r3
		fp->fptr = nsect = 0;
 800f3c2:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800f3c4:	69ab      	ldr	r3, [r5, #24]
		fp->fptr = nsect = 0;
 800f3c6:	61aa      	str	r2, [r5, #24]
		if (ofs) {
 800f3c8:	b90e      	cbnz	r6, 800f3ce <f_lseek+0x138>
		fp->fptr = nsect = 0;
 800f3ca:	4637      	mov	r7, r6
 800f3cc:	e01d      	b.n	800f40a <f_lseek+0x174>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f3ce:	9a01      	ldr	r2, [sp, #4]
 800f3d0:	8957      	ldrh	r7, [r2, #10]
 800f3d2:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d040      	beq.n	800f45a <f_lseek+0x1c4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f3d8:	3b01      	subs	r3, #1
 800f3da:	1e72      	subs	r2, r6, #1
 800f3dc:	fbb3 f1f7 	udiv	r1, r3, r7
 800f3e0:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 800f3e4:	428a      	cmp	r2, r1
 800f3e6:	d338      	bcc.n	800f45a <f_lseek+0x1c4>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f3e8:	427a      	negs	r2, r7
				clst = fp->clust;
 800f3ea:	69e9      	ldr	r1, [r5, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f3ec:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 800f3ee:	1af6      	subs	r6, r6, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f3f0:	61ab      	str	r3, [r5, #24]
			if (clst != 0) {
 800f3f2:	2900      	cmp	r1, #0
 800f3f4:	d160      	bne.n	800f4b8 <f_lseek+0x222>
		fp->fptr = nsect = 0;
 800f3f6:	2700      	movs	r7, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f3f8:	68eb      	ldr	r3, [r5, #12]
 800f3fa:	69ae      	ldr	r6, [r5, #24]
 800f3fc:	429e      	cmp	r6, r3
			fp->flag |= FA_MODIFIED;
 800f3fe:	bf81      	itttt	hi
 800f400:	7d2b      	ldrbhi	r3, [r5, #20]
			fp->obj.objsize = fp->fptr;
 800f402:	60ee      	strhi	r6, [r5, #12]
			fp->flag |= FA_MODIFIED;
 800f404:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 800f408:	752b      	strbhi	r3, [r5, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f40a:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800f40e:	2e00      	cmp	r6, #0
 800f410:	f43f af4c 	beq.w	800f2ac <f_lseek+0x16>
 800f414:	6a2a      	ldr	r2, [r5, #32]
 800f416:	4297      	cmp	r7, r2
 800f418:	f43f af48 	beq.w	800f2ac <f_lseek+0x16>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f41c:	f995 3014 	ldrsb.w	r3, [r5, #20]
 800f420:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800f424:	2b00      	cmp	r3, #0
 800f426:	da0c      	bge.n	800f442 <f_lseek+0x1ac>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f428:	9801      	ldr	r0, [sp, #4]
 800f42a:	2301      	movs	r3, #1
 800f42c:	4631      	mov	r1, r6
 800f42e:	7840      	ldrb	r0, [r0, #1]
 800f430:	f7fe fd64 	bl	800defc <disk_write>
 800f434:	2800      	cmp	r0, #0
 800f436:	f47f af5a 	bne.w	800f2ee <f_lseek+0x58>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f43a:	7d2b      	ldrb	r3, [r5, #20]
 800f43c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f440:	752b      	strb	r3, [r5, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f442:	9801      	ldr	r0, [sp, #4]
 800f444:	2301      	movs	r3, #1
 800f446:	463a      	mov	r2, r7
 800f448:	4631      	mov	r1, r6
 800f44a:	7840      	ldrb	r0, [r0, #1]
 800f44c:	f7fe fd48 	bl	800dee0 <disk_read>
 800f450:	2800      	cmp	r0, #0
 800f452:	f47f af4c 	bne.w	800f2ee <f_lseek+0x58>
			fp->sect = nsect;
 800f456:	622f      	str	r7, [r5, #32]
 800f458:	e728      	b.n	800f2ac <f_lseek+0x16>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f45a:	68a9      	ldr	r1, [r5, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f45c:	b951      	cbnz	r1, 800f474 <f_lseek+0x1de>
					clst = create_chain(&fp->obj, 0);
 800f45e:	4628      	mov	r0, r5
 800f460:	f7ff f9b5 	bl	800e7ce <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f464:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 800f466:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f468:	f43f af3a 	beq.w	800f2e0 <f_lseek+0x4a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f46c:	3001      	adds	r0, #1
 800f46e:	f43f af3e 	beq.w	800f2ee <f_lseek+0x58>
					fp->obj.sclust = clst;
 800f472:	60a9      	str	r1, [r5, #8]
				fp->clust = clst;
 800f474:	61e9      	str	r1, [r5, #28]
 800f476:	e7bc      	b.n	800f3f2 <f_lseek+0x15c>
					ofs -= bcs; fp->fptr += bcs;
 800f478:	443b      	add	r3, r7
 800f47a:	1bf6      	subs	r6, r6, r7
 800f47c:	61ab      	str	r3, [r5, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f47e:	7d2b      	ldrb	r3, [r5, #20]
 800f480:	079a      	lsls	r2, r3, #30
 800f482:	d506      	bpl.n	800f492 <f_lseek+0x1fc>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f484:	4628      	mov	r0, r5
 800f486:	f7ff f9a2 	bl	800e7ce <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f48a:	4601      	mov	r1, r0
 800f48c:	b928      	cbnz	r0, 800f49a <f_lseek+0x204>
							ofs = 0; break;
 800f48e:	4606      	mov	r6, r0
 800f490:	e015      	b.n	800f4be <f_lseek+0x228>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f492:	6828      	ldr	r0, [r5, #0]
 800f494:	f7ff f941 	bl	800e71a <get_fat.isra.9>
 800f498:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f49a:	1c4b      	adds	r3, r1, #1
 800f49c:	9801      	ldr	r0, [sp, #4]
 800f49e:	d103      	bne.n	800f4a8 <f_lseek+0x212>
 800f4a0:	2401      	movs	r4, #1
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f4a2:	756c      	strb	r4, [r5, #21]
 800f4a4:	4621      	mov	r1, r4
 800f4a6:	e756      	b.n	800f356 <f_lseek+0xc0>
 800f4a8:	2901      	cmp	r1, #1
 800f4aa:	d902      	bls.n	800f4b2 <f_lseek+0x21c>
 800f4ac:	6983      	ldr	r3, [r0, #24]
 800f4ae:	428b      	cmp	r3, r1
 800f4b0:	d801      	bhi.n	800f4b6 <f_lseek+0x220>
 800f4b2:	2402      	movs	r4, #2
 800f4b4:	e7f5      	b.n	800f4a2 <f_lseek+0x20c>
					fp->clust = clst;
 800f4b6:	61e9      	str	r1, [r5, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f4b8:	42be      	cmp	r6, r7
 800f4ba:	69ab      	ldr	r3, [r5, #24]
 800f4bc:	d8dc      	bhi.n	800f478 <f_lseek+0x1e2>
				fp->fptr += ofs;
 800f4be:	69ab      	ldr	r3, [r5, #24]
 800f4c0:	4433      	add	r3, r6
 800f4c2:	61ab      	str	r3, [r5, #24]
				if (ofs % SS(fs)) {
 800f4c4:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d094      	beq.n	800f3f6 <f_lseek+0x160>
 800f4cc:	9a01      	ldr	r2, [sp, #4]
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f4ce:	4610      	mov	r0, r2
 800f4d0:	f7fe fddc 	bl	800e08c <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f4d4:	b920      	cbnz	r0, 800f4e0 <f_lseek+0x24a>
 800f4d6:	2402      	movs	r4, #2
 800f4d8:	4610      	mov	r0, r2
 800f4da:	756c      	strb	r4, [r5, #21]
 800f4dc:	4621      	mov	r1, r4
 800f4de:	e73a      	b.n	800f356 <f_lseek+0xc0>
					nsect += (DWORD)(ofs / SS(fs));
 800f4e0:	eb00 2756 	add.w	r7, r0, r6, lsr #9
 800f4e4:	e788      	b.n	800f3f8 <f_lseek+0x162>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f4e6:	2411      	movs	r4, #17
 800f4e8:	e6e0      	b.n	800f2ac <f_lseek+0x16>

0800f4ea <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f4ea:	b530      	push	{r4, r5, lr}
 800f4ec:	b085      	sub	sp, #20
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f4ee:	4604      	mov	r4, r0
{
 800f4f0:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	d03c      	beq.n	800f570 <f_opendir+0x86>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	a903      	add	r1, sp, #12
 800f4fa:	a801      	add	r0, sp, #4
 800f4fc:	f7fe ff30 	bl	800e360 <find_volume>
	if (res == FR_OK) {
 800f500:	4605      	mov	r5, r0
 800f502:	b980      	cbnz	r0, 800f526 <f_opendir+0x3c>
		obj->fs = fs;
 800f504:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f506:	4620      	mov	r0, r4
 800f508:	9901      	ldr	r1, [sp, #4]
		obj->fs = fs;
 800f50a:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f50c:	f7ff faec 	bl	800eae8 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800f510:	4605      	mov	r5, r0
 800f512:	bb40      	cbnz	r0, 800f566 <f_opendir+0x7c>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f514:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 800f518:	9d03      	ldr	r5, [sp, #12]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	db0b      	blt.n	800f536 <f_opendir+0x4c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f51e:	79a3      	ldrb	r3, [r4, #6]
 800f520:	06db      	lsls	r3, r3, #27
 800f522:	d403      	bmi.n	800f52c <f_opendir+0x42>
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f524:	2505      	movs	r5, #5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f526:	2300      	movs	r3, #0
 800f528:	6023      	str	r3, [r4, #0]
 800f52a:	e013      	b.n	800f554 <f_opendir+0x6a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f52c:	7828      	ldrb	r0, [r5, #0]
 800f52e:	6a21      	ldr	r1, [r4, #32]
 800f530:	f7fe fe4c 	bl	800e1cc <ld_clust.isra.1>
 800f534:	60a0      	str	r0, [r4, #8]
				obj->id = fs->id;
 800f536:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f538:	4620      	mov	r0, r4
				obj->id = fs->id;
 800f53a:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f53c:	f7ff fa2c 	bl	800e998 <dir_sdi.constprop.14>
				if (res == FR_OK) {
 800f540:	4605      	mov	r5, r0
 800f542:	b980      	cbnz	r0, 800f566 <f_opendir+0x7c>
					if (obj->sclust) {
 800f544:	68a3      	ldr	r3, [r4, #8]
 800f546:	b163      	cbz	r3, 800f562 <f_opendir+0x78>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f548:	4601      	mov	r1, r0
 800f54a:	4620      	mov	r0, r4
 800f54c:	f7fe fd42 	bl	800dfd4 <inc_lock>
 800f550:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f552:	b158      	cbz	r0, 800f56c <f_opendir+0x82>

	LEAVE_FF(fs, res);
 800f554:	4629      	mov	r1, r5
 800f556:	9803      	ldr	r0, [sp, #12]
 800f558:	f7ff f9c8 	bl	800e8ec <unlock_fs>
}
 800f55c:	4628      	mov	r0, r5
 800f55e:	b005      	add	sp, #20
 800f560:	bd30      	pop	{r4, r5, pc}
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f562:	6120      	str	r0, [r4, #16]
 800f564:	e7f6      	b.n	800f554 <f_opendir+0x6a>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f566:	2d04      	cmp	r5, #4
 800f568:	d0dc      	beq.n	800f524 <f_opendir+0x3a>
 800f56a:	e7dc      	b.n	800f526 <f_opendir+0x3c>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f56c:	2512      	movs	r5, #18
 800f56e:	e7da      	b.n	800f526 <f_opendir+0x3c>
	if (!dp) return FR_INVALID_OBJECT;
 800f570:	2509      	movs	r5, #9
 800f572:	e7f3      	b.n	800f55c <f_opendir+0x72>

0800f574 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f574:	b537      	push	{r0, r1, r2, r4, r5, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f576:	a901      	add	r1, sp, #4
{
 800f578:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f57a:	f7ff fbcc 	bl	800ed16 <validate>
	if (res == FR_OK) {
 800f57e:	b940      	cbnz	r0, 800f592 <f_closedir+0x1e>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800f580:	6928      	ldr	r0, [r5, #16]
 800f582:	b940      	cbnz	r0, 800f596 <f_closedir+0x22>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800f584:	2400      	movs	r4, #0
 800f586:	602c      	str	r4, [r5, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f588:	9801      	ldr	r0, [sp, #4]
 800f58a:	2100      	movs	r1, #0
 800f58c:	f7ff f9ae 	bl	800e8ec <unlock_fs>
 800f590:	4620      	mov	r0, r4
#endif
	}
	return res;
}
 800f592:	b003      	add	sp, #12
 800f594:	bd30      	pop	{r4, r5, pc}
			res = dec_lock(dp->obj.lockid);
 800f596:	f7fe fd5d 	bl	800e054 <dec_lock>
		if (res == FR_OK)
 800f59a:	4604      	mov	r4, r0
 800f59c:	2800      	cmp	r0, #0
 800f59e:	d1f3      	bne.n	800f588 <f_closedir+0x14>
 800f5a0:	e7f0      	b.n	800f584 <f_closedir+0x10>

0800f5a2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f5a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5a4:	460e      	mov	r6, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f5a6:	a901      	add	r1, sp, #4
{
 800f5a8:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f5aa:	f7ff fbb4 	bl	800ed16 <validate>
	if (res == FR_OK) {
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	b920      	cbnz	r0, 800f5bc <f_readdir+0x1a>
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f5b2:	4628      	mov	r0, r5
		if (!fno) {
 800f5b4:	b94e      	cbnz	r6, 800f5ca <f_readdir+0x28>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f5b6:	f7ff f9ef 	bl	800e998 <dir_sdi.constprop.14>
 800f5ba:	4604      	mov	r4, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f5bc:	9801      	ldr	r0, [sp, #4]
 800f5be:	4621      	mov	r1, r4
 800f5c0:	f7ff f994 	bl	800e8ec <unlock_fs>
}
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	b002      	add	sp, #8
 800f5c8:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read(dp, 0);			/* Read an item */
 800f5ca:	f7ff fb49 	bl	800ec60 <dir_read.constprop.12>
			if (res == FR_OK) {				/* A valid entry is found */
 800f5ce:	f010 03fb 	ands.w	r3, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 800f5d2:	4604      	mov	r4, r0
			if (res == FR_OK) {				/* A valid entry is found */
 800f5d4:	d1f2      	bne.n	800f5bc <f_readdir+0x1a>
	fno->fname[0] = 0;		/* Invaidate file info */
 800f5d6:	7273      	strb	r3, [r6, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f5d8:	69eb      	ldr	r3, [r5, #28]
 800f5da:	b11b      	cbz	r3, 800f5e4 <f_readdir+0x42>
 800f5dc:	4631      	mov	r1, r6
 800f5de:	4628      	mov	r0, r5
 800f5e0:	f7fe fe0f 	bl	800e202 <get_fileinfo.part.3>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f5e4:	2100      	movs	r1, #0
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	f7ff fa09 	bl	800e9fe <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f5ec:	2804      	cmp	r0, #4
 800f5ee:	bf14      	ite	ne
 800f5f0:	4604      	movne	r4, r0
 800f5f2:	2400      	moveq	r4, #0
 800f5f4:	e7e2      	b.n	800f5bc <f_readdir+0x1a>

0800f5f6 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800f5f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5f8:	4606      	mov	r6, r0
 800f5fa:	460d      	mov	r5, r1


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800f5fc:	f101 0709 	add.w	r7, r1, #9
		res = f_readdir(dp, fno);		/* Get a directory item */
 800f600:	4629      	mov	r1, r5
 800f602:	4630      	mov	r0, r6
 800f604:	f7ff ffcd 	bl	800f5a2 <f_readdir>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800f608:	4604      	mov	r4, r0
 800f60a:	b950      	cbnz	r0, 800f622 <f_findnext+0x2c>
 800f60c:	b14d      	cbz	r5, 800f622 <f_findnext+0x2c>
 800f60e:	7a6b      	ldrb	r3, [r5, #9]
 800f610:	b13b      	cbz	r3, 800f622 <f_findnext+0x2c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800f612:	4603      	mov	r3, r0
 800f614:	4602      	mov	r2, r0
 800f616:	4639      	mov	r1, r7
 800f618:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800f61a:	f7fe fd69 	bl	800e0f0 <pattern_matching>
 800f61e:	2800      	cmp	r0, #0
 800f620:	d0ee      	beq.n	800f600 <f_findnext+0xa>
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 800f622:	4620      	mov	r0, r4
 800f624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f626 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800f626:	b538      	push	{r3, r4, r5, lr}
 800f628:	460d      	mov	r5, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800f62a:	6303      	str	r3, [r0, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 800f62c:	4611      	mov	r1, r2
{
 800f62e:	4604      	mov	r4, r0
	res = f_opendir(dp, path);		/* Open the target directory */
 800f630:	f7ff ff5b 	bl	800f4ea <f_opendir>
	if (res == FR_OK) {
 800f634:	b928      	cbnz	r0, 800f642 <f_findfirst+0x1c>
		res = f_findnext(dp, fno);	/* Find the first item */
 800f636:	4629      	mov	r1, r5
 800f638:	4620      	mov	r0, r4
	}
	return res;
}
 800f63a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 800f63e:	f7ff bfda 	b.w	800f5f6 <f_findnext>
}
 800f642:	bd38      	pop	{r3, r4, r5, pc}

0800f644 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800f644:	4b0f      	ldr	r3, [pc, #60]	; (800f684 <FATFS_LinkDriverEx+0x40>)
{
 800f646:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 800f648:	7a5d      	ldrb	r5, [r3, #9]
 800f64a:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800f64e:	b9b5      	cbnz	r5, 800f67e <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f650:	7a5d      	ldrb	r5, [r3, #9]
 800f652:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800f654:	7a5d      	ldrb	r5, [r3, #9]
 800f656:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800f65a:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800f65c:	7a58      	ldrb	r0, [r3, #9]
 800f65e:	4418      	add	r0, r3
 800f660:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800f662:	7a5a      	ldrb	r2, [r3, #9]
 800f664:	b2d2      	uxtb	r2, r2
 800f666:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 800f668:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800f66a:	b2c0      	uxtb	r0, r0
 800f66c:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 800f66e:	233a      	movs	r3, #58	; 0x3a
    path[2] = '/';
    path[3] = 0;
 800f670:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 800f672:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800f674:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800f676:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 800f678:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 800f67a:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 800f67c:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800f67e:	2001      	movs	r0, #1
 800f680:	e7fc      	b.n	800f67c <FATFS_LinkDriverEx+0x38>
 800f682:	bf00      	nop
 800f684:	240016a4 	.word	0x240016a4

0800f688 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800f688:	2200      	movs	r2, #0
 800f68a:	f7ff bfdb 	b.w	800f644 <FATFS_LinkDriverEx>

0800f68e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f68e:	b510      	push	{r4, lr}
 800f690:	460c      	mov	r4, r1

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800f692:	2101      	movs	r1, #1
 800f694:	2200      	movs	r2, #0
 800f696:	4608      	mov	r0, r1
 800f698:	f000 f9b6 	bl	800fa08 <osSemaphoreNew>
 800f69c:	6020      	str	r0, [r4, #0]

#endif
    ret = (*sobj != NULL);

    return ret;
}
 800f69e:	3000      	adds	r0, #0
 800f6a0:	bf18      	it	ne
 800f6a2:	2001      	movne	r0, #1
 800f6a4:	bd10      	pop	{r4, pc}

0800f6a6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f6a6:	b508      	push	{r3, lr}
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f6a8:	f000 fa78 	bl	800fb9c <osSemaphoreDelete>
#endif
    return 1;
}
 800f6ac:	2001      	movs	r0, #1
 800f6ae:	bd08      	pop	{r3, pc}

0800f6b0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f6b0:	b508      	push	{r3, lr}
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800f6b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f6b6:	f000 f9fd 	bl	800fab4 <osSemaphoreAcquire>
  {
    ret = 1;
  }

  return ret;
}
 800f6ba:	fab0 f080 	clz	r0, r0
 800f6be:	0940      	lsrs	r0, r0, #5
 800f6c0:	bd08      	pop	{r3, pc}

0800f6c2 <ff_rel_grant>:
)
{
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f6c2:	f000 ba33 	b.w	800fb2c <osSemaphoreRelease>
	...

0800f6c8 <SysTick_Handler>:
extern void xPortSysTickHandler (void);

/*
  SysTick handler implementation that also clears overflow flag.
*/
void SysTick_Handler (void) {
 800f6c8:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800f6ca:	4b05      	ldr	r3, [pc, #20]	; (800f6e0 <SysTick_Handler+0x18>)
 800f6cc:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f6ce:	f002 fa0d 	bl	8011aec <xTaskGetSchedulerState>
 800f6d2:	2801      	cmp	r0, #1
 800f6d4:	d003      	beq.n	800f6de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800f6d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800f6da:	f002 be2b 	b.w	8012334 <xPortSysTickHandler>
}
 800f6de:	bd08      	pop	{r3, pc}
 800f6e0:	e000e010 	.word	0xe000e010

0800f6e4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6e4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800f6e8:	b113      	cbz	r3, 800f6f0 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800f6ea:	f06f 0005 	mvn.w	r0, #5
 800f6ee:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6f0:	f3ef 8210 	mrs	r2, PRIMASK
 800f6f4:	4b07      	ldr	r3, [pc, #28]	; (800f714 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800f6f6:	b912      	cbnz	r2, 800f6fe <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f6f8:	f3ef 8211 	mrs	r2, BASEPRI
 800f6fc:	b112      	cbz	r2, 800f704 <osKernelInitialize+0x20>
 800f6fe:	681a      	ldr	r2, [r3, #0]
 800f700:	2a02      	cmp	r2, #2
 800f702:	d0f2      	beq.n	800f6ea <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f704:	6818      	ldr	r0, [r3, #0]
 800f706:	b910      	cbnz	r0, 800f70e <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f708:	2201      	movs	r2, #1
 800f70a:	601a      	str	r2, [r3, #0]
 800f70c:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 800f70e:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800f712:	4770      	bx	lr
 800f714:	24001910 	.word	0x24001910

0800f718 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800f718:	b508      	push	{r3, lr}
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800f71a:	f002 f9e7 	bl	8011aec <xTaskGetSchedulerState>
 800f71e:	b138      	cbz	r0, 800f730 <osKernelGetState+0x18>
 800f720:	2802      	cmp	r0, #2
 800f722:	d006      	beq.n	800f732 <osKernelGetState+0x1a>
      state = osKernelLocked;
      break;

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800f724:	4b03      	ldr	r3, [pc, #12]	; (800f734 <osKernelGetState+0x1c>)
 800f726:	6818      	ldr	r0, [r3, #0]
 800f728:	1e43      	subs	r3, r0, #1
 800f72a:	4258      	negs	r0, r3
 800f72c:	4158      	adcs	r0, r3
 800f72e:	e000      	b.n	800f732 <osKernelGetState+0x1a>
      state = osKernelLocked;
 800f730:	2003      	movs	r0, #3
      }
      break;
  }

  return (state);
}
 800f732:	bd08      	pop	{r3, pc}
 800f734:	24001910 	.word	0x24001910

0800f738 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800f738:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f73a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800f73e:	b113      	cbz	r3, 800f746 <osKernelStart+0xe>
    stat = osErrorISR;
 800f740:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800f744:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f746:	f3ef 8210 	mrs	r2, PRIMASK
 800f74a:	4b0a      	ldr	r3, [pc, #40]	; (800f774 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800f74c:	b912      	cbnz	r2, 800f754 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f74e:	f3ef 8211 	mrs	r2, BASEPRI
 800f752:	b112      	cbz	r2, 800f75a <osKernelStart+0x22>
 800f754:	681a      	ldr	r2, [r3, #0]
 800f756:	2a02      	cmp	r2, #2
 800f758:	d0f2      	beq.n	800f740 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800f75a:	681a      	ldr	r2, [r3, #0]
 800f75c:	2a01      	cmp	r2, #1
 800f75e:	d105      	bne.n	800f76c <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800f760:	2202      	movs	r2, #2
 800f762:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800f764:	f001 fe34 	bl	80113d0 <vTaskStartScheduler>
      stat = osOK;
 800f768:	2000      	movs	r0, #0
 800f76a:	e7eb      	b.n	800f744 <osKernelStart+0xc>
      stat = osError;
 800f76c:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800f770:	e7e8      	b.n	800f744 <osKernelStart+0xc>
 800f772:	bf00      	nop
 800f774:	24001910 	.word	0x24001910

0800f778 <osKernelGetTickCount>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f778:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 800f77c:	b10b      	cbz	r3, 800f782 <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 800f77e:	f001 be95 	b.w	80114ac <xTaskGetTickCountFromISR>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f782:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800f786:	b913      	cbnz	r3, 800f78e <osKernelGetTickCount+0x16>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f788:	f3ef 8311 	mrs	r3, BASEPRI
 800f78c:	b11b      	cbz	r3, 800f796 <osKernelGetTickCount+0x1e>
 800f78e:	4b03      	ldr	r3, [pc, #12]	; (800f79c <osKernelGetTickCount+0x24>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	2b02      	cmp	r3, #2
 800f794:	d0f3      	beq.n	800f77e <osKernelGetTickCount+0x6>
  } else {
    ticks = xTaskGetTickCount();
 800f796:	f001 be83 	b.w	80114a0 <xTaskGetTickCount>
 800f79a:	bf00      	nop
 800f79c:	24001910 	.word	0x24001910

0800f7a0 <osKernelGetTickFreq>:
  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}
 800f7a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f7a4:	4770      	bx	lr
	...

0800f7a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7aa:	4614      	mov	r4, r2
 800f7ac:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f7ae:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f7b0:	460b      	mov	r3, r1
  hTask = NULL;
 800f7b2:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7b4:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800f7b8:	bb32      	cbnz	r2, 800f808 <osThreadNew+0x60>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7ba:	f3ef 8210 	mrs	r2, PRIMASK
 800f7be:	b912      	cbnz	r2, 800f7c6 <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f7c0:	f3ef 8211 	mrs	r2, BASEPRI
 800f7c4:	b11a      	cbz	r2, 800f7ce <osThreadNew+0x26>
 800f7c6:	4a22      	ldr	r2, [pc, #136]	; (800f850 <osThreadNew+0xa8>)
 800f7c8:	6812      	ldr	r2, [r2, #0]
 800f7ca:	2a02      	cmp	r2, #2
 800f7cc:	d01c      	beq.n	800f808 <osThreadNew+0x60>
 800f7ce:	b1d8      	cbz	r0, 800f808 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800f7d0:	2c00      	cmp	r4, #0
 800f7d2:	d036      	beq.n	800f842 <osThreadNew+0x9a>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800f7d4:	69a5      	ldr	r5, [r4, #24]
      if (attr->name != NULL) {
 800f7d6:	6821      	ldr	r1, [r4, #0]
 800f7d8:	2d00      	cmp	r5, #0
 800f7da:	bf08      	it	eq
 800f7dc:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f7de:	1e6a      	subs	r2, r5, #1
 800f7e0:	462f      	mov	r7, r5
 800f7e2:	2a37      	cmp	r2, #55	; 0x37
 800f7e4:	d831      	bhi.n	800f84a <osThreadNew+0xa2>
 800f7e6:	6862      	ldr	r2, [r4, #4]
 800f7e8:	07d2      	lsls	r2, r2, #31
 800f7ea:	d42e      	bmi.n	800f84a <osThreadNew+0xa2>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800f7ec:	6966      	ldr	r6, [r4, #20]
 800f7ee:	b176      	cbz	r6, 800f80e <osThreadNew+0x66>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f7f0:	08b2      	lsrs	r2, r6, #2
 800f7f2:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f7f6:	f1bc 0f00 	cmp.w	ip, #0
 800f7fa:	d00a      	beq.n	800f812 <osThreadNew+0x6a>
 800f7fc:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800f800:	d902      	bls.n	800f808 <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f802:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f804:	b104      	cbz	r4, 800f808 <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f806:	b9ae      	cbnz	r6, 800f834 <osThreadNew+0x8c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f808:	9805      	ldr	r0, [sp, #20]
}
 800f80a:	b007      	add	sp, #28
 800f80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800f80e:	2280      	movs	r2, #128	; 0x80
 800f810:	e7ef      	b.n	800f7f2 <osThreadNew+0x4a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f812:	f1be 0f00 	cmp.w	lr, #0
 800f816:	d1f7      	bne.n	800f808 <osThreadNew+0x60>
      if (mem == 0) {
 800f818:	6924      	ldr	r4, [r4, #16]
 800f81a:	2c00      	cmp	r4, #0
 800f81c:	d1f4      	bne.n	800f808 <osThreadNew+0x60>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f81e:	ac05      	add	r4, sp, #20
 800f820:	b292      	uxth	r2, r2
 800f822:	e9cd 7400 	strd	r7, r4, [sp]
 800f826:	f001 fda5 	bl	8011374 <xTaskCreate>
 800f82a:	2801      	cmp	r0, #1
          hTask = NULL;
 800f82c:	bf1c      	itt	ne
 800f82e:	2300      	movne	r3, #0
 800f830:	9305      	strne	r3, [sp, #20]
 800f832:	e7e9      	b.n	800f808 <osThreadNew+0x60>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f834:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 800f838:	9500      	str	r5, [sp, #0]
 800f83a:	f001 fd63 	bl	8011304 <xTaskCreateStatic>
 800f83e:	9005      	str	r0, [sp, #20]
 800f840:	e7e2      	b.n	800f808 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;
 800f842:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 800f844:	2280      	movs	r2, #128	; 0x80
    name = NULL;
 800f846:	4621      	mov	r1, r4
 800f848:	e7e9      	b.n	800f81e <osThreadNew+0x76>
        return (NULL);
 800f84a:	2000      	movs	r0, #0
 800f84c:	e7dd      	b.n	800f80a <osThreadNew+0x62>
 800f84e:	bf00      	nop
 800f850:	24001910 	.word	0x24001910

0800f854 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800f854:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f856:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800f85a:	b113      	cbz	r3, 800f862 <osDelay+0xe>
    stat = osErrorISR;
 800f85c:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800f860:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f862:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800f866:	b913      	cbnz	r3, 800f86e <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f868:	f3ef 8311 	mrs	r3, BASEPRI
 800f86c:	b11b      	cbz	r3, 800f876 <osDelay+0x22>
 800f86e:	4b05      	ldr	r3, [pc, #20]	; (800f884 <osDelay+0x30>)
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	2b02      	cmp	r3, #2
 800f874:	d0f2      	beq.n	800f85c <osDelay+0x8>
    if (ticks != 0U) {
 800f876:	2800      	cmp	r0, #0
 800f878:	d0f2      	beq.n	800f860 <osDelay+0xc>
      vTaskDelay(ticks);
 800f87a:	f001 ffa7 	bl	80117cc <vTaskDelay>
    stat = osOK;
 800f87e:	2000      	movs	r0, #0
 800f880:	e7ee      	b.n	800f860 <osDelay+0xc>
 800f882:	bf00      	nop
 800f884:	24001910 	.word	0x24001910

0800f888 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800f888:	b513      	push	{r0, r1, r4, lr}
 800f88a:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f88c:	f3ef 8305 	mrs	r3, IPSR
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800f890:	b11b      	cbz	r3, 800f89a <osDelayUntil+0x12>
    stat = osErrorISR;
 800f892:	f06f 0005 	mvn.w	r0, #5
      stat = osErrorParameter;
    }
  }

  return (stat);
}
 800f896:	b002      	add	sp, #8
 800f898:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f89a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800f89e:	b913      	cbnz	r3, 800f8a6 <osDelayUntil+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f8a0:	f3ef 8311 	mrs	r3, BASEPRI
 800f8a4:	b11b      	cbz	r3, 800f8ae <osDelayUntil+0x26>
 800f8a6:	4b09      	ldr	r3, [pc, #36]	; (800f8cc <osDelayUntil+0x44>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	2b02      	cmp	r3, #2
 800f8ac:	d0f1      	beq.n	800f892 <osDelayUntil+0xa>
    tcnt = xTaskGetTickCount();
 800f8ae:	f001 fdf7 	bl	80114a0 <xTaskGetTickCount>
    delay = (TickType_t)ticks - tcnt;
 800f8b2:	1a21      	subs	r1, r4, r0
    tcnt = xTaskGetTickCount();
 800f8b4:	9001      	str	r0, [sp, #4]
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800f8b6:	2900      	cmp	r1, #0
 800f8b8:	dd04      	ble.n	800f8c4 <osDelayUntil+0x3c>
      vTaskDelayUntil (&tcnt, delay);
 800f8ba:	a801      	add	r0, sp, #4
 800f8bc:	f001 ff30 	bl	8011720 <vTaskDelayUntil>
    stat = osOK;
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	e7e8      	b.n	800f896 <osDelayUntil+0xe>
      stat = osErrorParameter;
 800f8c4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800f8c8:	e7e5      	b.n	800f896 <osDelayUntil+0xe>
 800f8ca:	bf00      	nop
 800f8cc:	24001910 	.word	0x24001910

0800f8d0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f8d0:	b570      	push	{r4, r5, r6, lr}
 800f8d2:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8d4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800f8d8:	b113      	cbz	r3, 800f8e0 <osMutexNew+0x10>
  hMutex = NULL;
 800f8da:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800f8dc:	4628      	mov	r0, r5
 800f8de:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8e0:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 800f8e4:	b912      	cbnz	r2, 800f8ec <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f8e6:	f3ef 8211 	mrs	r2, BASEPRI
 800f8ea:	b11a      	cbz	r2, 800f8f4 <osMutexNew+0x24>
 800f8ec:	4a18      	ldr	r2, [pc, #96]	; (800f950 <osMutexNew+0x80>)
 800f8ee:	6812      	ldr	r2, [r2, #0]
 800f8f0:	2a02      	cmp	r2, #2
 800f8f2:	d0f2      	beq.n	800f8da <osMutexNew+0xa>
    if (attr != NULL) {
 800f8f4:	b104      	cbz	r4, 800f8f8 <osMutexNew+0x28>
      type = attr->attr_bits;
 800f8f6:	6863      	ldr	r3, [r4, #4]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f8f8:	f003 0601 	and.w	r6, r3, #1
    if ((type & osMutexRobust) != osMutexRobust) {
 800f8fc:	071b      	lsls	r3, r3, #28
 800f8fe:	d4ec      	bmi.n	800f8da <osMutexNew+0xa>
      if (attr != NULL) {
 800f900:	b1b4      	cbz	r4, 800f930 <osMutexNew+0x60>
 800f902:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f906:	b189      	cbz	r1, 800f92c <osMutexNew+0x5c>
 800f908:	2b4f      	cmp	r3, #79	; 0x4f
 800f90a:	d9e6      	bls.n	800f8da <osMutexNew+0xa>
        if (rmtx != 0U) {
 800f90c:	b1de      	cbz	r6, 800f946 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f90e:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f910:	f000 fdf4 	bl	80104fc <xQueueCreateMutexStatic>
 800f914:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 800f916:	2800      	cmp	r0, #0
 800f918:	d0df      	beq.n	800f8da <osMutexNew+0xa>
          name = attr->name;
 800f91a:	6821      	ldr	r1, [r4, #0]
        vQueueAddToRegistry (hMutex, name);
 800f91c:	4628      	mov	r0, r5
 800f91e:	f001 fab9 	bl	8010e94 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f922:	2e00      	cmp	r6, #0
 800f924:	d0da      	beq.n	800f8dc <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f926:	f045 0501 	orr.w	r5, r5, #1
  return ((osMutexId_t)hMutex);
 800f92a:	e7d7      	b.n	800f8dc <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d1d4      	bne.n	800f8da <osMutexNew+0xa>
          if (rmtx != 0U) {
 800f930:	b15e      	cbz	r6, 800f94a <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800f932:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 800f934:	f000 fe15 	bl	8010562 <xQueueCreateMutex>
 800f938:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 800f93a:	2800      	cmp	r0, #0
 800f93c:	d0cd      	beq.n	800f8da <osMutexNew+0xa>
        if (attr != NULL) {
 800f93e:	2c00      	cmp	r4, #0
 800f940:	d1eb      	bne.n	800f91a <osMutexNew+0x4a>
          name = NULL;
 800f942:	4621      	mov	r1, r4
 800f944:	e7ea      	b.n	800f91c <osMutexNew+0x4c>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f946:	2001      	movs	r0, #1
 800f948:	e7e2      	b.n	800f910 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800f94a:	2001      	movs	r0, #1
 800f94c:	e7f2      	b.n	800f934 <osMutexNew+0x64>
 800f94e:	bf00      	nop
 800f950:	24001910 	.word	0x24001910

0800f954 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f954:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f956:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f95a:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800f95c:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f960:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f962:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800f966:	b112      	cbz	r2, 800f96e <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800f968:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800f96c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f96e:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800f972:	b912      	cbnz	r2, 800f97a <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f974:	f3ef 8211 	mrs	r2, BASEPRI
 800f978:	b11a      	cbz	r2, 800f982 <osMutexAcquire+0x2e>
 800f97a:	4a0d      	ldr	r2, [pc, #52]	; (800f9b0 <osMutexAcquire+0x5c>)
 800f97c:	6812      	ldr	r2, [r2, #0]
 800f97e:	2a02      	cmp	r2, #2
 800f980:	d0f2      	beq.n	800f968 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800f982:	b188      	cbz	r0, 800f9a8 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f984:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800f986:	b163      	cbz	r3, 800f9a2 <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f988:	f001 f9d8 	bl	8010d3c <xQueueTakeMutexRecursive>
 800f98c:	2801      	cmp	r0, #1
 800f98e:	d101      	bne.n	800f994 <osMutexAcquire+0x40>
  stat = osOK;
 800f990:	2000      	movs	r0, #0
 800f992:	e7eb      	b.n	800f96c <osMutexAcquire+0x18>
          stat = osErrorResource;
 800f994:	2c00      	cmp	r4, #0
 800f996:	bf14      	ite	ne
 800f998:	f06f 0001 	mvnne.w	r0, #1
 800f99c:	f06f 0002 	mvneq.w	r0, #2
 800f9a0:	e7e4      	b.n	800f96c <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f9a2:	f001 f84f 	bl	8010a44 <xQueueSemaphoreTake>
 800f9a6:	e7f1      	b.n	800f98c <osMutexAcquire+0x38>
    stat = osErrorParameter;
 800f9a8:	f06f 0003 	mvn.w	r0, #3
 800f9ac:	e7de      	b.n	800f96c <osMutexAcquire+0x18>
 800f9ae:	bf00      	nop
 800f9b0:	24001910 	.word	0x24001910

0800f9b4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f9b4:	b508      	push	{r3, lr}
 800f9b6:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f9b8:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800f9bc:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9c0:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800f9c4:	b112      	cbz	r2, 800f9cc <osMutexRelease+0x18>
    stat = osErrorISR;
 800f9c6:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800f9ca:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f9cc:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800f9d0:	b912      	cbnz	r2, 800f9d8 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f9d2:	f3ef 8211 	mrs	r2, BASEPRI
 800f9d6:	b11a      	cbz	r2, 800f9e0 <osMutexRelease+0x2c>
 800f9d8:	4a0a      	ldr	r2, [pc, #40]	; (800fa04 <osMutexRelease+0x50>)
 800f9da:	6812      	ldr	r2, [r2, #0]
 800f9dc:	2a02      	cmp	r2, #2
 800f9de:	d0f2      	beq.n	800f9c6 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 800f9e0:	b168      	cbz	r0, 800f9fe <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 800f9e2:	b13b      	cbz	r3, 800f9f4 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f9e4:	f000 fd9f 	bl	8010526 <xQueueGiveMutexRecursive>
 800f9e8:	2801      	cmp	r0, #1
  stat = osOK;
 800f9ea:	bf0c      	ite	eq
 800f9ec:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800f9ee:	f06f 0002 	mvnne.w	r0, #2
 800f9f2:	e7ea      	b.n	800f9ca <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	4619      	mov	r1, r3
 800f9f8:	f000 fc4a 	bl	8010290 <xQueueGenericSend>
 800f9fc:	e7f4      	b.n	800f9e8 <osMutexRelease+0x34>
    stat = osErrorParameter;
 800f9fe:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800fa02:	e7e2      	b.n	800f9ca <osMutexRelease+0x16>
 800fa04:	24001910 	.word	0x24001910

0800fa08 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800fa08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa0a:	460e      	mov	r6, r1
 800fa0c:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa0e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800fa12:	b11b      	cbz	r3, 800fa1c <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800fa14:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800fa16:	4620      	mov	r0, r4
 800fa18:	b002      	add	sp, #8
 800fa1a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa1c:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800fa20:	b913      	cbnz	r3, 800fa28 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fa22:	f3ef 8311 	mrs	r3, BASEPRI
 800fa26:	b11b      	cbz	r3, 800fa30 <osSemaphoreNew+0x28>
 800fa28:	4b21      	ldr	r3, [pc, #132]	; (800fab0 <osSemaphoreNew+0xa8>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	2b02      	cmp	r3, #2
 800fa2e:	d0f1      	beq.n	800fa14 <osSemaphoreNew+0xc>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d0ef      	beq.n	800fa14 <osSemaphoreNew+0xc>
 800fa34:	42b0      	cmp	r0, r6
 800fa36:	d3ed      	bcc.n	800fa14 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 800fa38:	b1ed      	cbz	r5, 800fa76 <osSemaphoreNew+0x6e>
 800fa3a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fa3e:	b1c3      	cbz	r3, 800fa72 <osSemaphoreNew+0x6a>
 800fa40:	2a4f      	cmp	r2, #79	; 0x4f
 800fa42:	d9e7      	bls.n	800fa14 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800fa44:	2801      	cmp	r0, #1
 800fa46:	d126      	bne.n	800fa96 <osSemaphoreNew+0x8e>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800fa48:	2203      	movs	r2, #3
 800fa4a:	9200      	str	r2, [sp, #0]
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	4611      	mov	r1, r2
 800fa50:	f000 faf6 	bl	8010040 <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800fa54:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800fa56:	2800      	cmp	r0, #0
 800fa58:	d0dc      	beq.n	800fa14 <osSemaphoreNew+0xc>
 800fa5a:	b1ce      	cbz	r6, 800fa90 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	461a      	mov	r2, r3
 800fa60:	4619      	mov	r1, r3
 800fa62:	f000 fc15 	bl	8010290 <xQueueGenericSend>
 800fa66:	2801      	cmp	r0, #1
 800fa68:	d012      	beq.n	800fa90 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 800fa6a:	4620      	mov	r0, r4
 800fa6c:	f001 fa46 	bl	8010efc <vQueueDelete>
 800fa70:	e7d0      	b.n	800fa14 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fa72:	2a00      	cmp	r2, #0
 800fa74:	d1ce      	bne.n	800fa14 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800fa76:	2801      	cmp	r0, #1
 800fa78:	d104      	bne.n	800fa84 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 800fa7a:	2203      	movs	r2, #3
 800fa7c:	2100      	movs	r1, #0
 800fa7e:	f000 fb25 	bl	80100cc <xQueueGenericCreate>
 800fa82:	e7e7      	b.n	800fa54 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800fa84:	4631      	mov	r1, r6
 800fa86:	f000 fbbb 	bl	8010200 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800fa8a:	4604      	mov	r4, r0
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	d0c1      	beq.n	800fa14 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 800fa90:	b945      	cbnz	r5, 800faa4 <osSemaphoreNew+0x9c>
          name = NULL;
 800fa92:	4629      	mov	r1, r5
 800fa94:	e007      	b.n	800faa6 <osSemaphoreNew+0x9e>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800fa96:	461a      	mov	r2, r3
 800fa98:	4631      	mov	r1, r6
 800fa9a:	f000 fb65 	bl	8010168 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800fa9e:	4604      	mov	r4, r0
 800faa0:	2800      	cmp	r0, #0
 800faa2:	d0b7      	beq.n	800fa14 <osSemaphoreNew+0xc>
          name = attr->name;
 800faa4:	6829      	ldr	r1, [r5, #0]
        vQueueAddToRegistry (hSemaphore, name);
 800faa6:	4620      	mov	r0, r4
 800faa8:	f001 f9f4 	bl	8010e94 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800faac:	e7b3      	b.n	800fa16 <osSemaphoreNew+0xe>
 800faae:	bf00      	nop
 800fab0:	24001910 	.word	0x24001910

0800fab4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800fab4:	b513      	push	{r0, r1, r4, lr}
 800fab6:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800fab8:	b918      	cbnz	r0, 800fac2 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800faba:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800fabe:	b002      	add	sp, #8
 800fac0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fac2:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800fac6:	b16b      	cbz	r3, 800fae4 <osSemaphoreAcquire+0x30>
    if (timeout != 0U) {
 800fac8:	2c00      	cmp	r4, #0
 800faca:	d1f6      	bne.n	800faba <osSemaphoreAcquire+0x6>
      yield = pdFALSE;
 800facc:	aa02      	add	r2, sp, #8
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800face:	4621      	mov	r1, r4
      yield = pdFALSE;
 800fad0:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800fad4:	f001 f954 	bl	8010d80 <xQueueReceiveFromISR>
 800fad8:	2801      	cmp	r0, #1
 800fada:	d113      	bne.n	800fb04 <osSemaphoreAcquire+0x50>
        portYIELD_FROM_ISR (yield);
 800fadc:	9b01      	ldr	r3, [sp, #4]
 800fade:	b9a3      	cbnz	r3, 800fb0a <osSemaphoreAcquire+0x56>
  stat = osOK;
 800fae0:	2000      	movs	r0, #0
 800fae2:	e7ec      	b.n	800fabe <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fae4:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800fae8:	b913      	cbnz	r3, 800faf0 <osSemaphoreAcquire+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800faea:	f3ef 8311 	mrs	r3, BASEPRI
 800faee:	b11b      	cbz	r3, 800faf8 <osSemaphoreAcquire+0x44>
 800faf0:	4b0c      	ldr	r3, [pc, #48]	; (800fb24 <osSemaphoreAcquire+0x70>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	2b02      	cmp	r3, #2
 800faf6:	d0e7      	beq.n	800fac8 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800faf8:	4621      	mov	r1, r4
 800fafa:	f000 ffa3 	bl	8010a44 <xQueueSemaphoreTake>
 800fafe:	2801      	cmp	r0, #1
 800fb00:	d0ee      	beq.n	800fae0 <osSemaphoreAcquire+0x2c>
      if (timeout != 0U) {
 800fb02:	b95c      	cbnz	r4, 800fb1c <osSemaphoreAcquire+0x68>
        stat = osErrorResource;
 800fb04:	f06f 0002 	mvn.w	r0, #2
 800fb08:	e7d9      	b.n	800fabe <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800fb0a:	4b07      	ldr	r3, [pc, #28]	; (800fb28 <osSemaphoreAcquire+0x74>)
 800fb0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb10:	601a      	str	r2, [r3, #0]
 800fb12:	f3bf 8f4f 	dsb	sy
 800fb16:	f3bf 8f6f 	isb	sy
 800fb1a:	e7e1      	b.n	800fae0 <osSemaphoreAcquire+0x2c>
        stat = osErrorTimeout;
 800fb1c:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800fb20:	e7cd      	b.n	800fabe <osSemaphoreAcquire+0xa>
 800fb22:	bf00      	nop
 800fb24:	24001910 	.word	0x24001910
 800fb28:	e000ed04 	.word	0xe000ed04

0800fb2c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800fb2c:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800fb2e:	b368      	cbz	r0, 800fb8c <osSemaphoreRelease+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb30:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800fb34:	b153      	cbz	r3, 800fb4c <osSemaphoreRelease+0x20>
    yield = pdFALSE;
 800fb36:	a902      	add	r1, sp, #8
 800fb38:	2400      	movs	r4, #0
 800fb3a:	f841 4d04 	str.w	r4, [r1, #-4]!

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800fb3e:	f000 fe51 	bl	80107e4 <xQueueGiveFromISR>
 800fb42:	2801      	cmp	r0, #1
 800fb44:	d014      	beq.n	800fb70 <osSemaphoreRelease+0x44>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800fb46:	f06f 0002 	mvn.w	r0, #2
 800fb4a:	e014      	b.n	800fb76 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb4c:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800fb50:	b913      	cbnz	r3, 800fb58 <osSemaphoreRelease+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fb52:	f3ef 8311 	mrs	r3, BASEPRI
 800fb56:	b11b      	cbz	r3, 800fb60 <osSemaphoreRelease+0x34>
 800fb58:	4b0e      	ldr	r3, [pc, #56]	; (800fb94 <osSemaphoreRelease+0x68>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	2b02      	cmp	r3, #2
 800fb5e:	d0ea      	beq.n	800fb36 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fb60:	2300      	movs	r3, #0
 800fb62:	461a      	mov	r2, r3
 800fb64:	4619      	mov	r1, r3
 800fb66:	f000 fb93 	bl	8010290 <xQueueGenericSend>
 800fb6a:	2801      	cmp	r0, #1
 800fb6c:	d002      	beq.n	800fb74 <osSemaphoreRelease+0x48>
 800fb6e:	e7ea      	b.n	800fb46 <osSemaphoreRelease+0x1a>
      portYIELD_FROM_ISR (yield);
 800fb70:	9b01      	ldr	r3, [sp, #4]
 800fb72:	b913      	cbnz	r3, 800fb7a <osSemaphoreRelease+0x4e>
  stat = osOK;
 800fb74:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800fb76:	b002      	add	sp, #8
 800fb78:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800fb7a:	4b07      	ldr	r3, [pc, #28]	; (800fb98 <osSemaphoreRelease+0x6c>)
 800fb7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb80:	601a      	str	r2, [r3, #0]
 800fb82:	f3bf 8f4f 	dsb	sy
 800fb86:	f3bf 8f6f 	isb	sy
 800fb8a:	e7f3      	b.n	800fb74 <osSemaphoreRelease+0x48>
    stat = osErrorParameter;
 800fb8c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800fb90:	e7f1      	b.n	800fb76 <osSemaphoreRelease+0x4a>
 800fb92:	bf00      	nop
 800fb94:	24001910 	.word	0x24001910
 800fb98:	e000ed04 	.word	0xe000ed04

0800fb9c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800fb9c:	b510      	push	{r4, lr}
 800fb9e:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fba0:	f3ef 8305 	mrs	r3, IPSR
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800fba4:	b113      	cbz	r3, 800fbac <osSemaphoreDelete+0x10>
    stat = osErrorISR;
 800fba6:	f06f 0005 	mvn.w	r0, #5
#else
  stat = osError;
#endif

  return (stat);
}
 800fbaa:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fbac:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800fbb0:	b913      	cbnz	r3, 800fbb8 <osSemaphoreDelete+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fbb2:	f3ef 8311 	mrs	r3, BASEPRI
 800fbb6:	b11b      	cbz	r3, 800fbc0 <osSemaphoreDelete+0x24>
 800fbb8:	4b07      	ldr	r3, [pc, #28]	; (800fbd8 <osSemaphoreDelete+0x3c>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	2b02      	cmp	r3, #2
 800fbbe:	d0f2      	beq.n	800fba6 <osSemaphoreDelete+0xa>
  else if (hSemaphore == NULL) {
 800fbc0:	b13c      	cbz	r4, 800fbd2 <osSemaphoreDelete+0x36>
    vQueueUnregisterQueue (hSemaphore);
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f001 f986 	bl	8010ed4 <vQueueUnregisterQueue>
    vSemaphoreDelete (hSemaphore);
 800fbc8:	4620      	mov	r0, r4
 800fbca:	f001 f997 	bl	8010efc <vQueueDelete>
    stat = osOK;
 800fbce:	2000      	movs	r0, #0
 800fbd0:	e7eb      	b.n	800fbaa <osSemaphoreDelete+0xe>
    stat = osErrorParameter;
 800fbd2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800fbd6:	e7e8      	b.n	800fbaa <osSemaphoreDelete+0xe>
 800fbd8:	24001910 	.word	0x24001910

0800fbdc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800fbdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fbde:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbe0:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fbe4:	b11b      	cbz	r3, 800fbee <osMessageQueueNew+0x12>
  hQueue = NULL;
 800fbe6:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800fbe8:	4628      	mov	r0, r5
 800fbea:	b002      	add	sp, #8
 800fbec:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fbee:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fbf2:	b913      	cbnz	r3, 800fbfa <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fbf4:	f3ef 8311 	mrs	r3, BASEPRI
 800fbf8:	b11b      	cbz	r3, 800fc02 <osMessageQueueNew+0x26>
 800fbfa:	4b1a      	ldr	r3, [pc, #104]	; (800fc64 <osMessageQueueNew+0x88>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2b02      	cmp	r3, #2
 800fc00:	d0f1      	beq.n	800fbe6 <osMessageQueueNew+0xa>
 800fc02:	2800      	cmp	r0, #0
 800fc04:	d0ef      	beq.n	800fbe6 <osMessageQueueNew+0xa>
 800fc06:	2900      	cmp	r1, #0
 800fc08:	d0ed      	beq.n	800fbe6 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800fc0a:	b304      	cbz	r4, 800fc4e <osMessageQueueNew+0x72>
 800fc0c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fc10:	b1ab      	cbz	r3, 800fc3e <osMessageQueueNew+0x62>
 800fc12:	2a4f      	cmp	r2, #79	; 0x4f
 800fc14:	d9e7      	bls.n	800fbe6 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fc16:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fc18:	2a00      	cmp	r2, #0
 800fc1a:	d0e4      	beq.n	800fbe6 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fc1c:	fb01 f500 	mul.w	r5, r1, r0
 800fc20:	6966      	ldr	r6, [r4, #20]
 800fc22:	42ae      	cmp	r6, r5
 800fc24:	d3df      	bcc.n	800fbe6 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800fc26:	2500      	movs	r5, #0
 800fc28:	9500      	str	r5, [sp, #0]
 800fc2a:	f000 fa09 	bl	8010040 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800fc2e:	4605      	mov	r5, r0
 800fc30:	2800      	cmp	r0, #0
 800fc32:	d0d8      	beq.n	800fbe6 <osMessageQueueNew+0xa>
        name = attr->name;
 800fc34:	6821      	ldr	r1, [r4, #0]
      vQueueAddToRegistry (hQueue, name);
 800fc36:	4628      	mov	r0, r5
 800fc38:	f001 f92c 	bl	8010e94 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800fc3c:	e7d4      	b.n	800fbe8 <osMessageQueueNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fc3e:	2a00      	cmp	r2, #0
 800fc40:	d1d1      	bne.n	800fbe6 <osMessageQueueNew+0xa>
 800fc42:	6923      	ldr	r3, [r4, #16]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d1ce      	bne.n	800fbe6 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fc48:	6963      	ldr	r3, [r4, #20]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d1cb      	bne.n	800fbe6 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 800fc4e:	2200      	movs	r2, #0
 800fc50:	f000 fa3c 	bl	80100cc <xQueueGenericCreate>
    if (hQueue != NULL) {
 800fc54:	4605      	mov	r5, r0
 800fc56:	2800      	cmp	r0, #0
 800fc58:	d0c5      	beq.n	800fbe6 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800fc5a:	2c00      	cmp	r4, #0
 800fc5c:	d1ea      	bne.n	800fc34 <osMessageQueueNew+0x58>
        name = NULL;
 800fc5e:	4621      	mov	r1, r4
 800fc60:	e7e9      	b.n	800fc36 <osMessageQueueNew+0x5a>
 800fc62:	bf00      	nop
 800fc64:	24001910 	.word	0x24001910

0800fc68 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800fc68:	b513      	push	{r0, r1, r4, lr}
 800fc6a:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc6c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800fc70:	b123      	cbz	r3, 800fc7c <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fc72:	b9d8      	cbnz	r0, 800fcac <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 800fc74:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800fc78:	b002      	add	sp, #8
 800fc7a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc7c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800fc80:	b913      	cbnz	r3, 800fc88 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fc82:	f3ef 8311 	mrs	r3, BASEPRI
 800fc86:	b11b      	cbz	r3, 800fc90 <osMessageQueuePut+0x28>
 800fc88:	4b16      	ldr	r3, [pc, #88]	; (800fce4 <osMessageQueuePut+0x7c>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	2b02      	cmp	r3, #2
 800fc8e:	d0f0      	beq.n	800fc72 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fc90:	2800      	cmp	r0, #0
 800fc92:	d0ef      	beq.n	800fc74 <osMessageQueuePut+0xc>
 800fc94:	2900      	cmp	r1, #0
 800fc96:	d0ed      	beq.n	800fc74 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fc98:	2300      	movs	r3, #0
 800fc9a:	4622      	mov	r2, r4
 800fc9c:	f000 faf8 	bl	8010290 <xQueueGenericSend>
 800fca0:	2801      	cmp	r0, #1
 800fca2:	d011      	beq.n	800fcc8 <osMessageQueuePut+0x60>
        if (timeout != 0U) {
 800fca4:	b9dc      	cbnz	r4, 800fcde <osMessageQueuePut+0x76>
          stat = osErrorResource;
 800fca6:	f06f 0002 	mvn.w	r0, #2
 800fcaa:	e7e5      	b.n	800fc78 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fcac:	2900      	cmp	r1, #0
 800fcae:	d0e1      	beq.n	800fc74 <osMessageQueuePut+0xc>
 800fcb0:	2c00      	cmp	r4, #0
 800fcb2:	d1df      	bne.n	800fc74 <osMessageQueuePut+0xc>
      yield = pdFALSE;
 800fcb4:	aa02      	add	r2, sp, #8
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800fcb6:	4623      	mov	r3, r4
      yield = pdFALSE;
 800fcb8:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800fcbc:	f000 fc64 	bl	8010588 <xQueueGenericSendFromISR>
 800fcc0:	2801      	cmp	r0, #1
 800fcc2:	d1f0      	bne.n	800fca6 <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 800fcc4:	9b01      	ldr	r3, [sp, #4]
 800fcc6:	b90b      	cbnz	r3, 800fccc <osMessageQueuePut+0x64>
  stat = osOK;
 800fcc8:	2000      	movs	r0, #0
 800fcca:	e7d5      	b.n	800fc78 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800fccc:	4b06      	ldr	r3, [pc, #24]	; (800fce8 <osMessageQueuePut+0x80>)
 800fcce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcd2:	601a      	str	r2, [r3, #0]
 800fcd4:	f3bf 8f4f 	dsb	sy
 800fcd8:	f3bf 8f6f 	isb	sy
 800fcdc:	e7f4      	b.n	800fcc8 <osMessageQueuePut+0x60>
          stat = osErrorTimeout;
 800fcde:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800fce2:	e7c9      	b.n	800fc78 <osMessageQueuePut+0x10>
 800fce4:	24001910 	.word	0x24001910
 800fce8:	e000ed04 	.word	0xe000ed04

0800fcec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800fcec:	b513      	push	{r0, r1, r4, lr}
 800fcee:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fcf0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800fcf4:	b123      	cbz	r3, 800fd00 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fcf6:	b9d0      	cbnz	r0, 800fd2e <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 800fcf8:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800fcfc:	b002      	add	sp, #8
 800fcfe:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd00:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800fd04:	b913      	cbnz	r3, 800fd0c <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fd06:	f3ef 8311 	mrs	r3, BASEPRI
 800fd0a:	b11b      	cbz	r3, 800fd14 <osMessageQueueGet+0x28>
 800fd0c:	4b15      	ldr	r3, [pc, #84]	; (800fd64 <osMessageQueueGet+0x78>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	2b02      	cmp	r3, #2
 800fd12:	d0f0      	beq.n	800fcf6 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fd14:	2800      	cmp	r0, #0
 800fd16:	d0ef      	beq.n	800fcf8 <osMessageQueueGet+0xc>
 800fd18:	2900      	cmp	r1, #0
 800fd1a:	d0ed      	beq.n	800fcf8 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fd1c:	4622      	mov	r2, r4
 800fd1e:	f000 fd65 	bl	80107ec <xQueueReceive>
 800fd22:	2801      	cmp	r0, #1
 800fd24:	d010      	beq.n	800fd48 <osMessageQueueGet+0x5c>
        if (timeout != 0U) {
 800fd26:	b9d4      	cbnz	r4, 800fd5e <osMessageQueueGet+0x72>
          stat = osErrorResource;
 800fd28:	f06f 0002 	mvn.w	r0, #2
 800fd2c:	e7e6      	b.n	800fcfc <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fd2e:	2900      	cmp	r1, #0
 800fd30:	d0e2      	beq.n	800fcf8 <osMessageQueueGet+0xc>
 800fd32:	2c00      	cmp	r4, #0
 800fd34:	d1e0      	bne.n	800fcf8 <osMessageQueueGet+0xc>
      yield = pdFALSE;
 800fd36:	aa02      	add	r2, sp, #8
 800fd38:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800fd3c:	f001 f820 	bl	8010d80 <xQueueReceiveFromISR>
 800fd40:	2801      	cmp	r0, #1
 800fd42:	d1f1      	bne.n	800fd28 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 800fd44:	9b01      	ldr	r3, [sp, #4]
 800fd46:	b90b      	cbnz	r3, 800fd4c <osMessageQueueGet+0x60>
  stat = osOK;
 800fd48:	2000      	movs	r0, #0
 800fd4a:	e7d7      	b.n	800fcfc <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800fd4c:	4b06      	ldr	r3, [pc, #24]	; (800fd68 <osMessageQueueGet+0x7c>)
 800fd4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd52:	601a      	str	r2, [r3, #0]
 800fd54:	f3bf 8f4f 	dsb	sy
 800fd58:	f3bf 8f6f 	isb	sy
 800fd5c:	e7f4      	b.n	800fd48 <osMessageQueueGet+0x5c>
          stat = osErrorTimeout;
 800fd5e:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800fd62:	e7cb      	b.n	800fcfc <osMessageQueueGet+0x10>
 800fd64:	24001910 	.word	0x24001910
 800fd68:	e000ed04 	.word	0xe000ed04

0800fd6c <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fd6c:	4b03      	ldr	r3, [pc, #12]	; (800fd7c <vApplicationGetIdleTaskMemory+0x10>)
 800fd6e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fd70:	4b03      	ldr	r3, [pc, #12]	; (800fd80 <vApplicationGetIdleTaskMemory+0x14>)
 800fd72:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fd74:	2380      	movs	r3, #128	; 0x80
 800fd76:	6013      	str	r3, [r2, #0]
}
 800fd78:	4770      	bx	lr
 800fd7a:	bf00      	nop
 800fd7c:	240018b0 	.word	0x240018b0
 800fd80:	240016b0 	.word	0x240016b0

0800fd84 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fd84:	4b03      	ldr	r3, [pc, #12]	; (800fd94 <vApplicationGetTimerTaskMemory+0x10>)
 800fd86:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fd88:	4b03      	ldr	r3, [pc, #12]	; (800fd98 <vApplicationGetTimerTaskMemory+0x14>)
 800fd8a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fd8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd90:	6013      	str	r3, [r2, #0]
}
 800fd92:	4770      	bx	lr
 800fd94:	24001d14 	.word	0x24001d14
 800fd98:	24001914 	.word	0x24001914

0800fd9c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fd9c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fda0:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fda4:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fda6:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fda8:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fdac:	2300      	movs	r3, #0
 800fdae:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fdb0:	4770      	bx	lr

0800fdb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fdb6:	4770      	bx	lr

0800fdb8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800fdb8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fdba:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800fdbc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fdbe:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fdc0:	689a      	ldr	r2, [r3, #8]
 800fdc2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fdc4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800fdc6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800fdc8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fdca:	3301      	adds	r3, #1
 800fdcc:	6003      	str	r3, [r0, #0]
}
 800fdce:	4770      	bx	lr

0800fdd0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fdd0:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fdd2:	1c53      	adds	r3, r2, #1
{
 800fdd4:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800fdd6:	d10a      	bne.n	800fdee <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fdd8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fdda:	685a      	ldr	r2, [r3, #4]
 800fddc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fdde:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fde0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800fde2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800fde4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800fde6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fde8:	3301      	adds	r3, #1
 800fdea:	6003      	str	r3, [r0, #0]
}
 800fdec:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fdee:	f100 0308 	add.w	r3, r0, #8
 800fdf2:	685c      	ldr	r4, [r3, #4]
 800fdf4:	6825      	ldr	r5, [r4, #0]
 800fdf6:	4295      	cmp	r5, r2
 800fdf8:	d8ef      	bhi.n	800fdda <vListInsert+0xa>
 800fdfa:	4623      	mov	r3, r4
 800fdfc:	e7f9      	b.n	800fdf2 <vListInsert+0x22>

0800fdfe <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fdfe:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 800fe02:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fe04:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fe06:	6882      	ldr	r2, [r0, #8]
 800fe08:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fe0a:	6859      	ldr	r1, [r3, #4]
 800fe0c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fe0e:	bf08      	it	eq
 800fe10:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fe12:	2200      	movs	r2, #0
 800fe14:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	3a01      	subs	r2, #1
 800fe1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fe1c:	6818      	ldr	r0, [r3, #0]
}
 800fe1e:	4770      	bx	lr

0800fe20 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fe20:	b510      	push	{r4, lr}
 800fe22:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fe24:	f002 fa1e 	bl	8012264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fe28:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800fe2a:	f002 fa3d 	bl	80122a8 <vPortExitCritical>

	return xReturn;
}
 800fe2e:	fab4 f084 	clz	r0, r4
 800fe32:	0940      	lsrs	r0, r0, #5
 800fe34:	bd10      	pop	{r4, pc}

0800fe36 <prvCopyDataToQueue>:
{
 800fe36:	b570      	push	{r4, r5, r6, lr}
 800fe38:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fe3a:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800fe3c:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe3e:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fe40:	b942      	cbnz	r2, 800fe54 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe42:	6805      	ldr	r5, [r0, #0]
 800fe44:	b99d      	cbnz	r5, 800fe6e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fe46:	6880      	ldr	r0, [r0, #8]
 800fe48:	f001 fec8 	bl	8011bdc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fe4c:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe4e:	3601      	adds	r6, #1
 800fe50:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800fe52:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800fe54:	b96d      	cbnz	r5, 800fe72 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fe56:	6840      	ldr	r0, [r0, #4]
 800fe58:	f002 feea 	bl	8012c30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe5c:	6863      	ldr	r3, [r4, #4]
 800fe5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fe60:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe62:	68a2      	ldr	r2, [r4, #8]
 800fe64:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe66:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe68:	d301      	bcc.n	800fe6e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe6a:	6823      	ldr	r3, [r4, #0]
 800fe6c:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800fe6e:	2000      	movs	r0, #0
 800fe70:	e7ed      	b.n	800fe4e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fe72:	68c0      	ldr	r0, [r0, #12]
 800fe74:	f002 fedc 	bl	8012c30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fe78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe7a:	68e2      	ldr	r2, [r4, #12]
 800fe7c:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe7e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fe80:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe82:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fe84:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fe86:	bf3e      	ittt	cc
 800fe88:	68a2      	ldrcc	r2, [r4, #8]
 800fe8a:	189b      	addcc	r3, r3, r2
 800fe8c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800fe8e:	2d02      	cmp	r5, #2
 800fe90:	d1ed      	bne.n	800fe6e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe92:	b10e      	cbz	r6, 800fe98 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800fe94:	3e01      	subs	r6, #1
 800fe96:	e7ea      	b.n	800fe6e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800fe98:	4630      	mov	r0, r6
 800fe9a:	e7d8      	b.n	800fe4e <prvCopyDataToQueue+0x18>

0800fe9c <prvCopyDataFromQueue>:
{
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800fea2:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fea4:	b162      	cbz	r2, 800fec0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fea6:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fea8:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800feaa:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800feac:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800feae:	60d9      	str	r1, [r3, #12]
}
 800feb0:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800feb4:	bf24      	itt	cs
 800feb6:	6819      	ldrcs	r1, [r3, #0]
 800feb8:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800feba:	68d9      	ldr	r1, [r3, #12]
 800febc:	f002 beb8 	b.w	8012c30 <memcpy>
}
 800fec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fec4:	4770      	bx	lr

0800fec6 <prvUnlockQueue>:
{
 800fec6:	b570      	push	{r4, r5, r6, lr}
 800fec8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800feca:	f002 f9cb 	bl	8012264 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800fece:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fed2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800fed6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fed8:	2d00      	cmp	r5, #0
 800feda:	dc14      	bgt.n	800ff06 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800fedc:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fede:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800fee2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800fee6:	f002 f9df 	bl	80122a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800feea:	f002 f9bb 	bl	8012264 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800feee:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800fef2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fef4:	2d00      	cmp	r5, #0
 800fef6:	dc12      	bgt.n	800ff1e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800fef8:	23ff      	movs	r3, #255	; 0xff
 800fefa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800fefe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800ff02:	f002 b9d1 	b.w	80122a8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d0e7      	beq.n	800fedc <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff0c:	4630      	mov	r0, r6
 800ff0e:	f001 fd35 	bl	801197c <xTaskRemoveFromEventList>
 800ff12:	b108      	cbz	r0, 800ff18 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800ff14:	f001 fdc8 	bl	8011aa8 <vTaskMissedYield>
 800ff18:	3d01      	subs	r5, #1
 800ff1a:	b26d      	sxtb	r5, r5
 800ff1c:	e7dc      	b.n	800fed8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff1e:	6923      	ldr	r3, [r4, #16]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d0e9      	beq.n	800fef8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff24:	4630      	mov	r0, r6
 800ff26:	f001 fd29 	bl	801197c <xTaskRemoveFromEventList>
 800ff2a:	b108      	cbz	r0, 800ff30 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800ff2c:	f001 fdbc 	bl	8011aa8 <vTaskMissedYield>
 800ff30:	3d01      	subs	r5, #1
 800ff32:	b26d      	sxtb	r5, r5
 800ff34:	e7de      	b.n	800fef4 <prvUnlockQueue+0x2e>
	...

0800ff38 <xQueueGenericReset>:
{
 800ff38:	b538      	push	{r3, r4, r5, lr}
 800ff3a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800ff3c:	4604      	mov	r4, r0
 800ff3e:	b940      	cbnz	r0, 800ff52 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ff40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff44:	f383 8811 	msr	BASEPRI, r3
 800ff48:	f3bf 8f6f 	isb	sy
 800ff4c:	f3bf 8f4f 	dsb	sy
 800ff50:	e7fe      	b.n	800ff50 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800ff52:	f002 f987 	bl	8012264 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff56:	6822      	ldr	r2, [r4, #0]
 800ff58:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ff5c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff5e:	4343      	muls	r3, r0
 800ff60:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff62:	1a1b      	subs	r3, r3, r0
 800ff64:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff66:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ff68:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff6a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ff6c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ff6e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800ff70:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ff74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800ff78:	b995      	cbnz	r5, 800ffa0 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff7a:	6923      	ldr	r3, [r4, #16]
 800ff7c:	b163      	cbz	r3, 800ff98 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff7e:	f104 0010 	add.w	r0, r4, #16
 800ff82:	f001 fcfb 	bl	801197c <xTaskRemoveFromEventList>
 800ff86:	b138      	cbz	r0, 800ff98 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 800ff88:	4b0a      	ldr	r3, [pc, #40]	; (800ffb4 <xQueueGenericReset+0x7c>)
 800ff8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff8e:	601a      	str	r2, [r3, #0]
 800ff90:	f3bf 8f4f 	dsb	sy
 800ff94:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800ff98:	f002 f986 	bl	80122a8 <vPortExitCritical>
}
 800ff9c:	2001      	movs	r0, #1
 800ff9e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ffa0:	f104 0010 	add.w	r0, r4, #16
 800ffa4:	f7ff fefa 	bl	800fd9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ffa8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ffac:	f7ff fef6 	bl	800fd9c <vListInitialise>
 800ffb0:	e7f2      	b.n	800ff98 <xQueueGenericReset+0x60>
 800ffb2:	bf00      	nop
 800ffb4:	e000ed04 	.word	0xe000ed04

0800ffb8 <prvInitialiseNewQueue>:
{
 800ffb8:	b570      	push	{r4, r5, r6, lr}
 800ffba:	9c04      	ldr	r4, [sp, #16]
 800ffbc:	4605      	mov	r5, r0
 800ffbe:	461e      	mov	r6, r3
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ffc0:	2900      	cmp	r1, #0
 800ffc2:	bf08      	it	eq
 800ffc4:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 800ffc6:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ffca:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ffcc:	2101      	movs	r1, #1
 800ffce:	4620      	mov	r0, r4
 800ffd0:	f7ff ffb2 	bl	800ff38 <xQueueGenericReset>
	traceQUEUE_CREATE( pxNewQueue );
 800ffd4:	4b18      	ldr	r3, [pc, #96]	; (8010038 <prvInitialiseNewQueue+0x80>)
		pxNewQueue->ucQueueType = ucQueueType;
 800ffd6:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
	traceQUEUE_CREATE( pxNewQueue );
 800ffda:	4620      	mov	r0, r4
 800ffdc:	8819      	ldrh	r1, [r3, #0]
 800ffde:	4e17      	ldr	r6, [pc, #92]	; (801003c <prvInitialiseNewQueue+0x84>)
 800ffe0:	f7f4 fc95 	bl	800490e <prvTraceSetQueueNumberHigh16>
 800ffe4:	f7f4 fdb0 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 800ffe8:	f7f4 fc7a 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 800ffec:	8833      	ldrh	r3, [r6, #0]
 800ffee:	4218      	tst	r0, r3
 800fff0:	d021      	beq.n	8010036 <prvInitialiseNewQueue+0x7e>
 800fff2:	4620      	mov	r0, r4
 800fff4:	f7f4 fc86 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 800fff8:	8833      	ldrh	r3, [r6, #0]
 800fffa:	4218      	tst	r0, r3
 800fffc:	d01b      	beq.n	8010036 <prvInitialiseNewQueue+0x7e>
 800fffe:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8010002:	2b04      	cmp	r3, #4
 8010004:	d817      	bhi.n	8010036 <prvInitialiseNewQueue+0x7e>
 8010006:	e8df f003 	tbb	[pc, r3]
 801000a:	1003      	.short	0x1003
 801000c:	0a16      	.short	0x0a16
 801000e:	13          	.byte	0x13
 801000f:	00          	.byte	0x00
 8010010:	462a      	mov	r2, r5
 8010012:	4621      	mov	r1, r4
 8010014:	2011      	movs	r0, #17
}
 8010016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	traceQUEUE_CREATE( pxNewQueue );
 801001a:	f7f5 b9c3 	b.w	80053a4 <prvTraceStoreEvent2>
 801001e:	4621      	mov	r1, r4
 8010020:	2012      	movs	r0, #18
}
 8010022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	traceQUEUE_CREATE( pxNewQueue );
 8010026:	f7f5 b991 	b.w	800534c <prvTraceStoreEvent1>
 801002a:	4621      	mov	r1, r4
 801002c:	2013      	movs	r0, #19
 801002e:	e7f8      	b.n	8010022 <prvInitialiseNewQueue+0x6a>
 8010030:	4621      	mov	r1, r4
 8010032:	2017      	movs	r0, #23
 8010034:	e7f5      	b.n	8010022 <prvInitialiseNewQueue+0x6a>
}
 8010036:	bd70      	pop	{r4, r5, r6, pc}
 8010038:	24000008 	.word	0x24000008
 801003c:	2400000a 	.word	0x2400000a

08010040 <xQueueGenericCreateStatic>:
	{
 8010040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010042:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010044:	b940      	cbnz	r0, 8010058 <xQueueGenericCreateStatic+0x18>
 8010046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801004a:	f383 8811 	msr	BASEPRI, r3
 801004e:	f3bf 8f6f 	isb	sy
 8010052:	f3bf 8f4f 	dsb	sy
 8010056:	e7fe      	b.n	8010056 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8010058:	b943      	cbnz	r3, 801006c <xQueueGenericCreateStatic+0x2c>
 801005a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005e:	f383 8811 	msr	BASEPRI, r3
 8010062:	f3bf 8f6f 	isb	sy
 8010066:	f3bf 8f4f 	dsb	sy
 801006a:	e7fe      	b.n	801006a <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801006c:	b14a      	cbz	r2, 8010082 <xQueueGenericCreateStatic+0x42>
 801006e:	b991      	cbnz	r1, 8010096 <xQueueGenericCreateStatic+0x56>
 8010070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010074:	f383 8811 	msr	BASEPRI, r3
 8010078:	f3bf 8f6f 	isb	sy
 801007c:	f3bf 8f4f 	dsb	sy
 8010080:	e7fe      	b.n	8010080 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010082:	b141      	cbz	r1, 8010096 <xQueueGenericCreateStatic+0x56>
 8010084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010088:	f383 8811 	msr	BASEPRI, r3
 801008c:	f3bf 8f6f 	isb	sy
 8010090:	f3bf 8f4f 	dsb	sy
 8010094:	e7fe      	b.n	8010094 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010096:	2350      	movs	r3, #80	; 0x50
 8010098:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 801009a:	9b03      	ldr	r3, [sp, #12]
 801009c:	2b50      	cmp	r3, #80	; 0x50
 801009e:	d008      	beq.n	80100b2 <xQueueGenericCreateStatic+0x72>
 80100a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a4:	f383 8811 	msr	BASEPRI, r3
 80100a8:	f3bf 8f6f 	isb	sy
 80100ac:	f3bf 8f4f 	dsb	sy
 80100b0:	e7fe      	b.n	80100b0 <xQueueGenericCreateStatic+0x70>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80100b2:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80100b4:	2301      	movs	r3, #1
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80100b6:	9400      	str	r4, [sp, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80100b8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80100bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80100c0:	f7ff ff7a 	bl	800ffb8 <prvInitialiseNewQueue>
	}
 80100c4:	4620      	mov	r0, r4
 80100c6:	b004      	add	sp, #16
 80100c8:	bd10      	pop	{r4, pc}
	...

080100cc <xQueueGenericCreate>:
	{
 80100cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100ce:	460f      	mov	r7, r1
 80100d0:	4616      	mov	r6, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80100d2:	4605      	mov	r5, r0
 80100d4:	b940      	cbnz	r0, 80100e8 <xQueueGenericCreate+0x1c>
 80100d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100da:	f383 8811 	msr	BASEPRI, r3
 80100de:	f3bf 8f6f 	isb	sy
 80100e2:	f3bf 8f4f 	dsb	sy
 80100e6:	e7fe      	b.n	80100e6 <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100e8:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80100ea:	3050      	adds	r0, #80	; 0x50
 80100ec:	f002 fa28 	bl	8012540 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80100f0:	4604      	mov	r4, r0
 80100f2:	b168      	cbz	r0, 8010110 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80100f4:	2300      	movs	r3, #0
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80100f6:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80100fa:	4639      	mov	r1, r7
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80100fc:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010100:	4633      	mov	r3, r6
 8010102:	9000      	str	r0, [sp, #0]
 8010104:	4628      	mov	r0, r5
 8010106:	f7ff ff57 	bl	800ffb8 <prvInitialiseNewQueue>
	}
 801010a:	4620      	mov	r0, r4
 801010c:	b003      	add	sp, #12
 801010e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8010110:	f7f4 fd1a 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 8010114:	f7f4 fbe4 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8010118:	4b12      	ldr	r3, [pc, #72]	; (8010164 <xQueueGenericCreate+0x98>)
 801011a:	881b      	ldrh	r3, [r3, #0]
 801011c:	4218      	tst	r0, r3
 801011e:	d0f4      	beq.n	801010a <xQueueGenericCreate+0x3e>
 8010120:	2e04      	cmp	r6, #4
 8010122:	d8f2      	bhi.n	801010a <xQueueGenericCreate+0x3e>
 8010124:	a301      	add	r3, pc, #4	; (adr r3, 801012c <xQueueGenericCreate+0x60>)
 8010126:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 801012a:	bf00      	nop
 801012c:	08010141 	.word	0x08010141
 8010130:	08010157 	.word	0x08010157
 8010134:	0801010b 	.word	0x0801010b
 8010138:	0801014d 	.word	0x0801014d
 801013c:	0801015d 	.word	0x0801015d
 8010140:	462a      	mov	r2, r5
 8010142:	2100      	movs	r1, #0
 8010144:	2041      	movs	r0, #65	; 0x41
 8010146:	f7f5 f92d 	bl	80053a4 <prvTraceStoreEvent2>
 801014a:	e7de      	b.n	801010a <xQueueGenericCreate+0x3e>
 801014c:	2100      	movs	r1, #0
 801014e:	2042      	movs	r0, #66	; 0x42
 8010150:	f7f5 f8fc 	bl	800534c <prvTraceStoreEvent1>
		return pxNewQueue;
 8010154:	e7d9      	b.n	801010a <xQueueGenericCreate+0x3e>
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8010156:	2100      	movs	r1, #0
 8010158:	2043      	movs	r0, #67	; 0x43
 801015a:	e7f9      	b.n	8010150 <xQueueGenericCreate+0x84>
 801015c:	2100      	movs	r1, #0
 801015e:	2047      	movs	r0, #71	; 0x47
 8010160:	e7f6      	b.n	8010150 <xQueueGenericCreate+0x84>
 8010162:	bf00      	nop
 8010164:	2400000a 	.word	0x2400000a

08010168 <xQueueCreateCountingSemaphoreStatic>:
	{
 8010168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801016a:	4613      	mov	r3, r2
 801016c:	460f      	mov	r7, r1
		configASSERT( uxMaxCount != 0 );
 801016e:	4605      	mov	r5, r0
 8010170:	b940      	cbnz	r0, 8010184 <xQueueCreateCountingSemaphoreStatic+0x1c>
 8010172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010176:	f383 8811 	msr	BASEPRI, r3
 801017a:	f3bf 8f6f 	isb	sy
 801017e:	f3bf 8f4f 	dsb	sy
 8010182:	e7fe      	b.n	8010182 <xQueueCreateCountingSemaphoreStatic+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010184:	4288      	cmp	r0, r1
 8010186:	d208      	bcs.n	801019a <xQueueCreateCountingSemaphoreStatic+0x32>
 8010188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018c:	f383 8811 	msr	BASEPRI, r3
 8010190:	f3bf 8f6f 	isb	sy
 8010194:	f3bf 8f4f 	dsb	sy
 8010198:	e7fe      	b.n	8010198 <xQueueCreateCountingSemaphoreStatic+0x30>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801019a:	2202      	movs	r2, #2
 801019c:	4e16      	ldr	r6, [pc, #88]	; (80101f8 <xQueueCreateCountingSemaphoreStatic+0x90>)
 801019e:	9200      	str	r2, [sp, #0]
 80101a0:	2200      	movs	r2, #0
 80101a2:	4611      	mov	r1, r2
 80101a4:	f7ff ff4c 	bl	8010040 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80101a8:	4604      	mov	r4, r0
 80101aa:	b1c8      	cbz	r0, 80101e0 <xQueueCreateCountingSemaphoreStatic+0x78>
			traceCREATE_COUNTING_SEMAPHORE();
 80101ac:	4b13      	ldr	r3, [pc, #76]	; (80101fc <xQueueCreateCountingSemaphoreStatic+0x94>)
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80101ae:	6387      	str	r7, [r0, #56]	; 0x38
			traceCREATE_COUNTING_SEMAPHORE();
 80101b0:	8819      	ldrh	r1, [r3, #0]
 80101b2:	f7f4 fbac 	bl	800490e <prvTraceSetQueueNumberHigh16>
 80101b6:	f7f4 fcc7 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 80101ba:	f7f4 fb91 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 80101be:	8833      	ldrh	r3, [r6, #0]
 80101c0:	4218      	tst	r0, r3
 80101c2:	d00a      	beq.n	80101da <xQueueCreateCountingSemaphoreStatic+0x72>
 80101c4:	4620      	mov	r0, r4
 80101c6:	f7f4 fb9d 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 80101ca:	8833      	ldrh	r3, [r6, #0]
 80101cc:	4218      	tst	r0, r3
 80101ce:	d004      	beq.n	80101da <xQueueCreateCountingSemaphoreStatic+0x72>
 80101d0:	462a      	mov	r2, r5
 80101d2:	4621      	mov	r1, r4
 80101d4:	2016      	movs	r0, #22
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 80101d6:	f7f5 f8e5 	bl	80053a4 <prvTraceStoreEvent2>
	}
 80101da:	4620      	mov	r0, r4
 80101dc:	b003      	add	sp, #12
 80101de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 80101e0:	f7f4 fcb2 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 80101e4:	f7f4 fb7c 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 80101e8:	8833      	ldrh	r3, [r6, #0]
 80101ea:	4218      	tst	r0, r3
 80101ec:	d0f5      	beq.n	80101da <xQueueCreateCountingSemaphoreStatic+0x72>
 80101ee:	462a      	mov	r2, r5
 80101f0:	4621      	mov	r1, r4
 80101f2:	2046      	movs	r0, #70	; 0x46
 80101f4:	e7ef      	b.n	80101d6 <xQueueCreateCountingSemaphoreStatic+0x6e>
 80101f6:	bf00      	nop
 80101f8:	2400000a 	.word	0x2400000a
 80101fc:	24000008 	.word	0x24000008

08010200 <xQueueCreateCountingSemaphore>:
	{
 8010200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010202:	460f      	mov	r7, r1
		configASSERT( uxMaxCount != 0 );
 8010204:	4605      	mov	r5, r0
 8010206:	b940      	cbnz	r0, 801021a <xQueueCreateCountingSemaphore+0x1a>
 8010208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801020c:	f383 8811 	msr	BASEPRI, r3
 8010210:	f3bf 8f6f 	isb	sy
 8010214:	f3bf 8f4f 	dsb	sy
 8010218:	e7fe      	b.n	8010218 <xQueueCreateCountingSemaphore+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 801021a:	4288      	cmp	r0, r1
 801021c:	d208      	bcs.n	8010230 <xQueueCreateCountingSemaphore+0x30>
 801021e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010222:	f383 8811 	msr	BASEPRI, r3
 8010226:	f3bf 8f6f 	isb	sy
 801022a:	f3bf 8f4f 	dsb	sy
 801022e:	e7fe      	b.n	801022e <xQueueCreateCountingSemaphore+0x2e>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010230:	2202      	movs	r2, #2
 8010232:	2100      	movs	r1, #0
 8010234:	f7ff ff4a 	bl	80100cc <xQueueGenericCreate>
 8010238:	4e13      	ldr	r6, [pc, #76]	; (8010288 <xQueueCreateCountingSemaphore+0x88>)
		if( xHandle != NULL )
 801023a:	4604      	mov	r4, r0
 801023c:	b1c0      	cbz	r0, 8010270 <xQueueCreateCountingSemaphore+0x70>
			traceCREATE_COUNTING_SEMAPHORE();
 801023e:	4b13      	ldr	r3, [pc, #76]	; (801028c <xQueueCreateCountingSemaphore+0x8c>)
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010240:	6387      	str	r7, [r0, #56]	; 0x38
			traceCREATE_COUNTING_SEMAPHORE();
 8010242:	8819      	ldrh	r1, [r3, #0]
 8010244:	f7f4 fb63 	bl	800490e <prvTraceSetQueueNumberHigh16>
 8010248:	f7f4 fc7e 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 801024c:	f7f4 fb48 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8010250:	8833      	ldrh	r3, [r6, #0]
 8010252:	4218      	tst	r0, r3
 8010254:	d00a      	beq.n	801026c <xQueueCreateCountingSemaphore+0x6c>
 8010256:	4620      	mov	r0, r4
 8010258:	f7f4 fb54 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 801025c:	8833      	ldrh	r3, [r6, #0]
 801025e:	4218      	tst	r0, r3
 8010260:	d004      	beq.n	801026c <xQueueCreateCountingSemaphore+0x6c>
 8010262:	462a      	mov	r2, r5
 8010264:	4621      	mov	r1, r4
 8010266:	2016      	movs	r0, #22
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 8010268:	f7f5 f89c 	bl	80053a4 <prvTraceStoreEvent2>
	}
 801026c:	4620      	mov	r0, r4
 801026e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 8010270:	f7f4 fc6a 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 8010274:	f7f4 fb34 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8010278:	8833      	ldrh	r3, [r6, #0]
 801027a:	4218      	tst	r0, r3
 801027c:	d0f6      	beq.n	801026c <xQueueCreateCountingSemaphore+0x6c>
 801027e:	462a      	mov	r2, r5
 8010280:	4621      	mov	r1, r4
 8010282:	2046      	movs	r0, #70	; 0x46
 8010284:	e7f0      	b.n	8010268 <xQueueCreateCountingSemaphore+0x68>
 8010286:	bf00      	nop
 8010288:	2400000a 	.word	0x2400000a
 801028c:	24000008 	.word	0x24000008

08010290 <xQueueGenericSend>:
{
 8010290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010294:	460e      	mov	r6, r1
 8010296:	9201      	str	r2, [sp, #4]
 8010298:	461d      	mov	r5, r3
	configASSERT( pxQueue );
 801029a:	4604      	mov	r4, r0
 801029c:	b940      	cbnz	r0, 80102b0 <xQueueGenericSend+0x20>
 801029e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a2:	f383 8811 	msr	BASEPRI, r3
 80102a6:	f3bf 8f6f 	isb	sy
 80102aa:	f3bf 8f4f 	dsb	sy
 80102ae:	e7fe      	b.n	80102ae <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80102b0:	b951      	cbnz	r1, 80102c8 <xQueueGenericSend+0x38>
 80102b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80102b4:	b143      	cbz	r3, 80102c8 <xQueueGenericSend+0x38>
 80102b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ba:	f383 8811 	msr	BASEPRI, r3
 80102be:	f3bf 8f6f 	isb	sy
 80102c2:	f3bf 8f4f 	dsb	sy
 80102c6:	e7fe      	b.n	80102c6 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80102c8:	2d02      	cmp	r5, #2
 80102ca:	d10b      	bne.n	80102e4 <xQueueGenericSend+0x54>
 80102cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80102ce:	2b01      	cmp	r3, #1
 80102d0:	d008      	beq.n	80102e4 <xQueueGenericSend+0x54>
 80102d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d6:	f383 8811 	msr	BASEPRI, r3
 80102da:	f3bf 8f6f 	isb	sy
 80102de:	f3bf 8f4f 	dsb	sy
 80102e2:	e7fe      	b.n	80102e2 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80102e4:	f001 fc02 	bl	8011aec <xTaskGetSchedulerState>
 80102e8:	b348      	cbz	r0, 801033e <xQueueGenericSend+0xae>
 80102ea:	2d00      	cmp	r5, #0
{
 80102ec:	f04f 0800 	mov.w	r8, #0
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80102f0:	4f80      	ldr	r7, [pc, #512]	; (80104f4 <xQueueGenericSend+0x264>)
 80102f2:	bf0c      	ite	eq
 80102f4:	f04f 0a56 	moveq.w	sl, #86	; 0x56
 80102f8:	f04f 0ac2 	movne.w	sl, #194	; 0xc2
					portYIELD_WITHIN_API();
 80102fc:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 80104f8 <xQueueGenericSend+0x268>
		taskENTER_CRITICAL();
 8010300:	f001 ffb0 	bl	8012264 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010304:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010306:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010308:	429a      	cmp	r2, r3
 801030a:	d301      	bcc.n	8010310 <xQueueGenericSend+0x80>
 801030c:	2d02      	cmp	r5, #2
 801030e:	d150      	bne.n	80103b2 <xQueueGenericSend+0x122>
				traceQUEUE_SEND( pxQueue );
 8010310:	4f78      	ldr	r7, [pc, #480]	; (80104f4 <xQueueGenericSend+0x264>)
 8010312:	f7f4 fc19 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 8010316:	f7f4 fae3 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 801031a:	883b      	ldrh	r3, [r7, #0]
 801031c:	4218      	tst	r0, r3
 801031e:	d024      	beq.n	801036a <xQueueGenericSend+0xda>
 8010320:	4620      	mov	r0, r4
 8010322:	f7f4 faef 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 8010326:	883b      	ldrh	r3, [r7, #0]
 8010328:	4218      	tst	r0, r3
 801032a:	d01e      	beq.n	801036a <xQueueGenericSend+0xda>
 801032c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8010330:	2b04      	cmp	r3, #4
 8010332:	d81a      	bhi.n	801036a <xQueueGenericSend+0xda>
 8010334:	e8df f003 	tbb	[pc, r3]
 8010338:	3333380f 	.word	0x3333380f
 801033c:	38          	.byte	0x38
 801033d:	00          	.byte	0x00
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801033e:	9b01      	ldr	r3, [sp, #4]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d0d2      	beq.n	80102ea <xQueueGenericSend+0x5a>
 8010344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010348:	f383 8811 	msr	BASEPRI, r3
 801034c:	f3bf 8f6f 	isb	sy
 8010350:	f3bf 8f4f 	dsb	sy
 8010354:	e7fe      	b.n	8010354 <xQueueGenericSend+0xc4>
				traceQUEUE_SEND( pxQueue );
 8010356:	2d00      	cmp	r5, #0
 8010358:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801035a:	4621      	mov	r1, r4
 801035c:	f102 0201 	add.w	r2, r2, #1
 8010360:	bf14      	ite	ne
 8010362:	20c0      	movne	r0, #192	; 0xc0
 8010364:	2050      	moveq	r0, #80	; 0x50
 8010366:	f7f5 f81d 	bl	80053a4 <prvTraceStoreEvent2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801036a:	462a      	mov	r2, r5
 801036c:	4631      	mov	r1, r6
 801036e:	4620      	mov	r0, r4
 8010370:	f7ff fd61 	bl	800fe36 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010374:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010376:	b11b      	cbz	r3, 8010380 <xQueueGenericSend+0xf0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010378:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801037c:	f001 fafe 	bl	801197c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8010380:	b138      	cbz	r0, 8010392 <xQueueGenericSend+0x102>
						queueYIELD_IF_USING_PREEMPTION();
 8010382:	4b5d      	ldr	r3, [pc, #372]	; (80104f8 <xQueueGenericSend+0x268>)
 8010384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010388:	601a      	str	r2, [r3, #0]
 801038a:	f3bf 8f4f 	dsb	sy
 801038e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010392:	f001 ff89 	bl	80122a8 <vPortExitCritical>
				return pdPASS;
 8010396:	2001      	movs	r0, #1
}
 8010398:	b004      	add	sp, #16
 801039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				traceQUEUE_SEND( pxQueue );
 801039e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80103a0:	4621      	mov	r1, r4
 80103a2:	2051      	movs	r0, #81	; 0x51
 80103a4:	3201      	adds	r2, #1
 80103a6:	e7de      	b.n	8010366 <xQueueGenericSend+0xd6>
 80103a8:	4621      	mov	r1, r4
 80103aa:	2052      	movs	r0, #82	; 0x52
 80103ac:	f7f4 ffce 	bl	800534c <prvTraceStoreEvent1>
 80103b0:	e7db      	b.n	801036a <xQueueGenericSend+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 80103b2:	9b01      	ldr	r3, [sp, #4]
 80103b4:	b9f3      	cbnz	r3, 80103f4 <xQueueGenericSend+0x164>
					taskEXIT_CRITICAL();
 80103b6:	f001 ff77 	bl	80122a8 <vPortExitCritical>
			traceQUEUE_SEND_FAILED( pxQueue );
 80103ba:	4e4e      	ldr	r6, [pc, #312]	; (80104f4 <xQueueGenericSend+0x264>)
 80103bc:	f7f4 fbc4 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 80103c0:	f7f4 fa8e 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 80103c4:	8833      	ldrh	r3, [r6, #0]
 80103c6:	4218      	tst	r0, r3
 80103c8:	d012      	beq.n	80103f0 <xQueueGenericSend+0x160>
 80103ca:	4620      	mov	r0, r4
 80103cc:	f7f4 fa9a 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 80103d0:	8833      	ldrh	r3, [r6, #0]
 80103d2:	4218      	tst	r0, r3
 80103d4:	d00c      	beq.n	80103f0 <xQueueGenericSend+0x160>
 80103d6:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80103da:	2b04      	cmp	r3, #4
 80103dc:	d808      	bhi.n	80103f0 <xQueueGenericSend+0x160>
 80103de:	e8df f003 	tbb	[pc, r3]
 80103e2:	037c      	.short	0x037c
 80103e4:	8585      	.short	0x8585
 80103e6:	03          	.byte	0x03
 80103e7:	00          	.byte	0x00
					traceQUEUE_SEND_FAILED( pxQueue );
 80103e8:	4621      	mov	r1, r4
 80103ea:	2055      	movs	r0, #85	; 0x55
 80103ec:	f7f4 ffae 	bl	800534c <prvTraceStoreEvent1>
			return errQUEUE_FULL;
 80103f0:	2000      	movs	r0, #0
			traceQUEUE_SEND_FAILED( pxQueue );
 80103f2:	e7d1      	b.n	8010398 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
 80103f4:	f1b8 0f00 	cmp.w	r8, #0
 80103f8:	d102      	bne.n	8010400 <xQueueGenericSend+0x170>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80103fa:	a802      	add	r0, sp, #8
 80103fc:	f001 fb0c 	bl	8011a18 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010400:	f001 ff52 	bl	80122a8 <vPortExitCritical>
		vTaskSuspendAll();
 8010404:	f001 f844 	bl	8011490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010408:	f001 ff2c 	bl	8012264 <vPortEnterCritical>
 801040c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010410:	2bff      	cmp	r3, #255	; 0xff
 8010412:	d102      	bne.n	801041a <xQueueGenericSend+0x18a>
 8010414:	2300      	movs	r3, #0
 8010416:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801041a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801041e:	2bff      	cmp	r3, #255	; 0xff
 8010420:	d102      	bne.n	8010428 <xQueueGenericSend+0x198>
 8010422:	2300      	movs	r3, #0
 8010424:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010428:	f001 ff3e 	bl	80122a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801042c:	a901      	add	r1, sp, #4
 801042e:	a802      	add	r0, sp, #8
 8010430:	f001 fafe 	bl	8011a30 <xTaskCheckForTimeOut>
 8010434:	2800      	cmp	r0, #0
 8010436:	d14a      	bne.n	80104ce <xQueueGenericSend+0x23e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010438:	f001 ff14 	bl	8012264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801043c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801043e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010440:	429a      	cmp	r2, r3
 8010442:	d117      	bne.n	8010474 <xQueueGenericSend+0x1e4>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8010444:	f001 ff30 	bl	80122a8 <vPortExitCritical>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8010448:	f7f4 fb7e 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 801044c:	f7f4 fa48 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8010450:	883b      	ldrh	r3, [r7, #0]
 8010452:	4218      	tst	r0, r3
 8010454:	d01d      	beq.n	8010492 <xQueueGenericSend+0x202>
 8010456:	4620      	mov	r0, r4
 8010458:	f7f4 fa54 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 801045c:	883b      	ldrh	r3, [r7, #0]
 801045e:	4218      	tst	r0, r3
 8010460:	d017      	beq.n	8010492 <xQueueGenericSend+0x202>
 8010462:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8010466:	2b04      	cmp	r3, #4
 8010468:	d813      	bhi.n	8010492 <xQueueGenericSend+0x202>
 801046a:	e8df f003 	tbb	[pc, r3]
 801046e:	2b0d      	.short	0x2b0d
 8010470:	2727      	.short	0x2727
 8010472:	2b          	.byte	0x2b
 8010473:	00          	.byte	0x00
	taskEXIT_CRITICAL();
 8010474:	f001 ff18 	bl	80122a8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8010478:	4620      	mov	r0, r4
 801047a:	f7ff fd24 	bl	800fec6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801047e:	f001 f8cd 	bl	801161c <xTaskResumeAll>
 8010482:	f04f 0801 	mov.w	r8, #1
 8010486:	e73b      	b.n	8010300 <xQueueGenericSend+0x70>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8010488:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801048a:	4621      	mov	r1, r4
 801048c:	4650      	mov	r0, sl
 801048e:	f7f4 ff89 	bl	80053a4 <prvTraceStoreEvent2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010492:	9901      	ldr	r1, [sp, #4]
 8010494:	f104 0010 	add.w	r0, r4, #16
 8010498:	f001 fa26 	bl	80118e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801049c:	4620      	mov	r0, r4
 801049e:	f7ff fd12 	bl	800fec6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80104a2:	f001 f8bb 	bl	801161c <xTaskResumeAll>
 80104a6:	2800      	cmp	r0, #0
 80104a8:	d1eb      	bne.n	8010482 <xQueueGenericSend+0x1f2>
					portYIELD_WITHIN_API();
 80104aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80104ae:	f8c9 3000 	str.w	r3, [r9]
 80104b2:	f3bf 8f4f 	dsb	sy
 80104b6:	f3bf 8f6f 	isb	sy
 80104ba:	e7e2      	b.n	8010482 <xQueueGenericSend+0x1f2>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80104bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80104be:	4621      	mov	r1, r4
 80104c0:	2057      	movs	r0, #87	; 0x57
 80104c2:	e7e4      	b.n	801048e <xQueueGenericSend+0x1fe>
 80104c4:	4621      	mov	r1, r4
 80104c6:	2058      	movs	r0, #88	; 0x58
 80104c8:	f7f4 ff40 	bl	800534c <prvTraceStoreEvent1>
 80104cc:	e7e1      	b.n	8010492 <xQueueGenericSend+0x202>
			prvUnlockQueue( pxQueue );
 80104ce:	4620      	mov	r0, r4
 80104d0:	f7ff fcf9 	bl	800fec6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80104d4:	f001 f8a2 	bl	801161c <xTaskResumeAll>
 80104d8:	e76f      	b.n	80103ba <xQueueGenericSend+0x12a>
			traceQUEUE_SEND_FAILED( pxQueue );
 80104da:	2d00      	cmp	r5, #0
 80104dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80104de:	4621      	mov	r1, r4
 80104e0:	bf14      	ite	ne
 80104e2:	20c1      	movne	r0, #193	; 0xc1
 80104e4:	2053      	moveq	r0, #83	; 0x53
 80104e6:	f7f4 ff5d 	bl	80053a4 <prvTraceStoreEvent2>
 80104ea:	e781      	b.n	80103f0 <xQueueGenericSend+0x160>
 80104ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80104ee:	4621      	mov	r1, r4
 80104f0:	2054      	movs	r0, #84	; 0x54
 80104f2:	e7f8      	b.n	80104e6 <xQueueGenericSend+0x256>
 80104f4:	2400000a 	.word	0x2400000a
 80104f8:	e000ed04 	.word	0xe000ed04

080104fc <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80104fc:	2200      	movs	r2, #0
 80104fe:	460b      	mov	r3, r1
	{
 8010500:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010502:	4611      	mov	r1, r2
 8010504:	9000      	str	r0, [sp, #0]
 8010506:	2001      	movs	r0, #1
 8010508:	f7ff fd9a 	bl	8010040 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 801050c:	4604      	mov	r4, r0
 801050e:	b138      	cbz	r0, 8010520 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010510:	2300      	movs	r3, #0
 8010512:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010514:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010516:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010518:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801051a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801051c:	f7ff feb8 	bl	8010290 <xQueueGenericSend>
	}
 8010520:	4620      	mov	r0, r4
 8010522:	b002      	add	sp, #8
 8010524:	bd10      	pop	{r4, pc}

08010526 <xQueueGiveMutexRecursive>:
	{
 8010526:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8010528:	4604      	mov	r4, r0
 801052a:	b940      	cbnz	r0, 801053e <xQueueGiveMutexRecursive+0x18>
 801052c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010530:	f383 8811 	msr	BASEPRI, r3
 8010534:	f3bf 8f6f 	isb	sy
 8010538:	f3bf 8f4f 	dsb	sy
 801053c:	e7fe      	b.n	801053c <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801053e:	6885      	ldr	r5, [r0, #8]
 8010540:	f001 face 	bl	8011ae0 <xTaskGetCurrentTaskHandle>
 8010544:	4285      	cmp	r5, r0
 8010546:	d10a      	bne.n	801055e <xQueueGiveMutexRecursive+0x38>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8010548:	68e3      	ldr	r3, [r4, #12]
 801054a:	3b01      	subs	r3, #1
 801054c:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801054e:	b923      	cbnz	r3, 801055a <xQueueGiveMutexRecursive+0x34>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8010550:	461a      	mov	r2, r3
 8010552:	4619      	mov	r1, r3
 8010554:	4620      	mov	r0, r4
 8010556:	f7ff fe9b 	bl	8010290 <xQueueGenericSend>
			xReturn = pdPASS;
 801055a:	2001      	movs	r0, #1
		return xReturn;
 801055c:	e000      	b.n	8010560 <xQueueGiveMutexRecursive+0x3a>
			xReturn = pdFAIL;
 801055e:	2000      	movs	r0, #0
	}
 8010560:	bd38      	pop	{r3, r4, r5, pc}

08010562 <xQueueCreateMutex>:
	{
 8010562:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010564:	4602      	mov	r2, r0
 8010566:	2100      	movs	r1, #0
 8010568:	2001      	movs	r0, #1
 801056a:	f7ff fdaf 	bl	80100cc <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 801056e:	4604      	mov	r4, r0
 8010570:	b138      	cbz	r0, 8010582 <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010572:	2300      	movs	r3, #0
 8010574:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010576:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010578:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801057a:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801057c:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801057e:	f7ff fe87 	bl	8010290 <xQueueGenericSend>
	}
 8010582:	4620      	mov	r0, r4
 8010584:	bd10      	pop	{r4, pc}
	...

08010588 <xQueueGenericSendFromISR>:
{
 8010588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801058c:	4689      	mov	r9, r1
 801058e:	4690      	mov	r8, r2
 8010590:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8010592:	4604      	mov	r4, r0
 8010594:	b940      	cbnz	r0, 80105a8 <xQueueGenericSendFromISR+0x20>
 8010596:	f04f 0350 	mov.w	r3, #80	; 0x50
 801059a:	f383 8811 	msr	BASEPRI, r3
 801059e:	f3bf 8f6f 	isb	sy
 80105a2:	f3bf 8f4f 	dsb	sy
 80105a6:	e7fe      	b.n	80105a6 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105a8:	b951      	cbnz	r1, 80105c0 <xQueueGenericSendFromISR+0x38>
 80105aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80105ac:	b143      	cbz	r3, 80105c0 <xQueueGenericSendFromISR+0x38>
 80105ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b2:	f383 8811 	msr	BASEPRI, r3
 80105b6:	f3bf 8f6f 	isb	sy
 80105ba:	f3bf 8f4f 	dsb	sy
 80105be:	e7fe      	b.n	80105be <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80105c0:	2f02      	cmp	r7, #2
 80105c2:	d10b      	bne.n	80105dc <xQueueGenericSendFromISR+0x54>
 80105c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	d008      	beq.n	80105dc <xQueueGenericSendFromISR+0x54>
 80105ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ce:	f383 8811 	msr	BASEPRI, r3
 80105d2:	f3bf 8f6f 	isb	sy
 80105d6:	f3bf 8f4f 	dsb	sy
 80105da:	e7fe      	b.n	80105da <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80105dc:	f001 ff5e 	bl	801249c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80105e0:	f3ef 8611 	mrs	r6, BASEPRI
 80105e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e8:	f383 8811 	msr	BASEPRI, r3
 80105ec:	f3bf 8f6f 	isb	sy
 80105f0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80105f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80105f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80105f8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80106b8 <xQueueGenericSendFromISR+0x130>
 80105fc:	429a      	cmp	r2, r3
 80105fe:	d301      	bcc.n	8010604 <xQueueGenericSendFromISR+0x7c>
 8010600:	2f02      	cmp	r7, #2
 8010602:	d13e      	bne.n	8010682 <xQueueGenericSendFromISR+0xfa>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8010604:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8010606:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 801060a:	f7f4 f97b 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 801060e:	f8ba 3000 	ldrh.w	r3, [sl]
			const int8_t cTxLock = pxQueue->cTxLock;
 8010612:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8010614:	4218      	tst	r0, r3
 8010616:	d014      	beq.n	8010642 <xQueueGenericSendFromISR+0xba>
 8010618:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801061c:	b13b      	cbz	r3, 801062e <xQueueGenericSendFromISR+0xa6>
 801061e:	3b02      	subs	r3, #2
 8010620:	2b01      	cmp	r3, #1
 8010622:	d80e      	bhi.n	8010642 <xQueueGenericSendFromISR+0xba>
 8010624:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010626:	4621      	mov	r1, r4
 8010628:	205a      	movs	r0, #90	; 0x5a
 801062a:	3201      	adds	r2, #1
 801062c:	e007      	b.n	801063e <xQueueGenericSendFromISR+0xb6>
 801062e:	2f00      	cmp	r7, #0
 8010630:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010632:	4621      	mov	r1, r4
 8010634:	f102 0201 	add.w	r2, r2, #1
 8010638:	bf0c      	ite	eq
 801063a:	2059      	moveq	r0, #89	; 0x59
 801063c:	20c3      	movne	r0, #195	; 0xc3
 801063e:	f7f4 feb1 	bl	80053a4 <prvTraceStoreEvent2>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010642:	463a      	mov	r2, r7
 8010644:	4649      	mov	r1, r9
 8010646:	4620      	mov	r0, r4
 8010648:	f7ff fbf5 	bl	800fe36 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 801064c:	1c6b      	adds	r3, r5, #1
 801064e:	d113      	bne.n	8010678 <xQueueGenericSendFromISR+0xf0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010652:	b90b      	cbnz	r3, 8010658 <xQueueGenericSendFromISR+0xd0>
			xReturn = pdPASS;
 8010654:	2001      	movs	r0, #1
 8010656:	e00b      	b.n	8010670 <xQueueGenericSendFromISR+0xe8>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010658:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801065c:	f001 f98e 	bl	801197c <xTaskRemoveFromEventList>
 8010660:	2800      	cmp	r0, #0
 8010662:	d0f7      	beq.n	8010654 <xQueueGenericSendFromISR+0xcc>
							if( pxHigherPriorityTaskWoken != NULL )
 8010664:	f1b8 0f00 	cmp.w	r8, #0
 8010668:	d0f4      	beq.n	8010654 <xQueueGenericSendFromISR+0xcc>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801066a:	2001      	movs	r0, #1
 801066c:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010670:	f386 8811 	msr	BASEPRI, r6
}
 8010674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010678:	3501      	adds	r5, #1
 801067a:	b26d      	sxtb	r5, r5
 801067c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8010680:	e7e8      	b.n	8010654 <xQueueGenericSendFromISR+0xcc>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8010682:	4620      	mov	r0, r4
 8010684:	f7f4 f93e 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 8010688:	f8ba 3000 	ldrh.w	r3, [sl]
 801068c:	4018      	ands	r0, r3
 801068e:	d0ef      	beq.n	8010670 <xQueueGenericSendFromISR+0xe8>
 8010690:	f894 504c 	ldrb.w	r5, [r4, #76]	; 0x4c
 8010694:	b135      	cbz	r5, 80106a4 <xQueueGenericSendFromISR+0x11c>
 8010696:	1ea8      	subs	r0, r5, #2
 8010698:	2801      	cmp	r0, #1
 801069a:	d80b      	bhi.n	80106b4 <xQueueGenericSendFromISR+0x12c>
 801069c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801069e:	4621      	mov	r1, r4
 80106a0:	205d      	movs	r0, #93	; 0x5d
 80106a2:	e005      	b.n	80106b0 <xQueueGenericSendFromISR+0x128>
 80106a4:	2f00      	cmp	r7, #0
 80106a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80106a8:	4621      	mov	r1, r4
 80106aa:	bf0c      	ite	eq
 80106ac:	205c      	moveq	r0, #92	; 0x5c
 80106ae:	20c4      	movne	r0, #196	; 0xc4
 80106b0:	f7f4 fe78 	bl	80053a4 <prvTraceStoreEvent2>
			xReturn = errQUEUE_FULL;
 80106b4:	2000      	movs	r0, #0
 80106b6:	e7db      	b.n	8010670 <xQueueGenericSendFromISR+0xe8>
 80106b8:	2400000a 	.word	0x2400000a

080106bc <MyWrapper_xQueueGiveFromISR>:
{
 80106bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106c0:	4689      	mov	r9, r1
 80106c2:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80106c4:	4604      	mov	r4, r0
 80106c6:	b940      	cbnz	r0, 80106da <MyWrapper_xQueueGiveFromISR+0x1e>
	__asm volatile
 80106c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106cc:	f383 8811 	msr	BASEPRI, r3
 80106d0:	f3bf 8f6f 	isb	sy
 80106d4:	f3bf 8f4f 	dsb	sy
 80106d8:	e7fe      	b.n	80106d8 <MyWrapper_xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 80106da:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80106dc:	b143      	cbz	r3, 80106f0 <MyWrapper_xQueueGiveFromISR+0x34>
 80106de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e2:	f383 8811 	msr	BASEPRI, r3
 80106e6:	f3bf 8f6f 	isb	sy
 80106ea:	f3bf 8f4f 	dsb	sy
 80106ee:	e7fe      	b.n	80106ee <MyWrapper_xQueueGiveFromISR+0x32>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80106f0:	6803      	ldr	r3, [r0, #0]
 80106f2:	b953      	cbnz	r3, 801070a <MyWrapper_xQueueGiveFromISR+0x4e>
 80106f4:	6883      	ldr	r3, [r0, #8]
 80106f6:	b143      	cbz	r3, 801070a <MyWrapper_xQueueGiveFromISR+0x4e>
 80106f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fc:	f383 8811 	msr	BASEPRI, r3
 8010700:	f3bf 8f6f 	isb	sy
 8010704:	f3bf 8f4f 	dsb	sy
 8010708:	e7fe      	b.n	8010708 <MyWrapper_xQueueGiveFromISR+0x4c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801070a:	f001 fec7 	bl	801249c <vPortValidateInterruptPriority>
	__asm volatile
 801070e:	f3ef 8611 	mrs	r6, BASEPRI
 8010712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010716:	f383 8811 	msr	BASEPRI, r3
 801071a:	f3bf 8f6f 	isb	sy
 801071e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010722:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010724:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010726:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80107e0 <MyWrapper_xQueueGiveFromISR+0x124>
 801072a:	429f      	cmp	r7, r3
 801072c:	d23c      	bcs.n	80107a8 <MyWrapper_xQueueGiveFromISR+0xec>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 801072e:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8010730:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8010734:	f7f4 f8e6 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 8010738:	f8ba 3000 	ldrh.w	r3, [sl]
			const int8_t cTxLock = pxQueue->cTxLock;
 801073c:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 801073e:	4218      	tst	r0, r3
 8010740:	d015      	beq.n	801076e <MyWrapper_xQueueGiveFromISR+0xb2>
 8010742:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8010746:	b13b      	cbz	r3, 8010758 <MyWrapper_xQueueGiveFromISR+0x9c>
 8010748:	3b02      	subs	r3, #2
 801074a:	2b01      	cmp	r3, #1
 801074c:	d80f      	bhi.n	801076e <MyWrapper_xQueueGiveFromISR+0xb2>
 801074e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010750:	4621      	mov	r1, r4
 8010752:	205a      	movs	r0, #90	; 0x5a
 8010754:	3201      	adds	r2, #1
 8010756:	e008      	b.n	801076a <MyWrapper_xQueueGiveFromISR+0xae>
 8010758:	f1b8 0f00 	cmp.w	r8, #0
 801075c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801075e:	4621      	mov	r1, r4
 8010760:	f102 0201 	add.w	r2, r2, #1
 8010764:	bf0c      	ite	eq
 8010766:	2059      	moveq	r0, #89	; 0x59
 8010768:	20c3      	movne	r0, #195	; 0xc3
 801076a:	f7f4 fe1b 	bl	80053a4 <prvTraceStoreEvent2>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801076e:	3701      	adds	r7, #1
			if( cTxLock == queueUNLOCKED )
 8010770:	1c6b      	adds	r3, r5, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010772:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8010774:	d113      	bne.n	801079e <MyWrapper_xQueueGiveFromISR+0xe2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010778:	b90b      	cbnz	r3, 801077e <MyWrapper_xQueueGiveFromISR+0xc2>
			xReturn = pdPASS;
 801077a:	2001      	movs	r0, #1
 801077c:	e00b      	b.n	8010796 <MyWrapper_xQueueGiveFromISR+0xda>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801077e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010782:	f001 f8fb 	bl	801197c <xTaskRemoveFromEventList>
 8010786:	2800      	cmp	r0, #0
 8010788:	d0f7      	beq.n	801077a <MyWrapper_xQueueGiveFromISR+0xbe>
							if( pxHigherPriorityTaskWoken != NULL )
 801078a:	f1b9 0f00 	cmp.w	r9, #0
 801078e:	d0f4      	beq.n	801077a <MyWrapper_xQueueGiveFromISR+0xbe>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010790:	2001      	movs	r0, #1
 8010792:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8010796:	f386 8811 	msr	BASEPRI, r6
}
 801079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801079e:	3501      	adds	r5, #1
 80107a0:	b26d      	sxtb	r5, r5
 80107a2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80107a6:	e7e8      	b.n	801077a <MyWrapper_xQueueGiveFromISR+0xbe>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80107a8:	4620      	mov	r0, r4
 80107aa:	f7f4 f8ab 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 80107ae:	f8ba 3000 	ldrh.w	r3, [sl]
 80107b2:	4018      	ands	r0, r3
 80107b4:	d0ef      	beq.n	8010796 <MyWrapper_xQueueGiveFromISR+0xda>
 80107b6:	f894 504c 	ldrb.w	r5, [r4, #76]	; 0x4c
 80107ba:	b135      	cbz	r5, 80107ca <MyWrapper_xQueueGiveFromISR+0x10e>
 80107bc:	1ea8      	subs	r0, r5, #2
 80107be:	2801      	cmp	r0, #1
 80107c0:	d80c      	bhi.n	80107dc <MyWrapper_xQueueGiveFromISR+0x120>
 80107c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80107c4:	4621      	mov	r1, r4
 80107c6:	205d      	movs	r0, #93	; 0x5d
 80107c8:	e006      	b.n	80107d8 <MyWrapper_xQueueGiveFromISR+0x11c>
 80107ca:	f1b8 0f00 	cmp.w	r8, #0
 80107ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80107d0:	4621      	mov	r1, r4
 80107d2:	bf0c      	ite	eq
 80107d4:	205c      	moveq	r0, #92	; 0x5c
 80107d6:	20c4      	movne	r0, #196	; 0xc4
 80107d8:	f7f4 fde4 	bl	80053a4 <prvTraceStoreEvent2>
			xReturn = errQUEUE_FULL;
 80107dc:	2000      	movs	r0, #0
 80107de:	e7da      	b.n	8010796 <MyWrapper_xQueueGiveFromISR+0xda>
 80107e0:	2400000a 	.word	0x2400000a

080107e4 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 80107e4:	2200      	movs	r2, #0
 80107e6:	f7ff bf69 	b.w	80106bc <MyWrapper_xQueueGiveFromISR>
	...

080107ec <xQueueReceive>:
{
 80107ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107f0:	b085      	sub	sp, #20
 80107f2:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 80107f4:	4604      	mov	r4, r0
{
 80107f6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80107f8:	b940      	cbnz	r0, 801080c <xQueueReceive+0x20>
	__asm volatile
 80107fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107fe:	f383 8811 	msr	BASEPRI, r3
 8010802:	f3bf 8f6f 	isb	sy
 8010806:	f3bf 8f4f 	dsb	sy
 801080a:	e7fe      	b.n	801080a <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801080c:	b951      	cbnz	r1, 8010824 <xQueueReceive+0x38>
 801080e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010810:	b143      	cbz	r3, 8010824 <xQueueReceive+0x38>
 8010812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010816:	f383 8811 	msr	BASEPRI, r3
 801081a:	f3bf 8f6f 	isb	sy
 801081e:	f3bf 8f4f 	dsb	sy
 8010822:	e7fe      	b.n	8010822 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010824:	f001 f962 	bl	8011aec <xTaskGetSchedulerState>
 8010828:	b950      	cbnz	r0, 8010840 <xQueueReceive+0x54>
 801082a:	9d01      	ldr	r5, [sp, #4]
 801082c:	b14d      	cbz	r5, 8010842 <xQueueReceive+0x56>
 801082e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010832:	f383 8811 	msr	BASEPRI, r3
 8010836:	f3bf 8f6f 	isb	sy
 801083a:	f3bf 8f4f 	dsb	sy
 801083e:	e7fe      	b.n	801083e <xQueueReceive+0x52>
 8010840:	2500      	movs	r5, #0
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8010842:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8010a40 <xQueueReceive+0x254>
					portYIELD_WITHIN_API();
 8010846:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8010a3c <xQueueReceive+0x250>
 801084a:	e09e      	b.n	801098a <xQueueReceive+0x19e>
				traceQUEUE_RECEIVE( pxQueue );
 801084c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801084e:	4621      	mov	r1, r4
 8010850:	9a01      	ldr	r2, [sp, #4]
 8010852:	2060      	movs	r0, #96	; 0x60
 8010854:	3b01      	subs	r3, #1
 8010856:	f7f4 fdd5 	bl	8005404 <prvTraceStoreEvent3>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801085a:	3e01      	subs	r6, #1
 801085c:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801085e:	6923      	ldr	r3, [r4, #16]
 8010860:	b163      	cbz	r3, 801087c <xQueueReceive+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010862:	f104 0010 	add.w	r0, r4, #16
 8010866:	f001 f889 	bl	801197c <xTaskRemoveFromEventList>
 801086a:	b138      	cbz	r0, 801087c <xQueueReceive+0x90>
						queueYIELD_IF_USING_PREEMPTION();
 801086c:	4b73      	ldr	r3, [pc, #460]	; (8010a3c <xQueueReceive+0x250>)
 801086e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010872:	601a      	str	r2, [r3, #0]
 8010874:	f3bf 8f4f 	dsb	sy
 8010878:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 801087c:	f001 fd14 	bl	80122a8 <vPortExitCritical>
				return pdPASS;
 8010880:	2001      	movs	r0, #1
}
 8010882:	b005      	add	sp, #20
 8010884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				traceQUEUE_RECEIVE( pxQueue );
 8010888:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801088a:	4621      	mov	r1, r4
 801088c:	9a01      	ldr	r2, [sp, #4]
 801088e:	2061      	movs	r0, #97	; 0x61
 8010890:	3b01      	subs	r3, #1
 8010892:	e7e0      	b.n	8010856 <xQueueReceive+0x6a>
 8010894:	9a01      	ldr	r2, [sp, #4]
 8010896:	4621      	mov	r1, r4
 8010898:	2062      	movs	r0, #98	; 0x62
 801089a:	f7f4 fd83 	bl	80053a4 <prvTraceStoreEvent2>
 801089e:	e7dc      	b.n	801085a <xQueueReceive+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 80108a0:	9b01      	ldr	r3, [sp, #4]
 80108a2:	b9db      	cbnz	r3, 80108dc <xQueueReceive+0xf0>
					taskEXIT_CRITICAL();
 80108a4:	f001 fd00 	bl	80122a8 <vPortExitCritical>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80108a8:	4d65      	ldr	r5, [pc, #404]	; (8010a40 <xQueueReceive+0x254>)
 80108aa:	f7f4 f94d 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 80108ae:	f7f4 f817 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 80108b2:	882b      	ldrh	r3, [r5, #0]
 80108b4:	4218      	tst	r0, r3
 80108b6:	f000 80b3 	beq.w	8010a20 <xQueueReceive+0x234>
 80108ba:	4620      	mov	r0, r4
 80108bc:	f7f4 f822 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 80108c0:	882b      	ldrh	r3, [r5, #0]
 80108c2:	4218      	tst	r0, r3
 80108c4:	f000 80ac 	beq.w	8010a20 <xQueueReceive+0x234>
 80108c8:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80108cc:	2b04      	cmp	r3, #4
 80108ce:	f200 80a7 	bhi.w	8010a20 <xQueueReceive+0x234>
 80108d2:	e8df f003 	tbb	[pc, r3]
 80108d6:	ac9f      	.short	0xac9f
 80108d8:	a7a7      	.short	0xa7a7
 80108da:	ac          	.byte	0xac
 80108db:	00          	.byte	0x00
				else if( xEntryTimeSet == pdFALSE )
 80108dc:	b915      	cbnz	r5, 80108e4 <xQueueReceive+0xf8>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80108de:	a802      	add	r0, sp, #8
 80108e0:	f001 f89a 	bl	8011a18 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80108e4:	f001 fce0 	bl	80122a8 <vPortExitCritical>
		vTaskSuspendAll();
 80108e8:	f000 fdd2 	bl	8011490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80108ec:	f001 fcba 	bl	8012264 <vPortEnterCritical>
 80108f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80108f4:	2bff      	cmp	r3, #255	; 0xff
 80108f6:	d102      	bne.n	80108fe <xQueueReceive+0x112>
 80108f8:	2300      	movs	r3, #0
 80108fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80108fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010902:	2bff      	cmp	r3, #255	; 0xff
 8010904:	d102      	bne.n	801090c <xQueueReceive+0x120>
 8010906:	2300      	movs	r3, #0
 8010908:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801090c:	f001 fccc 	bl	80122a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010910:	a901      	add	r1, sp, #4
 8010912:	a802      	add	r0, sp, #8
 8010914:	f001 f88c 	bl	8011a30 <xTaskCheckForTimeOut>
 8010918:	2800      	cmp	r0, #0
 801091a:	d170      	bne.n	80109fe <xQueueReceive+0x212>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801091c:	4620      	mov	r0, r4
 801091e:	f7ff fa7f 	bl	800fe20 <prvIsQueueEmpty>
 8010922:	2800      	cmp	r0, #0
 8010924:	d065      	beq.n	80109f2 <xQueueReceive+0x206>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8010926:	f7f4 f90f 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 801092a:	f7f3 ffd9 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 801092e:	f8b8 3000 	ldrh.w	r3, [r8]
 8010932:	4218      	tst	r0, r3
 8010934:	d015      	beq.n	8010962 <xQueueReceive+0x176>
 8010936:	4620      	mov	r0, r4
 8010938:	f7f3 ffe4 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 801093c:	f8b8 3000 	ldrh.w	r3, [r8]
 8010940:	4218      	tst	r0, r3
 8010942:	d00e      	beq.n	8010962 <xQueueReceive+0x176>
 8010944:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8010948:	9a01      	ldr	r2, [sp, #4]
 801094a:	2b04      	cmp	r3, #4
 801094c:	d809      	bhi.n	8010962 <xQueueReceive+0x176>
 801094e:	e8df f003 	tbb	[pc, r3]
 8010952:	4b03      	.short	0x4b03
 8010954:	4747      	.short	0x4747
 8010956:	4b          	.byte	0x4b
 8010957:	00          	.byte	0x00
 8010958:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801095a:	4621      	mov	r1, r4
 801095c:	2066      	movs	r0, #102	; 0x66
 801095e:	f7f4 fd51 	bl	8005404 <prvTraceStoreEvent3>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010962:	9901      	ldr	r1, [sp, #4]
 8010964:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010968:	f000 ffbe 	bl	80118e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801096c:	4620      	mov	r0, r4
 801096e:	f7ff faaa 	bl	800fec6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010972:	f000 fe53 	bl	801161c <xTaskResumeAll>
 8010976:	b938      	cbnz	r0, 8010988 <xQueueReceive+0x19c>
					portYIELD_WITHIN_API();
 8010978:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801097c:	f8c9 3000 	str.w	r3, [r9]
 8010980:	f3bf 8f4f 	dsb	sy
 8010984:	f3bf 8f6f 	isb	sy
 8010988:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 801098a:	f001 fc6b 	bl	8012264 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801098e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010990:	2e00      	cmp	r6, #0
 8010992:	d085      	beq.n	80108a0 <xQueueReceive+0xb4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010994:	4639      	mov	r1, r7
 8010996:	4620      	mov	r0, r4
				traceQUEUE_RECEIVE( pxQueue );
 8010998:	4d29      	ldr	r5, [pc, #164]	; (8010a40 <xQueueReceive+0x254>)
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801099a:	f7ff fa7f 	bl	800fe9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 801099e:	f7f4 f8d3 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 80109a2:	f7f3 ff9d 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 80109a6:	882b      	ldrh	r3, [r5, #0]
 80109a8:	4218      	tst	r0, r3
 80109aa:	f43f af56 	beq.w	801085a <xQueueReceive+0x6e>
 80109ae:	4620      	mov	r0, r4
 80109b0:	f7f3 ffa8 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 80109b4:	882b      	ldrh	r3, [r5, #0]
 80109b6:	4218      	tst	r0, r3
 80109b8:	f43f af4f 	beq.w	801085a <xQueueReceive+0x6e>
 80109bc:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80109c0:	2b04      	cmp	r3, #4
 80109c2:	f63f af4a 	bhi.w	801085a <xQueueReceive+0x6e>
 80109c6:	a201      	add	r2, pc, #4	; (adr r2, 80109cc <xQueueReceive+0x1e0>)
 80109c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109cc:	0801084d 	.word	0x0801084d
 80109d0:	08010895 	.word	0x08010895
 80109d4:	08010889 	.word	0x08010889
 80109d8:	08010889 	.word	0x08010889
 80109dc:	08010895 	.word	0x08010895
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80109e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80109e2:	4621      	mov	r1, r4
 80109e4:	2067      	movs	r0, #103	; 0x67
 80109e6:	e7ba      	b.n	801095e <xQueueReceive+0x172>
 80109e8:	4621      	mov	r1, r4
 80109ea:	2068      	movs	r0, #104	; 0x68
 80109ec:	f7f4 fcda 	bl	80053a4 <prvTraceStoreEvent2>
 80109f0:	e7b7      	b.n	8010962 <xQueueReceive+0x176>
				prvUnlockQueue( pxQueue );
 80109f2:	4620      	mov	r0, r4
 80109f4:	f7ff fa67 	bl	800fec6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80109f8:	f000 fe10 	bl	801161c <xTaskResumeAll>
 80109fc:	e7c4      	b.n	8010988 <xQueueReceive+0x19c>
			prvUnlockQueue( pxQueue );
 80109fe:	4620      	mov	r0, r4
 8010a00:	f7ff fa61 	bl	800fec6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010a04:	f000 fe0a 	bl	801161c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a08:	4620      	mov	r0, r4
 8010a0a:	f7ff fa09 	bl	800fe20 <prvIsQueueEmpty>
 8010a0e:	2800      	cmp	r0, #0
 8010a10:	d0ba      	beq.n	8010988 <xQueueReceive+0x19c>
 8010a12:	e749      	b.n	80108a8 <xQueueReceive+0xbc>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8010a14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010a16:	4621      	mov	r1, r4
 8010a18:	9a01      	ldr	r2, [sp, #4]
 8010a1a:	2063      	movs	r0, #99	; 0x63
 8010a1c:	f7f4 fcf2 	bl	8005404 <prvTraceStoreEvent3>
				return errQUEUE_EMPTY;
 8010a20:	2000      	movs	r0, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8010a22:	e72e      	b.n	8010882 <xQueueReceive+0x96>
 8010a24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010a26:	4621      	mov	r1, r4
 8010a28:	9a01      	ldr	r2, [sp, #4]
 8010a2a:	2064      	movs	r0, #100	; 0x64
 8010a2c:	e7f6      	b.n	8010a1c <xQueueReceive+0x230>
 8010a2e:	9a01      	ldr	r2, [sp, #4]
 8010a30:	4621      	mov	r1, r4
 8010a32:	2065      	movs	r0, #101	; 0x65
 8010a34:	f7f4 fcb6 	bl	80053a4 <prvTraceStoreEvent2>
 8010a38:	e7f2      	b.n	8010a20 <xQueueReceive+0x234>
 8010a3a:	bf00      	nop
 8010a3c:	e000ed04 	.word	0xe000ed04
 8010a40:	2400000a 	.word	0x2400000a

08010a44 <xQueueSemaphoreTake>:
{
 8010a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a48:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8010a4a:	4604      	mov	r4, r0
{
 8010a4c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010a4e:	b940      	cbnz	r0, 8010a62 <xQueueSemaphoreTake+0x1e>
 8010a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a54:	f383 8811 	msr	BASEPRI, r3
 8010a58:	f3bf 8f6f 	isb	sy
 8010a5c:	f3bf 8f4f 	dsb	sy
 8010a60:	e7fe      	b.n	8010a60 <xQueueSemaphoreTake+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8010a62:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8010a64:	b145      	cbz	r5, 8010a78 <xQueueSemaphoreTake+0x34>
 8010a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a6a:	f383 8811 	msr	BASEPRI, r3
 8010a6e:	f3bf 8f6f 	isb	sy
 8010a72:	f3bf 8f4f 	dsb	sy
 8010a76:	e7fe      	b.n	8010a76 <xQueueSemaphoreTake+0x32>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a78:	f001 f838 	bl	8011aec <xTaskGetSchedulerState>
 8010a7c:	b950      	cbnz	r0, 8010a94 <xQueueSemaphoreTake+0x50>
 8010a7e:	9d01      	ldr	r5, [sp, #4]
 8010a80:	b145      	cbz	r5, 8010a94 <xQueueSemaphoreTake+0x50>
 8010a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a86:	f383 8811 	msr	BASEPRI, r3
 8010a8a:	f3bf 8f6f 	isb	sy
 8010a8e:	f3bf 8f4f 	dsb	sy
 8010a92:	e7fe      	b.n	8010a92 <xQueueSemaphoreTake+0x4e>
 8010a94:	462f      	mov	r7, r5
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8010a96:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 8010d38 <xQueueSemaphoreTake+0x2f4>
					portYIELD_WITHIN_API();
 8010a9a:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8010d34 <xQueueSemaphoreTake+0x2f0>
 8010a9e:	e0ca      	b.n	8010c36 <xQueueSemaphoreTake+0x1f2>
				traceQUEUE_RECEIVE( pxQueue );
 8010aa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010aa2:	4621      	mov	r1, r4
 8010aa4:	9a01      	ldr	r2, [sp, #4]
 8010aa6:	2060      	movs	r0, #96	; 0x60
 8010aa8:	3b01      	subs	r3, #1
 8010aaa:	f7f4 fcab 	bl	8005404 <prvTraceStoreEvent3>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010aae:	3e01      	subs	r6, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010ab0:	6823      	ldr	r3, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010ab2:	63a6      	str	r6, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010ab4:	b913      	cbnz	r3, 8010abc <xQueueSemaphoreTake+0x78>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010ab6:	f001 f963 	bl	8011d80 <pvTaskIncrementMutexHeldCount>
 8010aba:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010abc:	6923      	ldr	r3, [r4, #16]
 8010abe:	b163      	cbz	r3, 8010ada <xQueueSemaphoreTake+0x96>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ac0:	f104 0010 	add.w	r0, r4, #16
 8010ac4:	f000 ff5a 	bl	801197c <xTaskRemoveFromEventList>
 8010ac8:	b138      	cbz	r0, 8010ada <xQueueSemaphoreTake+0x96>
						queueYIELD_IF_USING_PREEMPTION();
 8010aca:	4b9a      	ldr	r3, [pc, #616]	; (8010d34 <xQueueSemaphoreTake+0x2f0>)
 8010acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ad0:	601a      	str	r2, [r3, #0]
 8010ad2:	f3bf 8f4f 	dsb	sy
 8010ad6:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8010ada:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8010adc:	f001 fbe4 	bl	80122a8 <vPortExitCritical>
}
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	b005      	add	sp, #20
 8010ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				traceQUEUE_RECEIVE( pxQueue );
 8010ae8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010aea:	4621      	mov	r1, r4
 8010aec:	9a01      	ldr	r2, [sp, #4]
 8010aee:	2061      	movs	r0, #97	; 0x61
 8010af0:	3b01      	subs	r3, #1
 8010af2:	e7da      	b.n	8010aaa <xQueueSemaphoreTake+0x66>
 8010af4:	9a01      	ldr	r2, [sp, #4]
 8010af6:	4621      	mov	r1, r4
 8010af8:	2062      	movs	r0, #98	; 0x62
 8010afa:	f7f4 fc53 	bl	80053a4 <prvTraceStoreEvent2>
 8010afe:	e7d6      	b.n	8010aae <xQueueSemaphoreTake+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b00:	9b01      	ldr	r3, [sp, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d136      	bne.n	8010b74 <xQueueSemaphoreTake+0x130>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010b06:	b145      	cbz	r5, 8010b1a <xQueueSemaphoreTake+0xd6>
 8010b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b0c:	f383 8811 	msr	BASEPRI, r3
 8010b10:	f3bf 8f6f 	isb	sy
 8010b14:	f3bf 8f4f 	dsb	sy
 8010b18:	e7fe      	b.n	8010b18 <xQueueSemaphoreTake+0xd4>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8010b1a:	4e87      	ldr	r6, [pc, #540]	; (8010d38 <xQueueSemaphoreTake+0x2f4>)
					taskEXIT_CRITICAL();
 8010b1c:	f001 fbc4 	bl	80122a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8010b20:	f7f4 f812 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 8010b24:	f7f3 fedc 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8010b28:	8833      	ldrh	r3, [r6, #0]
 8010b2a:	4218      	tst	r0, r3
 8010b2c:	d101      	bne.n	8010b32 <xQueueSemaphoreTake+0xee>
				return errQUEUE_EMPTY;
 8010b2e:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8010b30:	e7d6      	b.n	8010ae0 <xQueueSemaphoreTake+0x9c>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8010b32:	4620      	mov	r0, r4
 8010b34:	f7f3 fee6 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 8010b38:	8833      	ldrh	r3, [r6, #0]
 8010b3a:	4218      	tst	r0, r3
 8010b3c:	d0f7      	beq.n	8010b2e <xQueueSemaphoreTake+0xea>
 8010b3e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8010b42:	2b04      	cmp	r3, #4
 8010b44:	d8f3      	bhi.n	8010b2e <xQueueSemaphoreTake+0xea>
 8010b46:	e8df f003 	tbb	[pc, r3]
 8010b4a:	0f03      	.short	0x0f03
 8010b4c:	0a0a      	.short	0x0a0a
 8010b4e:	0f          	.byte	0x0f
 8010b4f:	00          	.byte	0x00
 8010b50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010b52:	4621      	mov	r1, r4
 8010b54:	9a01      	ldr	r2, [sp, #4]
 8010b56:	2063      	movs	r0, #99	; 0x63
 8010b58:	f7f4 fc54 	bl	8005404 <prvTraceStoreEvent3>
 8010b5c:	e7c0      	b.n	8010ae0 <xQueueSemaphoreTake+0x9c>
 8010b5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010b60:	4621      	mov	r1, r4
 8010b62:	9a01      	ldr	r2, [sp, #4]
 8010b64:	2064      	movs	r0, #100	; 0x64
 8010b66:	e7f7      	b.n	8010b58 <xQueueSemaphoreTake+0x114>
 8010b68:	9a01      	ldr	r2, [sp, #4]
 8010b6a:	4621      	mov	r1, r4
 8010b6c:	2065      	movs	r0, #101	; 0x65
 8010b6e:	f7f4 fc19 	bl	80053a4 <prvTraceStoreEvent2>
 8010b72:	e7b5      	b.n	8010ae0 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 8010b74:	b917      	cbnz	r7, 8010b7c <xQueueSemaphoreTake+0x138>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b76:	a802      	add	r0, sp, #8
 8010b78:	f000 ff4e 	bl	8011a18 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010b7c:	f001 fb94 	bl	80122a8 <vPortExitCritical>
		vTaskSuspendAll();
 8010b80:	f000 fc86 	bl	8011490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b84:	f001 fb6e 	bl	8012264 <vPortEnterCritical>
 8010b88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010b8c:	2bff      	cmp	r3, #255	; 0xff
 8010b8e:	d102      	bne.n	8010b96 <xQueueSemaphoreTake+0x152>
 8010b90:	2300      	movs	r3, #0
 8010b92:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010b96:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010b9a:	2bff      	cmp	r3, #255	; 0xff
 8010b9c:	d102      	bne.n	8010ba4 <xQueueSemaphoreTake+0x160>
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010ba4:	f001 fb80 	bl	80122a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010ba8:	a901      	add	r1, sp, #4
 8010baa:	a802      	add	r0, sp, #8
 8010bac:	f000 ff40 	bl	8011a30 <xTaskCheckForTimeOut>
 8010bb0:	2800      	cmp	r0, #0
 8010bb2:	d17a      	bne.n	8010caa <xQueueSemaphoreTake+0x266>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f7ff f933 	bl	800fe20 <prvIsQueueEmpty>
 8010bba:	2800      	cmp	r0, #0
 8010bbc:	d06f      	beq.n	8010c9e <xQueueSemaphoreTake+0x25a>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8010bbe:	f7f3 ffc3 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 8010bc2:	f7f3 fe8d 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8010bc6:	f8b8 3000 	ldrh.w	r3, [r8]
 8010bca:	4218      	tst	r0, r3
 8010bcc:	d015      	beq.n	8010bfa <xQueueSemaphoreTake+0x1b6>
 8010bce:	4620      	mov	r0, r4
 8010bd0:	f7f3 fe98 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 8010bd4:	f8b8 3000 	ldrh.w	r3, [r8]
 8010bd8:	4218      	tst	r0, r3
 8010bda:	d00e      	beq.n	8010bfa <xQueueSemaphoreTake+0x1b6>
 8010bdc:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8010be0:	2b04      	cmp	r3, #4
 8010be2:	d80a      	bhi.n	8010bfa <xQueueSemaphoreTake+0x1b6>
 8010be4:	e8df f003 	tbb	[pc, r3]
 8010be8:	50505503 	.word	0x50505503
 8010bec:	55          	.byte	0x55
 8010bed:	00          	.byte	0x00
 8010bee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010bf0:	4621      	mov	r1, r4
 8010bf2:	9a01      	ldr	r2, [sp, #4]
 8010bf4:	2066      	movs	r0, #102	; 0x66
 8010bf6:	f7f4 fc05 	bl	8005404 <prvTraceStoreEvent3>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010bfa:	6823      	ldr	r3, [r4, #0]
 8010bfc:	b93b      	cbnz	r3, 8010c0e <xQueueSemaphoreTake+0x1ca>
						taskENTER_CRITICAL();
 8010bfe:	f001 fb31 	bl	8012264 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010c02:	68a0      	ldr	r0, [r4, #8]
 8010c04:	f000 ff82 	bl	8011b0c <xTaskPriorityInherit>
 8010c08:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8010c0a:	f001 fb4d 	bl	80122a8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010c0e:	9901      	ldr	r1, [sp, #4]
 8010c10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010c14:	f000 fe68 	bl	80118e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010c18:	4620      	mov	r0, r4
 8010c1a:	f7ff f954 	bl	800fec6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010c1e:	f000 fcfd 	bl	801161c <xTaskResumeAll>
 8010c22:	b938      	cbnz	r0, 8010c34 <xQueueSemaphoreTake+0x1f0>
					portYIELD_WITHIN_API();
 8010c24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010c28:	f8c9 3000 	str.w	r3, [r9]
 8010c2c:	f3bf 8f4f 	dsb	sy
 8010c30:	f3bf 8f6f 	isb	sy
 8010c34:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 8010c36:	f001 fb15 	bl	8012264 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010c3a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010c3c:	2e00      	cmp	r6, #0
 8010c3e:	f43f af5f 	beq.w	8010b00 <xQueueSemaphoreTake+0xbc>
				traceQUEUE_RECEIVE( pxQueue );
 8010c42:	4d3d      	ldr	r5, [pc, #244]	; (8010d38 <xQueueSemaphoreTake+0x2f4>)
 8010c44:	f7f3 ff80 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 8010c48:	f7f3 fe4a 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8010c4c:	882b      	ldrh	r3, [r5, #0]
 8010c4e:	4218      	tst	r0, r3
 8010c50:	f43f af2d 	beq.w	8010aae <xQueueSemaphoreTake+0x6a>
 8010c54:	4620      	mov	r0, r4
 8010c56:	f7f3 fe55 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 8010c5a:	882b      	ldrh	r3, [r5, #0]
 8010c5c:	4218      	tst	r0, r3
 8010c5e:	f43f af26 	beq.w	8010aae <xQueueSemaphoreTake+0x6a>
 8010c62:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8010c66:	2b04      	cmp	r3, #4
 8010c68:	f63f af21 	bhi.w	8010aae <xQueueSemaphoreTake+0x6a>
 8010c6c:	a201      	add	r2, pc, #4	; (adr r2, 8010c74 <xQueueSemaphoreTake+0x230>)
 8010c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c72:	bf00      	nop
 8010c74:	08010aa1 	.word	0x08010aa1
 8010c78:	08010af5 	.word	0x08010af5
 8010c7c:	08010ae9 	.word	0x08010ae9
 8010c80:	08010ae9 	.word	0x08010ae9
 8010c84:	08010af5 	.word	0x08010af5
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8010c88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010c8a:	4621      	mov	r1, r4
 8010c8c:	9a01      	ldr	r2, [sp, #4]
 8010c8e:	2067      	movs	r0, #103	; 0x67
 8010c90:	e7b1      	b.n	8010bf6 <xQueueSemaphoreTake+0x1b2>
 8010c92:	9a01      	ldr	r2, [sp, #4]
 8010c94:	4621      	mov	r1, r4
 8010c96:	2068      	movs	r0, #104	; 0x68
 8010c98:	f7f4 fb84 	bl	80053a4 <prvTraceStoreEvent2>
 8010c9c:	e7ad      	b.n	8010bfa <xQueueSemaphoreTake+0x1b6>
				prvUnlockQueue( pxQueue );
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	f7ff f911 	bl	800fec6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ca4:	f000 fcba 	bl	801161c <xTaskResumeAll>
 8010ca8:	e7c4      	b.n	8010c34 <xQueueSemaphoreTake+0x1f0>
			prvUnlockQueue( pxQueue );
 8010caa:	4620      	mov	r0, r4
 8010cac:	f7ff f90b 	bl	800fec6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010cb0:	f000 fcb4 	bl	801161c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	f7ff f8b3 	bl	800fe20 <prvIsQueueEmpty>
 8010cba:	2800      	cmp	r0, #0
 8010cbc:	d0ba      	beq.n	8010c34 <xQueueSemaphoreTake+0x1f0>
					if( xInheritanceOccurred != pdFALSE )
 8010cbe:	b165      	cbz	r5, 8010cda <xQueueSemaphoreTake+0x296>
						taskENTER_CRITICAL();
 8010cc0:	f001 fad0 	bl	8012264 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010cc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010cc6:	b119      	cbz	r1, 8010cd0 <xQueueSemaphoreTake+0x28c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010cc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010cca:	6819      	ldr	r1, [r3, #0]
 8010ccc:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010cd0:	68a0      	ldr	r0, [r4, #8]
 8010cd2:	f000 ffe5 	bl	8011ca0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8010cd6:	f001 fae7 	bl	80122a8 <vPortExitCritical>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8010cda:	4d17      	ldr	r5, [pc, #92]	; (8010d38 <xQueueSemaphoreTake+0x2f4>)
 8010cdc:	f7f3 ff34 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 8010ce0:	f7f3 fdfe 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8010ce4:	882b      	ldrh	r3, [r5, #0]
 8010ce6:	4218      	tst	r0, r3
 8010ce8:	f43f af21 	beq.w	8010b2e <xQueueSemaphoreTake+0xea>
 8010cec:	4620      	mov	r0, r4
 8010cee:	f7f3 fe09 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 8010cf2:	882b      	ldrh	r3, [r5, #0]
 8010cf4:	4218      	tst	r0, r3
 8010cf6:	f43f af1a 	beq.w	8010b2e <xQueueSemaphoreTake+0xea>
 8010cfa:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8010cfe:	2b04      	cmp	r3, #4
 8010d00:	f63f af15 	bhi.w	8010b2e <xQueueSemaphoreTake+0xea>
 8010d04:	e8df f003 	tbb	[pc, r3]
 8010d08:	0a0a0f03 	.word	0x0a0a0f03
 8010d0c:	0f          	.byte	0x0f
 8010d0d:	00          	.byte	0x00
 8010d0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010d10:	4621      	mov	r1, r4
 8010d12:	9a01      	ldr	r2, [sp, #4]
 8010d14:	2063      	movs	r0, #99	; 0x63
 8010d16:	f7f4 fb75 	bl	8005404 <prvTraceStoreEvent3>
 8010d1a:	e708      	b.n	8010b2e <xQueueSemaphoreTake+0xea>
 8010d1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010d1e:	4621      	mov	r1, r4
 8010d20:	9a01      	ldr	r2, [sp, #4]
 8010d22:	2064      	movs	r0, #100	; 0x64
 8010d24:	e7f7      	b.n	8010d16 <xQueueSemaphoreTake+0x2d2>
 8010d26:	9a01      	ldr	r2, [sp, #4]
 8010d28:	4621      	mov	r1, r4
 8010d2a:	2065      	movs	r0, #101	; 0x65
 8010d2c:	f7f4 fb3a 	bl	80053a4 <prvTraceStoreEvent2>
 8010d30:	e6fd      	b.n	8010b2e <xQueueSemaphoreTake+0xea>
 8010d32:	bf00      	nop
 8010d34:	e000ed04 	.word	0xe000ed04
 8010d38:	2400000a 	.word	0x2400000a

08010d3c <xQueueTakeMutexRecursive>:
	{
 8010d3c:	b570      	push	{r4, r5, r6, lr}
 8010d3e:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 8010d40:	4604      	mov	r4, r0
 8010d42:	b940      	cbnz	r0, 8010d56 <xQueueTakeMutexRecursive+0x1a>
 8010d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d48:	f383 8811 	msr	BASEPRI, r3
 8010d4c:	f3bf 8f6f 	isb	sy
 8010d50:	f3bf 8f4f 	dsb	sy
 8010d54:	e7fe      	b.n	8010d54 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010d56:	6886      	ldr	r6, [r0, #8]
 8010d58:	f000 fec2 	bl	8011ae0 <xTaskGetCurrentTaskHandle>
 8010d5c:	4286      	cmp	r6, r0
 8010d5e:	d104      	bne.n	8010d6a <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010d60:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8010d62:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010d64:	3301      	adds	r3, #1
 8010d66:	60e3      	str	r3, [r4, #12]
	}
 8010d68:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010d6a:	4629      	mov	r1, r5
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	f7ff fe69 	bl	8010a44 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8010d72:	2800      	cmp	r0, #0
 8010d74:	d0f8      	beq.n	8010d68 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010d76:	68e3      	ldr	r3, [r4, #12]
 8010d78:	3301      	adds	r3, #1
 8010d7a:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8010d7c:	e7f4      	b.n	8010d68 <xQueueTakeMutexRecursive+0x2c>
	...

08010d80 <xQueueReceiveFromISR>:
{
 8010d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d84:	4689      	mov	r9, r1
 8010d86:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8010d88:	4604      	mov	r4, r0
 8010d8a:	b940      	cbnz	r0, 8010d9e <xQueueReceiveFromISR+0x1e>
 8010d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d90:	f383 8811 	msr	BASEPRI, r3
 8010d94:	f3bf 8f6f 	isb	sy
 8010d98:	f3bf 8f4f 	dsb	sy
 8010d9c:	e7fe      	b.n	8010d9c <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d9e:	b951      	cbnz	r1, 8010db6 <xQueueReceiveFromISR+0x36>
 8010da0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010da2:	b143      	cbz	r3, 8010db6 <xQueueReceiveFromISR+0x36>
 8010da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da8:	f383 8811 	msr	BASEPRI, r3
 8010dac:	f3bf 8f6f 	isb	sy
 8010db0:	f3bf 8f4f 	dsb	sy
 8010db4:	e7fe      	b.n	8010db4 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010db6:	f001 fb71 	bl	801249c <vPortValidateInterruptPriority>
	__asm volatile
 8010dba:	f3ef 8711 	mrs	r7, BASEPRI
 8010dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc2:	f383 8811 	msr	BASEPRI, r3
 8010dc6:	f3bf 8f6f 	isb	sy
 8010dca:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010dce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010dd0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8010e88 <xQueueReceiveFromISR+0x108>
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010dd4:	2d00      	cmp	r5, #0
 8010dd6:	d03b      	beq.n	8010e50 <xQueueReceiveFromISR+0xd0>
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8010dd8:	4620      	mov	r0, r4
			const int8_t cRxLock = pxQueue->cRxLock;
 8010dda:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8010dde:	f7f3 fd91 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 8010de2:	f8ba 3000 	ldrh.w	r3, [sl]
			const int8_t cRxLock = pxQueue->cRxLock;
 8010de6:	b276      	sxtb	r6, r6
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8010de8:	4218      	tst	r0, r3
 8010dea:	d010      	beq.n	8010e0e <xQueueReceiveFromISR+0x8e>
 8010dec:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8010df0:	b13b      	cbz	r3, 8010e02 <xQueueReceiveFromISR+0x82>
 8010df2:	3b02      	subs	r3, #2
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	d80a      	bhi.n	8010e0e <xQueueReceiveFromISR+0x8e>
 8010df8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010dfa:	4621      	mov	r1, r4
 8010dfc:	206a      	movs	r0, #106	; 0x6a
 8010dfe:	3a01      	subs	r2, #1
 8010e00:	e003      	b.n	8010e0a <xQueueReceiveFromISR+0x8a>
 8010e02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010e04:	4621      	mov	r1, r4
 8010e06:	2069      	movs	r0, #105	; 0x69
 8010e08:	3a01      	subs	r2, #1
 8010e0a:	f7f4 facb 	bl	80053a4 <prvTraceStoreEvent2>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010e0e:	4649      	mov	r1, r9
 8010e10:	4620      	mov	r0, r4
 8010e12:	f7ff f843 	bl	800fe9c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010e16:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8010e18:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010e1a:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8010e1c:	d113      	bne.n	8010e46 <xQueueReceiveFromISR+0xc6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e1e:	6923      	ldr	r3, [r4, #16]
 8010e20:	b90b      	cbnz	r3, 8010e26 <xQueueReceiveFromISR+0xa6>
			xReturn = pdPASS;
 8010e22:	2001      	movs	r0, #1
 8010e24:	e00b      	b.n	8010e3e <xQueueReceiveFromISR+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e26:	f104 0010 	add.w	r0, r4, #16
 8010e2a:	f000 fda7 	bl	801197c <xTaskRemoveFromEventList>
 8010e2e:	2800      	cmp	r0, #0
 8010e30:	d0f7      	beq.n	8010e22 <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 8010e32:	f1b8 0f00 	cmp.w	r8, #0
 8010e36:	d0f4      	beq.n	8010e22 <xQueueReceiveFromISR+0xa2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010e38:	2001      	movs	r0, #1
 8010e3a:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8010e3e:	f387 8811 	msr	BASEPRI, r7
}
 8010e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010e46:	3601      	adds	r6, #1
 8010e48:	b276      	sxtb	r6, r6
 8010e4a:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
 8010e4e:	e7e8      	b.n	8010e22 <xQueueReceiveFromISR+0xa2>
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8010e50:	4620      	mov	r0, r4
 8010e52:	f7f3 fd57 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 8010e56:	f8ba 3000 	ldrh.w	r3, [sl]
 8010e5a:	4018      	ands	r0, r3
 8010e5c:	d0ef      	beq.n	8010e3e <xQueueReceiveFromISR+0xbe>
 8010e5e:	f894 604c 	ldrb.w	r6, [r4, #76]	; 0x4c
 8010e62:	b14e      	cbz	r6, 8010e78 <xQueueReceiveFromISR+0xf8>
 8010e64:	1eb0      	subs	r0, r6, #2
 8010e66:	2801      	cmp	r0, #1
 8010e68:	d804      	bhi.n	8010e74 <xQueueReceiveFromISR+0xf4>
 8010e6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010e6c:	4621      	mov	r1, r4
 8010e6e:	206d      	movs	r0, #109	; 0x6d
 8010e70:	f7f4 fa98 	bl	80053a4 <prvTraceStoreEvent2>
			xReturn = pdFAIL;
 8010e74:	4628      	mov	r0, r5
 8010e76:	e7e2      	b.n	8010e3e <xQueueReceiveFromISR+0xbe>
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8010e78:	206c      	movs	r0, #108	; 0x6c
 8010e7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010e7c:	4621      	mov	r1, r4
 8010e7e:	f7f4 fa91 	bl	80053a4 <prvTraceStoreEvent2>
			xReturn = pdFAIL;
 8010e82:	4630      	mov	r0, r6
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8010e84:	e7db      	b.n	8010e3e <xQueueReceiveFromISR+0xbe>
 8010e86:	bf00      	nop
 8010e88:	2400000a 	.word	0x2400000a

08010e8c <uxQueueGetQueueNumber>:
	}
 8010e8c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8010e8e:	4770      	bx	lr

08010e90 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8010e90:	6481      	str	r1, [r0, #72]	; 0x48
	}
 8010e92:	4770      	bx	lr

08010e94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010e94:	b570      	push	{r4, r5, r6, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010e96:	4b0e      	ldr	r3, [pc, #56]	; (8010ed0 <vQueueAddToRegistry+0x3c>)
	{
 8010e98:	460d      	mov	r5, r1
 8010e9a:	4604      	mov	r4, r0
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010e9c:	2100      	movs	r1, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010e9e:	f853 0031 	ldr.w	r0, [r3, r1, lsl #3]
 8010ea2:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8010ea6:	b970      	cbnz	r0, 8010ec6 <vQueueAddToRegistry+0x32>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010ea8:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8010eac:	4620      	mov	r0, r4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010eae:	6054      	str	r4, [r2, #4]
				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8010eb0:	4629      	mov	r1, r5
 8010eb2:	f7f3 fe75 	bl	8004ba0 <prvTraceSaveObjectSymbol>
 8010eb6:	4623      	mov	r3, r4
 8010eb8:	462a      	mov	r2, r5
 8010eba:	2103      	movs	r1, #3
 8010ebc:	2001      	movs	r0, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8010ec2:	f7f4 b801 	b.w	8004ec8 <prvTraceStoreStringEvent>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010ec6:	3101      	adds	r1, #1
 8010ec8:	2908      	cmp	r1, #8
 8010eca:	d1e8      	bne.n	8010e9e <vQueueAddToRegistry+0xa>
	}
 8010ecc:	bd70      	pop	{r4, r5, r6, pc}
 8010ece:	bf00      	nop
 8010ed0:	24022910 	.word	0x24022910

08010ed4 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010ed4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010ed6:	4a08      	ldr	r2, [pc, #32]	; (8010ef8 <vQueueUnregisterQueue+0x24>)
	{
 8010ed8:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010eda:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8010ede:	684c      	ldr	r4, [r1, #4]
 8010ee0:	4284      	cmp	r4, r0
 8010ee2:	d104      	bne.n	8010eee <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010ee4:	2000      	movs	r0, #0
 8010ee6:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010eea:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010eec:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010eee:	3301      	adds	r3, #1
 8010ef0:	2b08      	cmp	r3, #8
 8010ef2:	d1f2      	bne.n	8010eda <vQueueUnregisterQueue+0x6>
 8010ef4:	e7fa      	b.n	8010eec <vQueueUnregisterQueue+0x18>
 8010ef6:	bf00      	nop
 8010ef8:	24022910 	.word	0x24022910

08010efc <vQueueDelete>:
{
 8010efc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8010efe:	4604      	mov	r4, r0
 8010f00:	b940      	cbnz	r0, 8010f14 <vQueueDelete+0x18>
	__asm volatile
 8010f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f06:	f383 8811 	msr	BASEPRI, r3
 8010f0a:	f3bf 8f6f 	isb	sy
 8010f0e:	f3bf 8f4f 	dsb	sy
 8010f12:	e7fe      	b.n	8010f12 <vQueueDelete+0x16>
	traceQUEUE_DELETE( pxQueue );
 8010f14:	4d19      	ldr	r5, [pc, #100]	; (8010f7c <vQueueDelete+0x80>)
 8010f16:	f7f3 fe17 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 8010f1a:	f7f3 fce1 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8010f1e:	882b      	ldrh	r3, [r5, #0]
 8010f20:	4218      	tst	r0, r3
 8010f22:	d013      	beq.n	8010f4c <vQueueDelete+0x50>
 8010f24:	4620      	mov	r0, r4
 8010f26:	f7f3 fced 	bl	8004904 <prvTraceGetQueueNumberHigh16>
 8010f2a:	882b      	ldrh	r3, [r5, #0]
 8010f2c:	4218      	tst	r0, r3
 8010f2e:	d00d      	beq.n	8010f4c <vQueueDelete+0x50>
 8010f30:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8010f34:	2b04      	cmp	r3, #4
 8010f36:	d809      	bhi.n	8010f4c <vQueueDelete+0x50>
 8010f38:	e8df f003 	tbb	[pc, r3]
 8010f3c:	1a1a1603 	.word	0x1a1a1603
 8010f40:	16          	.byte	0x16
 8010f41:	00          	.byte	0x00
 8010f42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010f44:	4621      	mov	r1, r4
 8010f46:	2021      	movs	r0, #33	; 0x21
 8010f48:	f7f4 fa2c 	bl	80053a4 <prvTraceStoreEvent2>
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	f7f3 fe7b 	bl	8004c48 <prvTraceDeleteSymbol>
		vQueueUnregisterQueue( pxQueue );
 8010f52:	4620      	mov	r0, r4
 8010f54:	f7ff ffbe 	bl	8010ed4 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010f58:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010f5c:	b963      	cbnz	r3, 8010f78 <vQueueDelete+0x7c>
			vPortFree( pxQueue );
 8010f5e:	4620      	mov	r0, r4
}
 8010f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			vPortFree( pxQueue );
 8010f64:	f001 bb94 	b.w	8012690 <vPortFree>
	traceQUEUE_DELETE( pxQueue );
 8010f68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010f6a:	4621      	mov	r1, r4
 8010f6c:	2023      	movs	r0, #35	; 0x23
 8010f6e:	e7eb      	b.n	8010f48 <vQueueDelete+0x4c>
 8010f70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010f72:	4621      	mov	r1, r4
 8010f74:	2022      	movs	r0, #34	; 0x22
 8010f76:	e7e7      	b.n	8010f48 <vQueueDelete+0x4c>
}
 8010f78:	bd38      	pop	{r3, r4, r5, pc}
 8010f7a:	bf00      	nop
 8010f7c:	2400000a 	.word	0x2400000a

08010f80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010f80:	b570      	push	{r4, r5, r6, lr}
 8010f82:	4604      	mov	r4, r0
 8010f84:	460d      	mov	r5, r1
 8010f86:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010f88:	f001 f96c 	bl	8012264 <vPortEnterCritical>
 8010f8c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010f90:	2bff      	cmp	r3, #255	; 0xff
 8010f92:	d102      	bne.n	8010f9a <vQueueWaitForMessageRestricted+0x1a>
 8010f94:	2300      	movs	r3, #0
 8010f96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010f9a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010f9e:	2bff      	cmp	r3, #255	; 0xff
 8010fa0:	d102      	bne.n	8010fa8 <vQueueWaitForMessageRestricted+0x28>
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010fa8:	f001 f97e 	bl	80122a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010fac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010fae:	b92b      	cbnz	r3, 8010fbc <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010fb0:	4632      	mov	r2, r6
 8010fb2:	4629      	mov	r1, r5
 8010fb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010fb8:	f000 fcb0 	bl	801191c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010fbc:	4620      	mov	r0, r4
	}
 8010fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8010fc2:	f7fe bf80 	b.w	800fec6 <prvUnlockQueue>
	...

08010fc8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fcc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010fce:	f001 f949 	bl	8012264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010fd2:	4b49      	ldr	r3, [pc, #292]	; (80110f8 <prvAddNewTaskToReadyList+0x130>)
		if( pxCurrentTCB == NULL )
 8010fd4:	4d49      	ldr	r5, [pc, #292]	; (80110fc <prvAddNewTaskToReadyList+0x134>)
		uxCurrentNumberOfTasks++;
 8010fd6:	681a      	ldr	r2, [r3, #0]
 8010fd8:	4f49      	ldr	r7, [pc, #292]	; (8011100 <prvAddNewTaskToReadyList+0x138>)
 8010fda:	3201      	adds	r2, #1
 8010fdc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8010fde:	682e      	ldr	r6, [r5, #0]
 8010fe0:	2e00      	cmp	r6, #0
 8010fe2:	d17d      	bne.n	80110e0 <prvAddNewTaskToReadyList+0x118>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010fe4:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	2b01      	cmp	r3, #1
 8010fea:	d11f      	bne.n	801102c <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010fec:	f04f 0814 	mov.w	r8, #20
 8010ff0:	fb08 7006 	mla	r0, r8, r6, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010ff4:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010ff6:	f7fe fed1 	bl	800fd9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010ffa:	2e38      	cmp	r6, #56	; 0x38
 8010ffc:	d1f8      	bne.n	8010ff0 <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010ffe:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8011134 <prvAddNewTaskToReadyList+0x16c>
	vListInitialise( &xDelayedTaskList2 );
 8011002:	4e40      	ldr	r6, [pc, #256]	; (8011104 <prvAddNewTaskToReadyList+0x13c>)
	vListInitialise( &xDelayedTaskList1 );
 8011004:	4640      	mov	r0, r8
 8011006:	f7fe fec9 	bl	800fd9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801100a:	4630      	mov	r0, r6
 801100c:	f7fe fec6 	bl	800fd9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011010:	483d      	ldr	r0, [pc, #244]	; (8011108 <prvAddNewTaskToReadyList+0x140>)
 8011012:	f7fe fec3 	bl	800fd9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011016:	483d      	ldr	r0, [pc, #244]	; (801110c <prvAddNewTaskToReadyList+0x144>)
 8011018:	f7fe fec0 	bl	800fd9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801101c:	483c      	ldr	r0, [pc, #240]	; (8011110 <prvAddNewTaskToReadyList+0x148>)
 801101e:	f7fe febd 	bl	800fd9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011022:	4b3c      	ldr	r3, [pc, #240]	; (8011114 <prvAddNewTaskToReadyList+0x14c>)
 8011024:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011028:	4b3b      	ldr	r3, [pc, #236]	; (8011118 <prvAddNewTaskToReadyList+0x150>)
 801102a:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 801102c:	4a3b      	ldr	r2, [pc, #236]	; (801111c <prvAddNewTaskToReadyList+0x154>)
		traceTASK_CREATE( pxNewTCB );
 801102e:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8011032:	4620      	mov	r0, r4
		uxTaskNumber++;
 8011034:	6813      	ldr	r3, [r2, #0]
 8011036:	3301      	adds	r3, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011038:	64a3      	str	r3, [r4, #72]	; 0x48
		uxTaskNumber++;
 801103a:	6013      	str	r3, [r2, #0]
		traceTASK_CREATE( pxNewTCB );
 801103c:	f7f3 fc74 	bl	8004928 <prvAddTaskToStackMonitor>
 8011040:	4631      	mov	r1, r6
 8011042:	4620      	mov	r0, r4
 8011044:	f7f3 fdac 	bl	8004ba0 <prvTraceSaveObjectSymbol>
 8011048:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801104a:	4620      	mov	r0, r4
 801104c:	f7f3 fe32 	bl	8004cb4 <prvTraceSaveObjectData>
 8011050:	4632      	mov	r2, r6
 8011052:	4623      	mov	r3, r4
 8011054:	2103      	movs	r1, #3
 8011056:	2001      	movs	r0, #1
 8011058:	4e31      	ldr	r6, [pc, #196]	; (8011120 <prvAddNewTaskToReadyList+0x158>)
 801105a:	f7f3 ff35 	bl	8004ec8 <prvTraceStoreStringEvent>
 801105e:	4b31      	ldr	r3, [pc, #196]	; (8011124 <prvAddNewTaskToReadyList+0x15c>)
 8011060:	4620      	mov	r0, r4
 8011062:	8819      	ldrh	r1, [r3, #0]
 8011064:	f7f3 fc41 	bl	80048ea <prvTraceSetTaskNumberHigh16>
 8011068:	f7f3 fd6e 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 801106c:	f7f3 fc38 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8011070:	8833      	ldrh	r3, [r6, #0]
 8011072:	4218      	tst	r0, r3
 8011074:	d00a      	beq.n	801108c <prvAddNewTaskToReadyList+0xc4>
 8011076:	4620      	mov	r0, r4
 8011078:	f7f3 fc32 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 801107c:	8833      	ldrh	r3, [r6, #0]
 801107e:	4218      	tst	r0, r3
 8011080:	d004      	beq.n	801108c <prvAddNewTaskToReadyList+0xc4>
 8011082:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011084:	4621      	mov	r1, r4
 8011086:	2010      	movs	r0, #16
 8011088:	f7f4 f98c 	bl	80053a4 <prvTraceStoreEvent2>
		prvAddTaskToReadyList( pxNewTCB );
 801108c:	4620      	mov	r0, r4
 801108e:	f7f3 fc27 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8011092:	8833      	ldrh	r3, [r6, #0]
 8011094:	4218      	tst	r0, r3
 8011096:	d003      	beq.n	80110a0 <prvAddNewTaskToReadyList+0xd8>
 8011098:	4621      	mov	r1, r4
 801109a:	2030      	movs	r0, #48	; 0x30
 801109c:	f7f4 f956 	bl	800534c <prvTraceStoreEvent1>
 80110a0:	4a21      	ldr	r2, [pc, #132]	; (8011128 <prvAddNewTaskToReadyList+0x160>)
 80110a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80110a4:	6811      	ldr	r1, [r2, #0]
 80110a6:	428b      	cmp	r3, r1
 80110a8:	d900      	bls.n	80110ac <prvAddNewTaskToReadyList+0xe4>
 80110aa:	6013      	str	r3, [r2, #0]
 80110ac:	2014      	movs	r0, #20
 80110ae:	1d21      	adds	r1, r4, #4
 80110b0:	fb00 7003 	mla	r0, r0, r3, r7
 80110b4:	f7fe fe80 	bl	800fdb8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80110b8:	f001 f8f6 	bl	80122a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80110bc:	4b1b      	ldr	r3, [pc, #108]	; (801112c <prvAddNewTaskToReadyList+0x164>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	b163      	cbz	r3, 80110dc <prvAddNewTaskToReadyList+0x114>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80110c2:	682b      	ldr	r3, [r5, #0]
 80110c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d207      	bcs.n	80110dc <prvAddNewTaskToReadyList+0x114>
			taskYIELD_IF_USING_PREEMPTION();
 80110cc:	4b18      	ldr	r3, [pc, #96]	; (8011130 <prvAddNewTaskToReadyList+0x168>)
 80110ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110d2:	601a      	str	r2, [r3, #0]
 80110d4:	f3bf 8f4f 	dsb	sy
 80110d8:	f3bf 8f6f 	isb	sy
}
 80110dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80110e0:	4b12      	ldr	r3, [pc, #72]	; (801112c <prvAddNewTaskToReadyList+0x164>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d1a1      	bne.n	801102c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80110e8:	682b      	ldr	r3, [r5, #0]
 80110ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d89c      	bhi.n	801102c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 80110f2:	602c      	str	r4, [r5, #0]
 80110f4:	e79a      	b.n	801102c <prvAddNewTaskToReadyList+0x64>
 80110f6:	bf00      	nop
 80110f8:	240021e0 	.word	0x240021e0
 80110fc:	24001d74 	.word	0x24001d74
 8011100:	24001d80 	.word	0x24001d80
 8011104:	2400220c 	.word	0x2400220c
 8011108:	24002228 	.word	0x24002228
 801110c:	24002254 	.word	0x24002254
 8011110:	24002240 	.word	0x24002240
 8011114:	24001d78 	.word	0x24001d78
 8011118:	24001d7c 	.word	0x24001d7c
 801111c:	240021f0 	.word	0x240021f0
 8011120:	2400000a 	.word	0x2400000a
 8011124:	24000008 	.word	0x24000008
 8011128:	240021f4 	.word	0x240021f4
 801112c:	2400223c 	.word	0x2400223c
 8011130:	e000ed04 	.word	0xe000ed04
 8011134:	240021f8 	.word	0x240021f8

08011138 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011138:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801113a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 801113e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011140:	b93b      	cbnz	r3, 8011152 <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011142:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011144:	f001 faa4 	bl	8012690 <vPortFree>
				vPortFree( pxTCB );
 8011148:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801114a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 801114e:	f001 ba9f 	b.w	8012690 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011152:	2b01      	cmp	r3, #1
 8011154:	d0f9      	beq.n	801114a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011156:	2b02      	cmp	r3, #2
 8011158:	d008      	beq.n	801116c <prvDeleteTCB+0x34>
 801115a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801115e:	f383 8811 	msr	BASEPRI, r3
 8011162:	f3bf 8f6f 	isb	sy
 8011166:	f3bf 8f4f 	dsb	sy
 801116a:	e7fe      	b.n	801116a <prvDeleteTCB+0x32>
	}
 801116c:	bd10      	pop	{r4, pc}
	...

08011170 <prvIdleTask>:
{
 8011170:	b580      	push	{r7, lr}
				taskYIELD();
 8011172:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80111d0 <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011176:	4f12      	ldr	r7, [pc, #72]	; (80111c0 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011178:	4c12      	ldr	r4, [pc, #72]	; (80111c4 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 801117a:	4d13      	ldr	r5, [pc, #76]	; (80111c8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801117c:	6823      	ldr	r3, [r4, #0]
 801117e:	b963      	cbnz	r3, 801119a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011180:	4b12      	ldr	r3, [pc, #72]	; (80111cc <prvIdleTask+0x5c>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	2b01      	cmp	r3, #1
 8011186:	d9f8      	bls.n	801117a <prvIdleTask+0xa>
				taskYIELD();
 8011188:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801118c:	f8c8 3000 	str.w	r3, [r8]
 8011190:	f3bf 8f4f 	dsb	sy
 8011194:	f3bf 8f6f 	isb	sy
 8011198:	e7ee      	b.n	8011178 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 801119a:	f001 f863 	bl	8012264 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111a2:	1d30      	adds	r0, r6, #4
 80111a4:	f7fe fe2b 	bl	800fdfe <uxListRemove>
				--uxCurrentNumberOfTasks;
 80111a8:	682b      	ldr	r3, [r5, #0]
 80111aa:	3b01      	subs	r3, #1
 80111ac:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80111ae:	6823      	ldr	r3, [r4, #0]
 80111b0:	3b01      	subs	r3, #1
 80111b2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80111b4:	f001 f878 	bl	80122a8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80111b8:	4630      	mov	r0, r6
 80111ba:	f7ff ffbd 	bl	8011138 <prvDeleteTCB>
 80111be:	e7dd      	b.n	801117c <prvIdleTask+0xc>
 80111c0:	24002254 	.word	0x24002254
 80111c4:	240021e4 	.word	0x240021e4
 80111c8:	240021e0 	.word	0x240021e0
 80111cc:	24001d80 	.word	0x24001d80
 80111d0:	e000ed04 	.word	0xe000ed04

080111d4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80111d4:	4a06      	ldr	r2, [pc, #24]	; (80111f0 <prvResetNextTaskUnblockTime+0x1c>)
 80111d6:	6813      	ldr	r3, [r2, #0]
 80111d8:	6819      	ldr	r1, [r3, #0]
 80111da:	4b06      	ldr	r3, [pc, #24]	; (80111f4 <prvResetNextTaskUnblockTime+0x20>)
 80111dc:	b919      	cbnz	r1, 80111e6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80111de:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80111e2:	601a      	str	r2, [r3, #0]
	}
}
 80111e4:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111e6:	6812      	ldr	r2, [r2, #0]
 80111e8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80111ea:	68d2      	ldr	r2, [r2, #12]
 80111ec:	6852      	ldr	r2, [r2, #4]
 80111ee:	e7f8      	b.n	80111e2 <prvResetNextTaskUnblockTime+0xe>
 80111f0:	24001d78 	.word	0x24001d78
 80111f4:	24002220 	.word	0x24002220

080111f8 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80111f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80111fc:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8011200:	4607      	mov	r7, r0
 8011202:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011204:	21a5      	movs	r1, #165	; 0xa5
 8011206:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8011208:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801120a:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801120e:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011212:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8011214:	f001 fd17 	bl	8012c46 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011218:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801121a:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801121c:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8011220:	b395      	cbz	r5, 8011288 <prvInitialiseNewTask.isra.2+0x90>
 8011222:	1e6b      	subs	r3, r5, #1
 8011224:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8011228:	3513      	adds	r5, #19
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801122a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801122e:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8011232:	7819      	ldrb	r1, [r3, #0]
 8011234:	b109      	cbz	r1, 801123a <prvInitialiseNewTask.isra.2+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011236:	42ab      	cmp	r3, r5
 8011238:	d1f7      	bne.n	801122a <prvInitialiseNewTask.isra.2+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801123a:	2300      	movs	r3, #0
 801123c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 8011240:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8011242:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011246:	1d20      	adds	r0, r4, #4
 8011248:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 801124a:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
 801124e:	bf28      	it	cs
 8011250:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8011252:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8011254:	6525      	str	r5, [r4, #80]	; 0x50
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011256:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801125a:	f7fe fdaa 	bl	800fdb2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801125e:	f104 0018 	add.w	r0, r4, #24
 8011262:	f7fe fda6 	bl	800fdb2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8011266:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801126a:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801126c:	4642      	mov	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801126e:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011270:	4639      	mov	r1, r7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011272:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011274:	4648      	mov	r0, r9
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011276:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801127a:	f000 ffcb 	bl	8012214 <pxPortInitialiseStack>
 801127e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8011280:	b106      	cbz	r6, 8011284 <prvInitialiseNewTask.isra.2+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011282:	6034      	str	r4, [r6, #0]
}
 8011284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011288:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 801128c:	e7d8      	b.n	8011240 <prvInitialiseNewTask.isra.2+0x48>
	...

08011290 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011292:	4b16      	ldr	r3, [pc, #88]	; (80112ec <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8011294:	4605      	mov	r5, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011296:	4e16      	ldr	r6, [pc, #88]	; (80112f0 <prvAddCurrentTaskToDelayedList+0x60>)
{
 8011298:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 801129a:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801129c:	6830      	ldr	r0, [r6, #0]
 801129e:	3004      	adds	r0, #4
 80112a0:	f7fe fdad 	bl	800fdfe <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80112a4:	1c6b      	adds	r3, r5, #1
 80112a6:	4633      	mov	r3, r6
 80112a8:	d107      	bne.n	80112ba <prvAddCurrentTaskToDelayedList+0x2a>
 80112aa:	b137      	cbz	r7, 80112ba <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112ac:	6831      	ldr	r1, [r6, #0]
 80112ae:	4811      	ldr	r0, [pc, #68]	; (80112f4 <prvAddCurrentTaskToDelayedList+0x64>)
 80112b0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80112b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112b6:	f7fe bd7f 	b.w	800fdb8 <vListInsertEnd>
 80112ba:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80112bc:	681a      	ldr	r2, [r3, #0]
 80112be:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80112c0:	d307      	bcc.n	80112d2 <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112c2:	4a0d      	ldr	r2, [pc, #52]	; (80112f8 <prvAddCurrentTaskToDelayedList+0x68>)
 80112c4:	6810      	ldr	r0, [r2, #0]
 80112c6:	6819      	ldr	r1, [r3, #0]
}
 80112c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112cc:	3104      	adds	r1, #4
 80112ce:	f7fe bd7f 	b.w	800fdd0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112d2:	4a0a      	ldr	r2, [pc, #40]	; (80112fc <prvAddCurrentTaskToDelayedList+0x6c>)
 80112d4:	6810      	ldr	r0, [r2, #0]
 80112d6:	6819      	ldr	r1, [r3, #0]
 80112d8:	3104      	adds	r1, #4
 80112da:	f7fe fd79 	bl	800fdd0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80112de:	4b08      	ldr	r3, [pc, #32]	; (8011300 <prvAddCurrentTaskToDelayedList+0x70>)
 80112e0:	681a      	ldr	r2, [r3, #0]
 80112e2:	42a2      	cmp	r2, r4
 80112e4:	d900      	bls.n	80112e8 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 80112e6:	601c      	str	r4, [r3, #0]
}
 80112e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112ea:	bf00      	nop
 80112ec:	24002268 	.word	0x24002268
 80112f0:	24001d74 	.word	0x24001d74
 80112f4:	24002240 	.word	0x24002240
 80112f8:	24001d7c 	.word	0x24001d7c
 80112fc:	24001d78 	.word	0x24001d78
 8011300:	24002220 	.word	0x24002220

08011304 <xTaskCreateStatic>:
	{
 8011304:	b570      	push	{r4, r5, r6, lr}
 8011306:	b086      	sub	sp, #24
 8011308:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 801130c:	b945      	cbnz	r5, 8011320 <xTaskCreateStatic+0x1c>
 801130e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011312:	f383 8811 	msr	BASEPRI, r3
 8011316:	f3bf 8f6f 	isb	sy
 801131a:	f3bf 8f4f 	dsb	sy
 801131e:	e7fe      	b.n	801131e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8011320:	b944      	cbnz	r4, 8011334 <xTaskCreateStatic+0x30>
 8011322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011326:	f383 8811 	msr	BASEPRI, r3
 801132a:	f3bf 8f6f 	isb	sy
 801132e:	f3bf 8f4f 	dsb	sy
 8011332:	e7fe      	b.n	8011332 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8011334:	2660      	movs	r6, #96	; 0x60
 8011336:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011338:	9e05      	ldr	r6, [sp, #20]
 801133a:	2e60      	cmp	r6, #96	; 0x60
 801133c:	d008      	beq.n	8011350 <xTaskCreateStatic+0x4c>
 801133e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011342:	f383 8811 	msr	BASEPRI, r3
 8011346:	f3bf 8f6f 	isb	sy
 801134a:	f3bf 8f4f 	dsb	sy
 801134e:	e7fe      	b.n	801134e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011350:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011352:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011354:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011356:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801135a:	ad04      	add	r5, sp, #16
 801135c:	9402      	str	r4, [sp, #8]
 801135e:	9501      	str	r5, [sp, #4]
 8011360:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011362:	9500      	str	r5, [sp, #0]
 8011364:	f7ff ff48 	bl	80111f8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011368:	4620      	mov	r0, r4
 801136a:	f7ff fe2d 	bl	8010fc8 <prvAddNewTaskToReadyList>
	}
 801136e:	9804      	ldr	r0, [sp, #16]
 8011370:	b006      	add	sp, #24
 8011372:	bd70      	pop	{r4, r5, r6, pc}

08011374 <xTaskCreate>:
	{
 8011374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011378:	4607      	mov	r7, r0
 801137a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801137c:	0090      	lsls	r0, r2, #2
	{
 801137e:	4688      	mov	r8, r1
 8011380:	4616      	mov	r6, r2
 8011382:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011384:	f001 f8dc 	bl	8012540 <pvPortMalloc>
			if( pxStack != NULL )
 8011388:	4605      	mov	r5, r0
 801138a:	b1e8      	cbz	r0, 80113c8 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801138c:	2060      	movs	r0, #96	; 0x60
 801138e:	f001 f8d7 	bl	8012540 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8011392:	4604      	mov	r4, r0
 8011394:	b1a8      	cbz	r0, 80113c2 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011396:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8011398:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801139a:	4632      	mov	r2, r6
 801139c:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801139e:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80113a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80113a4:	9002      	str	r0, [sp, #8]
 80113a6:	4638      	mov	r0, r7
 80113a8:	9301      	str	r3, [sp, #4]
 80113aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80113ac:	9300      	str	r3, [sp, #0]
 80113ae:	464b      	mov	r3, r9
 80113b0:	f7ff ff22 	bl	80111f8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80113b4:	4620      	mov	r0, r4
 80113b6:	f7ff fe07 	bl	8010fc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80113ba:	2001      	movs	r0, #1
	}
 80113bc:	b005      	add	sp, #20
 80113be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80113c2:	4628      	mov	r0, r5
 80113c4:	f001 f964 	bl	8012690 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80113c8:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80113cc:	e7f6      	b.n	80113bc <xTaskCreate+0x48>
	...

080113d0 <vTaskStartScheduler>:
{
 80113d0:	b530      	push	{r4, r5, lr}
 80113d2:	b089      	sub	sp, #36	; 0x24
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80113d4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80113d6:	aa07      	add	r2, sp, #28
 80113d8:	a906      	add	r1, sp, #24
 80113da:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80113dc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80113e0:	f7fe fcc4 	bl	800fd6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80113e4:	9b05      	ldr	r3, [sp, #20]
 80113e6:	9a07      	ldr	r2, [sp, #28]
 80113e8:	9302      	str	r3, [sp, #8]
 80113ea:	9b06      	ldr	r3, [sp, #24]
 80113ec:	4920      	ldr	r1, [pc, #128]	; (8011470 <vTaskStartScheduler+0xa0>)
 80113ee:	4821      	ldr	r0, [pc, #132]	; (8011474 <vTaskStartScheduler+0xa4>)
 80113f0:	e9cd 4300 	strd	r4, r3, [sp]
 80113f4:	4623      	mov	r3, r4
 80113f6:	f7ff ff85 	bl	8011304 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80113fa:	b360      	cbz	r0, 8011456 <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 80113fc:	f000 fd1e 	bl	8011e3c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8011400:	2801      	cmp	r0, #1
 8011402:	d12a      	bne.n	801145a <vTaskStartScheduler+0x8a>
 8011404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011408:	f383 8811 	msr	BASEPRI, r3
 801140c:	f3bf 8f6f 	isb	sy
 8011410:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8011414:	f04f 32ff 	mov.w	r2, #4294967295
 8011418:	4b17      	ldr	r3, [pc, #92]	; (8011478 <vTaskStartScheduler+0xa8>)
 801141a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801141c:	4b17      	ldr	r3, [pc, #92]	; (801147c <vTaskStartScheduler+0xac>)
 801141e:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011420:	4b17      	ldr	r3, [pc, #92]	; (8011480 <vTaskStartScheduler+0xb0>)
 8011422:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8011424:	4c17      	ldr	r4, [pc, #92]	; (8011484 <vTaskStartScheduler+0xb4>)
 8011426:	6020      	str	r0, [r4, #0]
 8011428:	f7f3 fb8e 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 801142c:	f7f3 fa58 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8011430:	4b15      	ldr	r3, [pc, #84]	; (8011488 <vTaskStartScheduler+0xb8>)
 8011432:	881b      	ldrh	r3, [r3, #0]
 8011434:	4218      	tst	r0, r3
 8011436:	d00a      	beq.n	801144e <vTaskStartScheduler+0x7e>
 8011438:	4d14      	ldr	r5, [pc, #80]	; (801148c <vTaskStartScheduler+0xbc>)
 801143a:	6828      	ldr	r0, [r5, #0]
 801143c:	f7f3 fb86 	bl	8004b4c <prvIsNewTCB>
 8011440:	b128      	cbz	r0, 801144e <vTaskStartScheduler+0x7e>
 8011442:	6829      	ldr	r1, [r5, #0]
 8011444:	2037      	movs	r0, #55	; 0x37
 8011446:	682b      	ldr	r3, [r5, #0]
 8011448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801144a:	f7f3 ffab 	bl	80053a4 <prvTraceStoreEvent2>
 801144e:	2302      	movs	r3, #2
 8011450:	6023      	str	r3, [r4, #0]
		if( xPortStartScheduler() != pdFALSE )
 8011452:	f000 ff9f 	bl	8012394 <xPortStartScheduler>
}
 8011456:	b009      	add	sp, #36	; 0x24
 8011458:	bd30      	pop	{r4, r5, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801145a:	3001      	adds	r0, #1
 801145c:	d1fb      	bne.n	8011456 <vTaskStartScheduler+0x86>
 801145e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011462:	f383 8811 	msr	BASEPRI, r3
 8011466:	f3bf 8f6f 	isb	sy
 801146a:	f3bf 8f4f 	dsb	sy
 801146e:	e7fe      	b.n	801146e <vTaskStartScheduler+0x9e>
 8011470:	080155fb 	.word	0x080155fb
 8011474:	08011171 	.word	0x08011171
 8011478:	24002220 	.word	0x24002220
 801147c:	2400223c 	.word	0x2400223c
 8011480:	24002268 	.word	0x24002268
 8011484:	2400166c 	.word	0x2400166c
 8011488:	2400000a 	.word	0x2400000a
 801148c:	24001d74 	.word	0x24001d74

08011490 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8011490:	4a02      	ldr	r2, [pc, #8]	; (801149c <vTaskSuspendAll+0xc>)
 8011492:	6813      	ldr	r3, [r2, #0]
 8011494:	3301      	adds	r3, #1
 8011496:	6013      	str	r3, [r2, #0]
}
 8011498:	4770      	bx	lr
 801149a:	bf00      	nop
 801149c:	240021ec 	.word	0x240021ec

080114a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80114a0:	4b01      	ldr	r3, [pc, #4]	; (80114a8 <xTaskGetTickCount+0x8>)
 80114a2:	6818      	ldr	r0, [r3, #0]
}
 80114a4:	4770      	bx	lr
 80114a6:	bf00      	nop
 80114a8:	24002268 	.word	0x24002268

080114ac <xTaskGetTickCountFromISR>:
{
 80114ac:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80114ae:	f000 fff5 	bl	801249c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80114b2:	4b01      	ldr	r3, [pc, #4]	; (80114b8 <xTaskGetTickCountFromISR+0xc>)
 80114b4:	6818      	ldr	r0, [r3, #0]
}
 80114b6:	bd08      	pop	{r3, pc}
 80114b8:	24002268 	.word	0x24002268

080114bc <xTaskIncrementTick>:
{
 80114bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	traceTASK_INCREMENT_TICK( xTickCount );
 80114c0:	4c49      	ldr	r4, [pc, #292]	; (80115e8 <xTaskIncrementTick+0x12c>)
 80114c2:	6823      	ldr	r3, [r4, #0]
 80114c4:	2b01      	cmp	r3, #1
 80114c6:	d002      	beq.n	80114ce <xTaskIncrementTick+0x12>
 80114c8:	4b48      	ldr	r3, [pc, #288]	; (80115ec <xTaskIncrementTick+0x130>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	b91b      	cbnz	r3, 80114d6 <xTaskIncrementTick+0x1a>
 80114ce:	4a48      	ldr	r2, [pc, #288]	; (80115f0 <xTaskIncrementTick+0x134>)
 80114d0:	6813      	ldr	r3, [r2, #0]
 80114d2:	3301      	adds	r3, #1
 80114d4:	6013      	str	r3, [r2, #0]
 80114d6:	6823      	ldr	r3, [r4, #0]
 80114d8:	b92b      	cbnz	r3, 80114e6 <xTaskIncrementTick+0x2a>
 80114da:	4b46      	ldr	r3, [pc, #280]	; (80115f4 <xTaskIncrementTick+0x138>)
 80114dc:	2031      	movs	r0, #49	; 0x31
 80114de:	6819      	ldr	r1, [r3, #0]
 80114e0:	3101      	adds	r1, #1
 80114e2:	f7f3 ff33 	bl	800534c <prvTraceStoreEvent1>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114e6:	6823      	ldr	r3, [r4, #0]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d176      	bne.n	80115da <xTaskIncrementTick+0x11e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80114ec:	4b41      	ldr	r3, [pc, #260]	; (80115f4 <xTaskIncrementTick+0x138>)
 80114ee:	681d      	ldr	r5, [r3, #0]
 80114f0:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80114f2:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80114f4:	b9bd      	cbnz	r5, 8011526 <xTaskIncrementTick+0x6a>
			taskSWITCH_DELAYED_LISTS();
 80114f6:	4b40      	ldr	r3, [pc, #256]	; (80115f8 <xTaskIncrementTick+0x13c>)
 80114f8:	681a      	ldr	r2, [r3, #0]
 80114fa:	6812      	ldr	r2, [r2, #0]
 80114fc:	b142      	cbz	r2, 8011510 <xTaskIncrementTick+0x54>
 80114fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011502:	f383 8811 	msr	BASEPRI, r3
 8011506:	f3bf 8f6f 	isb	sy
 801150a:	f3bf 8f4f 	dsb	sy
 801150e:	e7fe      	b.n	801150e <xTaskIncrementTick+0x52>
 8011510:	4a3a      	ldr	r2, [pc, #232]	; (80115fc <xTaskIncrementTick+0x140>)
 8011512:	6819      	ldr	r1, [r3, #0]
 8011514:	6810      	ldr	r0, [r2, #0]
 8011516:	6018      	str	r0, [r3, #0]
 8011518:	6011      	str	r1, [r2, #0]
 801151a:	4a39      	ldr	r2, [pc, #228]	; (8011600 <xTaskIncrementTick+0x144>)
 801151c:	6813      	ldr	r3, [r2, #0]
 801151e:	3301      	adds	r3, #1
 8011520:	6013      	str	r3, [r2, #0]
 8011522:	f7ff fe57 	bl	80111d4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011526:	4e37      	ldr	r6, [pc, #220]	; (8011604 <xTaskIncrementTick+0x148>)
BaseType_t xSwitchRequired = pdFALSE;
 8011528:	2400      	movs	r4, #0
 801152a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8011614 <xTaskIncrementTick+0x158>
		if( xConstTickCount >= xNextTaskUnblockTime )
 801152e:	6833      	ldr	r3, [r6, #0]
 8011530:	42ab      	cmp	r3, r5
 8011532:	d911      	bls.n	8011558 <xTaskIncrementTick+0x9c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011534:	f8d8 3000 	ldr.w	r3, [r8]
 8011538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801153a:	2314      	movs	r3, #20
 801153c:	4353      	muls	r3, r2
 801153e:	4a32      	ldr	r2, [pc, #200]	; (8011608 <xTaskIncrementTick+0x14c>)
 8011540:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8011542:	2b02      	cmp	r3, #2
 8011544:	bf28      	it	cs
 8011546:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8011548:	4b30      	ldr	r3, [pc, #192]	; (801160c <xTaskIncrementTick+0x150>)
 801154a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 801154c:	2b00      	cmp	r3, #0
}
 801154e:	bf0c      	ite	eq
 8011550:	4620      	moveq	r0, r4
 8011552:	2001      	movne	r0, #1
 8011554:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011558:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80115f8 <xTaskIncrementTick+0x13c>
					prvAddTaskToReadyList( pxTCB );
 801155c:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8011618 <xTaskIncrementTick+0x15c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011560:	f8da 3000 	ldr.w	r3, [sl]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	b91b      	cbnz	r3, 8011570 <xTaskIncrementTick+0xb4>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011568:	f04f 33ff 	mov.w	r3, #4294967295
 801156c:	6033      	str	r3, [r6, #0]
					break;
 801156e:	e7e1      	b.n	8011534 <xTaskIncrementTick+0x78>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011570:	f8da 3000 	ldr.w	r3, [sl]
 8011574:	68db      	ldr	r3, [r3, #12]
 8011576:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011578:	687a      	ldr	r2, [r7, #4]
					if( xConstTickCount < xItemValue )
 801157a:	4295      	cmp	r5, r2
 801157c:	d201      	bcs.n	8011582 <xTaskIncrementTick+0xc6>
						xNextTaskUnblockTime = xItemValue;
 801157e:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011580:	e7d8      	b.n	8011534 <xTaskIncrementTick+0x78>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011582:	f107 0904 	add.w	r9, r7, #4
 8011586:	4648      	mov	r0, r9
 8011588:	f7fe fc39 	bl	800fdfe <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801158c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801158e:	b11a      	cbz	r2, 8011598 <xTaskIncrementTick+0xdc>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011590:	f107 0018 	add.w	r0, r7, #24
 8011594:	f7fe fc33 	bl	800fdfe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011598:	4638      	mov	r0, r7
 801159a:	f7f3 f9a1 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 801159e:	4b1c      	ldr	r3, [pc, #112]	; (8011610 <xTaskIncrementTick+0x154>)
 80115a0:	881a      	ldrh	r2, [r3, #0]
 80115a2:	4210      	tst	r0, r2
 80115a4:	d003      	beq.n	80115ae <xTaskIncrementTick+0xf2>
 80115a6:	4639      	mov	r1, r7
 80115a8:	2030      	movs	r0, #48	; 0x30
 80115aa:	f7f3 fecf 	bl	800534c <prvTraceStoreEvent1>
 80115ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115b0:	f8db 1000 	ldr.w	r1, [fp]
 80115b4:	428a      	cmp	r2, r1
 80115b6:	d901      	bls.n	80115bc <xTaskIncrementTick+0x100>
 80115b8:	f8cb 2000 	str.w	r2, [fp]
 80115bc:	4b12      	ldr	r3, [pc, #72]	; (8011608 <xTaskIncrementTick+0x14c>)
 80115be:	2014      	movs	r0, #20
 80115c0:	4649      	mov	r1, r9
 80115c2:	fb00 3002 	mla	r0, r0, r2, r3
 80115c6:	f7fe fbf7 	bl	800fdb8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80115ca:	f8d8 1000 	ldr.w	r1, [r8]
 80115ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115d0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80115d2:	429a      	cmp	r2, r3
 80115d4:	bf28      	it	cs
 80115d6:	2401      	movcs	r4, #1
 80115d8:	e7c2      	b.n	8011560 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
 80115da:	4a04      	ldr	r2, [pc, #16]	; (80115ec <xTaskIncrementTick+0x130>)
BaseType_t xSwitchRequired = pdFALSE;
 80115dc:	2400      	movs	r4, #0
		++uxPendedTicks;
 80115de:	6813      	ldr	r3, [r2, #0]
 80115e0:	3301      	adds	r3, #1
 80115e2:	6013      	str	r3, [r2, #0]
 80115e4:	e7b0      	b.n	8011548 <xTaskIncrementTick+0x8c>
 80115e6:	bf00      	nop
 80115e8:	240021ec 	.word	0x240021ec
 80115ec:	240021e8 	.word	0x240021e8
 80115f0:	24001670 	.word	0x24001670
 80115f4:	24002268 	.word	0x24002268
 80115f8:	24001d78 	.word	0x24001d78
 80115fc:	24001d7c 	.word	0x24001d7c
 8011600:	24002224 	.word	0x24002224
 8011604:	24002220 	.word	0x24002220
 8011608:	24001d80 	.word	0x24001d80
 801160c:	2400226c 	.word	0x2400226c
 8011610:	2400000a 	.word	0x2400000a
 8011614:	24001d74 	.word	0x24001d74
 8011618:	240021f4 	.word	0x240021f4

0801161c <xTaskResumeAll>:
{
 801161c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8011620:	4c35      	ldr	r4, [pc, #212]	; (80116f8 <xTaskResumeAll+0xdc>)
 8011622:	6823      	ldr	r3, [r4, #0]
 8011624:	b943      	cbnz	r3, 8011638 <xTaskResumeAll+0x1c>
 8011626:	f04f 0350 	mov.w	r3, #80	; 0x50
 801162a:	f383 8811 	msr	BASEPRI, r3
 801162e:	f3bf 8f6f 	isb	sy
 8011632:	f3bf 8f4f 	dsb	sy
 8011636:	e7fe      	b.n	8011636 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8011638:	f000 fe14 	bl	8012264 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801163c:	6823      	ldr	r3, [r4, #0]
 801163e:	3b01      	subs	r3, #1
 8011640:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011642:	6824      	ldr	r4, [r4, #0]
 8011644:	b12c      	cbz	r4, 8011652 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8011646:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8011648:	f000 fe2e 	bl	80122a8 <vPortExitCritical>
}
 801164c:	4620      	mov	r0, r4
 801164e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011652:	4b2a      	ldr	r3, [pc, #168]	; (80116fc <xTaskResumeAll+0xe0>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d0f5      	beq.n	8011646 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801165a:	4d29      	ldr	r5, [pc, #164]	; (8011700 <xTaskResumeAll+0xe4>)
					prvAddTaskToReadyList( pxTCB );
 801165c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 801171c <xTaskResumeAll+0x100>
 8011660:	4e28      	ldr	r6, [pc, #160]	; (8011704 <xTaskResumeAll+0xe8>)
 8011662:	e029      	b.n	80116b8 <xTaskResumeAll+0x9c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011664:	68eb      	ldr	r3, [r5, #12]
 8011666:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011668:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801166a:	f104 0018 	add.w	r0, r4, #24
 801166e:	f7fe fbc6 	bl	800fdfe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011672:	4638      	mov	r0, r7
 8011674:	f7fe fbc3 	bl	800fdfe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011678:	4620      	mov	r0, r4
 801167a:	f7f3 f931 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 801167e:	f8b8 3000 	ldrh.w	r3, [r8]
 8011682:	4218      	tst	r0, r3
 8011684:	d003      	beq.n	801168e <xTaskResumeAll+0x72>
 8011686:	4621      	mov	r1, r4
 8011688:	2030      	movs	r0, #48	; 0x30
 801168a:	f7f3 fe5f 	bl	800534c <prvTraceStoreEvent1>
 801168e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011690:	6832      	ldr	r2, [r6, #0]
 8011692:	4293      	cmp	r3, r2
 8011694:	d900      	bls.n	8011698 <xTaskResumeAll+0x7c>
 8011696:	6033      	str	r3, [r6, #0]
 8011698:	4a1b      	ldr	r2, [pc, #108]	; (8011708 <xTaskResumeAll+0xec>)
 801169a:	2014      	movs	r0, #20
 801169c:	4639      	mov	r1, r7
 801169e:	fb00 2003 	mla	r0, r0, r3, r2
 80116a2:	f7fe fb89 	bl	800fdb8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80116a6:	4b19      	ldr	r3, [pc, #100]	; (801170c <xTaskResumeAll+0xf0>)
 80116a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d302      	bcc.n	80116b8 <xTaskResumeAll+0x9c>
						xYieldPending = pdTRUE;
 80116b2:	4b17      	ldr	r3, [pc, #92]	; (8011710 <xTaskResumeAll+0xf4>)
 80116b4:	2201      	movs	r2, #1
 80116b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80116b8:	682b      	ldr	r3, [r5, #0]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d1d2      	bne.n	8011664 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80116be:	b10c      	cbz	r4, 80116c4 <xTaskResumeAll+0xa8>
					prvResetNextTaskUnblockTime();
 80116c0:	f7ff fd88 	bl	80111d4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80116c4:	4d13      	ldr	r5, [pc, #76]	; (8011714 <xTaskResumeAll+0xf8>)
 80116c6:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80116c8:	b144      	cbz	r4, 80116dc <xTaskResumeAll+0xc0>
								xYieldPending = pdTRUE;
 80116ca:	4e11      	ldr	r6, [pc, #68]	; (8011710 <xTaskResumeAll+0xf4>)
 80116cc:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80116ce:	f7ff fef5 	bl	80114bc <xTaskIncrementTick>
 80116d2:	b100      	cbz	r0, 80116d6 <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 80116d4:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80116d6:	3c01      	subs	r4, #1
 80116d8:	d1f9      	bne.n	80116ce <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 80116da:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80116dc:	4b0c      	ldr	r3, [pc, #48]	; (8011710 <xTaskResumeAll+0xf4>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d0b0      	beq.n	8011646 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80116e4:	4b0c      	ldr	r3, [pc, #48]	; (8011718 <xTaskResumeAll+0xfc>)
 80116e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116ea:	601a      	str	r2, [r3, #0]
 80116ec:	f3bf 8f4f 	dsb	sy
 80116f0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80116f4:	2401      	movs	r4, #1
 80116f6:	e7a7      	b.n	8011648 <xTaskResumeAll+0x2c>
 80116f8:	240021ec 	.word	0x240021ec
 80116fc:	240021e0 	.word	0x240021e0
 8011700:	24002228 	.word	0x24002228
 8011704:	240021f4 	.word	0x240021f4
 8011708:	24001d80 	.word	0x24001d80
 801170c:	24001d74 	.word	0x24001d74
 8011710:	2400226c 	.word	0x2400226c
 8011714:	240021e8 	.word	0x240021e8
 8011718:	e000ed04 	.word	0xe000ed04
 801171c:	2400000a 	.word	0x2400000a

08011720 <vTaskDelayUntil>:
	{
 8011720:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 8011722:	b940      	cbnz	r0, 8011736 <vTaskDelayUntil+0x16>
 8011724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011728:	f383 8811 	msr	BASEPRI, r3
 801172c:	f3bf 8f6f 	isb	sy
 8011730:	f3bf 8f4f 	dsb	sy
 8011734:	e7fe      	b.n	8011734 <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 8011736:	b941      	cbnz	r1, 801174a <vTaskDelayUntil+0x2a>
 8011738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801173c:	f383 8811 	msr	BASEPRI, r3
 8011740:	f3bf 8f6f 	isb	sy
 8011744:	f3bf 8f4f 	dsb	sy
 8011748:	e7fe      	b.n	8011748 <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 801174a:	4b1c      	ldr	r3, [pc, #112]	; (80117bc <vTaskDelayUntil+0x9c>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	b143      	cbz	r3, 8011762 <vTaskDelayUntil+0x42>
 8011750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011754:	f383 8811 	msr	BASEPRI, r3
 8011758:	f3bf 8f6f 	isb	sy
 801175c:	f3bf 8f4f 	dsb	sy
 8011760:	e7fe      	b.n	8011760 <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 8011762:	f7ff fe95 	bl	8011490 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8011766:	4b16      	ldr	r3, [pc, #88]	; (80117c0 <vTaskDelayUntil+0xa0>)
 8011768:	681d      	ldr	r5, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801176a:	6803      	ldr	r3, [r0, #0]
 801176c:	185c      	adds	r4, r3, r1
 801176e:	bf2c      	ite	cs
 8011770:	2201      	movcs	r2, #1
 8011772:	2200      	movcc	r2, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8011774:	42ab      	cmp	r3, r5
			*pxPreviousWakeTime = xTimeToWake;
 8011776:	6004      	str	r4, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 8011778:	d90c      	bls.n	8011794 <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801177a:	b962      	cbnz	r2, 8011796 <vTaskDelayUntil+0x76>
		xAlreadyYielded = xTaskResumeAll();
 801177c:	f7ff ff4e 	bl	801161c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8011780:	b938      	cbnz	r0, 8011792 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
 8011782:	4b10      	ldr	r3, [pc, #64]	; (80117c4 <vTaskDelayUntil+0xa4>)
 8011784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011788:	601a      	str	r2, [r3, #0]
 801178a:	f3bf 8f4f 	dsb	sy
 801178e:	f3bf 8f6f 	isb	sy
	}
 8011792:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8011794:	b90a      	cbnz	r2, 801179a <vTaskDelayUntil+0x7a>
 8011796:	42a5      	cmp	r5, r4
 8011798:	d2f0      	bcs.n	801177c <vTaskDelayUntil+0x5c>
				traceTASK_DELAY_UNTIL( xTimeToWake );
 801179a:	f7f3 f9d5 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 801179e:	f7f3 f89f 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 80117a2:	4b09      	ldr	r3, [pc, #36]	; (80117c8 <vTaskDelayUntil+0xa8>)
 80117a4:	881b      	ldrh	r3, [r3, #0]
 80117a6:	4218      	tst	r0, r3
 80117a8:	d003      	beq.n	80117b2 <vTaskDelayUntil+0x92>
 80117aa:	4621      	mov	r1, r4
 80117ac:	2079      	movs	r0, #121	; 0x79
 80117ae:	f7f3 fdcd 	bl	800534c <prvTraceStoreEvent1>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80117b2:	2100      	movs	r1, #0
 80117b4:	1b60      	subs	r0, r4, r5
 80117b6:	f7ff fd6b 	bl	8011290 <prvAddCurrentTaskToDelayedList>
 80117ba:	e7df      	b.n	801177c <vTaskDelayUntil+0x5c>
 80117bc:	240021ec 	.word	0x240021ec
 80117c0:	24002268 	.word	0x24002268
 80117c4:	e000ed04 	.word	0xe000ed04
 80117c8:	2400000a 	.word	0x2400000a

080117cc <vTaskDelay>:
	{
 80117cc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80117ce:	4604      	mov	r4, r0
 80117d0:	b940      	cbnz	r0, 80117e4 <vTaskDelay+0x18>
			portYIELD_WITHIN_API();
 80117d2:	4b16      	ldr	r3, [pc, #88]	; (801182c <vTaskDelay+0x60>)
 80117d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117d8:	601a      	str	r2, [r3, #0]
 80117da:	f3bf 8f4f 	dsb	sy
 80117de:	f3bf 8f6f 	isb	sy
	}
 80117e2:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80117e4:	4b12      	ldr	r3, [pc, #72]	; (8011830 <vTaskDelay+0x64>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	b143      	cbz	r3, 80117fc <vTaskDelay+0x30>
 80117ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ee:	f383 8811 	msr	BASEPRI, r3
 80117f2:	f3bf 8f6f 	isb	sy
 80117f6:	f3bf 8f4f 	dsb	sy
 80117fa:	e7fe      	b.n	80117fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80117fc:	f7ff fe48 	bl	8011490 <vTaskSuspendAll>
				traceTASK_DELAY();
 8011800:	f7f3 f9a2 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 8011804:	f7f3 f86c 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8011808:	4b0a      	ldr	r3, [pc, #40]	; (8011834 <vTaskDelay+0x68>)
 801180a:	881b      	ldrh	r3, [r3, #0]
 801180c:	4218      	tst	r0, r3
 801180e:	d003      	beq.n	8011818 <vTaskDelay+0x4c>
 8011810:	4621      	mov	r1, r4
 8011812:	207a      	movs	r0, #122	; 0x7a
 8011814:	f7f3 fd9a 	bl	800534c <prvTraceStoreEvent1>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011818:	2100      	movs	r1, #0
 801181a:	4620      	mov	r0, r4
 801181c:	f7ff fd38 	bl	8011290 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8011820:	f7ff fefc 	bl	801161c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8011824:	2800      	cmp	r0, #0
 8011826:	d0d4      	beq.n	80117d2 <vTaskDelay+0x6>
 8011828:	e7db      	b.n	80117e2 <vTaskDelay+0x16>
 801182a:	bf00      	nop
 801182c:	e000ed04 	.word	0xe000ed04
 8011830:	240021ec 	.word	0x240021ec
 8011834:	2400000a 	.word	0x2400000a

08011838 <vTaskSwitchContext>:
{
 8011838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801183a:	4b24      	ldr	r3, [pc, #144]	; (80118cc <vTaskSwitchContext+0x94>)
 801183c:	681a      	ldr	r2, [r3, #0]
 801183e:	4b24      	ldr	r3, [pc, #144]	; (80118d0 <vTaskSwitchContext+0x98>)
 8011840:	b112      	cbz	r2, 8011848 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8011842:	2201      	movs	r2, #1
 8011844:	601a      	str	r2, [r3, #0]
}
 8011846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8011848:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801184a:	2714      	movs	r7, #20
 801184c:	4e21      	ldr	r6, [pc, #132]	; (80118d4 <vTaskSwitchContext+0x9c>)
 801184e:	4a22      	ldr	r2, [pc, #136]	; (80118d8 <vTaskSwitchContext+0xa0>)
 8011850:	6833      	ldr	r3, [r6, #0]
 8011852:	4615      	mov	r5, r2
 8011854:	fb07 f103 	mul.w	r1, r7, r3
 8011858:	5854      	ldr	r4, [r2, r1]
 801185a:	1850      	adds	r0, r2, r1
 801185c:	b34c      	cbz	r4, 80118b2 <vTaskSwitchContext+0x7a>
 801185e:	6844      	ldr	r4, [r0, #4]
 8011860:	3108      	adds	r1, #8
 8011862:	6864      	ldr	r4, [r4, #4]
 8011864:	440a      	add	r2, r1
 8011866:	4294      	cmp	r4, r2
 8011868:	6044      	str	r4, [r0, #4]
 801186a:	bf08      	it	eq
 801186c:	6862      	ldreq	r2, [r4, #4]
		traceTASK_SWITCHED_IN();
 801186e:	4c1b      	ldr	r4, [pc, #108]	; (80118dc <vTaskSwitchContext+0xa4>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011870:	bf08      	it	eq
 8011872:	6042      	streq	r2, [r0, #4]
 8011874:	2214      	movs	r2, #20
 8011876:	fb02 5203 	mla	r2, r2, r3, r5
 801187a:	4d19      	ldr	r5, [pc, #100]	; (80118e0 <vTaskSwitchContext+0xa8>)
 801187c:	6852      	ldr	r2, [r2, #4]
 801187e:	68d2      	ldr	r2, [r2, #12]
 8011880:	602a      	str	r2, [r5, #0]
 8011882:	6033      	str	r3, [r6, #0]
		traceTASK_SWITCHED_IN();
 8011884:	2301      	movs	r3, #1
 8011886:	6023      	str	r3, [r4, #0]
 8011888:	f7f3 f95e 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 801188c:	f7f3 f828 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8011890:	4b14      	ldr	r3, [pc, #80]	; (80118e4 <vTaskSwitchContext+0xac>)
 8011892:	881b      	ldrh	r3, [r3, #0]
 8011894:	4218      	tst	r0, r3
 8011896:	d009      	beq.n	80118ac <vTaskSwitchContext+0x74>
 8011898:	6828      	ldr	r0, [r5, #0]
 801189a:	f7f3 f957 	bl	8004b4c <prvIsNewTCB>
 801189e:	b128      	cbz	r0, 80118ac <vTaskSwitchContext+0x74>
 80118a0:	6829      	ldr	r1, [r5, #0]
 80118a2:	2037      	movs	r0, #55	; 0x37
 80118a4:	682b      	ldr	r3, [r5, #0]
 80118a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118a8:	f7f3 fd7c 	bl	80053a4 <prvTraceStoreEvent2>
 80118ac:	2302      	movs	r3, #2
 80118ae:	6023      	str	r3, [r4, #0]
}
 80118b0:	e7c9      	b.n	8011846 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118b2:	b943      	cbnz	r3, 80118c6 <vTaskSwitchContext+0x8e>
 80118b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118b8:	f383 8811 	msr	BASEPRI, r3
 80118bc:	f3bf 8f6f 	isb	sy
 80118c0:	f3bf 8f4f 	dsb	sy
 80118c4:	e7fe      	b.n	80118c4 <vTaskSwitchContext+0x8c>
 80118c6:	3b01      	subs	r3, #1
 80118c8:	e7c4      	b.n	8011854 <vTaskSwitchContext+0x1c>
 80118ca:	bf00      	nop
 80118cc:	240021ec 	.word	0x240021ec
 80118d0:	2400226c 	.word	0x2400226c
 80118d4:	240021f4 	.word	0x240021f4
 80118d8:	24001d80 	.word	0x24001d80
 80118dc:	2400166c 	.word	0x2400166c
 80118e0:	24001d74 	.word	0x24001d74
 80118e4:	2400000a 	.word	0x2400000a

080118e8 <vTaskPlaceOnEventList>:
{
 80118e8:	b510      	push	{r4, lr}
 80118ea:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80118ec:	b940      	cbnz	r0, 8011900 <vTaskPlaceOnEventList+0x18>
 80118ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f2:	f383 8811 	msr	BASEPRI, r3
 80118f6:	f3bf 8f6f 	isb	sy
 80118fa:	f3bf 8f4f 	dsb	sy
 80118fe:	e7fe      	b.n	80118fe <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011900:	4b05      	ldr	r3, [pc, #20]	; (8011918 <vTaskPlaceOnEventList+0x30>)
 8011902:	6819      	ldr	r1, [r3, #0]
 8011904:	3118      	adds	r1, #24
 8011906:	f7fe fa63 	bl	800fdd0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801190a:	4620      	mov	r0, r4
 801190c:	2101      	movs	r1, #1
}
 801190e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011912:	f7ff bcbd 	b.w	8011290 <prvAddCurrentTaskToDelayedList>
 8011916:	bf00      	nop
 8011918:	24001d74 	.word	0x24001d74

0801191c <vTaskPlaceOnEventListRestricted>:
	{
 801191c:	b538      	push	{r3, r4, r5, lr}
 801191e:	460c      	mov	r4, r1
 8011920:	4615      	mov	r5, r2
		configASSERT( pxEventList );
 8011922:	b940      	cbnz	r0, 8011936 <vTaskPlaceOnEventListRestricted+0x1a>
 8011924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011928:	f383 8811 	msr	BASEPRI, r3
 801192c:	f3bf 8f6f 	isb	sy
 8011930:	f3bf 8f4f 	dsb	sy
 8011934:	e7fe      	b.n	8011934 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011936:	4b0e      	ldr	r3, [pc, #56]	; (8011970 <vTaskPlaceOnEventListRestricted+0x54>)
 8011938:	6819      	ldr	r1, [r3, #0]
 801193a:	3118      	adds	r1, #24
 801193c:	f7fe fa3c 	bl	800fdb8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8011940:	2d00      	cmp	r5, #0
 8011942:	bf18      	it	ne
 8011944:	f04f 34ff 	movne.w	r4, #4294967295
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8011948:	f7f3 f8fe 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 801194c:	f7f2 ffc8 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8011950:	4b08      	ldr	r3, [pc, #32]	; (8011974 <vTaskPlaceOnEventListRestricted+0x58>)
 8011952:	881b      	ldrh	r3, [r3, #0]
 8011954:	4218      	tst	r0, r3
 8011956:	d005      	beq.n	8011964 <vTaskPlaceOnEventListRestricted+0x48>
 8011958:	4b07      	ldr	r3, [pc, #28]	; (8011978 <vTaskPlaceOnEventListRestricted+0x5c>)
 801195a:	2079      	movs	r0, #121	; 0x79
 801195c:	6819      	ldr	r1, [r3, #0]
 801195e:	4421      	add	r1, r4
 8011960:	f7f3 fcf4 	bl	800534c <prvTraceStoreEvent1>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011964:	4629      	mov	r1, r5
 8011966:	4620      	mov	r0, r4
	}
 8011968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801196c:	f7ff bc90 	b.w	8011290 <prvAddCurrentTaskToDelayedList>
 8011970:	24001d74 	.word	0x24001d74
 8011974:	2400000a 	.word	0x2400000a
 8011978:	24002268 	.word	0x24002268

0801197c <xTaskRemoveFromEventList>:
{
 801197c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801197e:	68c3      	ldr	r3, [r0, #12]
 8011980:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8011982:	b944      	cbnz	r4, 8011996 <xTaskRemoveFromEventList+0x1a>
 8011984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011988:	f383 8811 	msr	BASEPRI, r3
 801198c:	f3bf 8f6f 	isb	sy
 8011990:	f3bf 8f4f 	dsb	sy
 8011994:	e7fe      	b.n	8011994 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011996:	f104 0518 	add.w	r5, r4, #24
 801199a:	4628      	mov	r0, r5
 801199c:	f7fe fa2f 	bl	800fdfe <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119a0:	4b16      	ldr	r3, [pc, #88]	; (80119fc <xTaskRemoveFromEventList+0x80>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	bb2b      	cbnz	r3, 80119f2 <xTaskRemoveFromEventList+0x76>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80119a6:	1d25      	adds	r5, r4, #4
 80119a8:	4628      	mov	r0, r5
 80119aa:	f7fe fa28 	bl	800fdfe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80119ae:	4620      	mov	r0, r4
 80119b0:	f7f2 ff96 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 80119b4:	4b12      	ldr	r3, [pc, #72]	; (8011a00 <xTaskRemoveFromEventList+0x84>)
 80119b6:	881b      	ldrh	r3, [r3, #0]
 80119b8:	4218      	tst	r0, r3
 80119ba:	d003      	beq.n	80119c4 <xTaskRemoveFromEventList+0x48>
 80119bc:	4621      	mov	r1, r4
 80119be:	2030      	movs	r0, #48	; 0x30
 80119c0:	f7f3 fcc4 	bl	800534c <prvTraceStoreEvent1>
 80119c4:	4a0f      	ldr	r2, [pc, #60]	; (8011a04 <xTaskRemoveFromEventList+0x88>)
 80119c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80119c8:	6811      	ldr	r1, [r2, #0]
 80119ca:	428b      	cmp	r3, r1
 80119cc:	d900      	bls.n	80119d0 <xTaskRemoveFromEventList+0x54>
 80119ce:	6013      	str	r3, [r2, #0]
 80119d0:	4a0d      	ldr	r2, [pc, #52]	; (8011a08 <xTaskRemoveFromEventList+0x8c>)
 80119d2:	2014      	movs	r0, #20
 80119d4:	4629      	mov	r1, r5
 80119d6:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80119da:	f7fe f9ed 	bl	800fdb8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80119de:	4b0b      	ldr	r3, [pc, #44]	; (8011a0c <xTaskRemoveFromEventList+0x90>)
 80119e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119e6:	429a      	cmp	r2, r3
 80119e8:	d906      	bls.n	80119f8 <xTaskRemoveFromEventList+0x7c>
		xYieldPending = pdTRUE;
 80119ea:	2001      	movs	r0, #1
 80119ec:	4b08      	ldr	r3, [pc, #32]	; (8011a10 <xTaskRemoveFromEventList+0x94>)
 80119ee:	6018      	str	r0, [r3, #0]
}
 80119f0:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80119f2:	4629      	mov	r1, r5
 80119f4:	4807      	ldr	r0, [pc, #28]	; (8011a14 <xTaskRemoveFromEventList+0x98>)
 80119f6:	e7f0      	b.n	80119da <xTaskRemoveFromEventList+0x5e>
		xReturn = pdFALSE;
 80119f8:	2000      	movs	r0, #0
	return xReturn;
 80119fa:	e7f9      	b.n	80119f0 <xTaskRemoveFromEventList+0x74>
 80119fc:	240021ec 	.word	0x240021ec
 8011a00:	2400000a 	.word	0x2400000a
 8011a04:	240021f4 	.word	0x240021f4
 8011a08:	24001d80 	.word	0x24001d80
 8011a0c:	24001d74 	.word	0x24001d74
 8011a10:	2400226c 	.word	0x2400226c
 8011a14:	24002228 	.word	0x24002228

08011a18 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011a18:	4b03      	ldr	r3, [pc, #12]	; (8011a28 <vTaskInternalSetTimeOutState+0x10>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011a1e:	4b03      	ldr	r3, [pc, #12]	; (8011a2c <vTaskInternalSetTimeOutState+0x14>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	6043      	str	r3, [r0, #4]
}
 8011a24:	4770      	bx	lr
 8011a26:	bf00      	nop
 8011a28:	24002224 	.word	0x24002224
 8011a2c:	24002268 	.word	0x24002268

08011a30 <xTaskCheckForTimeOut>:
{
 8011a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a32:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8011a34:	4605      	mov	r5, r0
 8011a36:	b940      	cbnz	r0, 8011a4a <xTaskCheckForTimeOut+0x1a>
 8011a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a3c:	f383 8811 	msr	BASEPRI, r3
 8011a40:	f3bf 8f6f 	isb	sy
 8011a44:	f3bf 8f4f 	dsb	sy
 8011a48:	e7fe      	b.n	8011a48 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8011a4a:	b941      	cbnz	r1, 8011a5e <xTaskCheckForTimeOut+0x2e>
 8011a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a50:	f383 8811 	msr	BASEPRI, r3
 8011a54:	f3bf 8f6f 	isb	sy
 8011a58:	f3bf 8f4f 	dsb	sy
 8011a5c:	e7fe      	b.n	8011a5c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8011a5e:	f000 fc01 	bl	8012264 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8011a62:	4b0f      	ldr	r3, [pc, #60]	; (8011aa0 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011a64:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8011a66:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8011a68:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011a6a:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8011a6c:	1c5e      	adds	r6, r3, #1
 8011a6e:	d00d      	beq.n	8011a8c <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011a70:	4e0c      	ldr	r6, [pc, #48]	; (8011aa4 <xTaskCheckForTimeOut+0x74>)
 8011a72:	682f      	ldr	r7, [r5, #0]
 8011a74:	6836      	ldr	r6, [r6, #0]
 8011a76:	42b7      	cmp	r7, r6
 8011a78:	d001      	beq.n	8011a7e <xTaskCheckForTimeOut+0x4e>
 8011a7a:	4288      	cmp	r0, r1
 8011a7c:	d90d      	bls.n	8011a9a <xTaskCheckForTimeOut+0x6a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011a7e:	4293      	cmp	r3, r2
 8011a80:	d909      	bls.n	8011a96 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8011a82:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011a84:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8011a86:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011a88:	f7ff ffc6 	bl	8011a18 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8011a8c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8011a8e:	f000 fc0b 	bl	80122a8 <vPortExitCritical>
}
 8011a92:	4620      	mov	r0, r4
 8011a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8011a96:	2300      	movs	r3, #0
 8011a98:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8011a9a:	2401      	movs	r4, #1
 8011a9c:	e7f7      	b.n	8011a8e <xTaskCheckForTimeOut+0x5e>
 8011a9e:	bf00      	nop
 8011aa0:	24002268 	.word	0x24002268
 8011aa4:	24002224 	.word	0x24002224

08011aa8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8011aa8:	4b01      	ldr	r3, [pc, #4]	; (8011ab0 <vTaskMissedYield+0x8>)
 8011aaa:	2201      	movs	r2, #1
 8011aac:	601a      	str	r2, [r3, #0]
}
 8011aae:	4770      	bx	lr
 8011ab0:	2400226c 	.word	0x2400226c

08011ab4 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
 8011ab4:	b100      	cbz	r0, 8011ab8 <uxTaskGetTaskNumber+0x4>
			uxReturn = pxTCB->uxTaskNumber;
 8011ab6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
 8011ab8:	4770      	bx	lr

08011aba <vTaskSetTaskNumber>:
		if( xTask != NULL )
 8011aba:	b100      	cbz	r0, 8011abe <vTaskSetTaskNumber+0x4>
			pxTCB->uxTaskNumber = uxHandle;
 8011abc:	64c1      	str	r1, [r0, #76]	; 0x4c
	}
 8011abe:	4770      	bx	lr

08011ac0 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 8011ac0:	b908      	cbnz	r0, 8011ac6 <uxTaskGetStackHighWaterMark+0x6>
 8011ac2:	4b06      	ldr	r3, [pc, #24]	; (8011adc <uxTaskGetStackHighWaterMark+0x1c>)
 8011ac4:	6818      	ldr	r0, [r3, #0]
 8011ac6:	6b02      	ldr	r2, [r0, #48]	; 0x30
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8011ac8:	4613      	mov	r3, r2
 8011aca:	1a98      	subs	r0, r3, r2
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8011acc:	f813 1b01 	ldrb.w	r1, [r3], #1
 8011ad0:	29a5      	cmp	r1, #165	; 0xa5
 8011ad2:	d0fa      	beq.n	8011aca <uxTaskGetStackHighWaterMark+0xa>
	}
 8011ad4:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8011ad8:	4770      	bx	lr
 8011ada:	bf00      	nop
 8011adc:	24001d74 	.word	0x24001d74

08011ae0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8011ae0:	4b01      	ldr	r3, [pc, #4]	; (8011ae8 <xTaskGetCurrentTaskHandle+0x8>)
 8011ae2:	6818      	ldr	r0, [r3, #0]
	}
 8011ae4:	4770      	bx	lr
 8011ae6:	bf00      	nop
 8011ae8:	24001d74 	.word	0x24001d74

08011aec <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8011aec:	4b05      	ldr	r3, [pc, #20]	; (8011b04 <xTaskGetSchedulerState+0x18>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	b133      	cbz	r3, 8011b00 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011af2:	4b05      	ldr	r3, [pc, #20]	; (8011b08 <xTaskGetSchedulerState+0x1c>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8011af8:	bf0c      	ite	eq
 8011afa:	2002      	moveq	r0, #2
 8011afc:	2000      	movne	r0, #0
 8011afe:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011b00:	2001      	movs	r0, #1
	}
 8011b02:	4770      	bx	lr
 8011b04:	2400223c 	.word	0x2400223c
 8011b08:	240021ec 	.word	0x240021ec

08011b0c <xTaskPriorityInherit>:
	{
 8011b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8011b10:	4604      	mov	r4, r0
 8011b12:	2800      	cmp	r0, #0
 8011b14:	d03e      	beq.n	8011b94 <xTaskPriorityInherit+0x88>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011b16:	4a2d      	ldr	r2, [pc, #180]	; (8011bcc <xTaskPriorityInherit+0xc0>)
 8011b18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011b1a:	6811      	ldr	r1, [r2, #0]
 8011b1c:	4615      	mov	r5, r2
 8011b1e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8011b20:	428b      	cmp	r3, r1
 8011b22:	d24b      	bcs.n	8011bbc <xTaskPriorityInherit+0xb0>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b24:	6982      	ldr	r2, [r0, #24]
 8011b26:	2a00      	cmp	r2, #0
 8011b28:	db04      	blt.n	8011b34 <xTaskPriorityInherit+0x28>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b2a:	682a      	ldr	r2, [r5, #0]
 8011b2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011b2e:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8011b32:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011b34:	2214      	movs	r2, #20
 8011b36:	4f26      	ldr	r7, [pc, #152]	; (8011bd0 <xTaskPriorityInherit+0xc4>)
 8011b38:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8011bd8 <xTaskPriorityInherit+0xcc>
 8011b3c:	fb02 7303 	mla	r3, r2, r3, r7
 8011b40:	6962      	ldr	r2, [r4, #20]
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d128      	bne.n	8011b98 <xTaskPriorityInherit+0x8c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b46:	1d26      	adds	r6, r4, #4
 8011b48:	4630      	mov	r0, r6
 8011b4a:	f7fe f958 	bl	800fdfe <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011b4e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011b50:	4620      	mov	r0, r4
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b54:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011b56:	f7f2 fec3 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8011b5a:	f8b8 3000 	ldrh.w	r3, [r8]
 8011b5e:	4218      	tst	r0, r3
 8011b60:	d003      	beq.n	8011b6a <xTaskPriorityInherit+0x5e>
 8011b62:	4621      	mov	r1, r4
 8011b64:	2030      	movs	r0, #48	; 0x30
 8011b66:	f7f3 fbf1 	bl	800534c <prvTraceStoreEvent1>
 8011b6a:	4a1a      	ldr	r2, [pc, #104]	; (8011bd4 <xTaskPriorityInherit+0xc8>)
 8011b6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011b6e:	6811      	ldr	r1, [r2, #0]
 8011b70:	428b      	cmp	r3, r1
 8011b72:	d900      	bls.n	8011b76 <xTaskPriorityInherit+0x6a>
 8011b74:	6013      	str	r3, [r2, #0]
 8011b76:	2014      	movs	r0, #20
 8011b78:	4631      	mov	r1, r6
 8011b7a:	fb00 7003 	mla	r0, r0, r3, r7
 8011b7e:	f7fe f91b 	bl	800fdb8 <vListInsertEnd>
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8011b82:	f7f2 ffe1 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 8011b86:	f7f2 feab 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8011b8a:	f8b8 3000 	ldrh.w	r3, [r8]
 8011b8e:	4218      	tst	r0, r3
 8011b90:	d106      	bne.n	8011ba0 <xTaskPriorityInherit+0x94>
				xReturn = pdTRUE;
 8011b92:	2001      	movs	r0, #1
	}
 8011b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011b98:	682b      	ldr	r3, [r5, #0]
 8011b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b9e:	e7f0      	b.n	8011b82 <xTaskPriorityInherit+0x76>
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	f7f2 fe9d 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8011ba6:	f8b8 3000 	ldrh.w	r3, [r8]
 8011baa:	4218      	tst	r0, r3
 8011bac:	d0f1      	beq.n	8011b92 <xTaskPriorityInherit+0x86>
 8011bae:	682b      	ldr	r3, [r5, #0]
 8011bb0:	4621      	mov	r1, r4
 8011bb2:	2005      	movs	r0, #5
 8011bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bb6:	f7f3 fbf5 	bl	80053a4 <prvTraceStoreEvent2>
 8011bba:	e7ea      	b.n	8011b92 <xTaskPriorityInherit+0x86>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011bbc:	6813      	ldr	r3, [r2, #0]
 8011bbe:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8011bc0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8011bc2:	42a0      	cmp	r0, r4
 8011bc4:	bf2c      	ite	cs
 8011bc6:	2000      	movcs	r0, #0
 8011bc8:	2001      	movcc	r0, #1
 8011bca:	e7e3      	b.n	8011b94 <xTaskPriorityInherit+0x88>
 8011bcc:	24001d74 	.word	0x24001d74
 8011bd0:	24001d80 	.word	0x24001d80
 8011bd4:	240021f4 	.word	0x240021f4
 8011bd8:	2400000a 	.word	0x2400000a

08011bdc <xTaskPriorityDisinherit>:
	{
 8011bdc:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8011bde:	4604      	mov	r4, r0
 8011be0:	b908      	cbnz	r0, 8011be6 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8011be2:	2000      	movs	r0, #0
	}
 8011be4:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8011be6:	4b2a      	ldr	r3, [pc, #168]	; (8011c90 <xTaskPriorityDisinherit+0xb4>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	4283      	cmp	r3, r0
 8011bec:	d008      	beq.n	8011c00 <xTaskPriorityDisinherit+0x24>
 8011bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf2:	f383 8811 	msr	BASEPRI, r3
 8011bf6:	f3bf 8f6f 	isb	sy
 8011bfa:	f3bf 8f4f 	dsb	sy
 8011bfe:	e7fe      	b.n	8011bfe <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8011c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c02:	b943      	cbnz	r3, 8011c16 <xTaskPriorityDisinherit+0x3a>
 8011c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c08:	f383 8811 	msr	BASEPRI, r3
 8011c0c:	f3bf 8f6f 	isb	sy
 8011c10:	f3bf 8f4f 	dsb	sy
 8011c14:	e7fe      	b.n	8011c14 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011c16:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8011c18:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011c1a:	6d02      	ldr	r2, [r0, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 8011c1c:	6543      	str	r3, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011c1e:	4291      	cmp	r1, r2
 8011c20:	d0df      	beq.n	8011be2 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d1dd      	bne.n	8011be2 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c26:	1d06      	adds	r6, r0, #4
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8011c28:	4d1a      	ldr	r5, [pc, #104]	; (8011c94 <xTaskPriorityDisinherit+0xb8>)
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c2a:	4630      	mov	r0, r6
 8011c2c:	f7fe f8e7 	bl	800fdfe <uxListRemove>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8011c30:	f7f2 ff8a 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 8011c34:	f7f2 fe54 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8011c38:	882b      	ldrh	r3, [r5, #0]
 8011c3a:	4218      	tst	r0, r3
 8011c3c:	d00a      	beq.n	8011c54 <xTaskPriorityDisinherit+0x78>
 8011c3e:	4620      	mov	r0, r4
 8011c40:	f7f2 fe4e 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8011c44:	882b      	ldrh	r3, [r5, #0]
 8011c46:	4218      	tst	r0, r3
 8011c48:	d004      	beq.n	8011c54 <xTaskPriorityDisinherit+0x78>
 8011c4a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011c4c:	4621      	mov	r1, r4
 8011c4e:	2006      	movs	r0, #6
 8011c50:	f7f3 fba8 	bl	80053a4 <prvTraceStoreEvent2>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011c54:	6d23      	ldr	r3, [r4, #80]	; 0x50
					prvAddTaskToReadyList( pxTCB );
 8011c56:	4620      	mov	r0, r4
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011c58:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c5a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011c5e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8011c60:	f7f2 fe3e 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8011c64:	882b      	ldrh	r3, [r5, #0]
 8011c66:	4218      	tst	r0, r3
 8011c68:	d003      	beq.n	8011c72 <xTaskPriorityDisinherit+0x96>
 8011c6a:	4621      	mov	r1, r4
 8011c6c:	2030      	movs	r0, #48	; 0x30
 8011c6e:	f7f3 fb6d 	bl	800534c <prvTraceStoreEvent1>
 8011c72:	4a09      	ldr	r2, [pc, #36]	; (8011c98 <xTaskPriorityDisinherit+0xbc>)
 8011c74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011c76:	6811      	ldr	r1, [r2, #0]
 8011c78:	428b      	cmp	r3, r1
 8011c7a:	d900      	bls.n	8011c7e <xTaskPriorityDisinherit+0xa2>
 8011c7c:	6013      	str	r3, [r2, #0]
 8011c7e:	4a07      	ldr	r2, [pc, #28]	; (8011c9c <xTaskPriorityDisinherit+0xc0>)
 8011c80:	2014      	movs	r0, #20
 8011c82:	4631      	mov	r1, r6
 8011c84:	fb00 2003 	mla	r0, r0, r3, r2
 8011c88:	f7fe f896 	bl	800fdb8 <vListInsertEnd>
					xReturn = pdTRUE;
 8011c8c:	2001      	movs	r0, #1
		return xReturn;
 8011c8e:	e7a9      	b.n	8011be4 <xTaskPriorityDisinherit+0x8>
 8011c90:	24001d74 	.word	0x24001d74
 8011c94:	2400000a 	.word	0x2400000a
 8011c98:	240021f4 	.word	0x240021f4
 8011c9c:	24001d80 	.word	0x24001d80

08011ca0 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8011ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8011ca2:	4604      	mov	r4, r0
 8011ca4:	2800      	cmp	r0, #0
 8011ca6:	d061      	beq.n	8011d6c <vTaskPriorityDisinheritAfterTimeout+0xcc>
			configASSERT( pxTCB->uxMutexesHeld );
 8011ca8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8011caa:	b943      	cbnz	r3, 8011cbe <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8011cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cb0:	f383 8811 	msr	BASEPRI, r3
 8011cb4:	f3bf 8f6f 	isb	sy
 8011cb8:	f3bf 8f4f 	dsb	sy
 8011cbc:	e7fe      	b.n	8011cbc <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8011cbe:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8011cc0:	4291      	cmp	r1, r2
 8011cc2:	bf38      	it	cc
 8011cc4:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011cc6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8011cc8:	428a      	cmp	r2, r1
 8011cca:	460d      	mov	r5, r1
 8011ccc:	d04e      	beq.n	8011d6c <vTaskPriorityDisinheritAfterTimeout+0xcc>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011cce:	2b01      	cmp	r3, #1
 8011cd0:	d14c      	bne.n	8011d6c <vTaskPriorityDisinheritAfterTimeout+0xcc>
					configASSERT( pxTCB != pxCurrentTCB );
 8011cd2:	4b27      	ldr	r3, [pc, #156]	; (8011d70 <vTaskPriorityDisinheritAfterTimeout+0xd0>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	4283      	cmp	r3, r0
 8011cd8:	d108      	bne.n	8011cec <vTaskPriorityDisinheritAfterTimeout+0x4c>
 8011cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cde:	f383 8811 	msr	BASEPRI, r3
 8011ce2:	f3bf 8f6f 	isb	sy
 8011ce6:	f3bf 8f4f 	dsb	sy
 8011cea:	e7fe      	b.n	8011cea <vTaskPriorityDisinheritAfterTimeout+0x4a>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8011cec:	4e21      	ldr	r6, [pc, #132]	; (8011d74 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8011cee:	f7f2 ff2b 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 8011cf2:	f7f2 fdf5 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8011cf6:	8833      	ldrh	r3, [r6, #0]
 8011cf8:	4218      	tst	r0, r3
 8011cfa:	d00a      	beq.n	8011d12 <vTaskPriorityDisinheritAfterTimeout+0x72>
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	f7f2 fdef 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8011d02:	8833      	ldrh	r3, [r6, #0]
 8011d04:	4218      	tst	r0, r3
 8011d06:	d004      	beq.n	8011d12 <vTaskPriorityDisinheritAfterTimeout+0x72>
 8011d08:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011d0a:	4621      	mov	r1, r4
 8011d0c:	2006      	movs	r0, #6
 8011d0e:	f7f3 fb49 	bl	80053a4 <prvTraceStoreEvent2>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011d12:	69a2      	ldr	r2, [r4, #24]
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011d14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011d16:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011d18:	4f17      	ldr	r7, [pc, #92]	; (8011d78 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8011d1a:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8011d1e:	62e5      	str	r5, [r4, #44]	; 0x2c
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d20:	bfa8      	it	ge
 8011d22:	f1c5 0538 	rsbge	r5, r5, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011d26:	fb02 7303 	mla	r3, r2, r3, r7
 8011d2a:	6962      	ldr	r2, [r4, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d2c:	bfa8      	it	ge
 8011d2e:	61a5      	strge	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011d30:	429a      	cmp	r2, r3
 8011d32:	d11b      	bne.n	8011d6c <vTaskPriorityDisinheritAfterTimeout+0xcc>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d34:	1d25      	adds	r5, r4, #4
 8011d36:	4628      	mov	r0, r5
 8011d38:	f7fe f861 	bl	800fdfe <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8011d3c:	4620      	mov	r0, r4
 8011d3e:	f7f2 fdcf 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8011d42:	8833      	ldrh	r3, [r6, #0]
 8011d44:	4218      	tst	r0, r3
 8011d46:	d003      	beq.n	8011d50 <vTaskPriorityDisinheritAfterTimeout+0xb0>
 8011d48:	4621      	mov	r1, r4
 8011d4a:	2030      	movs	r0, #48	; 0x30
 8011d4c:	f7f3 fafe 	bl	800534c <prvTraceStoreEvent1>
 8011d50:	4a0a      	ldr	r2, [pc, #40]	; (8011d7c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8011d52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011d54:	6811      	ldr	r1, [r2, #0]
 8011d56:	428b      	cmp	r3, r1
 8011d58:	d900      	bls.n	8011d5c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8011d5a:	6013      	str	r3, [r2, #0]
 8011d5c:	2014      	movs	r0, #20
 8011d5e:	4629      	mov	r1, r5
 8011d60:	fb00 7003 	mla	r0, r0, r3, r7
	}
 8011d64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8011d68:	f7fe b826 	b.w	800fdb8 <vListInsertEnd>
	}
 8011d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d6e:	bf00      	nop
 8011d70:	24001d74 	.word	0x24001d74
 8011d74:	2400000a 	.word	0x2400000a
 8011d78:	24001d80 	.word	0x24001d80
 8011d7c:	240021f4 	.word	0x240021f4

08011d80 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8011d80:	4b04      	ldr	r3, [pc, #16]	; (8011d94 <pvTaskIncrementMutexHeldCount+0x14>)
 8011d82:	681a      	ldr	r2, [r3, #0]
 8011d84:	b11a      	cbz	r2, 8011d8e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8011d86:	6819      	ldr	r1, [r3, #0]
 8011d88:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8011d8a:	3201      	adds	r2, #1
 8011d8c:	654a      	str	r2, [r1, #84]	; 0x54
		return pxCurrentTCB;
 8011d8e:	6818      	ldr	r0, [r3, #0]
	}
 8011d90:	4770      	bx	lr
 8011d92:	bf00      	nop
 8011d94:	24001d74 	.word	0x24001d74

08011d98 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8011d9a:	4c11      	ldr	r4, [pc, #68]	; (8011de0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8011d9c:	f000 fa62 	bl	8012264 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8011da0:	6825      	ldr	r5, [r4, #0]
 8011da2:	b9bd      	cbnz	r5, 8011dd4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8011da4:	4f0f      	ldr	r7, [pc, #60]	; (8011de4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8011da6:	4e10      	ldr	r6, [pc, #64]	; (8011de8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8011da8:	4638      	mov	r0, r7
 8011daa:	f7fd fff7 	bl	800fd9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011dae:	4630      	mov	r0, r6
 8011db0:	f7fd fff4 	bl	800fd9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011db4:	4b0d      	ldr	r3, [pc, #52]	; (8011dec <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011db6:	4a0e      	ldr	r2, [pc, #56]	; (8011df0 <prvCheckForValidListAndQueue+0x58>)
 8011db8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8011dba:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011dbc:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8011dbe:	4b0d      	ldr	r3, [pc, #52]	; (8011df4 <prvCheckForValidListAndQueue+0x5c>)
 8011dc0:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011dc2:	9500      	str	r5, [sp, #0]
 8011dc4:	4b0c      	ldr	r3, [pc, #48]	; (8011df8 <prvCheckForValidListAndQueue+0x60>)
 8011dc6:	f7fe f93b 	bl	8010040 <xQueueGenericCreateStatic>
 8011dca:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011dcc:	b110      	cbz	r0, 8011dd4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011dce:	490b      	ldr	r1, [pc, #44]	; (8011dfc <prvCheckForValidListAndQueue+0x64>)
 8011dd0:	f7ff f860 	bl	8010e94 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8011dd4:	b003      	add	sp, #12
 8011dd6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8011dda:	f000 ba65 	b.w	80122a8 <vPortExitCritical>
 8011dde:	bf00      	nop
 8011de0:	24002394 	.word	0x24002394
 8011de4:	24002318 	.word	0x24002318
 8011de8:	2400232c 	.word	0x2400232c
 8011dec:	24002270 	.word	0x24002270
 8011df0:	24002278 	.word	0x24002278
 8011df4:	24002274 	.word	0x24002274
 8011df8:	24002344 	.word	0x24002344
 8011dfc:	08015600 	.word	0x08015600

08011e00 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8011e00:	4291      	cmp	r1, r2
{
 8011e02:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011e04:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011e06:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8011e08:	d80a      	bhi.n	8011e20 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e0a:	1ad2      	subs	r2, r2, r3
 8011e0c:	6983      	ldr	r3, [r0, #24]
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d20d      	bcs.n	8011e2e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011e12:	1d01      	adds	r1, r0, #4
 8011e14:	4b07      	ldr	r3, [pc, #28]	; (8011e34 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011e16:	6818      	ldr	r0, [r3, #0]
 8011e18:	f7fd ffda 	bl	800fdd0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8011e1c:	2000      	movs	r0, #0
}
 8011e1e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011e20:	429a      	cmp	r2, r3
 8011e22:	d201      	bcs.n	8011e28 <prvInsertTimerInActiveList+0x28>
 8011e24:	4299      	cmp	r1, r3
 8011e26:	d202      	bcs.n	8011e2e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011e28:	1d01      	adds	r1, r0, #4
 8011e2a:	4b03      	ldr	r3, [pc, #12]	; (8011e38 <prvInsertTimerInActiveList+0x38>)
 8011e2c:	e7f3      	b.n	8011e16 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8011e2e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8011e30:	e7f5      	b.n	8011e1e <prvInsertTimerInActiveList+0x1e>
 8011e32:	bf00      	nop
 8011e34:	24002274 	.word	0x24002274
 8011e38:	24002270 	.word	0x24002270

08011e3c <xTimerCreateTimerTask>:
{
 8011e3c:	b510      	push	{r4, lr}
 8011e3e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8011e40:	f7ff ffaa 	bl	8011d98 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8011e44:	4b12      	ldr	r3, [pc, #72]	; (8011e90 <xTimerCreateTimerTask+0x54>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	b1b3      	cbz	r3, 8011e78 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011e4a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011e4c:	aa07      	add	r2, sp, #28
 8011e4e:	a906      	add	r1, sp, #24
 8011e50:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011e52:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011e56:	f7fd ff95 	bl	800fd84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011e5a:	9b05      	ldr	r3, [sp, #20]
 8011e5c:	9a07      	ldr	r2, [sp, #28]
 8011e5e:	9302      	str	r3, [sp, #8]
 8011e60:	9b06      	ldr	r3, [sp, #24]
 8011e62:	490c      	ldr	r1, [pc, #48]	; (8011e94 <xTimerCreateTimerTask+0x58>)
 8011e64:	9301      	str	r3, [sp, #4]
 8011e66:	2302      	movs	r3, #2
 8011e68:	480b      	ldr	r0, [pc, #44]	; (8011e98 <xTimerCreateTimerTask+0x5c>)
 8011e6a:	9300      	str	r3, [sp, #0]
 8011e6c:	4623      	mov	r3, r4
 8011e6e:	f7ff fa49 	bl	8011304 <xTaskCreateStatic>
 8011e72:	4b0a      	ldr	r3, [pc, #40]	; (8011e9c <xTimerCreateTimerTask+0x60>)
 8011e74:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8011e76:	b940      	cbnz	r0, 8011e8a <xTimerCreateTimerTask+0x4e>
 8011e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e7c:	f383 8811 	msr	BASEPRI, r3
 8011e80:	f3bf 8f6f 	isb	sy
 8011e84:	f3bf 8f4f 	dsb	sy
 8011e88:	e7fe      	b.n	8011e88 <xTimerCreateTimerTask+0x4c>
}
 8011e8a:	2001      	movs	r0, #1
 8011e8c:	b008      	add	sp, #32
 8011e8e:	bd10      	pop	{r4, pc}
 8011e90:	24002394 	.word	0x24002394
 8011e94:	08015605 	.word	0x08015605
 8011e98:	08011f79 	.word	0x08011f79
 8011e9c:	24002398 	.word	0x24002398

08011ea0 <xTimerGenericCommand>:
{
 8011ea0:	b530      	push	{r4, r5, lr}
 8011ea2:	4615      	mov	r5, r2
 8011ea4:	b085      	sub	sp, #20
 8011ea6:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	b940      	cbnz	r0, 8011ebe <xTimerGenericCommand+0x1e>
 8011eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eb0:	f383 8811 	msr	BASEPRI, r3
 8011eb4:	f3bf 8f6f 	isb	sy
 8011eb8:	f3bf 8f4f 	dsb	sy
 8011ebc:	e7fe      	b.n	8011ebc <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8011ebe:	4c0d      	ldr	r4, [pc, #52]	; (8011ef4 <xTimerGenericCommand+0x54>)
 8011ec0:	6820      	ldr	r0, [r4, #0]
 8011ec2:	b178      	cbz	r0, 8011ee4 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011ec4:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011ec6:	9302      	str	r3, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011ec8:	e9cd 1500 	strd	r1, r5, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011ecc:	dc0c      	bgt.n	8011ee8 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011ece:	f7ff fe0d 	bl	8011aec <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011ed2:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011ed4:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011ed6:	4669      	mov	r1, sp
 8011ed8:	6820      	ldr	r0, [r4, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011eda:	bf0c      	ite	eq
 8011edc:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011ede:	461a      	movne	r2, r3
 8011ee0:	f7fe f9d6 	bl	8010290 <xQueueGenericSend>
}
 8011ee4:	b005      	add	sp, #20
 8011ee6:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011ee8:	2300      	movs	r3, #0
 8011eea:	4669      	mov	r1, sp
 8011eec:	f7fe fb4c 	bl	8010588 <xQueueGenericSendFromISR>
 8011ef0:	e7f8      	b.n	8011ee4 <xTimerGenericCommand+0x44>
 8011ef2:	bf00      	nop
 8011ef4:	24002394 	.word	0x24002394

08011ef8 <prvSwitchTimerLists>:
{
 8011ef8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011efc:	4d1c      	ldr	r5, [pc, #112]	; (8011f70 <prvSwitchTimerLists+0x78>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011efe:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011f02:	682b      	ldr	r3, [r5, #0]
 8011f04:	681a      	ldr	r2, [r3, #0]
 8011f06:	b932      	cbnz	r2, 8011f16 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8011f08:	4a1a      	ldr	r2, [pc, #104]	; (8011f74 <prvSwitchTimerLists+0x7c>)
 8011f0a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011f0c:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8011f0e:	6029      	str	r1, [r5, #0]
}
 8011f10:	b002      	add	sp, #8
 8011f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011f16:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f18:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011f1a:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011f1c:	1d27      	adds	r7, r4, #4
 8011f1e:	4638      	mov	r0, r7
 8011f20:	f7fd ff6d 	bl	800fdfe <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011f24:	6a23      	ldr	r3, [r4, #32]
 8011f26:	4620      	mov	r0, r4
 8011f28:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011f2a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011f2e:	075b      	lsls	r3, r3, #29
 8011f30:	d5e7      	bpl.n	8011f02 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011f32:	69a3      	ldr	r3, [r4, #24]
 8011f34:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8011f36:	429e      	cmp	r6, r3
 8011f38:	d206      	bcs.n	8011f48 <prvSwitchTimerLists+0x50>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011f3a:	6063      	str	r3, [r4, #4]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011f3c:	4639      	mov	r1, r7
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011f3e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011f40:	6828      	ldr	r0, [r5, #0]
 8011f42:	f7fd ff45 	bl	800fdd0 <vListInsert>
 8011f46:	e7dc      	b.n	8011f02 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011f48:	2300      	movs	r3, #0
 8011f4a:	f8cd 8000 	str.w	r8, [sp]
 8011f4e:	4632      	mov	r2, r6
 8011f50:	4620      	mov	r0, r4
 8011f52:	4619      	mov	r1, r3
 8011f54:	f7ff ffa4 	bl	8011ea0 <xTimerGenericCommand>
				configASSERT( xResult );
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	d1d2      	bne.n	8011f02 <prvSwitchTimerLists+0xa>
 8011f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f60:	f383 8811 	msr	BASEPRI, r3
 8011f64:	f3bf 8f6f 	isb	sy
 8011f68:	f3bf 8f4f 	dsb	sy
 8011f6c:	e7fe      	b.n	8011f6c <prvSwitchTimerLists+0x74>
 8011f6e:	bf00      	nop
 8011f70:	24002270 	.word	0x24002270
 8011f74:	24002274 	.word	0x24002274

08011f78 <prvTimerTask>:
{
 8011f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011f7c:	4d81      	ldr	r5, [pc, #516]	; (8012184 <prvTimerTask+0x20c>)
{
 8011f7e:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 8011f80:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8012190 <prvTimerTask+0x218>
 8011f84:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011f86:	682a      	ldr	r2, [r5, #0]
 8011f88:	6813      	ldr	r3, [r2, #0]
 8011f8a:	b353      	cbz	r3, 8011fe2 <prvTimerTask+0x6a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011f8c:	68d3      	ldr	r3, [r2, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011f8e:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011f90:	f8d3 9000 	ldr.w	r9, [r3]
	if( xTimeNow < xLastTime )
 8011f94:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8012194 <prvTimerTask+0x21c>
	vTaskSuspendAll();
 8011f98:	f7ff fa7a 	bl	8011490 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8011f9c:	f7ff fa80 	bl	80114a0 <xTaskGetTickCount>
 8011fa0:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8011fa2:	f8db 3000 	ldr.w	r3, [fp]
 8011fa6:	465e      	mov	r6, fp
 8011fa8:	4298      	cmp	r0, r3
 8011faa:	d31d      	bcc.n	8011fe8 <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 8011fac:	f8cb 0000 	str.w	r0, [fp]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011fb0:	b32c      	cbz	r4, 8011ffe <prvTimerTask+0x86>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011fb2:	4b75      	ldr	r3, [pc, #468]	; (8012188 <prvTimerTask+0x210>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	681a      	ldr	r2, [r3, #0]
 8011fb8:	fab2 f282 	clz	r2, r2
 8011fbc:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011fbe:	4b73      	ldr	r3, [pc, #460]	; (801218c <prvTimerTask+0x214>)
 8011fc0:	eba9 010a 	sub.w	r1, r9, sl
 8011fc4:	6818      	ldr	r0, [r3, #0]
 8011fc6:	f7fe ffdb 	bl	8010f80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011fca:	f7ff fb27 	bl	801161c <xTaskResumeAll>
 8011fce:	b988      	cbnz	r0, 8011ff4 <prvTimerTask+0x7c>
					portYIELD_WITHIN_API();
 8011fd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011fd4:	f8c8 3000 	str.w	r3, [r8]
 8011fd8:	f3bf 8f4f 	dsb	sy
 8011fdc:	f3bf 8f6f 	isb	sy
 8011fe0:	e008      	b.n	8011ff4 <prvTimerTask+0x7c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011fe2:	2401      	movs	r4, #1
		xNextExpireTime = ( TickType_t ) 0U;
 8011fe4:	4699      	mov	r9, r3
 8011fe6:	e7d5      	b.n	8011f94 <prvTimerTask+0x1c>
		prvSwitchTimerLists();
 8011fe8:	f7ff ff86 	bl	8011ef8 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8011fec:	f8cb a000 	str.w	sl, [fp]
			( void ) xTaskResumeAll();
 8011ff0:	f7ff fb14 	bl	801161c <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011ff4:	f8df 9194 	ldr.w	r9, [pc, #404]	; 801218c <prvTimerTask+0x214>
 8011ff8:	f04f 0a00 	mov.w	sl, #0
 8011ffc:	e07d      	b.n	80120fa <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011ffe:	4581      	cmp	r9, r0
 8012000:	d830      	bhi.n	8012064 <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 8012002:	f7ff fb0b 	bl	801161c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	68db      	ldr	r3, [r3, #12]
 801200a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801200e:	f10b 0004 	add.w	r0, fp, #4
 8012012:	f7fd fef4 	bl	800fdfe <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012016:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
 801201a:	0758      	lsls	r0, r3, #29
 801201c:	d519      	bpl.n	8012052 <prvTimerTask+0xda>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801201e:	f8db 1018 	ldr.w	r1, [fp, #24]
 8012022:	464b      	mov	r3, r9
 8012024:	4652      	mov	r2, sl
 8012026:	4658      	mov	r0, fp
 8012028:	4449      	add	r1, r9
 801202a:	f7ff fee9 	bl	8011e00 <prvInsertTimerInActiveList>
 801202e:	b1a0      	cbz	r0, 801205a <prvTimerTask+0xe2>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012030:	9400      	str	r4, [sp, #0]
 8012032:	4623      	mov	r3, r4
 8012034:	464a      	mov	r2, r9
 8012036:	4621      	mov	r1, r4
 8012038:	4658      	mov	r0, fp
 801203a:	f7ff ff31 	bl	8011ea0 <xTimerGenericCommand>
			configASSERT( xResult );
 801203e:	b960      	cbnz	r0, 801205a <prvTimerTask+0xe2>
 8012040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012044:	f383 8811 	msr	BASEPRI, r3
 8012048:	f3bf 8f6f 	isb	sy
 801204c:	f3bf 8f4f 	dsb	sy
 8012050:	e7fe      	b.n	8012050 <prvTimerTask+0xd8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012052:	f023 0301 	bic.w	r3, r3, #1
 8012056:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801205a:	f8db 3020 	ldr.w	r3, [fp, #32]
 801205e:	4658      	mov	r0, fp
 8012060:	4798      	blx	r3
 8012062:	e7c7      	b.n	8011ff4 <prvTimerTask+0x7c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012064:	4622      	mov	r2, r4
 8012066:	e7aa      	b.n	8011fbe <prvTimerTask+0x46>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012068:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801206c:	465a      	mov	r2, fp
 801206e:	69a1      	ldr	r1, [r4, #24]
 8012070:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012072:	f043 0301 	orr.w	r3, r3, #1
 8012076:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801207a:	9b03      	ldr	r3, [sp, #12]
 801207c:	4419      	add	r1, r3
 801207e:	f7ff febf 	bl	8011e00 <prvInsertTimerInActiveList>
 8012082:	2800      	cmp	r0, #0
 8012084:	d039      	beq.n	80120fa <prvTimerTask+0x182>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012086:	6a23      	ldr	r3, [r4, #32]
 8012088:	4620      	mov	r0, r4
 801208a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801208c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012090:	0759      	lsls	r1, r3, #29
 8012092:	d532      	bpl.n	80120fa <prvTimerTask+0x182>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012094:	69a2      	ldr	r2, [r4, #24]
 8012096:	2300      	movs	r3, #0
 8012098:	9903      	ldr	r1, [sp, #12]
 801209a:	4620      	mov	r0, r4
 801209c:	f8cd a000 	str.w	sl, [sp]
 80120a0:	440a      	add	r2, r1
 80120a2:	4619      	mov	r1, r3
 80120a4:	f7ff fefc 	bl	8011ea0 <xTimerGenericCommand>
							configASSERT( xResult );
 80120a8:	bb38      	cbnz	r0, 80120fa <prvTimerTask+0x182>
 80120aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ae:	f383 8811 	msr	BASEPRI, r3
 80120b2:	f3bf 8f6f 	isb	sy
 80120b6:	f3bf 8f4f 	dsb	sy
 80120ba:	e7fe      	b.n	80120ba <prvTimerTask+0x142>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80120bc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80120c0:	f023 0301 	bic.w	r3, r3, #1
 80120c4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80120c8:	e017      	b.n	80120fa <prvTimerTask+0x182>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80120ca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80120ce:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80120d0:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80120d4:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80120d6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80120da:	b941      	cbnz	r1, 80120ee <prvTimerTask+0x176>
 80120dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e0:	f383 8811 	msr	BASEPRI, r3
 80120e4:	f3bf 8f6f 	isb	sy
 80120e8:	f3bf 8f4f 	dsb	sy
 80120ec:	e7fe      	b.n	80120ec <prvTimerTask+0x174>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80120ee:	465b      	mov	r3, fp
 80120f0:	465a      	mov	r2, fp
 80120f2:	4459      	add	r1, fp
 80120f4:	4620      	mov	r0, r4
 80120f6:	f7ff fe83 	bl	8011e00 <prvInsertTimerInActiveList>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80120fa:	2200      	movs	r2, #0
 80120fc:	a902      	add	r1, sp, #8
 80120fe:	f8d9 0000 	ldr.w	r0, [r9]
 8012102:	f7fe fb73 	bl	80107ec <xQueueReceive>
 8012106:	2800      	cmp	r0, #0
 8012108:	f43f af3d 	beq.w	8011f86 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801210c:	9b02      	ldr	r3, [sp, #8]
 801210e:	2b00      	cmp	r3, #0
 8012110:	da03      	bge.n	801211a <prvTimerTask+0x1a2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012112:	9b03      	ldr	r3, [sp, #12]
 8012114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012118:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801211a:	9b02      	ldr	r3, [sp, #8]
 801211c:	2b00      	cmp	r3, #0
 801211e:	dbec      	blt.n	80120fa <prvTimerTask+0x182>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012120:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012122:	6963      	ldr	r3, [r4, #20]
 8012124:	b113      	cbz	r3, 801212c <prvTimerTask+0x1b4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012126:	1d20      	adds	r0, r4, #4
 8012128:	f7fd fe69 	bl	800fdfe <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 801212c:	f7ff f9b8 	bl	80114a0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8012130:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8012132:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8012134:	4298      	cmp	r0, r3
 8012136:	d201      	bcs.n	801213c <prvTimerTask+0x1c4>
		prvSwitchTimerLists();
 8012138:	f7ff fede 	bl	8011ef8 <prvSwitchTimerLists>
			switch( xMessage.xMessageID )
 801213c:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 801213e:	f8c6 b000 	str.w	fp, [r6]
			switch( xMessage.xMessageID )
 8012142:	2b09      	cmp	r3, #9
 8012144:	d8d9      	bhi.n	80120fa <prvTimerTask+0x182>
 8012146:	a201      	add	r2, pc, #4	; (adr r2, 801214c <prvTimerTask+0x1d4>)
 8012148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801214c:	08012069 	.word	0x08012069
 8012150:	08012069 	.word	0x08012069
 8012154:	08012069 	.word	0x08012069
 8012158:	080120bd 	.word	0x080120bd
 801215c:	080120cb 	.word	0x080120cb
 8012160:	08012175 	.word	0x08012175
 8012164:	08012069 	.word	0x08012069
 8012168:	08012069 	.word	0x08012069
 801216c:	080120bd 	.word	0x080120bd
 8012170:	080120cb 	.word	0x080120cb
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012174:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012178:	079a      	lsls	r2, r3, #30
 801217a:	d4a1      	bmi.n	80120c0 <prvTimerTask+0x148>
							vPortFree( pxTimer );
 801217c:	4620      	mov	r0, r4
 801217e:	f000 fa87 	bl	8012690 <vPortFree>
 8012182:	e7ba      	b.n	80120fa <prvTimerTask+0x182>
 8012184:	24002270 	.word	0x24002270
 8012188:	24002274 	.word	0x24002274
 801218c:	24002394 	.word	0x24002394
 8012190:	e000ed04 	.word	0xe000ed04
 8012194:	24002340 	.word	0x24002340

08012198 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 8012198:	2300      	movs	r3, #0
{
 801219a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801219c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801219e:	4b0d      	ldr	r3, [pc, #52]	; (80121d4 <prvTaskExitError+0x3c>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	3301      	adds	r3, #1
 80121a4:	d008      	beq.n	80121b8 <prvTaskExitError+0x20>
 80121a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121aa:	f383 8811 	msr	BASEPRI, r3
 80121ae:	f3bf 8f6f 	isb	sy
 80121b2:	f3bf 8f4f 	dsb	sy
 80121b6:	e7fe      	b.n	80121b6 <prvTaskExitError+0x1e>
 80121b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121bc:	f383 8811 	msr	BASEPRI, r3
 80121c0:	f3bf 8f6f 	isb	sy
 80121c4:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80121c8:	9b01      	ldr	r3, [sp, #4]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d0fc      	beq.n	80121c8 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80121ce:	b002      	add	sp, #8
 80121d0:	4770      	bx	lr
 80121d2:	bf00      	nop
 80121d4:	2400013c 	.word	0x2400013c

080121d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80121d8:	4808      	ldr	r0, [pc, #32]	; (80121fc <prvPortStartFirstTask+0x24>)
 80121da:	6800      	ldr	r0, [r0, #0]
 80121dc:	6800      	ldr	r0, [r0, #0]
 80121de:	f380 8808 	msr	MSP, r0
 80121e2:	f04f 0000 	mov.w	r0, #0
 80121e6:	f380 8814 	msr	CONTROL, r0
 80121ea:	b662      	cpsie	i
 80121ec:	b661      	cpsie	f
 80121ee:	f3bf 8f4f 	dsb	sy
 80121f2:	f3bf 8f6f 	isb	sy
 80121f6:	df00      	svc	0
 80121f8:	bf00      	nop
 80121fa:	0000      	.short	0x0000
 80121fc:	e000ed08 	.word	0xe000ed08

08012200 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012200:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012210 <vPortEnableVFP+0x10>
 8012204:	6801      	ldr	r1, [r0, #0]
 8012206:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801220a:	6001      	str	r1, [r0, #0]
 801220c:	4770      	bx	lr
 801220e:	0000      	.short	0x0000
 8012210:	e000ed88 	.word	0xe000ed88

08012214 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012214:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012218:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801221c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8012220:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012222:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012224:	4b03      	ldr	r3, [pc, #12]	; (8012234 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012226:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012228:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801222a:	f06f 0302 	mvn.w	r3, #2
 801222e:	6203      	str	r3, [r0, #32]
}
 8012230:	4770      	bx	lr
 8012232:	bf00      	nop
 8012234:	08012199 	.word	0x08012199
	...

08012240 <SVC_Handler>:
	__asm volatile (
 8012240:	4b07      	ldr	r3, [pc, #28]	; (8012260 <pxCurrentTCBConst2>)
 8012242:	6819      	ldr	r1, [r3, #0]
 8012244:	6808      	ldr	r0, [r1, #0]
 8012246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801224a:	f380 8809 	msr	PSP, r0
 801224e:	f3bf 8f6f 	isb	sy
 8012252:	f04f 0000 	mov.w	r0, #0
 8012256:	f380 8811 	msr	BASEPRI, r0
 801225a:	4770      	bx	lr
 801225c:	f3af 8000 	nop.w

08012260 <pxCurrentTCBConst2>:
 8012260:	24001d74 	.word	0x24001d74

08012264 <vPortEnterCritical>:
 8012264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012268:	f383 8811 	msr	BASEPRI, r3
 801226c:	f3bf 8f6f 	isb	sy
 8012270:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8012274:	4a0a      	ldr	r2, [pc, #40]	; (80122a0 <vPortEnterCritical+0x3c>)
 8012276:	6813      	ldr	r3, [r2, #0]
 8012278:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801227a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 801227c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801227e:	d10d      	bne.n	801229c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012280:	4b08      	ldr	r3, [pc, #32]	; (80122a4 <vPortEnterCritical+0x40>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012288:	d008      	beq.n	801229c <vPortEnterCritical+0x38>
 801228a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801228e:	f383 8811 	msr	BASEPRI, r3
 8012292:	f3bf 8f6f 	isb	sy
 8012296:	f3bf 8f4f 	dsb	sy
 801229a:	e7fe      	b.n	801229a <vPortEnterCritical+0x36>
}
 801229c:	4770      	bx	lr
 801229e:	bf00      	nop
 80122a0:	2400013c 	.word	0x2400013c
 80122a4:	e000ed04 	.word	0xe000ed04

080122a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80122a8:	4a08      	ldr	r2, [pc, #32]	; (80122cc <vPortExitCritical+0x24>)
 80122aa:	6813      	ldr	r3, [r2, #0]
 80122ac:	b943      	cbnz	r3, 80122c0 <vPortExitCritical+0x18>
 80122ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122b2:	f383 8811 	msr	BASEPRI, r3
 80122b6:	f3bf 8f6f 	isb	sy
 80122ba:	f3bf 8f4f 	dsb	sy
 80122be:	e7fe      	b.n	80122be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80122c0:	3b01      	subs	r3, #1
 80122c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80122c4:	b90b      	cbnz	r3, 80122ca <vPortExitCritical+0x22>
	__asm volatile
 80122c6:	f383 8811 	msr	BASEPRI, r3
}
 80122ca:	4770      	bx	lr
 80122cc:	2400013c 	.word	0x2400013c

080122d0 <PendSV_Handler>:
	__asm volatile
 80122d0:	f3ef 8009 	mrs	r0, PSP
 80122d4:	f3bf 8f6f 	isb	sy
 80122d8:	4b15      	ldr	r3, [pc, #84]	; (8012330 <pxCurrentTCBConst>)
 80122da:	681a      	ldr	r2, [r3, #0]
 80122dc:	f01e 0f10 	tst.w	lr, #16
 80122e0:	bf08      	it	eq
 80122e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80122e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122ea:	6010      	str	r0, [r2, #0]
 80122ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80122f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80122f4:	f380 8811 	msr	BASEPRI, r0
 80122f8:	f3bf 8f4f 	dsb	sy
 80122fc:	f3bf 8f6f 	isb	sy
 8012300:	f7ff fa9a 	bl	8011838 <vTaskSwitchContext>
 8012304:	f04f 0000 	mov.w	r0, #0
 8012308:	f380 8811 	msr	BASEPRI, r0
 801230c:	bc09      	pop	{r0, r3}
 801230e:	6819      	ldr	r1, [r3, #0]
 8012310:	6808      	ldr	r0, [r1, #0]
 8012312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012316:	f01e 0f10 	tst.w	lr, #16
 801231a:	bf08      	it	eq
 801231c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012320:	f380 8809 	msr	PSP, r0
 8012324:	f3bf 8f6f 	isb	sy
 8012328:	4770      	bx	lr
 801232a:	bf00      	nop
 801232c:	f3af 8000 	nop.w

08012330 <pxCurrentTCBConst>:
 8012330:	24001d74 	.word	0x24001d74

08012334 <xPortSysTickHandler>:
{
 8012334:	b508      	push	{r3, lr}
	__asm volatile
 8012336:	f04f 0350 	mov.w	r3, #80	; 0x50
 801233a:	f383 8811 	msr	BASEPRI, r3
 801233e:	f3bf 8f6f 	isb	sy
 8012342:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8012346:	f7ff f8b9 	bl	80114bc <xTaskIncrementTick>
 801234a:	b118      	cbz	r0, 8012354 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801234c:	4b03      	ldr	r3, [pc, #12]	; (801235c <xPortSysTickHandler+0x28>)
 801234e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012352:	601a      	str	r2, [r3, #0]
	__asm volatile
 8012354:	2300      	movs	r3, #0
 8012356:	f383 8811 	msr	BASEPRI, r3
}
 801235a:	bd08      	pop	{r3, pc}
 801235c:	e000ed04 	.word	0xe000ed04

08012360 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012360:	2300      	movs	r3, #0
 8012362:	4a08      	ldr	r2, [pc, #32]	; (8012384 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012364:	4908      	ldr	r1, [pc, #32]	; (8012388 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012366:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012368:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801236a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801236e:	4b07      	ldr	r3, [pc, #28]	; (801238c <vPortSetupTimerInterrupt+0x2c>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	fbb3 f3f1 	udiv	r3, r3, r1
 8012376:	4906      	ldr	r1, [pc, #24]	; (8012390 <vPortSetupTimerInterrupt+0x30>)
 8012378:	3b01      	subs	r3, #1
 801237a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801237c:	2307      	movs	r3, #7
 801237e:	6013      	str	r3, [r2, #0]
}
 8012380:	4770      	bx	lr
 8012382:	bf00      	nop
 8012384:	e000e010 	.word	0xe000e010
 8012388:	e000e018 	.word	0xe000e018
 801238c:	24000000 	.word	0x24000000
 8012390:	e000e014 	.word	0xe000e014

08012394 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012394:	4b38      	ldr	r3, [pc, #224]	; (8012478 <xPortStartScheduler+0xe4>)
 8012396:	4a39      	ldr	r2, [pc, #228]	; (801247c <xPortStartScheduler+0xe8>)
{
 8012398:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801239a:	6819      	ldr	r1, [r3, #0]
 801239c:	4291      	cmp	r1, r2
 801239e:	d108      	bne.n	80123b2 <xPortStartScheduler+0x1e>
	__asm volatile
 80123a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a4:	f383 8811 	msr	BASEPRI, r3
 80123a8:	f3bf 8f6f 	isb	sy
 80123ac:	f3bf 8f4f 	dsb	sy
 80123b0:	e7fe      	b.n	80123b0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80123b2:	681a      	ldr	r2, [r3, #0]
 80123b4:	4b32      	ldr	r3, [pc, #200]	; (8012480 <xPortStartScheduler+0xec>)
 80123b6:	429a      	cmp	r2, r3
 80123b8:	d108      	bne.n	80123cc <xPortStartScheduler+0x38>
 80123ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123be:	f383 8811 	msr	BASEPRI, r3
 80123c2:	f3bf 8f6f 	isb	sy
 80123c6:	f3bf 8f4f 	dsb	sy
 80123ca:	e7fe      	b.n	80123ca <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80123cc:	4b2d      	ldr	r3, [pc, #180]	; (8012484 <xPortStartScheduler+0xf0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80123ce:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80123d0:	781a      	ldrb	r2, [r3, #0]
 80123d2:	b2d2      	uxtb	r2, r2
 80123d4:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80123d6:	22ff      	movs	r2, #255	; 0xff
 80123d8:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80123da:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80123dc:	4a2a      	ldr	r2, [pc, #168]	; (8012488 <xPortStartScheduler+0xf4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80123de:	b2db      	uxtb	r3, r3
 80123e0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80123e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80123e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80123ec:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80123ee:	2207      	movs	r2, #7
 80123f0:	4b26      	ldr	r3, [pc, #152]	; (801248c <xPortStartScheduler+0xf8>)
 80123f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80123f4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80123f8:	1e54      	subs	r4, r2, #1
 80123fa:	0600      	lsls	r0, r0, #24
 80123fc:	d40d      	bmi.n	801241a <xPortStartScheduler+0x86>
 80123fe:	b101      	cbz	r1, 8012402 <xPortStartScheduler+0x6e>
 8012400:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8012402:	681a      	ldr	r2, [r3, #0]
 8012404:	2a03      	cmp	r2, #3
 8012406:	d011      	beq.n	801242c <xPortStartScheduler+0x98>
 8012408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801240c:	f383 8811 	msr	BASEPRI, r3
 8012410:	f3bf 8f6f 	isb	sy
 8012414:	f3bf 8f4f 	dsb	sy
 8012418:	e7fe      	b.n	8012418 <xPortStartScheduler+0x84>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801241a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801241e:	2101      	movs	r1, #1
 8012420:	0052      	lsls	r2, r2, #1
 8012422:	b2d2      	uxtb	r2, r2
 8012424:	f88d 2003 	strb.w	r2, [sp, #3]
 8012428:	4622      	mov	r2, r4
 801242a:	e7e3      	b.n	80123f4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801242c:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 801242e:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012430:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8012434:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012436:	9b01      	ldr	r3, [sp, #4]
 8012438:	4a12      	ldr	r2, [pc, #72]	; (8012484 <xPortStartScheduler+0xf0>)
 801243a:	b2db      	uxtb	r3, r3
 801243c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801243e:	4b14      	ldr	r3, [pc, #80]	; (8012490 <xPortStartScheduler+0xfc>)
 8012440:	681a      	ldr	r2, [r3, #0]
 8012442:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8012446:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012448:	681a      	ldr	r2, [r3, #0]
 801244a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 801244e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8012450:	f7ff ff86 	bl	8012360 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8012454:	4b0f      	ldr	r3, [pc, #60]	; (8012494 <xPortStartScheduler+0x100>)
 8012456:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8012458:	f7ff fed2 	bl	8012200 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801245c:	4a0e      	ldr	r2, [pc, #56]	; (8012498 <xPortStartScheduler+0x104>)
 801245e:	6813      	ldr	r3, [r2, #0]
 8012460:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012464:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8012466:	f7ff feb7 	bl	80121d8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 801246a:	f7ff f9e5 	bl	8011838 <vTaskSwitchContext>
	prvTaskExitError();
 801246e:	f7ff fe93 	bl	8012198 <prvTaskExitError>
}
 8012472:	4620      	mov	r0, r4
 8012474:	b002      	add	sp, #8
 8012476:	bd10      	pop	{r4, pc}
 8012478:	e000ed00 	.word	0xe000ed00
 801247c:	410fc271 	.word	0x410fc271
 8012480:	410fc270 	.word	0x410fc270
 8012484:	e000e400 	.word	0xe000e400
 8012488:	2400239c 	.word	0x2400239c
 801248c:	240023a0 	.word	0x240023a0
 8012490:	e000ed20 	.word	0xe000ed20
 8012494:	2400013c 	.word	0x2400013c
 8012498:	e000ef34 	.word	0xe000ef34

0801249c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801249c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80124a0:	2b0f      	cmp	r3, #15
 80124a2:	d90e      	bls.n	80124c2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80124a4:	4a10      	ldr	r2, [pc, #64]	; (80124e8 <vPortValidateInterruptPriority+0x4c>)
 80124a6:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80124a8:	4a10      	ldr	r2, [pc, #64]	; (80124ec <vPortValidateInterruptPriority+0x50>)
 80124aa:	7812      	ldrb	r2, [r2, #0]
 80124ac:	429a      	cmp	r2, r3
 80124ae:	d908      	bls.n	80124c2 <vPortValidateInterruptPriority+0x26>
 80124b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b4:	f383 8811 	msr	BASEPRI, r3
 80124b8:	f3bf 8f6f 	isb	sy
 80124bc:	f3bf 8f4f 	dsb	sy
 80124c0:	e7fe      	b.n	80124c0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80124c2:	4b0b      	ldr	r3, [pc, #44]	; (80124f0 <vPortValidateInterruptPriority+0x54>)
 80124c4:	4a0b      	ldr	r2, [pc, #44]	; (80124f4 <vPortValidateInterruptPriority+0x58>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	6812      	ldr	r2, [r2, #0]
 80124ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d908      	bls.n	80124e4 <vPortValidateInterruptPriority+0x48>
 80124d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124d6:	f383 8811 	msr	BASEPRI, r3
 80124da:	f3bf 8f6f 	isb	sy
 80124de:	f3bf 8f4f 	dsb	sy
 80124e2:	e7fe      	b.n	80124e2 <vPortValidateInterruptPriority+0x46>
	}
 80124e4:	4770      	bx	lr
 80124e6:	bf00      	nop
 80124e8:	e000e3f0 	.word	0xe000e3f0
 80124ec:	2400239c 	.word	0x2400239c
 80124f0:	e000ed0c 	.word	0xe000ed0c
 80124f4:	240023a0 	.word	0x240023a0

080124f8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80124f8:	4b0f      	ldr	r3, [pc, #60]	; (8012538 <prvInsertBlockIntoFreeList+0x40>)
{
 80124fa:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80124fc:	681a      	ldr	r2, [r3, #0]
 80124fe:	4282      	cmp	r2, r0
 8012500:	d318      	bcc.n	8012534 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012502:	685c      	ldr	r4, [r3, #4]
 8012504:	1919      	adds	r1, r3, r4
 8012506:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012508:	bf01      	itttt	eq
 801250a:	6841      	ldreq	r1, [r0, #4]
 801250c:	4618      	moveq	r0, r3
 801250e:	1909      	addeq	r1, r1, r4
 8012510:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012512:	6844      	ldr	r4, [r0, #4]
 8012514:	1901      	adds	r1, r0, r4
 8012516:	428a      	cmp	r2, r1
 8012518:	d107      	bne.n	801252a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801251a:	4908      	ldr	r1, [pc, #32]	; (801253c <prvInsertBlockIntoFreeList+0x44>)
 801251c:	6809      	ldr	r1, [r1, #0]
 801251e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012520:	bf1f      	itttt	ne
 8012522:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012524:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012526:	1909      	addne	r1, r1, r4
 8012528:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801252a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801252c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801252e:	bf18      	it	ne
 8012530:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012532:	bd10      	pop	{r4, pc}
 8012534:	4613      	mov	r3, r2
 8012536:	e7e1      	b.n	80124fc <prvInsertBlockIntoFreeList+0x4>
 8012538:	24009bb4 	.word	0x24009bb4
 801253c:	240023a4 	.word	0x240023a4

08012540 <pvPortMalloc>:
{
 8012540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012544:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8012546:	f7fe ffa3 	bl	8011490 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801254a:	4949      	ldr	r1, [pc, #292]	; (8012670 <pvPortMalloc+0x130>)
 801254c:	4d49      	ldr	r5, [pc, #292]	; (8012674 <pvPortMalloc+0x134>)
 801254e:	680b      	ldr	r3, [r1, #0]
 8012550:	bb03      	cbnz	r3, 8012594 <pvPortMalloc+0x54>
	uxAddress = ( size_t ) ucHeap;
 8012552:	4a49      	ldr	r2, [pc, #292]	; (8012678 <pvPortMalloc+0x138>)
	xStart.xBlockSize = ( size_t ) 0;
 8012554:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012556:	0756      	lsls	r6, r2, #29
 8012558:	f502 43f0 	add.w	r3, r2, #30720	; 0x7800
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801255c:	4e47      	ldr	r6, [pc, #284]	; (801267c <pvPortMalloc+0x13c>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801255e:	bf14      	ite	ne
 8012560:	3207      	addne	r2, #7
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012562:	f44f 43f0 	moveq.w	r3, #30720	; 0x7800
	xStart.xBlockSize = ( size_t ) 0;
 8012566:	6070      	str	r0, [r6, #4]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012568:	bf1c      	itt	ne
 801256a:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801256e:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012570:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012572:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8012574:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012576:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 801257a:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801257e:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8012580:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012582:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012586:	4b3e      	ldr	r3, [pc, #248]	; (8012680 <pvPortMalloc+0x140>)
 8012588:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801258a:	4b3e      	ldr	r3, [pc, #248]	; (8012684 <pvPortMalloc+0x144>)
 801258c:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801258e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012592:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012594:	f8d5 8000 	ldr.w	r8, [r5]
 8012598:	ea18 0f04 	tst.w	r8, r4
 801259c:	d160      	bne.n	8012660 <pvPortMalloc+0x120>
			if( xWantedSize > 0 )
 801259e:	2c00      	cmp	r4, #0
 80125a0:	d05e      	beq.n	8012660 <pvPortMalloc+0x120>
				xWantedSize += xHeapStructSize;
 80125a2:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80125a4:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80125a6:	bf1c      	itt	ne
 80125a8:	f024 0407 	bicne.w	r4, r4, #7
 80125ac:	3408      	addne	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80125ae:	2c00      	cmp	r4, #0
 80125b0:	d056      	beq.n	8012660 <pvPortMalloc+0x120>
 80125b2:	4b34      	ldr	r3, [pc, #208]	; (8012684 <pvPortMalloc+0x144>)
 80125b4:	681f      	ldr	r7, [r3, #0]
 80125b6:	4699      	mov	r9, r3
 80125b8:	42a7      	cmp	r7, r4
 80125ba:	d351      	bcc.n	8012660 <pvPortMalloc+0x120>
				pxBlock = xStart.pxNextFreeBlock;
 80125bc:	4b2f      	ldr	r3, [pc, #188]	; (801267c <pvPortMalloc+0x13c>)
 80125be:	681e      	ldr	r6, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80125c0:	6870      	ldr	r0, [r6, #4]
 80125c2:	42a0      	cmp	r0, r4
 80125c4:	d201      	bcs.n	80125ca <pvPortMalloc+0x8a>
 80125c6:	6832      	ldr	r2, [r6, #0]
 80125c8:	b9a2      	cbnz	r2, 80125f4 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 80125ca:	680a      	ldr	r2, [r1, #0]
 80125cc:	42b2      	cmp	r2, r6
 80125ce:	d047      	beq.n	8012660 <pvPortMalloc+0x120>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80125d0:	6832      	ldr	r2, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80125d2:	681d      	ldr	r5, [r3, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80125d4:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80125d6:	1b03      	subs	r3, r0, r4
 80125d8:	2b10      	cmp	r3, #16
 80125da:	d912      	bls.n	8012602 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80125dc:	1930      	adds	r0, r6, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80125de:	0742      	lsls	r2, r0, #29
 80125e0:	d00b      	beq.n	80125fa <pvPortMalloc+0xba>
 80125e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e6:	f383 8811 	msr	BASEPRI, r3
 80125ea:	f3bf 8f6f 	isb	sy
 80125ee:	f3bf 8f4f 	dsb	sy
 80125f2:	e7fe      	b.n	80125f2 <pvPortMalloc+0xb2>
 80125f4:	4633      	mov	r3, r6
 80125f6:	4616      	mov	r6, r2
 80125f8:	e7e2      	b.n	80125c0 <pvPortMalloc+0x80>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80125fa:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80125fc:	6074      	str	r4, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80125fe:	f7ff ff7b 	bl	80124f8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012602:	6872      	ldr	r2, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012604:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012606:	491e      	ldr	r1, [pc, #120]	; (8012680 <pvPortMalloc+0x140>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012608:	1abf      	subs	r7, r7, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801260a:	ea48 0202 	orr.w	r2, r8, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801260e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012610:	f8c9 7000 	str.w	r7, [r9]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012614:	4287      	cmp	r7, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012616:	6072      	str	r2, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012618:	6033      	str	r3, [r6, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801261a:	bf38      	it	cc
 801261c:	600f      	strcc	r7, [r1, #0]
		traceMALLOC( pvReturn, xWantedSize );
 801261e:	3508      	adds	r5, #8
 8012620:	d003      	beq.n	801262a <pvPortMalloc+0xea>
 8012622:	4a19      	ldr	r2, [pc, #100]	; (8012688 <pvPortMalloc+0x148>)
 8012624:	6813      	ldr	r3, [r2, #0]
 8012626:	4423      	add	r3, r4
 8012628:	6013      	str	r3, [r2, #0]
 801262a:	f7f2 fa8d 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 801262e:	f7f2 f957 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 8012632:	4b16      	ldr	r3, [pc, #88]	; (801268c <pvPortMalloc+0x14c>)
 8012634:	881b      	ldrh	r3, [r3, #0]
 8012636:	4218      	tst	r0, r3
 8012638:	d005      	beq.n	8012646 <pvPortMalloc+0x106>
 801263a:	4622      	mov	r2, r4
 801263c:	4629      	mov	r1, r5
 801263e:	b18d      	cbz	r5, 8012664 <pvPortMalloc+0x124>
 8012640:	2038      	movs	r0, #56	; 0x38
 8012642:	f7f2 feaf 	bl	80053a4 <prvTraceStoreEvent2>
	( void ) xTaskResumeAll();
 8012646:	f7fe ffe9 	bl	801161c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801264a:	076b      	lsls	r3, r5, #29
 801264c:	d00c      	beq.n	8012668 <pvPortMalloc+0x128>
 801264e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012652:	f383 8811 	msr	BASEPRI, r3
 8012656:	f3bf 8f6f 	isb	sy
 801265a:	f3bf 8f4f 	dsb	sy
 801265e:	e7fe      	b.n	801265e <pvPortMalloc+0x11e>
void *pvReturn = NULL;
 8012660:	2500      	movs	r5, #0
 8012662:	e7e2      	b.n	801262a <pvPortMalloc+0xea>
		traceMALLOC( pvReturn, xWantedSize );
 8012664:	20e9      	movs	r0, #233	; 0xe9
 8012666:	e7ec      	b.n	8012642 <pvPortMalloc+0x102>
}
 8012668:	4628      	mov	r0, r5
 801266a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801266e:	bf00      	nop
 8012670:	240023a4 	.word	0x240023a4
 8012674:	24009ba8 	.word	0x24009ba8
 8012678:	240023a8 	.word	0x240023a8
 801267c:	24009bb4 	.word	0x24009bb4
 8012680:	24009bb0 	.word	0x24009bb0
 8012684:	24009bac 	.word	0x24009bac
 8012688:	24001668 	.word	0x24001668
 801268c:	2400000a 	.word	0x2400000a

08012690 <vPortFree>:
{
 8012690:	b510      	push	{r4, lr}
	if( pv != NULL )
 8012692:	4604      	mov	r4, r0
 8012694:	2800      	cmp	r0, #0
 8012696:	d041      	beq.n	801271c <vPortFree+0x8c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012698:	4a21      	ldr	r2, [pc, #132]	; (8012720 <vPortFree+0x90>)
 801269a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801269e:	6812      	ldr	r2, [r2, #0]
 80126a0:	4213      	tst	r3, r2
 80126a2:	d108      	bne.n	80126b6 <vPortFree+0x26>
 80126a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a8:	f383 8811 	msr	BASEPRI, r3
 80126ac:	f3bf 8f6f 	isb	sy
 80126b0:	f3bf 8f4f 	dsb	sy
 80126b4:	e7fe      	b.n	80126b4 <vPortFree+0x24>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80126b6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80126ba:	b141      	cbz	r1, 80126ce <vPortFree+0x3e>
 80126bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c0:	f383 8811 	msr	BASEPRI, r3
 80126c4:	f3bf 8f6f 	isb	sy
 80126c8:	f3bf 8f4f 	dsb	sy
 80126cc:	e7fe      	b.n	80126cc <vPortFree+0x3c>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80126ce:	ea23 0302 	bic.w	r3, r3, r2
 80126d2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80126d6:	f7fe fedb 	bl	8011490 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80126da:	4b12      	ldr	r3, [pc, #72]	; (8012724 <vPortFree+0x94>)
 80126dc:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80126e0:	681a      	ldr	r2, [r3, #0]
 80126e2:	440a      	add	r2, r1
 80126e4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
 80126e6:	4a10      	ldr	r2, [pc, #64]	; (8012728 <vPortFree+0x98>)
 80126e8:	6813      	ldr	r3, [r2, #0]
 80126ea:	1a5b      	subs	r3, r3, r1
 80126ec:	6013      	str	r3, [r2, #0]
 80126ee:	f7f2 fa2b 	bl	8004b48 <prvTraceGetCurrentTaskHandle>
 80126f2:	f7f2 f8f5 	bl	80048e0 <prvTraceGetTaskNumberHigh16>
 80126f6:	4b0d      	ldr	r3, [pc, #52]	; (801272c <vPortFree+0x9c>)
 80126f8:	881b      	ldrh	r3, [r3, #0]
 80126fa:	4218      	tst	r0, r3
 80126fc:	d006      	beq.n	801270c <vPortFree+0x7c>
 80126fe:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8012702:	4621      	mov	r1, r4
 8012704:	2039      	movs	r0, #57	; 0x39
 8012706:	4252      	negs	r2, r2
 8012708:	f7f2 fe4c 	bl	80053a4 <prvTraceStoreEvent2>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801270c:	f1a4 0008 	sub.w	r0, r4, #8
 8012710:	f7ff fef2 	bl	80124f8 <prvInsertBlockIntoFreeList>
}
 8012714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8012718:	f7fe bf80 	b.w	801161c <xTaskResumeAll>
}
 801271c:	bd10      	pop	{r4, pc}
 801271e:	bf00      	nop
 8012720:	24009ba8 	.word	0x24009ba8
 8012724:	24009bac 	.word	0x24009bac
 8012728:	24001668 	.word	0x24001668
 801272c:	2400000a 	.word	0x2400000a

08012730 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012730:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012732:	2200      	movs	r2, #0
 8012734:	490f      	ldr	r1, [pc, #60]	; (8012774 <MX_USB_DEVICE_Init+0x44>)
 8012736:	4810      	ldr	r0, [pc, #64]	; (8012778 <MX_USB_DEVICE_Init+0x48>)
 8012738:	f7fa ffec 	bl	800d714 <USBD_Init>
 801273c:	b108      	cbz	r0, 8012742 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 801273e:	f7f0 f9c3 	bl	8002ac8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012742:	490e      	ldr	r1, [pc, #56]	; (801277c <MX_USB_DEVICE_Init+0x4c>)
 8012744:	480c      	ldr	r0, [pc, #48]	; (8012778 <MX_USB_DEVICE_Init+0x48>)
 8012746:	f7fa fffd 	bl	800d744 <USBD_RegisterClass>
 801274a:	b108      	cbz	r0, 8012750 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 801274c:	f7f0 f9bc 	bl	8002ac8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012750:	490b      	ldr	r1, [pc, #44]	; (8012780 <MX_USB_DEVICE_Init+0x50>)
 8012752:	4809      	ldr	r0, [pc, #36]	; (8012778 <MX_USB_DEVICE_Init+0x48>)
 8012754:	f7fa ff9e 	bl	800d694 <USBD_CDC_RegisterInterface>
 8012758:	b108      	cbz	r0, 801275e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 801275a:	f7f0 f9b5 	bl	8002ac8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801275e:	4806      	ldr	r0, [pc, #24]	; (8012778 <MX_USB_DEVICE_Init+0x48>)
 8012760:	f7fb f803 	bl	800d76a <USBD_Start>
 8012764:	b108      	cbz	r0, 801276a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8012766:	f7f0 f9af 	bl	8002ac8 <Error_Handler>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801276a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 801276e:	f7f5 bd55 	b.w	800821c <HAL_PWREx_EnableUSBVoltageDetector>
 8012772:	bf00      	nop
 8012774:	24000154 	.word	0x24000154
 8012778:	24022950 	.word	0x24022950
 801277c:	2400002c 	.word	0x2400002c
 8012780:	24000140 	.word	0x24000140

08012784 <CDC_DeInit_FS>:
 */
static int8_t CDC_DeInit_FS(void) {
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
	/* USER CODE END 4 */
}
 8012784:	2000      	movs	r0, #0
 8012786:	4770      	bx	lr

08012788 <CDC_Control_FS>:
		break;
	}

	return (USBD_OK);
	/* USER CODE END 5 */
}
 8012788:	2000      	movs	r0, #0
 801278a:	4770      	bx	lr

0801278c <CDC_TransmitCplt_FS>:
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
}
 801278c:	2000      	movs	r0, #0
 801278e:	4770      	bx	lr

08012790 <CDC_Receive_FS>:
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 8012790:	b570      	push	{r4, r5, r6, lr}
	for (uint32_t i = 0; i < *Len; i++) {
 8012792:	4602      	mov	r2, r0
		commandBuffer.data[commandBuffer.idx] = Buf[i];
 8012794:	4c0a      	ldr	r4, [pc, #40]	; (80127c0 <CDC_Receive_FS+0x30>)
	for (uint32_t i = 0; i < *Len; i++) {
 8012796:	1a13      	subs	r3, r2, r0
 8012798:	680d      	ldr	r5, [r1, #0]
 801279a:	429d      	cmp	r5, r3
 801279c:	d808      	bhi.n	80127b0 <CDC_Receive_FS+0x20>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801279e:	4601      	mov	r1, r0
 80127a0:	4808      	ldr	r0, [pc, #32]	; (80127c4 <CDC_Receive_FS+0x34>)
 80127a2:	f7fa ff86 	bl	800d6b2 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80127a6:	4807      	ldr	r0, [pc, #28]	; (80127c4 <CDC_Receive_FS+0x34>)
 80127a8:	f7fa ffa1 	bl	800d6ee <USBD_CDC_ReceivePacket>
}
 80127ac:	2000      	movs	r0, #0
 80127ae:	bd70      	pop	{r4, r5, r6, pc}
		commandBuffer.data[commandBuffer.idx] = Buf[i];
 80127b0:	6823      	ldr	r3, [r4, #0]
 80127b2:	f812 6b01 	ldrb.w	r6, [r2], #1
 80127b6:	18e5      	adds	r5, r4, r3
		commandBuffer.idx++;
 80127b8:	3301      	adds	r3, #1
		commandBuffer.data[commandBuffer.idx] = Buf[i];
 80127ba:	712e      	strb	r6, [r5, #4]
		commandBuffer.idx++;
 80127bc:	6023      	str	r3, [r4, #0]
 80127be:	e7ea      	b.n	8012796 <CDC_Receive_FS+0x6>
 80127c0:	24009bc4 	.word	0x24009bc4
 80127c4:	24022950 	.word	0x24022950

080127c8 <CDC_Init_FS>:
static int8_t CDC_Init_FS(void) {
 80127c8:	b510      	push	{r4, lr}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80127ca:	4c06      	ldr	r4, [pc, #24]	; (80127e4 <CDC_Init_FS+0x1c>)
 80127cc:	2200      	movs	r2, #0
 80127ce:	4906      	ldr	r1, [pc, #24]	; (80127e8 <CDC_Init_FS+0x20>)
 80127d0:	4620      	mov	r0, r4
 80127d2:	f7fa ff66 	bl	800d6a2 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80127d6:	4905      	ldr	r1, [pc, #20]	; (80127ec <CDC_Init_FS+0x24>)
 80127d8:	4620      	mov	r0, r4
 80127da:	f7fa ff6a 	bl	800d6b2 <USBD_CDC_SetRxBuffer>
}
 80127de:	2000      	movs	r0, #0
 80127e0:	bd10      	pop	{r4, pc}
 80127e2:	bf00      	nop
 80127e4:	24022950 	.word	0x24022950
 80127e8:	24023420 	.word	0x24023420
 80127ec:	24022c20 	.word	0x24022c20

080127f0 <CDC_Transmit_FS>:
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len) {
 80127f0:	b510      	push	{r4, lr}
	USBD_CDC_HandleTypeDef *hcdc =
 80127f2:	4c0b      	ldr	r4, [pc, #44]	; (8012820 <CDC_Transmit_FS+0x30>)
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len) {
 80127f4:	460a      	mov	r2, r1
	USBD_CDC_HandleTypeDef *hcdc =
 80127f6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
	if (hcdc->TxState != 0) {
 80127fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80127fe:	b963      	cbnz	r3, 801281a <CDC_Transmit_FS+0x2a>
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012800:	4601      	mov	r1, r0
 8012802:	4620      	mov	r0, r4
 8012804:	f7fa ff4d 	bl	800d6a2 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012808:	4620      	mov	r0, r4
 801280a:	f7fa ff58 	bl	800d6be <USBD_CDC_TransmitPacket>
 801280e:	4604      	mov	r4, r0
	osDelay(2);
 8012810:	2002      	movs	r0, #2
 8012812:	f7fd f81f 	bl	800f854 <osDelay>
}
 8012816:	4620      	mov	r0, r4
 8012818:	bd10      	pop	{r4, pc}
		return USBD_BUSY;
 801281a:	2401      	movs	r4, #1
 801281c:	e7fb      	b.n	8012816 <CDC_Transmit_FS+0x26>
 801281e:	bf00      	nop
 8012820:	24022950 	.word	0x24022950

08012824 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012824:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8012826:	4801      	ldr	r0, [pc, #4]	; (801282c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8012828:	800b      	strh	r3, [r1, #0]
}
 801282a:	4770      	bx	lr
 801282c:	24000170 	.word	0x24000170

08012830 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012830:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8012832:	4801      	ldr	r0, [pc, #4]	; (8012838 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8012834:	800b      	strh	r3, [r1, #0]
}
 8012836:	4770      	bx	lr
 8012838:	24000184 	.word	0x24000184

0801283c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801283c:	2300      	movs	r3, #0
 801283e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8012840:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 8012842:	0f05      	lsrs	r5, r0, #28
    value = value << 4;
 8012844:	0100      	lsls	r0, r0, #4
 8012846:	b2ec      	uxtb	r4, r5
    if (((value >> 28)) < 0xA)
 8012848:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 801284a:	bf94      	ite	ls
 801284c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801284e:	3437      	addhi	r4, #55	; 0x37
 8012850:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8012854:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8012858:	3301      	adds	r3, #1
 801285a:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 801285c:	b2dc      	uxtb	r4, r3
 801285e:	42a2      	cmp	r2, r4
 8012860:	d8ef      	bhi.n	8012842 <IntToUnicode+0x6>
  }
}
 8012862:	bd70      	pop	{r4, r5, r6, pc}

08012864 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8012864:	231a      	movs	r3, #26
{
 8012866:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8012868:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801286a:	4b09      	ldr	r3, [pc, #36]	; (8012890 <USBD_FS_SerialStrDescriptor+0x2c>)
 801286c:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801286e:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8012870:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8012872:	18c0      	adds	r0, r0, r3
 8012874:	d00a      	beq.n	801288c <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012876:	4b07      	ldr	r3, [pc, #28]	; (8012894 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012878:	2208      	movs	r2, #8
 801287a:	4907      	ldr	r1, [pc, #28]	; (8012898 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801287c:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801287e:	f7ff ffdd 	bl	801283c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012882:	2204      	movs	r2, #4
 8012884:	4905      	ldr	r1, [pc, #20]	; (801289c <USBD_FS_SerialStrDescriptor+0x38>)
 8012886:	4620      	mov	r0, r4
 8012888:	f7ff ffd8 	bl	801283c <IntToUnicode>
}
 801288c:	4804      	ldr	r0, [pc, #16]	; (80128a0 <USBD_FS_SerialStrDescriptor+0x3c>)
 801288e:	bd10      	pop	{r4, pc}
 8012890:	1ff1e800 	.word	0x1ff1e800
 8012894:	1ff1e804 	.word	0x1ff1e804
 8012898:	2400018a 	.word	0x2400018a
 801289c:	2400019a 	.word	0x2400019a
 80128a0:	24000188 	.word	0x24000188

080128a4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80128a4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80128a6:	4c04      	ldr	r4, [pc, #16]	; (80128b8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80128a8:	460a      	mov	r2, r1
 80128aa:	4804      	ldr	r0, [pc, #16]	; (80128bc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80128ac:	4621      	mov	r1, r4
 80128ae:	f7fb fa9f 	bl	800ddf0 <USBD_GetString>
}
 80128b2:	4620      	mov	r0, r4
 80128b4:	bd10      	pop	{r4, pc}
 80128b6:	bf00      	nop
 80128b8:	24023c20 	.word	0x24023c20
 80128bc:	08015626 	.word	0x08015626

080128c0 <USBD_FS_ProductStrDescriptor>:
{
 80128c0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80128c2:	4c04      	ldr	r4, [pc, #16]	; (80128d4 <USBD_FS_ProductStrDescriptor+0x14>)
 80128c4:	460a      	mov	r2, r1
 80128c6:	4804      	ldr	r0, [pc, #16]	; (80128d8 <USBD_FS_ProductStrDescriptor+0x18>)
 80128c8:	4621      	mov	r1, r4
 80128ca:	f7fb fa91 	bl	800ddf0 <USBD_GetString>
}
 80128ce:	4620      	mov	r0, r4
 80128d0:	bd10      	pop	{r4, pc}
 80128d2:	bf00      	nop
 80128d4:	24023c20 	.word	0x24023c20
 80128d8:	0801562b 	.word	0x0801562b

080128dc <USBD_FS_ConfigStrDescriptor>:
{
 80128dc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80128de:	4c04      	ldr	r4, [pc, #16]	; (80128f0 <USBD_FS_ConfigStrDescriptor+0x14>)
 80128e0:	460a      	mov	r2, r1
 80128e2:	4804      	ldr	r0, [pc, #16]	; (80128f4 <USBD_FS_ConfigStrDescriptor+0x18>)
 80128e4:	4621      	mov	r1, r4
 80128e6:	f7fb fa83 	bl	800ddf0 <USBD_GetString>
}
 80128ea:	4620      	mov	r0, r4
 80128ec:	bd10      	pop	{r4, pc}
 80128ee:	bf00      	nop
 80128f0:	24023c20 	.word	0x24023c20
 80128f4:	0801560d 	.word	0x0801560d

080128f8 <USBD_FS_InterfaceStrDescriptor>:
{
 80128f8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80128fa:	4c04      	ldr	r4, [pc, #16]	; (801290c <USBD_FS_InterfaceStrDescriptor+0x14>)
 80128fc:	460a      	mov	r2, r1
 80128fe:	4804      	ldr	r0, [pc, #16]	; (8012910 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8012900:	4621      	mov	r1, r4
 8012902:	f7fb fa75 	bl	800ddf0 <USBD_GetString>
}
 8012906:	4620      	mov	r0, r4
 8012908:	bd10      	pop	{r4, pc}
 801290a:	bf00      	nop
 801290c:	24023c20 	.word	0x24023c20
 8012910:	08015618 	.word	0x08015618

08012914 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012914:	b510      	push	{r4, lr}
 8012916:	b088      	sub	sp, #32
 8012918:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801291a:	2214      	movs	r2, #20
 801291c:	2100      	movs	r1, #0
 801291e:	a803      	add	r0, sp, #12
 8012920:	f000 f991 	bl	8012c46 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012924:	6822      	ldr	r2, [r4, #0]
 8012926:	4b18      	ldr	r3, [pc, #96]	; (8012988 <HAL_PCD_MspInit+0x74>)
 8012928:	429a      	cmp	r2, r3
 801292a:	d12b      	bne.n	8012984 <HAL_PCD_MspInit+0x70>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801292c:	4c17      	ldr	r4, [pc, #92]	; (801298c <HAL_PCD_MspInit+0x78>)
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801292e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012932:	a903      	add	r1, sp, #12
 8012934:	4816      	ldr	r0, [pc, #88]	; (8012990 <HAL_PCD_MspInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012936:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 801293a:	f043 0301 	orr.w	r3, r3, #1
 801293e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8012942:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8012946:	f003 0301 	and.w	r3, r3, #1
 801294a:	9301      	str	r3, [sp, #4]
 801294c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801294e:	2302      	movs	r3, #2
 8012950:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8012954:	230a      	movs	r3, #10
 8012956:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012958:	f7f4 fe4e 	bl	80075f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801295c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012960:	2065      	movs	r0, #101	; 0x65
 8012962:	2200      	movs	r2, #0
 8012964:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012966:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801296a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 801296e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8012972:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012976:	9302      	str	r3, [sp, #8]
 8012978:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801297a:	f7f3 fc7b 	bl	8006274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801297e:	2065      	movs	r0, #101	; 0x65
 8012980:	f7f3 fcaa 	bl	80062d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012984:	b008      	add	sp, #32
 8012986:	bd10      	pop	{r4, pc}
 8012988:	40080000 	.word	0x40080000
 801298c:	58024400 	.word	0x58024400
 8012990:	58020000 	.word	0x58020000

08012994 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012994:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8012998:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801299c:	f7fa bef6 	b.w	800d78c <USBD_LL_SetupStage>

080129a0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80129a0:	231c      	movs	r3, #28
 80129a2:	fb03 0301 	mla	r3, r3, r1, r0
 80129a6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80129aa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80129ae:	f7fa bf1d 	b.w	800d7ec <USBD_LL_DataOutStage>

080129b2 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80129b2:	231c      	movs	r3, #28
 80129b4:	fb03 0301 	mla	r3, r3, r1, r0
 80129b8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80129bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80129be:	f7fa bf48 	b.w	800d852 <USBD_LL_DataInStage>

080129c2 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80129c2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80129c6:	f7fa bfcf 	b.w	800d968 <USBD_LL_SOF>

080129ca <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80129ca:	68c1      	ldr	r1, [r0, #12]
{
 80129cc:	b510      	push	{r4, lr}
 80129ce:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80129d0:	b121      	cbz	r1, 80129dc <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80129d2:	2902      	cmp	r1, #2
 80129d4:	d001      	beq.n	80129da <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 80129d6:	f7f0 f877 	bl	8002ac8 <Error_Handler>
    speed = USBD_SPEED_FULL;
 80129da:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80129dc:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80129e0:	f7fa ffac 	bl	800d93c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80129e4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 80129e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80129ec:	f7fa bf7e 	b.w	800d8ec <USBD_LL_Reset>

080129f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80129f0:	b510      	push	{r4, lr}
 80129f2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80129f4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80129f8:	f7fa ffa3 	bl	800d942 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80129fc:	6822      	ldr	r2, [r4, #0]
 80129fe:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8012a02:	f043 0301 	orr.w	r3, r3, #1
 8012a06:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012a0a:	6a23      	ldr	r3, [r4, #32]
 8012a0c:	b123      	cbz	r3, 8012a18 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012a0e:	4a03      	ldr	r2, [pc, #12]	; (8012a1c <HAL_PCD_SuspendCallback+0x2c>)
 8012a10:	6913      	ldr	r3, [r2, #16]
 8012a12:	f043 0306 	orr.w	r3, r3, #6
 8012a16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012a18:	bd10      	pop	{r4, pc}
 8012a1a:	bf00      	nop
 8012a1c:	e000ed00 	.word	0xe000ed00

08012a20 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012a20:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012a24:	f7fa bf96 	b.w	800d954 <USBD_LL_Resume>

08012a28 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012a28:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012a2c:	f7fa bfaa 	b.w	800d984 <USBD_LL_IsoOUTIncomplete>

08012a30 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012a30:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012a34:	f7fa bfa4 	b.w	800d980 <USBD_LL_IsoINIncomplete>

08012a38 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012a38:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012a3c:	f7fa bfa4 	b.w	800d988 <USBD_LL_DevConnected>

08012a40 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012a40:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012a44:	f7fa bfa2 	b.w	800d98c <USBD_LL_DevDisconnected>

08012a48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012a48:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012a4a:	7802      	ldrb	r2, [r0, #0]
 8012a4c:	bb32      	cbnz	r2, 8012a9c <USBD_LL_Init+0x54>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012a4e:	4b14      	ldr	r3, [pc, #80]	; (8012aa0 <USBD_LL_Init+0x58>)
  pdev->pData = &hpcd_USB_OTG_FS;

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8012a50:	2109      	movs	r1, #9
  hpcd_USB_OTG_FS.pData = pdev;
 8012a52:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012a56:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8012a5a:	4812      	ldr	r0, [pc, #72]	; (8012aa4 <USBD_LL_Init+0x5c>)
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012a5c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8012a5e:	e9c3 0100 	strd	r0, r1, [r3]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012a62:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012a64:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012a66:	e9c3 1203 	strd	r1, r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012a6a:	e9c3 1206 	strd	r1, r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012a6e:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012a72:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012a76:	f7f4 febb 	bl	80077f0 <HAL_PCD_Init>
 8012a7a:	b108      	cbz	r0, 8012a80 <USBD_LL_Init+0x38>
  {
    Error_Handler( );
 8012a7c:	f7f0 f824 	bl	8002ac8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012a80:	2180      	movs	r1, #128	; 0x80
 8012a82:	4807      	ldr	r0, [pc, #28]	; (8012aa0 <USBD_LL_Init+0x58>)
 8012a84:	f7f5 fb8d 	bl	80081a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012a88:	2240      	movs	r2, #64	; 0x40
 8012a8a:	2100      	movs	r1, #0
 8012a8c:	4804      	ldr	r0, [pc, #16]	; (8012aa0 <USBD_LL_Init+0x58>)
 8012a8e:	f7f5 fb68 	bl	8008162 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012a92:	2280      	movs	r2, #128	; 0x80
 8012a94:	2101      	movs	r1, #1
 8012a96:	4802      	ldr	r0, [pc, #8]	; (8012aa0 <USBD_LL_Init+0x58>)
 8012a98:	f7f5 fb63 	bl	8008162 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8012a9c:	2000      	movs	r0, #0
 8012a9e:	bd08      	pop	{r3, pc}
 8012aa0:	24023e20 	.word	0x24023e20
 8012aa4:	40080000 	.word	0x40080000

08012aa8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012aa8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8012aaa:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8012aae:	f7f4 ff2a 	bl	8007906 <HAL_PCD_Start>
 8012ab2:	2803      	cmp	r0, #3
 8012ab4:	bf96      	itet	ls
 8012ab6:	4b02      	ldrls	r3, [pc, #8]	; (8012ac0 <USBD_LL_Start+0x18>)
 8012ab8:	2003      	movhi	r0, #3
 8012aba:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8012abc:	bd08      	pop	{r3, pc}
 8012abe:	bf00      	nop
 8012ac0:	0801563f 	.word	0x0801563f

08012ac4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012ac4:	b510      	push	{r4, lr}
 8012ac6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012ac8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8012acc:	4613      	mov	r3, r2
 8012ace:	4622      	mov	r2, r4
 8012ad0:	f7f5 fa24 	bl	8007f1c <HAL_PCD_EP_Open>
 8012ad4:	2803      	cmp	r0, #3
 8012ad6:	bf96      	itet	ls
 8012ad8:	4b01      	ldrls	r3, [pc, #4]	; (8012ae0 <USBD_LL_OpenEP+0x1c>)
 8012ada:	2003      	movhi	r0, #3
 8012adc:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8012ade:	bd10      	pop	{r4, pc}
 8012ae0:	0801563f 	.word	0x0801563f

08012ae4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ae4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012ae6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8012aea:	f7f5 fa4f 	bl	8007f8c <HAL_PCD_EP_Close>
 8012aee:	2803      	cmp	r0, #3
 8012af0:	bf96      	itet	ls
 8012af2:	4b02      	ldrls	r3, [pc, #8]	; (8012afc <USBD_LL_CloseEP+0x18>)
 8012af4:	2003      	movhi	r0, #3
 8012af6:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8012af8:	bd08      	pop	{r3, pc}
 8012afa:	bf00      	nop
 8012afc:	0801563f 	.word	0x0801563f

08012b00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b00:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012b02:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8012b06:	f7f5 fabc 	bl	8008082 <HAL_PCD_EP_SetStall>
 8012b0a:	2803      	cmp	r0, #3
 8012b0c:	bf96      	itet	ls
 8012b0e:	4b02      	ldrls	r3, [pc, #8]	; (8012b18 <USBD_LL_StallEP+0x18>)
 8012b10:	2003      	movhi	r0, #3
 8012b12:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8012b14:	bd08      	pop	{r3, pc}
 8012b16:	bf00      	nop
 8012b18:	0801563f 	.word	0x0801563f

08012b1c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b1c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012b1e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8012b22:	f7f5 fae8 	bl	80080f6 <HAL_PCD_EP_ClrStall>
 8012b26:	2803      	cmp	r0, #3
 8012b28:	bf96      	itet	ls
 8012b2a:	4b02      	ldrls	r3, [pc, #8]	; (8012b34 <USBD_LL_ClearStallEP+0x18>)
 8012b2c:	2003      	movhi	r0, #3
 8012b2e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8012b30:	bd08      	pop	{r3, pc}
 8012b32:	bf00      	nop
 8012b34:	0801563f 	.word	0x0801563f

08012b38 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 8012b38:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012b3c:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 8012b40:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012b44:	bf17      	itett	ne
 8012b46:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012b4a:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012b4e:	fb02 3101 	mlane	r1, r2, r1, r3
 8012b52:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012b56:	bf08      	it	eq
 8012b58:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 8012b5c:	4770      	bx	lr
	...

08012b60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012b60:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012b62:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8012b66:	f7f5 f9c5 	bl	8007ef4 <HAL_PCD_SetAddress>
 8012b6a:	2803      	cmp	r0, #3
 8012b6c:	bf96      	itet	ls
 8012b6e:	4b02      	ldrls	r3, [pc, #8]	; (8012b78 <USBD_LL_SetUSBAddress+0x18>)
 8012b70:	2003      	movhi	r0, #3
 8012b72:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8012b74:	bd08      	pop	{r3, pc}
 8012b76:	bf00      	nop
 8012b78:	0801563f 	.word	0x0801563f

08012b7c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012b7c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012b7e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8012b82:	f7f5 fa5e 	bl	8008042 <HAL_PCD_EP_Transmit>
 8012b86:	2803      	cmp	r0, #3
 8012b88:	bf96      	itet	ls
 8012b8a:	4b02      	ldrls	r3, [pc, #8]	; (8012b94 <USBD_LL_Transmit+0x18>)
 8012b8c:	2003      	movhi	r0, #3
 8012b8e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8012b90:	bd08      	pop	{r3, pc}
 8012b92:	bf00      	nop
 8012b94:	0801563f 	.word	0x0801563f

08012b98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012b98:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012b9a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8012b9e:	f7f5 fa24 	bl	8007fea <HAL_PCD_EP_Receive>
 8012ba2:	2803      	cmp	r0, #3
 8012ba4:	bf96      	itet	ls
 8012ba6:	4b02      	ldrls	r3, [pc, #8]	; (8012bb0 <USBD_LL_PrepareReceive+0x18>)
 8012ba8:	2003      	movhi	r0, #3
 8012baa:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8012bac:	bd08      	pop	{r3, pc}
 8012bae:	bf00      	nop
 8012bb0:	0801563f 	.word	0x0801563f

08012bb4 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012bb4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8012bb8:	f7f5 ba3b 	b.w	8008032 <HAL_PCD_EP_GetRxCount>

08012bbc <__errno>:
 8012bbc:	4b01      	ldr	r3, [pc, #4]	; (8012bc4 <__errno+0x8>)
 8012bbe:	6818      	ldr	r0, [r3, #0]
 8012bc0:	4770      	bx	lr
 8012bc2:	bf00      	nop
 8012bc4:	240001a4 	.word	0x240001a4

08012bc8 <__libc_init_array>:
 8012bc8:	b570      	push	{r4, r5, r6, lr}
 8012bca:	4e0d      	ldr	r6, [pc, #52]	; (8012c00 <__libc_init_array+0x38>)
 8012bcc:	4c0d      	ldr	r4, [pc, #52]	; (8012c04 <__libc_init_array+0x3c>)
 8012bce:	1ba4      	subs	r4, r4, r6
 8012bd0:	10a4      	asrs	r4, r4, #2
 8012bd2:	2500      	movs	r5, #0
 8012bd4:	42a5      	cmp	r5, r4
 8012bd6:	d109      	bne.n	8012bec <__libc_init_array+0x24>
 8012bd8:	4e0b      	ldr	r6, [pc, #44]	; (8012c08 <__libc_init_array+0x40>)
 8012bda:	4c0c      	ldr	r4, [pc, #48]	; (8012c0c <__libc_init_array+0x44>)
 8012bdc:	f001 fc86 	bl	80144ec <_init>
 8012be0:	1ba4      	subs	r4, r4, r6
 8012be2:	10a4      	asrs	r4, r4, #2
 8012be4:	2500      	movs	r5, #0
 8012be6:	42a5      	cmp	r5, r4
 8012be8:	d105      	bne.n	8012bf6 <__libc_init_array+0x2e>
 8012bea:	bd70      	pop	{r4, r5, r6, pc}
 8012bec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012bf0:	4798      	blx	r3
 8012bf2:	3501      	adds	r5, #1
 8012bf4:	e7ee      	b.n	8012bd4 <__libc_init_array+0xc>
 8012bf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012bfa:	4798      	blx	r3
 8012bfc:	3501      	adds	r5, #1
 8012bfe:	e7f2      	b.n	8012be6 <__libc_init_array+0x1e>
 8012c00:	080159a0 	.word	0x080159a0
 8012c04:	080159a0 	.word	0x080159a0
 8012c08:	080159a0 	.word	0x080159a0
 8012c0c:	080159a4 	.word	0x080159a4

08012c10 <malloc>:
 8012c10:	4b02      	ldr	r3, [pc, #8]	; (8012c1c <malloc+0xc>)
 8012c12:	4601      	mov	r1, r0
 8012c14:	6818      	ldr	r0, [r3, #0]
 8012c16:	f000 b86d 	b.w	8012cf4 <_malloc_r>
 8012c1a:	bf00      	nop
 8012c1c:	240001a4 	.word	0x240001a4

08012c20 <free>:
 8012c20:	4b02      	ldr	r3, [pc, #8]	; (8012c2c <free+0xc>)
 8012c22:	4601      	mov	r1, r0
 8012c24:	6818      	ldr	r0, [r3, #0]
 8012c26:	f000 b817 	b.w	8012c58 <_free_r>
 8012c2a:	bf00      	nop
 8012c2c:	240001a4 	.word	0x240001a4

08012c30 <memcpy>:
 8012c30:	b510      	push	{r4, lr}
 8012c32:	1e43      	subs	r3, r0, #1
 8012c34:	440a      	add	r2, r1
 8012c36:	4291      	cmp	r1, r2
 8012c38:	d100      	bne.n	8012c3c <memcpy+0xc>
 8012c3a:	bd10      	pop	{r4, pc}
 8012c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c44:	e7f7      	b.n	8012c36 <memcpy+0x6>

08012c46 <memset>:
 8012c46:	4402      	add	r2, r0
 8012c48:	4603      	mov	r3, r0
 8012c4a:	4293      	cmp	r3, r2
 8012c4c:	d100      	bne.n	8012c50 <memset+0xa>
 8012c4e:	4770      	bx	lr
 8012c50:	f803 1b01 	strb.w	r1, [r3], #1
 8012c54:	e7f9      	b.n	8012c4a <memset+0x4>
	...

08012c58 <_free_r>:
 8012c58:	b538      	push	{r3, r4, r5, lr}
 8012c5a:	4605      	mov	r5, r0
 8012c5c:	2900      	cmp	r1, #0
 8012c5e:	d045      	beq.n	8012cec <_free_r+0x94>
 8012c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c64:	1f0c      	subs	r4, r1, #4
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	bfb8      	it	lt
 8012c6a:	18e4      	addlt	r4, r4, r3
 8012c6c:	f000 f8e8 	bl	8012e40 <__malloc_lock>
 8012c70:	4a1f      	ldr	r2, [pc, #124]	; (8012cf0 <_free_r+0x98>)
 8012c72:	6813      	ldr	r3, [r2, #0]
 8012c74:	4610      	mov	r0, r2
 8012c76:	b933      	cbnz	r3, 8012c86 <_free_r+0x2e>
 8012c78:	6063      	str	r3, [r4, #4]
 8012c7a:	6014      	str	r4, [r2, #0]
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c82:	f000 b8de 	b.w	8012e42 <__malloc_unlock>
 8012c86:	42a3      	cmp	r3, r4
 8012c88:	d90c      	bls.n	8012ca4 <_free_r+0x4c>
 8012c8a:	6821      	ldr	r1, [r4, #0]
 8012c8c:	1862      	adds	r2, r4, r1
 8012c8e:	4293      	cmp	r3, r2
 8012c90:	bf04      	itt	eq
 8012c92:	681a      	ldreq	r2, [r3, #0]
 8012c94:	685b      	ldreq	r3, [r3, #4]
 8012c96:	6063      	str	r3, [r4, #4]
 8012c98:	bf04      	itt	eq
 8012c9a:	1852      	addeq	r2, r2, r1
 8012c9c:	6022      	streq	r2, [r4, #0]
 8012c9e:	6004      	str	r4, [r0, #0]
 8012ca0:	e7ec      	b.n	8012c7c <_free_r+0x24>
 8012ca2:	4613      	mov	r3, r2
 8012ca4:	685a      	ldr	r2, [r3, #4]
 8012ca6:	b10a      	cbz	r2, 8012cac <_free_r+0x54>
 8012ca8:	42a2      	cmp	r2, r4
 8012caa:	d9fa      	bls.n	8012ca2 <_free_r+0x4a>
 8012cac:	6819      	ldr	r1, [r3, #0]
 8012cae:	1858      	adds	r0, r3, r1
 8012cb0:	42a0      	cmp	r0, r4
 8012cb2:	d10b      	bne.n	8012ccc <_free_r+0x74>
 8012cb4:	6820      	ldr	r0, [r4, #0]
 8012cb6:	4401      	add	r1, r0
 8012cb8:	1858      	adds	r0, r3, r1
 8012cba:	4282      	cmp	r2, r0
 8012cbc:	6019      	str	r1, [r3, #0]
 8012cbe:	d1dd      	bne.n	8012c7c <_free_r+0x24>
 8012cc0:	6810      	ldr	r0, [r2, #0]
 8012cc2:	6852      	ldr	r2, [r2, #4]
 8012cc4:	605a      	str	r2, [r3, #4]
 8012cc6:	4401      	add	r1, r0
 8012cc8:	6019      	str	r1, [r3, #0]
 8012cca:	e7d7      	b.n	8012c7c <_free_r+0x24>
 8012ccc:	d902      	bls.n	8012cd4 <_free_r+0x7c>
 8012cce:	230c      	movs	r3, #12
 8012cd0:	602b      	str	r3, [r5, #0]
 8012cd2:	e7d3      	b.n	8012c7c <_free_r+0x24>
 8012cd4:	6820      	ldr	r0, [r4, #0]
 8012cd6:	1821      	adds	r1, r4, r0
 8012cd8:	428a      	cmp	r2, r1
 8012cda:	bf04      	itt	eq
 8012cdc:	6811      	ldreq	r1, [r2, #0]
 8012cde:	6852      	ldreq	r2, [r2, #4]
 8012ce0:	6062      	str	r2, [r4, #4]
 8012ce2:	bf04      	itt	eq
 8012ce4:	1809      	addeq	r1, r1, r0
 8012ce6:	6021      	streq	r1, [r4, #0]
 8012ce8:	605c      	str	r4, [r3, #4]
 8012cea:	e7c7      	b.n	8012c7c <_free_r+0x24>
 8012cec:	bd38      	pop	{r3, r4, r5, pc}
 8012cee:	bf00      	nop
 8012cf0:	24009bbc 	.word	0x24009bbc

08012cf4 <_malloc_r>:
 8012cf4:	b570      	push	{r4, r5, r6, lr}
 8012cf6:	1ccd      	adds	r5, r1, #3
 8012cf8:	f025 0503 	bic.w	r5, r5, #3
 8012cfc:	3508      	adds	r5, #8
 8012cfe:	2d0c      	cmp	r5, #12
 8012d00:	bf38      	it	cc
 8012d02:	250c      	movcc	r5, #12
 8012d04:	2d00      	cmp	r5, #0
 8012d06:	4606      	mov	r6, r0
 8012d08:	db01      	blt.n	8012d0e <_malloc_r+0x1a>
 8012d0a:	42a9      	cmp	r1, r5
 8012d0c:	d903      	bls.n	8012d16 <_malloc_r+0x22>
 8012d0e:	230c      	movs	r3, #12
 8012d10:	6033      	str	r3, [r6, #0]
 8012d12:	2000      	movs	r0, #0
 8012d14:	bd70      	pop	{r4, r5, r6, pc}
 8012d16:	f000 f893 	bl	8012e40 <__malloc_lock>
 8012d1a:	4a21      	ldr	r2, [pc, #132]	; (8012da0 <_malloc_r+0xac>)
 8012d1c:	6814      	ldr	r4, [r2, #0]
 8012d1e:	4621      	mov	r1, r4
 8012d20:	b991      	cbnz	r1, 8012d48 <_malloc_r+0x54>
 8012d22:	4c20      	ldr	r4, [pc, #128]	; (8012da4 <_malloc_r+0xb0>)
 8012d24:	6823      	ldr	r3, [r4, #0]
 8012d26:	b91b      	cbnz	r3, 8012d30 <_malloc_r+0x3c>
 8012d28:	4630      	mov	r0, r6
 8012d2a:	f000 f83d 	bl	8012da8 <_sbrk_r>
 8012d2e:	6020      	str	r0, [r4, #0]
 8012d30:	4629      	mov	r1, r5
 8012d32:	4630      	mov	r0, r6
 8012d34:	f000 f838 	bl	8012da8 <_sbrk_r>
 8012d38:	1c43      	adds	r3, r0, #1
 8012d3a:	d124      	bne.n	8012d86 <_malloc_r+0x92>
 8012d3c:	230c      	movs	r3, #12
 8012d3e:	6033      	str	r3, [r6, #0]
 8012d40:	4630      	mov	r0, r6
 8012d42:	f000 f87e 	bl	8012e42 <__malloc_unlock>
 8012d46:	e7e4      	b.n	8012d12 <_malloc_r+0x1e>
 8012d48:	680b      	ldr	r3, [r1, #0]
 8012d4a:	1b5b      	subs	r3, r3, r5
 8012d4c:	d418      	bmi.n	8012d80 <_malloc_r+0x8c>
 8012d4e:	2b0b      	cmp	r3, #11
 8012d50:	d90f      	bls.n	8012d72 <_malloc_r+0x7e>
 8012d52:	600b      	str	r3, [r1, #0]
 8012d54:	50cd      	str	r5, [r1, r3]
 8012d56:	18cc      	adds	r4, r1, r3
 8012d58:	4630      	mov	r0, r6
 8012d5a:	f000 f872 	bl	8012e42 <__malloc_unlock>
 8012d5e:	f104 000b 	add.w	r0, r4, #11
 8012d62:	1d23      	adds	r3, r4, #4
 8012d64:	f020 0007 	bic.w	r0, r0, #7
 8012d68:	1ac3      	subs	r3, r0, r3
 8012d6a:	d0d3      	beq.n	8012d14 <_malloc_r+0x20>
 8012d6c:	425a      	negs	r2, r3
 8012d6e:	50e2      	str	r2, [r4, r3]
 8012d70:	e7d0      	b.n	8012d14 <_malloc_r+0x20>
 8012d72:	428c      	cmp	r4, r1
 8012d74:	684b      	ldr	r3, [r1, #4]
 8012d76:	bf16      	itet	ne
 8012d78:	6063      	strne	r3, [r4, #4]
 8012d7a:	6013      	streq	r3, [r2, #0]
 8012d7c:	460c      	movne	r4, r1
 8012d7e:	e7eb      	b.n	8012d58 <_malloc_r+0x64>
 8012d80:	460c      	mov	r4, r1
 8012d82:	6849      	ldr	r1, [r1, #4]
 8012d84:	e7cc      	b.n	8012d20 <_malloc_r+0x2c>
 8012d86:	1cc4      	adds	r4, r0, #3
 8012d88:	f024 0403 	bic.w	r4, r4, #3
 8012d8c:	42a0      	cmp	r0, r4
 8012d8e:	d005      	beq.n	8012d9c <_malloc_r+0xa8>
 8012d90:	1a21      	subs	r1, r4, r0
 8012d92:	4630      	mov	r0, r6
 8012d94:	f000 f808 	bl	8012da8 <_sbrk_r>
 8012d98:	3001      	adds	r0, #1
 8012d9a:	d0cf      	beq.n	8012d3c <_malloc_r+0x48>
 8012d9c:	6025      	str	r5, [r4, #0]
 8012d9e:	e7db      	b.n	8012d58 <_malloc_r+0x64>
 8012da0:	24009bbc 	.word	0x24009bbc
 8012da4:	24009bc0 	.word	0x24009bc0

08012da8 <_sbrk_r>:
 8012da8:	b538      	push	{r3, r4, r5, lr}
 8012daa:	4c06      	ldr	r4, [pc, #24]	; (8012dc4 <_sbrk_r+0x1c>)
 8012dac:	2300      	movs	r3, #0
 8012dae:	4605      	mov	r5, r0
 8012db0:	4608      	mov	r0, r1
 8012db2:	6023      	str	r3, [r4, #0]
 8012db4:	f7f0 fae0 	bl	8003378 <_sbrk>
 8012db8:	1c43      	adds	r3, r0, #1
 8012dba:	d102      	bne.n	8012dc2 <_sbrk_r+0x1a>
 8012dbc:	6823      	ldr	r3, [r4, #0]
 8012dbe:	b103      	cbz	r3, 8012dc2 <_sbrk_r+0x1a>
 8012dc0:	602b      	str	r3, [r5, #0]
 8012dc2:	bd38      	pop	{r3, r4, r5, pc}
 8012dc4:	24024228 	.word	0x24024228

08012dc8 <sniprintf>:
 8012dc8:	b40c      	push	{r2, r3}
 8012dca:	b530      	push	{r4, r5, lr}
 8012dcc:	4b17      	ldr	r3, [pc, #92]	; (8012e2c <sniprintf+0x64>)
 8012dce:	1e0c      	subs	r4, r1, #0
 8012dd0:	b09d      	sub	sp, #116	; 0x74
 8012dd2:	681d      	ldr	r5, [r3, #0]
 8012dd4:	da08      	bge.n	8012de8 <sniprintf+0x20>
 8012dd6:	238b      	movs	r3, #139	; 0x8b
 8012dd8:	602b      	str	r3, [r5, #0]
 8012dda:	f04f 30ff 	mov.w	r0, #4294967295
 8012dde:	b01d      	add	sp, #116	; 0x74
 8012de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012de4:	b002      	add	sp, #8
 8012de6:	4770      	bx	lr
 8012de8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012dec:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012df0:	bf14      	ite	ne
 8012df2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012df6:	4623      	moveq	r3, r4
 8012df8:	9304      	str	r3, [sp, #16]
 8012dfa:	9307      	str	r3, [sp, #28]
 8012dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012e00:	9002      	str	r0, [sp, #8]
 8012e02:	9006      	str	r0, [sp, #24]
 8012e04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012e08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012e0a:	ab21      	add	r3, sp, #132	; 0x84
 8012e0c:	a902      	add	r1, sp, #8
 8012e0e:	4628      	mov	r0, r5
 8012e10:	9301      	str	r3, [sp, #4]
 8012e12:	f000 f871 	bl	8012ef8 <_svfiprintf_r>
 8012e16:	1c43      	adds	r3, r0, #1
 8012e18:	bfbc      	itt	lt
 8012e1a:	238b      	movlt	r3, #139	; 0x8b
 8012e1c:	602b      	strlt	r3, [r5, #0]
 8012e1e:	2c00      	cmp	r4, #0
 8012e20:	d0dd      	beq.n	8012dde <sniprintf+0x16>
 8012e22:	9b02      	ldr	r3, [sp, #8]
 8012e24:	2200      	movs	r2, #0
 8012e26:	701a      	strb	r2, [r3, #0]
 8012e28:	e7d9      	b.n	8012dde <sniprintf+0x16>
 8012e2a:	bf00      	nop
 8012e2c:	240001a4 	.word	0x240001a4

08012e30 <strcpy>:
 8012e30:	4603      	mov	r3, r0
 8012e32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012e36:	f803 2b01 	strb.w	r2, [r3], #1
 8012e3a:	2a00      	cmp	r2, #0
 8012e3c:	d1f9      	bne.n	8012e32 <strcpy+0x2>
 8012e3e:	4770      	bx	lr

08012e40 <__malloc_lock>:
 8012e40:	4770      	bx	lr

08012e42 <__malloc_unlock>:
 8012e42:	4770      	bx	lr

08012e44 <__ssputs_r>:
 8012e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e48:	688e      	ldr	r6, [r1, #8]
 8012e4a:	429e      	cmp	r6, r3
 8012e4c:	4682      	mov	sl, r0
 8012e4e:	460c      	mov	r4, r1
 8012e50:	4690      	mov	r8, r2
 8012e52:	4699      	mov	r9, r3
 8012e54:	d837      	bhi.n	8012ec6 <__ssputs_r+0x82>
 8012e56:	898a      	ldrh	r2, [r1, #12]
 8012e58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012e5c:	d031      	beq.n	8012ec2 <__ssputs_r+0x7e>
 8012e5e:	6825      	ldr	r5, [r4, #0]
 8012e60:	6909      	ldr	r1, [r1, #16]
 8012e62:	1a6f      	subs	r7, r5, r1
 8012e64:	6965      	ldr	r5, [r4, #20]
 8012e66:	2302      	movs	r3, #2
 8012e68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012e6c:	fb95 f5f3 	sdiv	r5, r5, r3
 8012e70:	f109 0301 	add.w	r3, r9, #1
 8012e74:	443b      	add	r3, r7
 8012e76:	429d      	cmp	r5, r3
 8012e78:	bf38      	it	cc
 8012e7a:	461d      	movcc	r5, r3
 8012e7c:	0553      	lsls	r3, r2, #21
 8012e7e:	d530      	bpl.n	8012ee2 <__ssputs_r+0x9e>
 8012e80:	4629      	mov	r1, r5
 8012e82:	f7ff ff37 	bl	8012cf4 <_malloc_r>
 8012e86:	4606      	mov	r6, r0
 8012e88:	b950      	cbnz	r0, 8012ea0 <__ssputs_r+0x5c>
 8012e8a:	230c      	movs	r3, #12
 8012e8c:	f8ca 3000 	str.w	r3, [sl]
 8012e90:	89a3      	ldrh	r3, [r4, #12]
 8012e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e96:	81a3      	strh	r3, [r4, #12]
 8012e98:	f04f 30ff 	mov.w	r0, #4294967295
 8012e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ea0:	463a      	mov	r2, r7
 8012ea2:	6921      	ldr	r1, [r4, #16]
 8012ea4:	f7ff fec4 	bl	8012c30 <memcpy>
 8012ea8:	89a3      	ldrh	r3, [r4, #12]
 8012eaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012eb2:	81a3      	strh	r3, [r4, #12]
 8012eb4:	6126      	str	r6, [r4, #16]
 8012eb6:	6165      	str	r5, [r4, #20]
 8012eb8:	443e      	add	r6, r7
 8012eba:	1bed      	subs	r5, r5, r7
 8012ebc:	6026      	str	r6, [r4, #0]
 8012ebe:	60a5      	str	r5, [r4, #8]
 8012ec0:	464e      	mov	r6, r9
 8012ec2:	454e      	cmp	r6, r9
 8012ec4:	d900      	bls.n	8012ec8 <__ssputs_r+0x84>
 8012ec6:	464e      	mov	r6, r9
 8012ec8:	4632      	mov	r2, r6
 8012eca:	4641      	mov	r1, r8
 8012ecc:	6820      	ldr	r0, [r4, #0]
 8012ece:	f000 fa93 	bl	80133f8 <memmove>
 8012ed2:	68a3      	ldr	r3, [r4, #8]
 8012ed4:	1b9b      	subs	r3, r3, r6
 8012ed6:	60a3      	str	r3, [r4, #8]
 8012ed8:	6823      	ldr	r3, [r4, #0]
 8012eda:	441e      	add	r6, r3
 8012edc:	6026      	str	r6, [r4, #0]
 8012ede:	2000      	movs	r0, #0
 8012ee0:	e7dc      	b.n	8012e9c <__ssputs_r+0x58>
 8012ee2:	462a      	mov	r2, r5
 8012ee4:	f000 faa1 	bl	801342a <_realloc_r>
 8012ee8:	4606      	mov	r6, r0
 8012eea:	2800      	cmp	r0, #0
 8012eec:	d1e2      	bne.n	8012eb4 <__ssputs_r+0x70>
 8012eee:	6921      	ldr	r1, [r4, #16]
 8012ef0:	4650      	mov	r0, sl
 8012ef2:	f7ff feb1 	bl	8012c58 <_free_r>
 8012ef6:	e7c8      	b.n	8012e8a <__ssputs_r+0x46>

08012ef8 <_svfiprintf_r>:
 8012ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012efc:	461d      	mov	r5, r3
 8012efe:	898b      	ldrh	r3, [r1, #12]
 8012f00:	061f      	lsls	r7, r3, #24
 8012f02:	b09d      	sub	sp, #116	; 0x74
 8012f04:	4680      	mov	r8, r0
 8012f06:	460c      	mov	r4, r1
 8012f08:	4616      	mov	r6, r2
 8012f0a:	d50f      	bpl.n	8012f2c <_svfiprintf_r+0x34>
 8012f0c:	690b      	ldr	r3, [r1, #16]
 8012f0e:	b96b      	cbnz	r3, 8012f2c <_svfiprintf_r+0x34>
 8012f10:	2140      	movs	r1, #64	; 0x40
 8012f12:	f7ff feef 	bl	8012cf4 <_malloc_r>
 8012f16:	6020      	str	r0, [r4, #0]
 8012f18:	6120      	str	r0, [r4, #16]
 8012f1a:	b928      	cbnz	r0, 8012f28 <_svfiprintf_r+0x30>
 8012f1c:	230c      	movs	r3, #12
 8012f1e:	f8c8 3000 	str.w	r3, [r8]
 8012f22:	f04f 30ff 	mov.w	r0, #4294967295
 8012f26:	e0c8      	b.n	80130ba <_svfiprintf_r+0x1c2>
 8012f28:	2340      	movs	r3, #64	; 0x40
 8012f2a:	6163      	str	r3, [r4, #20]
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8012f30:	2320      	movs	r3, #32
 8012f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012f36:	2330      	movs	r3, #48	; 0x30
 8012f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012f3c:	9503      	str	r5, [sp, #12]
 8012f3e:	f04f 0b01 	mov.w	fp, #1
 8012f42:	4637      	mov	r7, r6
 8012f44:	463d      	mov	r5, r7
 8012f46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012f4a:	b10b      	cbz	r3, 8012f50 <_svfiprintf_r+0x58>
 8012f4c:	2b25      	cmp	r3, #37	; 0x25
 8012f4e:	d13e      	bne.n	8012fce <_svfiprintf_r+0xd6>
 8012f50:	ebb7 0a06 	subs.w	sl, r7, r6
 8012f54:	d00b      	beq.n	8012f6e <_svfiprintf_r+0x76>
 8012f56:	4653      	mov	r3, sl
 8012f58:	4632      	mov	r2, r6
 8012f5a:	4621      	mov	r1, r4
 8012f5c:	4640      	mov	r0, r8
 8012f5e:	f7ff ff71 	bl	8012e44 <__ssputs_r>
 8012f62:	3001      	adds	r0, #1
 8012f64:	f000 80a4 	beq.w	80130b0 <_svfiprintf_r+0x1b8>
 8012f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f6a:	4453      	add	r3, sl
 8012f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8012f6e:	783b      	ldrb	r3, [r7, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	f000 809d 	beq.w	80130b0 <_svfiprintf_r+0x1b8>
 8012f76:	2300      	movs	r3, #0
 8012f78:	f04f 32ff 	mov.w	r2, #4294967295
 8012f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f80:	9304      	str	r3, [sp, #16]
 8012f82:	9307      	str	r3, [sp, #28]
 8012f84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012f88:	931a      	str	r3, [sp, #104]	; 0x68
 8012f8a:	462f      	mov	r7, r5
 8012f8c:	2205      	movs	r2, #5
 8012f8e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012f92:	4850      	ldr	r0, [pc, #320]	; (80130d4 <_svfiprintf_r+0x1dc>)
 8012f94:	f7ed f9ac 	bl	80002f0 <memchr>
 8012f98:	9b04      	ldr	r3, [sp, #16]
 8012f9a:	b9d0      	cbnz	r0, 8012fd2 <_svfiprintf_r+0xda>
 8012f9c:	06d9      	lsls	r1, r3, #27
 8012f9e:	bf44      	itt	mi
 8012fa0:	2220      	movmi	r2, #32
 8012fa2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012fa6:	071a      	lsls	r2, r3, #28
 8012fa8:	bf44      	itt	mi
 8012faa:	222b      	movmi	r2, #43	; 0x2b
 8012fac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012fb0:	782a      	ldrb	r2, [r5, #0]
 8012fb2:	2a2a      	cmp	r2, #42	; 0x2a
 8012fb4:	d015      	beq.n	8012fe2 <_svfiprintf_r+0xea>
 8012fb6:	9a07      	ldr	r2, [sp, #28]
 8012fb8:	462f      	mov	r7, r5
 8012fba:	2000      	movs	r0, #0
 8012fbc:	250a      	movs	r5, #10
 8012fbe:	4639      	mov	r1, r7
 8012fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012fc4:	3b30      	subs	r3, #48	; 0x30
 8012fc6:	2b09      	cmp	r3, #9
 8012fc8:	d94d      	bls.n	8013066 <_svfiprintf_r+0x16e>
 8012fca:	b1b8      	cbz	r0, 8012ffc <_svfiprintf_r+0x104>
 8012fcc:	e00f      	b.n	8012fee <_svfiprintf_r+0xf6>
 8012fce:	462f      	mov	r7, r5
 8012fd0:	e7b8      	b.n	8012f44 <_svfiprintf_r+0x4c>
 8012fd2:	4a40      	ldr	r2, [pc, #256]	; (80130d4 <_svfiprintf_r+0x1dc>)
 8012fd4:	1a80      	subs	r0, r0, r2
 8012fd6:	fa0b f000 	lsl.w	r0, fp, r0
 8012fda:	4318      	orrs	r0, r3
 8012fdc:	9004      	str	r0, [sp, #16]
 8012fde:	463d      	mov	r5, r7
 8012fe0:	e7d3      	b.n	8012f8a <_svfiprintf_r+0x92>
 8012fe2:	9a03      	ldr	r2, [sp, #12]
 8012fe4:	1d11      	adds	r1, r2, #4
 8012fe6:	6812      	ldr	r2, [r2, #0]
 8012fe8:	9103      	str	r1, [sp, #12]
 8012fea:	2a00      	cmp	r2, #0
 8012fec:	db01      	blt.n	8012ff2 <_svfiprintf_r+0xfa>
 8012fee:	9207      	str	r2, [sp, #28]
 8012ff0:	e004      	b.n	8012ffc <_svfiprintf_r+0x104>
 8012ff2:	4252      	negs	r2, r2
 8012ff4:	f043 0302 	orr.w	r3, r3, #2
 8012ff8:	9207      	str	r2, [sp, #28]
 8012ffa:	9304      	str	r3, [sp, #16]
 8012ffc:	783b      	ldrb	r3, [r7, #0]
 8012ffe:	2b2e      	cmp	r3, #46	; 0x2e
 8013000:	d10c      	bne.n	801301c <_svfiprintf_r+0x124>
 8013002:	787b      	ldrb	r3, [r7, #1]
 8013004:	2b2a      	cmp	r3, #42	; 0x2a
 8013006:	d133      	bne.n	8013070 <_svfiprintf_r+0x178>
 8013008:	9b03      	ldr	r3, [sp, #12]
 801300a:	1d1a      	adds	r2, r3, #4
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	9203      	str	r2, [sp, #12]
 8013010:	2b00      	cmp	r3, #0
 8013012:	bfb8      	it	lt
 8013014:	f04f 33ff 	movlt.w	r3, #4294967295
 8013018:	3702      	adds	r7, #2
 801301a:	9305      	str	r3, [sp, #20]
 801301c:	4d2e      	ldr	r5, [pc, #184]	; (80130d8 <_svfiprintf_r+0x1e0>)
 801301e:	7839      	ldrb	r1, [r7, #0]
 8013020:	2203      	movs	r2, #3
 8013022:	4628      	mov	r0, r5
 8013024:	f7ed f964 	bl	80002f0 <memchr>
 8013028:	b138      	cbz	r0, 801303a <_svfiprintf_r+0x142>
 801302a:	2340      	movs	r3, #64	; 0x40
 801302c:	1b40      	subs	r0, r0, r5
 801302e:	fa03 f000 	lsl.w	r0, r3, r0
 8013032:	9b04      	ldr	r3, [sp, #16]
 8013034:	4303      	orrs	r3, r0
 8013036:	3701      	adds	r7, #1
 8013038:	9304      	str	r3, [sp, #16]
 801303a:	7839      	ldrb	r1, [r7, #0]
 801303c:	4827      	ldr	r0, [pc, #156]	; (80130dc <_svfiprintf_r+0x1e4>)
 801303e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013042:	2206      	movs	r2, #6
 8013044:	1c7e      	adds	r6, r7, #1
 8013046:	f7ed f953 	bl	80002f0 <memchr>
 801304a:	2800      	cmp	r0, #0
 801304c:	d038      	beq.n	80130c0 <_svfiprintf_r+0x1c8>
 801304e:	4b24      	ldr	r3, [pc, #144]	; (80130e0 <_svfiprintf_r+0x1e8>)
 8013050:	bb13      	cbnz	r3, 8013098 <_svfiprintf_r+0x1a0>
 8013052:	9b03      	ldr	r3, [sp, #12]
 8013054:	3307      	adds	r3, #7
 8013056:	f023 0307 	bic.w	r3, r3, #7
 801305a:	3308      	adds	r3, #8
 801305c:	9303      	str	r3, [sp, #12]
 801305e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013060:	444b      	add	r3, r9
 8013062:	9309      	str	r3, [sp, #36]	; 0x24
 8013064:	e76d      	b.n	8012f42 <_svfiprintf_r+0x4a>
 8013066:	fb05 3202 	mla	r2, r5, r2, r3
 801306a:	2001      	movs	r0, #1
 801306c:	460f      	mov	r7, r1
 801306e:	e7a6      	b.n	8012fbe <_svfiprintf_r+0xc6>
 8013070:	2300      	movs	r3, #0
 8013072:	3701      	adds	r7, #1
 8013074:	9305      	str	r3, [sp, #20]
 8013076:	4619      	mov	r1, r3
 8013078:	250a      	movs	r5, #10
 801307a:	4638      	mov	r0, r7
 801307c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013080:	3a30      	subs	r2, #48	; 0x30
 8013082:	2a09      	cmp	r2, #9
 8013084:	d903      	bls.n	801308e <_svfiprintf_r+0x196>
 8013086:	2b00      	cmp	r3, #0
 8013088:	d0c8      	beq.n	801301c <_svfiprintf_r+0x124>
 801308a:	9105      	str	r1, [sp, #20]
 801308c:	e7c6      	b.n	801301c <_svfiprintf_r+0x124>
 801308e:	fb05 2101 	mla	r1, r5, r1, r2
 8013092:	2301      	movs	r3, #1
 8013094:	4607      	mov	r7, r0
 8013096:	e7f0      	b.n	801307a <_svfiprintf_r+0x182>
 8013098:	ab03      	add	r3, sp, #12
 801309a:	9300      	str	r3, [sp, #0]
 801309c:	4622      	mov	r2, r4
 801309e:	4b11      	ldr	r3, [pc, #68]	; (80130e4 <_svfiprintf_r+0x1ec>)
 80130a0:	a904      	add	r1, sp, #16
 80130a2:	4640      	mov	r0, r8
 80130a4:	f3af 8000 	nop.w
 80130a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80130ac:	4681      	mov	r9, r0
 80130ae:	d1d6      	bne.n	801305e <_svfiprintf_r+0x166>
 80130b0:	89a3      	ldrh	r3, [r4, #12]
 80130b2:	065b      	lsls	r3, r3, #25
 80130b4:	f53f af35 	bmi.w	8012f22 <_svfiprintf_r+0x2a>
 80130b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130ba:	b01d      	add	sp, #116	; 0x74
 80130bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130c0:	ab03      	add	r3, sp, #12
 80130c2:	9300      	str	r3, [sp, #0]
 80130c4:	4622      	mov	r2, r4
 80130c6:	4b07      	ldr	r3, [pc, #28]	; (80130e4 <_svfiprintf_r+0x1ec>)
 80130c8:	a904      	add	r1, sp, #16
 80130ca:	4640      	mov	r0, r8
 80130cc:	f000 f882 	bl	80131d4 <_printf_i>
 80130d0:	e7ea      	b.n	80130a8 <_svfiprintf_r+0x1b0>
 80130d2:	bf00      	nop
 80130d4:	08015643 	.word	0x08015643
 80130d8:	08015649 	.word	0x08015649
 80130dc:	0801564d 	.word	0x0801564d
 80130e0:	00000000 	.word	0x00000000
 80130e4:	08012e45 	.word	0x08012e45

080130e8 <_printf_common>:
 80130e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130ec:	4691      	mov	r9, r2
 80130ee:	461f      	mov	r7, r3
 80130f0:	688a      	ldr	r2, [r1, #8]
 80130f2:	690b      	ldr	r3, [r1, #16]
 80130f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80130f8:	4293      	cmp	r3, r2
 80130fa:	bfb8      	it	lt
 80130fc:	4613      	movlt	r3, r2
 80130fe:	f8c9 3000 	str.w	r3, [r9]
 8013102:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013106:	4606      	mov	r6, r0
 8013108:	460c      	mov	r4, r1
 801310a:	b112      	cbz	r2, 8013112 <_printf_common+0x2a>
 801310c:	3301      	adds	r3, #1
 801310e:	f8c9 3000 	str.w	r3, [r9]
 8013112:	6823      	ldr	r3, [r4, #0]
 8013114:	0699      	lsls	r1, r3, #26
 8013116:	bf42      	ittt	mi
 8013118:	f8d9 3000 	ldrmi.w	r3, [r9]
 801311c:	3302      	addmi	r3, #2
 801311e:	f8c9 3000 	strmi.w	r3, [r9]
 8013122:	6825      	ldr	r5, [r4, #0]
 8013124:	f015 0506 	ands.w	r5, r5, #6
 8013128:	d107      	bne.n	801313a <_printf_common+0x52>
 801312a:	f104 0a19 	add.w	sl, r4, #25
 801312e:	68e3      	ldr	r3, [r4, #12]
 8013130:	f8d9 2000 	ldr.w	r2, [r9]
 8013134:	1a9b      	subs	r3, r3, r2
 8013136:	42ab      	cmp	r3, r5
 8013138:	dc28      	bgt.n	801318c <_printf_common+0xa4>
 801313a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801313e:	6822      	ldr	r2, [r4, #0]
 8013140:	3300      	adds	r3, #0
 8013142:	bf18      	it	ne
 8013144:	2301      	movne	r3, #1
 8013146:	0692      	lsls	r2, r2, #26
 8013148:	d42d      	bmi.n	80131a6 <_printf_common+0xbe>
 801314a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801314e:	4639      	mov	r1, r7
 8013150:	4630      	mov	r0, r6
 8013152:	47c0      	blx	r8
 8013154:	3001      	adds	r0, #1
 8013156:	d020      	beq.n	801319a <_printf_common+0xb2>
 8013158:	6823      	ldr	r3, [r4, #0]
 801315a:	68e5      	ldr	r5, [r4, #12]
 801315c:	f8d9 2000 	ldr.w	r2, [r9]
 8013160:	f003 0306 	and.w	r3, r3, #6
 8013164:	2b04      	cmp	r3, #4
 8013166:	bf08      	it	eq
 8013168:	1aad      	subeq	r5, r5, r2
 801316a:	68a3      	ldr	r3, [r4, #8]
 801316c:	6922      	ldr	r2, [r4, #16]
 801316e:	bf0c      	ite	eq
 8013170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013174:	2500      	movne	r5, #0
 8013176:	4293      	cmp	r3, r2
 8013178:	bfc4      	itt	gt
 801317a:	1a9b      	subgt	r3, r3, r2
 801317c:	18ed      	addgt	r5, r5, r3
 801317e:	f04f 0900 	mov.w	r9, #0
 8013182:	341a      	adds	r4, #26
 8013184:	454d      	cmp	r5, r9
 8013186:	d11a      	bne.n	80131be <_printf_common+0xd6>
 8013188:	2000      	movs	r0, #0
 801318a:	e008      	b.n	801319e <_printf_common+0xb6>
 801318c:	2301      	movs	r3, #1
 801318e:	4652      	mov	r2, sl
 8013190:	4639      	mov	r1, r7
 8013192:	4630      	mov	r0, r6
 8013194:	47c0      	blx	r8
 8013196:	3001      	adds	r0, #1
 8013198:	d103      	bne.n	80131a2 <_printf_common+0xba>
 801319a:	f04f 30ff 	mov.w	r0, #4294967295
 801319e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131a2:	3501      	adds	r5, #1
 80131a4:	e7c3      	b.n	801312e <_printf_common+0x46>
 80131a6:	18e1      	adds	r1, r4, r3
 80131a8:	1c5a      	adds	r2, r3, #1
 80131aa:	2030      	movs	r0, #48	; 0x30
 80131ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80131b0:	4422      	add	r2, r4
 80131b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80131b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80131ba:	3302      	adds	r3, #2
 80131bc:	e7c5      	b.n	801314a <_printf_common+0x62>
 80131be:	2301      	movs	r3, #1
 80131c0:	4622      	mov	r2, r4
 80131c2:	4639      	mov	r1, r7
 80131c4:	4630      	mov	r0, r6
 80131c6:	47c0      	blx	r8
 80131c8:	3001      	adds	r0, #1
 80131ca:	d0e6      	beq.n	801319a <_printf_common+0xb2>
 80131cc:	f109 0901 	add.w	r9, r9, #1
 80131d0:	e7d8      	b.n	8013184 <_printf_common+0x9c>
	...

080131d4 <_printf_i>:
 80131d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80131d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80131dc:	460c      	mov	r4, r1
 80131de:	7e09      	ldrb	r1, [r1, #24]
 80131e0:	b085      	sub	sp, #20
 80131e2:	296e      	cmp	r1, #110	; 0x6e
 80131e4:	4617      	mov	r7, r2
 80131e6:	4606      	mov	r6, r0
 80131e8:	4698      	mov	r8, r3
 80131ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80131ec:	f000 80b3 	beq.w	8013356 <_printf_i+0x182>
 80131f0:	d822      	bhi.n	8013238 <_printf_i+0x64>
 80131f2:	2963      	cmp	r1, #99	; 0x63
 80131f4:	d036      	beq.n	8013264 <_printf_i+0x90>
 80131f6:	d80a      	bhi.n	801320e <_printf_i+0x3a>
 80131f8:	2900      	cmp	r1, #0
 80131fa:	f000 80b9 	beq.w	8013370 <_printf_i+0x19c>
 80131fe:	2958      	cmp	r1, #88	; 0x58
 8013200:	f000 8083 	beq.w	801330a <_printf_i+0x136>
 8013204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013208:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801320c:	e032      	b.n	8013274 <_printf_i+0xa0>
 801320e:	2964      	cmp	r1, #100	; 0x64
 8013210:	d001      	beq.n	8013216 <_printf_i+0x42>
 8013212:	2969      	cmp	r1, #105	; 0x69
 8013214:	d1f6      	bne.n	8013204 <_printf_i+0x30>
 8013216:	6820      	ldr	r0, [r4, #0]
 8013218:	6813      	ldr	r3, [r2, #0]
 801321a:	0605      	lsls	r5, r0, #24
 801321c:	f103 0104 	add.w	r1, r3, #4
 8013220:	d52a      	bpl.n	8013278 <_printf_i+0xa4>
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	6011      	str	r1, [r2, #0]
 8013226:	2b00      	cmp	r3, #0
 8013228:	da03      	bge.n	8013232 <_printf_i+0x5e>
 801322a:	222d      	movs	r2, #45	; 0x2d
 801322c:	425b      	negs	r3, r3
 801322e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013232:	486f      	ldr	r0, [pc, #444]	; (80133f0 <_printf_i+0x21c>)
 8013234:	220a      	movs	r2, #10
 8013236:	e039      	b.n	80132ac <_printf_i+0xd8>
 8013238:	2973      	cmp	r1, #115	; 0x73
 801323a:	f000 809d 	beq.w	8013378 <_printf_i+0x1a4>
 801323e:	d808      	bhi.n	8013252 <_printf_i+0x7e>
 8013240:	296f      	cmp	r1, #111	; 0x6f
 8013242:	d020      	beq.n	8013286 <_printf_i+0xb2>
 8013244:	2970      	cmp	r1, #112	; 0x70
 8013246:	d1dd      	bne.n	8013204 <_printf_i+0x30>
 8013248:	6823      	ldr	r3, [r4, #0]
 801324a:	f043 0320 	orr.w	r3, r3, #32
 801324e:	6023      	str	r3, [r4, #0]
 8013250:	e003      	b.n	801325a <_printf_i+0x86>
 8013252:	2975      	cmp	r1, #117	; 0x75
 8013254:	d017      	beq.n	8013286 <_printf_i+0xb2>
 8013256:	2978      	cmp	r1, #120	; 0x78
 8013258:	d1d4      	bne.n	8013204 <_printf_i+0x30>
 801325a:	2378      	movs	r3, #120	; 0x78
 801325c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013260:	4864      	ldr	r0, [pc, #400]	; (80133f4 <_printf_i+0x220>)
 8013262:	e055      	b.n	8013310 <_printf_i+0x13c>
 8013264:	6813      	ldr	r3, [r2, #0]
 8013266:	1d19      	adds	r1, r3, #4
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	6011      	str	r1, [r2, #0]
 801326c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013274:	2301      	movs	r3, #1
 8013276:	e08c      	b.n	8013392 <_printf_i+0x1be>
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	6011      	str	r1, [r2, #0]
 801327c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013280:	bf18      	it	ne
 8013282:	b21b      	sxthne	r3, r3
 8013284:	e7cf      	b.n	8013226 <_printf_i+0x52>
 8013286:	6813      	ldr	r3, [r2, #0]
 8013288:	6825      	ldr	r5, [r4, #0]
 801328a:	1d18      	adds	r0, r3, #4
 801328c:	6010      	str	r0, [r2, #0]
 801328e:	0628      	lsls	r0, r5, #24
 8013290:	d501      	bpl.n	8013296 <_printf_i+0xc2>
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	e002      	b.n	801329c <_printf_i+0xc8>
 8013296:	0668      	lsls	r0, r5, #25
 8013298:	d5fb      	bpl.n	8013292 <_printf_i+0xbe>
 801329a:	881b      	ldrh	r3, [r3, #0]
 801329c:	4854      	ldr	r0, [pc, #336]	; (80133f0 <_printf_i+0x21c>)
 801329e:	296f      	cmp	r1, #111	; 0x6f
 80132a0:	bf14      	ite	ne
 80132a2:	220a      	movne	r2, #10
 80132a4:	2208      	moveq	r2, #8
 80132a6:	2100      	movs	r1, #0
 80132a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80132ac:	6865      	ldr	r5, [r4, #4]
 80132ae:	60a5      	str	r5, [r4, #8]
 80132b0:	2d00      	cmp	r5, #0
 80132b2:	f2c0 8095 	blt.w	80133e0 <_printf_i+0x20c>
 80132b6:	6821      	ldr	r1, [r4, #0]
 80132b8:	f021 0104 	bic.w	r1, r1, #4
 80132bc:	6021      	str	r1, [r4, #0]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d13d      	bne.n	801333e <_printf_i+0x16a>
 80132c2:	2d00      	cmp	r5, #0
 80132c4:	f040 808e 	bne.w	80133e4 <_printf_i+0x210>
 80132c8:	4665      	mov	r5, ip
 80132ca:	2a08      	cmp	r2, #8
 80132cc:	d10b      	bne.n	80132e6 <_printf_i+0x112>
 80132ce:	6823      	ldr	r3, [r4, #0]
 80132d0:	07db      	lsls	r3, r3, #31
 80132d2:	d508      	bpl.n	80132e6 <_printf_i+0x112>
 80132d4:	6923      	ldr	r3, [r4, #16]
 80132d6:	6862      	ldr	r2, [r4, #4]
 80132d8:	429a      	cmp	r2, r3
 80132da:	bfde      	ittt	le
 80132dc:	2330      	movle	r3, #48	; 0x30
 80132de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80132e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80132e6:	ebac 0305 	sub.w	r3, ip, r5
 80132ea:	6123      	str	r3, [r4, #16]
 80132ec:	f8cd 8000 	str.w	r8, [sp]
 80132f0:	463b      	mov	r3, r7
 80132f2:	aa03      	add	r2, sp, #12
 80132f4:	4621      	mov	r1, r4
 80132f6:	4630      	mov	r0, r6
 80132f8:	f7ff fef6 	bl	80130e8 <_printf_common>
 80132fc:	3001      	adds	r0, #1
 80132fe:	d14d      	bne.n	801339c <_printf_i+0x1c8>
 8013300:	f04f 30ff 	mov.w	r0, #4294967295
 8013304:	b005      	add	sp, #20
 8013306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801330a:	4839      	ldr	r0, [pc, #228]	; (80133f0 <_printf_i+0x21c>)
 801330c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013310:	6813      	ldr	r3, [r2, #0]
 8013312:	6821      	ldr	r1, [r4, #0]
 8013314:	1d1d      	adds	r5, r3, #4
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	6015      	str	r5, [r2, #0]
 801331a:	060a      	lsls	r2, r1, #24
 801331c:	d50b      	bpl.n	8013336 <_printf_i+0x162>
 801331e:	07ca      	lsls	r2, r1, #31
 8013320:	bf44      	itt	mi
 8013322:	f041 0120 	orrmi.w	r1, r1, #32
 8013326:	6021      	strmi	r1, [r4, #0]
 8013328:	b91b      	cbnz	r3, 8013332 <_printf_i+0x15e>
 801332a:	6822      	ldr	r2, [r4, #0]
 801332c:	f022 0220 	bic.w	r2, r2, #32
 8013330:	6022      	str	r2, [r4, #0]
 8013332:	2210      	movs	r2, #16
 8013334:	e7b7      	b.n	80132a6 <_printf_i+0xd2>
 8013336:	064d      	lsls	r5, r1, #25
 8013338:	bf48      	it	mi
 801333a:	b29b      	uxthmi	r3, r3
 801333c:	e7ef      	b.n	801331e <_printf_i+0x14a>
 801333e:	4665      	mov	r5, ip
 8013340:	fbb3 f1f2 	udiv	r1, r3, r2
 8013344:	fb02 3311 	mls	r3, r2, r1, r3
 8013348:	5cc3      	ldrb	r3, [r0, r3]
 801334a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801334e:	460b      	mov	r3, r1
 8013350:	2900      	cmp	r1, #0
 8013352:	d1f5      	bne.n	8013340 <_printf_i+0x16c>
 8013354:	e7b9      	b.n	80132ca <_printf_i+0xf6>
 8013356:	6813      	ldr	r3, [r2, #0]
 8013358:	6825      	ldr	r5, [r4, #0]
 801335a:	6961      	ldr	r1, [r4, #20]
 801335c:	1d18      	adds	r0, r3, #4
 801335e:	6010      	str	r0, [r2, #0]
 8013360:	0628      	lsls	r0, r5, #24
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	d501      	bpl.n	801336a <_printf_i+0x196>
 8013366:	6019      	str	r1, [r3, #0]
 8013368:	e002      	b.n	8013370 <_printf_i+0x19c>
 801336a:	066a      	lsls	r2, r5, #25
 801336c:	d5fb      	bpl.n	8013366 <_printf_i+0x192>
 801336e:	8019      	strh	r1, [r3, #0]
 8013370:	2300      	movs	r3, #0
 8013372:	6123      	str	r3, [r4, #16]
 8013374:	4665      	mov	r5, ip
 8013376:	e7b9      	b.n	80132ec <_printf_i+0x118>
 8013378:	6813      	ldr	r3, [r2, #0]
 801337a:	1d19      	adds	r1, r3, #4
 801337c:	6011      	str	r1, [r2, #0]
 801337e:	681d      	ldr	r5, [r3, #0]
 8013380:	6862      	ldr	r2, [r4, #4]
 8013382:	2100      	movs	r1, #0
 8013384:	4628      	mov	r0, r5
 8013386:	f7ec ffb3 	bl	80002f0 <memchr>
 801338a:	b108      	cbz	r0, 8013390 <_printf_i+0x1bc>
 801338c:	1b40      	subs	r0, r0, r5
 801338e:	6060      	str	r0, [r4, #4]
 8013390:	6863      	ldr	r3, [r4, #4]
 8013392:	6123      	str	r3, [r4, #16]
 8013394:	2300      	movs	r3, #0
 8013396:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801339a:	e7a7      	b.n	80132ec <_printf_i+0x118>
 801339c:	6923      	ldr	r3, [r4, #16]
 801339e:	462a      	mov	r2, r5
 80133a0:	4639      	mov	r1, r7
 80133a2:	4630      	mov	r0, r6
 80133a4:	47c0      	blx	r8
 80133a6:	3001      	adds	r0, #1
 80133a8:	d0aa      	beq.n	8013300 <_printf_i+0x12c>
 80133aa:	6823      	ldr	r3, [r4, #0]
 80133ac:	079b      	lsls	r3, r3, #30
 80133ae:	d413      	bmi.n	80133d8 <_printf_i+0x204>
 80133b0:	68e0      	ldr	r0, [r4, #12]
 80133b2:	9b03      	ldr	r3, [sp, #12]
 80133b4:	4298      	cmp	r0, r3
 80133b6:	bfb8      	it	lt
 80133b8:	4618      	movlt	r0, r3
 80133ba:	e7a3      	b.n	8013304 <_printf_i+0x130>
 80133bc:	2301      	movs	r3, #1
 80133be:	464a      	mov	r2, r9
 80133c0:	4639      	mov	r1, r7
 80133c2:	4630      	mov	r0, r6
 80133c4:	47c0      	blx	r8
 80133c6:	3001      	adds	r0, #1
 80133c8:	d09a      	beq.n	8013300 <_printf_i+0x12c>
 80133ca:	3501      	adds	r5, #1
 80133cc:	68e3      	ldr	r3, [r4, #12]
 80133ce:	9a03      	ldr	r2, [sp, #12]
 80133d0:	1a9b      	subs	r3, r3, r2
 80133d2:	42ab      	cmp	r3, r5
 80133d4:	dcf2      	bgt.n	80133bc <_printf_i+0x1e8>
 80133d6:	e7eb      	b.n	80133b0 <_printf_i+0x1dc>
 80133d8:	2500      	movs	r5, #0
 80133da:	f104 0919 	add.w	r9, r4, #25
 80133de:	e7f5      	b.n	80133cc <_printf_i+0x1f8>
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d1ac      	bne.n	801333e <_printf_i+0x16a>
 80133e4:	7803      	ldrb	r3, [r0, #0]
 80133e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80133ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80133ee:	e76c      	b.n	80132ca <_printf_i+0xf6>
 80133f0:	08015654 	.word	0x08015654
 80133f4:	08015665 	.word	0x08015665

080133f8 <memmove>:
 80133f8:	4288      	cmp	r0, r1
 80133fa:	b510      	push	{r4, lr}
 80133fc:	eb01 0302 	add.w	r3, r1, r2
 8013400:	d807      	bhi.n	8013412 <memmove+0x1a>
 8013402:	1e42      	subs	r2, r0, #1
 8013404:	4299      	cmp	r1, r3
 8013406:	d00a      	beq.n	801341e <memmove+0x26>
 8013408:	f811 4b01 	ldrb.w	r4, [r1], #1
 801340c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013410:	e7f8      	b.n	8013404 <memmove+0xc>
 8013412:	4283      	cmp	r3, r0
 8013414:	d9f5      	bls.n	8013402 <memmove+0xa>
 8013416:	1881      	adds	r1, r0, r2
 8013418:	1ad2      	subs	r2, r2, r3
 801341a:	42d3      	cmn	r3, r2
 801341c:	d100      	bne.n	8013420 <memmove+0x28>
 801341e:	bd10      	pop	{r4, pc}
 8013420:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013424:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013428:	e7f7      	b.n	801341a <memmove+0x22>

0801342a <_realloc_r>:
 801342a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801342c:	4607      	mov	r7, r0
 801342e:	4614      	mov	r4, r2
 8013430:	460e      	mov	r6, r1
 8013432:	b921      	cbnz	r1, 801343e <_realloc_r+0x14>
 8013434:	4611      	mov	r1, r2
 8013436:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801343a:	f7ff bc5b 	b.w	8012cf4 <_malloc_r>
 801343e:	b922      	cbnz	r2, 801344a <_realloc_r+0x20>
 8013440:	f7ff fc0a 	bl	8012c58 <_free_r>
 8013444:	4625      	mov	r5, r4
 8013446:	4628      	mov	r0, r5
 8013448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801344a:	f000 f814 	bl	8013476 <_malloc_usable_size_r>
 801344e:	42a0      	cmp	r0, r4
 8013450:	d20f      	bcs.n	8013472 <_realloc_r+0x48>
 8013452:	4621      	mov	r1, r4
 8013454:	4638      	mov	r0, r7
 8013456:	f7ff fc4d 	bl	8012cf4 <_malloc_r>
 801345a:	4605      	mov	r5, r0
 801345c:	2800      	cmp	r0, #0
 801345e:	d0f2      	beq.n	8013446 <_realloc_r+0x1c>
 8013460:	4631      	mov	r1, r6
 8013462:	4622      	mov	r2, r4
 8013464:	f7ff fbe4 	bl	8012c30 <memcpy>
 8013468:	4631      	mov	r1, r6
 801346a:	4638      	mov	r0, r7
 801346c:	f7ff fbf4 	bl	8012c58 <_free_r>
 8013470:	e7e9      	b.n	8013446 <_realloc_r+0x1c>
 8013472:	4635      	mov	r5, r6
 8013474:	e7e7      	b.n	8013446 <_realloc_r+0x1c>

08013476 <_malloc_usable_size_r>:
 8013476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801347a:	1f18      	subs	r0, r3, #4
 801347c:	2b00      	cmp	r3, #0
 801347e:	bfbc      	itt	lt
 8013480:	580b      	ldrlt	r3, [r1, r0]
 8013482:	18c0      	addlt	r0, r0, r3
 8013484:	4770      	bx	lr

08013486 <checkint>:
 8013486:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801348a:	2b7e      	cmp	r3, #126	; 0x7e
 801348c:	dd10      	ble.n	80134b0 <checkint+0x2a>
 801348e:	2b96      	cmp	r3, #150	; 0x96
 8013490:	dc0c      	bgt.n	80134ac <checkint+0x26>
 8013492:	2201      	movs	r2, #1
 8013494:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8013498:	fa02 f303 	lsl.w	r3, r2, r3
 801349c:	1e5a      	subs	r2, r3, #1
 801349e:	4202      	tst	r2, r0
 80134a0:	d106      	bne.n	80134b0 <checkint+0x2a>
 80134a2:	4203      	tst	r3, r0
 80134a4:	bf0c      	ite	eq
 80134a6:	2002      	moveq	r0, #2
 80134a8:	2001      	movne	r0, #1
 80134aa:	4770      	bx	lr
 80134ac:	2002      	movs	r0, #2
 80134ae:	4770      	bx	lr
 80134b0:	2000      	movs	r0, #0
 80134b2:	4770      	bx	lr
 80134b4:	0000      	movs	r0, r0
	...

080134b8 <powf>:
 80134b8:	ee10 1a10 	vmov	r1, s0
 80134bc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80134c0:	ee10 4a90 	vmov	r4, s1
 80134c4:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80134c8:	0062      	lsls	r2, r4, #1
 80134ca:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80134ce:	eef0 4a60 	vmov.f32	s9, s1
 80134d2:	f102 30ff 	add.w	r0, r2, #4294967295
 80134d6:	4b92      	ldr	r3, [pc, #584]	; (8013720 <powf+0x268>)
 80134d8:	d255      	bcs.n	8013586 <powf+0xce>
 80134da:	4298      	cmp	r0, r3
 80134dc:	d855      	bhi.n	801358a <powf+0xd2>
 80134de:	2000      	movs	r0, #0
 80134e0:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 80134e4:	4a8f      	ldr	r2, [pc, #572]	; (8013724 <powf+0x26c>)
 80134e6:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 80134ea:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 80134ee:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 80134f2:	0ddb      	lsrs	r3, r3, #23
 80134f4:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 80134f8:	05db      	lsls	r3, r3, #23
 80134fa:	ed94 6b00 	vldr	d6, [r4]
 80134fe:	1ac9      	subs	r1, r1, r3
 8013500:	ee07 1a90 	vmov	s15, r1
 8013504:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8013508:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801350c:	eea6 2b07 	vfma.f64	d2, d6, d7
 8013510:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 8013514:	ee22 6b02 	vmul.f64	d6, d2, d2
 8013518:	eea2 7b05 	vfma.f64	d7, d2, d5
 801351c:	15db      	asrs	r3, r3, #23
 801351e:	ed94 5b02 	vldr	d5, [r4, #8]
 8013522:	ee00 3a10 	vmov	s0, r3
 8013526:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 801352a:	ee30 0b05 	vadd.f64	d0, d0, d5
 801352e:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 8013532:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 8013536:	eea2 0b05 	vfma.f64	d0, d2, d5
 801353a:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 801353e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8013542:	eea6 0b05 	vfma.f64	d0, d6, d5
 8013546:	ee26 6b06 	vmul.f64	d6, d6, d6
 801354a:	eea7 0b06 	vfma.f64	d0, d7, d6
 801354e:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 8013552:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013556:	ee10 3a90 	vmov	r3, s1
 801355a:	2500      	movs	r5, #0
 801355c:	0bda      	lsrs	r2, r3, #15
 801355e:	2300      	movs	r3, #0
 8013560:	b292      	uxth	r2, r2
 8013562:	f248 04be 	movw	r4, #32958	; 0x80be
 8013566:	429d      	cmp	r5, r3
 8013568:	bf08      	it	eq
 801356a:	4294      	cmpeq	r4, r2
 801356c:	f080 8094 	bcs.w	8013698 <powf+0x1e0>
 8013570:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8013708 <powf+0x250>
 8013574:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801357c:	dd76      	ble.n	801366c <powf+0x1b4>
 801357e:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8013582:	f000 be57 	b.w	8014234 <__math_oflowf>
 8013586:	4298      	cmp	r0, r3
 8013588:	d92d      	bls.n	80135e6 <powf+0x12e>
 801358a:	b952      	cbnz	r2, 80135a2 <powf+0xea>
 801358c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8013590:	005b      	lsls	r3, r3, #1
 8013592:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8013596:	f240 80ae 	bls.w	80136f6 <powf+0x23e>
 801359a:	ee30 0a24 	vadd.f32	s0, s0, s9
 801359e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80135a2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80135a6:	d105      	bne.n	80135b4 <powf+0xfc>
 80135a8:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80135ac:	0064      	lsls	r4, r4, #1
 80135ae:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80135b2:	e7f0      	b.n	8013596 <powf+0xde>
 80135b4:	004b      	lsls	r3, r1, #1
 80135b6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80135ba:	d8ee      	bhi.n	801359a <powf+0xe2>
 80135bc:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80135c0:	d1eb      	bne.n	801359a <powf+0xe2>
 80135c2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80135c6:	f000 8096 	beq.w	80136f6 <powf+0x23e>
 80135ca:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80135ce:	ea6f 0404 	mvn.w	r4, r4
 80135d2:	bf34      	ite	cc
 80135d4:	2300      	movcc	r3, #0
 80135d6:	2301      	movcs	r3, #1
 80135d8:	0fe4      	lsrs	r4, r4, #31
 80135da:	42a3      	cmp	r3, r4
 80135dc:	f040 808e 	bne.w	80136fc <powf+0x244>
 80135e0:	ee24 0aa4 	vmul.f32	s0, s9, s9
 80135e4:	e7db      	b.n	801359e <powf+0xe6>
 80135e6:	004d      	lsls	r5, r1, #1
 80135e8:	1e6a      	subs	r2, r5, #1
 80135ea:	429a      	cmp	r2, r3
 80135ec:	d91b      	bls.n	8013626 <powf+0x16e>
 80135ee:	2900      	cmp	r1, #0
 80135f0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80135f4:	da0e      	bge.n	8013614 <powf+0x15c>
 80135f6:	ee10 0a90 	vmov	r0, s1
 80135fa:	f7ff ff44 	bl	8013486 <checkint>
 80135fe:	2801      	cmp	r0, #1
 8013600:	d108      	bne.n	8013614 <powf+0x15c>
 8013602:	eeb1 0a40 	vneg.f32	s0, s0
 8013606:	b93d      	cbnz	r5, 8013618 <powf+0x160>
 8013608:	2c00      	cmp	r4, #0
 801360a:	dac8      	bge.n	801359e <powf+0xe6>
 801360c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8013610:	f000 be16 	b.w	8014240 <__math_divzerof>
 8013614:	2000      	movs	r0, #0
 8013616:	e7f6      	b.n	8013606 <powf+0x14e>
 8013618:	2c00      	cmp	r4, #0
 801361a:	dac0      	bge.n	801359e <powf+0xe6>
 801361c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013620:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8013624:	e7bb      	b.n	801359e <powf+0xe6>
 8013626:	2900      	cmp	r1, #0
 8013628:	da1e      	bge.n	8013668 <powf+0x1b0>
 801362a:	ee10 0a90 	vmov	r0, s1
 801362e:	f7ff ff2a 	bl	8013486 <checkint>
 8013632:	b918      	cbnz	r0, 801363c <powf+0x184>
 8013634:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8013638:	f000 be12 	b.w	8014260 <__math_invalidf>
 801363c:	2801      	cmp	r0, #1
 801363e:	bf0c      	ite	eq
 8013640:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8013644:	2000      	movne	r0, #0
 8013646:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801364a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801364e:	f4bf af47 	bcs.w	80134e0 <powf+0x28>
 8013652:	eddf 0a35 	vldr	s1, [pc, #212]	; 8013728 <powf+0x270>
 8013656:	ee20 0a20 	vmul.f32	s0, s0, s1
 801365a:	ee10 3a10 	vmov	r3, s0
 801365e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013662:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8013666:	e73b      	b.n	80134e0 <powf+0x28>
 8013668:	2000      	movs	r0, #0
 801366a:	e7ee      	b.n	801364a <powf+0x192>
 801366c:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8013710 <powf+0x258>
 8013670:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013678:	d803      	bhi.n	8013682 <powf+0x1ca>
 801367a:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 801367e:	f000 bdcd 	b.w	801421c <__math_uflowf>
 8013682:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8013718 <powf+0x260>
 8013686:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801368a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801368e:	d503      	bpl.n	8013698 <powf+0x1e0>
 8013690:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8013694:	f000 bdc8 	b.w	8014228 <__math_may_uflowf>
 8013698:	4924      	ldr	r1, [pc, #144]	; (801372c <powf+0x274>)
 801369a:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 801369e:	ee30 6b07 	vadd.f64	d6, d0, d7
 80136a2:	ec55 4b16 	vmov	r4, r5, d6
 80136a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80136aa:	f004 021f 	and.w	r2, r4, #31
 80136ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80136b2:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 80136b6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80136ba:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80136be:	e9d2 6700 	ldrd	r6, r7, [r2]
 80136c2:	eea0 7b06 	vfma.f64	d7, d0, d6
 80136c6:	1824      	adds	r4, r4, r0
 80136c8:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 80136cc:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 80136d0:	2000      	movs	r0, #0
 80136d2:	1982      	adds	r2, r0, r6
 80136d4:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 80136d8:	eb41 0307 	adc.w	r3, r1, r7
 80136dc:	eea0 6b05 	vfma.f64	d6, d0, d5
 80136e0:	ee20 0b00 	vmul.f64	d0, d0, d0
 80136e4:	eea6 7b00 	vfma.f64	d7, d6, d0
 80136e8:	ec43 2b16 	vmov	d6, r2, r3
 80136ec:	ee27 0b06 	vmul.f64	d0, d7, d6
 80136f0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80136f4:	e753      	b.n	801359e <powf+0xe6>
 80136f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80136fa:	e750      	b.n	801359e <powf+0xe6>
 80136fc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8013730 <powf+0x278>
 8013700:	e74d      	b.n	801359e <powf+0xe6>
 8013702:	bf00      	nop
 8013704:	f3af 8000 	nop.w
 8013708:	ffd1d571 	.word	0xffd1d571
 801370c:	405fffff 	.word	0x405fffff
 8013710:	00000000 	.word	0x00000000
 8013714:	c062c000 	.word	0xc062c000
 8013718:	00000000 	.word	0x00000000
 801371c:	c062a000 	.word	0xc062a000
 8013720:	fefffffe 	.word	0xfefffffe
 8013724:	080156d8 	.word	0x080156d8
 8013728:	4b000000 	.word	0x4b000000
 801372c:	08015850 	.word	0x08015850
	...

08013738 <pow>:
 8013738:	b570      	push	{r4, r5, r6, lr}
 801373a:	ed2d 8b0a 	vpush	{d8-d12}
 801373e:	eeb0 9b40 	vmov.f64	d9, d0
 8013742:	eeb0 8b41 	vmov.f64	d8, d1
 8013746:	4c8c      	ldr	r4, [pc, #560]	; (8013978 <pow+0x240>)
 8013748:	b08a      	sub	sp, #40	; 0x28
 801374a:	f000 f9c1 	bl	8013ad0 <__ieee754_pow>
 801374e:	f994 3000 	ldrsb.w	r3, [r4]
 8013752:	eeb0 ab40 	vmov.f64	d10, d0
 8013756:	1c5a      	adds	r2, r3, #1
 8013758:	4626      	mov	r6, r4
 801375a:	d04b      	beq.n	80137f4 <pow+0xbc>
 801375c:	eeb4 8b48 	vcmp.f64	d8, d8
 8013760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013764:	d646      	bvs.n	80137f4 <pow+0xbc>
 8013766:	eeb4 9b49 	vcmp.f64	d9, d9
 801376a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801376e:	d719      	bvc.n	80137a4 <pow+0x6c>
 8013770:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013778:	d13c      	bne.n	80137f4 <pow+0xbc>
 801377a:	2201      	movs	r2, #1
 801377c:	9200      	str	r2, [sp, #0]
 801377e:	497f      	ldr	r1, [pc, #508]	; (801397c <pow+0x244>)
 8013780:	4a7f      	ldr	r2, [pc, #508]	; (8013980 <pow+0x248>)
 8013782:	9201      	str	r2, [sp, #4]
 8013784:	2000      	movs	r0, #0
 8013786:	2200      	movs	r2, #0
 8013788:	2b02      	cmp	r3, #2
 801378a:	9208      	str	r2, [sp, #32]
 801378c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8013790:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013794:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013798:	d02a      	beq.n	80137f0 <pow+0xb8>
 801379a:	4668      	mov	r0, sp
 801379c:	f000 fd80 	bl	80142a0 <matherr>
 80137a0:	bb00      	cbnz	r0, 80137e4 <pow+0xac>
 80137a2:	e04e      	b.n	8013842 <pow+0x10a>
 80137a4:	ed9f bb72 	vldr	d11, [pc, #456]	; 8013970 <pow+0x238>
 80137a8:	eeb4 9b4b 	vcmp.f64	d9, d11
 80137ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137b0:	eeb0 cb4b 	vmov.f64	d12, d11
 80137b4:	d14a      	bne.n	801384c <pow+0x114>
 80137b6:	eeb4 8b4b 	vcmp.f64	d8, d11
 80137ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137be:	d11f      	bne.n	8013800 <pow+0xc8>
 80137c0:	2201      	movs	r2, #1
 80137c2:	9200      	str	r2, [sp, #0]
 80137c4:	4a6e      	ldr	r2, [pc, #440]	; (8013980 <pow+0x248>)
 80137c6:	9201      	str	r2, [sp, #4]
 80137c8:	2200      	movs	r2, #0
 80137ca:	9208      	str	r2, [sp, #32]
 80137cc:	ed8d 9b02 	vstr	d9, [sp, #8]
 80137d0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80137d4:	ed8d bb06 	vstr	d11, [sp, #24]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d0de      	beq.n	801379a <pow+0x62>
 80137dc:	4b67      	ldr	r3, [pc, #412]	; (801397c <pow+0x244>)
 80137de:	2200      	movs	r2, #0
 80137e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80137e4:	9b08      	ldr	r3, [sp, #32]
 80137e6:	b11b      	cbz	r3, 80137f0 <pow+0xb8>
 80137e8:	f7ff f9e8 	bl	8012bbc <__errno>
 80137ec:	9b08      	ldr	r3, [sp, #32]
 80137ee:	6003      	str	r3, [r0, #0]
 80137f0:	ed9d ab06 	vldr	d10, [sp, #24]
 80137f4:	eeb0 0b4a 	vmov.f64	d0, d10
 80137f8:	b00a      	add	sp, #40	; 0x28
 80137fa:	ecbd 8b0a 	vpop	{d8-d12}
 80137fe:	bd70      	pop	{r4, r5, r6, pc}
 8013800:	eeb0 0b48 	vmov.f64	d0, d8
 8013804:	f000 fd44 	bl	8014290 <finite>
 8013808:	2800      	cmp	r0, #0
 801380a:	d0f3      	beq.n	80137f4 <pow+0xbc>
 801380c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8013810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013814:	d5ee      	bpl.n	80137f4 <pow+0xbc>
 8013816:	2301      	movs	r3, #1
 8013818:	9300      	str	r3, [sp, #0]
 801381a:	4b59      	ldr	r3, [pc, #356]	; (8013980 <pow+0x248>)
 801381c:	9301      	str	r3, [sp, #4]
 801381e:	2300      	movs	r3, #0
 8013820:	9308      	str	r3, [sp, #32]
 8013822:	f994 3000 	ldrsb.w	r3, [r4]
 8013826:	ed8d 9b02 	vstr	d9, [sp, #8]
 801382a:	ed8d 8b04 	vstr	d8, [sp, #16]
 801382e:	b913      	cbnz	r3, 8013836 <pow+0xfe>
 8013830:	ed8d bb06 	vstr	d11, [sp, #24]
 8013834:	e7b1      	b.n	801379a <pow+0x62>
 8013836:	4953      	ldr	r1, [pc, #332]	; (8013984 <pow+0x24c>)
 8013838:	2000      	movs	r0, #0
 801383a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801383e:	2b02      	cmp	r3, #2
 8013840:	d1ab      	bne.n	801379a <pow+0x62>
 8013842:	f7ff f9bb 	bl	8012bbc <__errno>
 8013846:	2321      	movs	r3, #33	; 0x21
 8013848:	6003      	str	r3, [r0, #0]
 801384a:	e7cb      	b.n	80137e4 <pow+0xac>
 801384c:	f000 fd20 	bl	8014290 <finite>
 8013850:	4605      	mov	r5, r0
 8013852:	2800      	cmp	r0, #0
 8013854:	d164      	bne.n	8013920 <pow+0x1e8>
 8013856:	eeb0 0b49 	vmov.f64	d0, d9
 801385a:	f000 fd19 	bl	8014290 <finite>
 801385e:	2800      	cmp	r0, #0
 8013860:	d05e      	beq.n	8013920 <pow+0x1e8>
 8013862:	eeb0 0b48 	vmov.f64	d0, d8
 8013866:	f000 fd13 	bl	8014290 <finite>
 801386a:	2800      	cmp	r0, #0
 801386c:	d058      	beq.n	8013920 <pow+0x1e8>
 801386e:	eeb4 ab4a 	vcmp.f64	d10, d10
 8013872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013876:	f994 3000 	ldrsb.w	r3, [r4]
 801387a:	4a41      	ldr	r2, [pc, #260]	; (8013980 <pow+0x248>)
 801387c:	d70e      	bvc.n	801389c <pow+0x164>
 801387e:	2101      	movs	r1, #1
 8013880:	e9cd 1200 	strd	r1, r2, [sp]
 8013884:	9508      	str	r5, [sp, #32]
 8013886:	ed8d 9b02 	vstr	d9, [sp, #8]
 801388a:	ed8d 8b04 	vstr	d8, [sp, #16]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d0ce      	beq.n	8013830 <pow+0xf8>
 8013892:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 8013896:	ed8d 7b06 	vstr	d7, [sp, #24]
 801389a:	e7d0      	b.n	801383e <pow+0x106>
 801389c:	2103      	movs	r1, #3
 801389e:	ed8d 8b04 	vstr	d8, [sp, #16]
 80138a2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80138a6:	ee28 8b07 	vmul.f64	d8, d8, d7
 80138aa:	e9cd 1200 	strd	r1, r2, [sp]
 80138ae:	9508      	str	r5, [sp, #32]
 80138b0:	ed8d 9b02 	vstr	d9, [sp, #8]
 80138b4:	b9fb      	cbnz	r3, 80138f6 <pow+0x1be>
 80138b6:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 80138ba:	4b33      	ldr	r3, [pc, #204]	; (8013988 <pow+0x250>)
 80138bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80138c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80138c8:	d54b      	bpl.n	8013962 <pow+0x22a>
 80138ca:	eeb0 0b48 	vmov.f64	d0, d8
 80138ce:	f000 fcf3 	bl	80142b8 <rint>
 80138d2:	eeb4 0b48 	vcmp.f64	d0, d8
 80138d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138da:	d004      	beq.n	80138e6 <pow+0x1ae>
 80138dc:	4b2b      	ldr	r3, [pc, #172]	; (801398c <pow+0x254>)
 80138de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80138e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80138e6:	f996 3000 	ldrsb.w	r3, [r6]
 80138ea:	2b02      	cmp	r3, #2
 80138ec:	d139      	bne.n	8013962 <pow+0x22a>
 80138ee:	f7ff f965 	bl	8012bbc <__errno>
 80138f2:	2322      	movs	r3, #34	; 0x22
 80138f4:	e7a8      	b.n	8013848 <pow+0x110>
 80138f6:	4b26      	ldr	r3, [pc, #152]	; (8013990 <pow+0x258>)
 80138f8:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 80138fc:	2200      	movs	r2, #0
 80138fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013902:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013906:	d5ee      	bpl.n	80138e6 <pow+0x1ae>
 8013908:	eeb0 0b48 	vmov.f64	d0, d8
 801390c:	f000 fcd4 	bl	80142b8 <rint>
 8013910:	eeb4 0b48 	vcmp.f64	d0, d8
 8013914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013918:	d0e5      	beq.n	80138e6 <pow+0x1ae>
 801391a:	2200      	movs	r2, #0
 801391c:	4b19      	ldr	r3, [pc, #100]	; (8013984 <pow+0x24c>)
 801391e:	e7e0      	b.n	80138e2 <pow+0x1aa>
 8013920:	eeb5 ab40 	vcmp.f64	d10, #0.0
 8013924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013928:	f47f af64 	bne.w	80137f4 <pow+0xbc>
 801392c:	eeb0 0b49 	vmov.f64	d0, d9
 8013930:	f000 fcae 	bl	8014290 <finite>
 8013934:	2800      	cmp	r0, #0
 8013936:	f43f af5d 	beq.w	80137f4 <pow+0xbc>
 801393a:	eeb0 0b48 	vmov.f64	d0, d8
 801393e:	f000 fca7 	bl	8014290 <finite>
 8013942:	2800      	cmp	r0, #0
 8013944:	f43f af56 	beq.w	80137f4 <pow+0xbc>
 8013948:	2304      	movs	r3, #4
 801394a:	9300      	str	r3, [sp, #0]
 801394c:	4b0c      	ldr	r3, [pc, #48]	; (8013980 <pow+0x248>)
 801394e:	9301      	str	r3, [sp, #4]
 8013950:	2300      	movs	r3, #0
 8013952:	9308      	str	r3, [sp, #32]
 8013954:	ed8d 9b02 	vstr	d9, [sp, #8]
 8013958:	ed8d 8b04 	vstr	d8, [sp, #16]
 801395c:	ed8d cb06 	vstr	d12, [sp, #24]
 8013960:	e7c1      	b.n	80138e6 <pow+0x1ae>
 8013962:	4668      	mov	r0, sp
 8013964:	f000 fc9c 	bl	80142a0 <matherr>
 8013968:	2800      	cmp	r0, #0
 801396a:	f47f af3b 	bne.w	80137e4 <pow+0xac>
 801396e:	e7be      	b.n	80138ee <pow+0x1b6>
	...
 8013978:	24000208 	.word	0x24000208
 801397c:	3ff00000 	.word	0x3ff00000
 8013980:	08015800 	.word	0x08015800
 8013984:	fff00000 	.word	0xfff00000
 8013988:	47efffff 	.word	0x47efffff
 801398c:	c7efffff 	.word	0xc7efffff
 8013990:	7ff00000 	.word	0x7ff00000
 8013994:	00000000 	.word	0x00000000

08013998 <sqrt>:
 8013998:	b500      	push	{lr}
 801399a:	ed2d 8b02 	vpush	{d8}
 801399e:	eeb0 8b40 	vmov.f64	d8, d0
 80139a2:	b08b      	sub	sp, #44	; 0x2c
 80139a4:	f000 fc1a 	bl	80141dc <__ieee754_sqrt>
 80139a8:	4b1f      	ldr	r3, [pc, #124]	; (8013a28 <sqrt+0x90>)
 80139aa:	f993 3000 	ldrsb.w	r3, [r3]
 80139ae:	1c5a      	adds	r2, r3, #1
 80139b0:	d024      	beq.n	80139fc <sqrt+0x64>
 80139b2:	eeb4 8b48 	vcmp.f64	d8, d8
 80139b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ba:	d61f      	bvs.n	80139fc <sqrt+0x64>
 80139bc:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8013a20 <sqrt+0x88>
 80139c0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80139c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139c8:	d518      	bpl.n	80139fc <sqrt+0x64>
 80139ca:	2201      	movs	r2, #1
 80139cc:	9200      	str	r2, [sp, #0]
 80139ce:	4a17      	ldr	r2, [pc, #92]	; (8013a2c <sqrt+0x94>)
 80139d0:	9201      	str	r2, [sp, #4]
 80139d2:	2200      	movs	r2, #0
 80139d4:	9208      	str	r2, [sp, #32]
 80139d6:	ed8d 8b04 	vstr	d8, [sp, #16]
 80139da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80139de:	b993      	cbnz	r3, 8013a06 <sqrt+0x6e>
 80139e0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80139e4:	4668      	mov	r0, sp
 80139e6:	f000 fc5b 	bl	80142a0 <matherr>
 80139ea:	b190      	cbz	r0, 8013a12 <sqrt+0x7a>
 80139ec:	9b08      	ldr	r3, [sp, #32]
 80139ee:	b11b      	cbz	r3, 80139f8 <sqrt+0x60>
 80139f0:	f7ff f8e4 	bl	8012bbc <__errno>
 80139f4:	9b08      	ldr	r3, [sp, #32]
 80139f6:	6003      	str	r3, [r0, #0]
 80139f8:	ed9d 0b06 	vldr	d0, [sp, #24]
 80139fc:	b00b      	add	sp, #44	; 0x2c
 80139fe:	ecbd 8b02 	vpop	{d8}
 8013a02:	f85d fb04 	ldr.w	pc, [sp], #4
 8013a06:	2b02      	cmp	r3, #2
 8013a08:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8013a0c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8013a10:	d1e8      	bne.n	80139e4 <sqrt+0x4c>
 8013a12:	f7ff f8d3 	bl	8012bbc <__errno>
 8013a16:	2321      	movs	r3, #33	; 0x21
 8013a18:	6003      	str	r3, [r0, #0]
 8013a1a:	e7e7      	b.n	80139ec <sqrt+0x54>
 8013a1c:	f3af 8000 	nop.w
	...
 8013a28:	24000208 	.word	0x24000208
 8013a2c:	08015804 	.word	0x08015804

08013a30 <sqrtf>:
 8013a30:	b500      	push	{lr}
 8013a32:	ed2d 8b02 	vpush	{d8}
 8013a36:	b08b      	sub	sp, #44	; 0x2c
 8013a38:	eeb0 8a40 	vmov.f32	s16, s0
 8013a3c:	f000 fbd1 	bl	80141e2 <__ieee754_sqrtf>
 8013a40:	4b21      	ldr	r3, [pc, #132]	; (8013ac8 <sqrtf+0x98>)
 8013a42:	f993 3000 	ldrsb.w	r3, [r3]
 8013a46:	1c5a      	adds	r2, r3, #1
 8013a48:	d028      	beq.n	8013a9c <sqrtf+0x6c>
 8013a4a:	eeb4 8a48 	vcmp.f32	s16, s16
 8013a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a52:	d623      	bvs.n	8013a9c <sqrtf+0x6c>
 8013a54:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a5c:	d51e      	bpl.n	8013a9c <sqrtf+0x6c>
 8013a5e:	2201      	movs	r2, #1
 8013a60:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8013a64:	9200      	str	r2, [sp, #0]
 8013a66:	4a19      	ldr	r2, [pc, #100]	; (8013acc <sqrtf+0x9c>)
 8013a68:	9201      	str	r2, [sp, #4]
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	9208      	str	r2, [sp, #32]
 8013a6e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013a72:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013a76:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8013ac0 <sqrtf+0x90>
 8013a7a:	b9a3      	cbnz	r3, 8013aa6 <sqrtf+0x76>
 8013a7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013a80:	4668      	mov	r0, sp
 8013a82:	f000 fc0d 	bl	80142a0 <matherr>
 8013a86:	b1a0      	cbz	r0, 8013ab2 <sqrtf+0x82>
 8013a88:	9b08      	ldr	r3, [sp, #32]
 8013a8a:	b11b      	cbz	r3, 8013a94 <sqrtf+0x64>
 8013a8c:	f7ff f896 	bl	8012bbc <__errno>
 8013a90:	9b08      	ldr	r3, [sp, #32]
 8013a92:	6003      	str	r3, [r0, #0]
 8013a94:	ed9d 0b06 	vldr	d0, [sp, #24]
 8013a98:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013a9c:	b00b      	add	sp, #44	; 0x2c
 8013a9e:	ecbd 8b02 	vpop	{d8}
 8013aa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8013aa6:	2b02      	cmp	r3, #2
 8013aa8:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8013aac:	ed8d 6b06 	vstr	d6, [sp, #24]
 8013ab0:	d1e6      	bne.n	8013a80 <sqrtf+0x50>
 8013ab2:	f7ff f883 	bl	8012bbc <__errno>
 8013ab6:	2321      	movs	r3, #33	; 0x21
 8013ab8:	6003      	str	r3, [r0, #0]
 8013aba:	e7e5      	b.n	8013a88 <sqrtf+0x58>
 8013abc:	f3af 8000 	nop.w
	...
 8013ac8:	24000208 	.word	0x24000208
 8013acc:	08015809 	.word	0x08015809

08013ad0 <__ieee754_pow>:
 8013ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ad4:	ec57 6b11 	vmov	r6, r7, d1
 8013ad8:	ed2d 8b02 	vpush	{d8}
 8013adc:	eeb0 8b40 	vmov.f64	d8, d0
 8013ae0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013ae4:	ea58 0306 	orrs.w	r3, r8, r6
 8013ae8:	b085      	sub	sp, #20
 8013aea:	46b9      	mov	r9, r7
 8013aec:	ee11 2a10 	vmov	r2, s2
 8013af0:	f000 8306 	beq.w	8014100 <__ieee754_pow+0x630>
 8013af4:	ee18 aa90 	vmov	sl, s17
 8013af8:	4bb9      	ldr	r3, [pc, #740]	; (8013de0 <__ieee754_pow+0x310>)
 8013afa:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 8013afe:	429c      	cmp	r4, r3
 8013b00:	ee10 ba10 	vmov	fp, s0
 8013b04:	dc0b      	bgt.n	8013b1e <__ieee754_pow+0x4e>
 8013b06:	d105      	bne.n	8013b14 <__ieee754_pow+0x44>
 8013b08:	f1bb 0f00 	cmp.w	fp, #0
 8013b0c:	d107      	bne.n	8013b1e <__ieee754_pow+0x4e>
 8013b0e:	45a0      	cmp	r8, r4
 8013b10:	dc0d      	bgt.n	8013b2e <__ieee754_pow+0x5e>
 8013b12:	e001      	b.n	8013b18 <__ieee754_pow+0x48>
 8013b14:	4598      	cmp	r8, r3
 8013b16:	dc02      	bgt.n	8013b1e <__ieee754_pow+0x4e>
 8013b18:	4598      	cmp	r8, r3
 8013b1a:	d110      	bne.n	8013b3e <__ieee754_pow+0x6e>
 8013b1c:	b17a      	cbz	r2, 8013b3e <__ieee754_pow+0x6e>
 8013b1e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013b22:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013b26:	ea54 030b 	orrs.w	r3, r4, fp
 8013b2a:	f000 82e9 	beq.w	8014100 <__ieee754_pow+0x630>
 8013b2e:	48ad      	ldr	r0, [pc, #692]	; (8013de4 <__ieee754_pow+0x314>)
 8013b30:	b005      	add	sp, #20
 8013b32:	ecbd 8b02 	vpop	{d8}
 8013b36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b3a:	f000 bbb5 	b.w	80142a8 <nan>
 8013b3e:	f1ba 0f00 	cmp.w	sl, #0
 8013b42:	da4e      	bge.n	8013be2 <__ieee754_pow+0x112>
 8013b44:	4ba8      	ldr	r3, [pc, #672]	; (8013de8 <__ieee754_pow+0x318>)
 8013b46:	4598      	cmp	r8, r3
 8013b48:	dc49      	bgt.n	8013bde <__ieee754_pow+0x10e>
 8013b4a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013b4e:	4598      	cmp	r8, r3
 8013b50:	dd47      	ble.n	8013be2 <__ieee754_pow+0x112>
 8013b52:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013b56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013b5a:	2b14      	cmp	r3, #20
 8013b5c:	dd24      	ble.n	8013ba8 <__ieee754_pow+0xd8>
 8013b5e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013b62:	fa22 f503 	lsr.w	r5, r2, r3
 8013b66:	fa05 f303 	lsl.w	r3, r5, r3
 8013b6a:	4293      	cmp	r3, r2
 8013b6c:	d139      	bne.n	8013be2 <__ieee754_pow+0x112>
 8013b6e:	f005 0501 	and.w	r5, r5, #1
 8013b72:	f1c5 0502 	rsb	r5, r5, #2
 8013b76:	2a00      	cmp	r2, #0
 8013b78:	d15a      	bne.n	8013c30 <__ieee754_pow+0x160>
 8013b7a:	4b99      	ldr	r3, [pc, #612]	; (8013de0 <__ieee754_pow+0x310>)
 8013b7c:	4598      	cmp	r8, r3
 8013b7e:	d122      	bne.n	8013bc6 <__ieee754_pow+0xf6>
 8013b80:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013b84:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013b88:	ea53 030b 	orrs.w	r3, r3, fp
 8013b8c:	f000 82b8 	beq.w	8014100 <__ieee754_pow+0x630>
 8013b90:	4b96      	ldr	r3, [pc, #600]	; (8013dec <__ieee754_pow+0x31c>)
 8013b92:	429c      	cmp	r4, r3
 8013b94:	dd27      	ble.n	8013be6 <__ieee754_pow+0x116>
 8013b96:	f1b9 0f00 	cmp.w	r9, #0
 8013b9a:	f280 82b4 	bge.w	8014106 <__ieee754_pow+0x636>
 8013b9e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8013db0 <__ieee754_pow+0x2e0>
 8013ba2:	ed8d 7b00 	vstr	d7, [sp]
 8013ba6:	e026      	b.n	8013bf6 <__ieee754_pow+0x126>
 8013ba8:	2a00      	cmp	r2, #0
 8013baa:	d140      	bne.n	8013c2e <__ieee754_pow+0x15e>
 8013bac:	f1c3 0314 	rsb	r3, r3, #20
 8013bb0:	fa48 f503 	asr.w	r5, r8, r3
 8013bb4:	fa05 f303 	lsl.w	r3, r5, r3
 8013bb8:	4543      	cmp	r3, r8
 8013bba:	f040 82aa 	bne.w	8014112 <__ieee754_pow+0x642>
 8013bbe:	f005 0501 	and.w	r5, r5, #1
 8013bc2:	f1c5 0502 	rsb	r5, r5, #2
 8013bc6:	4b8a      	ldr	r3, [pc, #552]	; (8013df0 <__ieee754_pow+0x320>)
 8013bc8:	4598      	cmp	r8, r3
 8013bca:	d11b      	bne.n	8013c04 <__ieee754_pow+0x134>
 8013bcc:	f1b9 0f00 	cmp.w	r9, #0
 8013bd0:	f280 829c 	bge.w	801410c <__ieee754_pow+0x63c>
 8013bd4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013bd8:	ee87 7b08 	vdiv.f64	d7, d7, d8
 8013bdc:	e7e1      	b.n	8013ba2 <__ieee754_pow+0xd2>
 8013bde:	2502      	movs	r5, #2
 8013be0:	e7c9      	b.n	8013b76 <__ieee754_pow+0xa6>
 8013be2:	2500      	movs	r5, #0
 8013be4:	e7c7      	b.n	8013b76 <__ieee754_pow+0xa6>
 8013be6:	f1b9 0f00 	cmp.w	r9, #0
 8013bea:	dad8      	bge.n	8013b9e <__ieee754_pow+0xce>
 8013bec:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 8013bf0:	4633      	mov	r3, r6
 8013bf2:	e9cd 3400 	strd	r3, r4, [sp]
 8013bf6:	ed9d 0b00 	vldr	d0, [sp]
 8013bfa:	b005      	add	sp, #20
 8013bfc:	ecbd 8b02 	vpop	{d8}
 8013c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c04:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013c08:	d102      	bne.n	8013c10 <__ieee754_pow+0x140>
 8013c0a:	ee28 7b08 	vmul.f64	d7, d8, d8
 8013c0e:	e7c8      	b.n	8013ba2 <__ieee754_pow+0xd2>
 8013c10:	4b78      	ldr	r3, [pc, #480]	; (8013df4 <__ieee754_pow+0x324>)
 8013c12:	4599      	cmp	r9, r3
 8013c14:	d10c      	bne.n	8013c30 <__ieee754_pow+0x160>
 8013c16:	f1ba 0f00 	cmp.w	sl, #0
 8013c1a:	db09      	blt.n	8013c30 <__ieee754_pow+0x160>
 8013c1c:	eeb0 0b48 	vmov.f64	d0, d8
 8013c20:	b005      	add	sp, #20
 8013c22:	ecbd 8b02 	vpop	{d8}
 8013c26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c2a:	f000 bad7 	b.w	80141dc <__ieee754_sqrt>
 8013c2e:	2500      	movs	r5, #0
 8013c30:	eeb0 0b48 	vmov.f64	d0, d8
 8013c34:	f000 fb23 	bl	801427e <fabs>
 8013c38:	ed8d 0b00 	vstr	d0, [sp]
 8013c3c:	f1bb 0f00 	cmp.w	fp, #0
 8013c40:	d128      	bne.n	8013c94 <__ieee754_pow+0x1c4>
 8013c42:	b124      	cbz	r4, 8013c4e <__ieee754_pow+0x17e>
 8013c44:	4b6a      	ldr	r3, [pc, #424]	; (8013df0 <__ieee754_pow+0x320>)
 8013c46:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 8013c4a:	429a      	cmp	r2, r3
 8013c4c:	d122      	bne.n	8013c94 <__ieee754_pow+0x1c4>
 8013c4e:	f1b9 0f00 	cmp.w	r9, #0
 8013c52:	da07      	bge.n	8013c64 <__ieee754_pow+0x194>
 8013c54:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013c58:	ed9d 6b00 	vldr	d6, [sp]
 8013c5c:	ee87 7b06 	vdiv.f64	d7, d7, d6
 8013c60:	ed8d 7b00 	vstr	d7, [sp]
 8013c64:	f1ba 0f00 	cmp.w	sl, #0
 8013c68:	dac5      	bge.n	8013bf6 <__ieee754_pow+0x126>
 8013c6a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013c6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013c72:	ea54 0305 	orrs.w	r3, r4, r5
 8013c76:	d106      	bne.n	8013c86 <__ieee754_pow+0x1b6>
 8013c78:	ed9d 7b00 	vldr	d7, [sp]
 8013c7c:	ee37 7b47 	vsub.f64	d7, d7, d7
 8013c80:	ee87 7b07 	vdiv.f64	d7, d7, d7
 8013c84:	e78d      	b.n	8013ba2 <__ieee754_pow+0xd2>
 8013c86:	2d01      	cmp	r5, #1
 8013c88:	d1b5      	bne.n	8013bf6 <__ieee754_pow+0x126>
 8013c8a:	ed9d 7b00 	vldr	d7, [sp]
 8013c8e:	eeb1 7b47 	vneg.f64	d7, d7
 8013c92:	e786      	b.n	8013ba2 <__ieee754_pow+0xd2>
 8013c94:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8013c98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013c9c:	ea55 030a 	orrs.w	r3, r5, sl
 8013ca0:	d104      	bne.n	8013cac <__ieee754_pow+0x1dc>
 8013ca2:	ee38 8b48 	vsub.f64	d8, d8, d8
 8013ca6:	ee88 7b08 	vdiv.f64	d7, d8, d8
 8013caa:	e77a      	b.n	8013ba2 <__ieee754_pow+0xd2>
 8013cac:	4b52      	ldr	r3, [pc, #328]	; (8013df8 <__ieee754_pow+0x328>)
 8013cae:	4598      	cmp	r8, r3
 8013cb0:	f340 80a8 	ble.w	8013e04 <__ieee754_pow+0x334>
 8013cb4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013cb8:	4598      	cmp	r8, r3
 8013cba:	dd0b      	ble.n	8013cd4 <__ieee754_pow+0x204>
 8013cbc:	4b4b      	ldr	r3, [pc, #300]	; (8013dec <__ieee754_pow+0x31c>)
 8013cbe:	429c      	cmp	r4, r3
 8013cc0:	dc0e      	bgt.n	8013ce0 <__ieee754_pow+0x210>
 8013cc2:	f1b9 0f00 	cmp.w	r9, #0
 8013cc6:	f6bf af6a 	bge.w	8013b9e <__ieee754_pow+0xce>
 8013cca:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8013db8 <__ieee754_pow+0x2e8>
 8013cce:	ee27 7b07 	vmul.f64	d7, d7, d7
 8013cd2:	e766      	b.n	8013ba2 <__ieee754_pow+0xd2>
 8013cd4:	4b49      	ldr	r3, [pc, #292]	; (8013dfc <__ieee754_pow+0x32c>)
 8013cd6:	429c      	cmp	r4, r3
 8013cd8:	ddf3      	ble.n	8013cc2 <__ieee754_pow+0x1f2>
 8013cda:	4b45      	ldr	r3, [pc, #276]	; (8013df0 <__ieee754_pow+0x320>)
 8013cdc:	429c      	cmp	r4, r3
 8013cde:	dd03      	ble.n	8013ce8 <__ieee754_pow+0x218>
 8013ce0:	f1b9 0f00 	cmp.w	r9, #0
 8013ce4:	dcf1      	bgt.n	8013cca <__ieee754_pow+0x1fa>
 8013ce6:	e75a      	b.n	8013b9e <__ieee754_pow+0xce>
 8013ce8:	ed9d 7b00 	vldr	d7, [sp]
 8013cec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013cf0:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8013dc0 <__ieee754_pow+0x2f0>
 8013cf4:	ee37 6b46 	vsub.f64	d6, d7, d6
 8013cf8:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 8013cfc:	eeb1 3b46 	vneg.f64	d3, d6
 8013d00:	eea3 5b07 	vfma.f64	d5, d3, d7
 8013d04:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8013d08:	eea5 7b46 	vfms.f64	d7, d5, d6
 8013d0c:	ee26 5b06 	vmul.f64	d5, d6, d6
 8013d10:	ee27 5b05 	vmul.f64	d5, d7, d5
 8013d14:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8013dc8 <__ieee754_pow+0x2f8>
 8013d18:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8013d1c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8013dd0 <__ieee754_pow+0x300>
 8013d20:	eea6 7b05 	vfma.f64	d7, d6, d5
 8013d24:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8013dd8 <__ieee754_pow+0x308>
 8013d28:	eeb0 4b47 	vmov.f64	d4, d7
 8013d2c:	eea6 4b05 	vfma.f64	d4, d6, d5
 8013d30:	ec53 2b14 	vmov	r2, r3, d4
 8013d34:	2200      	movs	r2, #0
 8013d36:	ec43 2b14 	vmov	d4, r2, r3
 8013d3a:	eeb0 6b44 	vmov.f64	d6, d4
 8013d3e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013d42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013d46:	3d01      	subs	r5, #1
 8013d48:	ea55 030a 	orrs.w	r3, r5, sl
 8013d4c:	f04f 0200 	mov.w	r2, #0
 8013d50:	463b      	mov	r3, r7
 8013d52:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8013d56:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8013d5a:	ec47 6b15 	vmov	d5, r6, r7
 8013d5e:	fe06 8b08 	vseleq.f64	d8, d6, d8
 8013d62:	ec47 6b13 	vmov	d3, r6, r7
 8013d66:	ec43 2b16 	vmov	d6, r2, r3
 8013d6a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013d6e:	ee35 5b46 	vsub.f64	d5, d5, d6
 8013d72:	4b23      	ldr	r3, [pc, #140]	; (8013e00 <__ieee754_pow+0x330>)
 8013d74:	eea5 7b04 	vfma.f64	d7, d5, d4
 8013d78:	ee24 6b06 	vmul.f64	d6, d4, d6
 8013d7c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8013d80:	ee15 1a90 	vmov	r1, s11
 8013d84:	4299      	cmp	r1, r3
 8013d86:	ee15 2a10 	vmov	r2, s10
 8013d8a:	f340 819b 	ble.w	80140c4 <__ieee754_pow+0x5f4>
 8013d8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013d92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013d96:	4313      	orrs	r3, r2
 8013d98:	f000 810a 	beq.w	8013fb0 <__ieee754_pow+0x4e0>
 8013d9c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8013db8 <__ieee754_pow+0x2e8>
 8013da0:	ee28 8b07 	vmul.f64	d8, d8, d7
 8013da4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013da8:	e6fb      	b.n	8013ba2 <__ieee754_pow+0xd2>
 8013daa:	bf00      	nop
 8013dac:	f3af 8000 	nop.w
	...
 8013db8:	8800759c 	.word	0x8800759c
 8013dbc:	7e37e43c 	.word	0x7e37e43c
 8013dc0:	55555555 	.word	0x55555555
 8013dc4:	3fd55555 	.word	0x3fd55555
 8013dc8:	652b82fe 	.word	0x652b82fe
 8013dcc:	3ff71547 	.word	0x3ff71547
 8013dd0:	f85ddf44 	.word	0xf85ddf44
 8013dd4:	3e54ae0b 	.word	0x3e54ae0b
 8013dd8:	60000000 	.word	0x60000000
 8013ddc:	3ff71547 	.word	0x3ff71547
 8013de0:	7ff00000 	.word	0x7ff00000
 8013de4:	0801509f 	.word	0x0801509f
 8013de8:	433fffff 	.word	0x433fffff
 8013dec:	3fefffff 	.word	0x3fefffff
 8013df0:	3ff00000 	.word	0x3ff00000
 8013df4:	3fe00000 	.word	0x3fe00000
 8013df8:	41e00000 	.word	0x41e00000
 8013dfc:	3feffffe 	.word	0x3feffffe
 8013e00:	408fffff 	.word	0x408fffff
 8013e04:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013e08:	f280 80ce 	bge.w	8013fa8 <__ieee754_pow+0x4d8>
 8013e0c:	ed9d 6b00 	vldr	d6, [sp]
 8013e10:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 8014118 <__ieee754_pow+0x648>
 8013e14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013e18:	ed8d 7b00 	vstr	d7, [sp]
 8013e1c:	9c01      	ldr	r4, [sp, #4]
 8013e1e:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8013e22:	1521      	asrs	r1, r4, #20
 8013e24:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013e28:	4419      	add	r1, r3
 8013e2a:	4be3      	ldr	r3, [pc, #908]	; (80141b8 <__ieee754_pow+0x6e8>)
 8013e2c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013e30:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 8013e34:	429c      	cmp	r4, r3
 8013e36:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 8013e3a:	dd06      	ble.n	8013e4a <__ieee754_pow+0x37a>
 8013e3c:	4bdf      	ldr	r3, [pc, #892]	; (80141bc <__ieee754_pow+0x6ec>)
 8013e3e:	429c      	cmp	r4, r3
 8013e40:	f340 80b4 	ble.w	8013fac <__ieee754_pow+0x4dc>
 8013e44:	3101      	adds	r1, #1
 8013e46:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8013e4a:	2400      	movs	r4, #0
 8013e4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013e50:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8013e54:	4603      	mov	r3, r0
 8013e56:	ec43 2b17 	vmov	d7, r2, r3
 8013e5a:	4bd9      	ldr	r3, [pc, #868]	; (80141c0 <__ieee754_pow+0x6f0>)
 8013e5c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8013e60:	4463      	add	r3, ip
 8013e62:	ed93 5b00 	vldr	d5, [r3]
 8013e66:	1040      	asrs	r0, r0, #1
 8013e68:	ee37 2b45 	vsub.f64	d2, d7, d5
 8013e6c:	ee35 6b07 	vadd.f64	d6, d5, d7
 8013e70:	ee84 1b06 	vdiv.f64	d1, d4, d6
 8013e74:	ee22 6b01 	vmul.f64	d6, d2, d1
 8013e78:	ed8d 6b00 	vstr	d6, [sp]
 8013e7c:	e9dd 8900 	ldrd	r8, r9, [sp]
 8013e80:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8013e84:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 8013e88:	f04f 0800 	mov.w	r8, #0
 8013e8c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 8013e90:	2200      	movs	r2, #0
 8013e92:	ec49 8b14 	vmov	d4, r8, r9
 8013e96:	ec43 2b16 	vmov	d6, r2, r3
 8013e9a:	eeb1 3b44 	vneg.f64	d3, d4
 8013e9e:	eea3 2b06 	vfma.f64	d2, d3, d6
 8013ea2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013ea6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013eaa:	eea3 2b07 	vfma.f64	d2, d3, d7
 8013eae:	ed9d 7b00 	vldr	d7, [sp]
 8013eb2:	ee22 2b01 	vmul.f64	d2, d2, d1
 8013eb6:	ee27 5b07 	vmul.f64	d5, d7, d7
 8013eba:	ee37 6b04 	vadd.f64	d6, d7, d4
 8013ebe:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8014120 <__ieee754_pow+0x650>
 8013ec2:	ee25 0b05 	vmul.f64	d0, d5, d5
 8013ec6:	ee26 6b02 	vmul.f64	d6, d6, d2
 8013eca:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8014128 <__ieee754_pow+0x658>
 8013ece:	eea5 7b01 	vfma.f64	d7, d5, d1
 8013ed2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8014130 <__ieee754_pow+0x660>
 8013ed6:	eea7 1b05 	vfma.f64	d1, d7, d5
 8013eda:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8014138 <__ieee754_pow+0x668>
 8013ede:	eea1 7b05 	vfma.f64	d7, d1, d5
 8013ee2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8014140 <__ieee754_pow+0x670>
 8013ee6:	eea7 1b05 	vfma.f64	d1, d7, d5
 8013eea:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8014148 <__ieee754_pow+0x678>
 8013eee:	eea1 7b05 	vfma.f64	d7, d1, d5
 8013ef2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8013ef6:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 8013efa:	eeb0 5b47 	vmov.f64	d5, d7
 8013efe:	eea4 5b04 	vfma.f64	d5, d4, d4
 8013f02:	ee35 5b06 	vadd.f64	d5, d5, d6
 8013f06:	ed8d 5b02 	vstr	d5, [sp, #8]
 8013f0a:	f8cd 8008 	str.w	r8, [sp, #8]
 8013f0e:	ed9d 5b02 	vldr	d5, [sp, #8]
 8013f12:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013f16:	eea3 7b04 	vfma.f64	d7, d3, d4
 8013f1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013f1e:	ed9d 6b00 	vldr	d6, [sp]
 8013f22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013f26:	eea2 7b05 	vfma.f64	d7, d2, d5
 8013f2a:	eeb0 6b47 	vmov.f64	d6, d7
 8013f2e:	eea4 6b05 	vfma.f64	d6, d4, d5
 8013f32:	ed8d 6b00 	vstr	d6, [sp]
 8013f36:	f8cd 8000 	str.w	r8, [sp]
 8013f3a:	ed9d 2b00 	vldr	d2, [sp]
 8013f3e:	eeb0 6b42 	vmov.f64	d6, d2
 8013f42:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013f46:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013f4a:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8014150 <__ieee754_pow+0x680>
 8013f4e:	4b9d      	ldr	r3, [pc, #628]	; (80141c4 <__ieee754_pow+0x6f4>)
 8013f50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013f54:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8014158 <__ieee754_pow+0x688>
 8013f58:	4463      	add	r3, ip
 8013f5a:	eea2 7b06 	vfma.f64	d7, d2, d6
 8013f5e:	ed93 6b00 	vldr	d6, [r3]
 8013f62:	4b99      	ldr	r3, [pc, #612]	; (80141c8 <__ieee754_pow+0x6f8>)
 8013f64:	ee37 6b06 	vadd.f64	d6, d7, d6
 8013f68:	449c      	add	ip, r3
 8013f6a:	ed9c 1b00 	vldr	d1, [ip]
 8013f6e:	eeb0 4b46 	vmov.f64	d4, d6
 8013f72:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8014160 <__ieee754_pow+0x690>
 8013f76:	ee07 1a90 	vmov	s15, r1
 8013f7a:	eea2 4b03 	vfma.f64	d4, d2, d3
 8013f7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013f82:	ee34 4b01 	vadd.f64	d4, d4, d1
 8013f86:	ee34 5b07 	vadd.f64	d5, d4, d7
 8013f8a:	ed8d 5b00 	vstr	d5, [sp]
 8013f8e:	f8cd 8000 	str.w	r8, [sp]
 8013f92:	ed9d 4b00 	vldr	d4, [sp]
 8013f96:	ee34 7b47 	vsub.f64	d7, d4, d7
 8013f9a:	ee37 7b41 	vsub.f64	d7, d7, d1
 8013f9e:	eea2 7b43 	vfms.f64	d7, d2, d3
 8013fa2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013fa6:	e6ce      	b.n	8013d46 <__ieee754_pow+0x276>
 8013fa8:	2300      	movs	r3, #0
 8013faa:	e73a      	b.n	8013e22 <__ieee754_pow+0x352>
 8013fac:	2401      	movs	r4, #1
 8013fae:	e74d      	b.n	8013e4c <__ieee754_pow+0x37c>
 8013fb0:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8014168 <__ieee754_pow+0x698>
 8013fb4:	ee35 5b46 	vsub.f64	d5, d5, d6
 8013fb8:	ee37 4b04 	vadd.f64	d4, d7, d4
 8013fbc:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8013fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc4:	f73f aeea 	bgt.w	8013d9c <__ieee754_pow+0x2cc>
 8013fc8:	4a80      	ldr	r2, [pc, #512]	; (80141cc <__ieee754_pow+0x6fc>)
 8013fca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013fce:	4293      	cmp	r3, r2
 8013fd0:	f340 808e 	ble.w	80140f0 <__ieee754_pow+0x620>
 8013fd4:	151b      	asrs	r3, r3, #20
 8013fd6:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 8013fda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013fde:	4103      	asrs	r3, r0
 8013fe0:	440b      	add	r3, r1
 8013fe2:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013fe6:	487a      	ldr	r0, [pc, #488]	; (80141d0 <__ieee754_pow+0x700>)
 8013fe8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013fec:	4110      	asrs	r0, r2
 8013fee:	ea23 0500 	bic.w	r5, r3, r0
 8013ff2:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8013ff6:	2400      	movs	r4, #0
 8013ff8:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 8013ffc:	f1c2 0214 	rsb	r2, r2, #20
 8014000:	ec45 4b15 	vmov	d5, r4, r5
 8014004:	4110      	asrs	r0, r2
 8014006:	2900      	cmp	r1, #0
 8014008:	bfb8      	it	lt
 801400a:	4240      	neglt	r0, r0
 801400c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014010:	ee36 5b07 	vadd.f64	d5, d6, d7
 8014014:	ec53 2b15 	vmov	r2, r3, d5
 8014018:	2200      	movs	r2, #0
 801401a:	ec43 2b15 	vmov	d5, r2, r3
 801401e:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8014170 <__ieee754_pow+0x6a0>
 8014022:	ee35 6b46 	vsub.f64	d6, d5, d6
 8014026:	ee37 6b46 	vsub.f64	d6, d7, d6
 801402a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8014178 <__ieee754_pow+0x6a8>
 801402e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8014032:	eea6 7b04 	vfma.f64	d7, d6, d4
 8014036:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8014180 <__ieee754_pow+0x6b0>
 801403a:	eeb0 4b47 	vmov.f64	d4, d7
 801403e:	eea5 4b06 	vfma.f64	d4, d5, d6
 8014042:	eeb0 3b44 	vmov.f64	d3, d4
 8014046:	eea5 3b46 	vfms.f64	d3, d5, d6
 801404a:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8014188 <__ieee754_pow+0x6b8>
 801404e:	ee37 7b43 	vsub.f64	d7, d7, d3
 8014052:	ee24 6b04 	vmul.f64	d6, d4, d4
 8014056:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8014190 <__ieee754_pow+0x6c0>
 801405a:	eea4 7b07 	vfma.f64	d7, d4, d7
 801405e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8014062:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8014198 <__ieee754_pow+0x6c8>
 8014066:	eea3 5b06 	vfma.f64	d5, d3, d6
 801406a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 80141a0 <__ieee754_pow+0x6d0>
 801406e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8014072:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 80141a8 <__ieee754_pow+0x6d8>
 8014076:	eea3 5b06 	vfma.f64	d5, d3, d6
 801407a:	eeb0 3b44 	vmov.f64	d3, d4
 801407e:	eea5 3b46 	vfms.f64	d3, d5, d6
 8014082:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8014086:	eeb0 6b43 	vmov.f64	d6, d3
 801408a:	ee24 3b03 	vmul.f64	d3, d4, d3
 801408e:	ee36 5b45 	vsub.f64	d5, d6, d5
 8014092:	ee83 6b05 	vdiv.f64	d6, d3, d5
 8014096:	ee36 7b47 	vsub.f64	d7, d6, d7
 801409a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801409e:	ee37 7b44 	vsub.f64	d7, d7, d4
 80140a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80140a6:	ed8d 7b00 	vstr	d7, [sp]
 80140aa:	9901      	ldr	r1, [sp, #4]
 80140ac:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 80140b0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80140b4:	da1e      	bge.n	80140f4 <__ieee754_pow+0x624>
 80140b6:	eeb0 0b47 	vmov.f64	d0, d7
 80140ba:	f000 f989 	bl	80143d0 <scalbn>
 80140be:	ee20 7b08 	vmul.f64	d7, d0, d8
 80140c2:	e56e      	b.n	8013ba2 <__ieee754_pow+0xd2>
 80140c4:	4b43      	ldr	r3, [pc, #268]	; (80141d4 <__ieee754_pow+0x704>)
 80140c6:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 80140ca:	4298      	cmp	r0, r3
 80140cc:	f77f af7c 	ble.w	8013fc8 <__ieee754_pow+0x4f8>
 80140d0:	4b41      	ldr	r3, [pc, #260]	; (80141d8 <__ieee754_pow+0x708>)
 80140d2:	440b      	add	r3, r1
 80140d4:	4313      	orrs	r3, r2
 80140d6:	d002      	beq.n	80140de <__ieee754_pow+0x60e>
 80140d8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 80141b0 <__ieee754_pow+0x6e0>
 80140dc:	e660      	b.n	8013da0 <__ieee754_pow+0x2d0>
 80140de:	ee35 5b46 	vsub.f64	d5, d5, d6
 80140e2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80140e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ea:	f6ff af6d 	blt.w	8013fc8 <__ieee754_pow+0x4f8>
 80140ee:	e7f3      	b.n	80140d8 <__ieee754_pow+0x608>
 80140f0:	2000      	movs	r0, #0
 80140f2:	e78d      	b.n	8014010 <__ieee754_pow+0x540>
 80140f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80140f8:	460b      	mov	r3, r1
 80140fa:	ec43 2b10 	vmov	d0, r2, r3
 80140fe:	e7de      	b.n	80140be <__ieee754_pow+0x5ee>
 8014100:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014104:	e54d      	b.n	8013ba2 <__ieee754_pow+0xd2>
 8014106:	e9cd 6700 	strd	r6, r7, [sp]
 801410a:	e574      	b.n	8013bf6 <__ieee754_pow+0x126>
 801410c:	ed8d 8b00 	vstr	d8, [sp]
 8014110:	e571      	b.n	8013bf6 <__ieee754_pow+0x126>
 8014112:	4615      	mov	r5, r2
 8014114:	e557      	b.n	8013bc6 <__ieee754_pow+0xf6>
 8014116:	bf00      	nop
 8014118:	00000000 	.word	0x00000000
 801411c:	43400000 	.word	0x43400000
 8014120:	4a454eef 	.word	0x4a454eef
 8014124:	3fca7e28 	.word	0x3fca7e28
 8014128:	93c9db65 	.word	0x93c9db65
 801412c:	3fcd864a 	.word	0x3fcd864a
 8014130:	a91d4101 	.word	0xa91d4101
 8014134:	3fd17460 	.word	0x3fd17460
 8014138:	518f264d 	.word	0x518f264d
 801413c:	3fd55555 	.word	0x3fd55555
 8014140:	db6fabff 	.word	0xdb6fabff
 8014144:	3fdb6db6 	.word	0x3fdb6db6
 8014148:	33333303 	.word	0x33333303
 801414c:	3fe33333 	.word	0x3fe33333
 8014150:	dc3a03fd 	.word	0xdc3a03fd
 8014154:	3feec709 	.word	0x3feec709
 8014158:	145b01f5 	.word	0x145b01f5
 801415c:	be3e2fe0 	.word	0xbe3e2fe0
 8014160:	e0000000 	.word	0xe0000000
 8014164:	3feec709 	.word	0x3feec709
 8014168:	652b82fe 	.word	0x652b82fe
 801416c:	3c971547 	.word	0x3c971547
 8014170:	fefa39ef 	.word	0xfefa39ef
 8014174:	3fe62e42 	.word	0x3fe62e42
 8014178:	0ca86c39 	.word	0x0ca86c39
 801417c:	be205c61 	.word	0xbe205c61
 8014180:	00000000 	.word	0x00000000
 8014184:	3fe62e43 	.word	0x3fe62e43
 8014188:	72bea4d0 	.word	0x72bea4d0
 801418c:	3e663769 	.word	0x3e663769
 8014190:	c5d26bf1 	.word	0xc5d26bf1
 8014194:	bebbbd41 	.word	0xbebbbd41
 8014198:	af25de2c 	.word	0xaf25de2c
 801419c:	3f11566a 	.word	0x3f11566a
 80141a0:	16bebd93 	.word	0x16bebd93
 80141a4:	bf66c16c 	.word	0xbf66c16c
 80141a8:	5555553e 	.word	0x5555553e
 80141ac:	3fc55555 	.word	0x3fc55555
 80141b0:	c2f8f359 	.word	0xc2f8f359
 80141b4:	01a56e1f 	.word	0x01a56e1f
 80141b8:	0003988e 	.word	0x0003988e
 80141bc:	000bb679 	.word	0x000bb679
 80141c0:	08015810 	.word	0x08015810
 80141c4:	08015830 	.word	0x08015830
 80141c8:	08015820 	.word	0x08015820
 80141cc:	3fe00000 	.word	0x3fe00000
 80141d0:	000fffff 	.word	0x000fffff
 80141d4:	4090cbff 	.word	0x4090cbff
 80141d8:	3f6f3400 	.word	0x3f6f3400

080141dc <__ieee754_sqrt>:
 80141dc:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80141e0:	4770      	bx	lr

080141e2 <__ieee754_sqrtf>:
 80141e2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80141e6:	4770      	bx	lr

080141e8 <with_errnof>:
 80141e8:	b510      	push	{r4, lr}
 80141ea:	ed2d 8b02 	vpush	{d8}
 80141ee:	eeb0 8a40 	vmov.f32	s16, s0
 80141f2:	4604      	mov	r4, r0
 80141f4:	f7fe fce2 	bl	8012bbc <__errno>
 80141f8:	eeb0 0a48 	vmov.f32	s0, s16
 80141fc:	ecbd 8b02 	vpop	{d8}
 8014200:	6004      	str	r4, [r0, #0]
 8014202:	bd10      	pop	{r4, pc}

08014204 <xflowf>:
 8014204:	b130      	cbz	r0, 8014214 <xflowf+0x10>
 8014206:	eef1 7a40 	vneg.f32	s15, s0
 801420a:	2022      	movs	r0, #34	; 0x22
 801420c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014210:	f7ff bfea 	b.w	80141e8 <with_errnof>
 8014214:	eef0 7a40 	vmov.f32	s15, s0
 8014218:	e7f7      	b.n	801420a <xflowf+0x6>
	...

0801421c <__math_uflowf>:
 801421c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014224 <__math_uflowf+0x8>
 8014220:	f7ff bff0 	b.w	8014204 <xflowf>
 8014224:	10000000 	.word	0x10000000

08014228 <__math_may_uflowf>:
 8014228:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014230 <__math_may_uflowf+0x8>
 801422c:	f7ff bfea 	b.w	8014204 <xflowf>
 8014230:	1a200000 	.word	0x1a200000

08014234 <__math_oflowf>:
 8014234:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801423c <__math_oflowf+0x8>
 8014238:	f7ff bfe4 	b.w	8014204 <xflowf>
 801423c:	70000000 	.word	0x70000000

08014240 <__math_divzerof>:
 8014240:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014244:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8014248:	2800      	cmp	r0, #0
 801424a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 801424e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801425c <__math_divzerof+0x1c>
 8014252:	2022      	movs	r0, #34	; 0x22
 8014254:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8014258:	f7ff bfc6 	b.w	80141e8 <with_errnof>
 801425c:	00000000 	.word	0x00000000

08014260 <__math_invalidf>:
 8014260:	eef0 7a40 	vmov.f32	s15, s0
 8014264:	ee30 7a40 	vsub.f32	s14, s0, s0
 8014268:	eef4 7a67 	vcmp.f32	s15, s15
 801426c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014270:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8014274:	d602      	bvs.n	801427c <__math_invalidf+0x1c>
 8014276:	2021      	movs	r0, #33	; 0x21
 8014278:	f7ff bfb6 	b.w	80141e8 <with_errnof>
 801427c:	4770      	bx	lr

0801427e <fabs>:
 801427e:	ec51 0b10 	vmov	r0, r1, d0
 8014282:	ee10 2a10 	vmov	r2, s0
 8014286:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801428a:	ec43 2b10 	vmov	d0, r2, r3
 801428e:	4770      	bx	lr

08014290 <finite>:
 8014290:	ee10 3a90 	vmov	r3, s1
 8014294:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8014298:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801429c:	0fc0      	lsrs	r0, r0, #31
 801429e:	4770      	bx	lr

080142a0 <matherr>:
 80142a0:	2000      	movs	r0, #0
 80142a2:	4770      	bx	lr
 80142a4:	0000      	movs	r0, r0
	...

080142a8 <nan>:
 80142a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80142b0 <nan+0x8>
 80142ac:	4770      	bx	lr
 80142ae:	bf00      	nop
 80142b0:	00000000 	.word	0x00000000
 80142b4:	7ff80000 	.word	0x7ff80000

080142b8 <rint>:
 80142b8:	b530      	push	{r4, r5, lr}
 80142ba:	b085      	sub	sp, #20
 80142bc:	ed8d 0b00 	vstr	d0, [sp]
 80142c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142c4:	f3c3 510a 	ubfx	r1, r3, #20, #11
 80142c8:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 80142cc:	2813      	cmp	r0, #19
 80142ce:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 80142d2:	dc5a      	bgt.n	801438a <rint+0xd2>
 80142d4:	2800      	cmp	r0, #0
 80142d6:	da2f      	bge.n	8014338 <rint+0x80>
 80142d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80142dc:	4311      	orrs	r1, r2
 80142de:	d027      	beq.n	8014330 <rint+0x78>
 80142e0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80142e4:	4315      	orrs	r5, r2
 80142e6:	426a      	negs	r2, r5
 80142e8:	432a      	orrs	r2, r5
 80142ea:	0b12      	lsrs	r2, r2, #12
 80142ec:	0c5b      	lsrs	r3, r3, #17
 80142ee:	045b      	lsls	r3, r3, #17
 80142f0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80142f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80142f8:	ea42 0103 	orr.w	r1, r2, r3
 80142fc:	4b31      	ldr	r3, [pc, #196]	; (80143c4 <rint+0x10c>)
 80142fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014302:	ed93 6b00 	vldr	d6, [r3]
 8014306:	ec41 0b17 	vmov	d7, r0, r1
 801430a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801430e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014312:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014316:	ee37 7b46 	vsub.f64	d7, d7, d6
 801431a:	ed8d 7b00 	vstr	d7, [sp]
 801431e:	9b01      	ldr	r3, [sp, #4]
 8014320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014328:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 801432c:	e9cd 0100 	strd	r0, r1, [sp]
 8014330:	ed9d 0b00 	vldr	d0, [sp]
 8014334:	b005      	add	sp, #20
 8014336:	bd30      	pop	{r4, r5, pc}
 8014338:	4923      	ldr	r1, [pc, #140]	; (80143c8 <rint+0x110>)
 801433a:	4101      	asrs	r1, r0
 801433c:	ea03 0501 	and.w	r5, r3, r1
 8014340:	4315      	orrs	r5, r2
 8014342:	d0f5      	beq.n	8014330 <rint+0x78>
 8014344:	0849      	lsrs	r1, r1, #1
 8014346:	ea03 0501 	and.w	r5, r3, r1
 801434a:	432a      	orrs	r2, r5
 801434c:	d00b      	beq.n	8014366 <rint+0xae>
 801434e:	ea23 0101 	bic.w	r1, r3, r1
 8014352:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014356:	2813      	cmp	r0, #19
 8014358:	fa43 f300 	asr.w	r3, r3, r0
 801435c:	bf0c      	ite	eq
 801435e:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8014362:	2200      	movne	r2, #0
 8014364:	430b      	orrs	r3, r1
 8014366:	4619      	mov	r1, r3
 8014368:	4b16      	ldr	r3, [pc, #88]	; (80143c4 <rint+0x10c>)
 801436a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801436e:	ed94 6b00 	vldr	d6, [r4]
 8014372:	4610      	mov	r0, r2
 8014374:	ec41 0b17 	vmov	d7, r0, r1
 8014378:	ee36 7b07 	vadd.f64	d7, d6, d7
 801437c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014380:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014384:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014388:	e008      	b.n	801439c <rint+0xe4>
 801438a:	2833      	cmp	r0, #51	; 0x33
 801438c:	dd09      	ble.n	80143a2 <rint+0xea>
 801438e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014392:	d1cd      	bne.n	8014330 <rint+0x78>
 8014394:	ed9d 7b00 	vldr	d7, [sp]
 8014398:	ee37 7b07 	vadd.f64	d7, d7, d7
 801439c:	ed8d 7b00 	vstr	d7, [sp]
 80143a0:	e7c6      	b.n	8014330 <rint+0x78>
 80143a2:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 80143a6:	f04f 31ff 	mov.w	r1, #4294967295
 80143aa:	40c1      	lsrs	r1, r0
 80143ac:	420a      	tst	r2, r1
 80143ae:	d0bf      	beq.n	8014330 <rint+0x78>
 80143b0:	0849      	lsrs	r1, r1, #1
 80143b2:	420a      	tst	r2, r1
 80143b4:	bf1f      	itttt	ne
 80143b6:	ea22 0101 	bicne.w	r1, r2, r1
 80143ba:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80143be:	4102      	asrne	r2, r0
 80143c0:	430a      	orrne	r2, r1
 80143c2:	e7d0      	b.n	8014366 <rint+0xae>
 80143c4:	08015840 	.word	0x08015840
 80143c8:	000fffff 	.word	0x000fffff
 80143cc:	00000000 	.word	0x00000000

080143d0 <scalbn>:
 80143d0:	b500      	push	{lr}
 80143d2:	ed2d 8b02 	vpush	{d8}
 80143d6:	b083      	sub	sp, #12
 80143d8:	ed8d 0b00 	vstr	d0, [sp]
 80143dc:	9b01      	ldr	r3, [sp, #4]
 80143de:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80143e2:	b9a2      	cbnz	r2, 801440e <scalbn+0x3e>
 80143e4:	9a00      	ldr	r2, [sp, #0]
 80143e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80143ea:	4313      	orrs	r3, r2
 80143ec:	d03a      	beq.n	8014464 <scalbn+0x94>
 80143ee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80144a8 <scalbn+0xd8>
 80143f2:	4b35      	ldr	r3, [pc, #212]	; (80144c8 <scalbn+0xf8>)
 80143f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80143f8:	4298      	cmp	r0, r3
 80143fa:	ed8d 7b00 	vstr	d7, [sp]
 80143fe:	da11      	bge.n	8014424 <scalbn+0x54>
 8014400:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80144b0 <scalbn+0xe0>
 8014404:	ed9d 6b00 	vldr	d6, [sp]
 8014408:	ee27 7b06 	vmul.f64	d7, d7, d6
 801440c:	e007      	b.n	801441e <scalbn+0x4e>
 801440e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014412:	428a      	cmp	r2, r1
 8014414:	d10a      	bne.n	801442c <scalbn+0x5c>
 8014416:	ed9d 7b00 	vldr	d7, [sp]
 801441a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801441e:	ed8d 7b00 	vstr	d7, [sp]
 8014422:	e01f      	b.n	8014464 <scalbn+0x94>
 8014424:	9b01      	ldr	r3, [sp, #4]
 8014426:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801442a:	3a36      	subs	r2, #54	; 0x36
 801442c:	4402      	add	r2, r0
 801442e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014432:	428a      	cmp	r2, r1
 8014434:	dd0a      	ble.n	801444c <scalbn+0x7c>
 8014436:	ed9f 8b20 	vldr	d8, [pc, #128]	; 80144b8 <scalbn+0xe8>
 801443a:	eeb0 0b48 	vmov.f64	d0, d8
 801443e:	ed9d 1b00 	vldr	d1, [sp]
 8014442:	f000 f843 	bl	80144cc <copysign>
 8014446:	ee20 7b08 	vmul.f64	d7, d0, d8
 801444a:	e7e8      	b.n	801441e <scalbn+0x4e>
 801444c:	2a00      	cmp	r2, #0
 801444e:	dd10      	ble.n	8014472 <scalbn+0xa2>
 8014450:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014454:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014458:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801445c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014460:	e9cd 0100 	strd	r0, r1, [sp]
 8014464:	ed9d 0b00 	vldr	d0, [sp]
 8014468:	b003      	add	sp, #12
 801446a:	ecbd 8b02 	vpop	{d8}
 801446e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014472:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014476:	da06      	bge.n	8014486 <scalbn+0xb6>
 8014478:	f24c 3350 	movw	r3, #50000	; 0xc350
 801447c:	4298      	cmp	r0, r3
 801447e:	dcda      	bgt.n	8014436 <scalbn+0x66>
 8014480:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 80144b0 <scalbn+0xe0>
 8014484:	e7d9      	b.n	801443a <scalbn+0x6a>
 8014486:	e9dd 0100 	ldrd	r0, r1, [sp]
 801448a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801448e:	3236      	adds	r2, #54	; 0x36
 8014490:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014494:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014498:	ec41 0b17 	vmov	d7, r0, r1
 801449c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80144c0 <scalbn+0xf0>
 80144a0:	e7b2      	b.n	8014408 <scalbn+0x38>
 80144a2:	bf00      	nop
 80144a4:	f3af 8000 	nop.w
 80144a8:	00000000 	.word	0x00000000
 80144ac:	43500000 	.word	0x43500000
 80144b0:	c2f8f359 	.word	0xc2f8f359
 80144b4:	01a56e1f 	.word	0x01a56e1f
 80144b8:	8800759c 	.word	0x8800759c
 80144bc:	7e37e43c 	.word	0x7e37e43c
 80144c0:	00000000 	.word	0x00000000
 80144c4:	3c900000 	.word	0x3c900000
 80144c8:	ffff3cb0 	.word	0xffff3cb0

080144cc <copysign>:
 80144cc:	ec51 0b10 	vmov	r0, r1, d0
 80144d0:	ee11 0a90 	vmov	r0, s3
 80144d4:	ee10 2a10 	vmov	r2, s0
 80144d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80144dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80144e0:	ea41 0300 	orr.w	r3, r1, r0
 80144e4:	ec43 2b10 	vmov	d0, r2, r3
 80144e8:	4770      	bx	lr
	...

080144ec <_init>:
 80144ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144ee:	bf00      	nop
 80144f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144f2:	bc08      	pop	{r3}
 80144f4:	469e      	mov	lr, r3
 80144f6:	4770      	bx	lr

080144f8 <_fini>:
 80144f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144fa:	bf00      	nop
 80144fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144fe:	bc08      	pop	{r3}
 8014500:	469e      	mov	lr, r3
 8014502:	4770      	bx	lr
