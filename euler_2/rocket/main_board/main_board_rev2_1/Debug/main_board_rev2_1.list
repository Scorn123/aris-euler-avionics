
main_board_rev2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014944  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002088  08014be8  08014be8  00024be8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016c70  08016c70  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08016c70  08016c70  00026c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016c78  08016c78  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016c78  08016c78  00026c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016c7c  08016c7c  00026c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  24000000  08016c80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00020818  24000204  08016e84  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00001304  24020a1c  08016e84  00030a1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008b483  00000000  00000000  00030232  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000e0fb  00000000  00000000  000bb6b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000298bb  00000000  00000000  000c97b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002c00  00000000  00000000  000f3070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00004478  00000000  00000000  000f5c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0004ce29  00000000  00000000  000fa0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0004036c  00000000  00000000  00146f11  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0019f847  00000000  00000000  0018727d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00326ac4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008f40  00000000  00000000  00326b40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000204 	.word	0x24000204
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014bcc 	.word	0x08014bcc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000208 	.word	0x24000208
 80002dc:	08014bcc 	.word	0x08014bcc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <calculateCRC>:
uint16_t calculateCRC(uint8_t *data, uint8_t len) {
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;

	for (int i = 0; i < len + 2; i += 2) {
 8000690:	2200      	movs	r2, #0
 8000692:	f101 0c01 	add.w	ip, r1, #1
uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8000696:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t crc = 0;
 8000698:	4613      	mov	r3, r2
		}
		do {
			carry = crc & 0x8000;
			crc <<= 1;
			if(c & shifter) crc++;
			if(carry) crc ^= 0x1021;
 800069a:	f241 0e21 	movw	lr, #4129	; 0x1021
	for (int i = 0; i < len + 2; i += 2) {
 800069e:	4594      	cmp	ip, r2
 80006a0:	da01      	bge.n	80006a6 <calculateCRC+0x16>
			shifter >>= 1;
		} while(shifter);
	}
	return crc;
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (i == len) {
 80006a6:	4291      	cmp	r1, r2
			c = 0;
 80006a8:	461f      	mov	r7, r3
 80006aa:	f44f 4600 	mov.w	r6, #32768	; 0x8000
			c = data[i+1] << 8 | data[i];
 80006ae:	bf17      	itett	ne
 80006b0:	1884      	addne	r4, r0, r2
			c = 0;
 80006b2:	2400      	moveq	r4, #0
			c = data[i+1] << 8 | data[i];
 80006b4:	7865      	ldrbne	r5, [r4, #1]
 80006b6:	5c84      	ldrbne	r4, [r0, r2]
 80006b8:	bf18      	it	ne
 80006ba:	ea44 2405 	orrne.w	r4, r4, r5, lsl #8
			c = 0;
 80006be:	2510      	movs	r5, #16
			crc <<= 1;
 80006c0:	005b      	lsls	r3, r3, #1
			if(c & shifter) crc++;
 80006c2:	4226      	tst	r6, r4
			shifter >>= 1;
 80006c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
			crc <<= 1;
 80006c8:	b29b      	uxth	r3, r3
			if(c & shifter) crc++;
 80006ca:	bf1c      	itt	ne
 80006cc:	3301      	addne	r3, #1
 80006ce:	b29b      	uxthne	r3, r3
			if(carry) crc ^= 0x1021;
 80006d0:	043f      	lsls	r7, r7, #16
 80006d2:	bf48      	it	mi
 80006d4:	ea83 030e 	eormi.w	r3, r3, lr
		} while(shifter);
 80006d8:	3d01      	subs	r5, #1
 80006da:	d101      	bne.n	80006e0 <calculateCRC+0x50>
	for (int i = 0; i < len + 2; i += 2) {
 80006dc:	3202      	adds	r2, #2
 80006de:	e7de      	b.n	800069e <calculateCRC+0xe>
 80006e0:	461f      	mov	r7, r3
 80006e2:	e7ed      	b.n	80006c0 <calculateCRC+0x30>

080006e4 <WriteCommand>:
	return status;


}

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer){
 80006e4:	b570      	push	{r4, r5, r6, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	460d      	mov	r5, r1
	osStatus_t status = osError;

	uint8_t byte_stream_write[14] = { 0 };
 80006ea:	2100      	movs	r1, #0
osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer){
 80006ec:	4606      	mov	r6, r0
 80006ee:	4614      	mov	r4, r2

	uint8_t dma_buffer[20] = { 0 };
 80006f0:	a807      	add	r0, sp, #28
 80006f2:	2214      	movs	r2, #20
	uint8_t byte_stream_write[14] = { 0 };
 80006f4:	f8cd 1012 	str.w	r1, [sp, #18]
 80006f8:	f8cd 1016 	str.w	r1, [sp, #22]
	uint8_t dma_buffer[20] = { 0 };
 80006fc:	f012 fdc7 	bl	801328e <memset>

	byte_stream_write[0] = 0x90;			// DLE
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <WriteCommand+0xcc>)
	byte_stream_write[10] = data[1];		// Data
	byte_stream_write[11] = data[0];		// Data - high byte

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 8000702:	aa0c      	add	r2, sp, #48	; 0x30
	byte_stream_write[0] = 0x90;			// DLE
 8000704:	9303      	str	r3, [sp, #12]
	byte_stream_write[3] = 0x04;			// Length of Data in Words
 8000706:	2301      	movs	r3, #1
 8000708:	f88d 3010 	strb.w	r3, [sp, #16]
	byte_stream_write[5] = command[1];		// Index Low Byte
 800070c:	7873      	ldrb	r3, [r6, #1]
 800070e:	f88d 3011 	strb.w	r3, [sp, #17]
	byte_stream_write[6] = command[0];		// Index High byte
 8000712:	7833      	ldrb	r3, [r6, #0]

	HAL_UART_DMAResume(&huart4);
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
	osDelay(5);
	HAL_UART_DMAStop(&huart4);
	memcpy(rx_buffer, dma_buffer, 20);
 8000714:	ae0b      	add	r6, sp, #44	; 0x2c
	byte_stream_write[6] = command[0];		// Index High byte
 8000716:	f88d 3012 	strb.w	r3, [sp, #18]
	byte_stream_write[8] = data[3];			// Data - low byte
 800071a:	78eb      	ldrb	r3, [r5, #3]
 800071c:	f88d 3014 	strb.w	r3, [sp, #20]
	byte_stream_write[9] = data[2];			// Data
 8000720:	78ab      	ldrb	r3, [r5, #2]
 8000722:	f88d 3015 	strb.w	r3, [sp, #21]
	byte_stream_write[10] = data[1];		// Data
 8000726:	786b      	ldrb	r3, [r5, #1]
 8000728:	f88d 3016 	strb.w	r3, [sp, #22]
	byte_stream_write[11] = data[0];		// Data - high byte
 800072c:	782b      	ldrb	r3, [r5, #0]
 800072e:	f88d 3017 	strb.w	r3, [sp, #23]
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 8000732:	466b      	mov	r3, sp
 8000734:	f852 0d22 	ldr.w	r0, [r2, #-34]!
 8000738:	6851      	ldr	r1, [r2, #4]
 800073a:	8912      	ldrh	r2, [r2, #8]
 800073c:	c303      	stmia	r3!, {r0, r1}
	crc_calc = calculateCRC(crc_data_array, 10);
 800073e:	210a      	movs	r1, #10
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 8000740:	801a      	strh	r2, [r3, #0]
	crc_calc = calculateCRC(crc_data_array, 10);
 8000742:	4668      	mov	r0, sp
 8000744:	f7ff ffa4 	bl	8000690 <calculateCRC>
	byte_stream_write[12] = crc_calc & 0xFF;;				// CRC low byte
 8000748:	f88d 0018 	strb.w	r0, [sp, #24]
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 800074c:	0a00      	lsrs	r0, r0, #8
	HAL_UART_Transmit(&huart4, byte_stream_write, 14, 20);
 800074e:	2314      	movs	r3, #20
 8000750:	220e      	movs	r2, #14
 8000752:	a903      	add	r1, sp, #12
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8000754:	f88d 0019 	strb.w	r0, [sp, #25]
	HAL_UART_Transmit(&huart4, byte_stream_write, 14, 20);
 8000758:	4816      	ldr	r0, [pc, #88]	; (80007b4 <WriteCommand+0xd0>)
 800075a:	f00b fd53 	bl	800c204 <HAL_UART_Transmit>
	HAL_UART_DMAResume(&huart4);
 800075e:	4815      	ldr	r0, [pc, #84]	; (80007b4 <WriteCommand+0xd0>)
 8000760:	f00b f93c 	bl	800b9dc <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
 8000764:	2214      	movs	r2, #20
 8000766:	a907      	add	r1, sp, #28
 8000768:	4812      	ldr	r0, [pc, #72]	; (80007b4 <WriteCommand+0xd0>)
 800076a:	f00b f8bd 	bl	800b8e8 <HAL_UART_Receive_DMA>
	osDelay(5);
 800076e:	2005      	movs	r0, #5
 8000770:	f00f fa94 	bl	800fc9c <osDelay>
	HAL_UART_DMAStop(&huart4);
 8000774:	480f      	ldr	r0, [pc, #60]	; (80007b4 <WriteCommand+0xd0>)
 8000776:	f00b f95b 	bl	800ba30 <HAL_UART_DMAStop>
	memcpy(rx_buffer, dma_buffer, 20);
 800077a:	ab07      	add	r3, sp, #28
 800077c:	4622      	mov	r2, r4
 800077e:	461d      	mov	r5, r3
 8000780:	3208      	adds	r2, #8
 8000782:	cd03      	ldmia	r5!, {r0, r1}
 8000784:	42b5      	cmp	r5, r6
 8000786:	f842 0c08 	str.w	r0, [r2, #-8]
 800078a:	f842 1c04 	str.w	r1, [r2, #-4]
 800078e:	462b      	mov	r3, r5
 8000790:	d1f5      	bne.n	800077e <WriteCommand+0x9a>
 8000792:	6828      	ldr	r0, [r5, #0]
 8000794:	6010      	str	r0, [r2, #0]

	/* Check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8000796:	79a2      	ldrb	r2, [r4, #6]
 8000798:	79e3      	ldrb	r3, [r4, #7]
 800079a:	4313      	orrs	r3, r2
 800079c:	7962      	ldrb	r2, [r4, #5]
 800079e:	4313      	orrs	r3, r2
 80007a0:	7922      	ldrb	r2, [r4, #4]
 80007a2:	4313      	orrs	r3, r2
		status = osOK;
	}

	return status;

}
 80007a4:	bf14      	ite	ne
 80007a6:	f04f 30ff 	movne.w	r0, #4294967295
 80007aa:	2000      	moveq	r0, #0
 80007ac:	b00c      	add	sp, #48	; 0x30
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	04680290 	.word	0x04680290
 80007b4:	240187a8 	.word	0x240187a8

080007b8 <DisableMotor>:
osStatus_t DisableMotor(){
 80007b8:	b500      	push	{lr}
	command[0] = 0x60;
 80007ba:	f244 1360 	movw	r3, #16736	; 0x4160
osStatus_t DisableMotor(){
 80007be:	b089      	sub	sp, #36	; 0x24
	command[0] = 0x60;
 80007c0:	f8ad 3004 	strh.w	r3, [sp, #4]
	status = WriteCommand(command, data, rx_buffer_write);
 80007c4:	aa03      	add	r2, sp, #12
	data[0] = 0x00;
 80007c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	status = WriteCommand(command, data, rx_buffer_write);
 80007ca:	a902      	add	r1, sp, #8
 80007cc:	a801      	add	r0, sp, #4
	data[0] = 0x00;
 80007ce:	9302      	str	r3, [sp, #8]
	status = WriteCommand(command, data, rx_buffer_write);
 80007d0:	f7ff ff88 	bl	80006e4 <WriteCommand>
}
 80007d4:	b009      	add	sp, #36	; 0x24
 80007d6:	f85d fb04 	ldr.w	pc, [sp], #4

080007da <SetPositionMode>:
osStatus_t SetPositionMode(int8_t position_mode){
 80007da:	b500      	push	{lr}
	command[0] = 0x60;
 80007dc:	f246 0360 	movw	r3, #24672	; 0x6060
osStatus_t SetPositionMode(int8_t position_mode){
 80007e0:	b089      	sub	sp, #36	; 0x24
	command[0] = 0x60;
 80007e2:	f8ad 3004 	strh.w	r3, [sp, #4]
	status = WriteCommand(command, data, rx_buffer_write);
 80007e6:	aa03      	add	r2, sp, #12
	data[0] = 0x00;
 80007e8:	2300      	movs	r3, #0
	status = WriteCommand(command, data, rx_buffer_write);
 80007ea:	a902      	add	r1, sp, #8
	data[3] = position_mode;
 80007ec:	f88d 000b 	strb.w	r0, [sp, #11]
	status = WriteCommand(command, data, rx_buffer_write);
 80007f0:	a801      	add	r0, sp, #4
	data[0] = 0x00;
 80007f2:	f8ad 3008 	strh.w	r3, [sp, #8]
	data[1] = 0x00;
 80007f6:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 80007fa:	f7ff ff73 	bl	80006e4 <WriteCommand>
}
 80007fe:	b009      	add	sp, #36	; 0x24
 8000800:	f85d fb04 	ldr.w	pc, [sp], #4

08000804 <MoveToPositionPPM>:
osStatus_t MoveToPositionPPM(int32_t position){
 8000804:	b510      	push	{r4, lr}
	command[0] = 0x60;
 8000806:	f647 2360 	movw	r3, #31328	; 0x7a60
osStatus_t MoveToPositionPPM(int32_t position){
 800080a:	b088      	sub	sp, #32
	command[0] = 0x60;
 800080c:	f244 0460 	movw	r4, #16480	; 0x4060
	command[0] = 0x60;
 8000810:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (position >> 24) & 0xFF;
 8000814:	0e03      	lsrs	r3, r0, #24
	data[3] = position & 0xFF;
 8000816:	f88d 000b 	strb.w	r0, [sp, #11]
	status = WriteCommand(command, data, rx_buffer_write);
 800081a:	aa03      	add	r2, sp, #12
	data[0] = (position >> 24) & 0xFF;
 800081c:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (position >> 16) & 0xFF;
 8000820:	1403      	asrs	r3, r0, #16
	status = WriteCommand(command, data, rx_buffer_write);
 8000822:	a902      	add	r1, sp, #8
	data[1] = (position >> 16) & 0xFF;
 8000824:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (position >> 8) & 0xFF;
 8000828:	1203      	asrs	r3, r0, #8
	status = WriteCommand(command, data, rx_buffer_write);
 800082a:	a801      	add	r0, sp, #4
	data[2] = (position >> 8) & 0xFF;
 800082c:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 8000830:	f7ff ff58 	bl	80006e4 <WriteCommand>
	data[0] = 0x00;
 8000834:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
	status = WriteCommand(command, data, rx_buffer_write);
 8000838:	aa03      	add	r2, sp, #12
 800083a:	a902      	add	r1, sp, #8
 800083c:	a801      	add	r0, sp, #4
	data[0] = 0x00;
 800083e:	9302      	str	r3, [sp, #8]
	command[0] = 0x60;
 8000840:	f8ad 4004 	strh.w	r4, [sp, #4]
	status = WriteCommand(command, data, rx_buffer_write);
 8000844:	f7ff ff4e 	bl	80006e4 <WriteCommand>
	data[0] = 0x00;
 8000848:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
	status = WriteCommand(command, data, rx_buffer_write);
 800084c:	aa03      	add	r2, sp, #12
 800084e:	a902      	add	r1, sp, #8
 8000850:	a801      	add	r0, sp, #4
	command[0] = 0x60;
 8000852:	f8ad 4004 	strh.w	r4, [sp, #4]
	data[0] = 0x00;
 8000856:	9302      	str	r3, [sp, #8]
	status = WriteCommand(command, data, rx_buffer_write);
 8000858:	f7ff ff44 	bl	80006e4 <WriteCommand>
}
 800085c:	b008      	add	sp, #32
 800085e:	bd10      	pop	{r4, pc}

08000860 <ConfigurePPM>:
osStatus_t ConfigurePPM(int32_t velocity, int32_t acceleration, int32_t deceleration){
 8000860:	b530      	push	{r4, r5, lr}
	command[0] = 0x60;
 8000862:	f248 1360 	movw	r3, #33120	; 0x8160
osStatus_t ConfigurePPM(int32_t velocity, int32_t acceleration, int32_t deceleration){
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	460d      	mov	r5, r1
 800086a:	4614      	mov	r4, r2
	command[0] = 0x60;
 800086c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (velocity >> 24) & 0xFF;
 8000870:	0e03      	lsrs	r3, r0, #24
	data[3] = velocity & 0xFF;
 8000872:	f88d 000b 	strb.w	r0, [sp, #11]
	status = WriteCommand(command, data, rx_buffer_write);
 8000876:	aa03      	add	r2, sp, #12
	data[0] = (velocity >> 24) & 0xFF;
 8000878:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (velocity >> 16) & 0xFF;
 800087c:	1403      	asrs	r3, r0, #16
	status = WriteCommand(command, data, rx_buffer_write);
 800087e:	a902      	add	r1, sp, #8
	data[1] = (velocity >> 16) & 0xFF;
 8000880:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (velocity >> 8) & 0xFF;
 8000884:	1203      	asrs	r3, r0, #8
	status = WriteCommand(command, data, rx_buffer_write);
 8000886:	a801      	add	r0, sp, #4
	data[2] = (velocity >> 8) & 0xFF;
 8000888:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 800088c:	f7ff ff2a 	bl	80006e4 <WriteCommand>
	command[0] = 0x60;
 8000890:	f248 3360 	movw	r3, #33632	; 0x8360
	status = WriteCommand(command, data, rx_buffer_write);
 8000894:	aa03      	add	r2, sp, #12
 8000896:	a902      	add	r1, sp, #8
 8000898:	a801      	add	r0, sp, #4
	command[0] = 0x60;
 800089a:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (acceleration >> 24) & 0xFF;
 800089e:	0e2b      	lsrs	r3, r5, #24
	data[3] = acceleration & 0xFF;
 80008a0:	f88d 500b 	strb.w	r5, [sp, #11]
	data[0] = (acceleration >> 24) & 0xFF;
 80008a4:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (acceleration >> 16) & 0xFF;
 80008a8:	142b      	asrs	r3, r5, #16
 80008aa:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (acceleration >> 8) & 0xFF;
 80008ae:	122b      	asrs	r3, r5, #8
 80008b0:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 80008b4:	f7ff ff16 	bl	80006e4 <WriteCommand>
	command[0] = 0x60;
 80008b8:	f248 4360 	movw	r3, #33888	; 0x8460
	status = WriteCommand(command, data, rx_buffer_write);
 80008bc:	aa03      	add	r2, sp, #12
 80008be:	a902      	add	r1, sp, #8
 80008c0:	a801      	add	r0, sp, #4
	command[0] = 0x60;
 80008c2:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (deceleration >> 24) & 0xFF;
 80008c6:	0e23      	lsrs	r3, r4, #24
	data[3] = deceleration & 0xFF;
 80008c8:	f88d 400b 	strb.w	r4, [sp, #11]
	data[0] = (deceleration >> 24) & 0xFF;
 80008cc:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (deceleration >> 16) & 0xFF;
 80008d0:	1423      	asrs	r3, r4, #16
 80008d2:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (deceleration >> 8) & 0xFF;
 80008d6:	1223      	asrs	r3, r4, #8
 80008d8:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 80008dc:	f7ff ff02 	bl	80006e4 <WriteCommand>
}
 80008e0:	b009      	add	sp, #36	; 0x24
 80008e2:	bd30      	pop	{r4, r5, pc}

080008e4 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer){
 80008e4:	b570      	push	{r4, r5, r6, lr}
 80008e6:	b08e      	sub	sp, #56	; 0x38
 80008e8:	4605      	mov	r5, r0
	osStatus_t status = osError;

	uint8_t byte_stream_read[10];

	uint8_t dma_buffer[30] = { 0 };
 80008ea:	221e      	movs	r2, #30
osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer){
 80008ec:	460c      	mov	r4, r1
	uint8_t dma_buffer[30] = { 0 };
 80008ee:	a806      	add	r0, sp, #24
 80008f0:	2100      	movs	r1, #0
 80008f2:	f012 fccc 	bl	801328e <memset>

	byte_stream_read[0] = 0x90;				// DLE
 80008f6:	4b27      	ldr	r3, [pc, #156]	; (8000994 <ReadCommand+0xb0>)
	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));

	uint16_t crc_calc = 0;
	crc_calc = calculateCRC(crc_data_array, 6);
 80008f8:	2106      	movs	r1, #6

	HAL_UART_DMAResume(&huart4);
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
	osDelay(5);
	HAL_UART_DMAStop(&huart4);
	memcpy(rx_buffer, dma_buffer, 20);
 80008fa:	ae0a      	add	r6, sp, #40	; 0x28
	byte_stream_read[0] = 0x90;				// DLE
 80008fc:	9303      	str	r3, [sp, #12]
	byte_stream_read[3] = 0x02;				// Length of stuff sent
 80008fe:	2301      	movs	r3, #1
 8000900:	f88d 3010 	strb.w	r3, [sp, #16]
	byte_stream_read[5] = command[1];		// Index Low Byte
 8000904:	786b      	ldrb	r3, [r5, #1]
 8000906:	f88d 3011 	strb.w	r3, [sp, #17]
	byte_stream_read[6] = command[0];		// Index High byte
 800090a:	782b      	ldrb	r3, [r5, #0]
 800090c:	f88d 3012 	strb.w	r3, [sp, #18]
	byte_stream_read[7] = 0x00;				// Subindex of object
 8000910:	2300      	movs	r3, #0
 8000912:	f88d 3013 	strb.w	r3, [sp, #19]
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 8000916:	ab0e      	add	r3, sp, #56	; 0x38
 8000918:	f853 0d2a 	ldr.w	r0, [r3, #-42]!
 800091c:	889b      	ldrh	r3, [r3, #4]
 800091e:	9001      	str	r0, [sp, #4]
	crc_calc = calculateCRC(crc_data_array, 6);
 8000920:	a801      	add	r0, sp, #4
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 8000922:	f8ad 3008 	strh.w	r3, [sp, #8]
	crc_calc = calculateCRC(crc_data_array, 6);
 8000926:	f7ff feb3 	bl	8000690 <calculateCRC>
	HAL_UART_Transmit(&huart4, byte_stream_read, 10, 10);
 800092a:	230a      	movs	r3, #10
	byte_stream_read[8] = crc_calc & 0xFF;;				// CRC low byte
 800092c:	f88d 0014 	strb.w	r0, [sp, #20]
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8000930:	0a00      	lsrs	r0, r0, #8
	HAL_UART_Transmit(&huart4, byte_stream_read, 10, 10);
 8000932:	a903      	add	r1, sp, #12
 8000934:	461a      	mov	r2, r3
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8000936:	f88d 0015 	strb.w	r0, [sp, #21]
	HAL_UART_Transmit(&huart4, byte_stream_read, 10, 10);
 800093a:	4817      	ldr	r0, [pc, #92]	; (8000998 <ReadCommand+0xb4>)
 800093c:	f00b fc62 	bl	800c204 <HAL_UART_Transmit>
	HAL_UART_DMAResume(&huart4);
 8000940:	4815      	ldr	r0, [pc, #84]	; (8000998 <ReadCommand+0xb4>)
 8000942:	f00b f84b 	bl	800b9dc <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
 8000946:	2214      	movs	r2, #20
 8000948:	a906      	add	r1, sp, #24
 800094a:	4813      	ldr	r0, [pc, #76]	; (8000998 <ReadCommand+0xb4>)
 800094c:	f00a ffcc 	bl	800b8e8 <HAL_UART_Receive_DMA>
	osDelay(5);
 8000950:	2005      	movs	r0, #5
 8000952:	f00f f9a3 	bl	800fc9c <osDelay>
	HAL_UART_DMAStop(&huart4);
 8000956:	4810      	ldr	r0, [pc, #64]	; (8000998 <ReadCommand+0xb4>)
 8000958:	f00b f86a 	bl	800ba30 <HAL_UART_DMAStop>
	memcpy(rx_buffer, dma_buffer, 20);
 800095c:	ab06      	add	r3, sp, #24
 800095e:	4622      	mov	r2, r4
 8000960:	461d      	mov	r5, r3
 8000962:	3208      	adds	r2, #8
 8000964:	cd03      	ldmia	r5!, {r0, r1}
 8000966:	42b5      	cmp	r5, r6
 8000968:	f842 0c08 	str.w	r0, [r2, #-8]
 800096c:	f842 1c04 	str.w	r1, [r2, #-4]
 8000970:	462b      	mov	r3, r5
 8000972:	d1f5      	bne.n	8000960 <ReadCommand+0x7c>
 8000974:	6828      	ldr	r0, [r5, #0]
 8000976:	6010      	str	r0, [r2, #0]


	/* check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8000978:	79a2      	ldrb	r2, [r4, #6]
 800097a:	79e3      	ldrb	r3, [r4, #7]
 800097c:	4313      	orrs	r3, r2
 800097e:	7962      	ldrb	r2, [r4, #5]
 8000980:	4313      	orrs	r3, r2
 8000982:	7922      	ldrb	r2, [r4, #4]
 8000984:	4313      	orrs	r3, r2
		status = osOK;
	}
	return status;

}
 8000986:	bf14      	ite	ne
 8000988:	f04f 30ff 	movne.w	r0, #4294967295
 800098c:	2000      	moveq	r0, #0
 800098e:	b00e      	add	sp, #56	; 0x38
 8000990:	bd70      	pop	{r4, r5, r6, pc}
 8000992:	bf00      	nop
 8000994:	02600290 	.word	0x02600290
 8000998:	240187a8 	.word	0x240187a8

0800099c <EnableMotor>:
osStatus_t EnableMotor(){
 800099c:	b510      	push	{r4, lr}
 800099e:	b08c      	sub	sp, #48	; 0x30
	data[0] = 0x00;
 80009a0:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
	command[0] = 0x60;
 80009a4:	f244 0460 	movw	r4, #16480	; 0x4060
	status = WriteCommand(command, data, rx_buffer_write);
 80009a8:	aa02      	add	r2, sp, #8
 80009aa:	a901      	add	r1, sp, #4
 80009ac:	4668      	mov	r0, sp
	data[0] = 0x00;
 80009ae:	9301      	str	r3, [sp, #4]
	command[0] = 0x60;
 80009b0:	f8ad 4000 	strh.w	r4, [sp]
	status = WriteCommand(command, data, rx_buffer_write);
 80009b4:	f7ff fe96 	bl	80006e4 <WriteCommand>
	data[0] = 0x00;
 80009b8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
	status = WriteCommand(command, data, rx_buffer_write);
 80009bc:	aa02      	add	r2, sp, #8
 80009be:	a901      	add	r1, sp, #4
 80009c0:	4668      	mov	r0, sp
	data[0] = 0x00;
 80009c2:	9301      	str	r3, [sp, #4]
	command[0] = 0x60;
 80009c4:	f8ad 4000 	strh.w	r4, [sp]
	status = WriteCommand(command, data, rx_buffer_write);
 80009c8:	f7ff fe8c 	bl	80006e4 <WriteCommand>
	command[0] = 0x60;
 80009cc:	f244 1360 	movw	r3, #16736	; 0x4160
	status = ReadCommand(command, rx_buffer_read);
 80009d0:	a907      	add	r1, sp, #28
 80009d2:	4668      	mov	r0, sp
	command[0] = 0x60;
 80009d4:	f8ad 3000 	strh.w	r3, [sp]
	status = ReadCommand(command, rx_buffer_read);
 80009d8:	f7ff ff84 	bl	80008e4 <ReadCommand>
	if(rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04 ){
 80009dc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80009e0:	2b37      	cmp	r3, #55	; 0x37
 80009e2:	d104      	bne.n	80009ee <EnableMotor+0x52>
 80009e4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80009e8:	2b04      	cmp	r3, #4
		status = osOK;
 80009ea:	bf08      	it	eq
 80009ec:	2000      	moveq	r0, #0
}
 80009ee:	b00c      	add	sp, #48	; 0x30
 80009f0:	bd10      	pop	{r4, pc}

080009f2 <GetPosition>:
osStatus_t GetPosition(int32_t *position){
 80009f2:	b510      	push	{r4, lr}
 80009f4:	b086      	sub	sp, #24
	command[0] = 0x60;
 80009f6:	f246 4360 	movw	r3, #25696	; 0x6460
osStatus_t GetPosition(int32_t *position){
 80009fa:	4604      	mov	r4, r0
	status = ReadCommand(command, rx_buffer_read);
 80009fc:	a901      	add	r1, sp, #4
 80009fe:	4668      	mov	r0, sp
	command[0] = 0x60;
 8000a00:	f8ad 3000 	strh.w	r3, [sp]
	status = ReadCommand(command, rx_buffer_read);
 8000a04:	f7ff ff6e 	bl	80008e4 <ReadCommand>
			(rx_buffer_read[9] << 8) +
 8000a08:	f89d 200d 	ldrb.w	r2, [sp, #13]
	*position = rx_buffer_read[8] +
 8000a0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000a10:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			(rx_buffer_read[10] << 16) +
 8000a14:	f89d 200e 	ldrb.w	r2, [sp, #14]
			(rx_buffer_read[9] << 8) +
 8000a18:	eb03 4302 	add.w	r3, r3, r2, lsl #16
			(rx_buffer_read[11] << 24);
 8000a1c:	f89d 200f 	ldrb.w	r2, [sp, #15]
			(rx_buffer_read[10] << 16) +
 8000a20:	eb03 6302 	add.w	r3, r3, r2, lsl #24
	*position = rx_buffer_read[8] +
 8000a24:	6023      	str	r3, [r4, #0]
}
 8000a26:	b006      	add	sp, #24
 8000a28:	bd10      	pop	{r4, pc}

08000a2a <_gps_search_start>:

#include "GPS/gps.h"

const uint8_t ubxgga[HEADER_SIZE] = {'G','G','A'};

uint32_t _gps_search_start(uint8_t *arr){
 8000a2a:	3001      	adds	r0, #1
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	f240 32a2 	movw	r2, #930	; 0x3a2
			{
			  if(arr[i-2] == ubxgga[0] && arr[i-1] == ubxgga[1] && arr[i] == ubxgga[2])
 8000a32:	f810 1b01 	ldrb.w	r1, [r0], #1
 8000a36:	3301      	adds	r3, #1
 8000a38:	2947      	cmp	r1, #71	; 0x47
 8000a3a:	d107      	bne.n	8000a4c <_gps_search_start+0x22>
 8000a3c:	7801      	ldrb	r1, [r0, #0]
 8000a3e:	2947      	cmp	r1, #71	; 0x47
 8000a40:	d104      	bne.n	8000a4c <_gps_search_start+0x22>
 8000a42:	7841      	ldrb	r1, [r0, #1]
 8000a44:	2941      	cmp	r1, #65	; 0x41
 8000a46:	d101      	bne.n	8000a4c <_gps_search_start+0x22>
			    return i+1;
 8000a48:	4618      	mov	r0, r3
 8000a4a:	4770      	bx	lr
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d1f0      	bne.n	8000a32 <_gps_search_start+0x8>
			}
	return 0;
 8000a50:	2000      	movs	r0, #0
}
 8000a52:	4770      	bx	lr
 8000a54:	0000      	movs	r0, r0
	...

08000a58 <_parse_data>:

uint8_t _parse_data (struct gps_device *dev, uint8_t* data){


	if (data[22] == 'N' || data[22] == 'S'){
 8000a58:	7d8b      	ldrb	r3, [r1, #22]
 8000a5a:	2b4e      	cmp	r3, #78	; 0x4e
uint8_t _parse_data (struct gps_device *dev, uint8_t* data){
 8000a5c:	b510      	push	{r4, lr}
 8000a5e:	ed2d 8b0a 	vpush	{d8-d12}
	if (data[22] == 'N' || data[22] == 'S'){
 8000a62:	f040 80dd 	bne.w	8000c20 <_parse_data+0x1c8>
 8000a66:	1e4b      	subs	r3, r1, #1
 8000a68:	f101 0445 	add.w	r4, r1, #69	; 0x45

		// ASCII to decimal conversion
		for(int i = 0; i < DATA_SIZE; i++) data[i] = data[i]-48;
 8000a6c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8000a70:	3a30      	subs	r2, #48	; 0x30
 8000a72:	42a3      	cmp	r3, r4
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	d1f9      	bne.n	8000a6c <_parse_data+0x14>


		dev->data.hour = data[1]*10 + data[2];
 8000a78:	788c      	ldrb	r4, [r1, #2]
 8000a7a:	230a      	movs	r3, #10
 8000a7c:	784a      	ldrb	r2, [r1, #1]
 8000a7e:	fb13 4202 	smlabb	r2, r3, r2, r4
 8000a82:	6082      	str	r2, [r0, #8]
		dev->data.minute = data[3]*10 + data[4];
 8000a84:	790c      	ldrb	r4, [r1, #4]
 8000a86:	78ca      	ldrb	r2, [r1, #3]
 8000a88:	fb13 4202 	smlabb	r2, r3, r2, r4
 8000a8c:	60c2      	str	r2, [r0, #12]
		dev->data.second = data[5]*10 + data[6];
 8000a8e:	798a      	ldrb	r2, [r1, #6]
 8000a90:	794c      	ldrb	r4, [r1, #5]
 8000a92:	fb13 2304 	smlabb	r3, r3, r4, r2
 8000a96:	6103      	str	r3, [r0, #16]

		dev->data.lat_deg = data[11]*10 +data[12];
 8000a98:	7acb      	ldrb	r3, [r1, #11]
 8000a9a:	7b0a      	ldrb	r2, [r1, #12]
 8000a9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000aa0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000aa4:	7543      	strb	r3, [r0, #21]
		dev->data.lat_decimal = (data[13]*1e7 + data[14]*1e6 + data[16]*1e5 + data[17]*1e4 + data[18]*1e3 + data[19]*1e2 + data[20])/6;
 8000aa6:	7ccb      	ldrb	r3, [r1, #19]
 8000aa8:	ee05 3a10 	vmov	s10, r3
 8000aac:	7c8b      	ldrb	r3, [r1, #18]
 8000aae:	ee06 3a10 	vmov	s12, r3
 8000ab2:	7c4b      	ldrb	r3, [r1, #17]
 8000ab4:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 8000ab8:	ee04 3a10 	vmov	s8, r3
 8000abc:	7c0b      	ldrb	r3, [r1, #16]
 8000abe:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8000ac2:	ee03 3a10 	vmov	s6, r3
 8000ac6:	7b4b      	ldrb	r3, [r1, #13]
 8000ac8:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8000acc:	ee02 3a10 	vmov	s4, r3
 8000ad0:	7b8b      	ldrb	r3, [r1, #14]
 8000ad2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8000ad6:	ee07 3a10 	vmov	s14, r3
 8000ada:	eeb8 2bc2 	vcvt.f64.s32	d2, s4
 8000ade:	7d0b      	ldrb	r3, [r1, #20]
 8000ae0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000ae4:	ed9f ab52 	vldr	d10, [pc, #328]	; 8000c30 <_parse_data+0x1d8>
 8000ae8:	ed9f 9b53 	vldr	d9, [pc, #332]	; 8000c38 <_parse_data+0x1e0>
 8000aec:	ed9f 8b54 	vldr	d8, [pc, #336]	; 8000c40 <_parse_data+0x1e8>
 8000af0:	ee27 7b0a 	vmul.f64	d7, d7, d10
 8000af4:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8000c48 <_parse_data+0x1f0>
 8000af8:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8000c50 <_parse_data+0x1f8>
 8000afc:	eea2 7b09 	vfma.f64	d7, d2, d9
 8000b00:	ed9f 2b55 	vldr	d2, [pc, #340]	; 8000c58 <_parse_data+0x200>
 8000b04:	eea3 7b08 	vfma.f64	d7, d3, d8
 8000b08:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 8000b0c:	eea4 7b00 	vfma.f64	d7, d4, d0
 8000b10:	eea6 7b01 	vfma.f64	d7, d6, d1
 8000b14:	eea5 7b02 	vfma.f64	d7, d5, d2
 8000b18:	eeb0 6b47 	vmov.f64	d6, d7
 8000b1c:	ee07 3a10 	vmov	s14, r3
 8000b20:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000b24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b28:	ee87 6b03 	vdiv.f64	d6, d7, d3
 8000b2c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000b30:	ed80 6a06 	vstr	s12, [r0, #24]

		dev->data.lon_deg = data[25]*10 +data[26];
 8000b34:	7e4b      	ldrb	r3, [r1, #25]
 8000b36:	7e8a      	ldrb	r2, [r1, #26]
 8000b38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b3c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000b40:	7703      	strb	r3, [r0, #28]
		dev->data.lon_decimal = (data[27]*1e7 + data[28]*1e6 + data[30]*1e5 + data[31]*1e4 + data[32]*1e3 + data[33]*1e2 + data[34])/6;
 8000b42:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 8000b46:	ee0c 3a10 	vmov	s24, r3
 8000b4a:	f891 3020 	ldrb.w	r3, [r1, #32]
 8000b4e:	ee0b 3a10 	vmov	s22, r3
 8000b52:	7fcb      	ldrb	r3, [r1, #31]
 8000b54:	eeb8 cbcc 	vcvt.f64.s32	d12, s24
 8000b58:	ee06 3a10 	vmov	s12, r3
 8000b5c:	7f8b      	ldrb	r3, [r1, #30]
 8000b5e:	eeb8 bbcb 	vcvt.f64.s32	d11, s22
 8000b62:	ee05 3a10 	vmov	s10, r3
 8000b66:	7ecb      	ldrb	r3, [r1, #27]
 8000b68:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8000b6c:	ee04 3a10 	vmov	s8, r3
 8000b70:	7f0b      	ldrb	r3, [r1, #28]
 8000b72:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 8000b76:	ee07 3a10 	vmov	s14, r3
 8000b7a:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8000b7e:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
 8000b82:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000b86:	ee27 7b0a 	vmul.f64	d7, d7, d10
 8000b8a:	eea4 7b09 	vfma.f64	d7, d4, d9
 8000b8e:	eea5 7b08 	vfma.f64	d7, d5, d8
 8000b92:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000b96:	eeab 7b01 	vfma.f64	d7, d11, d1
 8000b9a:	eeac 7b02 	vfma.f64	d7, d12, d2
 8000b9e:	eeb0 ab47 	vmov.f64	d10, d7
 8000ba2:	ee07 3a10 	vmov	s14, r3
 8000ba6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000baa:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8000bae:	ee87 6b03 	vdiv.f64	d6, d7, d3
 8000bb2:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000bb6:	ed80 6a08 	vstr	s12, [r0, #32]

		dev->data.fix = data[38];
 8000bba:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8000bbe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

		dev->data.satellite = data[40]*10 + data[41];
 8000bc2:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000bc6:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8000bca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bce:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000bd2:	7503      	strb	r3, [r0, #20]

		dev->data.HDOP = data[43]*100+data[45]*10+data[46];
 8000bd4:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8000bd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bdc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000be0:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8000be4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000bee:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
 8000bf2:	4413      	add	r3, r2
 8000bf4:	84c3      	strh	r3, [r0, #38]	; 0x26

		dev->data.altitude= data[48]*100+data[49]*10+data[50];
 8000bf6:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8000bfa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bfe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000c02:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8000c06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000c10:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
 8000c14:	4413      	add	r3, r2
 8000c16:	8503      	strh	r3, [r0, #40]	; 0x28
 8000c18:	2001      	movs	r0, #1
	else {
		dev->data.fix = 0;
		return 0;
	}
	return 1;
}
 8000c1a:	ecbd 8b0a 	vpop	{d8-d12}
 8000c1e:	bd10      	pop	{r4, pc}
	if (data[22] == 'N' || data[22] == 'S'){
 8000c20:	2b53      	cmp	r3, #83	; 0x53
 8000c22:	f43f af20 	beq.w	8000a66 <_parse_data+0xe>
		dev->data.fix = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		return 0;
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	e7f4      	b.n	8000c1a <_parse_data+0x1c2>
 8000c30:	00000000 	.word	0x00000000
 8000c34:	412e8480 	.word	0x412e8480
 8000c38:	00000000 	.word	0x00000000
 8000c3c:	416312d0 	.word	0x416312d0
 8000c40:	00000000 	.word	0x00000000
 8000c44:	40f86a00 	.word	0x40f86a00
 8000c48:	00000000 	.word	0x00000000
 8000c4c:	40c38800 	.word	0x40c38800
 8000c50:	00000000 	.word	0x00000000
 8000c54:	408f4000 	.word	0x408f4000
 8000c58:	00000000 	.word	0x00000000
 8000c5c:	40590000 	.word	0x40590000

08000c60 <gps_dma_init>:


void gps_dma_init(struct gps_device *dev){
 8000c60:	b510      	push	{r4, lr}
 8000c62:	4604      	mov	r4, r0
	HAL_UART_DMAStop(dev->uart_bus);
 8000c64:	6840      	ldr	r0, [r0, #4]
 8000c66:	f00a fee3 	bl	800ba30 <HAL_UART_DMAStop>

	HAL_UART_Receive_DMA(dev->uart_bus, gps_data[dev->id], BUFFER_SIZE);
 8000c6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c6e:	7821      	ldrb	r1, [r4, #0]
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <gps_dma_init+0x28>)
 8000c72:	6860      	ldr	r0, [r4, #4]
 8000c74:	fb02 3101 	mla	r1, r2, r1, r3
 8000c78:	f00a fe36 	bl	800b8e8 <HAL_UART_Receive_DMA>

	HAL_UART_DMAResume(dev->uart_bus);
 8000c7c:	6860      	ldr	r0, [r4, #4]
}
 8000c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_DMAResume(dev->uart_bus);
 8000c82:	f00a beab 	b.w	800b9dc <HAL_UART_DMAResume>
 8000c86:	bf00      	nop
 8000c88:	24009042 	.word	0x24009042

08000c8c <gps_read_sensor>:



uint8_t gps_read_sensor (struct gps_device *dev){
 8000c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8e:	4604      	mov	r4, r0
	HAL_UART_DMAPause(dev->uart_bus);
 8000c90:	6840      	ldr	r0, [r0, #4]
 8000c92:	f00a fe75 	bl	800b980 <HAL_UART_DMAPause>

	uint32_t data_start = _gps_search_start(gps_data[dev->id]);
 8000c96:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000c9a:	490d      	ldr	r1, [pc, #52]	; (8000cd0 <gps_read_sensor+0x44>)
 8000c9c:	7827      	ldrb	r7, [r4, #0]
 8000c9e:	4e0d      	ldr	r6, [pc, #52]	; (8000cd4 <gps_read_sensor+0x48>)
 8000ca0:	fb05 1507 	mla	r5, r5, r7, r1
 8000ca4:	4628      	mov	r0, r5
 8000ca6:	f7ff fec0 	bl	8000a2a <_gps_search_start>
	if (data_start > 0) memcpy(gps_gga[dev->id], gps_data[dev->id] + data_start, DATA_SIZE);
 8000caa:	b128      	cbz	r0, 8000cb8 <gps_read_sensor+0x2c>
 8000cac:	2246      	movs	r2, #70	; 0x46
 8000cae:	1829      	adds	r1, r5, r0
 8000cb0:	fb07 6002 	mla	r0, r7, r2, r6
 8000cb4:	f012 fae0 	bl	8013278 <memcpy>

	HAL_UART_DMAResume(dev->uart_bus);
 8000cb8:	6860      	ldr	r0, [r4, #4]
 8000cba:	f00a fe8f 	bl	800b9dc <HAL_UART_DMAResume>

	return _parse_data(dev, gps_gga[dev->id]);
 8000cbe:	7821      	ldrb	r1, [r4, #0]
 8000cc0:	2346      	movs	r3, #70	; 0x46
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	fb01 6103 	mla	r1, r1, r3, r6
}
 8000cc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return _parse_data(dev, gps_gga[dev->id]);
 8000ccc:	f7ff bec4 	b.w	8000a58 <_parse_data>
 8000cd0:	24009042 	.word	0x24009042
 8000cd4:	24008e44 	.word	0x24008e44

08000cd8 <gps_reset>:
	dev->data.hour = 0;
	dev->data.minute = 0;
	dev->data.second = 0;

	dev->data.lat_deg = 0;
	dev->data.lat_decimal = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	6183      	str	r3, [r0, #24]

	dev->data.lon_deg = 0;
 8000cdc:	7703      	strb	r3, [r0, #28]
	dev->data.lon_decimal = 0;
 8000cde:	6203      	str	r3, [r0, #32]

	dev->data.fix = 0;
 8000ce0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	dev->data.minute = 0;
 8000ce4:	6103      	str	r3, [r0, #16]
	dev->data.second = 0;
 8000ce6:	8283      	strh	r3, [r0, #20]

	dev->data.satellite = 0;

	dev->data.HDOP = 0;
 8000ce8:	84c3      	strh	r3, [r0, #38]	; 0x26

	dev->data.altitude= 0;
 8000cea:	8503      	strh	r3, [r0, #40]	; 0x28
	dev->data.hour = 0;
 8000cec:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 8000cf0:	4770      	bx	lr
	...

08000cf4 <init_coeff>:

#include "Sim_Con/controller.h"

/* In this file, all the controller related function as the controller itself will be defined */

void init_coeff(control_data_t *control_data){
 8000cf4:	b570      	push	{r4, r5, r6, lr}
    /* The coefficients are sorted in the following way: Gain 1, Gain 2, Gain 3, Optimal Trajectory*/
    const long double coeff0[POLY_DEG+1] = {};
 8000cf6:	24f8      	movs	r4, #248	; 0xf8
void init_coeff(control_data_t *control_data){
 8000cf8:	f5ad 7d78 	sub.w	sp, sp, #992	; 0x3e0
    const long double coeff0[POLY_DEG+1] = {};
 8000cfc:	4e1a      	ldr	r6, [pc, #104]	; (8000d68 <init_coeff+0x74>)
void init_coeff(control_data_t *control_data){
 8000cfe:	4605      	mov	r5, r0
    const long double coeff0[POLY_DEG+1] = {};
 8000d00:	4622      	mov	r2, r4
 8000d02:	4668      	mov	r0, sp
 8000d04:	4631      	mov	r1, r6
 8000d06:	f012 fab7 	bl	8013278 <memcpy>
    const long double coeff1[POLY_DEG+1] = {};
 8000d0a:	4622      	mov	r2, r4
 8000d0c:	1931      	adds	r1, r6, r4
 8000d0e:	eb0d 0004 	add.w	r0, sp, r4
 8000d12:	f012 fab1 	bl	8013278 <memcpy>
    const long double coeff2[POLY_DEG+1] = {-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043867245230357029103581055844633, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000344490485188508716783274825893808887, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000934018022605933039216005802341479060134, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000634836548104500665275673422521919117185366, 0.000000000000000000000000000000000000000000000000000000000000000000000000001239606407908012030174160563013339933812113437, -0.000000000000000000000000000000000000000000000000000000000000000000000001022381835686775337103413729710568651564362721281, -0.000000000000000000000000000000000000000000000000000000000000000000002556981976241690822393193246152569036255741229670767, 0.000000000000000000000000000000000000000000000000000000000000000000546923120911685786160327644613604987256548299448649168, 0.000000000000000000000000000000000000000000000000000000000000005144395586465708263248864187536114495172630520704805496922, 0.000000000000000000000000000000000000000000000000000000000002598957900626994707360105955074991240578447205580992140764591, -0.000000000000000000000000000000000000000000000000000000008007265198030915847867088324688936778103519504737222019995215541, -0.000000000000000000000000000000000000000000000000000011012596304547960875754063524467217261978623179507934965030092573136, 0.000000000000000000000000000000000000000000000000007813424460355518230137224758134701878337662411549720366986823781291171, 0.000000000000000000000000000000000000000000000026996785758019778790415605805228291744047528796217135257388883945860792112, 0.000000000000000000000000000000000000000000000453122545821515609722791732162586456301180955021948760347794437576693762049, -0.000000000000000000000000000000000000000053563190137796305881289862751094969744386557726456685402293821110980208963886471, -0.000000000000000000000000000000000000019976318126433723065385984554453131826161185132290324502967619645553667284221885352, 0.000000000000000000000000000000000103343166980282802940037853931717963151868718028719503570980165018475073893736139637379, 0.000000000000000000000000000000038273453233300523929121401279433260370520484136762154399274416415522512795413584342930219, -0.000000000000000000000000000217101763955207932149619711634519595537333220210248378142003358845087634086679084788329419098, 0.000000000000000000000000049810794839236377681158654986343728815733024177921737193721767596816998174835688928396848496050, 0.000000000000000000000384963770908737199535755590603621468013595183838185176183411054240401938386639812961220741271972656, -0.000000000000000000655353546691688177119597678067537473324012543609835661218010471884554135613143444061279296875000000000, 0.000000000000000577760672934951596605344964105868965680659371953603598015547504473943263292312622070312500000000000000000, -0.000000000000332123470617645369376961526212574756953752053156847523496253415942192077636718750000000000000000000000000000, 0.000000000132776890182980785371730039812513627511814107151622010860592126846313476562500000000000000000000000000000000000, -0.000000037481161968261776657794048621397120513165646116249263286590576171875000000000000000000000000000000000000000000000, 0.000007363662813423413138445849934754505738965235650539398193359375000000000000000000000000000000000000000000000000000000, -0.000960668634241035259042906790938332051155157387256622314453125000000000000000000000000000000000000000000000000000000000, 0.074914650496394216694362455655209487304091453552246093750000000000000000000000000000000000000000000000000000000000000000, -2.626833640295080929405457936809398233890533447265625000000000000000000000000000000000000000000000000000000000000000000000};
 8000d16:	4622      	mov	r2, r4
 8000d18:	f506 71f8 	add.w	r1, r6, #496	; 0x1f0
 8000d1c:	a87c      	add	r0, sp, #496	; 0x1f0
 8000d1e:	f012 faab 	bl	8013278 <memcpy>
    const long double coeff3[POLY_DEG+1] = {};
 8000d22:	4622      	mov	r2, r4
 8000d24:	f506 713a 	add.w	r1, r6, #744	; 0x2e8
 8000d28:	a8ba      	add	r0, sp, #744	; 0x2e8
 8000d2a:	f012 faa5 	bl	8013278 <memcpy>

    memcpy(control_data->poly_coeff[0], coeff0, sizeof(coeff0));
 8000d2e:	4622      	mov	r2, r4
 8000d30:	4669      	mov	r1, sp
 8000d32:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8000d36:	f012 fa9f 	bl	8013278 <memcpy>
    memcpy(control_data->poly_coeff[1], coeff1, sizeof(coeff1));
 8000d3a:	4622      	mov	r2, r4
 8000d3c:	eb0d 0104 	add.w	r1, sp, r4
 8000d40:	f505 709c 	add.w	r0, r5, #312	; 0x138
 8000d44:	f012 fa98 	bl	8013278 <memcpy>
    memcpy(control_data->poly_coeff[2], coeff2, sizeof(coeff2));
 8000d48:	4622      	mov	r2, r4
 8000d4a:	a97c      	add	r1, sp, #496	; 0x1f0
 8000d4c:	f505 700c 	add.w	r0, r5, #560	; 0x230
 8000d50:	f012 fa92 	bl	8013278 <memcpy>
    memcpy(control_data->poly_coeff[3], coeff3, sizeof(coeff3));
 8000d54:	4622      	mov	r2, r4
 8000d56:	a9ba      	add	r1, sp, #744	; 0x2e8
 8000d58:	f505 704a 	add.w	r0, r5, #808	; 0x328
 8000d5c:	f012 fa8c 	bl	8013278 <memcpy>
}
 8000d60:	f50d 7d78 	add.w	sp, sp, #992	; 0x3e0
 8000d64:	bd70      	pop	{r4, r5, r6, pc}
 8000d66:	bf00      	nop
 8000d68:	08014be8 	.word	0x08014be8

08000d6c <control_data_init>:
    }
}


void control_data_reset(control_data_t *control_data){
    control_data->control_input = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	6003      	str	r3, [r0, #0]
    control_data->reference_error = 0;
 8000d70:	6043      	str	r3, [r0, #4]
    control_data->integrated_error = 0;
 8000d72:	6083      	str	r3, [r0, #8]
}

void control_data_init(control_data_t *control_data){
    control_data_reset(control_data);

    control_data->lowerboundary_aw = 0;
 8000d74:	6183      	str	r3, [r0, #24]
    control_data->upperboundary_aw = 0;
 8000d76:	61c3      	str	r3, [r0, #28]

    control_data->safety_counter = 0;
 8000d78:	2300      	movs	r3, #0
void control_data_init(control_data_t *control_data){
 8000d7a:	b510      	push	{r4, lr}
    control_data->safety_counter = 0;
 8000d7c:	8403      	strh	r3, [r0, #32]
void control_data_init(control_data_t *control_data){
 8000d7e:	4604      	mov	r4, r0
    control_data->apogee_approach_phase = false;
 8000d80:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22

    init_coeff(control_data);
 8000d84:	f7ff ffb6 	bl	8000cf4 <init_coeff>

    for(int i = 0; i < NUM_GAINS; i++){
        control_data->gains[i] = 0;
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 8000d90:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8000d94:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    }
}
 8000d98:	bd10      	pop	{r4, pc}
 8000d9a:	0000      	movs	r0, r0
 8000d9c:	0000      	movs	r0, r0
	...

08000da0 <evaluate_polyfit>:

/* Does the Polynomial Calculation of the reference velocity */
void evaluate_polyfit(control_data_t *control_data) {
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	ed2d 8b02 	vpush	{d8}
    /* For Speed */
    double x_placeholder = 0;

    /* Reset gains */
    for (int i = 0; i < NUM_GAINS; i++) {
        control_data->gains[i] = 0;
 8000da6:	ed9f 8b1e 	vldr	d8, [pc, #120]	; 8000e20 <evaluate_polyfit+0x80>
void evaluate_polyfit(control_data_t *control_data) {
 8000daa:	4604      	mov	r4, r0
 8000dac:	f100 0540 	add.w	r5, r0, #64	; 0x40
        control_data->gains[i] = 0;
 8000db0:	261e      	movs	r6, #30
 8000db2:	ed80 8b0a 	vstr	d8, [r0, #40]	; 0x28
 8000db6:	ed80 8b0c 	vstr	d8, [r0, #48]	; 0x30
 8000dba:	ed80 8b0e 	vstr	d8, [r0, #56]	; 0x38
    /* Reset ref_velocity_placeholder*/
    double ref_velocity_placeholder = 0;

    /* For loop */
    for (int i = 0; i < POLY_DEG + 1; ++i) {
        x_placeholder = pow(control_data->sf_ref_altitude_AGL, (double)(POLY_DEG - i));
 8000dbe:	ee07 6a90 	vmov	s15, r6
 8000dc2:	ed94 0a03 	vldr	s0, [r4, #12]
 8000dc6:	eeb8 1be7 	vcvt.f64.s32	d1, s15
 8000dca:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8000dce:	f013 f823 	bl	8013e18 <pow>
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8000dd2:	f116 36ff 	adds.w	r6, r6, #4294967295
        control_data->gains[0] += control_data->poly_coeff[0][i] * x_placeholder;
 8000dd6:	ecb5 6b02 	vldmia	r5!, {d6}
 8000dda:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
 8000dde:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000de2:	ed84 7b0a 	vstr	d7, [r4, #40]	; 0x28
        control_data->gains[1] += control_data->poly_coeff[1][i] * x_placeholder;
 8000de6:	ed94 7b0c 	vldr	d7, [r4, #48]	; 0x30
 8000dea:	ed95 6b3c 	vldr	d6, [r5, #240]	; 0xf0
 8000dee:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000df2:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
        control_data->gains[2] += control_data->poly_coeff[2][i] * x_placeholder;
 8000df6:	ed94 7b0e 	vldr	d7, [r4, #56]	; 0x38
 8000dfa:	ed95 6b7a 	vldr	d6, [r5, #488]	; 0x1e8
 8000dfe:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000e02:	ed84 7b0e 	vstr	d7, [r4, #56]	; 0x38
        ref_velocity_placeholder += (control_data->poly_coeff[3][i] * x_placeholder);
 8000e06:	ed95 7bb8 	vldr	d7, [r5, #736]	; 0x2e0
 8000e0a:	eea7 8b00 	vfma.f64	d8, d7, d0
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8000e0e:	d2d6      	bcs.n	8000dbe <evaluate_polyfit+0x1e>
    }

    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8000e10:	eef7 7bc8 	vcvt.f32.f64	s15, d8
}
 8000e14:	ecbd 8b02 	vpop	{d8}
    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8000e18:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8000e1c:	bd70      	pop	{r4, r5, r6, pc}
 8000e1e:	bf00      	nop
	...

08000e28 <compute_antiwindup_boundaries>:

void compute_antiwindup_boundaries(control_data_t *control_data) {
    control_data->upperboundary_aw = fmaxf(M_AW *
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8000e28:	ed90 6a03 	vldr	s12, [r0, #12]
 8000e2c:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8000e70 <compute_antiwindup_boundaries+0x48>
 8000e30:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000e34:	ed9f 4b10 	vldr	d4, [pc, #64]	; 8000e78 <compute_antiwindup_boundaries+0x50>
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8000e38:	ee35 7b46 	vsub.f64	d7, d5, d6
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 8000e3c:	eeb4 6bc5 	vcmpe.f64	d6, d5
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000e40:	ee27 7b04 	vmul.f64	d7, d7, d4
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 8000e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000e48:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        control_data->upperboundary_aw = 0;
 8000e4c:	bfc8      	it	gt
 8000e4e:	2300      	movgt	r3, #0
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000e50:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        control_data->upperboundary_aw = 0;
 8000e54:	bfc8      	it	gt
 8000e56:	61c3      	strgt	r3, [r0, #28]
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000e58:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
 8000e5c:	bfd8      	it	le
 8000e5e:	ed80 7a07 	vstrle	s14, [r0, #28]
    }
    control_data->lowerboundary_aw = - control_data->upperboundary_aw;
 8000e62:	edd0 7a07 	vldr	s15, [r0, #28]
 8000e66:	eef1 7a67 	vneg.f32	s15, s15
 8000e6a:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8000e6e:	4770      	bx	lr
 8000e70:	e7f5e611 	.word	0xe7f5e611
 8000e74:	409598a1 	.word	0x409598a1
 8000e78:	47ae147b 	.word	0x47ae147b
 8000e7c:	3f747ae1 	.word	0x3f747ae1

08000e80 <compute_reference_error>:

void compute_reference_error(control_data_t *control_data) {
    if (control_data->ref_velocity < 0) {
 8000e80:	ed90 7a05 	vldr	s14, [r0, #20]
 8000e84:	edd0 7a04 	vldr	s15, [r0, #16]
 8000e88:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        control_data->reference_error = control_data->sf_velocity;
    }
    else{
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
 8000e90:	bf58      	it	pl
 8000e92:	ee77 7ac7 	vsubpl.f32	s15, s15, s14
 8000e96:	edc0 7a01 	vstr	s15, [r0, #4]
    }
}
 8000e9a:	4770      	bx	lr
 8000e9c:	0000      	movs	r0, r0
	...

08000ea0 <check_apogee_approach_phase>:

void check_apogee_approach_phase(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
    /* if n positive samples are counted, the apogee approach phase is entered */
    if (flight_phase_detection->mach_number < CONTROL_DEACTIVATION_MACH_NUMBER) {
 8000ea0:	ed91 7a01 	vldr	s14, [r1, #4]
 8000ea4:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000ed0 <check_apogee_approach_phase+0x30>
 8000ea8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000eac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        control_data->safety_counter += 1;
 8000eb4:	bf42      	ittt	mi
 8000eb6:	8c03      	ldrhmi	r3, [r0, #32]
 8000eb8:	3301      	addmi	r3, #1
 8000eba:	8403      	strhmi	r3, [r0, #32]
    }

    /* Check if the apogee approach phase should be entered*/
    if (control_data->safety_counter >= SAFETY_COUNTER_THRESHOLD) {
 8000ebc:	8c03      	ldrh	r3, [r0, #32]
 8000ebe:	2b04      	cmp	r3, #4
        control_data->apogee_approach_phase = true;
 8000ec0:	bf84      	itt	hi
 8000ec2:	2301      	movhi	r3, #1
 8000ec4:	f880 3022 	strbhi.w	r3, [r0, #34]	; 0x22
    }
}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	f3af 8000 	nop.w
 8000ed0:	9999999a 	.word	0x9999999a
 8000ed4:	3fb99999 	.word	0x3fb99999

08000ed8 <compute_control_input>:
void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8000ed8:	b538      	push	{r3, r4, r5, lr}
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8000eda:	780b      	ldrb	r3, [r1, #0]
void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8000edc:	4604      	mov	r4, r0
 8000ede:	460d      	mov	r5, r1
 8000ee0:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8000ee4:	2b04      	cmp	r3, #4
void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8000ee6:	ed2d 8b02 	vpush	{d8}
 8000eea:	ed9f 8a3d 	vldr	s16, [pc, #244]	; 8000fe0 <compute_control_input+0x108>
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8000eee:	d158      	bne.n	8000fa2 <compute_control_input+0xca>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8000ef0:	784b      	ldrb	r3, [r1, #1]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d854      	bhi.n	8000fa2 <compute_control_input+0xca>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8000ef8:	ed91 7a01 	vldr	s14, [r1, #4]
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8000efc:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8000fd0 <compute_control_input+0xf8>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8000f00:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8000f04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0c:	d549      	bpl.n	8000fa2 <compute_control_input+0xca>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8000f0e:	2a00      	cmp	r2, #0
 8000f10:	d147      	bne.n	8000fa2 <compute_control_input+0xca>
        evaluate_polyfit(control_data);
 8000f12:	f7ff ff45 	bl	8000da0 <evaluate_polyfit>
        compute_reference_error(control_data);
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff ffb2 	bl	8000e80 <compute_reference_error>
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8000f1c:	ed94 7a00 	vldr	s14, [r4]
 8000f20:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
                - control_data->gains[1] * control_data->integrated_error
 8000f24:	ed94 7a02 	vldr	s14, [r4, #8]
 8000f28:	ed94 3b0c 	vldr	d3, [r4, #48]	; 0x30
 8000f2c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8000f30:	ed94 4b0a 	vldr	d4, [r4, #40]	; 0x28
                - control_data->gains[1] * control_data->integrated_error
 8000f34:	ee23 7b47 	vnmul.f64	d7, d3, d7
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8000f38:	ed94 3a01 	vldr	s6, [r4, #4]
 8000f3c:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8000f40:	ed94 5b0e 	vldr	d5, [r4, #56]	; 0x38
                - control_data->gains[1] * control_data->integrated_error
 8000f44:	eea4 7b43 	vfms.f64	d7, d4, d3
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8000f48:	ed9f 4b23 	vldr	d4, [pc, #140]	; 8000fd8 <compute_control_input+0x100>
 8000f4c:	ee36 4b44 	vsub.f64	d4, d6, d4
 8000f50:	eea5 7b44 	vfms.f64	d7, d5, d4
                + control_data->control_input);
 8000f54:	ee37 7b06 	vadd.f64	d7, d7, d6
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8000f58:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        control_data->control_input = fmaxf(0, fminf(control_data->control_input, 1));
 8000f5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000f60:	fe87 7a67 	vminnm.f32	s14, s14, s15
 8000f64:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 8000f68:	ed84 7a00 	vstr	s14, [r4]
        compute_antiwindup_boundaries(control_data);
 8000f6c:	f7ff ff5c 	bl	8000e28 <compute_antiwindup_boundaries>
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8000f70:	edd4 7a02 	vldr	s15, [r4, #8]
 8000f74:	edd4 6a01 	vldr	s13, [r4, #4]
        check_apogee_approach_phase(control_data, flight_phase_detection);
 8000f78:	4629      	mov	r1, r5
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8000f7a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000fe4 <compute_control_input+0x10c>
 8000f7e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8000f82:	ed94 7a07 	vldr	s14, [r4, #28]
}
 8000f86:	ecbd 8b02 	vpop	{d8}
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8000f8a:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 8000f8e:	ed94 7a06 	vldr	s14, [r4, #24]
 8000f92:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8000f96:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8000f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        check_apogee_approach_phase(control_data, flight_phase_detection);
 8000f9e:	f7ff bf7f 	b.w	8000ea0 <check_apogee_approach_phase>
    control_data->control_input = 0;
 8000fa2:	ed84 8a00 	vstr	s16, [r4]
    control_data->reference_error = 0;
 8000fa6:	ed84 8a01 	vstr	s16, [r4, #4]
    control_data->integrated_error = 0;
 8000faa:	ed84 8a02 	vstr	s16, [r4, #8]
        if (control_data->apogee_approach_phase == true) {
 8000fae:	b14a      	cbz	r2, 8000fc4 <compute_control_input+0xec>
            evaluate_polyfit(control_data);
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	f7ff fef5 	bl	8000da0 <evaluate_polyfit>
            compute_reference_error(control_data);
 8000fb6:	4620      	mov	r0, r4
}
 8000fb8:	ecbd 8b02 	vpop	{d8}
 8000fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            compute_reference_error(control_data);
 8000fc0:	f7ff bf5e 	b.w	8000e80 <compute_reference_error>
}
 8000fc4:	ecbd 8b02 	vpop	{d8}
 8000fc8:	bd38      	pop	{r3, r4, r5, pc}
 8000fca:	bf00      	nop
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	9999999a 	.word	0x9999999a
 8000fd4:	3fe19999 	.word	0x3fe19999
 8000fd8:	5fbf87db 	.word	0x5fbf87db
 8000fdc:	3fdfb4e1 	.word	0x3fdfb4e1
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	3c23d70a 	.word	0x3c23d70a

08000fe8 <calibrate_env>:
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
	update_env(env, TEMPERATURE_REFERENCE);
}

void calibrate_env(env_t *env, float p_g, float T_g) {
	env->T_g = T_g + T_0; // input is temperature in °C
 8000fe8:	eeb7 7ae0 	vcvt.f64.f32	d7, s1
	env->p_g = p_g; //
 8000fec:	ed80 0a00 	vstr	s0, [r0]
	env->T_g = T_g + T_0; // input is temperature in °C
 8000ff0:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8001008 <calibrate_env+0x20>
 8000ff4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ff8:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8000ffc:	ed80 7a01 	vstr	s14, [r0, #4]
}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	f3af 8000 	nop.w
 8001008:	66666666 	.word	0x66666666
 800100c:	40711266 	.word	0x40711266

08001010 <update_env>:

void update_env(env_t *env, float T) {
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8001010:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8001014:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8001048 <update_env+0x38>
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8001018:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001050 <update_env+0x40>
void update_env(env_t *env, float T) {
 800101c:	b510      	push	{r4, lr}
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 800101e:	ee30 7b07 	vadd.f64	d7, d0, d7
void update_env(env_t *env, float T) {
 8001022:	4604      	mov	r4, r0
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8001024:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8001028:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800102c:	ed80 7a02 	vstr	s14, [r0, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8001030:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001034:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001038:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 800103c:	f012 fdac 	bl	8013b98 <powf>
 8001040:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8001044:	bd10      	pop	{r4, pc}
 8001046:	bf00      	nop
 8001048:	66666666 	.word	0x66666666
 800104c:	40711266 	.word	0x40711266
 8001050:	8c1557b7 	.word	0x8c1557b7
 8001054:	40791e2f 	.word	0x40791e2f

08001058 <init_env>:
	env->T_g = T_g + T_0; // input is temperature in °C
 8001058:	4a03      	ldr	r2, [pc, #12]	; (8001068 <init_env+0x10>)
	update_env(env, TEMPERATURE_REFERENCE);
 800105a:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
	env->T_g = T_g + T_0; // input is temperature in °C
 800105e:	6042      	str	r2, [r0, #4]
	env->p_g = p_g; //
 8001060:	4a02      	ldr	r2, [pc, #8]	; (800106c <init_env+0x14>)
 8001062:	6002      	str	r2, [r0, #0]
	update_env(env, TEMPERATURE_REFERENCE);
 8001064:	f7ff bfd4 	b.w	8001010 <update_env>
 8001068:	43901333 	.word	0x43901333
 800106c:	47c5e680 	.word	0x47c5e680

08001070 <mach_number>:

float mach_number(env_t *env, float V_x) {
	float mach_number = fabsf(V_x) / env->C;
 8001070:	eeb0 0ac0 	vabs.f32	s0, s0
 8001074:	edd0 7a03 	vldr	s15, [r0, #12]
	return mach_number;
}
 8001078:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800107c:	4770      	bx	lr
	...

08001080 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001084:	ed2d 8b06 	vpush	{d8-d10}
	for (int i = 0; i < n; i++) {
		if (p_active[i]) {
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8001088:	ed9f 8b1b 	vldr	d8, [pc, #108]	; 80010f8 <pressure2altitudeAGL+0x78>
 800108c:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001090:	4607      	mov	r7, r0
 8001092:	4688      	mov	r8, r1
 8001094:	4691      	mov	r9, r2
 8001096:	469a      	mov	sl, r3
 8001098:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	for (int i = 0; i < n; i++) {
 800109a:	2400      	movs	r4, #0
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 800109c:	ed9f 9a18 	vldr	s18, [pc, #96]	; 8001100 <pressure2altitudeAGL+0x80>
	for (int i = 0; i < n; i++) {
 80010a0:	4544      	cmp	r4, r8
 80010a2:	db03      	blt.n	80010ac <pressure2altitudeAGL+0x2c>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 80010a4:	ecbd 8b06 	vpop	{d8-d10}
 80010a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p_active[i]) {
 80010ac:	f81a 3004 	ldrb.w	r3, [sl, r4]
 80010b0:	b1eb      	cbz	r3, 80010ee <pressure2altitudeAGL+0x6e>
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 80010b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80010b6:	00a5      	lsls	r5, r4, #2
 80010b8:	eef0 0a49 	vmov.f32	s1, s18
 80010bc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80010c0:	eb09 0305 	add.w	r3, r9, r5
 80010c4:	4435      	add	r5, r6
 80010c6:	ed93 0a00 	vldr	s0, [r3]
 80010ca:	ee87 ab08 	vdiv.f64	d10, d7, d8
 80010ce:	edd7 7a00 	vldr	s15, [r7]
 80010d2:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80010d6:	f012 fd5f 	bl	8013b98 <powf>
 80010da:	ee39 0ac0 	vsub.f32	s0, s19, s0
 80010de:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80010e2:	ee20 0b0a 	vmul.f64	d0, d0, d10
 80010e6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80010ea:	ed85 0a00 	vstr	s0, [r5]
	for (int i = 0; i < n; i++) {
 80010ee:	3401      	adds	r4, #1
 80010f0:	e7d6      	b.n	80010a0 <pressure2altitudeAGL+0x20>
 80010f2:	bf00      	nop
 80010f4:	f3af 8000 	nop.w
 80010f8:	76c8b439 	.word	0x76c8b439
 80010fc:	3f7a9fbe 	.word	0x3f7a9fbe
 8001100:	3e42c4dc 	.word	0x3e42c4dc
 8001104:	00000000 	.word	0x00000000

08001108 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8001108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800110c:	ed2d 8b06 	vpush	{d8-d10}
	for (int i = 0; i < n; i++) {
		if (h_active[i]) {
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 8001110:	ed9f 9b1b 	vldr	d9, [pc, #108]	; 8001180 <altitudeAGL2pressure+0x78>
 8001114:	eeb7 ab00 	vmov.f64	d10, #112	; 0x3f800000  1.0
void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8001118:	4607      	mov	r7, r0
 800111a:	4688      	mov	r8, r1
 800111c:	4691      	mov	r9, r2
 800111e:	469a      	mov	sl, r3
 8001120:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	for (int i = 0; i < n; i++) {
 8001122:	2400      	movs	r4, #0
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 8001124:	eddf 8a18 	vldr	s17, [pc, #96]	; 8001188 <altitudeAGL2pressure+0x80>
	for (int i = 0; i < n; i++) {
 8001128:	4544      	cmp	r4, r8
 800112a:	db03      	blt.n	8001134 <altitudeAGL2pressure+0x2c>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 800112c:	ecbd 8b06 	vpop	{d8-d10}
 8001130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (h_active[i]) {
 8001134:	f81a 3004 	ldrb.w	r3, [sl, r4]
 8001138:	b1eb      	cbz	r3, 8001176 <altitudeAGL2pressure+0x6e>
 800113a:	00a5      	lsls	r5, r4, #2
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 800113c:	ed97 5a01 	vldr	s10, [r7, #4]
 8001140:	ed97 8a00 	vldr	s16, [r7]
 8001144:	eef0 0a68 	vmov.f32	s1, s17
 8001148:	eb09 0305 	add.w	r3, r9, r5
 800114c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8001150:	4435      	add	r5, r6
 8001152:	ed93 7a00 	vldr	s14, [r3]
 8001156:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800115a:	ee27 7b09 	vmul.f64	d7, d7, d9
 800115e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001162:	ee3a 6b46 	vsub.f64	d6, d10, d6
 8001166:	eeb7 0bc6 	vcvt.f32.f64	s0, d6
 800116a:	f012 fd15 	bl	8013b98 <powf>
 800116e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8001172:	ed85 0a00 	vstr	s0, [r5]
	for (int i = 0; i < n; i++) {
 8001176:	3401      	adds	r4, #1
 8001178:	e7d6      	b.n	8001128 <altitudeAGL2pressure+0x20>
 800117a:	bf00      	nop
 800117c:	f3af 8000 	nop.w
 8001180:	76c8b439 	.word	0x76c8b439
 8001184:	3f7a9fbe 	.word	0x3f7a9fbe
 8001188:	40a83d87 	.word	0x40a83d87
 800118c:	00000000 	.word	0x00000000

08001190 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 8001190:	ed90 7a01 	vldr	s14, [r0, #4]
 8001194:	edd0 5a00 	vldr	s11, [r0]
 8001198:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800119c:	eddf 0a12 	vldr	s1, [pc, #72]	; 80011e8 <altitude_gradient+0x58>
 80011a0:	ee80 0a25 	vdiv.f32	s0, s0, s11
 80011a4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80011d8 <altitude_gradient+0x48>
 80011a8:	ed9f 4b0d 	vldr	d4, [pc, #52]	; 80011e0 <altitude_gradient+0x50>
float altitude_gradient(env_t *env, float p) {
 80011ac:	b508      	push	{r3, lr}
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 80011ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011b2:	eeb7 6ae5 	vcvt.f64.f32	d6, s11
float altitude_gradient(env_t *env, float p) {
 80011b6:	ed2d 8b02 	vpush	{d8}
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 80011ba:	ee26 6b04 	vmul.f64	d6, d6, d4
 80011be:	ee87 8b06 	vdiv.f64	d8, d7, d6
 80011c2:	f012 fce9 	bl	8013b98 <powf>
 80011c6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80011ca:	ee20 0b08 	vmul.f64	d0, d0, d8
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
}
 80011ce:	ecbd 8b02 	vpop	{d8}
 80011d2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80011d6:	bd08      	pop	{r3, pc}
 80011d8:	640f3ea7 	.word	0x640f3ea7
 80011dc:	c071f0fd 	.word	0xc071f0fd
 80011e0:	51eb851f 	.word	0x51eb851f
 80011e4:	40239eb8 	.word	0x40239eb8
 80011e8:	bf4f4ec9 	.word	0xbf4f4ec9
 80011ec:	00000000 	.word	0x00000000

080011f0 <detect_flight_phase>:
void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env_t *env)
{   


    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 80011f0:	7803      	ldrb	r3, [r0, #0]
 80011f2:	eddf 7a43 	vldr	s15, [pc, #268]	; 8001300 <detect_flight_phase+0x110>
 80011f6:	3b01      	subs	r3, #1
{   
 80011f8:	b510      	push	{r4, lr}
 80011fa:	4604      	mov	r4, r0
    switch (flight_phase_detection->flight_phase) {
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d81b      	bhi.n	8001238 <detect_flight_phase+0x48>
 8001200:	e8df f003 	tbb	[pc, r3]
 8001204:	44311a03 	.word	0x44311a03
 8001208:	57          	.byte	0x57
 8001209:	00          	.byte	0x00
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 800120a:	ed91 7a06 	vldr	s14, [r1, #24]
 800120e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001212:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001216:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800121a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	dd09      	ble.n	8001238 <detect_flight_phase+0x48>
                flight_phase_detection->num_samples_positive += 1;
 8001224:	7a23      	ldrb	r3, [r4, #8]
 8001226:	3301      	adds	r3, #1
 8001228:	b25b      	sxtb	r3, r3
                if (flight_phase_detection->num_samples_positive >= 4) {
 800122a:	2b03      	cmp	r3, #3
                flight_phase_detection->num_samples_positive += 1;
 800122c:	7223      	strb	r3, [r4, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 800122e:	dd03      	ble.n	8001238 <detect_flight_phase+0x48>
                    flight_phase_detection->flight_phase = THRUSTING;
 8001230:	2303      	movs	r3, #3

        case DESCENT:
            if (((float)(state_est_data->position_world[2])) / 1000 < 20) {
                flight_phase_detection->num_samples_positive += 1;
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
 8001232:	7023      	strb	r3, [r4, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	7223      	strb	r3, [r4, #8]

        default:
        break;
    }

    flight_phase_detection->mach_number = mach_number(env, ((float) state_est_data->velocity_rocket[0]) / 1000);
 8001238:	ed91 0a03 	vldr	s0, [r1, #12]
 800123c:	4610      	mov	r0, r2
 800123e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001242:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8001246:	f7ff ff13 	bl	8001070 <mach_number>
 800124a:	ed84 0a01 	vstr	s0, [r4, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 800124e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8001252:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80012f0 <detect_flight_phase+0x100>
 8001256:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125e:	db3d      	blt.n	80012dc <detect_flight_phase+0xec>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8001260:	2303      	movs	r3, #3
    } else if (flight_phase_detection->mach_number >= 0.8)
    {
        flight_phase_detection->mach_regime = TRANSONIC;
    } else
    {
        flight_phase_detection->mach_regime = SUBSONIC;
 8001262:	7063      	strb	r3, [r4, #1]
    }
    
    
}
 8001264:	bd10      	pop	{r4, pc}
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8001266:	ed91 7a06 	vldr	s14, [r1, #24]
 800126a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800126e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001272:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d5dd      	bpl.n	8001238 <detect_flight_phase+0x48>
                flight_phase_detection->num_samples_positive += 1;
 800127c:	7a23      	ldrb	r3, [r4, #8]
 800127e:	3301      	adds	r3, #1
 8001280:	b25b      	sxtb	r3, r3
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001282:	2b03      	cmp	r3, #3
                flight_phase_detection->num_samples_positive += 1;
 8001284:	7223      	strb	r3, [r4, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001286:	ddd7      	ble.n	8001238 <detect_flight_phase+0x48>
                    flight_phase_detection->flight_phase = COASTING;
 8001288:	2304      	movs	r3, #4
 800128a:	e7d2      	b.n	8001232 <detect_flight_phase+0x42>
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 800128c:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8001290:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001294:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001298:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800129c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a0:	d5ca      	bpl.n	8001238 <detect_flight_phase+0x48>
                flight_phase_detection->num_samples_positive += 1;
 80012a2:	7a23      	ldrb	r3, [r4, #8]
 80012a4:	3301      	adds	r3, #1
 80012a6:	b25b      	sxtb	r3, r3
                if (flight_phase_detection->num_samples_positive >= 4) {
 80012a8:	2b03      	cmp	r3, #3
                flight_phase_detection->num_samples_positive += 1;
 80012aa:	7223      	strb	r3, [r4, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80012ac:	ddc4      	ble.n	8001238 <detect_flight_phase+0x48>
                    flight_phase_detection->flight_phase = DESCENT;
 80012ae:	2305      	movs	r3, #5
 80012b0:	e7bf      	b.n	8001232 <detect_flight_phase+0x42>
            if (((float)(state_est_data->position_world[2])) / 1000 < 20) {
 80012b2:	ed91 7a02 	vldr	s14, [r1, #8]
 80012b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012be:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80012c2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80012c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ca:	d5b5      	bpl.n	8001238 <detect_flight_phase+0x48>
                flight_phase_detection->num_samples_positive += 1;
 80012cc:	7a23      	ldrb	r3, [r4, #8]
 80012ce:	3301      	adds	r3, #1
 80012d0:	b25b      	sxtb	r3, r3
                if (flight_phase_detection->num_samples_positive >= 4) {
 80012d2:	2b03      	cmp	r3, #3
                flight_phase_detection->num_samples_positive += 1;
 80012d4:	7223      	strb	r3, [r4, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80012d6:	ddaf      	ble.n	8001238 <detect_flight_phase+0x48>
                    flight_phase_detection->flight_phase = RECOVERY;
 80012d8:	2306      	movs	r3, #6
 80012da:	e7aa      	b.n	8001232 <detect_flight_phase+0x42>
    } else if (flight_phase_detection->mach_number >= 0.8)
 80012dc:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80012f8 <detect_flight_phase+0x108>
 80012e0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80012e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        flight_phase_detection->mach_regime = TRANSONIC;
 80012e8:	bfac      	ite	ge
 80012ea:	2302      	movge	r3, #2
        flight_phase_detection->mach_regime = SUBSONIC;
 80012ec:	2301      	movlt	r3, #1
 80012ee:	e7b8      	b.n	8001262 <detect_flight_phase+0x72>
 80012f0:	cccccccd 	.word	0xcccccccd
 80012f4:	3ff4cccc 	.word	0x3ff4cccc
 80012f8:	9999999a 	.word	0x9999999a
 80012fc:	3fe99999 	.word	0x3fe99999
 8001300:	447a0000 	.word	0x447a0000

08001304 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
    flight_phase_detection->flight_phase = IDLE;
 8001304:	2301      	movs	r3, #1
 8001306:	7003      	strb	r3, [r0, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 8001308:	7043      	strb	r3, [r0, #1]
    flight_phase_detection->mach_number = 0.0;
 800130a:	2300      	movs	r3, #0
 800130c:	6043      	str	r3, [r0, #4]
    flight_phase_detection->num_samples_positive = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	7203      	strb	r3, [r0, #8]
}
 8001312:	4770      	bx	lr

08001314 <reset_kf_state>:
#include "Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 8001314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8001318:	4c3d      	ldr	r4, [pc, #244]	; (8001410 <reset_kf_state+0xfc>)
void reset_kf_state(kf_state_t *kf_state){
 800131a:	b090      	sub	sp, #64	; 0x40
 800131c:	4605      	mov	r5, r0
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 800131e:	ae07      	add	r6, sp, #28
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8001320:	af04      	add	r7, sp, #16
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8001322:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8001326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001328:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800132a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800132c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800132e:	f854 3b04 	ldr.w	r3, [r4], #4
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8001332:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8001336:	6033      	str	r3, [r6, #0]
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8001338:	ac07      	add	r4, sp, #28
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 800133a:	ab01      	add	r3, sp, #4
 800133c:	46a6      	mov	lr, r4
 800133e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8001342:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8001346:	462a      	mov	r2, r5
 8001348:	4626      	mov	r6, r4
 800134a:	3208      	adds	r2, #8
 800134c:	ce03      	ldmia	r6!, {r0, r1}
 800134e:	4566      	cmp	r6, ip
 8001350:	f842 0c08 	str.w	r0, [r2, #-8]
 8001354:	f842 1c04 	str.w	r1, [r2, #-4]
 8001358:	4634      	mov	r4, r6
 800135a:	d1f5      	bne.n	8001348 <reset_kf_state+0x34>
 800135c:	6830      	ldr	r0, [r6, #0]
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 800135e:	f105 0854 	add.w	r8, r5, #84	; 0x54
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8001362:	4e2c      	ldr	r6, [pc, #176]	; (8001414 <reset_kf_state+0x100>)
 8001364:	4674      	mov	r4, lr
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8001366:	6010      	str	r0, [r2, #0]
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8001368:	cb03      	ldmia	r3!, {r0, r1}
 800136a:	64a8      	str	r0, [r5, #72]	; 0x48
 800136c:	6818      	ldr	r0, [r3, #0]
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 800136e:	463b      	mov	r3, r7
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8001370:	64e9      	str	r1, [r5, #76]	; 0x4c
 8001372:	6528      	str	r0, [r5, #80]	; 0x50
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8001374:	cb03      	ldmia	r3!, {r0, r1}
 8001376:	6568      	str	r0, [r5, #84]	; 0x54
 8001378:	6818      	ldr	r0, [r3, #0]
	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 800137a:	2300      	movs	r3, #0
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 800137c:	f8c8 1004 	str.w	r1, [r8, #4]
 8001380:	f8c8 0008 	str.w	r0, [r8, #8]
	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8001384:	9304      	str	r3, [sp, #16]
 8001386:	9305      	str	r3, [sp, #20]
 8001388:	9306      	str	r3, [sp, #24]
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 800138a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800138c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001390:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 8001392:	cf03      	ldmia	r7!, {r0, r1}
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8001394:	6833      	ldr	r3, [r6, #0]
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 8001396:	f505 7288 	add.w	r2, r5, #272	; 0x110
    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 800139a:	f8c5 0104 	str.w	r0, [r5, #260]	; 0x104
 800139e:	2000      	movs	r0, #0
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 80013a0:	6023      	str	r3, [r4, #0]
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80013a2:	4673      	mov	r3, lr
    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 80013a4:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
 80013a8:	f8c5 010c 	str.w	r0, [r5, #268]	; 0x10c
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80013ac:	461c      	mov	r4, r3
 80013ae:	3208      	adds	r2, #8
 80013b0:	cc03      	ldmia	r4!, {r0, r1}
 80013b2:	4564      	cmp	r4, ip
 80013b4:	f842 0c08 	str.w	r0, [r2, #-8]
 80013b8:	f842 1c04 	str.w	r1, [r2, #-4]
 80013bc:	4623      	mov	r3, r4
 80013be:	d1f5      	bne.n	80013ac <reset_kf_state+0x98>
 80013c0:	6820      	ldr	r0, [r4, #0]

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 80013c2:	2400      	movs	r4, #0
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80013c4:	6010      	str	r0, [r2, #0]
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80013c6:	4621      	mov	r1, r4
    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 80013c8:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80013cc:	2224      	movs	r2, #36	; 0x24
 80013ce:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
 80013d2:	f011 ff5c 	bl	801328e <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
    kf_state->num_z_active = 0;

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 80013d6:	2103      	movs	r1, #3
 80013d8:	f105 0324 	add.w	r3, r5, #36	; 0x24
 80013dc:	462a      	mov	r2, r5
 80013de:	4608      	mov	r0, r1
    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 80013e0:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
 80013e4:	f8c5 418c 	str.w	r4, [r5, #396]	; 0x18c
 80013e8:	f8c5 4190 	str.w	r4, [r5, #400]	; 0x190
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 80013ec:	f8a5 420c 	strh.w	r4, [r5, #524]	; 0x20c
 80013f0:	f885 420e 	strb.w	r4, [r5, #526]	; 0x20e
    kf_state->num_z_active = 0;
 80013f4:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 80013f8:	f000 faf3 	bl	80019e2 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 80013fc:	f105 0360 	add.w	r3, r5, #96	; 0x60
 8001400:	4642      	mov	r2, r8
 8001402:	2101      	movs	r1, #1
 8001404:	2003      	movs	r0, #3
}
 8001406:	b010      	add	sp, #64	; 0x40
 8001408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 800140c:	f000 bae9 	b.w	80019e2 <transpose>
 8001410:	08014fc8 	.word	0x08014fc8
 8001414:	08014ff8 	.word	0x08014ff8

08001418 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8001418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 800141c:	2103      	movs	r1, #3
void kf_prediction(kf_state_t *kf_state){
 800141e:	b085      	sub	sp, #20
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8001420:	2501      	movs	r5, #1
 8001422:	f500 769a 	add.w	r6, r0, #308	; 0x134
void kf_prediction(kf_state_t *kf_state){
 8001426:	4604      	mov	r4, r0
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8001428:	f04f 0800 	mov.w	r8, #0
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 800142c:	f500 7382 	add.w	r3, r0, #260	; 0x104
 8001430:	4602      	mov	r2, r0
 8001432:	4608      	mov	r0, r1

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 8001434:	f504 7905 	add.w	r9, r4, #532	; 0x214
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8001438:	f504 77a0 	add.w	r7, r4, #320	; 0x140
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 800143c:	e9cd 6500 	strd	r6, r5, [sp]
 8001440:	f000 fb8b 	bl	8001b5a <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8001444:	f504 7380 	add.w	r3, r4, #256	; 0x100
 8001448:	f104 0248 	add.w	r2, r4, #72	; 0x48
 800144c:	4629      	mov	r1, r5
 800144e:	2003      	movs	r0, #3
 8001450:	e9cd 6800 	strd	r6, r8, [sp]
 8001454:	f000 fb81 	bl	8001b5a <matvecprod>
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 8001458:	2203      	movs	r2, #3
 800145a:	f504 7388 	add.w	r3, r4, #272	; 0x110
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 800145e:	f504 760e 	add.w	r6, r4, #568	; 0x238
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 8001462:	4611      	mov	r1, r2
 8001464:	4610      	mov	r0, r2
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	4623      	mov	r3, r4
 800146a:	e9cd 9501 	strd	r9, r5, [sp, #4]
 800146e:	f000 fb34 	bl	8001ada <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 8001472:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
 8001476:	462a      	mov	r2, r5
 8001478:	4629      	mov	r1, r5
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2003      	movs	r0, #3
 800147e:	f104 0354 	add.w	r3, r4, #84	; 0x54
 8001482:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8001486:	f000 fb28 	bl	8001ada <matmul>
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 800148a:	2203      	movs	r2, #3
 800148c:	f104 0324 	add.w	r3, r4, #36	; 0x24
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 8001490:	3460      	adds	r4, #96	; 0x60
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8001492:	4611      	mov	r1, r2
 8001494:	4610      	mov	r0, r2
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	464b      	mov	r3, r9
 800149a:	e9cd 7501 	strd	r7, r5, [sp, #4]
 800149e:	f000 fb1c 	bl	8001ada <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 80014a2:	2203      	movs	r2, #3
 80014a4:	4633      	mov	r3, r6
 80014a6:	4629      	mov	r1, r5
 80014a8:	4610      	mov	r0, r2
 80014aa:	9400      	str	r4, [sp, #0]
 80014ac:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80014b0:	f000 fb13 	bl	8001ada <matmul>
}
 80014b4:	b005      	add	sp, #20
 80014b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080014ba <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 80014ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80014be:	f100 056c 	add.w	r5, r0, #108	; 0x6c
void select_kf_observation_matrices(kf_state_t *kf_state){
 80014c2:	4604      	mov	r4, r0
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80014c4:	2224      	movs	r2, #36	; 0x24
 80014c6:	2100      	movs	r1, #0
 80014c8:	4628      	mov	r0, r5
        if (kf_state->z_active[i]) {
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 80014ca:	2600      	movs	r6, #0
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80014cc:	f011 fedf 	bl	801328e <memset>
            kf_state->H[i][0] = 1;
 80014d0:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 80014d4:	f504 7303 	add.w	r3, r4, #524	; 0x20c
 80014d8:	4621      	mov	r1, r4
 80014da:	f204 200f 	addw	r0, r4, #527	; 0x20f
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80014de:	4622      	mov	r2, r4
        if (kf_state->z_active[i]) {
 80014e0:	f813 cb01 	ldrb.w	ip, [r3], #1
 80014e4:	f1bc 0f00 	cmp.w	ip, #0
 80014e8:	d00f      	beq.n	800150a <select_kf_observation_matrices+0x50>
            kf_state->H[i][0] = 1;
 80014ea:	66cf      	str	r7, [r1, #108]	; 0x6c
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80014ec:	4283      	cmp	r3, r0
 80014ee:	f101 010c 	add.w	r1, r1, #12
 80014f2:	f102 0210 	add.w	r2, r2, #16
 80014f6:	d1f3      	bne.n	80014e0 <select_kf_observation_matrices+0x26>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 80014f8:	2103      	movs	r1, #3
 80014fa:	f104 0390 	add.w	r3, r4, #144	; 0x90
 80014fe:	462a      	mov	r2, r5
 8001500:	4608      	mov	r0, r1
}
 8001502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 8001506:	f000 ba6c 	b.w	80019e2 <transpose>
            kf_state->R[i][i] = 0;
 800150a:	f8c2 60b8 	str.w	r6, [r2, #184]	; 0xb8
 800150e:	e7ed      	b.n	80014ec <select_kf_observation_matrices+0x32>

08001510 <kf_update>:

void kf_update(kf_state_t *kf_state) {
 8001510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8001514:	2103      	movs	r1, #3
void kf_update(kf_state_t *kf_state) {
 8001516:	b087      	sub	sp, #28
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8001518:	2501      	movs	r5, #1
 800151a:	f500 76ca 	add.w	r6, r0, #404	; 0x194
 800151e:	f100 096c 	add.w	r9, r0, #108	; 0x6c
 8001522:	f500 7b9a 	add.w	fp, r0, #308	; 0x134
void kf_update(kf_state_t *kf_state) {
 8001526:	4604      	mov	r4, r0
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8001528:	4608      	mov	r0, r1
 800152a:	465b      	mov	r3, fp
 800152c:	464a      	mov	r2, r9
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 800152e:	f504 77a0 	add.w	r7, r4, #320	; 0x140
 8001532:	f504 7a11 	add.w	sl, r4, #580	; 0x244
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 8001536:	f504 78d0 	add.w	r8, r4, #416	; 0x1a0
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 800153a:	e9cd 6500 	strd	r6, r5, [sp]
 800153e:	f000 fb0c 	bl	8001b5a <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 8001542:	4633      	mov	r3, r6
 8001544:	4632      	mov	r2, r6
 8001546:	f504 71c4 	add.w	r1, r4, #392	; 0x188
 800154a:	2003      	movs	r0, #3
 800154c:	f000 fa76 	bl	8001a3c <vecsub>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8001550:	2203      	movs	r2, #3
 8001552:	464b      	mov	r3, r9
 8001554:	9700      	str	r7, [sp, #0]
 8001556:	4611      	mov	r1, r2
 8001558:	4610      	mov	r0, r2
 800155a:	e9cd a501 	strd	sl, r5, [sp, #4]
 800155e:	f000 fabc 	bl	8001ada <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 8001562:	f104 0390 	add.w	r3, r4, #144	; 0x90
 8001566:	2203      	movs	r2, #3
 8001568:	9304      	str	r3, [sp, #16]
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	4611      	mov	r1, r2
 800156e:	4653      	mov	r3, sl
 8001570:	4610      	mov	r0, r2
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8001572:	f504 7ae2 	add.w	sl, r4, #452	; 0x1c4
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 8001576:	e9cd 8501 	strd	r8, r5, [sp, #4]
 800157a:	f000 faae 	bl	8001ada <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 800157e:	2103      	movs	r1, #3
 8001580:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8001584:	f8cd 8000 	str.w	r8, [sp]
 8001588:	4642      	mov	r2, r8
 800158a:	4608      	mov	r0, r1
 800158c:	f000 fa65 	bl	8001a5a <matadd>
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8001590:	2224      	movs	r2, #36	; 0x24
 8001592:	2100      	movs	r1, #0
 8001594:	4650      	mov	r0, sl
 8001596:	f011 fe7a 	bl	801328e <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 800159a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800164c <kf_update+0x13c>
 800159e:	4652      	mov	r2, sl
 80015a0:	4641      	mov	r1, r8
 80015a2:	2003      	movs	r0, #3
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80015a4:	f504 78f4 	add.w	r8, r4, #488	; 0x1e8
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 80015a8:	f000 fbae 	bl	8001d08 <cholesky_inverse>
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 80015ac:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80015b0:	2203      	movs	r2, #3
 80015b2:	9305      	str	r3, [sp, #20]
 80015b4:	4611      	mov	r1, r2
 80015b6:	4610      	mov	r0, r2
 80015b8:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80015bc:	9b04      	ldr	r3, [sp, #16]
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	463b      	mov	r3, r7
 80015c2:	f000 fa8a 	bl	8001ada <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80015c6:	2203      	movs	r2, #3
 80015c8:	f8cd a000 	str.w	sl, [sp]

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80015cc:	f504 7a82 	add.w	sl, r4, #260	; 0x104
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80015d0:	9b05      	ldr	r3, [sp, #20]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4610      	mov	r0, r2
 80015d6:	e9cd 8501 	strd	r8, r5, [sp, #4]
 80015da:	f000 fa7e 	bl	8001ada <matmul>
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80015de:	2103      	movs	r1, #3
 80015e0:	4633      	mov	r3, r6
 80015e2:	4642      	mov	r2, r8
 80015e4:	4608      	mov	r0, r1


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 80015e6:	f504 7623 	add.w	r6, r4, #652	; 0x28c
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80015ea:	e9cd a500 	strd	sl, r5, [sp]
 80015ee:	f000 fab4 	bl	8001b5a <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 80015f2:	4653      	mov	r3, sl
 80015f4:	4652      	mov	r2, sl
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 80015f6:	f504 7a2c 	add.w	sl, r4, #688	; 0x2b0
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 80015fa:	4659      	mov	r1, fp
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 fa0e 	bl	8001a1e <vecadd>
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8001602:	4651      	mov	r1, sl
 8001604:	2003      	movs	r0, #3
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8001606:	f504 7b35 	add.w	fp, r4, #724	; 0x2d4
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 800160a:	f000 f9cf 	bl	80019ac <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 800160e:	2203      	movs	r2, #3
 8001610:	4643      	mov	r3, r8
 8001612:	f8cd 9000 	str.w	r9, [sp]
 8001616:	4611      	mov	r1, r2
 8001618:	4610      	mov	r0, r2
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 800161a:	f504 7488 	add.w	r4, r4, #272	; 0x110
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 800161e:	e9cd b501 	strd	fp, r5, [sp, #4]
 8001622:	f000 fa5a 	bl	8001ada <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8001626:	2103      	movs	r1, #3
 8001628:	465b      	mov	r3, fp
 800162a:	4652      	mov	r2, sl
 800162c:	4608      	mov	r0, r1
 800162e:	9600      	str	r6, [sp, #0]
 8001630:	f000 fa33 	bl	8001a9a <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8001634:	2203      	movs	r2, #3
 8001636:	4633      	mov	r3, r6
 8001638:	9502      	str	r5, [sp, #8]
 800163a:	4611      	mov	r1, r2
 800163c:	4610      	mov	r0, r2
 800163e:	e9cd 7400 	strd	r7, r4, [sp]
 8001642:	f000 fa4a 	bl	8001ada <matmul>
}
 8001646:	b007      	add	sp, #28
 8001648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800164c:	38d1b717 	.word	0x38d1b717

08001650 <update_state_est_data>:
#include "Sim_Con\state_est.h"


void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 8001650:	ed91 7a41 	vldr	s14, [r1, #260]	; 0x104
 8001654:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001690 <update_state_est_data+0x40>
 8001658:	ee27 7a26 	vmul.f32	s14, s14, s13
 800165c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001660:	ed80 7a02 	vstr	s14, [r0, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 8001664:	ed91 7a42 	vldr	s14, [r1, #264]	; 0x108
 8001668:	ee27 7a26 	vmul.f32	s14, s14, s13
 800166c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8001670:	edc0 7a03 	vstr	s15, [r0, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 8001674:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 8001678:	edd1 7a40 	vldr	s15, [r1, #256]	; 0x100
 800167c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001680:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001684:	edc0 7a06 	vstr	s15, [r0, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 8001688:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	447a0000 	.word	0x447a0000

08001694 <select_noise_models>:
        update_env(env, temp_meas_mean);
    }
} 

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8001694:	b570      	push	{r4, r5, r6, lr}
 8001696:	461e      	mov	r6, r3
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 8001698:	780b      	ldrb	r3, [r1, #0]
                        extrapolation_rolling_memory_t *baro_roll_mem){
 800169a:	4604      	mov	r4, r0
 800169c:	4615      	mov	r5, r2
    switch (flight_phase_detection->flight_phase) {
 800169e:	3b01      	subs	r3, #1
                        extrapolation_rolling_memory_t *baro_roll_mem){
 80016a0:	ed2d 8b02 	vpush	{d8}
 80016a4:	b086      	sub	sp, #24
    switch (flight_phase_detection->flight_phase) {
 80016a6:	2b05      	cmp	r3, #5
 80016a8:	d808      	bhi.n	80016bc <select_noise_models+0x28>
 80016aa:	e8df f003 	tbb	[pc, r3]
 80016ae:	4141      	.short	0x4141
 80016b0:	413c3703 	.word	0x413c3703
            accelerometer_x_stdev = 0.0185409;
            barometer_stdev = 1.869;
        break;
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
            barometer_stdev = 13.000;
 80016b4:	eeb2 8a0a 	vmov.f32	s16, #42	; 0x41500000  13.0
            accelerometer_x_stdev = 1.250775;
 80016b8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800173c <select_noise_models+0xa8>
            barometer_stdev = 3.896;
        break;
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 80016bc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 80016c0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    bool h_active[1] = {true};
 80016c4:	2101      	movs	r1, #1
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80016c6:	aa04      	add	r2, sp, #16
    float h[1] = {kf_state->x_est[0]};
 80016c8:	9305      	str	r3, [sp, #20]
    bool h_active[1] = {true};
 80016ca:	ab06      	add	r3, sp, #24
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 80016cc:	ee27 7b07 	vmul.f64	d7, d7, d7
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80016d0:	4628      	mov	r0, r5
    bool h_active[1] = {true};
 80016d2:	f803 1d0c 	strb.w	r1, [r3, #-12]!
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80016d6:	9200      	str	r2, [sp, #0]
 80016d8:	aa05      	add	r2, sp, #20
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 80016da:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80016de:	ed84 7a2d 	vstr	s14, [r4, #180]	; 0xb4
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80016e2:	f7ff fd11 	bl	8001108 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 80016e6:	ed9d 0a04 	vldr	s0, [sp, #16]
 80016ea:	4628      	mov	r0, r5
 80016ec:	f7ff fd50 	bl	8001190 <altitude_gradient>
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 80016f0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80016f4:	eeb0 0ac0 	vabs.f32	s0, s0

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 80016f8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80016fc:	ee20 0b00 	vmul.f64	d0, d0, d0
 8001700:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8001704:	ed84 0a2e 	vstr	s0, [r4, #184]	; 0xb8
 8001708:	ed84 0a32 	vstr	s0, [r4, #200]	; 0xc8
 800170c:	ed84 0a36 	vstr	s0, [r4, #216]	; 0xd8
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8001710:	ed86 8a25 	vstr	s16, [r6, #148]	; 0x94
}
 8001714:	b006      	add	sp, #24
 8001716:	ecbd 8b02 	vpop	{d8}
 800171a:	bd70      	pop	{r4, r5, r6, pc}
            barometer_stdev = 7.380;
 800171c:	ed9f 8a08 	vldr	s16, [pc, #32]	; 8001740 <select_noise_models+0xac>
            accelerometer_x_stdev = 0.61803;
 8001720:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001744 <select_noise_models+0xb0>
        break;
 8001724:	e7ca      	b.n	80016bc <select_noise_models+0x28>
            barometer_stdev = 3.896;
 8001726:	ed9f 8a08 	vldr	s16, [pc, #32]	; 8001748 <select_noise_models+0xb4>
            accelerometer_x_stdev = 1.955133;
 800172a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800174c <select_noise_models+0xb8>
        break;
 800172e:	e7c5      	b.n	80016bc <select_noise_models+0x28>
            barometer_stdev = 1.869;
 8001730:	ed9f 8a07 	vldr	s16, [pc, #28]	; 8001750 <select_noise_models+0xbc>
            accelerometer_x_stdev = 0.0185409;
 8001734:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001754 <select_noise_models+0xc0>
 8001738:	e7c0      	b.n	80016bc <select_noise_models+0x28>
 800173a:	bf00      	nop
 800173c:	3fa01965 	.word	0x3fa01965
 8001740:	40ec28f6 	.word	0x40ec28f6
 8001744:	3f1e3737 	.word	0x3f1e3737
 8001748:	40795810 	.word	0x40795810
 800174c:	3ffa41cc 	.word	0x3ffa41cc
 8001750:	3fef3b64 	.word	0x3fef3b64
 8001754:	3c97e316 	.word	0x3c97e316

08001758 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8001758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* calculate mean of the sample */
    int num_active = 0;
    float mean = 0;
    for (int i = 0; i < n; i++){
 800175a:	2400      	movs	r4, #0
void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 800175c:	4606      	mov	r6, r0
 800175e:	460f      	mov	r7, r1
 8001760:	4615      	mov	r5, r2
    int num_active = 0;
 8001762:	4623      	mov	r3, r4
void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8001764:	ed2d 8b02 	vpush	{d8}
    float mean = 0;
 8001768:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 800181c <sensor_elimination_by_stdev+0xc4>
    for (int i = 0; i < n; i++){
 800176c:	42b4      	cmp	r4, r6
 800176e:	db1f      	blt.n	80017b0 <sensor_elimination_by_stdev+0x58>
        if (measurement_active[i]) {
            num_active += 1;
            mean += measurements[i];
        }
    }
    if (num_active > 0){
 8001770:	b12b      	cbz	r3, 800177e <sensor_elimination_by_stdev+0x26>
        mean /= num_active;
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177a:	ee88 8a27 	vdiv.f32	s16, s16, s15
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
    for (int i = 0; i < n; ++i) {
 800177e:	2400      	movs	r4, #0
    float stdev = 0;
 8001780:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800181c <sensor_elimination_by_stdev+0xc4>
    for (int i = 0; i < n; ++i) {
 8001784:	42b4      	cmp	r4, r6
 8001786:	db1e      	blt.n	80017c6 <sensor_elimination_by_stdev+0x6e>
        if (measurement_active[i]) {
            stdev += pow(measurements[i] - mean, 2);
        }
    }
    if (num_active > 0){
 8001788:	b15b      	cbz	r3, 80017a2 <sensor_elimination_by_stdev+0x4a>
        stdev = sqrt(stdev / num_active);
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001792:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8001796:	eeb7 0ac7 	vcvt.f64.f32	d0, s14
 800179a:	f012 fc6d 	bl	8014078 <sqrt>
 800179e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 80017a2:	2300      	movs	r3, #0
        if (measurement_active[i]) {
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
                measurement_active[i] = false;
 80017a4:	461a      	mov	r2, r3
    for (int i = 0; i < n; ++i) {
 80017a6:	42b3      	cmp	r3, r6
 80017a8:	db1f      	blt.n	80017ea <sensor_elimination_by_stdev+0x92>
            }
        }
    }
}
 80017aa:	ecbd 8b02 	vpop	{d8}
 80017ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (measurement_active[i]) {
 80017b0:	5d2a      	ldrb	r2, [r5, r4]
 80017b2:	b132      	cbz	r2, 80017c2 <sensor_elimination_by_stdev+0x6a>
            mean += measurements[i];
 80017b4:	eb07 0284 	add.w	r2, r7, r4, lsl #2
            num_active += 1;
 80017b8:	3301      	adds	r3, #1
            mean += measurements[i];
 80017ba:	edd2 7a00 	vldr	s15, [r2]
 80017be:	ee38 8a27 	vadd.f32	s16, s16, s15
    for (int i = 0; i < n; i++){
 80017c2:	3401      	adds	r4, #1
 80017c4:	e7d2      	b.n	800176c <sensor_elimination_by_stdev+0x14>
        if (measurement_active[i]) {
 80017c6:	5d2a      	ldrb	r2, [r5, r4]
 80017c8:	b16a      	cbz	r2, 80017e6 <sensor_elimination_by_stdev+0x8e>
            stdev += pow(measurements[i] - mean, 2);
 80017ca:	eb07 0284 	add.w	r2, r7, r4, lsl #2
 80017ce:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80017d2:	ed92 7a00 	vldr	s14, [r2]
 80017d6:	ee37 7a48 	vsub.f32	s14, s14, s16
 80017da:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80017de:	eea7 0b07 	vfma.f64	d0, d7, d7
 80017e2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    for (int i = 0; i < n; ++i) {
 80017e6:	3401      	adds	r4, #1
 80017e8:	e7cc      	b.n	8001784 <sensor_elimination_by_stdev+0x2c>
        if (measurement_active[i]) {
 80017ea:	5ce9      	ldrb	r1, [r5, r3]
 80017ec:	b199      	cbz	r1, 8001816 <sensor_elimination_by_stdev+0xbe>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 80017ee:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80017f2:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80017f6:	ed91 7a00 	vldr	s14, [r1]
 80017fa:	ee36 6b06 	vadd.f64	d6, d6, d6
 80017fe:	ee37 7a48 	vsub.f32	s14, s14, s16
 8001802:	eeb0 7ac7 	vabs.f32	s14, s14
 8001806:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800180a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                measurement_active[i] = false;
 8001812:	bfc8      	it	gt
 8001814:	54ea      	strbgt	r2, [r5, r3]
    for (int i = 0; i < n; ++i) {
 8001816:	3301      	adds	r3, #1
 8001818:	e7c5      	b.n	80017a6 <sensor_elimination_by_stdev+0x4e>
 800181a:	bf00      	nop
 800181c:	00000000 	.word	0x00000000

08001820 <process_measurements>:
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8001820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001824:	460d      	mov	r5, r1
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8001826:	2400      	movs	r4, #0
 8001828:	f501 71c4 	add.w	r1, r1, #392	; 0x188
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 800182c:	4694      	mov	ip, r2
 800182e:	f04f 0b0c 	mov.w	fp, #12
            kf_state->z[i] = 0;
 8001832:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80019a8 <process_measurements+0x188>
 8001836:	460f      	mov	r7, r1
            kf_state->z_active[i] = false;
 8001838:	46a6      	mov	lr, r4
            kf_state->z_active[i] = true;
 800183a:	f04f 0901 	mov.w	r9, #1
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 800183e:	ed2d 8b02 	vpush	{d8}
 8001842:	b08d      	sub	sp, #52	; 0x34
 8001844:	f10d 0810 	add.w	r8, sp, #16
 8001848:	ae05      	add	r6, sp, #20
 800184a:	9303      	str	r3, [sp, #12]
 800184c:	9b03      	ldr	r3, [sp, #12]
 800184e:	fb0b 3a04 	mla	sl, fp, r4, r3
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 8001852:	6893      	ldr	r3, [r2, #8]
 8001854:	f8da 0008 	ldr.w	r0, [sl, #8]
 8001858:	4283      	cmp	r3, r0
 800185a:	eb05 0004 	add.w	r0, r5, r4
 800185e:	f240 8093 	bls.w	8001988 <process_measurements+0x168>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 8001862:	ed92 7a00 	vldr	s14, [r2]
            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 8001866:	ab06      	add	r3, sp, #24
            temp_meas_active[i] = true;
 8001868:	f808 9004 	strb.w	r9, [r8, r4]
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 800186c:	ed81 7a00 	vstr	s14, [r1]
            kf_state->z_active[i] = true;
 8001870:	f880 920c 	strb.w	r9, [r0, #524]	; 0x20c
            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 8001874:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8001878:	ed92 7a01 	vldr	s14, [r2, #4]
 800187c:	ed80 7a00 	vstr	s14, [r0]
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 8001880:	eb0a 1a04 	add.w	sl, sl, r4, lsl #4
 8001884:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
 8001888:	320c      	adds	r2, #12
 800188a:	f10c 0c1c 	add.w	ip, ip, #28
 800188e:	f8da 003c 	ldr.w	r0, [sl, #60]	; 0x3c
 8001892:	3104      	adds	r1, #4
 8001894:	4283      	cmp	r3, r0
 8001896:	ea4f 0084 	mov.w	r0, r4, lsl #2
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 800189a:	ab09      	add	r3, sp, #36	; 0x24
 800189c:	bf88      	it	hi
 800189e:	f8dc a014 	ldrhi.w	sl, [ip, #20]
 80018a2:	4418      	add	r0, r3
            acc_x_meas_active[i] = true;
 80018a4:	bf8c      	ite	hi
 80018a6:	f806 9004 	strbhi.w	r9, [r6, r4]
            acc_x_meas_active[i] = false;
 80018aa:	f806 e004 	strbls.w	lr, [r6, r4]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 80018ae:	f104 0401 	add.w	r4, r4, #1
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 80018b2:	bf8c      	ite	hi
 80018b4:	f8c0 a000 	strhi.w	sl, [r0]
            acc_x_meas[i] = 0;
 80018b8:	edc0 7a00 	vstrls	s15, [r0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 80018bc:	2c03      	cmp	r4, #3
 80018be:	d1c5      	bne.n	800184c <process_measurements+0x2c>
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 80018c0:	f505 7903 	add.w	r9, r5, #524	; 0x20c
 80018c4:	4620      	mov	r0, r4
 80018c6:	4639      	mov	r1, r7
    float temp_meas_mean = 0;
 80018c8:	ed9f 8a37 	vldr	s16, [pc, #220]	; 80019a8 <process_measurements+0x188>
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 80018cc:	464a      	mov	r2, r9
 80018ce:	f7ff ff43 	bl	8001758 <sensor_elimination_by_stdev>
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 80018d2:	4642      	mov	r2, r8
 80018d4:	4620      	mov	r0, r4
 80018d6:	a906      	add	r1, sp, #24
 80018d8:	f7ff ff3e 	bl	8001758 <sensor_elimination_by_stdev>
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 80018dc:	4620      	mov	r0, r4
 80018de:	4632      	mov	r2, r6
 80018e0:	a909      	add	r1, sp, #36	; 0x24
 80018e2:	f7ff ff39 	bl	8001758 <sensor_elimination_by_stdev>
    kf_state->num_z_active = 0;
 80018e6:	2100      	movs	r1, #0
    float u = 0;
 80018e8:	eef0 8a48 	vmov.f32	s17, s16
 80018ec:	4648      	mov	r0, r9
 80018ee:	aa06      	add	r2, sp, #24
    int num_temp_meas_active = 0;
 80018f0:	460c      	mov	r4, r1
    int num_acc_x_meas_active = 0;
 80018f2:	4688      	mov	r8, r1
    kf_state->num_z_active = 0;
 80018f4:	f8c5 1210 	str.w	r1, [r5, #528]	; 0x210
        if (kf_state->z_active[i]){
 80018f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80018fc:	b123      	cbz	r3, 8001908 <process_measurements+0xe8>
            kf_state->num_z_active += 1;
 80018fe:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
 8001902:	3301      	adds	r3, #1
 8001904:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
        if (acc_x_meas_active[i]) {
 8001908:	5c73      	ldrb	r3, [r6, r1]
 800190a:	b143      	cbz	r3, 800191e <process_measurements+0xfe>
            u += acc_x_meas[i];
 800190c:	ab09      	add	r3, sp, #36	; 0x24
            num_acc_x_meas_active += 1;
 800190e:	f108 0801 	add.w	r8, r8, #1
            u += acc_x_meas[i];
 8001912:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	ee78 8aa7 	vadd.f32	s17, s17, s15
        if (temp_meas[i]) {
 800191e:	ecf2 7a01 	vldmia	r2!, {s15}
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8001922:	3101      	adds	r1, #1
        if (temp_meas[i]) {
 8001924:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            temp_meas_mean += temp_meas[i];
 800192c:	bf1c      	itt	ne
 800192e:	ee38 8a27 	vaddne.f32	s16, s16, s15
            num_temp_meas_active += 1;
 8001932:	3401      	addne	r4, #1
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8001934:	2903      	cmp	r1, #3
 8001936:	d1df      	bne.n	80018f8 <process_measurements+0xd8>
    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 8001938:	9700      	str	r7, [sp, #0]
 800193a:	464b      	mov	r3, r9
 800193c:	463a      	mov	r2, r7
 800193e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001940:	f7ff fb9e 	bl	8001080 <pressure2altitudeAGL>
    if (num_acc_x_meas_active > 0){
 8001944:	f1b8 0f00 	cmp.w	r8, #0
 8001948:	d00f      	beq.n	800196a <process_measurements+0x14a>
        u /= num_acc_x_meas_active;
 800194a:	ee07 8a90 	vmov	s15, r8
 800194e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        kf_state->u[0] = u - GRAVITATION;
 8001952:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80019a0 <process_measurements+0x180>
        u /= num_acc_x_meas_active;
 8001956:	ee88 7aa7 	vdiv.f32	s14, s17, s15
        kf_state->u[0] = u - GRAVITATION;
 800195a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800195e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001962:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001966:	ed85 7a40 	vstr	s14, [r5, #256]	; 0x100
    if (num_temp_meas_active > 0){
 800196a:	b144      	cbz	r4, 800197e <process_measurements+0x15e>
        temp_meas_mean /= num_temp_meas_active;
 800196c:	ee07 4a90 	vmov	s15, r4
        update_env(env, temp_meas_mean);
 8001970:	9818      	ldr	r0, [sp, #96]	; 0x60
        temp_meas_mean /= num_temp_meas_active;
 8001972:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        update_env(env, temp_meas_mean);
 8001976:	ee88 0a00 	vdiv.f32	s0, s16, s0
 800197a:	f7ff fb49 	bl	8001010 <update_env>
} 
 800197e:	b00d      	add	sp, #52	; 0x34
 8001980:	ecbd 8b02 	vpop	{d8}
 8001984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            temp_meas[i] = 0;
 8001988:	ab06      	add	r3, sp, #24
            kf_state->z[i] = 0;
 800198a:	edc1 7a00 	vstr	s15, [r1]
            kf_state->z_active[i] = false;
 800198e:	f880 e20c 	strb.w	lr, [r0, #524]	; 0x20c
            temp_meas[i] = 0;
 8001992:	eb03 0084 	add.w	r0, r3, r4, lsl #2
            temp_meas_active[i] = false;
 8001996:	f804 e008 	strb.w	lr, [r4, r8]
            temp_meas[i] = 0;
 800199a:	edc0 7a00 	vstr	s15, [r0]
 800199e:	e76f      	b.n	8001880 <process_measurements+0x60>
 80019a0:	51eb851f 	.word	0x51eb851f
 80019a4:	40239eb8 	.word	0x40239eb8
 80019a8:	00000000 	.word	0x00000000

080019ac <eye>:
#include "Util/math_utils.h"


void eye(int32_t dim, float A[dim][dim]) {
 80019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(int i = 0; i < dim; i++){
 80019ae:	2300      	movs	r3, #0
 80019b0:	0085      	lsls	r5, r0, #2
        for(int j = 0; j < dim; j++){
            if (i == j){
				A[i][j] = 1;
			} else {
				A[i][j] = 0;
 80019b2:	2600      	movs	r6, #0
				A[i][j] = 1;
 80019b4:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
	for(int i = 0; i < dim; i++){
 80019b8:	4283      	cmp	r3, r0
 80019ba:	db0f      	blt.n	80019dc <eye+0x30>
			}
        }
    }
}
 80019bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (i == j){
 80019be:	429a      	cmp	r2, r3
 80019c0:	f104 0404 	add.w	r4, r4, #4
        for(int j = 0; j < dim; j++){
 80019c4:	f102 0201 	add.w	r2, r2, #1
				A[i][j] = 1;
 80019c8:	bf0c      	ite	eq
 80019ca:	f844 7c04 	streq.w	r7, [r4, #-4]
				A[i][j] = 0;
 80019ce:	f844 6c04 	strne.w	r6, [r4, #-4]
        for(int j = 0; j < dim; j++){
 80019d2:	4282      	cmp	r2, r0
 80019d4:	d1f3      	bne.n	80019be <eye+0x12>
	for(int i = 0; i < dim; i++){
 80019d6:	3301      	adds	r3, #1
 80019d8:	4429      	add	r1, r5
 80019da:	e7ed      	b.n	80019b8 <eye+0xc>
 80019dc:	460c      	mov	r4, r1
        for(int j = 0; j < dim; j++){
 80019de:	2200      	movs	r2, #0
 80019e0:	e7f7      	b.n	80019d2 <eye+0x26>

080019e2 <transpose>:

void transpose(int32_t m, int32_t n, float A[m][n], float A_T[n][m]) {
 80019e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019e6:	ea4f 0e81 	mov.w	lr, r1, lsl #2
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 80019ea:	2400      	movs	r4, #0
 80019ec:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80019f0:	4284      	cmp	r4, r0
 80019f2:	da12      	bge.n	8001a1a <transpose+0x38>
 80019f4:	461e      	mov	r6, r3
 80019f6:	4617      	mov	r7, r2
		for(int j = 0; j < n; j++){
 80019f8:	2500      	movs	r5, #0
			A_T[j][i] = A[i][j];
 80019fa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80019fe:	e007      	b.n	8001a10 <transpose+0x2e>
 8001a00:	eb0c 0906 	add.w	r9, ip, r6
 8001a04:	f857 ab04 	ldr.w	sl, [r7], #4
		for(int j = 0; j < n; j++){
 8001a08:	3501      	adds	r5, #1
 8001a0a:	4446      	add	r6, r8
			A_T[j][i] = A[i][j];
 8001a0c:	f8c9 a000 	str.w	sl, [r9]
		for(int j = 0; j < n; j++){
 8001a10:	42a9      	cmp	r1, r5
 8001a12:	dcf5      	bgt.n	8001a00 <transpose+0x1e>
	for(int i = 0; i < m; i++){
 8001a14:	3401      	adds	r4, #1
 8001a16:	4472      	add	r2, lr
 8001a18:	e7ea      	b.n	80019f0 <transpose+0xe>
		}
	}
}
 8001a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001a1e <vecadd>:

void vecadd(int32_t n, float a[n], float b[n], float c[n]) {
 8001a1e:	b510      	push	{r4, lr}
	for(int i = 0; i < n; i++){
 8001a20:	2400      	movs	r4, #0
 8001a22:	4284      	cmp	r4, r0
 8001a24:	db00      	blt.n	8001a28 <vecadd+0xa>
		c[i] = a[i] + b[i];
	}
}
 8001a26:	bd10      	pop	{r4, pc}
		c[i] = a[i] + b[i];
 8001a28:	ecf1 7a01 	vldmia	r1!, {s15}
	for(int i = 0; i < n; i++){
 8001a2c:	3401      	adds	r4, #1
		c[i] = a[i] + b[i];
 8001a2e:	ecb2 7a01 	vldmia	r2!, {s14}
 8001a32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a36:	ece3 7a01 	vstmia	r3!, {s15}
 8001a3a:	e7f2      	b.n	8001a22 <vecadd+0x4>

08001a3c <vecsub>:

void vecsub(int32_t n, float a[n], float b[n], float c[n]) {
 8001a3c:	b510      	push	{r4, lr}
	for(int i = 0; i < n; i++){
 8001a3e:	2400      	movs	r4, #0
 8001a40:	4284      	cmp	r4, r0
 8001a42:	db00      	blt.n	8001a46 <vecsub+0xa>
		c[i] = a[i] - b[i];
	}
}
 8001a44:	bd10      	pop	{r4, pc}
		c[i] = a[i] - b[i];
 8001a46:	ecf1 7a01 	vldmia	r1!, {s15}
	for(int i = 0; i < n; i++){
 8001a4a:	3401      	adds	r4, #1
		c[i] = a[i] - b[i];
 8001a4c:	ecb2 7a01 	vldmia	r2!, {s14}
 8001a50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a54:	ece3 7a01 	vstmia	r3!, {s15}
 8001a58:	e7f2      	b.n	8001a40 <vecsub+0x4>

08001a5a <matadd>:

void matadd(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8001a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(int i = 0; i < m; i++){
 8001a5e:	2400      	movs	r4, #0
 8001a60:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8001a64:	4626      	mov	r6, r4
 8001a66:	4286      	cmp	r6, r0
 8001a68:	da15      	bge.n	8001a96 <matadd+0x3c>
 8001a6a:	9d06      	ldr	r5, [sp, #24]
 8001a6c:	eb02 0e04 	add.w	lr, r2, r4
 8001a70:	eb03 0c04 	add.w	ip, r3, r4
 8001a74:	192f      	adds	r7, r5, r4
        for(int j = 0; j < n; j++){
 8001a76:	2500      	movs	r5, #0
 8001a78:	e008      	b.n	8001a8c <matadd+0x32>
            C[i][j] =  A[i][j] + B[i][j];
 8001a7a:	ecfe 7a01 	vldmia	lr!, {s15}
        for(int j = 0; j < n; j++){
 8001a7e:	3501      	adds	r5, #1
            C[i][j] =  A[i][j] + B[i][j];
 8001a80:	ecbc 7a01 	vldmia	ip!, {s14}
 8001a84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a88:	ece7 7a01 	vstmia	r7!, {s15}
        for(int j = 0; j < n; j++){
 8001a8c:	42a9      	cmp	r1, r5
 8001a8e:	dcf4      	bgt.n	8001a7a <matadd+0x20>
	for(int i = 0; i < m; i++){
 8001a90:	3601      	adds	r6, #1
 8001a92:	4444      	add	r4, r8
 8001a94:	e7e7      	b.n	8001a66 <matadd+0xc>
        }
    }
}
 8001a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a9a <matsub>:

void matsub(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8001a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(int i = 0; i < m; i++){
 8001a9e:	2400      	movs	r4, #0
 8001aa0:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8001aa4:	4626      	mov	r6, r4
 8001aa6:	4286      	cmp	r6, r0
 8001aa8:	da15      	bge.n	8001ad6 <matsub+0x3c>
 8001aaa:	9d06      	ldr	r5, [sp, #24]
 8001aac:	eb02 0e04 	add.w	lr, r2, r4
 8001ab0:	eb03 0c04 	add.w	ip, r3, r4
 8001ab4:	192f      	adds	r7, r5, r4
        for(int j = 0; j < n; j++){
 8001ab6:	2500      	movs	r5, #0
 8001ab8:	e008      	b.n	8001acc <matsub+0x32>
            C[i][j] =  A[i][j] - B[i][j];
 8001aba:	ecfe 7a01 	vldmia	lr!, {s15}
        for(int j = 0; j < n; j++){
 8001abe:	3501      	adds	r5, #1
            C[i][j] =  A[i][j] - B[i][j];
 8001ac0:	ecbc 7a01 	vldmia	ip!, {s14}
 8001ac4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ac8:	ece7 7a01 	vstmia	r7!, {s15}
        for(int j = 0; j < n; j++){
 8001acc:	42a9      	cmp	r1, r5
 8001ace:	dcf4      	bgt.n	8001aba <matsub+0x20>
	for(int i = 0; i < m; i++){
 8001ad0:	3601      	adds	r6, #1
 8001ad2:	4444      	add	r4, r8
 8001ad4:	e7e7      	b.n	8001aa6 <matsub+0xc>
        }
    }
}
 8001ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ada <matmul>:

void matmul(int32_t m, int32_t n, int32_t o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8001ada:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ade:	461c      	mov	r4, r3
 8001ae0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001ae4:	4606      	mov	r6, r0
 8001ae6:	460f      	mov	r7, r1
 8001ae8:	4615      	mov	r5, r2
	if (reset) {
 8001aea:	b12b      	cbz	r3, 8001af8 <matmul+0x1e>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8001aec:	4342      	muls	r2, r0
 8001aee:	2100      	movs	r1, #0
 8001af0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	f011 fbcb 	bl	801328e <memset>
 8001af8:	00bb      	lsls	r3, r7, #2
 8001afa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001afc:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	4623      	mov	r3, r4
	}
	for(int i = 0; i < m; i++){
        for(int j = 0; j < o; j++){
 8001b04:	2400      	movs	r4, #0
	for(int i = 0; i < m; i++){
 8001b06:	42b4      	cmp	r4, r6
 8001b08:	db1f      	blt.n	8001b4a <matmul+0x70>
            for(int k = 0; k < n; k++){
                C[i][j] +=  A[i][k] * B[k][j];
            }
        }
    }
}
 8001b0a:	b003      	add	sp, #12
 8001b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                C[i][j] +=  A[i][k] * B[k][j];
 8001b10:	eb0a 0b0e 	add.w	fp, sl, lr
 8001b14:	ecf9 6a01 	vldmia	r9!, {s13}
 8001b18:	edd0 7a00 	vldr	s15, [r0]
            for(int k = 0; k < n; k++){
 8001b1c:	f10c 0c01 	add.w	ip, ip, #1
                C[i][j] +=  A[i][k] * B[k][j];
 8001b20:	ed9b 7a00 	vldr	s14, [fp]
 8001b24:	44c6      	add	lr, r8
 8001b26:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001b2a:	edc0 7a00 	vstr	s15, [r0]
            for(int k = 0; k < n; k++){
 8001b2e:	4567      	cmp	r7, ip
 8001b30:	dcee      	bgt.n	8001b10 <matmul+0x36>
        for(int j = 0; j < o; j++){
 8001b32:	3101      	adds	r1, #1
 8001b34:	3004      	adds	r0, #4
 8001b36:	42a9      	cmp	r1, r5
 8001b38:	da0a      	bge.n	8001b50 <matmul+0x76>
 8001b3a:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8001b3e:	4699      	mov	r9, r3
            for(int k = 0; k < n; k++){
 8001b40:	f04f 0c00 	mov.w	ip, #0
                C[i][j] +=  A[i][k] * B[k][j];
 8001b44:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8001b48:	e7f1      	b.n	8001b2e <matmul+0x54>
 8001b4a:	4610      	mov	r0, r2
        for(int j = 0; j < o; j++){
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	e7f2      	b.n	8001b36 <matmul+0x5c>
 8001b50:	9901      	ldr	r1, [sp, #4]
	for(int i = 0; i < m; i++){
 8001b52:	3401      	adds	r4, #1
 8001b54:	4442      	add	r2, r8
 8001b56:	440b      	add	r3, r1
 8001b58:	e7d5      	b.n	8001b06 <matmul+0x2c>

08001b5a <matvecprod>:

void matvecprod(int32_t m, int32_t n, float A[m][n], float b[n], float c[m], bool reset) {
 8001b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b5e:	4698      	mov	r8, r3
 8001b60:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8001b64:	4606      	mov	r6, r0
 8001b66:	460f      	mov	r7, r1
 8001b68:	4614      	mov	r4, r2
	if (reset) {
 8001b6a:	b123      	cbz	r3, 8001b76 <matvecprod+0x1c>
		memset(c, 0, m * sizeof(c[0]));
 8001b6c:	0082      	lsls	r2, r0, #2
 8001b6e:	2100      	movs	r1, #0
 8001b70:	9806      	ldr	r0, [sp, #24]
 8001b72:	f011 fb8c 	bl	801328e <memset>
 8001b76:	4622      	mov	r2, r4
 8001b78:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8001b7c:	9906      	ldr	r1, [sp, #24]
	}
	for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
 8001b7e:	2400      	movs	r4, #0
	for(int i = 0; i < m; i++){
 8001b80:	42b4      	cmp	r4, r6
 8001b82:	da14      	bge.n	8001bae <matvecprod+0x54>
 8001b84:	4643      	mov	r3, r8
 8001b86:	4615      	mov	r5, r2
        for(int j = 0; j < n; j++){
 8001b88:	2000      	movs	r0, #0
 8001b8a:	e00a      	b.n	8001ba2 <matvecprod+0x48>
            c[i] += A[i][j] * b[j];
 8001b8c:	ecf5 6a01 	vldmia	r5!, {s13}
        for(int j = 0; j < n; j++){
 8001b90:	3001      	adds	r0, #1
            c[i] += A[i][j] * b[j];
 8001b92:	ecb3 7a01 	vldmia	r3!, {s14}
 8001b96:	edd1 7a00 	vldr	s15, [r1]
 8001b9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001b9e:	edc1 7a00 	vstr	s15, [r1]
        for(int j = 0; j < n; j++){
 8001ba2:	42b8      	cmp	r0, r7
 8001ba4:	dbf2      	blt.n	8001b8c <matvecprod+0x32>
	for(int i = 0; i < m; i++){
 8001ba6:	3401      	adds	r4, #1
 8001ba8:	4462      	add	r2, ip
 8001baa:	3104      	adds	r1, #4
 8001bac:	e7e8      	b.n	8001b80 <matvecprod+0x26>
        }
    }
}
 8001bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001bb4 <lower_triangular_inverse>:
   int32_t i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8001bb4:	1c43      	adds	r3, r0, #1
        if (*p_k == 0.0) return -1;
        else *p_k = 1.0 / *p_k;
 8001bb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8001bba:	460a      	mov	r2, r1
 8001bbc:	009b      	lsls	r3, r3, #2
int32_t lower_triangular_inverse(int32_t n, float *L) {
 8001bbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8001bc2:	2400      	movs	r4, #0
 8001bc4:	4284      	cmp	r4, r0
 8001bc6:	db0b      	blt.n	8001be0 <lower_triangular_inverse+0x2c>
    }

    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8001bc8:	f1a3 0c04 	sub.w	ip, r3, #4
 8001bcc:	2201      	movs	r2, #1
 8001bce:	eb01 050c 	add.w	r5, r1, ip
 8001bd2:	46ae      	mov	lr, r5
 8001bd4:	4290      	cmp	r0, r2
 8001bd6:	dd34      	ble.n	8001c42 <lower_triangular_inverse+0x8e>
 8001bd8:	462f      	mov	r7, r5
 8001bda:	460e      	mov	r6, r1
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8001bdc:	2400      	movs	r4, #0
 8001bde:	e022      	b.n	8001c26 <lower_triangular_inverse+0x72>
        if (*p_k == 0.0) return -1;
 8001be0:	edd2 7a00 	vldr	s15, [r2]
 8001be4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bec:	d025      	beq.n	8001c3a <lower_triangular_inverse+0x86>
        else *p_k = 1.0 / *p_k;
 8001bee:	eec7 6a27 	vdiv.f32	s13, s14, s15
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8001bf2:	3401      	adds	r4, #1
        else *p_k = 1.0 / *p_k;
 8001bf4:	edc2 6a00 	vstr	s13, [r2]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8001bf8:	441a      	add	r2, r3
 8001bfa:	e7e3      	b.n	8001bc4 <lower_triangular_inverse+0x10>
            sum = 0.0;
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
                sum += *(p_i + k) * *(p_k + j);
 8001bfc:	ed99 7a00 	vldr	s14, [r9]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8001c00:	f108 0801 	add.w	r8, r8, #1
                sum += *(p_i + k) * *(p_k + j);
 8001c04:	ecfa 6a01 	vldmia	sl!, {s13}
 8001c08:	44e1      	add	r9, ip
 8001c0a:	eee6 7a87 	vfma.f32	s15, s13, s14
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8001c0e:	4590      	cmp	r8, r2
 8001c10:	dbf4      	blt.n	8001bfc <lower_triangular_inverse+0x48>
            *(p_i + j) = - *(p_i + i) * sum;
 8001c12:	ed9e 7a01 	vldr	s14, [lr, #4]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8001c16:	3401      	adds	r4, #1
 8001c18:	441e      	add	r6, r3
            *(p_i + j) = - *(p_i + i) * sum;
 8001c1a:	ee67 7a67 	vnmul.f32	s15, s14, s15
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8001c1e:	42a2      	cmp	r2, r4
            *(p_i + j) = - *(p_i + i) * sum;
 8001c20:	ece7 7a01 	vstmia	r7!, {s15}
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8001c24:	d005      	beq.n	8001c32 <lower_triangular_inverse+0x7e>
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8001c26:	46b1      	mov	r9, r6
 8001c28:	46ba      	mov	sl, r7
 8001c2a:	46a0      	mov	r8, r4
            sum = 0.0;
 8001c2c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8001c48 <lower_triangular_inverse+0x94>
 8001c30:	e7ed      	b.n	8001c0e <lower_triangular_inverse+0x5a>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8001c32:	3201      	adds	r2, #1
 8001c34:	4465      	add	r5, ip
 8001c36:	449e      	add	lr, r3
 8001c38:	e7cc      	b.n	8001bd4 <lower_triangular_inverse+0x20>
        if (*p_k == 0.0) return -1;
 8001c3a:	f04f 30ff 	mov.w	r0, #4294967295
        }
    }

    return 0;
}
 8001c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8001c42:	2000      	movs	r0, #0
 8001c44:	e7fb      	b.n	8001c3e <lower_triangular_inverse+0x8a>
 8001c46:	bf00      	nop
 8001c48:	00000000 	.word	0x00000000

08001c4c <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 8001c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c50:	4692      	mov	sl, r2
 8001c52:	4681      	mov	r9, r0
    memset(L, 0, n * n * sizeof(L[0][0]));
 8001c54:	fb00 f200 	mul.w	r2, r0, r0
    for (int i = 0; i < n; i++)
 8001c58:	2500      	movs	r5, #0
 8001c5a:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8001c5e:	4657      	mov	r7, sl
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 8001c60:	460c      	mov	r4, r1
    memset(L, 0, n * n * sizeof(L[0][0]));
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	2100      	movs	r1, #0
 8001c66:	4650      	mov	r0, sl
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 8001c68:	ed2d 8b02 	vpush	{d8}
        for (int j = 0; j < (i+1); j++) {
            float s = 0;
            for (int k = 0; k < j; k++)
                s += L[i][k] * L[j][k];
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8001c6c:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 8001c70:	b083      	sub	sp, #12
    memset(L, 0, n * n * sizeof(L[0][0]));
 8001c72:	f011 fb0c 	bl	801328e <memset>
    for (int i = 0; i < n; i++)
 8001c76:	454d      	cmp	r5, r9
 8001c78:	da3e      	bge.n	8001cf8 <cholesky+0xac>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8001c7a:	46d0      	mov	r8, sl
 8001c7c:	463a      	mov	r2, r7
        for (int j = 0; j < (i+1); j++) {
 8001c7e:	2600      	movs	r6, #0
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8001c80:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8001c84:	e01a      	b.n	8001cbc <cholesky+0x70>
                s += L[i][k] * L[j][k];
 8001c86:	ecf0 6a01 	vldmia	r0!, {s13}
            for (int k = 0; k < j; k++)
 8001c8a:	3301      	adds	r3, #1
                s += L[i][k] * L[j][k];
 8001c8c:	ecbc 7a01 	vldmia	ip!, {s14}
 8001c90:	eee6 7a87 	vfma.f32	s15, s13, s14
            for (int k = 0; k < j; k++)
 8001c94:	42b3      	cmp	r3, r6
 8001c96:	d1f6      	bne.n	8001c86 <cholesky+0x3a>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8001c98:	42b5      	cmp	r5, r6
 8001c9a:	d115      	bne.n	8001cc8 <cholesky+0x7c>
 8001c9c:	ed91 0a00 	vldr	s0, [r1]
 8001ca0:	9201      	str	r2, [sp, #4]
 8001ca2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001ca6:	9100      	str	r1, [sp, #0]
 8001ca8:	f012 fa32 	bl	8014110 <sqrtf>
 8001cac:	e9dd 1200 	ldrd	r1, r2, [sp]
        for (int j = 0; j < (i+1); j++) {
 8001cb0:	3601      	adds	r6, #1
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8001cb2:	eca2 0a01 	vstmia	r2!, {s0}
 8001cb6:	44d8      	add	r8, fp
        for (int j = 0; j < (i+1); j++) {
 8001cb8:	42b5      	cmp	r5, r6
 8001cba:	db19      	blt.n	8001cf0 <cholesky+0xa4>
                s += L[i][k] * L[j][k];
 8001cbc:	46c4      	mov	ip, r8
 8001cbe:	4638      	mov	r0, r7
            for (int k = 0; k < j; k++)
 8001cc0:	2300      	movs	r3, #0
            float s = 0;
 8001cc2:	eddf 7a10 	vldr	s15, [pc, #64]	; 8001d04 <cholesky+0xb8>
 8001cc6:	e7e5      	b.n	8001c94 <cholesky+0x48>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8001cc8:	00b3      	lsls	r3, r6, #2
 8001cca:	18e0      	adds	r0, r4, r3
 8001ccc:	4443      	add	r3, r8
 8001cce:	ed90 0a00 	vldr	s0, [r0]
 8001cd2:	ed93 7a00 	vldr	s14, [r3]
 8001cd6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001cda:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001cde:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8001ce2:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8001ce6:	ee20 0b06 	vmul.f64	d0, d0, d6
 8001cea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8001cee:	e7df      	b.n	8001cb0 <cholesky+0x64>
    for (int i = 0; i < n; i++)
 8001cf0:	3501      	adds	r5, #1
 8001cf2:	445c      	add	r4, fp
 8001cf4:	445f      	add	r7, fp
 8001cf6:	e7be      	b.n	8001c76 <cholesky+0x2a>
        }
}
 8001cf8:	b003      	add	sp, #12
 8001cfa:	ecbd 8b02 	vpop	{d8}
 8001cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d02:	bf00      	nop
 8001d04:	00000000 	.word	0x00000000

08001d08 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 8001d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 8001d0c:	fb00 fa00 	mul.w	sl, r0, r0
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 8001d10:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8001d14:	4604      	mov	r4, r0
 8001d16:	4615      	mov	r5, r2
	float A_dash[n][n];
 8001d18:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
    for (int i = 0; i < n; i++) {
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 8001d1c:	ea4f 0998 	mov.w	r9, r8, lsr #2
	float A_dash[n][n];
 8001d20:	f10a 060a 	add.w	r6, sl, #10
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8001d24:	4652      	mov	r2, sl
	float A_dash[n][n];
 8001d26:	f026 0307 	bic.w	r3, r6, #7
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 8001d2a:	ed2d 8b02 	vpush	{d8}
 8001d2e:	af00      	add	r7, sp, #0
	float A_dash[n][n];
 8001d30:	ebad 0d03 	sub.w	sp, sp, r3
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 8001d34:	eeb0 8a40 	vmov.f32	s16, s0
	float A_dash[n][n];
 8001d38:	46eb      	mov	fp, sp
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8001d3a:	4658      	mov	r0, fp
 8001d3c:	f011 fa9c 	bl	8013278 <memcpy>
    for (int i = 0; i < n; i++) {
 8001d40:	2300      	movs	r3, #0
 8001d42:	429c      	cmp	r4, r3
 8001d44:	dc1a      	bgt.n	8001d7c <cholesky_inverse+0x74>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 8001d46:	f026 0607 	bic.w	r6, r6, #7
    cholesky(n, A_dash, L);
 8001d4a:	4659      	mov	r1, fp
 8001d4c:	4620      	mov	r0, r4
    float L[n][n];
 8001d4e:	ebad 0d06 	sub.w	sp, sp, r6
 8001d52:	466e      	mov	r6, sp
    cholesky(n, A_dash, L);
 8001d54:	4632      	mov	r2, r6
 8001d56:	f7ff ff79 	bl	8001c4c <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8001d5a:	4631      	mov	r1, r6
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f7ff ff29 	bl	8001bb4 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 8001d62:	4652      	mov	r2, sl
 8001d64:	2100      	movs	r1, #0
 8001d66:	4628      	mov	r0, r5
 8001d68:	f011 fa91 	bl	801328e <memset>
    for(int i = 0; i < n; i++){
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	4294      	cmp	r4, r2
 8001d70:	dc10      	bgt.n	8001d94 <cholesky_inverse+0x8c>
            for(int k = max(i, j); k < n; k++){
                inverse[i][j] +=  L[k][i] * L[k][j];
            }
        }
    }
}
 8001d72:	46bd      	mov	sp, r7
 8001d74:	ecbd 8b02 	vpop	{d8}
 8001d78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 8001d7c:	fb03 3209 	mla	r2, r3, r9, r3
    for (int i = 0; i < n; i++) {
 8001d80:	3301      	adds	r3, #1
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 8001d82:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8001d86:	edd2 7a00 	vldr	s15, [r2]
 8001d8a:	eee8 7a08 	vfma.f32	s15, s16, s16
 8001d8e:	edc2 7a00 	vstr	s15, [r2]
 8001d92:	e7d6      	b.n	8001d42 <cholesky_inverse+0x3a>
 8001d94:	4628      	mov	r0, r5
        for(int j = 0; j < n; j++){
 8001d96:	2100      	movs	r1, #0
            for(int k = max(i, j); k < n; k++){
 8001d98:	428a      	cmp	r2, r1
 8001d9a:	4694      	mov	ip, r2
 8001d9c:	bfb8      	it	lt
 8001d9e:	468c      	movlt	ip, r1
 8001da0:	4564      	cmp	r4, ip
 8001da2:	dc06      	bgt.n	8001db2 <cholesky_inverse+0xaa>
        for(int j = 0; j < n; j++){
 8001da4:	3101      	adds	r1, #1
 8001da6:	3004      	adds	r0, #4
 8001da8:	428c      	cmp	r4, r1
 8001daa:	d1f5      	bne.n	8001d98 <cholesky_inverse+0x90>
    for(int i = 0; i < n; i++){
 8001dac:	3201      	adds	r2, #1
 8001dae:	4445      	add	r5, r8
 8001db0:	e7dd      	b.n	8001d6e <cholesky_inverse+0x66>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8001db2:	fb0c f309 	mul.w	r3, ip, r9
 8001db6:	edd0 7a00 	vldr	s15, [r0]
            for(int k = max(i, j); k < n; k++){
 8001dba:	f10c 0c01 	add.w	ip, ip, #1
                inverse[i][j] +=  L[k][i] * L[k][j];
 8001dbe:	eb03 0e02 	add.w	lr, r3, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
 8001dc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8001dcc:	edde 6a00 	vldr	s13, [lr]
 8001dd0:	ed93 7a00 	vldr	s14, [r3]
 8001dd4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001dd8:	edc0 7a00 	vstr	s15, [r0]
 8001ddc:	e7e0      	b.n	8001da0 <cholesky_inverse+0x98>

08001dde <AcquireMutex>:
 *  Created on: Jun 19, 2020
 *      Author: Jonas
 */
#include "Util/mutex.h"

osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 8001dde:	b510      	push	{r4, lr}
	osStatus_t status = osOK;
	status = osMutexAcquire(custom_mutex->mutex, 10);
 8001de0:	210a      	movs	r1, #10
osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 8001de2:	4604      	mov	r4, r0
	status = osMutexAcquire(custom_mutex->mutex, 10);
 8001de4:	6800      	ldr	r0, [r0, #0]
 8001de6:	f00d ffd9 	bl	800fd9c <osMutexAcquire>
	if(status == osOK){
 8001dea:	b910      	cbnz	r0, 8001df2 <AcquireMutex+0x14>
		custom_mutex->counter++;
 8001dec:	6863      	ldr	r3, [r4, #4]
 8001dee:	3301      	adds	r3, #1
 8001df0:	6063      	str	r3, [r4, #4]
	}

	return status;
}
 8001df2:	bd10      	pop	{r4, pc}

08001df4 <ReleaseMutex>:

osStatus_t ReleaseMutex(custom_mutex_t *custom_mutex){
	return osMutexRelease(custom_mutex->mutex);
 8001df4:	6800      	ldr	r0, [r0, #0]
 8001df6:	f00e b801 	b.w	800fdfc <osMutexRelease>

08001dfa <ReadMutex>:
}

osStatus_t ReadMutex(custom_mutex_t *custom_mutex,void const* global_data, void* const local_data, int32_t size){
 8001dfa:	b570      	push	{r4, r5, r6, lr}
 8001dfc:	b09a      	sub	sp, #104	; 0x68
 8001dfe:	461c      	mov	r4, r3
 8001e00:	460e      	mov	r6, r1
 8001e02:	4615      	mov	r5, r2
	uint8_t buffer[100] = { 0 };
 8001e04:	2100      	movs	r1, #0
 8001e06:	2264      	movs	r2, #100	; 0x64
 8001e08:	a801      	add	r0, sp, #4
 8001e0a:	f011 fa40 	bl	801328e <memset>
	uint32_t counter = custom_mutex->counter;
	osStatus_t status = osError;
	for(int i = 0; i < 5; i++){
		memcpy(&buffer[0], global_data, size);
 8001e0e:	4622      	mov	r2, r4
 8001e10:	4631      	mov	r1, r6
 8001e12:	a801      	add	r0, sp, #4
 8001e14:	f011 fa30 	bl	8013278 <memcpy>
		if(custom_mutex->counter == counter){
			memcpy(local_data, buffer, size);
 8001e18:	4622      	mov	r2, r4
 8001e1a:	a901      	add	r1, sp, #4
 8001e1c:	4628      	mov	r0, r5
 8001e1e:	f011 fa2b 	bl	8013278 <memcpy>
			break;
		}
		counter = custom_mutex->counter;
	}
	return status;
}
 8001e22:	2000      	movs	r0, #0
 8001e24:	b01a      	add	sp, #104	; 0x68
 8001e26:	bd70      	pop	{r4, r5, r6, pc}

08001e28 <ReadMutexStateEst>:
		/* Write in Buffer */
		Placeholder_measurement[0] = (float) (baro->pressure);
		Placeholder_timestamps[0] = baro->ts;
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
		Placeholder_timestamps[1] = imu->ts;
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 8001e28:	edd1 7a01 	vldr	s15, [r1, #4]
 8001e2c:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8001e98 <ReadMutexStateEst+0x70>
 8001e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 8001e34:	b570      	push	{r4, r5, r6, lr}
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 8001e36:	eec7 6a86 	vdiv.f32	s13, s15, s12
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 8001e3a:	f9b2 400a 	ldrsh.w	r4, [r2, #10]
		Placeholder_measurement[0] = (float) (baro->pressure);
 8001e3e:	edd1 7a00 	vldr	s15, [r1]
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 8001e42:	ee07 4a10 	vmov	s14, r4
osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 8001e46:	9804      	ldr	r0, [sp, #16]
 8001e48:	240c      	movs	r4, #12
		Placeholder_timestamps[1] = imu->ts;
 8001e4a:	68d5      	ldr	r5, [r2, #12]

		/* Check if Mutex was aquired */
		if(custom_mutex->counter == counter){
			state->baro_data[sb_number-1].pressure = Placeholder_measurement[0];
 8001e4c:	1e42      	subs	r2, r0, #1
		Placeholder_timestamps[0] = baro->ts;
 8001e4e:	688e      	ldr	r6, [r1, #8]
		Placeholder_measurement[0] = (float) (baro->pressure);
 8001e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e54:	fb04 3000 	mla	r0, r4, r0, r3
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 8001e58:	eeba 7acb 	vcvt.f32.s32	s14, s14, #10
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];

			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8001e5c:	211c      	movs	r1, #28
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 8001e5e:	fb04 3402 	mla	r4, r4, r2, r3
		Placeholder_measurement[0] = (float) (baro->pressure);
 8001e62:	ed40 7a03 	vstr	s15, [r0, #-12]
			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8001e66:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001e6a:	fb01 3302 	mla	r3, r1, r2, r3
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
 8001e6e:	ed40 6a02 	vstr	s13, [r0, #-8]
		counter = custom_mutex->counter;
	}


	return status;
}
 8001e72:	2000      	movs	r0, #0
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 8001e74:	60a6      	str	r6, [r4, #8]
			state->imu_data[sb_number-1].ts = Placeholder_timestamps[1];
 8001e76:	63dd      	str	r5, [r3, #60]	; 0x3c
			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8001e78:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8001e90 <ReadMutexStateEst+0x68>
 8001e7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e80:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001e84:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
}
 8001e88:	bd70      	pop	{r4, r5, r6, pc}
 8001e8a:	bf00      	nop
 8001e8c:	f3af 8000 	nop.w
 8001e90:	51eb851f 	.word	0x51eb851f
 8001e94:	40239eb8 	.word	0x40239eb8
 8001e98:	42c80000 	.word	0x42c80000

08001e9c <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8001e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9e:	b0b1      	sub	sp, #196	; 0xc4
 8001ea0:	4615      	mov	r5, r2
 8001ea2:	4606      	mov	r6, r0
 8001ea4:	460f      	mov	r7, r1
	log_entry_t log_entry = { 0 };
 8001ea6:	2296      	movs	r2, #150	; 0x96
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	a80a      	add	r0, sp, #40	; 0x28
		sensor_type_e sensor_type, void *sensor_data) {
 8001eac:	461c      	mov	r4, r3
	log_entry_t log_entry = { 0 };
 8001eae:	f011 f9ee 	bl	801328e <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	4a3b      	ldr	r2, [pc, #236]	; (8001fa4 <logSensor+0x108>)
 8001eb6:	2196      	movs	r1, #150	; 0x96
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	a80a      	add	r0, sp, #40	; 0x28
 8001ebc:	4633      	mov	r3, r6
 8001ebe:	e9cd 7501 	strd	r7, r5, [sp, #4]
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8001ec2:	3d01      	subs	r5, #1
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8001ec4:	f011 faa4 	bl	8013410 <sniprintf>
			battery_data->battery, battery_data->consumption,
			battery_data->current, battery_data->supply);
	}
		break;
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 8001ec8:	a80a      	add	r0, sp, #40	; 0x28
	switch (sensor_type) {
 8001eca:	2d03      	cmp	r5, #3
 8001ecc:	d861      	bhi.n	8001f92 <logSensor+0xf6>
 8001ece:	e8df f005 	tbb	[pc, r5]
 8001ed2:	1802      	.short	0x1802
 8001ed4:	5034      	.short	0x5034
		snprintf(log_entry.str + strlen(log_entry.str),
 8001ed6:	f7fe fa03 	bl	80002e0 <strlen>
 8001eda:	68a3      	ldr	r3, [r4, #8]
 8001edc:	4a32      	ldr	r2, [pc, #200]	; (8001fa8 <logSensor+0x10c>)
 8001ede:	2196      	movs	r1, #150	; 0x96
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	6863      	ldr	r3, [r4, #4]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	ac0a      	add	r4, sp, #40	; 0x28
 8001eea:	4420      	add	r0, r4
 8001eec:	f011 fa90 	bl	8013410 <sniprintf>
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	482e      	ldr	r0, [pc, #184]	; (8001fac <logSensor+0x110>)
 8001ef4:	a90a      	add	r1, sp, #40	; 0x28
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	6800      	ldr	r0, [r0, #0]
 8001efa:	f00e f8d9 	bl	80100b0 <osMessageQueuePut>
}
 8001efe:	b031      	add	sp, #196	; 0xc4
 8001f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintf(log_entry.str + strlen(log_entry.str),
 8001f02:	f7fe f9ed 	bl	80002e0 <strlen>
 8001f06:	68e2      	ldr	r2, [r4, #12]
 8001f08:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8001f0c:	2196      	movs	r1, #150	; 0x96
 8001f0e:	9205      	str	r2, [sp, #20]
 8001f10:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8001f14:	9204      	str	r2, [sp, #16]
 8001f16:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8001f1a:	9203      	str	r2, [sp, #12]
 8001f1c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8001f20:	9202      	str	r2, [sp, #8]
 8001f22:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8001f26:	9201      	str	r2, [sp, #4]
 8001f28:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8001f2c:	ac0a      	add	r4, sp, #40	; 0x28
 8001f2e:	9200      	str	r2, [sp, #0]
 8001f30:	4420      	add	r0, r4
 8001f32:	4a1f      	ldr	r2, [pc, #124]	; (8001fb0 <logSensor+0x114>)
 8001f34:	f011 fa6c 	bl	8013410 <sniprintf>
		break;
 8001f38:	e7da      	b.n	8001ef0 <logSensor+0x54>
		snprintf(log_entry.str + strlen(log_entry.str),
 8001f3a:	f7fe f9d1 	bl	80002e0 <strlen>
 8001f3e:	8be3      	ldrh	r3, [r4, #30]
 8001f40:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <logSensor+0x118>)
 8001f42:	2196      	movs	r1, #150	; 0x96
 8001f44:	9308      	str	r3, [sp, #32]
 8001f46:	8c23      	ldrh	r3, [r4, #32]
 8001f48:	9307      	str	r3, [sp, #28]
 8001f4a:	7b23      	ldrb	r3, [r4, #12]
 8001f4c:	9306      	str	r3, [sp, #24]
 8001f4e:	69a3      	ldr	r3, [r4, #24]
 8001f50:	9305      	str	r3, [sp, #20]
 8001f52:	7d23      	ldrb	r3, [r4, #20]
 8001f54:	9304      	str	r3, [sp, #16]
 8001f56:	6923      	ldr	r3, [r4, #16]
 8001f58:	9303      	str	r3, [sp, #12]
 8001f5a:	7b63      	ldrb	r3, [r4, #13]
 8001f5c:	9302      	str	r3, [sp, #8]
 8001f5e:	68a3      	ldr	r3, [r4, #8]
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	6863      	ldr	r3, [r4, #4]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	ac0a      	add	r4, sp, #40	; 0x28
 8001f6a:	4420      	add	r0, r4
 8001f6c:	f011 fa50 	bl	8013410 <sniprintf>
		break;
 8001f70:	e7be      	b.n	8001ef0 <logSensor+0x54>
		snprintf(log_entry.str + strlen(log_entry.str),
 8001f72:	f7fe f9b5 	bl	80002e0 <strlen>
 8001f76:	8822      	ldrh	r2, [r4, #0]
 8001f78:	8863      	ldrh	r3, [r4, #2]
 8001f7a:	2196      	movs	r1, #150	; 0x96
 8001f7c:	9202      	str	r2, [sp, #8]
 8001f7e:	88a2      	ldrh	r2, [r4, #4]
 8001f80:	9201      	str	r2, [sp, #4]
 8001f82:	88e2      	ldrh	r2, [r4, #6]
 8001f84:	ac0a      	add	r4, sp, #40	; 0x28
 8001f86:	9200      	str	r2, [sp, #0]
 8001f88:	4420      	add	r0, r4
 8001f8a:	4a0b      	ldr	r2, [pc, #44]	; (8001fb8 <logSensor+0x11c>)
 8001f8c:	f011 fa40 	bl	8013410 <sniprintf>
		break;
 8001f90:	e7ae      	b.n	8001ef0 <logSensor+0x54>
		snprintf(log_entry.str + strlen(log_entry.str),
 8001f92:	f7fe f9a5 	bl	80002e0 <strlen>
 8001f96:	ab0a      	add	r3, sp, #40	; 0x28
 8001f98:	4908      	ldr	r1, [pc, #32]	; (8001fbc <logSensor+0x120>)
 8001f9a:	4418      	add	r0, r3
 8001f9c:	f011 fa6c 	bl	8013478 <strcpy>
		break;
 8001fa0:	e7a6      	b.n	8001ef0 <logSensor+0x54>
 8001fa2:	bf00      	nop
 8001fa4:	0801513b 	.word	0x0801513b
 8001fa8:	0801514a 	.word	0x0801514a
 8001fac:	240188c0 	.word	0x240188c0
 8001fb0:	08015157 	.word	0x08015157
 8001fb4:	08015174 	.word	0x08015174
 8001fb8:	0801519a 	.word	0x0801519a
 8001fbc:	080151ab 	.word	0x080151ab

08001fc0 <logRocketState>:

osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 8001fc0:	b530      	push	{r4, r5, lr}
 8001fc2:	b0ad      	sub	sp, #180	; 0xb4
 8001fc4:	4605      	mov	r5, r0
	log_entry_t log_entry = { 0 };
 8001fc6:	2496      	movs	r4, #150	; 0x96
osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 8001fc8:	a803      	add	r0, sp, #12
 8001fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8001fce:	4622      	mov	r2, r4
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	a806      	add	r0, sp, #24
 8001fd4:	f011 f95b 	bl	801328e <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
 8001fd8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001fdc:	4621      	mov	r1, r4
 8001fde:	4a08      	ldr	r2, [pc, #32]	; (8002000 <logRocketState+0x40>)
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	a806      	add	r0, sp, #24
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	462b      	mov	r3, r5
 8001fea:	f011 fa11 	bl	8013410 <sniprintf>
			flight_phase_detection.flight_phase);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	4804      	ldr	r0, [pc, #16]	; (8002004 <logRocketState+0x44>)
 8001ff2:	a906      	add	r1, sp, #24
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	6800      	ldr	r0, [r0, #0]
 8001ff8:	f00e f85a 	bl	80100b0 <osMessageQueuePut>
}
 8001ffc:	b02d      	add	sp, #180	; 0xb4
 8001ffe:	bd30      	pop	{r4, r5, pc}
 8002000:	08015130 	.word	0x08015130
 8002004:	240188c0 	.word	0x240188c0

08002008 <logEstimatorVar>:

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8002008:	b084      	sub	sp, #16
 800200a:	b530      	push	{r4, r5, lr}
 800200c:	b0ab      	sub	sp, #172	; 0xac
 800200e:	4605      	mov	r5, r0
	log_entry_t log_entry = { 0 };
 8002010:	2496      	movs	r4, #150	; 0x96
osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8002012:	a82f      	add	r0, sp, #188	; 0xbc
 8002014:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8002018:	4622      	mov	r2, r4
 800201a:	2100      	movs	r1, #0
 800201c:	a804      	add	r0, sp, #16
 800201e:	f011 f936 	bl	801328e <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, ESTIMATOR_VAR,
 8002022:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8002024:	4621      	mov	r1, r4
 8002026:	4a0c      	ldr	r2, [pc, #48]	; (8002058 <logEstimatorVar+0x50>)
 8002028:	9303      	str	r3, [sp, #12]
 800202a:	a804      	add	r0, sp, #16
 800202c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800202e:	9302      	str	r3, [sp, #8]
 8002030:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	2303      	movs	r3, #3
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	462b      	mov	r3, r5
 800203a:	f011 f9e9 	bl	8013410 <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0], estimator_data.acceleration_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 800203e:	2300      	movs	r3, #0
 8002040:	4806      	ldr	r0, [pc, #24]	; (800205c <logEstimatorVar+0x54>)
 8002042:	a904      	add	r1, sp, #16
 8002044:	461a      	mov	r2, r3
 8002046:	6800      	ldr	r0, [r0, #0]
 8002048:	f00e f832 	bl	80100b0 <osMessageQueuePut>
}
 800204c:	b02b      	add	sp, #172	; 0xac
 800204e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002052:	b004      	add	sp, #16
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	0801510c 	.word	0x0801510c
 800205c:	240188c0 	.word	0x240188c0

08002060 <logControllerOutput>:

osStatus_t logControllerOutput(timestamp_t ts, int32_t controller_output, int32_t reference_error,
		int32_t integrated_error) {
 8002060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_entry_t log_entry = { 0 };
 8002064:	2496      	movs	r4, #150	; 0x96
		int32_t integrated_error) {
 8002066:	b0aa      	sub	sp, #168	; 0xa8
 8002068:	4605      	mov	r5, r0
 800206a:	460e      	mov	r6, r1
 800206c:	4617      	mov	r7, r2
	log_entry_t log_entry = { 0 };
 800206e:	2100      	movs	r1, #0
 8002070:	4622      	mov	r2, r4
 8002072:	a804      	add	r0, sp, #16
		int32_t integrated_error) {
 8002074:	4698      	mov	r8, r3
	log_entry_t log_entry = { 0 };
 8002076:	f011 f90a 	bl	801328e <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, CONTROLLER_OUTPUT,
 800207a:	2304      	movs	r3, #4
 800207c:	4621      	mov	r1, r4
 800207e:	9601      	str	r6, [sp, #4]
 8002080:	a804      	add	r0, sp, #16
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	462b      	mov	r3, r5
 8002086:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <logControllerOutput+0x44>)
 8002088:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800208c:	f011 f9c0 	bl	8013410 <sniprintf>
			controller_output, reference_error, integrated_error);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002090:	2300      	movs	r3, #0
 8002092:	4805      	ldr	r0, [pc, #20]	; (80020a8 <logControllerOutput+0x48>)
 8002094:	a904      	add	r1, sp, #16
 8002096:	461a      	mov	r2, r3
 8002098:	6800      	ldr	r0, [r0, #0]
 800209a:	f00e f809 	bl	80100b0 <osMessageQueuePut>
}
 800209e:	b02a      	add	sp, #168	; 0xa8
 80020a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020a4:	0801510c 	.word	0x0801510c
 80020a8:	240188c0 	.word	0x240188c0

080020ac <logMotor>:

osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 80020ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	log_entry_t log_entry = { 0 };
 80020ae:	2496      	movs	r4, #150	; 0x96
osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 80020b0:	b0ab      	sub	sp, #172	; 0xac
 80020b2:	4605      	mov	r5, r0
 80020b4:	460e      	mov	r6, r1
 80020b6:	4617      	mov	r7, r2
	log_entry_t log_entry = { 0 };
 80020b8:	2100      	movs	r1, #0
 80020ba:	4622      	mov	r2, r4
 80020bc:	a804      	add	r0, sp, #16
 80020be:	f011 f8e6 	bl	801328e <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld\n", ts, MOTOR_POSITION,
 80020c2:	2305      	movs	r3, #5
 80020c4:	4621      	mov	r1, r4
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <logMotor+0x3c>)
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	a804      	add	r0, sp, #16
 80020cc:	462b      	mov	r3, r5
 80020ce:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80020d2:	f011 f99d 	bl	8013410 <sniprintf>
			desired_position, actual_position);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80020d6:	2300      	movs	r3, #0
 80020d8:	4804      	ldr	r0, [pc, #16]	; (80020ec <logMotor+0x40>)
 80020da:	a904      	add	r1, sp, #16
 80020dc:	461a      	mov	r2, r3
 80020de:	6800      	ldr	r0, [r0, #0]
 80020e0:	f00d ffe6 	bl	80100b0 <osMessageQueuePut>
}
 80020e4:	b02b      	add	sp, #172	; 0xac
 80020e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e8:	08015120 	.word	0x08015120
 80020ec:	240188c0 	.word	0x240188c0

080020f0 <UsbPrint>:
}


/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 80020f0:	b40f      	push	{r0, r1, r2, r3}
 80020f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t ret = 1;
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 80020f4:	4d10      	ldr	r5, [pc, #64]	; (8002138 <UsbPrint+0x48>)
 80020f6:	2100      	movs	r1, #0
 80020f8:	6828      	ldr	r0, [r5, #0]
 80020fa:	f00d fe4f 	bl	800fd9c <osMutexAcquire>
 80020fe:	b9c0      	cbnz	r0, 8002132 <UsbPrint+0x42>
		va_list argptr;
		va_start(argptr, format);
 8002100:	ab07      	add	r3, sp, #28
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8002102:	9a06      	ldr	r2, [sp, #24]
 8002104:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002108:	480c      	ldr	r0, [pc, #48]	; (800213c <UsbPrint+0x4c>)
		va_start(argptr, format);
 800210a:	9301      	str	r3, [sp, #4]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 800210c:	f011 f9fa 	bl	8013504 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8002110:	480a      	ldr	r0, [pc, #40]	; (800213c <UsbPrint+0x4c>)
 8002112:	f7fe f8e5 	bl	80002e0 <strlen>
 8002116:	b281      	uxth	r1, r0
 8002118:	4808      	ldr	r0, [pc, #32]	; (800213c <UsbPrint+0x4c>)
 800211a:	f010 fe91 	bl	8012e40 <CDC_Transmit_FS>
 800211e:	4604      	mov	r4, r0
		osMutexRelease(print_mutex);
 8002120:	6828      	ldr	r0, [r5, #0]
 8002122:	f00d fe6b 	bl	800fdfc <osMutexRelease>
	}
#endif
	return ret;
}
 8002126:	4620      	mov	r0, r4
 8002128:	b003      	add	sp, #12
 800212a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800212e:	b004      	add	sp, #16
 8002130:	4770      	bx	lr
	uint8_t ret = 1;
 8002132:	2401      	movs	r4, #1
 8002134:	e7f7      	b.n	8002126 <UsbPrint+0x36>
 8002136:	bf00      	nop
 8002138:	24009bfc 	.word	0x24009bfc
 800213c:	24008f16 	.word	0x24008f16

08002140 <StartDefaultTask>:
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		UsbPrint("Asdf");
 8002140:	4c05      	ldr	r4, [pc, #20]	; (8002158 <StartDefaultTask+0x18>)
void StartDefaultTask(void *argument) {
 8002142:	b508      	push	{r3, lr}
	MX_USB_DEVICE_Init();
 8002144:	f010 fe2a 	bl	8012d9c <MX_USB_DEVICE_Init>
		UsbPrint("Asdf");
 8002148:	4620      	mov	r0, r4
 800214a:	f7ff ffd1 	bl	80020f0 <UsbPrint>
		osDelay(1000);
 800214e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002152:	f00d fda3 	bl	800fc9c <osDelay>
 8002156:	e7f7      	b.n	8002148 <StartDefaultTask+0x8>
 8002158:	080151c0 	.word	0x080151c0

0800215c <SystemClock_Config>:
void SystemClock_Config(void) {
 800215c:	b570      	push	{r4, r5, r6, lr}
 800215e:	b0cc      	sub	sp, #304	; 0x130
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002160:	224c      	movs	r2, #76	; 0x4c
 8002162:	2100      	movs	r1, #0
 8002164:	a80a      	add	r0, sp, #40	; 0x28
 8002166:	f011 f892 	bl	801328e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800216a:	2220      	movs	r2, #32
 800216c:	2100      	movs	r1, #0
 800216e:	a802      	add	r0, sp, #8
 8002170:	f011 f88d 	bl	801328e <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002174:	22bc      	movs	r2, #188	; 0xbc
 8002176:	2100      	movs	r1, #0
 8002178:	a81d      	add	r0, sp, #116	; 0x74
 800217a:	f011 f888 	bl	801328e <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800217e:	2002      	movs	r0, #2
 8002180:	f006 fa58 	bl	8008634 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002184:	2300      	movs	r3, #0
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	4b31      	ldr	r3, [pc, #196]	; (8002250 <SystemClock_Config+0xf4>)
 800218a:	699a      	ldr	r2, [r3, #24]
 800218c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002190:	619a      	str	r2, [r3, #24]
 8002192:	699a      	ldr	r2, [r3, #24]
 8002194:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002198:	9201      	str	r2, [sp, #4]
 800219a:	4a2e      	ldr	r2, [pc, #184]	; (8002254 <SystemClock_Config+0xf8>)
 800219c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800219e:	f041 0101 	orr.w	r1, r1, #1
 80021a2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80021a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021a6:	f002 0201 	and.w	r2, r2, #1
 80021aa:	9201      	str	r2, [sp, #4]
 80021ac:	9a01      	ldr	r2, [sp, #4]
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80021ae:	699a      	ldr	r2, [r3, #24]
 80021b0:	0490      	lsls	r0, r2, #18
 80021b2:	d5fc      	bpl.n	80021ae <SystemClock_Config+0x52>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80021b4:	4a28      	ldr	r2, [pc, #160]	; (8002258 <SystemClock_Config+0xfc>)
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021b6:	2601      	movs	r6, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021b8:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80021ba:	2400      	movs	r4, #0
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80021bc:	6a93      	ldr	r3, [r2, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80021be:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80021c0:	f023 0303 	bic.w	r3, r3, #3
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	6293      	str	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLM = 1;
 80021ce:	9615      	str	r6, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80021d0:	941c      	str	r4, [sp, #112]	; 0x70
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021d2:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 120;
 80021d6:	2378      	movs	r3, #120	; 0x78
	RCC_OscInitStruct.PLL.PLLP = 2;
 80021d8:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 20;
 80021dc:	2314      	movs	r3, #20
	RCC_OscInitStruct.PLL.PLLR = 2;
 80021de:	e9cd 3518 	strd	r3, r5, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80021e2:	230c      	movs	r3, #12
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021e4:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80021e8:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80021ec:	f006 fa4e 	bl	800868c <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021f0:	223f      	movs	r2, #63	; 0x3f
 80021f2:	2303      	movs	r3, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80021f4:	2104      	movs	r1, #4
 80021f6:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80021fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002200:	f44f 6280 	mov.w	r2, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002204:	e9cd 3404 	strd	r3, r4, [sp, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002208:	2340      	movs	r3, #64	; 0x40
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800220a:	e9cd 2308 	strd	r2, r3, [sp, #32]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800220e:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8002212:	f006 fd6b 	bl	8008cec <HAL_RCC_ClockConfig>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <SystemClock_Config+0x100>)
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002218:	21c0      	movs	r1, #192	; 0xc0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800221a:	a81d      	add	r0, sp, #116	; 0x74
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800221c:	9425      	str	r4, [sp, #148]	; 0x94
	PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800221e:	9430      	str	r4, [sp, #192]	; 0xc0
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002220:	9445      	str	r4, [sp, #276]	; 0x114
	PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002222:	e9cd 361d 	strd	r3, r6, [sp, #116]	; 0x74
	PeriphClkInitStruct.PLL2.PLL2N = 19;
 8002226:	2313      	movs	r3, #19
	PeriphClkInitStruct.PLL2.PLL2P = 1;
 8002228:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800222c:	2320      	movs	r3, #32
 800222e:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002232:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002236:	e9cd 5521 	strd	r5, r5, [sp, #132]	; 0x84
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800223a:	933e      	str	r3, [sp, #248]	; 0xf8
	PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800223c:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
	PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002240:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002244:	f006 ffd8 	bl	80091f8 <HAL_RCCEx_PeriphCLKConfig>
	HAL_PWREx_EnableUSBVoltageDetector();
 8002248:	f006 fa18 	bl	800867c <HAL_PWREx_EnableUSBVoltageDetector>
}
 800224c:	b04c      	add	sp, #304	; 0x130
 800224e:	bd70      	pop	{r4, r5, r6, pc}
 8002250:	58024800 	.word	0x58024800
 8002254:	58000400 	.word	0x58000400
 8002258:	58024400 	.word	0x58024400
 800225c:	000d3003 	.word	0x000d3003

08002260 <main>:
int main(void) {
 8002260:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002264:	b0c1      	sub	sp, #260	; 0x104
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002266:	4de6      	ldr	r5, [pc, #920]	; (8002600 <main+0x3a0>)
	HAL_Init();
 8002268:	f003 fb7e 	bl	8005968 <HAL_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800226c:	2400      	movs	r4, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800226e:	ae39      	add	r6, sp, #228	; 0xe4
	SystemClock_Config();
 8002270:	f7ff ff74 	bl	800215c <SystemClock_Config>
	init_env(&global_env);
 8002274:	48e3      	ldr	r0, [pc, #908]	; (8002604 <main+0x3a4>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	2701      	movs	r7, #1
	init_env(&global_env);
 8002278:	f7fe feee 	bl	8001058 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 800227c:	48e2      	ldr	r0, [pc, #904]	; (8002608 <main+0x3a8>)
 800227e:	f7ff f841 	bl	8001304 <reset_flight_phase_detection>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002282:	2214      	movs	r2, #20
 8002284:	2100      	movs	r1, #0
 8002286:	4630      	mov	r0, r6
 8002288:	f011 f801 	bl	801328e <memset>
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800228c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 8002290:	2200      	movs	r2, #0
 8002292:	2102      	movs	r1, #2
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002294:	f043 0310 	orr.w	r3, r3, #16
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 8002298:	48dc      	ldr	r0, [pc, #880]	; (800260c <main+0x3ac>)
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800229a:	f04f 0904 	mov.w	r9, #4
	ADC_MultiModeTypeDef multimode = { 0 };
 800229e:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80022a2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022a6:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80022aa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80022ae:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	9303      	str	r3, [sp, #12]
 80022b8:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80022ba:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80022be:	f043 0304 	orr.w	r3, r3, #4
 80022c2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80022c6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	9304      	str	r3, [sp, #16]
 80022d0:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80022d2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80022d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022da:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80022de:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80022e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e6:	9305      	str	r3, [sp, #20]
 80022e8:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80022f6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	9306      	str	r3, [sp, #24]
 8002300:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002302:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002306:	f043 0302 	orr.w	r3, r3, #2
 800230a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800230e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	9307      	str	r3, [sp, #28]
 8002318:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800231a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800231e:	f043 0308 	orr.w	r3, r3, #8
 8002322:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002326:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	9308      	str	r3, [sp, #32]
 8002330:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 8002332:	f005 fc81 	bl	8007c38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CAMERA1_Pin | CAMERA2_Pin, GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800233c:	48b4      	ldr	r0, [pc, #720]	; (8002610 <main+0x3b0>)
 800233e:	f005 fc7b 	bl	8007c38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,
 8002342:	2200      	movs	r2, #0
 8002344:	f643 0103 	movw	r1, #14339	; 0x3803
 8002348:	48b2      	ldr	r0, [pc, #712]	; (8002614 <main+0x3b4>)
 800234a:	f005 fc75 	bl	8007c38 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8002352:	4631      	mov	r1, r6
 8002354:	48b0      	ldr	r0, [pc, #704]	; (8002618 <main+0x3b8>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	943b      	str	r4, [sp, #236]	; 0xec
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002358:	e9cd 3439 	strd	r3, r4, [sp, #228]	; 0xe4
	HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 800235c:	f005 fb7c 	bl	8007a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002360:	2302      	movs	r3, #2
	HAL_GPIO_Init(PW_HOLD_GPIO_Port, &GPIO_InitStruct);
 8002362:	4631      	mov	r1, r6
 8002364:	48a9      	ldr	r0, [pc, #676]	; (800260c <main+0x3ac>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002366:	e9cd 3739 	strd	r3, r7, [sp, #228]	; 0xe4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
	HAL_GPIO_Init(PW_HOLD_GPIO_Port, &GPIO_InitStruct);
 800236e:	f005 fb73 	bl	8007a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CAMERA1_Pin | CAMERA2_Pin;
 8002372:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002376:	4631      	mov	r1, r6
 8002378:	48a5      	ldr	r0, [pc, #660]	; (8002610 <main+0x3b0>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237a:	e9cd 3739 	strd	r3, r7, [sp, #228]	; 0xe4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002382:	f005 fb69 	bl	8007a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin =
 8002386:	f643 0303 	movw	r3, #14339	; 0x3803
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800238a:	4631      	mov	r1, r6
 800238c:	48a1      	ldr	r0, [pc, #644]	; (8002614 <main+0x3b4>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238e:	e9cd 3739 	strd	r3, r7, [sp, #228]	; 0xe4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002396:	f005 fb5f 	bl	8007a58 <HAL_GPIO_Init>
	__HAL_RCC_DMA2_CLK_ENABLE();
 800239a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800239e:	4622      	mov	r2, r4
 80023a0:	2105      	movs	r1, #5
	__HAL_RCC_DMA2_CLK_ENABLE();
 80023a2:	f043 0302 	orr.w	r3, r3, #2
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80023a6:	200b      	movs	r0, #11
	__HAL_RCC_DMA2_CLK_ENABLE();
 80023a8:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 80023ac:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80023b8:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 80023bc:	433b      	orrs	r3, r7
 80023be:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 80023c2:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
	hadc1.Instance = ADC1;
 80023c6:	4d95      	ldr	r5, [pc, #596]	; (800261c <main+0x3bc>)
	__HAL_RCC_DMA1_CLK_ENABLE();
 80023c8:	403b      	ands	r3, r7
 80023ca:	9302      	str	r3, [sp, #8]
 80023cc:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80023ce:	f004 f981 	bl	80066d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80023d2:	200b      	movs	r0, #11
 80023d4:	f004 f9b0 	bl	8006738 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80023d8:	4622      	mov	r2, r4
 80023da:	2105      	movs	r1, #5
 80023dc:	200c      	movs	r0, #12
 80023de:	f004 f979 	bl	80066d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80023e2:	200c      	movs	r0, #12
 80023e4:	f004 f9a8 	bl	8006738 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80023e8:	4622      	mov	r2, r4
 80023ea:	2105      	movs	r1, #5
 80023ec:	200d      	movs	r0, #13
 80023ee:	f004 f971 	bl	80066d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80023f2:	200d      	movs	r0, #13
 80023f4:	f004 f9a0 	bl	8006738 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80023f8:	4622      	mov	r2, r4
 80023fa:	2105      	movs	r1, #5
 80023fc:	200e      	movs	r0, #14
 80023fe:	f004 f969 	bl	80066d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002402:	200e      	movs	r0, #14
 8002404:	f004 f998 	bl	8006738 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002408:	4622      	mov	r2, r4
 800240a:	2105      	movs	r1, #5
 800240c:	200f      	movs	r0, #15
 800240e:	f004 f961 	bl	80066d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002412:	200f      	movs	r0, #15
 8002414:	f004 f990 	bl	8006738 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002418:	4622      	mov	r2, r4
 800241a:	2105      	movs	r1, #5
 800241c:	2010      	movs	r0, #16
 800241e:	f004 f959 	bl	80066d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002422:	2010      	movs	r0, #16
 8002424:	f004 f988 	bl	8006738 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002428:	4622      	mov	r2, r4
 800242a:	2105      	movs	r1, #5
 800242c:	2011      	movs	r0, #17
 800242e:	f004 f951 	bl	80066d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002432:	2011      	movs	r0, #17
 8002434:	f004 f980 	bl	8006738 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002438:	4622      	mov	r2, r4
 800243a:	4621      	mov	r1, r4
 800243c:	202f      	movs	r0, #47	; 0x2f
 800243e:	f004 f949 	bl	80066d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002442:	202f      	movs	r0, #47	; 0x2f
 8002444:	f004 f978 	bl	8006738 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002448:	4622      	mov	r2, r4
 800244a:	2105      	movs	r1, #5
 800244c:	2038      	movs	r0, #56	; 0x38
 800244e:	f004 f941 	bl	80066d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002452:	2038      	movs	r0, #56	; 0x38
 8002454:	f004 f970 	bl	8006738 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002458:	4622      	mov	r2, r4
 800245a:	2105      	movs	r1, #5
 800245c:	2039      	movs	r0, #57	; 0x39
 800245e:	f004 f939 	bl	80066d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002462:	2039      	movs	r0, #57	; 0x39
 8002464:	f004 f968 	bl	8006738 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8002468:	4622      	mov	r2, r4
 800246a:	2105      	movs	r1, #5
 800246c:	203c      	movs	r0, #60	; 0x3c
 800246e:	f004 f931 	bl	80066d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002472:	203c      	movs	r0, #60	; 0x3c
 8002474:	f004 f960 	bl	8006738 <HAL_NVIC_EnableIRQ>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002478:	4621      	mov	r1, r4
 800247a:	221c      	movs	r2, #28
 800247c:	4630      	mov	r0, r6
	ADC_MultiModeTypeDef multimode = { 0 };
 800247e:	9437      	str	r4, [sp, #220]	; 0xdc
 8002480:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002484:	f010 ff03 	bl	801328e <memset>
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002488:	4a65      	ldr	r2, [pc, #404]	; (8002620 <main+0x3c0>)
 800248a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800248e:	4628      	mov	r0, r5
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002490:	f8c5 9010 	str.w	r9, [r5, #16]
	hadc1.Init.NbrOfConversion = 4;
 8002494:	f8c5 9018 	str.w	r9, [r5, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8002498:	752c      	strb	r4, [r5, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800249a:	756f      	strb	r7, [r5, #21]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800249c:	772c      	strb	r4, [r5, #28]
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800249e:	636c      	str	r4, [r5, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80024a0:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80024a4:	e9c5 2300 	strd	r2, r3, [r5]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80024a8:	e9c5 4702 	strd	r4, r7, [r5, #8]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024ac:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80024b0:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80024b4:	f003 ff4a 	bl	800634c <HAL_ADC_Init>
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80024b8:	4641      	mov	r1, r8
 80024ba:	4628      	mov	r0, r5
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80024bc:	9435      	str	r4, [sp, #212]	; 0xd4
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80024be:	f004 f859 	bl	8006574 <HAL_ADCEx_MultiModeConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80024c2:	2306      	movs	r3, #6
 80024c4:	4957      	ldr	r1, [pc, #348]	; (8002624 <main+0x3c4>)
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80024c6:	4628      	mov	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80024c8:	933b      	str	r3, [sp, #236]	; 0xec
	sConfig.Offset = 0;
 80024ca:	943e      	str	r4, [sp, #248]	; 0xf8
	sConfig.OffsetSignedSaturation = DISABLE;
 80024cc:	f88d 40fd 	strb.w	r4, [sp, #253]	; 0xfd
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80024d0:	e9cd 1339 	strd	r1, r3, [sp, #228]	; 0xe4
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80024d4:	f240 73ff 	movw	r3, #2047	; 0x7ff
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80024d8:	4631      	mov	r1, r6
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80024da:	e9cd 393c 	strd	r3, r9, [sp, #240]	; 0xf0
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80024de:	f003 fafd 	bl	8005adc <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80024e2:	f04f 090c 	mov.w	r9, #12
 80024e6:	4b50      	ldr	r3, [pc, #320]	; (8002628 <main+0x3c8>)
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80024e8:	4631      	mov	r1, r6
 80024ea:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80024ec:	e9cd 3939 	strd	r3, r9, [sp, #228]	; 0xe4
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80024f0:	f003 faf4 	bl	8005adc <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80024f4:	2312      	movs	r3, #18
 80024f6:	484d      	ldr	r0, [pc, #308]	; (800262c <main+0x3cc>)
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80024f8:	4631      	mov	r1, r6
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80024fa:	e9cd 0339 	strd	r0, r3, [sp, #228]	; 0xe4
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80024fe:	4628      	mov	r0, r5
 8002500:	f003 faec 	bl	8005adc <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8002504:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8002654 <main+0x3f4>
 8002508:	2318      	movs	r3, #24
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800250a:	4631      	mov	r1, r6
 800250c:	4628      	mov	r0, r5
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800250e:	2507      	movs	r5, #7
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8002510:	e9cd c339 	strd	ip, r3, [sp, #228]	; 0xe4
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002514:	f003 fae2 	bl	8005adc <HAL_ADC_ConfigChannel>
	hsd1.Instance = SDMMC1;
 8002518:	4b45      	ldr	r3, [pc, #276]	; (8002630 <main+0x3d0>)
 800251a:	4a46      	ldr	r2, [pc, #280]	; (8002634 <main+0x3d4>)
	hspi1.Instance = SPI1;
 800251c:	4846      	ldr	r0, [pc, #280]	; (8002638 <main+0x3d8>)
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800251e:	609c      	str	r4, [r3, #8]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002520:	f8c0 a018 	str.w	sl, [r0, #24]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002524:	e9c3 2400 	strd	r2, r4, [r3]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002528:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800252c:	e9c3 4705 	strd	r4, r7, [r3, #20]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002530:	e9c3 2403 	strd	r2, r4, [r3, #12]
	hspi1.Instance = SPI1;
 8002534:	4b41      	ldr	r3, [pc, #260]	; (800263c <main+0x3dc>)
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002536:	e9c0 b502 	strd	fp, r5, [r0, #8]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 800253a:	e9c0 3400 	strd	r3, r4, [r0]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800253e:	e9c0 4404 	strd	r4, r4, [r0, #16]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002542:	e9c0 4408 	strd	r4, r4, [r0, #32]
	hspi1.Init.CRCPolynomial = 0x0;
 8002546:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800254a:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
	hspi1.Init.TxCRCInitializationPattern =
 800254e:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002552:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002556:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800255a:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800255e:	f008 fc25 	bl	800adac <HAL_SPI_Init>
	hspi2.Instance = SPI2;
 8002562:	4837      	ldr	r0, [pc, #220]	; (8002640 <main+0x3e0>)
 8002564:	4b37      	ldr	r3, [pc, #220]	; (8002644 <main+0x3e4>)
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002566:	f8c0 a018 	str.w	sl, [r0, #24]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800256a:	e9c0 b502 	strd	fp, r5, [r0, #8]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 800256e:	e9c0 3400 	strd	r3, r4, [r0]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002572:	e9c0 4404 	strd	r4, r4, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002576:	e9c0 4408 	strd	r4, r4, [r0, #32]
	hspi2.Init.CRCPolynomial = 0x0;
 800257a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800257e:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
	hspi2.Init.TxCRCInitializationPattern =
 8002582:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002586:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800258a:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800258e:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8002592:	f008 fc0b 	bl	800adac <HAL_SPI_Init>
	hspi3.Instance = SPI3;
 8002596:	482c      	ldr	r0, [pc, #176]	; (8002648 <main+0x3e8>)
 8002598:	4b2c      	ldr	r3, [pc, #176]	; (800264c <main+0x3ec>)
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800259a:	f8c0 a018 	str.w	sl, [r0, #24]
	huart4.Init.BaudRate = 115200;
 800259e:	f44f 3ae1 	mov.w	sl, #115200	; 0x1c200
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80025a2:	e9c0 b502 	strd	fp, r5, [r0, #8]
	huart4.Instance = UART4;
 80025a6:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8002658 <main+0x3f8>
	hspi3.Init.Mode = SPI_MODE_SLAVE;
 80025aa:	e9c0 3400 	strd	r3, r4, [r0]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ae:	e9c0 4404 	strd	r4, r4, [r0, #16]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80025b2:	e9c0 4408 	strd	r4, r4, [r0, #32]
	hspi3.Init.CRCPolynomial = 0x0;
 80025b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80025ba:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
	hspi3.Init.TxCRCInitializationPattern =
 80025be:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80025c2:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80025c6:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80025ca:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80025ce:	f008 fbed 	bl	800adac <HAL_SPI_Init>
	huart4.Init.BaudRate = 115200;
 80025d2:	4b1f      	ldr	r3, [pc, #124]	; (8002650 <main+0x3f0>)
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80025d4:	4658      	mov	r0, fp
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025d6:	f8cb 4028 	str.w	r4, [fp, #40]	; 0x28
	huart4.Init.BaudRate = 115200;
 80025da:	e9cb 3a00 	strd	r3, sl, [fp]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80025de:	e9cb 4904 	strd	r4, r9, [fp, #16]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80025e2:	e9cb 4402 	strd	r4, r4, [fp, #8]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e6:	e9cb 4406 	strd	r4, r4, [fp, #24]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025ea:	e9cb 4408 	strd	r4, r4, [fp, #32]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80025ee:	f009 fe98 	bl	800c322 <HAL_UART_Init>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 80025f2:	4621      	mov	r1, r4
 80025f4:	4658      	mov	r0, fp
 80025f6:	f009 ff16 	bl	800c426 <HAL_UARTEx_SetTxFifoThreshold>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 80025fa:	4621      	mov	r1, r4
 80025fc:	4658      	mov	r0, fp
 80025fe:	e02d      	b.n	800265c <main+0x3fc>
 8002600:	58024400 	.word	0x58024400
 8002604:	24000224 	.word	0x24000224
 8002608:	24000234 	.word	0x24000234
 800260c:	58020400 	.word	0x58020400
 8002610:	58021000 	.word	0x58021000
 8002614:	58020c00 	.word	0x58020c00
 8002618:	58020800 	.word	0x58020800
 800261c:	2400e2cc 	.word	0x2400e2cc
 8002620:	40022000 	.word	0x40022000
 8002624:	21800100 	.word	0x21800100
 8002628:	25b00200 	.word	0x25b00200
 800262c:	2a000400 	.word	0x2a000400
 8002630:	2400c0c0 	.word	0x2400c0c0
 8002634:	52007000 	.word	0x52007000
 8002638:	24018838 	.word	0x24018838
 800263c:	40013000 	.word	0x40013000
 8002640:	24009d00 	.word	0x24009d00
 8002644:	40003800 	.word	0x40003800
 8002648:	2400e234 	.word	0x2400e234
 800264c:	40003c00 	.word	0x40003c00
 8002650:	40004c00 	.word	0x40004c00
 8002654:	2e300800 	.word	0x2e300800
 8002658:	240187a8 	.word	0x240187a8
 800265c:	f009 ff07 	bl	800c46e <HAL_UARTEx_SetRxFifoThreshold>
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8002660:	4658      	mov	r0, fp
	huart7.Instance = UART7;
 8002662:	f8df b3ec 	ldr.w	fp, [pc, #1004]	; 8002a50 <main+0x7f0>
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8002666:	f009 fec3 	bl	800c3f0 <HAL_UARTEx_DisableFifoMode>
	huart7.Instance = UART7;
 800266a:	4bcc      	ldr	r3, [pc, #816]	; (800299c <main+0x73c>)
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 800266c:	4658      	mov	r0, fp
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800266e:	f8cb 4028 	str.w	r4, [fp, #40]	; 0x28
	huart7.Init.BaudRate = 115200;
 8002672:	e9cb 3a00 	strd	r3, sl, [fp]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8002676:	e9cb 4904 	strd	r4, r9, [fp, #16]
	huart7.Init.StopBits = UART_STOPBITS_1;
 800267a:	e9cb 4402 	strd	r4, r4, [fp, #8]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800267e:	e9cb 4406 	strd	r4, r4, [fp, #24]
	huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002682:	e9cb 4408 	strd	r4, r4, [fp, #32]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 8002686:	f009 fe4c 	bl	800c322 <HAL_UART_Init>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8)
 800268a:	4621      	mov	r1, r4
 800268c:	4658      	mov	r0, fp
 800268e:	f009 feca 	bl	800c426 <HAL_UARTEx_SetTxFifoThreshold>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8)
 8002692:	4621      	mov	r1, r4
 8002694:	4658      	mov	r0, fp
 8002696:	f009 feea 	bl	800c46e <HAL_UARTEx_SetRxFifoThreshold>
	if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK) {
 800269a:	4658      	mov	r0, fp
	huart1.Instance = USART1;
 800269c:	f8df b3b4 	ldr.w	fp, [pc, #948]	; 8002a54 <main+0x7f4>
	if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK) {
 80026a0:	f009 fea6 	bl	800c3f0 <HAL_UARTEx_DisableFifoMode>
	huart1.Instance = USART1;
 80026a4:	4bbe      	ldr	r3, [pc, #760]	; (80029a0 <main+0x740>)
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80026a6:	4658      	mov	r0, fp
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026a8:	f8cb 4028 	str.w	r4, [fp, #40]	; 0x28
	huart1.Init.BaudRate = 115200;
 80026ac:	e9cb 3a00 	strd	r3, sl, [fp]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80026b0:	e9cb 4904 	strd	r4, r9, [fp, #16]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80026b4:	e9cb 4402 	strd	r4, r4, [fp, #8]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b8:	e9cb 4406 	strd	r4, r4, [fp, #24]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026bc:	e9cb 4408 	strd	r4, r4, [fp, #32]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80026c0:	f009 fe2f 	bl	800c322 <HAL_UART_Init>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80026c4:	4621      	mov	r1, r4
 80026c6:	4658      	mov	r0, fp
 80026c8:	f009 fead 	bl	800c426 <HAL_UARTEx_SetTxFifoThreshold>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80026cc:	4621      	mov	r1, r4
 80026ce:	4658      	mov	r0, fp
 80026d0:	f009 fecd 	bl	800c46e <HAL_UARTEx_SetRxFifoThreshold>
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80026d4:	4658      	mov	r0, fp
	huart2.Instance = USART2;
 80026d6:	f8df b380 	ldr.w	fp, [pc, #896]	; 8002a58 <main+0x7f8>
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80026da:	f009 fe89 	bl	800c3f0 <HAL_UARTEx_DisableFifoMode>
	huart2.Instance = USART2;
 80026de:	4bb1      	ldr	r3, [pc, #708]	; (80029a4 <main+0x744>)
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80026e0:	4658      	mov	r0, fp
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026e2:	f8cb 4028 	str.w	r4, [fp, #40]	; 0x28
	huart2.Init.BaudRate = 115200;
 80026e6:	e9cb 3a00 	strd	r3, sl, [fp]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80026ea:	e9cb 4904 	strd	r4, r9, [fp, #16]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80026ee:	e9cb 4402 	strd	r4, r4, [fp, #8]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f2:	e9cb 4406 	strd	r4, r4, [fp, #24]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026f6:	e9cb 4408 	strd	r4, r4, [fp, #32]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80026fa:	f009 fe12 	bl	800c322 <HAL_UART_Init>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80026fe:	4621      	mov	r1, r4
 8002700:	4658      	mov	r0, fp
 8002702:	f009 fe90 	bl	800c426 <HAL_UARTEx_SetTxFifoThreshold>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8002706:	4621      	mov	r1, r4
 8002708:	4658      	mov	r0, fp
 800270a:	f009 feb0 	bl	800c46e <HAL_UARTEx_SetRxFifoThreshold>
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 800270e:	4658      	mov	r0, fp
	huart3.Instance = USART3;
 8002710:	f8df b348 	ldr.w	fp, [pc, #840]	; 8002a5c <main+0x7fc>
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8002714:	f009 fe6c 	bl	800c3f0 <HAL_UARTEx_DisableFifoMode>
	huart3.Instance = USART3;
 8002718:	4ba3      	ldr	r3, [pc, #652]	; (80029a8 <main+0x748>)
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800271a:	4658      	mov	r0, fp
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800271c:	f8cb 4028 	str.w	r4, [fp, #40]	; 0x28
	huart3.Init.BaudRate = 115200;
 8002720:	e9cb 3a00 	strd	r3, sl, [fp]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002724:	e9cb 4904 	strd	r4, r9, [fp, #16]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002728:	e9cb 4402 	strd	r4, r4, [fp, #8]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800272c:	e9cb 4406 	strd	r4, r4, [fp, #24]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002730:	e9cb 4408 	strd	r4, r4, [fp, #32]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002734:	f009 fdf5 	bl	800c322 <HAL_UART_Init>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8002738:	4621      	mov	r1, r4
 800273a:	4658      	mov	r0, fp
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800273c:	f04f 5900 	mov.w	r9, #536870912	; 0x20000000
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8002740:	f009 fe71 	bl	800c426 <HAL_UARTEx_SetTxFifoThreshold>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8002744:	4621      	mov	r1, r4
 8002746:	4658      	mov	r0, fp
	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 8002748:	f8df a314 	ldr.w	sl, [pc, #788]	; 8002a60 <main+0x800>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 800274c:	f009 fe8f 	bl	800c46e <HAL_UARTEx_SetRxFifoThreshold>
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8002750:	4658      	mov	r0, fp
 8002752:	f009 fe4d 	bl	800c3f0 <HAL_UARTEx_DisableFifoMode>
	command_mutex_only = osMutexNew(&command_mutex_attr);
 8002756:	f8df b30c 	ldr.w	fp, [pc, #780]	; 8002a64 <main+0x804>
	MX_FATFS_Init();
 800275a:	f00a ff01 	bl	800d560 <MX_FATFS_Init>
	hspi4.Init.Mode = SPI_MODE_MASTER;
 800275e:	f8df e308 	ldr.w	lr, [pc, #776]	; 8002a68 <main+0x808>
	hspi4.Instance = SPI4;
 8002762:	4892      	ldr	r0, [pc, #584]	; (80029ac <main+0x74c>)
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8002764:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002768:	e9c0 e300 	strd	lr, r3, [r0]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800276c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002770:	e9c0 9306 	strd	r9, r3, [r0, #24]
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	battery_mutex_only = osMutexNew(&battery_mutex_attr);
 8002778:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 8002a6c <main+0x80c>
	hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800277c:	e9c0 4502 	strd	r4, r5, [r0, #8]
	const osMutexAttr_t sb1_mutex_attr = { "sb1_mutex_only", // human readable mutex name
 8002780:	4d8b      	ldr	r5, [pc, #556]	; (80029b0 <main+0x750>)
	hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002782:	e9c0 340d 	strd	r3, r4, [r0, #52]	; 0x34
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002786:	e9c0 4404 	strd	r4, r4, [r0, #16]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800278a:	e9c0 4408 	strd	r4, r4, [r0, #32]
	hspi4.Init.CRCPolynomial = 0x0;
 800278e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
	hspi4.Init.TxCRCInitializationPattern =
 8002792:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
	hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002796:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
	hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800279a:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
	hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800279e:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 80027a2:	f008 fb03 	bl	800adac <HAL_SPI_Init>
	MX_USB_DEVICE_Init();
 80027a6:	f010 faf9 	bl	8012d9c <MX_USB_DEVICE_Init>
	vTraceEnable(TRC_START);
 80027aa:	4638      	mov	r0, r7
 80027ac:	f002 f91c 	bl	80049e8 <vTraceEnable>
	osKernelInitialize();
 80027b0:	f00d f9bc 	bl	800fb2c <osKernelInitialize>
	const osMutexAttr_t sb1_mutex_attr = { "sb1_mutex_only", // human readable mutex name
 80027b4:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 80027b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 80027c0:	4660      	mov	r0, ip
 80027c2:	f00d faa9 	bl	800fd18 <osMutexNew>
 80027c6:	4b7b      	ldr	r3, [pc, #492]	; (80029b4 <main+0x754>)
	const osMutexAttr_t sb2_mutex_attr = { "sb2_mutex_only", // human readable mutex name
 80027c8:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 80027cc:	6018      	str	r0, [r3, #0]
	const osMutexAttr_t sb2_mutex_attr = { "sb2_mutex_only", // human readable mutex name
 80027ce:	f105 0310 	add.w	r3, r5, #16
 80027d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 80027d8:	4660      	mov	r0, ip
 80027da:	f00d fa9d 	bl	800fd18 <osMutexNew>
 80027de:	4a76      	ldr	r2, [pc, #472]	; (80029b8 <main+0x758>)
	const osMutexAttr_t sb3_mutex_attr = { "sb3_mutex_only", // human readable mutex name
 80027e0:	f105 0320 	add.w	r3, r5, #32
 80027e4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 80027e8:	6010      	str	r0, [r2, #0]
	const osMutexAttr_t sb3_mutex_attr = { "sb3_mutex_only", // human readable mutex name
 80027ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 80027f0:	4660      	mov	r0, ip
 80027f2:	f00d fa91 	bl	800fd18 <osMutexNew>
 80027f6:	4971      	ldr	r1, [pc, #452]	; (80029bc <main+0x75c>)
	const osMutexAttr_t state_est_mutex_attr = { "state_est_mutex_only", // human readable mutex name
 80027f8:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80027fc:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 8002800:	6008      	str	r0, [r1, #0]
	const osMutexAttr_t state_est_mutex_attr = { "state_est_mutex_only", // human readable mutex name
 8002802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002804:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 8002808:	4660      	mov	r0, ip
 800280a:	f00d fa85 	bl	800fd18 <osMutexNew>
 800280e:	4b6c      	ldr	r3, [pc, #432]	; (80029c0 <main+0x760>)
	const osMutexAttr_t controller_mutex_attr = { "controller_mutex_only", // human readable mutex name
 8002810:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 8002814:	6018      	str	r0, [r3, #0]
	const osMutexAttr_t controller_mutex_attr = { "controller_mutex_only", // human readable mutex name
 8002816:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800281a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800281c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 8002820:	4660      	mov	r0, ip
 8002822:	f00d fa79 	bl	800fd18 <osMutexNew>
 8002826:	4a67      	ldr	r2, [pc, #412]	; (80029c4 <main+0x764>)
	const osMutexAttr_t fsm_mutex_attr = { "fsm_mutex_only", // human readable mutex name
 8002828:	f105 0350 	add.w	r3, r5, #80	; 0x50
 800282c:	f10d 0c74 	add.w	ip, sp, #116	; 0x74
	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 8002830:	6010      	str	r0, [r2, #0]
	const osMutexAttr_t fsm_mutex_attr = { "fsm_mutex_only", // human readable mutex name
 8002832:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002834:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 8002838:	4660      	mov	r0, ip
 800283a:	f00d fa6d 	bl	800fd18 <osMutexNew>
 800283e:	4962      	ldr	r1, [pc, #392]	; (80029c8 <main+0x768>)
	const osMutexAttr_t environment_mutex_attr = { "environment_mutex_only", // human readable mutex name
 8002840:	f105 0360 	add.w	r3, r5, #96	; 0x60
 8002844:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 8002848:	6008      	str	r0, [r1, #0]
	const osMutexAttr_t environment_mutex_attr = { "environment_mutex_only", // human readable mutex name
 800284a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800284c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 8002850:	4660      	mov	r0, ip
 8002852:	f00d fa61 	bl	800fd18 <osMutexNew>
 8002856:	4b5d      	ldr	r3, [pc, #372]	; (80029cc <main+0x76c>)
	const osMutexAttr_t usb_data_mutex_attr = { "usb_data_mutex_only", // human readable mutex name
 8002858:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 800285c:	6018      	str	r0, [r3, #0]
	const osMutexAttr_t usb_data_mutex_attr = { "usb_data_mutex_only", // human readable mutex name
 800285e:	f105 0370 	add.w	r3, r5, #112	; 0x70
 8002862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002864:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8002868:	4660      	mov	r0, ip
 800286a:	f00d fa55 	bl	800fd18 <osMutexNew>
 800286e:	4a58      	ldr	r2, [pc, #352]	; (80029d0 <main+0x770>)
	const osMutexAttr_t command_mutex_attr = { "command_mutex_only", // human readable mutex name
 8002870:	f105 0380 	add.w	r3, r5, #128	; 0x80
 8002874:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8002878:	6010      	str	r0, [r2, #0]
	const osMutexAttr_t command_mutex_attr = { "command_mutex_only", // human readable mutex name
 800287a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800287c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	command_mutex_only = osMutexNew(&command_mutex_attr);
 8002880:	4660      	mov	r0, ip
 8002882:	f00d fa49 	bl	800fd18 <osMutexNew>
	const osMutexAttr_t gps_mutex_attr = { "gps_mutex_only", // human readable mutex name
 8002886:	f105 0390 	add.w	r3, r5, #144	; 0x90
 800288a:	f10d 0cb4 	add.w	ip, sp, #180	; 0xb4
	command_mutex_only = osMutexNew(&command_mutex_attr);
 800288e:	f8cb 0000 	str.w	r0, [fp]
	const osMutexAttr_t gps_mutex_attr = { "gps_mutex_only", // human readable mutex name
 8002892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002894:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 8002898:	4660      	mov	r0, ip
 800289a:	f00d fa3d 	bl	800fd18 <osMutexNew>
	const osMutexAttr_t battery_mutex_attr = { "battery_mutex_only", // human readable mutex name
 800289e:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
 80028a2:	f10d 0cc4 	add.w	ip, sp, #196	; 0xc4
	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 80028a6:	f8ca 0000 	str.w	r0, [sl]
	const osMutexAttr_t battery_mutex_attr = { "battery_mutex_only", // human readable mutex name
 80028aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	battery_mutex_only = osMutexNew(&battery_mutex_attr);
 80028b0:	4660      	mov	r0, ip
 80028b2:	f00d fa31 	bl	800fd18 <osMutexNew>
	const osMutexAttr_t motor_mutex_attr = { "motor_mutex_only", // human readable mutex name
 80028b6:	f105 03b0 	add.w	r3, r5, #176	; 0xb0
	battery_mutex_only = osMutexNew(&battery_mutex_attr);
 80028ba:	f8c9 0000 	str.w	r0, [r9]
	const osMutexAttr_t print_mutex_attr = { "print_mutex", // human readable mutex name
 80028be:	35c0      	adds	r5, #192	; 0xc0
	const osMutexAttr_t motor_mutex_attr = { "motor_mutex_only", // human readable mutex name
 80028c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028c2:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
	motor_mutex_only = osMutexNew(&motor_mutex_attr);
 80028c6:	4640      	mov	r0, r8
 80028c8:	f00d fa26 	bl	800fd18 <osMutexNew>
 80028cc:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <main+0x774>)
	sb3_mutex.mutex = sb3_mutex_only;
 80028ce:	493b      	ldr	r1, [pc, #236]	; (80029bc <main+0x75c>)
	motor_mutex_only = osMutexNew(&motor_mutex_attr);
 80028d0:	6018      	str	r0, [r3, #0]
	sb1_mutex.mutex = sb1_mutex_only;
 80028d2:	4b38      	ldr	r3, [pc, #224]	; (80029b4 <main+0x754>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4b40      	ldr	r3, [pc, #256]	; (80029d8 <main+0x778>)
 80028d8:	601a      	str	r2, [r3, #0]
	sb2_mutex.mutex = sb2_mutex_only;
 80028da:	4a37      	ldr	r2, [pc, #220]	; (80029b8 <main+0x758>)
 80028dc:	4b3f      	ldr	r3, [pc, #252]	; (80029dc <main+0x77c>)
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	601a      	str	r2, [r3, #0]
	sb3_mutex.mutex = sb3_mutex_only;
 80028e2:	680a      	ldr	r2, [r1, #0]
 80028e4:	4b3e      	ldr	r3, [pc, #248]	; (80029e0 <main+0x780>)
	fsm_mutex.mutex = fsm_mutex_only;
 80028e6:	4938      	ldr	r1, [pc, #224]	; (80029c8 <main+0x768>)
	sb3_mutex.mutex = sb3_mutex_only;
 80028e8:	601a      	str	r2, [r3, #0]
	env_mutex.mutex = environment_mutex_only;
 80028ea:	4b38      	ldr	r3, [pc, #224]	; (80029cc <main+0x76c>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b3d      	ldr	r3, [pc, #244]	; (80029e4 <main+0x784>)
 80028f0:	601a      	str	r2, [r3, #0]
	fsm_mutex.mutex = fsm_mutex_only;
 80028f2:	680a      	ldr	r2, [r1, #0]
 80028f4:	4b3c      	ldr	r3, [pc, #240]	; (80029e8 <main+0x788>)
 80028f6:	601a      	str	r2, [r3, #0]
	controller_mutex.mutex = controller_mutex_only;
 80028f8:	4a32      	ldr	r2, [pc, #200]	; (80029c4 <main+0x764>)
 80028fa:	4b3c      	ldr	r3, [pc, #240]	; (80029ec <main+0x78c>)
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	601a      	str	r2, [r3, #0]
	state_est_mutex.mutex = state_est_mutex_only;
 8002900:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <main+0x760>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b3a      	ldr	r3, [pc, #232]	; (80029f0 <main+0x790>)
 8002906:	601a      	str	r2, [r3, #0]
	usb_data_mutex.mutex = usb_data_mutex_only;
 8002908:	4a31      	ldr	r2, [pc, #196]	; (80029d0 <main+0x770>)
 800290a:	4b3a      	ldr	r3, [pc, #232]	; (80029f4 <main+0x794>)
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	601a      	str	r2, [r3, #0]
	command_mutex.mutex = command_mutex_only;
 8002910:	f8db 2000 	ldr.w	r2, [fp]
 8002914:	4b38      	ldr	r3, [pc, #224]	; (80029f8 <main+0x798>)
 8002916:	601a      	str	r2, [r3, #0]
	gps_mutex.mutex = gps_mutex_only;
 8002918:	f8da 2000 	ldr.w	r2, [sl]
 800291c:	4b37      	ldr	r3, [pc, #220]	; (80029fc <main+0x79c>)
 800291e:	601a      	str	r2, [r3, #0]
	battery_mutex.mutex = battery_mutex_only;
 8002920:	f8d9 2000 	ldr.w	r2, [r9]
 8002924:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <main+0x7a0>)
 8002926:	601a      	str	r2, [r3, #0]
	global_telemetry_command = IDLE_COMMAND;
 8002928:	229b      	movs	r2, #155	; 0x9b
	motor_mutex.mutex = motor_mutex_only;
 800292a:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <main+0x7a4>)
 800292c:	6018      	str	r0, [r3, #0]
	global_flight_phase_detection.flight_phase = IDLE;
 800292e:	4b36      	ldr	r3, [pc, #216]	; (8002a08 <main+0x7a8>)
 8002930:	701f      	strb	r7, [r3, #0]
	global_flight_phase_detection.mach_regime = SUBSONIC;
 8002932:	705f      	strb	r7, [r3, #1]
	global_telemetry_command = IDLE_COMMAND;
 8002934:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <main+0x7ac>)
 8002936:	701a      	strb	r2, [r3, #0]
	const osMutexAttr_t print_mutex_attr = { "print_mutex", // human readable mutex name
 8002938:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800293c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	print_mutex = osMutexNew(&print_mutex_attr);
 8002940:	4630      	mov	r0, r6
 8002942:	f00d f9e9 	bl	800fd18 <osMutexNew>
 8002946:	4b32      	ldr	r3, [pc, #200]	; (8002a10 <main+0x7b0>)
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8002948:	4622      	mov	r2, r4
 800294a:	2196      	movs	r1, #150	; 0x96
	print_mutex = osMutexNew(&print_mutex_attr);
 800294c:	6018      	str	r0, [r3, #0]
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 800294e:	2080      	movs	r0, #128	; 0x80
 8002950:	f00d fb68 	bl	8010024 <osMessageQueueNew>
 8002954:	4b2f      	ldr	r3, [pc, #188]	; (8002a14 <main+0x7b4>)
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8002956:	4a30      	ldr	r2, [pc, #192]	; (8002a18 <main+0x7b8>)
 8002958:	4621      	mov	r1, r4
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 800295a:	6018      	str	r0, [r3, #0]
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 800295c:	482f      	ldr	r0, [pc, #188]	; (8002a1c <main+0x7bc>)
 800295e:	f00d f947 	bl	800fbf0 <osThreadNew>
 8002962:	4b2f      	ldr	r3, [pc, #188]	; (8002a20 <main+0x7c0>)
	task_state_estHandle = osThreadNew(vTaskStateEst, NULL,
 8002964:	4a2f      	ldr	r2, [pc, #188]	; (8002a24 <main+0x7c4>)
 8002966:	4621      	mov	r1, r4
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8002968:	6018      	str	r0, [r3, #0]
	task_state_estHandle = osThreadNew(vTaskStateEst, NULL,
 800296a:	482f      	ldr	r0, [pc, #188]	; (8002a28 <main+0x7c8>)
 800296c:	f00d f940 	bl	800fbf0 <osThreadNew>
 8002970:	4b2e      	ldr	r3, [pc, #184]	; (8002a2c <main+0x7cc>)
	task_controllerHandle = osThreadNew(vTaskController, NULL,
 8002972:	4a2f      	ldr	r2, [pc, #188]	; (8002a30 <main+0x7d0>)
 8002974:	4621      	mov	r1, r4
	task_state_estHandle = osThreadNew(vTaskStateEst, NULL,
 8002976:	6018      	str	r0, [r3, #0]
	task_controllerHandle = osThreadNew(vTaskController, NULL,
 8002978:	482e      	ldr	r0, [pc, #184]	; (8002a34 <main+0x7d4>)
 800297a:	f00d f939 	bl	800fbf0 <osThreadNew>
 800297e:	4b2e      	ldr	r3, [pc, #184]	; (8002a38 <main+0x7d8>)
	task_sens_readHandle = osThreadNew(vTaskSensRead, NULL,
 8002980:	4a2e      	ldr	r2, [pc, #184]	; (8002a3c <main+0x7dc>)
 8002982:	4621      	mov	r1, r4
	task_controllerHandle = osThreadNew(vTaskController, NULL,
 8002984:	6018      	str	r0, [r3, #0]
	task_sens_readHandle = osThreadNew(vTaskSensRead, NULL,
 8002986:	482e      	ldr	r0, [pc, #184]	; (8002a40 <main+0x7e0>)
 8002988:	f00d f932 	bl	800fbf0 <osThreadNew>
 800298c:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <main+0x7e4>)
	task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL,
 800298e:	4a2e      	ldr	r2, [pc, #184]	; (8002a48 <main+0x7e8>)
 8002990:	4621      	mov	r1, r4
	task_sens_readHandle = osThreadNew(vTaskSensRead, NULL,
 8002992:	6018      	str	r0, [r3, #0]
	task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL,
 8002994:	482d      	ldr	r0, [pc, #180]	; (8002a4c <main+0x7ec>)
 8002996:	f00d f92b 	bl	800fbf0 <osThreadNew>
 800299a:	e069      	b.n	8002a70 <main+0x810>
 800299c:	40007800 	.word	0x40007800
 80029a0:	40011000 	.word	0x40011000
 80029a4:	40004400 	.word	0x40004400
 80029a8:	40004800 	.word	0x40004800
 80029ac:	240105a4 	.word	0x240105a4
 80029b0:	0801501c 	.word	0x0801501c
 80029b4:	240106a8 	.word	0x240106a8
 80029b8:	2401a8c4 	.word	0x2401a8c4
 80029bc:	2400c1a0 	.word	0x2400c1a0
 80029c0:	24010590 	.word	0x24010590
 80029c4:	2401ca88 	.word	0x2401ca88
 80029c8:	240106a4 	.word	0x240106a4
 80029cc:	24010598 	.word	0x24010598
 80029d0:	2400c140 	.word	0x2400c140
 80029d4:	240126ac 	.word	0x240126ac
 80029d8:	24010428 	.word	0x24010428
 80029dc:	2401cb0c 	.word	0x2401cb0c
 80029e0:	2401059c 	.word	0x2401059c
 80029e4:	2400c228 	.word	0x2400c228
 80029e8:	24009cf8 	.word	0x24009cf8
 80029ec:	2400e2bc 	.word	0x2400e2bc
 80029f0:	240146b4 	.word	0x240146b4
 80029f4:	2400bfe4 	.word	0x2400bfe4
 80029f8:	2400c220 	.word	0x2400c220
 80029fc:	24018744 	.word	0x24018744
 8002a00:	24009d88 	.word	0x24009d88
 8002a04:	24009e94 	.word	0x24009e94
 8002a08:	24000234 	.word	0x24000234
 8002a0c:	240146e0 	.word	0x240146e0
 8002a10:	24009bfc 	.word	0x24009bfc
 8002a14:	240188c0 	.word	0x240188c0
 8002a18:	080151c8 	.word	0x080151c8
 8002a1c:	08002141 	.word	0x08002141
 8002a20:	24009c7c 	.word	0x24009c7c
 8002a24:	0801544c 	.word	0x0801544c
 8002a28:	080041f9 	.word	0x080041f9
 8002a2c:	2400e3ac 	.word	0x2400e3ac
 8002a30:	08015374 	.word	0x08015374
 8002a34:	080036e5 	.word	0x080036e5
 8002a38:	2401cb08 	.word	0x2401cb08
 8002a3c:	08015428 	.word	0x08015428
 8002a40:	0800406d 	.word	0x0800406d
 8002a44:	2400c230 	.word	0x2400c230
 8002a48:	08015404 	.word	0x08015404
 8002a4c:	08003cc5 	.word	0x08003cc5
 8002a50:	24009d90 	.word	0x24009d90
 8002a54:	2401048c 	.word	0x2401048c
 8002a58:	2401a924 	.word	0x2401a924
 8002a5c:	24009e9c 	.word	0x24009e9c
 8002a60:	240146b0 	.word	0x240146b0
 8002a64:	2400c21c 	.word	0x2400c21c
 8002a68:	40013400 	.word	0x40013400
 8002a6c:	24010594 	.word	0x24010594
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <main+0x860>)
	task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL,
 8002a72:	4a14      	ldr	r2, [pc, #80]	; (8002ac4 <main+0x864>)
 8002a74:	4621      	mov	r1, r4
	task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL,
 8002a76:	6018      	str	r0, [r3, #0]
	task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL,
 8002a78:	4813      	ldr	r0, [pc, #76]	; (8002ac8 <main+0x868>)
 8002a7a:	f00d f8b9 	bl	800fbf0 <osThreadNew>
 8002a7e:	4b13      	ldr	r3, [pc, #76]	; (8002acc <main+0x86c>)
	task_fsmHandle = osThreadNew(vTaskFsm, NULL, &task_fsm_attributes);
 8002a80:	4a13      	ldr	r2, [pc, #76]	; (8002ad0 <main+0x870>)
 8002a82:	4621      	mov	r1, r4
	task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL,
 8002a84:	6018      	str	r0, [r3, #0]
	task_fsmHandle = osThreadNew(vTaskFsm, NULL, &task_fsm_attributes);
 8002a86:	4813      	ldr	r0, [pc, #76]	; (8002ad4 <main+0x874>)
 8002a88:	f00d f8b2 	bl	800fbf0 <osThreadNew>
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <main+0x878>)
	task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 8002a8e:	4a13      	ldr	r2, [pc, #76]	; (8002adc <main+0x87c>)
 8002a90:	4621      	mov	r1, r4
	task_fsmHandle = osThreadNew(vTaskFsm, NULL, &task_fsm_attributes);
 8002a92:	6018      	str	r0, [r3, #0]
	task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 8002a94:	4812      	ldr	r0, [pc, #72]	; (8002ae0 <main+0x880>)
 8002a96:	f00d f8ab 	bl	800fbf0 <osThreadNew>
 8002a9a:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <main+0x884>)
	task_batteryHandle = osThreadNew(vTaskBattery, NULL,
 8002a9c:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <main+0x888>)
 8002a9e:	4621      	mov	r1, r4
	task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 8002aa0:	6018      	str	r0, [r3, #0]
	task_batteryHandle = osThreadNew(vTaskBattery, NULL,
 8002aa2:	4812      	ldr	r0, [pc, #72]	; (8002aec <main+0x88c>)
 8002aa4:	f00d f8a4 	bl	800fbf0 <osThreadNew>
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <main+0x890>)
	task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 8002aaa:	4a12      	ldr	r2, [pc, #72]	; (8002af4 <main+0x894>)
 8002aac:	4621      	mov	r1, r4
	task_batteryHandle = osThreadNew(vTaskBattery, NULL,
 8002aae:	6018      	str	r0, [r3, #0]
	task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 8002ab0:	4811      	ldr	r0, [pc, #68]	; (8002af8 <main+0x898>)
 8002ab2:	f00d f89d 	bl	800fbf0 <osThreadNew>
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <main+0x89c>)
 8002ab8:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8002aba:	f00d f861 	bl	800fb80 <osKernelStart>
 8002abe:	e7fe      	b.n	8002abe <main+0x85e>
 8002ac0:	24009f84 	.word	0x24009f84
 8002ac4:	080153e0 	.word	0x080153e0
 8002ac8:	08003b29 	.word	0x08003b29
 8002acc:	2400e3a8 	.word	0x2400e3a8
 8002ad0:	08015398 	.word	0x08015398
 8002ad4:	080037e9 	.word	0x080037e9
 8002ad8:	2401cb04 	.word	0x2401cb04
 8002adc:	080153bc 	.word	0x080153bc
 8002ae0:	080038d9 	.word	0x080038d9
 8002ae4:	24009c00 	.word	0x24009c00
 8002ae8:	08015350 	.word	0x08015350
 8002aec:	080034d1 	.word	0x080034d1
 8002af0:	2401ca28 	.word	0x2401ca28
 8002af4:	08015470 	.word	0x08015470
 8002af8:	08004541 	.word	0x08004541
 8002afc:	24018740 	.word	0x24018740

08002b00 <HAL_TIM_PeriodElapsedCallback>:
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8002b00:	6802      	ldr	r2, [r0, #0]
 8002b02:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d101      	bne.n	8002b0c <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 8002b08:	f002 bf5c 	b.w	80059c4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40010000 	.word	0x40010000

08002b14 <Error_Handler>:
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002b14:	4770      	bx	lr
	...

08002b18 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b18:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <HAL_MspInit+0x20>)
{
 8002b1a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002b20:	f042 0202 	orr.w	r2, r2, #2
 8002b24:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	9301      	str	r3, [sp, #4]
 8002b32:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b34:	b002      	add	sp, #8
 8002b36:	4770      	bx	lr
 8002b38:	58024400 	.word	0x58024400

08002b3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b3c:	b570      	push	{r4, r5, r6, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b42:	2214      	movs	r2, #20
 8002b44:	2100      	movs	r1, #0
 8002b46:	a803      	add	r0, sp, #12
 8002b48:	f010 fba1 	bl	801328e <memset>
  if(hadc->Instance==ADC1)
 8002b4c:	6832      	ldr	r2, [r6, #0]
 8002b4e:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <HAL_ADC_MspInit+0xc4>)
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d152      	bne.n	8002bfa <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002b54:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_ADC_MspInit+0xc8>)
    PC1     ------> ADC1_INP11
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = VSENS3V3_Pin|VSENSBAT_Pin|CURRBAT1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b56:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b58:	a903      	add	r1, sp, #12
 8002b5a:	482b      	ldr	r0, [pc, #172]	; (8002c08 <HAL_ADC_MspInit+0xcc>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002b5c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8

    GPIO_InitStruct.Pin = CURRBAT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2500      	movs	r5, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002b62:	f042 0220 	orr.w	r2, r2, #32
 8002b66:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8002b6a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8002b6e:	f002 0220 	and.w	r2, r2, #32
 8002b72:	9200      	str	r2, [sp, #0]
 8002b74:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002b7a:	f042 0204 	orr.w	r2, r2, #4
 8002b7e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002b82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002b86:	f002 0204 	and.w	r2, r2, #4
 8002b8a:	9201      	str	r2, [sp, #4]
 8002b8c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002b92:	f042 0202 	orr.w	r2, r2, #2
 8002b96:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	9302      	str	r3, [sp, #8]
 8002ba4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ba6:	2323      	movs	r3, #35	; 0x23
 8002ba8:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bac:	f004 ff54 	bl	8007a58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CURRBAT2_Pin;
 8002bb0:	2301      	movs	r3, #1
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 8002bb2:	a903      	add	r1, sp, #12
 8002bb4:	4815      	ldr	r0, [pc, #84]	; (8002c0c <HAL_ADC_MspInit+0xd0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bb8:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 8002bbc:	f004 ff4c 	bl	8007a58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002bc0:	4c13      	ldr	r4, [pc, #76]	; (8002c10 <HAL_ADC_MspInit+0xd4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002bc2:	2309      	movs	r3, #9
 8002bc4:	4a13      	ldr	r2, [pc, #76]	; (8002c14 <HAL_ADC_MspInit+0xd8>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002bc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002bca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002bce:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd6:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bde:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002be2:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002be4:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002be8:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002bec:	f003 ff42 	bl	8006a74 <HAL_DMA_Init>
 8002bf0:	b108      	cbz	r0, 8002bf6 <HAL_ADC_MspInit+0xba>
    {
      Error_Handler();
 8002bf2:	f7ff ff8f 	bl	8002b14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002bf6:	64f4      	str	r4, [r6, #76]	; 0x4c
 8002bf8:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bfa:	b008      	add	sp, #32
 8002bfc:	bd70      	pop	{r4, r5, r6, pc}
 8002bfe:	bf00      	nop
 8002c00:	40022000 	.word	0x40022000
 8002c04:	58024400 	.word	0x58024400
 8002c08:	58020800 	.word	0x58020800
 8002c0c:	58020400 	.word	0x58020400
 8002c10:	2401062c 	.word	0x2401062c
 8002c14:	40020470 	.word	0x40020470

08002c18 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002c18:	b570      	push	{r4, r5, r6, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1e:	2214      	movs	r2, #20
 8002c20:	2100      	movs	r1, #0
 8002c22:	a803      	add	r0, sp, #12
 8002c24:	f010 fb33 	bl	801328e <memset>
  if(hsd->Instance==SDMMC1)
 8002c28:	6822      	ldr	r2, [r4, #0]
 8002c2a:	4b26      	ldr	r3, [pc, #152]	; (8002cc4 <HAL_SD_MspInit+0xac>)
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d146      	bne.n	8002cbe <HAL_SD_MspInit+0xa6>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002c30:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <HAL_SD_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002c32:	250c      	movs	r5, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2402      	movs	r4, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002c36:	2603      	movs	r6, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002c38:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c3c:	eb0d 0105 	add.w	r1, sp, r5
 8002c40:	4822      	ldr	r0, [pc, #136]	; (8002ccc <HAL_SD_MspInit+0xb4>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002c42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c46:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002c4a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002c4e:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8002c52:	9200      	str	r2, [sp, #0]
 8002c54:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c5a:	f042 0204 	orr.w	r2, r2, #4
 8002c5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002c62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c66:	f002 0204 	and.w	r2, r2, #4
 8002c6a:	9201      	str	r2, [sp, #4]
 8002c6c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c72:	f042 0208 	orr.w	r2, r2, #8
 8002c76:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	9302      	str	r3, [sp, #8]
 8002c84:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c86:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002c8a:	e9cd 6506 	strd	r6, r5, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c92:	f004 fee1 	bl	8007a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c96:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c98:	eb0d 0105 	add.w	r1, sp, r5
 8002c9c:	480c      	ldr	r0, [pc, #48]	; (8002cd0 <HAL_SD_MspInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002c9e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca6:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002caa:	f004 fed5 	bl	8007a58 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8002cae:	2031      	movs	r0, #49	; 0x31
 8002cb0:	4622      	mov	r2, r4
 8002cb2:	2105      	movs	r1, #5
 8002cb4:	f003 fd0e 	bl	80066d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002cb8:	2031      	movs	r0, #49	; 0x31
 8002cba:	f003 fd3d 	bl	8006738 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002cbe:	b008      	add	sp, #32
 8002cc0:	bd70      	pop	{r4, r5, r6, pc}
 8002cc2:	bf00      	nop
 8002cc4:	52007000 	.word	0x52007000
 8002cc8:	58024400 	.word	0x58024400
 8002ccc:	58020800 	.word	0x58020800
 8002cd0:	58020c00 	.word	0x58020c00

08002cd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cd8:	b08e      	sub	sp, #56	; 0x38
 8002cda:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	2214      	movs	r2, #20
 8002cde:	2100      	movs	r1, #0
 8002ce0:	a809      	add	r0, sp, #36	; 0x24
 8002ce2:	f010 fad4 	bl	801328e <memset>
  if(hspi->Instance==SPI1)
 8002ce6:	682b      	ldr	r3, [r5, #0]
 8002ce8:	4abb      	ldr	r2, [pc, #748]	; (8002fd8 <HAL_SPI_MspInit+0x304>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d155      	bne.n	8002d9a <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cee:	4bbb      	ldr	r3, [pc, #748]	; (8002fdc <HAL_SPI_MspInit+0x308>)
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15 (JTDI)     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cf2:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf4:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cf6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfa:	48b9      	ldr	r0, [pc, #740]	; (8002fe0 <HAL_SPI_MspInit+0x30c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d00:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002d04:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002d08:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d0c:	9200      	str	r2, [sp, #0]
 8002d0e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002d14:	f042 0201 	orr.w	r2, r2, #1
 8002d18:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	23a0      	movs	r3, #160	; 0xa0
 8002d2a:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d34:	f004 fe90 	bl	8007a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3c:	48a8      	ldr	r0, [pc, #672]	; (8002fe0 <HAL_SPI_MspInit+0x30c>)
 8002d3e:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d40:	940d      	str	r4, [sp, #52]	; 0x34

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8002d42:	4ca8      	ldr	r4, [pc, #672]	; (8002fe4 <HAL_SPI_MspInit+0x310>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4a:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4e:	f004 fe83 	bl	8007a58 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002d52:	2325      	movs	r3, #37	; 0x25
 8002d54:	f8df e2c0 	ldr.w	lr, [pc, #704]	; 8003018 <HAL_SPI_MspInit+0x344>
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002d58:	4620      	mov	r0, r4
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d5a:	61a6      	str	r6, [r4, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d5c:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002d5e:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d66:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d6e:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d72:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002d76:	f003 fe7d 	bl	8006a74 <HAL_DMA_Init>
 8002d7a:	b108      	cbz	r0, 8002d80 <HAL_SPI_MspInit+0xac>
    {
      Error_Handler();
 8002d7c:	f7ff feca 	bl	8002b14 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002d80:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002d82:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002d84:	2200      	movs	r2, #0
 8002d86:	2105      	movs	r1, #5
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002d88:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002d8a:	f003 fca3 	bl	80066d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002d8e:	2023      	movs	r0, #35	; 0x23

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002d90:	f003 fcd2 	bl	8006738 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002d94:	b00e      	add	sp, #56	; 0x38
 8002d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(hspi->Instance==SPI2)
 8002d9a:	4a93      	ldr	r2, [pc, #588]	; (8002fe8 <HAL_SPI_MspInit+0x314>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d151      	bne.n	8002e44 <HAL_SPI_MspInit+0x170>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002da0:	4b8e      	ldr	r3, [pc, #568]	; (8002fdc <HAL_SPI_MspInit+0x308>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002da4:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da6:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002da8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dac:	488f      	ldr	r0, [pc, #572]	; (8002fec <HAL_SPI_MspInit+0x318>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002db2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002db6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002dba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002dbe:	9202      	str	r2, [sp, #8]
 8002dc0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002dc6:	f042 0202 	orr.w	r2, r2, #2
 8002dca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002dd2:	940d      	str	r4, [sp, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	9303      	str	r3, [sp, #12]
 8002dda:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de0:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de4:	f004 fe38 	bl	8007a58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002de8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dec:	487f      	ldr	r0, [pc, #508]	; (8002fec <HAL_SPI_MspInit+0x318>)
 8002dee:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002df0:	940d      	str	r4, [sp, #52]	; 0x34
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8002df2:	4c7f      	ldr	r4, [pc, #508]	; (8002ff0 <HAL_SPI_MspInit+0x31c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df4:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df8:	2600      	movs	r6, #0
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e9cd 630b 	strd	r6, r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e00:	f004 fe2a 	bl	8007a58 <HAL_GPIO_Init>
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002e04:	2327      	movs	r3, #39	; 0x27
 8002e06:	f8df c214 	ldr.w	ip, [pc, #532]	; 800301c <HAL_SPI_MspInit+0x348>
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002e0a:	4620      	mov	r0, r4
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e0c:	61a6      	str	r6, [r4, #24]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e0e:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002e10:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e18:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e20:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e24:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002e28:	f003 fe24 	bl	8006a74 <HAL_DMA_Init>
 8002e2c:	b108      	cbz	r0, 8002e32 <HAL_SPI_MspInit+0x15e>
      Error_Handler();
 8002e2e:	f7ff fe71 	bl	8002b14 <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002e32:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002e34:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002e36:	2200      	movs	r2, #0
 8002e38:	2105      	movs	r1, #5
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002e3a:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002e3c:	f003 fc4a 	bl	80066d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002e40:	2024      	movs	r0, #36	; 0x24
 8002e42:	e7a5      	b.n	8002d90 <HAL_SPI_MspInit+0xbc>
  else if(hspi->Instance==SPI3)
 8002e44:	4a6b      	ldr	r2, [pc, #428]	; (8002ff4 <HAL_SPI_MspInit+0x320>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d166      	bne.n	8002f18 <HAL_SPI_MspInit+0x244>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e4a:	4b64      	ldr	r3, [pc, #400]	; (8002fdc <HAL_SPI_MspInit+0x308>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4c:	2402      	movs	r4, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e4e:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e50:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e52:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002e56:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e58:	4861      	ldr	r0, [pc, #388]	; (8002fe0 <HAL_SPI_MspInit+0x30c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002e5a:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e62:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002e66:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002e6a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002e6e:	9204      	str	r2, [sp, #16]
 8002e70:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e72:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002e7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002e82:	f002 0201 	and.w	r2, r2, #1
 8002e86:	9205      	str	r2, [sp, #20]
 8002e88:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002e8e:	f042 0202 	orr.w	r2, r2, #2
 8002e92:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e9a:	970d      	str	r7, [sp, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	9306      	str	r3, [sp, #24]
 8002ea2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2310      	movs	r3, #16
 8002ea6:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eaa:	f004 fdd5 	bl	8007a58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002eae:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb0:	a909      	add	r1, sp, #36	; 0x24
 8002eb2:	484e      	ldr	r0, [pc, #312]	; (8002fec <HAL_SPI_MspInit+0x318>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb4:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002eb8:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002eba:	e9cd 680b 	strd	r6, r8, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002ebe:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec0:	f004 fdca 	bl	8007a58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ec4:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec6:	4849      	ldr	r0, [pc, #292]	; (8002fec <HAL_SPI_MspInit+0x318>)
 8002ec8:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002eca:	970d      	str	r7, [sp, #52]	; 0x34
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8002ecc:	4f4a      	ldr	r7, [pc, #296]	; (8002ff8 <HAL_SPI_MspInit+0x324>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002ed2:	e9cd 680b 	strd	r6, r8, [sp, #44]	; 0x2c
    hdma_spi3_rx.Instance = DMA1_Stream2;
 8002ed6:	4c49      	ldr	r4, [pc, #292]	; (8002ffc <HAL_SPI_MspInit+0x328>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed8:	f004 fdbe 	bl	8007a58 <HAL_GPIO_Init>
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8002edc:	233d      	movs	r3, #61	; 0x3d
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002ede:	4620      	mov	r0, r4
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ee0:	61a6      	str	r6, [r4, #24]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ee2:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8002ee4:	e9c4 7300 	strd	r7, r3, [r4]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eec:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8002ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef4:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ef8:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002efc:	f003 fdba 	bl	8006a74 <HAL_DMA_Init>
 8002f00:	b108      	cbz	r0, 8002f06 <HAL_SPI_MspInit+0x232>
      Error_Handler();
 8002f02:	f7ff fe07 	bl	8002b14 <Error_Handler>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002f06:	2033      	movs	r0, #51	; 0x33
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8002f08:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2105      	movs	r1, #5
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8002f0e:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002f10:	f003 fbe0 	bl	80066d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002f14:	2033      	movs	r0, #51	; 0x33
 8002f16:	e73b      	b.n	8002d90 <HAL_SPI_MspInit+0xbc>
  else if(hspi->Instance==SPI4)
 8002f18:	4a39      	ldr	r2, [pc, #228]	; (8003000 <HAL_SPI_MspInit+0x32c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	f47f af3a 	bne.w	8002d94 <HAL_SPI_MspInit+0xc0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002f20:	4b2e      	ldr	r3, [pc, #184]	; (8002fdc <HAL_SPI_MspInit+0x308>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	2074      	movs	r0, #116	; 0x74
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f24:	a909      	add	r1, sp, #36	; 0x24
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8002f26:	4c37      	ldr	r4, [pc, #220]	; (8003004 <HAL_SPI_MspInit+0x330>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002f28:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8002f2c:	4e36      	ldr	r6, [pc, #216]	; (8003008 <HAL_SPI_MspInit+0x334>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002f2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f32:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002f36:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002f3a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f3e:	9207      	str	r2, [sp, #28]
 8002f40:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002f46:	f042 0210 	orr.w	r2, r2, #16
 8002f4a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	9308      	str	r3, [sp, #32]
 8002f58:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002f60:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f62:	482a      	ldr	r0, [pc, #168]	; (800300c <HAL_SPI_MspInit+0x338>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002f64:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f66:	f004 fd77 	bl	8007a58 <HAL_GPIO_Init>
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8002f6a:	2353      	movs	r3, #83	; 0x53
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002f70:	4620      	mov	r0, r4
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8002f72:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f76:	2300      	movs	r3, #0
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f78:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f7c:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8002f80:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f84:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002f88:	f003 fd74 	bl	8006a74 <HAL_DMA_Init>
 8002f8c:	b108      	cbz	r0, 8002f92 <HAL_SPI_MspInit+0x2be>
      Error_Handler();
 8002f8e:	f7ff fdc1 	bl	8002b14 <Error_Handler>
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8002f92:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <HAL_SPI_MspInit+0x33c>)
 8002f94:	2354      	movs	r3, #84	; 0x54
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8002f96:	67ec      	str	r4, [r5, #124]	; 0x7c
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f98:	2140      	movs	r1, #64	; 0x40
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8002f9a:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8002f9c:	4c1d      	ldr	r4, [pc, #116]	; (8003014 <HAL_SPI_MspInit+0x340>)
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8002f9e:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fa2:	2300      	movs	r3, #0
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002fa8:	4620      	mov	r0, r4
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002faa:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fae:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002fb2:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fb6:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002fba:	f003 fd5b 	bl	8006a74 <HAL_DMA_Init>
 8002fbe:	b108      	cbz	r0, 8002fc4 <HAL_SPI_MspInit+0x2f0>
      Error_Handler();
 8002fc0:	f7ff fda8 	bl	8002b14 <Error_Handler>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2054      	movs	r0, #84	; 0x54
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002fc8:	67ac      	str	r4, [r5, #120]	; 0x78
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002fca:	4611      	mov	r1, r2
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002fcc:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002fce:	f003 fb81 	bl	80066d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002fd2:	2054      	movs	r0, #84	; 0x54
 8002fd4:	e6dc      	b.n	8002d90 <HAL_SPI_MspInit+0xbc>
 8002fd6:	bf00      	nop
 8002fd8:	40013000 	.word	0x40013000
 8002fdc:	58024400 	.word	0x58024400
 8002fe0:	58020000 	.word	0x58020000
 8002fe4:	2401a9b0 	.word	0x2401a9b0
 8002fe8:	40003800 	.word	0x40003800
 8002fec:	58020400 	.word	0x58020400
 8002ff0:	2400c048 	.word	0x2400c048
 8002ff4:	40003c00 	.word	0x40003c00
 8002ff8:	40020040 	.word	0x40020040
 8002ffc:	2401ca8c 	.word	0x2401ca8c
 8003000:	40013400 	.word	0x40013400
 8003004:	2400c1a4 	.word	0x2400c1a4
 8003008:	40020410 	.word	0x40020410
 800300c:	58021000 	.word	0x58021000
 8003010:	40020428 	.word	0x40020428
 8003014:	24010518 	.word	0x24010518
 8003018:	40020010 	.word	0x40020010
 800301c:	40020028 	.word	0x40020028

08003020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003020:	b530      	push	{r4, r5, lr}
 8003022:	b091      	sub	sp, #68	; 0x44
 8003024:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003026:	2214      	movs	r2, #20
 8003028:	2100      	movs	r1, #0
 800302a:	a80b      	add	r0, sp, #44	; 0x2c
 800302c:	f010 f92f 	bl	801328e <memset>
  if(huart->Instance==UART4)
 8003030:	682b      	ldr	r3, [r5, #0]
 8003032:	4a78      	ldr	r2, [pc, #480]	; (8003214 <HAL_UART_MspInit+0x1f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d13d      	bne.n	80030b4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003038:	4b77      	ldr	r3, [pc, #476]	; (8003218 <HAL_UART_MspInit+0x1f8>)
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303a:	f04f 0c03 	mov.w	ip, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303e:	a90b      	add	r1, sp, #44	; 0x2c
 8003040:	4876      	ldr	r0, [pc, #472]	; (800321c <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8003042:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8003046:	4c76      	ldr	r4, [pc, #472]	; (8003220 <HAL_UART_MspInit+0x200>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8003048:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800304c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003050:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003054:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003058:	9201      	str	r2, [sp, #4]
 800305a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003060:	f042 0201 	orr.w	r2, r2, #1
 8003064:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	9302      	str	r3, [sp, #8]
 8003072:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003074:	2302      	movs	r3, #2
 8003076:	e9cd c30b 	strd	ip, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800307a:	2308      	movs	r3, #8
 800307c:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800307e:	f004 fceb 	bl	8007a58 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8003082:	4b68      	ldr	r3, [pc, #416]	; (8003224 <HAL_UART_MspInit+0x204>)
 8003084:	6023      	str	r3, [r4, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8003086:	233f      	movs	r3, #63	; 0x3f
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003088:	6063      	str	r3, [r4, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800308a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800308e:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003090:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003092:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003096:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800309a:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800309e:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80030a2:	f003 fce7 	bl	8006a74 <HAL_DMA_Init>
 80030a6:	b108      	cbz	r0, 80030ac <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 80030a8:	f7ff fd34 	bl	8002b14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80030ac:	67ac      	str	r4, [r5, #120]	; 0x78
 80030ae:	63a5      	str	r5, [r4, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030b0:	b011      	add	sp, #68	; 0x44
 80030b2:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==UART7)
 80030b4:	4a5c      	ldr	r2, [pc, #368]	; (8003228 <HAL_UART_MspInit+0x208>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d128      	bne.n	800310c <HAL_UART_MspInit+0xec>
    __HAL_RCC_UART7_CLK_ENABLE();
 80030ba:	4b57      	ldr	r3, [pc, #348]	; (8003218 <HAL_UART_MspInit+0x1f8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	f44f 74c0 	mov.w	r4, #384	; 0x180
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030c0:	a90b      	add	r1, sp, #44	; 0x2c
 80030c2:	485a      	ldr	r0, [pc, #360]	; (800322c <HAL_UART_MspInit+0x20c>)
    __HAL_RCC_UART7_CLK_ENABLE();
 80030c4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80030c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030cc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80030d0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80030d4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030d8:	9203      	str	r2, [sp, #12]
 80030da:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80030e0:	f042 0210 	orr.w	r2, r2, #16
 80030e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80030e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	9304      	str	r3, [sp, #16]
 80030f2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f4:	2302      	movs	r3, #2
 80030f6:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80030fa:	2307      	movs	r3, #7
    hdma_uart7_rx.Instance = DMA1_Stream4;
 80030fc:	4c4c      	ldr	r4, [pc, #304]	; (8003230 <HAL_UART_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80030fe:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003100:	f004 fcaa 	bl	8007a58 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream4;
 8003104:	4b4b      	ldr	r3, [pc, #300]	; (8003234 <HAL_UART_MspInit+0x214>)
 8003106:	6023      	str	r3, [r4, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8003108:	234f      	movs	r3, #79	; 0x4f
 800310a:	e7bd      	b.n	8003088 <HAL_UART_MspInit+0x68>
  else if(huart->Instance==USART1)
 800310c:	4a4a      	ldr	r2, [pc, #296]	; (8003238 <HAL_UART_MspInit+0x218>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d128      	bne.n	8003164 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003112:	4b41      	ldr	r3, [pc, #260]	; (8003218 <HAL_UART_MspInit+0x1f8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003114:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003118:	a90b      	add	r1, sp, #44	; 0x2c
    hdma_usart1_rx.Instance = DMA1_Stream5;
 800311a:	4c48      	ldr	r4, [pc, #288]	; (800323c <HAL_UART_MspInit+0x21c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800311c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003120:	f042 0210 	orr.w	r2, r2, #16
 8003124:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003128:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800312c:	f002 0210 	and.w	r2, r2, #16
 8003130:	9205      	str	r2, [sp, #20]
 8003132:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003134:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003138:	f042 0201 	orr.w	r2, r2, #1
 800313c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	9306      	str	r3, [sp, #24]
 800314a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003152:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003154:	4831      	ldr	r0, [pc, #196]	; (800321c <HAL_UART_MspInit+0x1fc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003156:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003158:	f004 fc7e 	bl	8007a58 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream5;
 800315c:	4b38      	ldr	r3, [pc, #224]	; (8003240 <HAL_UART_MspInit+0x220>)
 800315e:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003160:	2329      	movs	r3, #41	; 0x29
 8003162:	e791      	b.n	8003088 <HAL_UART_MspInit+0x68>
  else if(huart->Instance==USART2)
 8003164:	4a37      	ldr	r2, [pc, #220]	; (8003244 <HAL_UART_MspInit+0x224>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d127      	bne.n	80031ba <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800316a:	4b2b      	ldr	r3, [pc, #172]	; (8003218 <HAL_UART_MspInit+0x1f8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	210c      	movs	r1, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316e:	482b      	ldr	r0, [pc, #172]	; (800321c <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003170:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart2_rx.Instance = DMA1_Stream6;
 8003174:	4c34      	ldr	r4, [pc, #208]	; (8003248 <HAL_UART_MspInit+0x228>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003176:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800317a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800317e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003182:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003186:	9207      	str	r2, [sp, #28]
 8003188:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	9308      	str	r3, [sp, #32]
 80031a0:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a2:	2302      	movs	r3, #2
 80031a4:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031a8:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031aa:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031ac:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ae:	f004 fc53 	bl	8007a58 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream6;
 80031b2:	4b26      	ldr	r3, [pc, #152]	; (800324c <HAL_UART_MspInit+0x22c>)
 80031b4:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80031b6:	232b      	movs	r3, #43	; 0x2b
 80031b8:	e766      	b.n	8003088 <HAL_UART_MspInit+0x68>
  else if(huart->Instance==USART3)
 80031ba:	4a25      	ldr	r2, [pc, #148]	; (8003250 <HAL_UART_MspInit+0x230>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	f47f af77 	bne.w	80030b0 <HAL_UART_MspInit+0x90>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <HAL_UART_MspInit+0x1f8>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031c4:	a90b      	add	r1, sp, #44	; 0x2c
 80031c6:	4823      	ldr	r0, [pc, #140]	; (8003254 <HAL_UART_MspInit+0x234>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80031c8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart3_rx.Instance = DMA1_Stream7;
 80031cc:	4c22      	ldr	r4, [pc, #136]	; (8003258 <HAL_UART_MspInit+0x238>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80031ce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80031d2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80031d6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80031da:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80031de:	9209      	str	r2, [sp, #36]	; 0x24
 80031e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80031e6:	f042 0208 	orr.w	r2, r2, #8
 80031ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ee:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	930a      	str	r3, [sp, #40]	; 0x28
 80031fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fe:	2302      	movs	r3, #2
 8003200:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003204:	2307      	movs	r3, #7
 8003206:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003208:	f004 fc26 	bl	8007a58 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream7;
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <HAL_UART_MspInit+0x23c>)
 800320e:	6023      	str	r3, [r4, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003210:	232d      	movs	r3, #45	; 0x2d
 8003212:	e739      	b.n	8003088 <HAL_UART_MspInit+0x68>
 8003214:	40004c00 	.word	0x40004c00
 8003218:	58024400 	.word	0x58024400
 800321c:	58020000 	.word	0x58020000
 8003220:	24009c04 	.word	0x24009c04
 8003224:	40020058 	.word	0x40020058
 8003228:	40007800 	.word	0x40007800
 800322c:	58021000 	.word	0x58021000
 8003230:	2400e330 	.word	0x2400e330
 8003234:	40020070 	.word	0x40020070
 8003238:	40011000 	.word	0x40011000
 800323c:	2400e3b0 	.word	0x2400e3b0
 8003240:	40020088 	.word	0x40020088
 8003244:	40004400 	.word	0x40004400
 8003248:	24009c80 	.word	0x24009c80
 800324c:	400200a0 	.word	0x400200a0
 8003250:	40004800 	.word	0x40004800
 8003254:	58020c00 	.word	0x58020c00
 8003258:	24009e1c 	.word	0x24009e1c
 800325c:	400200b8 	.word	0x400200b8

08003260 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003260:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8003262:	4601      	mov	r1, r0
{
 8003264:	b08a      	sub	sp, #40	; 0x28
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8003266:	2200      	movs	r2, #0
 8003268:	2019      	movs	r0, #25
 800326a:	f003 fa33 	bl	80066d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800326e:	2019      	movs	r0, #25
 8003270:	f003 fa62 	bl	8006738 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003274:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <HAL_InitTick+0x70>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003276:	4669      	mov	r1, sp
 8003278:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 800327a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800327e:	4c15      	ldr	r4, [pc, #84]	; (80032d4 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	9301      	str	r3, [sp, #4]
 8003292:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003294:	f005 fe96 	bl	8008fc4 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003298:	f005 fe82 	bl	8008fa0 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <HAL_InitTick+0x78>)
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800329e:	0040      	lsls	r0, r0, #1
  htim1.Instance = TIM1;
 80032a0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80032a2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80032a6:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <HAL_InitTick+0x7c>)
 80032aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80032ae:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80032b0:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 80032b2:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80032b4:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 80032b6:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032b8:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80032ba:	f008 fa59 	bl	800b770 <HAL_TIM_Base_Init>
 80032be:	b920      	cbnz	r0, 80032ca <HAL_InitTick+0x6a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80032c0:	4620      	mov	r0, r4
 80032c2:	f008 f91d 	bl	800b500 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 80032c6:	b00a      	add	sp, #40	; 0x28
 80032c8:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80032ca:	2001      	movs	r0, #1
 80032cc:	e7fb      	b.n	80032c6 <HAL_InitTick+0x66>
 80032ce:	bf00      	nop
 80032d0:	58024400 	.word	0x58024400
 80032d4:	2401cb14 	.word	0x2401cb14
 80032d8:	40010000 	.word	0x40010000
 80032dc:	000f4240 	.word	0x000f4240

080032e0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032e0:	4770      	bx	lr

080032e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032e2:	e7fe      	b.n	80032e2 <HardFault_Handler>

080032e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032e4:	e7fe      	b.n	80032e4 <MemManage_Handler>

080032e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032e6:	e7fe      	b.n	80032e6 <BusFault_Handler>

080032e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032e8:	e7fe      	b.n	80032e8 <UsageFault_Handler>

080032ea <DebugMon_Handler>:
 80032ea:	4770      	bx	lr

080032ec <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80032ec:	4801      	ldr	r0, [pc, #4]	; (80032f4 <DMA1_Stream0_IRQHandler+0x8>)
 80032ee:	f004 b909 	b.w	8007504 <HAL_DMA_IRQHandler>
 80032f2:	bf00      	nop
 80032f4:	2401a9b0 	.word	0x2401a9b0

080032f8 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80032f8:	4801      	ldr	r0, [pc, #4]	; (8003300 <DMA1_Stream1_IRQHandler+0x8>)
 80032fa:	f004 b903 	b.w	8007504 <HAL_DMA_IRQHandler>
 80032fe:	bf00      	nop
 8003300:	2400c048 	.word	0x2400c048

08003304 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8003304:	4801      	ldr	r0, [pc, #4]	; (800330c <DMA1_Stream2_IRQHandler+0x8>)
 8003306:	f004 b8fd 	b.w	8007504 <HAL_DMA_IRQHandler>
 800330a:	bf00      	nop
 800330c:	2401ca8c 	.word	0x2401ca8c

08003310 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003310:	4801      	ldr	r0, [pc, #4]	; (8003318 <DMA1_Stream3_IRQHandler+0x8>)
 8003312:	f004 b8f7 	b.w	8007504 <HAL_DMA_IRQHandler>
 8003316:	bf00      	nop
 8003318:	24009c04 	.word	0x24009c04

0800331c <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800331c:	4801      	ldr	r0, [pc, #4]	; (8003324 <DMA1_Stream4_IRQHandler+0x8>)
 800331e:	f004 b8f1 	b.w	8007504 <HAL_DMA_IRQHandler>
 8003322:	bf00      	nop
 8003324:	2400e330 	.word	0x2400e330

08003328 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003328:	4801      	ldr	r0, [pc, #4]	; (8003330 <DMA1_Stream5_IRQHandler+0x8>)
 800332a:	f004 b8eb 	b.w	8007504 <HAL_DMA_IRQHandler>
 800332e:	bf00      	nop
 8003330:	2400e3b0 	.word	0x2400e3b0

08003334 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003334:	4801      	ldr	r0, [pc, #4]	; (800333c <DMA1_Stream6_IRQHandler+0x8>)
 8003336:	f004 b8e5 	b.w	8007504 <HAL_DMA_IRQHandler>
 800333a:	bf00      	nop
 800333c:	24009c80 	.word	0x24009c80

08003340 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003340:	4801      	ldr	r0, [pc, #4]	; (8003348 <TIM1_UP_IRQHandler+0x8>)
 8003342:	f008 b8ff 	b.w	800b544 <HAL_TIM_IRQHandler>
 8003346:	bf00      	nop
 8003348:	2401cb14 	.word	0x2401cb14

0800334c <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800334c:	4801      	ldr	r0, [pc, #4]	; (8003354 <SPI1_IRQHandler+0x8>)
 800334e:	f007 bfad 	b.w	800b2ac <HAL_SPI_IRQHandler>
 8003352:	bf00      	nop
 8003354:	24018838 	.word	0x24018838

08003358 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003358:	4801      	ldr	r0, [pc, #4]	; (8003360 <SPI2_IRQHandler+0x8>)
 800335a:	f007 bfa7 	b.w	800b2ac <HAL_SPI_IRQHandler>
 800335e:	bf00      	nop
 8003360:	24009d00 	.word	0x24009d00

08003364 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003364:	4801      	ldr	r0, [pc, #4]	; (800336c <DMA1_Stream7_IRQHandler+0x8>)
 8003366:	f004 b8cd 	b.w	8007504 <HAL_DMA_IRQHandler>
 800336a:	bf00      	nop
 800336c:	24009e1c 	.word	0x24009e1c

08003370 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003370:	4801      	ldr	r0, [pc, #4]	; (8003378 <SDMMC1_IRQHandler+0x8>)
 8003372:	f007 bba3 	b.w	800aabc <HAL_SD_IRQHandler>
 8003376:	bf00      	nop
 8003378:	2400c0c0 	.word	0x2400c0c0

0800337c <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800337c:	4801      	ldr	r0, [pc, #4]	; (8003384 <SPI3_IRQHandler+0x8>)
 800337e:	f007 bf95 	b.w	800b2ac <HAL_SPI_IRQHandler>
 8003382:	bf00      	nop
 8003384:	2400e234 	.word	0x2400e234

08003388 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8003388:	4801      	ldr	r0, [pc, #4]	; (8003390 <DMA2_Stream0_IRQHandler+0x8>)
 800338a:	f004 b8bb 	b.w	8007504 <HAL_DMA_IRQHandler>
 800338e:	bf00      	nop
 8003390:	2400c1a4 	.word	0x2400c1a4

08003394 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8003394:	4801      	ldr	r0, [pc, #4]	; (800339c <DMA2_Stream1_IRQHandler+0x8>)
 8003396:	f004 b8b5 	b.w	8007504 <HAL_DMA_IRQHandler>
 800339a:	bf00      	nop
 800339c:	24010518 	.word	0x24010518

080033a0 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033a0:	4801      	ldr	r0, [pc, #4]	; (80033a8 <DMA2_Stream4_IRQHandler+0x8>)
 80033a2:	f004 b8af 	b.w	8007504 <HAL_DMA_IRQHandler>
 80033a6:	bf00      	nop
 80033a8:	2401062c 	.word	0x2401062c

080033ac <SPI4_IRQHandler>:
void SPI4_IRQHandler(void)
{
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80033ac:	4801      	ldr	r0, [pc, #4]	; (80033b4 <SPI4_IRQHandler+0x8>)
 80033ae:	f007 bf7d 	b.w	800b2ac <HAL_SPI_IRQHandler>
 80033b2:	bf00      	nop
 80033b4:	240105a4 	.word	0x240105a4

080033b8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80033b8:	4801      	ldr	r0, [pc, #4]	; (80033c0 <OTG_FS_IRQHandler+0x8>)
 80033ba:	f004 bcf3 	b.w	8007da4 <HAL_PCD_IRQHandler>
 80033be:	bf00      	nop
 80033c0:	24020610 	.word	0x24020610

080033c4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <_sbrk+0x30>)
{
 80033c6:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80033c8:	6819      	ldr	r1, [r3, #0]
{
 80033ca:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80033cc:	b909      	cbnz	r1, 80033d2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80033ce:	490a      	ldr	r1, [pc, #40]	; (80033f8 <_sbrk+0x34>)
 80033d0:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033d2:	6818      	ldr	r0, [r3, #0]
 80033d4:	4909      	ldr	r1, [pc, #36]	; (80033fc <_sbrk+0x38>)
 80033d6:	4c0a      	ldr	r4, [pc, #40]	; (8003400 <_sbrk+0x3c>)
 80033d8:	4402      	add	r2, r0
 80033da:	1b09      	subs	r1, r1, r4
 80033dc:	428a      	cmp	r2, r1
 80033de:	d906      	bls.n	80033ee <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80033e0:	f00f ff10 	bl	8013204 <__errno>
 80033e4:	230c      	movs	r3, #12
 80033e6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80033e8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80033ec:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80033ee:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80033f0:	e7fc      	b.n	80033ec <_sbrk+0x28>
 80033f2:	bf00      	nop
 80033f4:	240002d0 	.word	0x240002d0
 80033f8:	24020a20 	.word	0x24020a20
 80033fc:	24080000 	.word	0x24080000
 8003400:	00000f00 	.word	0x00000f00

08003404 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003404:	4a28      	ldr	r2, [pc, #160]	; (80034a8 <SystemInit+0xa4>)
 8003406:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800340a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800340e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003412:	4a26      	ldr	r2, [pc, #152]	; (80034ac <SystemInit+0xa8>)
 8003414:	6813      	ldr	r3, [r2, #0]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	2b06      	cmp	r3, #6
 800341c:	d805      	bhi.n	800342a <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800341e:	6813      	ldr	r3, [r2, #0]
 8003420:	f023 030f 	bic.w	r3, r3, #15
 8003424:	f043 0307 	orr.w	r3, r3, #7
 8003428:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800342a:	4b21      	ldr	r3, [pc, #132]	; (80034b0 <SystemInit+0xac>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003438:	4a1e      	ldr	r2, [pc, #120]	; (80034b4 <SystemInit+0xb0>)
 800343a:	6819      	ldr	r1, [r3, #0]
 800343c:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800343e:	491b      	ldr	r1, [pc, #108]	; (80034ac <SystemInit+0xa8>)
  RCC->CR &= 0xEAF6ED7FU;
 8003440:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003442:	680a      	ldr	r2, [r1, #0]
 8003444:	f002 020f 	and.w	r2, r2, #15
 8003448:	2a07      	cmp	r2, #7
 800344a:	d905      	bls.n	8003458 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800344c:	680a      	ldr	r2, [r1, #0]
 800344e:	f022 020f 	bic.w	r2, r2, #15
 8003452:	f042 0207 	orr.w	r2, r2, #7
 8003456:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003458:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800345a:	4917      	ldr	r1, [pc, #92]	; (80034b8 <SystemInit+0xb4>)
  RCC->D1CFGR = 0x00000000;
 800345c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800345e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8003460:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8003462:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003464:	4915      	ldr	r1, [pc, #84]	; (80034bc <SystemInit+0xb8>)
 8003466:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003468:	4915      	ldr	r1, [pc, #84]	; (80034c0 <SystemInit+0xbc>)
 800346a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800346c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800346e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003470:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003472:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003474:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003476:	6819      	ldr	r1, [r3, #0]
 8003478:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800347c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800347e:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003480:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <SystemInit+0xc0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	0c1b      	lsrs	r3, r3, #16
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800348c:	d202      	bcs.n	8003494 <SystemInit+0x90>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <SystemInit+0xc4>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003494:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <SystemInit+0xc8>)
 8003496:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800349a:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800349c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034a0:	4b01      	ldr	r3, [pc, #4]	; (80034a8 <SystemInit+0xa4>)
 80034a2:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	e000ed00 	.word	0xe000ed00
 80034ac:	52002000 	.word	0x52002000
 80034b0:	58024400 	.word	0x58024400
 80034b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80034b8:	02020200 	.word	0x02020200
 80034bc:	01ff0000 	.word	0x01ff0000
 80034c0:	01010280 	.word	0x01010280
 80034c4:	5c001000 	.word	0x5c001000
 80034c8:	51008108 	.word	0x51008108
 80034cc:	52004000 	.word	0x52004000

080034d0 <vTaskBattery>:
#include "tasks/task_battery.h"

float get_temp (uint16_t adc_value);


void vTaskBattery(void *argument) {
 80034d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034d4:	ed2d 8b10 	vpush	{d8-d15}

	/* Initialise Variables */
	double mah;
	double curr = 0;
	double supp = 0;
	double bat = 0;
 80034d8:	ed9f db6d 	vldr	d13, [pc, #436]	; 8003690 <vTaskBattery+0x1c0>
	for (;;) {
		tick_count += tick_update;

		double current2 = ((double)adc_value[0] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR2
		float supply_voltage = adc_value[1] * (2.5/4096) * 2; // 3V3
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 80034dc:	ed9f ab6e 	vldr	d10, [pc, #440]	; 8003698 <vTaskBattery+0x1c8>
void vTaskBattery(void *argument) {
 80034e0:	b08a      	sub	sp, #40	; 0x28
	battery_data_t battery_data = { 0 };
 80034e2:	2400      	movs	r4, #0
	tick_update = osKernelGetTickFreq() / BATTERY_SAMPLE_RATE;
 80034e4:	2732      	movs	r7, #50	; 0x32
	double supp = 0;
 80034e6:	eeb0 cb4d 	vmov.f64	d12, d13
	battery_data_t battery_data = { 0 };
 80034ea:	f8ad 4010 	strh.w	r4, [sp, #16]
	double curr = 0;
 80034ee:	eeb0 eb4d 	vmov.f64	d14, d13
 80034f2:	eeb0 8b4a 	vmov.f64	d8, d10
	battery_data_t battery_data = { 0 };
 80034f6:	e9cd 4402 	strd	r4, r4, [sp, #8]
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 80034fa:	ed9f bb69 	vldr	d11, [pc, #420]	; 80036a0 <vTaskBattery+0x1d0>
	tick_count = osKernelGetTickCount();
 80034fe:	f00c fb5f 	bl	800fbc0 <osKernelGetTickCount>
 8003502:	4606      	mov	r6, r0
	tick_update = osKernelGetTickFreq() / BATTERY_SAMPLE_RATE;
 8003504:	f00c fb70 	bl	800fbe8 <osKernelGetTickFreq>
 8003508:	fbb0 f7f7 	udiv	r7, r0, r7
	HAL_ADC_Stop_DMA(&hadc1);
 800350c:	4870      	ldr	r0, [pc, #448]	; (80036d0 <vTaskBattery+0x200>)
 800350e:	f002 fe46 	bl	800619e <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 8003512:	2205      	movs	r2, #5
 8003514:	a905      	add	r1, sp, #20
 8003516:	486e      	ldr	r0, [pc, #440]	; (80036d0 <vTaskBattery+0x200>)
 8003518:	f002 fd7e 	bl	8006018 <HAL_ADC_Start_DMA>
	osDelay(500);
 800351c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003520:	f00c fbbc 	bl	800fc9c <osDelay>
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 8003524:	eddd 7a07 	vldr	s15, [sp, #28]
		tick_count += tick_update;
 8003528:	443e      	add	r6, r7
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 800352a:	eeb8 fb67 	vcvt.f64.u32	d15, s15
		float supply_voltage = adc_value[1] * (2.5/4096) * 2; // 3V3
 800352e:	e9dd 8505 	ldrd	r8, r5, [sp, #20]
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 8003532:	ee2f fb0a 	vmul.f64	d15, d15, d10
		double current1 = ((double)adc_value[3] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR1
		get_temp(adc_value[4]); // temp

		if ((adc_value[0] | adc_value[1]) == 0){
 8003536:	ea58 0305 	orrs.w	r3, r8, r5
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 800353a:	ee2f fb0b 	vmul.f64	d15, d15, d11
 800353e:	eeb7 fbcf 	vcvt.f32.f64	s30, d15
		double current1 = ((double)adc_value[3] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR1
 8003542:	eddd fa08 	vldr	s31, [sp, #32]
		if ((adc_value[0] | adc_value[1]) == 0){
 8003546:	d107      	bne.n	8003558 <vTaskBattery+0x88>
			HAL_ADC_Stop_DMA(&hadc1);
 8003548:	4861      	ldr	r0, [pc, #388]	; (80036d0 <vTaskBattery+0x200>)
 800354a:	f002 fe28 	bl	800619e <HAL_ADC_Stop_DMA>
			HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 800354e:	2205      	movs	r2, #5
 8003550:	a905      	add	r1, sp, #20
 8003552:	485f      	ldr	r0, [pc, #380]	; (80036d0 <vTaskBattery+0x200>)
 8003554:	f002 fd60 	bl	8006018 <HAL_ADC_Start_DMA>
		}
		// Filter adc values
		if (counter < 50) {
 8003558:	2c31      	cmp	r4, #49	; 0x31
 800355a:	dc2e      	bgt.n	80035ba <vTaskBattery+0xea>
		double current2 = ((double)adc_value[0] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR2
 800355c:	ee07 8a90 	vmov	s15, r8
			counter++;
 8003560:	3401      	adds	r4, #1
		double current2 = ((double)adc_value[0] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR2
 8003562:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80036a8 <vTaskBattery+0x1d8>
 8003566:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800356a:	eeb0 4b46 	vmov.f64	d4, d6
 800356e:	ed9f 3b50 	vldr	d3, [pc, #320]	; 80036b0 <vTaskBattery+0x1e0>
 8003572:	eea7 4b08 	vfma.f64	d4, d7, d8
		float supply_voltage = adc_value[1] * (2.5/4096) * 2; // 3V3
 8003576:	ee07 5a90 	vmov	s15, r5
 800357a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800357e:	ee27 7b08 	vmul.f64	d7, d7, d8
		double current2 = ((double)adc_value[0] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR2
 8003582:	ee84 5b03 	vdiv.f64	d5, d4, d3
		double current1 = ((double)adc_value[3] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR1
 8003586:	eeb8 4b6f 	vcvt.f64.u32	d4, s31
		float supply_voltage = adc_value[1] * (2.5/4096) * 2; // 3V3
 800358a:	ee37 7b07 	vadd.f64	d7, d7, d7
			curr += current1 + current2;
			supp += supply_voltage;
			bat += battery_voltage;
 800358e:	eeb7 facf 	vcvt.f64.f32	d15, s30
		double current1 = ((double)adc_value[3] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR1
 8003592:	eea4 6b08 	vfma.f64	d6, d4, d8
		float supply_voltage = adc_value[1] * (2.5/4096) * 2; // 3V3
 8003596:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			bat += battery_voltage;
 800359a:	ee3d db0f 	vadd.f64	d13, d13, d15
			supp += supply_voltage;
 800359e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
		double current1 = ((double)adc_value[3] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR1
 80035a2:	ee86 4b03 	vdiv.f64	d4, d6, d3
			supp += supply_voltage;
 80035a6:	ee3c cb07 	vadd.f64	d12, d12, d7
			curr += current1 + current2;
 80035aa:	ee35 5b04 	vadd.f64	d5, d5, d4
 80035ae:	ee3e eb05 	vadd.f64	d14, d14, d5
				ReleaseMutex(&battery_mutex);
			}
		}

		/* Sleep */
		osDelayUntil(tick_count);
 80035b2:	4630      	mov	r0, r6
 80035b4:	f00c fb8c 	bl	800fcd0 <osDelayUntil>
	for (;;) {
 80035b8:	e7b4      	b.n	8003524 <vTaskBattery+0x54>
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 80035ba:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 80036b8 <vTaskBattery+0x1e8>
			battery_data.current = (uint16_t)(curr*1000)/50;
 80035be:	2232      	movs	r2, #50	; 0x32
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 80035c0:	ee8e 7b06 	vdiv.f64	d7, d14, d6
			battery_data.power = (curr*1000)/50 * (battery_voltage/50);
 80035c4:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 80036c0 <vTaskBattery+0x1f0>
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 80035c8:	ee39 9b07 	vadd.f64	d9, d9, d7
			battery_data.consumption = (uint16_t)mah;
 80035cc:	eefc 7bc9 	vcvt.u32.f64	s15, d9
 80035d0:	ee17 3a90 	vmov	r3, s15
			battery_data.current = (uint16_t)(curr*1000)/50;
 80035d4:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 80036c8 <vTaskBattery+0x1f8>
			battery_data.consumption = (uint16_t)mah;
 80035d8:	b29c      	uxth	r4, r3
			battery_data.current = (uint16_t)(curr*1000)/50;
 80035da:	ee2e eb07 	vmul.f64	d14, d14, d7
			battery_data.consumption = (uint16_t)mah;
 80035de:	f8ad 400e 	strh.w	r4, [sp, #14]
			battery_data.current = (uint16_t)(curr*1000)/50;
 80035e2:	eefc 7bce 	vcvt.u32.f64	s15, d14
 80035e6:	ee17 3a90 	vmov	r3, s15
			battery_data.power = (curr*1000)/50 * (battery_voltage/50);
 80035ea:	ee8e 7b06 	vdiv.f64	d7, d14, d6
 80035ee:	eddf 6a39 	vldr	s13, [pc, #228]	; 80036d4 <vTaskBattery+0x204>
			battery_data.current = (uint16_t)(curr*1000)/50;
 80035f2:	b29b      	uxth	r3, r3
			battery_data.power = (curr*1000)/50 * (battery_voltage/50);
 80035f4:	ee8f 6a26 	vdiv.f32	s12, s30, s13
			battery_data.current = (uint16_t)(curr*1000)/50;
 80035f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80035fc:	f8ad 300c 	strh.w	r3, [sp, #12]
			battery_data.power = (curr*1000)/50 * (battery_voltage/50);
 8003600:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003604:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003608:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 800360c:	ee17 2a10 	vmov	r2, s14
			battery_data.supply = (uint16_t)(supp * 20);
 8003610:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
			battery_data.power = (curr*1000)/50 * (battery_voltage/50);
 8003614:	b290      	uxth	r0, r2
			battery_data.supply = (uint16_t)(supp * 20);
 8003616:	ee2c cb07 	vmul.f64	d12, d12, d7
			battery_data.power = (curr*1000)/50 * (battery_voltage/50);
 800361a:	f8ad 0010 	strh.w	r0, [sp, #16]
			battery_data.battery = (uint16_t)(bat * 20);
 800361e:	ee2d db07 	vmul.f64	d13, d13, d7
			battery_data.supply = (uint16_t)(supp * 20);
 8003622:	eebc cbcc 	vcvt.u32.f64	s24, d12
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8003626:	e9cd 4000 	strd	r4, r0, [sp]
			battery_data.battery = (uint16_t)(bat * 20);
 800362a:	eebc dbcd 	vcvt.u32.f64	s26, d13
			battery_data.supply = (uint16_t)(supp * 20);
 800362e:	ee1c 2a10 	vmov	r2, s24
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8003632:	4829      	ldr	r0, [pc, #164]	; (80036d8 <vTaskBattery+0x208>)
			battery_data.supply = (uint16_t)(supp * 20);
 8003634:	b291      	uxth	r1, r2
			battery_data.battery = (uint16_t)(bat * 20);
 8003636:	ee1d 2a10 	vmov	r2, s26
			battery_data.supply = (uint16_t)(supp * 20);
 800363a:	f8ad 1008 	strh.w	r1, [sp, #8]
			battery_data.battery = (uint16_t)(bat * 20);
 800363e:	b292      	uxth	r2, r2
 8003640:	f8ad 200a 	strh.w	r2, [sp, #10]
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8003644:	f7fe fd54 	bl	80020f0 <UsbPrint>
			logSensor(osKernelGetTickCount(), 1, BATTERY, &battery_data);
 8003648:	f00c faba 	bl	800fbc0 <osKernelGetTickCount>
 800364c:	ab02      	add	r3, sp, #8
 800364e:	2204      	movs	r2, #4
 8003650:	2101      	movs	r1, #1
 8003652:	f7fe fc23 	bl	8001e9c <logSensor>
			if(AcquireMutex(&battery_mutex) == osOK ){
 8003656:	4821      	ldr	r0, [pc, #132]	; (80036dc <vTaskBattery+0x20c>)
 8003658:	f7fe fbc1 	bl	8001dde <AcquireMutex>
 800365c:	4604      	mov	r4, r0
 800365e:	b998      	cbnz	r0, 8003688 <vTaskBattery+0x1b8>
				global_battery_data.battery = battery_data.battery;
 8003660:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <vTaskBattery+0x210>)
 8003662:	f8bd 200a 	ldrh.w	r2, [sp, #10]
				ReleaseMutex(&battery_mutex);
 8003666:	481d      	ldr	r0, [pc, #116]	; (80036dc <vTaskBattery+0x20c>)
				global_battery_data.battery = battery_data.battery;
 8003668:	801a      	strh	r2, [r3, #0]
				global_battery_data.consumption = battery_data.consumption;
 800366a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800366e:	809a      	strh	r2, [r3, #4]
				global_battery_data.current = battery_data.current;
 8003670:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8003674:	805a      	strh	r2, [r3, #2]
				ReleaseMutex(&battery_mutex);
 8003676:	f7fe fbbd 	bl	8001df4 <ReleaseMutex>
			bat = 0;
 800367a:	ed9f db05 	vldr	d13, [pc, #20]	; 8003690 <vTaskBattery+0x1c0>
			supp = 0;
 800367e:	eeb0 cb4d 	vmov.f64	d12, d13
			curr = 0;
 8003682:	eeb0 eb4d 	vmov.f64	d14, d13
 8003686:	e794      	b.n	80035b2 <vTaskBattery+0xe2>
			counter = 0;
 8003688:	2400      	movs	r4, #0
 800368a:	e7f6      	b.n	800367a <vTaskBattery+0x1aa>
 800368c:	f3af 8000 	nop.w
	...
 800369c:	3f440000 	.word	0x3f440000
 80036a0:	cccccccd 	.word	0xcccccccd
 80036a4:	4014cccc 	.word	0x4014cccc
 80036a8:	be0ded28 	.word	0xbe0ded28
 80036ac:	bfd69930 	.word	0xbfd69930
 80036b0:	4189374c 	.word	0x4189374c
 80036b4:	3fd0e560 	.word	0x3fd0e560
 80036b8:	00000000 	.word	0x00000000
 80036bc:	40668000 	.word	0x40668000
 80036c0:	00000000 	.word	0x00000000
 80036c4:	40490000 	.word	0x40490000
 80036c8:	00000000 	.word	0x00000000
 80036cc:	408f4000 	.word	0x408f4000
 80036d0:	2400e2cc 	.word	0x2400e2cc
 80036d4:	42480000 	.word	0x42480000
 80036d8:	080154a4 	.word	0x080154a4
 80036dc:	24009d88 	.word	0x24009d88
 80036e0:	2400e2c4 	.word	0x2400e2c4

080036e4 <vTaskController>:
#include "tasks/task_controller.h"

/* Abbreviation 'aw' is used to described everything related to the antiwindup */


void vTaskController(void *argument) {
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	ed2d 8b02 	vpush	{d8}
 80036ea:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
	/* For periodic update */
	uint32_t tick_count, tick_update;

	state_est_data_t state_est_data_local;
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 80036ee:	2100      	movs	r1, #0

    /* Initialize the control_data struct */
    control_data_t control_data = { 0 };
 80036f0:	f44f 6284 	mov.w	r2, #1056	; 0x420

	osDelay(1100);

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 80036f4:	2564      	movs	r5, #100	; 0x64
    control_data_t control_data = { 0 };
 80036f6:	a812      	add	r0, sp, #72	; 0x48
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 80036f8:	9102      	str	r1, [sp, #8]
		tick_count += tick_update;

		/* Update Sensor Fusion Variables */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_local, sizeof(state_est_data_local));

		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 80036fa:	ed9f 8a34 	vldr	s16, [pc, #208]	; 80037cc <vTaskController+0xe8>
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_local, sizeof(state_est_data_local));
 80036fe:	4e34      	ldr	r6, [pc, #208]	; (80037d0 <vTaskController+0xec>)
 8003700:	eef0 8a48 	vmov.f32	s17, s16
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 8003704:	e9cd 1100 	strd	r1, r1, [sp]
    control_data_t control_data = { 0 };
 8003708:	f00f fdc1 	bl	801328e <memset>
    control_data_init(&control_data);
 800370c:	a812      	add	r0, sp, #72	; 0x48
 800370e:	f7fd fb2d 	bl	8000d6c <control_data_init>
	osDelay(1100);
 8003712:	f240 404c 	movw	r0, #1100	; 0x44c
 8003716:	f00c fac1 	bl	800fc9c <osDelay>
	tick_count = osKernelGetTickCount();
 800371a:	f00c fa51 	bl	800fbc0 <osKernelGetTickCount>
 800371e:	4604      	mov	r4, r0
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8003720:	f00c fa62 	bl	800fbe8 <osKernelGetTickFreq>
 8003724:	fbb0 f5f5 	udiv	r5, r0, r5
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_local, sizeof(state_est_data_local));
 8003728:	233c      	movs	r3, #60	; 0x3c
 800372a:	aa03      	add	r2, sp, #12
 800372c:	4928      	ldr	r1, [pc, #160]	; (80037d0 <vTaskController+0xec>)
		tick_count += tick_update;
 800372e:	442c      	add	r4, r5
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_local, sizeof(state_est_data_local));
 8003730:	4828      	ldr	r0, [pc, #160]	; (80037d4 <vTaskController+0xf0>)
 8003732:	f7fe fb62 	bl	8001dfa <ReadMutex>
		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 8003736:	edd6 7a02 	vldr	s15, [r6, #8]
		control_data.sf_velocity = ((float)state_est_data_global.velocity_world[2]) / 1000;

		/* Update flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &current_flight_phase_detection, sizeof(state_est_data_local));
 800373a:	233c      	movs	r3, #60	; 0x3c
 800373c:	466a      	mov	r2, sp
		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 800373e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &current_flight_phase_detection, sizeof(state_est_data_local));
 8003742:	4925      	ldr	r1, [pc, #148]	; (80037d8 <vTaskController+0xf4>)
 8003744:	4825      	ldr	r0, [pc, #148]	; (80037dc <vTaskController+0xf8>)
		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 8003746:	ee87 7a88 	vdiv.f32	s14, s15, s16
		control_data.sf_velocity = ((float)state_est_data_global.velocity_world[2]) / 1000;
 800374a:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
 800374e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 8003752:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
		control_data.sf_velocity = ((float)state_est_data_global.velocity_world[2]) / 1000;
 8003756:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800375a:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &current_flight_phase_detection, sizeof(state_est_data_local));
 800375e:	f7fe fb4c 	bl	8001dfa <ReadMutex>

		/** MAKE SURE THE RIGHT CONTROLLER IS ACTIVE IS ACTIVE!!!!! **/
        if(LQR_ACTIVE) {
            compute_control_input(&control_data, &current_flight_phase_detection);
 8003762:	a812      	add	r0, sp, #72	; 0x48
 8003764:	4669      	mov	r1, sp
 8003766:	f7fd fbb7 	bl	8000ed8 <compute_control_input>
        else {
            compute_test_control_input(&control_data);
        }

		/* Write Control Input into Global Variable */
		if(AcquireMutex(&controller_mutex) == osOK){
 800376a:	481d      	ldr	r0, [pc, #116]	; (80037e0 <vTaskController+0xfc>)
 800376c:	f7fe fb37 	bl	8001dde <AcquireMutex>
 8003770:	b958      	cbnz	r0, 800378a <vTaskController+0xa6>
			controller_output_global = (int32_t)(control_data.control_input * 1000);
 8003772:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 8003776:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <vTaskController+0x100>)
 8003778:	ee67 7a88 	vmul.f32	s15, s15, s16
			ReleaseMutex(&controller_mutex);
 800377c:	4818      	ldr	r0, [pc, #96]	; (80037e0 <vTaskController+0xfc>)
			controller_output_global = (int32_t)(control_data.control_input * 1000);
 800377e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003782:	edc3 7a00 	vstr	s15, [r3]
			ReleaseMutex(&controller_mutex);
 8003786:	f7fe fb35 	bl	8001df4 <ReleaseMutex>
		}


		/* Log to SD Card */
		logControllerOutput(osKernelGetTickCount(),
 800378a:	f00c fa19 	bl	800fbc0 <osKernelGetTickCount>
				(int32_t)(control_data.control_input * 1000),
				(int32_t)(control_data.reference_error * 1000),
				(int32_t)(control_data.integrated_error * 1000));
 800378e:	eddd 6a14 	vldr	s13, [sp, #80]	; 0x50
				(int32_t)(control_data.reference_error * 1000),
 8003792:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
				(int32_t)(control_data.control_input * 1000),
 8003796:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
				(int32_t)(control_data.integrated_error * 1000));
 800379a:	ee66 6aa8 	vmul.f32	s13, s13, s17
				(int32_t)(control_data.reference_error * 1000),
 800379e:	ee27 7a28 	vmul.f32	s14, s14, s17
				(int32_t)(control_data.control_input * 1000),
 80037a2:	ee67 7aa8 	vmul.f32	s15, s15, s17
		logControllerOutput(osKernelGetTickCount(),
 80037a6:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80037aa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80037ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037b2:	ee16 3a90 	vmov	r3, s13
 80037b6:	ee17 2a10 	vmov	r2, s14
 80037ba:	ee17 1a90 	vmov	r1, s15
 80037be:	f7fe fc4f 	bl	8002060 <logControllerOutput>


		/* Sleep */
		osDelayUntil(tick_count);
 80037c2:	4620      	mov	r0, r4
 80037c4:	f00c fa84 	bl	800fcd0 <osDelayUntil>
		tick_count += tick_update;
 80037c8:	e7ae      	b.n	8003728 <vTaskController+0x44>
 80037ca:	bf00      	nop
 80037cc:	447a0000 	.word	0x447a0000
 80037d0:	24000294 	.word	0x24000294
 80037d4:	240146b4 	.word	0x240146b4
 80037d8:	24000234 	.word	0x24000234
 80037dc:	24009cf8 	.word	0x24009cf8
 80037e0:	2400e2bc 	.word	0x2400e2bc
 80037e4:	24000220 	.word	0x24000220

080037e8 <vTaskFsm>:
 */

#include "tasks/task_fsm.h"


void vTaskFsm(void *argument) {
 80037e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037ec:	b09d      	sub	sp, #116	; 0x74
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 80037ee:	2500      	movs	r5, #0
	osDelay(1000);


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 80037f0:	2664      	movs	r6, #100	; 0x64
	while (1) {
		/* Tick Update */
		tick_count += tick_update;

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 80037f2:	4f31      	ldr	r7, [pc, #196]	; (80038b8 <vTaskFsm+0xd0>)
	flight_phase_detection_t flight_phase_detection = { 0 };
 80037f4:	ac02      	add	r4, sp, #8
 80037f6:	9502      	str	r5, [sp, #8]
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 80037f8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80038d0 <vTaskFsm+0xe8>
	reset_flight_phase_detection(&flight_phase_detection);
 80037fc:	4620      	mov	r0, r4
			telemetry_command = IDLE_COMMAND;
		}


		/* Update Local State Estimation Data */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm, sizeof(state_est_data_global));
 80037fe:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80038d4 <vTaskFsm+0xec>
	flight_phase_detection_t flight_phase_detection = { 0 };
 8003802:	e9c4 5501 	strd	r5, r5, [r4, #4]
	reset_flight_phase_detection(&flight_phase_detection);
 8003806:	f7fd fd7d 	bl	8001304 <reset_flight_phase_detection>
	state_est_data_t state_est_data_fsm = { 0 };
 800380a:	4629      	mov	r1, r5
 800380c:	223c      	movs	r2, #60	; 0x3c
 800380e:	a80d      	add	r0, sp, #52	; 0x34
 8003810:	f00f fd3d 	bl	801328e <memset>
	init_env(&dummy_env);
 8003814:	a809      	add	r0, sp, #36	; 0x24
 8003816:	f7fd fc1f 	bl	8001058 <init_env>
	init_env(&environment);
 800381a:	a805      	add	r0, sp, #20
 800381c:	f7fd fc1c 	bl	8001058 <init_env>
	command_e telemetry_command = IDLE_COMMAND;
 8003820:	239b      	movs	r3, #155	; 0x9b
	osDelay(1000);
 8003822:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	command_e telemetry_command = IDLE_COMMAND;
 8003826:	f88d 3007 	strb.w	r3, [sp, #7]
	osDelay(1000);
 800382a:	f00c fa37 	bl	800fc9c <osDelay>
	tick_count = osKernelGetTickCount();
 800382e:	f00c f9c7 	bl	800fbc0 <osKernelGetTickCount>
 8003832:	4605      	mov	r5, r0
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 8003834:	f00c f9d8 	bl	800fbe8 <osKernelGetTickFreq>
 8003838:	fbb0 f6f6 	udiv	r6, r0, r6
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 800383c:	2301      	movs	r3, #1
 800383e:	f10d 0207 	add.w	r2, sp, #7
 8003842:	4639      	mov	r1, r7
 8003844:	4640      	mov	r0, r8
 8003846:	f7fe fad8 	bl	8001dfa <ReadMutex>
		if(telemetry_command == CALIBRATE_SENSORS && flight_phase_detection.flight_phase == IDLE){
 800384a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		tick_count += tick_update;
 800384e:	4435      	add	r5, r6
		if(telemetry_command == CALIBRATE_SENSORS && flight_phase_detection.flight_phase == IDLE){
 8003850:	2b49      	cmp	r3, #73	; 0x49
 8003852:	d109      	bne.n	8003868 <vTaskFsm+0x80>
 8003854:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d105      	bne.n	8003868 <vTaskFsm+0x80>
			reset_flight_phase_detection(&flight_phase_detection);
 800385c:	4620      	mov	r0, r4
 800385e:	f7fd fd51 	bl	8001304 <reset_flight_phase_detection>
			telemetry_command = IDLE_COMMAND;
 8003862:	239b      	movs	r3, #155	; 0x9b
 8003864:	f88d 3007 	strb.w	r3, [sp, #7]
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm, sizeof(state_est_data_global));
 8003868:	233c      	movs	r3, #60	; 0x3c
 800386a:	aa0d      	add	r2, sp, #52	; 0x34
 800386c:	4649      	mov	r1, r9
 800386e:	4813      	ldr	r0, [pc, #76]	; (80038bc <vTaskFsm+0xd4>)
 8003870:	f7fe fac3 	bl	8001dfa <ReadMutex>


		/* Update Local Environment Data */
		ReadMutex(&env_mutex, &global_env, &environment, sizeof(global_env));
 8003874:	2310      	movs	r3, #16
 8003876:	aa05      	add	r2, sp, #20
 8003878:	4911      	ldr	r1, [pc, #68]	; (80038c0 <vTaskFsm+0xd8>)
 800387a:	4812      	ldr	r0, [pc, #72]	; (80038c4 <vTaskFsm+0xdc>)
 800387c:	f7fe fabd 	bl	8001dfa <ReadMutex>

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 8003880:	4620      	mov	r0, r4
 8003882:	aa05      	add	r2, sp, #20
 8003884:	a90d      	add	r1, sp, #52	; 0x34
 8003886:	f7fd fcb3 	bl	80011f0 <detect_flight_phase>


		/* Write updated flight Phase detection */
		if(AcquireMutex(&fsm_mutex) == osOK){
 800388a:	480f      	ldr	r0, [pc, #60]	; (80038c8 <vTaskFsm+0xe0>)
 800388c:	f7fe faa7 	bl	8001dde <AcquireMutex>
 8003890:	b938      	cbnz	r0, 80038a2 <vTaskFsm+0xba>
			global_flight_phase_detection = flight_phase_detection;
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <vTaskFsm+0xe4>)
 8003894:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003898:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			ReleaseMutex(&fsm_mutex);
 800389c:	480a      	ldr	r0, [pc, #40]	; (80038c8 <vTaskFsm+0xe0>)
 800389e:	f7fe faa9 	bl	8001df4 <ReleaseMutex>
		}

		logRocketState(osKernelGetTickCount(), flight_phase_detection);
 80038a2:	f00c f98d 	bl	800fbc0 <osKernelGetTickCount>
 80038a6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80038aa:	f7fe fb89 	bl	8001fc0 <logRocketState>

		/* Sleep */
		osDelayUntil(tick_count);
 80038ae:	4628      	mov	r0, r5
 80038b0:	f00c fa0e 	bl	800fcd0 <osDelayUntil>
		tick_count += tick_update;
 80038b4:	e7c2      	b.n	800383c <vTaskFsm+0x54>
 80038b6:	bf00      	nop
 80038b8:	240146e0 	.word	0x240146e0
 80038bc:	240146b4 	.word	0x240146b4
 80038c0:	24000224 	.word	0x24000224
 80038c4:	2400c228 	.word	0x2400c228
 80038c8:	24009cf8 	.word	0x24009cf8
 80038cc:	24000234 	.word	0x24000234
 80038d0:	2400c220 	.word	0x2400c220
 80038d4:	24000294 	.word	0x24000294

080038d8 <vTaskGps>:
 *      Author: Luca Jost
 */

#include "tasks/task_gps.h"

void vTaskGps(void *argument) {
 80038d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038dc:	b0b3      	sub	sp, #204	; 0xcc

	UBLOX GPS1 = { 0, &huart1 };
 80038de:	222c      	movs	r2, #44	; 0x2c
 80038e0:	2100      	movs	r1, #0
	UBLOX GPS2 = { 1, &huart2 };
 80038e2:	2401      	movs	r4, #1
	UBLOX GPS1 = { 0, &huart1 };
 80038e4:	a811      	add	r0, sp, #68	; 0x44
	UBLOX GPS3 = { 2, &huart3 };

	int timeout_counter1 = 0;
	int timeout_counter2 = 0;
	int timeout_counter3 = 0;
 80038e6:	2500      	movs	r5, #0
	UBLOX GPS1 = { 0, &huart1 };
 80038e8:	f00f fcd1 	bl	801328e <memset>
 80038ec:	4b80      	ldr	r3, [pc, #512]	; (8003af0 <vTaskGps+0x218>)
	UBLOX GPS2 = { 1, &huart2 };
 80038ee:	222c      	movs	r2, #44	; 0x2c
 80038f0:	2100      	movs	r1, #0
 80038f2:	a81c      	add	r0, sp, #112	; 0x70
	UBLOX GPS1 = { 0, &huart1 };
 80038f4:	9312      	str	r3, [sp, #72]	; 0x48
	UBLOX GPS2 = { 1, &huart2 };
 80038f6:	f00f fcca 	bl	801328e <memset>
 80038fa:	4b7e      	ldr	r3, [pc, #504]	; (8003af4 <vTaskGps+0x21c>)
	UBLOX GPS3 = { 2, &huart3 };
 80038fc:	222c      	movs	r2, #44	; 0x2c
 80038fe:	2100      	movs	r1, #0
 8003900:	a827      	add	r0, sp, #156	; 0x9c
	UBLOX GPS2 = { 1, &huart2 };
 8003902:	931d      	str	r3, [sp, #116]	; 0x74
 8003904:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
	UBLOX GPS3 = { 2, &huart3 };
 8003908:	f00f fcc1 	bl	801328e <memset>
 800390c:	2302      	movs	r3, #2
	int timeout_counter2 = 0;
 800390e:	462f      	mov	r7, r5
	int timeout_counter1 = 0;
 8003910:	462e      	mov	r6, r5
				gps_reset(&GPS3);
				timeout_counter3 = 0;
			}
		}

		UsbPrint(
 8003912:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 8003b04 <vTaskGps+0x22c>
	UBLOX GPS3 = { 2, &huart3 };
 8003916:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
 800391a:	4b77      	ldr	r3, [pc, #476]	; (8003af8 <vTaskGps+0x220>)
				"[GPS1] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
				GPS1.data.hour, GPS1.data.minute, GPS1.data.second,
				GPS1.data.lat_deg, GPS1.data.lat_decimal, GPS1.data.lon_deg,
				GPS1.data.lon_decimal, GPS1.data.satellite, GPS1.data.altitude);

		UsbPrint(
 800391c:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8003b08 <vTaskGps+0x230>
	UBLOX GPS3 = { 2, &huart3 };
 8003920:	9328      	str	r3, [sp, #160]	; 0xa0
	tick_count = osKernelGetTickCount();
 8003922:	f00c f94d 	bl	800fbc0 <osKernelGetTickCount>
 8003926:	4680      	mov	r8, r0
	tick_update = osKernelGetTickFreq() / GPS_SAMPLE_RATE;
 8003928:	f00c f95e 	bl	800fbe8 <osKernelGetTickFreq>
 800392c:	fa20 f904 	lsr.w	r9, r0, r4
	osDelay(600);
 8003930:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003934:	f00c f9b2 	bl	800fc9c <osDelay>
	gps_dma_init(&GPS1);
 8003938:	a811      	add	r0, sp, #68	; 0x44
 800393a:	f7fd f991 	bl	8000c60 <gps_dma_init>
	gps_dma_init(&GPS2);
 800393e:	a81c      	add	r0, sp, #112	; 0x70
 8003940:	f7fd f98e 	bl	8000c60 <gps_dma_init>
	gps_dma_init(&GPS3);
 8003944:	a827      	add	r0, sp, #156	; 0x9c
 8003946:	f7fd f98b 	bl	8000c60 <gps_dma_init>
		if (gps_read_sensor(&GPS1)) {
 800394a:	a811      	add	r0, sp, #68	; 0x44
		tick_count += tick_update;
 800394c:	44c8      	add	r8, r9
		if (gps_read_sensor(&GPS1)) {
 800394e:	f7fd f99d 	bl	8000c8c <gps_read_sensor>
 8003952:	b930      	cbnz	r0, 8003962 <vTaskGps+0x8a>
			timeout_counter1++;
 8003954:	3601      	adds	r6, #1
			if (timeout_counter1 == 10) {
 8003956:	2e0a      	cmp	r6, #10
 8003958:	d104      	bne.n	8003964 <vTaskGps+0x8c>
 800395a:	9007      	str	r0, [sp, #28]
				gps_reset(&GPS1);
 800395c:	a811      	add	r0, sp, #68	; 0x44
 800395e:	f7fd f9bb 	bl	8000cd8 <gps_reset>
			timeout_counter1 = 0;
 8003962:	2600      	movs	r6, #0
		if (gps_read_sensor(&GPS2)) {
 8003964:	a81c      	add	r0, sp, #112	; 0x70
 8003966:	f7fd f991 	bl	8000c8c <gps_read_sensor>
 800396a:	b930      	cbnz	r0, 800397a <vTaskGps+0xa2>
			timeout_counter2++;
 800396c:	3701      	adds	r7, #1
			if (timeout_counter2 == 10) {
 800396e:	2f0a      	cmp	r7, #10
 8003970:	d104      	bne.n	800397c <vTaskGps+0xa4>
 8003972:	9007      	str	r0, [sp, #28]
				gps_reset(&GPS2);
 8003974:	a81c      	add	r0, sp, #112	; 0x70
 8003976:	f7fd f9af 	bl	8000cd8 <gps_reset>
			timeout_counter2 = 0;
 800397a:	2700      	movs	r7, #0
		if (gps_read_sensor(&GPS3)) {
 800397c:	a827      	add	r0, sp, #156	; 0x9c
 800397e:	f7fd f985 	bl	8000c8c <gps_read_sensor>
 8003982:	b930      	cbnz	r0, 8003992 <vTaskGps+0xba>
			timeout_counter3++;
 8003984:	3501      	adds	r5, #1
			if (timeout_counter3 == 10) {
 8003986:	2d0a      	cmp	r5, #10
 8003988:	d104      	bne.n	8003994 <vTaskGps+0xbc>
 800398a:	9007      	str	r0, [sp, #28]
				gps_reset(&GPS3);
 800398c:	a827      	add	r0, sp, #156	; 0x9c
 800398e:	f7fd f9a3 	bl	8000cd8 <gps_reset>
			timeout_counter3 = 0;
 8003992:	2500      	movs	r5, #0
		UsbPrint(
 8003994:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8003998:	4650      	mov	r0, sl
 800399a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800399c:	9305      	str	r3, [sp, #20]
 800399e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80039a2:	9304      	str	r3, [sp, #16]
 80039a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80039a6:	9303      	str	r3, [sp, #12]
 80039a8:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80039ac:	9302      	str	r3, [sp, #8]
 80039ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80039bc:	f7fe fb98 	bl	80020f0 <UsbPrint>
		UsbPrint(
 80039c0:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 80039c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80039c6:	4658      	mov	r0, fp
 80039c8:	9305      	str	r3, [sp, #20]
 80039ca:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80039ce:	9304      	str	r3, [sp, #16]
 80039d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80039d2:	9303      	str	r3, [sp, #12]
 80039d4:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
 80039d8:	9302      	str	r3, [sp, #8]
 80039da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	f89d 3085 	ldrb.w	r3, [sp, #133]	; 0x85
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 80039e8:	f7fe fb82 	bl	80020f0 <UsbPrint>
				"[GPS2] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d Alt: %d\n",
				GPS2.data.hour, GPS2.data.minute, GPS2.data.second,
				GPS2.data.lat_deg, GPS2.data.lat_decimal, GPS2.data.lon_deg,
				GPS2.data.lon_decimal, GPS2.data.satellite, GPS2.data.altitude);

		UsbPrint(
 80039ec:	f8bd 30c4 	ldrh.w	r3, [sp, #196]	; 0xc4
 80039f0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80039f2:	9305      	str	r3, [sp, #20]
 80039f4:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 80039f8:	4840      	ldr	r0, [pc, #256]	; (8003afc <vTaskGps+0x224>)
 80039fa:	9304      	str	r3, [sp, #16]
 80039fc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80039fe:	9303      	str	r3, [sp, #12]
 8003a00:	f89d 30b8 	ldrb.w	r3, [sp, #184]	; 0xb8
 8003a04:	9302      	str	r3, [sp, #8]
 8003a06:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	f89d 30b1 	ldrb.w	r3, [sp, #177]	; 0xb1
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8003a14:	f7fe fb6c 	bl	80020f0 <UsbPrint>
				GPS3.data.hour, GPS3.data.minute, GPS3.data.second,
				GPS3.data.lat_deg, GPS3.data.lat_decimal, GPS3.data.lon_deg,
				GPS3.data.lon_decimal, GPS3.data.satellite, GPS3.data.altitude);

		/* Write GPS to Log */
		logSensor(osKernelGetTickCount(), 1, GPS, &GPS1.data);
 8003a18:	f00c f8d2 	bl	800fbc0 <osKernelGetTickCount>
 8003a1c:	ab13      	add	r3, sp, #76	; 0x4c
 8003a1e:	2203      	movs	r2, #3
 8003a20:	2101      	movs	r1, #1
 8003a22:	f7fe fa3b 	bl	8001e9c <logSensor>
		logSensor(osKernelGetTickCount(), 2, GPS, &GPS2.data);
 8003a26:	f00c f8cb 	bl	800fbc0 <osKernelGetTickCount>
 8003a2a:	ab1e      	add	r3, sp, #120	; 0x78
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	2102      	movs	r1, #2
 8003a30:	f7fe fa34 	bl	8001e9c <logSensor>
		logSensor(osKernelGetTickCount(), 3, GPS, &GPS3.data);
 8003a34:	f00c f8c4 	bl	800fbc0 <osKernelGetTickCount>
 8003a38:	2203      	movs	r2, #3
 8003a3a:	ab29      	add	r3, sp, #164	; 0xa4
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	f7fe fa2d 	bl	8001e9c <logSensor>

		/* get best possible GPS for Telemetry */

		if (GPS1.data.satellite >= GPS2.data.satellite) {
 8003a42:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8003a46:	f89d 1084 	ldrb.w	r1, [sp, #132]	; 0x84
 8003a4a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8003a4e:	428a      	cmp	r2, r1
 8003a50:	d30f      	bcc.n	8003a72 <vTaskGps+0x19a>
			if (GPS1.data.satellite >= GPS3.data.satellite) {
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d913      	bls.n	8003a7e <vTaskGps+0x1a6>
//			gps_telemetry.lat_decimal = GPS2.data.lat_decimal;
//			gps_telemetry.lon_deg = GPS2.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS2.data.lon_decimal;
//			gps_telemetry.satellite = GPS2.data.satellite;
		} else {
			gps_telemetry = GPS3.data;
 8003a56:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
 8003a5a:	ac08      	add	r4, sp, #32
 8003a5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a68:	f8dc 3000 	ldr.w	r3, [ip]
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	2403      	movs	r4, #3
 8003a70:	e012      	b.n	8003a98 <vTaskGps+0x1c0>
		} else if (GPS2.data.satellite >= GPS3.data.satellite) {
 8003a72:	4299      	cmp	r1, r3
 8003a74:	d22d      	bcs.n	8003ad2 <vTaskGps+0x1fa>
		} else if (GPS3.data.satellite >= GPS1.data.satellite) {
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d9ed      	bls.n	8003a56 <vTaskGps+0x17e>
		if (choose_GPS == 1) {
 8003a7a:	2c01      	cmp	r4, #1
 8003a7c:	d127      	bne.n	8003ace <vTaskGps+0x1f6>
			gps_telemetry = GPS1.data;
 8003a7e:	ac13      	add	r4, sp, #76	; 0x4c
 8003a80:	f10d 0c20 	add.w	ip, sp, #32
 8003a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	2401      	movs	r4, #1
 8003a94:	f8cc 3000 	str.w	r3, [ip]
//			gps_telemetry.lon_deg = GPS3.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS3.data.lon_decimal;
//			gps_telemetry.satellite = GPS3.data.satellite;
		}

		if (AcquireMutex(&gps_mutex) == osOK) {
 8003a98:	4819      	ldr	r0, [pc, #100]	; (8003b00 <vTaskGps+0x228>)
 8003a9a:	f7fe f9a0 	bl	8001dde <AcquireMutex>
 8003a9e:	b990      	cbnz	r0, 8003ac6 <vTaskGps+0x1ee>
			globalGPS = gps_telemetry;
 8003aa0:	f10d 0e20 	add.w	lr, sp, #32
 8003aa4:	f8df c064 	ldr.w	ip, [pc, #100]	; 8003b0c <vTaskGps+0x234>
 8003aa8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003aac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003ab0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003ab4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003ab8:	f8de 3000 	ldr.w	r3, [lr]
			ReleaseMutex(&gps_mutex);
 8003abc:	4810      	ldr	r0, [pc, #64]	; (8003b00 <vTaskGps+0x228>)
			globalGPS = gps_telemetry;
 8003abe:	f8cc 3000 	str.w	r3, [ip]
			ReleaseMutex(&gps_mutex);
 8003ac2:	f7fe f997 	bl	8001df4 <ReleaseMutex>
		}
		/* Sleep */
		osDelayUntil(tick_count);
 8003ac6:	4640      	mov	r0, r8
 8003ac8:	f00c f902 	bl	800fcd0 <osDelayUntil>
		tick_count += tick_update;
 8003acc:	e73d      	b.n	800394a <vTaskGps+0x72>
		} else if (choose_GPS == 2) {
 8003ace:	2c02      	cmp	r4, #2
 8003ad0:	d1c1      	bne.n	8003a56 <vTaskGps+0x17e>
			gps_telemetry = GPS2.data;
 8003ad2:	ac1e      	add	r4, sp, #120	; 0x78
 8003ad4:	f10d 0c20 	add.w	ip, sp, #32
 8003ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ada:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ae0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	2402      	movs	r4, #2
 8003ae8:	f8cc 3000 	str.w	r3, [ip]
 8003aec:	e7d4      	b.n	8003a98 <vTaskGps+0x1c0>
 8003aee:	bf00      	nop
 8003af0:	2401048c 	.word	0x2401048c
 8003af4:	2401a924 	.word	0x2401a924
 8003af8:	24009e9c 	.word	0x24009e9c
 8003afc:	08015575 	.word	0x08015575
 8003b00:	24018744 	.word	0x24018744
 8003b04:	080154f4 	.word	0x080154f4
 8003b08:	08015535 	.word	0x08015535
 8003b0c:	240146bc 	.word	0x240146bc

08003b10 <testairbrakes>:

		osDelayUntil(tick_count);
	}
}

void testairbrakes(int32_t position){
 8003b10:	b508      	push	{r3, lr}
	MoveToPositionPPM(position);
 8003b12:	f7fc fe77 	bl	8000804 <MoveToPositionPPM>
	osDelay(100);
 8003b16:	2064      	movs	r0, #100	; 0x64
 8003b18:	f00c f8c0 	bl	800fc9c <osDelay>
	MoveToPositionPPM(2);
 8003b1c:	2002      	movs	r0, #2
}
 8003b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MoveToPositionPPM(2);
 8003b22:	f7fc be6f 	b.w	8000804 <MoveToPositionPPM>
	...

08003b28 <vTaskMotorCont>:
void vTaskMotorCont(void *argument) {
 8003b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	command_e telemetry_command = IDLE_COMMAND;
 8003b2c:	239b      	movs	r3, #155	; 0x9b
void vTaskMotorCont(void *argument) {
 8003b2e:	b086      	sub	sp, #24
	flight_phase_detection_t flight_phase_detection = { 0 };
 8003b30:	2400      	movs	r4, #0
	osDelay(3000);
 8003b32:	f640 30b8 	movw	r0, #3000	; 0xbb8
	command_e telemetry_command = IDLE_COMMAND;
 8003b36:	f88d 3003 	strb.w	r3, [sp, #3]
	flight_phase_detection.flight_phase = IDLE;
 8003b3a:	2301      	movs	r3, #1
	flight_phase_detection_t flight_phase_detection = { 0 };
 8003b3c:	9403      	str	r4, [sp, #12]
	flight_phase_detection.flight_phase = IDLE;
 8003b3e:	f88d 300c 	strb.w	r3, [sp, #12]
	flight_phase_detection.mach_number = SUBSONIC;
 8003b42:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	flight_phase_detection_t flight_phase_detection = { 0 };
 8003b46:	9405      	str	r4, [sp, #20]
	flight_phase_detection.mach_number = SUBSONIC;
 8003b48:	9304      	str	r3, [sp, #16]
	osDelay(3000);
 8003b4a:	f00c f8a7 	bl	800fc9c <osDelay>
	int32_t measured_motor_position = 0;
 8003b4e:	e9cd 4401 	strd	r4, r4, [sp, #4]
	while(EnableMotor() != osOK){
 8003b52:	f7fc ff23 	bl	800099c <EnableMotor>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	f040 8092 	bne.w	8003c80 <vTaskMotorCont+0x158>
	SetPositionMode(position_mode);
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f7fc fe3c 	bl	80007da <SetPositionMode>
	while(SetPositionMode(position_mode) != osOK){
 8003b62:	2001      	movs	r0, #1
 8003b64:	f7fc fe39 	bl	80007da <SetPositionMode>
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	f040 808e 	bne.w	8003c8a <vTaskMotorCont+0x162>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 8003b6e:	4a49      	ldr	r2, [pc, #292]	; (8003c94 <vTaskMotorCont+0x16c>)
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 8003b70:	2619      	movs	r6, #25
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 8003b72:	f242 7010 	movw	r0, #10000	; 0x2710
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8003b76:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8003cb8 <vTaskMotorCont+0x190>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 8003b7a:	4611      	mov	r1, r2
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8003b7c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8003cbc <vTaskMotorCont+0x194>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 8003b80:	f7fc fe6e 	bl	8000860 <ConfigurePPM>
		UsbPrint("[MOTOR] Read Position:%d\n", measured_motor_position);
 8003b84:	f8df a138 	ldr.w	sl, [pc, #312]	; 8003cc0 <vTaskMotorCont+0x198>
	tick_count = osKernelGetTickCount();
 8003b88:	f00c f81a 	bl	800fbc0 <osKernelGetTickCount>
 8003b8c:	4605      	mov	r5, r0
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 8003b8e:	f00c f82b 	bl	800fbe8 <osKernelGetTickFreq>
 8003b92:	fbb0 f6f6 	udiv	r6, r0, r6
		motor_status = GetPosition(&measured_motor_position);
 8003b96:	a802      	add	r0, sp, #8
		tick_count += tick_update;
 8003b98:	4435      	add	r5, r6
		motor_status = GetPosition(&measured_motor_position);
 8003b9a:	f7fc ff2a 	bl	80009f2 <GetPosition>
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f10d 0203 	add.w	r2, sp, #3
 8003ba4:	4641      	mov	r1, r8
 8003ba6:	4648      	mov	r0, r9
 8003ba8:	f7fe f927 	bl	8001dfa <ReadMutex>
		UsbPrint("[MOTOR] Read Position:%d\n", measured_motor_position);
 8003bac:	9902      	ldr	r1, [sp, #8]
 8003bae:	4650      	mov	r0, sl
 8003bb0:	f7fe fa9e 	bl	80020f0 <UsbPrint>
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(global_flight_phase_detection));
 8003bb4:	230c      	movs	r3, #12
 8003bb6:	4938      	ldr	r1, [pc, #224]	; (8003c98 <vTaskMotorCont+0x170>)
 8003bb8:	eb0d 0203 	add.w	r2, sp, r3
 8003bbc:	4837      	ldr	r0, [pc, #220]	; (8003c9c <vTaskMotorCont+0x174>)
 8003bbe:	f7fe f91c 	bl	8001dfa <ReadMutex>
		ReadMutex(&controller_mutex, &controller_output_global, &controller_actuation, sizeof(controller_actuation));
 8003bc2:	2304      	movs	r3, #4
 8003bc4:	4936      	ldr	r1, [pc, #216]	; (8003ca0 <vTaskMotorCont+0x178>)
 8003bc6:	eb0d 0203 	add.w	r2, sp, r3
 8003bca:	4836      	ldr	r0, [pc, #216]	; (8003ca4 <vTaskMotorCont+0x17c>)
 8003bcc:	f7fe f915 	bl	8001dfa <ReadMutex>
		desired_motor_position = (int32_t)(((float)controller_actuation)/1000*(-150));
 8003bd0:	eddd 7a01 	vldr	s15, [sp, #4]
 8003bd4:	eddf 6a34 	vldr	s13, [pc, #208]	; 8003ca8 <vTaskMotorCont+0x180>
 8003bd8:	f06f 0395 	mvn.w	r3, #149	; 0x95
 8003bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003be0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003be4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003cac <vTaskMotorCont+0x184>
 8003be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bf0:	ee17 1a90 	vmov	r1, s15
 8003bf4:	4299      	cmp	r1, r3
 8003bf6:	bfb8      	it	lt
 8003bf8:	4619      	movlt	r1, r3
		if(flight_phase_detection.flight_phase == COASTING){
 8003bfa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003bfe:	2902      	cmp	r1, #2
 8003c00:	bfa8      	it	ge
 8003c02:	2102      	movge	r1, #2
 8003c04:	2b04      	cmp	r3, #4
			motor_status = MoveToPositionPPM(desired_motor_position);
 8003c06:	bf0c      	ite	eq
 8003c08:	4608      	moveq	r0, r1
			motor_status = MoveToPositionPPM(2);
 8003c0a:	2002      	movne	r0, #2
 8003c0c:	460c      	mov	r4, r1
 8003c0e:	f7fc fdf9 	bl	8000804 <MoveToPositionPPM>
		if(flight_phase_detection.flight_phase == IDLE && telemetry_command == AIRBRAKE_TEST_COMMAND
 8003c12:	f89d 300c 	ldrb.w	r3, [sp, #12]
			motor_status = MoveToPositionPPM(2);
 8003c16:	4607      	mov	r7, r0
		if(flight_phase_detection.flight_phase == IDLE && telemetry_command == AIRBRAKE_TEST_COMMAND
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d110      	bne.n	8003c3e <vTaskMotorCont+0x116>
 8003c1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003c20:	2bd9      	cmp	r3, #217	; 0xd9
 8003c22:	d10c      	bne.n	8003c3e <vTaskMotorCont+0x116>
				&& osKernelGetTickCount() < 60000){
 8003c24:	f00b ffcc 	bl	800fbc0 <osKernelGetTickCount>
 8003c28:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8003c2c:	4298      	cmp	r0, r3
 8003c2e:	d806      	bhi.n	8003c3e <vTaskMotorCont+0x116>
			testairbrakes(-140);
 8003c30:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 8003c34:	f7ff ff6c 	bl	8003b10 <testairbrakes>
			telemetry_command = IDLE_COMMAND;
 8003c38:	239b      	movs	r3, #155	; 0x9b
 8003c3a:	f88d 3003 	strb.w	r3, [sp, #3]
		logMotor(osKernelGetTickCount(), desired_motor_position, measured_motor_position);
 8003c3e:	f00b ffbf 	bl	800fbc0 <osKernelGetTickCount>
 8003c42:	9a02      	ldr	r2, [sp, #8]
 8003c44:	4621      	mov	r1, r4
 8003c46:	f7fe fa31 	bl	80020ac <logMotor>
		if(motor_status != osOK && flight_phase_detection.flight_phase == IDLE){
 8003c4a:	b15f      	cbz	r7, 8003c64 <vTaskMotorCont+0x13c>
 8003c4c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d107      	bne.n	8003c64 <vTaskMotorCont+0x13c>
			DisableMotor();
 8003c54:	f7fc fdb0 	bl	80007b8 <DisableMotor>
			osDelay(1000);
 8003c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c5c:	f00c f81e 	bl	800fc9c <osDelay>
			EnableMotor();
 8003c60:	f7fc fe9c 	bl	800099c <EnableMotor>
		if(AcquireMutex(&motor_mutex) == osOK){
 8003c64:	4812      	ldr	r0, [pc, #72]	; (8003cb0 <vTaskMotorCont+0x188>)
 8003c66:	f7fe f8ba 	bl	8001dde <AcquireMutex>
 8003c6a:	b928      	cbnz	r0, 8003c78 <vTaskMotorCont+0x150>
			global_airbrake_extension = measured_motor_position;
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <vTaskMotorCont+0x18c>)
 8003c6e:	9a02      	ldr	r2, [sp, #8]
			ReleaseMutex(&motor_mutex);
 8003c70:	480f      	ldr	r0, [pc, #60]	; (8003cb0 <vTaskMotorCont+0x188>)
			global_airbrake_extension = measured_motor_position;
 8003c72:	601a      	str	r2, [r3, #0]
			ReleaseMutex(&motor_mutex);
 8003c74:	f7fe f8be 	bl	8001df4 <ReleaseMutex>
		osDelayUntil(tick_count);
 8003c78:	4628      	mov	r0, r5
 8003c7a:	f00c f829 	bl	800fcd0 <osDelayUntil>
		tick_count += tick_update;
 8003c7e:	e78a      	b.n	8003b96 <vTaskMotorCont+0x6e>
		osDelay(1000);
 8003c80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c84:	f00c f80a 	bl	800fc9c <osDelay>
 8003c88:	e763      	b.n	8003b52 <vTaskMotorCont+0x2a>
		osDelay(1000);
 8003c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c8e:	f00c f805 	bl	800fc9c <osDelay>
 8003c92:	e766      	b.n	8003b62 <vTaskMotorCont+0x3a>
 8003c94:	000186a0 	.word	0x000186a0
 8003c98:	24000234 	.word	0x24000234
 8003c9c:	24009cf8 	.word	0x24009cf8
 8003ca0:	24000220 	.word	0x24000220
 8003ca4:	2400e2bc 	.word	0x2400e2bc
 8003ca8:	447a0000 	.word	0x447a0000
 8003cac:	c3160000 	.word	0xc3160000
 8003cb0:	24009e94 	.word	0x24009e94
 8003cb4:	24018834 	.word	0x24018834
 8003cb8:	240146e0 	.word	0x240146e0
 8003cbc:	2400c220 	.word	0x2400c220
 8003cc0:	080155b6 	.word	0x080155b6

08003cc4 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8003cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Try everything forever;
	for (;;) {
		osDelay(100);
 8003cc8:	2064      	movs	r0, #100	; 0x64
void vTaskSdCard(void *argument) {
 8003cca:	b0cd      	sub	sp, #308	; 0x134
		osDelay(100);
 8003ccc:	f00b ffe6 	bl	800fc9c <osDelay>
		flight_phase_detection_t local_flight_phase;
		FRESULT res;
		char EULER_LOG_FILE_NAME[13] = "";
 8003cd0:	2300      	movs	r3, #0
		UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8003cd2:	4890      	ldr	r0, [pc, #576]	; (8003f14 <vTaskSdCard+0x250>)
		char EULER_LOG_FILE_NAME[13] = "";
 8003cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8003cd6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		local_flight_phase.flight_phase = IDLE;
		resetSDCard: //UsbPrint("[STORAGE TASK] Mounting SD card\n");
		do {
			EULER_LOG_FILE_NAME[0] = 0;
			res = f_mount(&EULER_FatFS, "", 1);
 8003cda:	4c8f      	ldr	r4, [pc, #572]	; (8003f18 <vTaskSdCard+0x254>)
 8003cdc:	4d8f      	ldr	r5, [pc, #572]	; (8003f1c <vTaskSdCard+0x258>)
			if (res != FR_OK) {
				UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8003cde:	4e90      	ldr	r6, [pc, #576]	; (8003f20 <vTaskSdCard+0x25c>)
		char EULER_LOG_FILE_NAME[13] = "";
 8003ce0:	e9cd 3307 	strd	r3, r3, [sp, #28]
		UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8003ce4:	f7fe fa04 	bl	80020f0 <UsbPrint>
		local_flight_phase.flight_phase = IDLE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f88d 3010 	strb.w	r3, [sp, #16]
			EULER_LOG_FILE_NAME[0] = 0;
 8003cee:	2700      	movs	r7, #0
			res = f_mount(&EULER_FatFS, "", 1);
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	4628      	mov	r0, r5
			EULER_LOG_FILE_NAME[0] = 0;
 8003cf6:	f88d 701c 	strb.w	r7, [sp, #28]
			res = f_mount(&EULER_FatFS, "", 1);
 8003cfa:	f00b fa57 	bl	800f1ac <f_mount>
			if (res != FR_OK) {
 8003cfe:	4601      	mov	r1, r0
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d147      	bne.n	8003d94 <vTaskSdCard+0xd0>
				osDelay(10);
			}
		} while (res != FR_OK);

		logToNewFile: if (!EULER_LOG_FILE_NAME[0]) {
			UsbPrint("[STORAGE TASK] Creating file name\n");
 8003d04:	4f87      	ldr	r7, [pc, #540]	; (8003f24 <vTaskSdCard+0x260>)

			unsigned int file_number = 1;

			DIR dj;
			FILINFO fno;
			res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 8003d06:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8003f70 <vTaskSdCard+0x2ac>
		logToNewFile: if (!EULER_LOG_FILE_NAME[0]) {
 8003d0a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d165      	bne.n	8003dde <vTaskSdCard+0x11a>
			UsbPrint("[STORAGE TASK] Creating file name\n");
 8003d12:	4638      	mov	r0, r7
			unsigned int file_number = 1;
 8003d14:	f04f 0901 	mov.w	r9, #1
			while (res == FR_OK && fno.fname[0]) {
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8003d18:	f04f 0a64 	mov.w	sl, #100	; 0x64
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8003d1c:	f04f 0b0a 	mov.w	fp, #10
			UsbPrint("[STORAGE TASK] Creating file name\n");
 8003d20:	f7fe f9e6 	bl	80020f0 <UsbPrint>
			res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 8003d24:	4643      	mov	r3, r8
 8003d26:	4622      	mov	r2, r4
 8003d28:	a90b      	add	r1, sp, #44	; 0x2c
 8003d2a:	a819      	add	r0, sp, #100	; 0x64
 8003d2c:	f00b fe9f 	bl	800fa6e <f_findfirst>
			while (res == FR_OK && fno.fname[0]) {
 8003d30:	2800      	cmp	r0, #0
 8003d32:	f040 80eb 	bne.w	8003f0c <vTaskSdCard+0x248>
 8003d36:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d139      	bne.n	8003db2 <vTaskSdCard+0xee>
						"[STORAGE TASK] Failed finding first or next file: %d\n",
						res);
				goto resetSDCard;
			}

			strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8003d3e:	497a      	ldr	r1, [pc, #488]	; (8003f28 <vTaskSdCard+0x264>)
 8003d40:	a807      	add	r0, sp, #28
 8003d42:	f00f fb99 	bl	8013478 <strcpy>
			EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8003d46:	230a      	movs	r3, #10
			EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
			EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;

			UsbPrint("[STORAGE TASK] Using file name: %s\n",
 8003d48:	4878      	ldr	r0, [pc, #480]	; (8003f2c <vTaskSdCard+0x268>)
			EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8003d4a:	fbb9 f1f3 	udiv	r1, r9, r3
 8003d4e:	fb03 9211 	mls	r2, r3, r1, r9
 8003d52:	3230      	adds	r2, #48	; 0x30
 8003d54:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
			EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8003d58:	fbb1 f2f3 	udiv	r2, r1, r3
 8003d5c:	fb03 1212 	mls	r2, r3, r2, r1
			UsbPrint("[STORAGE TASK] Using file name: %s\n",
 8003d60:	a907      	add	r1, sp, #28
			EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8003d62:	3230      	adds	r2, #48	; 0x30
 8003d64:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
			EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8003d68:	2264      	movs	r2, #100	; 0x64
 8003d6a:	fbb9 f9f2 	udiv	r9, r9, r2
 8003d6e:	fbb9 f2f3 	udiv	r2, r9, r3
 8003d72:	fb03 9912 	mls	r9, r3, r2, r9
 8003d76:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8003d7a:	f88d 9020 	strb.w	r9, [sp, #32]
			UsbPrint("[STORAGE TASK] Using file name: %s\n",
 8003d7e:	f7fe f9b7 	bl	80020f0 <UsbPrint>
					EULER_LOG_FILE_NAME);

			res = f_closedir(&dj);
 8003d82:	a819      	add	r0, sp, #100	; 0x64
 8003d84:	f00b fe1a 	bl	800f9bc <f_closedir>
			if (res != FR_OK) {
 8003d88:	4601      	mov	r1, r0
 8003d8a:	b340      	cbz	r0, 8003dde <vTaskSdCard+0x11a>
				UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8003d8c:	4868      	ldr	r0, [pc, #416]	; (8003f30 <vTaskSdCard+0x26c>)

					UsbPrint("[STORAGE TASK] Syncing file..\n");
					HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
					res = f_sync(&EULER_LOG_FILE);
					if (res != FR_OK) {
						UsbPrint("[STORAGE TASK] Failed syncing file: %d\n",
 8003d8e:	f7fe f9af 	bl	80020f0 <UsbPrint>
								res);
						goto resetSDCard;
 8003d92:	e7ac      	b.n	8003cee <vTaskSdCard+0x2a>
				UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8003d94:	4630      	mov	r0, r6
 8003d96:	f7fe f9ab 	bl	80020f0 <UsbPrint>
				disk.is_initialized[0] = 0;
 8003d9a:	4b66      	ldr	r3, [pc, #408]	; (8003f34 <vTaskSdCard+0x270>)
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003da2:	4865      	ldr	r0, [pc, #404]	; (8003f38 <vTaskSdCard+0x274>)
				disk.is_initialized[0] = 0;
 8003da4:	701f      	strb	r7, [r3, #0]
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8003da6:	f003 ff47 	bl	8007c38 <HAL_GPIO_WritePin>
				osDelay(10);
 8003daa:	200a      	movs	r0, #10
 8003dac:	f00b ff76 	bl	800fc9c <osDelay>
 8003db0:	e79d      	b.n	8003cee <vTaskSdCard+0x2a>
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8003db2:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				res = f_findnext(&dj, &fno);
 8003db6:	a90b      	add	r1, sp, #44	; 0x2c
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8003db8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
				res = f_findnext(&dj, &fno);
 8003dbc:	a819      	add	r0, sp, #100	; 0x64
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8003dbe:	3a30      	subs	r2, #48	; 0x30
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8003dc0:	3b30      	subs	r3, #48	; 0x30
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8003dc2:	fb0b f202 	mul.w	r2, fp, r2
 8003dc6:	fb0a 2303 	mla	r3, sl, r3, r2
 8003dca:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8003dce:	4413      	add	r3, r2
				if (current_file_number + 1 > file_number) {
 8003dd0:	3b2f      	subs	r3, #47	; 0x2f
 8003dd2:	4599      	cmp	r9, r3
 8003dd4:	bf38      	it	cc
 8003dd6:	4699      	movcc	r9, r3
				res = f_findnext(&dj, &fno);
 8003dd8:	f00b fe31 	bl	800fa3e <f_findnext>
 8003ddc:	e7a8      	b.n	8003d30 <vTaskSdCard+0x6c>
		res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8003dde:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8003f54 <vTaskSdCard+0x290>
		UsbPrint("[STORAGE TASK] Opening log file\n");
 8003de2:	4856      	ldr	r0, [pc, #344]	; (8003f3c <vTaskSdCard+0x278>)
 8003de4:	f7fe f984 	bl	80020f0 <UsbPrint>
		res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8003de8:	a907      	add	r1, sp, #28
 8003dea:	2212      	movs	r2, #18
 8003dec:	4648      	mov	r0, r9
 8003dee:	f00b fa27 	bl	800f240 <f_open>
		if (res != FR_OK) {
 8003df2:	4601      	mov	r1, r0
 8003df4:	b108      	cbz	r0, 8003dfa <vTaskSdCard+0x136>
			UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 8003df6:	4852      	ldr	r0, [pc, #328]	; (8003f40 <vTaskSdCard+0x27c>)
 8003df8:	e7c9      	b.n	8003d8e <vTaskSdCard+0xca>
		UsbPrint("[STORAGE TASK] Going to end of file\n");
 8003dfa:	4852      	ldr	r0, [pc, #328]	; (8003f44 <vTaskSdCard+0x280>)
 8003dfc:	f7fe f978 	bl	80020f0 <UsbPrint>
		res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 8003e00:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8003e04:	4648      	mov	r0, r9
 8003e06:	f00b fc6a 	bl	800f6de <f_lseek>
		if (res != FR_OK) {
 8003e0a:	4601      	mov	r1, r0
 8003e0c:	b108      	cbz	r0, 8003e12 <vTaskSdCard+0x14e>
			UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8003e0e:	484e      	ldr	r0, [pc, #312]	; (8003f48 <vTaskSdCard+0x284>)
 8003e10:	e7bd      	b.n	8003d8e <vTaskSdCard+0xca>
		char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8003e12:	4b4e      	ldr	r3, [pc, #312]	; (8003f4c <vTaskSdCard+0x288>)
 8003e14:	aa11      	add	r2, sp, #68	; 0x44
		volatile int32_t msgCounter = 0;
 8003e16:	9003      	str	r0, [sp, #12]
		char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8003e18:	f103 0e18 	add.w	lr, r3, #24
 8003e1c:	4691      	mov	r9, r2
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	3308      	adds	r3, #8
 8003e22:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8003e26:	4694      	mov	ip, r2
 8003e28:	4573      	cmp	r3, lr
 8003e2a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8003e2e:	4662      	mov	r2, ip
 8003e30:	d1f5      	bne.n	8003e1e <vTaskSdCard+0x15a>
 8003e32:	8899      	ldrh	r1, [r3, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	799b      	ldrb	r3, [r3, #6]
 8003e38:	f8cc 0000 	str.w	r0, [ip]
		res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8003e3c:	4648      	mov	r0, r9
		char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8003e3e:	f88c 3006 	strb.w	r3, [ip, #6]
 8003e42:	2300      	movs	r3, #0
 8003e44:	f8ac 1004 	strh.w	r1, [ip, #4]
 8003e48:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
		res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8003e4c:	f7fc fa48 	bl	80002e0 <strlen>
 8003e50:	4649      	mov	r1, r9
 8003e52:	4602      	mov	r2, r0
 8003e54:	4b3e      	ldr	r3, [pc, #248]	; (8003f50 <vTaskSdCard+0x28c>)
 8003e56:	483f      	ldr	r0, [pc, #252]	; (8003f54 <vTaskSdCard+0x290>)
 8003e58:	f00b fb02 	bl	800f460 <f_write>
		if (res != FR_OK) {
 8003e5c:	4681      	mov	r9, r0
 8003e5e:	b110      	cbz	r0, 8003e66 <vTaskSdCard+0x1a2>
			UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8003e60:	4601      	mov	r1, r0
						UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8003e62:	483d      	ldr	r0, [pc, #244]	; (8003f58 <vTaskSdCard+0x294>)
 8003e64:	e793      	b.n	8003d8e <vTaskSdCard+0xca>
		log_entry_t log_entry = { 0 };
 8003e66:	4601      	mov	r1, r0
 8003e68:	2296      	movs	r2, #150	; 0x96
 8003e6a:	a826      	add	r0, sp, #152	; 0x98
			if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8003e6c:	f8df a104 	ldr.w	sl, [pc, #260]	; 8003f74 <vTaskSdCard+0x2b0>
		log_entry_t log_entry = { 0 };
 8003e70:	f00f fa0d 	bl	801328e <memset>
					res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8003e74:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8003f50 <vTaskSdCard+0x28c>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8003e78:	464a      	mov	r2, r9
					res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8003e7a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8003f54 <vTaskSdCard+0x290>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8003e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e82:	482d      	ldr	r0, [pc, #180]	; (8003f38 <vTaskSdCard+0x274>)
 8003e84:	f003 fed8 	bl	8007c38 <HAL_GPIO_WritePin>
			if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8003e88:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	a926      	add	r1, sp, #152	; 0x98
 8003e90:	f8da 0000 	ldr.w	r0, [sl]
 8003e94:	f00c f94e 	bl	8010134 <osMessageQueueGet>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	d1f5      	bne.n	8003e88 <vTaskSdCard+0x1c4>
				num_bytes = strlen(log_entry.str);
 8003e9c:	a826      	add	r0, sp, #152	; 0x98
 8003e9e:	f7fc fa1f 	bl	80002e0 <strlen>
				if (num_bytes > 0) {
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	b138      	cbz	r0, 8003eb6 <vTaskSdCard+0x1f2>
					res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8003ea6:	a926      	add	r1, sp, #152	; 0x98
 8003ea8:	465b      	mov	r3, fp
 8003eaa:	4648      	mov	r0, r9
 8003eac:	f00b fad8 	bl	800f460 <f_write>
					if (res != FR_OK) {
 8003eb0:	4601      	mov	r1, r0
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d1d5      	bne.n	8003e62 <vTaskSdCard+0x19e>
				msgCounter++;
 8003eb6:	9b03      	ldr	r3, [sp, #12]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	9303      	str	r3, [sp, #12]
				if (msgCounter >= SYNC_AFTER_COUNT) {
 8003ebc:	9b03      	ldr	r3, [sp, #12]
 8003ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8003ec0:	dde2      	ble.n	8003e88 <vTaskSdCard+0x1c4>
					msgCounter = 0;
 8003ec2:	2300      	movs	r3, #0
					UsbPrint("[STORAGE TASK] Syncing file..\n");
 8003ec4:	4825      	ldr	r0, [pc, #148]	; (8003f5c <vTaskSdCard+0x298>)
					msgCounter = 0;
 8003ec6:	9303      	str	r3, [sp, #12]
					UsbPrint("[STORAGE TASK] Syncing file..\n");
 8003ec8:	f7fe f912 	bl	80020f0 <UsbPrint>
					HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8003ecc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ed0:	4819      	ldr	r0, [pc, #100]	; (8003f38 <vTaskSdCard+0x274>)
 8003ed2:	f003 feb6 	bl	8007c42 <HAL_GPIO_TogglePin>
					res = f_sync(&EULER_LOG_FILE);
 8003ed6:	4648      	mov	r0, r9
 8003ed8:	f00b fb98 	bl	800f60c <f_sync>
					if (res != FR_OK) {
 8003edc:	4601      	mov	r1, r0
 8003ede:	b108      	cbz	r0, 8003ee4 <vTaskSdCard+0x220>
						UsbPrint("[STORAGE TASK] Failed syncing file: %d\n",
 8003ee0:	481f      	ldr	r0, [pc, #124]	; (8003f60 <vTaskSdCard+0x29c>)
 8003ee2:	e754      	b.n	8003d8e <vTaskSdCard+0xca>
					}

					;

					// if the rocket landed, create a new file and write to that one
					if (ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 8003ee4:	230c      	movs	r3, #12
 8003ee6:	aa04      	add	r2, sp, #16
 8003ee8:	491e      	ldr	r1, [pc, #120]	; (8003f64 <vTaskSdCard+0x2a0>)
 8003eea:	481f      	ldr	r0, [pc, #124]	; (8003f68 <vTaskSdCard+0x2a4>)
 8003eec:	f7fd ff85 	bl	8001dfa <ReadMutex>
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	d1c9      	bne.n	8003e88 <vTaskSdCard+0x1c4>
							&local_flight_phase,
							sizeof(global_flight_phase_detection)) == osOK
							&& local_flight_phase.flight_phase == RECOVERY) {
 8003ef4:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8003ef8:	2a06      	cmp	r2, #6
 8003efa:	d1c5      	bne.n	8003e88 <vTaskSdCard+0x1c4>
 8003efc:	9001      	str	r0, [sp, #4]
						f_close(&EULER_LOG_FILE);
 8003efe:	4815      	ldr	r0, [pc, #84]	; (8003f54 <vTaskSdCard+0x290>)
 8003f00:	f00b fbd4 	bl	800f6ac <f_close>
						// "clean" current file name
						EULER_LOG_FILE_NAME[0] = 0;
 8003f04:	9b01      	ldr	r3, [sp, #4]
 8003f06:	f88d 301c 	strb.w	r3, [sp, #28]
						goto logToNewFile;
 8003f0a:	e6fe      	b.n	8003d0a <vTaskSdCard+0x46>
				UsbPrint(
 8003f0c:	4601      	mov	r1, r0
 8003f0e:	4817      	ldr	r0, [pc, #92]	; (8003f6c <vTaskSdCard+0x2a8>)
 8003f10:	e73d      	b.n	8003d8e <vTaskSdCard+0xca>
 8003f12:	bf00      	nop
 8003f14:	080155d0 	.word	0x080155d0
 8003f18:	0801576b 	.word	0x0801576b
 8003f1c:	2401cd90 	.word	0x2401cd90
 8003f20:	080155f8 	.word	0x080155f8
 8003f24:	08015624 	.word	0x08015624
 8003f28:	080157ca 	.word	0x080157ca
 8003f2c:	080157d6 	.word	0x080157d6
 8003f30:	08015653 	.word	0x08015653
 8003f34:	2400092c 	.word	0x2400092c
 8003f38:	58020c00 	.word	0x58020c00
 8003f3c:	08015680 	.word	0x08015680
 8003f40:	080156a1 	.word	0x080156a1
 8003f44:	080156cd 	.word	0x080156cd
 8003f48:	080156f2 	.word	0x080156f2
 8003f4c:	080150ec 	.word	0x080150ec
 8003f50:	2401cfc4 	.word	0x2401cfc4
 8003f54:	2401cb60 	.word	0x2401cb60
 8003f58:	08015722 	.word	0x08015722
 8003f5c:	0801574d 	.word	0x0801574d
 8003f60:	0801576c 	.word	0x0801576c
 8003f64:	24000234 	.word	0x24000234
 8003f68:	24009cf8 	.word	0x24009cf8
 8003f6c:	08015794 	.word	0x08015794
 8003f70:	08015647 	.word	0x08015647
 8003f74:	240188c0 	.word	0x240188c0

08003f78 <calculate_checksum_sb>:
	}
}

uint8_t calculate_checksum_sb(sb_data_t *sb_data) {

	return sb_data->baro.pressure + sb_data->baro.temperature
 8003f78:	e9d0 3200 	ldrd	r3, r2, [r0]
 8003f7c:	4413      	add	r3, r2
			+ sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z
 8003f7e:	7b02      	ldrb	r2, [r0, #12]
 8003f80:	4413      	add	r3, r2
 8003f82:	7b82      	ldrb	r2, [r0, #14]
 8003f84:	4413      	add	r3, r2
 8003f86:	7c02      	ldrb	r2, [r0, #16]
 8003f88:	4413      	add	r3, r2
			+ sb_data->imu.acc_x + sb_data->imu.acc_y + sb_data->imu.acc_z;
 8003f8a:	7c82      	ldrb	r2, [r0, #18]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	7d02      	ldrb	r2, [r0, #20]
 8003f90:	7d80      	ldrb	r0, [r0, #22]
 8003f92:	4413      	add	r3, r2
 8003f94:	4418      	add	r0, r3
}
 8003f96:	b2c0      	uxtb	r0, r0
 8003f98:	4770      	bx	lr
	...

08003f9c <ReadDataSB>:
void ReadDataSB(sb_data_t *sb1, sb_data_t *sb2, sb_data_t *sb3) {
 8003f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9e:	4606      	mov	r6, r0
 8003fa0:	460d      	mov	r5, r1
 8003fa2:	4614      	mov	r4, r2
	checksum = calculate_checksum_sb(sb1);
 8003fa4:	f7ff ffe8 	bl	8003f78 <calculate_checksum_sb>
	if (checksum == sb1->checksum) {
 8003fa8:	7f33      	ldrb	r3, [r6, #28]
 8003faa:	4283      	cmp	r3, r0
 8003fac:	d114      	bne.n	8003fd8 <ReadDataSB+0x3c>
		if (AcquireMutex(&sb1_mutex) == osOK) {
 8003fae:	4826      	ldr	r0, [pc, #152]	; (8004048 <ReadDataSB+0xac>)
 8003fb0:	f7fd ff15 	bl	8001dde <AcquireMutex>
 8003fb4:	b980      	cbnz	r0, 8003fd8 <ReadDataSB+0x3c>
			sb1_baro = sb1->baro;
 8003fb6:	4b25      	ldr	r3, [pc, #148]	; (800404c <ReadDataSB+0xb0>)
			sb1_imu = sb1->imu;
 8003fb8:	4f25      	ldr	r7, [pc, #148]	; (8004050 <ReadDataSB+0xb4>)
			sb1_baro = sb1->baro;
 8003fba:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
			sb1_imu = sb1->imu;
 8003fbe:	360c      	adds	r6, #12
			sb1_baro = sb1->baro;
 8003fc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb1->imu;
 8003fc4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003fc8:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
			ReleaseMutex(&sb1_mutex);
 8003fcc:	481e      	ldr	r0, [pc, #120]	; (8004048 <ReadDataSB+0xac>)
 8003fce:	f7fd ff11 	bl	8001df4 <ReleaseMutex>
			sb1_imu.acc_z = -sb1_imu.acc_z;
 8003fd2:	897b      	ldrh	r3, [r7, #10]
 8003fd4:	425b      	negs	r3, r3
 8003fd6:	817b      	strh	r3, [r7, #10]
	checksum = calculate_checksum_sb(sb2);
 8003fd8:	4628      	mov	r0, r5
 8003fda:	f7ff ffcd 	bl	8003f78 <calculate_checksum_sb>
	if (checksum == sb2->checksum) {
 8003fde:	7f2b      	ldrb	r3, [r5, #28]
 8003fe0:	4283      	cmp	r3, r0
 8003fe2:	d114      	bne.n	800400e <ReadDataSB+0x72>
		if (AcquireMutex(&sb2_mutex) == osOK) {
 8003fe4:	481b      	ldr	r0, [pc, #108]	; (8004054 <ReadDataSB+0xb8>)
 8003fe6:	f7fd fefa 	bl	8001dde <AcquireMutex>
 8003fea:	b980      	cbnz	r0, 800400e <ReadDataSB+0x72>
			sb2_baro = sb2->baro;
 8003fec:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <ReadDataSB+0xbc>)
			sb2_imu = sb2->imu;
 8003fee:	4e1b      	ldr	r6, [pc, #108]	; (800405c <ReadDataSB+0xc0>)
			sb2_baro = sb2->baro;
 8003ff0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
			sb2_imu = sb2->imu;
 8003ff4:	350c      	adds	r5, #12
			sb2_baro = sb2->baro;
 8003ff6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb2->imu;
 8003ffa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003ffe:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			ReleaseMutex(&sb2_mutex);
 8004002:	4814      	ldr	r0, [pc, #80]	; (8004054 <ReadDataSB+0xb8>)
 8004004:	f7fd fef6 	bl	8001df4 <ReleaseMutex>
			sb2_imu.acc_z = -sb2_imu.acc_z;
 8004008:	8973      	ldrh	r3, [r6, #10]
 800400a:	425b      	negs	r3, r3
 800400c:	8173      	strh	r3, [r6, #10]
	checksum = calculate_checksum_sb(sb3);
 800400e:	4620      	mov	r0, r4
 8004010:	f7ff ffb2 	bl	8003f78 <calculate_checksum_sb>
	if (checksum == sb3->checksum) {
 8004014:	7f23      	ldrb	r3, [r4, #28]
 8004016:	4283      	cmp	r3, r0
 8004018:	d114      	bne.n	8004044 <ReadDataSB+0xa8>
		if (AcquireMutex(&sb3_mutex) == osOK) {
 800401a:	4811      	ldr	r0, [pc, #68]	; (8004060 <ReadDataSB+0xc4>)
 800401c:	f7fd fedf 	bl	8001dde <AcquireMutex>
 8004020:	b980      	cbnz	r0, 8004044 <ReadDataSB+0xa8>
			sb3_baro = sb3->baro;
 8004022:	4b10      	ldr	r3, [pc, #64]	; (8004064 <ReadDataSB+0xc8>)
			sb3_imu = sb3->imu;
 8004024:	4d10      	ldr	r5, [pc, #64]	; (8004068 <ReadDataSB+0xcc>)
			sb3_baro = sb3->baro;
 8004026:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
			sb3_imu = sb3->imu;
 800402a:	340c      	adds	r4, #12
			sb3_baro = sb3->baro;
 800402c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3->imu;
 8004030:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004034:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			ReleaseMutex(&sb3_mutex);
 8004038:	4809      	ldr	r0, [pc, #36]	; (8004060 <ReadDataSB+0xc4>)
 800403a:	f7fd fedb 	bl	8001df4 <ReleaseMutex>
			sb3_imu.acc_z = -sb3_imu.acc_z;
 800403e:	896b      	ldrh	r3, [r5, #10]
 8004040:	425b      	negs	r3, r3
 8004042:	816b      	strh	r3, [r5, #10]
}
 8004044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004046:	bf00      	nop
 8004048:	24010428 	.word	0x24010428
 800404c:	24000240 	.word	0x24000240
 8004050:	2400024c 	.word	0x2400024c
 8004054:	2401cb0c 	.word	0x2401cb0c
 8004058:	2400025c 	.word	0x2400025c
 800405c:	24000268 	.word	0x24000268
 8004060:	2401059c 	.word	0x2401059c
 8004064:	24000278 	.word	0x24000278
 8004068:	24000284 	.word	0x24000284

0800406c <vTaskSensRead>:
void vTaskSensRead(void *argument) {
 800406c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8004070:	f04f 0864 	mov.w	r8, #100	; 0x64
void vTaskSensRead(void *argument) {
 8004074:	b088      	sub	sp, #32
	osDelay(800);
 8004076:	f44f 7048 	mov.w	r0, #800	; 0x320
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 800407a:	4f3f      	ldr	r7, [pc, #252]	; (8004178 <vTaskSensRead+0x10c>)
	osDelay(800);
 800407c:	f00b fe0e 	bl	800fc9c <osDelay>
	tick_count = osKernelGetTickCount();
 8004080:	f00b fd9e 	bl	800fbc0 <osKernelGetTickCount>
 8004084:	4606      	mov	r6, r0
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8004086:	f00b fdaf 	bl	800fbe8 <osKernelGetTickFreq>
 800408a:	fbb0 f8f8 	udiv	r8, r0, r8
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 800408e:	4c3b      	ldr	r4, [pc, #236]	; (800417c <vTaskSensRead+0x110>)
 8004090:	463a      	mov	r2, r7
 8004092:	4d3b      	ldr	r5, [pc, #236]	; (8004180 <vTaskSensRead+0x114>)
		tick_count += tick_update;
 8004094:	4446      	add	r6, r8
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 8004096:	4621      	mov	r1, r4
 8004098:	4628      	mov	r0, r5
 800409a:	f7ff ff7f 	bl	8003f9c <ReadDataSB>
		UsbPrint(
 800409e:	69ab      	ldr	r3, [r5, #24]
 80040a0:	6829      	ldr	r1, [r5, #0]
 80040a2:	9306      	str	r3, [sp, #24]
 80040a4:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 80040a8:	4836      	ldr	r0, [pc, #216]	; (8004184 <vTaskSensRead+0x118>)
 80040aa:	9305      	str	r3, [sp, #20]
 80040ac:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 80040b0:	9304      	str	r3, [sp, #16]
 80040b2:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 80040b6:	9303      	str	r3, [sp, #12]
 80040b8:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 80040bc:	9302      	str	r3, [sp, #8]
 80040be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040c2:	9301      	str	r3, [sp, #4]
 80040c4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 80040ce:	f7fe f80f 	bl	80020f0 <UsbPrint>
		UsbPrint(
 80040d2:	69a3      	ldr	r3, [r4, #24]
 80040d4:	6821      	ldr	r1, [r4, #0]
 80040d6:	9306      	str	r3, [sp, #24]
 80040d8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80040dc:	482a      	ldr	r0, [pc, #168]	; (8004188 <vTaskSensRead+0x11c>)
 80040de:	9305      	str	r3, [sp, #20]
 80040e0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80040e4:	9304      	str	r3, [sp, #16]
 80040e6:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 80040ea:	9303      	str	r3, [sp, #12]
 80040ec:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80040f0:	9302      	str	r3, [sp, #8]
 80040f2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8004102:	f7fd fff5 	bl	80020f0 <UsbPrint>
		logSensor(tick_count, 1, BARO, &sb1_data.baro);
 8004106:	2201      	movs	r2, #1
 8004108:	462b      	mov	r3, r5
 800410a:	4630      	mov	r0, r6
 800410c:	4611      	mov	r1, r2
 800410e:	f7fd fec5 	bl	8001e9c <logSensor>
		logSensor(tick_count, 1, IMU, &sb1_data.imu);
 8004112:	f105 030c 	add.w	r3, r5, #12
 8004116:	2202      	movs	r2, #2
 8004118:	2101      	movs	r1, #1
 800411a:	4630      	mov	r0, r6
 800411c:	f7fd febe 	bl	8001e9c <logSensor>
		logSensor(tick_count, 2, BARO, &sb2_data.baro);
 8004120:	4623      	mov	r3, r4
 8004122:	2201      	movs	r2, #1
 8004124:	2102      	movs	r1, #2
 8004126:	4630      	mov	r0, r6
 8004128:	f7fd feb8 	bl	8001e9c <logSensor>
		logSensor(tick_count, 2, IMU, &sb2_data.imu);
 800412c:	2202      	movs	r2, #2
 800412e:	f104 030c 	add.w	r3, r4, #12
 8004132:	4630      	mov	r0, r6
 8004134:	4611      	mov	r1, r2
 8004136:	f7fd feb1 	bl	8001e9c <logSensor>
		logSensor(tick_count, 3, BARO, &sb3_data.baro);
 800413a:	463b      	mov	r3, r7
 800413c:	2201      	movs	r2, #1
 800413e:	2103      	movs	r1, #3
 8004140:	4630      	mov	r0, r6
 8004142:	f7fd feab 	bl	8001e9c <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_data.imu);
 8004146:	4b11      	ldr	r3, [pc, #68]	; (800418c <vTaskSensRead+0x120>)
 8004148:	2202      	movs	r2, #2
 800414a:	2103      	movs	r1, #3
 800414c:	4630      	mov	r0, r6
 800414e:	f7fd fea5 	bl	8001e9c <logSensor>
		HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) &sb1_data, sizeof(sb1_data));
 8004152:	4629      	mov	r1, r5
 8004154:	2220      	movs	r2, #32
 8004156:	480e      	ldr	r0, [pc, #56]	; (8004190 <vTaskSensRead+0x124>)
 8004158:	f006 ff9e 	bl	800b098 <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &sb2_data, sizeof(sb2_data));
 800415c:	4621      	mov	r1, r4
 800415e:	2220      	movs	r2, #32
 8004160:	480c      	ldr	r0, [pc, #48]	; (8004194 <vTaskSensRead+0x128>)
 8004162:	f006 ff99 	bl	800b098 <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8004166:	2220      	movs	r2, #32
 8004168:	4639      	mov	r1, r7
 800416a:	480b      	ldr	r0, [pc, #44]	; (8004198 <vTaskSensRead+0x12c>)
 800416c:	f006 ff94 	bl	800b098 <HAL_SPI_Receive_DMA>
		osDelayUntil(tick_count);
 8004170:	4630      	mov	r0, r6
 8004172:	f00b fdad 	bl	800fcd0 <osDelayUntil>
 8004176:	e78a      	b.n	800408e <vTaskSensRead+0x22>
 8004178:	24000314 	.word	0x24000314
 800417c:	240002f4 	.word	0x240002f4
 8004180:	240002d4 	.word	0x240002d4
 8004184:	080157fa 	.word	0x080157fa
 8004188:	08015850 	.word	0x08015850
 800418c:	24000320 	.word	0x24000320
 8004190:	24018838 	.word	0x24018838
 8004194:	24009d00 	.word	0x24009d00
 8004198:	2400e234 	.word	0x2400e234

0800419c <resetStateEstimation>:
	}
}


void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory, float pressure, float temperature){
 800419c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a0:	ed2d 8b02 	vpush	{d8}
 80041a4:	eeb0 8a60 	vmov.f32	s16, s1
 80041a8:	4614      	mov	r4, r2
 80041aa:	eef0 8a40 	vmov.f32	s17, s0
 80041ae:	4605      	mov	r5, r0
	reset_flight_phase_detection(flight_phase_detection);
 80041b0:	4608      	mov	r0, r1
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory, float pressure, float temperature){
 80041b2:	461f      	mov	r7, r3
 80041b4:	460e      	mov	r6, r1
	reset_flight_phase_detection(flight_phase_detection);
 80041b6:	f7fd f8a5 	bl	8001304 <reset_flight_phase_detection>
	calibrate_env(environment, pressure, temperature);
 80041ba:	eef0 0a48 	vmov.f32	s1, s16
 80041be:	4620      	mov	r0, r4
 80041c0:	eeb0 0a68 	vmov.f32	s0, s17
 80041c4:	f7fc ff10 	bl	8000fe8 <calibrate_env>
	update_env(environment, temperature);
 80041c8:	eeb0 0a48 	vmov.f32	s0, s16
 80041cc:	4620      	mov	r0, r4
 80041ce:	f7fc ff1f 	bl	8001010 <update_env>
	reset_kf_state(kf_state);
 80041d2:	4628      	mov	r0, r5
 80041d4:	f7fd f89e 	bl	8001314 <reset_kf_state>
	*extrapolation_rolling_memory = EMPTY_MEMORY;
 80041d8:	22b0      	movs	r2, #176	; 0xb0
 80041da:	2100      	movs	r1, #0
 80041dc:	4638      	mov	r0, r7
 80041de:	f00f f856 	bl	801328e <memset>
	select_noise_models(kf_state, flight_phase_detection, environment, extrapolation_rolling_memory);
 80041e2:	463b      	mov	r3, r7
 80041e4:	4622      	mov	r2, r4
 80041e6:	4631      	mov	r1, r6
 80041e8:	4628      	mov	r0, r5
}
 80041ea:	ecbd 8b02 	vpop	{d8}
 80041ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	select_noise_models(kf_state, flight_phase_detection, environment, extrapolation_rolling_memory);
 80041f2:	f7fd ba4f 	b.w	8001694 <select_noise_models>
	...

080041f8 <vTaskStateEst>:
void vTaskStateEst(void *argument) {
 80041f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fc:	ed2d 8b04 	vpush	{d8-d9}
 8004200:	f2ad 5dac 	subw	sp, sp, #1452	; 0x5ac
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004204:	2600      	movs	r6, #0
	float sum_press = 0;
 8004206:	ed9f 8a96 	vldr	s16, [pc, #600]	; 8004460 <vTaskStateEst+0x268>
	init_env(&env);
 800420a:	ad12      	add	r5, sp, #72	; 0x48
	uint16_t calibrate_count = 0;
 800420c:	4634      	mov	r4, r6
	float average_press = 0;
 800420e:	eef0 9a48 	vmov.f32	s19, s16
			update_state_est_data(&state_est_data_global, &kf_state);
 8004212:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8004494 <vTaskStateEst+0x29c>
	init_env(&env);
 8004216:	4628      	mov	r0, r5
	float sum_temp = 0;
 8004218:	eef0 8a48 	vmov.f32	s17, s16
	init_env(&env);
 800421c:	f7fc ff1c 	bl	8001058 <init_env>
	state_est_meas_t state_est_meas = { 0 };
 8004220:	2278      	movs	r2, #120	; 0x78
 8004222:	2100      	movs	r1, #0
 8004224:	a816      	add	r0, sp, #88	; 0x58
 8004226:	f00f f832 	bl	801328e <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 800422a:	2278      	movs	r2, #120	; 0x78
 800422c:	2100      	movs	r1, #0
 800422e:	a834      	add	r0, sp, #208	; 0xd0
 8004230:	f00f f82d 	bl	801328e <memset>
	reset_kf_state(&kf_state);
 8004234:	a87f      	add	r0, sp, #508	; 0x1fc
 8004236:	f7fd f86d 	bl	8001314 <reset_kf_state>
	extrapolation_rolling_memory_t extrapolation_rolling_memory = { 0 };
 800423a:	22b0      	movs	r2, #176	; 0xb0
 800423c:	2100      	movs	r1, #0
 800423e:	a852      	add	r0, sp, #328	; 0x148
 8004240:	f00f f825 	bl	801328e <memset>
	reset_flight_phase_detection(&flight_phase_detection);
 8004244:	a80f      	add	r0, sp, #60	; 0x3c
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004246:	9611      	str	r6, [sp, #68]	; 0x44
	float average_temp = 0;
 8004248:	eeb0 9a48 	vmov.f32	s18, s16
	flight_phase_detection_t flight_phase_detection = { 0 };
 800424c:	e9cd 660f 	strd	r6, r6, [sp, #60]	; 0x3c
	reset_flight_phase_detection(&flight_phase_detection);
 8004250:	f7fd f858 	bl	8001304 <reset_flight_phase_detection>
	command_e telemetry_command = IDLE_COMMAND;
 8004254:	239b      	movs	r3, #155	; 0x9b
	select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8004256:	462a      	mov	r2, r5
 8004258:	a90f      	add	r1, sp, #60	; 0x3c
	command_e telemetry_command = IDLE_COMMAND;
 800425a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
	select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 800425e:	a87f      	add	r0, sp, #508	; 0x1fc
 8004260:	ab52      	add	r3, sp, #328	; 0x148
 8004262:	f7fd fa17 	bl	8001694 <select_noise_models>
	osDelay(900);
 8004266:	f44f 7061 	mov.w	r0, #900	; 0x384
 800426a:	f00b fd17 	bl	800fc9c <osDelay>
	tick_count = osKernelGetTickCount();
 800426e:	f00b fca7 	bl	800fbc0 <osKernelGetTickCount>
 8004272:	4607      	mov	r7, r0
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8004274:	f00b fcb8 	bl	800fbe8 <osKernelGetTickFreq>
 8004278:	2364      	movs	r3, #100	; 0x64
 800427a:	fbb0 f3f3 	udiv	r3, r0, r3
	uint32_t reset_counter = 0;
 800427e:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
		tick_count += tick_update;
 8004282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8004284:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
 8004288:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8004498 <vTaskStateEst+0x2a0>
		tick_count += tick_update;
 800428c:	441f      	add	r7, r3
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 800428e:	4875      	ldr	r0, [pc, #468]	; (8004464 <vTaskStateEst+0x26c>)
 8004290:	2301      	movs	r3, #1
 8004292:	4649      	mov	r1, r9
 8004294:	f7fd fdb1 	bl	8001dfa <ReadMutex>
		if(flight_phase_detection.flight_phase == IDLE && global_telemetry_command == CALIBRATE_SENSORS){
 8004298:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d10d      	bne.n	80042bc <vTaskStateEst+0xc4>
 80042a0:	f899 3000 	ldrb.w	r3, [r9]
 80042a4:	2b49      	cmp	r3, #73	; 0x49
 80042a6:	d109      	bne.n	80042bc <vTaskStateEst+0xc4>
			resetStateEstimation(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory, average_press, average_temp);
 80042a8:	eef0 0a49 	vmov.f32	s1, s18
 80042ac:	ab52      	add	r3, sp, #328	; 0x148
 80042ae:	eeb0 0a69 	vmov.f32	s0, s19
 80042b2:	462a      	mov	r2, r5
 80042b4:	a90f      	add	r1, sp, #60	; 0x3c
 80042b6:	a87f      	add	r0, sp, #508	; 0x1fc
 80042b8:	f7ff ff70 	bl	800419c <resetStateEstimation>
		if(reset_counter > 30*STATE_ESTIMATION_FREQUENCY && !was_reset){
 80042bc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80042c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d90b      	bls.n	80042de <vTaskStateEst+0xe6>
 80042c6:	b956      	cbnz	r6, 80042de <vTaskStateEst+0xe6>
			was_reset = true;
 80042c8:	2601      	movs	r6, #1
			resetStateEstimation(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory, average_press, average_temp);
 80042ca:	eef0 0a49 	vmov.f32	s1, s18
 80042ce:	eeb0 0a69 	vmov.f32	s0, s19
 80042d2:	ab52      	add	r3, sp, #328	; 0x148
 80042d4:	462a      	mov	r2, r5
 80042d6:	a90f      	add	r1, sp, #60	; 0x3c
 80042d8:	a87f      	add	r0, sp, #508	; 0x1fc
 80042da:	f7ff ff5f 	bl	800419c <resetStateEstimation>
		reset_counter++;
 80042de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 80042e0:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 800449c <vTaskStateEst+0x2a4>
		reset_counter++;
 80042e4:	3301      	adds	r3, #1
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 80042e6:	4a60      	ldr	r2, [pc, #384]	; (8004468 <vTaskStateEst+0x270>)
 80042e8:	4659      	mov	r1, fp
 80042ea:	4860      	ldr	r0, [pc, #384]	; (800446c <vTaskStateEst+0x274>)
		reset_counter++;
 80042ec:	930c      	str	r3, [sp, #48]	; 0x30
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 80042ee:	2301      	movs	r3, #1
		ReadMutexStateEst(&sb2_mutex, &sb2_baro, &sb2_imu, &state_est_meas, 2);
 80042f0:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80044a0 <vTaskStateEst+0x2a8>
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	ab16      	add	r3, sp, #88	; 0x58
 80042f8:	f7fd fd96 	bl	8001e28 <ReadMutexStateEst>
		ReadMutexStateEst(&sb2_mutex, &sb2_baro, &sb2_imu, &state_est_meas, 2);
 80042fc:	2302      	movs	r3, #2
 80042fe:	4a5c      	ldr	r2, [pc, #368]	; (8004470 <vTaskStateEst+0x278>)
 8004300:	4651      	mov	r1, sl
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	ab16      	add	r3, sp, #88	; 0x58
 8004306:	485b      	ldr	r0, [pc, #364]	; (8004474 <vTaskStateEst+0x27c>)
 8004308:	f7fd fd8e 	bl	8001e28 <ReadMutexStateEst>
		ReadMutexStateEst(&sb3_mutex, &sb3_baro, &sb3_imu, &state_est_meas, 3);
 800430c:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80044a4 <vTaskStateEst+0x2ac>
 8004310:	2303      	movs	r3, #3
 8004312:	4a59      	ldr	r2, [pc, #356]	; (8004478 <vTaskStateEst+0x280>)
 8004314:	4649      	mov	r1, r9
 8004316:	4859      	ldr	r0, [pc, #356]	; (800447c <vTaskStateEst+0x284>)
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	ab16      	add	r3, sp, #88	; 0x58
 800431c:	f7fd fd84 	bl	8001e28 <ReadMutexStateEst>
		if(flight_phase_detection.flight_phase == IDLE){
 8004320:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d130      	bne.n	800438a <vTaskStateEst+0x192>
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 8004328:	f8da 2000 	ldr.w	r2, [sl]
			calibrate_count += 3;
 800432c:	3403      	adds	r4, #3
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 800432e:	f8db 3000 	ldr.w	r3, [fp]
			sum_temp += ((float)(sb1_baro.temperature + sb2_baro.temperature + sb3_baro.temperature))/100;
 8004332:	eddf 6a53 	vldr	s13, [pc, #332]	; 8004480 <vTaskStateEst+0x288>
			calibrate_count += 3;
 8004336:	b2a4      	uxth	r4, r4
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 8004338:	4413      	add	r3, r2
 800433a:	f8d9 2000 	ldr.w	r2, [r9]
			if(calibrate_count > 150){
 800433e:	2c96      	cmp	r4, #150	; 0x96
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 8004340:	4413      	add	r3, r2
			sum_temp += ((float)(sb1_baro.temperature + sb2_baro.temperature + sb3_baro.temperature))/100;
 8004342:	f8da 2004 	ldr.w	r2, [sl, #4]
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 8004346:	ee07 3a90 	vmov	s15, r3
			sum_temp += ((float)(sb1_baro.temperature + sb2_baro.temperature + sb3_baro.temperature))/100;
 800434a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800434e:	4413      	add	r3, r2
 8004350:	f8d9 2004 	ldr.w	r2, [r9, #4]
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 8004354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			sum_temp += ((float)(sb1_baro.temperature + sb2_baro.temperature + sb3_baro.temperature))/100;
 8004358:	4413      	add	r3, r2
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 800435a:	ee38 8a27 	vadd.f32	s16, s16, s15
			sum_temp += ((float)(sb1_baro.temperature + sb2_baro.temperature + sb3_baro.temperature))/100;
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004366:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800436a:	ee78 8a87 	vadd.f32	s17, s17, s14
			if(calibrate_count > 150){
 800436e:	d90c      	bls.n	800438a <vTaskStateEst+0x192>
				average_press = sum_press / (float)calibrate_count;
 8004370:	ee07 4a90 	vmov	s15, r4
				calibrate_count = 0;
 8004374:	2400      	movs	r4, #0
				average_press = sum_press / (float)calibrate_count;
 8004376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437a:	eec8 9a27 	vdiv.f32	s19, s16, s15
				sum_press = 0;
 800437e:	ed9f 8a38 	vldr	s16, [pc, #224]	; 8004460 <vTaskStateEst+0x268>
				average_temp = sum_temp / (float)calibrate_count;
 8004382:	ee88 9aa7 	vdiv.f32	s18, s17, s15
				sum_temp = 0;
 8004386:	eef0 8a48 	vmov.f32	s17, s16
		process_measurements(tick_count, &kf_state, &state_est_meas, &state_est_meas_prior, &env, &extrapolation_rolling_memory);
 800438a:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(flight_phase_detection));
 800438e:	230c      	movs	r3, #12
 8004390:	aa0f      	add	r2, sp, #60	; 0x3c
 8004392:	493c      	ldr	r1, [pc, #240]	; (8004484 <vTaskStateEst+0x28c>)
 8004394:	483c      	ldr	r0, [pc, #240]	; (8004488 <vTaskStateEst+0x290>)
 8004396:	f7fd fd30 	bl	8001dfa <ReadMutex>
		process_measurements(tick_count, &kf_state, &state_est_meas, &state_est_meas_prior, &env, &extrapolation_rolling_memory);
 800439a:	ab34      	add	r3, sp, #208	; 0xd0
 800439c:	aa16      	add	r2, sp, #88	; 0x58
 800439e:	a97f      	add	r1, sp, #508	; 0x1fc
 80043a0:	4638      	mov	r0, r7
 80043a2:	e9cd 5900 	strd	r5, r9, [sp]
 80043a6:	f7fd fa3b 	bl	8001820 <process_measurements>
		select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 80043aa:	464b      	mov	r3, r9
 80043ac:	462a      	mov	r2, r5
 80043ae:	a90f      	add	r1, sp, #60	; 0x3c
 80043b0:	a87f      	add	r0, sp, #508	; 0x1fc
 80043b2:	f7fd f96f 	bl	8001694 <select_noise_models>
		kf_prediction(&kf_state);
 80043b6:	a87f      	add	r0, sp, #508	; 0x1fc
 80043b8:	f7fd f82e 	bl	8001418 <kf_prediction>
		if (kf_state.num_z_active > 0) {
 80043bc:	f8dd 340c 	ldr.w	r3, [sp, #1036]	; 0x40c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	dd46      	ble.n	8004452 <vTaskStateEst+0x25a>
			select_kf_observation_matrices(&kf_state);
 80043c4:	a87f      	add	r0, sp, #508	; 0x1fc
 80043c6:	f7fd f878 	bl	80014ba <select_kf_observation_matrices>
			kf_update(&kf_state);
 80043ca:	a87f      	add	r0, sp, #508	; 0x1fc
 80043cc:	f7fd f8a0 	bl	8001510 <kf_update>
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 80043d0:	2278      	movs	r2, #120	; 0x78
 80043d2:	a916      	add	r1, sp, #88	; 0x58
 80043d4:	a834      	add	r0, sp, #208	; 0xd0
 80043d6:	f00e ff4f 	bl	8013278 <memcpy>
		if(AcquireMutex(&state_est_mutex) == osOK){
 80043da:	482c      	ldr	r0, [pc, #176]	; (800448c <vTaskStateEst+0x294>)
 80043dc:	f7fd fcff 	bl	8001dde <AcquireMutex>
 80043e0:	b930      	cbnz	r0, 80043f0 <vTaskStateEst+0x1f8>
			update_state_est_data(&state_est_data_global, &kf_state);
 80043e2:	4640      	mov	r0, r8
 80043e4:	a97f      	add	r1, sp, #508	; 0x1fc
 80043e6:	f7fd f933 	bl	8001650 <update_state_est_data>
			ReleaseMutex(&state_est_mutex);
 80043ea:	4828      	ldr	r0, [pc, #160]	; (800448c <vTaskStateEst+0x294>)
 80043ec:	f7fd fd02 	bl	8001df4 <ReleaseMutex>
		UsbPrint("[DBG] Height: %d; Velocity: %d; t: %lu\n", state_est_data_global.position_world[2],
 80043f0:	463b      	mov	r3, r7
 80043f2:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80043f6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80043fa:	4825      	ldr	r0, [pc, #148]	; (8004490 <vTaskStateEst+0x298>)
 80043fc:	f7fd fe78 	bl	80020f0 <UsbPrint>
		if(AcquireMutex(&fsm_mutex) == osOK){
 8004400:	4821      	ldr	r0, [pc, #132]	; (8004488 <vTaskStateEst+0x290>)
 8004402:	f7fd fcec 	bl	8001dde <AcquireMutex>
 8004406:	b940      	cbnz	r0, 800441a <vTaskStateEst+0x222>
			global_env = env;
 8004408:	f8df c09c 	ldr.w	ip, [pc, #156]	; 80044a8 <vTaskStateEst+0x2b0>
 800440c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004410:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			ReleaseMutex(&fsm_mutex);
 8004414:	481c      	ldr	r0, [pc, #112]	; (8004488 <vTaskStateEst+0x290>)
 8004416:	f7fd fced 	bl	8001df4 <ReleaseMutex>
		logEstimatorVar(osKernelGetTickCount(), state_est_data_global);
 800441a:	f00b fbd1 	bl	800fbc0 <osKernelGetTickCount>
 800441e:	f8df e08c 	ldr.w	lr, [pc, #140]	; 80044ac <vTaskStateEst+0x2b4>
 8004422:	4681      	mov	r9, r0
 8004424:	46ec      	mov	ip, sp
 8004426:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800442a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800442e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004432:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004436:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 800443a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800443e:	f1ae 032c 	sub.w	r3, lr, #44	; 0x2c
 8004442:	4648      	mov	r0, r9
 8004444:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004446:	f7fd fddf 	bl	8002008 <logEstimatorVar>
		osDelayUntil(tick_count);
 800444a:	4638      	mov	r0, r7
 800444c:	f00b fc40 	bl	800fcd0 <osDelayUntil>
		tick_count += tick_update;
 8004450:	e717      	b.n	8004282 <vTaskStateEst+0x8a>
			memcpy(kf_state.x_est, kf_state.x_priori, sizeof(kf_state.x_priori));
 8004452:	aacc      	add	r2, sp, #816	; 0x330
 8004454:	abc0      	add	r3, sp, #768	; 0x300
 8004456:	ca07      	ldmia	r2, {r0, r1, r2}
 8004458:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800445c:	e7b8      	b.n	80043d0 <vTaskStateEst+0x1d8>
 800445e:	bf00      	nop
 8004460:	00000000 	.word	0x00000000
 8004464:	2400c220 	.word	0x2400c220
 8004468:	2400024c 	.word	0x2400024c
 800446c:	24010428 	.word	0x24010428
 8004470:	24000268 	.word	0x24000268
 8004474:	2401cb0c 	.word	0x2401cb0c
 8004478:	24000284 	.word	0x24000284
 800447c:	2401059c 	.word	0x2401059c
 8004480:	42c80000 	.word	0x42c80000
 8004484:	24000234 	.word	0x24000234
 8004488:	24009cf8 	.word	0x24009cf8
 800448c:	240146b4 	.word	0x240146b4
 8004490:	080158a6 	.word	0x080158a6
 8004494:	24000294 	.word	0x24000294
 8004498:	240146e0 	.word	0x240146e0
 800449c:	24000240 	.word	0x24000240
 80044a0:	2400025c 	.word	0x2400025c
 80044a4:	24000278 	.word	0x24000278
 80044a8:	24000224 	.word	0x24000224
 80044ac:	240002a0 	.word	0x240002a0

080044b0 <HAL_UART_RxCpltCallback>:
		osDelayUntil(tick_count);
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	if(huart==&huart7){
 80044b0:	4b16      	ldr	r3, [pc, #88]	; (800450c <HAL_UART_RxCpltCallback+0x5c>)
 80044b2:	4283      	cmp	r3, r0
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80044b4:	b430      	push	{r4, r5}
	if(huart==&huart7){
 80044b6:	d126      	bne.n	8004506 <HAL_UART_RxCpltCallback+0x56>

		static uint8_t buffer [4];
		buffer[uart_counter] = local_command_rx;
 80044b8:	4915      	ldr	r1, [pc, #84]	; (8004510 <HAL_UART_RxCpltCallback+0x60>)
 80044ba:	4a16      	ldr	r2, [pc, #88]	; (8004514 <HAL_UART_RxCpltCallback+0x64>)
 80044bc:	680b      	ldr	r3, [r1, #0]
 80044be:	7814      	ldrb	r4, [r2, #0]
 80044c0:	4a15      	ldr	r2, [pc, #84]	; (8004518 <HAL_UART_RxCpltCallback+0x68>)
 80044c2:	54d4      	strb	r4, [r2, r3]
		uart_counter++;
 80044c4:	3301      	adds	r3, #1
		if(uart_counter == 4){
 80044c6:	2b04      	cmp	r3, #4
		uart_counter++;
 80044c8:	600b      	str	r3, [r1, #0]
		if(uart_counter == 4){
 80044ca:	d10e      	bne.n	80044ea <HAL_UART_RxCpltCallback+0x3a>
			uint8_t succesful = 1;
			for (int i = 1; i < 4; i++) if (buffer[0] != buffer[i]) succesful = 0;
 80044cc:	7810      	ldrb	r0, [r2, #0]
 80044ce:	7853      	ldrb	r3, [r2, #1]
 80044d0:	1a1d      	subs	r5, r3, r0
 80044d2:	426b      	negs	r3, r5
 80044d4:	416b      	adcs	r3, r5
 80044d6:	7895      	ldrb	r5, [r2, #2]
 80044d8:	78d2      	ldrb	r2, [r2, #3]
 80044da:	4285      	cmp	r5, r0
 80044dc:	bf18      	it	ne
 80044de:	2300      	movne	r3, #0
 80044e0:	4282      	cmp	r2, r0
 80044e2:	f04f 0200 	mov.w	r2, #0
			uart_counter = 0;
 80044e6:	600a      	str	r2, [r1, #0]
			for (int i = 1; i < 4; i++) if (buffer[0] != buffer[i]) succesful = 0;
 80044e8:	d005      	beq.n	80044f6 <HAL_UART_RxCpltCallback+0x46>
				new_command = true;
				local_command = local_command_rx;
			}
		}

		HAL_UART_Receive_IT(huart, (uint8_t*)&local_command_rx, 1);
 80044ea:	2201      	movs	r2, #1
 80044ec:	4909      	ldr	r1, [pc, #36]	; (8004514 <HAL_UART_RxCpltCallback+0x64>)
 80044ee:	4807      	ldr	r0, [pc, #28]	; (800450c <HAL_UART_RxCpltCallback+0x5c>)
	}
}
 80044f0:	bc30      	pop	{r4, r5}
		HAL_UART_Receive_IT(huart, (uint8_t*)&local_command_rx, 1);
 80044f2:	f007 b981 	b.w	800b7f8 <HAL_UART_Receive_IT>
			if (succesful) {
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f7      	beq.n	80044ea <HAL_UART_RxCpltCallback+0x3a>
				new_command = true;
 80044fa:	4b08      	ldr	r3, [pc, #32]	; (800451c <HAL_UART_RxCpltCallback+0x6c>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	701a      	strb	r2, [r3, #0]
				local_command = local_command_rx;
 8004500:	4b07      	ldr	r3, [pc, #28]	; (8004520 <HAL_UART_RxCpltCallback+0x70>)
 8004502:	701c      	strb	r4, [r3, #0]
 8004504:	e7f1      	b.n	80044ea <HAL_UART_RxCpltCallback+0x3a>
}
 8004506:	bc30      	pop	{r4, r5}
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	24009d90 	.word	0x24009d90
 8004510:	2400033c 	.word	0x2400033c
 8004514:	2401cfc9 	.word	0x2401cfc9
 8004518:	24000334 	.word	0x24000334
 800451c:	2400033a 	.word	0x2400033a
 8004520:	2401cfc8 	.word	0x2401cfc8

08004524 <calculate_checksum>:

uint8_t calculate_checksum(telemetry_t *cnf){
 8004524:	f100 025c 	add.w	r2, r0, #92	; 0x5c
	uint8_t cs=0;
 8004528:	2300      	movs	r3, #0
	uint8_t *data;
	data = (uint8_t*) cnf;
	for(int i=0; i< sizeof(telemetry_t);i++){
 800452a:	4290      	cmp	r0, r2
 800452c:	d102      	bne.n	8004534 <calculate_checksum+0x10>
		cs+=*data++;
	}
	return (255 - cs);
 800452e:	43d8      	mvns	r0, r3
}
 8004530:	b2c0      	uxtb	r0, r0
 8004532:	4770      	bx	lr
		cs+=*data++;
 8004534:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004538:	440b      	add	r3, r1
 800453a:	b2db      	uxtb	r3, r3
 800453c:	e7f5      	b.n	800452a <calculate_checksum+0x6>
	...

08004540 <vTaskXbee>:
void vTaskXbee(void *argument) {
 8004540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004544:	b0b5      	sub	sp, #212	; 0xd4
	telemetry_t telemetry_send = { 0 };
 8004546:	2100      	movs	r1, #0
 8004548:	225c      	movs	r2, #92	; 0x5c
	telemetry_send.flight_phase = IDLE;
 800454a:	2401      	movs	r4, #1
	telemetry_t telemetry_send = { 0 };
 800454c:	a81d      	add	r0, sp, #116	; 0x74
			buzzer_on_telemetry = !buzzer_on_telemetry;
 800454e:	f8df b350 	ldr.w	fp, [pc, #848]	; 80048a0 <vTaskXbee+0x360>
	telemetry_t telemetry_send = { 0 };
 8004552:	f00e fe9c 	bl	801328e <memset>
	telemetry_send.startbyte = 0x17;
 8004556:	2317      	movs	r3, #23
	local_command_rx = IDLE_COMMAND;
 8004558:	4ab8      	ldr	r2, [pc, #736]	; (800483c <vTaskXbee+0x2fc>)
	osDelay(700);
 800455a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
	telemetry_send.startbyte = 0x17;
 800455e:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
	local_command_rx = IDLE_COMMAND;
 8004562:	239b      	movs	r3, #155	; 0x9b
	telemetry_send.flight_phase = IDLE;
 8004564:	f88d 40c4 	strb.w	r4, [sp, #196]	; 0xc4
	local_command_rx = IDLE_COMMAND;
 8004568:	7013      	strb	r3, [r2, #0]
	local_command = IDLE_COMMAND;
 800456a:	4ab5      	ldr	r2, [pc, #724]	; (8004840 <vTaskXbee+0x300>)
 800456c:	7013      	strb	r3, [r2, #0]
	osDelay(700);
 800456e:	f00b fb95 	bl	800fc9c <osDelay>
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 8004572:	4622      	mov	r2, r4
 8004574:	2102      	movs	r1, #2
 8004576:	48b3      	ldr	r0, [pc, #716]	; (8004844 <vTaskXbee+0x304>)
	bool fast_sampling = false;
 8004578:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 800457a:	f003 fb5d 	bl	8007c38 <HAL_GPIO_WritePin>
	tick_update_slow = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 800457e:	f00b fb33 	bl	800fbe8 <osKernelGetTickFreq>
 8004582:	230a      	movs	r3, #10
	bool camera_ready = false;
 8004584:	46a2      	mov	sl, r4
	bool camera_wait = false;
 8004586:	46a1      	mov	r9, r4
	uint32_t camera_counter = 0;
 8004588:	4626      	mov	r6, r4
	uint8_t buzzercounter = 0;
 800458a:	4625      	mov	r5, r4
	tick_update_slow = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 800458c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004590:	9303      	str	r3, [sp, #12]
	tick_update_fast = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ_HIGH;
 8004592:	f00b fb29 	bl	800fbe8 <osKernelGetTickFreq>
 8004596:	2364      	movs	r3, #100	; 0x64
 8004598:	fbb0 f3f3 	udiv	r3, r0, r3
 800459c:	9304      	str	r3, [sp, #16]
	tick_count = osKernelGetTickCount();
 800459e:	f00b fb0f 	bl	800fbc0 <osKernelGetTickCount>
 80045a2:	4680      	mov	r8, r0
	bool camera_trigger = false;
 80045a4:	9402      	str	r4, [sp, #8]
	bool camera_enabled = false;
 80045a6:	9401      	str	r4, [sp, #4]
		if(fast_sampling){
 80045a8:	2c00      	cmp	r4, #0
 80045aa:	f000 812e 	beq.w	800480a <vTaskXbee+0x2ca>
			tick_count += tick_update_fast;
 80045ae:	9b04      	ldr	r3, [sp, #16]
			tick_count += tick_update_slow;
 80045b0:	4498      	add	r8, r3
		HAL_UART_Receive_IT(&huart7, (uint8_t*)&local_command_rx, 1);
 80045b2:	4ba2      	ldr	r3, [pc, #648]	; (800483c <vTaskXbee+0x2fc>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	48a4      	ldr	r0, [pc, #656]	; (8004848 <vTaskXbee+0x308>)
 80045b8:	4619      	mov	r1, r3
 80045ba:	9305      	str	r3, [sp, #20]
		UsbPrint("[Telemetry] ts: %u, Received Commmand: %u, Rx_buffer; %u\n",
 80045bc:	4fa0      	ldr	r7, [pc, #640]	; (8004840 <vTaskXbee+0x300>)
		HAL_UART_Receive_IT(&huart7, (uint8_t*)&local_command_rx, 1);
 80045be:	f007 f91b 	bl	800b7f8 <HAL_UART_Receive_IT>
		UsbPrint("[Telemetry] ts: %u, Received Commmand: %u, Rx_buffer; %u\n",
 80045c2:	9b05      	ldr	r3, [sp, #20]
 80045c4:	783a      	ldrb	r2, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80045ca:	48a0      	ldr	r0, [pc, #640]	; (800484c <vTaskXbee+0x30c>)
 80045cc:	f7fd fd90 	bl	80020f0 <UsbPrint>
		if(AcquireMutex(&command_mutex) == osOK){
 80045d0:	489f      	ldr	r0, [pc, #636]	; (8004850 <vTaskXbee+0x310>)
 80045d2:	f7fd fc04 	bl	8001dde <AcquireMutex>
 80045d6:	b928      	cbnz	r0, 80045e4 <vTaskXbee+0xa4>
			global_telemetry_command = local_command;
 80045d8:	783a      	ldrb	r2, [r7, #0]
 80045da:	4b9e      	ldr	r3, [pc, #632]	; (8004854 <vTaskXbee+0x314>)
			ReleaseMutex(&command_mutex);
 80045dc:	489c      	ldr	r0, [pc, #624]	; (8004850 <vTaskXbee+0x310>)
			global_telemetry_command = local_command;
 80045de:	701a      	strb	r2, [r3, #0]
			ReleaseMutex(&command_mutex);
 80045e0:	f7fd fc08 	bl	8001df4 <ReleaseMutex>
		if(local_command == TELEMETRY_HIGH_SAMPLING){
 80045e4:	783b      	ldrb	r3, [r7, #0]
 80045e6:	2b0d      	cmp	r3, #13
 80045e8:	f000 8111 	beq.w	800480e <vTaskXbee+0x2ce>
		if(local_command == TELEMETRY_LOW_SAMPLING){
 80045ec:	2bc5      	cmp	r3, #197	; 0xc5
 80045ee:	f000 8110 	beq.w	8004812 <vTaskXbee+0x2d2>
		if(local_command == ENABLE_BUZZER){
 80045f2:	2b71      	cmp	r3, #113	; 0x71
 80045f4:	d105      	bne.n	8004602 <vTaskXbee+0xc2>
			buzzer_on_telemetry = !buzzer_on_telemetry;
 80045f6:	f89b 2000 	ldrb.w	r2, [fp]
 80045fa:	f082 0201 	eor.w	r2, r2, #1
 80045fe:	f88b 2000 	strb.w	r2, [fp]
		if(telemetry_send.flight_phase == RECOVERY){
 8004602:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8004606:	2a06      	cmp	r2, #6
 8004608:	f040 8114 	bne.w	8004834 <vTaskXbee+0x2f4>
			buzzer_on_fsm = true;
 800460c:	2201      	movs	r2, #1
 800460e:	4992      	ldr	r1, [pc, #584]	; (8004858 <vTaskXbee+0x318>)
		if(local_command == TELEMETRY_HIGH_SAMPLING){
 8004610:	2b0d      	cmp	r3, #13
			buzzer_on_fsm = true;
 8004612:	700a      	strb	r2, [r1, #0]
		if(local_command == TELEMETRY_HIGH_SAMPLING){
 8004614:	d108      	bne.n	8004628 <vTaskXbee+0xe8>
			HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 8004616:	2200      	movs	r2, #0
 8004618:	2102      	movs	r1, #2
 800461a:	488a      	ldr	r0, [pc, #552]	; (8004844 <vTaskXbee+0x304>)
 800461c:	f003 fb0c 	bl	8007c38 <HAL_GPIO_WritePin>
		if(telemetry_send.flight_phase == RECOVERY){
 8004620:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8004624:	2b06      	cmp	r3, #6
 8004626:	d100      	bne.n	800462a <vTaskXbee+0xea>
			fast_sampling = false;
 8004628:	2400      	movs	r4, #0
		if(local_command == DISABLE_SELF_HOLD){
 800462a:	783b      	ldrb	r3, [r7, #0]
 800462c:	2bfb      	cmp	r3, #251	; 0xfb
 800462e:	d104      	bne.n	800463a <vTaskXbee+0xfa>
			HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 8004630:	2201      	movs	r2, #1
 8004632:	2102      	movs	r1, #2
 8004634:	4883      	ldr	r0, [pc, #524]	; (8004844 <vTaskXbee+0x304>)
 8004636:	f003 faff 	bl	8007c38 <HAL_GPIO_WritePin>
		if(new_command){
 800463a:	4b88      	ldr	r3, [pc, #544]	; (800485c <vTaskXbee+0x31c>)
 800463c:	781a      	ldrb	r2, [r3, #0]
 800463e:	b11a      	cbz	r2, 8004648 <vTaskXbee+0x108>
			local_command = IDLE_COMMAND;
 8004640:	229b      	movs	r2, #155	; 0x9b
 8004642:	703a      	strb	r2, [r7, #0]
			new_command = false;
 8004644:	2200      	movs	r2, #0
 8004646:	701a      	strb	r2, [r3, #0]
		if((local_command == ENABLE_CAMERA) && !camera_enabled){
 8004648:	783b      	ldrb	r3, [r7, #0]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d113      	bne.n	8004676 <vTaskXbee+0x136>
 800464e:	9b01      	ldr	r3, [sp, #4]
 8004650:	b98b      	cbnz	r3, 8004676 <vTaskXbee+0x136>
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_SET);
 8004652:	2201      	movs	r2, #1
 8004654:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004658:	4881      	ldr	r0, [pc, #516]	; (8004860 <vTaskXbee+0x320>)
 800465a:	f003 faed 	bl	8007c38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_SET);
 800465e:	2201      	movs	r2, #1
 8004660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004664:	487e      	ldr	r0, [pc, #504]	; (8004860 <vTaskXbee+0x320>)
 8004666:	f003 fae7 	bl	8007c38 <HAL_GPIO_WritePin>
			camera_counter = osKernelGetTickCount() + CAMERA_ON;
 800466a:	f00b faa9 	bl	800fbc0 <osKernelGetTickCount>
			camera_enabled = true;
 800466e:	2301      	movs	r3, #1
			camera_counter = osKernelGetTickCount() + CAMERA_ON;
 8004670:	f600 56ac 	addw	r6, r0, #3500	; 0xdac
			camera_enabled = true;
 8004674:	9301      	str	r3, [sp, #4]
		if((camera_counter > osKernelGetTickCount()) && !camera_wait){
 8004676:	f00b faa3 	bl	800fbc0 <osKernelGetTickCount>
 800467a:	42b0      	cmp	r0, r6
 800467c:	d214      	bcs.n	80046a8 <vTaskXbee+0x168>
 800467e:	f1b9 0f00 	cmp.w	r9, #0
 8004682:	d111      	bne.n	80046a8 <vTaskXbee+0x168>
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_RESET);
 8004684:	464a      	mov	r2, r9
 8004686:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800468a:	4875      	ldr	r0, [pc, #468]	; (8004860 <vTaskXbee+0x320>)
 800468c:	f003 fad4 	bl	8007c38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 8004690:	464a      	mov	r2, r9
 8004692:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004696:	4872      	ldr	r0, [pc, #456]	; (8004860 <vTaskXbee+0x320>)
 8004698:	f003 face 	bl	8007c38 <HAL_GPIO_WritePin>
			camera_wait = true;
 800469c:	f04f 0901 	mov.w	r9, #1
			camera_counter = osKernelGetTickCount() + CAMERA_WAIT;
 80046a0:	f00b fa8e 	bl	800fbc0 <osKernelGetTickCount>
 80046a4:	f500 767a 	add.w	r6, r0, #1000	; 0x3e8
		if((camera_counter > osKernelGetTickCount()) && !camera_trigger){
 80046a8:	f00b fa8a 	bl	800fbc0 <osKernelGetTickCount>
 80046ac:	42b0      	cmp	r0, r6
 80046ae:	d213      	bcs.n	80046d8 <vTaskXbee+0x198>
 80046b0:	9b02      	ldr	r3, [sp, #8]
 80046b2:	b98b      	cbnz	r3, 80046d8 <vTaskXbee+0x198>
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_SET);
 80046b4:	2201      	movs	r2, #1
 80046b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80046ba:	4869      	ldr	r0, [pc, #420]	; (8004860 <vTaskXbee+0x320>)
 80046bc:	f003 fabc 	bl	8007c38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_SET);
 80046c0:	2201      	movs	r2, #1
 80046c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046c6:	4866      	ldr	r0, [pc, #408]	; (8004860 <vTaskXbee+0x320>)
 80046c8:	f003 fab6 	bl	8007c38 <HAL_GPIO_WritePin>
			camera_counter = osKernelGetTickCount() + CAMERA_TRIGGER;
 80046cc:	f00b fa78 	bl	800fbc0 <osKernelGetTickCount>
			camera_trigger = true;
 80046d0:	2301      	movs	r3, #1
			camera_counter = osKernelGetTickCount() + CAMERA_TRIGGER;
 80046d2:	f100 06c8 	add.w	r6, r0, #200	; 0xc8
			camera_trigger = true;
 80046d6:	9302      	str	r3, [sp, #8]
		if((camera_counter > osKernelGetTickCount()) && !camera_ready){
 80046d8:	f00b fa72 	bl	800fbc0 <osKernelGetTickCount>
 80046dc:	42b0      	cmp	r0, r6
 80046de:	d210      	bcs.n	8004702 <vTaskXbee+0x1c2>
 80046e0:	f1ba 0f00 	cmp.w	sl, #0
 80046e4:	d10d      	bne.n	8004702 <vTaskXbee+0x1c2>
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_RESET);
 80046e6:	4652      	mov	r2, sl
 80046e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80046ec:	485c      	ldr	r0, [pc, #368]	; (8004860 <vTaskXbee+0x320>)
 80046ee:	f003 faa3 	bl	8007c38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 80046f2:	4652      	mov	r2, sl
			camera_ready = true;
 80046f4:	f04f 0a01 	mov.w	sl, #1
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 80046f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046fc:	4858      	ldr	r0, [pc, #352]	; (8004860 <vTaskXbee+0x320>)
 80046fe:	f003 fa9b 	bl	8007c38 <HAL_GPIO_WritePin>
		if(buzzer_on_fsm ^ buzzer_on_telemetry){
 8004702:	4b55      	ldr	r3, [pc, #340]	; (8004858 <vTaskXbee+0x318>)
 8004704:	781a      	ldrb	r2, [r3, #0]
 8004706:	f89b 3000 	ldrb.w	r3, [fp]
 800470a:	429a      	cmp	r2, r3
 800470c:	f000 8085 	beq.w	800481a <vTaskXbee+0x2da>
 8004710:	f44f 73c8 	mov.w	r3, #400	; 0x190
			if(fast_sampling){
 8004714:	2c00      	cmp	r4, #0
 8004716:	d07e      	beq.n	8004816 <vTaskXbee+0x2d6>
				if(buzzercounter > (400/tick_update_fast)){
 8004718:	9a04      	ldr	r2, [sp, #16]
 800471a:	fbb3 f3f2 	udiv	r3, r3, r2
 800471e:	42ab      	cmp	r3, r5
 8004720:	d205      	bcs.n	800472e <vTaskXbee+0x1ee>
					buzzercounter = 0;
 8004722:	2500      	movs	r5, #0
					HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8004724:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004728:	484e      	ldr	r0, [pc, #312]	; (8004864 <vTaskXbee+0x324>)
 800472a:	f003 fa8a 	bl	8007c42 <HAL_GPIO_TogglePin>
		ReadMutex(&sb1_mutex, &sb1_baro, &local_sb_data.baro, sizeof(sb1_baro));
 800472e:	aa06      	add	r2, sp, #24
 8004730:	230c      	movs	r3, #12
 8004732:	494d      	ldr	r1, [pc, #308]	; (8004868 <vTaskXbee+0x328>)
		buzzercounter++;
 8004734:	3501      	adds	r5, #1
		ReadMutex(&sb1_mutex, &sb1_baro, &local_sb_data.baro, sizeof(sb1_baro));
 8004736:	484d      	ldr	r0, [pc, #308]	; (800486c <vTaskXbee+0x32c>)
 8004738:	f7fd fb5f 	bl	8001dfa <ReadMutex>
		ReadMutex(&sb1_mutex, &sb1_imu, &local_sb_data.imu, sizeof(sb1_imu));
 800473c:	aa09      	add	r2, sp, #36	; 0x24
 800473e:	2310      	movs	r3, #16
 8004740:	494b      	ldr	r1, [pc, #300]	; (8004870 <vTaskXbee+0x330>)
 8004742:	484a      	ldr	r0, [pc, #296]	; (800486c <vTaskXbee+0x32c>)
		buzzercounter++;
 8004744:	b2ed      	uxtb	r5, r5
		ReadMutex(&sb1_mutex, &sb1_imu, &local_sb_data.imu, sizeof(sb1_imu));
 8004746:	f7fd fb58 	bl	8001dfa <ReadMutex>
		telemetry_send.sb_data.pressure = local_sb_data.baro.pressure;
 800474a:	9b06      	ldr	r3, [sp, #24]
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data, sizeof(state_est_data));
 800474c:	aa0e      	add	r2, sp, #56	; 0x38
 800474e:	4949      	ldr	r1, [pc, #292]	; (8004874 <vTaskXbee+0x334>)
		telemetry_send.sb_data.pressure = local_sb_data.baro.pressure;
 8004750:	931e      	str	r3, [sp, #120]	; 0x78
		telemetry_send.sb_data.temperature = local_sb_data.baro.temperature;
 8004752:	9b07      	ldr	r3, [sp, #28]
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data, sizeof(state_est_data));
 8004754:	4848      	ldr	r0, [pc, #288]	; (8004878 <vTaskXbee+0x338>)
		telemetry_send.sb_data.temperature = local_sb_data.baro.temperature;
 8004756:	931f      	str	r3, [sp, #124]	; 0x7c
		telemetry_send.sb_data.acc_x = local_sb_data.imu.acc_x;
 8004758:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800475c:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
		telemetry_send.sb_data.acc_y = local_sb_data.imu.acc_y;
 8004760:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8004764:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
		telemetry_send.sb_data.acc_z = local_sb_data.imu.acc_z;
 8004768:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800476c:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
		telemetry_send.sb_data.gyro_x = local_sb_data.imu.gyro_x;
 8004770:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8004774:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
		telemetry_send.sb_data.gyro_y = local_sb_data.imu.gyro_y;
 8004778:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800477c:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
		telemetry_send.sb_data.gyro_z = local_sb_data.imu.gyro_z;
 8004780:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8004784:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data, sizeof(state_est_data));
 8004788:	233c      	movs	r3, #60	; 0x3c
 800478a:	f7fd fb36 	bl	8001dfa <ReadMutex>
		ReadMutex(&motor_mutex, &global_airbrake_extension, &telemetry_send.airbrake_extension, sizeof(global_airbrake_extension));
 800478e:	aa30      	add	r2, sp, #192	; 0xc0
 8004790:	2304      	movs	r3, #4
 8004792:	493a      	ldr	r1, [pc, #232]	; (800487c <vTaskXbee+0x33c>)
 8004794:	483a      	ldr	r0, [pc, #232]	; (8004880 <vTaskXbee+0x340>)
 8004796:	f7fd fb30 	bl	8001dfa <ReadMutex>
		ReadMutex(&fsm_mutex, &global_flight_phase_detection.flight_phase, &telemetry_send.flight_phase, sizeof(global_flight_phase_detection.flight_phase));
 800479a:	aa31      	add	r2, sp, #196	; 0xc4
 800479c:	2301      	movs	r3, #1
 800479e:	4939      	ldr	r1, [pc, #228]	; (8004884 <vTaskXbee+0x344>)
 80047a0:	4839      	ldr	r0, [pc, #228]	; (8004888 <vTaskXbee+0x348>)
 80047a2:	f7fd fb2a 	bl	8001dfa <ReadMutex>
		ReadMutex(&gps_mutex, &globalGPS, &telemetry_send.gps, sizeof(globalGPS));
 80047a6:	aa25      	add	r2, sp, #148	; 0x94
 80047a8:	2324      	movs	r3, #36	; 0x24
 80047aa:	4938      	ldr	r1, [pc, #224]	; (800488c <vTaskXbee+0x34c>)
 80047ac:	4838      	ldr	r0, [pc, #224]	; (8004890 <vTaskXbee+0x350>)
 80047ae:	f7fd fb24 	bl	8001dfa <ReadMutex>
		ReadMutex(&battery_mutex, &global_battery_data, &telemetry_send.battery, sizeof(global_battery_data));
 80047b2:	aa23      	add	r2, sp, #140	; 0x8c
 80047b4:	4937      	ldr	r1, [pc, #220]	; (8004894 <vTaskXbee+0x354>)
 80047b6:	2306      	movs	r3, #6
 80047b8:	4837      	ldr	r0, [pc, #220]	; (8004898 <vTaskXbee+0x358>)
 80047ba:	f7fd fb1e 	bl	8001dfa <ReadMutex>
		telemetry_send.height = state_est_data.position_world[2];
 80047be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80047c0:	932e      	str	r3, [sp, #184]	; 0xb8
		telemetry_send.velocity = state_est_data.velocity_world[2];
 80047c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047c4:	932f      	str	r3, [sp, #188]	; 0xbc
		telemetry_send.ts = osKernelGetTickCount();
 80047c6:	f00b f9fb 	bl	800fbc0 <osKernelGetTickCount>
		telemetry_send.flight_phase = telemetry_send.flight_phase + 128*(buzzer_on_fsm ^ buzzer_on_telemetry);
 80047ca:	4b23      	ldr	r3, [pc, #140]	; (8004858 <vTaskXbee+0x318>)
 80047cc:	f89b 2000 	ldrb.w	r2, [fp]
 80047d0:	781b      	ldrb	r3, [r3, #0]
		telemetry_send.ts = osKernelGetTickCount();
 80047d2:	9032      	str	r0, [sp, #200]	; 0xc8
		telemetry_send.checksum = calculate_checksum(&telemetry_send);
 80047d4:	a81d      	add	r0, sp, #116	; 0x74
		telemetry_send.flight_phase = telemetry_send.flight_phase + 128*(buzzer_on_fsm ^ buzzer_on_telemetry);
 80047d6:	405a      	eors	r2, r3
 80047d8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80047dc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80047e0:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
		telemetry_send.checksum = calculate_checksum(&telemetry_send);
 80047e4:	f7ff fe9e 	bl	8004524 <calculate_checksum>
		HAL_UART_Transmit(&huart7, (uint8_t*) &telemetry_send, sizeof(telemetry_send), 100);
 80047e8:	2364      	movs	r3, #100	; 0x64
		telemetry_send.checksum = calculate_checksum(&telemetry_send);
 80047ea:	f88d 00cc 	strb.w	r0, [sp, #204]	; 0xcc
		HAL_UART_Transmit(&huart7, (uint8_t*) &telemetry_send, sizeof(telemetry_send), 100);
 80047ee:	225c      	movs	r2, #92	; 0x5c
 80047f0:	a91d      	add	r1, sp, #116	; 0x74
 80047f2:	4815      	ldr	r0, [pc, #84]	; (8004848 <vTaskXbee+0x308>)
 80047f4:	f007 fd06 	bl	800c204 <HAL_UART_Transmit>
		telemetry_send.checksum = 0;
 80047f8:	2300      	movs	r3, #0
		uart_counter = 0;
 80047fa:	4a28      	ldr	r2, [pc, #160]	; (800489c <vTaskXbee+0x35c>)
		osDelayUntil(tick_count);
 80047fc:	4640      	mov	r0, r8
		telemetry_send.checksum = 0;
 80047fe:	f88d 30cc 	strb.w	r3, [sp, #204]	; 0xcc
		uart_counter = 0;
 8004802:	6013      	str	r3, [r2, #0]
		osDelayUntil(tick_count);
 8004804:	f00b fa64 	bl	800fcd0 <osDelayUntil>
		if(fast_sampling){
 8004808:	e6ce      	b.n	80045a8 <vTaskXbee+0x68>
			tick_count += tick_update_slow;
 800480a:	9b03      	ldr	r3, [sp, #12]
 800480c:	e6d0      	b.n	80045b0 <vTaskXbee+0x70>
			fast_sampling = true;
 800480e:	2401      	movs	r4, #1
 8004810:	e6f7      	b.n	8004602 <vTaskXbee+0xc2>
			fast_sampling = false;
 8004812:	2400      	movs	r4, #0
 8004814:	e6f5      	b.n	8004602 <vTaskXbee+0xc2>
				if(buzzercounter > (400/tick_update_slow)){
 8004816:	9a03      	ldr	r2, [sp, #12]
 8004818:	e77f      	b.n	800471a <vTaskXbee+0x1da>
		else if(osKernelGetTickCount() > 5000){
 800481a:	f00b f9d1 	bl	800fbc0 <osKernelGetTickCount>
 800481e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004822:	4298      	cmp	r0, r3
 8004824:	d983      	bls.n	800472e <vTaskXbee+0x1ee>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004826:	2200      	movs	r2, #0
 8004828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800482c:	480d      	ldr	r0, [pc, #52]	; (8004864 <vTaskXbee+0x324>)
 800482e:	f003 fa03 	bl	8007c38 <HAL_GPIO_WritePin>
 8004832:	e77c      	b.n	800472e <vTaskXbee+0x1ee>
		if(local_command == TELEMETRY_HIGH_SAMPLING){
 8004834:	2b0d      	cmp	r3, #13
 8004836:	f47f aef8 	bne.w	800462a <vTaskXbee+0xea>
 800483a:	e6ec      	b.n	8004616 <vTaskXbee+0xd6>
 800483c:	2401cfc9 	.word	0x2401cfc9
 8004840:	2401cfc8 	.word	0x2401cfc8
 8004844:	58020400 	.word	0x58020400
 8004848:	24009d90 	.word	0x24009d90
 800484c:	080158ce 	.word	0x080158ce
 8004850:	2400c220 	.word	0x2400c220
 8004854:	240146e0 	.word	0x240146e0
 8004858:	24000338 	.word	0x24000338
 800485c:	2400033a 	.word	0x2400033a
 8004860:	58021000 	.word	0x58021000
 8004864:	58020c00 	.word	0x58020c00
 8004868:	24000240 	.word	0x24000240
 800486c:	24010428 	.word	0x24010428
 8004870:	2400024c 	.word	0x2400024c
 8004874:	24000294 	.word	0x24000294
 8004878:	240146b4 	.word	0x240146b4
 800487c:	24018834 	.word	0x24018834
 8004880:	24009e94 	.word	0x24009e94
 8004884:	24000234 	.word	0x24000234
 8004888:	24009cf8 	.word	0x24009cf8
 800488c:	240146bc 	.word	0x240146bc
 8004890:	24018744 	.word	0x24018744
 8004894:	2400e2c4 	.word	0x2400e2c4
 8004898:	24009d88 	.word	0x24009d88
 800489c:	2400033c 	.word	0x2400033c
 80048a0:	24000339 	.word	0x24000339

080048a4 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
 80048a4:	f00c bd9c 	b.w	80113e0 <ucQueueGetQueueType>

080048a8 <prvTraceGetTaskNumberLow16>:
}

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 80048a8:	b508      	push	{r3, lr}
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 80048aa:	f00d fc33 	bl	8012114 <uxTaskGetTaskNumber>
}
 80048ae:	b280      	uxth	r0, r0
 80048b0:	bd08      	pop	{r3, pc}

080048b2 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 80048b2:	b508      	push	{r3, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 80048b4:	f00d fc2e 	bl	8012114 <uxTaskGetTaskNumber>
}
 80048b8:	0c00      	lsrs	r0, r0, #16
 80048ba:	bd08      	pop	{r3, pc}

080048bc <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 80048bc:	b538      	push	{r3, r4, r5, lr}
 80048be:	4604      	mov	r4, r0
 80048c0:	460d      	mov	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 80048c2:	f00d fc27 	bl	8012114 <uxTaskGetTaskNumber>
 80048c6:	0c00      	lsrs	r0, r0, #16
 80048c8:	0400      	lsls	r0, r0, #16
 80048ca:	ea40 0105 	orr.w	r1, r0, r5
 80048ce:	4620      	mov	r0, r4
}
 80048d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 80048d4:	f00d bc21 	b.w	801211a <vTaskSetTaskNumber>

080048d8 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4604      	mov	r4, r0
 80048dc:	460d      	mov	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 80048de:	f00d fc19 	bl	8012114 <uxTaskGetTaskNumber>
 80048e2:	b280      	uxth	r0, r0
 80048e4:	ea40 4105 	orr.w	r1, r0, r5, lsl #16
 80048e8:	4620      	mov	r0, r4
}
 80048ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 80048ee:	f00d bc14 	b.w	801211a <vTaskSetTaskNumber>

080048f2 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
 80048f2:	b508      	push	{r3, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
 80048f4:	f00c fd70 	bl	80113d8 <uxQueueGetQueueNumber>
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
}
 80048f8:	b280      	uxth	r0, r0
 80048fa:	bd08      	pop	{r3, pc}

080048fc <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 80048fc:	b508      	push	{r3, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
 80048fe:	f00c fd6b 	bl	80113d8 <uxQueueGetQueueNumber>
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
}
 8004902:	0c00      	lsrs	r0, r0, #16
 8004904:	bd08      	pop	{r3, pc}

08004906 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
 8004906:	b538      	push	{r3, r4, r5, lr}
 8004908:	4604      	mov	r4, r0
 800490a:	460d      	mov	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
 800490c:	f00c fd64 	bl	80113d8 <uxQueueGetQueueNumber>
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 8004910:	0c00      	lsrs	r0, r0, #16
 8004912:	0400      	lsls	r0, r0, #16
 8004914:	ea40 0105 	orr.w	r1, r0, r5
 8004918:	4620      	mov	r0, r4
}
 800491a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 800491e:	f00c bd5d 	b.w	80113dc <vQueueSetQueueNumber>

08004922 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 8004922:	b538      	push	{r3, r4, r5, lr}
 8004924:	4604      	mov	r4, r0
 8004926:	460d      	mov	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8004928:	f00c fd56 	bl	80113d8 <uxQueueGetQueueNumber>
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 800492c:	b280      	uxth	r0, r0
 800492e:	ea40 4105 	orr.w	r1, r0, r5, lsl #16
 8004932:	4620      	mov	r0, r4
}
 8004934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 8004938:	f00c bd50 	b.w	80113dc <vQueueSetQueueNumber>

0800493c <prvAddTaskToStackMonitor>:
{
	int i;
	int foundEmptySlot = 0;

	// find an empty slot
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 800493c:	2300      	movs	r3, #0
	{
		if (tasksInStackMonitor[i].tcb == NULL)
 800493e:	4a0a      	ldr	r2, [pc, #40]	; (8004968 <prvAddTaskToStackMonitor+0x2c>)
{
 8004940:	b510      	push	{r4, lr}
		if (tasksInStackMonitor[i].tcb == NULL)
 8004942:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8004946:	00d9      	lsls	r1, r3, #3
 8004948:	b934      	cbnz	r4, 8004958 <prvAddTaskToStackMonitor+0x1c>
		{
			tasksInStackMonitor[i].tcb = task;
 800494a:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
 800494e:	440a      	add	r2, r1
 8004950:	f04f 33ff 	mov.w	r3, #4294967295
 8004954:	6053      	str	r3, [r2, #4]

	if (foundEmptySlot == 0)
	{
		tasksNotIncluded++;
	}
}
 8004956:	bd10      	pop	{r4, pc}
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 8004958:	3301      	adds	r3, #1
 800495a:	2b0a      	cmp	r3, #10
 800495c:	d1f1      	bne.n	8004942 <prvAddTaskToStackMonitor+0x6>
		tasksNotIncluded++;
 800495e:	4a03      	ldr	r2, [pc, #12]	; (800496c <prvAddTaskToStackMonitor+0x30>)
 8004960:	6813      	ldr	r3, [r2, #0]
 8004962:	3301      	adds	r3, #1
 8004964:	6013      	str	r3, [r2, #0]
}
 8004966:	e7f6      	b.n	8004956 <prvAddTaskToStackMonitor+0x1a>
 8004968:	24000748 	.word	0x24000748
 800496c:	24000798 	.word	0x24000798

08004970 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
 8004970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
 8004972:	4c15      	ldr	r4, [pc, #84]	; (80049c8 <prvReportStackUsage+0x58>)
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
 8004974:	4d15      	ldr	r5, [pc, #84]	; (80049cc <prvReportStackUsage+0x5c>)
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
 8004976:	6827      	ldr	r7, [r4, #0]
 8004978:	462e      	mov	r6, r5
		if (tasksInStackMonitor[i].tcb != NULL)
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	f855 0033 	ldr.w	r0, [r5, r3, lsl #3]
 8004980:	b1b0      	cbz	r0, 80049b0 <prvReportStackUsage+0x40>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
 8004982:	f00d fbcd 	bl	8012120 <uxTaskGetStackHighWaterMark>

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800498c:	6851      	ldr	r1, [r2, #4]
 800498e:	4281      	cmp	r1, r0
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
 8004990:	bf88      	it	hi
 8004992:	6050      	strhi	r0, [r2, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 8004994:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
 8004998:	f00d fbbc 	bl	8012114 <uxTaskGetTaskNumber>

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	b2c2      	uxtb	r2, r0
 80049a0:	2103      	movs	r1, #3
 80049a2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80049a6:	20ea      	movs	r0, #234	; 0xea
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f000 fe67 	bl	800567c <prvTraceStoreKernelCallWithParam>
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
 80049ae:	2001      	movs	r0, #1
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	210a      	movs	r1, #10
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	fb92 f3f1 	sdiv	r3, r2, r1
 80049ba:	fb01 2313 	mls	r3, r1, r3, r2
 80049be:	6023      	str	r3, [r4, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
 80049c0:	b908      	cbnz	r0, 80049c6 <prvReportStackUsage+0x56>
 80049c2:	42bb      	cmp	r3, r7
 80049c4:	d1d9      	bne.n	800497a <prvReportStackUsage+0xa>
}
 80049c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049c8:	24000344 	.word	0x24000344
 80049cc:	24000748 	.word	0x24000748

080049d0 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
 80049d0:	b508      	push	{r3, lr}
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
 80049d2:	f000 f929 	bl	8004c28 <xTraceIsRecordingEnabled>
 80049d6:	b108      	cbz	r0, 80049dc <TzCtrl+0xc>
		{
			prvReportStackUsage();
 80049d8:	f7ff ffca 	bl	8004970 <prvReportStackUsage>
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 80049dc:	200a      	movs	r0, #10
 80049de:	f00d f9fd 	bl	8011ddc <vTaskDelay>
		if (xTraceIsRecordingEnabled())
 80049e2:	e7f6      	b.n	80049d2 <TzCtrl+0x2>

080049e4 <prvTraceGetCurrentTaskHandle>:
	return xTaskGetCurrentTaskHandle();
 80049e4:	f00d bbac 	b.w	8012140 <xTaskGetCurrentTaskHandle>

080049e8 <vTraceEnable>:
{
 80049e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049ea:	4604      	mov	r4, r0
	prvTraceInitTraceData();
 80049ec:	f000 fc34 	bl	8005258 <prvTraceInitTraceData>
	if (startOption == TRC_START)
 80049f0:	2c01      	cmp	r4, #1
 80049f2:	d113      	bne.n	8004a1c <vTraceEnable+0x34>
		vTraceStart();
 80049f4:	f000 ff8c 	bl	8005910 <vTraceStart>
	if (HandleTzCtrl == NULL)
 80049f8:	4c0d      	ldr	r4, [pc, #52]	; (8004a30 <vTraceEnable+0x48>)
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	b963      	cbnz	r3, 8004a18 <vTraceEnable+0x30>
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
 80049fe:	4a0d      	ldr	r2, [pc, #52]	; (8004a34 <vTraceEnable+0x4c>)
 8004a00:	490d      	ldr	r1, [pc, #52]	; (8004a38 <vTraceEnable+0x50>)
 8004a02:	9202      	str	r2, [sp, #8]
 8004a04:	4a0d      	ldr	r2, [pc, #52]	; (8004a3c <vTraceEnable+0x54>)
 8004a06:	480e      	ldr	r0, [pc, #56]	; (8004a40 <vTraceEnable+0x58>)
 8004a08:	9201      	str	r2, [sp, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	9200      	str	r2, [sp, #0]
 8004a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a12:	f00c ff69 	bl	80118e8 <xTaskCreateStatic>
 8004a16:	6020      	str	r0, [r4, #0]
}
 8004a18:	b004      	add	sp, #16
 8004a1a:	bd10      	pop	{r4, pc}
	else if (startOption == TRC_START_AWAIT_HOST)
 8004a1c:	2c02      	cmp	r4, #2
 8004a1e:	d103      	bne.n	8004a28 <vTraceEnable+0x40>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8004a20:	4808      	ldr	r0, [pc, #32]	; (8004a44 <vTraceEnable+0x5c>)
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 8004a22:	f000 f909 	bl	8004c38 <prvTraceError>
 8004a26:	e7e7      	b.n	80049f8 <vTraceEnable+0x10>
	else if (startOption != TRC_INIT)
 8004a28:	2c00      	cmp	r4, #0
 8004a2a:	d0e5      	beq.n	80049f8 <vTraceEnable+0x10>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 8004a2c:	4806      	ldr	r0, [pc, #24]	; (8004a48 <vTraceEnable+0x60>)
 8004a2e:	e7f8      	b.n	8004a22 <vTraceEnable+0x3a>
 8004a30:	24000340 	.word	0x24000340
 8004a34:	2400079c 	.word	0x2400079c
 8004a38:	08015c92 	.word	0x08015c92
 8004a3c:	24000348 	.word	0x24000348
 8004a40:	080049d1 	.word	0x080049d1
 8004a44:	08015c1e 	.word	0x08015c1e
 8004a48:	08015c5e 	.word	0x08015c5e

08004a4c <vTraceInitObjectPropertyTable>:
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8004a4c:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <vTraceInitObjectPropertyTable+0x64>)
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 8004a4e:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8004a52:	4918      	ldr	r1, [pc, #96]	; (8004ab4 <vTraceInitObjectPropertyTable+0x68>)
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8004a54:	f04f 70a0 	mov.w	r0, #20971520	; 0x1400000
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f04f 0c09 	mov.w	ip, #9
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8004a5e:	e9c3 221c 	strd	r2, r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8004a62:	220f      	movs	r2, #15
 8004a64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8004a68:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <vTraceInitObjectPropertyTable+0x6c>)
 8004a6a:	e9c3 121f 	strd	r1, r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 8004a6e:	2213      	movs	r2, #19
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 8004a70:	4912      	ldr	r1, [pc, #72]	; (8004abc <vTraceInitObjectPropertyTable+0x70>)
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 8004a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8004a76:	4a12      	ldr	r2, [pc, #72]	; (8004ac0 <vTraceInitObjectPropertyTable+0x74>)
 8004a78:	e9c3 0222 	strd	r0, r2, [r3, #136]	; 0x88
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 8004a7c:	4a11      	ldr	r2, [pc, #68]	; (8004ac4 <vTraceInitObjectPropertyTable+0x78>)
 8004a7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8004a82:	f102 72af 	add.w	r2, r2, #22937600	; 0x15e0000
 8004a86:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
 8004a8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 8004a8e:	f240 72a3 	movw	r2, #1955	; 0x7a3
 8004a92:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8004a96:	f640 0261 	movw	r2, #2145	; 0x861
 8004a9a:	e9c3 c217 	strd	ip, r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 8004a9e:	f04f 320a 	mov.w	r2, #168430090	; 0xa0a0a0a
 8004aa2:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8004aa6:	220a      	movs	r2, #10
 8004aa8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
}
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	240007f8 	.word	0x240007f8
 8004ab4:	13101010 	.word	0x13101010
 8004ab8:	13131011 	.word	0x13131011
 8004abc:	0f141414 	.word	0x0f141414
 8004ac0:	03c00280 	.word	0x03c00280
 8004ac4:	058704dd 	.word	0x058704dd

08004ac8 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8004ac8:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <vTraceInitObjectHandleStack+0x60>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	825a      	strh	r2, [r3, #18]
 8004ace:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8004ad0:	2214      	movs	r2, #20
 8004ad2:	829a      	strh	r2, [r3, #20]
 8004ad4:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8004ad6:	2228      	movs	r2, #40	; 0x28
 8004ad8:	82da      	strh	r2, [r3, #22]
 8004ada:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8004adc:	223c      	movs	r2, #60	; 0x3c
 8004ade:	831a      	strh	r2, [r3, #24]
 8004ae0:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8004ae2:	224b      	movs	r2, #75	; 0x4b
 8004ae4:	835a      	strh	r2, [r3, #26]
 8004ae6:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8004ae8:	2255      	movs	r2, #85	; 0x55
 8004aea:	839a      	strh	r2, [r3, #28]
 8004aec:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8004aee:	225f      	movs	r2, #95	; 0x5f
 8004af0:	83da      	strh	r2, [r3, #30]
 8004af2:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8004af4:	2269      	movs	r2, #105	; 0x69
 8004af6:	841a      	strh	r2, [r3, #32]
 8004af8:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8004afa:	2273      	movs	r2, #115	; 0x73
 8004afc:	845a      	strh	r2, [r3, #34]	; 0x22
 8004afe:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8004b00:	2213      	movs	r2, #19
 8004b02:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8004b04:	2227      	movs	r2, #39	; 0x27
 8004b06:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8004b08:	223b      	movs	r2, #59	; 0x3b
 8004b0a:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8004b0c:	224a      	movs	r2, #74	; 0x4a
 8004b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8004b10:	2254      	movs	r2, #84	; 0x54
 8004b12:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8004b14:	225e      	movs	r2, #94	; 0x5e
 8004b16:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8004b18:	2268      	movs	r2, #104	; 0x68
 8004b1a:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 8004b1c:	2272      	movs	r2, #114	; 0x72
 8004b1e:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8004b20:	227c      	movs	r2, #124	; 0x7c
 8004b22:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	24000814 	.word	0x24000814

08004b2c <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8004b2c:	2808      	cmp	r0, #8
 8004b2e:	bf9a      	itte	ls
 8004b30:	4b02      	ldrls	r3, [pc, #8]	; (8004b3c <pszTraceGetErrorNotEnoughHandles+0x10>)
 8004b32:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8004b36:	4802      	ldrhi	r0, [pc, #8]	; (8004b40 <pszTraceGetErrorNotEnoughHandles+0x14>)
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
	}
}
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	08015908 	.word	0x08015908
 8004b40:	0801592c 	.word	0x0801592c

08004b44 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8004b44:	3901      	subs	r1, #1
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8004b46:	2300      	movs	r3, #0
{
 8004b48:	b510      	push	{r4, lr}
	for (i = 0; i < maxLength; i++)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d100      	bne.n	8004b50 <prvStrncpy+0xc>
	{
		dst[i] = src[i];
		if (src[i] == 0)
			break;
	}
}
 8004b4e:	bd10      	pop	{r4, pc}
		dst[i] = src[i];
 8004b50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004b54:	54c4      	strb	r4, [r0, r3]
		if (src[i] == 0)
 8004b56:	780c      	ldrb	r4, [r1, #0]
 8004b58:	2c00      	cmp	r4, #0
 8004b5a:	d0f8      	beq.n	8004b4e <prvStrncpy+0xa>
	for (i = 0; i < maxLength; i++)
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	e7f4      	b.n	8004b4a <prvStrncpy+0x6>

08004b60 <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1>:
 *
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
 8004b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 8004b64:	2400      	movs	r4, #0
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
 8004b66:	4606      	mov	r6, r0
	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 8004b68:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8004bd8 <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1+0x78>
 8004b6c:	4625      	mov	r5, r4
	while (i < nofEntriesToCheck)
 8004b6e:	42b4      	cmp	r4, r6
 8004b70:	d301      	bcc.n	8004b76 <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1+0x16>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
 8004b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		e = RecorderDataPtr->nextFreeIndex + i;
 8004b76:	f8d8 0000 	ldr.w	r0, [r8]
 8004b7a:	69c3      	ldr	r3, [r0, #28]
 8004b7c:	4423      	add	r3, r4
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8004b7e:	0099      	lsls	r1, r3, #2
 8004b80:	1842      	adds	r2, r0, r1
 8004b82:	f892 2d0c 	ldrb.w	r2, [r2, #3340]	; 0xd0c
 8004b86:	f102 0c67 	add.w	ip, r2, #103	; 0x67
 8004b8a:	fa5f fc8c 	uxtb.w	ip, ip
 8004b8e:	f1bc 0f0e 	cmp.w	ip, #14
 8004b92:	d80f      	bhi.n	8004bb4 <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1+0x54>
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8004b94:	3268      	adds	r2, #104	; 0x68
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8004b96:	6987      	ldr	r7, [r0, #24]
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8004b98:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8004b9a:	4413      	add	r3, r2
 8004b9c:	42bb      	cmp	r3, r7
 8004b9e:	d207      	bcs.n	8004bb0 <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1+0x50>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8004ba0:	f601 530c 	addw	r3, r1, #3340	; 0xd0c
 8004ba4:	3201      	adds	r2, #1
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	0092      	lsls	r2, r2, #2
 8004baa:	4418      	add	r0, r3
 8004bac:	f00e fb6f 	bl	801328e <memset>
		i++;
 8004bb0:	3401      	adds	r4, #1
 8004bb2:	e7dc      	b.n	8004b6e <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1+0xe>
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8004bb4:	2a01      	cmp	r2, #1
 8004bb6:	d1fb      	bne.n	8004bb0 <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1+0x50>
 8004bb8:	f601 520c 	addw	r2, r1, #3340	; 0xd0c
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	6981      	ldr	r1, [r0, #24]
 8004bc0:	eb00 0c02 	add.w	ip, r0, r2
 8004bc4:	428b      	cmp	r3, r1
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8004bc6:	bf35      	itete	cc
 8004bc8:	5085      	strcc	r5, [r0, r2]
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8004bca:	f8c0 5d0c 	strcs.w	r5, [r0, #3340]	; 0xd0c
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8004bce:	f8cc 5004 	strcc.w	r5, [ip, #4]
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8004bd2:	5085      	strcs	r5, [r0, r2]
 8004bd4:	e7ec      	b.n	8004bb0 <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1+0x50>
 8004bd6:	bf00      	nop
 8004bd8:	240007f8 	.word	0x240007f8

08004bdc <prvTraceUpdateCounters>:
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
	if (RecorderDataPtr->recorderActive == 0)
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <prvTraceUpdateCounters+0x2c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be2:	b17a      	cbz	r2, 8004c04 <prvTraceUpdateCounters+0x28>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8004be4:	695a      	ldr	r2, [r3, #20]
 8004be6:	2001      	movs	r0, #1
 8004be8:	3201      	adds	r2, #1
 8004bea:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8004bec:	69da      	ldr	r2, [r3, #28]
 8004bee:	3201      	adds	r2, #1

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8004bf0:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
	RecorderDataPtr->nextFreeIndex++;
 8004bf4:	61da      	str	r2, [r3, #28]
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
		RecorderDataPtr->nextFreeIndex = 0;
 8004bf6:	bf22      	ittt	cs
 8004bf8:	2101      	movcs	r1, #1
 8004bfa:	2200      	movcs	r2, #0
 8004bfc:	e9c3 2107 	strdcs	r2, r1, [r3, #28]
 8004c00:	f7ff bfae 	b.w	8004b60 <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1>
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
#endif
}
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	240007f8 	.word	0x240007f8

08004c0c <vTraceStop>:
	if (RecorderDataPtr != NULL)
 8004c0c:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <vTraceStop+0x14>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	b10b      	cbz	r3, 8004c16 <vTraceStop+0xa>
		RecorderDataPtr->recorderActive = 0;
 8004c12:	2200      	movs	r2, #0
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8004c16:	4b03      	ldr	r3, [pc, #12]	; (8004c24 <vTraceStop+0x18>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	b103      	cbz	r3, 8004c1e <vTraceStop+0x12>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8004c1c:	4718      	bx	r3
}
 8004c1e:	4770      	bx	lr
 8004c20:	240007f8 	.word	0x240007f8
 8004c24:	240008f8 	.word	0x240008f8

08004c28 <xTraceIsRecordingEnabled>:
	if (RecorderDataPtr != NULL)
 8004c28:	4b02      	ldr	r3, [pc, #8]	; (8004c34 <xTraceIsRecordingEnabled+0xc>)
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	b100      	cbz	r0, 8004c30 <xTraceIsRecordingEnabled+0x8>
		return (int)RecorderDataPtr->recorderActive;
 8004c2e:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	240007f8 	.word	0x240007f8

08004c38 <prvTraceError>:
{
 8004c38:	b538      	push	{r3, r4, r5, lr}
	if (RecorderDataPtr != NULL)
 8004c3a:	4c0b      	ldr	r4, [pc, #44]	; (8004c68 <prvTraceError+0x30>)
{
 8004c3c:	4605      	mov	r5, r0
	if (RecorderDataPtr != NULL)
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	b10b      	cbz	r3, 8004c46 <prvTraceError+0xe>
		vTraceStop();
 8004c42:	f7ff ffe3 	bl	8004c0c <vTraceStop>
	if (traceErrorMessage == NULL)
 8004c46:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <prvTraceError+0x34>)
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	b962      	cbnz	r2, 8004c66 <prvTraceError+0x2e>
		if (RecorderDataPtr != NULL)
 8004c4c:	6820      	ldr	r0, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8004c4e:	601d      	str	r5, [r3, #0]
		if (RecorderDataPtr != NULL)
 8004c50:	b148      	cbz	r0, 8004c66 <prvTraceError+0x2e>
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8004c52:	2250      	movs	r2, #80	; 0x50
 8004c54:	4629      	mov	r1, r5
 8004c56:	f600 40b8 	addw	r0, r0, #3256	; 0xcb8
 8004c5a:	f7ff ff73 	bl	8004b44 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f8c3 2cb0 	str.w	r2, [r3, #3248]	; 0xcb0
}
 8004c66:	bd38      	pop	{r3, r4, r5, pc}
 8004c68:	240007f8 	.word	0x240007f8
 8004c6c:	240008e8 	.word	0x240008e8

08004c70 <prvTraceNextFreeEventBufferSlot>:
{
 8004c70:	b508      	push	{r3, lr}
	if (! RecorderDataPtr->recorderActive)
 8004c72:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <prvTraceNextFreeEventBufferSlot+0x28>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c78:	b138      	cbz	r0, 8004c8a <prvTraceNextFreeEventBufferSlot+0x1a>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8004c7a:	69d8      	ldr	r0, [r3, #28]
 8004c7c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004c80:	d304      	bcc.n	8004c8c <prvTraceNextFreeEventBufferSlot+0x1c>
		prvTraceError("Attempt to index outside event buffer!");
 8004c82:	4806      	ldr	r0, [pc, #24]	; (8004c9c <prvTraceNextFreeEventBufferSlot+0x2c>)
 8004c84:	f7ff ffd8 	bl	8004c38 <prvTraceError>
		return NULL;
 8004c88:	2000      	movs	r0, #0
}
 8004c8a:	bd08      	pop	{r3, pc}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8004c8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004c90:	f600 500c 	addw	r0, r0, #3340	; 0xd0c
 8004c94:	e7f9      	b.n	8004c8a <prvTraceNextFreeEventBufferSlot+0x1a>
 8004c96:	bf00      	nop
 8004c98:	240007f8 	.word	0x240007f8
 8004c9c:	08015ee5 	.word	0x08015ee5

08004ca0 <prvTraceGetParam.part.5>:
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4605      	mov	r5, r0
 8004ca4:	460c      	mov	r4, r1
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8004ca6:	f7ff ffe3 	bl	8004c70 <prvTraceNextFreeEventBufferSlot>
		if (xps != NULL)
 8004caa:	b148      	cbz	r0, 8004cc0 <prvTraceGetParam.part.5+0x20>
			xps->type = DIV_XPS;
 8004cac:	2301      	movs	r3, #1
 8004cae:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8004cb0:	ea24 0305 	bic.w	r3, r4, r5
 8004cb4:	0a1a      	lsrs	r2, r3, #8
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8004cb6:	0c1b      	lsrs	r3, r3, #16
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8004cb8:	7042      	strb	r2, [r0, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8004cba:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
 8004cbc:	f7ff ff8e 	bl	8004bdc <prvTraceUpdateCounters>
}
 8004cc0:	ea05 0004 	and.w	r0, r5, r4
 8004cc4:	bd38      	pop	{r3, r4, r5, pc}
	...

08004cc8 <prvTraceOpenSymbol>:
{
 8004cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ccc:	468b      	mov	fp, r1
 8004cce:	b087      	sub	sp, #28
	TRACE_ASSERT(name != NULL, "prvTraceOpenSymbol: name == NULL", (traceString)0);
 8004cd0:	4682      	mov	sl, r0
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d136      	bne.n	8004d44 <prvTraceOpenSymbol+0x7c>
 8004cd6:	4654      	mov	r4, sl
 8004cd8:	484a      	ldr	r0, [pc, #296]	; (8004e04 <prvTraceOpenSymbol+0x13c>)
 8004cda:	f7ff ffad 	bl	8004c38 <prvTraceError>
}
 8004cde:	4620      	mov	r0, r4
 8004ce0:	b007      	add	sp, #28
 8004ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	if (pname != (const char *) 0)
	{
		for (; (c = (unsigned char) *pname++) != '\0';)
		{
			crc += c;
 8004ce6:	4498      	add	r8, r3
			length++;
 8004ce8:	3601      	adds	r6, #1
		for (; (c = (unsigned char) *pname++) != '\0';)
 8004cea:	f812 3b01 	ldrb.w	r3, [r2], #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f9      	bne.n	8004ce6 <prvTraceOpenSymbol+0x1e>
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
	*plength = (uint8_t)length;
 8004cf2:	b2f6      	uxtb	r6, r6
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf8:	9302      	str	r3, [sp, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 8004d00:	4b41      	ldr	r3, [pc, #260]	; (8004e08 <prvTraceOpenSymbol+0x140>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	9301      	str	r3, [sp, #4]
 8004d06:	3201      	adds	r2, #1
 8004d08:	601a      	str	r2, [r3, #0]
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceString)0);
 8004d0a:	b306      	cbz	r6, 8004d4e <prvTraceOpenSymbol+0x86>
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 8004d0c:	4a3f      	ldr	r2, [pc, #252]	; (8004e0c <prvTraceOpenSymbol+0x144>)
 8004d0e:	f008 083f 	and.w	r8, r8, #63	; 0x3f
 8004d12:	4635      	mov	r5, r6
 8004d14:	6817      	ldr	r7, [r2, #0]
 8004d16:	9203      	str	r2, [sp, #12]
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 8004d18:	fa5f f28b 	uxtb.w	r2, fp
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 8004d1c:	eb07 0348 	add.w	r3, r7, r8, lsl #1
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 8004d20:	9204      	str	r2, [sp, #16]
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 8004d22:	f8b3 9c2c 	ldrh.w	r9, [r3, #3116]	; 0xc2c
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 8004d26:	ea4f 231b 	mov.w	r3, fp, lsr #8
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 8004d2a:	464c      	mov	r4, r9
	while (i != 0)
 8004d2c:	b9fc      	cbnz	r4, 8004d6e <prvTraceOpenSymbol+0xa6>
	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= (TRC_CFG_SYMBOL_TABLE_SIZE))
 8004d2e:	f8d7 0908 	ldr.w	r0, [r7, #2312]	; 0x908
 8004d32:	1d02      	adds	r2, r0, #4
 8004d34:	442a      	add	r2, r5
 8004d36:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 8004d3a:	d33c      	bcc.n	8004db6 <prvTraceOpenSymbol+0xee>
		prvTraceError("Symbol table full. Increase TRC_CFG_SYMBOL_TABLE_SIZE in trcConfig.h");
 8004d3c:	4834      	ldr	r0, [pc, #208]	; (8004e10 <prvTraceOpenSymbol+0x148>)
 8004d3e:	f7ff ff7b 	bl	8004c38 <prvTraceError>
 8004d42:	e00b      	b.n	8004d5c <prvTraceOpenSymbol+0x94>
 8004d44:	4602      	mov	r2, r0
	int crc = 0;
 8004d46:	f04f 0800 	mov.w	r8, #0
	int length = 1;		/* Should be 1 to account for '\0' */
 8004d4a:	2601      	movs	r6, #1
 8004d4c:	e7cd      	b.n	8004cea <prvTraceOpenSymbol+0x22>
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceString)0);
 8004d4e:	4831      	ldr	r0, [pc, #196]	; (8004e14 <prvTraceOpenSymbol+0x14c>)
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);
 8004d50:	4634      	mov	r4, r6
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceString)0);
 8004d52:	f7ff ff71 	bl	8004c38 <prvTraceError>
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);
 8004d56:	4830      	ldr	r0, [pc, #192]	; (8004e18 <prvTraceOpenSymbol+0x150>)
 8004d58:	f7ff ff6e 	bl	8004c38 <prvTraceError>
	trcCRITICAL_SECTION_END();
 8004d5c:	9b01      	ldr	r3, [sp, #4]
 8004d5e:	9a01      	ldr	r2, [sp, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	9b02      	ldr	r3, [sp, #8]
 8004d68:	f383 8810 	msr	PRIMASK, r3
	return result;
 8004d6c:	e7b7      	b.n	8004cde <prvTraceOpenSymbol+0x16>
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 8004d6e:	193a      	adds	r2, r7, r4
 8004d70:	9804      	ldr	r0, [sp, #16]
 8004d72:	f892 190e 	ldrb.w	r1, [r2, #2318]	; 0x90e
 8004d76:	4281      	cmp	r1, r0
 8004d78:	d114      	bne.n	8004da4 <prvTraceOpenSymbol+0xdc>
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 8004d7a:	f892 290f 	ldrb.w	r2, [r2, #2319]	; 0x90f
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d110      	bne.n	8004da4 <prvTraceOpenSymbol+0xdc>
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
 8004d82:	1d22      	adds	r2, r4, #4
 8004d84:	443a      	add	r2, r7
 8004d86:	442a      	add	r2, r5
 8004d88:	f892 290c 	ldrb.w	r2, [r2, #2316]	; 0x90c
 8004d8c:	b952      	cbnz	r2, 8004da4 <prvTraceOpenSymbol+0xdc>
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
 8004d8e:	f504 6011 	add.w	r0, r4, #2320	; 0x910
 8004d92:	462a      	mov	r2, r5
 8004d94:	4651      	mov	r1, sl
 8004d96:	9305      	str	r3, [sp, #20]
 8004d98:	4438      	add	r0, r7
 8004d9a:	f00e fb75 	bl	8013488 <strncmp>
 8004d9e:	9b05      	ldr	r3, [sp, #20]
 8004da0:	2800      	cmp	r0, #0
 8004da2:	d0db      	beq.n	8004d5c <prvTraceOpenSymbol+0x94>
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
 8004da4:	443c      	add	r4, r7
 8004da6:	f894 290d 	ldrb.w	r2, [r4, #2317]	; 0x90d
 8004daa:	f894 490c 	ldrb.w	r4, [r4, #2316]	; 0x90c
 8004dae:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 8004db2:	b2a4      	uxth	r4, r4
 8004db4:	e7ba      	b.n	8004d2c <prvTraceOpenSymbol+0x64>
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 8004db6:	183a      	adds	r2, r7, r0
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8004db8:	f500 6011 	add.w	r0, r0, #2320	; 0x910
 8004dbc:	4651      	mov	r1, sl
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 8004dbe:	f882 990c 	strb.w	r9, [r2, #2316]	; 0x90c
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 8004dc2:	ea4f 2919 	mov.w	r9, r9, lsr #8
			(uint8_t)(channel / 0x100);
 8004dc6:	f882 390f 	strb.w	r3, [r2, #2319]	; 0x90f
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8004dca:	4438      	add	r0, r7
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 8004dcc:	f882 990d 	strb.w	r9, [r2, #2317]	; 0x90d
			(uint8_t)(channel & 0x00FF);
 8004dd0:	f882 b90e 	strb.w	fp, [r2, #2318]	; 0x90e
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8004dd4:	462a      	mov	r2, r5
 8004dd6:	f7ff feb5 	bl	8004b44 <prvStrncpy>
		RecorderDataPtr->SymbolTable.symbytes
 8004dda:	9b03      	ldr	r3, [sp, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 8004dde:	f8d3 2908 	ldr.w	r2, [r3, #2312]	; 0x908
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8004de2:	eb03 0848 	add.w	r8, r3, r8, lsl #1
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 8004de6:	4415      	add	r5, r2
 8004de8:	1959      	adds	r1, r3, r5
		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 8004dea:	3505      	adds	r5, #5
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 8004dec:	f881 4910 	strb.w	r4, [r1, #2320]	; 0x910
		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 8004df0:	1d74      	adds	r4, r6, #5
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8004df2:	f8a8 2c2c 	strh.w	r2, [r8, #3116]	; 0xc2c
		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 8004df6:	b2e4      	uxtb	r4, r4
		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 8004df8:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 8004dfc:	1b2d      	subs	r5, r5, r4
 8004dfe:	b2ac      	uxth	r4, r5
 8004e00:	e7ac      	b.n	8004d5c <prvTraceOpenSymbol+0x94>
 8004e02:	bf00      	nop
 8004e04:	08015f0c 	.word	0x08015f0c
 8004e08:	240008e0 	.word	0x240008e0
 8004e0c:	240007f8 	.word	0x240007f8
 8004e10:	08015fa9 	.word	0x08015fa9
 8004e14:	08015f3b 	.word	0x08015f3b
 8004e18:	08015f72 	.word	0x08015f72

08004e1c <uiIndexOfObject>:
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8004e1c:	2908      	cmp	r1, #8
{
 8004e1e:	b510      	push	{r4, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8004e20:	d904      	bls.n	8004e2c <uiIndexOfObject+0x10>
 8004e22:	480d      	ldr	r0, [pc, #52]	; (8004e58 <uiIndexOfObject+0x3c>)
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 8004e24:	f7ff ff08 	bl	8004c38 <prvTraceError>
 8004e28:	2000      	movs	r0, #0
}
 8004e2a:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 8004e2c:	b130      	cbz	r0, 8004e3c <uiIndexOfObject+0x20>
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <uiIndexOfObject+0x40>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	185a      	adds	r2, r3, r1
 8004e34:	f892 4064 	ldrb.w	r4, [r2, #100]	; 0x64
 8004e38:	4284      	cmp	r4, r0
 8004e3a:	d201      	bcs.n	8004e40 <uiIndexOfObject+0x24>
 8004e3c:	4808      	ldr	r0, [pc, #32]	; (8004e60 <uiIndexOfObject+0x44>)
 8004e3e:	e7f1      	b.n	8004e24 <uiIndexOfObject+0x8>
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8004e40:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8004e44:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8004e48:	3801      	subs	r0, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8004e4a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8004e4e:	fb02 3000 	mla	r0, r2, r0, r3
 8004e52:	b280      	uxth	r0, r0
 8004e54:	e7e9      	b.n	8004e2a <uiIndexOfObject+0xe>
 8004e56:	bf00      	nop
 8004e58:	08016696 	.word	0x08016696
 8004e5c:	240007f8 	.word	0x240007f8
 8004e60:	080166d3 	.word	0x080166d3

08004e64 <prvMarkObjectAsUsed>:
{
 8004e64:	b508      	push	{r3, lr}
 8004e66:	460b      	mov	r3, r1
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 8004e68:	4601      	mov	r1, r0
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff ffd6 	bl	8004e1c <uiIndexOfObject>
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8004e70:	4b03      	ldr	r3, [pc, #12]	; (8004e80 <prvMarkObjectAsUsed+0x1c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4418      	add	r0, r3
 8004e76:	2301      	movs	r3, #1
 8004e78:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
}
 8004e7c:	bd08      	pop	{r3, pc}
 8004e7e:	bf00      	nop
 8004e80:	240007f8 	.word	0x240007f8

08004e84 <prvTraceStoreObjectNameOnCloseEvent>:
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8004e84:	2a08      	cmp	r2, #8
{
 8004e86:	b570      	push	{r4, r5, r6, lr}
 8004e88:	4606      	mov	r6, r0
 8004e8a:	460c      	mov	r4, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8004e8c:	d904      	bls.n	8004e98 <prvTraceStoreObjectNameOnCloseEvent+0x14>
 8004e8e:	4812      	ldr	r0, [pc, #72]	; (8004ed8 <prvTraceStoreObjectNameOnCloseEvent+0x54>)
}
 8004e90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8004e94:	f7ff bed0 	b.w	8004c38 <prvTraceError>
 8004e98:	4b10      	ldr	r3, [pc, #64]	; (8004edc <prvTraceStoreObjectNameOnCloseEvent+0x58>)
 8004e9a:	681d      	ldr	r5, [r3, #0]
 8004e9c:	18ab      	adds	r3, r5, r2
 8004e9e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004ea2:	428b      	cmp	r3, r1
 8004ea4:	d201      	bcs.n	8004eaa <prvTraceStoreObjectNameOnCloseEvent+0x26>
 8004ea6:	480e      	ldr	r0, [pc, #56]	; (8004ee0 <prvTraceStoreObjectNameOnCloseEvent+0x5c>)
 8004ea8:	e7f2      	b.n	8004e90 <prvTraceStoreObjectNameOnCloseEvent+0xc>
	if (RecorderDataPtr->recorderActive)
 8004eaa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004eac:	b19b      	cbz	r3, 8004ed6 <prvTraceStoreObjectNameOnCloseEvent+0x52>
		name = TRACE_PROPERTY_NAME_GET(objectclass, handle);
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f7ff ffb3 	bl	8004e1c <uiIndexOfObject>
 8004eb6:	309c      	adds	r0, #156	; 0x9c
		idx = prvTraceOpenSymbol(name, 0);
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4428      	add	r0, r5
 8004ebc:	f7ff ff04 	bl	8004cc8 <prvTraceOpenSymbol>
 8004ec0:	4605      	mov	r5, r0
		ce = (ObjCloseNameEvent*) prvTraceNextFreeEventBufferSlot();
 8004ec2:	f7ff fed5 	bl	8004c70 <prvTraceNextFreeEventBufferSlot>
		if (ce != NULL)
 8004ec6:	b130      	cbz	r0, 8004ed6 <prvTraceStoreObjectNameOnCloseEvent+0x52>
			ce->type = (uint8_t) evtcode;
 8004ec8:	7006      	strb	r6, [r0, #0]
			ce->objHandle = hnd8;
 8004eca:	7044      	strb	r4, [r0, #1]
			ce->symbolIndex = idx;
 8004ecc:	8045      	strh	r5, [r0, #2]
}
 8004ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			prvTraceUpdateCounters();
 8004ed2:	f7ff be83 	b.w	8004bdc <prvTraceUpdateCounters>
}
 8004ed6:	bd70      	pop	{r4, r5, r6, pc}
 8004ed8:	0801645c 	.word	0x0801645c
 8004edc:	240007f8 	.word	0x240007f8
 8004ee0:	080164ad 	.word	0x080164ad

08004ee4 <prvTraceStoreObjectPropertiesOnCloseEvent>:
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8004ee4:	2a08      	cmp	r2, #8
{
 8004ee6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eea:	4680      	mov	r8, r0
 8004eec:	4689      	mov	r9, r1
 8004eee:	4615      	mov	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8004ef0:	d904      	bls.n	8004efc <prvTraceStoreObjectPropertiesOnCloseEvent+0x18>
 8004ef2:	481b      	ldr	r0, [pc, #108]	; (8004f60 <prvTraceStoreObjectPropertiesOnCloseEvent+0x7c>)
}
 8004ef4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8004ef8:	f7ff be9e 	b.w	8004c38 <prvTraceError>
 8004efc:	4f19      	ldr	r7, [pc, #100]	; (8004f64 <prvTraceStoreObjectPropertiesOnCloseEvent+0x80>)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	189a      	adds	r2, r3, r2
 8004f02:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 8004f06:	428a      	cmp	r2, r1
 8004f08:	d201      	bcs.n	8004f0e <prvTraceStoreObjectPropertiesOnCloseEvent+0x2a>
 8004f0a:	4817      	ldr	r0, [pc, #92]	; (8004f68 <prvTraceStoreObjectPropertiesOnCloseEvent+0x84>)
 8004f0c:	e7f2      	b.n	8004ef4 <prvTraceStoreObjectPropertiesOnCloseEvent+0x10>
	if (RecorderDataPtr->recorderActive)
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	b31b      	cbz	r3, 8004f5a <prvTraceStoreObjectPropertiesOnCloseEvent+0x76>
		pe = (ObjClosePropEvent*) prvTraceNextFreeEventBufferSlot();
 8004f12:	f7ff fead 	bl	8004c70 <prvTraceNextFreeEventBufferSlot>
		if (pe != NULL)
 8004f16:	4606      	mov	r6, r0
 8004f18:	b1f8      	cbz	r0, 8004f5a <prvTraceStoreObjectPropertiesOnCloseEvent+0x76>
			if (objectclass == TRACE_CLASS_TASK)
 8004f1a:	2d03      	cmp	r5, #3
 8004f1c:	683c      	ldr	r4, [r7, #0]
				pe->arg1 = TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, handle);
 8004f1e:	4629      	mov	r1, r5
 8004f20:	4648      	mov	r0, r9
			if (objectclass == TRACE_CLASS_TASK)
 8004f22:	d10f      	bne.n	8004f44 <prvTraceStoreObjectPropertiesOnCloseEvent+0x60>
				pe->arg1 = TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, handle);
 8004f24:	f7ff ff7a 	bl	8004e1c <uiIndexOfObject>
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	4420      	add	r0, r4
 8004f2c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8004f30:	4418      	add	r0, r3
 8004f32:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
				pe->arg1 = TRACE_PROPERTY_OBJECT_STATE(objectclass, handle);
 8004f36:	7073      	strb	r3, [r6, #1]
			pe->type = evtcode;
 8004f38:	f886 8000 	strb.w	r8, [r6]
}
 8004f3c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			prvTraceUpdateCounters();
 8004f40:	f7ff be4c 	b.w	8004bdc <prvTraceUpdateCounters>
				pe->arg1 = TRACE_PROPERTY_OBJECT_STATE(objectclass, handle);
 8004f44:	f7ff ff6a 	bl	8004e1c <uiIndexOfObject>
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	4420      	add	r0, r4
 8004f4c:	4415      	add	r5, r2
 8004f4e:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8004f52:	4418      	add	r0, r3
 8004f54:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 8004f58:	e7ed      	b.n	8004f36 <prvTraceStoreObjectPropertiesOnCloseEvent+0x52>
}
 8004f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f5e:	bf00      	nop
 8004f60:	080164f9 	.word	0x080164f9
 8004f64:	240007f8 	.word	0x240007f8
 8004f68:	08016550 	.word	0x08016550

08004f6c <prvTraceSetPriorityProperty>:
{
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	4605      	mov	r5, r0
 8004f70:	4617      	mov	r7, r2
 8004f72:	4608      	mov	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8004f74:	2d08      	cmp	r5, #8
 8004f76:	d904      	bls.n	8004f82 <prvTraceSetPriorityProperty+0x16>
 8004f78:	480c      	ldr	r0, [pc, #48]	; (8004fac <prvTraceSetPriorityProperty+0x40>)
}
 8004f7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8004f7e:	f7ff be5b 	b.w	8004c38 <prvTraceError>
 8004f82:	4e0b      	ldr	r6, [pc, #44]	; (8004fb0 <prvTraceSetPriorityProperty+0x44>)
 8004f84:	6834      	ldr	r4, [r6, #0]
 8004f86:	1963      	adds	r3, r4, r5
 8004f88:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004f8c:	428b      	cmp	r3, r1
 8004f8e:	d201      	bcs.n	8004f94 <prvTraceSetPriorityProperty+0x28>
 8004f90:	4808      	ldr	r0, [pc, #32]	; (8004fb4 <prvTraceSetPriorityProperty+0x48>)
 8004f92:	e7f2      	b.n	8004f7a <prvTraceSetPriorityProperty+0xe>
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8004f94:	4629      	mov	r1, r5
 8004f96:	f7ff ff41 	bl	8004e1c <uiIndexOfObject>
 8004f9a:	6833      	ldr	r3, [r6, #0]
 8004f9c:	4420      	add	r0, r4
 8004f9e:	441d      	add	r5, r3
 8004fa0:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8004fa4:	4418      	add	r0, r3
 8004fa6:	f880 709d 	strb.w	r7, [r0, #157]	; 0x9d
}
 8004faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fac:	080160fa 	.word	0x080160fa
 8004fb0:	240007f8 	.word	0x240007f8
 8004fb4:	08016143 	.word	0x08016143

08004fb8 <prvTraceGetPriorityProperty>:
{
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	4605      	mov	r5, r0
 8004fbc:	4608      	mov	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8004fbe:	2d08      	cmp	r5, #8
 8004fc0:	d904      	bls.n	8004fcc <prvTraceGetPriorityProperty+0x14>
 8004fc2:	480d      	ldr	r0, [pc, #52]	; (8004ff8 <prvTraceGetPriorityProperty+0x40>)
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8004fc4:	f7ff fe38 	bl	8004c38 <prvTraceError>
 8004fc8:	2000      	movs	r0, #0
}
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8004fcc:	4e0b      	ldr	r6, [pc, #44]	; (8004ffc <prvTraceGetPriorityProperty+0x44>)
 8004fce:	6834      	ldr	r4, [r6, #0]
 8004fd0:	1963      	adds	r3, r4, r5
 8004fd2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004fd6:	428b      	cmp	r3, r1
 8004fd8:	d201      	bcs.n	8004fde <prvTraceGetPriorityProperty+0x26>
 8004fda:	4809      	ldr	r0, [pc, #36]	; (8005000 <prvTraceGetPriorityProperty+0x48>)
 8004fdc:	e7f2      	b.n	8004fc4 <prvTraceGetPriorityProperty+0xc>
	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8004fde:	4629      	mov	r1, r5
 8004fe0:	f7ff ff1c 	bl	8004e1c <uiIndexOfObject>
 8004fe4:	6833      	ldr	r3, [r6, #0]
 8004fe6:	4420      	add	r0, r4
 8004fe8:	441d      	add	r5, r3
 8004fea:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8004fee:	4418      	add	r0, r3
 8004ff0:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
 8004ff4:	e7e9      	b.n	8004fca <prvTraceGetPriorityProperty+0x12>
 8004ff6:	bf00      	nop
 8004ff8:	08015df2 	.word	0x08015df2
 8004ffc:	240007f8 	.word	0x240007f8
 8005000:	08015e3b 	.word	0x08015e3b

08005004 <prvTraceSetObjectState>:
{
 8005004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005006:	4605      	mov	r5, r0
 8005008:	4617      	mov	r7, r2
 800500a:	4608      	mov	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800500c:	2d08      	cmp	r5, #8
 800500e:	d904      	bls.n	800501a <prvTraceSetObjectState+0x16>
 8005010:	480c      	ldr	r0, [pc, #48]	; (8005044 <prvTraceSetObjectState+0x40>)
}
 8005012:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8005016:	f7ff be0f 	b.w	8004c38 <prvTraceError>
 800501a:	4e0b      	ldr	r6, [pc, #44]	; (8005048 <prvTraceSetObjectState+0x44>)
 800501c:	6834      	ldr	r4, [r6, #0]
 800501e:	1963      	adds	r3, r4, r5
 8005020:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005024:	428b      	cmp	r3, r1
 8005026:	d201      	bcs.n	800502c <prvTraceSetObjectState+0x28>
 8005028:	4808      	ldr	r0, [pc, #32]	; (800504c <prvTraceSetObjectState+0x48>)
 800502a:	e7f2      	b.n	8005012 <prvTraceSetObjectState+0xe>
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 800502c:	4629      	mov	r1, r5
 800502e:	f7ff fef5 	bl	8004e1c <uiIndexOfObject>
 8005032:	6833      	ldr	r3, [r6, #0]
 8005034:	4420      	add	r0, r4
 8005036:	441d      	add	r5, r3
 8005038:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 800503c:	4418      	add	r0, r3
 800503e:	f880 709c 	strb.w	r7, [r0, #156]	; 0x9c
}
 8005042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005044:	0801607b 	.word	0x0801607b
 8005048:	240007f8 	.word	0x240007f8
 800504c:	080160bf 	.word	0x080160bf

08005050 <prvTraceSetTaskInstanceFinished>:
{
 8005050:	b538      	push	{r3, r4, r5, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 8005052:	4d0b      	ldr	r5, [pc, #44]	; (8005080 <prvTraceSetTaskInstanceFinished+0x30>)
 8005054:	682c      	ldr	r4, [r5, #0]
 8005056:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800505a:	4283      	cmp	r3, r0
 800505c:	d204      	bcs.n	8005068 <prvTraceSetTaskInstanceFinished+0x18>
 800505e:	4809      	ldr	r0, [pc, #36]	; (8005084 <prvTraceSetTaskInstanceFinished+0x34>)
}
 8005060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 8005064:	f7ff bde8 	b.w	8004c38 <prvTraceError>
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8005068:	2103      	movs	r1, #3
 800506a:	f7ff fed7 	bl	8004e1c <uiIndexOfObject>
 800506e:	682b      	ldr	r3, [r5, #0]
 8005070:	4420      	add	r0, r4
 8005072:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8005076:	4418      	add	r0, r3
 8005078:	2300      	movs	r3, #0
 800507a:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
}
 800507e:	bd38      	pop	{r3, r4, r5, pc}
 8005080:	240007f8 	.word	0x240007f8
 8005084:	08016183 	.word	0x08016183

08005088 <prvTraceGetObjectHandle>:
{
 8005088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 800508a:	4b25      	ldr	r3, [pc, #148]	; (8005120 <prvTraceGetObjectHandle+0x98>)
 800508c:	681d      	ldr	r5, [r3, #0]
 800508e:	b925      	cbnz	r5, 800509a <prvTraceGetObjectHandle+0x12>
 8005090:	4824      	ldr	r0, [pc, #144]	; (8005124 <prvTraceGetObjectHandle+0x9c>)
 8005092:	f7ff fdd1 	bl	8004c38 <prvTraceError>
}
 8005096:	4628      	mov	r0, r5
 8005098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 800509a:	2808      	cmp	r0, #8
 800509c:	d904      	bls.n	80050a8 <prvTraceGetObjectHandle+0x20>
 800509e:	4822      	ldr	r0, [pc, #136]	; (8005128 <prvTraceGetObjectHandle+0xa0>)
 80050a0:	2500      	movs	r5, #0
 80050a2:	f7ff fdc9 	bl	8004c38 <prvTraceError>
 80050a6:	e7f6      	b.n	8005096 <prvTraceGetObjectHandle+0xe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ac:	2301      	movs	r3, #1
 80050ae:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 80050b2:	4c1e      	ldr	r4, [pc, #120]	; (800512c <prvTraceGetObjectHandle+0xa4>)
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 80050b4:	4a1e      	ldr	r2, [pc, #120]	; (8005130 <prvTraceGetObjectHandle+0xa8>)
	trcCRITICAL_SECTION_BEGIN();
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	3301      	adds	r3, #1
 80050ba:	6023      	str	r3, [r4, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 80050bc:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 80050c0:	18d1      	adds	r1, r2, r3
 80050c2:	f891 5048 	ldrb.w	r5, [r1, #72]	; 0x48
 80050c6:	b935      	cbnz	r5, 80050d6 <prvTraceGetObjectHandle+0x4e>
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 80050c8:	eb02 0740 	add.w	r7, r2, r0, lsl #1
			(traceHandle)(1 + indexOfHandle -
 80050cc:	1c5d      	adds	r5, r3, #1
 80050ce:	7cbf      	ldrb	r7, [r7, #18]
 80050d0:	1bed      	subs	r5, r5, r7
		objectHandleStacks.objectHandles[indexOfHandle] =
 80050d2:	f881 5048 	strb.w	r5, [r1, #72]	; 0x48
		> objectHandleStacks.highestIndexOfClass[objectclass])
 80050d6:	eb02 0140 	add.w	r1, r2, r0, lsl #1
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 80050da:	8c89      	ldrh	r1, [r1, #36]	; 0x24
 80050dc:	4299      	cmp	r1, r3
 80050de:	d20a      	bcs.n	80050f6 <prvTraceGetObjectHandle+0x6e>
		handle = 0;
 80050e0:	2500      	movs	r5, #0
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80050e2:	f7ff fd23 	bl	8004b2c <pszTraceGetErrorNotEnoughHandles>
 80050e6:	f7ff fda7 	bl	8004c38 <prvTraceError>
	trcCRITICAL_SECTION_END();
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	6023      	str	r3, [r4, #0]
 80050f0:	f386 8810 	msr	PRIMASK, r6
 80050f4:	e7cf      	b.n	8005096 <prvTraceGetObjectHandle+0xe>
	handle = objectHandleStacks.objectHandles[indexOfHandle];
 80050f6:	18d1      	adds	r1, r2, r3
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 80050f8:	3301      	adds	r3, #1
	handle = objectHandleStacks.objectHandles[indexOfHandle];
 80050fa:	f891 5048 	ldrb.w	r5, [r1, #72]	; 0x48
			objectHandleStacks.lowestIndexOfClass[objectclass];
 80050fe:	eb02 0140 	add.w	r1, r2, r0, lsl #1
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8005102:	b29b      	uxth	r3, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8005104:	8a49      	ldrh	r1, [r1, #18]
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8005106:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 800510a:	1a5b      	subs	r3, r3, r1
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 800510c:	f100 0118 	add.w	r1, r0, #24
 8005110:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8005114:	88d1      	ldrh	r1, [r2, #6]
		if (hndCount >
 8005116:	428b      	cmp	r3, r1
				(traceHandle)hndCount;
 8005118:	bfc4      	itt	gt
 800511a:	b2db      	uxtbgt	r3, r3
 800511c:	80d3      	strhgt	r3, [r2, #6]
 800511e:	e7e4      	b.n	80050ea <prvTraceGetObjectHandle+0x62>
 8005120:	240007f8 	.word	0x240007f8
 8005124:	08016791 	.word	0x08016791
 8005128:	08015dad 	.word	0x08015dad
 800512c:	240008e0 	.word	0x240008e0
 8005130:	24000814 	.word	0x24000814

08005134 <prvTraceFreeObjectHandle>:
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8005134:	2808      	cmp	r0, #8
{
 8005136:	b410      	push	{r4}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8005138:	d904      	bls.n	8005144 <prvTraceFreeObjectHandle+0x10>
 800513a:	4811      	ldr	r0, [pc, #68]	; (8005180 <prvTraceFreeObjectHandle+0x4c>)
}
 800513c:	f85d 4b04 	ldr.w	r4, [sp], #4
		prvTraceError("Attempt to free more handles than allocated!");
 8005140:	f7ff bd7a 	b.w	8004c38 <prvTraceError>
	TRACE_ASSERT(handle > 0 && handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 8005144:	b131      	cbz	r1, 8005154 <prvTraceFreeObjectHandle+0x20>
 8005146:	4b0f      	ldr	r3, [pc, #60]	; (8005184 <prvTraceFreeObjectHandle+0x50>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4403      	add	r3, r0
 800514c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005150:	428b      	cmp	r3, r1
 8005152:	d201      	bcs.n	8005158 <prvTraceFreeObjectHandle+0x24>
 8005154:	480c      	ldr	r0, [pc, #48]	; (8005188 <prvTraceFreeObjectHandle+0x54>)
 8005156:	e7f1      	b.n	800513c <prvTraceFreeObjectHandle+0x8>
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
 8005158:	4a0c      	ldr	r2, [pc, #48]	; (800518c <prvTraceFreeObjectHandle+0x58>)
		objectHandleStacks.lowestIndexOfClass[objectclass])
 800515a:	eb02 0440 	add.w	r4, r2, r0, lsl #1
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
 800515e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 8005162:	8a64      	ldrh	r4, [r4, #18]
 8005164:	429c      	cmp	r4, r3
 8005166:	d301      	bcc.n	800516c <prvTraceFreeObjectHandle+0x38>
		prvTraceError("Attempt to free more handles than allocated!");
 8005168:	4809      	ldr	r0, [pc, #36]	; (8005190 <prvTraceFreeObjectHandle+0x5c>)
 800516a:	e7e7      	b.n	800513c <prvTraceFreeObjectHandle+0x8>
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]--;
 800516c:	3b01      	subs	r3, #1
 800516e:	b29b      	uxth	r3, r3
 8005170:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
		objectHandleStacks.objectHandles[indexOfHandle] = handle;
 8005174:	4413      	add	r3, r2
 8005176:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
}
 800517a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	08015c99 	.word	0x08015c99
 8005184:	240007f8 	.word	0x240007f8
 8005188:	08015cdf 	.word	0x08015cdf
 800518c:	24000814 	.word	0x24000814
 8005190:	08015d20 	.word	0x08015d20

08005194 <prvTraceSetObjectName>:
{
 8005194:	b570      	push	{r4, r5, r6, lr}
 8005196:	460b      	mov	r3, r1
 8005198:	4604      	mov	r4, r0
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
 800519a:	4615      	mov	r5, r2
 800519c:	b922      	cbnz	r2, 80051a8 <prvTraceSetObjectName+0x14>
 800519e:	4814      	ldr	r0, [pc, #80]	; (80051f0 <prvTraceSetObjectName+0x5c>)
}
 80051a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 80051a4:	f7ff bd48 	b.w	8004c38 <prvTraceError>
	if (objectclass >= TRACE_NCLASSES)
 80051a8:	2808      	cmp	r0, #8
 80051aa:	d901      	bls.n	80051b0 <prvTraceSetObjectName+0x1c>
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 80051ac:	4811      	ldr	r0, [pc, #68]	; (80051f4 <prvTraceSetObjectName+0x60>)
 80051ae:	e7f7      	b.n	80051a0 <prvTraceSetObjectName+0xc>
	if (handle == 0)
 80051b0:	b909      	cbnz	r1, 80051b6 <prvTraceSetObjectName+0x22>
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 80051b2:	4811      	ldr	r0, [pc, #68]	; (80051f8 <prvTraceSetObjectName+0x64>)
 80051b4:	e7f4      	b.n	80051a0 <prvTraceSetObjectName+0xc>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 80051b6:	4e11      	ldr	r6, [pc, #68]	; (80051fc <prvTraceSetObjectName+0x68>)
 80051b8:	6832      	ldr	r2, [r6, #0]
 80051ba:	4402      	add	r2, r0
 80051bc:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 80051c0:	428a      	cmp	r2, r1
 80051c2:	d202      	bcs.n	80051ca <prvTraceSetObjectName+0x36>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80051c4:	f7ff fcb2 	bl	8004b2c <pszTraceGetErrorNotEnoughHandles>
 80051c8:	e7ea      	b.n	80051a0 <prvTraceSetObjectName+0xc>
		idx = uiIndexOfObject(handle, objectclass);
 80051ca:	4601      	mov	r1, r0
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff fe25 	bl	8004e1c <uiIndexOfObject>
		if (traceErrorMessage == NULL)
 80051d2:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <prvTraceSetObjectName+0x6c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	b953      	cbnz	r3, 80051ee <prvTraceSetObjectName+0x5a>
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80051d8:	6833      	ldr	r3, [r6, #0]
 80051da:	309c      	adds	r0, #156	; 0x9c
 80051dc:	4629      	mov	r1, r5
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 80051de:	441c      	add	r4, r3
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80051e0:	4418      	add	r0, r3
 80051e2:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
}
 80051e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80051ea:	f7ff bcab 	b.w	8004b44 <prvStrncpy>
}
 80051ee:	bd70      	pop	{r4, r5, r6, pc}
 80051f0:	08015fee 	.word	0x08015fee
 80051f4:	08016020 	.word	0x08016020
 80051f8:	0801604e 	.word	0x0801604e
 80051fc:	240007f8 	.word	0x240007f8
 8005200:	240008e8 	.word	0x240008e8

08005204 <prvTraceInitCortexM>:
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void prvTraceInitCortexM()
{
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8005204:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <prvTraceInitCortexM+0x3c>)
 8005206:	4a0f      	ldr	r2, [pc, #60]	; (8005244 <prvTraceInitCortexM+0x40>)
 8005208:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 800520a:	f503 434e 	add.w	r3, r3, #52736	; 0xce00
 800520e:	334c      	adds	r3, #76	; 0x4c
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005216:	601a      	str	r2, [r3, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	b913      	cbnz	r3, 8005222 <prvTraceInitCortexM+0x1e>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 800521c:	480a      	ldr	r0, [pc, #40]	; (8005248 <prvTraceInitCortexM+0x44>)
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 800521e:	f7ff bd0b 	b.w	8004c38 <prvTraceError>
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 8005222:	4a0a      	ldr	r2, [pc, #40]	; (800524c <prvTraceInitCortexM+0x48>)
 8005224:	6813      	ldr	r3, [r2, #0]
 8005226:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 800522a:	d001      	beq.n	8005230 <prvTraceInitCortexM+0x2c>
			prvTraceError("DWT_CYCCNT not available, see code comment.");
 800522c:	4808      	ldr	r0, [pc, #32]	; (8005250 <prvTraceInitCortexM+0x4c>)
 800522e:	e7f6      	b.n	800521e <prvTraceInitCortexM+0x1a>
			break;
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 8005230:	4908      	ldr	r1, [pc, #32]	; (8005254 <prvTraceInitCortexM+0x50>)
 8005232:	600b      	str	r3, [r1, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8005234:	6813      	ldr	r3, [r2, #0]
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	e0001fb0 	.word	0xe0001fb0
 8005244:	c5acce55 	.word	0xc5acce55
 8005248:	08015e7b 	.word	0x08015e7b
 800524c:	e0001000 	.word	0xe0001000
 8005250:	08015ea5 	.word	0x08015ea5
 8005254:	e0001004 	.word	0xe0001004

08005258 <prvTraceInitTraceData>:
{	
 8005258:	b538      	push	{r3, r4, r5, lr}
	if (RecorderDataPtr == NULL)
 800525a:	4c3c      	ldr	r4, [pc, #240]	; (800534c <prvTraceInitTraceData+0xf4>)
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d16f      	bne.n	8005342 <prvTraceInitTraceData+0xea>
	RecorderDataPtr = &RecorderData;
 8005262:	4b3b      	ldr	r3, [pc, #236]	; (8005350 <prvTraceInitTraceData+0xf8>)
 8005264:	6023      	str	r3, [r4, #0]
	init_hwtc_count = TRC_HWTC_COUNT;
 8005266:	4b3b      	ldr	r3, [pc, #236]	; (8005354 <prvTraceInitTraceData+0xfc>)
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8005268:	f641 45bc 	movw	r5, #7356	; 0x1cbc
 800526c:	2100      	movs	r1, #0
 800526e:	6820      	ldr	r0, [r4, #0]
	init_hwtc_count = TRC_HWTC_COUNT;
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4b39      	ldr	r3, [pc, #228]	; (8005358 <prvTraceInitTraceData+0x100>)
 8005274:	601a      	str	r2, [r3, #0]
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8005276:	462a      	mov	r2, r5
 8005278:	f00e f809 	bl	801328e <memset>
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	4a37      	ldr	r2, [pc, #220]	; (800535c <prvTraceInitTraceData+0x104>)
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8005280:	f04f 30f0 	mov.w	r0, #4042322160	; 0xf0f0f0f0
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 8005284:	e9c3 2503 	strd	r2, r5, [r3, #12]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8005288:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 800528c:	2501      	movs	r5, #1
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 800528e:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8005290:	2200      	movs	r2, #0
 8005292:	e9c3 0215 	strd	r0, r2, [r3, #84]	; 0x54
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8005296:	635a      	str	r2, [r3, #52]	; 0x34
	vTraceInitObjectPropertyTable();
 8005298:	f7ff fbd8 	bl	8004a4c <vTraceInitObjectPropertyTable>
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 800529c:	6820      	ldr	r0, [r4, #0]
 800529e:	f04f 33f1 	mov.w	r3, #4059165169	; 0xf1f1f1f1
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 80052a2:	2250      	movs	r2, #80	; 0x50
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 80052a4:	f8c0 5908 	str.w	r5, [r0, #2312]	; 0x908
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 80052a8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 80052ac:	f44f 7348 	mov.w	r3, #800	; 0x320
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 80052b0:	492b      	ldr	r1, [pc, #172]	; (8005360 <prvTraceInitTraceData+0x108>)
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 80052b2:	f8c0 3904 	str.w	r3, [r0, #2308]	; 0x904
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 80052b6:	f04f 33f2 	mov.w	r3, #4076008178	; 0xf2f2f2f2
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 80052ba:	f600 40b8 	addw	r0, r0, #3256	; 0xcb8
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 80052be:	f840 3c04 	str.w	r3, [r0, #-4]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 80052c2:	f7ff fc3f 	bl	8004b44 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
	RecorderDataPtr->endmarker0 = 0x0A;
 80052cc:	4925      	ldr	r1, [pc, #148]	; (8005364 <prvTraceInitTraceData+0x10c>)
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 80052ce:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	RecorderDataPtr->endmarker0 = 0x0A;
 80052d2:	f641 42b0 	movw	r2, #7344	; 0x1cb0
 80052d6:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
 80052d8:	f641 42b4 	movw	r2, #7348	; 0x1cb4
 80052dc:	f101 3167 	add.w	r1, r1, #1734829927	; 0x67676767
 80052e0:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
 80052e2:	f101 3180 	add.w	r1, r1, #2155905152	; 0x80808080
 80052e6:	f641 42b8 	movw	r2, #7352	; 0x1cb8
 80052ea:	5099      	str	r1, [r3, r2]
	vTraceInitObjectHandleStack();
 80052ec:	f7ff fbec 	bl	8004ac8 <vTraceInitObjectHandleStack>
	RecorderDataPtr->startmarker11 = 0xF4;
 80052f0:	6820      	ldr	r0, [r4, #0]
 80052f2:	23f4      	movs	r3, #244	; 0xf4
 80052f4:	72c3      	strb	r3, [r0, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 80052f6:	23f3      	movs	r3, #243	; 0xf3
 80052f8:	7283      	strb	r3, [r0, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 80052fa:	23f2      	movs	r3, #242	; 0xf2
 80052fc:	7243      	strb	r3, [r0, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 80052fe:	23f1      	movs	r3, #241	; 0xf1
 8005300:	7203      	strb	r3, [r0, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 8005302:	2374      	movs	r3, #116	; 0x74
 8005304:	71c3      	strb	r3, [r0, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8005306:	2373      	movs	r3, #115	; 0x73
 8005308:	7183      	strb	r3, [r0, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 800530a:	2372      	movs	r3, #114	; 0x72
 800530c:	7143      	strb	r3, [r0, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 800530e:	2371      	movs	r3, #113	; 0x71
 8005310:	7103      	strb	r3, [r0, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8005312:	2304      	movs	r3, #4
 8005314:	70c3      	strb	r3, [r0, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8005316:	2303      	movs	r3, #3
 8005318:	7083      	strb	r3, [r0, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
 800531a:	2302      	movs	r3, #2
 800531c:	7043      	strb	r3, [r0, #1]
	if (traceErrorMessage != NULL)
 800531e:	4b12      	ldr	r3, [pc, #72]	; (8005368 <prvTraceInitTraceData+0x110>)
	RecorderDataPtr->startmarker0 = 0x01; 
 8005320:	7005      	strb	r5, [r0, #0]
	if (traceErrorMessage != NULL)
 8005322:	6819      	ldr	r1, [r3, #0]
 8005324:	b149      	cbz	r1, 800533a <prvTraceInitTraceData+0xe2>
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005326:	2250      	movs	r2, #80	; 0x50
 8005328:	f600 40b8 	addw	r0, r0, #3256	; 0xcb8
 800532c:	f7ff fc0a 	bl	8004b44 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	f8c3 5cb0 	str.w	r5, [r3, #3248]	; 0xcb0
		vTraceStop();
 8005336:	f7ff fc69 	bl	8004c0c <vTraceStop>
}
 800533a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TRC_PORT_SPECIFIC_INIT();
 800533e:	f7ff bf61 	b.w	8005204 <prvTraceInitCortexM>
		if (RecorderDataPtr->startmarker0 == 1)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d18e      	bne.n	8005266 <prvTraceInitTraceData+0xe>
}
 8005348:	bd38      	pop	{r3, r4, r5, pc}
 800534a:	bf00      	nop
 800534c:	240007f8 	.word	0x240007f8
 8005350:	2401cfd0 	.word	0x2401cfd0
 8005354:	e0001004 	.word	0xe0001004
 8005358:	2401ec8c 	.word	0x2401ec8c
 800535c:	00051aa1 	.word	0x00051aa1
 8005360:	08015ed1 	.word	0x08015ed1
 8005364:	0d0c0b0a 	.word	0x0d0c0b0a
 8005368:	240008e8 	.word	0x240008e8

0800536c <prvTracePortGetTimeStamp>:
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 800536c:	4b0e      	ldr	r3, [pc, #56]	; (80053a8 <prvTracePortGetTimeStamp+0x3c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b01      	cmp	r3, #1
{
 8005372:	b530      	push	{r4, r5, lr}
	if (trace_disable_timestamp == 1)
 8005374:	d104      	bne.n	8005380 <prvTracePortGetTimeStamp+0x14>
	{
		if (pTimestamp)
 8005376:	b110      	cbz	r0, 800537e <prvTracePortGetTimeStamp+0x12>
			*pTimestamp = last_timestamp;
 8005378:	4b0c      	ldr	r3, [pc, #48]	; (80053ac <prvTracePortGetTimeStamp+0x40>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6003      	str	r3, [r0, #0]
	if (pTimestamp)
		*pTimestamp = last_timestamp;

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
}
 800537e:	bd30      	pop	{r4, r5, pc}
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8005380:	490b      	ldr	r1, [pc, #44]	; (80053b0 <prvTracePortGetTimeStamp+0x44>)
	hwtc_count = (TRC_HWTC_COUNT);
 8005382:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <prvTracePortGetTimeStamp+0x48>)
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8005384:	4a0c      	ldr	r2, [pc, #48]	; (80053b8 <prvTracePortGetTimeStamp+0x4c>)
	hwtc_count = (TRC_HWTC_COUNT);
 8005386:	681c      	ldr	r4, [r3, #0]
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8005388:	680b      	ldr	r3, [r1, #0]
 800538a:	6815      	ldr	r5, [r2, #0]
 800538c:	4423      	add	r3, r4
 800538e:	1b5b      	subs	r3, r3, r5
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8005390:	f003 0503 	and.w	r5, r3, #3
 8005394:	600d      	str	r5, [r1, #0]
	last_timestamp += diff_scaled;
 8005396:	4d05      	ldr	r5, [pc, #20]	; (80053ac <prvTracePortGetTimeStamp+0x40>)
 8005398:	6829      	ldr	r1, [r5, #0]
 800539a:	eb01 0393 	add.w	r3, r1, r3, lsr #2
 800539e:	602b      	str	r3, [r5, #0]
	if (pTimestamp)
 80053a0:	b100      	cbz	r0, 80053a4 <prvTracePortGetTimeStamp+0x38>
		*pTimestamp = last_timestamp;
 80053a2:	6003      	str	r3, [r0, #0]
	last_hwtc_count = hwtc_count;
 80053a4:	6014      	str	r4, [r2, #0]
 80053a6:	e7ea      	b.n	800537e <prvTracePortGetTimeStamp+0x12>
 80053a8:	240008ec 	.word	0x240008ec
 80053ac:	24000810 	.word	0x24000810
 80053b0:	2400080c 	.word	0x2400080c
 80053b4:	e0001004 	.word	0xe0001004
 80053b8:	24000808 	.word	0x24000808

080053bc <prvTraceGetDTS>:
{
 80053bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 80053be:	28ff      	cmp	r0, #255	; 0xff
	uint32_t timestamp = 0;
 80053c0:	f04f 0400 	mov.w	r4, #0
{
 80053c4:	4605      	mov	r5, r0
	uint32_t timestamp = 0;
 80053c6:	9401      	str	r4, [sp, #4]
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 80053c8:	d009      	beq.n	80053de <prvTraceGetDTS+0x22>
 80053ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053ce:	4298      	cmp	r0, r3
 80053d0:	d005      	beq.n	80053de <prvTraceGetDTS+0x22>
 80053d2:	482e      	ldr	r0, [pc, #184]	; (800548c <prvTraceGetDTS+0xd0>)
 80053d4:	f7ff fc30 	bl	8004c38 <prvTraceError>
 80053d8:	4620      	mov	r0, r4
}
 80053da:	b002      	add	sp, #8
 80053dc:	bd70      	pop	{r4, r5, r6, pc}
	if (RecorderDataPtr->frequency == 0)
 80053de:	4e2c      	ldr	r6, [pc, #176]	; (8005490 <prvTraceGetDTS+0xd4>)
 80053e0:	6832      	ldr	r2, [r6, #0]
 80053e2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80053e4:	b929      	cbnz	r1, 80053f2 <prvTraceGetDTS+0x36>
		if (timestampFrequency != 0)
 80053e6:	4b2b      	ldr	r3, [pc, #172]	; (8005494 <prvTraceGetDTS+0xd8>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d033      	beq.n	8005456 <prvTraceGetDTS+0x9a>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 80053ee:	089b      	lsrs	r3, r3, #2
 80053f0:	6253      	str	r3, [r2, #36]	; 0x24
	prvTracePortGetTimeStamp(&timestamp);	
 80053f2:	a801      	add	r0, sp, #4
 80053f4:	f7ff ffba 	bl	800536c <prvTracePortGetTimeStamp>
	dts = timestamp - old_timestamp;
 80053f8:	4b27      	ldr	r3, [pc, #156]	; (8005498 <prvTraceGetDTS+0xdc>)
 80053fa:	9a01      	ldr	r2, [sp, #4]
 80053fc:	681c      	ldr	r4, [r3, #0]
	old_timestamp = timestamp;
 80053fe:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->frequency > 0)
 8005400:	6833      	ldr	r3, [r6, #0]
	dts = timestamp - old_timestamp;
 8005402:	1b14      	subs	r4, r2, r4
	if (RecorderDataPtr->frequency > 0)
 8005404:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005406:	2900      	cmp	r1, #0
 8005408:	d031      	beq.n	800546e <prvTraceGetDTS+0xb2>
		if (dts > RecorderDataPtr->frequency)
 800540a:	42a1      	cmp	r1, r4
 800540c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800540e:	d22b      	bcs.n	8005468 <prvTraceGetDTS+0xac>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8005410:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8005412:	fbb4 f2f1 	udiv	r2, r4, r1
 8005416:	4416      	add	r6, r2
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8005418:	fb01 4212 	mls	r2, r1, r2, r4
 800541c:	4402      	add	r2, r0
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 800541e:	62de      	str	r6, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8005420:	629a      	str	r2, [r3, #40]	; 0x28
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8005422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005424:	4291      	cmp	r1, r2
 8005426:	d804      	bhi.n	8005432 <prvTraceGetDTS+0x76>
			RecorderDataPtr->absTimeLastEventSecond++;
 8005428:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 800542a:	1a51      	subs	r1, r2, r1
			RecorderDataPtr->absTimeLastEventSecond++;
 800542c:	3001      	adds	r0, #1
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 800542e:	6299      	str	r1, [r3, #40]	; 0x28
			RecorderDataPtr->absTimeLastEventSecond++;
 8005430:	62d8      	str	r0, [r3, #44]	; 0x2c
	if (dts > param_maxDTS)
 8005432:	42a5      	cmp	r5, r4
 8005434:	d20c      	bcs.n	8005450 <prvTraceGetDTS+0x94>
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8005436:	f7ff fc1b 	bl	8004c70 <prvTraceNextFreeEventBufferSlot>
		if (xts != NULL)
 800543a:	b148      	cbz	r0, 8005450 <prvTraceGetDTS+0x94>
			if (param_maxDTS == 0xFFFF)
 800543c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005440:	429d      	cmp	r5, r3
 8005442:	d116      	bne.n	8005472 <prvTraceGetDTS+0xb6>
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8005444:	0c23      	lsrs	r3, r4, #16
 8005446:	8043      	strh	r3, [r0, #2]
				xts->type = XTS16;
 8005448:	23a9      	movs	r3, #169	; 0xa9
 800544a:	8003      	strh	r3, [r0, #0]
			prvTraceUpdateCounters();
 800544c:	f7ff fbc6 	bl	8004bdc <prvTraceUpdateCounters>
	return (uint16_t)dts & param_maxDTS;
 8005450:	ea05 0004 	and.w	r0, r5, r4
 8005454:	e7c1      	b.n	80053da <prvTraceGetDTS+0x1e>
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8005456:	4b11      	ldr	r3, [pc, #68]	; (800549c <prvTraceGetDTS+0xe0>)
 8005458:	6819      	ldr	r1, [r3, #0]
 800545a:	4b11      	ldr	r3, [pc, #68]	; (80054a0 <prvTraceGetDTS+0xe4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4299      	cmp	r1, r3
 8005460:	d0c7      	beq.n	80053f2 <prvTraceGetDTS+0x36>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8005462:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <prvTraceGetDTS+0xe8>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	e7c2      	b.n	80053ee <prvTraceGetDTS+0x32>
			RecorderDataPtr->absTimeLastEvent += dts;
 8005468:	4420      	add	r0, r4
 800546a:	6298      	str	r0, [r3, #40]	; 0x28
 800546c:	e7d9      	b.n	8005422 <prvTraceGetDTS+0x66>
		RecorderDataPtr->absTimeLastEvent = timestamp;
 800546e:	629a      	str	r2, [r3, #40]	; 0x28
 8005470:	e7df      	b.n	8005432 <prvTraceGetDTS+0x76>
			else if (param_maxDTS == 0xFF)
 8005472:	2dff      	cmp	r5, #255	; 0xff
 8005474:	d106      	bne.n	8005484 <prvTraceGetDTS+0xc8>
				xts->type = XTS8;
 8005476:	23a8      	movs	r3, #168	; 0xa8
 8005478:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 800547a:	0a23      	lsrs	r3, r4, #8
 800547c:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 800547e:	0e23      	lsrs	r3, r4, #24
 8005480:	7043      	strb	r3, [r0, #1]
 8005482:	e7e3      	b.n	800544c <prvTraceGetDTS+0x90>
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 8005484:	4808      	ldr	r0, [pc, #32]	; (80054a8 <prvTraceGetDTS+0xec>)
 8005486:	f7ff fbd7 	bl	8004c38 <prvTraceError>
 800548a:	e7df      	b.n	800544c <prvTraceGetDTS+0x90>
 800548c:	08015d4d 	.word	0x08015d4d
 8005490:	240007f8 	.word	0x240007f8
 8005494:	240008e4 	.word	0x240008e4
 8005498:	240008dc 	.word	0x240008dc
 800549c:	e0001004 	.word	0xe0001004
 80054a0:	2401ec8c 	.word	0x2401ec8c
 80054a4:	24000000 	.word	0x24000000
 80054a8:	08015d8a 	.word	0x08015d8a

080054ac <prvTraceStoreTaskReady>:
{
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle == 0)
 80054ae:	4605      	mov	r5, r0
 80054b0:	b368      	cbz	r0, 800550e <prvTraceStoreTaskReady+0x62>
	if (! readyEventsEnabled)
 80054b2:	4b17      	ldr	r3, [pc, #92]	; (8005510 <prvTraceStoreTaskReady+0x64>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	b353      	cbz	r3, 800550e <prvTraceStoreTaskReady+0x62>
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
 80054b8:	280f      	cmp	r0, #15
 80054ba:	d904      	bls.n	80054c6 <prvTraceStoreTaskReady+0x1a>
 80054bc:	4815      	ldr	r0, [pc, #84]	; (8005514 <prvTraceStoreTaskReady+0x68>)
}
 80054be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 80054c2:	f7ff bbb9 	b.w	8004c38 <prvTraceError>
	if (recorder_busy)
 80054c6:	4c14      	ldr	r4, [pc, #80]	; (8005518 <prvTraceStoreTaskReady+0x6c>)
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	b10b      	cbz	r3, 80054d0 <prvTraceStoreTaskReady+0x24>
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 80054cc:	4813      	ldr	r0, [pc, #76]	; (800551c <prvTraceStoreTaskReady+0x70>)
 80054ce:	e7f6      	b.n	80054be <prvTraceStoreTaskReady+0x12>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054d0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d4:	2301      	movs	r3, #1
 80054d6:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	3301      	adds	r3, #1
 80054de:	6023      	str	r3, [r4, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 80054e0:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <prvTraceStoreTaskReady+0x74>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	b16b      	cbz	r3, 8005504 <prvTraceStoreTaskReady+0x58>
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80054e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80054ec:	f7ff ff66 	bl	80053bc <prvTraceGetDTS>
 80054f0:	4607      	mov	r7, r0
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 80054f2:	f7ff fbbd 	bl	8004c70 <prvTraceNextFreeEventBufferSlot>
		if (tr != NULL)
 80054f6:	b128      	cbz	r0, 8005504 <prvTraceStoreTaskReady+0x58>
			tr->type = DIV_TASK_READY;
 80054f8:	2302      	movs	r3, #2
			tr->dts = dts3;
 80054fa:	8047      	strh	r7, [r0, #2]
			tr->objHandle = hnd8;
 80054fc:	7045      	strb	r5, [r0, #1]
			tr->type = DIV_TASK_READY;
 80054fe:	7003      	strb	r3, [r0, #0]
			prvTraceUpdateCounters();
 8005500:	f7ff fb6c 	bl	8004bdc <prvTraceUpdateCounters>
	trcCRITICAL_SECTION_END();
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	3b01      	subs	r3, #1
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	f386 8810 	msr	PRIMASK, r6
}
 800550e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005510:	24000014 	.word	0x24000014
 8005514:	080165a2 	.word	0x080165a2
 8005518:	240008e0 	.word	0x240008e0
 800551c:	080165e1 	.word	0x080165e1
 8005520:	240007f8 	.word	0x240007f8

08005524 <vTraceStoreMemMangEvent>:
{
 8005524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (RecorderDataPtr == NULL)
 8005528:	4d2a      	ldr	r5, [pc, #168]	; (80055d4 <vTraceStoreMemMangEvent+0xb0>)
{
 800552a:	4680      	mov	r8, r0
 800552c:	460f      	mov	r7, r1
	if (RecorderDataPtr == NULL)
 800552e:	682b      	ldr	r3, [r5, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d04c      	beq.n	80055ce <vTraceStoreMemMangEvent+0xaa>
		size = (uint32_t)(- signed_size);
 8005534:	ea82 7ae2 	eor.w	sl, r2, r2, asr #31
 8005538:	ebaa 7ae2 	sub.w	sl, sl, r2, asr #31
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800553c:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005540:	2301      	movs	r3, #1
 8005542:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 8005546:	4c24      	ldr	r4, [pc, #144]	; (80055d8 <vTraceStoreMemMangEvent+0xb4>)
 8005548:	6821      	ldr	r1, [r4, #0]
 800554a:	4419      	add	r1, r3
 800554c:	6021      	str	r1, [r4, #0]
	if (address != 0)
 800554e:	b11f      	cbz	r7, 8005558 <vTraceStoreMemMangEvent+0x34>
		heapMemUsage += (uint32_t)signed_size;
 8005550:	4922      	ldr	r1, [pc, #136]	; (80055dc <vTraceStoreMemMangEvent+0xb8>)
 8005552:	680b      	ldr	r3, [r1, #0]
 8005554:	4413      	add	r3, r2
 8005556:	600b      	str	r3, [r1, #0]
	if (RecorderDataPtr->recorderActive)
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555c:	b393      	cbz	r3, 80055c4 <vTraceStoreMemMangEvent+0xa0>
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 800555e:	20ff      	movs	r0, #255	; 0xff
 8005560:	f7ff ff2c 	bl	80053bc <prvTraceGetDTS>
	if (param <= param_max)
 8005564:	f5ba 3f80 	cmp.w	sl, #65536	; 0x10000
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8005568:	4683      	mov	fp, r0
	if (param <= param_max)
 800556a:	d305      	bcc.n	8005578 <vTraceStoreMemMangEvent+0x54>
 800556c:	4651      	mov	r1, sl
 800556e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005572:	f7ff fb95 	bl	8004ca0 <prvTraceGetParam.part.5>
 8005576:	4682      	mov	sl, r0
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8005578:	f7ff fb7a 	bl	8004c70 <prvTraceNextFreeEventBufferSlot>
		if (ms != NULL)
 800557c:	4606      	mov	r6, r0
 800557e:	b308      	cbz	r0, 80055c4 <vTraceStoreMemMangEvent+0xa0>
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8005580:	2300      	movs	r3, #0
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8005582:	f880 b001 	strb.w	fp, [r0, #1]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8005586:	f8a0 a002 	strh.w	sl, [r0, #2]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 800558a:	7003      	strb	r3, [r0, #0]
			prvTraceUpdateCounters();
 800558c:	f7ff fb26 	bl	8004bdc <prvTraceUpdateCounters>
	if (param <= param_max)
 8005590:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 8005594:	d305      	bcc.n	80055a2 <vTraceStoreMemMangEvent+0x7e>
 8005596:	4639      	mov	r1, r7
 8005598:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800559c:	f7ff fb80 	bl	8004ca0 <prvTraceGetParam.part.5>
 80055a0:	4607      	mov	r7, r0
			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 80055a2:	f7ff fb65 	bl	8004c70 <prvTraceNextFreeEventBufferSlot>
			if (ma != NULL)
 80055a6:	b168      	cbz	r0, 80055c4 <vTraceStoreMemMangEvent+0xa0>
				ma->addr_high = addr_high;
 80055a8:	2300      	movs	r3, #0
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 80055aa:	8047      	strh	r7, [r0, #2]
				ma->addr_high = addr_high;
 80055ac:	7043      	strb	r3, [r0, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
 80055ae:	fa5f f388 	uxtb.w	r3, r8
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	7002      	strb	r2, [r0, #0]
				ms->type = (uint8_t) ecode;
 80055b6:	7033      	strb	r3, [r6, #0]
				prvTraceUpdateCounters();					
 80055b8:	f7ff fb10 	bl	8004bdc <prvTraceUpdateCounters>
				RecorderDataPtr->heapMemUsage = heapMemUsage;
 80055bc:	4a07      	ldr	r2, [pc, #28]	; (80055dc <vTraceStoreMemMangEvent+0xb8>)
 80055be:	682b      	ldr	r3, [r5, #0]
 80055c0:	6812      	ldr	r2, [r2, #0]
 80055c2:	651a      	str	r2, [r3, #80]	; 0x50
	trcCRITICAL_SECTION_END();
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	f389 8810 	msr	PRIMASK, r9
}
 80055ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d2:	bf00      	nop
 80055d4:	240007f8 	.word	0x240007f8
 80055d8:	240008e0 	.word	0x240008e0
 80055dc:	24000800 	.word	0x24000800

080055e0 <prvTraceStoreKernelCall>:
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 80055e0:	28fe      	cmp	r0, #254	; 0xfe
{
 80055e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e6:	4605      	mov	r5, r0
 80055e8:	4617      	mov	r7, r2
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 80055ea:	d904      	bls.n	80055f6 <prvTraceStoreKernelCall+0x16>
 80055ec:	481c      	ldr	r0, [pc, #112]	; (8005660 <prvTraceStoreKernelCall+0x80>)
}
 80055ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 80055f2:	f7ff bb21 	b.w	8004c38 <prvTraceError>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 80055f6:	2908      	cmp	r1, #8
 80055f8:	d901      	bls.n	80055fe <prvTraceStoreKernelCall+0x1e>
 80055fa:	481a      	ldr	r0, [pc, #104]	; (8005664 <prvTraceStoreKernelCall+0x84>)
 80055fc:	e7f7      	b.n	80055ee <prvTraceStoreKernelCall+0xe>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 80055fe:	481a      	ldr	r0, [pc, #104]	; (8005668 <prvTraceStoreKernelCall+0x88>)
 8005600:	6803      	ldr	r3, [r0, #0]
 8005602:	440b      	add	r3, r1
 8005604:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005608:	4293      	cmp	r3, r2
 800560a:	d201      	bcs.n	8005610 <prvTraceStoreKernelCall+0x30>
 800560c:	4817      	ldr	r0, [pc, #92]	; (800566c <prvTraceStoreKernelCall+0x8c>)
 800560e:	e7ee      	b.n	80055ee <prvTraceStoreKernelCall+0xe>
	if (recorder_busy)
 8005610:	4c17      	ldr	r4, [pc, #92]	; (8005670 <prvTraceStoreKernelCall+0x90>)
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	b10b      	cbz	r3, 800561a <prvTraceStoreKernelCall+0x3a>
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8005616:	4817      	ldr	r0, [pc, #92]	; (8005674 <prvTraceStoreKernelCall+0x94>)
 8005618:	e7e9      	b.n	80055ee <prvTraceStoreKernelCall+0xe>
	if (handle_of_last_logged_task == 0)
 800561a:	4b17      	ldr	r3, [pc, #92]	; (8005678 <prvTraceStoreKernelCall+0x98>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	b1eb      	cbz	r3, 800565c <prvTraceStoreKernelCall+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005620:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005624:	2301      	movs	r3, #1
 8005626:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	3301      	adds	r3, #1
 800562e:	6023      	str	r3, [r4, #0]
	if (RecorderDataPtr->recorderActive)
 8005630:	6803      	ldr	r3, [r0, #0]
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	b16b      	cbz	r3, 8005652 <prvTraceStoreKernelCall+0x72>
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8005636:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800563a:	f7ff febf 	bl	80053bc <prvTraceGetDTS>
 800563e:	4680      	mov	r8, r0
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8005640:	f7ff fb16 	bl	8004c70 <prvTraceNextFreeEventBufferSlot>
		if (kse != NULL)
 8005644:	b128      	cbz	r0, 8005652 <prvTraceStoreKernelCall+0x72>
			kse->dts = dts1;
 8005646:	f8a0 8002 	strh.w	r8, [r0, #2]
			kse->type = (uint8_t)ecode;
 800564a:	7005      	strb	r5, [r0, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 800564c:	7047      	strb	r7, [r0, #1]
			prvTraceUpdateCounters();
 800564e:	f7ff fac5 	bl	8004bdc <prvTraceUpdateCounters>
	trcCRITICAL_SECTION_END();
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	3b01      	subs	r3, #1
 8005656:	6023      	str	r3, [r4, #0]
 8005658:	f386 8810 	msr	PRIMASK, r6
}
 800565c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005660:	080161cb 	.word	0x080161cb
 8005664:	08016200 	.word	0x08016200
 8005668:	240007f8 	.word	0x240007f8
 800566c:	08016245 	.word	0x08016245
 8005670:	240008e0 	.word	0x240008e0
 8005674:	0801628b 	.word	0x0801628b
 8005678:	240007fc 	.word	0x240007fc

0800567c <prvTraceStoreKernelCallWithParam>:
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 800567c:	28fe      	cmp	r0, #254	; 0xfe
{
 800567e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005682:	4680      	mov	r8, r0
 8005684:	4617      	mov	r7, r2
 8005686:	461d      	mov	r5, r3
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 8005688:	d904      	bls.n	8005694 <prvTraceStoreKernelCallWithParam+0x18>
 800568a:	4821      	ldr	r0, [pc, #132]	; (8005710 <prvTraceStoreKernelCallWithParam+0x94>)
}
 800568c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8005690:	f7ff bad2 	b.w	8004c38 <prvTraceError>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8005694:	2908      	cmp	r1, #8
 8005696:	d901      	bls.n	800569c <prvTraceStoreKernelCallWithParam+0x20>
 8005698:	481e      	ldr	r0, [pc, #120]	; (8005714 <prvTraceStoreKernelCallWithParam+0x98>)
 800569a:	e7f7      	b.n	800568c <prvTraceStoreKernelCallWithParam+0x10>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
 800569c:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <prvTraceStoreKernelCallWithParam+0x9c>)
 800569e:	6813      	ldr	r3, [r2, #0]
 80056a0:	440b      	add	r3, r1
 80056a2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80056a6:	42bb      	cmp	r3, r7
 80056a8:	d201      	bcs.n	80056ae <prvTraceStoreKernelCallWithParam+0x32>
 80056aa:	481c      	ldr	r0, [pc, #112]	; (800571c <prvTraceStoreKernelCallWithParam+0xa0>)
 80056ac:	e7ee      	b.n	800568c <prvTraceStoreKernelCallWithParam+0x10>
	if (recorder_busy)
 80056ae:	4c1c      	ldr	r4, [pc, #112]	; (8005720 <prvTraceStoreKernelCallWithParam+0xa4>)
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	b10b      	cbz	r3, 80056b8 <prvTraceStoreKernelCallWithParam+0x3c>
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 80056b4:	481b      	ldr	r0, [pc, #108]	; (8005724 <prvTraceStoreKernelCallWithParam+0xa8>)
 80056b6:	e7e9      	b.n	800568c <prvTraceStoreKernelCallWithParam+0x10>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056b8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056bc:	2301      	movs	r3, #1
 80056be:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	3301      	adds	r3, #1
 80056c6:	6023      	str	r3, [r4, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80056c8:	6813      	ldr	r3, [r2, #0]
 80056ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056cc:	b1c3      	cbz	r3, 8005700 <prvTraceStoreKernelCallWithParam+0x84>
 80056ce:	4b16      	ldr	r3, [pc, #88]	; (8005728 <prvTraceStoreKernelCallWithParam+0xac>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	b1ab      	cbz	r3, 8005700 <prvTraceStoreKernelCallWithParam+0x84>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 80056d4:	20ff      	movs	r0, #255	; 0xff
 80056d6:	f7ff fe71 	bl	80053bc <prvTraceGetDTS>
	if (param <= param_max)
 80056da:	2dff      	cmp	r5, #255	; 0xff
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 80056dc:	4681      	mov	r9, r0
	if (param <= param_max)
 80056de:	d904      	bls.n	80056ea <prvTraceStoreKernelCallWithParam+0x6e>
 80056e0:	4629      	mov	r1, r5
 80056e2:	20ff      	movs	r0, #255	; 0xff
 80056e4:	f7ff fadc 	bl	8004ca0 <prvTraceGetParam.part.5>
 80056e8:	4605      	mov	r5, r0
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 80056ea:	f7ff fac1 	bl	8004c70 <prvTraceNextFreeEventBufferSlot>
		if (kse != NULL)
 80056ee:	b138      	cbz	r0, 8005700 <prvTraceStoreKernelCallWithParam+0x84>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 80056f0:	f880 9003 	strb.w	r9, [r0, #3]
			kse->type = (uint8_t)evtcode;
 80056f4:	f880 8000 	strb.w	r8, [r0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 80056f8:	7047      	strb	r7, [r0, #1]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 80056fa:	7085      	strb	r5, [r0, #2]
			prvTraceUpdateCounters();
 80056fc:	f7ff fa6e 	bl	8004bdc <prvTraceUpdateCounters>
	trcCRITICAL_SECTION_END();
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	3b01      	subs	r3, #1
 8005704:	6023      	str	r3, [r4, #0]
 8005706:	f386 8810 	msr	PRIMASK, r6
}
 800570a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800570e:	bf00      	nop
 8005710:	0801634a 	.word	0x0801634a
 8005714:	0801638a 	.word	0x0801638a
 8005718:	240007f8 	.word	0x240007f8
 800571c:	080163d8 	.word	0x080163d8
 8005720:	240008e0 	.word	0x240008e0
 8005724:	08016427 	.word	0x08016427
 8005728:	240007fc 	.word	0x240007fc

0800572c <prvTraceStoreKernelCallWithNumericParamOnly>:
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 800572c:	28fe      	cmp	r0, #254	; 0xfe
{
 800572e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005732:	4607      	mov	r7, r0
 8005734:	460d      	mov	r5, r1
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 8005736:	d904      	bls.n	8005742 <prvTraceStoreKernelCallWithNumericParamOnly+0x16>
 8005738:	481a      	ldr	r0, [pc, #104]	; (80057a4 <prvTraceStoreKernelCallWithNumericParamOnly+0x78>)
}
 800573a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 800573e:	f7ff ba7b 	b.w	8004c38 <prvTraceError>
	if (recorder_busy)
 8005742:	4c19      	ldr	r4, [pc, #100]	; (80057a8 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	b10b      	cbz	r3, 800574c <prvTraceStoreKernelCallWithNumericParamOnly+0x20>
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8005748:	4818      	ldr	r0, [pc, #96]	; (80057ac <prvTraceStoreKernelCallWithNumericParamOnly+0x80>)
 800574a:	e7f6      	b.n	800573a <prvTraceStoreKernelCallWithNumericParamOnly+0xe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800574c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005750:	2301      	movs	r3, #1
 8005752:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	3301      	adds	r3, #1
 800575a:	6023      	str	r3, [r4, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 800575c:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <prvTraceStoreKernelCallWithNumericParamOnly+0x84>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	b1c3      	cbz	r3, 8005796 <prvTraceStoreKernelCallWithNumericParamOnly+0x6a>
 8005764:	4b13      	ldr	r3, [pc, #76]	; (80057b4 <prvTraceStoreKernelCallWithNumericParamOnly+0x88>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	b1ab      	cbz	r3, 8005796 <prvTraceStoreKernelCallWithNumericParamOnly+0x6a>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 800576a:	20ff      	movs	r0, #255	; 0xff
 800576c:	f7ff fe26 	bl	80053bc <prvTraceGetDTS>
	if (param <= param_max)
 8005770:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8005774:	4680      	mov	r8, r0
	if (param <= param_max)
 8005776:	d305      	bcc.n	8005784 <prvTraceStoreKernelCallWithNumericParamOnly+0x58>
 8005778:	4629      	mov	r1, r5
 800577a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800577e:	f7ff fa8f 	bl	8004ca0 <prvTraceGetParam.part.5>
 8005782:	4605      	mov	r5, r0
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8005784:	f7ff fa74 	bl	8004c70 <prvTraceNextFreeEventBufferSlot>
		if (kse != NULL)
 8005788:	b128      	cbz	r0, 8005796 <prvTraceStoreKernelCallWithNumericParamOnly+0x6a>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 800578a:	f880 8001 	strb.w	r8, [r0, #1]
			kse->type = (uint8_t)evtcode;
 800578e:	7007      	strb	r7, [r0, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8005790:	8045      	strh	r5, [r0, #2]
			prvTraceUpdateCounters();
 8005792:	f7ff fa23 	bl	8004bdc <prvTraceUpdateCounters>
	trcCRITICAL_SECTION_END();
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	3b01      	subs	r3, #1
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	f386 8810 	msr	PRIMASK, r6
}
 80057a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057a4:	080162c0 	.word	0x080162c0
 80057a8:	240008e0 	.word	0x240008e0
 80057ac:	08016315 	.word	0x08016315
 80057b0:	240007f8 	.word	0x240007f8
 80057b4:	240007fc 	.word	0x240007fc

080057b8 <prvTraceStoreTaskswitch>:
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 80057b8:	280f      	cmp	r0, #15
{
 80057ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057be:	4607      	mov	r7, r0
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 80057c0:	d904      	bls.n	80057cc <prvTraceStoreTaskswitch+0x14>
 80057c2:	4829      	ldr	r0, [pc, #164]	; (8005868 <prvTraceStoreTaskswitch+0xb0>)
}
 80057c4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 80057c8:	f7ff ba36 	b.w	8004c38 <prvTraceError>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057cc:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d0:	2301      	movs	r3, #1
 80057d2:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 80057d6:	4c25      	ldr	r4, [pc, #148]	; (800586c <prvTraceStoreTaskswitch+0xb4>)
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 80057d8:	4d25      	ldr	r5, [pc, #148]	; (8005870 <prvTraceStoreTaskswitch+0xb8>)
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	3301      	adds	r3, #1
 80057de:	6023      	str	r3, [r4, #0]
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 80057e0:	782b      	ldrb	r3, [r5, #0]
 80057e2:	4283      	cmp	r3, r0
 80057e4:	d039      	beq.n	800585a <prvTraceStoreTaskswitch+0xa2>
 80057e6:	f8df b094 	ldr.w	fp, [pc, #148]	; 800587c <prvTraceStoreTaskswitch+0xc4>
 80057ea:	f8db 3000 	ldr.w	r3, [fp]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f0:	b39b      	cbz	r3, 800585a <prvTraceStoreTaskswitch+0xa2>
		isPendingContextSwitch = 0;
 80057f2:	4b20      	ldr	r3, [pc, #128]	; (8005874 <prvTraceStoreTaskswitch+0xbc>)
 80057f4:	2200      	movs	r2, #0
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80057f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
		isPendingContextSwitch = 0;
 80057fa:	601a      	str	r2, [r3, #0]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80057fc:	f7ff fdde 	bl	80053bc <prvTraceGetDTS>
		handle_of_last_logged_task = task_handle;
 8005800:	702f      	strb	r7, [r5, #0]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8005802:	4681      	mov	r9, r0
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8005804:	f7ff fa34 	bl	8004c70 <prvTraceNextFreeEventBufferSlot>
		if (ts != NULL)
 8005808:	4682      	mov	sl, r0
 800580a:	b330      	cbz	r0, 800585a <prvTraceStoreTaskswitch+0xa2>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 800580c:	f8db 6000 	ldr.w	r6, [fp]
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8005810:	7828      	ldrb	r0, [r5, #0]
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8005812:	f896 3067 	ldrb.w	r3, [r6, #103]	; 0x67
 8005816:	4283      	cmp	r3, r0
 8005818:	d204      	bcs.n	8005824 <prvTraceStoreTaskswitch+0x6c>
 800581a:	4817      	ldr	r0, [pc, #92]	; (8005878 <prvTraceStoreTaskswitch+0xc0>)
 800581c:	f7ff fa0c 	bl	8004c38 <prvTraceError>
				ts->type = TS_TASK_BEGIN;
 8005820:	2306      	movs	r3, #6
 8005822:	e00d      	b.n	8005840 <prvTraceStoreTaskswitch+0x88>
	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8005824:	2103      	movs	r1, #3
 8005826:	f7ff faf9 	bl	8004e1c <uiIndexOfObject>
 800582a:	f8db 3000 	ldr.w	r3, [fp]
 800582e:	4430      	add	r0, r6
 8005830:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8005834:	4418      	add	r0, r3
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8005836:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 800583a:	2b01      	cmp	r3, #1
 800583c:	d1f0      	bne.n	8005820 <prvTraceStoreTaskswitch+0x68>
				ts->type = TS_TASK_RESUME;
 800583e:	2307      	movs	r3, #7
				ts->type = TS_TASK_BEGIN;
 8005840:	f88a 3000 	strb.w	r3, [sl]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8005844:	2201      	movs	r2, #1
 8005846:	7829      	ldrb	r1, [r5, #0]
 8005848:	2003      	movs	r0, #3
			ts->dts = dts3;
 800584a:	f8aa 9002 	strh.w	r9, [sl, #2]
			ts->objHandle = hnd8;
 800584e:	f88a 7001 	strb.w	r7, [sl, #1]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8005852:	f7ff fbd7 	bl	8005004 <prvTraceSetObjectState>
			prvTraceUpdateCounters();
 8005856:	f7ff f9c1 	bl	8004bdc <prvTraceUpdateCounters>
	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	3b01      	subs	r3, #1
 800585e:	6023      	str	r3, [r4, #0]
 8005860:	f388 8810 	msr	PRIMASK, r8
}
 8005864:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005868:	08016616 	.word	0x08016616
 800586c:	240008e0 	.word	0x240008e0
 8005870:	240007fc 	.word	0x240007fc
 8005874:	24000804 	.word	0x24000804
 8005878:	0801665b 	.word	0x0801665b
 800587c:	240007f8 	.word	0x240007f8

08005880 <uiTraceStart>:
{
 8005880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (RecorderDataPtr == NULL)
 8005884:	4d1d      	ldr	r5, [pc, #116]	; (80058fc <uiTraceStart+0x7c>)
 8005886:	682c      	ldr	r4, [r5, #0]
 8005888:	b92c      	cbnz	r4, 8005896 <uiTraceStart+0x16>
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
 800588a:	481d      	ldr	r0, [pc, #116]	; (8005900 <uiTraceStart+0x80>)
 800588c:	f7ff f9d4 	bl	8004c38 <prvTraceError>
 8005890:	4620      	mov	r0, r4
}
 8005892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (RecorderDataPtr->recorderActive == 1)
 8005896:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005898:	2801      	cmp	r0, #1
 800589a:	d0fa      	beq.n	8005892 <uiTraceStart+0x12>
	if (traceErrorMessage == NULL)
 800589c:	4b19      	ldr	r3, [pc, #100]	; (8005904 <uiTraceStart+0x84>)
 800589e:	f8d3 8000 	ldr.w	r8, [r3]
 80058a2:	f1b8 0f00 	cmp.w	r8, #0
 80058a6:	d126      	bne.n	80058f6 <uiTraceStart+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058a8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ac:	2201      	movs	r2, #1
 80058ae:	f382 8810 	msr	PRIMASK, r2
		trcCRITICAL_SECTION_BEGIN();
 80058b2:	4c15      	ldr	r4, [pc, #84]	; (8005908 <uiTraceStart+0x88>)
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	4413      	add	r3, r2
 80058b8:	6023      	str	r3, [r4, #0]
		RecorderDataPtr->recorderActive = 1;
 80058ba:	682b      	ldr	r3, [r5, #0]
 80058bc:	631a      	str	r2, [r3, #48]	; 0x30
		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 80058be:	f7ff f891 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 80058c2:	f7fe fff1 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 80058c6:	b2c6      	uxtb	r6, r0
		if (handle == 0)
 80058c8:	b96e      	cbnz	r6, 80058e6 <uiTraceStart+0x66>
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 80058ca:	2003      	movs	r0, #3
 80058cc:	f7ff fbdc 	bl	8005088 <prvTraceGetObjectHandle>
 80058d0:	4606      	mov	r6, r0
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 80058d2:	4601      	mov	r1, r0
 80058d4:	4a0d      	ldr	r2, [pc, #52]	; (800590c <uiTraceStart+0x8c>)
 80058d6:	2003      	movs	r0, #3
 80058d8:	f7ff fc5c 	bl	8005194 <prvTraceSetObjectName>
			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 80058dc:	4642      	mov	r2, r8
 80058de:	4631      	mov	r1, r6
 80058e0:	2003      	movs	r0, #3
 80058e2:	f7ff fb43 	bl	8004f6c <prvTraceSetPriorityProperty>
		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 80058e6:	4630      	mov	r0, r6
 80058e8:	f7ff ff66 	bl	80057b8 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	f387 8810 	msr	PRIMASK, r7
	return RecorderDataPtr->recorderActive;
 80058f6:	682b      	ldr	r3, [r5, #0]
 80058f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80058fa:	e7ca      	b.n	8005892 <uiTraceStart+0x12>
 80058fc:	240007f8 	.word	0x240007f8
 8005900:	08016711 	.word	0x08016711
 8005904:	240008e8 	.word	0x240008e8
 8005908:	240008e0 	.word	0x240008e0
 800590c:	08016755 	.word	0x08016755

08005910 <vTraceStart>:
	(void)uiTraceStart();
 8005910:	f7ff bfb6 	b.w	8005880 <uiTraceStart>

08005914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800594c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005918:	f7fd fd74 	bl	8003404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800591c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800591e:	e003      	b.n	8005928 <LoopCopyDataInit>

08005920 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005920:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8005922:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005924:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005926:	3104      	adds	r1, #4

08005928 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005928:	480a      	ldr	r0, [pc, #40]	; (8005954 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800592a:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800592c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800592e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005930:	d3f6      	bcc.n	8005920 <CopyDataInit>
  ldr  r2, =_sbss
 8005932:	4a0a      	ldr	r2, [pc, #40]	; (800595c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8005934:	e002      	b.n	800593c <LoopFillZerobss>

08005936 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005936:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005938:	f842 3b04 	str.w	r3, [r2], #4

0800593c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800593c:	4b08      	ldr	r3, [pc, #32]	; (8005960 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800593e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005940:	d3f9      	bcc.n	8005936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005942:	f00d fc65 	bl	8013210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005946:	f7fc fc8b 	bl	8002260 <main>
  bx  lr    
 800594a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800594c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8005950:	08016c80 	.word	0x08016c80
  ldr  r0, =_sdata
 8005954:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8005958:	24000204 	.word	0x24000204
  ldr  r2, =_sbss
 800595c:	24000204 	.word	0x24000204
  ldr  r3, = _ebss
 8005960:	24020a1c 	.word	0x24020a1c

08005964 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005964:	e7fe      	b.n	8005964 <ADC3_IRQHandler>
	...

08005968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005968:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800596a:	2003      	movs	r0, #3
 800596c:	f000 fea0 	bl	80066b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005970:	f003 f920 	bl	8008bb4 <HAL_RCC_GetSysClockFreq>
 8005974:	490f      	ldr	r1, [pc, #60]	; (80059b4 <HAL_Init+0x4c>)
 8005976:	4a10      	ldr	r2, [pc, #64]	; (80059b8 <HAL_Init+0x50>)
 8005978:	698b      	ldr	r3, [r1, #24]
 800597a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800597e:	5cd3      	ldrb	r3, [r2, r3]
 8005980:	f003 031f 	and.w	r3, r3, #31
 8005984:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005986:	698b      	ldr	r3, [r1, #24]
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	5cd3      	ldrb	r3, [r2, r3]
 800598e:	4a0b      	ldr	r2, [pc, #44]	; (80059bc <HAL_Init+0x54>)
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	fa20 f303 	lsr.w	r3, r0, r3
 8005998:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <HAL_Init+0x58>)
 800599c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800599e:	2000      	movs	r0, #0
 80059a0:	f7fd fc5e 	bl	8003260 <HAL_InitTick>
 80059a4:	4604      	mov	r4, r0
 80059a6:	b918      	cbnz	r0, 80059b0 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80059a8:	f7fd f8b6 	bl	8002b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80059ac:	4620      	mov	r0, r4
 80059ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80059b0:	2401      	movs	r4, #1
 80059b2:	e7fb      	b.n	80059ac <HAL_Init+0x44>
 80059b4:	58024400 	.word	0x58024400
 80059b8:	08015494 	.word	0x08015494
 80059bc:	24000004 	.word	0x24000004
 80059c0:	24000000 	.word	0x24000000

080059c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80059c4:	4a03      	ldr	r2, [pc, #12]	; (80059d4 <HAL_IncTick+0x10>)
 80059c6:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <HAL_IncTick+0x14>)
 80059c8:	6811      	ldr	r1, [r2, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	440b      	add	r3, r1
 80059ce:	6013      	str	r3, [r2, #0]
}
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	2401ec90 	.word	0x2401ec90
 80059d8:	24000018 	.word	0x24000018

080059dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80059dc:	4b01      	ldr	r3, [pc, #4]	; (80059e4 <HAL_GetTick+0x8>)
 80059de:	6818      	ldr	r0, [r3, #0]
}
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	2401ec90 	.word	0x2401ec90

080059e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80059ec:	f7ff fff6 	bl	80059dc <HAL_GetTick>
 80059f0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059f2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80059f4:	bf1e      	ittt	ne
 80059f6:	4b04      	ldrne	r3, [pc, #16]	; (8005a08 <HAL_Delay+0x20>)
 80059f8:	781b      	ldrbne	r3, [r3, #0]
 80059fa:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80059fc:	f7ff ffee 	bl	80059dc <HAL_GetTick>
 8005a00:	1b40      	subs	r0, r0, r5
 8005a02:	42a0      	cmp	r0, r4
 8005a04:	d3fa      	bcc.n	80059fc <HAL_Delay+0x14>
  {
  }
}
 8005a06:	bd38      	pop	{r3, r4, r5, pc}
 8005a08:	24000018 	.word	0x24000018

08005a0c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8005a0c:	4b01      	ldr	r3, [pc, #4]	; (8005a14 <HAL_GetREVID+0x8>)
 8005a0e:	6818      	ldr	r0, [r3, #0]
}
 8005a10:	0c00      	lsrs	r0, r0, #16
 8005a12:	4770      	bx	lr
 8005a14:	5c001000 	.word	0x5c001000

08005a18 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005a18:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a1a:	0dcc      	lsrs	r4, r1, #23
 8005a1c:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8005a1e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8005a22:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a24:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8005a28:	408d      	lsls	r5, r1
 8005a2a:	fa02 f101 	lsl.w	r1, r2, r1
 8005a2e:	5823      	ldr	r3, [r4, r0]
 8005a30:	ea23 0305 	bic.w	r3, r3, r5
 8005a34:	4319      	orrs	r1, r3
 8005a36:	5021      	str	r1, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005a38:	bd30      	pop	{r4, r5, pc}

08005a3a <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a3a:	6880      	ldr	r0, [r0, #8]
}
 8005a3c:	f000 0001 	and.w	r0, r0, #1
 8005a40:	4770      	bx	lr

08005a42 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a42:	6880      	ldr	r0, [r0, #8]
}
 8005a44:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8005a48:	4770      	bx	lr

08005a4a <HAL_ADC_ConvCpltCallback>:
 8005a4a:	4770      	bx	lr

08005a4c <HAL_ADC_ConvHalfCpltCallback>:
 8005a4c:	4770      	bx	lr

08005a4e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a4e:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005a50:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005a52:	f7ff fffb 	bl	8005a4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a56:	bd08      	pop	{r3, pc}

08005a58 <HAL_ADC_ErrorCallback>:
 8005a58:	4770      	bx	lr

08005a5a <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a5e:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 8005a64:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005a66:	d121      	bne.n	8005aac <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a6c:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	6811      	ldr	r1, [r2, #0]
 8005a72:	0708      	lsls	r0, r1, #28
 8005a74:	d516      	bpl.n	8005aa4 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005a76:	68d1      	ldr	r1, [r2, #12]
 8005a78:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8005a7c:	d10e      	bne.n	8005a9c <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005a7e:	68d2      	ldr	r2, [r2, #12]
 8005a80:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005a84:	d10a      	bne.n	8005a9c <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a8c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a90:	04d1      	lsls	r1, r2, #19
 8005a92:	d403      	bmi.n	8005a9c <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff ffd4 	bl	8005a4a <HAL_ADC_ConvCpltCallback>
}
 8005aa2:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005aa4:	68d2      	ldr	r2, [r2, #12]
 8005aa6:	f012 0f03 	tst.w	r2, #3
 8005aaa:	e7eb      	b.n	8005a84 <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005aac:	06d2      	lsls	r2, r2, #27
 8005aae:	d503      	bpl.n	8005ab8 <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff ffd1 	bl	8005a58 <HAL_ADC_ErrorCallback>
 8005ab6:	e7f4      	b.n	8005aa2 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac0:	4718      	bx	r3

08005ac2 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ac2:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005ac4:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005ac6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005acc:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005ace:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005ad0:	f043 0304 	orr.w	r3, r3, #4
 8005ad4:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005ad6:	f7ff ffbf 	bl	8005a58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ada:	bd08      	pop	{r3, pc}

08005adc <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 8005adc:	2300      	movs	r3, #0
{
 8005ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8005ae0:	9301      	str	r3, [sp, #4]
{
 8005ae2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8005ae4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8005ae8:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	f000 8173 	beq.w	8005dd6 <HAL_ADC_ConfigChannel+0x2fa>
 8005af0:	2301      	movs	r3, #1
 8005af2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005af6:	6800      	ldr	r0, [r0, #0]
 8005af8:	f7ff ffa3 	bl	8005a42 <LL_ADC_REG_IsConversionOngoing>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	f040 8164 	bne.w	8005dca <HAL_ADC_ConfigChannel+0x2ee>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005b02:	680a      	ldr	r2, [r1, #0]
 8005b04:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8005b08:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8005b0c:	bb50      	cbnz	r0, 8005b64 <HAL_ADC_ConfigChannel+0x88>
 8005b0e:	408b      	lsls	r3, r1
 8005b10:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(*preg,
 8005b12:	271f      	movs	r7, #31
 8005b14:	69c2      	ldr	r2, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005b16:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8005b1a:	4313      	orrs	r3, r2
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005b1c:	686a      	ldr	r2, [r5, #4]
 8005b1e:	0996      	lsrs	r6, r2, #6
  MODIFY_REG(*preg,
 8005b20:	f002 021f 	and.w	r2, r2, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005b24:	61c3      	str	r3, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005b26:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8005b2a:	4097      	lsls	r7, r2
 8005b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b30:	f856 300c 	ldr.w	r3, [r6, ip]
 8005b34:	ea23 0307 	bic.w	r3, r3, r7
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f846 300c 	str.w	r3, [r6, ip]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b3e:	f7ff ff80 	bl	8005a42 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b42:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b44:	689e      	ldr	r6, [r3, #8]
 8005b46:	f016 0608 	ands.w	r6, r6, #8
 8005b4a:	f000 8146 	beq.w	8005dda <HAL_ADC_ConfigChannel+0x2fe>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b4e:	6820      	ldr	r0, [r4, #0]
 8005b50:	f7ff ff73 	bl	8005a3a <LL_ADC_IsEnabled>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d03c      	beq.n	8005bd2 <HAL_ADC_ConfigChannel+0xf6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b58:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005b60:	b003      	add	sp, #12
 8005b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b64:	fa92 f0a2 	rbit	r0, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005b68:	fab0 f080 	clz	r0, r0
 8005b6c:	f000 001f 	and.w	r0, r0, #31
 8005b70:	4083      	lsls	r3, r0
 8005b72:	e7cd      	b.n	8005b10 <HAL_ADC_ConfigChannel+0x34>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005b74:	68d9      	ldr	r1, [r3, #12]
 8005b76:	68d8      	ldr	r0, [r3, #12]
 8005b78:	06c9      	lsls	r1, r1, #27
 8005b7a:	f140 8141 	bpl.w	8005e00 <HAL_ADC_ConfigChannel+0x324>
 8005b7e:	0840      	lsrs	r0, r0, #1
 8005b80:	f000 0008 	and.w	r0, r0, #8
 8005b84:	e13f      	b.n	8005e06 <HAL_ADC_ConfigChannel+0x32a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005b86:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005b88:	0692      	lsls	r2, r2, #26
 8005b8a:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005b8e:	4291      	cmp	r1, r2
 8005b90:	d103      	bne.n	8005b9a <HAL_ADC_ConfigChannel+0xbe>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005b92:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005b94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005b98:	6619      	str	r1, [r3, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005b9a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8005b9c:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005ba0:	428a      	cmp	r2, r1
 8005ba2:	d103      	bne.n	8005bac <HAL_ADC_ConfigChannel+0xd0>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005ba4:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8005ba6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005baa:	6659      	str	r1, [r3, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005bac:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005bae:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005bb2:	428a      	cmp	r2, r1
 8005bb4:	d103      	bne.n	8005bbe <HAL_ADC_ConfigChannel+0xe2>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005bb6:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005bb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005bbc:	6699      	str	r1, [r3, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005bbe:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8005bc0:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005bc4:	428a      	cmp	r2, r1
 8005bc6:	d1c2      	bne.n	8005b4e <HAL_ADC_ConfigChannel+0x72>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005bc8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005bca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005bce:	66da      	str	r2, [r3, #108]	; 0x6c
 8005bd0:	e7bd      	b.n	8005b4e <HAL_ADC_ConfigChannel+0x72>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005bd2:	68ee      	ldr	r6, [r5, #12]
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8005bd8:	f006 0c18 	and.w	ip, r6, #24
 8005bdc:	4aa3      	ldr	r2, [pc, #652]	; (8005e6c <HAL_ADC_ConfigChannel+0x390>)
 8005bde:	f3c3 0713 	ubfx	r7, r3, #0, #20
 8005be2:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 8005be6:	fa22 f20c 	lsr.w	r2, r2, ip
 8005bea:	ea21 0107 	bic.w	r1, r1, r7
 8005bee:	401a      	ands	r2, r3
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005bf6:	4a9e      	ldr	r2, [pc, #632]	; (8005e70 <HAL_ADC_ConfigChannel+0x394>)
 8005bf8:	4296      	cmp	r6, r2
 8005bfa:	d11d      	bne.n	8005c38 <HAL_ADC_ConfigChannel+0x15c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005bfc:	2f00      	cmp	r7, #0
 8005bfe:	d161      	bne.n	8005cc4 <HAL_ADC_ConfigChannel+0x1e8>
 8005c00:	0e9a      	lsrs	r2, r3, #26
 8005c02:	3201      	adds	r2, #1
 8005c04:	f002 061f 	and.w	r6, r2, #31
 8005c08:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c0a:	2e09      	cmp	r6, #9
 8005c0c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005c10:	f04f 0201 	mov.w	r2, #1
 8005c14:	fa02 f206 	lsl.w	r2, r2, r6
 8005c18:	f200 8085 	bhi.w	8005d26 <HAL_ADC_ConfigChannel+0x24a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c1c:	4311      	orrs	r1, r2
 8005c1e:	2f00      	cmp	r7, #0
 8005c20:	d16b      	bne.n	8005cfa <HAL_ADC_ConfigChannel+0x21e>
 8005c22:	0e9b      	lsrs	r3, r3, #26
 8005c24:	3301      	adds	r3, #1
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005c2e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c30:	4319      	orrs	r1, r3
 8005c32:	68aa      	ldr	r2, [r5, #8]
 8005c34:	f7ff fef0 	bl	8005a18 <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	da8c      	bge.n	8005b58 <HAL_ADC_ConfigChannel+0x7c>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c3e:	6822      	ldr	r2, [r4, #0]
 8005c40:	498c      	ldr	r1, [pc, #560]	; (8005e74 <HAL_ADC_ConfigChannel+0x398>)
 8005c42:	428a      	cmp	r2, r1
 8005c44:	f000 8089 	beq.w	8005d5a <HAL_ADC_ConfigChannel+0x27e>
 8005c48:	4e8b      	ldr	r6, [pc, #556]	; (8005e78 <HAL_ADC_ConfigChannel+0x39c>)
 8005c4a:	4b8c      	ldr	r3, [pc, #560]	; (8005e7c <HAL_ADC_ConfigChannel+0x3a0>)
 8005c4c:	488c      	ldr	r0, [pc, #560]	; (8005e80 <HAL_ADC_ConfigChannel+0x3a4>)
 8005c4e:	42b2      	cmp	r2, r6
 8005c50:	bf08      	it	eq
 8005c52:	4603      	moveq	r3, r0
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c54:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	d002      	beq.n	8005c60 <HAL_ADC_ConfigChannel+0x184>
 8005c5a:	4987      	ldr	r1, [pc, #540]	; (8005e78 <HAL_ADC_ConfigChannel+0x39c>)
 8005c5c:	428a      	cmp	r2, r1
 8005c5e:	d17e      	bne.n	8005d5e <HAL_ADC_ConfigChannel+0x282>
 8005c60:	4884      	ldr	r0, [pc, #528]	; (8005e74 <HAL_ADC_ConfigChannel+0x398>)
 8005c62:	f7ff feea 	bl	8005a3a <LL_ADC_IsEnabled>
 8005c66:	4602      	mov	r2, r0
 8005c68:	4883      	ldr	r0, [pc, #524]	; (8005e78 <HAL_ADC_ConfigChannel+0x39c>)
 8005c6a:	f7ff fee6 	bl	8005a3a <LL_ADC_IsEnabled>
 8005c6e:	4302      	orrs	r2, r0
 8005c70:	bf0c      	ite	eq
 8005c72:	2001      	moveq	r0, #1
 8005c74:	2000      	movne	r0, #0
 8005c76:	2800      	cmp	r0, #0
 8005c78:	f000 80a1 	beq.w	8005dbe <HAL_ADC_ConfigChannel+0x2e2>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c7c:	6829      	ldr	r1, [r5, #0]
 8005c7e:	f003 72e0 	and.w	r2, r3, #29360128	; 0x1c00000
 8005c82:	4880      	ldr	r0, [pc, #512]	; (8005e84 <HAL_ADC_ConfigChannel+0x3a8>)
 8005c84:	4281      	cmp	r1, r0
 8005c86:	d171      	bne.n	8005d6c <HAL_ADC_ConfigChannel+0x290>
 8005c88:	021b      	lsls	r3, r3, #8
 8005c8a:	f53f af65 	bmi.w	8005b58 <HAL_ADC_ConfigChannel+0x7c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c8e:	6821      	ldr	r1, [r4, #0]
 8005c90:	4b7d      	ldr	r3, [pc, #500]	; (8005e88 <HAL_ADC_ConfigChannel+0x3ac>)
 8005c92:	4299      	cmp	r1, r3
 8005c94:	f47f af60 	bne.w	8005b58 <HAL_ADC_ConfigChannel+0x7c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005c98:	4978      	ldr	r1, [pc, #480]	; (8005e7c <HAL_ADC_ConfigChannel+0x3a0>)
 8005c9a:	688b      	ldr	r3, [r1, #8]
 8005c9c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005ca0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ca4:	4313      	orrs	r3, r2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005ca6:	4a79      	ldr	r2, [pc, #484]	; (8005e8c <HAL_ADC_ConfigChannel+0x3b0>)
 8005ca8:	608b      	str	r3, [r1, #8]
 8005caa:	4b79      	ldr	r3, [pc, #484]	; (8005e90 <HAL_ADC_ConfigChannel+0x3b4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cb2:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 8005cb4:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8005cb6:	9b01      	ldr	r3, [sp, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f43f af4d 	beq.w	8005b58 <HAL_ADC_ConfigChannel+0x7c>
                wait_loop_index--;
 8005cbe:	9b01      	ldr	r3, [sp, #4]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	e7f7      	b.n	8005cb4 <HAL_ADC_ConfigChannel+0x1d8>
 8005cc4:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005cc8:	fab2 f282 	clz	r2, r2
 8005ccc:	3201      	adds	r2, #1
 8005cce:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cd2:	2a09      	cmp	r2, #9
 8005cd4:	d816      	bhi.n	8005d04 <HAL_ADC_ConfigChannel+0x228>
 8005cd6:	fa93 f1a3 	rbit	r1, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005cda:	fab1 f181 	clz	r1, r1
 8005cde:	3101      	adds	r1, #1
 8005ce0:	0689      	lsls	r1, r1, #26
 8005ce2:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005ce6:	fa93 f2a3 	rbit	r2, r3
 8005cea:	fab2 f282 	clz	r2, r2
 8005cee:	3201      	adds	r2, #1
 8005cf0:	f002 061f 	and.w	r6, r2, #31
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	40b2      	lsls	r2, r6
 8005cf8:	e790      	b.n	8005c1c <HAL_ADC_ConfigChannel+0x140>
 8005cfa:	fa93 f3a3 	rbit	r3, r3
 8005cfe:	fab3 f383 	clz	r3, r3
 8005d02:	e78f      	b.n	8005c24 <HAL_ADC_ConfigChannel+0x148>
 8005d04:	fa93 f1a3 	rbit	r1, r3
 8005d08:	fab1 f181 	clz	r1, r1
 8005d0c:	3101      	adds	r1, #1
 8005d0e:	0689      	lsls	r1, r1, #26
 8005d10:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005d14:	fa93 f2a3 	rbit	r2, r3
 8005d18:	fab2 f282 	clz	r2, r2
 8005d1c:	3201      	adds	r2, #1
 8005d1e:	f002 061f 	and.w	r6, r2, #31
 8005d22:	2201      	movs	r2, #1
 8005d24:	40b2      	lsls	r2, r6
 8005d26:	430a      	orrs	r2, r1
 8005d28:	b95f      	cbnz	r7, 8005d42 <HAL_ADC_ConfigChannel+0x266>
 8005d2a:	0e9b      	lsrs	r3, r3, #26
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	f003 031f 	and.w	r3, r3, #31
 8005d32:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8005d36:	391e      	subs	r1, #30
 8005d38:	0509      	lsls	r1, r1, #20
 8005d3a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d3e:	4311      	orrs	r1, r2
 8005d40:	e777      	b.n	8005c32 <HAL_ADC_ConfigChannel+0x156>
 8005d42:	fa93 f3a3 	rbit	r3, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d46:	fab3 f383 	clz	r3, r3
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	f003 031f 	and.w	r3, r3, #31
 8005d50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005d54:	f1a3 011e 	sub.w	r1, r3, #30
 8005d58:	e7ee      	b.n	8005d38 <HAL_ADC_ConfigChannel+0x25c>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d5a:	4b49      	ldr	r3, [pc, #292]	; (8005e80 <HAL_ADC_ConfigChannel+0x3a4>)
 8005d5c:	e77a      	b.n	8005c54 <HAL_ADC_ConfigChannel+0x178>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d5e:	484a      	ldr	r0, [pc, #296]	; (8005e88 <HAL_ADC_ConfigChannel+0x3ac>)
 8005d60:	f7ff fe6b 	bl	8005a3a <LL_ADC_IsEnabled>
 8005d64:	fab0 f080 	clz	r0, r0
 8005d68:	0940      	lsrs	r0, r0, #5
 8005d6a:	e784      	b.n	8005c76 <HAL_ADC_ConfigChannel+0x19a>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d6c:	4849      	ldr	r0, [pc, #292]	; (8005e94 <HAL_ADC_ConfigChannel+0x3b8>)
 8005d6e:	4281      	cmp	r1, r0
 8005d70:	d111      	bne.n	8005d96 <HAL_ADC_ConfigChannel+0x2ba>
 8005d72:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
 8005d76:	f47f aeef 	bne.w	8005b58 <HAL_ADC_ConfigChannel+0x7c>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d7a:	6821      	ldr	r1, [r4, #0]
 8005d7c:	4b42      	ldr	r3, [pc, #264]	; (8005e88 <HAL_ADC_ConfigChannel+0x3ac>)
 8005d7e:	4299      	cmp	r1, r3
 8005d80:	f47f aeea 	bne.w	8005b58 <HAL_ADC_ConfigChannel+0x7c>
 8005d84:	493d      	ldr	r1, [pc, #244]	; (8005e7c <HAL_ADC_ConfigChannel+0x3a0>)
 8005d86:	688b      	ldr	r3, [r1, #8]
 8005d88:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005d8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d90:	4313      	orrs	r3, r2
 8005d92:	608b      	str	r3, [r1, #8]
 8005d94:	e6e1      	b.n	8005b5a <HAL_ADC_ConfigChannel+0x7e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005d96:	4840      	ldr	r0, [pc, #256]	; (8005e98 <HAL_ADC_ConfigChannel+0x3bc>)
 8005d98:	4281      	cmp	r1, r0
 8005d9a:	f47f aedd 	bne.w	8005b58 <HAL_ADC_ConfigChannel+0x7c>
 8005d9e:	f413 0080 	ands.w	r0, r3, #4194304	; 0x400000
 8005da2:	f47f aed9 	bne.w	8005b58 <HAL_ADC_ConfigChannel+0x7c>
            if (ADC_VREFINT_INSTANCE(hadc))
 8005da6:	6821      	ldr	r1, [r4, #0]
 8005da8:	4b37      	ldr	r3, [pc, #220]	; (8005e88 <HAL_ADC_ConfigChannel+0x3ac>)
 8005daa:	4299      	cmp	r1, r3
 8005dac:	f47f aed4 	bne.w	8005b58 <HAL_ADC_ConfigChannel+0x7c>
 8005db0:	4932      	ldr	r1, [pc, #200]	; (8005e7c <HAL_ADC_ConfigChannel+0x3a0>)
 8005db2:	688b      	ldr	r3, [r1, #8]
 8005db4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005db8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005dbc:	e7e8      	b.n	8005d90 <HAL_ADC_ConfigChannel+0x2b4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dbe:	6d63      	ldr	r3, [r4, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8005dc0:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dc2:	f043 0320 	orr.w	r3, r3, #32
 8005dc6:	6563      	str	r3, [r4, #84]	; 0x54
 8005dc8:	e6c7      	b.n	8005b5a <HAL_ADC_ConfigChannel+0x7e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dca:	6d62      	ldr	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8005dcc:	4618      	mov	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dce:	f042 0220 	orr.w	r2, r2, #32
 8005dd2:	6562      	str	r2, [r4, #84]	; 0x54
 8005dd4:	e6c1      	b.n	8005b5a <HAL_ADC_ConfigChannel+0x7e>
  __HAL_LOCK(hadc);
 8005dd6:	2002      	movs	r0, #2
 8005dd8:	e6c2      	b.n	8005b60 <HAL_ADC_ConfigChannel+0x84>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	f47f aeb7 	bne.w	8005b4e <HAL_ADC_ConfigChannel+0x72>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005de0:	68aa      	ldr	r2, [r5, #8]
 8005de2:	4618      	mov	r0, r3
 8005de4:	6829      	ldr	r1, [r5, #0]
 8005de6:	f7ff fe17 	bl	8005a18 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005dea:	4b2c      	ldr	r3, [pc, #176]	; (8005e9c <HAL_ADC_ConfigChannel+0x3c0>)
 8005dec:	696a      	ldr	r2, [r5, #20]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005df4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	f47f aebb 	bne.w	8005b74 <HAL_ADC_ConfigChannel+0x98>
 8005dfe:	68d8      	ldr	r0, [r3, #12]
 8005e00:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8005e04:	0040      	lsls	r0, r0, #1
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005e06:	f8d5 c010 	ldr.w	ip, [r5, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e0a:	fa02 f000 	lsl.w	r0, r2, r0
 8005e0e:	682a      	ldr	r2, [r5, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005e10:	f1bc 0f04 	cmp.w	ip, #4
 8005e14:	f43f aeb7 	beq.w	8005b86 <HAL_ADC_ConfigChannel+0xaa>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e18:	f103 0760 	add.w	r7, r3, #96	; 0x60
    MODIFY_REG(*preg,
 8005e1c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8005e20:	f857 102c 	ldr.w	r1, [r7, ip, lsl #2]
 8005e24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	4302      	orrs	r2, r0
 8005e2c:	f847 202c 	str.w	r2, [r7, ip, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005e30:	7e6a      	ldrb	r2, [r5, #25]
 8005e32:	6929      	ldr	r1, [r5, #16]
 8005e34:	2a01      	cmp	r2, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005e36:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
 8005e3a:	bf14      	ite	ne
 8005e3c:	2000      	movne	r0, #0
 8005e3e:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 8005e42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e46:	4302      	orrs	r2, r0
 8005e48:	f847 2021 	str.w	r2, [r7, r1, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005e4c:	7e29      	ldrb	r1, [r5, #24]
 8005e4e:	692a      	ldr	r2, [r5, #16]
 8005e50:	2901      	cmp	r1, #1
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005e52:	6919      	ldr	r1, [r3, #16]
 8005e54:	f002 021f 	and.w	r2, r2, #31
 8005e58:	bf08      	it	eq
 8005e5a:	f44f 6600 	moveq.w	r6, #2048	; 0x800
 8005e5e:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
 8005e62:	fa06 f202 	lsl.w	r2, r6, r2
 8005e66:	430a      	orrs	r2, r1
 8005e68:	611a      	str	r2, [r3, #16]
 8005e6a:	e670      	b.n	8005b4e <HAL_ADC_ConfigChannel+0x72>
 8005e6c:	000fffff 	.word	0x000fffff
 8005e70:	47ff0000 	.word	0x47ff0000
 8005e74:	40022000 	.word	0x40022000
 8005e78:	40022100 	.word	0x40022100
 8005e7c:	58026300 	.word	0x58026300
 8005e80:	40022300 	.word	0x40022300
 8005e84:	cb840000 	.word	0xcb840000
 8005e88:	58026000 	.word	0x58026000
 8005e8c:	00030d40 	.word	0x00030d40
 8005e90:	24000000 	.word	0x24000000
 8005e94:	c7520000 	.word	0xc7520000
 8005e98:	cfb80000 	.word	0xcfb80000
 8005e9c:	5c001000 	.word	0x5c001000

08005ea0 <ADC_ConversionStop>:
{
 8005ea0:	b570      	push	{r4, r5, r6, lr}
 8005ea2:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ea4:	6800      	ldr	r0, [r0, #0]
 8005ea6:	f7ff fdcc 	bl	8005a42 <LL_ADC_REG_IsConversionOngoing>
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005eaa:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	0716      	lsls	r6, r2, #28
 8005eb0:	d556      	bpl.n	8005f60 <ADC_ConversionStop+0xc0>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	0190      	lsls	r0, r2, #6
 8005eb6:	d52b      	bpl.n	8005f10 <ADC_ConversionStop+0x70>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005eb8:	8aa0      	ldrh	r0, [r4, #20]
 8005eba:	f240 1201 	movw	r2, #257	; 0x101
 8005ebe:	4290      	cmp	r0, r2
 8005ec0:	d126      	bne.n	8005f10 <ADC_ConversionStop+0x70>
 8005ec2:	4a29      	ldr	r2, [pc, #164]	; (8005f68 <ADC_ConversionStop+0xc8>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005ec4:	6819      	ldr	r1, [r3, #0]
 8005ec6:	0649      	lsls	r1, r1, #25
 8005ec8:	d516      	bpl.n	8005ef8 <ADC_ConversionStop+0x58>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005eca:	2240      	movs	r2, #64	; 0x40
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005ecc:	2101      	movs	r1, #1
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005ece:	601a      	str	r2, [r3, #0]
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff fdb6 	bl	8005a42 <LL_ADC_REG_IsConversionOngoing>
 8005ed6:	b158      	cbz	r0, 8005ef0 <ADC_ConversionStop+0x50>
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005ed8:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005eda:	6893      	ldr	r3, [r2, #8]
 8005edc:	079e      	lsls	r6, r3, #30
 8005ede:	d407      	bmi.n	8005ef0 <ADC_ConversionStop+0x50>
  MODIFY_REG(ADCx->CR,
 8005ee0:	6893      	ldr	r3, [r2, #8]
 8005ee2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ee6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005eea:	f043 0310 	orr.w	r3, r3, #16
 8005eee:	6093      	str	r3, [r2, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005ef0:	2901      	cmp	r1, #1
 8005ef2:	d10f      	bne.n	8005f14 <ADC_ConversionStop+0x74>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005ef4:	2504      	movs	r5, #4
 8005ef6:	e022      	b.n	8005f3e <ADC_ConversionStop+0x9e>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005ef8:	3a01      	subs	r2, #1
 8005efa:	d1e3      	bne.n	8005ec4 <ADC_ConversionStop+0x24>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005efc:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8005efe:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f00:	f043 0310 	orr.w	r3, r3, #16
 8005f04:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005f10:	2902      	cmp	r1, #2
 8005f12:	d1dd      	bne.n	8005ed0 <ADC_ConversionStop+0x30>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005f14:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005f16:	6893      	ldr	r3, [r2, #8]
 8005f18:	0718      	lsls	r0, r3, #28
 8005f1a:	d50a      	bpl.n	8005f32 <ADC_ConversionStop+0x92>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005f1c:	6893      	ldr	r3, [r2, #8]
 8005f1e:	079b      	lsls	r3, r3, #30
 8005f20:	d407      	bmi.n	8005f32 <ADC_ConversionStop+0x92>
  MODIFY_REG(ADCx->CR,
 8005f22:	6893      	ldr	r3, [r2, #8]
 8005f24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f2c:	f043 0320 	orr.w	r3, r3, #32
 8005f30:	6093      	str	r3, [r2, #8]
    switch (conversion_group_reassigned)
 8005f32:	2902      	cmp	r1, #2
 8005f34:	d00c      	beq.n	8005f50 <ADC_ConversionStop+0xb0>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005f36:	2903      	cmp	r1, #3
 8005f38:	bf0c      	ite	eq
 8005f3a:	250c      	moveq	r5, #12
 8005f3c:	2504      	movne	r5, #4
    tickstart = HAL_GetTick();
 8005f3e:	f7ff fd4d 	bl	80059dc <HAL_GetTick>
 8005f42:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	422b      	tst	r3, r5
 8005f4a:	d103      	bne.n	8005f54 <ADC_ConversionStop+0xb4>
  return HAL_OK;
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	e7de      	b.n	8005f0e <ADC_ConversionStop+0x6e>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005f50:	2508      	movs	r5, #8
 8005f52:	e7f4      	b.n	8005f3e <ADC_ConversionStop+0x9e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005f54:	f7ff fd42 	bl	80059dc <HAL_GetTick>
 8005f58:	1b80      	subs	r0, r0, r6
 8005f5a:	2805      	cmp	r0, #5
 8005f5c:	d9f2      	bls.n	8005f44 <ADC_ConversionStop+0xa4>
 8005f5e:	e7cd      	b.n	8005efc <ADC_ConversionStop+0x5c>
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005f60:	2800      	cmp	r0, #0
 8005f62:	d1a6      	bne.n	8005eb2 <ADC_ConversionStop+0x12>
 8005f64:	e7f2      	b.n	8005f4c <ADC_ConversionStop+0xac>
 8005f66:	bf00      	nop
 8005f68:	000cdc01 	.word	0x000cdc01

08005f6c <ADC_Enable>:
{
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f70:	6800      	ldr	r0, [r0, #0]
 8005f72:	f7ff fd62 	bl	8005a3a <LL_ADC_IsEnabled>
 8005f76:	b108      	cbz	r0, 8005f7c <ADC_Enable+0x10>
  return HAL_OK;
 8005f78:	2000      	movs	r0, #0
}
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005f7c:	6822      	ldr	r2, [r4, #0]
 8005f7e:	4b21      	ldr	r3, [pc, #132]	; (8006004 <ADC_Enable+0x98>)
 8005f80:	6891      	ldr	r1, [r2, #8]
 8005f82:	4219      	tst	r1, r3
 8005f84:	d009      	beq.n	8005f9a <ADC_Enable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f86:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8005f88:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f8a:	f043 0310 	orr.w	r3, r3, #16
 8005f8e:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f92:	f043 0301 	orr.w	r3, r3, #1
 8005f96:	65a3      	str	r3, [r4, #88]	; 0x58
 8005f98:	e7ef      	b.n	8005f7a <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 8005f9a:	6893      	ldr	r3, [r2, #8]
 8005f9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005fa4:	f043 0301 	orr.w	r3, r3, #1
 8005fa8:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005faa:	f7ff fd17 	bl	80059dc <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005fae:	6822      	ldr	r2, [r4, #0]
 8005fb0:	4b15      	ldr	r3, [pc, #84]	; (8006008 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	4915      	ldr	r1, [pc, #84]	; (800600c <ADC_Enable+0xa0>)
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d00e      	beq.n	8005fd8 <ADC_Enable+0x6c>
 8005fba:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8005fbe:	4814      	ldr	r0, [pc, #80]	; (8006010 <ADC_Enable+0xa4>)
 8005fc0:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 8005fc4:	428a      	cmp	r2, r1
 8005fc6:	bf08      	it	eq
 8005fc8:	4603      	moveq	r3, r0
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005fca:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	d101      	bne.n	8005fd4 <ADC_Enable+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005fd0:	06db      	lsls	r3, r3, #27
 8005fd2:	d1d1      	bne.n	8005f78 <ADC_Enable+0xc>
  MODIFY_REG(ADCx->CR,
 8005fd4:	4e0f      	ldr	r6, [pc, #60]	; (8006014 <ADC_Enable+0xa8>)
 8005fd6:	e00f      	b.n	8005ff8 <ADC_Enable+0x8c>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005fd8:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <ADC_Enable+0xa4>)
 8005fda:	e7f6      	b.n	8005fca <ADC_Enable+0x5e>
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fdc:	f7ff fd2d 	bl	8005a3a <LL_ADC_IsEnabled>
 8005fe0:	b928      	cbnz	r0, 8005fee <ADC_Enable+0x82>
          LL_ADC_Enable(hadc->Instance);
 8005fe2:	6822      	ldr	r2, [r4, #0]
 8005fe4:	6893      	ldr	r3, [r2, #8]
 8005fe6:	4033      	ands	r3, r6
 8005fe8:	f043 0301 	orr.w	r3, r3, #1
 8005fec:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005fee:	f7ff fcf5 	bl	80059dc <HAL_GetTick>
 8005ff2:	1b40      	subs	r0, r0, r5
 8005ff4:	2802      	cmp	r0, #2
 8005ff6:	d8c6      	bhi.n	8005f86 <ADC_Enable+0x1a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ff8:	6820      	ldr	r0, [r4, #0]
 8005ffa:	6803      	ldr	r3, [r0, #0]
 8005ffc:	07da      	lsls	r2, r3, #31
 8005ffe:	d5ed      	bpl.n	8005fdc <ADC_Enable+0x70>
 8006000:	e7ba      	b.n	8005f78 <ADC_Enable+0xc>
 8006002:	bf00      	nop
 8006004:	8000003f 	.word	0x8000003f
 8006008:	40022000 	.word	0x40022000
 800600c:	40022100 	.word	0x40022100
 8006010:	40022300 	.word	0x40022300
 8006014:	7fffffc0 	.word	0x7fffffc0

08006018 <HAL_ADC_Start_DMA>:
{
 8006018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800601c:	4b40      	ldr	r3, [pc, #256]	; (8006120 <HAL_ADC_Start_DMA+0x108>)
{
 800601e:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006020:	6800      	ldr	r0, [r0, #0]
{
 8006022:	460e      	mov	r6, r1
 8006024:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006026:	4298      	cmp	r0, r3
 8006028:	d069      	beq.n	80060fe <HAL_ADC_Start_DMA+0xe6>
 800602a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800602e:	493d      	ldr	r1, [pc, #244]	; (8006124 <HAL_ADC_Start_DMA+0x10c>)
 8006030:	4a3d      	ldr	r2, [pc, #244]	; (8006128 <HAL_ADC_Start_DMA+0x110>)
 8006032:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 8006036:	4288      	cmp	r0, r1
 8006038:	bf08      	it	eq
 800603a:	4613      	moveq	r3, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800603c:	689b      	ldr	r3, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800603e:	f7ff fd00 	bl	8005a42 <LL_ADC_REG_IsConversionOngoing>
 8006042:	2800      	cmp	r0, #0
 8006044:	d165      	bne.n	8006112 <HAL_ADC_Start_DMA+0xfa>
    __HAL_LOCK(hadc);
 8006046:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800604a:	2a01      	cmp	r2, #1
 800604c:	d061      	beq.n	8006112 <HAL_ADC_Start_DMA+0xfa>
 800604e:	f003 081f 	and.w	r8, r3, #31
 8006052:	2301      	movs	r3, #1
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006054:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 8006058:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800605c:	d854      	bhi.n	8006108 <HAL_ADC_Start_DMA+0xf0>
 800605e:	f240 2321 	movw	r3, #545	; 0x221
 8006062:	fa23 f308 	lsr.w	r3, r3, r8
 8006066:	43db      	mvns	r3, r3
 8006068:	f013 0501 	ands.w	r5, r3, #1
 800606c:	d14c      	bne.n	8006108 <HAL_ADC_Start_DMA+0xf0>
      tmp_hal_status = ADC_Enable(hadc);
 800606e:	4620      	mov	r0, r4
 8006070:	f7ff ff7c 	bl	8005f6c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8006074:	2800      	cmp	r0, #0
 8006076:	d144      	bne.n	8006102 <HAL_ADC_Start_DMA+0xea>
        ADC_STATE_CLR_SET(hadc->State,
 8006078:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800607a:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 800607c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006080:	f023 0301 	bic.w	r3, r3, #1
 8006084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006088:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800608a:	4b26      	ldr	r3, [pc, #152]	; (8006124 <HAL_ADC_Start_DMA+0x10c>)
 800608c:	4299      	cmp	r1, r3
 800608e:	d042      	beq.n	8006116 <HAL_ADC_Start_DMA+0xfe>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006090:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006092:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006096:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006098:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800609a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800609e:	d002      	beq.n	80060a6 <HAL_ADC_Start_DMA+0x8e>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80060a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060a2:	f023 0306 	bic.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80060a6:	65a3      	str	r3, [r4, #88]	; 0x58
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80060a8:	3140      	adds	r1, #64	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80060aa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80060ac:	4b1f      	ldr	r3, [pc, #124]	; (800612c <HAL_ADC_Start_DMA+0x114>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80060ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80060b0:	63c3      	str	r3, [r0, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80060b2:	4b1f      	ldr	r3, [pc, #124]	; (8006130 <HAL_ADC_Start_DMA+0x118>)
 80060b4:	6403      	str	r3, [r0, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80060b6:	4b1f      	ldr	r3, [pc, #124]	; (8006134 <HAL_ADC_Start_DMA+0x11c>)
 80060b8:	64c3      	str	r3, [r0, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80060ba:	231c      	movs	r3, #28
 80060bc:	f841 3c40 	str.w	r3, [r1, #-64]
        __HAL_UNLOCK(hadc);
 80060c0:	2300      	movs	r3, #0
 80060c2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80060c6:	f851 3c3c 	ldr.w	r3, [r1, #-60]
 80060ca:	f043 0310 	orr.w	r3, r3, #16
 80060ce:	f841 3c3c 	str.w	r3, [r1, #-60]
 80060d2:	f851 3c34 	ldr.w	r3, [r1, #-52]
 80060d6:	f023 0303 	bic.w	r3, r3, #3
 80060da:	4313      	orrs	r3, r2
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80060dc:	4632      	mov	r2, r6
 80060de:	f841 3c34 	str.w	r3, [r1, #-52]
 80060e2:	463b      	mov	r3, r7
 80060e4:	f000 fe8a 	bl	8006dfc <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80060e8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80060ea:	6893      	ldr	r3, [r2, #8]
 80060ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060f4:	f043 0304 	orr.w	r3, r3, #4
 80060f8:	6093      	str	r3, [r2, #8]
}
 80060fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80060fe:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <HAL_ADC_Start_DMA+0x110>)
 8006100:	e79c      	b.n	800603c <HAL_ADC_Start_DMA+0x24>
        __HAL_UNLOCK(hadc);
 8006102:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8006106:	e7f8      	b.n	80060fa <HAL_ADC_Start_DMA+0xe2>
      __HAL_UNLOCK(hadc);
 8006108:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
 800610a:	2001      	movs	r0, #1
      __HAL_UNLOCK(hadc);
 800610c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8006110:	e7f3      	b.n	80060fa <HAL_ADC_Start_DMA+0xe2>
    tmp_hal_status = HAL_BUSY;
 8006112:	2002      	movs	r0, #2
 8006114:	e7f1      	b.n	80060fa <HAL_ADC_Start_DMA+0xe2>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006116:	f1b8 0f00 	cmp.w	r8, #0
 800611a:	d0b9      	beq.n	8006090 <HAL_ADC_Start_DMA+0x78>
 800611c:	e7bc      	b.n	8006098 <HAL_ADC_Start_DMA+0x80>
 800611e:	bf00      	nop
 8006120:	40022000 	.word	0x40022000
 8006124:	40022100 	.word	0x40022100
 8006128:	40022300 	.word	0x40022300
 800612c:	08005a5b 	.word	0x08005a5b
 8006130:	08005a4f 	.word	0x08005a4f
 8006134:	08005ac3 	.word	0x08005ac3

08006138 <ADC_Disable>:
{
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4604      	mov	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800613c:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800613e:	6883      	ldr	r3, [r0, #8]
 8006140:	f003 0302 	and.w	r3, r3, #2
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006144:	f7ff fc79 	bl	8005a3a <LL_ADC_IsEnabled>
 8006148:	b908      	cbnz	r0, 800614e <ADC_Disable+0x16>
  return HAL_OK;
 800614a:	2000      	movs	r0, #0
}
 800614c:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1fb      	bne.n	800614a <ADC_Disable+0x12>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006152:	6822      	ldr	r2, [r4, #0]
 8006154:	6893      	ldr	r3, [r2, #8]
 8006156:	f003 030d 	and.w	r3, r3, #13
 800615a:	2b01      	cmp	r3, #1
 800615c:	d115      	bne.n	800618a <ADC_Disable+0x52>
  MODIFY_REG(ADCx->CR,
 800615e:	6893      	ldr	r3, [r2, #8]
 8006160:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006164:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006168:	f043 0302 	orr.w	r3, r3, #2
 800616c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800616e:	2303      	movs	r3, #3
 8006170:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006172:	f7ff fc33 	bl	80059dc <HAL_GetTick>
 8006176:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	07db      	lsls	r3, r3, #31
 800617e:	d5e4      	bpl.n	800614a <ADC_Disable+0x12>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006180:	f7ff fc2c 	bl	80059dc <HAL_GetTick>
 8006184:	1b40      	subs	r0, r0, r5
 8006186:	2802      	cmp	r0, #2
 8006188:	d9f6      	bls.n	8006178 <ADC_Disable+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800618a:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800618c:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800618e:	f043 0310 	orr.w	r3, r3, #16
 8006192:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006194:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	65a3      	str	r3, [r4, #88]	; 0x58
 800619c:	e7d6      	b.n	800614c <ADC_Disable+0x14>

0800619e <HAL_ADC_Stop_DMA>:
{
 800619e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 80061a0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80061a4:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d035      	beq.n	8006216 <HAL_ADC_Stop_DMA+0x78>
 80061aa:	2301      	movs	r3, #1
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80061ac:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 80061ae:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80061b2:	f7ff fe75 	bl	8005ea0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80061b6:	4605      	mov	r5, r0
 80061b8:	b9e0      	cbnz	r0, 80061f4 <HAL_ADC_Stop_DMA+0x56>
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 80061ba:	6822      	ldr	r2, [r4, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80061bc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 80061be:	68d3      	ldr	r3, [r2, #12]
 80061c0:	f023 0303 	bic.w	r3, r3, #3
 80061c4:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80061c6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d107      	bne.n	80061de <HAL_ADC_Stop_DMA+0x40>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80061ce:	f000 ff33 	bl	8007038 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 80061d2:	4605      	mov	r5, r0
 80061d4:	b118      	cbz	r0, 80061de <HAL_ADC_Stop_DMA+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80061d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80061d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061dc:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80061de:	6822      	ldr	r2, [r4, #0]
      tmp_hal_status = ADC_Disable(hadc);
 80061e0:	4620      	mov	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80061e2:	6853      	ldr	r3, [r2, #4]
 80061e4:	f023 0310 	bic.w	r3, r3, #16
 80061e8:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 80061ea:	b945      	cbnz	r5, 80061fe <HAL_ADC_Stop_DMA+0x60>
      tmp_hal_status = ADC_Disable(hadc);
 80061ec:	f7ff ffa4 	bl	8006138 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80061f0:	4605      	mov	r5, r0
 80061f2:	b138      	cbz	r0, 8006204 <HAL_ADC_Stop_DMA+0x66>
  __HAL_UNLOCK(hadc);
 80061f4:	2300      	movs	r3, #0
 80061f6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80061fa:	4628      	mov	r0, r5
 80061fc:	bd38      	pop	{r3, r4, r5, pc}
      (void)ADC_Disable(hadc);
 80061fe:	f7ff ff9b 	bl	8006138 <ADC_Disable>
 8006202:	e7f7      	b.n	80061f4 <HAL_ADC_Stop_DMA+0x56>
      ADC_STATE_CLR_SET(hadc->State,
 8006204:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006206:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800620a:	f023 0301 	bic.w	r3, r3, #1
 800620e:	f043 0301 	orr.w	r3, r3, #1
 8006212:	6563      	str	r3, [r4, #84]	; 0x54
 8006214:	e7ee      	b.n	80061f4 <HAL_ADC_Stop_DMA+0x56>
  __HAL_LOCK(hadc);
 8006216:	2502      	movs	r5, #2
 8006218:	e7ef      	b.n	80061fa <HAL_ADC_Stop_DMA+0x5c>
	...

0800621c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800621c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800621e:	4a44      	ldr	r2, [pc, #272]	; (8006330 <ADC_ConfigureBoostMode+0x114>)
{
 8006220:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006222:	6803      	ldr	r3, [r0, #0]
 8006224:	4293      	cmp	r3, r2
 8006226:	d003      	beq.n	8006230 <ADC_ConfigureBoostMode+0x14>
 8006228:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800622c:	4293      	cmp	r3, r2
 800622e:	d118      	bne.n	8006262 <ADC_ConfigureBoostMode+0x46>
 8006230:	4b40      	ldr	r3, [pc, #256]	; (8006334 <ADC_ConfigureBoostMode+0x118>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8006238:	bf14      	ite	ne
 800623a:	2301      	movne	r3, #1
 800623c:	2300      	moveq	r3, #0
 800623e:	b30b      	cbz	r3, 8006284 <ADC_ConfigureBoostMode+0x68>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006240:	f002 fe7a 	bl	8008f38 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006244:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8006246:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8006248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800624c:	d005      	beq.n	800625a <ADC_ConfigureBoostMode+0x3e>
 800624e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006252:	d008      	beq.n	8006266 <ADC_ConfigureBoostMode+0x4a>
 8006254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006258:	d106      	bne.n	8006268 <ADC_ConfigureBoostMode+0x4c>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800625a:	0c1b      	lsrs	r3, r3, #16
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800625c:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8006260:	e002      	b.n	8006268 <ADC_ConfigureBoostMode+0x4c>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006262:	4b35      	ldr	r3, [pc, #212]	; (8006338 <ADC_ConfigureBoostMode+0x11c>)
 8006264:	e7e5      	b.n	8006232 <ADC_ConfigureBoostMode+0x16>
        freq /= 4UL;
 8006266:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006268:	f7ff fbd0 	bl	8005a0c <HAL_GetREVID>
 800626c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006270:	4298      	cmp	r0, r3
 8006272:	682b      	ldr	r3, [r5, #0]
 8006274:	d841      	bhi.n	80062fa <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8006276:	4a31      	ldr	r2, [pc, #196]	; (800633c <ADC_ConfigureBoostMode+0x120>)
 8006278:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800627a:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 800627c:	d939      	bls.n	80062f2 <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800627e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006282:	e038      	b.n	80062f6 <ADC_ConfigureBoostMode+0xda>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006284:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006288:	f003 fe18 	bl	8009ebc <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800628c:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800628e:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8006290:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006294:	d00a      	beq.n	80062ac <ADC_ConfigureBoostMode+0x90>
 8006296:	d812      	bhi.n	80062be <ADC_ConfigureBoostMode+0xa2>
 8006298:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800629c:	d006      	beq.n	80062ac <ADC_ConfigureBoostMode+0x90>
 800629e:	d808      	bhi.n	80062b2 <ADC_ConfigureBoostMode+0x96>
 80062a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062a4:	d002      	beq.n	80062ac <ADC_ConfigureBoostMode+0x90>
 80062a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80062aa:	d1dd      	bne.n	8006268 <ADC_ConfigureBoostMode+0x4c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80062ac:	0c9b      	lsrs	r3, r3, #18
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	e7d4      	b.n	800625c <ADC_ConfigureBoostMode+0x40>
    switch (hadc->Init.ClockPrescaler)
 80062b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062b6:	d0f9      	beq.n	80062ac <ADC_ConfigureBoostMode+0x90>
 80062b8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80062bc:	e7f5      	b.n	80062aa <ADC_ConfigureBoostMode+0x8e>
 80062be:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80062c2:	d012      	beq.n	80062ea <ADC_ConfigureBoostMode+0xce>
 80062c4:	d807      	bhi.n	80062d6 <ADC_ConfigureBoostMode+0xba>
 80062c6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80062ca:	d00c      	beq.n	80062e6 <ADC_ConfigureBoostMode+0xca>
 80062cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062d0:	d1ca      	bne.n	8006268 <ADC_ConfigureBoostMode+0x4c>
        freq /= 32UL;
 80062d2:	0944      	lsrs	r4, r0, #5
        break;
 80062d4:	e7c8      	b.n	8006268 <ADC_ConfigureBoostMode+0x4c>
    switch (hadc->Init.ClockPrescaler)
 80062d6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80062da:	d008      	beq.n	80062ee <ADC_ConfigureBoostMode+0xd2>
 80062dc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80062e0:	d1c2      	bne.n	8006268 <ADC_ConfigureBoostMode+0x4c>
        freq /= 256UL;
 80062e2:	0a04      	lsrs	r4, r0, #8
        break;
 80062e4:	e7c0      	b.n	8006268 <ADC_ConfigureBoostMode+0x4c>
        freq /= 16UL;
 80062e6:	0904      	lsrs	r4, r0, #4
        break;
 80062e8:	e7be      	b.n	8006268 <ADC_ConfigureBoostMode+0x4c>
        freq /= 64UL;
 80062ea:	0984      	lsrs	r4, r0, #6
        break;
 80062ec:	e7bc      	b.n	8006268 <ADC_ConfigureBoostMode+0x4c>
        freq /= 128UL;
 80062ee:	09c4      	lsrs	r4, r0, #7
        break;
 80062f0:	e7ba      	b.n	8006268 <ADC_ConfigureBoostMode+0x4c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80062f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80062f6:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80062f8:	bd38      	pop	{r3, r4, r5, pc}
    freq /= 2U; /* divider by 2 for Rev.V */
 80062fa:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 80062fc:	4a10      	ldr	r2, [pc, #64]	; (8006340 <ADC_ConfigureBoostMode+0x124>)
 80062fe:	4294      	cmp	r4, r2
 8006300:	d803      	bhi.n	800630a <ADC_ConfigureBoostMode+0xee>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006308:	e7f5      	b.n	80062f6 <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 800630a:	4a0e      	ldr	r2, [pc, #56]	; (8006344 <ADC_ConfigureBoostMode+0x128>)
 800630c:	4294      	cmp	r4, r2
 800630e:	d803      	bhi.n	8006318 <ADC_ConfigureBoostMode+0xfc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006316:	e7b2      	b.n	800627e <ADC_ConfigureBoostMode+0x62>
    else if (freq <= 25000000UL)
 8006318:	4a0b      	ldr	r2, [pc, #44]	; (8006348 <ADC_ConfigureBoostMode+0x12c>)
 800631a:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	bf96      	itet	ls
 8006320:	f422 7240 	bicls.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006324:	f442 7240 	orrhi.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006328:	f442 7200 	orrls.w	r2, r2, #512	; 0x200
 800632c:	e7e3      	b.n	80062f6 <ADC_ConfigureBoostMode+0xda>
 800632e:	bf00      	nop
 8006330:	40022000 	.word	0x40022000
 8006334:	40022300 	.word	0x40022300
 8006338:	58026300 	.word	0x58026300
 800633c:	01312d00 	.word	0x01312d00
 8006340:	005f5e10 	.word	0x005f5e10
 8006344:	00bebc20 	.word	0x00bebc20
 8006348:	017d7840 	.word	0x017d7840

0800634c <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 800634c:	2300      	movs	r3, #0
{
 800634e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (hadc == NULL)
 8006350:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8006352:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8006354:	2800      	cmp	r0, #0
 8006356:	f000 80c8 	beq.w	80064ea <HAL_ADC_Init+0x19e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800635a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800635c:	b925      	cbnz	r5, 8006368 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 800635e:	f7fc fbed 	bl	8002b3c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006362:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8006364:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006368:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800636a:	6883      	ldr	r3, [r0, #8]
 800636c:	009d      	lsls	r5, r3, #2
 800636e:	d505      	bpl.n	800637c <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006370:	6883      	ldr	r3, [r0, #8]
 8006372:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006376:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800637a:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800637c:	6883      	ldr	r3, [r0, #8]
 800637e:	00d9      	lsls	r1, r3, #3
 8006380:	d504      	bpl.n	800638c <HAL_ADC_Init+0x40>
 8006382:	6883      	ldr	r3, [r0, #8]
 8006384:	00da      	lsls	r2, r3, #3
 8006386:	d515      	bpl.n	80063b4 <HAL_ADC_Init+0x68>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006388:	2500      	movs	r5, #0
 800638a:	e01c      	b.n	80063c6 <HAL_ADC_Init+0x7a>
  MODIFY_REG(ADCx->CR,
 800638c:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800638e:	4a6d      	ldr	r2, [pc, #436]	; (8006544 <HAL_ADC_Init+0x1f8>)
 8006390:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006394:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800639c:	6083      	str	r3, [r0, #8]
 800639e:	4b6a      	ldr	r3, [pc, #424]	; (8006548 <HAL_ADC_Init+0x1fc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80063a6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80063a8:	9b01      	ldr	r3, [sp, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0e9      	beq.n	8006382 <HAL_ADC_Init+0x36>
      wait_loop_index--;
 80063ae:	9b01      	ldr	r3, [sp, #4]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	e7f8      	b.n	80063a6 <HAL_ADC_Init+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80063b6:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063b8:	f043 0310 	orr.w	r3, r3, #16
 80063bc:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063c0:	f043 0301 	orr.w	r3, r3, #1
 80063c4:	65a3      	str	r3, [r4, #88]	; 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80063c6:	f7ff fb3c 	bl	8005a42 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80063ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80063cc:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80063d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80063d2:	f040 8087 	bne.w	80064e4 <HAL_ADC_Init+0x198>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80063d6:	2800      	cmp	r0, #0
 80063d8:	f040 8084 	bne.w	80064e4 <HAL_ADC_Init+0x198>
    ADC_STATE_CLR_SET(hadc->State,
 80063dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063e0:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80063e2:	f043 0302 	orr.w	r3, r3, #2
 80063e6:	6563      	str	r3, [r4, #84]	; 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063e8:	f7ff fb27 	bl	8005a3a <LL_ADC_IsEnabled>
 80063ec:	bb30      	cbnz	r0, 800643c <HAL_ADC_Init+0xf0>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	4a56      	ldr	r2, [pc, #344]	; (800654c <HAL_ADC_Init+0x200>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d003      	beq.n	80063fe <HAL_ADC_Init+0xb2>
 80063f6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d15f      	bne.n	80064be <HAL_ADC_Init+0x172>
 80063fe:	4853      	ldr	r0, [pc, #332]	; (800654c <HAL_ADC_Init+0x200>)
 8006400:	f7ff fb1b 	bl	8005a3a <LL_ADC_IsEnabled>
 8006404:	4603      	mov	r3, r0
 8006406:	4852      	ldr	r0, [pc, #328]	; (8006550 <HAL_ADC_Init+0x204>)
 8006408:	f7ff fb17 	bl	8005a3a <LL_ADC_IsEnabled>
 800640c:	4303      	orrs	r3, r0
 800640e:	bf0c      	ite	eq
 8006410:	2001      	moveq	r0, #1
 8006412:	2000      	movne	r0, #0
 8006414:	b190      	cbz	r0, 800643c <HAL_ADC_Init+0xf0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006416:	6822      	ldr	r2, [r4, #0]
 8006418:	4b4c      	ldr	r3, [pc, #304]	; (800654c <HAL_ADC_Init+0x200>)
 800641a:	429a      	cmp	r2, r3
 800641c:	d056      	beq.n	80064cc <HAL_ADC_Init+0x180>
 800641e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006422:	484b      	ldr	r0, [pc, #300]	; (8006550 <HAL_ADC_Init+0x204>)
 8006424:	494b      	ldr	r1, [pc, #300]	; (8006554 <HAL_ADC_Init+0x208>)
 8006426:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 800642a:	4282      	cmp	r2, r0
 800642c:	bf08      	it	eq
 800642e:	460b      	moveq	r3, r1
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	6861      	ldr	r1, [r4, #4]
 8006434:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8006438:	430a      	orrs	r2, r1
 800643a:	609a      	str	r2, [r3, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800643c:	f7ff fae6 	bl	8005a0c <HAL_GetREVID>
 8006440:	f241 0303 	movw	r3, #4099	; 0x1003
 8006444:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006446:	4298      	cmp	r0, r3
 8006448:	7f21      	ldrb	r1, [r4, #28]
 800644a:	7d60      	ldrb	r0, [r4, #21]
 800644c:	68a3      	ldr	r3, [r4, #8]
 800644e:	d93f      	bls.n	80064d0 <HAL_ADC_Init+0x184>
 8006450:	2b10      	cmp	r3, #16
 8006452:	d13d      	bne.n	80064d0 <HAL_ADC_Init+0x184>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006454:	f042 031c 	orr.w	r3, r2, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006458:	2901      	cmp	r1, #1
                  hadc->Init.Overrun                                                    |
 800645a:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800645e:	bf08      	it	eq
 8006460:	6a22      	ldreq	r2, [r4, #32]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006466:	bf04      	itt	eq
 8006468:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800646c:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006470:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006472:	b122      	cbz	r2, 800647e <HAL_ADC_Init+0x132>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006474:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006478:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800647a:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800647c:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800647e:	6820      	ldr	r0, [r4, #0]
 8006480:	4a35      	ldr	r2, [pc, #212]	; (8006558 <HAL_ADC_Init+0x20c>)
 8006482:	68c1      	ldr	r1, [r0, #12]
 8006484:	400a      	ands	r2, r1
 8006486:	4313      	orrs	r3, r2
 8006488:	60c3      	str	r3, [r0, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800648a:	f7ff fada 	bl	8005a42 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800648e:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006490:	6893      	ldr	r3, [r2, #8]
 8006492:	071b      	lsls	r3, r3, #28
 8006494:	d52b      	bpl.n	80064ee <HAL_ADC_Init+0x1a2>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006496:	68e3      	ldr	r3, [r4, #12]
 8006498:	6822      	ldr	r2, [r4, #0]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d11e      	bne.n	80064dc <HAL_ADC_Init+0x190>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800649e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80064a0:	69a3      	ldr	r3, [r4, #24]
 80064a2:	f021 010f 	bic.w	r1, r1, #15
 80064a6:	3b01      	subs	r3, #1
 80064a8:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80064aa:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80064ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80064ae:	f023 0303 	bic.w	r3, r3, #3
 80064b2:	f043 0301 	orr.w	r3, r3, #1
 80064b6:	6563      	str	r3, [r4, #84]	; 0x54
}
 80064b8:	4628      	mov	r0, r5
 80064ba:	b003      	add	sp, #12
 80064bc:	bd30      	pop	{r4, r5, pc}
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064be:	4827      	ldr	r0, [pc, #156]	; (800655c <HAL_ADC_Init+0x210>)
 80064c0:	f7ff fabb 	bl	8005a3a <LL_ADC_IsEnabled>
 80064c4:	fab0 f080 	clz	r0, r0
 80064c8:	0940      	lsrs	r0, r0, #5
 80064ca:	e7a3      	b.n	8006414 <HAL_ADC_Init+0xc8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80064cc:	4b21      	ldr	r3, [pc, #132]	; (8006554 <HAL_ADC_Init+0x208>)
 80064ce:	e7af      	b.n	8006430 <HAL_ADC_Init+0xe4>
                  hadc->Init.Overrun                                                    |
 80064d0:	4313      	orrs	r3, r2
 80064d2:	e7c1      	b.n	8006458 <HAL_ADC_Init+0x10c>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80064d4:	6913      	ldr	r3, [r2, #16]
 80064d6:	f023 0301 	bic.w	r3, r3, #1
 80064da:	e028      	b.n	800652e <HAL_ADC_Init+0x1e2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80064dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80064de:	f023 030f 	bic.w	r3, r3, #15
 80064e2:	e7e2      	b.n	80064aa <HAL_ADC_Init+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064e4:	f043 0310 	orr.w	r3, r3, #16
 80064e8:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 80064ea:	2501      	movs	r5, #1
 80064ec:	e7e4      	b.n	80064b8 <HAL_ADC_Init+0x16c>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80064ee:	2800      	cmp	r0, #0
 80064f0:	d1d1      	bne.n	8006496 <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80064f2:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80064f4:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80064f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064fa:	f023 0303 	bic.w	r3, r3, #3
 80064fe:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 8006502:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006504:	430b      	orrs	r3, r1
 8006506:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8006508:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800650c:	2b01      	cmp	r3, #1
 800650e:	d1e1      	bne.n	80064d4 <HAL_ADC_Init+0x188>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006510:	6910      	ldr	r0, [r2, #16]
 8006512:	e9d4 3110 	ldrd	r3, r1, [r4, #64]	; 0x40
 8006516:	430b      	orrs	r3, r1
 8006518:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800651a:	f043 0301 	orr.w	r3, r3, #1
 800651e:	430b      	orrs	r3, r1
 8006520:	490f      	ldr	r1, [pc, #60]	; (8006560 <HAL_ADC_Init+0x214>)
 8006522:	4001      	ands	r1, r0
 8006524:	430b      	orrs	r3, r1
 8006526:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006528:	3901      	subs	r1, #1
 800652a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800652e:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8006530:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006532:	6913      	ldr	r3, [r2, #16]
 8006534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006536:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800653a:	430b      	orrs	r3, r1
 800653c:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 800653e:	f7ff fe6d 	bl	800621c <ADC_ConfigureBoostMode>
 8006542:	e7a8      	b.n	8006496 <HAL_ADC_Init+0x14a>
 8006544:	00030d40 	.word	0x00030d40
 8006548:	24000000 	.word	0x24000000
 800654c:	40022000 	.word	0x40022000
 8006550:	40022100 	.word	0x40022100
 8006554:	40022300 	.word	0x40022300
 8006558:	fff0c003 	.word	0xfff0c003
 800655c:	58026000 	.word	0x58026000
 8006560:	fc00f81e 	.word	0xfc00f81e

08006564 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006564:	6880      	ldr	r0, [r0, #8]
}
 8006566:	f000 0001 	and.w	r0, r0, #1
 800656a:	4770      	bx	lr

0800656c <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800656c:	6880      	ldr	r0, [r0, #8]
}
 800656e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8006572:	4770      	bx	lr

08006574 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006574:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8006578:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800657a:	2a01      	cmp	r2, #1
{
 800657c:	b570      	push	{r4, r5, r6, lr}
 800657e:	b09a      	sub	sp, #104	; 0x68
  __HAL_LOCK(hadc);
 8006580:	f000 808b 	beq.w	800669a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006584:	2201      	movs	r2, #1
 8006586:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800658a:	4a45      	ldr	r2, [pc, #276]	; (80066a0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800658c:	6800      	ldr	r0, [r0, #0]
 800658e:	4290      	cmp	r0, r2
 8006590:	bf0c      	ite	eq
 8006592:	f502 7280 	addeq.w	r2, r2, #256	; 0x100
 8006596:	2200      	movne	r2, #0
 8006598:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 800659a:	9801      	ldr	r0, [sp, #4]
 800659c:	b940      	cbnz	r0, 80065b0 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800659e:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80065a0:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50

    return HAL_ERROR;
 80065a4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065a6:	f042 0220 	orr.w	r2, r2, #32
 80065aa:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80065ac:	b01a      	add	sp, #104	; 0x68
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80065b0:	f7ff ffdc 	bl	800656c <LL_ADC_REG_IsConversionOngoing>
 80065b4:	4602      	mov	r2, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80065b6:	6818      	ldr	r0, [r3, #0]
 80065b8:	f7ff ffd8 	bl	800656c <LL_ADC_REG_IsConversionOngoing>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d166      	bne.n	800668e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80065c0:	2a00      	cmp	r2, #0
 80065c2:	d164      	bne.n	800668e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	4a36      	ldr	r2, [pc, #216]	; (80066a0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80065c8:	4290      	cmp	r0, r2
 80065ca:	d029      	beq.n	8006620 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80065cc:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80065d0:	4d34      	ldr	r5, [pc, #208]	; (80066a4 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80065d2:	4c35      	ldr	r4, [pc, #212]	; (80066a8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80065d4:	f502 4286 	add.w	r2, r2, #17152	; 0x4300
 80065d8:	42a8      	cmp	r0, r5
 80065da:	bf08      	it	eq
 80065dc:	4622      	moveq	r2, r4
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80065de:	680c      	ldr	r4, [r1, #0]
 80065e0:	4d2f      	ldr	r5, [pc, #188]	; (80066a0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80065e2:	2c00      	cmp	r4, #0
 80065e4:	d030      	beq.n	8006648 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80065e6:	6894      	ldr	r4, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065e8:	42a8      	cmp	r0, r5
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80065ea:	684e      	ldr	r6, [r1, #4]
 80065ec:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
 80065f0:	ea44 0406 	orr.w	r4, r4, r6
 80065f4:	6094      	str	r4, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065f6:	d002      	beq.n	80065fe <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 80065f8:	4c2a      	ldr	r4, [pc, #168]	; (80066a4 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80065fa:	42a0      	cmp	r0, r4
 80065fc:	d112      	bne.n	8006624 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
 80065fe:	4828      	ldr	r0, [pc, #160]	; (80066a0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8006600:	f7ff ffb0 	bl	8006564 <LL_ADC_IsEnabled>
 8006604:	4604      	mov	r4, r0
 8006606:	4827      	ldr	r0, [pc, #156]	; (80066a4 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8006608:	f7ff ffac 	bl	8006564 <LL_ADC_IsEnabled>
 800660c:	4320      	orrs	r0, r4
 800660e:	bf0c      	ite	eq
 8006610:	2001      	moveq	r0, #1
 8006612:	2000      	movne	r0, #0
 8006614:	b968      	cbnz	r0, 8006632 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006616:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return tmp_hal_status;
 800661e:	e7c5      	b.n	80065ac <HAL_ADCEx_MultiModeConfigChannel+0x38>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006620:	4a21      	ldr	r2, [pc, #132]	; (80066a8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8006622:	e7dc      	b.n	80065de <HAL_ADCEx_MultiModeConfigChannel+0x6a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006624:	4821      	ldr	r0, [pc, #132]	; (80066ac <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8006626:	f7ff ff9d 	bl	8006564 <LL_ADC_IsEnabled>
 800662a:	fab0 f080 	clz	r0, r0
 800662e:	0940      	lsrs	r0, r0, #5
 8006630:	e7f0      	b.n	8006614 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
        MODIFY_REG(tmpADC_Common->CCR,
 8006632:	6808      	ldr	r0, [r1, #0]
 8006634:	6894      	ldr	r4, [r2, #8]
 8006636:	6889      	ldr	r1, [r1, #8]
 8006638:	4301      	orrs	r1, r0
 800663a:	f424 6071 	bic.w	r0, r4, #3856	; 0xf10
 800663e:	f020 000f 	bic.w	r0, r0, #15
 8006642:	4301      	orrs	r1, r0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006644:	6091      	str	r1, [r2, #8]
 8006646:	e7e6      	b.n	8006616 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006648:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800664a:	42a8      	cmp	r0, r5
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800664c:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8006650:	6091      	str	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006652:	d002      	beq.n	800665a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
 8006654:	4913      	ldr	r1, [pc, #76]	; (80066a4 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8006656:	4288      	cmp	r0, r1
 8006658:	d112      	bne.n	8006680 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
 800665a:	4811      	ldr	r0, [pc, #68]	; (80066a0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800665c:	f7ff ff82 	bl	8006564 <LL_ADC_IsEnabled>
 8006660:	4601      	mov	r1, r0
 8006662:	4810      	ldr	r0, [pc, #64]	; (80066a4 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8006664:	f7ff ff7e 	bl	8006564 <LL_ADC_IsEnabled>
 8006668:	4301      	orrs	r1, r0
 800666a:	bf0c      	ite	eq
 800666c:	2001      	moveq	r0, #1
 800666e:	2000      	movne	r0, #0
 8006670:	2800      	cmp	r0, #0
 8006672:	d0d0      	beq.n	8006616 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006674:	6891      	ldr	r1, [r2, #8]
 8006676:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 800667a:	f021 010f 	bic.w	r1, r1, #15
 800667e:	e7e1      	b.n	8006644 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006680:	480a      	ldr	r0, [pc, #40]	; (80066ac <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8006682:	f7ff ff6f 	bl	8006564 <LL_ADC_IsEnabled>
 8006686:	fab0 f080 	clz	r0, r0
 800668a:	0940      	lsrs	r0, r0, #5
 800668c:	e7f0      	b.n	8006670 <HAL_ADCEx_MultiModeConfigChannel+0xfc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800668e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006690:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006692:	f042 0220 	orr.w	r2, r2, #32
 8006696:	655a      	str	r2, [r3, #84]	; 0x54
 8006698:	e7be      	b.n	8006618 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
  __HAL_LOCK(hadc);
 800669a:	2002      	movs	r0, #2
 800669c:	e786      	b.n	80065ac <HAL_ADCEx_MultiModeConfigChannel+0x38>
 800669e:	bf00      	nop
 80066a0:	40022000 	.word	0x40022000
 80066a4:	40022100 	.word	0x40022100
 80066a8:	40022300 	.word	0x40022300
 80066ac:	58026000 	.word	0x58026000

080066b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066b0:	4a07      	ldr	r2, [pc, #28]	; (80066d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066b2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066b4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80066be:	041b      	lsls	r3, r3, #16
 80066c0:	0c1b      	lsrs	r3, r3, #16
 80066c2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80066c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80066ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80066cc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80066ce:	4770      	bx	lr
 80066d0:	e000ed00 	.word	0xe000ed00

080066d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066d4:	4b16      	ldr	r3, [pc, #88]	; (8006730 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066d6:	b570      	push	{r4, r5, r6, lr}
 80066d8:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066da:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066de:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066e2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066e6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066e8:	2d04      	cmp	r5, #4
 80066ea:	bf28      	it	cs
 80066ec:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066ee:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066f0:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066f4:	bf8c      	ite	hi
 80066f6:	3c03      	subhi	r4, #3
 80066f8:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 80066fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066fc:	ea21 0303 	bic.w	r3, r1, r3
 8006700:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006704:	fa06 f404 	lsl.w	r4, r6, r4
 8006708:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800670c:	ea43 0304 	orr.w	r3, r3, r4
 8006710:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006714:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8006716:	db06      	blt.n	8006726 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006718:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800671c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006720:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006724:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006726:	f000 000f 	and.w	r0, r0, #15
 800672a:	4a02      	ldr	r2, [pc, #8]	; (8006734 <HAL_NVIC_SetPriority+0x60>)
 800672c:	5413      	strb	r3, [r2, r0]
 800672e:	e7f9      	b.n	8006724 <HAL_NVIC_SetPriority+0x50>
 8006730:	e000ed00 	.word	0xe000ed00
 8006734:	e000ed14 	.word	0xe000ed14

08006738 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006738:	2800      	cmp	r0, #0
 800673a:	db08      	blt.n	800674e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800673c:	0942      	lsrs	r2, r0, #5
 800673e:	2301      	movs	r3, #1
 8006740:	f000 001f 	and.w	r0, r0, #31
 8006744:	fa03 f000 	lsl.w	r0, r3, r0
 8006748:	4b01      	ldr	r3, [pc, #4]	; (8006750 <HAL_NVIC_EnableIRQ+0x18>)
 800674a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800674e:	4770      	bx	lr
 8006750:	e000e100 	.word	0xe000e100

08006754 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006754:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006756:	4d5c      	ldr	r5, [pc, #368]	; (80068c8 <DMA_SetConfig+0x174>)
 8006758:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800675a:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800675c:	46ac      	mov	ip, r5
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800675e:	42ac      	cmp	r4, r5
 8006760:	d045      	beq.n	80067ee <DMA_SetConfig+0x9a>
 8006762:	4e5a      	ldr	r6, [pc, #360]	; (80068cc <DMA_SetConfig+0x178>)
 8006764:	42b4      	cmp	r4, r6
 8006766:	d042      	beq.n	80067ee <DMA_SetConfig+0x9a>
 8006768:	3618      	adds	r6, #24
 800676a:	42b4      	cmp	r4, r6
 800676c:	d03f      	beq.n	80067ee <DMA_SetConfig+0x9a>
 800676e:	3618      	adds	r6, #24
 8006770:	42b4      	cmp	r4, r6
 8006772:	d03c      	beq.n	80067ee <DMA_SetConfig+0x9a>
 8006774:	3618      	adds	r6, #24
 8006776:	42b4      	cmp	r4, r6
 8006778:	d039      	beq.n	80067ee <DMA_SetConfig+0x9a>
 800677a:	3618      	adds	r6, #24
 800677c:	42b4      	cmp	r4, r6
 800677e:	d036      	beq.n	80067ee <DMA_SetConfig+0x9a>
 8006780:	3618      	adds	r6, #24
 8006782:	42b4      	cmp	r4, r6
 8006784:	d033      	beq.n	80067ee <DMA_SetConfig+0x9a>
 8006786:	3618      	adds	r6, #24
 8006788:	42b4      	cmp	r4, r6
 800678a:	d030      	beq.n	80067ee <DMA_SetConfig+0x9a>
 800678c:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8006790:	42b4      	cmp	r4, r6
 8006792:	d02c      	beq.n	80067ee <DMA_SetConfig+0x9a>
 8006794:	3618      	adds	r6, #24
 8006796:	42b4      	cmp	r4, r6
 8006798:	d029      	beq.n	80067ee <DMA_SetConfig+0x9a>
 800679a:	3618      	adds	r6, #24
 800679c:	42b4      	cmp	r4, r6
 800679e:	d026      	beq.n	80067ee <DMA_SetConfig+0x9a>
 80067a0:	3618      	adds	r6, #24
 80067a2:	42b4      	cmp	r4, r6
 80067a4:	d023      	beq.n	80067ee <DMA_SetConfig+0x9a>
 80067a6:	3618      	adds	r6, #24
 80067a8:	42b4      	cmp	r4, r6
 80067aa:	d020      	beq.n	80067ee <DMA_SetConfig+0x9a>
 80067ac:	3618      	adds	r6, #24
 80067ae:	42b4      	cmp	r4, r6
 80067b0:	d01d      	beq.n	80067ee <DMA_SetConfig+0x9a>
 80067b2:	3618      	adds	r6, #24
 80067b4:	42b4      	cmp	r4, r6
 80067b6:	d01a      	beq.n	80067ee <DMA_SetConfig+0x9a>
 80067b8:	3618      	adds	r6, #24
 80067ba:	42b4      	cmp	r4, r6
 80067bc:	d017      	beq.n	80067ee <DMA_SetConfig+0x9a>
 80067be:	4e44      	ldr	r6, [pc, #272]	; (80068d0 <DMA_SetConfig+0x17c>)
 80067c0:	42b4      	cmp	r4, r6
 80067c2:	d014      	beq.n	80067ee <DMA_SetConfig+0x9a>
 80067c4:	3614      	adds	r6, #20
 80067c6:	42b4      	cmp	r4, r6
 80067c8:	d011      	beq.n	80067ee <DMA_SetConfig+0x9a>
 80067ca:	3614      	adds	r6, #20
 80067cc:	42b4      	cmp	r4, r6
 80067ce:	d00e      	beq.n	80067ee <DMA_SetConfig+0x9a>
 80067d0:	3614      	adds	r6, #20
 80067d2:	42b4      	cmp	r4, r6
 80067d4:	d00b      	beq.n	80067ee <DMA_SetConfig+0x9a>
 80067d6:	3614      	adds	r6, #20
 80067d8:	42b4      	cmp	r4, r6
 80067da:	d008      	beq.n	80067ee <DMA_SetConfig+0x9a>
 80067dc:	3614      	adds	r6, #20
 80067de:	42b4      	cmp	r4, r6
 80067e0:	d005      	beq.n	80067ee <DMA_SetConfig+0x9a>
 80067e2:	3614      	adds	r6, #20
 80067e4:	42b4      	cmp	r4, r6
 80067e6:	d002      	beq.n	80067ee <DMA_SetConfig+0x9a>
 80067e8:	3614      	adds	r6, #20
 80067ea:	42b4      	cmp	r4, r6
 80067ec:	d167      	bne.n	80068be <DMA_SetConfig+0x16a>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067ee:	e9d0 6519 	ldrd	r6, r5, [r0, #100]	; 0x64
 80067f2:	6075      	str	r5, [r6, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80067f4:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 80067f6:	b116      	cbz	r6, 80067fe <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067f8:	e9d0 651c 	ldrd	r6, r5, [r0, #112]	; 0x70
 80067fc:	6075      	str	r5, [r6, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067fe:	4564      	cmp	r4, ip
 8006800:	d037      	beq.n	8006872 <DMA_SetConfig+0x11e>
 8006802:	4d32      	ldr	r5, [pc, #200]	; (80068cc <DMA_SetConfig+0x178>)
 8006804:	42ac      	cmp	r4, r5
 8006806:	d034      	beq.n	8006872 <DMA_SetConfig+0x11e>
 8006808:	3518      	adds	r5, #24
 800680a:	42ac      	cmp	r4, r5
 800680c:	d031      	beq.n	8006872 <DMA_SetConfig+0x11e>
 800680e:	3518      	adds	r5, #24
 8006810:	42ac      	cmp	r4, r5
 8006812:	d02e      	beq.n	8006872 <DMA_SetConfig+0x11e>
 8006814:	3518      	adds	r5, #24
 8006816:	42ac      	cmp	r4, r5
 8006818:	d02b      	beq.n	8006872 <DMA_SetConfig+0x11e>
 800681a:	3518      	adds	r5, #24
 800681c:	42ac      	cmp	r4, r5
 800681e:	d028      	beq.n	8006872 <DMA_SetConfig+0x11e>
 8006820:	3518      	adds	r5, #24
 8006822:	42ac      	cmp	r4, r5
 8006824:	d025      	beq.n	8006872 <DMA_SetConfig+0x11e>
 8006826:	3518      	adds	r5, #24
 8006828:	42ac      	cmp	r4, r5
 800682a:	d022      	beq.n	8006872 <DMA_SetConfig+0x11e>
 800682c:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8006830:	42ac      	cmp	r4, r5
 8006832:	d01e      	beq.n	8006872 <DMA_SetConfig+0x11e>
 8006834:	3518      	adds	r5, #24
 8006836:	42ac      	cmp	r4, r5
 8006838:	d01b      	beq.n	8006872 <DMA_SetConfig+0x11e>
 800683a:	3518      	adds	r5, #24
 800683c:	42ac      	cmp	r4, r5
 800683e:	d018      	beq.n	8006872 <DMA_SetConfig+0x11e>
 8006840:	3518      	adds	r5, #24
 8006842:	42ac      	cmp	r4, r5
 8006844:	d015      	beq.n	8006872 <DMA_SetConfig+0x11e>
 8006846:	3518      	adds	r5, #24
 8006848:	42ac      	cmp	r4, r5
 800684a:	d012      	beq.n	8006872 <DMA_SetConfig+0x11e>
 800684c:	3518      	adds	r5, #24
 800684e:	42ac      	cmp	r4, r5
 8006850:	d00f      	beq.n	8006872 <DMA_SetConfig+0x11e>
 8006852:	3518      	adds	r5, #24
 8006854:	42ac      	cmp	r4, r5
 8006856:	d00c      	beq.n	8006872 <DMA_SetConfig+0x11e>
 8006858:	3518      	adds	r5, #24
 800685a:	42ac      	cmp	r4, r5
 800685c:	d009      	beq.n	8006872 <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800685e:	4d1c      	ldr	r5, [pc, #112]	; (80068d0 <DMA_SetConfig+0x17c>)
 8006860:	42ac      	cmp	r4, r5
 8006862:	d117      	bne.n	8006894 <DMA_SetConfig+0x140>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006864:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8006866:	f005 061f 	and.w	r6, r5, #31
 800686a:	2501      	movs	r5, #1
 800686c:	40b5      	lsls	r5, r6
 800686e:	607d      	str	r5, [r7, #4]
 8006870:	e009      	b.n	8006886 <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006872:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8006874:	f005 061f 	and.w	r6, r5, #31
 8006878:	253f      	movs	r5, #63	; 0x3f
 800687a:	40b5      	lsls	r5, r6
 800687c:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800687e:	6825      	ldr	r5, [r4, #0]
 8006880:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8006884:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006886:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006888:	6883      	ldr	r3, [r0, #8]
 800688a:	2b40      	cmp	r3, #64	; 0x40
 800688c:	d118      	bne.n	80068c0 <DMA_SetConfig+0x16c>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800688e:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006890:	60e1      	str	r1, [r4, #12]
 8006892:	e014      	b.n	80068be <DMA_SetConfig+0x16a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006894:	4d0f      	ldr	r5, [pc, #60]	; (80068d4 <DMA_SetConfig+0x180>)
 8006896:	42ac      	cmp	r4, r5
 8006898:	d0e4      	beq.n	8006864 <DMA_SetConfig+0x110>
 800689a:	3514      	adds	r5, #20
 800689c:	42ac      	cmp	r4, r5
 800689e:	d0e1      	beq.n	8006864 <DMA_SetConfig+0x110>
 80068a0:	3514      	adds	r5, #20
 80068a2:	42ac      	cmp	r4, r5
 80068a4:	d0de      	beq.n	8006864 <DMA_SetConfig+0x110>
 80068a6:	3514      	adds	r5, #20
 80068a8:	42ac      	cmp	r4, r5
 80068aa:	d0db      	beq.n	8006864 <DMA_SetConfig+0x110>
 80068ac:	3514      	adds	r5, #20
 80068ae:	42ac      	cmp	r4, r5
 80068b0:	d0d8      	beq.n	8006864 <DMA_SetConfig+0x110>
 80068b2:	3514      	adds	r5, #20
 80068b4:	42ac      	cmp	r4, r5
 80068b6:	d0d5      	beq.n	8006864 <DMA_SetConfig+0x110>
 80068b8:	3514      	adds	r5, #20
 80068ba:	42ac      	cmp	r4, r5
 80068bc:	d0d2      	beq.n	8006864 <DMA_SetConfig+0x110>
  }
  else
  {
    /* Nothing To Do */
  }
}
 80068be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80068c0:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80068c2:	60e2      	str	r2, [r4, #12]
}
 80068c4:	e7fb      	b.n	80068be <DMA_SetConfig+0x16a>
 80068c6:	bf00      	nop
 80068c8:	40020010 	.word	0x40020010
 80068cc:	40020028 	.word	0x40020028
 80068d0:	58025408 	.word	0x58025408
 80068d4:	5802541c 	.word	0x5802541c

080068d8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068d8:	6803      	ldr	r3, [r0, #0]
 80068da:	4a24      	ldr	r2, [pc, #144]	; (800696c <DMA_CalcBaseAndBitshift+0x94>)
 80068dc:	4293      	cmp	r3, r2
{
 80068de:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068e0:	d032      	beq.n	8006948 <DMA_CalcBaseAndBitshift+0x70>
 80068e2:	3218      	adds	r2, #24
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d02f      	beq.n	8006948 <DMA_CalcBaseAndBitshift+0x70>
 80068e8:	3218      	adds	r2, #24
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d02c      	beq.n	8006948 <DMA_CalcBaseAndBitshift+0x70>
 80068ee:	3218      	adds	r2, #24
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d029      	beq.n	8006948 <DMA_CalcBaseAndBitshift+0x70>
 80068f4:	3218      	adds	r2, #24
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d026      	beq.n	8006948 <DMA_CalcBaseAndBitshift+0x70>
 80068fa:	3218      	adds	r2, #24
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d023      	beq.n	8006948 <DMA_CalcBaseAndBitshift+0x70>
 8006900:	3218      	adds	r2, #24
 8006902:	4293      	cmp	r3, r2
 8006904:	d020      	beq.n	8006948 <DMA_CalcBaseAndBitshift+0x70>
 8006906:	3218      	adds	r2, #24
 8006908:	4293      	cmp	r3, r2
 800690a:	d01d      	beq.n	8006948 <DMA_CalcBaseAndBitshift+0x70>
 800690c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006910:	4293      	cmp	r3, r2
 8006912:	d019      	beq.n	8006948 <DMA_CalcBaseAndBitshift+0x70>
 8006914:	3218      	adds	r2, #24
 8006916:	4293      	cmp	r3, r2
 8006918:	d016      	beq.n	8006948 <DMA_CalcBaseAndBitshift+0x70>
 800691a:	3218      	adds	r2, #24
 800691c:	4293      	cmp	r3, r2
 800691e:	d013      	beq.n	8006948 <DMA_CalcBaseAndBitshift+0x70>
 8006920:	3218      	adds	r2, #24
 8006922:	4293      	cmp	r3, r2
 8006924:	d010      	beq.n	8006948 <DMA_CalcBaseAndBitshift+0x70>
 8006926:	3218      	adds	r2, #24
 8006928:	4293      	cmp	r3, r2
 800692a:	d00d      	beq.n	8006948 <DMA_CalcBaseAndBitshift+0x70>
 800692c:	3218      	adds	r2, #24
 800692e:	4293      	cmp	r3, r2
 8006930:	d00a      	beq.n	8006948 <DMA_CalcBaseAndBitshift+0x70>
 8006932:	3218      	adds	r2, #24
 8006934:	4293      	cmp	r3, r2
 8006936:	d007      	beq.n	8006948 <DMA_CalcBaseAndBitshift+0x70>
 8006938:	3218      	adds	r2, #24
 800693a:	4293      	cmp	r3, r2
 800693c:	d004      	beq.n	8006948 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800693e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006942:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8006944:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8006946:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006948:	b2da      	uxtb	r2, r3
 800694a:	2118      	movs	r1, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800694c:	4c08      	ldr	r4, [pc, #32]	; (8006970 <DMA_CalcBaseAndBitshift+0x98>)
 800694e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006952:	3a10      	subs	r2, #16
 8006954:	f023 0303 	bic.w	r3, r3, #3
 8006958:	fbb2 f2f1 	udiv	r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800695c:	f002 0107 	and.w	r1, r2, #7
    if (stream_number > 3U)
 8006960:	2a03      	cmp	r2, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006962:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006964:	bf88      	it	hi
 8006966:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006968:	65c1      	str	r1, [r0, #92]	; 0x5c
 800696a:	e7ea      	b.n	8006942 <DMA_CalcBaseAndBitshift+0x6a>
 800696c:	40020010 	.word	0x40020010
 8006970:	080167d4 	.word	0x080167d4

08006974 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006974:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006976:	491f      	ldr	r1, [pc, #124]	; (80069f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8006978:	b2d3      	uxtb	r3, r2
 800697a:	428a      	cmp	r2, r1
 800697c:	d024      	beq.n	80069c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 800697e:	3114      	adds	r1, #20
 8006980:	428a      	cmp	r2, r1
 8006982:	d021      	beq.n	80069c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006984:	3114      	adds	r1, #20
 8006986:	428a      	cmp	r2, r1
 8006988:	d01e      	beq.n	80069c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 800698a:	3114      	adds	r1, #20
 800698c:	428a      	cmp	r2, r1
 800698e:	d01b      	beq.n	80069c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006990:	3114      	adds	r1, #20
 8006992:	428a      	cmp	r2, r1
 8006994:	d018      	beq.n	80069c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006996:	3114      	adds	r1, #20
 8006998:	428a      	cmp	r2, r1
 800699a:	d015      	beq.n	80069c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 800699c:	3114      	adds	r1, #20
 800699e:	428a      	cmp	r2, r1
 80069a0:	d012      	beq.n	80069c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 80069a2:	3114      	adds	r1, #20
 80069a4:	428a      	cmp	r2, r1
 80069a6:	d00f      	beq.n	80069c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80069a8:	2118      	movs	r1, #24
 80069aa:	3b10      	subs	r3, #16
 80069ac:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80069b0:	4911      	ldr	r1, [pc, #68]	; (80069f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80069b2:	4411      	add	r1, r2
 80069b4:	29a8      	cmp	r1, #168	; 0xa8
 80069b6:	d91a      	bls.n	80069ee <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80069b8:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 80069bc:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
 80069c0:	0092      	lsls	r2, r2, #2
 80069c2:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80069c4:	4a0d      	ldr	r2, [pc, #52]	; (80069fc <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80069c6:	e00a      	b.n	80069de <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80069c8:	2214      	movs	r2, #20
 80069ca:	3b08      	subs	r3, #8
 80069cc:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80069d0:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
 80069d4:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
 80069d8:	0092      	lsls	r2, r2, #2
 80069da:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80069dc:	4a08      	ldr	r2, [pc, #32]	; (8006a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80069de:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80069e0:	f003 031f 	and.w	r3, r3, #31
 80069e4:	2201      	movs	r2, #1
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 80069ec:	4770      	bx	lr
      stream_number += 8U;
 80069ee:	3308      	adds	r3, #8
 80069f0:	e7e2      	b.n	80069b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 80069f2:	bf00      	nop
 80069f4:	58025408 	.word	0x58025408
 80069f8:	bffdfbf0 	.word	0xbffdfbf0
 80069fc:	40020880 	.word	0x40020880
 8006a00:	58025880 	.word	0x58025880

08006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a04:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006a06:	1e51      	subs	r1, r2, #1
 8006a08:	2907      	cmp	r1, #7
{
 8006a0a:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006a0c:	d821      	bhi.n	8006a52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a0e:	6803      	ldr	r3, [r0, #0]
 8006a10:	4c13      	ldr	r4, [pc, #76]	; (8006a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 8006a12:	42a3      	cmp	r3, r4
 8006a14:	d01e      	beq.n	8006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006a16:	3414      	adds	r4, #20
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	d01b      	beq.n	8006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006a1c:	3414      	adds	r4, #20
 8006a1e:	42a3      	cmp	r3, r4
 8006a20:	d018      	beq.n	8006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006a22:	3414      	adds	r4, #20
 8006a24:	42a3      	cmp	r3, r4
 8006a26:	d015      	beq.n	8006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006a28:	3414      	adds	r4, #20
 8006a2a:	42a3      	cmp	r3, r4
 8006a2c:	d012      	beq.n	8006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006a2e:	3414      	adds	r4, #20
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	d00f      	beq.n	8006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006a34:	3414      	adds	r4, #20
 8006a36:	42a3      	cmp	r3, r4
 8006a38:	d00c      	beq.n	8006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006a3a:	3414      	adds	r4, #20
 8006a3c:	42a3      	cmp	r3, r4
 8006a3e:	d009      	beq.n	8006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a40:	4b08      	ldr	r3, [pc, #32]	; (8006a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 8006a42:	4413      	add	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a48:	4b07      	ldr	r3, [pc, #28]	; (8006a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006a4a:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	408b      	lsls	r3, r1
 8006a50:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 8006a52:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a54:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006a5c:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8006a5e:	e7f4      	b.n	8006a4a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x46>
 8006a60:	58025408 	.word	0x58025408
 8006a64:	1000823f 	.word	0x1000823f
 8006a68:	40020940 	.word	0x40020940
 8006a6c:	1600963f 	.word	0x1600963f
 8006a70:	58025940 	.word	0x58025940

08006a74 <HAL_DMA_Init>:
{
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006a78:	f7fe ffb0 	bl	80059dc <HAL_GetTick>
 8006a7c:	4606      	mov	r6, r0
  if(hdma == NULL)
 8006a7e:	2c00      	cmp	r4, #0
 8006a80:	f000 8165 	beq.w	8006d4e <HAL_DMA_Init+0x2da>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	4db3      	ldr	r5, [pc, #716]	; (8006d54 <HAL_DMA_Init+0x2e0>)
 8006a88:	42ab      	cmp	r3, r5
 8006a8a:	d06a      	beq.n	8006b62 <HAL_DMA_Init+0xee>
 8006a8c:	4ab2      	ldr	r2, [pc, #712]	; (8006d58 <HAL_DMA_Init+0x2e4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d067      	beq.n	8006b62 <HAL_DMA_Init+0xee>
 8006a92:	3218      	adds	r2, #24
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d064      	beq.n	8006b62 <HAL_DMA_Init+0xee>
 8006a98:	3218      	adds	r2, #24
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d061      	beq.n	8006b62 <HAL_DMA_Init+0xee>
 8006a9e:	3218      	adds	r2, #24
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d05e      	beq.n	8006b62 <HAL_DMA_Init+0xee>
 8006aa4:	3218      	adds	r2, #24
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d05b      	beq.n	8006b62 <HAL_DMA_Init+0xee>
 8006aaa:	3218      	adds	r2, #24
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d058      	beq.n	8006b62 <HAL_DMA_Init+0xee>
 8006ab0:	3218      	adds	r2, #24
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d055      	beq.n	8006b62 <HAL_DMA_Init+0xee>
 8006ab6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d051      	beq.n	8006b62 <HAL_DMA_Init+0xee>
 8006abe:	3218      	adds	r2, #24
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d04e      	beq.n	8006b62 <HAL_DMA_Init+0xee>
 8006ac4:	3218      	adds	r2, #24
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d04b      	beq.n	8006b62 <HAL_DMA_Init+0xee>
 8006aca:	3218      	adds	r2, #24
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d048      	beq.n	8006b62 <HAL_DMA_Init+0xee>
 8006ad0:	3218      	adds	r2, #24
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d045      	beq.n	8006b62 <HAL_DMA_Init+0xee>
 8006ad6:	3218      	adds	r2, #24
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d042      	beq.n	8006b62 <HAL_DMA_Init+0xee>
 8006adc:	3218      	adds	r2, #24
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d03f      	beq.n	8006b62 <HAL_DMA_Init+0xee>
 8006ae2:	3218      	adds	r2, #24
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d03c      	beq.n	8006b62 <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006ae8:	4a9c      	ldr	r2, [pc, #624]	; (8006d5c <HAL_DMA_Init+0x2e8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	f040 8160 	bne.w	8006db0 <HAL_DMA_Init+0x33c>
    __HAL_UNLOCK(hdma);
 8006af0:	2200      	movs	r2, #0
 8006af2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8006af6:	2202      	movs	r2, #2
 8006af8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006afc:	68a2      	ldr	r2, [r4, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006afe:	6819      	ldr	r1, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006b00:	2a40      	cmp	r2, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006b02:	f421 31ff 	bic.w	r1, r1, #130560	; 0x1fe00
 8006b06:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006b0a:	f000 816f 	beq.w	8006dec <HAL_DMA_Init+0x378>
 8006b0e:	2a80      	cmp	r2, #128	; 0x80
 8006b10:	bf14      	ite	ne
 8006b12:	2000      	movne	r0, #0
 8006b14:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006b18:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 8006b1c:	08d2      	lsrs	r2, r2, #3
 8006b1e:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006b22:	6966      	ldr	r6, [r4, #20]
 8006b24:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006b28:	69a6      	ldr	r6, [r4, #24]
 8006b2a:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006b2e:	69e6      	ldr	r6, [r4, #28]
 8006b30:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006b34:	6a26      	ldr	r6, [r4, #32]
 8006b36:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8006b3a:	430a      	orrs	r2, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006b3c:	4302      	orrs	r2, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b3e:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006b40:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006b42:	4a87      	ldr	r2, [pc, #540]	; (8006d60 <HAL_DMA_Init+0x2ec>)
 8006b44:	441a      	add	r2, r3
 8006b46:	2314      	movs	r3, #20
 8006b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b4c:	0092      	lsls	r2, r2, #2
 8006b4e:	65e2      	str	r2, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b50:	f7ff fec2 	bl	80068d8 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b54:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006b56:	f003 021f 	and.w	r2, r3, #31
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	4093      	lsls	r3, r2
 8006b5e:	6043      	str	r3, [r0, #4]
 8006b60:	e081      	b.n	8006c66 <HAL_DMA_Init+0x1f2>
    __HAL_UNLOCK(hdma);
 8006b62:	2200      	movs	r2, #0
    __HAL_DMA_DISABLE(hdma);
 8006b64:	42ab      	cmp	r3, r5
    __HAL_UNLOCK(hdma);
 8006b66:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b6a:	f04f 0202 	mov.w	r2, #2
 8006b6e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8006b72:	d01e      	beq.n	8006bb2 <HAL_DMA_Init+0x13e>
 8006b74:	4a78      	ldr	r2, [pc, #480]	; (8006d58 <HAL_DMA_Init+0x2e4>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d01b      	beq.n	8006bb2 <HAL_DMA_Init+0x13e>
 8006b7a:	3218      	adds	r2, #24
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d018      	beq.n	8006bb2 <HAL_DMA_Init+0x13e>
 8006b80:	3218      	adds	r2, #24
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d015      	beq.n	8006bb2 <HAL_DMA_Init+0x13e>
 8006b86:	3218      	adds	r2, #24
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d012      	beq.n	8006bb2 <HAL_DMA_Init+0x13e>
 8006b8c:	3218      	adds	r2, #24
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00f      	beq.n	8006bb2 <HAL_DMA_Init+0x13e>
 8006b92:	3218      	adds	r2, #24
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00c      	beq.n	8006bb2 <HAL_DMA_Init+0x13e>
 8006b98:	3218      	adds	r2, #24
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d009      	beq.n	8006bb2 <HAL_DMA_Init+0x13e>
 8006b9e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d005      	beq.n	8006bb2 <HAL_DMA_Init+0x13e>
 8006ba6:	3218      	adds	r2, #24
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d002      	beq.n	8006bb2 <HAL_DMA_Init+0x13e>
 8006bac:	3218      	adds	r2, #24
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d0ff      	beq.n	8006bb2 <HAL_DMA_Init+0x13e>
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	f022 0201 	bic.w	r2, r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006bba:	6821      	ldr	r1, [r4, #0]
 8006bbc:	680b      	ldr	r3, [r1, #0]
 8006bbe:	07db      	lsls	r3, r3, #31
 8006bc0:	f100 80ba 	bmi.w	8006d38 <HAL_DMA_Init+0x2c4>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006bc4:	680b      	ldr	r3, [r1, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006bc6:	4e67      	ldr	r6, [pc, #412]	; (8006d64 <HAL_DMA_Init+0x2f0>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bc8:	69a0      	ldr	r0, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006bca:	401e      	ands	r6, r3
    registerValue |=  hdma->Init.Direction           |
 8006bcc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8006bd0:	4313      	orrs	r3, r2
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bd2:	6922      	ldr	r2, [r4, #16]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	6962      	ldr	r2, [r4, #20]
 8006bd8:	4313      	orrs	r3, r2
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bda:	69e2      	ldr	r2, [r4, #28]
 8006bdc:	4303      	orrs	r3, r0
 8006bde:	4313      	orrs	r3, r2
            hdma->Init.Mode                | hdma->Init.Priority;
 8006be0:	6a22      	ldr	r2, [r4, #32]
 8006be2:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006be4:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006be6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006be8:	2e04      	cmp	r6, #4
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006bea:	bf02      	ittt	eq
 8006bec:	e9d4 270b 	ldrdeq	r2, r7, [r4, #44]	; 0x2c
 8006bf0:	433a      	orreq	r2, r7
 8006bf2:	4313      	orreq	r3, r2
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006bf4:	4a5c      	ldr	r2, [pc, #368]	; (8006d68 <HAL_DMA_Init+0x2f4>)
 8006bf6:	6812      	ldr	r2, [r2, #0]
 8006bf8:	0c12      	lsrs	r2, r2, #16
 8006bfa:	0412      	lsls	r2, r2, #16
 8006bfc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8006c00:	d30f      	bcc.n	8006c22 <HAL_DMA_Init+0x1ae>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006c02:	6862      	ldr	r2, [r4, #4]
 8006c04:	f1a2 0c29 	sub.w	ip, r2, #41	; 0x29
 8006c08:	f1bc 0f1f 	cmp.w	ip, #31
 8006c0c:	d804      	bhi.n	8006c18 <HAL_DMA_Init+0x1a4>
 8006c0e:	4f57      	ldr	r7, [pc, #348]	; (8006d6c <HAL_DMA_Init+0x2f8>)
 8006c10:	fa27 f70c 	lsr.w	r7, r7, ip
 8006c14:	07ff      	lsls	r7, r7, #31
 8006c16:	d402      	bmi.n	8006c1e <HAL_DMA_Init+0x1aa>
 8006c18:	3a4f      	subs	r2, #79	; 0x4f
 8006c1a:	2a03      	cmp	r2, #3
 8006c1c:	d801      	bhi.n	8006c22 <HAL_DMA_Init+0x1ae>
        registerValue |= DMA_SxCR_TRBUFF;
 8006c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006c22:	600b      	str	r3, [r1, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c24:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006c26:	694b      	ldr	r3, [r1, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006c28:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8006c2c:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c30:	d10f      	bne.n	8006c52 <HAL_DMA_Init+0x1de>
      registerValue |= hdma->Init.FIFOThreshold;
 8006c32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8006c36:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006c38:	b15e      	cbz	r6, 8006c52 <HAL_DMA_Init+0x1de>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	f040 8098 	bne.w	8006d70 <HAL_DMA_Init+0x2fc>
    switch (hdma->Init.FIFOThreshold)
 8006c40:	2a01      	cmp	r2, #1
 8006c42:	f000 80a7 	beq.w	8006d94 <HAL_DMA_Init+0x320>
 8006c46:	d301      	bcc.n	8006c4c <HAL_DMA_Init+0x1d8>
 8006c48:	2a02      	cmp	r2, #2
    switch (hdma->Init.FIFOThreshold)
 8006c4a:	d102      	bne.n	8006c52 <HAL_DMA_Init+0x1de>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c4c:	01f2      	lsls	r2, r6, #7
 8006c4e:	f100 80a5 	bmi.w	8006d9c <HAL_DMA_Init+0x328>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006c52:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006c54:	4620      	mov	r0, r4
 8006c56:	f7ff fe3f 	bl	80068d8 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c5a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006c5c:	f003 021f 	and.w	r2, r3, #31
 8006c60:	233f      	movs	r3, #63	; 0x3f
 8006c62:	4093      	lsls	r3, r2
 8006c64:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	42ab      	cmp	r3, r5
 8006c6a:	d045      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006c6c:	4a3a      	ldr	r2, [pc, #232]	; (8006d58 <HAL_DMA_Init+0x2e4>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d042      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006c72:	3218      	adds	r2, #24
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d03f      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006c78:	3218      	adds	r2, #24
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d03c      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006c7e:	3218      	adds	r2, #24
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d039      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006c84:	3218      	adds	r2, #24
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d036      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006c8a:	3218      	adds	r2, #24
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d033      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006c90:	3218      	adds	r2, #24
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d030      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006c96:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d02c      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006c9e:	3218      	adds	r2, #24
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d029      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006ca4:	3218      	adds	r2, #24
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d026      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006caa:	3218      	adds	r2, #24
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d023      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006cb0:	3218      	adds	r2, #24
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d020      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006cb6:	3218      	adds	r2, #24
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d01d      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006cbc:	3218      	adds	r2, #24
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d01a      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006cc2:	3218      	adds	r2, #24
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d017      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006cc8:	4a24      	ldr	r2, [pc, #144]	; (8006d5c <HAL_DMA_Init+0x2e8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d014      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006cce:	3214      	adds	r2, #20
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d011      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006cd4:	3214      	adds	r2, #20
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d00e      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006cda:	3214      	adds	r2, #20
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00b      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006ce0:	3214      	adds	r2, #20
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d008      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006ce6:	3214      	adds	r2, #20
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d005      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006cec:	3214      	adds	r2, #20
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d002      	beq.n	8006cf8 <HAL_DMA_Init+0x284>
 8006cf2:	3214      	adds	r2, #20
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d119      	bne.n	8006d2c <HAL_DMA_Init+0x2b8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	2500      	movs	r5, #0
 8006cfc:	f7ff fe3a 	bl	8006974 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006d00:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006d02:	6e22      	ldr	r2, [r4, #96]	; 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006d04:	2b80      	cmp	r3, #128	; 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006d06:	bf04      	itt	eq
 8006d08:	2300      	moveq	r3, #0
 8006d0a:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006d0c:	6863      	ldr	r3, [r4, #4]
 8006d0e:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006d10:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006d12:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006d14:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d16:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
 8006d1a:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006d1c:	d868      	bhi.n	8006df0 <HAL_DMA_Init+0x37c>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006d1e:	f7ff fe71 	bl	8006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006d22:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006d24:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d26:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8006d2a:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d2c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006d2e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d30:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8006d32:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8006d36:	e036      	b.n	8006da6 <HAL_DMA_Init+0x332>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d38:	f7fe fe50 	bl	80059dc <HAL_GetTick>
 8006d3c:	1b80      	subs	r0, r0, r6
 8006d3e:	2805      	cmp	r0, #5
 8006d40:	f67f af3b 	bls.w	8006bba <HAL_DMA_Init+0x146>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d44:	2320      	movs	r3, #32
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006d46:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8006d4e:	2001      	movs	r0, #1
 8006d50:	e029      	b.n	8006da6 <HAL_DMA_Init+0x332>
 8006d52:	bf00      	nop
 8006d54:	40020010 	.word	0x40020010
 8006d58:	40020028 	.word	0x40020028
 8006d5c:	58025408 	.word	0x58025408
 8006d60:	a7fdabf8 	.word	0xa7fdabf8
 8006d64:	fe10803f 	.word	0xfe10803f
 8006d68:	5c001000 	.word	0x5c001000
 8006d6c:	c3c0003f 	.word	0xc3c0003f
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d70:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8006d74:	d118      	bne.n	8006da8 <HAL_DMA_Init+0x334>
    switch (hdma->Init.FIFOThreshold)
 8006d76:	2a03      	cmp	r2, #3
 8006d78:	f63f af6b 	bhi.w	8006c52 <HAL_DMA_Init+0x1de>
 8006d7c:	a001      	add	r0, pc, #4	; (adr r0, 8006d84 <HAL_DMA_Init+0x310>)
 8006d7e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8006d82:	bf00      	nop
 8006d84:	08006d9d 	.word	0x08006d9d
 8006d88:	08006c4d 	.word	0x08006c4d
 8006d8c:	08006d9d 	.word	0x08006d9d
 8006d90:	08006d95 	.word	0x08006d95
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d94:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 8006d98:	f47f af5b 	bne.w	8006c52 <HAL_DMA_Init+0x1de>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006d9c:	2340      	movs	r3, #64	; 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8006d9e:	2001      	movs	r0, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006da0:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8006da2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8006da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 8006da8:	2a02      	cmp	r2, #2
 8006daa:	d9f7      	bls.n	8006d9c <HAL_DMA_Init+0x328>
 8006dac:	2a03      	cmp	r2, #3
 8006dae:	e74c      	b.n	8006c4a <HAL_DMA_Init+0x1d6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006db0:	4a11      	ldr	r2, [pc, #68]	; (8006df8 <HAL_DMA_Init+0x384>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	f43f ae9c 	beq.w	8006af0 <HAL_DMA_Init+0x7c>
 8006db8:	3214      	adds	r2, #20
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	f43f ae98 	beq.w	8006af0 <HAL_DMA_Init+0x7c>
 8006dc0:	3214      	adds	r2, #20
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	f43f ae94 	beq.w	8006af0 <HAL_DMA_Init+0x7c>
 8006dc8:	3214      	adds	r2, #20
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	f43f ae90 	beq.w	8006af0 <HAL_DMA_Init+0x7c>
 8006dd0:	3214      	adds	r2, #20
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	f43f ae8c 	beq.w	8006af0 <HAL_DMA_Init+0x7c>
 8006dd8:	3214      	adds	r2, #20
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	f43f ae88 	beq.w	8006af0 <HAL_DMA_Init+0x7c>
 8006de0:	3214      	adds	r2, #20
 8006de2:	4293      	cmp	r3, r2
 8006de4:	f43f ae84 	beq.w	8006af0 <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006de8:	2340      	movs	r3, #64	; 0x40
 8006dea:	e7ac      	b.n	8006d46 <HAL_DMA_Init+0x2d2>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006dec:	2010      	movs	r0, #16
 8006dee:	e693      	b.n	8006b18 <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 8006df0:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006df4:	6765      	str	r5, [r4, #116]	; 0x74
 8006df6:	e799      	b.n	8006d2c <HAL_DMA_Init+0x2b8>
 8006df8:	5802541c 	.word	0x5802541c

08006dfc <HAL_DMA_Start_IT>:
{
 8006dfc:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 8006dfe:	4604      	mov	r4, r0
 8006e00:	2800      	cmp	r0, #0
 8006e02:	f000 810d 	beq.w	8007020 <HAL_DMA_Start_IT+0x224>
  __HAL_LOCK(hdma);
 8006e06:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8006e0a:	2801      	cmp	r0, #1
 8006e0c:	f000 810a 	beq.w	8007024 <HAL_DMA_Start_IT+0x228>
 8006e10:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8006e12:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
 8006e16:	4285      	cmp	r5, r0
  __HAL_LOCK(hdma);
 8006e18:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 8006e1c:	f04f 0500 	mov.w	r5, #0
  if(HAL_DMA_STATE_READY == hdma->State)
 8006e20:	f040 80f8 	bne.w	8007014 <HAL_DMA_Start_IT+0x218>
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e24:	2002      	movs	r0, #2
 8006e26:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e2a:	6565      	str	r5, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8006e2c:	6820      	ldr	r0, [r4, #0]
 8006e2e:	4d7e      	ldr	r5, [pc, #504]	; (8007028 <HAL_DMA_Start_IT+0x22c>)
 8006e30:	42a8      	cmp	r0, r5
 8006e32:	d01e      	beq.n	8006e72 <HAL_DMA_Start_IT+0x76>
 8006e34:	4e7d      	ldr	r6, [pc, #500]	; (800702c <HAL_DMA_Start_IT+0x230>)
 8006e36:	42b0      	cmp	r0, r6
 8006e38:	d01b      	beq.n	8006e72 <HAL_DMA_Start_IT+0x76>
 8006e3a:	3618      	adds	r6, #24
 8006e3c:	42b0      	cmp	r0, r6
 8006e3e:	d018      	beq.n	8006e72 <HAL_DMA_Start_IT+0x76>
 8006e40:	3618      	adds	r6, #24
 8006e42:	42b0      	cmp	r0, r6
 8006e44:	d015      	beq.n	8006e72 <HAL_DMA_Start_IT+0x76>
 8006e46:	3618      	adds	r6, #24
 8006e48:	42b0      	cmp	r0, r6
 8006e4a:	d012      	beq.n	8006e72 <HAL_DMA_Start_IT+0x76>
 8006e4c:	3618      	adds	r6, #24
 8006e4e:	42b0      	cmp	r0, r6
 8006e50:	d00f      	beq.n	8006e72 <HAL_DMA_Start_IT+0x76>
 8006e52:	3618      	adds	r6, #24
 8006e54:	42b0      	cmp	r0, r6
 8006e56:	d00c      	beq.n	8006e72 <HAL_DMA_Start_IT+0x76>
 8006e58:	3618      	adds	r6, #24
 8006e5a:	42b0      	cmp	r0, r6
 8006e5c:	d009      	beq.n	8006e72 <HAL_DMA_Start_IT+0x76>
 8006e5e:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8006e62:	42b0      	cmp	r0, r6
 8006e64:	d005      	beq.n	8006e72 <HAL_DMA_Start_IT+0x76>
 8006e66:	3618      	adds	r6, #24
 8006e68:	42b0      	cmp	r0, r6
 8006e6a:	d002      	beq.n	8006e72 <HAL_DMA_Start_IT+0x76>
 8006e6c:	3618      	adds	r6, #24
 8006e6e:	42b0      	cmp	r0, r6
 8006e70:	d0ff      	beq.n	8006e72 <HAL_DMA_Start_IT+0x76>
 8006e72:	6806      	ldr	r6, [r0, #0]
 8006e74:	f026 0601 	bic.w	r6, r6, #1
 8006e78:	6006      	str	r6, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f7ff fc6a 	bl	8006754 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006e84:	42ab      	cmp	r3, r5
 8006e86:	d053      	beq.n	8006f30 <HAL_DMA_Start_IT+0x134>
 8006e88:	4a68      	ldr	r2, [pc, #416]	; (800702c <HAL_DMA_Start_IT+0x230>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d050      	beq.n	8006f30 <HAL_DMA_Start_IT+0x134>
 8006e8e:	3218      	adds	r2, #24
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d04d      	beq.n	8006f30 <HAL_DMA_Start_IT+0x134>
 8006e94:	3218      	adds	r2, #24
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d04a      	beq.n	8006f30 <HAL_DMA_Start_IT+0x134>
 8006e9a:	3218      	adds	r2, #24
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d047      	beq.n	8006f30 <HAL_DMA_Start_IT+0x134>
 8006ea0:	3218      	adds	r2, #24
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d044      	beq.n	8006f30 <HAL_DMA_Start_IT+0x134>
 8006ea6:	3218      	adds	r2, #24
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d041      	beq.n	8006f30 <HAL_DMA_Start_IT+0x134>
 8006eac:	3218      	adds	r2, #24
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d03e      	beq.n	8006f30 <HAL_DMA_Start_IT+0x134>
 8006eb2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d03a      	beq.n	8006f30 <HAL_DMA_Start_IT+0x134>
 8006eba:	3218      	adds	r2, #24
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d037      	beq.n	8006f30 <HAL_DMA_Start_IT+0x134>
 8006ec0:	3218      	adds	r2, #24
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d034      	beq.n	8006f30 <HAL_DMA_Start_IT+0x134>
 8006ec6:	3218      	adds	r2, #24
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d031      	beq.n	8006f30 <HAL_DMA_Start_IT+0x134>
 8006ecc:	3218      	adds	r2, #24
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d02e      	beq.n	8006f30 <HAL_DMA_Start_IT+0x134>
 8006ed2:	3218      	adds	r2, #24
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d02b      	beq.n	8006f30 <HAL_DMA_Start_IT+0x134>
 8006ed8:	3218      	adds	r2, #24
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d028      	beq.n	8006f30 <HAL_DMA_Start_IT+0x134>
 8006ede:	3218      	adds	r2, #24
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d025      	beq.n	8006f30 <HAL_DMA_Start_IT+0x134>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	f022 020e 	bic.w	r2, r2, #14
 8006eea:	f042 020a 	orr.w	r2, r2, #10
 8006eee:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8006ef0:	2900      	cmp	r1, #0
 8006ef2:	d156      	bne.n	8006fa2 <HAL_DMA_Start_IT+0x1a6>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ef4:	4a4e      	ldr	r2, [pc, #312]	; (8007030 <HAL_DMA_Start_IT+0x234>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d027      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006efa:	4a4e      	ldr	r2, [pc, #312]	; (8007034 <HAL_DMA_Start_IT+0x238>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d024      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006f00:	3214      	adds	r2, #20
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d021      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006f06:	3214      	adds	r2, #20
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d01e      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006f0c:	3214      	adds	r2, #20
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d01b      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006f12:	3214      	adds	r2, #20
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d018      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006f18:	3214      	adds	r2, #20
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d015      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006f1e:	3214      	adds	r2, #20
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d012      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
    __HAL_DMA_ENABLE(hdma);
 8006f24:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f26:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8006f28:	f042 0201 	orr.w	r2, r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]
}
 8006f2e:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	f022 021e 	bic.w	r2, r2, #30
 8006f36:	f042 0216 	orr.w	r2, r2, #22
 8006f3a:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8006f3c:	b119      	cbz	r1, 8006f46 <HAL_DMA_Start_IT+0x14a>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	f042 0208 	orr.w	r2, r2, #8
 8006f44:	601a      	str	r2, [r3, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f46:	42ab      	cmp	r3, r5
 8006f48:	d130      	bne.n	8006fac <HAL_DMA_Start_IT+0x1b0>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006f4a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006f4c:	6811      	ldr	r1, [r2, #0]
 8006f4e:	03c9      	lsls	r1, r1, #15
 8006f50:	d45b      	bmi.n	800700a <HAL_DMA_Start_IT+0x20e>
      if(hdma->DMAmuxRequestGen != 0U)
 8006f52:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006f54:	b11a      	cbz	r2, 8006f5e <HAL_DMA_Start_IT+0x162>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006f56:	6811      	ldr	r1, [r2, #0]
 8006f58:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006f5c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8006f5e:	42ab      	cmp	r3, r5
 8006f60:	d0e0      	beq.n	8006f24 <HAL_DMA_Start_IT+0x128>
 8006f62:	4a32      	ldr	r2, [pc, #200]	; (800702c <HAL_DMA_Start_IT+0x230>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d0dd      	beq.n	8006f24 <HAL_DMA_Start_IT+0x128>
 8006f68:	3218      	adds	r2, #24
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d0da      	beq.n	8006f24 <HAL_DMA_Start_IT+0x128>
 8006f6e:	3218      	adds	r2, #24
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d0d7      	beq.n	8006f24 <HAL_DMA_Start_IT+0x128>
 8006f74:	3218      	adds	r2, #24
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d0d4      	beq.n	8006f24 <HAL_DMA_Start_IT+0x128>
 8006f7a:	3218      	adds	r2, #24
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d0d1      	beq.n	8006f24 <HAL_DMA_Start_IT+0x128>
 8006f80:	3218      	adds	r2, #24
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d0ce      	beq.n	8006f24 <HAL_DMA_Start_IT+0x128>
 8006f86:	3218      	adds	r2, #24
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d0cb      	beq.n	8006f24 <HAL_DMA_Start_IT+0x128>
 8006f8c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d0c7      	beq.n	8006f24 <HAL_DMA_Start_IT+0x128>
 8006f94:	3218      	adds	r2, #24
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d0c4      	beq.n	8006f24 <HAL_DMA_Start_IT+0x128>
 8006f9a:	3218      	adds	r2, #24
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d0c1      	beq.n	8006f24 <HAL_DMA_Start_IT+0x128>
 8006fa0:	e7c0      	b.n	8006f24 <HAL_DMA_Start_IT+0x128>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	f042 0204 	orr.w	r2, r2, #4
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	e7a3      	b.n	8006ef4 <HAL_DMA_Start_IT+0xf8>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fac:	4a1f      	ldr	r2, [pc, #124]	; (800702c <HAL_DMA_Start_IT+0x230>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d0cb      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006fb2:	3218      	adds	r2, #24
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d0c8      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006fb8:	3218      	adds	r2, #24
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d0c5      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006fbe:	3218      	adds	r2, #24
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d0c2      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006fc4:	3218      	adds	r2, #24
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d0bf      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006fca:	3218      	adds	r2, #24
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d0bc      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006fd0:	3218      	adds	r2, #24
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d0b9      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006fd6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d0b5      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006fde:	3218      	adds	r2, #24
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d0b2      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006fe4:	3218      	adds	r2, #24
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d0af      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006fea:	3218      	adds	r2, #24
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d0ac      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006ff0:	3218      	adds	r2, #24
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d0a9      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006ff6:	3218      	adds	r2, #24
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d0a6      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8006ffc:	3218      	adds	r2, #24
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d0a3      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8007002:	3218      	adds	r2, #24
 8007004:	4293      	cmp	r3, r2
 8007006:	d0a0      	beq.n	8006f4a <HAL_DMA_Start_IT+0x14e>
 8007008:	e774      	b.n	8006ef4 <HAL_DMA_Start_IT+0xf8>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800700a:	6811      	ldr	r1, [r2, #0]
 800700c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007010:	6011      	str	r1, [r2, #0]
 8007012:	e79e      	b.n	8006f52 <HAL_DMA_Start_IT+0x156>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007014:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8007018:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800701c:	6563      	str	r3, [r4, #84]	; 0x54
 800701e:	e786      	b.n	8006f2e <HAL_DMA_Start_IT+0x132>
    return HAL_ERROR;
 8007020:	2001      	movs	r0, #1
 8007022:	e784      	b.n	8006f2e <HAL_DMA_Start_IT+0x132>
  __HAL_LOCK(hdma);
 8007024:	2002      	movs	r0, #2
 8007026:	e782      	b.n	8006f2e <HAL_DMA_Start_IT+0x132>
 8007028:	40020010 	.word	0x40020010
 800702c:	40020028 	.word	0x40020028
 8007030:	58025408 	.word	0x58025408
 8007034:	5802541c 	.word	0x5802541c

08007038 <HAL_DMA_Abort>:
{
 8007038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800703c:	f7fe fcce 	bl	80059dc <HAL_GetTick>
 8007040:	4607      	mov	r7, r0
  if(hdma == NULL)
 8007042:	b145      	cbz	r5, 8007056 <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007044:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8007048:	2b02      	cmp	r3, #2
 800704a:	d006      	beq.n	800705a <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800704c:	2380      	movs	r3, #128	; 0x80
 800704e:	656b      	str	r3, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8007050:	2300      	movs	r3, #0
 8007052:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8007056:	2001      	movs	r0, #1
 8007058:	e162      	b.n	8007320 <HAL_DMA_Abort+0x2e8>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800705a:	682c      	ldr	r4, [r5, #0]
 800705c:	4ecc      	ldr	r6, [pc, #816]	; (8007390 <HAL_DMA_Abort+0x358>)
 800705e:	42b4      	cmp	r4, r6
 8007060:	f000 80d3 	beq.w	800720a <HAL_DMA_Abort+0x1d2>
 8007064:	4bcb      	ldr	r3, [pc, #812]	; (8007394 <HAL_DMA_Abort+0x35c>)
 8007066:	429c      	cmp	r4, r3
 8007068:	f000 80cf 	beq.w	800720a <HAL_DMA_Abort+0x1d2>
 800706c:	3318      	adds	r3, #24
 800706e:	429c      	cmp	r4, r3
 8007070:	f000 80cb 	beq.w	800720a <HAL_DMA_Abort+0x1d2>
 8007074:	3318      	adds	r3, #24
 8007076:	429c      	cmp	r4, r3
 8007078:	f000 80c7 	beq.w	800720a <HAL_DMA_Abort+0x1d2>
 800707c:	3318      	adds	r3, #24
 800707e:	429c      	cmp	r4, r3
 8007080:	f000 80c3 	beq.w	800720a <HAL_DMA_Abort+0x1d2>
 8007084:	3318      	adds	r3, #24
 8007086:	429c      	cmp	r4, r3
 8007088:	f000 80bf 	beq.w	800720a <HAL_DMA_Abort+0x1d2>
 800708c:	3318      	adds	r3, #24
 800708e:	429c      	cmp	r4, r3
 8007090:	f000 80bb 	beq.w	800720a <HAL_DMA_Abort+0x1d2>
 8007094:	3318      	adds	r3, #24
 8007096:	429c      	cmp	r4, r3
 8007098:	f000 80b7 	beq.w	800720a <HAL_DMA_Abort+0x1d2>
 800709c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80070a0:	429c      	cmp	r4, r3
 80070a2:	f000 80b2 	beq.w	800720a <HAL_DMA_Abort+0x1d2>
 80070a6:	3318      	adds	r3, #24
 80070a8:	429c      	cmp	r4, r3
 80070aa:	f000 80ae 	beq.w	800720a <HAL_DMA_Abort+0x1d2>
 80070ae:	3318      	adds	r3, #24
 80070b0:	429c      	cmp	r4, r3
 80070b2:	f000 80aa 	beq.w	800720a <HAL_DMA_Abort+0x1d2>
 80070b6:	3318      	adds	r3, #24
 80070b8:	429c      	cmp	r4, r3
 80070ba:	f000 80a6 	beq.w	800720a <HAL_DMA_Abort+0x1d2>
 80070be:	3318      	adds	r3, #24
 80070c0:	429c      	cmp	r4, r3
 80070c2:	f000 80a2 	beq.w	800720a <HAL_DMA_Abort+0x1d2>
 80070c6:	3318      	adds	r3, #24
 80070c8:	429c      	cmp	r4, r3
 80070ca:	f000 809e 	beq.w	800720a <HAL_DMA_Abort+0x1d2>
 80070ce:	3318      	adds	r3, #24
 80070d0:	429c      	cmp	r4, r3
 80070d2:	f000 809a 	beq.w	800720a <HAL_DMA_Abort+0x1d2>
 80070d6:	3318      	adds	r3, #24
 80070d8:	429c      	cmp	r4, r3
 80070da:	f000 8096 	beq.w	800720a <HAL_DMA_Abort+0x1d2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	f023 030e 	bic.w	r3, r3, #14
 80070e4:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070e6:	4bac      	ldr	r3, [pc, #688]	; (8007398 <HAL_DMA_Abort+0x360>)
 80070e8:	429c      	cmp	r4, r3
 80070ea:	f000 80c7 	beq.w	800727c <HAL_DMA_Abort+0x244>
 80070ee:	3314      	adds	r3, #20
 80070f0:	429c      	cmp	r4, r3
 80070f2:	f000 80c3 	beq.w	800727c <HAL_DMA_Abort+0x244>
 80070f6:	3314      	adds	r3, #20
 80070f8:	429c      	cmp	r4, r3
 80070fa:	f000 80bf 	beq.w	800727c <HAL_DMA_Abort+0x244>
 80070fe:	3314      	adds	r3, #20
 8007100:	429c      	cmp	r4, r3
 8007102:	f000 80bb 	beq.w	800727c <HAL_DMA_Abort+0x244>
 8007106:	3314      	adds	r3, #20
 8007108:	429c      	cmp	r4, r3
 800710a:	f000 80b7 	beq.w	800727c <HAL_DMA_Abort+0x244>
 800710e:	3314      	adds	r3, #20
 8007110:	429c      	cmp	r4, r3
 8007112:	f000 80b3 	beq.w	800727c <HAL_DMA_Abort+0x244>
 8007116:	3314      	adds	r3, #20
 8007118:	429c      	cmp	r4, r3
 800711a:	f000 80af 	beq.w	800727c <HAL_DMA_Abort+0x244>
 800711e:	3314      	adds	r3, #20
 8007120:	429c      	cmp	r4, r3
 8007122:	f000 80ab 	beq.w	800727c <HAL_DMA_Abort+0x244>
    __HAL_DMA_DISABLE(hdma);
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	f023 0301 	bic.w	r3, r3, #1
 800712c:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	07db      	lsls	r3, r3, #31
 8007132:	f100 80d5 	bmi.w	80072e0 <HAL_DMA_Abort+0x2a8>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007136:	682b      	ldr	r3, [r5, #0]
 8007138:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800713a:	42b3      	cmp	r3, r6
 800713c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800713e:	f002 021f 	and.w	r2, r2, #31
 8007142:	f000 80dc 	beq.w	80072fe <HAL_DMA_Abort+0x2c6>
 8007146:	4993      	ldr	r1, [pc, #588]	; (8007394 <HAL_DMA_Abort+0x35c>)
 8007148:	428b      	cmp	r3, r1
 800714a:	f000 80d8 	beq.w	80072fe <HAL_DMA_Abort+0x2c6>
 800714e:	3118      	adds	r1, #24
 8007150:	428b      	cmp	r3, r1
 8007152:	f000 80d4 	beq.w	80072fe <HAL_DMA_Abort+0x2c6>
 8007156:	3118      	adds	r1, #24
 8007158:	428b      	cmp	r3, r1
 800715a:	f000 80d0 	beq.w	80072fe <HAL_DMA_Abort+0x2c6>
 800715e:	3118      	adds	r1, #24
 8007160:	428b      	cmp	r3, r1
 8007162:	f000 80cc 	beq.w	80072fe <HAL_DMA_Abort+0x2c6>
 8007166:	3118      	adds	r1, #24
 8007168:	428b      	cmp	r3, r1
 800716a:	f000 80c8 	beq.w	80072fe <HAL_DMA_Abort+0x2c6>
 800716e:	3118      	adds	r1, #24
 8007170:	428b      	cmp	r3, r1
 8007172:	f000 80c4 	beq.w	80072fe <HAL_DMA_Abort+0x2c6>
 8007176:	3118      	adds	r1, #24
 8007178:	428b      	cmp	r3, r1
 800717a:	f000 80c0 	beq.w	80072fe <HAL_DMA_Abort+0x2c6>
 800717e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007182:	428b      	cmp	r3, r1
 8007184:	f000 80bb 	beq.w	80072fe <HAL_DMA_Abort+0x2c6>
 8007188:	3118      	adds	r1, #24
 800718a:	428b      	cmp	r3, r1
 800718c:	f000 80b7 	beq.w	80072fe <HAL_DMA_Abort+0x2c6>
 8007190:	3118      	adds	r1, #24
 8007192:	428b      	cmp	r3, r1
 8007194:	f000 80b3 	beq.w	80072fe <HAL_DMA_Abort+0x2c6>
 8007198:	3118      	adds	r1, #24
 800719a:	428b      	cmp	r3, r1
 800719c:	f000 80af 	beq.w	80072fe <HAL_DMA_Abort+0x2c6>
 80071a0:	3118      	adds	r1, #24
 80071a2:	428b      	cmp	r3, r1
 80071a4:	f000 80ab 	beq.w	80072fe <HAL_DMA_Abort+0x2c6>
 80071a8:	3118      	adds	r1, #24
 80071aa:	428b      	cmp	r3, r1
 80071ac:	f000 80a7 	beq.w	80072fe <HAL_DMA_Abort+0x2c6>
 80071b0:	3118      	adds	r1, #24
 80071b2:	428b      	cmp	r3, r1
 80071b4:	f000 80a3 	beq.w	80072fe <HAL_DMA_Abort+0x2c6>
 80071b8:	3118      	adds	r1, #24
 80071ba:	428b      	cmp	r3, r1
 80071bc:	f000 809f 	beq.w	80072fe <HAL_DMA_Abort+0x2c6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80071c0:	2101      	movs	r1, #1
 80071c2:	fa01 f202 	lsl.w	r2, r1, r2
 80071c6:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071c8:	4a73      	ldr	r2, [pc, #460]	; (8007398 <HAL_DMA_Abort+0x360>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	f000 809d 	beq.w	800730a <HAL_DMA_Abort+0x2d2>
 80071d0:	3214      	adds	r2, #20
 80071d2:	4293      	cmp	r3, r2
 80071d4:	f000 8099 	beq.w	800730a <HAL_DMA_Abort+0x2d2>
 80071d8:	3214      	adds	r2, #20
 80071da:	4293      	cmp	r3, r2
 80071dc:	f000 8095 	beq.w	800730a <HAL_DMA_Abort+0x2d2>
 80071e0:	3214      	adds	r2, #20
 80071e2:	4293      	cmp	r3, r2
 80071e4:	f000 8091 	beq.w	800730a <HAL_DMA_Abort+0x2d2>
 80071e8:	3214      	adds	r2, #20
 80071ea:	4293      	cmp	r3, r2
 80071ec:	f000 808d 	beq.w	800730a <HAL_DMA_Abort+0x2d2>
 80071f0:	3214      	adds	r2, #20
 80071f2:	4293      	cmp	r3, r2
 80071f4:	f000 8089 	beq.w	800730a <HAL_DMA_Abort+0x2d2>
 80071f8:	3214      	adds	r2, #20
 80071fa:	4293      	cmp	r3, r2
 80071fc:	f000 8085 	beq.w	800730a <HAL_DMA_Abort+0x2d2>
 8007200:	3214      	adds	r2, #20
 8007202:	4293      	cmp	r3, r2
 8007204:	f040 8086 	bne.w	8007314 <HAL_DMA_Abort+0x2dc>
 8007208:	e07f      	b.n	800730a <HAL_DMA_Abort+0x2d2>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800720a:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800720c:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800720e:	f023 031e 	bic.w	r3, r3, #30
 8007212:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007214:	6963      	ldr	r3, [r4, #20]
 8007216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800721a:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800721c:	d02e      	beq.n	800727c <HAL_DMA_Abort+0x244>
 800721e:	4b5d      	ldr	r3, [pc, #372]	; (8007394 <HAL_DMA_Abort+0x35c>)
 8007220:	429c      	cmp	r4, r3
 8007222:	d02b      	beq.n	800727c <HAL_DMA_Abort+0x244>
 8007224:	3318      	adds	r3, #24
 8007226:	429c      	cmp	r4, r3
 8007228:	d028      	beq.n	800727c <HAL_DMA_Abort+0x244>
 800722a:	3318      	adds	r3, #24
 800722c:	429c      	cmp	r4, r3
 800722e:	d025      	beq.n	800727c <HAL_DMA_Abort+0x244>
 8007230:	3318      	adds	r3, #24
 8007232:	429c      	cmp	r4, r3
 8007234:	d022      	beq.n	800727c <HAL_DMA_Abort+0x244>
 8007236:	3318      	adds	r3, #24
 8007238:	429c      	cmp	r4, r3
 800723a:	d01f      	beq.n	800727c <HAL_DMA_Abort+0x244>
 800723c:	3318      	adds	r3, #24
 800723e:	429c      	cmp	r4, r3
 8007240:	d01c      	beq.n	800727c <HAL_DMA_Abort+0x244>
 8007242:	3318      	adds	r3, #24
 8007244:	429c      	cmp	r4, r3
 8007246:	d019      	beq.n	800727c <HAL_DMA_Abort+0x244>
 8007248:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800724c:	429c      	cmp	r4, r3
 800724e:	d015      	beq.n	800727c <HAL_DMA_Abort+0x244>
 8007250:	3318      	adds	r3, #24
 8007252:	429c      	cmp	r4, r3
 8007254:	d012      	beq.n	800727c <HAL_DMA_Abort+0x244>
 8007256:	3318      	adds	r3, #24
 8007258:	429c      	cmp	r4, r3
 800725a:	d00f      	beq.n	800727c <HAL_DMA_Abort+0x244>
 800725c:	3318      	adds	r3, #24
 800725e:	429c      	cmp	r4, r3
 8007260:	d00c      	beq.n	800727c <HAL_DMA_Abort+0x244>
 8007262:	3318      	adds	r3, #24
 8007264:	429c      	cmp	r4, r3
 8007266:	d009      	beq.n	800727c <HAL_DMA_Abort+0x244>
 8007268:	3318      	adds	r3, #24
 800726a:	429c      	cmp	r4, r3
 800726c:	d006      	beq.n	800727c <HAL_DMA_Abort+0x244>
 800726e:	3318      	adds	r3, #24
 8007270:	429c      	cmp	r4, r3
 8007272:	d003      	beq.n	800727c <HAL_DMA_Abort+0x244>
 8007274:	3318      	adds	r3, #24
 8007276:	429c      	cmp	r4, r3
 8007278:	f47f af35 	bne.w	80070e6 <HAL_DMA_Abort+0xae>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800727c:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    __HAL_DMA_DISABLE(hdma);
 800727e:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007280:	6813      	ldr	r3, [r2, #0]
 8007282:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007286:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8007288:	f43f af4d 	beq.w	8007126 <HAL_DMA_Abort+0xee>
 800728c:	4b41      	ldr	r3, [pc, #260]	; (8007394 <HAL_DMA_Abort+0x35c>)
 800728e:	429c      	cmp	r4, r3
 8007290:	f43f af49 	beq.w	8007126 <HAL_DMA_Abort+0xee>
 8007294:	3318      	adds	r3, #24
 8007296:	429c      	cmp	r4, r3
 8007298:	f43f af45 	beq.w	8007126 <HAL_DMA_Abort+0xee>
 800729c:	3318      	adds	r3, #24
 800729e:	429c      	cmp	r4, r3
 80072a0:	f43f af41 	beq.w	8007126 <HAL_DMA_Abort+0xee>
 80072a4:	3318      	adds	r3, #24
 80072a6:	429c      	cmp	r4, r3
 80072a8:	f43f af3d 	beq.w	8007126 <HAL_DMA_Abort+0xee>
 80072ac:	3318      	adds	r3, #24
 80072ae:	429c      	cmp	r4, r3
 80072b0:	f43f af39 	beq.w	8007126 <HAL_DMA_Abort+0xee>
 80072b4:	3318      	adds	r3, #24
 80072b6:	429c      	cmp	r4, r3
 80072b8:	f43f af35 	beq.w	8007126 <HAL_DMA_Abort+0xee>
 80072bc:	3318      	adds	r3, #24
 80072be:	429c      	cmp	r4, r3
 80072c0:	f43f af31 	beq.w	8007126 <HAL_DMA_Abort+0xee>
 80072c4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072c8:	429c      	cmp	r4, r3
 80072ca:	f43f af2c 	beq.w	8007126 <HAL_DMA_Abort+0xee>
 80072ce:	3318      	adds	r3, #24
 80072d0:	429c      	cmp	r4, r3
 80072d2:	f43f af28 	beq.w	8007126 <HAL_DMA_Abort+0xee>
 80072d6:	3318      	adds	r3, #24
 80072d8:	429c      	cmp	r4, r3
 80072da:	f43f af24 	beq.w	8007126 <HAL_DMA_Abort+0xee>
 80072de:	e722      	b.n	8007126 <HAL_DMA_Abort+0xee>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072e0:	f7fe fb7c 	bl	80059dc <HAL_GetTick>
 80072e4:	1bc0      	subs	r0, r0, r7
 80072e6:	2805      	cmp	r0, #5
 80072e8:	f67f af21 	bls.w	800712e <HAL_DMA_Abort+0xf6>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072ec:	2320      	movs	r3, #32
 80072ee:	656b      	str	r3, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80072f0:	2300      	movs	r3, #0
 80072f2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 80072f6:	2303      	movs	r3, #3
 80072f8:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 80072fc:	e6ab      	b.n	8007056 <HAL_DMA_Abort+0x1e>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072fe:	213f      	movs	r1, #63	; 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007300:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007302:	fa01 f202 	lsl.w	r2, r1, r2
 8007306:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007308:	d10b      	bne.n	8007322 <HAL_DMA_Abort+0x2ea>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800730a:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	; 0x64
 800730e:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8007310:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8007312:	bbab      	cbnz	r3, 8007380 <HAL_DMA_Abort+0x348>
    __HAL_UNLOCK(hdma);
 8007314:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8007316:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8007318:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800731c:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8007320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007322:	4a1c      	ldr	r2, [pc, #112]	; (8007394 <HAL_DMA_Abort+0x35c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d0f0      	beq.n	800730a <HAL_DMA_Abort+0x2d2>
 8007328:	3218      	adds	r2, #24
 800732a:	4293      	cmp	r3, r2
 800732c:	d0ed      	beq.n	800730a <HAL_DMA_Abort+0x2d2>
 800732e:	3218      	adds	r2, #24
 8007330:	4293      	cmp	r3, r2
 8007332:	d0ea      	beq.n	800730a <HAL_DMA_Abort+0x2d2>
 8007334:	3218      	adds	r2, #24
 8007336:	4293      	cmp	r3, r2
 8007338:	d0e7      	beq.n	800730a <HAL_DMA_Abort+0x2d2>
 800733a:	3218      	adds	r2, #24
 800733c:	4293      	cmp	r3, r2
 800733e:	d0e4      	beq.n	800730a <HAL_DMA_Abort+0x2d2>
 8007340:	3218      	adds	r2, #24
 8007342:	4293      	cmp	r3, r2
 8007344:	d0e1      	beq.n	800730a <HAL_DMA_Abort+0x2d2>
 8007346:	3218      	adds	r2, #24
 8007348:	4293      	cmp	r3, r2
 800734a:	d0de      	beq.n	800730a <HAL_DMA_Abort+0x2d2>
 800734c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007350:	4293      	cmp	r3, r2
 8007352:	d0da      	beq.n	800730a <HAL_DMA_Abort+0x2d2>
 8007354:	3218      	adds	r2, #24
 8007356:	4293      	cmp	r3, r2
 8007358:	d0d7      	beq.n	800730a <HAL_DMA_Abort+0x2d2>
 800735a:	3218      	adds	r2, #24
 800735c:	4293      	cmp	r3, r2
 800735e:	d0d4      	beq.n	800730a <HAL_DMA_Abort+0x2d2>
 8007360:	3218      	adds	r2, #24
 8007362:	4293      	cmp	r3, r2
 8007364:	d0d1      	beq.n	800730a <HAL_DMA_Abort+0x2d2>
 8007366:	3218      	adds	r2, #24
 8007368:	4293      	cmp	r3, r2
 800736a:	d0ce      	beq.n	800730a <HAL_DMA_Abort+0x2d2>
 800736c:	3218      	adds	r2, #24
 800736e:	4293      	cmp	r3, r2
 8007370:	d0cb      	beq.n	800730a <HAL_DMA_Abort+0x2d2>
 8007372:	3218      	adds	r2, #24
 8007374:	4293      	cmp	r3, r2
 8007376:	d0c8      	beq.n	800730a <HAL_DMA_Abort+0x2d2>
 8007378:	3218      	adds	r2, #24
 800737a:	4293      	cmp	r3, r2
 800737c:	d0c5      	beq.n	800730a <HAL_DMA_Abort+0x2d2>
 800737e:	e723      	b.n	80071c8 <HAL_DMA_Abort+0x190>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007386:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007388:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800738c:	605a      	str	r2, [r3, #4]
 800738e:	e7c1      	b.n	8007314 <HAL_DMA_Abort+0x2dc>
 8007390:	40020010 	.word	0x40020010
 8007394:	40020028 	.word	0x40020028
 8007398:	58025408 	.word	0x58025408

0800739c <HAL_DMA_Abort_IT>:
{
 800739c:	b510      	push	{r4, lr}
  if(hdma == NULL)
 800739e:	b128      	cbz	r0, 80073ac <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073a0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d003      	beq.n	80073b0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073a8:	2380      	movs	r3, #128	; 0x80
 80073aa:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80073ac:	2001      	movs	r0, #1
 80073ae:	e07f      	b.n	80074b0 <HAL_DMA_Abort_IT+0x114>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073b0:	6803      	ldr	r3, [r0, #0]
 80073b2:	4a50      	ldr	r2, [pc, #320]	; (80074f4 <HAL_DMA_Abort_IT+0x158>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d052      	beq.n	800745e <HAL_DMA_Abort_IT+0xc2>
 80073b8:	494f      	ldr	r1, [pc, #316]	; (80074f8 <HAL_DMA_Abort_IT+0x15c>)
 80073ba:	428b      	cmp	r3, r1
 80073bc:	d04f      	beq.n	800745e <HAL_DMA_Abort_IT+0xc2>
 80073be:	3118      	adds	r1, #24
 80073c0:	428b      	cmp	r3, r1
 80073c2:	d04c      	beq.n	800745e <HAL_DMA_Abort_IT+0xc2>
 80073c4:	3118      	adds	r1, #24
 80073c6:	428b      	cmp	r3, r1
 80073c8:	d049      	beq.n	800745e <HAL_DMA_Abort_IT+0xc2>
 80073ca:	3118      	adds	r1, #24
 80073cc:	428b      	cmp	r3, r1
 80073ce:	d046      	beq.n	800745e <HAL_DMA_Abort_IT+0xc2>
 80073d0:	3118      	adds	r1, #24
 80073d2:	428b      	cmp	r3, r1
 80073d4:	d043      	beq.n	800745e <HAL_DMA_Abort_IT+0xc2>
 80073d6:	3118      	adds	r1, #24
 80073d8:	428b      	cmp	r3, r1
 80073da:	d040      	beq.n	800745e <HAL_DMA_Abort_IT+0xc2>
 80073dc:	3118      	adds	r1, #24
 80073de:	428b      	cmp	r3, r1
 80073e0:	d03d      	beq.n	800745e <HAL_DMA_Abort_IT+0xc2>
 80073e2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80073e6:	428b      	cmp	r3, r1
 80073e8:	d039      	beq.n	800745e <HAL_DMA_Abort_IT+0xc2>
 80073ea:	3118      	adds	r1, #24
 80073ec:	428b      	cmp	r3, r1
 80073ee:	d036      	beq.n	800745e <HAL_DMA_Abort_IT+0xc2>
 80073f0:	3118      	adds	r1, #24
 80073f2:	428b      	cmp	r3, r1
 80073f4:	d033      	beq.n	800745e <HAL_DMA_Abort_IT+0xc2>
 80073f6:	3118      	adds	r1, #24
 80073f8:	428b      	cmp	r3, r1
 80073fa:	d030      	beq.n	800745e <HAL_DMA_Abort_IT+0xc2>
 80073fc:	3118      	adds	r1, #24
 80073fe:	428b      	cmp	r3, r1
 8007400:	d02d      	beq.n	800745e <HAL_DMA_Abort_IT+0xc2>
 8007402:	3118      	adds	r1, #24
 8007404:	428b      	cmp	r3, r1
 8007406:	d02a      	beq.n	800745e <HAL_DMA_Abort_IT+0xc2>
 8007408:	3118      	adds	r1, #24
 800740a:	428b      	cmp	r3, r1
 800740c:	d027      	beq.n	800745e <HAL_DMA_Abort_IT+0xc2>
 800740e:	3118      	adds	r1, #24
 8007410:	428b      	cmp	r3, r1
 8007412:	d024      	beq.n	800745e <HAL_DMA_Abort_IT+0xc2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	f022 020e 	bic.w	r2, r2, #14
 800741a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	f022 0201 	bic.w	r2, r2, #1
 8007422:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007424:	4a35      	ldr	r2, [pc, #212]	; (80074fc <HAL_DMA_Abort_IT+0x160>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d143      	bne.n	80074b2 <HAL_DMA_Abort_IT+0x116>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800742a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800742c:	6813      	ldr	r3, [r2, #0]
 800742e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007432:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007434:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	; 0x58
 8007438:	f003 021f 	and.w	r2, r3, #31
 800743c:	2301      	movs	r3, #1
 800743e:	4093      	lsls	r3, r2
 8007440:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007442:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
 8007446:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8007448:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800744a:	2b00      	cmp	r3, #0
 800744c:	d046      	beq.n	80074dc <HAL_DMA_Abort_IT+0x140>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007454:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007456:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	; 0x70
 800745a:	605a      	str	r2, [r3, #4]
 800745c:	e03e      	b.n	80074dc <HAL_DMA_Abort_IT+0x140>
      hdma->State = HAL_DMA_STATE_ABORT;
 800745e:	2104      	movs	r1, #4
      __HAL_DMA_DISABLE(hdma);
 8007460:	4293      	cmp	r3, r2
      hdma->State = HAL_DMA_STATE_ABORT;
 8007462:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8007466:	d01e      	beq.n	80074a6 <HAL_DMA_Abort_IT+0x10a>
 8007468:	4a23      	ldr	r2, [pc, #140]	; (80074f8 <HAL_DMA_Abort_IT+0x15c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d01b      	beq.n	80074a6 <HAL_DMA_Abort_IT+0x10a>
 800746e:	3218      	adds	r2, #24
 8007470:	4293      	cmp	r3, r2
 8007472:	d018      	beq.n	80074a6 <HAL_DMA_Abort_IT+0x10a>
 8007474:	3218      	adds	r2, #24
 8007476:	4293      	cmp	r3, r2
 8007478:	d015      	beq.n	80074a6 <HAL_DMA_Abort_IT+0x10a>
 800747a:	3218      	adds	r2, #24
 800747c:	4293      	cmp	r3, r2
 800747e:	d012      	beq.n	80074a6 <HAL_DMA_Abort_IT+0x10a>
 8007480:	3218      	adds	r2, #24
 8007482:	4293      	cmp	r3, r2
 8007484:	d00f      	beq.n	80074a6 <HAL_DMA_Abort_IT+0x10a>
 8007486:	3218      	adds	r2, #24
 8007488:	4293      	cmp	r3, r2
 800748a:	d00c      	beq.n	80074a6 <HAL_DMA_Abort_IT+0x10a>
 800748c:	3218      	adds	r2, #24
 800748e:	4293      	cmp	r3, r2
 8007490:	d009      	beq.n	80074a6 <HAL_DMA_Abort_IT+0x10a>
 8007492:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007496:	4293      	cmp	r3, r2
 8007498:	d005      	beq.n	80074a6 <HAL_DMA_Abort_IT+0x10a>
 800749a:	3218      	adds	r2, #24
 800749c:	4293      	cmp	r3, r2
 800749e:	d002      	beq.n	80074a6 <HAL_DMA_Abort_IT+0x10a>
 80074a0:	3218      	adds	r2, #24
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d0ff      	beq.n	80074a6 <HAL_DMA_Abort_IT+0x10a>
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	f022 0201 	bic.w	r2, r2, #1
 80074ac:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80074ae:	2000      	movs	r0, #0
}
 80074b0:	bd10      	pop	{r4, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074b2:	4a13      	ldr	r2, [pc, #76]	; (8007500 <HAL_DMA_Abort_IT+0x164>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d0b8      	beq.n	800742a <HAL_DMA_Abort_IT+0x8e>
 80074b8:	3214      	adds	r2, #20
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d0b5      	beq.n	800742a <HAL_DMA_Abort_IT+0x8e>
 80074be:	3214      	adds	r2, #20
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d0b2      	beq.n	800742a <HAL_DMA_Abort_IT+0x8e>
 80074c4:	3214      	adds	r2, #20
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d0af      	beq.n	800742a <HAL_DMA_Abort_IT+0x8e>
 80074ca:	3214      	adds	r2, #20
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d0ac      	beq.n	800742a <HAL_DMA_Abort_IT+0x8e>
 80074d0:	3214      	adds	r2, #20
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d0a9      	beq.n	800742a <HAL_DMA_Abort_IT+0x8e>
 80074d6:	3214      	adds	r2, #20
 80074d8:	4293      	cmp	r3, r2
 80074da:	d0a6      	beq.n	800742a <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 80074dc:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80074de:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 80074e0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 80074e4:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 80074e6:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 80074ea:	b10b      	cbz	r3, 80074f0 <HAL_DMA_Abort_IT+0x154>
        hdma->XferAbortCallback(hdma);
 80074ec:	4798      	blx	r3
 80074ee:	e7de      	b.n	80074ae <HAL_DMA_Abort_IT+0x112>
  return HAL_OK;
 80074f0:	4618      	mov	r0, r3
 80074f2:	e7dd      	b.n	80074b0 <HAL_DMA_Abort_IT+0x114>
 80074f4:	40020010 	.word	0x40020010
 80074f8:	40020028 	.word	0x40020028
 80074fc:	58025408 	.word	0x58025408
 8007500:	5802541c 	.word	0x5802541c

08007504 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 8007504:	2300      	movs	r3, #0
{
 8007506:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 800750a:	9301      	str	r3, [sp, #4]
{
 800750c:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800750e:	4bb4      	ldr	r3, [pc, #720]	; (80077e0 <HAL_DMA_IRQHandler+0x2dc>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007510:	4eb4      	ldr	r6, [pc, #720]	; (80077e4 <HAL_DMA_IRQHandler+0x2e0>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8007512:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007514:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007516:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007518:	42b3      	cmp	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 800751a:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 800751e:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007522:	d047      	beq.n	80075b4 <HAL_DMA_IRQHandler+0xb0>
 8007524:	4ab0      	ldr	r2, [pc, #704]	; (80077e8 <HAL_DMA_IRQHandler+0x2e4>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d044      	beq.n	80075b4 <HAL_DMA_IRQHandler+0xb0>
 800752a:	3218      	adds	r2, #24
 800752c:	4293      	cmp	r3, r2
 800752e:	d041      	beq.n	80075b4 <HAL_DMA_IRQHandler+0xb0>
 8007530:	3218      	adds	r2, #24
 8007532:	4293      	cmp	r3, r2
 8007534:	d03e      	beq.n	80075b4 <HAL_DMA_IRQHandler+0xb0>
 8007536:	3218      	adds	r2, #24
 8007538:	4293      	cmp	r3, r2
 800753a:	d03b      	beq.n	80075b4 <HAL_DMA_IRQHandler+0xb0>
 800753c:	3218      	adds	r2, #24
 800753e:	4293      	cmp	r3, r2
 8007540:	d038      	beq.n	80075b4 <HAL_DMA_IRQHandler+0xb0>
 8007542:	3218      	adds	r2, #24
 8007544:	4293      	cmp	r3, r2
 8007546:	d035      	beq.n	80075b4 <HAL_DMA_IRQHandler+0xb0>
 8007548:	3218      	adds	r2, #24
 800754a:	4293      	cmp	r3, r2
 800754c:	d032      	beq.n	80075b4 <HAL_DMA_IRQHandler+0xb0>
 800754e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007552:	4293      	cmp	r3, r2
 8007554:	d02e      	beq.n	80075b4 <HAL_DMA_IRQHandler+0xb0>
 8007556:	3218      	adds	r2, #24
 8007558:	4293      	cmp	r3, r2
 800755a:	d02b      	beq.n	80075b4 <HAL_DMA_IRQHandler+0xb0>
 800755c:	3218      	adds	r2, #24
 800755e:	4293      	cmp	r3, r2
 8007560:	d028      	beq.n	80075b4 <HAL_DMA_IRQHandler+0xb0>
 8007562:	3218      	adds	r2, #24
 8007564:	4293      	cmp	r3, r2
 8007566:	d025      	beq.n	80075b4 <HAL_DMA_IRQHandler+0xb0>
 8007568:	3218      	adds	r2, #24
 800756a:	4293      	cmp	r3, r2
 800756c:	d022      	beq.n	80075b4 <HAL_DMA_IRQHandler+0xb0>
 800756e:	3218      	adds	r2, #24
 8007570:	4293      	cmp	r3, r2
 8007572:	d01f      	beq.n	80075b4 <HAL_DMA_IRQHandler+0xb0>
 8007574:	3218      	adds	r2, #24
 8007576:	4293      	cmp	r3, r2
 8007578:	d01c      	beq.n	80075b4 <HAL_DMA_IRQHandler+0xb0>
 800757a:	3218      	adds	r2, #24
 800757c:	4293      	cmp	r3, r2
 800757e:	d019      	beq.n	80075b4 <HAL_DMA_IRQHandler+0xb0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007580:	4a9a      	ldr	r2, [pc, #616]	; (80077ec <HAL_DMA_IRQHandler+0x2e8>)
 8007582:	4293      	cmp	r3, r2
 8007584:	f040 820a 	bne.w	800799c <HAL_DMA_IRQHandler+0x498>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007588:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800758a:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800758c:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800758e:	f001 011f 	and.w	r1, r1, #31
 8007592:	4088      	lsls	r0, r1
 8007594:	ea10 0f0c 	tst.w	r0, ip
 8007598:	f000 8227 	beq.w	80079ea <HAL_DMA_IRQHandler+0x4e6>
 800759c:	0756      	lsls	r6, r2, #29
 800759e:	f140 8224 	bpl.w	80079ea <HAL_DMA_IRQHandler+0x4e6>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075a2:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80075a4:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075a6:	f140 8218 	bpl.w	80079da <HAL_DMA_IRQHandler+0x4d6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80075aa:	03d3      	lsls	r3, r2, #15
 80075ac:	f100 821b 	bmi.w	80079e6 <HAL_DMA_IRQHandler+0x4e2>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80075b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80075b2:	e17f      	b.n	80078b4 <HAL_DMA_IRQHandler+0x3b0>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075b4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80075b6:	2008      	movs	r0, #8
 80075b8:	f002 021f 	and.w	r2, r2, #31
 80075bc:	4090      	lsls	r0, r2
 80075be:	ea10 0f08 	tst.w	r0, r8
 80075c2:	d03d      	beq.n	8007640 <HAL_DMA_IRQHandler+0x13c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80075c4:	42b3      	cmp	r3, r6
 80075c6:	d02e      	beq.n	8007626 <HAL_DMA_IRQHandler+0x122>
 80075c8:	4987      	ldr	r1, [pc, #540]	; (80077e8 <HAL_DMA_IRQHandler+0x2e4>)
 80075ca:	428b      	cmp	r3, r1
 80075cc:	d02b      	beq.n	8007626 <HAL_DMA_IRQHandler+0x122>
 80075ce:	3118      	adds	r1, #24
 80075d0:	428b      	cmp	r3, r1
 80075d2:	d028      	beq.n	8007626 <HAL_DMA_IRQHandler+0x122>
 80075d4:	3118      	adds	r1, #24
 80075d6:	428b      	cmp	r3, r1
 80075d8:	d025      	beq.n	8007626 <HAL_DMA_IRQHandler+0x122>
 80075da:	3118      	adds	r1, #24
 80075dc:	428b      	cmp	r3, r1
 80075de:	d022      	beq.n	8007626 <HAL_DMA_IRQHandler+0x122>
 80075e0:	3118      	adds	r1, #24
 80075e2:	428b      	cmp	r3, r1
 80075e4:	d01f      	beq.n	8007626 <HAL_DMA_IRQHandler+0x122>
 80075e6:	3118      	adds	r1, #24
 80075e8:	428b      	cmp	r3, r1
 80075ea:	d01c      	beq.n	8007626 <HAL_DMA_IRQHandler+0x122>
 80075ec:	3118      	adds	r1, #24
 80075ee:	428b      	cmp	r3, r1
 80075f0:	d019      	beq.n	8007626 <HAL_DMA_IRQHandler+0x122>
 80075f2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80075f6:	428b      	cmp	r3, r1
 80075f8:	d015      	beq.n	8007626 <HAL_DMA_IRQHandler+0x122>
 80075fa:	3118      	adds	r1, #24
 80075fc:	428b      	cmp	r3, r1
 80075fe:	d012      	beq.n	8007626 <HAL_DMA_IRQHandler+0x122>
 8007600:	3118      	adds	r1, #24
 8007602:	428b      	cmp	r3, r1
 8007604:	d00f      	beq.n	8007626 <HAL_DMA_IRQHandler+0x122>
 8007606:	3118      	adds	r1, #24
 8007608:	428b      	cmp	r3, r1
 800760a:	d00c      	beq.n	8007626 <HAL_DMA_IRQHandler+0x122>
 800760c:	3118      	adds	r1, #24
 800760e:	428b      	cmp	r3, r1
 8007610:	d009      	beq.n	8007626 <HAL_DMA_IRQHandler+0x122>
 8007612:	3118      	adds	r1, #24
 8007614:	428b      	cmp	r3, r1
 8007616:	d006      	beq.n	8007626 <HAL_DMA_IRQHandler+0x122>
 8007618:	3118      	adds	r1, #24
 800761a:	428b      	cmp	r3, r1
 800761c:	d003      	beq.n	8007626 <HAL_DMA_IRQHandler+0x122>
 800761e:	3118      	adds	r1, #24
 8007620:	428b      	cmp	r3, r1
 8007622:	f040 80c3 	bne.w	80077ac <HAL_DMA_IRQHandler+0x2a8>
 8007626:	6819      	ldr	r1, [r3, #0]
 8007628:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800762c:	b141      	cbz	r1, 8007640 <HAL_DMA_IRQHandler+0x13c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800762e:	6819      	ldr	r1, [r3, #0]
 8007630:	f021 0104 	bic.w	r1, r1, #4
 8007634:	6019      	str	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007636:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007638:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800763a:	f041 0101 	orr.w	r1, r1, #1
 800763e:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007640:	fa28 f102 	lsr.w	r1, r8, r2
 8007644:	07c8      	lsls	r0, r1, #31
 8007646:	d534      	bpl.n	80076b2 <HAL_DMA_IRQHandler+0x1ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007648:	42b3      	cmp	r3, r6
 800764a:	d02e      	beq.n	80076aa <HAL_DMA_IRQHandler+0x1a6>
 800764c:	4966      	ldr	r1, [pc, #408]	; (80077e8 <HAL_DMA_IRQHandler+0x2e4>)
 800764e:	428b      	cmp	r3, r1
 8007650:	d02b      	beq.n	80076aa <HAL_DMA_IRQHandler+0x1a6>
 8007652:	3118      	adds	r1, #24
 8007654:	428b      	cmp	r3, r1
 8007656:	d028      	beq.n	80076aa <HAL_DMA_IRQHandler+0x1a6>
 8007658:	3118      	adds	r1, #24
 800765a:	428b      	cmp	r3, r1
 800765c:	d025      	beq.n	80076aa <HAL_DMA_IRQHandler+0x1a6>
 800765e:	3118      	adds	r1, #24
 8007660:	428b      	cmp	r3, r1
 8007662:	d022      	beq.n	80076aa <HAL_DMA_IRQHandler+0x1a6>
 8007664:	3118      	adds	r1, #24
 8007666:	428b      	cmp	r3, r1
 8007668:	d01f      	beq.n	80076aa <HAL_DMA_IRQHandler+0x1a6>
 800766a:	3118      	adds	r1, #24
 800766c:	428b      	cmp	r3, r1
 800766e:	d01c      	beq.n	80076aa <HAL_DMA_IRQHandler+0x1a6>
 8007670:	3118      	adds	r1, #24
 8007672:	428b      	cmp	r3, r1
 8007674:	d019      	beq.n	80076aa <HAL_DMA_IRQHandler+0x1a6>
 8007676:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800767a:	428b      	cmp	r3, r1
 800767c:	d015      	beq.n	80076aa <HAL_DMA_IRQHandler+0x1a6>
 800767e:	3118      	adds	r1, #24
 8007680:	428b      	cmp	r3, r1
 8007682:	d012      	beq.n	80076aa <HAL_DMA_IRQHandler+0x1a6>
 8007684:	3118      	adds	r1, #24
 8007686:	428b      	cmp	r3, r1
 8007688:	d00f      	beq.n	80076aa <HAL_DMA_IRQHandler+0x1a6>
 800768a:	3118      	adds	r1, #24
 800768c:	428b      	cmp	r3, r1
 800768e:	d00c      	beq.n	80076aa <HAL_DMA_IRQHandler+0x1a6>
 8007690:	3118      	adds	r1, #24
 8007692:	428b      	cmp	r3, r1
 8007694:	d009      	beq.n	80076aa <HAL_DMA_IRQHandler+0x1a6>
 8007696:	3118      	adds	r1, #24
 8007698:	428b      	cmp	r3, r1
 800769a:	d006      	beq.n	80076aa <HAL_DMA_IRQHandler+0x1a6>
 800769c:	3118      	adds	r1, #24
 800769e:	428b      	cmp	r3, r1
 80076a0:	d003      	beq.n	80076aa <HAL_DMA_IRQHandler+0x1a6>
 80076a2:	3118      	adds	r1, #24
 80076a4:	428b      	cmp	r3, r1
 80076a6:	f040 8085 	bne.w	80077b4 <HAL_DMA_IRQHandler+0x2b0>
 80076aa:	6959      	ldr	r1, [r3, #20]
 80076ac:	0609      	lsls	r1, r1, #24
 80076ae:	f100 8083 	bmi.w	80077b8 <HAL_DMA_IRQHandler+0x2b4>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076b2:	2104      	movs	r1, #4
 80076b4:	4091      	lsls	r1, r2
 80076b6:	ea11 0f08 	tst.w	r1, r8
 80076ba:	d032      	beq.n	8007722 <HAL_DMA_IRQHandler+0x21e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80076bc:	42b3      	cmp	r3, r6
 80076be:	d02d      	beq.n	800771c <HAL_DMA_IRQHandler+0x218>
 80076c0:	4849      	ldr	r0, [pc, #292]	; (80077e8 <HAL_DMA_IRQHandler+0x2e4>)
 80076c2:	4283      	cmp	r3, r0
 80076c4:	d02a      	beq.n	800771c <HAL_DMA_IRQHandler+0x218>
 80076c6:	3018      	adds	r0, #24
 80076c8:	4283      	cmp	r3, r0
 80076ca:	d027      	beq.n	800771c <HAL_DMA_IRQHandler+0x218>
 80076cc:	3018      	adds	r0, #24
 80076ce:	4283      	cmp	r3, r0
 80076d0:	d024      	beq.n	800771c <HAL_DMA_IRQHandler+0x218>
 80076d2:	3018      	adds	r0, #24
 80076d4:	4283      	cmp	r3, r0
 80076d6:	d021      	beq.n	800771c <HAL_DMA_IRQHandler+0x218>
 80076d8:	3018      	adds	r0, #24
 80076da:	4283      	cmp	r3, r0
 80076dc:	d01e      	beq.n	800771c <HAL_DMA_IRQHandler+0x218>
 80076de:	3018      	adds	r0, #24
 80076e0:	4283      	cmp	r3, r0
 80076e2:	d01b      	beq.n	800771c <HAL_DMA_IRQHandler+0x218>
 80076e4:	3018      	adds	r0, #24
 80076e6:	4283      	cmp	r3, r0
 80076e8:	d018      	beq.n	800771c <HAL_DMA_IRQHandler+0x218>
 80076ea:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80076ee:	4283      	cmp	r3, r0
 80076f0:	d014      	beq.n	800771c <HAL_DMA_IRQHandler+0x218>
 80076f2:	3018      	adds	r0, #24
 80076f4:	4283      	cmp	r3, r0
 80076f6:	d011      	beq.n	800771c <HAL_DMA_IRQHandler+0x218>
 80076f8:	3018      	adds	r0, #24
 80076fa:	4283      	cmp	r3, r0
 80076fc:	d00e      	beq.n	800771c <HAL_DMA_IRQHandler+0x218>
 80076fe:	3018      	adds	r0, #24
 8007700:	4283      	cmp	r3, r0
 8007702:	d00b      	beq.n	800771c <HAL_DMA_IRQHandler+0x218>
 8007704:	3018      	adds	r0, #24
 8007706:	4283      	cmp	r3, r0
 8007708:	d008      	beq.n	800771c <HAL_DMA_IRQHandler+0x218>
 800770a:	3018      	adds	r0, #24
 800770c:	4283      	cmp	r3, r0
 800770e:	d005      	beq.n	800771c <HAL_DMA_IRQHandler+0x218>
 8007710:	3018      	adds	r0, #24
 8007712:	4283      	cmp	r3, r0
 8007714:	d002      	beq.n	800771c <HAL_DMA_IRQHandler+0x218>
 8007716:	3018      	adds	r0, #24
 8007718:	4283      	cmp	r3, r0
 800771a:	d155      	bne.n	80077c8 <HAL_DMA_IRQHandler+0x2c4>
 800771c:	6818      	ldr	r0, [r3, #0]
 800771e:	0780      	lsls	r0, r0, #30
 8007720:	d454      	bmi.n	80077cc <HAL_DMA_IRQHandler+0x2c8>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007722:	2110      	movs	r1, #16
 8007724:	fa01 f202 	lsl.w	r2, r1, r2
 8007728:	ea12 0f08 	tst.w	r2, r8
 800772c:	d064      	beq.n	80077f8 <HAL_DMA_IRQHandler+0x2f4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800772e:	42b3      	cmp	r3, r6
 8007730:	d02d      	beq.n	800778e <HAL_DMA_IRQHandler+0x28a>
 8007732:	492d      	ldr	r1, [pc, #180]	; (80077e8 <HAL_DMA_IRQHandler+0x2e4>)
 8007734:	428b      	cmp	r3, r1
 8007736:	d02a      	beq.n	800778e <HAL_DMA_IRQHandler+0x28a>
 8007738:	3118      	adds	r1, #24
 800773a:	428b      	cmp	r3, r1
 800773c:	d027      	beq.n	800778e <HAL_DMA_IRQHandler+0x28a>
 800773e:	3118      	adds	r1, #24
 8007740:	428b      	cmp	r3, r1
 8007742:	d024      	beq.n	800778e <HAL_DMA_IRQHandler+0x28a>
 8007744:	3118      	adds	r1, #24
 8007746:	428b      	cmp	r3, r1
 8007748:	d021      	beq.n	800778e <HAL_DMA_IRQHandler+0x28a>
 800774a:	3118      	adds	r1, #24
 800774c:	428b      	cmp	r3, r1
 800774e:	d01e      	beq.n	800778e <HAL_DMA_IRQHandler+0x28a>
 8007750:	3118      	adds	r1, #24
 8007752:	428b      	cmp	r3, r1
 8007754:	d01b      	beq.n	800778e <HAL_DMA_IRQHandler+0x28a>
 8007756:	3118      	adds	r1, #24
 8007758:	428b      	cmp	r3, r1
 800775a:	d018      	beq.n	800778e <HAL_DMA_IRQHandler+0x28a>
 800775c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007760:	428b      	cmp	r3, r1
 8007762:	d014      	beq.n	800778e <HAL_DMA_IRQHandler+0x28a>
 8007764:	3118      	adds	r1, #24
 8007766:	428b      	cmp	r3, r1
 8007768:	d011      	beq.n	800778e <HAL_DMA_IRQHandler+0x28a>
 800776a:	3118      	adds	r1, #24
 800776c:	428b      	cmp	r3, r1
 800776e:	d00e      	beq.n	800778e <HAL_DMA_IRQHandler+0x28a>
 8007770:	3118      	adds	r1, #24
 8007772:	428b      	cmp	r3, r1
 8007774:	d00b      	beq.n	800778e <HAL_DMA_IRQHandler+0x28a>
 8007776:	3118      	adds	r1, #24
 8007778:	428b      	cmp	r3, r1
 800777a:	d008      	beq.n	800778e <HAL_DMA_IRQHandler+0x28a>
 800777c:	3118      	adds	r1, #24
 800777e:	428b      	cmp	r3, r1
 8007780:	d005      	beq.n	800778e <HAL_DMA_IRQHandler+0x28a>
 8007782:	3118      	adds	r1, #24
 8007784:	428b      	cmp	r3, r1
 8007786:	d002      	beq.n	800778e <HAL_DMA_IRQHandler+0x28a>
 8007788:	3118      	adds	r1, #24
 800778a:	428b      	cmp	r3, r1
 800778c:	d124      	bne.n	80077d8 <HAL_DMA_IRQHandler+0x2d4>
 800778e:	6819      	ldr	r1, [r3, #0]
 8007790:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8007794:	2900      	cmp	r1, #0
 8007796:	d02f      	beq.n	80077f8 <HAL_DMA_IRQHandler+0x2f4>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007798:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	0350      	lsls	r0, r2, #13
 800779e:	f140 8091 	bpl.w	80078c4 <HAL_DMA_IRQHandler+0x3c0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	0319      	lsls	r1, r3, #12
 80077a6:	d423      	bmi.n	80077f0 <HAL_DMA_IRQHandler+0x2ec>
          if(hdma->XferHalfCpltCallback != NULL)
 80077a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077aa:	e022      	b.n	80077f2 <HAL_DMA_IRQHandler+0x2ee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80077ac:	6819      	ldr	r1, [r3, #0]
 80077ae:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80077b2:	e73b      	b.n	800762c <HAL_DMA_IRQHandler+0x128>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80077b4:	6819      	ldr	r1, [r3, #0]
 80077b6:	e77c      	b.n	80076b2 <HAL_DMA_IRQHandler+0x1ae>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077b8:	2101      	movs	r1, #1
 80077ba:	4091      	lsls	r1, r2
 80077bc:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80077be:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80077c0:	f041 0102 	orr.w	r1, r1, #2
 80077c4:	6561      	str	r1, [r4, #84]	; 0x54
 80077c6:	e774      	b.n	80076b2 <HAL_DMA_IRQHandler+0x1ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80077c8:	6819      	ldr	r1, [r3, #0]
 80077ca:	e7aa      	b.n	8007722 <HAL_DMA_IRQHandler+0x21e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077cc:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077ce:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80077d0:	f041 0104 	orr.w	r1, r1, #4
 80077d4:	6561      	str	r1, [r4, #84]	; 0x54
 80077d6:	e7a4      	b.n	8007722 <HAL_DMA_IRQHandler+0x21e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80077d8:	6819      	ldr	r1, [r3, #0]
 80077da:	f3c1 0180 	ubfx	r1, r1, #2, #1
 80077de:	e7d9      	b.n	8007794 <HAL_DMA_IRQHandler+0x290>
 80077e0:	24000000 	.word	0x24000000
 80077e4:	40020010 	.word	0x40020010
 80077e8:	40020028 	.word	0x40020028
 80077ec:	58025408 	.word	0x58025408
            if(hdma->XferM1HalfCpltCallback != NULL)
 80077f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 80077f2:	b10b      	cbz	r3, 80077f8 <HAL_DMA_IRQHandler+0x2f4>
            hdma->XferHalfCpltCallback(hdma);
 80077f4:	4620      	mov	r0, r4
 80077f6:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80077fa:	2020      	movs	r0, #32
 80077fc:	f001 011f 	and.w	r1, r1, #31
 8007800:	4088      	lsls	r0, r1
 8007802:	ea10 0f08 	tst.w	r0, r8
 8007806:	d073      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x3ec>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	42b3      	cmp	r3, r6
 800780c:	d02d      	beq.n	800786a <HAL_DMA_IRQHandler+0x366>
 800780e:	4a8f      	ldr	r2, [pc, #572]	; (8007a4c <HAL_DMA_IRQHandler+0x548>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d02a      	beq.n	800786a <HAL_DMA_IRQHandler+0x366>
 8007814:	3218      	adds	r2, #24
 8007816:	4293      	cmp	r3, r2
 8007818:	d027      	beq.n	800786a <HAL_DMA_IRQHandler+0x366>
 800781a:	3218      	adds	r2, #24
 800781c:	4293      	cmp	r3, r2
 800781e:	d024      	beq.n	800786a <HAL_DMA_IRQHandler+0x366>
 8007820:	3218      	adds	r2, #24
 8007822:	4293      	cmp	r3, r2
 8007824:	d021      	beq.n	800786a <HAL_DMA_IRQHandler+0x366>
 8007826:	3218      	adds	r2, #24
 8007828:	4293      	cmp	r3, r2
 800782a:	d01e      	beq.n	800786a <HAL_DMA_IRQHandler+0x366>
 800782c:	3218      	adds	r2, #24
 800782e:	4293      	cmp	r3, r2
 8007830:	d01b      	beq.n	800786a <HAL_DMA_IRQHandler+0x366>
 8007832:	3218      	adds	r2, #24
 8007834:	4293      	cmp	r3, r2
 8007836:	d018      	beq.n	800786a <HAL_DMA_IRQHandler+0x366>
 8007838:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800783c:	4293      	cmp	r3, r2
 800783e:	d014      	beq.n	800786a <HAL_DMA_IRQHandler+0x366>
 8007840:	3218      	adds	r2, #24
 8007842:	4293      	cmp	r3, r2
 8007844:	d011      	beq.n	800786a <HAL_DMA_IRQHandler+0x366>
 8007846:	3218      	adds	r2, #24
 8007848:	4293      	cmp	r3, r2
 800784a:	d00e      	beq.n	800786a <HAL_DMA_IRQHandler+0x366>
 800784c:	3218      	adds	r2, #24
 800784e:	4293      	cmp	r3, r2
 8007850:	d00b      	beq.n	800786a <HAL_DMA_IRQHandler+0x366>
 8007852:	3218      	adds	r2, #24
 8007854:	4293      	cmp	r3, r2
 8007856:	d008      	beq.n	800786a <HAL_DMA_IRQHandler+0x366>
 8007858:	3218      	adds	r2, #24
 800785a:	4293      	cmp	r3, r2
 800785c:	d005      	beq.n	800786a <HAL_DMA_IRQHandler+0x366>
 800785e:	3218      	adds	r2, #24
 8007860:	4293      	cmp	r3, r2
 8007862:	d002      	beq.n	800786a <HAL_DMA_IRQHandler+0x366>
 8007864:	3218      	adds	r2, #24
 8007866:	4293      	cmp	r3, r2
 8007868:	d135      	bne.n	80078d6 <HAL_DMA_IRQHandler+0x3d2>
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8007870:	2a00      	cmp	r2, #0
 8007872:	d03d      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x3ec>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007874:	60a8      	str	r0, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007876:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800787a:	2a04      	cmp	r2, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800787c:	681a      	ldr	r2, [r3, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800787e:	d12e      	bne.n	80078de <HAL_DMA_IRQHandler+0x3da>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007880:	f022 0216 	bic.w	r2, r2, #22
 8007884:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007886:	695a      	ldr	r2, [r3, #20]
 8007888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800788c:	615a      	str	r2, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800788e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007890:	b90a      	cbnz	r2, 8007896 <HAL_DMA_IRQHandler+0x392>
 8007892:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007894:	b11a      	cbz	r2, 800789e <HAL_DMA_IRQHandler+0x39a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	f022 0208 	bic.w	r2, r2, #8
 800789c:	601a      	str	r2, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800789e:	233f      	movs	r3, #63	; 0x3f
 80078a0:	fa03 f101 	lsl.w	r1, r3, r1
          __HAL_UNLOCK(hdma);
 80078a4:	2300      	movs	r3, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80078a6:	60a9      	str	r1, [r5, #8]
          __HAL_UNLOCK(hdma);
 80078a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80078ac:	2301      	movs	r3, #1
 80078ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 80078b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (hdma->XferErrorCallback != NULL)
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 808d 	beq.w	80079d4 <HAL_DMA_IRQHandler+0x4d0>
        hdma->XferErrorCallback(hdma);
 80078ba:	4620      	mov	r0, r4
}
 80078bc:	b002      	add	sp, #8
 80078be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 80078c2:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	05d2      	lsls	r2, r2, #23
 80078c8:	f53f af6e 	bmi.w	80077a8 <HAL_DMA_IRQHandler+0x2a4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	f022 0208 	bic.w	r2, r2, #8
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	e768      	b.n	80077a8 <HAL_DMA_IRQHandler+0x2a4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80078dc:	e7c8      	b.n	8007870 <HAL_DMA_IRQHandler+0x36c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80078de:	0355      	lsls	r5, r2, #13
 80078e0:	d54d      	bpl.n	800797e <HAL_DMA_IRQHandler+0x47a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	0318      	lsls	r0, r3, #12
 80078e6:	d457      	bmi.n	8007998 <HAL_DMA_IRQHandler+0x494>
            if(hdma->XferM1CpltCallback != NULL)
 80078e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if(hdma->XferCpltCallback != NULL)
 80078ea:	b10b      	cbz	r3, 80078f0 <HAL_DMA_IRQHandler+0x3ec>
            hdma->XferCpltCallback(hdma);
 80078ec:	4620      	mov	r0, r4
 80078ee:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d06e      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x4d0>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80078f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80078f8:	07d9      	lsls	r1, r3, #31
 80078fa:	d53e      	bpl.n	800797a <HAL_DMA_IRQHandler+0x476>
        hdma->State = HAL_DMA_STATE_ABORT;
 80078fc:	2304      	movs	r3, #4
 80078fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	42b3      	cmp	r3, r6
 8007906:	d01e      	beq.n	8007946 <HAL_DMA_IRQHandler+0x442>
 8007908:	4a50      	ldr	r2, [pc, #320]	; (8007a4c <HAL_DMA_IRQHandler+0x548>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d01b      	beq.n	8007946 <HAL_DMA_IRQHandler+0x442>
 800790e:	3218      	adds	r2, #24
 8007910:	4293      	cmp	r3, r2
 8007912:	d018      	beq.n	8007946 <HAL_DMA_IRQHandler+0x442>
 8007914:	3218      	adds	r2, #24
 8007916:	4293      	cmp	r3, r2
 8007918:	d015      	beq.n	8007946 <HAL_DMA_IRQHandler+0x442>
 800791a:	3218      	adds	r2, #24
 800791c:	4293      	cmp	r3, r2
 800791e:	d012      	beq.n	8007946 <HAL_DMA_IRQHandler+0x442>
 8007920:	3218      	adds	r2, #24
 8007922:	4293      	cmp	r3, r2
 8007924:	d00f      	beq.n	8007946 <HAL_DMA_IRQHandler+0x442>
 8007926:	3218      	adds	r2, #24
 8007928:	4293      	cmp	r3, r2
 800792a:	d00c      	beq.n	8007946 <HAL_DMA_IRQHandler+0x442>
 800792c:	3218      	adds	r2, #24
 800792e:	4293      	cmp	r3, r2
 8007930:	d009      	beq.n	8007946 <HAL_DMA_IRQHandler+0x442>
 8007932:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007936:	4293      	cmp	r3, r2
 8007938:	d005      	beq.n	8007946 <HAL_DMA_IRQHandler+0x442>
 800793a:	3218      	adds	r2, #24
 800793c:	4293      	cmp	r3, r2
 800793e:	d002      	beq.n	8007946 <HAL_DMA_IRQHandler+0x442>
 8007940:	3218      	adds	r2, #24
 8007942:	4293      	cmp	r3, r2
 8007944:	d0ff      	beq.n	8007946 <HAL_DMA_IRQHandler+0x442>
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	f022 0201 	bic.w	r2, r2, #1
 800794c:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800794e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007952:	fbb7 f7f2 	udiv	r7, r7, r2
          if (++count > timeout)
 8007956:	9a01      	ldr	r2, [sp, #4]
 8007958:	3201      	adds	r2, #1
 800795a:	42ba      	cmp	r2, r7
 800795c:	9201      	str	r2, [sp, #4]
 800795e:	d802      	bhi.n	8007966 <HAL_DMA_IRQHandler+0x462>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	07d2      	lsls	r2, r2, #31
 8007964:	d4f7      	bmi.n	8007956 <HAL_DMA_IRQHandler+0x452>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007966:	681b      	ldr	r3, [r3, #0]
        __HAL_UNLOCK(hdma);
 8007968:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800796a:	07df      	lsls	r7, r3, #31
        __HAL_UNLOCK(hdma);
 800796c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 8007970:	bf4c      	ite	mi
 8007972:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8007974:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 8007976:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800797a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800797c:	e79a      	b.n	80078b4 <HAL_DMA_IRQHandler+0x3b0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8007984:	d108      	bne.n	8007998 <HAL_DMA_IRQHandler+0x494>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007986:	6819      	ldr	r1, [r3, #0]
 8007988:	f021 0110 	bic.w	r1, r1, #16
 800798c:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800798e:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8007990:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8007994:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8007998:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800799a:	e7a6      	b.n	80078ea <HAL_DMA_IRQHandler+0x3e6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800799c:	4a2c      	ldr	r2, [pc, #176]	; (8007a50 <HAL_DMA_IRQHandler+0x54c>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	f43f adf2 	beq.w	8007588 <HAL_DMA_IRQHandler+0x84>
 80079a4:	3214      	adds	r2, #20
 80079a6:	4293      	cmp	r3, r2
 80079a8:	f43f adee 	beq.w	8007588 <HAL_DMA_IRQHandler+0x84>
 80079ac:	3214      	adds	r2, #20
 80079ae:	4293      	cmp	r3, r2
 80079b0:	f43f adea 	beq.w	8007588 <HAL_DMA_IRQHandler+0x84>
 80079b4:	3214      	adds	r2, #20
 80079b6:	4293      	cmp	r3, r2
 80079b8:	f43f ade6 	beq.w	8007588 <HAL_DMA_IRQHandler+0x84>
 80079bc:	3214      	adds	r2, #20
 80079be:	4293      	cmp	r3, r2
 80079c0:	f43f ade2 	beq.w	8007588 <HAL_DMA_IRQHandler+0x84>
 80079c4:	3214      	adds	r2, #20
 80079c6:	4293      	cmp	r3, r2
 80079c8:	f43f adde 	beq.w	8007588 <HAL_DMA_IRQHandler+0x84>
 80079cc:	3214      	adds	r2, #20
 80079ce:	4293      	cmp	r3, r2
 80079d0:	f43f adda 	beq.w	8007588 <HAL_DMA_IRQHandler+0x84>
}
 80079d4:	b002      	add	sp, #8
 80079d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80079da:	0697      	lsls	r7, r2, #26
 80079dc:	d403      	bmi.n	80079e6 <HAL_DMA_IRQHandler+0x4e2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	f022 0204 	bic.w	r2, r2, #4
 80079e4:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80079e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079e8:	e764      	b.n	80078b4 <HAL_DMA_IRQHandler+0x3b0>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80079ea:	2002      	movs	r0, #2
 80079ec:	4088      	lsls	r0, r1
 80079ee:	ea10 0f0c 	tst.w	r0, ip
 80079f2:	d016      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x51e>
 80079f4:	0796      	lsls	r6, r2, #30
 80079f6:	d514      	bpl.n	8007a22 <HAL_DMA_IRQHandler+0x51e>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80079f8:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079fa:	0410      	lsls	r0, r2, #16
 80079fc:	d503      	bpl.n	8007a06 <HAL_DMA_IRQHandler+0x502>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079fe:	03d1      	lsls	r1, r2, #15
 8007a00:	d40d      	bmi.n	8007a1e <HAL_DMA_IRQHandler+0x51a>
          if(hdma->XferM1CpltCallback != NULL)
 8007a02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007a04:	e756      	b.n	80078b4 <HAL_DMA_IRQHandler+0x3b0>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a06:	f012 0220 	ands.w	r2, r2, #32
 8007a0a:	d108      	bne.n	8007a1e <HAL_DMA_IRQHandler+0x51a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a0c:	6819      	ldr	r1, [r3, #0]
 8007a0e:	f021 010a 	bic.w	r1, r1, #10
 8007a12:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8007a14:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8007a16:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8007a1a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8007a1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007a20:	e748      	b.n	80078b4 <HAL_DMA_IRQHandler+0x3b0>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007a22:	2008      	movs	r0, #8
 8007a24:	4088      	lsls	r0, r1
 8007a26:	ea10 0f0c 	tst.w	r0, ip
 8007a2a:	d0d3      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x4d0>
 8007a2c:	0712      	lsls	r2, r2, #28
 8007a2e:	d5d1      	bpl.n	80079d4 <HAL_DMA_IRQHandler+0x4d0>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	f022 020e 	bic.w	r2, r2, #14
 8007a36:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007a38:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8007a3a:	2200      	movs	r2, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007a3c:	fa03 f101 	lsl.w	r1, r3, r1
 8007a40:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007a42:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8007a44:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 8007a48:	e795      	b.n	8007976 <HAL_DMA_IRQHandler+0x472>
 8007a4a:	bf00      	nop
 8007a4c:	40020028 	.word	0x40020028
 8007a50:	5802541c 	.word	0x5802541c

08007a54 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8007a54:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8007a56:	4770      	bx	lr

08007a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a5c:	680b      	ldr	r3, [r1, #0]
{
 8007a5e:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c24 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a64:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a68:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8007a6a:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 8007a6c:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8007c28 <HAL_GPIO_Init+0x1d0>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a70:	9a01      	ldr	r2, [sp, #4]
 8007a72:	40da      	lsrs	r2, r3
 8007a74:	d102      	bne.n	8007a7c <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 8007a76:	b005      	add	sp, #20
 8007a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007a7c:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 8007a7e:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007a80:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8007a82:	ea17 0502 	ands.w	r5, r7, r2
 8007a86:	f000 80b6 	beq.w	8007bf6 <HAL_GPIO_Init+0x19e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a8a:	684a      	ldr	r2, [r1, #4]
 8007a8c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8007a90:	2403      	movs	r4, #3
 8007a92:	f022 0a10 	bic.w	sl, r2, #16
 8007a96:	fa04 f40e 	lsl.w	r4, r4, lr
 8007a9a:	f10a 36ff 	add.w	r6, sl, #4294967295
 8007a9e:	43e4      	mvns	r4, r4
 8007aa0:	2e01      	cmp	r6, #1
 8007aa2:	d810      	bhi.n	8007ac6 <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8007aa4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007aa6:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007aaa:	68ce      	ldr	r6, [r1, #12]
 8007aac:	fa06 f60e 	lsl.w	r6, r6, lr
 8007ab0:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8007ab4:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8007ab6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ab8:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007abc:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8007ac0:	409e      	lsls	r6, r3
 8007ac2:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8007ac4:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8007ac6:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ac8:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007acc:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ace:	ea07 0704 	and.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ad2:	fa06 f60e 	lsl.w	r6, r6, lr
 8007ad6:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 8007ada:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007adc:	d114      	bne.n	8007b08 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 8007ade:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ae2:	f003 0b07 	and.w	fp, r3, #7
 8007ae6:	270f      	movs	r7, #15
 8007ae8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8007aec:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8007af0:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007af4:	fa07 f70b 	lsl.w	r7, r7, fp
 8007af8:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007afc:	690e      	ldr	r6, [r1, #16]
 8007afe:	fa06 f60b 	lsl.w	r6, r6, fp
 8007b02:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8007b04:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 8007b08:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b0a:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b0c:	f002 0603 	and.w	r6, r2, #3
 8007b10:	fa06 fe0e 	lsl.w	lr, r6, lr
 8007b14:	ea4e 0404 	orr.w	r4, lr, r4
      GPIOx->MODER = temp;
 8007b18:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007b1a:	00d4      	lsls	r4, r2, #3
 8007b1c:	d56b      	bpl.n	8007bf6 <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b1e:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8007b22:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b26:	f003 0703 	and.w	r7, r3, #3
 8007b2a:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b2e:	f044 0402 	orr.w	r4, r4, #2
 8007b32:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b36:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b38:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 8007b3c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007b40:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8007b44:	f004 0402 	and.w	r4, r4, #2
 8007b48:	9403      	str	r4, [sp, #12]
 8007b4a:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b4c:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8007b50:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b54:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b58:	4c31      	ldr	r4, [pc, #196]	; (8007c20 <HAL_GPIO_Init+0x1c8>)
 8007b5a:	42a0      	cmp	r0, r4
 8007b5c:	d04d      	beq.n	8007bfa <HAL_GPIO_Init+0x1a2>
 8007b5e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007b62:	42a0      	cmp	r0, r4
 8007b64:	d04b      	beq.n	8007bfe <HAL_GPIO_Init+0x1a6>
 8007b66:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007b6a:	42a0      	cmp	r0, r4
 8007b6c:	d049      	beq.n	8007c02 <HAL_GPIO_Init+0x1aa>
 8007b6e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007b72:	42a0      	cmp	r0, r4
 8007b74:	d047      	beq.n	8007c06 <HAL_GPIO_Init+0x1ae>
 8007b76:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007b7a:	42a0      	cmp	r0, r4
 8007b7c:	d045      	beq.n	8007c0a <HAL_GPIO_Init+0x1b2>
 8007b7e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007b82:	42a0      	cmp	r0, r4
 8007b84:	d043      	beq.n	8007c0e <HAL_GPIO_Init+0x1b6>
 8007b86:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007b8a:	42a0      	cmp	r0, r4
 8007b8c:	d041      	beq.n	8007c12 <HAL_GPIO_Init+0x1ba>
 8007b8e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007b92:	42a0      	cmp	r0, r4
 8007b94:	d03f      	beq.n	8007c16 <HAL_GPIO_Init+0x1be>
 8007b96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007b9a:	42a0      	cmp	r0, r4
 8007b9c:	d03d      	beq.n	8007c1a <HAL_GPIO_Init+0x1c2>
 8007b9e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007ba2:	42a0      	cmp	r0, r4
 8007ba4:	bf14      	ite	ne
 8007ba6:	240a      	movne	r4, #10
 8007ba8:	2409      	moveq	r4, #9
 8007baa:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007bac:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007bae:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bb2:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8007bb4:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 8007bb8:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 8007bbc:	bf54      	ite	pl
 8007bbe:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8007bc0:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007bc2:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8007bc4:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8007bc8:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 8007bcc:	bf54      	ite	pl
 8007bce:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8007bd0:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007bd2:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 8007bd4:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8007bd8:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8007bdc:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8007be0:	bf54      	ite	pl
 8007be2:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8007be4:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007be6:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8007be8:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8007bea:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 8007bec:	bf54      	ite	pl
 8007bee:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8007bf0:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 8007bf2:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	e73a      	b.n	8007a70 <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007bfa:	2400      	movs	r4, #0
 8007bfc:	e7d5      	b.n	8007baa <HAL_GPIO_Init+0x152>
 8007bfe:	2401      	movs	r4, #1
 8007c00:	e7d3      	b.n	8007baa <HAL_GPIO_Init+0x152>
 8007c02:	2402      	movs	r4, #2
 8007c04:	e7d1      	b.n	8007baa <HAL_GPIO_Init+0x152>
 8007c06:	2403      	movs	r4, #3
 8007c08:	e7cf      	b.n	8007baa <HAL_GPIO_Init+0x152>
 8007c0a:	2404      	movs	r4, #4
 8007c0c:	e7cd      	b.n	8007baa <HAL_GPIO_Init+0x152>
 8007c0e:	2405      	movs	r4, #5
 8007c10:	e7cb      	b.n	8007baa <HAL_GPIO_Init+0x152>
 8007c12:	2406      	movs	r4, #6
 8007c14:	e7c9      	b.n	8007baa <HAL_GPIO_Init+0x152>
 8007c16:	2407      	movs	r4, #7
 8007c18:	e7c7      	b.n	8007baa <HAL_GPIO_Init+0x152>
 8007c1a:	2408      	movs	r4, #8
 8007c1c:	e7c5      	b.n	8007baa <HAL_GPIO_Init+0x152>
 8007c1e:	bf00      	nop
 8007c20:	58020000 	.word	0x58020000
 8007c24:	58024400 	.word	0x58024400
 8007c28:	58000080 	.word	0x58000080

08007c2c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007c2c:	6903      	ldr	r3, [r0, #16]
 8007c2e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007c30:	bf14      	ite	ne
 8007c32:	2001      	movne	r0, #1
 8007c34:	2000      	moveq	r0, #0
 8007c36:	4770      	bx	lr

08007c38 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c38:	b10a      	cbz	r2, 8007c3e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c3a:	6181      	str	r1, [r0, #24]
  }
}
 8007c3c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c3e:	0409      	lsls	r1, r1, #16
 8007c40:	e7fb      	b.n	8007c3a <HAL_GPIO_WritePin+0x2>

08007c42 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007c42:	6943      	ldr	r3, [r0, #20]
 8007c44:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c48:	bf08      	it	eq
 8007c4a:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c4c:	6181      	str	r1, [r0, #24]
  }
}
 8007c4e:	4770      	bx	lr

08007c50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007c50:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c52:	4604      	mov	r4, r0
{
 8007c54:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8007c56:	b360      	cbz	r0, 8007cb2 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007c58:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8007c5c:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007c5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007c62:	b91b      	cbnz	r3, 8007c6c <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007c64:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007c68:	f00b f978 	bl	8012f5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007c6c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c6e:	466e      	mov	r6, sp
 8007c70:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8007c72:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007c76:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 8007c78:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007c7a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8007c7e:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8007c82:	bf08      	it	eq
 8007c84:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8007c86:	f005 f87b 	bl	800cd80 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007c92:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007c96:	4625      	mov	r5, r4
 8007c98:	e886 0003 	stmia.w	r6, {r0, r1}
 8007c9c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8007ca0:	f855 0b10 	ldr.w	r0, [r5], #16
 8007ca4:	f004 ffb0 	bl	800cc08 <USB_CoreInit>
 8007ca8:	4606      	mov	r6, r0
 8007caa:	b120      	cbz	r0, 8007cb6 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007cac:	2302      	movs	r3, #2
 8007cae:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8007cb2:	2501      	movs	r5, #1
 8007cb4:	e054      	b.n	8007d60 <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	6820      	ldr	r0, [r4, #0]
 8007cba:	f005 f867 	bl	800cd8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007cc4:	261c      	movs	r6, #28
 8007cc6:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007cca:	4601      	mov	r1, r0
 8007ccc:	b2c2      	uxtb	r2, r0
 8007cce:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cd0:	4594      	cmp	ip, r2
 8007cd2:	d81b      	bhi.n	8007d0c <HAL_PCD_Init+0xbc>
 8007cd4:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007cd6:	261c      	movs	r6, #28
 8007cd8:	4619      	mov	r1, r3
 8007cda:	b2d8      	uxtb	r0, r3
 8007cdc:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cde:	4584      	cmp	ip, r0
 8007ce0:	d822      	bhi.n	8007d28 <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007ce2:	466e      	mov	r6, sp
 8007ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ce6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007cec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007cf0:	e886 0003 	stmia.w	r6, {r0, r1}
 8007cf4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8007cf8:	6820      	ldr	r0, [r4, #0]
 8007cfa:	f005 f889 	bl	800ce10 <USB_DevInit>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4605      	mov	r5, r0
 8007d02:	b300      	cbz	r0, 8007d46 <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007d04:	2202      	movs	r2, #2
 8007d06:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8007d0a:	e7d2      	b.n	8007cb2 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8007d0c:	fb06 4302 	mla	r3, r6, r2, r4
 8007d10:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8007d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007d18:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007d1c:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8007d20:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007d22:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
 8007d26:	e7d1      	b.n	8007ccc <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8007d28:	fb06 4200 	mla	r2, r6, r0, r4
 8007d2c:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8007d30:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007d34:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007d38:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007d3c:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007d40:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8007d44:	e7c9      	b.n	8007cda <HAL_PCD_Init+0x8a>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8007d46:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007d4a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d102      	bne.n	8007d5a <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007d54:	4620      	mov	r0, r4
 8007d56:	f000 fc58 	bl	800860a <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8007d5a:	6820      	ldr	r0, [r4, #0]
 8007d5c:	f005 fb8a 	bl	800d474 <USB_DevDisconnect>

  return HAL_OK;
}
 8007d60:	4628      	mov	r0, r5
 8007d62:	b00b      	add	sp, #44	; 0x2c
 8007d64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d66 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8007d66:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8007d6a:	2b01      	cmp	r3, #1
{
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007d70:	d016      	beq.n	8007da0 <HAL_PCD_Start+0x3a>
 8007d72:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d74:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8007d76:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007d7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d106      	bne.n	8007d8e <HAL_PCD_Start+0x28>
 8007d80:	69a3      	ldr	r3, [r4, #24]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d003      	beq.n	8007d8e <HAL_PCD_Start+0x28>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d86:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d8c:	6383      	str	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8007d8e:	f005 fb65 	bl	800d45c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8007d92:	6820      	ldr	r0, [r4, #0]
 8007d94:	f004 ffee 	bl	800cd74 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8007d98:	2000      	movs	r0, #0
 8007d9a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 8007d9e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007da0:	2002      	movs	r0, #2
 8007da2:	e7fc      	b.n	8007d9e <HAL_PCD_Start+0x38>

08007da4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007da8:	6805      	ldr	r5, [r0, #0]
{
 8007daa:	b087      	sub	sp, #28
 8007dac:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007dae:	4628      	mov	r0, r5
 8007db0:	f005 fb9b 	bl	800d4ea <USB_GetMode>
 8007db4:	9002      	str	r0, [sp, #8]
 8007db6:	2800      	cmp	r0, #0
 8007db8:	f040 813a 	bne.w	8008030 <HAL_PCD_IRQHandler+0x28c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007dbc:	6820      	ldr	r0, [r4, #0]
 8007dbe:	f005 fb65 	bl	800d48c <USB_ReadInterrupts>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	f000 8134 	beq.w	8008030 <HAL_PCD_IRQHandler+0x28c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007dc8:	6820      	ldr	r0, [r4, #0]
 8007dca:	f005 fb5f 	bl	800d48c <USB_ReadInterrupts>
 8007dce:	0782      	lsls	r2, r0, #30
 8007dd0:	d504      	bpl.n	8007ddc <HAL_PCD_IRQHandler+0x38>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007dd2:	6822      	ldr	r2, [r4, #0]
 8007dd4:	6953      	ldr	r3, [r2, #20]
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	6153      	str	r3, [r2, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007ddc:	6820      	ldr	r0, [r4, #0]
 8007dde:	f005 fb55 	bl	800d48c <USB_ReadInterrupts>
 8007de2:	06c3      	lsls	r3, r0, #27
 8007de4:	d52a      	bpl.n	8007e3c <HAL_PCD_IRQHandler+0x98>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007de6:	6822      	ldr	r2, [r4, #0]
 8007de8:	6993      	ldr	r3, [r2, #24]
 8007dea:	f023 0310 	bic.w	r3, r3, #16
 8007dee:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8007df0:	6a2e      	ldr	r6, [r5, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007df2:	f3c6 4343 	ubfx	r3, r6, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007df6:	f006 080f 	and.w	r8, r6, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	f040 811b 	bne.w	8008036 <HAL_PCD_IRQHandler+0x292>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007e00:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007e04:	421e      	tst	r6, r3
 8007e06:	d014      	beq.n	8007e32 <HAL_PCD_IRQHandler+0x8e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007e08:	271c      	movs	r7, #28
 8007e0a:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8007e0e:	4628      	mov	r0, r5
 8007e10:	fb07 4708 	mla	r7, r7, r8, r4
 8007e14:	4632      	mov	r2, r6
 8007e16:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8007e1a:	f005 faad 	bl	800d378 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e1e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8007e22:	4433      	add	r3, r6
 8007e24:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e28:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007e2c:	441e      	add	r6, r3
 8007e2e:	f8c7 6214 	str.w	r6, [r7, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007e32:	6822      	ldr	r2, [r4, #0]
 8007e34:	6993      	ldr	r3, [r2, #24]
 8007e36:	f043 0310 	orr.w	r3, r3, #16
 8007e3a:	6193      	str	r3, [r2, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007e3c:	6820      	ldr	r0, [r4, #0]
 8007e3e:	f005 fb25 	bl	800d48c <USB_ReadInterrupts>
 8007e42:	0307      	lsls	r7, r0, #12
 8007e44:	f100 8106 	bmi.w	8008054 <HAL_PCD_IRQHandler+0x2b0>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007e48:	6820      	ldr	r0, [r4, #0]
 8007e4a:	f005 fb1f 	bl	800d48c <USB_ReadInterrupts>
 8007e4e:	0346      	lsls	r6, r0, #13
 8007e50:	d50b      	bpl.n	8007e6a <HAL_PCD_IRQHandler+0xc6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007e52:	6820      	ldr	r0, [r4, #0]
 8007e54:	4626      	mov	r6, r4
 8007e56:	f005 fb25 	bl	800d4a4 <USB_ReadDevAllInEpInterrupt>

      epnum = 0U;
 8007e5a:	2700      	movs	r7, #0
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007e5c:	4682      	mov	sl, r0
 8007e5e:	f505 6910 	add.w	r9, r5, #2304	; 0x900

      while (ep_intr != 0U)
 8007e62:	f1ba 0f00 	cmp.w	sl, #0
 8007e66:	f040 81a3 	bne.w	80081b0 <HAL_PCD_IRQHandler+0x40c>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007e6a:	6820      	ldr	r0, [r4, #0]
 8007e6c:	f005 fb0e 	bl	800d48c <USB_ReadInterrupts>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	da15      	bge.n	8007ea0 <HAL_PCD_IRQHandler+0xfc>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007e74:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8007e78:	f023 0301 	bic.w	r3, r3, #1
 8007e7c:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8007e80:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	f040 822e 	bne.w	80082e6 <HAL_PCD_IRQHandler+0x542>
      {
        hpcd->LPM_State = LPM_L0;
 8007e8a:	2100      	movs	r1, #0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007e8c:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8007e8e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007e92:	f000 fbcd 	bl	8008630 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007e96:	6822      	ldr	r2, [r4, #0]
 8007e98:	6953      	ldr	r3, [r2, #20]
 8007e9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e9e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007ea0:	6820      	ldr	r0, [r4, #0]
 8007ea2:	f005 faf3 	bl	800d48c <USB_ReadInterrupts>
 8007ea6:	0500      	lsls	r0, r0, #20
 8007ea8:	d50b      	bpl.n	8007ec2 <HAL_PCD_IRQHandler+0x11e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007eaa:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8007eae:	07d9      	lsls	r1, r3, #31
 8007eb0:	d502      	bpl.n	8007eb8 <HAL_PCD_IRQHandler+0x114>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f00b f8c0 	bl	8013038 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007eb8:	6822      	ldr	r2, [r4, #0]
 8007eba:	6953      	ldr	r3, [r2, #20]
 8007ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ec0:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007ec2:	6820      	ldr	r0, [r4, #0]
 8007ec4:	f005 fae2 	bl	800d48c <USB_ReadInterrupts>
 8007ec8:	0102      	lsls	r2, r0, #4
 8007eca:	d514      	bpl.n	8007ef6 <HAL_PCD_IRQHandler+0x152>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	695a      	ldr	r2, [r3, #20]
 8007ed0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007ed4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007ed6:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 8007eda:	2a00      	cmp	r2, #0
 8007edc:	f040 8207 	bne.w	80082ee <HAL_PCD_IRQHandler+0x54a>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8007ee2:	2101      	movs	r1, #1

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007ee4:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007ee6:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8007eea:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007eee:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007ef2:	f000 fb9d 	bl	8008630 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007ef6:	6820      	ldr	r0, [r4, #0]
 8007ef8:	f005 fac8 	bl	800d48c <USB_ReadInterrupts>
 8007efc:	04c3      	lsls	r3, r0, #19
 8007efe:	d535      	bpl.n	8007f6c <HAL_PCD_IRQHandler+0x1c8>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007f00:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 8007f04:	6873      	ldr	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007f06:	2110      	movs	r1, #16
 8007f08:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007f0a:	f023 0301 	bic.w	r3, r3, #1
 8007f0e:	6073      	str	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007f10:	f004 ff54 	bl	800cdbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f14:	6860      	ldr	r0, [r4, #4]
 8007f16:	f505 6310 	add.w	r3, r5, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007f1a:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f1e:	9a02      	ldr	r2, [sp, #8]
 8007f20:	4290      	cmp	r0, r2
 8007f22:	f040 81e8 	bne.w	80082f6 <HAL_PCD_IRQHandler+0x552>
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007f26:	69f3      	ldr	r3, [r6, #28]
 8007f28:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007f2c:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007f2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 8200 	beq.w	8008336 <HAL_PCD_IRQHandler+0x592>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007f36:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8007f3a:	f043 030b 	orr.w	r3, r3, #11
 8007f3e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007f42:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8007f44:	f043 030b 	orr.w	r3, r3, #11
 8007f48:	6473      	str	r3, [r6, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007f4a:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007f4e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007f52:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007f54:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007f58:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007f5a:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007f5e:	f005 fad9 	bl	800d514 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007f62:	6822      	ldr	r2, [r4, #0]
 8007f64:	6953      	ldr	r3, [r2, #20]
 8007f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f6a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007f6c:	6820      	ldr	r0, [r4, #0]
 8007f6e:	f005 fa8d 	bl	800d48c <USB_ReadInterrupts>
 8007f72:	0487      	lsls	r7, r0, #18
 8007f74:	d516      	bpl.n	8007fa4 <HAL_PCD_IRQHandler+0x200>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007f76:	6820      	ldr	r0, [r4, #0]
 8007f78:	f005 fabb 	bl	800d4f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007f7c:	6820      	ldr	r0, [r4, #0]
 8007f7e:	f004 ffff 	bl	800cf80 <USB_GetDevSpeed>

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007f82:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007f84:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007f86:	f000 ffd7 	bl	8008f38 <HAL_RCC_GetHCLKFreq>
 8007f8a:	7b22      	ldrb	r2, [r4, #12]
 8007f8c:	4601      	mov	r1, r0
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f004 fe7c 	bl	800cc8c <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007f94:	4620      	mov	r0, r4
 8007f96:	f00b f83c 	bl	8013012 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007f9a:	6822      	ldr	r2, [r4, #0]
 8007f9c:	6953      	ldr	r3, [r2, #20]
 8007f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fa2:	6153      	str	r3, [r2, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007fa4:	6820      	ldr	r0, [r4, #0]
 8007fa6:	f005 fa71 	bl	800d48c <USB_ReadInterrupts>
 8007faa:	0706      	lsls	r6, r0, #28
 8007fac:	d507      	bpl.n	8007fbe <HAL_PCD_IRQHandler+0x21a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f00b f82b 	bl	801300a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007fb4:	6822      	ldr	r2, [r4, #0]
 8007fb6:	6953      	ldr	r3, [r2, #20]
 8007fb8:	f003 0308 	and.w	r3, r3, #8
 8007fbc:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007fbe:	6820      	ldr	r0, [r4, #0]
 8007fc0:	f005 fa64 	bl	800d48c <USB_ReadInterrupts>
 8007fc4:	02c5      	lsls	r5, r0, #11
 8007fc6:	d508      	bpl.n	8007fda <HAL_PCD_IRQHandler+0x236>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007fc8:	2100      	movs	r1, #0
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f00b f854 	bl	8013078 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007fd0:	6822      	ldr	r2, [r4, #0]
 8007fd2:	6953      	ldr	r3, [r2, #20]
 8007fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fd8:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007fda:	6820      	ldr	r0, [r4, #0]
 8007fdc:	f005 fa56 	bl	800d48c <USB_ReadInterrupts>
 8007fe0:	0280      	lsls	r0, r0, #10
 8007fe2:	d508      	bpl.n	8007ff6 <HAL_PCD_IRQHandler+0x252>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f00b f842 	bl	8013070 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007fec:	6822      	ldr	r2, [r4, #0]
 8007fee:	6953      	ldr	r3, [r2, #20]
 8007ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ff4:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007ff6:	6820      	ldr	r0, [r4, #0]
 8007ff8:	f005 fa48 	bl	800d48c <USB_ReadInterrupts>
 8007ffc:	0041      	lsls	r1, r0, #1
 8007ffe:	d507      	bpl.n	8008010 <HAL_PCD_IRQHandler+0x26c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008000:	4620      	mov	r0, r4
 8008002:	f00b f83d 	bl	8013080 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008006:	6822      	ldr	r2, [r4, #0]
 8008008:	6953      	ldr	r3, [r2, #20]
 800800a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800800e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008010:	6820      	ldr	r0, [r4, #0]
 8008012:	f005 fa3b 	bl	800d48c <USB_ReadInterrupts>
 8008016:	0742      	lsls	r2, r0, #29
 8008018:	d50a      	bpl.n	8008030 <HAL_PCD_IRQHandler+0x28c>
    {
      temp = hpcd->Instance->GOTGINT;
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800801e:	076b      	lsls	r3, r5, #29
 8008020:	d502      	bpl.n	8008028 <HAL_PCD_IRQHandler+0x284>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008022:	4620      	mov	r0, r4
 8008024:	f00b f830 	bl	8013088 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008028:	6822      	ldr	r2, [r4, #0]
 800802a:	6853      	ldr	r3, [r2, #4]
 800802c:	432b      	orrs	r3, r5
 800802e:	6053      	str	r3, [r2, #4]
    }
  }
}
 8008030:	b007      	add	sp, #28
 8008032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008036:	2b06      	cmp	r3, #6
 8008038:	f47f aefb 	bne.w	8007e32 <HAL_PCD_IRQHandler+0x8e>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800803c:	271c      	movs	r7, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800803e:	2208      	movs	r2, #8
 8008040:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8008044:	4628      	mov	r0, r5
 8008046:	f005 f997 	bl	800d378 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800804a:	fb07 4708 	mla	r7, r7, r8, r4
 800804e:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8008052:	e6e9      	b.n	8007e28 <HAL_PCD_IRQHandler+0x84>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008054:	6820      	ldr	r0, [r4, #0]
      epnum = 0U;
 8008056:	2600      	movs	r6, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008058:	f005 fa1c 	bl	800d494 <USB_ReadDevAllOutEpInterrupt>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800805c:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 800834c <HAL_PCD_IRQHandler+0x5a8>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008060:	4680      	mov	r8, r0
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008062:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 8008350 <HAL_PCD_IRQHandler+0x5ac>
      while (ep_intr != 0U)
 8008066:	f1b8 0f00 	cmp.w	r8, #0
 800806a:	f43f aeed 	beq.w	8007e48 <HAL_PCD_IRQHandler+0xa4>
        if ((ep_intr & 0x1U) != 0U)
 800806e:	f018 0f01 	tst.w	r8, #1
 8008072:	d061      	beq.n	8008138 <HAL_PCD_IRQHandler+0x394>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008074:	fa5f fa86 	uxtb.w	sl, r6
 8008078:	6820      	ldr	r0, [r4, #0]
 800807a:	4651      	mov	r1, sl
 800807c:	f005 fa1a 	bl	800d4b4 <USB_ReadDevOutEPInterrupt>
 8008080:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008082:	07f8      	lsls	r0, r7, #31
 8008084:	d51c      	bpl.n	80080c0 <HAL_PCD_IRQHandler+0x31c>
 8008086:	0173      	lsls	r3, r6, #5
 8008088:	f505 6230 	add.w	r2, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800808c:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800808e:	6820      	ldr	r0, [r4, #0]
 8008090:	441a      	add	r2, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008092:	6091      	str	r1, [r2, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008094:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 8008098:	6921      	ldr	r1, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800809a:	4413      	add	r3, r2
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800809c:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  if (hpcd->Init.dma_enable == 1U)
 80080a0:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80080a2:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 80080a4:	d16d      	bne.n	8008182 <HAL_PCD_IRQHandler+0x3de>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80080a6:	0711      	lsls	r1, r2, #28
 80080a8:	d506      	bpl.n	80080b8 <HAL_PCD_IRQHandler+0x314>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080aa:	45cc      	cmp	ip, r9
 80080ac:	d908      	bls.n	80080c0 <HAL_PCD_IRQHandler+0x31c>
 80080ae:	0410      	lsls	r0, r2, #16
 80080b0:	d506      	bpl.n	80080c0 <HAL_PCD_IRQHandler+0x31c>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80080b6:	e002      	b.n	80080be <HAL_PCD_IRQHandler+0x31a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80080b8:	0691      	lsls	r1, r2, #26
 80080ba:	d541      	bpl.n	8008140 <HAL_PCD_IRQHandler+0x39c>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80080bc:	2220      	movs	r2, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080be:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80080c0:	0738      	lsls	r0, r7, #28
 80080c2:	d520      	bpl.n	8008106 <HAL_PCD_IRQHandler+0x362>
 80080c4:	0173      	lsls	r3, r6, #5
 80080c6:	f505 6230 	add.w	r2, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80080ca:	2108      	movs	r1, #8
 80080cc:	441a      	add	r2, r3
 80080ce:	6091      	str	r1, [r2, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080d0:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80080d2:	f8d2 a040 	ldr.w	sl, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80080d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080da:	45ca      	cmp	sl, r9
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80080dc:	4413      	add	r3, r2
 80080de:	689a      	ldr	r2, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080e0:	d904      	bls.n	80080ec <HAL_PCD_IRQHandler+0x348>
 80080e2:	0411      	lsls	r1, r2, #16
 80080e4:	d502      	bpl.n	80080ec <HAL_PCD_IRQHandler+0x348>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80080ea:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80080ec:	4620      	mov	r0, r4
 80080ee:	f00a ff75 	bl	8012fdc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80080f2:	45ca      	cmp	sl, r9
 80080f4:	d907      	bls.n	8008106 <HAL_PCD_IRQHandler+0x362>
 80080f6:	6921      	ldr	r1, [r4, #16]
 80080f8:	2901      	cmp	r1, #1
 80080fa:	d104      	bne.n	8008106 <HAL_PCD_IRQHandler+0x362>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80080fc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008100:	6820      	ldr	r0, [r4, #0]
 8008102:	f005 fa07 	bl	800d514 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008106:	06fa      	lsls	r2, r7, #27
 8008108:	d505      	bpl.n	8008116 <HAL_PCD_IRQHandler+0x372>
 800810a:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800810e:	2210      	movs	r2, #16
 8008110:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8008114:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008116:	06bb      	lsls	r3, r7, #26
 8008118:	d505      	bpl.n	8008126 <HAL_PCD_IRQHandler+0x382>
 800811a:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800811e:	2220      	movs	r2, #32
 8008120:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8008124:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008126:	04bf      	lsls	r7, r7, #18
 8008128:	d506      	bpl.n	8008138 <HAL_PCD_IRQHandler+0x394>
 800812a:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800812e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008132:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8008136:	609a      	str	r2, [r3, #8]
        epnum++;
 8008138:	3601      	adds	r6, #1
        ep_intr >>= 1U;
 800813a:	ea4f 0858 	mov.w	r8, r8, lsr #1
 800813e:	e792      	b.n	8008066 <HAL_PCD_IRQHandler+0x2c2>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008140:	f012 0f28 	tst.w	r2, #40	; 0x28
 8008144:	d1bc      	bne.n	80080c0 <HAL_PCD_IRQHandler+0x31c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008146:	45cc      	cmp	ip, r9
 8008148:	d901      	bls.n	800814e <HAL_PCD_IRQHandler+0x3aa>
 800814a:	0412      	lsls	r2, r2, #16
 800814c:	d4b1      	bmi.n	80080b2 <HAL_PCD_IRQHandler+0x30e>
 800814e:	221c      	movs	r2, #28
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	fb02 4206 	mla	r2, r2, r6, r4
 8008156:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800815a:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 800815e:	1acb      	subs	r3, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008160:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008164:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8008168:	4419      	add	r1, r3
 800816a:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800816e:	b986      	cbnz	r6, 8008192 <HAL_PCD_IRQHandler+0x3ee>
 8008170:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8008174:	b96b      	cbnz	r3, 8008192 <HAL_PCD_IRQHandler+0x3ee>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008176:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800817a:	2101      	movs	r1, #1
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800817c:	f005 f9ca 	bl	800d514 <USB_EP0_OutStart>
 8008180:	e007      	b.n	8008192 <HAL_PCD_IRQHandler+0x3ee>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008182:	45dc      	cmp	ip, fp
 8008184:	d10a      	bne.n	800819c <HAL_PCD_IRQHandler+0x3f8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008186:	0411      	lsls	r1, r2, #16
 8008188:	d493      	bmi.n	80080b2 <HAL_PCD_IRQHandler+0x30e>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800818a:	0692      	lsls	r2, r2, #26
 800818c:	d501      	bpl.n	8008192 <HAL_PCD_IRQHandler+0x3ee>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800818e:	2220      	movs	r2, #32
 8008190:	609a      	str	r2, [r3, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008192:	4651      	mov	r1, sl
 8008194:	4620      	mov	r0, r4
 8008196:	f00a ff27 	bl	8012fe8 <HAL_PCD_DataOutStageCallback>
 800819a:	e791      	b.n	80080c0 <HAL_PCD_IRQHandler+0x31c>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800819c:	2e00      	cmp	r6, #0
 800819e:	d1f8      	bne.n	8008192 <HAL_PCD_IRQHandler+0x3ee>
 80081a0:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1f4      	bne.n	8008192 <HAL_PCD_IRQHandler+0x3ee>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80081a8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80081ac:	4631      	mov	r1, r6
 80081ae:	e7e5      	b.n	800817c <HAL_PCD_IRQHandler+0x3d8>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80081b0:	f01a 0f01 	tst.w	sl, #1
 80081b4:	d074      	beq.n	80082a0 <HAL_PCD_IRQHandler+0x4fc>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80081b6:	fa5f fb87 	uxtb.w	fp, r7
 80081ba:	6820      	ldr	r0, [r4, #0]
 80081bc:	4659      	mov	r1, fp
 80081be:	f005 f982 	bl	800d4c6 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80081c2:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80081c6:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80081c8:	d020      	beq.n	800820c <HAL_PCD_IRQHandler+0x468>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80081ca:	2001      	movs	r0, #1
 80081cc:	f007 020f 	and.w	r2, r7, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80081d0:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80081d4:	fa00 f202 	lsl.w	r2, r0, r2
            if (hpcd->Init.dma_enable == 1U)
 80081d8:	6921      	ldr	r1, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80081da:	ea23 0302 	bic.w	r3, r3, r2
            if (hpcd->Init.dma_enable == 1U)
 80081de:	4281      	cmp	r1, r0
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80081e0:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
 80081e4:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80081e8:	6098      	str	r0, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 80081ea:	d10b      	bne.n	8008204 <HAL_PCD_IRQHandler+0x460>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80081ec:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 80081f0:	4413      	add	r3, r2
 80081f2:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80081f4:	b937      	cbnz	r7, 8008204 <HAL_PCD_IRQHandler+0x460>
 80081f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80081f8:	b923      	cbnz	r3, 8008204 <HAL_PCD_IRQHandler+0x460>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80081fa:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80081fe:	6820      	ldr	r0, [r4, #0]
 8008200:	f005 f988 	bl	800d514 <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008204:	4659      	mov	r1, fp
 8008206:	4620      	mov	r0, r4
 8008208:	f00a fef7 	bl	8012ffa <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800820c:	f018 0f08 	tst.w	r8, #8
 8008210:	d003      	beq.n	800821a <HAL_PCD_IRQHandler+0x476>
 8008212:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008216:	2208      	movs	r2, #8
 8008218:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800821a:	f018 0f10 	tst.w	r8, #16
 800821e:	d003      	beq.n	8008228 <HAL_PCD_IRQHandler+0x484>
 8008220:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008224:	2210      	movs	r2, #16
 8008226:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008228:	f018 0f40 	tst.w	r8, #64	; 0x40
 800822c:	d003      	beq.n	8008236 <HAL_PCD_IRQHandler+0x492>
 800822e:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008232:	2240      	movs	r2, #64	; 0x40
 8008234:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008236:	f018 0f02 	tst.w	r8, #2
 800823a:	d003      	beq.n	8008244 <HAL_PCD_IRQHandler+0x4a0>
 800823c:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008240:	2202      	movs	r2, #2
 8008242:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008244:	f018 0f80 	tst.w	r8, #128	; 0x80
 8008248:	d02a      	beq.n	80082a0 <HAL_PCD_IRQHandler+0x4fc>
  if (ep->xfer_count > ep->xfer_len)
 800824a:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
 800824e:	429a      	cmp	r2, r3
 8008250:	d826      	bhi.n	80082a0 <HAL_PCD_IRQHandler+0x4fc>
  len = ep->xfer_len - ep->xfer_count;
 8008252:	1a9b      	subs	r3, r3, r2
  len32b = (len + 3U) / 4U;
 8008254:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8008256:	6821      	ldr	r1, [r4, #0]
 8008258:	4293      	cmp	r3, r2
 800825a:	9103      	str	r1, [sp, #12]
 800825c:	bf28      	it	cs
 800825e:	4613      	movcs	r3, r2
 8008260:	3303      	adds	r3, #3
 8008262:	089b      	lsrs	r3, r3, #2
 8008264:	9304      	str	r3, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008266:	f501 6310 	add.w	r3, r1, #2304	; 0x900
 800826a:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 800826e:	9305      	str	r3, [sp, #20]
 8008270:	9b05      	ldr	r3, [sp, #20]
 8008272:	9804      	ldr	r0, [sp, #16]
 8008274:	6999      	ldr	r1, [r3, #24]
 8008276:	b289      	uxth	r1, r1
 8008278:	4281      	cmp	r1, r0
 800827a:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
 800827e:	d214      	bcs.n	80082aa <HAL_PCD_IRQHandler+0x506>
  if (ep->xfer_len <= ep->xfer_count)
 8008280:	4293      	cmp	r3, r2
 8008282:	d80d      	bhi.n	80082a0 <HAL_PCD_IRQHandler+0x4fc>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008284:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008286:	f007 020f 	and.w	r2, r7, #15
 800828a:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800828c:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8008290:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008294:	fa01 f202 	lsl.w	r2, r1, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008298:	ea23 0302 	bic.w	r3, r3, r2
 800829c:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
        epnum++;
 80082a0:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 80082a2:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 80082a6:	361c      	adds	r6, #28
 80082a8:	e5db      	b.n	8007e62 <HAL_PCD_IRQHandler+0xbe>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d9ea      	bls.n	8008284 <HAL_PCD_IRQHandler+0x4e0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0e8      	beq.n	8008284 <HAL_PCD_IRQHandler+0x4e0>
    len = ep->xfer_len - ep->xfer_count;
 80082b2:	eba3 0802 	sub.w	r8, r3, r2
 80082b6:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80082b8:	465a      	mov	r2, fp
 80082ba:	9803      	ldr	r0, [sp, #12]
 80082bc:	4598      	cmp	r8, r3
 80082be:	bf28      	it	cs
 80082c0:	4698      	movcs	r8, r3
    len32b = (len + 3U) / 4U;
 80082c2:	f108 0303 	add.w	r3, r8, #3
 80082c6:	089b      	lsrs	r3, r3, #2
 80082c8:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80082ca:	7c23      	ldrb	r3, [r4, #16]
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	fa1f f388 	uxth.w	r3, r8
 80082d2:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80082d4:	f004 ff64 	bl	800d1a0 <USB_WritePacket>
    ep->xfer_buff  += len;
 80082d8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80082da:	4443      	add	r3, r8
 80082dc:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 80082de:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80082e0:	4443      	add	r3, r8
 80082e2:	6573      	str	r3, [r6, #84]	; 0x54
 80082e4:	e7c4      	b.n	8008270 <HAL_PCD_IRQHandler+0x4cc>
        HAL_PCD_ResumeCallback(hpcd);
 80082e6:	4620      	mov	r0, r4
 80082e8:	f00a febe 	bl	8013068 <HAL_PCD_ResumeCallback>
 80082ec:	e5d3      	b.n	8007e96 <HAL_PCD_IRQHandler+0xf2>
        HAL_PCD_SuspendCallback(hpcd);
 80082ee:	4620      	mov	r0, r4
 80082f0:	f00a fea2 	bl	8013038 <HAL_PCD_SuspendCallback>
 80082f4:	e5ff      	b.n	8007ef6 <HAL_PCD_IRQHandler+0x152>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80082f6:	6099      	str	r1, [r3, #8]
 80082f8:	3320      	adds	r3, #32
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80082fa:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80082fe:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008302:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008306:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800830a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800830e:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008312:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008316:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800831a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800831e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008322:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8008326:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800832a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800832e:	9a02      	ldr	r2, [sp, #8]
 8008330:	3201      	adds	r2, #1
 8008332:	9202      	str	r2, [sp, #8]
 8008334:	e5f3      	b.n	8007f1e <HAL_PCD_IRQHandler+0x17a>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008336:	6973      	ldr	r3, [r6, #20]
 8008338:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800833c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008340:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008342:	6933      	ldr	r3, [r6, #16]
 8008344:	f043 030b 	orr.w	r3, r3, #11
 8008348:	6133      	str	r3, [r6, #16]
 800834a:	e5fe      	b.n	8007f4a <HAL_PCD_IRQHandler+0x1a6>
 800834c:	4f54300a 	.word	0x4f54300a
 8008350:	4f54310a 	.word	0x4f54310a

08008354 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8008354:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8008358:	2a01      	cmp	r2, #1
{
 800835a:	b510      	push	{r4, lr}
 800835c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800835e:	d00b      	beq.n	8008378 <HAL_PCD_SetAddress+0x24>
 8008360:	2201      	movs	r2, #1
 8008362:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008366:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800836a:	6800      	ldr	r0, [r0, #0]
 800836c:	f005 f866 	bl	800d43c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008370:	2000      	movs	r0, #0
 8008372:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008376:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008378:	2002      	movs	r0, #2
 800837a:	e7fc      	b.n	8008376 <HAL_PCD_SetAddress+0x22>

0800837c <HAL_PCD_EP_Open>:
{
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	f001 050f 	and.w	r5, r1, #15
 8008382:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8008384:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008388:	f04f 061c 	mov.w	r6, #28
 800838c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 8008390:	ea4f 0080 	mov.w	r0, r0, lsl #2
 8008394:	d01f      	beq.n	80083d6 <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008396:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800839a:	fb06 4605 	mla	r6, r6, r5, r4
 800839e:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083a0:	4421      	add	r1, r4
    ep->is_in = 1U;
 80083a2:	f886 003d 	strb.w	r0, [r6, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 80083a6:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80083a8:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80083aa:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 80083ac:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80083ae:	b102      	cbz	r2, 80083b2 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 80083b0:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80083b2:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80083b4:	bf04      	itt	eq
 80083b6:	2300      	moveq	r3, #0
 80083b8:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80083ba:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d012      	beq.n	80083e8 <HAL_PCD_EP_Open+0x6c>
 80083c2:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80083c4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80083c6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80083ca:	f004 fde4 	bl	800cf96 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80083ce:	2000      	movs	r0, #0
 80083d0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80083d4:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083d6:	f500 71fe 	add.w	r1, r0, #508	; 0x1fc
    ep->is_in = 0U;
 80083da:	fb06 4605 	mla	r6, r6, r5, r4
 80083de:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083e0:	4421      	add	r1, r4
    ep->is_in = 0U;
 80083e2:	f886 01fd 	strb.w	r0, [r6, #509]	; 0x1fd
 80083e6:	e7de      	b.n	80083a6 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 80083e8:	2002      	movs	r0, #2
 80083ea:	e7f3      	b.n	80083d4 <HAL_PCD_EP_Open+0x58>

080083ec <HAL_PCD_EP_Close>:
{
 80083ec:	b510      	push	{r4, lr}
 80083ee:	4604      	mov	r4, r0
 80083f0:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 80083f4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80083f8:	f04f 021c 	mov.w	r2, #28
 80083fc:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8008400:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008404:	d016      	beq.n	8008434 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008406:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 800840a:	fb02 4200 	mla	r2, r2, r0, r4
 800840e:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008410:	4421      	add	r1, r4
    ep->is_in = 1U;
 8008412:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008416:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8008418:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800841c:	2b01      	cmp	r3, #1
 800841e:	d012      	beq.n	8008446 <HAL_PCD_EP_Close+0x5a>
 8008420:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008422:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008424:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008428:	f004 fdf4 	bl	800d014 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800842c:	2000      	movs	r0, #0
 800842e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008432:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008434:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8008438:	fb02 4200 	mla	r2, r2, r0, r4
 800843c:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800843e:	4421      	add	r1, r4
    ep->is_in = 0U;
 8008440:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 8008444:	e7e7      	b.n	8008416 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8008446:	2002      	movs	r0, #2
 8008448:	e7f3      	b.n	8008432 <HAL_PCD_EP_Close+0x46>

0800844a <HAL_PCD_EP_Receive>:
{
 800844a:	b538      	push	{r3, r4, r5, lr}
 800844c:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008450:	241c      	movs	r4, #28
 8008452:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8008456:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800845a:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800845e:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8008462:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8008464:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8008468:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 800846c:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8008470:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8008474:	6903      	ldr	r3, [r0, #16]
 8008476:	6800      	ldr	r0, [r0, #0]
 8008478:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800847a:	bf08      	it	eq
 800847c:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 8008480:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008482:	b91d      	cbnz	r5, 800848c <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008484:	f004 fe18 	bl	800d0b8 <USB_EP0StartXfer>
}
 8008488:	2000      	movs	r0, #0
 800848a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800848c:	f004 fe9c 	bl	800d1c8 <USB_EPStartXfer>
 8008490:	e7fa      	b.n	8008488 <HAL_PCD_EP_Receive+0x3e>

08008492 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008492:	231c      	movs	r3, #28
 8008494:	f001 010f 	and.w	r1, r1, #15
 8008498:	fb03 0101 	mla	r1, r3, r1, r0
}
 800849c:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 80084a0:	4770      	bx	lr

080084a2 <HAL_PCD_EP_Transmit>:
{
 80084a2:	b538      	push	{r3, r4, r5, lr}
 80084a4:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084a8:	241c      	movs	r4, #28
 80084aa:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80084ae:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084b2:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 80084b4:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 80084b6:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 80084b8:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 80084ba:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 80084bc:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80084be:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 80084c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 80084c6:	6903      	ldr	r3, [r0, #16]
 80084c8:	6800      	ldr	r0, [r0, #0]
 80084ca:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80084cc:	bf08      	it	eq
 80084ce:	64e2      	streq	r2, [r4, #76]	; 0x4c
 80084d0:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80084d2:	b91d      	cbnz	r5, 80084dc <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80084d4:	f004 fdf0 	bl	800d0b8 <USB_EP0StartXfer>
}
 80084d8:	2000      	movs	r0, #0
 80084da:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80084dc:	f004 fe74 	bl	800d1c8 <USB_EPStartXfer>
 80084e0:	e7fa      	b.n	80084d8 <HAL_PCD_EP_Transmit+0x36>

080084e2 <HAL_PCD_EP_SetStall>:
{
 80084e2:	b538      	push	{r3, r4, r5, lr}
 80084e4:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80084e8:	6843      	ldr	r3, [r0, #4]
{
 80084ea:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80084ec:	429d      	cmp	r5, r3
 80084ee:	d82e      	bhi.n	800854e <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 80084f0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80084f4:	f04f 021c 	mov.w	r2, #28
 80084f8:	d01f      	beq.n	800853a <HAL_PCD_EP_SetStall+0x58>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084fa:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 80084fe:	fb02 0105 	mla	r1, r2, r5, r0
 8008502:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008504:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8008506:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 800850a:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800850c:	701d      	strb	r5, [r3, #0]
  ep->is_stall = 1U;
 800850e:	709a      	strb	r2, [r3, #2]
  __HAL_LOCK(hpcd);
 8008510:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8008514:	4291      	cmp	r1, r2
 8008516:	d01c      	beq.n	8008552 <HAL_PCD_EP_SetStall+0x70>
 8008518:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800851c:	4619      	mov	r1, r3
 800851e:	6820      	ldr	r0, [r4, #0]
 8008520:	f004 ff38 	bl	800d394 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008524:	b92d      	cbnz	r5, 8008532 <HAL_PCD_EP_SetStall+0x50>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008526:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800852a:	7c21      	ldrb	r1, [r4, #16]
 800852c:	6820      	ldr	r0, [r4, #0]
 800852e:	f004 fff1 	bl	800d514 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8008532:	2000      	movs	r0, #0
 8008534:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008538:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800853a:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 800853e:	fb02 0101 	mla	r1, r2, r1, r0
 8008542:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8008544:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8008548:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 800854c:	e7dd      	b.n	800850a <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 800854e:	2001      	movs	r0, #1
 8008550:	e7f2      	b.n	8008538 <HAL_PCD_EP_SetStall+0x56>
  __HAL_LOCK(hpcd);
 8008552:	2002      	movs	r0, #2
 8008554:	e7f0      	b.n	8008538 <HAL_PCD_EP_SetStall+0x56>

08008556 <HAL_PCD_EP_ClrStall>:
{
 8008556:	b538      	push	{r3, r4, r5, lr}
 8008558:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800855c:	6843      	ldr	r3, [r0, #4]
{
 800855e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008560:	429a      	cmp	r2, r3
 8008562:	d82a      	bhi.n	80085ba <HAL_PCD_EP_ClrStall+0x64>
 8008564:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8008568:	f011 0f80 	tst.w	r1, #128	; 0x80
 800856c:	f04f 001c 	mov.w	r0, #28
 8008570:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008574:	d018      	beq.n	80085a8 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008576:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 800857a:	fb00 4002 	mla	r0, r0, r2, r4
 800857e:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008580:	4421      	add	r1, r4
    ep->is_in = 1U;
 8008582:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 0U;
 8008586:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8008588:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800858a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800858c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8008590:	2b01      	cmp	r3, #1
 8008592:	d014      	beq.n	80085be <HAL_PCD_EP_ClrStall+0x68>
 8008594:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008596:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008598:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800859c:	f004 ff25 	bl	800d3ea <USB_EPClearStall>
  return HAL_OK;
 80085a0:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80085a2:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80085a8:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80085ac:	fb00 4002 	mla	r0, r0, r2, r4
 80085b0:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80085b2:	4421      	add	r1, r4
    ep->is_in = 0U;
 80085b4:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 80085b8:	e7e5      	b.n	8008586 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 80085ba:	2001      	movs	r0, #1
 80085bc:	e7f3      	b.n	80085a6 <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 80085be:	2002      	movs	r0, #2
 80085c0:	e7f1      	b.n	80085a6 <HAL_PCD_EP_ClrStall+0x50>

080085c2 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80085c2:	6800      	ldr	r0, [r0, #0]
 80085c4:	0412      	lsls	r2, r2, #16
{
 80085c6:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80085c8:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if (fifo == 0U)
 80085ca:	b919      	cbnz	r1, 80085d4 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80085cc:	4322      	orrs	r2, r4
 80085ce:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80085d0:	2000      	movs	r0, #0
 80085d2:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80085d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80085d6:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80085d8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80085dc:	2300      	movs	r3, #0
 80085de:	1c5e      	adds	r6, r3, #1
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	429d      	cmp	r5, r3
 80085e4:	d805      	bhi.n	80085f2 <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80085e6:	313f      	adds	r1, #63	; 0x3f
 80085e8:	4322      	orrs	r2, r4
 80085ea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80085ee:	6042      	str	r2, [r0, #4]
 80085f0:	e7ee      	b.n	80085d0 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80085f2:	3340      	adds	r3, #64	; 0x40
 80085f4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80085fe:	4633      	mov	r3, r6
 8008600:	e7ed      	b.n	80085de <HAL_PCDEx_SetTxFiFo+0x1c>

08008602 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8008602:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8008604:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8008606:	6259      	str	r1, [r3, #36]	; 0x24
}
 8008608:	4770      	bx	lr

0800860a <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 800860a:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800860c:	6802      	ldr	r2, [r0, #0]
{
 800860e:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8008610:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8008614:	2000      	movs	r0, #0
 8008616:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800861a:	6993      	ldr	r3, [r2, #24]
 800861c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008620:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008622:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008628:	f043 0303 	orr.w	r3, r3, #3
 800862c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800862e:	4770      	bx	lr

08008630 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008630:	4770      	bx	lr
	...

08008634 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008634:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008636:	4c10      	ldr	r4, [pc, #64]	; (8008678 <HAL_PWREx_ConfigSupply+0x44>)
 8008638:	68e3      	ldr	r3, [r4, #12]
 800863a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800863e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008640:	d105      	bne.n	800864e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008642:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008646:	1a18      	subs	r0, r3, r0
 8008648:	bf18      	it	ne
 800864a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800864c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800864e:	f023 0307 	bic.w	r3, r3, #7
 8008652:	4318      	orrs	r0, r3
 8008654:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8008656:	f7fd f9c1 	bl	80059dc <HAL_GetTick>
 800865a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800865c:	6863      	ldr	r3, [r4, #4]
 800865e:	049b      	lsls	r3, r3, #18
 8008660:	d501      	bpl.n	8008666 <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 8008662:	2000      	movs	r0, #0
 8008664:	e7f2      	b.n	800864c <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008666:	f7fd f9b9 	bl	80059dc <HAL_GetTick>
 800866a:	1b40      	subs	r0, r0, r5
 800866c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008670:	d9f4      	bls.n	800865c <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8008672:	2001      	movs	r0, #1
 8008674:	e7ea      	b.n	800864c <HAL_PWREx_ConfigSupply+0x18>
 8008676:	bf00      	nop
 8008678:	58024800 	.word	0x58024800

0800867c <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800867c:	4a02      	ldr	r2, [pc, #8]	; (8008688 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800867e:	68d3      	ldr	r3, [r2, #12]
 8008680:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008684:	60d3      	str	r3, [r2, #12]
}
 8008686:	4770      	bx	lr
 8008688:	58024800 	.word	0x58024800

0800868c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800868c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800868e:	4604      	mov	r4, r0
 8008690:	b908      	cbnz	r0, 8008696 <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8008692:	2001      	movs	r0, #1
 8008694:	e08c      	b.n	80087b0 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008696:	6803      	ldr	r3, [r0, #0]
 8008698:	07d8      	lsls	r0, r3, #31
 800869a:	d45e      	bmi.n	800875a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	0799      	lsls	r1, r3, #30
 80086a0:	f100 80ac 	bmi.w	80087fc <HAL_RCC_OscConfig+0x170>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	06da      	lsls	r2, r3, #27
 80086a8:	d527      	bpl.n	80086fa <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086aa:	4ba8      	ldr	r3, [pc, #672]	; (800894c <HAL_RCC_OscConfig+0x2c0>)
 80086ac:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086b0:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80086b4:	2a08      	cmp	r2, #8
 80086b6:	d007      	beq.n	80086c8 <HAL_RCC_OscConfig+0x3c>
 80086b8:	2a18      	cmp	r2, #24
 80086ba:	f040 810a 	bne.w	80088d2 <HAL_RCC_OscConfig+0x246>
 80086be:	f001 0203 	and.w	r2, r1, #3
 80086c2:	2a01      	cmp	r2, #1
 80086c4:	f040 8105 	bne.w	80088d2 <HAL_RCC_OscConfig+0x246>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	05db      	lsls	r3, r3, #23
 80086cc:	d502      	bpl.n	80086d4 <HAL_RCC_OscConfig+0x48>
 80086ce:	69e3      	ldr	r3, [r4, #28]
 80086d0:	2b80      	cmp	r3, #128	; 0x80
 80086d2:	d1de      	bne.n	8008692 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086d4:	f7fd f99a 	bl	8005a0c <HAL_GetREVID>
 80086d8:	f241 0303 	movw	r3, #4099	; 0x1003
 80086dc:	6a21      	ldr	r1, [r4, #32]
 80086de:	4298      	cmp	r0, r3
 80086e0:	4b9a      	ldr	r3, [pc, #616]	; (800894c <HAL_RCC_OscConfig+0x2c0>)
 80086e2:	f200 80ef 	bhi.w	80088c4 <HAL_RCC_OscConfig+0x238>
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	2920      	cmp	r1, #32
 80086ea:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 80086ee:	bf0c      	ite	eq
 80086f0:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 80086f4:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 80086f8:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	0719      	lsls	r1, r3, #28
 80086fe:	f100 8129 	bmi.w	8008954 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	069a      	lsls	r2, r3, #26
 8008706:	f100 814a 	bmi.w	800899e <HAL_RCC_OscConfig+0x312>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	075d      	lsls	r5, r3, #29
 800870e:	d51e      	bpl.n	800874e <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8008710:	4d8f      	ldr	r5, [pc, #572]	; (8008950 <HAL_RCC_OscConfig+0x2c4>)
 8008712:	682b      	ldr	r3, [r5, #0]
 8008714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008718:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800871a:	f7fd f95f 	bl	80059dc <HAL_GetTick>
 800871e:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	05da      	lsls	r2, r3, #23
 8008724:	f140 8160 	bpl.w	80089e8 <HAL_RCC_OscConfig+0x35c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008728:	68a3      	ldr	r3, [r4, #8]
 800872a:	4d88      	ldr	r5, [pc, #544]	; (800894c <HAL_RCC_OscConfig+0x2c0>)
 800872c:	2b01      	cmp	r3, #1
 800872e:	f040 8162 	bne.w	80089f6 <HAL_RCC_OscConfig+0x36a>
 8008732:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008734:	f043 0301 	orr.w	r3, r3, #1
 8008738:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800873a:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800873e:	f7fd f94d 	bl	80059dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008742:	4e82      	ldr	r6, [pc, #520]	; (800894c <HAL_RCC_OscConfig+0x2c0>)
      tickstart = HAL_GetTick();
 8008744:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008746:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008748:	079b      	lsls	r3, r3, #30
 800874a:	f140 817a 	bpl.w	8008a42 <HAL_RCC_OscConfig+0x3b6>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800874e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008750:	2800      	cmp	r0, #0
 8008752:	f040 817d 	bne.w	8008a50 <HAL_RCC_OscConfig+0x3c4>
      }
    }
  }
  return HAL_OK;
 8008756:	2000      	movs	r0, #0
 8008758:	e02a      	b.n	80087b0 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800875a:	4b7c      	ldr	r3, [pc, #496]	; (800894c <HAL_RCC_OscConfig+0x2c0>)
 800875c:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800875e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008760:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008764:	2a10      	cmp	r2, #16
 8008766:	d005      	beq.n	8008774 <HAL_RCC_OscConfig+0xe8>
 8008768:	2a18      	cmp	r2, #24
 800876a:	d10a      	bne.n	8008782 <HAL_RCC_OscConfig+0xf6>
 800876c:	f001 0203 	and.w	r2, r1, #3
 8008770:	2a02      	cmp	r2, #2
 8008772:	d106      	bne.n	8008782 <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	039a      	lsls	r2, r3, #14
 8008778:	d590      	bpl.n	800869c <HAL_RCC_OscConfig+0x10>
 800877a:	6863      	ldr	r3, [r4, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d18d      	bne.n	800869c <HAL_RCC_OscConfig+0x10>
 8008780:	e787      	b.n	8008692 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008782:	6863      	ldr	r3, [r4, #4]
 8008784:	4d71      	ldr	r5, [pc, #452]	; (800894c <HAL_RCC_OscConfig+0x2c0>)
 8008786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800878a:	d112      	bne.n	80087b2 <HAL_RCC_OscConfig+0x126>
 800878c:	682b      	ldr	r3, [r5, #0]
 800878e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008792:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008794:	f7fd f922 	bl	80059dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008798:	4d6c      	ldr	r5, [pc, #432]	; (800894c <HAL_RCC_OscConfig+0x2c0>)
        tickstart = HAL_GetTick();
 800879a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	039b      	lsls	r3, r3, #14
 80087a0:	f53f af7c 	bmi.w	800869c <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087a4:	f7fd f91a 	bl	80059dc <HAL_GetTick>
 80087a8:	1b80      	subs	r0, r0, r6
 80087aa:	2864      	cmp	r0, #100	; 0x64
 80087ac:	d9f6      	bls.n	800879c <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 80087ae:	2003      	movs	r0, #3
}
 80087b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087b2:	b9a3      	cbnz	r3, 80087de <HAL_RCC_OscConfig+0x152>
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ba:	602b      	str	r3, [r5, #0]
 80087bc:	682b      	ldr	r3, [r5, #0]
 80087be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80087c4:	f7fd f90a 	bl	80059dc <HAL_GetTick>
 80087c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80087ca:	682b      	ldr	r3, [r5, #0]
 80087cc:	039f      	lsls	r7, r3, #14
 80087ce:	f57f af65 	bpl.w	800869c <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087d2:	f7fd f903 	bl	80059dc <HAL_GetTick>
 80087d6:	1b80      	subs	r0, r0, r6
 80087d8:	2864      	cmp	r0, #100	; 0x64
 80087da:	d9f6      	bls.n	80087ca <HAL_RCC_OscConfig+0x13e>
 80087dc:	e7e7      	b.n	80087ae <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087e2:	682b      	ldr	r3, [r5, #0]
 80087e4:	d103      	bne.n	80087ee <HAL_RCC_OscConfig+0x162>
 80087e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087ea:	602b      	str	r3, [r5, #0]
 80087ec:	e7ce      	b.n	800878c <HAL_RCC_OscConfig+0x100>
 80087ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087f2:	602b      	str	r3, [r5, #0]
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087fa:	e7ca      	b.n	8008792 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087fc:	4b53      	ldr	r3, [pc, #332]	; (800894c <HAL_RCC_OscConfig+0x2c0>)
 80087fe:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008800:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008802:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8008806:	d003      	beq.n	8008810 <HAL_RCC_OscConfig+0x184>
 8008808:	2a18      	cmp	r2, #24
 800880a:	d120      	bne.n	800884e <HAL_RCC_OscConfig+0x1c2>
 800880c:	078e      	lsls	r6, r1, #30
 800880e:	d11e      	bne.n	800884e <HAL_RCC_OscConfig+0x1c2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	075d      	lsls	r5, r3, #29
 8008814:	d503      	bpl.n	800881e <HAL_RCC_OscConfig+0x192>
 8008816:	68e3      	ldr	r3, [r4, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	f43f af3a 	beq.w	8008692 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800881e:	f7fd f8f5 	bl	8005a0c <HAL_GetREVID>
 8008822:	f241 0303 	movw	r3, #4099	; 0x1003
 8008826:	6921      	ldr	r1, [r4, #16]
 8008828:	4298      	cmp	r0, r3
 800882a:	4b48      	ldr	r3, [pc, #288]	; (800894c <HAL_RCC_OscConfig+0x2c0>)
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	d809      	bhi.n	8008844 <HAL_RCC_OscConfig+0x1b8>
 8008830:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8008834:	2940      	cmp	r1, #64	; 0x40
 8008836:	bf0c      	ite	eq
 8008838:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 800883c:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 8008840:	605a      	str	r2, [r3, #4]
 8008842:	e72f      	b.n	80086a4 <HAL_RCC_OscConfig+0x18>
 8008844:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8008848:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800884c:	e7f8      	b.n	8008840 <HAL_RCC_OscConfig+0x1b4>
 800884e:	4d3f      	ldr	r5, [pc, #252]	; (800894c <HAL_RCC_OscConfig+0x2c0>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008850:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008852:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008854:	b332      	cbz	r2, 80088a4 <HAL_RCC_OscConfig+0x218>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008856:	f023 0319 	bic.w	r3, r3, #25
 800885a:	4313      	orrs	r3, r2
 800885c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800885e:	f7fd f8bd 	bl	80059dc <HAL_GetTick>
 8008862:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	0758      	lsls	r0, r3, #29
 8008868:	d511      	bpl.n	800888e <HAL_RCC_OscConfig+0x202>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800886a:	f7fd f8cf 	bl	8005a0c <HAL_GetREVID>
 800886e:	f241 0303 	movw	r3, #4099	; 0x1003
 8008872:	6922      	ldr	r2, [r4, #16]
 8008874:	4298      	cmp	r0, r3
 8008876:	686b      	ldr	r3, [r5, #4]
 8008878:	d80f      	bhi.n	800889a <HAL_RCC_OscConfig+0x20e>
 800887a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800887e:	2a40      	cmp	r2, #64	; 0x40
 8008880:	bf0c      	ite	eq
 8008882:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8008886:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800888a:	606b      	str	r3, [r5, #4]
 800888c:	e70a      	b.n	80086a4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800888e:	f7fd f8a5 	bl	80059dc <HAL_GetTick>
 8008892:	1b80      	subs	r0, r0, r6
 8008894:	2802      	cmp	r0, #2
 8008896:	d9e5      	bls.n	8008864 <HAL_RCC_OscConfig+0x1d8>
 8008898:	e789      	b.n	80087ae <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800889a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800889e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80088a2:	e7f2      	b.n	800888a <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_DISABLE();
 80088a4:	f023 0301 	bic.w	r3, r3, #1
 80088a8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80088aa:	f7fd f897 	bl	80059dc <HAL_GetTick>
 80088ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80088b0:	682b      	ldr	r3, [r5, #0]
 80088b2:	0759      	lsls	r1, r3, #29
 80088b4:	f57f aef6 	bpl.w	80086a4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088b8:	f7fd f890 	bl	80059dc <HAL_GetTick>
 80088bc:	1b80      	subs	r0, r0, r6
 80088be:	2802      	cmp	r0, #2
 80088c0:	d9f6      	bls.n	80088b0 <HAL_RCC_OscConfig+0x224>
 80088c2:	e774      	b.n	80087ae <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 80088ca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80088ce:	60da      	str	r2, [r3, #12]
 80088d0:	e713      	b.n	80086fa <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80088d2:	69e3      	ldr	r3, [r4, #28]
 80088d4:	4d1d      	ldr	r5, [pc, #116]	; (800894c <HAL_RCC_OscConfig+0x2c0>)
 80088d6:	b343      	cbz	r3, 800892a <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_CSI_ENABLE();
 80088d8:	682b      	ldr	r3, [r5, #0]
 80088da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80088e0:	f7fd f87c 	bl	80059dc <HAL_GetTick>
 80088e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80088e6:	682b      	ldr	r3, [r5, #0]
 80088e8:	05df      	lsls	r7, r3, #23
 80088ea:	d511      	bpl.n	8008910 <HAL_RCC_OscConfig+0x284>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088ec:	f7fd f88e 	bl	8005a0c <HAL_GetREVID>
 80088f0:	f241 0303 	movw	r3, #4099	; 0x1003
 80088f4:	6a22      	ldr	r2, [r4, #32]
 80088f6:	4298      	cmp	r0, r3
 80088f8:	d810      	bhi.n	800891c <HAL_RCC_OscConfig+0x290>
 80088fa:	686b      	ldr	r3, [r5, #4]
 80088fc:	2a20      	cmp	r2, #32
 80088fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008902:	bf0c      	ite	eq
 8008904:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8008908:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800890c:	606b      	str	r3, [r5, #4]
 800890e:	e6f4      	b.n	80086fa <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008910:	f7fd f864 	bl	80059dc <HAL_GetTick>
 8008914:	1b80      	subs	r0, r0, r6
 8008916:	2802      	cmp	r0, #2
 8008918:	d9e5      	bls.n	80088e6 <HAL_RCC_OscConfig+0x25a>
 800891a:	e748      	b.n	80087ae <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800891c:	68eb      	ldr	r3, [r5, #12]
 800891e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008922:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008926:	60eb      	str	r3, [r5, #12]
 8008928:	e6e7      	b.n	80086fa <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_CSI_DISABLE();
 800892a:	682b      	ldr	r3, [r5, #0]
 800892c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008930:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008932:	f7fd f853 	bl	80059dc <HAL_GetTick>
 8008936:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	05d8      	lsls	r0, r3, #23
 800893c:	f57f aedd 	bpl.w	80086fa <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008940:	f7fd f84c 	bl	80059dc <HAL_GetTick>
 8008944:	1b80      	subs	r0, r0, r6
 8008946:	2802      	cmp	r0, #2
 8008948:	d9f6      	bls.n	8008938 <HAL_RCC_OscConfig+0x2ac>
 800894a:	e730      	b.n	80087ae <HAL_RCC_OscConfig+0x122>
 800894c:	58024400 	.word	0x58024400
 8008950:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008954:	6963      	ldr	r3, [r4, #20]
 8008956:	4d96      	ldr	r5, [pc, #600]	; (8008bb0 <HAL_RCC_OscConfig+0x524>)
 8008958:	b183      	cbz	r3, 800897c <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_LSI_ENABLE();
 800895a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800895c:	f043 0301 	orr.w	r3, r3, #1
 8008960:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008962:	f7fd f83b 	bl	80059dc <HAL_GetTick>
 8008966:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008968:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800896a:	079b      	lsls	r3, r3, #30
 800896c:	f53f aec9 	bmi.w	8008702 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008970:	f7fd f834 	bl	80059dc <HAL_GetTick>
 8008974:	1b80      	subs	r0, r0, r6
 8008976:	2802      	cmp	r0, #2
 8008978:	d9f6      	bls.n	8008968 <HAL_RCC_OscConfig+0x2dc>
 800897a:	e718      	b.n	80087ae <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800897c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800897e:	f023 0301 	bic.w	r3, r3, #1
 8008982:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008984:	f7fd f82a 	bl	80059dc <HAL_GetTick>
 8008988:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800898a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800898c:	079f      	lsls	r7, r3, #30
 800898e:	f57f aeb8 	bpl.w	8008702 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008992:	f7fd f823 	bl	80059dc <HAL_GetTick>
 8008996:	1b80      	subs	r0, r0, r6
 8008998:	2802      	cmp	r0, #2
 800899a:	d9f6      	bls.n	800898a <HAL_RCC_OscConfig+0x2fe>
 800899c:	e707      	b.n	80087ae <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800899e:	69a3      	ldr	r3, [r4, #24]
 80089a0:	4d83      	ldr	r5, [pc, #524]	; (8008bb0 <HAL_RCC_OscConfig+0x524>)
 80089a2:	b183      	cbz	r3, 80089c6 <HAL_RCC_OscConfig+0x33a>
      __HAL_RCC_HSI48_ENABLE();
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80089aa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80089ac:	f7fd f816 	bl	80059dc <HAL_GetTick>
 80089b0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80089b2:	682b      	ldr	r3, [r5, #0]
 80089b4:	0498      	lsls	r0, r3, #18
 80089b6:	f53f aea8 	bmi.w	800870a <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80089ba:	f7fd f80f 	bl	80059dc <HAL_GetTick>
 80089be:	1b80      	subs	r0, r0, r6
 80089c0:	2802      	cmp	r0, #2
 80089c2:	d9f6      	bls.n	80089b2 <HAL_RCC_OscConfig+0x326>
 80089c4:	e6f3      	b.n	80087ae <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 80089c6:	682b      	ldr	r3, [r5, #0]
 80089c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089cc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80089ce:	f7fd f805 	bl	80059dc <HAL_GetTick>
 80089d2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	0499      	lsls	r1, r3, #18
 80089d8:	f57f ae97 	bpl.w	800870a <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80089dc:	f7fc fffe 	bl	80059dc <HAL_GetTick>
 80089e0:	1b80      	subs	r0, r0, r6
 80089e2:	2802      	cmp	r0, #2
 80089e4:	d9f6      	bls.n	80089d4 <HAL_RCC_OscConfig+0x348>
 80089e6:	e6e2      	b.n	80087ae <HAL_RCC_OscConfig+0x122>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80089e8:	f7fc fff8 	bl	80059dc <HAL_GetTick>
 80089ec:	1b80      	subs	r0, r0, r6
 80089ee:	2864      	cmp	r0, #100	; 0x64
 80089f0:	f67f ae96 	bls.w	8008720 <HAL_RCC_OscConfig+0x94>
 80089f4:	e6db      	b.n	80087ae <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089f6:	b9b3      	cbnz	r3, 8008a26 <HAL_RCC_OscConfig+0x39a>
 80089f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089fa:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089fe:	f023 0301 	bic.w	r3, r3, #1
 8008a02:	672b      	str	r3, [r5, #112]	; 0x70
 8008a04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008a06:	f023 0304 	bic.w	r3, r3, #4
 8008a0a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008a0c:	f7fc ffe6 	bl	80059dc <HAL_GetTick>
 8008a10:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a12:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008a14:	0798      	lsls	r0, r3, #30
 8008a16:	f57f ae9a 	bpl.w	800874e <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a1a:	f7fc ffdf 	bl	80059dc <HAL_GetTick>
 8008a1e:	1b80      	subs	r0, r0, r6
 8008a20:	42b8      	cmp	r0, r7
 8008a22:	d9f6      	bls.n	8008a12 <HAL_RCC_OscConfig+0x386>
 8008a24:	e6c3      	b.n	80087ae <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008a2a:	d103      	bne.n	8008a34 <HAL_RCC_OscConfig+0x3a8>
 8008a2c:	f043 0304 	orr.w	r3, r3, #4
 8008a30:	672b      	str	r3, [r5, #112]	; 0x70
 8008a32:	e67e      	b.n	8008732 <HAL_RCC_OscConfig+0xa6>
 8008a34:	f023 0301 	bic.w	r3, r3, #1
 8008a38:	672b      	str	r3, [r5, #112]	; 0x70
 8008a3a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008a3c:	f023 0304 	bic.w	r3, r3, #4
 8008a40:	e67a      	b.n	8008738 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a42:	f7fc ffcb 	bl	80059dc <HAL_GetTick>
 8008a46:	1bc0      	subs	r0, r0, r7
 8008a48:	42a8      	cmp	r0, r5
 8008a4a:	f67f ae7c 	bls.w	8008746 <HAL_RCC_OscConfig+0xba>
 8008a4e:	e6ae      	b.n	80087ae <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008a50:	4d57      	ldr	r5, [pc, #348]	; (8008bb0 <HAL_RCC_OscConfig+0x524>)
 8008a52:	692b      	ldr	r3, [r5, #16]
 8008a54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a58:	2b18      	cmp	r3, #24
 8008a5a:	d07a      	beq.n	8008b52 <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_PLL_DISABLE();
 8008a5c:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a5e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8008a60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a64:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a66:	d167      	bne.n	8008b38 <HAL_RCC_OscConfig+0x4ac>
        tickstart = HAL_GetTick();
 8008a68:	f7fc ffb8 	bl	80059dc <HAL_GetTick>
 8008a6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a6e:	682b      	ldr	r3, [r5, #0]
 8008a70:	0199      	lsls	r1, r3, #6
 8008a72:	d45b      	bmi.n	8008b2c <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a74:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008a76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008a78:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8008a7c:	f023 0303 	bic.w	r3, r3, #3
 8008a80:	4313      	orrs	r3, r2
 8008a82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008a84:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008a88:	62ab      	str	r3, [r5, #40]	; 0x28
 8008a8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	3a01      	subs	r2, #1
 8008a92:	025b      	lsls	r3, r3, #9
 8008a94:	0412      	lsls	r2, r2, #16
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008aa0:	3a01      	subs	r2, #1
 8008aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008aaa:	3a01      	subs	r2, #1
 8008aac:	0612      	lsls	r2, r2, #24
 8008aae:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8008ab6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008ab8:	f023 0301 	bic.w	r3, r3, #1
 8008abc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008abe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008ac0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ac6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008aca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008ace:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008ad0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008ad2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008ad4:	f023 030c 	bic.w	r3, r3, #12
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008adc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008ade:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008ae0:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ae4:	4c32      	ldr	r4, [pc, #200]	; (8008bb0 <HAL_RCC_OscConfig+0x524>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008aea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008af0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008af2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008af8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008afa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b00:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8008b02:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008b04:	f043 0301 	orr.w	r3, r3, #1
 8008b08:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8008b0a:	682b      	ldr	r3, [r5, #0]
 8008b0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008b12:	f7fc ff63 	bl	80059dc <HAL_GetTick>
 8008b16:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b18:	6823      	ldr	r3, [r4, #0]
 8008b1a:	019a      	lsls	r2, r3, #6
 8008b1c:	f53f ae1b 	bmi.w	8008756 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b20:	f7fc ff5c 	bl	80059dc <HAL_GetTick>
 8008b24:	1b40      	subs	r0, r0, r5
 8008b26:	2802      	cmp	r0, #2
 8008b28:	d9f6      	bls.n	8008b18 <HAL_RCC_OscConfig+0x48c>
 8008b2a:	e640      	b.n	80087ae <HAL_RCC_OscConfig+0x122>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b2c:	f7fc ff56 	bl	80059dc <HAL_GetTick>
 8008b30:	1b80      	subs	r0, r0, r6
 8008b32:	2802      	cmp	r0, #2
 8008b34:	d99b      	bls.n	8008a6e <HAL_RCC_OscConfig+0x3e2>
 8008b36:	e63a      	b.n	80087ae <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8008b38:	f7fc ff50 	bl	80059dc <HAL_GetTick>
 8008b3c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b3e:	682b      	ldr	r3, [r5, #0]
 8008b40:	019b      	lsls	r3, r3, #6
 8008b42:	f57f ae08 	bpl.w	8008756 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b46:	f7fc ff49 	bl	80059dc <HAL_GetTick>
 8008b4a:	1b00      	subs	r0, r0, r4
 8008b4c:	2802      	cmp	r0, #2
 8008b4e:	d9f6      	bls.n	8008b3e <HAL_RCC_OscConfig+0x4b2>
 8008b50:	e62d      	b.n	80087ae <HAL_RCC_OscConfig+0x122>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b52:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b54:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b56:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b58:	f43f ae2a 	beq.w	80087b0 <HAL_RCC_OscConfig+0x124>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b5c:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008b62:	4281      	cmp	r1, r0
 8008b64:	f47f ad95 	bne.w	8008692 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b68:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008b6e:	428a      	cmp	r2, r1
 8008b70:	f47f ad8f 	bne.w	8008692 <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b74:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008b76:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8008b7a:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b7c:	4291      	cmp	r1, r2
 8008b7e:	f47f ad88 	bne.w	8008692 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b82:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008b84:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8008b88:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b8a:	4291      	cmp	r1, r2
 8008b8c:	f47f ad81 	bne.w	8008692 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008b92:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8008b96:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b98:	4291      	cmp	r1, r2
 8008b9a:	f47f ad7a 	bne.w	8008692 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b9e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008ba0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008ba4:	3801      	subs	r0, #1
    return HAL_ERROR;
 8008ba6:	1a18      	subs	r0, r3, r0
 8008ba8:	bf18      	it	ne
 8008baa:	2001      	movne	r0, #1
 8008bac:	e600      	b.n	80087b0 <HAL_RCC_OscConfig+0x124>
 8008bae:	bf00      	nop
 8008bb0:	58024400 	.word	0x58024400

08008bb4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bb4:	4b46      	ldr	r3, [pc, #280]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x11c>)
 8008bb6:	691a      	ldr	r2, [r3, #16]
 8008bb8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008bbc:	2a10      	cmp	r2, #16
{
 8008bbe:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bc0:	f000 8084 	beq.w	8008ccc <HAL_RCC_GetSysClockFreq+0x118>
 8008bc4:	2a18      	cmp	r2, #24
 8008bc6:	d00c      	beq.n	8008be2 <HAL_RCC_GetSysClockFreq+0x2e>
 8008bc8:	b10a      	cbz	r2, 8008bce <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008bca:	4842      	ldr	r0, [pc, #264]	; (8008cd4 <HAL_RCC_GetSysClockFreq+0x120>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8008bcc:	bd10      	pop	{r4, pc}
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	4841      	ldr	r0, [pc, #260]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0x124>)
 8008bd2:	f012 0f20 	tst.w	r2, #32
 8008bd6:	d0f9      	beq.n	8008bcc <HAL_RCC_GetSysClockFreq+0x18>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008bde:	40d8      	lsrs	r0, r3
 8008be0:	e7f4      	b.n	8008bcc <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008be2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008be4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008be8:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008bec:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d0ec      	beq.n	8008bcc <HAL_RCC_GetSysClockFreq+0x18>
 8008bf2:	ee07 0a90 	vmov	s15, r0
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008bf6:	f002 0201 	and.w	r2, r2, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008bfa:	f3c4 00cc 	ubfx	r0, r4, #3, #13
 8008bfe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008c02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008c06:	4342      	muls	r2, r0
 8008c08:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c0c:	f001 0203 	and.w	r2, r1, #3
      switch (pllsource)
 8008c10:	2a01      	cmp	r2, #1
 8008c12:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8008c16:	d002      	beq.n	8008c1e <HAL_RCC_GetSysClockFreq+0x6a>
 8008c18:	d30f      	bcc.n	8008c3a <HAL_RCC_GetSysClockFreq+0x86>
 8008c1a:	2a02      	cmp	r2, #2
 8008c1c:	d048      	beq.n	8008cb0 <HAL_RCC_GetSysClockFreq+0xfc>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c24:	ee07 3a10 	vmov	s14, r3
 8008c28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c30:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008c34:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8008cdc <HAL_RCC_GetSysClockFreq+0x128>
 8008c38:	e037      	b.n	8008caa <HAL_RCC_GetSysClockFreq+0xf6>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	0692      	lsls	r2, r2, #26
 8008c3e:	d527      	bpl.n	8008c90 <HAL_RCC_GetSysClockFreq+0xdc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c40:	6819      	ldr	r1, [r3, #0]
 8008c42:	4a25      	ldr	r2, [pc, #148]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0x124>)
 8008c44:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c4a:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c50:	ee07 2a10 	vmov	s14, r2
 8008c54:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8008c58:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8008c5c:	ee06 3a90 	vmov	s13, r3
 8008c60:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008c64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c68:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008c6c:	4b18      	ldr	r3, [pc, #96]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x11c>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c74:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008c78:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008c7a:	ee07 3a10 	vmov	s14, r3
 8008c7e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008c82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008c86:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8008c8a:	ee17 0a90 	vmov	r0, s15
 8008c8e:	e79d      	b.n	8008bcc <HAL_RCC_GetSysClockFreq+0x18>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c96:	ee07 3a10 	vmov	s14, r3
 8008c9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ca2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008ca6:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8008ce0 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008caa:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008cae:	e7dd      	b.n	8008c6c <HAL_RCC_GetSysClockFreq+0xb8>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb6:	ee07 3a10 	vmov	s14, r3
 8008cba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cc2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008cc6:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8008ce4 <HAL_RCC_GetSysClockFreq+0x130>
 8008cca:	e7ee      	b.n	8008caa <HAL_RCC_GetSysClockFreq+0xf6>
    sysclockfreq = HSE_VALUE;
 8008ccc:	4806      	ldr	r0, [pc, #24]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x134>)
 8008cce:	e77d      	b.n	8008bcc <HAL_RCC_GetSysClockFreq+0x18>
 8008cd0:	58024400 	.word	0x58024400
 8008cd4:	003d0900 	.word	0x003d0900
 8008cd8:	03d09000 	.word	0x03d09000
 8008cdc:	4a742400 	.word	0x4a742400
 8008ce0:	4c742400 	.word	0x4c742400
 8008ce4:	4af42400 	.word	0x4af42400
 8008ce8:	007a1200 	.word	0x007a1200

08008cec <HAL_RCC_ClockConfig>:
{
 8008cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	b910      	cbnz	r0, 8008cfc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8008cf6:	2001      	movs	r0, #1
}
 8008cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008cfc:	4a88      	ldr	r2, [pc, #544]	; (8008f20 <HAL_RCC_ClockConfig+0x234>)
 8008cfe:	6813      	ldr	r3, [r2, #0]
 8008d00:	f003 030f 	and.w	r3, r3, #15
 8008d04:	428b      	cmp	r3, r1
 8008d06:	f0c0 8093 	bcc.w	8008e30 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	075f      	lsls	r7, r3, #29
 8008d0e:	f100 809b 	bmi.w	8008e48 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d12:	071e      	lsls	r6, r3, #28
 8008d14:	d50b      	bpl.n	8008d2e <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008d16:	4983      	ldr	r1, [pc, #524]	; (8008f24 <HAL_RCC_ClockConfig+0x238>)
 8008d18:	6966      	ldr	r6, [r4, #20]
 8008d1a:	69c8      	ldr	r0, [r1, #28]
 8008d1c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008d20:	4286      	cmp	r6, r0
 8008d22:	d904      	bls.n	8008d2e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d24:	69ca      	ldr	r2, [r1, #28]
 8008d26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008d2a:	4332      	orrs	r2, r6
 8008d2c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d2e:	06d8      	lsls	r0, r3, #27
 8008d30:	d50b      	bpl.n	8008d4a <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d32:	497c      	ldr	r1, [pc, #496]	; (8008f24 <HAL_RCC_ClockConfig+0x238>)
 8008d34:	69a6      	ldr	r6, [r4, #24]
 8008d36:	69c8      	ldr	r0, [r1, #28]
 8008d38:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8008d3c:	4286      	cmp	r6, r0
 8008d3e:	d904      	bls.n	8008d4a <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d40:	69ca      	ldr	r2, [r1, #28]
 8008d42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008d46:	4332      	orrs	r2, r6
 8008d48:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d4a:	0699      	lsls	r1, r3, #26
 8008d4c:	d50b      	bpl.n	8008d66 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d4e:	4975      	ldr	r1, [pc, #468]	; (8008f24 <HAL_RCC_ClockConfig+0x238>)
 8008d50:	69e6      	ldr	r6, [r4, #28]
 8008d52:	6a08      	ldr	r0, [r1, #32]
 8008d54:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008d58:	4286      	cmp	r6, r0
 8008d5a:	d904      	bls.n	8008d66 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d5c:	6a0a      	ldr	r2, [r1, #32]
 8008d5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008d62:	4332      	orrs	r2, r6
 8008d64:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d66:	079a      	lsls	r2, r3, #30
 8008d68:	d50b      	bpl.n	8008d82 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d6a:	496e      	ldr	r1, [pc, #440]	; (8008f24 <HAL_RCC_ClockConfig+0x238>)
 8008d6c:	68e6      	ldr	r6, [r4, #12]
 8008d6e:	6988      	ldr	r0, [r1, #24]
 8008d70:	f000 000f 	and.w	r0, r0, #15
 8008d74:	4286      	cmp	r6, r0
 8008d76:	d904      	bls.n	8008d82 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d78:	698a      	ldr	r2, [r1, #24]
 8008d7a:	f022 020f 	bic.w	r2, r2, #15
 8008d7e:	4332      	orrs	r2, r6
 8008d80:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d82:	07df      	lsls	r7, r3, #31
 8008d84:	d46e      	bmi.n	8008e64 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	079e      	lsls	r6, r3, #30
 8008d8a:	f100 80a1 	bmi.w	8008ed0 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d8e:	4964      	ldr	r1, [pc, #400]	; (8008f20 <HAL_RCC_ClockConfig+0x234>)
 8008d90:	680a      	ldr	r2, [r1, #0]
 8008d92:	f002 020f 	and.w	r2, r2, #15
 8008d96:	42aa      	cmp	r2, r5
 8008d98:	f200 80a8 	bhi.w	8008eec <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008d9c:	0758      	lsls	r0, r3, #29
 8008d9e:	f100 80b1 	bmi.w	8008f04 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008da2:	0719      	lsls	r1, r3, #28
 8008da4:	d50b      	bpl.n	8008dbe <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008da6:	495f      	ldr	r1, [pc, #380]	; (8008f24 <HAL_RCC_ClockConfig+0x238>)
 8008da8:	6965      	ldr	r5, [r4, #20]
 8008daa:	69c8      	ldr	r0, [r1, #28]
 8008dac:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008db0:	4285      	cmp	r5, r0
 8008db2:	d204      	bcs.n	8008dbe <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008db4:	69ca      	ldr	r2, [r1, #28]
 8008db6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008dba:	432a      	orrs	r2, r5
 8008dbc:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dbe:	06da      	lsls	r2, r3, #27
 8008dc0:	d50b      	bpl.n	8008dda <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008dc2:	4958      	ldr	r1, [pc, #352]	; (8008f24 <HAL_RCC_ClockConfig+0x238>)
 8008dc4:	69a5      	ldr	r5, [r4, #24]
 8008dc6:	69c8      	ldr	r0, [r1, #28]
 8008dc8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8008dcc:	4285      	cmp	r5, r0
 8008dce:	d204      	bcs.n	8008dda <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008dd0:	69ca      	ldr	r2, [r1, #28]
 8008dd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008dd6:	432a      	orrs	r2, r5
 8008dd8:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008dda:	069b      	lsls	r3, r3, #26
 8008ddc:	d50b      	bpl.n	8008df6 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008dde:	4a51      	ldr	r2, [pc, #324]	; (8008f24 <HAL_RCC_ClockConfig+0x238>)
 8008de0:	69e0      	ldr	r0, [r4, #28]
 8008de2:	6a11      	ldr	r1, [r2, #32]
 8008de4:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8008de8:	4288      	cmp	r0, r1
 8008dea:	d204      	bcs.n	8008df6 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008dec:	6a13      	ldr	r3, [r2, #32]
 8008dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df2:	4303      	orrs	r3, r0
 8008df4:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008df6:	f7ff fedd 	bl	8008bb4 <HAL_RCC_GetSysClockFreq>
 8008dfa:	494a      	ldr	r1, [pc, #296]	; (8008f24 <HAL_RCC_ClockConfig+0x238>)
 8008dfc:	4a4a      	ldr	r2, [pc, #296]	; (8008f28 <HAL_RCC_ClockConfig+0x23c>)
 8008dfe:	698b      	ldr	r3, [r1, #24]
 8008e00:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008e04:	5cd3      	ldrb	r3, [r2, r3]
 8008e06:	f003 031f 	and.w	r3, r3, #31
 8008e0a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e0c:	698b      	ldr	r3, [r1, #24]
 8008e0e:	f003 030f 	and.w	r3, r3, #15
 8008e12:	5cd3      	ldrb	r3, [r2, r3]
 8008e14:	4a45      	ldr	r2, [pc, #276]	; (8008f2c <HAL_RCC_ClockConfig+0x240>)
 8008e16:	f003 031f 	and.w	r3, r3, #31
 8008e1a:	fa20 f303 	lsr.w	r3, r0, r3
 8008e1e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8008e20:	4b43      	ldr	r3, [pc, #268]	; (8008f30 <HAL_RCC_ClockConfig+0x244>)
 8008e22:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8008e24:	4b43      	ldr	r3, [pc, #268]	; (8008f34 <HAL_RCC_ClockConfig+0x248>)
}
 8008e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8008e2a:	6818      	ldr	r0, [r3, #0]
 8008e2c:	f7fa ba18 	b.w	8003260 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e30:	6813      	ldr	r3, [r2, #0]
 8008e32:	f023 030f 	bic.w	r3, r3, #15
 8008e36:	430b      	orrs	r3, r1
 8008e38:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e3a:	6813      	ldr	r3, [r2, #0]
 8008e3c:	f003 030f 	and.w	r3, r3, #15
 8008e40:	428b      	cmp	r3, r1
 8008e42:	f47f af58 	bne.w	8008cf6 <HAL_RCC_ClockConfig+0xa>
 8008e46:	e760      	b.n	8008d0a <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e48:	4936      	ldr	r1, [pc, #216]	; (8008f24 <HAL_RCC_ClockConfig+0x238>)
 8008e4a:	6926      	ldr	r6, [r4, #16]
 8008e4c:	6988      	ldr	r0, [r1, #24]
 8008e4e:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008e52:	4286      	cmp	r6, r0
 8008e54:	f67f af5d 	bls.w	8008d12 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e58:	698a      	ldr	r2, [r1, #24]
 8008e5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008e5e:	4332      	orrs	r2, r6
 8008e60:	618a      	str	r2, [r1, #24]
 8008e62:	e756      	b.n	8008d12 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008e64:	4b2f      	ldr	r3, [pc, #188]	; (8008f24 <HAL_RCC_ClockConfig+0x238>)
 8008e66:	68a1      	ldr	r1, [r4, #8]
 8008e68:	699a      	ldr	r2, [r3, #24]
 8008e6a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e72:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e74:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e76:	2902      	cmp	r1, #2
 8008e78:	d11d      	bne.n	8008eb6 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e7a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e7e:	f43f af3a 	beq.w	8008cf6 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e82:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e84:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e88:	4e26      	ldr	r6, [pc, #152]	; (8008f24 <HAL_RCC_ClockConfig+0x238>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e8a:	f022 0207 	bic.w	r2, r2, #7
 8008e8e:	430a      	orrs	r2, r1
 8008e90:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8008e92:	f7fc fda3 	bl	80059dc <HAL_GetTick>
 8008e96:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e98:	6933      	ldr	r3, [r6, #16]
 8008e9a:	6862      	ldr	r2, [r4, #4]
 8008e9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ea0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8008ea4:	f43f af6f 	beq.w	8008d86 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ea8:	f7fc fd98 	bl	80059dc <HAL_GetTick>
 8008eac:	1bc0      	subs	r0, r0, r7
 8008eae:	4540      	cmp	r0, r8
 8008eb0:	d9f2      	bls.n	8008e98 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8008eb2:	2003      	movs	r0, #3
 8008eb4:	e720      	b.n	8008cf8 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008eb6:	2903      	cmp	r1, #3
 8008eb8:	d102      	bne.n	8008ec0 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008eba:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8008ebe:	e7de      	b.n	8008e7e <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008ec0:	2901      	cmp	r1, #1
 8008ec2:	d102      	bne.n	8008eca <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ec4:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008ec8:	e7d9      	b.n	8008e7e <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008eca:	f012 0f04 	tst.w	r2, #4
 8008ece:	e7d6      	b.n	8008e7e <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ed0:	4914      	ldr	r1, [pc, #80]	; (8008f24 <HAL_RCC_ClockConfig+0x238>)
 8008ed2:	68e6      	ldr	r6, [r4, #12]
 8008ed4:	6988      	ldr	r0, [r1, #24]
 8008ed6:	f000 000f 	and.w	r0, r0, #15
 8008eda:	4286      	cmp	r6, r0
 8008edc:	f4bf af57 	bcs.w	8008d8e <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ee0:	698a      	ldr	r2, [r1, #24]
 8008ee2:	f022 020f 	bic.w	r2, r2, #15
 8008ee6:	4332      	orrs	r2, r6
 8008ee8:	618a      	str	r2, [r1, #24]
 8008eea:	e750      	b.n	8008d8e <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008eec:	680a      	ldr	r2, [r1, #0]
 8008eee:	f022 020f 	bic.w	r2, r2, #15
 8008ef2:	432a      	orrs	r2, r5
 8008ef4:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ef6:	680a      	ldr	r2, [r1, #0]
 8008ef8:	f002 020f 	and.w	r2, r2, #15
 8008efc:	42aa      	cmp	r2, r5
 8008efe:	f47f aefa 	bne.w	8008cf6 <HAL_RCC_ClockConfig+0xa>
 8008f02:	e74b      	b.n	8008d9c <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f04:	4907      	ldr	r1, [pc, #28]	; (8008f24 <HAL_RCC_ClockConfig+0x238>)
 8008f06:	6925      	ldr	r5, [r4, #16]
 8008f08:	6988      	ldr	r0, [r1, #24]
 8008f0a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008f0e:	4285      	cmp	r5, r0
 8008f10:	f4bf af47 	bcs.w	8008da2 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f14:	698a      	ldr	r2, [r1, #24]
 8008f16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008f1a:	432a      	orrs	r2, r5
 8008f1c:	618a      	str	r2, [r1, #24]
 8008f1e:	e740      	b.n	8008da2 <HAL_RCC_ClockConfig+0xb6>
 8008f20:	52002000 	.word	0x52002000
 8008f24:	58024400 	.word	0x58024400
 8008f28:	08015494 	.word	0x08015494
 8008f2c:	24000004 	.word	0x24000004
 8008f30:	24000000 	.word	0x24000000
 8008f34:	2400001c 	.word	0x2400001c

08008f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f38:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008f3a:	f7ff fe3b 	bl	8008bb4 <HAL_RCC_GetSysClockFreq>
 8008f3e:	4a0b      	ldr	r2, [pc, #44]	; (8008f6c <HAL_RCC_GetHCLKFreq+0x34>)
 8008f40:	490b      	ldr	r1, [pc, #44]	; (8008f70 <HAL_RCC_GetHCLKFreq+0x38>)
 8008f42:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f44:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008f46:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f4a:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008f4e:	5ccb      	ldrb	r3, [r1, r3]
 8008f50:	f003 031f 	and.w	r3, r3, #31
 8008f54:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f58:	5c88      	ldrb	r0, [r1, r2]
 8008f5a:	4a06      	ldr	r2, [pc, #24]	; (8008f74 <HAL_RCC_GetHCLKFreq+0x3c>)
 8008f5c:	f000 001f 	and.w	r0, r0, #31
 8008f60:	fa23 f000 	lsr.w	r0, r3, r0
 8008f64:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f66:	4a04      	ldr	r2, [pc, #16]	; (8008f78 <HAL_RCC_GetHCLKFreq+0x40>)
 8008f68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008f6a:	bd08      	pop	{r3, pc}
 8008f6c:	58024400 	.word	0x58024400
 8008f70:	08015494 	.word	0x08015494
 8008f74:	24000004 	.word	0x24000004
 8008f78:	24000000 	.word	0x24000000

08008f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f7c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008f7e:	f7ff ffdb 	bl	8008f38 <HAL_RCC_GetHCLKFreq>
 8008f82:	4b05      	ldr	r3, [pc, #20]	; (8008f98 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008f84:	4a05      	ldr	r2, [pc, #20]	; (8008f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008f8c:	5cd3      	ldrb	r3, [r2, r3]
 8008f8e:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008f92:	40d8      	lsrs	r0, r3
 8008f94:	bd08      	pop	{r3, pc}
 8008f96:	bf00      	nop
 8008f98:	58024400 	.word	0x58024400
 8008f9c:	08015494 	.word	0x08015494

08008fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fa0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008fa2:	f7ff ffc9 	bl	8008f38 <HAL_RCC_GetHCLKFreq>
 8008fa6:	4b05      	ldr	r3, [pc, #20]	; (8008fbc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008fa8:	4a05      	ldr	r2, [pc, #20]	; (8008fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008faa:	69db      	ldr	r3, [r3, #28]
 8008fac:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008fb0:	5cd3      	ldrb	r3, [r2, r3]
 8008fb2:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008fb6:	40d8      	lsrs	r0, r3
 8008fb8:	bd08      	pop	{r3, pc}
 8008fba:	bf00      	nop
 8008fbc:	58024400 	.word	0x58024400
 8008fc0:	08015494 	.word	0x08015494

08008fc4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008fc4:	233f      	movs	r3, #63	; 0x3f
 8008fc6:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008fc8:	4b11      	ldr	r3, [pc, #68]	; (8009010 <HAL_RCC_GetClockConfig+0x4c>)
 8008fca:	691a      	ldr	r2, [r3, #16]
 8008fcc:	f002 0207 	and.w	r2, r2, #7
 8008fd0:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008fd2:	699a      	ldr	r2, [r3, #24]
 8008fd4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8008fd8:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008fda:	699a      	ldr	r2, [r3, #24]
 8008fdc:	f002 020f 	and.w	r2, r2, #15
 8008fe0:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008fe2:	699a      	ldr	r2, [r3, #24]
 8008fe4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008fe8:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008fea:	69da      	ldr	r2, [r3, #28]
 8008fec:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008ff0:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008ff2:	69da      	ldr	r2, [r3, #28]
 8008ff4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008ff8:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009000:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009002:	4b04      	ldr	r3, [pc, #16]	; (8009014 <HAL_RCC_GetClockConfig+0x50>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 030f 	and.w	r3, r3, #15
 800900a:	600b      	str	r3, [r1, #0]
}
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	58024400 	.word	0x58024400
 8009014:	52002000 	.word	0x52002000

08009018 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800901a:	4c3a      	ldr	r4, [pc, #232]	; (8009104 <RCCEx_PLL2_Config+0xec>)
{
 800901c:	4606      	mov	r6, r0
 800901e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009020:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	2b03      	cmp	r3, #3
 8009028:	d069      	beq.n	80090fe <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009030:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009032:	f7fc fcd3 	bl	80059dc <HAL_GetTick>
 8009036:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	011a      	lsls	r2, r3, #4
 800903c:	d44b      	bmi.n	80090d6 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800903e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009040:	6832      	ldr	r2, [r6, #0]
 8009042:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009046:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800904a:	62a3      	str	r3, [r4, #40]	; 0x28
 800904c:	68b3      	ldr	r3, [r6, #8]
 800904e:	68f2      	ldr	r2, [r6, #12]
 8009050:	3b01      	subs	r3, #1
 8009052:	3a01      	subs	r2, #1
 8009054:	025b      	lsls	r3, r3, #9
 8009056:	0412      	lsls	r2, r2, #16
 8009058:	b29b      	uxth	r3, r3
 800905a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800905e:	4313      	orrs	r3, r2
 8009060:	6872      	ldr	r2, [r6, #4]
 8009062:	3a01      	subs	r2, #1
 8009064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009068:	4313      	orrs	r3, r2
 800906a:	6932      	ldr	r2, [r6, #16]
 800906c:	3a01      	subs	r2, #1
 800906e:	0612      	lsls	r2, r2, #24
 8009070:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009074:	4313      	orrs	r3, r2
 8009076:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009078:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800907a:	6972      	ldr	r2, [r6, #20]
 800907c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009080:	4313      	orrs	r3, r2
 8009082:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009084:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009086:	69b2      	ldr	r2, [r6, #24]
 8009088:	f023 0320 	bic.w	r3, r3, #32
 800908c:	4313      	orrs	r3, r2
 800908e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009090:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009092:	f023 0310 	bic.w	r3, r3, #16
 8009096:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009098:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800909a:	69f2      	ldr	r2, [r6, #28]
 800909c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80090a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80090a8:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80090aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80090ac:	f043 0310 	orr.w	r3, r3, #16
 80090b0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80090b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80090b4:	b9b5      	cbnz	r5, 80090e4 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80090b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80090ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80090bc:	4c11      	ldr	r4, [pc, #68]	; (8009104 <RCCEx_PLL2_Config+0xec>)
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090c4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090c6:	f7fc fc89 	bl	80059dc <HAL_GetTick>
 80090ca:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	011b      	lsls	r3, r3, #4
 80090d0:	d50f      	bpl.n	80090f2 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 80090d2:	2000      	movs	r0, #0
 80090d4:	e005      	b.n	80090e2 <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80090d6:	f7fc fc81 	bl	80059dc <HAL_GetTick>
 80090da:	1bc0      	subs	r0, r0, r7
 80090dc:	2802      	cmp	r0, #2
 80090de:	d9ab      	bls.n	8009038 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 80090e0:	2003      	movs	r0, #3
}
 80090e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 80090e4:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80090e6:	bf0c      	ite	eq
 80090e8:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80090ec:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80090f0:	e7e3      	b.n	80090ba <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80090f2:	f7fc fc73 	bl	80059dc <HAL_GetTick>
 80090f6:	1b40      	subs	r0, r0, r5
 80090f8:	2802      	cmp	r0, #2
 80090fa:	d9e7      	bls.n	80090cc <RCCEx_PLL2_Config+0xb4>
 80090fc:	e7f0      	b.n	80090e0 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 80090fe:	2001      	movs	r0, #1
 8009100:	e7ef      	b.n	80090e2 <RCCEx_PLL2_Config+0xca>
 8009102:	bf00      	nop
 8009104:	58024400 	.word	0x58024400

08009108 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800910a:	4c3a      	ldr	r4, [pc, #232]	; (80091f4 <RCCEx_PLL3_Config+0xec>)
{
 800910c:	4606      	mov	r6, r0
 800910e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009110:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009112:	f003 0303 	and.w	r3, r3, #3
 8009116:	2b03      	cmp	r3, #3
 8009118:	d069      	beq.n	80091ee <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009120:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009122:	f7fc fc5b 	bl	80059dc <HAL_GetTick>
 8009126:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	009a      	lsls	r2, r3, #2
 800912c:	d44b      	bmi.n	80091c6 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800912e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009130:	6832      	ldr	r2, [r6, #0]
 8009132:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8009136:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800913a:	62a3      	str	r3, [r4, #40]	; 0x28
 800913c:	68b3      	ldr	r3, [r6, #8]
 800913e:	68f2      	ldr	r2, [r6, #12]
 8009140:	3b01      	subs	r3, #1
 8009142:	3a01      	subs	r2, #1
 8009144:	025b      	lsls	r3, r3, #9
 8009146:	0412      	lsls	r2, r2, #16
 8009148:	b29b      	uxth	r3, r3
 800914a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800914e:	4313      	orrs	r3, r2
 8009150:	6872      	ldr	r2, [r6, #4]
 8009152:	3a01      	subs	r2, #1
 8009154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009158:	4313      	orrs	r3, r2
 800915a:	6932      	ldr	r2, [r6, #16]
 800915c:	3a01      	subs	r2, #1
 800915e:	0612      	lsls	r2, r2, #24
 8009160:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009164:	4313      	orrs	r3, r2
 8009166:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009168:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800916a:	6972      	ldr	r2, [r6, #20]
 800916c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009170:	4313      	orrs	r3, r2
 8009172:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009174:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009176:	69b2      	ldr	r2, [r6, #24]
 8009178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800917c:	4313      	orrs	r3, r2
 800917e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009180:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009182:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009186:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009188:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800918a:	69f2      	ldr	r2, [r6, #28]
 800918c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009190:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009194:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009198:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800919a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800919c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091a0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80091a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80091a4:	b9b5      	cbnz	r5, 80091d4 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80091a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80091aa:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80091ac:	4c11      	ldr	r4, [pc, #68]	; (80091f4 <RCCEx_PLL3_Config+0xec>)
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091b4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091b6:	f7fc fc11 	bl	80059dc <HAL_GetTick>
 80091ba:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	d50f      	bpl.n	80091e2 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 80091c2:	2000      	movs	r0, #0
 80091c4:	e005      	b.n	80091d2 <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80091c6:	f7fc fc09 	bl	80059dc <HAL_GetTick>
 80091ca:	1bc0      	subs	r0, r0, r7
 80091cc:	2802      	cmp	r0, #2
 80091ce:	d9ab      	bls.n	8009128 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 80091d0:	2003      	movs	r0, #3
}
 80091d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 80091d4:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80091d6:	bf0c      	ite	eq
 80091d8:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80091dc:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80091e0:	e7e3      	b.n	80091aa <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80091e2:	f7fc fbfb 	bl	80059dc <HAL_GetTick>
 80091e6:	1b40      	subs	r0, r0, r5
 80091e8:	2802      	cmp	r0, #2
 80091ea:	d9e7      	bls.n	80091bc <RCCEx_PLL3_Config+0xb4>
 80091ec:	e7f0      	b.n	80091d0 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 80091ee:	2001      	movs	r0, #1
 80091f0:	e7ef      	b.n	80091d2 <RCCEx_PLL3_Config+0xca>
 80091f2:	bf00      	nop
 80091f4:	58024400 	.word	0x58024400

080091f8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80091f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80091fc:	6806      	ldr	r6, [r0, #0]
{
 80091fe:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009200:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8009204:	d023      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009206:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8009208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800920c:	d018      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x48>
 800920e:	d802      	bhi.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8009210:	b183      	cbz	r3, 8009234 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8009212:	2601      	movs	r6, #1
 8009214:	e01b      	b.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800921a:	d023      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800921c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009220:	d1f7      	bne.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009222:	4a9f      	ldr	r2, [pc, #636]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009224:	2600      	movs	r6, #0
 8009226:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009228:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800922a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800922e:	430b      	orrs	r3, r1
 8009230:	6513      	str	r3, [r2, #80]	; 0x50
 8009232:	e00c      	b.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009234:	4a9a      	ldr	r2, [pc, #616]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009236:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800923c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800923e:	e7f0      	b.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009240:	2102      	movs	r1, #2
 8009242:	3004      	adds	r0, #4
 8009244:	f7ff fee8 	bl	8009018 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009248:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800924a:	2800      	cmp	r0, #0
 800924c:	d0e9      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	05dd      	lsls	r5, r3, #23
 8009252:	d534      	bpl.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009254:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009256:	2b04      	cmp	r3, #4
 8009258:	d830      	bhi.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800925a:	e8df f003 	tbb	[pc, r3]
 800925e:	0f08      	.short	0x0f08
 8009260:	0d29      	.short	0x0d29
 8009262:	0d          	.byte	0x0d
 8009263:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009264:	2102      	movs	r1, #2
 8009266:	3024      	adds	r0, #36	; 0x24
 8009268:	f7ff ff4e 	bl	8009108 <RCCEx_PLL3_Config>
 800926c:	e7ec      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800926e:	4a8c      	ldr	r2, [pc, #560]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009270:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009276:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8009278:	4635      	mov	r5, r6
 800927a:	e004      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800927c:	2100      	movs	r1, #0
 800927e:	1d20      	adds	r0, r4, #4
 8009280:	f7ff feca 	bl	8009018 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009284:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009286:	b9e5      	cbnz	r5, 80092c2 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009288:	4a85      	ldr	r2, [pc, #532]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800928a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800928c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800928e:	f023 0307 	bic.w	r3, r3, #7
 8009292:	430b      	orrs	r3, r1
 8009294:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	0598      	lsls	r0, r3, #22
 800929a:	d521      	bpl.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai23ClockSelection)
 800929c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800929e:	2b80      	cmp	r3, #128	; 0x80
 80092a0:	d03b      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x122>
 80092a2:	d810      	bhi.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80092a4:	b36b      	cbz	r3, 8009302 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 80092a6:	2b40      	cmp	r3, #64	; 0x40
 80092a8:	d031      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x116>
      ret = HAL_ERROR;
 80092aa:	2601      	movs	r6, #1
 80092ac:	4635      	mov	r5, r6
 80092ae:	e017      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80092b0:	2100      	movs	r1, #0
 80092b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80092b6:	f7ff ff27 	bl	8009108 <RCCEx_PLL3_Config>
 80092ba:	e7e3      	b.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = HAL_ERROR;
 80092bc:	2601      	movs	r6, #1
 80092be:	4635      	mov	r5, r6
 80092c0:	e7e9      	b.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80092c2:	462e      	mov	r6, r5
 80092c4:	e7e7      	b.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 80092c6:	2bc0      	cmp	r3, #192	; 0xc0
 80092c8:	d002      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80092ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ce:	d1ec      	bne.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0xb2>
    if(ret == HAL_OK)
 80092d0:	bb4d      	cbnz	r5, 8009326 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80092d2:	4a73      	ldr	r2, [pc, #460]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80092d4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80092d6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80092d8:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80092dc:	430b      	orrs	r3, r1
 80092de:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	0559      	lsls	r1, r3, #21
 80092e4:	d530      	bpl.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 80092e6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80092ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092ee:	d047      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80092f0:	d81b      	bhi.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x132>
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d038      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x170>
 80092f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092fa:	d03b      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = HAL_ERROR;
 80092fc:	2601      	movs	r6, #1
 80092fe:	4635      	mov	r5, r6
 8009300:	e022      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009302:	4a67      	ldr	r2, [pc, #412]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009304:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800930a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800930c:	e7e0      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800930e:	2100      	movs	r1, #0
 8009310:	1d20      	adds	r0, r4, #4
 8009312:	f7ff fe81 	bl	8009018 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009316:	4605      	mov	r5, r0
      break;
 8009318:	e7da      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800931a:	2100      	movs	r1, #0
 800931c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009320:	f7ff fef2 	bl	8009108 <RCCEx_PLL3_Config>
 8009324:	e7f7      	b.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8009326:	462e      	mov	r6, r5
 8009328:	e7da      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai4AClockSelection)
 800932a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800932e:	d002      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8009330:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009334:	d1e2      	bne.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(ret == HAL_OK)
 8009336:	bb4d      	cbnz	r5, 800938c <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009338:	4a59      	ldr	r2, [pc, #356]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800933a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800933e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009340:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8009344:	430b      	orrs	r3, r1
 8009346:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	051a      	lsls	r2, r3, #20
 800934c:	d52f      	bpl.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Sai4BClockSelection)
 800934e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8009352:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009356:	d041      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009358:	d81a      	bhi.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800935a:	b39b      	cbz	r3, 80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800935c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009360:	d036      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      ret = HAL_ERROR;
 8009362:	2601      	movs	r6, #1
 8009364:	4635      	mov	r5, r6
 8009366:	e022      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009368:	4a4d      	ldr	r2, [pc, #308]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800936a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800936c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009370:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009372:	e7e0      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009374:	2100      	movs	r1, #0
 8009376:	1d20      	adds	r0, r4, #4
 8009378:	f7ff fe4e 	bl	8009018 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800937c:	4605      	mov	r5, r0
      break;
 800937e:	e7da      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009380:	2100      	movs	r1, #0
 8009382:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009386:	f7ff febf 	bl	8009108 <RCCEx_PLL3_Config>
 800938a:	e7f7      	b.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x184>
 800938c:	462e      	mov	r6, r5
 800938e:	e7db      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4BClockSelection)
 8009390:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009394:	d002      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009396:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800939a:	d1e2      	bne.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    if(ret == HAL_OK)
 800939c:	bb25      	cbnz	r5, 80093e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800939e:	4a40      	ldr	r2, [pc, #256]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80093a0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80093a4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80093a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80093aa:	430b      	orrs	r3, r1
 80093ac:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	019b      	lsls	r3, r3, #6
 80093b2:	d527      	bpl.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->QspiClockSelection)
 80093b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80093b6:	2b10      	cmp	r3, #16
 80093b8:	d033      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80093ba:	d817      	bhi.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 80093bc:	b1d3      	cbz	r3, 80093f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = HAL_ERROR;
 80093be:	2601      	movs	r6, #1
 80093c0:	4635      	mov	r5, r6
 80093c2:	e01f      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c4:	4a36      	ldr	r2, [pc, #216]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80093c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80093c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093cc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80093ce:	e7e5      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093d0:	2100      	movs	r1, #0
 80093d2:	1d20      	adds	r0, r4, #4
 80093d4:	f7ff fe20 	bl	8009018 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093d8:	4605      	mov	r5, r0
      break;
 80093da:	e7df      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093dc:	2100      	movs	r1, #0
 80093de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80093e2:	f7ff fe91 	bl	8009108 <RCCEx_PLL3_Config>
 80093e6:	e7f7      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80093e8:	462e      	mov	r6, r5
 80093ea:	e7e0      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->QspiClockSelection)
 80093ec:	2b20      	cmp	r3, #32
 80093ee:	d01e      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x236>
 80093f0:	2b30      	cmp	r3, #48	; 0x30
 80093f2:	d1e4      	bne.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    if(ret == HAL_OK)
 80093f4:	bb0d      	cbnz	r5, 800943a <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80093f6:	4a2a      	ldr	r2, [pc, #168]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80093f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80093fa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80093fc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009400:	430b      	orrs	r3, r1
 8009402:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	04df      	lsls	r7, r3, #19
 8009408:	d527      	bpl.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x262>
    switch(PeriphClkInit->Spi123ClockSelection)
 800940a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800940c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009410:	d03e      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009412:	d814      	bhi.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x246>
 8009414:	b383      	cbz	r3, 8009478 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8009416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800941a:	d033      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = HAL_ERROR;
 800941c:	2601      	movs	r6, #1
 800941e:	4635      	mov	r5, r6
 8009420:	e01b      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009422:	4a1f      	ldr	r2, [pc, #124]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009424:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800942a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800942c:	e7e2      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800942e:	2102      	movs	r1, #2
 8009430:	1d20      	adds	r0, r4, #4
 8009432:	f7ff fdf1 	bl	8009018 <RCCEx_PLL2_Config>
 8009436:	4605      	mov	r5, r0
      break;
 8009438:	e7dc      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 800943a:	462e      	mov	r6, r5
 800943c:	e7e2      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800943e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009442:	d002      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8009444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009448:	d1e8      	bne.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 800944a:	bb3d      	cbnz	r5, 800949c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800944c:	4a14      	ldr	r2, [pc, #80]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800944e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009450:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009456:	430b      	orrs	r3, r1
 8009458:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	0498      	lsls	r0, r3, #18
 800945e:	d532      	bpl.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009460:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009462:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009466:	d044      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8009468:	d81c      	bhi.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800946a:	b323      	cbz	r3, 80094b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800946c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009470:	d039      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = HAL_ERROR;
 8009472:	2601      	movs	r6, #1
 8009474:	4635      	mov	r5, r6
 8009476:	e026      	b.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009478:	4a09      	ldr	r2, [pc, #36]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800947a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800947c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009480:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009482:	e7e2      	b.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009484:	2100      	movs	r1, #0
 8009486:	1d20      	adds	r0, r4, #4
 8009488:	f7ff fdc6 	bl	8009018 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800948c:	4605      	mov	r5, r0
      break;
 800948e:	e7dc      	b.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009490:	2100      	movs	r1, #0
 8009492:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009496:	f7ff fe37 	bl	8009108 <RCCEx_PLL3_Config>
 800949a:	e7f7      	b.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x294>
 800949c:	462e      	mov	r6, r5
 800949e:	e7dc      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x262>
 80094a0:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 80094a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094a8:	d005      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 80094aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094ae:	d002      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 80094b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80094b4:	d1dd      	bne.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(ret == HAL_OK)
 80094b6:	bb15      	cbnz	r5, 80094fe <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80094b8:	4aa0      	ldr	r2, [pc, #640]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80094ba:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80094bc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80094be:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80094c2:	430b      	orrs	r3, r1
 80094c4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	0459      	lsls	r1, r3, #17
 80094ca:	d52d      	bpl.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Spi6ClockSelection)
 80094cc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80094d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094d4:	d04b      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80094d6:	d814      	bhi.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80094d8:	b1e3      	cbz	r3, 8009514 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80094da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094de:	d040      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      ret = HAL_ERROR;
 80094e0:	2601      	movs	r6, #1
 80094e2:	4635      	mov	r5, r6
 80094e4:	e020      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x330>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094e6:	2101      	movs	r1, #1
 80094e8:	1d20      	adds	r0, r4, #4
 80094ea:	f7ff fd95 	bl	8009018 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094ee:	4605      	mov	r5, r0
      break;
 80094f0:	e7e1      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094f2:	2101      	movs	r1, #1
 80094f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80094f8:	f7ff fe06 	bl	8009108 <RCCEx_PLL3_Config>
 80094fc:	e7f7      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80094fe:	462e      	mov	r6, r5
 8009500:	e7e1      	b.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009506:	d005      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8009508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800950c:	d002      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800950e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009512:	d1e5      	bne.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if(ret == HAL_OK)
 8009514:	2d00      	cmp	r5, #0
 8009516:	d130      	bne.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x382>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009518:	4a88      	ldr	r2, [pc, #544]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800951a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800951e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009520:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009524:	430b      	orrs	r3, r1
 8009526:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009528:	6823      	ldr	r3, [r4, #0]
 800952a:	041a      	lsls	r2, r3, #16
 800952c:	d50f      	bpl.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->FdcanClockSelection)
 800952e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009534:	d023      	beq.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8009536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800953a:	d026      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800953c:	bb5b      	cbnz	r3, 8009596 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    if(ret == HAL_OK)
 800953e:	bb6d      	cbnz	r5, 800959c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009540:	4a7e      	ldr	r2, [pc, #504]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009542:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8009544:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009546:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800954a:	430b      	orrs	r3, r1
 800954c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	01db      	lsls	r3, r3, #7
 8009552:	d533      	bpl.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch(PeriphClkInit->FmcClockSelection)
 8009554:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009556:	2b03      	cmp	r3, #3
 8009558:	d874      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800955a:	e8df f003 	tbb	[pc, r3]
 800955e:	2126      	.short	0x2126
 8009560:	266d      	.short	0x266d
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009562:	2101      	movs	r1, #1
 8009564:	1d20      	adds	r0, r4, #4
 8009566:	f7ff fd57 	bl	8009018 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800956a:	4605      	mov	r5, r0
      break;
 800956c:	e7d2      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800956e:	2101      	movs	r1, #1
 8009570:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009574:	f7ff fdc8 	bl	8009108 <RCCEx_PLL3_Config>
 8009578:	e7f7      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800957a:	462e      	mov	r6, r5
 800957c:	e7d4      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800957e:	4a6f      	ldr	r2, [pc, #444]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009580:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009586:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009588:	e7d9      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800958a:	2101      	movs	r1, #1
 800958c:	1d20      	adds	r0, r4, #4
 800958e:	f7ff fd43 	bl	8009018 <RCCEx_PLL2_Config>
 8009592:	4605      	mov	r5, r0
      break;
 8009594:	e7d3      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = HAL_ERROR;
 8009596:	2601      	movs	r6, #1
 8009598:	4635      	mov	r5, r6
 800959a:	e7d8      	b.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x356>
 800959c:	462e      	mov	r6, r5
 800959e:	e7d6      	b.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095a0:	4a66      	ldr	r2, [pc, #408]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80095a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80095a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80095aa:	2d00      	cmp	r5, #0
 80095ac:	d14d      	bne.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x452>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80095ae:	4a63      	ldr	r2, [pc, #396]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80095b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80095b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80095b4:	f023 0303 	bic.w	r3, r3, #3
 80095b8:	430b      	orrs	r3, r1
 80095ba:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	025f      	lsls	r7, r3, #9
 80095c0:	d54d      	bpl.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x466>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095c2:	4f5f      	ldr	r7, [pc, #380]	; (8009740 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095ca:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80095cc:	f7fc fa06 	bl	80059dc <HAL_GetTick>
 80095d0:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	05d8      	lsls	r0, r3, #23
 80095d6:	d53a      	bpl.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x456>
    if(ret == HAL_OK)
 80095d8:	2d00      	cmp	r5, #0
 80095da:	d161      	bne.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80095dc:	4b57      	ldr	r3, [pc, #348]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80095de:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80095e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80095e4:	4042      	eors	r2, r0
 80095e6:	f412 7f40 	tst.w	r2, #768	; 0x300
 80095ea:	d00b      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x40c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80095ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80095ee:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80095f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80095f4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80095f8:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80095fa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80095fc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009600:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009602:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009604:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8009608:	d036      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800960a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800960e:	494b      	ldr	r1, [pc, #300]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009610:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009614:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009618:	d13e      	bne.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800961a:	6908      	ldr	r0, [r1, #16]
 800961c:	4a49      	ldr	r2, [pc, #292]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 800961e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8009622:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009626:	4302      	orrs	r2, r0
 8009628:	610a      	str	r2, [r1, #16]
 800962a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800962e:	4a43      	ldr	r2, [pc, #268]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009630:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009632:	430b      	orrs	r3, r1
 8009634:	6713      	str	r3, [r2, #112]	; 0x70
 8009636:	e012      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x466>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009638:	2102      	movs	r1, #2
 800963a:	1d20      	adds	r0, r4, #4
 800963c:	f7ff fcec 	bl	8009018 <RCCEx_PLL2_Config>
 8009640:	4605      	mov	r5, r0
      break;
 8009642:	e7b2      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = HAL_ERROR;
 8009644:	2601      	movs	r6, #1
 8009646:	4635      	mov	r5, r6
 8009648:	e7b8      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800964a:	462e      	mov	r6, r5
 800964c:	e7b6      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800964e:	f7fc f9c5 	bl	80059dc <HAL_GetTick>
 8009652:	eba0 0008 	sub.w	r0, r0, r8
 8009656:	2864      	cmp	r0, #100	; 0x64
 8009658:	d9bb      	bls.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
        ret = HAL_TIMEOUT;
 800965a:	2603      	movs	r6, #3
 800965c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800965e:	6823      	ldr	r3, [r4, #0]
 8009660:	07da      	lsls	r2, r3, #31
 8009662:	d52d      	bpl.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009664:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009666:	2b10      	cmp	r3, #16
 8009668:	d03b      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800966a:	d81b      	bhi.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 800966c:	b303      	cbz	r3, 80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 800966e:	2b08      	cmp	r3, #8
 8009670:	d031      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = HAL_ERROR;
 8009672:	2601      	movs	r6, #1
 8009674:	4635      	mov	r5, r6
 8009676:	e023      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        tickstart = HAL_GetTick();
 8009678:	f7fc f9b0 	bl	80059dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800967c:	4f2f      	ldr	r7, [pc, #188]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x544>)
        tickstart = HAL_GetTick();
 800967e:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009680:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009684:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009686:	0799      	lsls	r1, r3, #30
 8009688:	d4bf      	bmi.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x412>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800968a:	f7fc f9a7 	bl	80059dc <HAL_GetTick>
 800968e:	eba0 0008 	sub.w	r0, r0, r8
 8009692:	4548      	cmp	r0, r9
 8009694:	d9f6      	bls.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009696:	e7e0      	b.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x462>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009698:	690a      	ldr	r2, [r1, #16]
 800969a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800969e:	e7c3      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80096a0:	462e      	mov	r6, r5
 80096a2:	e7dc      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x466>
    switch(PeriphClkInit->Usart16ClockSelection)
 80096a4:	2b20      	cmp	r3, #32
 80096a6:	d003      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 80096a8:	2b28      	cmp	r3, #40	; 0x28
 80096aa:	d001      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 80096ac:	2b18      	cmp	r3, #24
 80096ae:	d1e0      	bne.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    if(ret == HAL_OK)
 80096b0:	b9ed      	cbnz	r5, 80096ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80096b2:	4a22      	ldr	r2, [pc, #136]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80096b4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80096b6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80096b8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80096bc:	430b      	orrs	r3, r1
 80096be:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	079b      	lsls	r3, r3, #30
 80096c4:	d522      	bpl.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80096c6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80096c8:	2b05      	cmp	r3, #5
 80096ca:	d831      	bhi.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80096cc:	e8df f003 	tbb	[pc, r3]
 80096d0:	162a1116 	.word	0x162a1116
 80096d4:	1616      	.short	0x1616
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096d6:	2101      	movs	r1, #1
 80096d8:	1d20      	adds	r0, r4, #4
 80096da:	f7ff fc9d 	bl	8009018 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096de:	4605      	mov	r5, r0
      break;
 80096e0:	e7e6      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096e2:	2101      	movs	r1, #1
 80096e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80096e8:	f7ff fd0e 	bl	8009108 <RCCEx_PLL3_Config>
 80096ec:	e7f7      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80096ee:	462e      	mov	r6, r5
 80096f0:	e7e6      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096f2:	2101      	movs	r1, #1
 80096f4:	1d20      	adds	r0, r4, #4
 80096f6:	f7ff fc8f 	bl	8009018 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096fa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80096fc:	b9dd      	cbnz	r5, 8009736 <HAL_RCCEx_PeriphCLKConfig+0x53e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80096fe:	4a0f      	ldr	r2, [pc, #60]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009700:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8009702:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009704:	f023 0307 	bic.w	r3, r3, #7
 8009708:	430b      	orrs	r3, r1
 800970a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800970c:	6823      	ldr	r3, [r4, #0]
 800970e:	075f      	lsls	r7, r3, #29
 8009710:	d528      	bpl.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009712:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009716:	2b05      	cmp	r3, #5
 8009718:	d83a      	bhi.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800971a:	e8df f003 	tbb	[pc, r3]
 800971e:	151a      	.short	0x151a
 8009720:	1a1a1a33 	.word	0x1a1a1a33
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009724:	2101      	movs	r1, #1
 8009726:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800972a:	f7ff fced 	bl	8009108 <RCCEx_PLL3_Config>
 800972e:	e7e4      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x502>
      ret = HAL_ERROR;
 8009730:	2601      	movs	r6, #1
 8009732:	4635      	mov	r5, r6
 8009734:	e7ea      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009736:	462e      	mov	r6, r5
 8009738:	e7e8      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x514>
 800973a:	bf00      	nop
 800973c:	58024400 	.word	0x58024400
 8009740:	58024800 	.word	0x58024800
 8009744:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009748:	2101      	movs	r1, #1
 800974a:	1d20      	adds	r0, r4, #4
 800974c:	f7ff fc64 	bl	8009018 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009750:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009752:	bb05      	cbnz	r5, 8009796 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009754:	4a98      	ldr	r2, [pc, #608]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009756:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800975a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800975c:	f023 0307 	bic.w	r3, r3, #7
 8009760:	430b      	orrs	r3, r1
 8009762:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	0698      	lsls	r0, r3, #26
 8009768:	d529      	bpl.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800976a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800976e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009772:	d03a      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8009774:	d811      	bhi.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009776:	b1cb      	cbz	r3, 80097ac <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8009778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800977c:	d02f      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      ret = HAL_ERROR;
 800977e:	2601      	movs	r6, #1
 8009780:	4635      	mov	r5, r6
 8009782:	e01c      	b.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009784:	2101      	movs	r1, #1
 8009786:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800978a:	f7ff fcbd 	bl	8009108 <RCCEx_PLL3_Config>
 800978e:	e7df      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x558>
      ret = HAL_ERROR;
 8009790:	2601      	movs	r6, #1
 8009792:	4635      	mov	r5, r6
 8009794:	e7e6      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 8009796:	462e      	mov	r6, r5
 8009798:	e7e4      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800979a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800979e:	d005      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80097a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097a4:	d002      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80097a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097aa:	d1e8      	bne.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x586>
    if(ret == HAL_OK)
 80097ac:	bb1d      	cbnz	r5, 80097f6 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80097ae:	4a82      	ldr	r2, [pc, #520]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80097b0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80097b4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80097b6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80097ba:	430b      	orrs	r3, r1
 80097bc:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	0659      	lsls	r1, r3, #25
 80097c2:	d52c      	bpl.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80097c4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80097c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097cc:	d03f      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x656>
 80097ce:	d814      	bhi.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x602>
 80097d0:	b1e3      	cbz	r3, 800980c <HAL_RCCEx_PeriphCLKConfig+0x614>
 80097d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097d6:	d034      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      ret = HAL_ERROR;
 80097d8:	2601      	movs	r6, #1
 80097da:	4635      	mov	r5, r6
 80097dc:	e01f      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x626>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097de:	2100      	movs	r1, #0
 80097e0:	1d20      	adds	r0, r4, #4
 80097e2:	f7ff fc19 	bl	8009018 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097e6:	4605      	mov	r5, r0
      break;
 80097e8:	e7e0      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097ea:	2102      	movs	r1, #2
 80097ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80097f0:	f7ff fc8a 	bl	8009108 <RCCEx_PLL3_Config>
 80097f4:	e7f7      	b.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 80097f6:	462e      	mov	r6, r5
 80097f8:	e7e1      	b.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80097fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097fe:	d005      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8009800:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009804:	d002      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8009806:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800980a:	d1e5      	bne.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    if(ret == HAL_OK)
 800980c:	bb2d      	cbnz	r5, 800985a <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800980e:	4a6a      	ldr	r2, [pc, #424]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009810:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8009814:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009816:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800981a:	430b      	orrs	r3, r1
 800981c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	061a      	lsls	r2, r3, #24
 8009822:	d530      	bpl.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009824:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800982c:	f000 80a4 	beq.w	8009978 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8009830:	d815      	bhi.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x666>
 8009832:	b1eb      	cbz	r3, 8009870 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8009834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009838:	f000 8098 	beq.w	800996c <HAL_RCCEx_PeriphCLKConfig+0x774>
      ret = HAL_ERROR;
 800983c:	2601      	movs	r6, #1
 800983e:	4635      	mov	r5, r6
 8009840:	e021      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009842:	2100      	movs	r1, #0
 8009844:	1d20      	adds	r0, r4, #4
 8009846:	f7ff fbe7 	bl	8009018 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800984a:	4605      	mov	r5, r0
      break;
 800984c:	e7de      	b.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x614>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800984e:	2102      	movs	r1, #2
 8009850:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009854:	f7ff fc58 	bl	8009108 <RCCEx_PLL3_Config>
 8009858:	e7f7      	b.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x652>
 800985a:	462e      	mov	r6, r5
 800985c:	e7df      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800985e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009862:	d005      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8009864:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009868:	d002      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800986a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800986e:	d1e5      	bne.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x644>
    if(ret == HAL_OK)
 8009870:	2d00      	cmp	r5, #0
 8009872:	f040 8087 	bne.w	8009984 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009876:	4a50      	ldr	r2, [pc, #320]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009878:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800987c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800987e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009882:	430b      	orrs	r3, r1
 8009884:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	071b      	lsls	r3, r3, #28
 800988a:	d514      	bpl.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800988c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009894:	d107      	bne.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009896:	2102      	movs	r1, #2
 8009898:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800989c:	f7ff fc34 	bl	8009108 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 80098a0:	2800      	cmp	r0, #0
 80098a2:	bf18      	it	ne
 80098a4:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80098a6:	4a44      	ldr	r2, [pc, #272]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80098a8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80098ac:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80098ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80098b2:	430b      	orrs	r3, r1
 80098b4:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	06df      	lsls	r7, r3, #27
 80098ba:	d514      	bpl.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80098bc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80098c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098c4:	d107      	bne.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80098c6:	2102      	movs	r1, #2
 80098c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80098cc:	f7ff fc1c 	bl	8009108 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80098d0:	2800      	cmp	r0, #0
 80098d2:	bf18      	it	ne
 80098d4:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80098d6:	4a38      	ldr	r2, [pc, #224]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80098d8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80098dc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80098de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098e2:	430b      	orrs	r3, r1
 80098e4:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	0318      	lsls	r0, r3, #12
 80098ea:	d517      	bpl.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x724>
    switch(PeriphClkInit->AdcClockSelection)
 80098ec:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80098f0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80098f4:	d048      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x790>
 80098f6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80098fa:	d005      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x710>
 80098fc:	2900      	cmp	r1, #0
 80098fe:	d149      	bne.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009900:	1d20      	adds	r0, r4, #4
 8009902:	f7ff fb89 	bl	8009018 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009906:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009908:	2d00      	cmp	r5, #0
 800990a:	d146      	bne.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800990c:	4a2a      	ldr	r2, [pc, #168]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800990e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8009912:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009914:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009918:	430b      	orrs	r3, r1
 800991a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800991c:	6823      	ldr	r3, [r4, #0]
 800991e:	0359      	lsls	r1, r3, #13
 8009920:	d518      	bpl.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch(PeriphClkInit->UsbClockSelection)
 8009922:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800992a:	d038      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 800992c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009930:	d007      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8009932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009936:	d139      	bne.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009938:	4a1f      	ldr	r2, [pc, #124]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800993a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800993c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009940:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009942:	bbb5      	cbnz	r5, 80099b2 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009944:	4a1c      	ldr	r2, [pc, #112]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009946:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800994a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800994c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009950:	430b      	orrs	r3, r1
 8009952:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009954:	6823      	ldr	r3, [r4, #0]
 8009956:	03da      	lsls	r2, r3, #15
 8009958:	d53e      	bpl.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->SdmmcClockSelection)
 800995a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800995c:	b373      	cbz	r3, 80099bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 800995e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009962:	f000 808c 	beq.w	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x886>
      ret = HAL_ERROR;
 8009966:	2601      	movs	r6, #1
 8009968:	4635      	mov	r5, r6
 800996a:	e035      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800996c:	2100      	movs	r1, #0
 800996e:	1d20      	adds	r0, r4, #4
 8009970:	f7ff fb52 	bl	8009018 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009974:	4605      	mov	r5, r0
      break;
 8009976:	e77b      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x678>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009978:	2102      	movs	r1, #2
 800997a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800997e:	f7ff fbc3 	bl	8009108 <RCCEx_PLL3_Config>
 8009982:	e7f7      	b.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8009984:	462e      	mov	r6, r5
 8009986:	e77e      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009988:	2102      	movs	r1, #2
 800998a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800998e:	f7ff fbbb 	bl	8009108 <RCCEx_PLL3_Config>
 8009992:	e7b8      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x70e>
      ret = HAL_ERROR;
 8009994:	2601      	movs	r6, #1
 8009996:	4635      	mov	r5, r6
 8009998:	e7c0      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x724>
 800999a:	462e      	mov	r6, r5
 800999c:	e7be      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x724>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800999e:	2101      	movs	r1, #1
 80099a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80099a4:	f7ff fbb0 	bl	8009108 <RCCEx_PLL3_Config>
 80099a8:	4605      	mov	r5, r0
      break;
 80099aa:	e7ca      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      ret = HAL_ERROR;
 80099ac:	2601      	movs	r6, #1
 80099ae:	4635      	mov	r5, r6
 80099b0:	e7d0      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80099b2:	462e      	mov	r6, r5
 80099b4:	e7ce      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80099b6:	bf00      	nop
 80099b8:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099bc:	4a3c      	ldr	r2, [pc, #240]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80099be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80099c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80099c6:	2d00      	cmp	r5, #0
 80099c8:	d15f      	bne.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x892>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80099ca:	4a39      	ldr	r2, [pc, #228]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80099cc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80099ce:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80099d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099d4:	430b      	orrs	r3, r1
 80099d6:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80099d8:	6823      	ldr	r3, [r4, #0]
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	d507      	bpl.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80099de:	2102      	movs	r1, #2
 80099e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80099e4:	f7ff fb90 	bl	8009108 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 80099e8:	2800      	cmp	r0, #0
 80099ea:	bf18      	it	ne
 80099ec:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	039f      	lsls	r7, r3, #14
 80099f2:	d50e      	bpl.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch(PeriphClkInit->RngClockSelection)
 80099f4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80099f6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80099fa:	d050      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80099fc:	d847      	bhi.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x896>
 80099fe:	2900      	cmp	r1, #0
 8009a00:	d14b      	bne.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    if(ret == HAL_OK)
 8009a02:	2d00      	cmp	r5, #0
 8009a04:	d151      	bne.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a06:	482a      	ldr	r0, [pc, #168]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009a08:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8009a0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009a0e:	430a      	orrs	r2, r1
 8009a10:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009a12:	02dd      	lsls	r5, r3, #11
 8009a14:	d506      	bpl.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x82c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009a16:	4926      	ldr	r1, [pc, #152]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009a18:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009a1a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009a1c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009a20:	4302      	orrs	r2, r0
 8009a22:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009a24:	00d8      	lsls	r0, r3, #3
 8009a26:	d507      	bpl.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x840>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009a28:	4921      	ldr	r1, [pc, #132]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009a2a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8009a2e:	690a      	ldr	r2, [r1, #16]
 8009a30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009a34:	4302      	orrs	r2, r0
 8009a36:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009a38:	0299      	lsls	r1, r3, #10
 8009a3a:	d506      	bpl.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009a3c:	491c      	ldr	r1, [pc, #112]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009a3e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009a40:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009a42:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009a46:	4302      	orrs	r2, r0
 8009a48:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009a4a:	005a      	lsls	r2, r3, #1
 8009a4c:	d509      	bpl.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a4e:	4a18      	ldr	r2, [pc, #96]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009a50:	6911      	ldr	r1, [r2, #16]
 8009a52:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8009a56:	6111      	str	r1, [r2, #16]
 8009a58:	6911      	ldr	r1, [r2, #16]
 8009a5a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8009a5e:	4301      	orrs	r1, r0
 8009a60:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	da06      	bge.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009a66:	4a12      	ldr	r2, [pc, #72]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009a68:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009a6a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009a6c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009a70:	430b      	orrs	r3, r1
 8009a72:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8009a74:	1c30      	adds	r0, r6, #0
 8009a76:	bf18      	it	ne
 8009a78:	2001      	movne	r0, #1
 8009a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009a7e:	2102      	movs	r1, #2
 8009a80:	1d20      	adds	r0, r4, #4
 8009a82:	f7ff fac9 	bl	8009018 <RCCEx_PLL2_Config>
 8009a86:	4605      	mov	r5, r0
      break;
 8009a88:	e79d      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8009a8a:	462e      	mov	r6, r5
 8009a8c:	e7a4      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->RngClockSelection)
 8009a8e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009a92:	d0b6      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8009a94:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8009a98:	d0b3      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      ret = HAL_ERROR;
 8009a9a:	2601      	movs	r6, #1
 8009a9c:	e7b9      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a9e:	4804      	ldr	r0, [pc, #16]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009aa0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009aa2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009aa6:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8009aa8:	e7ab      	b.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8009aaa:	462e      	mov	r6, r5
 8009aac:	e7b1      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8009aae:	bf00      	nop
 8009ab0:	58024400 	.word	0x58024400

08009ab4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8009ab4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009ab6:	f7ff fa3f 	bl	8008f38 <HAL_RCC_GetHCLKFreq>
 8009aba:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8009abc:	4a05      	ldr	r2, [pc, #20]	; (8009ad4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8009abe:	6a1b      	ldr	r3, [r3, #32]
 8009ac0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009ac4:	5cd3      	ldrb	r3, [r2, r3]
 8009ac6:	f003 031f 	and.w	r3, r3, #31
}
 8009aca:	40d8      	lsrs	r0, r3
 8009acc:	bd08      	pop	{r3, pc}
 8009ace:	bf00      	nop
 8009ad0:	58024400 	.word	0x58024400
 8009ad4:	08015494 	.word	0x08015494

08009ad8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ad8:	494d      	ldr	r1, [pc, #308]	; (8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
{
 8009ada:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009adc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009ade:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009ae0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009ae2:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009ae6:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 808c 	beq.w	8009c06 <HAL_RCCEx_GetPLL2ClockFreq+0x12e>
 8009aee:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009af2:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009af6:	f3c2 1300 	ubfx	r3, r2, #4, #1
 8009afa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009afe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009b02:	436b      	muls	r3, r5
 8009b04:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b08:	f004 0303 	and.w	r3, r4, #3
    switch (pllsource)
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8009b12:	d002      	beq.n	8009b1a <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8009b14:	d30f      	bcc.n	8009b36 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d067      	beq.n	8009bea <HAL_RCCEx_GetPLL2ClockFreq+0x112>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b1a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8009b1c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8009c14 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>
 8009b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b24:	ee07 3a10 	vmov	s14, r3
 8009b28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b30:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009b34:	e056      	b.n	8009be4 <HAL_RCCEx_GetPLL2ClockFreq+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b36:	680b      	ldr	r3, [r1, #0]
 8009b38:	069b      	lsls	r3, r3, #26
 8009b3a:	d546      	bpl.n	8009bca <HAL_RCCEx_GetPLL2ClockFreq+0xf2>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b3c:	680a      	ldr	r2, [r1, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b3e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b40:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8009b44:	4a34      	ldr	r2, [pc, #208]	; (8009c18 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b4a:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b4c:	ee07 2a10 	vmov	s14, r2
 8009b50:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8009b54:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009b58:	ee06 3a90 	vmov	s13, r3
 8009b5c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009b60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b64:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009b68:	4a29      	ldr	r2, [pc, #164]	; (8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b6a:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009b6e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009b70:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009b74:	ee07 3a10 	vmov	s14, r3
 8009b78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b7c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009b80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009b84:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009b88:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009b8c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009b8e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009b92:	ee07 3a10 	vmov	s14, r3
 8009b96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b9a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009b9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009ba2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009ba6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009baa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009bac:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009bb0:	ee07 3a10 	vmov	s14, r3
 8009bb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009bb8:	ee37 6a06 	vadd.f32	s12, s14, s12
 8009bbc:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8009bc0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009bc4:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009bc8:	bd30      	pop	{r4, r5, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bca:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8009bcc:	eddf 5a13 	vldr	s11, [pc, #76]	; 8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8009bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd4:	ee07 3a10 	vmov	s14, r3
 8009bd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009be0:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009be4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009be8:	e7be      	b.n	8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x90>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bea:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8009bec:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8009c20 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8009bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf4:	ee07 3a10 	vmov	s14, r3
 8009bf8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c00:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009c04:	e7ee      	b.n	8009be4 <HAL_RCCEx_GetPLL2ClockFreq+0x10c>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c06:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c0a:	6083      	str	r3, [r0, #8]
}
 8009c0c:	e7dc      	b.n	8009bc8 <HAL_RCCEx_GetPLL2ClockFreq+0xf0>
 8009c0e:	bf00      	nop
 8009c10:	58024400 	.word	0x58024400
 8009c14:	4a742400 	.word	0x4a742400
 8009c18:	03d09000 	.word	0x03d09000
 8009c1c:	4c742400 	.word	0x4c742400
 8009c20:	4af42400 	.word	0x4af42400

08009c24 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c24:	494d      	ldr	r1, [pc, #308]	; (8009d5c <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
{
 8009c26:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c28:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009c2a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c2c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009c2e:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009c32:	6c4d      	ldr	r5, [r1, #68]	; 0x44
  if (pll3m != 0U)
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 808c 	beq.w	8009d52 <HAL_RCCEx_GetPLL3ClockFreq+0x12e>
 8009c3a:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009c3e:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c42:	f3c2 2300 	ubfx	r3, r2, #8, #1
 8009c46:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009c4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009c4e:	436b      	muls	r3, r5
 8009c50:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c54:	f004 0303 	and.w	r3, r4, #3
    switch (pllsource)
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8009c5e:	d002      	beq.n	8009c66 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8009c60:	d30f      	bcc.n	8009c82 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d067      	beq.n	8009d36 <HAL_RCCEx_GetPLL3ClockFreq+0x112>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c68:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>
 8009c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c70:	ee07 3a10 	vmov	s14, r3
 8009c74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c7c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009c80:	e056      	b.n	8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c82:	680b      	ldr	r3, [r1, #0]
 8009c84:	069b      	lsls	r3, r3, #26
 8009c86:	d546      	bpl.n	8009d16 <HAL_RCCEx_GetPLL3ClockFreq+0xf2>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c88:	680a      	ldr	r2, [r1, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c8a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c8c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8009c90:	4a34      	ldr	r2, [pc, #208]	; (8009d64 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c96:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c98:	ee07 2a10 	vmov	s14, r2
 8009c9c:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8009ca0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009ca4:	ee06 3a90 	vmov	s13, r3
 8009ca8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009cac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb0:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009cb4:	4a29      	ldr	r2, [pc, #164]	; (8009d5c <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009cba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009cbc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009cc0:	ee07 3a10 	vmov	s14, r3
 8009cc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009cc8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009ccc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009cd0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009cd4:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009cd8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009cda:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009cde:	ee07 3a10 	vmov	s14, r3
 8009ce2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009ce6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009cea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009cee:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009cf2:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009cf6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009cf8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009cfc:	ee07 3a10 	vmov	s14, r3
 8009d00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009d04:	ee37 6a06 	vadd.f32	s12, s14, s12
 8009d08:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8009d0c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009d10:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009d14:	bd30      	pop	{r4, r5, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d18:	eddf 5a13 	vldr	s11, [pc, #76]	; 8009d68 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8009d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d20:	ee07 3a10 	vmov	s14, r3
 8009d24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d2c:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d30:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009d34:	e7be      	b.n	8009cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x90>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d38:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8009d6c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8009d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d40:	ee07 3a10 	vmov	s14, r3
 8009d44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d4c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009d50:	e7ee      	b.n	8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x10c>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d52:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d56:	6083      	str	r3, [r0, #8]
}
 8009d58:	e7dc      	b.n	8009d14 <HAL_RCCEx_GetPLL3ClockFreq+0xf0>
 8009d5a:	bf00      	nop
 8009d5c:	58024400 	.word	0x58024400
 8009d60:	4a742400 	.word	0x4a742400
 8009d64:	03d09000 	.word	0x03d09000
 8009d68:	4c742400 	.word	0x4c742400
 8009d6c:	4af42400 	.word	0x4af42400

08009d70 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d70:	494d      	ldr	r1, [pc, #308]	; (8009ea8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>)
{
 8009d72:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d74:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009d76:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009d78:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009d7a:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009d7e:	6b4d      	ldr	r5, [r1, #52]	; 0x34
  if (pll1m != 0U)
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 808c 	beq.w	8009e9e <HAL_RCCEx_GetPLL1ClockFreq+0x12e>
 8009d86:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009d8a:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009d8e:	f002 0301 	and.w	r3, r2, #1
 8009d92:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009d96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009d9a:	436b      	muls	r3, r5
 8009d9c:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009da0:	f004 0303 	and.w	r3, r4, #3
    switch (pllsource)
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8009daa:	d002      	beq.n	8009db2 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 8009dac:	d30f      	bcc.n	8009dce <HAL_RCCEx_GetPLL1ClockFreq+0x5e>
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d067      	beq.n	8009e82 <HAL_RCCEx_GetPLL1ClockFreq+0x112>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009db2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8009db4:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8009eac <HAL_RCCEx_GetPLL1ClockFreq+0x13c>
 8009db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dbc:	ee07 3a10 	vmov	s14, r3
 8009dc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dc8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009dcc:	e056      	b.n	8009e7c <HAL_RCCEx_GetPLL1ClockFreq+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dce:	680b      	ldr	r3, [r1, #0]
 8009dd0:	069b      	lsls	r3, r3, #26
 8009dd2:	d546      	bpl.n	8009e62 <HAL_RCCEx_GetPLL1ClockFreq+0xf2>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009dd4:	680a      	ldr	r2, [r1, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009dd6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009dd8:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8009ddc:	4a34      	ldr	r2, [pc, #208]	; (8009eb0 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009de2:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009de4:	ee07 2a10 	vmov	s14, r2
 8009de8:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8009dec:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009df0:	ee06 3a90 	vmov	s13, r3
 8009df4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009df8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dfc:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009e00:	4a29      	ldr	r2, [pc, #164]	; (8009ea8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>)
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e02:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009e06:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009e08:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009e0c:	ee07 3a10 	vmov	s14, r3
 8009e10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009e14:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009e18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009e1c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009e20:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009e24:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009e26:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009e2a:	ee07 3a10 	vmov	s14, r3
 8009e2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009e32:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009e36:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009e3a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009e3e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009e42:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009e44:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009e48:	ee07 3a10 	vmov	s14, r3
 8009e4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009e50:	ee37 6a06 	vadd.f32	s12, s14, s12
 8009e54:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8009e58:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009e5c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009e60:	bd30      	pop	{r4, r5, pc}
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e62:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8009e64:	eddf 5a13 	vldr	s11, [pc, #76]	; 8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8009e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6c:	ee07 3a10 	vmov	s14, r3
 8009e70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e78:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e7c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009e80:	e7be      	b.n	8009e00 <HAL_RCCEx_GetPLL1ClockFreq+0x90>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e82:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8009e84:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8009eb8 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8009e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e8c:	ee07 3a10 	vmov	s14, r3
 8009e90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e98:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009e9c:	e7ee      	b.n	8009e7c <HAL_RCCEx_GetPLL1ClockFreq+0x10c>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009e9e:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009ea2:	6083      	str	r3, [r0, #8]
}
 8009ea4:	e7dc      	b.n	8009e60 <HAL_RCCEx_GetPLL1ClockFreq+0xf0>
 8009ea6:	bf00      	nop
 8009ea8:	58024400 	.word	0x58024400
 8009eac:	4a742400 	.word	0x4a742400
 8009eb0:	03d09000 	.word	0x03d09000
 8009eb4:	4c742400 	.word	0x4c742400
 8009eb8:	4af42400 	.word	0x4af42400

08009ebc <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ebc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8009ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ec2:	d122      	bne.n	8009f0a <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009ec4:	4b6a      	ldr	r3, [pc, #424]	; (800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009ec6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ec8:	f002 0207 	and.w	r2, r2, #7
      switch (saiclocksource)
 8009ecc:	2a04      	cmp	r2, #4
 8009ece:	d82a      	bhi.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8009ed0:	e8df f002 	tbb	[pc, r2]
 8009ed4:	c9088503 	.word	0xc9088503
 8009ed8:	0c          	.byte	0x0c
 8009ed9:	00          	.byte	0x00
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009eda:	a801      	add	r0, sp, #4
 8009edc:	f7ff ff48 	bl	8009d70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ee0:	9802      	ldr	r0, [sp, #8]
          break;
 8009ee2:	e080      	b.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ee4:	a801      	add	r0, sp, #4
 8009ee6:	f7ff fe9d 	bl	8009c24 <HAL_RCCEx_GetPLL3ClockFreq>
 8009eea:	e07b      	b.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009eee:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8009ef2:	f000 80ad 	beq.w	800a050 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009ef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009efa:	f000 80b6 	beq.w	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            frequency = HSE_VALUE;
 8009efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f02:	485c      	ldr	r0, [pc, #368]	; (800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8009f04:	bf18      	it	ne
 8009f06:	2000      	movne	r0, #0
 8009f08:	e06d      	b.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009f0a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009f0e:	d114      	bne.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009f10:	4a57      	ldr	r2, [pc, #348]	; (800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009f12:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009f14:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8009f18:	2b80      	cmp	r3, #128	; 0x80
 8009f1a:	d0e3      	beq.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8009f1c:	d805      	bhi.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d0db      	beq.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 8009f22:	2b40      	cmp	r3, #64	; 0x40
      switch (srcclk)
 8009f24:	d05b      	beq.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          frequency = 0;
 8009f26:	2000      	movs	r0, #0
  return frequency;
 8009f28:	e05d      	b.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
      switch (saiclocksource)
 8009f2a:	2bc0      	cmp	r3, #192	; 0xc0
 8009f2c:	f000 809b 	beq.w	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
      switch (srcclk)
 8009f34:	d1f7      	bne.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f36:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009f38:	e7d9      	b.n	8009eee <HAL_RCCEx_GetPeriphCLKFreq+0x32>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009f3a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009f3e:	d113      	bne.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009f40:	4a4b      	ldr	r2, [pc, #300]	; (800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009f42:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009f44:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8009f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f4c:	d0ca      	beq.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8009f4e:	d804      	bhi.n	8009f5a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d0c2      	beq.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 8009f54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f58:	e7e4      	b.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8009f5a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009f5e:	f000 8082 	beq.w	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009f62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f66:	e7e5      	b.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009f68:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8009f6c:	d112      	bne.n	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009f6e:	4a40      	ldr	r2, [pc, #256]	; (800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009f70:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009f72:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8009f76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f7a:	d0b3      	beq.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8009f7c:	d804      	bhi.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d0ab      	beq.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 8009f82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f86:	e7cd      	b.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8009f88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f8c:	d06b      	beq.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009f8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f92:	e7cf      	b.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009f94:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009f98:	d112      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009f9a:	4a35      	ldr	r2, [pc, #212]	; (800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009f9c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009f9e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8009fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fa6:	d09d      	beq.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8009fa8:	d804      	bhi.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d095      	beq.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 8009fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fb2:	e7b7      	b.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8009fb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fb8:	d055      	beq.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009fba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fbe:	e7b9      	b.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009fc0:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8009fc4:	d117      	bne.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009fc6:	4a2a      	ldr	r2, [pc, #168]	; (800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009fc8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009fca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8009fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fd2:	d00b      	beq.n	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8009fd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fd8:	d0ad      	beq.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1a3      	bne.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fde:	a801      	add	r0, sp, #4
 8009fe0:	f7ff fd7a 	bl	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009fe4:	9801      	ldr	r0, [sp, #4]
}
 8009fe6:	b005      	add	sp, #20
 8009fe8:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fec:	a801      	add	r0, sp, #4
 8009fee:	f7ff fe19 	bl	8009c24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009ff2:	9803      	ldr	r0, [sp, #12]
          break;
 8009ff4:	e7f7      	b.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009ff6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8009ffa:	d10b      	bne.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009ffc:	4b1c      	ldr	r3, [pc, #112]	; (800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 800a000:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800a004:	f43f af69 	beq.w	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d08c      	beq.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a00c:	a801      	add	r0, sp, #4
 800a00e:	f7ff fd63 	bl	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq>
 800a012:	e7ee      	b.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a014:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800a018:	d185      	bne.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a01a:	4b15      	ldr	r3, [pc, #84]	; (800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a01c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a01e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800a022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a026:	d018      	beq.n	800a05a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a028:	d808      	bhi.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 800a02a:	b19b      	cbz	r3, 800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 800a02c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a030:	f47f af79 	bne.w	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a034:	a801      	add	r0, sp, #4
 800a036:	f7ff fd4f 	bl	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq>
 800a03a:	e751      	b.n	8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
      switch (srcclk)
 800a03c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a040:	d013      	beq.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 800a042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a046:	d00c      	beq.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 800a048:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a04c:	f47f af6b 	bne.w	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
            frequency = HSI_VALUE;
 800a050:	4809      	ldr	r0, [pc, #36]	; (800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800a052:	e7c8      	b.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a054:	f7ff fd2e 	bl	8009ab4 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 800a058:	e7c5      	b.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a05a:	a801      	add	r0, sp, #4
 800a05c:	f7ff fde2 	bl	8009c24 <HAL_RCCEx_GetPLL3ClockFreq>
 800a060:	e73e      	b.n	8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          frequency = HSE_VALUE;
 800a062:	4804      	ldr	r0, [pc, #16]	; (800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
          break;
 800a064:	e7bf      	b.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          frequency = EXTERNAL_CLOCK_VALUE;
 800a066:	4805      	ldr	r0, [pc, #20]	; (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800a068:	e7bd      	b.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            frequency = CSI_VALUE;
 800a06a:	4805      	ldr	r0, [pc, #20]	; (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800a06c:	e7bb      	b.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800a06e:	bf00      	nop
 800a070:	58024400 	.word	0x58024400
 800a074:	007a1200 	.word	0x007a1200
 800a078:	03d09000 	.word	0x03d09000
 800a07c:	00bb8000 	.word	0x00bb8000
 800a080:	003d0900 	.word	0x003d0900

0800a084 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a088:	4606      	mov	r6, r0
 800a08a:	b087      	sub	sp, #28
 800a08c:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a08e:	f7fb fca5 	bl	80059dc <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a092:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800a094:	4682      	mov	sl, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a096:	6830      	ldr	r0, [r6, #0]
 800a098:	f002 fb44 	bl	800c724 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a09c:	4604      	mov	r4, r0
 800a09e:	bb50      	cbnz	r0, 800a0f6 <SD_FindSCR+0x72>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a0a0:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800a0a2:	6830      	ldr	r0, [r6, #0]
 800a0a4:	0409      	lsls	r1, r1, #16
 800a0a6:	f002 fc69 	bl	800c97c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	bb18      	cbnz	r0, 800a0f6 <SD_FindSCR+0x72>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 800a0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b2:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a0b4:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a0b6:	9004      	str	r0, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a0b8:	6830      	ldr	r0, [r6, #0]
  config.DataLength    = 8U;
 800a0ba:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a0be:	2302      	movs	r3, #2
 800a0c0:	e9cd 1302 	strd	r1, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a0c4:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a0c6:	4669      	mov	r1, sp
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a0c8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a0ca:	f002 fb18 	bl	800c6fe <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a0ce:	6830      	ldr	r0, [r6, #0]
 800a0d0:	f002 fc9c 	bl	800ca0c <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	b970      	cbnz	r0, 800a0f6 <SD_FindSCR+0x72>
  uint32_t index = 0U;
 800a0d8:	4683      	mov	fp, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a0da:	4605      	mov	r5, r0
 800a0dc:	4607      	mov	r7, r0
  {
    return errorstate;
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a0de:	f240 592a 	movw	r9, #1322	; 0x52a
 800a0e2:	6830      	ldr	r0, [r6, #0]
 800a0e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a0e6:	ea13 0f09 	tst.w	r3, r9
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a0ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a0ec:	d007      	beq.n	800a0fe <SD_FindSCR+0x7a>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a0ee:	0719      	lsls	r1, r3, #28
 800a0f0:	d51c      	bpl.n	800a12c <SD_FindSCR+0xa8>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a0f2:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a0f4:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	b007      	add	sp, #28
 800a0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a0fe:	031b      	lsls	r3, r3, #12
 800a100:	d40b      	bmi.n	800a11a <SD_FindSCR+0x96>
 800a102:	f1bb 0f00 	cmp.w	fp, #0
 800a106:	d108      	bne.n	800a11a <SD_FindSCR+0x96>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a108:	f002 fad0 	bl	800c6ac <SDMMC_ReadFIFO>
 800a10c:	4607      	mov	r7, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a10e:	6830      	ldr	r0, [r6, #0]
      index++;
 800a110:	f04f 0b01 	mov.w	fp, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a114:	f002 faca 	bl	800c6ac <SDMMC_ReadFIFO>
 800a118:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a11a:	f7fb fc5f 	bl	80059dc <HAL_GetTick>
 800a11e:	eba0 000a 	sub.w	r0, r0, sl
 800a122:	3001      	adds	r0, #1
 800a124:	d1dd      	bne.n	800a0e2 <SD_FindSCR+0x5e>
      return HAL_SD_ERROR_TIMEOUT;
 800a126:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a12a:	e7e4      	b.n	800a0f6 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a12c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a12e:	079a      	lsls	r2, r3, #30
 800a130:	d501      	bpl.n	800a136 <SD_FindSCR+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a132:	2402      	movs	r4, #2
 800a134:	e7de      	b.n	800a0f4 <SD_FindSCR+0x70>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a136:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a138:	069b      	lsls	r3, r3, #26
 800a13a:	d501      	bpl.n	800a140 <SD_FindSCR+0xbc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a13c:	2420      	movs	r4, #32
 800a13e:	e7d9      	b.n	800a0f4 <SD_FindSCR+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a140:	4b04      	ldr	r3, [pc, #16]	; (800a154 <SD_FindSCR+0xd0>)
 800a142:	ba2d      	rev	r5, r5
 800a144:	ba3f      	rev	r7, r7
 800a146:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a148:	f8c8 5000 	str.w	r5, [r8]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a14c:	f8c8 7004 	str.w	r7, [r8, #4]
  return HAL_SD_ERROR_NONE;
 800a150:	e7d1      	b.n	800a0f6 <SD_FindSCR+0x72>
 800a152:	bf00      	nop
 800a154:	18000f3a 	.word	0x18000f3a

0800a158 <HAL_SD_ReadBlocks_DMA>:
{
 800a158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a15a:	4604      	mov	r4, r0
 800a15c:	b087      	sub	sp, #28
 800a15e:	4615      	mov	r5, r2
 800a160:	461e      	mov	r6, r3
  if(NULL == pData)
 800a162:	460f      	mov	r7, r1
 800a164:	b931      	cbnz	r1, 800a174 <HAL_SD_ReadBlocks_DMA+0x1c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a166:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a168:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a16c:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800a16e:	2001      	movs	r0, #1
}
 800a170:	b007      	add	sp, #28
 800a172:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 800a174:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800a178:	b2c0      	uxtb	r0, r0
 800a17a:	2801      	cmp	r0, #1
 800a17c:	d14c      	bne.n	800a218 <HAL_SD_ReadBlocks_DMA+0xc0>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a17e:	18d3      	adds	r3, r2, r3
 800a180:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a182:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a184:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a186:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a188:	d904      	bls.n	800a194 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a18a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a18c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a190:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800a192:	e7ed      	b.n	800a170 <HAL_SD_ReadBlocks_DMA+0x18>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a194:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 800a196:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 800a198:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a19a:	2a01      	cmp	r2, #1
    hsd->State = HAL_SD_STATE_BUSY;
 800a19c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a1a0:	f04f 32ff 	mov.w	r2, #4294967295
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a1a4:	ea4f 2346 	mov.w	r3, r6, lsl #9
    hsd->Instance->DCTRL = 0U;
 800a1a8:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a1aa:	4669      	mov	r1, sp
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a1ac:	62e3      	str	r3, [r4, #44]	; 0x2c
      add *= 512U;
 800a1ae:	bf18      	it	ne
 800a1b0:	026d      	lslne	r5, r5, #9
    hsd->pRxBuffPtr = pData;
 800a1b2:	62a7      	str	r7, [r4, #40]	; 0x28
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a1b4:	e9cd 2300 	strd	r2, r3, [sp]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a1b8:	2290      	movs	r2, #144	; 0x90
 800a1ba:	2302      	movs	r3, #2
 800a1bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a1c0:	2300      	movs	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a1c2:	e9cd 3304 	strd	r3, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a1c6:	f002 fa9a 	bl	800c6fe <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a1ca:	6820      	ldr	r0, [r4, #0]
 800a1cc:	68c3      	ldr	r3, [r0, #12]
 800a1ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1d2:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a1d4:	2301      	movs	r3, #1
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a1d6:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 800a1d8:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a1da:	6503      	str	r3, [r0, #80]	; 0x50
    if(NumberOfBlocks > 1U)
 800a1dc:	d911      	bls.n	800a202 <HAL_SD_ReadBlocks_DMA+0xaa>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a1de:	2382      	movs	r3, #130	; 0x82
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a1e0:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a1e2:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a1e4:	f002 fad0 	bl	800c788 <SDMMC_CmdReadMultiBlock>
 800a1e8:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1ea:	b180      	cbz	r0, 800a20e <HAL_SD_ReadBlocks_DMA+0xb6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1ec:	4a0b      	ldr	r2, [pc, #44]	; (800a21c <HAL_SD_ReadBlocks_DMA+0xc4>)
 800a1ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a1f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a1f2:	4318      	orrs	r0, r3
      hsd->Context = SD_CONTEXT_NONE;
 800a1f4:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 800a1f6:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a1f8:	2001      	movs	r0, #1
 800a1fa:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a1fe:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800a200:	e7b6      	b.n	800a170 <HAL_SD_ReadBlocks_DMA+0x18>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a202:	2381      	movs	r3, #129	; 0x81
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a204:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a206:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a208:	f002 faa5 	bl	800c756 <SDMMC_CmdReadSingleBlock>
 800a20c:	e7ec      	b.n	800a1e8 <HAL_SD_ReadBlocks_DMA+0x90>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a20e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a210:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a214:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_OK;
 800a216:	e7ab      	b.n	800a170 <HAL_SD_ReadBlocks_DMA+0x18>
    return HAL_BUSY;
 800a218:	2002      	movs	r0, #2
 800a21a:	e7a9      	b.n	800a170 <HAL_SD_ReadBlocks_DMA+0x18>
 800a21c:	1fe00fff 	.word	0x1fe00fff

0800a220 <HAL_SD_WriteBlocks_DMA>:
{
 800a220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a224:	4604      	mov	r4, r0
 800a226:	b086      	sub	sp, #24
 800a228:	4615      	mov	r5, r2
 800a22a:	461e      	mov	r6, r3
  if(NULL == pData)
 800a22c:	460f      	mov	r7, r1
 800a22e:	b939      	cbnz	r1, 800a240 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a230:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a232:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a236:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800a238:	2001      	movs	r0, #1
}
 800a23a:	b006      	add	sp, #24
 800a23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 800a240:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800a244:	b2c0      	uxtb	r0, r0
 800a246:	2801      	cmp	r0, #1
 800a248:	d14c      	bne.n	800a2e4 <HAL_SD_WriteBlocks_DMA+0xc4>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a24a:	18d3      	adds	r3, r2, r3
 800a24c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a24e:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a250:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a252:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a254:	d904      	bls.n	800a260 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a256:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a258:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a25c:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800a25e:	e7ec      	b.n	800a23a <HAL_SD_WriteBlocks_DMA+0x1a>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a260:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 800a262:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 800a264:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a266:	f04f 0890 	mov.w	r8, #144	; 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a26a:	2a01      	cmp	r2, #1
    hsd->State = HAL_SD_STATE_BUSY;
 800a26c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a270:	f04f 32ff 	mov.w	r2, #4294967295
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a274:	ea4f 2346 	mov.w	r3, r6, lsl #9
    hsd->Instance->DCTRL = 0U;
 800a278:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a27a:	4669      	mov	r1, sp
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a27c:	6263      	str	r3, [r4, #36]	; 0x24
      add *= 512U;
 800a27e:	bf18      	it	ne
 800a280:	026d      	lslne	r5, r5, #9
    hsd->pTxBuffPtr = pData;
 800a282:	6227      	str	r7, [r4, #32]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a284:	e9cd 2300 	strd	r2, r3, [sp]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a288:	2300      	movs	r3, #0
 800a28a:	e9cd 8302 	strd	r8, r3, [sp, #8]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a28e:	e9cd 3304 	strd	r3, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a292:	f002 fa34 	bl	800c6fe <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a296:	6820      	ldr	r0, [r4, #0]
 800a298:	68c3      	ldr	r3, [r0, #12]
 800a29a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a29e:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a2a0:	2301      	movs	r3, #1
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a2a2:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 800a2a4:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a2a6:	6503      	str	r3, [r0, #80]	; 0x50
    if(NumberOfBlocks > 1U)
 800a2a8:	d911      	bls.n	800a2ce <HAL_SD_WriteBlocks_DMA+0xae>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a2aa:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a2ac:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a2ae:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a2b0:	f002 fa9c 	bl	800c7ec <SDMMC_CmdWriteMultiBlock>
 800a2b4:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2b6:	b180      	cbz	r0, 800a2da <HAL_SD_WriteBlocks_DMA+0xba>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2b8:	4a0b      	ldr	r2, [pc, #44]	; (800a2e8 <HAL_SD_WriteBlocks_DMA+0xc8>)
 800a2ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a2bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2be:	4318      	orrs	r0, r3
      hsd->Context = SD_CONTEXT_NONE;
 800a2c0:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 800a2c2:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a2c4:	2001      	movs	r0, #1
 800a2c6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a2ca:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800a2cc:	e7b5      	b.n	800a23a <HAL_SD_WriteBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a2ce:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	f002 fa71 	bl	800c7ba <SDMMC_CmdWriteSingleBlock>
 800a2d8:	e7ec      	b.n	800a2b4 <HAL_SD_WriteBlocks_DMA+0x94>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a2da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2dc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a2e0:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_OK;
 800a2e2:	e7aa      	b.n	800a23a <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 800a2e4:	2002      	movs	r0, #2
 800a2e6:	e7a8      	b.n	800a23a <HAL_SD_WriteBlocks_DMA+0x1a>
 800a2e8:	1fe00fff 	.word	0x1fe00fff

0800a2ec <HAL_SD_ErrorCallback>:
 800a2ec:	4770      	bx	lr

0800a2ee <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 800a2ee:	4770      	bx	lr

0800a2f0 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a2f0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800a2f2:	0f9a      	lsrs	r2, r3, #30
 800a2f4:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a2f6:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800a2fa:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a2fc:	f3c3 6201 	ubfx	r2, r3, #24, #2
 800a300:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a302:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a306:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a308:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a30c:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a30e:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a310:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a312:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a314:	0d1a      	lsrs	r2, r3, #20
 800a316:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a318:	f3c3 4203 	ubfx	r2, r3, #16, #4
 800a31c:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a31e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800a322:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a324:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800a328:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a32a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800a32e:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a330:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800a334:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a336:	2200      	movs	r2, #0
 800a338:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800a33a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 800a33c:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 800a33e:	2a00      	cmp	r2, #0
 800a340:	d16b      	bne.n	800a41a <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a342:	f640 74fc 	movw	r4, #4092	; 0xffc
 800a346:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800a348:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 800a34c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800a350:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a352:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800a356:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a358:	f3c2 6302 	ubfx	r3, r2, #24, #3
 800a35c:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a35e:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800a362:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a364:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a368:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a36c:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a36e:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a370:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a372:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a374:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a376:	f002 0207 	and.w	r2, r2, #7
 800a37a:	3202      	adds	r2, #2
 800a37c:	4093      	lsls	r3, r2
 800a37e:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a380:	7a0a      	ldrb	r2, [r1, #8]
 800a382:	f002 040f 	and.w	r4, r2, #15
 800a386:	2201      	movs	r2, #1
 800a388:	40a2      	lsls	r2, r4
 800a38a:	6502      	str	r2, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a38c:	0a52      	lsrs	r2, r2, #9
 800a38e:	4353      	muls	r3, r2
 800a390:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800a392:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a396:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a398:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800a39a:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800a39e:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a3a0:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a3a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a3a8:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a3aa:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a3ac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->Reserved3 = 0;
 800a3ae:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a3b0:	0fda      	lsrs	r2, r3, #31
 800a3b2:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a3b4:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800a3b8:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a3ba:	f3c3 6282 	ubfx	r2, r3, #26, #3
 800a3be:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a3c0:	f3c3 5283 	ubfx	r2, r3, #22, #4
 800a3c4:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a3c6:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800a3ca:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a3ce:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 800a3d2:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a3d6:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a3da:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800a3de:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a3e2:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800a3e6:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a3ea:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800a3ee:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a3f2:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800a3f6:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a3fa:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800a3fe:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a402:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a406:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a40a:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a40e:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800a412:	2301      	movs	r3, #1
 800a414:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 800a418:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a41a:	2a01      	cmp	r2, #1
 800a41c:	d10f      	bne.n	800a43e <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a41e:	041b      	lsls	r3, r3, #16
 800a420:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 800a424:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800a428:	4313      	orrs	r3, r2
 800a42a:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a42c:	690b      	ldr	r3, [r1, #16]
 800a42e:	3301      	adds	r3, #1
 800a430:	029b      	lsls	r3, r3, #10
 800a432:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a434:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800a436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a43a:	6503      	str	r3, [r0, #80]	; 0x50
 800a43c:	e7ab      	b.n	800a396 <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a43e:	6803      	ldr	r3, [r0, #0]
 800a440:	4a05      	ldr	r2, [pc, #20]	; (800a458 <HAL_SD_GetCardCSD+0x168>)
 800a442:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a444:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a44a:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a44c:	2301      	movs	r3, #1
 800a44e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800a452:	4618      	mov	r0, r3
 800a454:	e7e0      	b.n	800a418 <HAL_SD_GetCardCSD+0x128>
 800a456:	bf00      	nop
 800a458:	1fe00fff 	.word	0x1fe00fff

0800a45c <HAL_SD_InitCard>:
{
 800a45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a460:	2300      	movs	r3, #0
{
 800a462:	b098      	sub	sp, #96	; 0x60
 800a464:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a466:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800a46a:	4da1      	ldr	r5, [pc, #644]	; (800a6f0 <HAL_SD_InitCard+0x294>)
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a46c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a470:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a474:	f7ff fd22 	bl	8009ebc <HAL_RCCEx_GetPeriphCLKFreq>
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a478:	69a3      	ldr	r3, [r4, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a47a:	4606      	mov	r6, r0
 800a47c:	6827      	ldr	r7, [r4, #0]
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a47e:	2b02      	cmp	r3, #2
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800a480:	fbb0 f5f5 	udiv	r5, r0, r5
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a484:	d103      	bne.n	800a48e <HAL_SD_InitCard+0x32>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	f043 0310 	orr.w	r3, r3, #16
 800a48c:	603b      	str	r3, [r7, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 800a48e:	ab0a      	add	r3, sp, #40	; 0x28
 800a490:	950b      	str	r5, [sp, #44]	; 0x2c
 800a492:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a496:	ab07      	add	r3, sp, #28
 800a498:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a49c:	4638      	mov	r0, r7
 800a49e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a4a0:	f002 f8ea 	bl	800c678 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a4a4:	6820      	ldr	r0, [r4, #0]
 800a4a6:	f002 f909 	bl	800c6bc <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800a4aa:	0068      	lsls	r0, r5, #1
 800a4ac:	fbb6 f0f0 	udiv	r0, r6, r0
  if(sdmmc_clk != 0U)
 800a4b0:	b1f8      	cbz	r0, 800a4f2 <HAL_SD_InitCard+0x96>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800a4b2:	4d90      	ldr	r5, [pc, #576]	; (800a6f4 <HAL_SD_InitCard+0x298>)
 800a4b4:	fbb5 f0f0 	udiv	r0, r5, r0
 800a4b8:	3001      	adds	r0, #1
    HAL_Delay(2U);
 800a4ba:	f7fb fa95 	bl	80059e8 <HAL_Delay>
  __IO uint32_t count = 0U;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 800a4c2:	f7fb fa8b 	bl	80059dc <HAL_GetTick>
 800a4c6:	4607      	mov	r7, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a4c8:	6820      	ldr	r0, [r4, #0]
 800a4ca:	f002 f9ed 	bl	800c8a8 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	b940      	cbnz	r0, 800a4e4 <HAL_SD_InitCard+0x88>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a4d2:	6820      	ldr	r0, [r4, #0]
 800a4d4:	f002 fa12 	bl	800c8fc <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4d8:	b168      	cbz	r0, 800a4f6 <HAL_SD_InitCard+0x9a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a4da:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a4dc:	6820      	ldr	r0, [r4, #0]
 800a4de:	f002 f9e3 	bl	800c8a8 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4e2:	b150      	cbz	r0, 800a4fa <HAL_SD_InitCard+0x9e>
    hsd->State = HAL_SD_STATE_READY;
 800a4e4:	2501      	movs	r5, #1
 800a4e6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a4ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a4ec:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 800a4ee:	63a0      	str	r0, [r4, #56]	; 0x38
    return HAL_ERROR;
 800a4f0:	e0b0      	b.n	800a654 <HAL_SD_InitCard+0x1f8>
    HAL_Delay(2U);
 800a4f2:	2002      	movs	r0, #2
 800a4f4:	e7e1      	b.n	800a4ba <HAL_SD_InitCard+0x5e>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	6423      	str	r3, [r4, #64]	; 0x40
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a4fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d127      	bne.n	800a550 <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a500:	2100      	movs	r1, #0
 800a502:	6820      	ldr	r0, [r4, #0]
 800a504:	f002 fa3a 	bl	800c97c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a508:	b310      	cbz	r0, 800a550 <HAL_SD_InitCard+0xf4>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a50a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800a50e:	e7e9      	b.n	800a4e4 <HAL_SD_InitCard+0x88>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a510:	4631      	mov	r1, r6
 800a512:	6820      	ldr	r0, [r4, #0]
 800a514:	f002 fa32 	bl	800c97c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a518:	2800      	cmp	r0, #0
 800a51a:	d1e3      	bne.n	800a4e4 <HAL_SD_InitCard+0x88>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a51c:	4651      	mov	r1, sl
 800a51e:	6820      	ldr	r0, [r4, #0]
 800a520:	f002 fa45 	bl	800c9ae <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a524:	2800      	cmp	r0, #0
 800a526:	d1f0      	bne.n	800a50a <HAL_SD_InitCard+0xae>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a528:	4631      	mov	r1, r6
 800a52a:	6820      	ldr	r0, [r4, #0]
 800a52c:	f002 f8e4 	bl	800c6f8 <SDMMC_GetResponse>
    count++;
 800a530:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a532:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a534:	0fc6      	lsrs	r6, r0, #31
    count++;
 800a536:	3301      	adds	r3, #1
 800a538:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a53a:	9b06      	ldr	r3, [sp, #24]
 800a53c:	4543      	cmp	r3, r8
 800a53e:	d801      	bhi.n	800a544 <HAL_SD_InitCard+0xe8>
 800a540:	2e00      	cmp	r6, #0
 800a542:	d0e5      	beq.n	800a510 <HAL_SD_InitCard+0xb4>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a544:	9b06      	ldr	r3, [sp, #24]
 800a546:	454b      	cmp	r3, r9
 800a548:	d909      	bls.n	800a55e <HAL_SD_InitCard+0x102>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a54a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800a54e:	e7c9      	b.n	800a4e4 <HAL_SD_InitCard+0x88>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a550:	f64f 78fe 	movw	r8, #65534	; 0xfffe
{
 800a554:	2600      	movs	r6, #0
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a556:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 800a6fc <HAL_SD_InitCard+0x2a0>
 800a55a:	46c1      	mov	r9, r8
 800a55c:	e7ed      	b.n	800a53a <HAL_SD_InitCard+0xde>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a55e:	006b      	lsls	r3, r5, #1
 800a560:	d533      	bpl.n	800a5ca <HAL_SD_InitCard+0x16e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a562:	2301      	movs	r3, #1
 800a564:	6820      	ldr	r0, [r4, #0]
 800a566:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a568:	69a3      	ldr	r3, [r4, #24]
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d12d      	bne.n	800a5ca <HAL_SD_InitCard+0x16e>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800a56e:	01ee      	lsls	r6, r5, #7
 800a570:	d52b      	bpl.n	800a5ca <HAL_SD_InitCard+0x16e>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a572:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a576:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800a578:	6803      	ldr	r3, [r0, #0]
 800a57a:	f043 0308 	orr.w	r3, r3, #8
 800a57e:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800a580:	f002 fb10 	bl	800cba4 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800a584:	2800      	cmp	r0, #0
 800a586:	d1ad      	bne.n	800a4e4 <HAL_SD_InitCard+0x88>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a58c:	0155      	lsls	r5, r2, #5
 800a58e:	d565      	bpl.n	800a65c <HAL_SD_InitCard+0x200>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800a590:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a594:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800a596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a598:	02d8      	lsls	r0, r3, #11
 800a59a:	d5b6      	bpl.n	800a50a <HAL_SD_InitCard+0xae>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800a59c:	2001      	movs	r0, #1
 800a59e:	f7ff fea6 	bl	800a2ee <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800a5a2:	6822      	ldr	r2, [r4, #0]
 800a5a4:	6813      	ldr	r3, [r2, #0]
 800a5a6:	f043 0304 	orr.w	r3, r3, #4
 800a5aa:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a5ac:	6823      	ldr	r3, [r4, #0]
 800a5ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5b0:	0191      	lsls	r1, r2, #6
 800a5b2:	d55b      	bpl.n	800a66c <HAL_SD_InitCard+0x210>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800a5b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a5b8:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800a5ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5bc:	02d2      	lsls	r2, r2, #11
 800a5be:	d4c4      	bmi.n	800a54a <HAL_SD_InitCard+0xee>
          hsd->Instance->POWER = 0x13U;
 800a5c0:	2213      	movs	r2, #19
 800a5c2:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800a5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c8:	639a      	str	r2, [r3, #56]	; 0x38
  uint16_t sd_rca = 1U;
 800a5ca:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a5cc:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 800a5ce:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a5d2:	f002 f879 	bl	800c6c8 <SDMMC_GetPowerState>
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d07c      	beq.n	800a6d4 <HAL_SD_InitCard+0x278>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a5da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a5dc:	2b03      	cmp	r3, #3
 800a5de:	d018      	beq.n	800a612 <HAL_SD_InitCard+0x1b6>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a5e0:	6820      	ldr	r0, [r4, #0]
 800a5e2:	f002 fa2c 	bl	800ca3e <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d14d      	bne.n	800a686 <HAL_SD_InitCard+0x22a>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a5ea:	4601      	mov	r1, r0
 800a5ec:	6820      	ldr	r0, [r4, #0]
 800a5ee:	f002 f883 	bl	800c6f8 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a5f2:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a5f4:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a5f6:	6820      	ldr	r0, [r4, #0]
 800a5f8:	f002 f87e 	bl	800c6f8 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a5fc:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a5fe:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a600:	6820      	ldr	r0, [r4, #0]
 800a602:	f002 f879 	bl	800c6f8 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a606:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a608:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a60a:	6820      	ldr	r0, [r4, #0]
 800a60c:	f002 f874 	bl	800c6f8 <SDMMC_GetResponse>
 800a610:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a612:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a614:	2b03      	cmp	r3, #3
 800a616:	d12f      	bne.n	800a678 <HAL_SD_InitCard+0x21c>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a618:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a61a:	2b03      	cmp	r3, #3
 800a61c:	d139      	bne.n	800a692 <HAL_SD_InitCard+0x236>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a61e:	2104      	movs	r1, #4
 800a620:	6820      	ldr	r0, [r4, #0]
 800a622:	f002 f869 	bl	800c6f8 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a626:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a628:	0d00      	lsrs	r0, r0, #20
 800a62a:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a62c:	4620      	mov	r0, r4
 800a62e:	f7ff fe5f 	bl	800a2f0 <HAL_SD_GetCardCSD>
 800a632:	4605      	mov	r5, r0
 800a634:	2800      	cmp	r0, #0
 800a636:	d14a      	bne.n	800a6ce <HAL_SD_InitCard+0x272>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a638:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a63a:	4603      	mov	r3, r0
 800a63c:	6820      	ldr	r0, [r4, #0]
 800a63e:	0412      	lsls	r2, r2, #16
 800a640:	f002 f918 	bl	800c874 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a644:	b9f8      	cbnz	r0, 800a686 <HAL_SD_InitCard+0x22a>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a64a:	6820      	ldr	r0, [r4, #0]
 800a64c:	f002 f86a 	bl	800c724 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a650:	2800      	cmp	r0, #0
 800a652:	d142      	bne.n	800a6da <HAL_SD_InitCard+0x27e>
}
 800a654:	4628      	mov	r0, r5
 800a656:	b018      	add	sp, #96	; 0x60
 800a658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a65c:	f7fb f9be 	bl	80059dc <HAL_GetTick>
 800a660:	1bc0      	subs	r0, r0, r7
 800a662:	3001      	adds	r0, #1
 800a664:	d190      	bne.n	800a588 <HAL_SD_InitCard+0x12c>
            return HAL_SD_ERROR_TIMEOUT;
 800a666:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a66a:	e73b      	b.n	800a4e4 <HAL_SD_InitCard+0x88>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a66c:	f7fb f9b6 	bl	80059dc <HAL_GetTick>
 800a670:	1bc0      	subs	r0, r0, r7
 800a672:	3001      	adds	r0, #1
 800a674:	d19a      	bne.n	800a5ac <HAL_SD_InitCard+0x150>
 800a676:	e7f6      	b.n	800a666 <HAL_SD_InitCard+0x20a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a678:	f10d 0116 	add.w	r1, sp, #22
 800a67c:	6820      	ldr	r0, [r4, #0]
 800a67e:	f002 fa0b 	bl	800ca98 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a682:	2800      	cmp	r0, #0
 800a684:	d0c8      	beq.n	800a618 <HAL_SD_InitCard+0x1bc>
    hsd->State = HAL_SD_STATE_READY;
 800a686:	2501      	movs	r5, #1
 800a688:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a68c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a68e:	4308      	orrs	r0, r1
 800a690:	e72d      	b.n	800a4ee <HAL_SD_InitCard+0x92>
    hsd->SdCard.RelCardAdd = sd_rca;
 800a692:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a696:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800a698:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a69a:	0409      	lsls	r1, r1, #16
 800a69c:	f002 f9e5 	bl	800ca6a <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d1f0      	bne.n	800a686 <HAL_SD_InitCard+0x22a>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a6a4:	4601      	mov	r1, r0
 800a6a6:	6820      	ldr	r0, [r4, #0]
 800a6a8:	f002 f826 	bl	800c6f8 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a6ac:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a6ae:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a6b0:	6820      	ldr	r0, [r4, #0]
 800a6b2:	f002 f821 	bl	800c6f8 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a6b6:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a6b8:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a6ba:	6820      	ldr	r0, [r4, #0]
 800a6bc:	f002 f81c 	bl	800c6f8 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a6c0:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a6c2:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a6c4:	6820      	ldr	r0, [r4, #0]
 800a6c6:	f002 f817 	bl	800c6f8 <SDMMC_GetResponse>
 800a6ca:	66e0      	str	r0, [r4, #108]	; 0x6c
 800a6cc:	e7a7      	b.n	800a61e <HAL_SD_InitCard+0x1c2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a6ce:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800a6d2:	e7d8      	b.n	800a686 <HAL_SD_InitCard+0x22a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a6d4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a6d8:	e7d5      	b.n	800a686 <HAL_SD_InitCard+0x22a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6da:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800a6dc:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6de:	4a06      	ldr	r2, [pc, #24]	; (800a6f8 <HAL_SD_InitCard+0x29c>)
 800a6e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a6e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a6e4:	4318      	orrs	r0, r3
 800a6e6:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a6e8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 800a6ec:	e7b2      	b.n	800a654 <HAL_SD_InitCard+0x1f8>
 800a6ee:	bf00      	nop
 800a6f0:	000c3500 	.word	0x000c3500
 800a6f4:	00012110 	.word	0x00012110
 800a6f8:	1fe00fff 	.word	0x1fe00fff
 800a6fc:	c1100000 	.word	0xc1100000

0800a700 <HAL_SD_GetCardStatus>:
{
 800a700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a704:	4604      	mov	r4, r0
 800a706:	b096      	sub	sp, #88	; 0x58
 800a708:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 800a70a:	f7fb f967 	bl	80059dc <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a70e:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800a710:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a712:	6820      	ldr	r0, [r4, #0]
 800a714:	f001 fff0 	bl	800c6f8 <SDMMC_GetResponse>
 800a718:	0183      	lsls	r3, r0, #6
 800a71a:	d50b      	bpl.n	800a734 <HAL_SD_GetCardStatus+0x34>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a71c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a720:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800a722:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a724:	4a53      	ldr	r2, [pc, #332]	; (800a874 <HAL_SD_GetCardStatus+0x174>)
 800a726:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a728:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a72a:	4318      	orrs	r0, r3
 800a72c:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a72e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800a732:	e08a      	b.n	800a84a <HAL_SD_GetCardStatus+0x14a>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a734:	2140      	movs	r1, #64	; 0x40
 800a736:	6820      	ldr	r0, [r4, #0]
 800a738:	f001 fff4 	bl	800c724 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a73c:	b110      	cbz	r0, 800a744 <HAL_SD_GetCardStatus+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a73e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a740:	63a3      	str	r3, [r4, #56]	; 0x38
 800a742:	e7ed      	b.n	800a720 <HAL_SD_GetCardStatus+0x20>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a744:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a746:	6820      	ldr	r0, [r4, #0]
 800a748:	0409      	lsls	r1, r1, #16
 800a74a:	f002 f917 	bl	800c97c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a74e:	2800      	cmp	r0, #0
 800a750:	d1f5      	bne.n	800a73e <HAL_SD_GetCardStatus+0x3e>
  config.DataLength    = 64U;
 800a752:	2340      	movs	r3, #64	; 0x40
 800a754:	f04f 35ff 	mov.w	r5, #4294967295
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a758:	2760      	movs	r7, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a75a:	9004      	str	r0, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a75c:	4669      	mov	r1, sp
 800a75e:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 800a760:	e9cd 5300 	strd	r5, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a764:	2302      	movs	r3, #2
 800a766:	e9cd 7302 	strd	r7, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a76a:	2301      	movs	r3, #1
 800a76c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a76e:	f001 ffc6 	bl	800c6fe <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a772:	6820      	ldr	r0, [r4, #0]
 800a774:	f002 f9fd 	bl	800cb72 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a778:	2800      	cmp	r0, #0
 800a77a:	d1e0      	bne.n	800a73e <HAL_SD_GetCardStatus+0x3e>
  uint32_t *pData = pSDstatus;
 800a77c:	af06      	add	r7, sp, #24
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a77e:	6823      	ldr	r3, [r4, #0]
 800a780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a782:	f412 7f95 	tst.w	r2, #298	; 0x12a
 800a786:	d00a      	beq.n	800a79e <HAL_SD_GetCardStatus+0x9e>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a78a:	0711      	lsls	r1, r2, #28
 800a78c:	d470      	bmi.n	800a870 <HAL_SD_GetCardStatus+0x170>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a78e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a790:	0792      	lsls	r2, r2, #30
 800a792:	d46b      	bmi.n	800a86c <HAL_SD_GetCardStatus+0x16c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a796:	069b      	lsls	r3, r3, #26
 800a798:	d520      	bpl.n	800a7dc <HAL_SD_GetCardStatus+0xdc>
    return HAL_SD_ERROR_RX_OVERRUN;
 800a79a:	2020      	movs	r0, #32
 800a79c:	e7c0      	b.n	800a720 <HAL_SD_GetCardStatus+0x20>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a0:	0418      	lsls	r0, r3, #16
 800a7a2:	d508      	bpl.n	800a7b6 <HAL_SD_GetCardStatus+0xb6>
 800a7a4:	f107 0520 	add.w	r5, r7, #32
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a7a8:	6820      	ldr	r0, [r4, #0]
 800a7aa:	f001 ff7f 	bl	800c6ac <SDMMC_ReadFIFO>
 800a7ae:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 800a7b2:	42af      	cmp	r7, r5
 800a7b4:	d1f8      	bne.n	800a7a8 <HAL_SD_GetCardStatus+0xa8>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a7b6:	f7fb f911 	bl	80059dc <HAL_GetTick>
 800a7ba:	eba0 0008 	sub.w	r0, r0, r8
 800a7be:	3001      	adds	r0, #1
 800a7c0:	d1dd      	bne.n	800a77e <HAL_SD_GetCardStatus+0x7e>
      return HAL_SD_ERROR_TIMEOUT;
 800a7c2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a7c6:	e7ab      	b.n	800a720 <HAL_SD_GetCardStatus+0x20>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a7c8:	f001 ff70 	bl	800c6ac <SDMMC_ReadFIFO>
 800a7cc:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a7d0:	f7fb f904 	bl	80059dc <HAL_GetTick>
 800a7d4:	eba0 0008 	sub.w	r0, r0, r8
 800a7d8:	3001      	adds	r0, #1
 800a7da:	d0f2      	beq.n	800a7c2 <HAL_SD_GetCardStatus+0xc2>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a7dc:	6820      	ldr	r0, [r4, #0]
 800a7de:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800a7e0:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
 800a7e4:	d1f0      	bne.n	800a7c8 <HAL_SD_GetCardStatus+0xc8>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a7e6:	9a06      	ldr	r2, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a7e8:	4b23      	ldr	r3, [pc, #140]	; (800a878 <HAL_SD_GetCardStatus+0x178>)
 800a7ea:	6383      	str	r3, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a7ec:	f3c2 1381 	ubfx	r3, r2, #6, #2
 800a7f0:	7033      	strb	r3, [r6, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a7f2:	f3c2 1340 	ubfx	r3, r2, #5, #1
 800a7f6:	7073      	strb	r3, [r6, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a7f8:	0a13      	lsrs	r3, r2, #8
 800a7fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a7fe:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800a802:	b29b      	uxth	r3, r3
 800a804:	8073      	strh	r3, [r6, #2]
 800a806:	9b07      	ldr	r3, [sp, #28]
 800a808:	ba1b      	rev	r3, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a80a:	6073      	str	r3, [r6, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a80c:	9b08      	ldr	r3, [sp, #32]
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	7232      	strb	r2, [r6, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a812:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a816:	7272      	strb	r2, [r6, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a818:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a81c:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a81e:	72b2      	strb	r2, [r6, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a822:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a826:	b2d1      	uxtb	r1, r2
 800a828:	430b      	orrs	r3, r1
 800a82a:	81b3      	strh	r3, [r6, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a82c:	f3c2 2385 	ubfx	r3, r2, #10, #6
 800a830:	73b3      	strb	r3, [r6, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a832:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800a836:	73f3      	strb	r3, [r6, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a838:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a83c:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a840:	7433      	strb	r3, [r6, #16]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a842:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a846:	7472      	strb	r2, [r6, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a848:	74b3      	strb	r3, [r6, #18]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a84a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a84e:	6820      	ldr	r0, [r4, #0]
 800a850:	f001 ff68 	bl	800c724 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a854:	b130      	cbz	r0, 800a864 <HAL_SD_GetCardStatus+0x164>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a856:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800a858:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a85a:	4a06      	ldr	r2, [pc, #24]	; (800a874 <HAL_SD_GetCardStatus+0x174>)
 800a85c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a85e:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a860:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
}
 800a864:	4628      	mov	r0, r5
 800a866:	b016      	add	sp, #88	; 0x58
 800a868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a86c:	2002      	movs	r0, #2
 800a86e:	e757      	b.n	800a720 <HAL_SD_GetCardStatus+0x20>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a870:	2008      	movs	r0, #8
 800a872:	e755      	b.n	800a720 <HAL_SD_GetCardStatus+0x20>
 800a874:	1fe00fff 	.word	0x1fe00fff
 800a878:	18000f3a 	.word	0x18000f3a

0800a87c <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a87c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a87e:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a880:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a882:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a884:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a886:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a888:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800a88a:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a88c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a88e:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a890:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a892:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a894:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a896:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a898:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 800a89a:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a89c:	61cb      	str	r3, [r1, #28]
}
 800a89e:	4770      	bx	lr

0800a8a0 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 800a8a0:	2303      	movs	r3, #3
{
 800a8a2:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800a8a4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 800a8a8:	b08a      	sub	sp, #40	; 0x28
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a8aa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a8b0:	2b03      	cmp	r3, #3
 800a8b2:	d002      	beq.n	800a8ba <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a8b4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a8b8:	d103      	bne.n	800a8c2 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a8bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8c0:	e064      	b.n	800a98c <HAL_SD_ConfigWideBusOperation+0xec>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a8c2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800a8c6:	6800      	ldr	r0, [r0, #0]
 800a8c8:	d13b      	bne.n	800a942 <HAL_SD_ConfigWideBusOperation+0xa2>
  uint32_t scr[2U] = {0UL, 0UL};
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a8d0:	f001 ff12 	bl	800c6f8 <SDMMC_GetResponse>
 800a8d4:	0180      	lsls	r0, r0, #6
 800a8d6:	d42e      	bmi.n	800a936 <HAL_SD_ConfigWideBusOperation+0x96>
  errorstate = SD_FindSCR(hsd, scr);
 800a8d8:	a904      	add	r1, sp, #16
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f7ff fbd2 	bl	800a084 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8e0:	b960      	cbnz	r0, 800a8fc <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a8e2:	9b05      	ldr	r3, [sp, #20]
 800a8e4:	0359      	lsls	r1, r3, #13
 800a8e6:	d529      	bpl.n	800a93c <HAL_SD_ConfigWideBusOperation+0x9c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a8e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a8ea:	6820      	ldr	r0, [r4, #0]
 800a8ec:	0409      	lsls	r1, r1, #16
 800a8ee:	f002 f845 	bl	800c97c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8f2:	b918      	cbnz	r0, 800a8fc <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a8f4:	2102      	movs	r1, #2
 800a8f6:	6820      	ldr	r0, [r4, #0]
 800a8f8:	f002 f86f 	bl	800c9da <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800a8fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a8fe:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 800a900:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a902:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a904:	6826      	ldr	r6, [r4, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d042      	beq.n	800a990 <HAL_SD_ConfigWideBusOperation+0xf0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a90a:	4b32      	ldr	r3, [pc, #200]	; (800a9d4 <HAL_SD_ConfigWideBusOperation+0x134>)
    status = HAL_ERROR;
 800a90c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a90e:	63b3      	str	r3, [r6, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a910:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a914:	6820      	ldr	r0, [r4, #0]
 800a916:	f001 ff05 	bl	800c724 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a91a:	b130      	cbz	r0, 800a92a <HAL_SD_ConfigWideBusOperation+0x8a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a91c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800a91e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a920:	4a2c      	ldr	r2, [pc, #176]	; (800a9d4 <HAL_SD_ConfigWideBusOperation+0x134>)
 800a922:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a924:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a926:	4318      	orrs	r0, r3
 800a928:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 800a92a:	2301      	movs	r3, #1
}
 800a92c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800a92e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a932:	b00a      	add	sp, #40	; 0x28
 800a934:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a936:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a93a:	e7df      	b.n	800a8fc <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a93c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a940:	e7dc      	b.n	800a8fc <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a942:	bb01      	cbnz	r1, 800a986 <HAL_SD_ConfigWideBusOperation+0xe6>
  uint32_t scr[2U] = {0UL, 0UL};
 800a944:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a948:	f001 fed6 	bl	800c6f8 <SDMMC_GetResponse>
 800a94c:	0182      	lsls	r2, r0, #6
 800a94e:	d414      	bmi.n	800a97a <HAL_SD_ConfigWideBusOperation+0xda>
  errorstate = SD_FindSCR(hsd, scr);
 800a950:	a904      	add	r1, sp, #16
 800a952:	4620      	mov	r0, r4
 800a954:	f7ff fb96 	bl	800a084 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a958:	b960      	cbnz	r0, 800a974 <HAL_SD_ConfigWideBusOperation+0xd4>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a95a:	9b05      	ldr	r3, [sp, #20]
 800a95c:	03db      	lsls	r3, r3, #15
 800a95e:	d50f      	bpl.n	800a980 <HAL_SD_ConfigWideBusOperation+0xe0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a960:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a962:	6820      	ldr	r0, [r4, #0]
 800a964:	0409      	lsls	r1, r1, #16
 800a966:	f002 f809 	bl	800c97c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a96a:	b918      	cbnz	r0, 800a974 <HAL_SD_ConfigWideBusOperation+0xd4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a96c:	4601      	mov	r1, r0
 800a96e:	6820      	ldr	r0, [r4, #0]
 800a970:	f002 f833 	bl	800c9da <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800a974:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a976:	4308      	orrs	r0, r1
 800a978:	e7c2      	b.n	800a900 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a97a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a97e:	e7f9      	b.n	800a974 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a980:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a984:	e7f6      	b.n	800a974 <HAL_SD_ConfigWideBusOperation+0xd4>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a986:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a988:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a98c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a98e:	e7b8      	b.n	800a902 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a990:	6863      	ldr	r3, [r4, #4]
 800a992:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a994:	68a3      	ldr	r3, [r4, #8]
    Init.BusWide             = WideMode;
 800a996:	e9cd 3505 	strd	r3, r5, [sp, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a99a:	6923      	ldr	r3, [r4, #16]
 800a99c:	9307      	str	r3, [sp, #28]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800a99e:	6963      	ldr	r3, [r4, #20]
 800a9a0:	2b03      	cmp	r3, #3
 800a9a2:	d90c      	bls.n	800a9be <HAL_SD_ConfigWideBusOperation+0x11e>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800a9a4:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800a9a6:	ab0a      	add	r3, sp, #40	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 800a9a8:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 800a9aa:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800a9ae:	ab04      	add	r3, sp, #16
 800a9b0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a9b8:	f001 fe5e 	bl	800c678 <SDMMC_Init>
 800a9bc:	e7a8      	b.n	800a910 <HAL_SD_ConfigWideBusOperation+0x70>
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a9be:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a9c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a9c4:	d0ee      	beq.n	800a9a4 <HAL_SD_ConfigWideBusOperation+0x104>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a9c6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800a9ca:	bf0c      	ite	eq
 800a9cc:	2302      	moveq	r3, #2
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800a9ce:	2304      	movne	r3, #4
 800a9d0:	e7e8      	b.n	800a9a4 <HAL_SD_ConfigWideBusOperation+0x104>
 800a9d2:	bf00      	nop
 800a9d4:	1fe00fff 	.word	0x1fe00fff

0800a9d8 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9d8:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 800a9da:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9dc:	0409      	lsls	r1, r1, #16
{
 800a9de:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9e0:	6800      	ldr	r0, [r0, #0]
 800a9e2:	f002 f8ad 	bl	800cb40 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9e6:	4601      	mov	r1, r0
 800a9e8:	b928      	cbnz	r0, 800a9f6 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a9ea:	6820      	ldr	r0, [r4, #0]
 800a9ec:	f001 fe84 	bl	800c6f8 <SDMMC_GetResponse>
}
 800a9f0:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800a9f4:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 800a9f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 800a9f8:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 800a9fa:	4319      	orrs	r1, r3
 800a9fc:	63a1      	str	r1, [r4, #56]	; 0x38
 800a9fe:	e7f7      	b.n	800a9f0 <HAL_SD_GetCardState+0x18>

0800aa00 <HAL_SD_Init>:
{
 800aa00:	b570      	push	{r4, r5, r6, lr}
  if(hsd == NULL)
 800aa02:	4604      	mov	r4, r0
{
 800aa04:	b086      	sub	sp, #24
  if(hsd == NULL)
 800aa06:	b918      	cbnz	r0, 800aa10 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 800aa08:	2501      	movs	r5, #1
}
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	b006      	add	sp, #24
 800aa0e:	bd70      	pop	{r4, r5, r6, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 800aa10:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800aa14:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800aa18:	b93b      	cbnz	r3, 800aa2a <HAL_SD_Init+0x2a>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800aa1a:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 800aa1c:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800aa1e:	b90b      	cbnz	r3, 800aa24 <HAL_SD_Init+0x24>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800aa20:	2302      	movs	r3, #2
 800aa22:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 800aa24:	4620      	mov	r0, r4
 800aa26:	f7f8 f8f7 	bl	8002c18 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800aa2a:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800aa2c:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800aa2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800aa32:	f7ff fd13 	bl	800a45c <HAL_SD_InitCard>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d1e6      	bne.n	800aa08 <HAL_SD_Init+0x8>
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800aa3a:	a901      	add	r1, sp, #4
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f7ff fe5f 	bl	800a700 <HAL_SD_GetCardStatus>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d1e0      	bne.n	800aa08 <HAL_SD_Init+0x8>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800aa46:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 800aa48:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800aa4c:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800aa4e:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800aa52:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800aa54:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800aa56:	d11d      	bne.n	800aa94 <HAL_SD_Init+0x94>
 800aa58:	b902      	cbnz	r2, 800aa5c <HAL_SD_Init+0x5c>
 800aa5a:	b1c3      	cbz	r3, 800aa8e <HAL_SD_Init+0x8e>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800aa5c:	f44f 7300 	mov.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800aa60:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800aa62:	68e1      	ldr	r1, [r4, #12]
 800aa64:	4620      	mov	r0, r4
 800aa66:	f7ff ff1b 	bl	800a8a0 <HAL_SD_ConfigWideBusOperation>
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d1cb      	bne.n	800aa08 <HAL_SD_Init+0x8>
  tickstart = HAL_GetTick();
 800aa70:	f7fa ffb4 	bl	80059dc <HAL_GetTick>
 800aa74:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800aa76:	4620      	mov	r0, r4
 800aa78:	f7ff ffae 	bl	800a9d8 <HAL_SD_GetCardState>
 800aa7c:	2804      	cmp	r0, #4
 800aa7e:	d10b      	bne.n	800aa98 <HAL_SD_Init+0x98>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa80:	2300      	movs	r3, #0
 800aa82:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800aa84:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800aa86:	2301      	movs	r3, #1
 800aa88:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800aa8c:	e7bd      	b.n	800aa0a <HAL_SD_Init+0xa>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800aa8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa92:	e7e5      	b.n	800aa60 <HAL_SD_Init+0x60>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800aa94:	65e0      	str	r0, [r4, #92]	; 0x5c
 800aa96:	e7e4      	b.n	800aa62 <HAL_SD_Init+0x62>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800aa98:	f7fa ffa0 	bl	80059dc <HAL_GetTick>
 800aa9c:	1b80      	subs	r0, r0, r6
 800aa9e:	3001      	adds	r0, #1
 800aaa0:	d1e9      	bne.n	800aa76 <HAL_SD_Init+0x76>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800aaa2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
      return HAL_TIMEOUT;
 800aaa6:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800aaa8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 800aab0:	e7ab      	b.n	800aa0a <HAL_SD_Init+0xa>

0800aab2 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800aab2:	4770      	bx	lr

0800aab4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800aab4:	4770      	bx	lr

0800aab6 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800aab6:	4770      	bx	lr

0800aab8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 800aab8:	4770      	bx	lr
	...

0800aabc <HAL_SD_IRQHandler>:
{
 800aabc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t context = hsd->Context;
 800aabe:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 800aac0:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800aac2:	6800      	ldr	r0, [r0, #0]
 800aac4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800aac6:	041b      	lsls	r3, r3, #16
 800aac8:	d520      	bpl.n	800ab0c <HAL_SD_IRQHandler+0x50>
 800aaca:	072f      	lsls	r7, r5, #28
 800aacc:	d51e      	bpl.n	800ab0c <HAL_SD_IRQHandler+0x50>
  if (hsd->RxXferSize >= 32U)
 800aace:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aad0:	2b1f      	cmp	r3, #31
 800aad2:	d919      	bls.n	800ab08 <HAL_SD_IRQHandler+0x4c>
  tmp = hsd->pRxBuffPtr;
 800aad4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aad6:	1d35      	adds	r5, r6, #4
 800aad8:	f106 0724 	add.w	r7, r6, #36	; 0x24
      data = SDMMC_ReadFIFO(hsd->Instance);
 800aadc:	6820      	ldr	r0, [r4, #0]
 800aade:	3504      	adds	r5, #4
 800aae0:	f001 fde4 	bl	800c6ac <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800aae4:	f805 0c08 	strb.w	r0, [r5, #-8]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800aae8:	0a03      	lsrs	r3, r0, #8
 800aaea:	f805 3c07 	strb.w	r3, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800aaee:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800aaf0:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800aaf2:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800aaf6:	f805 0c05 	strb.w	r0, [r5, #-5]
    for(count = 0U; count < 8U; count++)
 800aafa:	42bd      	cmp	r5, r7
 800aafc:	d1ee      	bne.n	800aadc <HAL_SD_IRQHandler+0x20>
    hsd->RxXferSize -= 32U;
 800aafe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hsd->pRxBuffPtr = tmp;
 800ab00:	3620      	adds	r6, #32
    hsd->RxXferSize -= 32U;
 800ab02:	3b20      	subs	r3, #32
    hsd->pRxBuffPtr = tmp;
 800ab04:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800ab06:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800ab08:	b003      	add	sp, #12
 800ab0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800ab0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ab0e:	05de      	lsls	r6, r3, #23
 800ab10:	d553      	bpl.n	800abba <HAL_SD_IRQHandler+0xfe>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800ab12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab16:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800ab18:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800ab1a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ab1e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ab22:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ab24:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800ab26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab2a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800ab2c:	68c3      	ldr	r3, [r0, #12]
 800ab2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab32:	60c3      	str	r3, [r0, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800ab34:	f015 0308 	ands.w	r3, r5, #8
 800ab38:	d01f      	beq.n	800ab7a <HAL_SD_IRQHandler+0xbe>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ab3a:	f015 0f22 	tst.w	r5, #34	; 0x22
 800ab3e:	d008      	beq.n	800ab52 <HAL_SD_IRQHandler+0x96>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ab40:	f001 fe6e 	bl	800c820 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800ab44:	b128      	cbz	r0, 800ab52 <HAL_SD_IRQHandler+0x96>
          hsd->ErrorCode |= errorstate;
 800ab46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ab48:	4318      	orrs	r0, r3
 800ab4a:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f7ff fbcd 	bl	800a2ec <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ab52:	6823      	ldr	r3, [r4, #0]
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ab54:	07a9      	lsls	r1, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ab56:	4a69      	ldr	r2, [pc, #420]	; (800acfc <HAL_SD_IRQHandler+0x240>)
 800ab58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ab5a:	f04f 0301 	mov.w	r3, #1
 800ab5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ab62:	f04f 0300 	mov.w	r3, #0
 800ab66:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ab68:	d003      	beq.n	800ab72 <HAL_SD_IRQHandler+0xb6>
        HAL_SD_RxCpltCallback(hsd);
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f002 fd38 	bl	800d5e0 <HAL_SD_RxCpltCallback>
 800ab70:	e7ca      	b.n	800ab08 <HAL_SD_IRQHandler+0x4c>
        HAL_SD_TxCpltCallback(hsd);
 800ab72:	4620      	mov	r0, r4
 800ab74:	f002 fd30 	bl	800d5d8 <HAL_SD_TxCpltCallback>
 800ab78:	e7c6      	b.n	800ab08 <HAL_SD_IRQHandler+0x4c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ab7a:	062a      	lsls	r2, r5, #24
 800ab7c:	d5c4      	bpl.n	800ab08 <HAL_SD_IRQHandler+0x4c>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ab7e:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800ab82:	6283      	str	r3, [r0, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800ab84:	62c3      	str	r3, [r0, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ab86:	6503      	str	r3, [r0, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ab88:	d008      	beq.n	800ab9c <HAL_SD_IRQHandler+0xe0>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ab8a:	f001 fe49 	bl	800c820 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800ab8e:	b128      	cbz	r0, 800ab9c <HAL_SD_IRQHandler+0xe0>
          hsd->ErrorCode |= errorstate;
 800ab90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ab92:	4318      	orrs	r0, r3
 800ab94:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ab96:	4620      	mov	r0, r4
 800ab98:	f7ff fba8 	bl	800a2ec <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800ab9c:	2301      	movs	r3, #1
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ab9e:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800aba2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aba6:	f04f 0300 	mov.w	r3, #0
 800abaa:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800abac:	d002      	beq.n	800abb4 <HAL_SD_IRQHandler+0xf8>
        HAL_SD_TxCpltCallback(hsd);
 800abae:	4620      	mov	r0, r4
 800abb0:	f002 fd12 	bl	800d5d8 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800abb4:	07af      	lsls	r7, r5, #30
 800abb6:	d0a7      	beq.n	800ab08 <HAL_SD_IRQHandler+0x4c>
 800abb8:	e7d7      	b.n	800ab6a <HAL_SD_IRQHandler+0xae>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800abba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800abbc:	045e      	lsls	r6, r3, #17
 800abbe:	d527      	bpl.n	800ac10 <HAL_SD_IRQHandler+0x154>
 800abc0:	0729      	lsls	r1, r5, #28
 800abc2:	d525      	bpl.n	800ac10 <HAL_SD_IRQHandler+0x154>
  if (hsd->TxXferSize >= 32U)
 800abc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abc6:	2b1f      	cmp	r3, #31
 800abc8:	d99e      	bls.n	800ab08 <HAL_SD_IRQHandler+0x4c>
  tmp = hsd->pTxBuffPtr;
 800abca:	6a26      	ldr	r6, [r4, #32]
 800abcc:	1d35      	adds	r5, r6, #4
 800abce:	f106 0724 	add.w	r7, r6, #36	; 0x24
      data = (uint32_t)(*tmp);
 800abd2:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800abd6:	3504      	adds	r5, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800abd8:	a901      	add	r1, sp, #4
 800abda:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800abdc:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800abde:	f815 2c07 	ldrb.w	r2, [r5, #-7]
 800abe2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800abe6:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800abe8:	f815 2c06 	ldrb.w	r2, [r5, #-6]
 800abec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abf0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800abf2:	f815 2c05 	ldrb.w	r2, [r5, #-5]
 800abf6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800abfa:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800abfc:	f001 fd59 	bl	800c6b2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ac00:	42af      	cmp	r7, r5
 800ac02:	d1e6      	bne.n	800abd2 <HAL_SD_IRQHandler+0x116>
    hsd->TxXferSize -= 32U;
 800ac04:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsd->pTxBuffPtr = tmp;
 800ac06:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800ac08:	3b20      	subs	r3, #32
    hsd->pTxBuffPtr = tmp;
 800ac0a:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize -= 32U;
 800ac0c:	6263      	str	r3, [r4, #36]	; 0x24
 800ac0e:	e77b      	b.n	800ab08 <HAL_SD_IRQHandler+0x4c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800ac10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ac12:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800ac16:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800ac18:	d056      	beq.n	800acc8 <HAL_SD_IRQHandler+0x20c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800ac1a:	079a      	lsls	r2, r3, #30
 800ac1c:	d503      	bpl.n	800ac26 <HAL_SD_IRQHandler+0x16a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ac20:	f043 0302 	orr.w	r3, r3, #2
 800ac24:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800ac26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ac28:	071b      	lsls	r3, r3, #28
 800ac2a:	d503      	bpl.n	800ac34 <HAL_SD_IRQHandler+0x178>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ac2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ac2e:	f043 0308 	orr.w	r3, r3, #8
 800ac32:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800ac34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ac36:	069f      	lsls	r7, r3, #26
 800ac38:	d503      	bpl.n	800ac42 <HAL_SD_IRQHandler+0x186>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ac3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ac3c:	f043 0320 	orr.w	r3, r3, #32
 800ac40:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800ac42:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ac44:	06de      	lsls	r6, r3, #27
 800ac46:	d503      	bpl.n	800ac50 <HAL_SD_IRQHandler+0x194>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ac48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ac4a:	f043 0310 	orr.w	r3, r3, #16
 800ac4e:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ac50:	4b2a      	ldr	r3, [pc, #168]	; (800acfc <HAL_SD_IRQHandler+0x240>)
 800ac52:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800ac54:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800ac56:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800ac5a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800ac5c:	68c3      	ldr	r3, [r0, #12]
 800ac5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac62:	60c3      	str	r3, [r0, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800ac64:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ac66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ac6a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800ac6c:	68c3      	ldr	r3, [r0, #12]
 800ac6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac72:	60c3      	str	r3, [r0, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ac74:	f001 fdd4 	bl	800c820 <SDMMC_CmdStopTransfer>
 800ac78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ac7a:	f015 0108 	ands.w	r1, r5, #8
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ac7e:	ea40 0003 	orr.w	r0, r0, r3
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800ac82:	6823      	ldr	r3, [r4, #0]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ac84:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800ac86:	68da      	ldr	r2, [r3, #12]
 800ac88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac8c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800ac8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac92:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ac94:	d008      	beq.n	800aca8 <HAL_SD_IRQHandler+0x1ec>
      hsd->State = HAL_SD_STATE_READY;
 800ac96:	2301      	movs	r3, #1
 800ac98:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800aca0:	4620      	mov	r0, r4
 800aca2:	f7ff fb23 	bl	800a2ec <HAL_SD_ErrorCallback>
 800aca6:	e72f      	b.n	800ab08 <HAL_SD_IRQHandler+0x4c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800aca8:	0628      	lsls	r0, r5, #24
 800acaa:	f57f af2d 	bpl.w	800ab08 <HAL_SD_IRQHandler+0x4c>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800acae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800acb0:	2a00      	cmp	r2, #0
 800acb2:	f43f af29 	beq.w	800ab08 <HAL_SD_IRQHandler+0x4c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800acb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acb8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800acbc:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800acbe:	6519      	str	r1, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800acc0:	2301      	movs	r3, #1
 800acc2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800acc6:	e7eb      	b.n	800aca0 <HAL_SD_IRQHandler+0x1e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800acc8:	00da      	lsls	r2, r3, #3
 800acca:	f57f af1d 	bpl.w	800ab08 <HAL_SD_IRQHandler+0x4c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800acce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800acd2:	f005 0520 	and.w	r5, r5, #32
 800acd6:	6383      	str	r3, [r0, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800acd8:	6d03      	ldr	r3, [r0, #80]	; 0x50
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800acda:	4620      	mov	r0, r4
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800acdc:	075b      	lsls	r3, r3, #29
 800acde:	d406      	bmi.n	800acee <HAL_SD_IRQHandler+0x232>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ace0:	b115      	cbz	r5, 800ace8 <HAL_SD_IRQHandler+0x22c>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800ace2:	f7ff fee9 	bl	800aab8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800ace6:	e70f      	b.n	800ab08 <HAL_SD_IRQHandler+0x4c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800ace8:	f7ff fee4 	bl	800aab4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800acec:	e70c      	b.n	800ab08 <HAL_SD_IRQHandler+0x4c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800acee:	b115      	cbz	r5, 800acf6 <HAL_SD_IRQHandler+0x23a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800acf0:	f7ff fee1 	bl	800aab6 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800acf4:	e708      	b.n	800ab08 <HAL_SD_IRQHandler+0x4c>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800acf6:	f7ff fedc 	bl	800aab2 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800acfa:	e705      	b.n	800ab08 <HAL_SD_IRQHandler+0x4c>
 800acfc:	18000f3a 	.word	0x18000f3a

0800ad00 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800ad00:	6803      	ldr	r3, [r0, #0]
 800ad02:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ad04:	699a      	ldr	r2, [r3, #24]
 800ad06:	f042 0208 	orr.w	r2, r2, #8
 800ad0a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ad0c:	699a      	ldr	r2, [r3, #24]
 800ad0e:	f042 0210 	orr.w	r2, r2, #16
 800ad12:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	f022 0201 	bic.w	r2, r2, #1
 800ad1a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800ad1c:	691a      	ldr	r2, [r3, #16]
 800ad1e:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
 800ad22:	f022 0203 	bic.w	r2, r2, #3
 800ad26:	611a      	str	r2, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ad28:	689a      	ldr	r2, [r3, #8]
 800ad2a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ad2e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ad30:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800ad34:	2a04      	cmp	r2, #4
 800ad36:	d00b      	beq.n	800ad50 <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ad38:	068a      	lsls	r2, r1, #26
 800ad3a:	d509      	bpl.n	800ad50 <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ad3c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800ad40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ad44:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ad48:	699a      	ldr	r2, [r3, #24]
 800ad4a:	f042 0220 	orr.w	r2, r2, #32
 800ad4e:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ad50:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800ad54:	2a03      	cmp	r2, #3
 800ad56:	d00b      	beq.n	800ad70 <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ad58:	064a      	lsls	r2, r1, #25
 800ad5a:	d509      	bpl.n	800ad70 <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ad5c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800ad60:	f042 0204 	orr.w	r2, r2, #4
 800ad64:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad68:	699a      	ldr	r2, [r3, #24]
 800ad6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad6e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ad70:	058a      	lsls	r2, r1, #22
 800ad72:	d509      	bpl.n	800ad88 <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ad74:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800ad78:	f042 0201 	orr.w	r2, r2, #1
 800ad7c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ad80:	699a      	ldr	r2, [r3, #24]
 800ad82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad86:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ad88:	05ca      	lsls	r2, r1, #23
 800ad8a:	d509      	bpl.n	800ada0 <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ad8c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800ad90:	f042 0208 	orr.w	r2, r2, #8
 800ad94:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ad98:	699a      	ldr	r2, [r3, #24]
 800ad9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad9e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ada0:	2300      	movs	r3, #0
 800ada2:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ada6:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800adaa:	4770      	bx	lr

0800adac <HAL_SPI_Init>:
{
 800adac:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800adae:	4604      	mov	r4, r0
 800adb0:	b908      	cbnz	r0, 800adb6 <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 800adb2:	2001      	movs	r0, #1
}
 800adb4:	bd70      	pop	{r4, r5, r6, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800adb6:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800adb8:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800adba:	4940      	ldr	r1, [pc, #256]	; (800aebc <HAL_SPI_Init+0x110>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800adbc:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800adbe:	428a      	cmp	r2, r1
 800adc0:	68c3      	ldr	r3, [r0, #12]
 800adc2:	d009      	beq.n	800add8 <HAL_SPI_Init+0x2c>
 800adc4:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 800adc8:	428a      	cmp	r2, r1
 800adca:	d005      	beq.n	800add8 <HAL_SPI_Init+0x2c>
 800adcc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800add0:	428a      	cmp	r2, r1
 800add2:	d001      	beq.n	800add8 <HAL_SPI_Init+0x2c>
 800add4:	2b0f      	cmp	r3, #15
 800add6:	d8ec      	bhi.n	800adb2 <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800add8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800adda:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800addc:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800adde:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 800ade0:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ade4:	4935      	ldr	r1, [pc, #212]	; (800aebc <HAL_SPI_Init+0x110>)
 800ade6:	428a      	cmp	r2, r1
 800ade8:	d066      	beq.n	800aeb8 <HAL_SPI_Init+0x10c>
 800adea:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 800adee:	428a      	cmp	r2, r1
 800adf0:	d062      	beq.n	800aeb8 <HAL_SPI_Init+0x10c>
 800adf2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800adf6:	428a      	cmp	r2, r1
 800adf8:	d05e      	beq.n	800aeb8 <HAL_SPI_Init+0x10c>
 800adfa:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800adfc:	d8d9      	bhi.n	800adb2 <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800adfe:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800ae02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ae06:	b923      	cbnz	r3, 800ae12 <HAL_SPI_Init+0x66>
    hspi->Lock = HAL_UNLOCKED;
 800ae08:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f7f7 ff61 	bl	8002cd4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800ae12:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800ae14:	6822      	ldr	r2, [r4, #0]
 800ae16:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 800ae18:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800ae1c:	6813      	ldr	r3, [r2, #0]
 800ae1e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800ae20:	f023 0301 	bic.w	r3, r3, #1
 800ae24:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800ae26:	69a3      	ldr	r3, [r4, #24]
 800ae28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae2c:	d107      	bne.n	800ae3e <HAL_SPI_Init+0x92>
 800ae2e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800ae32:	d104      	bne.n	800ae3e <HAL_SPI_Init+0x92>
 800ae34:	b91d      	cbnz	r5, 800ae3e <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ae36:	6810      	ldr	r0, [r2, #0]
 800ae38:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800ae3c:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ae3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800ae40:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ae42:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800ae44:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ae46:	4330      	orrs	r0, r6
 800ae48:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800ae4a:	4330      	orrs	r0, r6
 800ae4c:	68e6      	ldr	r6, [r4, #12]
 800ae4e:	4330      	orrs	r0, r6
 800ae50:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800ae52:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ae54:	4303      	orrs	r3, r0
 800ae56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ae58:	4303      	orrs	r3, r0
 800ae5a:	6920      	ldr	r0, [r4, #16]
 800ae5c:	4303      	orrs	r3, r0
 800ae5e:	6960      	ldr	r0, [r4, #20]
 800ae60:	4303      	orrs	r3, r0
 800ae62:	6a20      	ldr	r0, [r4, #32]
 800ae64:	4303      	orrs	r3, r0
 800ae66:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800ae68:	4303      	orrs	r3, r0
 800ae6a:	68a0      	ldr	r0, [r4, #8]
 800ae6c:	4303      	orrs	r3, r0
 800ae6e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800ae70:	4303      	orrs	r3, r0
 800ae72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae74:	4303      	orrs	r3, r0
 800ae76:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ae78:	b959      	cbnz	r1, 800ae92 <HAL_SPI_Init+0xe6>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ae7a:	6893      	ldr	r3, [r2, #8]
 800ae7c:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800ae80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ae84:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ae86:	6893      	ldr	r3, [r2, #8]
 800ae88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ae8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae90:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ae92:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ae94:	f023 0301 	bic.w	r3, r3, #1
 800ae98:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ae9a:	024b      	lsls	r3, r1, #9
 800ae9c:	d505      	bpl.n	800aeaa <HAL_SPI_Init+0xfe>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ae9e:	68d3      	ldr	r3, [r2, #12]
 800aea0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800aea2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aea6:	430b      	orrs	r3, r1
 800aea8:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aeaa:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800aeac:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aeae:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800aeb2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 800aeb6:	e77d      	b.n	800adb4 <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aeb8:	2b10      	cmp	r3, #16
 800aeba:	e79f      	b.n	800adfc <HAL_SPI_Init+0x50>
 800aebc:	40013000 	.word	0x40013000

0800aec0 <HAL_SPI_TransmitReceive_DMA>:
{
 800aec0:	b570      	push	{r4, r5, r6, lr}
 800aec2:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800aec4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 800aec8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d012      	beq.n	800aef4 <HAL_SPI_TransmitReceive_DMA+0x34>
 800aece:	2301      	movs	r3, #1
 800aed0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tmp_state   = hspi->State;
 800aed4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 800aed8:	6840      	ldr	r0, [r0, #4]
  tmp_state   = hspi->State;
 800aeda:	b2db      	uxtb	r3, r3
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 800aedc:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800aee0:	d103      	bne.n	800aeea <HAL_SPI_TransmitReceive_DMA+0x2a>
 800aee2:	68a0      	ldr	r0, [r4, #8]
 800aee4:	b908      	cbnz	r0, 800aeea <HAL_SPI_TransmitReceive_DMA+0x2a>
 800aee6:	2b04      	cmp	r3, #4
 800aee8:	d006      	beq.n	800aef8 <HAL_SPI_TransmitReceive_DMA+0x38>
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d004      	beq.n	800aef8 <HAL_SPI_TransmitReceive_DMA+0x38>
    __HAL_UNLOCK(hspi);
 800aeee:	2300      	movs	r3, #0
 800aef0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800aef4:	2002      	movs	r0, #2
 800aef6:	e004      	b.n	800af02 <HAL_SPI_TransmitReceive_DMA+0x42>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800aef8:	b921      	cbnz	r1, 800af04 <HAL_SPI_TransmitReceive_DMA+0x44>
    __HAL_UNLOCK(hspi);
 800aefa:	2300      	movs	r3, #0
    return errorcode;
 800aefc:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800aefe:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800af02:	bd70      	pop	{r4, r5, r6, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800af04:	2a00      	cmp	r2, #0
 800af06:	d0f8      	beq.n	800aefa <HAL_SPI_TransmitReceive_DMA+0x3a>
 800af08:	2d00      	cmp	r5, #0
 800af0a:	d0f6      	beq.n	800aefa <HAL_SPI_TransmitReceive_DMA+0x3a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800af0c:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800af10:	2b04      	cmp	r3, #4
 800af12:	d002      	beq.n	800af1a <HAL_SPI_TransmitReceive_DMA+0x5a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800af14:	2305      	movs	r3, #5
 800af16:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af1a:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800af1c:	65e1      	str	r1, [r4, #92]	; 0x5c
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800af1e:	6821      	ldr	r1, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af20:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800af24:	68e6      	ldr	r6, [r4, #12]
  hspi->TxXferCount = Size;
 800af26:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->RxXferCount = Size;
 800af2a:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800af2e:	2e0f      	cmp	r6, #15
 800af30:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  hspi->TxXferSize  = Size;
 800af32:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800af36:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800af38:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->TxISR       = NULL;
 800af3c:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800af40:	688b      	ldr	r3, [r1, #8]
 800af42:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800af46:	608b      	str	r3, [r1, #8]
 800af48:	6983      	ldr	r3, [r0, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800af4a:	d924      	bls.n	800af96 <HAL_SPI_TransmitReceive_DMA+0xd6>
 800af4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af50:	d1d3      	bne.n	800aefa <HAL_SPI_TransmitReceive_DMA+0x3a>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800af52:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800af56:	3130      	adds	r1, #48	; 0x30
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800af58:	2b04      	cmp	r3, #4
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800af5a:	bf0b      	itete	eq
 800af5c:	4b48      	ldreq	r3, [pc, #288]	; (800b080 <HAL_SPI_TransmitReceive_DMA+0x1c0>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800af5e:	4b49      	ldrne	r3, [pc, #292]	; (800b084 <HAL_SPI_TransmitReceive_DMA+0x1c4>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800af60:	6403      	streq	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800af62:	6403      	strne	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800af64:	bf0c      	ite	eq
 800af66:	4b48      	ldreq	r3, [pc, #288]	; (800b088 <HAL_SPI_TransmitReceive_DMA+0x1c8>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800af68:	4b48      	ldrne	r3, [pc, #288]	; (800b08c <HAL_SPI_TransmitReceive_DMA+0x1cc>)
 800af6a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800af6c:	4b48      	ldr	r3, [pc, #288]	; (800b090 <HAL_SPI_TransmitReceive_DMA+0x1d0>)
 800af6e:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800af70:	2300      	movs	r3, #0
 800af72:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800af74:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800af78:	f7fb ff40 	bl	8006dfc <HAL_DMA_Start_IT>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2800      	cmp	r0, #0
 800af80:	d045      	beq.n	800b00e <HAL_SPI_TransmitReceive_DMA+0x14e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800af82:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800af86:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800af88:	f043 0310 	orr.w	r3, r3, #16
 800af8c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800af90:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
 800af94:	e7b5      	b.n	800af02 <HAL_SPI_TransmitReceive_DMA+0x42>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800af96:	2e07      	cmp	r6, #7
 800af98:	d914      	bls.n	800afc4 <HAL_SPI_TransmitReceive_DMA+0x104>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800af9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af9e:	d002      	beq.n	800afa6 <HAL_SPI_TransmitReceive_DMA+0xe6>
 800afa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afa4:	d1a9      	bne.n	800aefa <HAL_SPI_TransmitReceive_DMA+0x3a>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800afa6:	6fa6      	ldr	r6, [r4, #120]	; 0x78
 800afa8:	69b6      	ldr	r6, [r6, #24]
 800afaa:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 800afae:	d105      	bne.n	800afbc <HAL_SPI_TransmitReceive_DMA+0xfc>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800afb0:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800afb4:	3601      	adds	r6, #1
 800afb6:	0876      	lsrs	r6, r6, #1
 800afb8:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800afbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afc0:	d1c7      	bne.n	800af52 <HAL_SPI_TransmitReceive_DMA+0x92>
 800afc2:	e00d      	b.n	800afe0 <HAL_SPI_TransmitReceive_DMA+0x120>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800afc4:	6fa6      	ldr	r6, [r4, #120]	; 0x78
 800afc6:	69b6      	ldr	r6, [r6, #24]
 800afc8:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800afcc:	d10d      	bne.n	800afea <HAL_SPI_TransmitReceive_DMA+0x12a>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800afce:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800afd2:	3601      	adds	r6, #1
 800afd4:	0876      	lsrs	r6, r6, #1
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800afd6:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800afda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afde:	d10c      	bne.n	800affa <HAL_SPI_TransmitReceive_DMA+0x13a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800afe0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800afe4:	3301      	adds	r3, #1
 800afe6:	085b      	lsrs	r3, r3, #1
 800afe8:	e00e      	b.n	800b008 <HAL_SPI_TransmitReceive_DMA+0x148>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800afea:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 800afee:	d1f4      	bne.n	800afda <HAL_SPI_TransmitReceive_DMA+0x11a>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800aff0:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800aff4:	3603      	adds	r6, #3
 800aff6:	08b6      	lsrs	r6, r6, #2
 800aff8:	e7ed      	b.n	800afd6 <HAL_SPI_TransmitReceive_DMA+0x116>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800affa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800affe:	d1a8      	bne.n	800af52 <HAL_SPI_TransmitReceive_DMA+0x92>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b000:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b004:	3303      	adds	r3, #3
 800b006:	089b      	lsrs	r3, r3, #2
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b008:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800b00c:	e7a1      	b.n	800af52 <HAL_SPI_TransmitReceive_DMA+0x92>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b00e:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b010:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b012:	6891      	ldr	r1, [r2, #8]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800b014:	3220      	adds	r2, #32
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b016:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800b01a:	f842 1c18 	str.w	r1, [r2, #-24]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800b01e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b020:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b024:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800b028:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b02c:	f7fb fee6 	bl	8006dfc <HAL_DMA_Start_IT>
 800b030:	2800      	cmp	r0, #0
 800b032:	d1a6      	bne.n	800af82 <HAL_SPI_TransmitReceive_DMA+0xc2>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b034:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b036:	6822      	ldr	r2, [r4, #0]
 800b038:	69db      	ldr	r3, [r3, #28]
 800b03a:	4916      	ldr	r1, [pc, #88]	; (800b094 <HAL_SPI_TransmitReceive_DMA+0x1d4>)
 800b03c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b040:	d11a      	bne.n	800b078 <HAL_SPI_TransmitReceive_DMA+0x1b8>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b042:	6855      	ldr	r5, [r2, #4]
 800b044:	400d      	ands	r5, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b046:	6055      	str	r5, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b048:	6893      	ldr	r3, [r2, #8]
 800b04a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b04e:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800b050:	6913      	ldr	r3, [r2, #16]
 800b052:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800b056:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800b058:	6813      	ldr	r3, [r2, #0]
 800b05a:	f043 0301 	orr.w	r3, r3, #1
 800b05e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b060:	6863      	ldr	r3, [r4, #4]
 800b062:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b066:	d103      	bne.n	800b070 <HAL_SPI_TransmitReceive_DMA+0x1b0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b068:	6813      	ldr	r3, [r2, #0]
 800b06a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b06e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800b070:	2300      	movs	r3, #0
 800b072:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 800b076:	e744      	b.n	800af02 <HAL_SPI_TransmitReceive_DMA+0x42>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b078:	6853      	ldr	r3, [r2, #4]
 800b07a:	400b      	ands	r3, r1
 800b07c:	431d      	orrs	r5, r3
 800b07e:	e7e2      	b.n	800b046 <HAL_SPI_TransmitReceive_DMA+0x186>
 800b080:	0800b269 	.word	0x0800b269
 800b084:	0800b275 	.word	0x0800b275
 800b088:	0800b215 	.word	0x0800b215
 800b08c:	0800b23f 	.word	0x0800b23f
 800b090:	0800b281 	.word	0x0800b281
 800b094:	ffff0000 	.word	0xffff0000

0800b098 <HAL_SPI_Receive_DMA>:
{
 800b098:	b570      	push	{r4, r5, r6, lr}
 800b09a:	4615      	mov	r5, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b09c:	6882      	ldr	r2, [r0, #8]
{
 800b09e:	4604      	mov	r4, r0
 800b0a0:	460e      	mov	r6, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b0a2:	b962      	cbnz	r2, 800b0be <HAL_SPI_Receive_DMA+0x26>
 800b0a4:	6843      	ldr	r3, [r0, #4]
 800b0a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0aa:	d108      	bne.n	800b0be <HAL_SPI_Receive_DMA+0x26>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b0ac:	2304      	movs	r3, #4
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800b0ae:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b0b0:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800b0b4:	462b      	mov	r3, r5
}
 800b0b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800b0ba:	f7ff bf01 	b.w	800aec0 <HAL_SPI_TransmitReceive_DMA>
  __HAL_LOCK(hspi);
 800b0be:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d009      	beq.n	800b0da <HAL_SPI_Receive_DMA+0x42>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800b0cc:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d004      	beq.n	800b0de <HAL_SPI_Receive_DMA+0x46>
    __HAL_UNLOCK(hspi);
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800b0da:	2002      	movs	r0, #2
 800b0dc:	e004      	b.n	800b0e8 <HAL_SPI_Receive_DMA+0x50>
  if ((pData == NULL) || (Size == 0UL))
 800b0de:	b926      	cbnz	r6, 800b0ea <HAL_SPI_Receive_DMA+0x52>
    __HAL_UNLOCK(hspi);
 800b0e0:	2300      	movs	r3, #0
    return errorcode;
 800b0e2:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800b0e4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800b0e8:	bd70      	pop	{r4, r5, r6, pc}
  if ((pData == NULL) || (Size == 0UL))
 800b0ea:	2d00      	cmp	r5, #0
 800b0ec:	d0f8      	beq.n	800b0e0 <HAL_SPI_Receive_DMA+0x48>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b0ee:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0f0:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b0f4:	6666      	str	r6, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b0f6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b0fa:	f04f 0300 	mov.w	r3, #0
  hspi->RxXferSize  = Size;
 800b0fe:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b102:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b106:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 800b10a:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b10e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 800b112:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b116:	d104      	bne.n	800b122 <HAL_SPI_Receive_DMA+0x8a>
    SPI_1LINE_RX(hspi);
 800b118:	6822      	ldr	r2, [r4, #0]
 800b11a:	6813      	ldr	r3, [r2, #0]
 800b11c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b120:	6013      	str	r3, [r2, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b122:	68e3      	ldr	r3, [r4, #12]
 800b124:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b126:	2b0f      	cmp	r3, #15
 800b128:	d90b      	bls.n	800b142 <HAL_SPI_Receive_DMA+0xaa>
 800b12a:	6982      	ldr	r2, [r0, #24]
 800b12c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800b130:	d1d6      	bne.n	800b0e0 <HAL_SPI_Receive_DMA+0x48>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b132:	6982      	ldr	r2, [r0, #24]
 800b134:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b138:	d005      	beq.n	800b146 <HAL_SPI_Receive_DMA+0xae>
 800b13a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800b13e:	d1cf      	bne.n	800b0e0 <HAL_SPI_Receive_DMA+0x48>
 800b140:	e001      	b.n	800b146 <HAL_SPI_Receive_DMA+0xae>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b142:	2b07      	cmp	r3, #7
 800b144:	d8f5      	bhi.n	800b132 <HAL_SPI_Receive_DMA+0x9a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b146:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b148:	2b07      	cmp	r3, #7
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b14a:	688a      	ldr	r2, [r1, #8]
 800b14c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b150:	608a      	str	r2, [r1, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b152:	d812      	bhi.n	800b17a <HAL_SPI_Receive_DMA+0xe2>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b154:	6983      	ldr	r3, [r0, #24]
 800b156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b15a:	d104      	bne.n	800b166 <HAL_SPI_Receive_DMA+0xce>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b15c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b160:	3301      	adds	r3, #1
 800b162:	085b      	lsrs	r3, r3, #1
 800b164:	e006      	b.n	800b174 <HAL_SPI_Receive_DMA+0xdc>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b16a:	d10c      	bne.n	800b186 <HAL_SPI_Receive_DMA+0xee>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b16c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b170:	3303      	adds	r3, #3
 800b172:	089b      	lsrs	r3, r3, #2
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b174:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800b178:	e005      	b.n	800b186 <HAL_SPI_Receive_DMA+0xee>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b17a:	2b0f      	cmp	r3, #15
 800b17c:	d803      	bhi.n	800b186 <HAL_SPI_Receive_DMA+0xee>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b17e:	6983      	ldr	r3, [r0, #24]
 800b180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b184:	d0ea      	beq.n	800b15c <HAL_SPI_Receive_DMA+0xc4>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b186:	4b1e      	ldr	r3, [pc, #120]	; (800b200 <HAL_SPI_Receive_DMA+0x168>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800b188:	4632      	mov	r2, r6
 800b18a:	3130      	adds	r1, #48	; 0x30
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b18c:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800b18e:	4b1d      	ldr	r3, [pc, #116]	; (800b204 <HAL_SPI_Receive_DMA+0x16c>)
 800b190:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b192:	4b1d      	ldr	r3, [pc, #116]	; (800b208 <HAL_SPI_Receive_DMA+0x170>)
 800b194:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800b196:	2300      	movs	r3, #0
 800b198:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800b19a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b19e:	f7fb fe2d 	bl	8006dfc <HAL_DMA_Start_IT>
 800b1a2:	b148      	cbz	r0, 800b1b8 <HAL_SPI_Receive_DMA+0x120>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b1a4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b1a8:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b1aa:	f043 0310 	orr.w	r3, r3, #16
 800b1ae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b1b2:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
    return errorcode;
 800b1b6:	e797      	b.n	800b0e8 <HAL_SPI_Receive_DMA+0x50>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b1b8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b1ba:	6821      	ldr	r1, [r4, #0]
 800b1bc:	69db      	ldr	r3, [r3, #28]
 800b1be:	4a13      	ldr	r2, [pc, #76]	; (800b20c <HAL_SPI_Receive_DMA+0x174>)
 800b1c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b1c4:	684b      	ldr	r3, [r1, #4]
 800b1c6:	ea03 0302 	and.w	r3, r3, r2
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b1ca:	bf18      	it	ne
 800b1cc:	432b      	orrne	r3, r5
 800b1ce:	604b      	str	r3, [r1, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b1d0:	688b      	ldr	r3, [r1, #8]
 800b1d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1d6:	608b      	str	r3, [r1, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b1d8:	690b      	ldr	r3, [r1, #16]
 800b1da:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800b1de:	610b      	str	r3, [r1, #16]
  __HAL_SPI_ENABLE(hspi);
 800b1e0:	680b      	ldr	r3, [r1, #0]
 800b1e2:	f043 0301 	orr.w	r3, r3, #1
 800b1e6:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b1e8:	6863      	ldr	r3, [r4, #4]
 800b1ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1ee:	d103      	bne.n	800b1f8 <HAL_SPI_Receive_DMA+0x160>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b1f0:	680b      	ldr	r3, [r1, #0]
 800b1f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b1f6:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(hspi);
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800b1fe:	e773      	b.n	800b0e8 <HAL_SPI_Receive_DMA+0x50>
 800b200:	0800b269 	.word	0x0800b269
 800b204:	0800b215 	.word	0x0800b215
 800b208:	0800b281 	.word	0x0800b281
 800b20c:	ffff0000 	.word	0xffff0000

0800b210 <HAL_SPI_TxCpltCallback>:
 800b210:	4770      	bx	lr

0800b212 <HAL_SPI_RxCpltCallback>:
 800b212:	4770      	bx	lr

0800b214 <SPI_DMAReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b214:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800b216:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b218:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800b21c:	2b07      	cmp	r3, #7
 800b21e:	d006      	beq.n	800b22e <SPI_DMAReceiveCplt+0x1a>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b220:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800b222:	69db      	ldr	r3, [r3, #28]
 800b224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b228:	d102      	bne.n	800b230 <SPI_DMAReceiveCplt+0x1c>
      HAL_SPI_RxCpltCallback(hspi);
 800b22a:	f7ff fff2 	bl	800b212 <HAL_SPI_RxCpltCallback>
}
 800b22e:	bd08      	pop	{r3, pc}
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b230:	6802      	ldr	r2, [r0, #0]
 800b232:	6913      	ldr	r3, [r2, #16]
 800b234:	f043 0308 	orr.w	r3, r3, #8
 800b238:	6113      	str	r3, [r2, #16]
}
 800b23a:	e7f8      	b.n	800b22e <SPI_DMAReceiveCplt+0x1a>

0800b23c <HAL_SPI_TxRxCpltCallback>:
 800b23c:	4770      	bx	lr

0800b23e <SPI_DMATransmitReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b23e:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800b240:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b242:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800b246:	2b07      	cmp	r3, #7
 800b248:	d006      	beq.n	800b258 <SPI_DMATransmitReceiveCplt+0x1a>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b24a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800b24c:	69db      	ldr	r3, [r3, #28]
 800b24e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b252:	d102      	bne.n	800b25a <SPI_DMATransmitReceiveCplt+0x1c>
      HAL_SPI_TxRxCpltCallback(hspi);
 800b254:	f7ff fff2 	bl	800b23c <HAL_SPI_TxRxCpltCallback>
}
 800b258:	bd08      	pop	{r3, pc}
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b25a:	6802      	ldr	r2, [r0, #0]
 800b25c:	6913      	ldr	r3, [r2, #16]
 800b25e:	f043 0308 	orr.w	r3, r3, #8
 800b262:	6113      	str	r3, [r2, #16]
}
 800b264:	e7f8      	b.n	800b258 <SPI_DMATransmitReceiveCplt+0x1a>

0800b266 <HAL_SPI_RxHalfCpltCallback>:
 800b266:	4770      	bx	lr

0800b268 <SPI_DMAHalfReceiveCplt>:
{
 800b268:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b26a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b26c:	f7ff fffb 	bl	800b266 <HAL_SPI_RxHalfCpltCallback>
}
 800b270:	bd08      	pop	{r3, pc}

0800b272 <HAL_SPI_TxRxHalfCpltCallback>:
 800b272:	4770      	bx	lr

0800b274 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800b274:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b276:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b278:	f7ff fffb 	bl	800b272 <HAL_SPI_TxRxHalfCpltCallback>
}
 800b27c:	bd08      	pop	{r3, pc}

0800b27e <HAL_SPI_ErrorCallback>:
 800b27e:	4770      	bx	lr

0800b280 <SPI_DMAError>:
{
 800b280:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b282:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b284:	f7fc fbe6 	bl	8007a54 <HAL_DMA_GetError>
 800b288:	2802      	cmp	r0, #2
 800b28a:	d00d      	beq.n	800b2a8 <SPI_DMAError+0x28>
    SPI_CloseTransfer(hspi);
 800b28c:	4620      	mov	r0, r4
 800b28e:	f7ff fd37 	bl	800ad00 <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b292:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b296:	f043 0310 	orr.w	r3, r3, #16
 800b29a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800b2a4:	f7ff ffeb 	bl	800b27e <HAL_SPI_ErrorCallback>
}
 800b2a8:	bd10      	pop	{r4, pc}
	...

0800b2ac <HAL_SPI_IRQHandler>:
{
 800b2ac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t itsource = hspi->Instance->IER;
 800b2b0:	6807      	ldr	r7, [r0, #0]
{
 800b2b2:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800b2b4:	f8d7 8010 	ldr.w	r8, [r7, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800b2b8:	f8d7 9014 	ldr.w	r9, [r7, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b2bc:	68be      	ldr	r6, [r7, #8]
  uint32_t trigger  = itsource & itflag;
 800b2be:	ea08 0a09 	and.w	sl, r8, r9
  HAL_SPI_StateTypeDef State = hspi->State;
 800b2c2:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b2c6:	f00a 0364 	and.w	r3, sl, #100	; 0x64
  HAL_SPI_StateTypeDef State = hspi->State;
 800b2ca:	b2ed      	uxtb	r5, r5
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b2cc:	2b04      	cmp	r3, #4
 800b2ce:	d118      	bne.n	800b302 <HAL_SPI_IRQHandler+0x56>
    hspi->TxISR(hspi);
 800b2d0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800b2d2:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b2d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	4798      	blx	r3
    handled = 1UL;
 800b2da:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b2dc:	f00a 0b45 	and.w	fp, sl, #69	; 0x45
 800b2e0:	f1bb 0f01 	cmp.w	fp, #1
 800b2e4:	d103      	bne.n	800b2ee <HAL_SPI_IRQHandler+0x42>
    hspi->RxISR(hspi);
 800b2e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	4798      	blx	r3
    handled = 1UL;
 800b2ec:	465b      	mov	r3, fp
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b2ee:	f00a 0226 	and.w	r2, sl, #38	; 0x26
 800b2f2:	2a02      	cmp	r2, #2
 800b2f4:	d107      	bne.n	800b306 <HAL_SPI_IRQHandler+0x5a>
    hspi->TxISR(hspi);
 800b2f6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b2f8:	4620      	mov	r0, r4
}
 800b2fa:	b001      	add	sp, #4
 800b2fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    hspi->TxISR(hspi);
 800b300:	4718      	bx	r3
  uint32_t handled  = 0UL;
 800b302:	2300      	movs	r3, #0
 800b304:	e7ea      	b.n	800b2dc <HAL_SPI_IRQHandler+0x30>
  if (handled != 0UL)
 800b306:	bb03      	cbnz	r3, 800b34a <HAL_SPI_IRQHandler+0x9e>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b308:	f01a 0f08 	tst.w	sl, #8
 800b30c:	d065      	beq.n	800b3da <HAL_SPI_IRQHandler+0x12e>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b30e:	6823      	ldr	r3, [r4, #0]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800b310:	f416 4f40 	tst.w	r6, #49152	; 0xc000
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b314:	699a      	ldr	r2, [r3, #24]
 800b316:	f042 0208 	orr.w	r2, r2, #8
 800b31a:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b31c:	699a      	ldr	r2, [r3, #24]
 800b31e:	f042 0210 	orr.w	r2, r2, #16
 800b322:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b324:	699a      	ldr	r2, [r3, #24]
 800b326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b32a:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b32c:	691a      	ldr	r2, [r3, #16]
 800b32e:	f022 0208 	bic.w	r2, r2, #8
 800b332:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800b334:	d00f      	beq.n	800b356 <HAL_SPI_IRQHandler+0xaa>
 800b336:	2d04      	cmp	r5, #4
 800b338:	d00a      	beq.n	800b350 <HAL_SPI_IRQHandler+0xa4>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800b33a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b33c:	69d2      	ldr	r2, [r2, #28]
 800b33e:	b152      	cbz	r2, 800b356 <HAL_SPI_IRQHandler+0xaa>
 800b340:	2d03      	cmp	r5, #3
 800b342:	d105      	bne.n	800b350 <HAL_SPI_IRQHandler+0xa4>
      HAL_SPI_TxCpltCallback(hspi);
 800b344:	4620      	mov	r0, r4
 800b346:	f7ff ff63 	bl	800b210 <HAL_SPI_TxCpltCallback>
}
 800b34a:	b001      	add	sp, #4
 800b34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800b350:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800b352:	69d2      	ldr	r2, [r2, #28]
 800b354:	bb92      	cbnz	r2, 800b3bc <HAL_SPI_IRQHandler+0x110>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800b35c:	d01b      	beq.n	800b396 <HAL_SPI_IRQHandler+0xea>
      SPI_CloseTransfer(hspi);
 800b35e:	4620      	mov	r0, r4
 800b360:	f7ff fcce 	bl	800ad00 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 800b364:	2301      	movs	r3, #1
 800b366:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b36a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b36e:	b32b      	cbz	r3, 800b3bc <HAL_SPI_IRQHandler+0x110>
        HAL_SPI_ErrorCallback(hspi);
 800b370:	4620      	mov	r0, r4
 800b372:	f7ff ff84 	bl	800b27e <HAL_SPI_ErrorCallback>
 800b376:	e7e8      	b.n	800b34a <HAL_SPI_IRQHandler+0x9e>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b378:	68e2      	ldr	r2, [r4, #12]
 800b37a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b37c:	2a0f      	cmp	r2, #15
 800b37e:	d910      	bls.n	800b3a2 <HAL_SPI_IRQHandler+0xf6>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b380:	6822      	ldr	r2, [r4, #0]
 800b382:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b384:	f843 2b04 	str.w	r2, [r3], #4
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800b388:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800b38a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b38e:	3b01      	subs	r3, #1
 800b390:	b29b      	uxth	r3, r3
 800b392:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800b396:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1eb      	bne.n	800b378 <HAL_SPI_IRQHandler+0xcc>
 800b3a0:	e7dd      	b.n	800b35e <HAL_SPI_IRQHandler+0xb2>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3a2:	2a07      	cmp	r2, #7
 800b3a4:	d903      	bls.n	800b3ae <HAL_SPI_IRQHandler+0x102>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b3a6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800b3a8:	f823 2b02 	strh.w	r2, [r3], #2
 800b3ac:	e7ec      	b.n	800b388 <HAL_SPI_IRQHandler+0xdc>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b3ae:	6822      	ldr	r2, [r4, #0]
 800b3b0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800b3b4:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800b3b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	e7e5      	b.n	800b388 <HAL_SPI_IRQHandler+0xdc>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b3bc:	2d05      	cmp	r5, #5
 800b3be:	d103      	bne.n	800b3c8 <HAL_SPI_IRQHandler+0x11c>
      HAL_SPI_TxRxCpltCallback(hspi);
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f7ff ff3b 	bl	800b23c <HAL_SPI_TxRxCpltCallback>
 800b3c6:	e7c0      	b.n	800b34a <HAL_SPI_IRQHandler+0x9e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b3c8:	2d04      	cmp	r5, #4
 800b3ca:	d103      	bne.n	800b3d4 <HAL_SPI_IRQHandler+0x128>
      HAL_SPI_RxCpltCallback(hspi);
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f7ff ff20 	bl	800b212 <HAL_SPI_RxCpltCallback>
 800b3d2:	e7ba      	b.n	800b34a <HAL_SPI_IRQHandler+0x9e>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b3d4:	2d03      	cmp	r5, #3
 800b3d6:	d1b8      	bne.n	800b34a <HAL_SPI_IRQHandler+0x9e>
 800b3d8:	e7b4      	b.n	800b344 <HAL_SPI_IRQHandler+0x98>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b3da:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800b3de:	d008      	beq.n	800b3f2 <HAL_SPI_IRQHandler+0x146>
 800b3e0:	f018 0f08 	tst.w	r8, #8
 800b3e4:	d005      	beq.n	800b3f2 <HAL_SPI_IRQHandler+0x146>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b3e6:	6822      	ldr	r2, [r4, #0]
 800b3e8:	6993      	ldr	r3, [r2, #24]
 800b3ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b3ee:	6193      	str	r3, [r2, #24]
    return;
 800b3f0:	e7ab      	b.n	800b34a <HAL_SPI_IRQHandler+0x9e>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b3f2:	f41a 7f58 	tst.w	sl, #864	; 0x360
 800b3f6:	d0a8      	beq.n	800b34a <HAL_SPI_IRQHandler+0x9e>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b3f8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800b3fc:	d00a      	beq.n	800b414 <HAL_SPI_IRQHandler+0x168>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b3fe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b402:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b404:	f043 0304 	orr.w	r3, r3, #4
 800b408:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b40c:	6993      	ldr	r3, [r2, #24]
 800b40e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b412:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b414:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800b418:	d00a      	beq.n	800b430 <HAL_SPI_IRQHandler+0x184>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b41a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b41e:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b420:	f043 0301 	orr.w	r3, r3, #1
 800b424:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b428:	6993      	ldr	r3, [r2, #24]
 800b42a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b42e:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b430:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b434:	d00a      	beq.n	800b44c <HAL_SPI_IRQHandler+0x1a0>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b436:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b43a:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b43c:	f043 0308 	orr.w	r3, r3, #8
 800b440:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b444:	6993      	ldr	r3, [r2, #24]
 800b446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b44a:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b44c:	f01a 0f20 	tst.w	sl, #32
 800b450:	d00a      	beq.n	800b468 <HAL_SPI_IRQHandler+0x1bc>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b452:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b456:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b45c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b460:	6993      	ldr	r3, [r2, #24]
 800b462:	f043 0320 	orr.w	r3, r3, #32
 800b466:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b468:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f43f af6c 	beq.w	800b34a <HAL_SPI_IRQHandler+0x9e>
      __HAL_SPI_DISABLE(hspi);
 800b472:	6823      	ldr	r3, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b474:	f406 4640 	and.w	r6, r6, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800b478:	681a      	ldr	r2, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b47a:	f5b6 4f40 	cmp.w	r6, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800b47e:	f022 0201 	bic.w	r2, r2, #1
 800b482:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800b484:	691a      	ldr	r2, [r3, #16]
 800b486:	f422 725a 	bic.w	r2, r2, #872	; 0x368
 800b48a:	f022 0203 	bic.w	r2, r2, #3
 800b48e:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b490:	d122      	bne.n	800b4d8 <HAL_SPI_IRQHandler+0x22c>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b492:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800b494:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b496:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b49a:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800b49c:	b150      	cbz	r0, 800b4b4 <HAL_SPI_IRQHandler+0x208>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b49e:	4b10      	ldr	r3, [pc, #64]	; (800b4e0 <HAL_SPI_IRQHandler+0x234>)
 800b4a0:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b4a2:	f7fb ff7b 	bl	800739c <HAL_DMA_Abort_IT>
 800b4a6:	b128      	cbz	r0, 800b4b4 <HAL_SPI_IRQHandler+0x208>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b4a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b4ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4b0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800b4b4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	f43f af47 	beq.w	800b34a <HAL_SPI_IRQHandler+0x9e>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b4bc:	4b08      	ldr	r3, [pc, #32]	; (800b4e0 <HAL_SPI_IRQHandler+0x234>)
 800b4be:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b4c0:	f7fb ff6c 	bl	800739c <HAL_DMA_Abort_IT>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	f43f af40 	beq.w	800b34a <HAL_SPI_IRQHandler+0x9e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b4ca:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b4ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4d2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b4d6:	e738      	b.n	800b34a <HAL_SPI_IRQHandler+0x9e>
        hspi->State = HAL_SPI_STATE_READY;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800b4de:	e747      	b.n	800b370 <HAL_SPI_IRQHandler+0xc4>
 800b4e0:	0800b4e5 	.word	0x0800b4e5

0800b4e4 <SPI_DMAAbortOnError>:
{
 800b4e4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b4ee:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800b4f8:	f7ff fec1 	bl	800b27e <HAL_SPI_ErrorCallback>
}
 800b4fc:	bd08      	pop	{r3, pc}

0800b4fe <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b4fe:	4770      	bx	lr

0800b500 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b500:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b504:	2b01      	cmp	r3, #1
 800b506:	d115      	bne.n	800b534 <HAL_TIM_Base_Start_IT+0x34>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b508:	2302      	movs	r3, #2
 800b50a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b50e:	6803      	ldr	r3, [r0, #0]
 800b510:	68da      	ldr	r2, [r3, #12]
 800b512:	f042 0201 	orr.w	r2, r2, #1
 800b516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b518:	4a07      	ldr	r2, [pc, #28]	; (800b538 <HAL_TIM_Base_Start_IT+0x38>)
 800b51a:	6899      	ldr	r1, [r3, #8]
 800b51c:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b51e:	2a06      	cmp	r2, #6
 800b520:	d006      	beq.n	800b530 <HAL_TIM_Base_Start_IT+0x30>
 800b522:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b526:	d003      	beq.n	800b530 <HAL_TIM_Base_Start_IT+0x30>
  {
    __HAL_TIM_ENABLE(htim);
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	f042 0201 	orr.w	r2, r2, #1
 800b52e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b530:	2000      	movs	r0, #0
}
 800b532:	4770      	bx	lr
    return HAL_ERROR;
 800b534:	2001      	movs	r0, #1
 800b536:	4770      	bx	lr
 800b538:	00010007 	.word	0x00010007

0800b53c <HAL_TIM_OC_DelayElapsedCallback>:
 800b53c:	4770      	bx	lr

0800b53e <HAL_TIM_IC_CaptureCallback>:
 800b53e:	4770      	bx	lr

0800b540 <HAL_TIM_PWM_PulseFinishedCallback>:
 800b540:	4770      	bx	lr

0800b542 <HAL_TIM_TriggerCallback>:
 800b542:	4770      	bx	lr

0800b544 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b544:	6803      	ldr	r3, [r0, #0]
 800b546:	691a      	ldr	r2, [r3, #16]
 800b548:	0791      	lsls	r1, r2, #30
{
 800b54a:	b510      	push	{r4, lr}
 800b54c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b54e:	d50f      	bpl.n	800b570 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b550:	68da      	ldr	r2, [r3, #12]
 800b552:	0792      	lsls	r2, r2, #30
 800b554:	d50c      	bpl.n	800b570 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b556:	f06f 0202 	mvn.w	r2, #2
 800b55a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b55c:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b55e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b560:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b562:	0799      	lsls	r1, r3, #30
 800b564:	f000 8085 	beq.w	800b672 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b568:	f7ff ffe9 	bl	800b53e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b56c:	2300      	movs	r3, #0
 800b56e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	691a      	ldr	r2, [r3, #16]
 800b574:	0752      	lsls	r2, r2, #29
 800b576:	d510      	bpl.n	800b59a <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b578:	68da      	ldr	r2, [r3, #12]
 800b57a:	0750      	lsls	r0, r2, #29
 800b57c:	d50d      	bpl.n	800b59a <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b57e:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b582:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b586:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b588:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b58a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b58c:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b590:	d075      	beq.n	800b67e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800b592:	f7ff ffd4 	bl	800b53e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b596:	2300      	movs	r3, #0
 800b598:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	691a      	ldr	r2, [r3, #16]
 800b59e:	0711      	lsls	r1, r2, #28
 800b5a0:	d50f      	bpl.n	800b5c2 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b5a2:	68da      	ldr	r2, [r3, #12]
 800b5a4:	0712      	lsls	r2, r2, #28
 800b5a6:	d50c      	bpl.n	800b5c2 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b5a8:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5ac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b5ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5b0:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5b2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5b4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5b6:	079b      	lsls	r3, r3, #30
 800b5b8:	d067      	beq.n	800b68a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800b5ba:	f7ff ffc0 	bl	800b53e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b5c2:	6823      	ldr	r3, [r4, #0]
 800b5c4:	691a      	ldr	r2, [r3, #16]
 800b5c6:	06d0      	lsls	r0, r2, #27
 800b5c8:	d510      	bpl.n	800b5ec <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b5ca:	68da      	ldr	r2, [r3, #12]
 800b5cc:	06d1      	lsls	r1, r2, #27
 800b5ce:	d50d      	bpl.n	800b5ec <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b5d0:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b5d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5d8:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5da:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5dc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5de:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b5e2:	d058      	beq.n	800b696 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800b5e4:	f7ff ffab 	bl	800b53e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b5ec:	6823      	ldr	r3, [r4, #0]
 800b5ee:	691a      	ldr	r2, [r3, #16]
 800b5f0:	07d2      	lsls	r2, r2, #31
 800b5f2:	d508      	bpl.n	800b606 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b5f4:	68da      	ldr	r2, [r3, #12]
 800b5f6:	07d0      	lsls	r0, r2, #31
 800b5f8:	d505      	bpl.n	800b606 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b5fa:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b600:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b602:	f7f7 fa7d 	bl	8002b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	691a      	ldr	r2, [r3, #16]
 800b60a:	0611      	lsls	r1, r2, #24
 800b60c:	d508      	bpl.n	800b620 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b60e:	68da      	ldr	r2, [r3, #12]
 800b610:	0612      	lsls	r2, r2, #24
 800b612:	d505      	bpl.n	800b620 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b614:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b618:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b61a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b61c:	f000 f8d9 	bl	800b7d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	691a      	ldr	r2, [r3, #16]
 800b624:	05d0      	lsls	r0, r2, #23
 800b626:	d508      	bpl.n	800b63a <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b628:	68da      	ldr	r2, [r3, #12]
 800b62a:	0611      	lsls	r1, r2, #24
 800b62c:	d505      	bpl.n	800b63a <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b62e:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b632:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b634:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800b636:	f000 f8cd 	bl	800b7d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	691a      	ldr	r2, [r3, #16]
 800b63e:	0652      	lsls	r2, r2, #25
 800b640:	d508      	bpl.n	800b654 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b642:	68da      	ldr	r2, [r3, #12]
 800b644:	0650      	lsls	r0, r2, #25
 800b646:	d505      	bpl.n	800b654 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b648:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b64c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b64e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b650:	f7ff ff77 	bl	800b542 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b654:	6823      	ldr	r3, [r4, #0]
 800b656:	691a      	ldr	r2, [r3, #16]
 800b658:	0691      	lsls	r1, r2, #26
 800b65a:	d522      	bpl.n	800b6a2 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b65c:	68da      	ldr	r2, [r3, #12]
 800b65e:	0692      	lsls	r2, r2, #26
 800b660:	d51f      	bpl.n	800b6a2 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b662:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b666:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b668:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b66a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800b66e:	f000 b8af 	b.w	800b7d0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b672:	f7ff ff63 	bl	800b53c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b676:	4620      	mov	r0, r4
 800b678:	f7ff ff62 	bl	800b540 <HAL_TIM_PWM_PulseFinishedCallback>
 800b67c:	e776      	b.n	800b56c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b67e:	f7ff ff5d 	bl	800b53c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b682:	4620      	mov	r0, r4
 800b684:	f7ff ff5c 	bl	800b540 <HAL_TIM_PWM_PulseFinishedCallback>
 800b688:	e785      	b.n	800b596 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b68a:	f7ff ff57 	bl	800b53c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b68e:	4620      	mov	r0, r4
 800b690:	f7ff ff56 	bl	800b540 <HAL_TIM_PWM_PulseFinishedCallback>
 800b694:	e793      	b.n	800b5be <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b696:	f7ff ff51 	bl	800b53c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b69a:	4620      	mov	r0, r4
 800b69c:	f7ff ff50 	bl	800b540 <HAL_TIM_PWM_PulseFinishedCallback>
 800b6a0:	e7a2      	b.n	800b5e8 <HAL_TIM_IRQHandler+0xa4>
}
 800b6a2:	bd10      	pop	{r4, pc}

0800b6a4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6a4:	4a30      	ldr	r2, [pc, #192]	; (800b768 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800b6a6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6a8:	4290      	cmp	r0, r2
 800b6aa:	d012      	beq.n	800b6d2 <TIM_Base_SetConfig+0x2e>
 800b6ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b6b0:	d00f      	beq.n	800b6d2 <TIM_Base_SetConfig+0x2e>
 800b6b2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b6b6:	4290      	cmp	r0, r2
 800b6b8:	d00b      	beq.n	800b6d2 <TIM_Base_SetConfig+0x2e>
 800b6ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b6be:	4290      	cmp	r0, r2
 800b6c0:	d007      	beq.n	800b6d2 <TIM_Base_SetConfig+0x2e>
 800b6c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b6c6:	4290      	cmp	r0, r2
 800b6c8:	d003      	beq.n	800b6d2 <TIM_Base_SetConfig+0x2e>
 800b6ca:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b6ce:	4290      	cmp	r0, r2
 800b6d0:	d119      	bne.n	800b706 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800b6d2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b6d8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6da:	4a23      	ldr	r2, [pc, #140]	; (800b768 <TIM_Base_SetConfig+0xc4>)
 800b6dc:	4290      	cmp	r0, r2
 800b6de:	d01d      	beq.n	800b71c <TIM_Base_SetConfig+0x78>
 800b6e0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b6e4:	d01a      	beq.n	800b71c <TIM_Base_SetConfig+0x78>
 800b6e6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b6ea:	4290      	cmp	r0, r2
 800b6ec:	d016      	beq.n	800b71c <TIM_Base_SetConfig+0x78>
 800b6ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b6f2:	4290      	cmp	r0, r2
 800b6f4:	d012      	beq.n	800b71c <TIM_Base_SetConfig+0x78>
 800b6f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b6fa:	4290      	cmp	r0, r2
 800b6fc:	d00e      	beq.n	800b71c <TIM_Base_SetConfig+0x78>
 800b6fe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b702:	4290      	cmp	r0, r2
 800b704:	d00a      	beq.n	800b71c <TIM_Base_SetConfig+0x78>
 800b706:	4a19      	ldr	r2, [pc, #100]	; (800b76c <TIM_Base_SetConfig+0xc8>)
 800b708:	4290      	cmp	r0, r2
 800b70a:	d007      	beq.n	800b71c <TIM_Base_SetConfig+0x78>
 800b70c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b710:	4290      	cmp	r0, r2
 800b712:	d003      	beq.n	800b71c <TIM_Base_SetConfig+0x78>
 800b714:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b718:	4290      	cmp	r0, r2
 800b71a:	d103      	bne.n	800b724 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b71c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b720:	68ca      	ldr	r2, [r1, #12]
 800b722:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b724:	694a      	ldr	r2, [r1, #20]
 800b726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b72a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800b72c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b72e:	688b      	ldr	r3, [r1, #8]
 800b730:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b732:	680b      	ldr	r3, [r1, #0]
 800b734:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b736:	4b0c      	ldr	r3, [pc, #48]	; (800b768 <TIM_Base_SetConfig+0xc4>)
 800b738:	4298      	cmp	r0, r3
 800b73a:	d00f      	beq.n	800b75c <TIM_Base_SetConfig+0xb8>
 800b73c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b740:	4298      	cmp	r0, r3
 800b742:	d00b      	beq.n	800b75c <TIM_Base_SetConfig+0xb8>
 800b744:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b748:	4298      	cmp	r0, r3
 800b74a:	d007      	beq.n	800b75c <TIM_Base_SetConfig+0xb8>
 800b74c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b750:	4298      	cmp	r0, r3
 800b752:	d003      	beq.n	800b75c <TIM_Base_SetConfig+0xb8>
 800b754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b758:	4298      	cmp	r0, r3
 800b75a:	d101      	bne.n	800b760 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b75c:	690b      	ldr	r3, [r1, #16]
 800b75e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b760:	2301      	movs	r3, #1
 800b762:	6143      	str	r3, [r0, #20]
}
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	40010000 	.word	0x40010000
 800b76c:	40014000 	.word	0x40014000

0800b770 <HAL_TIM_Base_Init>:
{
 800b770:	b510      	push	{r4, lr}
  if (htim == NULL)
 800b772:	4604      	mov	r4, r0
 800b774:	b350      	cbz	r0, 800b7cc <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800b776:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b77a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b77e:	b91b      	cbnz	r3, 800b788 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800b780:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b784:	f7ff febb 	bl	800b4fe <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800b788:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b78a:	6820      	ldr	r0, [r4, #0]
 800b78c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800b78e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b792:	f7ff ff87 	bl	800b6a4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b796:	2301      	movs	r3, #1
  return HAL_OK;
 800b798:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b79a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b79e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b7a2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b7a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b7aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800b7ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b7ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b7be:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800b7c2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b7c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800b7ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b7cc:	2001      	movs	r0, #1
 800b7ce:	e7fc      	b.n	800b7ca <HAL_TIM_Base_Init+0x5a>

0800b7d0 <HAL_TIMEx_CommutCallback>:
 800b7d0:	4770      	bx	lr

0800b7d2 <HAL_TIMEx_BreakCallback>:
 800b7d2:	4770      	bx	lr

0800b7d4 <HAL_TIMEx_Break2Callback>:
 800b7d4:	4770      	bx	lr

0800b7d6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7d6:	6802      	ldr	r2, [r0, #0]
 800b7d8:	6813      	ldr	r3, [r2, #0]
 800b7da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b7de:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7e0:	6893      	ldr	r3, [r2, #8]
 800b7e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7e6:	f023 0301 	bic.w	r3, r3, #1
 800b7ea:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7ec:	2320      	movs	r3, #32
 800b7ee:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800b7f6:	4770      	bx	lr

0800b7f8 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800b7f8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800b7fc:	2b20      	cmp	r3, #32
{
 800b7fe:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800b800:	d167      	bne.n	800b8d2 <HAL_UART_Receive_IT+0xda>
    if ((pData == NULL) || (Size == 0U))
 800b802:	2900      	cmp	r1, #0
 800b804:	d063      	beq.n	800b8ce <HAL_UART_Receive_IT+0xd6>
 800b806:	2a00      	cmp	r2, #0
 800b808:	d061      	beq.n	800b8ce <HAL_UART_Receive_IT+0xd6>
    __HAL_LOCK(huart);
 800b80a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d05f      	beq.n	800b8d2 <HAL_UART_Receive_IT+0xda>
 800b812:	2301      	movs	r3, #1
    huart->pRxBuffPtr  = pData;
 800b814:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxISR       = NULL;
 800b816:	2100      	movs	r1, #0
    huart->RxXferSize  = Size;
 800b818:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    __HAL_LOCK(huart);
 800b81c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    UART_MASK_COMPUTATION(huart);
 800b820:	6883      	ldr	r3, [r0, #8]
    huart->RxXferCount = Size;
 800b822:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 800b826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxISR       = NULL;
 800b82a:	66c1      	str	r1, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 800b82c:	d12e      	bne.n	800b88c <HAL_UART_Receive_IT+0x94>
 800b82e:	6901      	ldr	r1, [r0, #16]
 800b830:	bb51      	cbnz	r1, 800b888 <HAL_UART_Receive_IT+0x90>
 800b832:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b836:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b83a:	2100      	movs	r1, #0
 800b83c:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b840:	2122      	movs	r1, #34	; 0x22
 800b842:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b846:	6801      	ldr	r1, [r0, #0]
 800b848:	688c      	ldr	r4, [r1, #8]
 800b84a:	f044 0401 	orr.w	r4, r4, #1
 800b84e:	608c      	str	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b850:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800b852:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 800b856:	d129      	bne.n	800b8ac <HAL_UART_Receive_IT+0xb4>
 800b858:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 800b85c:	4294      	cmp	r4, r2
 800b85e:	d825      	bhi.n	800b8ac <HAL_UART_Receive_IT+0xb4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b864:	d120      	bne.n	800b8a8 <HAL_UART_Receive_IT+0xb0>
 800b866:	6903      	ldr	r3, [r0, #16]
 800b868:	b9f3      	cbnz	r3, 800b8a8 <HAL_UART_Receive_IT+0xb0>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b86a:	4b1b      	ldr	r3, [pc, #108]	; (800b8d8 <HAL_UART_Receive_IT+0xe0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b86c:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b86e:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 800b870:	2300      	movs	r3, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 800b876:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b87a:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b87c:	688a      	ldr	r2, [r1, #8]
 800b87e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b882:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 800b884:	4618      	mov	r0, r3
}
 800b886:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 800b888:	21ff      	movs	r1, #255	; 0xff
 800b88a:	e7d4      	b.n	800b836 <HAL_UART_Receive_IT+0x3e>
 800b88c:	b923      	cbnz	r3, 800b898 <HAL_UART_Receive_IT+0xa0>
 800b88e:	6901      	ldr	r1, [r0, #16]
 800b890:	2900      	cmp	r1, #0
 800b892:	d0f9      	beq.n	800b888 <HAL_UART_Receive_IT+0x90>
 800b894:	217f      	movs	r1, #127	; 0x7f
 800b896:	e7ce      	b.n	800b836 <HAL_UART_Receive_IT+0x3e>
 800b898:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b89c:	d1cb      	bne.n	800b836 <HAL_UART_Receive_IT+0x3e>
 800b89e:	6901      	ldr	r1, [r0, #16]
 800b8a0:	2900      	cmp	r1, #0
 800b8a2:	d0f7      	beq.n	800b894 <HAL_UART_Receive_IT+0x9c>
 800b8a4:	213f      	movs	r1, #63	; 0x3f
 800b8a6:	e7c6      	b.n	800b836 <HAL_UART_Receive_IT+0x3e>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b8a8:	4b0c      	ldr	r3, [pc, #48]	; (800b8dc <HAL_UART_Receive_IT+0xe4>)
 800b8aa:	e7df      	b.n	800b86c <HAL_UART_Receive_IT+0x74>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8b0:	d10b      	bne.n	800b8ca <HAL_UART_Receive_IT+0xd2>
 800b8b2:	6903      	ldr	r3, [r0, #16]
 800b8b4:	b94b      	cbnz	r3, 800b8ca <HAL_UART_Receive_IT+0xd2>
        huart->RxISR = UART_RxISR_16BIT;
 800b8b6:	4b0a      	ldr	r3, [pc, #40]	; (800b8e0 <HAL_UART_Receive_IT+0xe8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b8b8:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT;
 800b8ba:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 800b8bc:	2300      	movs	r3, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b8be:	f442 7290 	orr.w	r2, r2, #288	; 0x120
      __HAL_UNLOCK(huart);
 800b8c2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b8c6:	600a      	str	r2, [r1, #0]
 800b8c8:	e7dc      	b.n	800b884 <HAL_UART_Receive_IT+0x8c>
        huart->RxISR = UART_RxISR_8BIT;
 800b8ca:	4b06      	ldr	r3, [pc, #24]	; (800b8e4 <HAL_UART_Receive_IT+0xec>)
 800b8cc:	e7f4      	b.n	800b8b8 <HAL_UART_Receive_IT+0xc0>
      return HAL_ERROR;
 800b8ce:	2001      	movs	r0, #1
 800b8d0:	e7d9      	b.n	800b886 <HAL_UART_Receive_IT+0x8e>
    return HAL_BUSY;
 800b8d2:	2002      	movs	r0, #2
 800b8d4:	e7d7      	b.n	800b886 <HAL_UART_Receive_IT+0x8e>
 800b8d6:	bf00      	nop
 800b8d8:	0800bc15 	.word	0x0800bc15
 800b8dc:	0800bb71 	.word	0x0800bb71
 800b8e0:	0800bb17 	.word	0x0800bb17
 800b8e4:	0800babb 	.word	0x0800babb

0800b8e8 <HAL_UART_Receive_DMA>:
{
 800b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800b8ea:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
{
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800b8f2:	2f20      	cmp	r7, #32
 800b8f4:	d13c      	bne.n	800b970 <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 800b8f6:	b341      	cbz	r1, 800b94a <HAL_UART_Receive_DMA+0x62>
 800b8f8:	b33a      	cbz	r2, 800b94a <HAL_UART_Receive_DMA+0x62>
    __HAL_LOCK(huart);
 800b8fa:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 800b8fe:	2a01      	cmp	r2, #1
 800b900:	d036      	beq.n	800b970 <HAL_UART_Receive_DMA+0x88>
 800b902:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b904:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b906:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 800b908:	6581      	str	r1, [r0, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b90a:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
    __HAL_LOCK(huart);
 800b90e:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxXferSize = Size;
 800b912:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b916:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmarx != NULL)
 800b91a:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800b91c:	b1b8      	cbz	r0, 800b94e <HAL_UART_Receive_DMA+0x66>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b91e:	4a15      	ldr	r2, [pc, #84]	; (800b974 <HAL_UART_Receive_DMA+0x8c>)
 800b920:	f8d4 c000 	ldr.w	ip, [r4]
 800b924:	63c2      	str	r2, [r0, #60]	; 0x3c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b926:	4a14      	ldr	r2, [pc, #80]	; (800b978 <HAL_UART_Receive_DMA+0x90>)
 800b928:	6402      	str	r2, [r0, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b92a:	4a14      	ldr	r2, [pc, #80]	; (800b97c <HAL_UART_Receive_DMA+0x94>)
      huart->hdmarx->XferAbortCallback = NULL;
 800b92c:	e9c0 2613 	strd	r2, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b930:	460a      	mov	r2, r1
 800b932:	f10c 0124 	add.w	r1, ip, #36	; 0x24
 800b936:	f7fb fa61 	bl	8006dfc <HAL_DMA_Start_IT>
 800b93a:	b140      	cbz	r0, 800b94e <HAL_UART_Receive_DMA+0x66>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b93c:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800b93e:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b942:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 800b946:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
      return HAL_ERROR;
 800b94a:	2001      	movs	r0, #1
 800b94c:	e00f      	b.n	800b96e <HAL_UART_Receive_DMA+0x86>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b94e:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 800b950:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b952:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800b954:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b95c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b95e:	689a      	ldr	r2, [r3, #8]
 800b960:	f042 0201 	orr.w	r2, r2, #1
 800b964:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b966:	689a      	ldr	r2, [r3, #8]
 800b968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b96c:	609a      	str	r2, [r3, #8]
}
 800b96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800b970:	2002      	movs	r0, #2
 800b972:	e7fc      	b.n	800b96e <HAL_UART_Receive_DMA+0x86>
 800b974:	0800bcb5 	.word	0x0800bcb5
 800b978:	0800bcf1 	.word	0x0800bcf1
 800b97c:	0800bcfd 	.word	0x0800bcfd

0800b980 <HAL_UART_DMAPause>:
  __HAL_LOCK(huart);
 800b980:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b984:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  __HAL_LOCK(huart);
 800b988:	2b01      	cmp	r3, #1
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b98a:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 800b98e:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 800b990:	d022      	beq.n	800b9d8 <HAL_UART_DMAPause+0x58>
 800b992:	2301      	movs	r3, #1
 800b994:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b998:	6803      	ldr	r3, [r0, #0]
 800b99a:	689c      	ldr	r4, [r3, #8]
 800b99c:	0624      	lsls	r4, r4, #24
 800b99e:	d505      	bpl.n	800b9ac <HAL_UART_DMAPause+0x2c>
 800b9a0:	2a21      	cmp	r2, #33	; 0x21
 800b9a2:	d103      	bne.n	800b9ac <HAL_UART_DMAPause+0x2c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b9a4:	689a      	ldr	r2, [r3, #8]
 800b9a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b9aa:	609a      	str	r2, [r3, #8]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b9ac:	689a      	ldr	r2, [r3, #8]
 800b9ae:	0652      	lsls	r2, r2, #25
 800b9b0:	d50d      	bpl.n	800b9ce <HAL_UART_DMAPause+0x4e>
 800b9b2:	2922      	cmp	r1, #34	; 0x22
 800b9b4:	d10b      	bne.n	800b9ce <HAL_UART_DMAPause+0x4e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b9bc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9be:	689a      	ldr	r2, [r3, #8]
 800b9c0:	f022 0201 	bic.w	r2, r2, #1
 800b9c4:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9c6:	689a      	ldr	r2, [r3, #8]
 800b9c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9cc:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(huart);
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800b9d4:	4618      	mov	r0, r3
}
 800b9d6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800b9d8:	2002      	movs	r0, #2
 800b9da:	e7fc      	b.n	800b9d6 <HAL_UART_DMAPause+0x56>

0800b9dc <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 800b9dc:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d023      	beq.n	800ba2c <HAL_UART_DMAResume+0x50>
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b9ea:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800b9ee:	2b21      	cmp	r3, #33	; 0x21
 800b9f0:	d104      	bne.n	800b9fc <HAL_UART_DMAResume+0x20>
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b9f2:	6802      	ldr	r2, [r0, #0]
 800b9f4:	6893      	ldr	r3, [r2, #8]
 800b9f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9fa:	6093      	str	r3, [r2, #8]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b9fc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800ba00:	2b22      	cmp	r3, #34	; 0x22
 800ba02:	d10e      	bne.n	800ba22 <HAL_UART_DMAResume+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba04:	6803      	ldr	r3, [r0, #0]
 800ba06:	2208      	movs	r2, #8
 800ba08:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba10:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba12:	689a      	ldr	r2, [r3, #8]
 800ba14:	f042 0201 	orr.w	r2, r2, #1
 800ba18:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba1a:	689a      	ldr	r2, [r3, #8]
 800ba1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba20:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(huart);
 800ba22:	2300      	movs	r3, #0
 800ba24:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800ba28:	4618      	mov	r0, r3
 800ba2a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800ba2c:	2002      	movs	r0, #2
}
 800ba2e:	4770      	bx	lr

0800ba30 <HAL_UART_DMAStop>:
{
 800ba30:	b538      	push	{r3, r4, r5, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ba32:	6803      	ldr	r3, [r0, #0]
{
 800ba34:	4604      	mov	r4, r0
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ba36:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ba3a:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ba3e:	6899      	ldr	r1, [r3, #8]
 800ba40:	0609      	lsls	r1, r1, #24
 800ba42:	d520      	bpl.n	800ba86 <HAL_UART_DMAStop+0x56>
 800ba44:	2a21      	cmp	r2, #33	; 0x21
 800ba46:	d11e      	bne.n	800ba86 <HAL_UART_DMAStop+0x56>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba48:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800ba4a:	6f40      	ldr	r0, [r0, #116]	; 0x74
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba50:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800ba52:	b160      	cbz	r0, 800ba6e <HAL_UART_DMAStop+0x3e>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800ba54:	f7fb faf0 	bl	8007038 <HAL_DMA_Abort>
 800ba58:	b148      	cbz	r0, 800ba6e <HAL_UART_DMAStop+0x3e>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ba5a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ba5c:	f7fb fffa 	bl	8007a54 <HAL_DMA_GetError>
 800ba60:	2820      	cmp	r0, #32
 800ba62:	d104      	bne.n	800ba6e <HAL_UART_DMAStop+0x3e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ba64:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 800ba66:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ba68:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800ba6c:	bd38      	pop	{r3, r4, r5, pc}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ba6e:	6823      	ldr	r3, [r4, #0]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ba76:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ba78:	689a      	ldr	r2, [r3, #8]
 800ba7a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800ba7e:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 800ba80:	2320      	movs	r3, #32
 800ba82:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ba86:	6823      	ldr	r3, [r4, #0]
 800ba88:	6898      	ldr	r0, [r3, #8]
 800ba8a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800ba8e:	d0ed      	beq.n	800ba6c <HAL_UART_DMAStop+0x3c>
 800ba90:	2d22      	cmp	r5, #34	; 0x22
 800ba92:	d110      	bne.n	800bab6 <HAL_UART_DMAStop+0x86>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba94:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800ba96:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba9c:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800ba9e:	b138      	cbz	r0, 800bab0 <HAL_UART_DMAStop+0x80>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800baa0:	f7fb faca 	bl	8007038 <HAL_DMA_Abort>
 800baa4:	b120      	cbz	r0, 800bab0 <HAL_UART_DMAStop+0x80>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800baa6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800baa8:	f7fb ffd4 	bl	8007a54 <HAL_DMA_GetError>
 800baac:	2820      	cmp	r0, #32
 800baae:	d0d9      	beq.n	800ba64 <HAL_UART_DMAStop+0x34>
    UART_EndRxTransfer(huart);
 800bab0:	4620      	mov	r0, r4
 800bab2:	f7ff fe90 	bl	800b7d6 <UART_EndRxTransfer>
  return HAL_OK;
 800bab6:	2000      	movs	r0, #0
 800bab8:	e7d8      	b.n	800ba6c <HAL_UART_DMAStop+0x3c>

0800baba <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800baba:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800babe:	6802      	ldr	r2, [r0, #0]
 800bac0:	2922      	cmp	r1, #34	; 0x22
{
 800bac2:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bac4:	d122      	bne.n	800bb0c <UART_RxISR_8BIT+0x52>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bac6:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bac8:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800bacc:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800bace:	4022      	ands	r2, r4
 800bad0:	700a      	strb	r2, [r1, #0]
    huart->pRxBuffPtr++;
 800bad2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800bad4:	3201      	adds	r2, #1
 800bad6:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800bad8:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800badc:	3a01      	subs	r2, #1
 800bade:	b292      	uxth	r2, r2
 800bae0:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bae4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800bae8:	b292      	uxth	r2, r2
 800baea:	b972      	cbnz	r2, 800bb0a <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800baec:	6801      	ldr	r1, [r0, #0]
 800baee:	680c      	ldr	r4, [r1, #0]
 800baf0:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800baf4:	600c      	str	r4, [r1, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baf6:	688c      	ldr	r4, [r1, #8]
 800baf8:	f024 0401 	bic.w	r4, r4, #1
 800bafc:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bafe:	2120      	movs	r1, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bb00:	66c2      	str	r2, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 800bb02:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800bb06:	f7f8 fcd3 	bl	80044b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb0a:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb0c:	6993      	ldr	r3, [r2, #24]
 800bb0e:	f043 0308 	orr.w	r3, r3, #8
 800bb12:	6193      	str	r3, [r2, #24]
}
 800bb14:	e7f9      	b.n	800bb0a <UART_RxISR_8BIT+0x50>

0800bb16 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb16:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800bb1a:	6802      	ldr	r2, [r0, #0]
 800bb1c:	2922      	cmp	r1, #34	; 0x22
{
 800bb1e:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb20:	d120      	bne.n	800bb64 <UART_RxISR_16BIT+0x4e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bb22:	6a54      	ldr	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 800bb24:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 800bb28:	400c      	ands	r4, r1
 800bb2a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800bb2c:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2U;
 800bb30:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800bb32:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 800bb36:	3901      	subs	r1, #1
 800bb38:	b289      	uxth	r1, r1
 800bb3a:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bb3e:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 800bb42:	b289      	uxth	r1, r1
 800bb44:	b969      	cbnz	r1, 800bb62 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb46:	6814      	ldr	r4, [r2, #0]
 800bb48:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800bb4c:	6014      	str	r4, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb4e:	6894      	ldr	r4, [r2, #8]
 800bb50:	f024 0401 	bic.w	r4, r4, #1
 800bb54:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb56:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bb58:	66c1      	str	r1, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 800bb5a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800bb5e:	f7f8 fca7 	bl	80044b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb62:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb64:	6993      	ldr	r3, [r2, #24]
 800bb66:	f043 0308 	orr.w	r3, r3, #8
 800bb6a:	6193      	str	r3, [r2, #24]
}
 800bb6c:	e7f9      	b.n	800bb62 <UART_RxISR_16BIT+0x4c>
	...

0800bb70 <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb70:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800bb74:	2b22      	cmp	r3, #34	; 0x22
{
 800bb76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb7a:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb7c:	d13f      	bne.n	800bbfe <UART_RxISR_8BIT_FIFOEN+0x8e>
  uint16_t  uhMask = huart->Mask;
 800bb7e:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb82:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bb86:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb8a:	4f20      	ldr	r7, [pc, #128]	; (800bc0c <UART_RxISR_8BIT_FIFOEN+0x9c>)
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bb8c:	b9a5      	cbnz	r5, 800bbb8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bb8e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800bb92:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bb94:	b173      	cbz	r3, 800bbb4 <UART_RxISR_8BIT_FIFOEN+0x44>
 800bb96:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d90a      	bls.n	800bbb4 <UART_RxISR_8BIT_FIFOEN+0x44>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bb9e:	6823      	ldr	r3, [r4, #0]
 800bba0:	689a      	ldr	r2, [r3, #8]
 800bba2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bba6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800bba8:	4a19      	ldr	r2, [pc, #100]	; (800bc10 <UART_RxISR_8BIT_FIFOEN+0xa0>)
 800bbaa:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	f042 0220 	orr.w	r2, r2, #32
 800bbb2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bbb8:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bbba:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bbbe:	4033      	ands	r3, r6
 800bbc0:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800bbc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800bbc8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800bbd4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	b96b      	cbnz	r3, 800bbf8 <UART_RxISR_8BIT_FIFOEN+0x88>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbdc:	6822      	ldr	r2, [r4, #0]
        HAL_UART_RxCpltCallback(huart);
 800bbde:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbe0:	6811      	ldr	r1, [r2, #0]
 800bbe2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800bbe6:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbe8:	6891      	ldr	r1, [r2, #8]
 800bbea:	4039      	ands	r1, r7
 800bbec:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800bbee:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 800bbf2:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800bbf4:	f7f8 fc5c 	bl	80044b0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bbf8:	3d01      	subs	r5, #1
 800bbfa:	b2ad      	uxth	r5, r5
 800bbfc:	e7c6      	b.n	800bb8c <UART_RxISR_8BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bbfe:	6802      	ldr	r2, [r0, #0]
 800bc00:	6993      	ldr	r3, [r2, #24]
 800bc02:	f043 0308 	orr.w	r3, r3, #8
 800bc06:	6193      	str	r3, [r2, #24]
}
 800bc08:	e7d4      	b.n	800bbb4 <UART_RxISR_8BIT_FIFOEN+0x44>
 800bc0a:	bf00      	nop
 800bc0c:	effffffe 	.word	0xeffffffe
 800bc10:	0800babb 	.word	0x0800babb

0800bc14 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc14:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800bc18:	2b22      	cmp	r3, #34	; 0x22
{
 800bc1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc1e:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc20:	d13d      	bne.n	800bc9e <UART_RxISR_16BIT_FIFOEN+0x8a>
  uint16_t  uhMask = huart->Mask;
 800bc22:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc26:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bc2a:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc2e:	4f1f      	ldr	r7, [pc, #124]	; (800bcac <UART_RxISR_16BIT_FIFOEN+0x98>)
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bc30:	b9a5      	cbnz	r5, 800bc5c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bc32:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800bc36:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bc38:	b173      	cbz	r3, 800bc58 <UART_RxISR_16BIT_FIFOEN+0x44>
 800bc3a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d90a      	bls.n	800bc58 <UART_RxISR_16BIT_FIFOEN+0x44>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bc42:	6823      	ldr	r3, [r4, #0]
 800bc44:	689a      	ldr	r2, [r3, #8]
 800bc46:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bc4a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bc4c:	4a18      	ldr	r2, [pc, #96]	; (800bcb0 <UART_RxISR_16BIT_FIFOEN+0x9c>)
 800bc4e:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	f042 0220 	orr.w	r2, r2, #32
 800bc56:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc5c:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 800bc5e:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc60:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800bc62:	4031      	ands	r1, r6
 800bc64:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 800bc68:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800bc6a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800bc6e:	3a01      	subs	r2, #1
 800bc70:	b292      	uxth	r2, r2
 800bc72:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800bc76:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800bc7a:	b292      	uxth	r2, r2
 800bc7c:	b962      	cbnz	r2, 800bc98 <UART_RxISR_16BIT_FIFOEN+0x84>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc7e:	6819      	ldr	r1, [r3, #0]
        HAL_UART_RxCpltCallback(huart);
 800bc80:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc82:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800bc86:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc88:	6899      	ldr	r1, [r3, #8]
 800bc8a:	4039      	ands	r1, r7
 800bc8c:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800bc8e:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 800bc92:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800bc94:	f7f8 fc0c 	bl	80044b0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bc98:	3d01      	subs	r5, #1
 800bc9a:	b2ad      	uxth	r5, r5
 800bc9c:	e7c8      	b.n	800bc30 <UART_RxISR_16BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bc9e:	6802      	ldr	r2, [r0, #0]
 800bca0:	6993      	ldr	r3, [r2, #24]
 800bca2:	f043 0308 	orr.w	r3, r3, #8
 800bca6:	6193      	str	r3, [r2, #24]
}
 800bca8:	e7d6      	b.n	800bc58 <UART_RxISR_16BIT_FIFOEN+0x44>
 800bcaa:	bf00      	nop
 800bcac:	effffffe 	.word	0xeffffffe
 800bcb0:	0800bb17 	.word	0x0800bb17

0800bcb4 <UART_DMAReceiveCplt>:
{
 800bcb4:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bcb6:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcb8:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bcba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcbe:	d012      	beq.n	800bce6 <UART_DMAReceiveCplt+0x32>
    huart->RxXferCount = 0U;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcc6:	6813      	ldr	r3, [r2, #0]
 800bcc8:	6819      	ldr	r1, [r3, #0]
 800bcca:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800bcce:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcd0:	6899      	ldr	r1, [r3, #8]
 800bcd2:	f021 0101 	bic.w	r1, r1, #1
 800bcd6:	6099      	str	r1, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcd8:	6899      	ldr	r1, [r3, #8]
 800bcda:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800bcde:	6099      	str	r1, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800bce0:	2320      	movs	r3, #32
 800bce2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  HAL_UART_RxCpltCallback(huart);
 800bce6:	4610      	mov	r0, r2
 800bce8:	f7f8 fbe2 	bl	80044b0 <HAL_UART_RxCpltCallback>
}
 800bcec:	bd08      	pop	{r3, pc}

0800bcee <HAL_UART_RxHalfCpltCallback>:
 800bcee:	4770      	bx	lr

0800bcf0 <UART_DMARxHalfCplt>:
{
 800bcf0:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800bcf2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800bcf4:	f7ff fffb 	bl	800bcee <HAL_UART_RxHalfCpltCallback>
}
 800bcf8:	bd08      	pop	{r3, pc}

0800bcfa <HAL_UART_ErrorCallback>:
 800bcfa:	4770      	bx	lr

0800bcfc <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcfc:	6b81      	ldr	r1, [r0, #56]	; 0x38
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bcfe:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bd00:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bd04:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
{
 800bd08:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bd0a:	689c      	ldr	r4, [r3, #8]
 800bd0c:	0624      	lsls	r4, r4, #24
 800bd0e:	d50f      	bpl.n	800bd30 <UART_DMAError+0x34>
 800bd10:	2a21      	cmp	r2, #33	; 0x21
 800bd12:	d10d      	bne.n	800bd30 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
 800bd14:	2200      	movs	r2, #0
 800bd16:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bd20:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bd22:	689a      	ldr	r2, [r3, #8]
 800bd24:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bd28:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 800bd2a:	2220      	movs	r2, #32
 800bd2c:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bd30:	689b      	ldr	r3, [r3, #8]
 800bd32:	065b      	lsls	r3, r3, #25
 800bd34:	d507      	bpl.n	800bd46 <UART_DMAError+0x4a>
 800bd36:	2822      	cmp	r0, #34	; 0x22
 800bd38:	d105      	bne.n	800bd46 <UART_DMAError+0x4a>
    huart->RxXferCount = 0U;
 800bd3a:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 800bd3c:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 800bd3e:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bd42:	f7ff fd48 	bl	800b7d6 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bd46:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
  HAL_UART_ErrorCallback(huart);
 800bd4a:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bd4c:	f043 0310 	orr.w	r3, r3, #16
 800bd50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  HAL_UART_ErrorCallback(huart);
 800bd54:	f7ff ffd1 	bl	800bcfa <HAL_UART_ErrorCallback>
}
 800bd58:	bd10      	pop	{r4, pc}
	...

0800bd5c <UART_SetConfig>:
{
 800bd5c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800bd60:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd62:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd64:	69c0      	ldr	r0, [r0, #28]
{
 800bd66:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd68:	6921      	ldr	r1, [r4, #16]
 800bd6a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd6c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd6e:	430a      	orrs	r2, r1
 800bd70:	6961      	ldr	r1, [r4, #20]
 800bd72:	430a      	orrs	r2, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 800bd74:	6e61      	ldr	r1, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd76:	4302      	orrs	r2, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 800bd78:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd7a:	49a8      	ldr	r1, [pc, #672]	; (800c01c <UART_SetConfig+0x2c0>)
 800bd7c:	4029      	ands	r1, r5
 800bd7e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd80:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd82:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd84:	685a      	ldr	r2, [r3, #4]
 800bd86:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800bd8a:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bd8c:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd8e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bd90:	4aa3      	ldr	r2, [pc, #652]	; (800c020 <UART_SetConfig+0x2c4>)
 800bd92:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800bd94:	bf1c      	itt	ne
 800bd96:	6a22      	ldrne	r2, [r4, #32]
 800bd98:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bd9a:	689a      	ldr	r2, [r3, #8]
 800bd9c:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 800bda0:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800bda4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bda6:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bda8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bdaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdac:	f022 020f 	bic.w	r2, r2, #15
 800bdb0:	430a      	orrs	r2, r1
 800bdb2:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bdb4:	4a9b      	ldr	r2, [pc, #620]	; (800c024 <UART_SetConfig+0x2c8>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d11c      	bne.n	800bdf4 <UART_SetConfig+0x98>
 800bdba:	4b9b      	ldr	r3, [pc, #620]	; (800c028 <UART_SetConfig+0x2cc>)
 800bdbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bdc2:	2b28      	cmp	r3, #40	; 0x28
 800bdc4:	d86c      	bhi.n	800bea0 <UART_SetConfig+0x144>
 800bdc6:	4a99      	ldr	r2, [pc, #612]	; (800c02c <UART_SetConfig+0x2d0>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bdc8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800bdcc:	5cd3      	ldrb	r3, [r2, r3]
 800bdce:	f040 8104 	bne.w	800bfda <UART_SetConfig+0x27e>
    switch (clocksource)
 800bdd2:	2b08      	cmp	r3, #8
 800bdd4:	f000 80fa 	beq.w	800bfcc <UART_SetConfig+0x270>
 800bdd8:	f200 80c3 	bhi.w	800bf62 <UART_SetConfig+0x206>
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	f000 80f2 	beq.w	800bfc6 <UART_SetConfig+0x26a>
 800bde2:	f0c0 80eb 	bcc.w	800bfbc <UART_SetConfig+0x260>
 800bde6:	2b04      	cmp	r3, #4
 800bde8:	d15a      	bne.n	800bea0 <UART_SetConfig+0x144>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdea:	4668      	mov	r0, sp
 800bdec:	f7fd fe74 	bl	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bdf0:	9801      	ldr	r0, [sp, #4]
        break;
 800bdf2:	e0e5      	b.n	800bfc0 <UART_SetConfig+0x264>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bdf4:	4a8e      	ldr	r2, [pc, #568]	; (800c030 <UART_SetConfig+0x2d4>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d107      	bne.n	800be0a <UART_SetConfig+0xae>
 800bdfa:	4b8b      	ldr	r3, [pc, #556]	; (800c028 <UART_SetConfig+0x2cc>)
 800bdfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdfe:	f003 0307 	and.w	r3, r3, #7
 800be02:	2b05      	cmp	r3, #5
 800be04:	d84c      	bhi.n	800bea0 <UART_SetConfig+0x144>
 800be06:	4a8b      	ldr	r2, [pc, #556]	; (800c034 <UART_SetConfig+0x2d8>)
 800be08:	e7de      	b.n	800bdc8 <UART_SetConfig+0x6c>
 800be0a:	4a8b      	ldr	r2, [pc, #556]	; (800c038 <UART_SetConfig+0x2dc>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d107      	bne.n	800be20 <UART_SetConfig+0xc4>
 800be10:	4b85      	ldr	r3, [pc, #532]	; (800c028 <UART_SetConfig+0x2cc>)
 800be12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be14:	f003 0307 	and.w	r3, r3, #7
 800be18:	2b05      	cmp	r3, #5
 800be1a:	d841      	bhi.n	800bea0 <UART_SetConfig+0x144>
 800be1c:	4a87      	ldr	r2, [pc, #540]	; (800c03c <UART_SetConfig+0x2e0>)
 800be1e:	e7d3      	b.n	800bdc8 <UART_SetConfig+0x6c>
 800be20:	4a87      	ldr	r2, [pc, #540]	; (800c040 <UART_SetConfig+0x2e4>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d107      	bne.n	800be36 <UART_SetConfig+0xda>
 800be26:	4b80      	ldr	r3, [pc, #512]	; (800c028 <UART_SetConfig+0x2cc>)
 800be28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be2a:	f003 0307 	and.w	r3, r3, #7
 800be2e:	2b05      	cmp	r3, #5
 800be30:	d836      	bhi.n	800bea0 <UART_SetConfig+0x144>
 800be32:	4a84      	ldr	r2, [pc, #528]	; (800c044 <UART_SetConfig+0x2e8>)
 800be34:	e7c8      	b.n	800bdc8 <UART_SetConfig+0x6c>
 800be36:	4a84      	ldr	r2, [pc, #528]	; (800c048 <UART_SetConfig+0x2ec>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d107      	bne.n	800be4c <UART_SetConfig+0xf0>
 800be3c:	4b7a      	ldr	r3, [pc, #488]	; (800c028 <UART_SetConfig+0x2cc>)
 800be3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be40:	f003 0307 	and.w	r3, r3, #7
 800be44:	2b05      	cmp	r3, #5
 800be46:	d82b      	bhi.n	800bea0 <UART_SetConfig+0x144>
 800be48:	4a80      	ldr	r2, [pc, #512]	; (800c04c <UART_SetConfig+0x2f0>)
 800be4a:	e7bd      	b.n	800bdc8 <UART_SetConfig+0x6c>
 800be4c:	4a80      	ldr	r2, [pc, #512]	; (800c050 <UART_SetConfig+0x2f4>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d107      	bne.n	800be62 <UART_SetConfig+0x106>
 800be52:	4b75      	ldr	r3, [pc, #468]	; (800c028 <UART_SetConfig+0x2cc>)
 800be54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be5a:	2b28      	cmp	r3, #40	; 0x28
 800be5c:	d820      	bhi.n	800bea0 <UART_SetConfig+0x144>
 800be5e:	4a7d      	ldr	r2, [pc, #500]	; (800c054 <UART_SetConfig+0x2f8>)
 800be60:	e7b2      	b.n	800bdc8 <UART_SetConfig+0x6c>
 800be62:	4a7d      	ldr	r2, [pc, #500]	; (800c058 <UART_SetConfig+0x2fc>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d107      	bne.n	800be78 <UART_SetConfig+0x11c>
 800be68:	4b6f      	ldr	r3, [pc, #444]	; (800c028 <UART_SetConfig+0x2cc>)
 800be6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be6c:	f003 0307 	and.w	r3, r3, #7
 800be70:	2b05      	cmp	r3, #5
 800be72:	d815      	bhi.n	800bea0 <UART_SetConfig+0x144>
 800be74:	4a79      	ldr	r2, [pc, #484]	; (800c05c <UART_SetConfig+0x300>)
 800be76:	e7a7      	b.n	800bdc8 <UART_SetConfig+0x6c>
 800be78:	4a79      	ldr	r2, [pc, #484]	; (800c060 <UART_SetConfig+0x304>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d107      	bne.n	800be8e <UART_SetConfig+0x132>
 800be7e:	4b6a      	ldr	r3, [pc, #424]	; (800c028 <UART_SetConfig+0x2cc>)
 800be80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be82:	f003 0307 	and.w	r3, r3, #7
 800be86:	2b05      	cmp	r3, #5
 800be88:	d80a      	bhi.n	800bea0 <UART_SetConfig+0x144>
 800be8a:	4a76      	ldr	r2, [pc, #472]	; (800c064 <UART_SetConfig+0x308>)
 800be8c:	e79c      	b.n	800bdc8 <UART_SetConfig+0x6c>
 800be8e:	4a64      	ldr	r2, [pc, #400]	; (800c020 <UART_SetConfig+0x2c4>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d105      	bne.n	800bea0 <UART_SetConfig+0x144>
 800be94:	4b64      	ldr	r3, [pc, #400]	; (800c028 <UART_SetConfig+0x2cc>)
 800be96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be98:	f003 0307 	and.w	r3, r3, #7
 800be9c:	2b05      	cmp	r3, #5
 800be9e:	d901      	bls.n	800bea4 <UART_SetConfig+0x148>
        ret = HAL_ERROR;
 800bea0:	2001      	movs	r0, #1
 800bea2:	e04b      	b.n	800bf3c <UART_SetConfig+0x1e0>
    switch (clocksource)
 800bea4:	4a70      	ldr	r2, [pc, #448]	; (800c068 <UART_SetConfig+0x30c>)
 800bea6:	5cd3      	ldrb	r3, [r2, r3]
 800bea8:	2b08      	cmp	r3, #8
 800beaa:	d050      	beq.n	800bf4e <UART_SetConfig+0x1f2>
 800beac:	d808      	bhi.n	800bec0 <UART_SetConfig+0x164>
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d03f      	beq.n	800bf32 <UART_SetConfig+0x1d6>
 800beb2:	2b04      	cmp	r3, #4
 800beb4:	d1f4      	bne.n	800bea0 <UART_SetConfig+0x144>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800beb6:	4668      	mov	r0, sp
 800beb8:	f7fd fe0e 	bl	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bebc:	9801      	ldr	r0, [sp, #4]
        break;
 800bebe:	e03a      	b.n	800bf36 <UART_SetConfig+0x1da>
    switch (clocksource)
 800bec0:	2b20      	cmp	r3, #32
 800bec2:	d04c      	beq.n	800bf5e <UART_SetConfig+0x202>
 800bec4:	2b40      	cmp	r3, #64	; 0x40
 800bec6:	d047      	beq.n	800bf58 <UART_SetConfig+0x1fc>
 800bec8:	2b10      	cmp	r3, #16
 800beca:	d1e9      	bne.n	800bea0 <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800becc:	4b56      	ldr	r3, [pc, #344]	; (800c028 <UART_SetConfig+0x2cc>)
 800bece:	4867      	ldr	r0, [pc, #412]	; (800c06c <UART_SetConfig+0x310>)
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	f012 0f20 	tst.w	r2, #32
 800bed6:	d003      	beq.n	800bee0 <UART_SetConfig+0x184>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bede:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bee0:	4b63      	ldr	r3, [pc, #396]	; (800c070 <UART_SetConfig+0x314>)
 800bee2:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bee4:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bee6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800beea:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800beee:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bef2:	4299      	cmp	r1, r3
 800bef4:	d8d4      	bhi.n	800bea0 <UART_SetConfig+0x144>
 800bef6:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800befa:	d8d1      	bhi.n	800bea0 <UART_SetConfig+0x144>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800befc:	2300      	movs	r3, #0
 800befe:	2100      	movs	r1, #0
 800bf00:	f7f4 fa46 	bl	8000390 <__aeabi_uldivmod>
 800bf04:	462a      	mov	r2, r5
 800bf06:	020f      	lsls	r7, r1, #8
 800bf08:	2300      	movs	r3, #0
 800bf0a:	0206      	lsls	r6, r0, #8
 800bf0c:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800bf10:	0868      	lsrs	r0, r5, #1
 800bf12:	eb16 0b00 	adds.w	fp, r6, r0
 800bf16:	f147 0c00 	adc.w	ip, r7, #0
 800bf1a:	4658      	mov	r0, fp
 800bf1c:	4661      	mov	r1, ip
 800bf1e:	f7f4 fa37 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bf22:	4b54      	ldr	r3, [pc, #336]	; (800c074 <UART_SetConfig+0x318>)
 800bf24:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d8b9      	bhi.n	800bea0 <UART_SetConfig+0x144>
          huart->Instance->BRR = usartdiv;
 800bf2c:	6823      	ldr	r3, [r4, #0]
 800bf2e:	60d8      	str	r0, [r3, #12]
 800bf30:	e003      	b.n	800bf3a <UART_SetConfig+0x1de>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bf32:	f7fd fdbf 	bl	8009ab4 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800bf36:	2800      	cmp	r0, #0
 800bf38:	d1d2      	bne.n	800bee0 <UART_SetConfig+0x184>
 800bf3a:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800bf42:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800bf46:	6723      	str	r3, [r4, #112]	; 0x70
}
 800bf48:	b006      	add	sp, #24
 800bf4a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf4e:	a803      	add	r0, sp, #12
 800bf50:	f7fd fe68 	bl	8009c24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bf54:	9804      	ldr	r0, [sp, #16]
        break;
 800bf56:	e7ee      	b.n	800bf36 <UART_SetConfig+0x1da>
        pclk = (uint32_t) LSE_VALUE;
 800bf58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bf5c:	e7c0      	b.n	800bee0 <UART_SetConfig+0x184>
        pclk = (uint32_t) CSI_VALUE;
 800bf5e:	4846      	ldr	r0, [pc, #280]	; (800c078 <UART_SetConfig+0x31c>)
 800bf60:	e7be      	b.n	800bee0 <UART_SetConfig+0x184>
    switch (clocksource)
 800bf62:	2b20      	cmp	r3, #32
 800bf64:	d037      	beq.n	800bfd6 <UART_SetConfig+0x27a>
 800bf66:	2b40      	cmp	r3, #64	; 0x40
 800bf68:	d00b      	beq.n	800bf82 <UART_SetConfig+0x226>
 800bf6a:	2b10      	cmp	r3, #16
 800bf6c:	d198      	bne.n	800bea0 <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf6e:	4b2e      	ldr	r3, [pc, #184]	; (800c028 <UART_SetConfig+0x2cc>)
 800bf70:	483e      	ldr	r0, [pc, #248]	; (800c06c <UART_SetConfig+0x310>)
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	f012 0f20 	tst.w	r2, #32
 800bf78:	d003      	beq.n	800bf82 <UART_SetConfig+0x226>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bf80:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf82:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bf84:	4b3a      	ldr	r3, [pc, #232]	; (800c070 <UART_SetConfig+0x314>)
 800bf86:	6862      	ldr	r2, [r4, #4]
 800bf88:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800bf8c:	fbb0 f0f3 	udiv	r0, r0, r3
 800bf90:	0853      	lsrs	r3, r2, #1
 800bf92:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800bf96:	fbb0 f0f2 	udiv	r0, r0, r2
 800bf9a:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf9c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800bfa0:	f1a3 0110 	sub.w	r1, r3, #16
 800bfa4:	4291      	cmp	r1, r2
 800bfa6:	f63f af7b 	bhi.w	800bea0 <UART_SetConfig+0x144>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bfaa:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfae:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800bfb2:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bfb4:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 800bfb6:	4318      	orrs	r0, r3
 800bfb8:	60d0      	str	r0, [r2, #12]
 800bfba:	e7be      	b.n	800bf3a <UART_SetConfig+0x1de>
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfbc:	f7fc ffde 	bl	8008f7c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	d0ba      	beq.n	800bf3a <UART_SetConfig+0x1de>
 800bfc4:	e7dd      	b.n	800bf82 <UART_SetConfig+0x226>
        pclk = HAL_RCC_GetPCLK2Freq();
 800bfc6:	f7fc ffeb 	bl	8008fa0 <HAL_RCC_GetPCLK2Freq>
        break;
 800bfca:	e7f9      	b.n	800bfc0 <UART_SetConfig+0x264>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfcc:	a803      	add	r0, sp, #12
 800bfce:	f7fd fe29 	bl	8009c24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bfd2:	9804      	ldr	r0, [sp, #16]
        break;
 800bfd4:	e7f4      	b.n	800bfc0 <UART_SetConfig+0x264>
        pclk = (uint32_t) CSI_VALUE;
 800bfd6:	4828      	ldr	r0, [pc, #160]	; (800c078 <UART_SetConfig+0x31c>)
 800bfd8:	e7d3      	b.n	800bf82 <UART_SetConfig+0x226>
    switch (clocksource)
 800bfda:	2b08      	cmp	r3, #8
 800bfdc:	d06a      	beq.n	800c0b4 <UART_SetConfig+0x358>
 800bfde:	d80a      	bhi.n	800bff6 <UART_SetConfig+0x29a>
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d064      	beq.n	800c0ae <UART_SetConfig+0x352>
 800bfe4:	d35d      	bcc.n	800c0a2 <UART_SetConfig+0x346>
 800bfe6:	2b04      	cmp	r3, #4
 800bfe8:	f47f af5a 	bne.w	800bea0 <UART_SetConfig+0x144>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfec:	4668      	mov	r0, sp
 800bfee:	f7fd fd73 	bl	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bff2:	9801      	ldr	r0, [sp, #4]
        break;
 800bff4:	e057      	b.n	800c0a6 <UART_SetConfig+0x34a>
    switch (clocksource)
 800bff6:	2b20      	cmp	r3, #32
 800bff8:	d061      	beq.n	800c0be <UART_SetConfig+0x362>
 800bffa:	2b40      	cmp	r3, #64	; 0x40
 800bffc:	d03e      	beq.n	800c07c <UART_SetConfig+0x320>
 800bffe:	2b10      	cmp	r3, #16
 800c000:	f47f af4e 	bne.w	800bea0 <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c004:	4b08      	ldr	r3, [pc, #32]	; (800c028 <UART_SetConfig+0x2cc>)
 800c006:	4819      	ldr	r0, [pc, #100]	; (800c06c <UART_SetConfig+0x310>)
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	f012 0f20 	tst.w	r2, #32
 800c00e:	d037      	beq.n	800c080 <UART_SetConfig+0x324>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c016:	40d8      	lsrs	r0, r3
 800c018:	e032      	b.n	800c080 <UART_SetConfig+0x324>
 800c01a:	bf00      	nop
 800c01c:	cfff69f3 	.word	0xcfff69f3
 800c020:	58000c00 	.word	0x58000c00
 800c024:	40011000 	.word	0x40011000
 800c028:	58024400 	.word	0x58024400
 800c02c:	080167dc 	.word	0x080167dc
 800c030:	40004400 	.word	0x40004400
 800c034:	08016805 	.word	0x08016805
 800c038:	40004800 	.word	0x40004800
 800c03c:	08016805 	.word	0x08016805
 800c040:	40004c00 	.word	0x40004c00
 800c044:	08016805 	.word	0x08016805
 800c048:	40005000 	.word	0x40005000
 800c04c:	08016805 	.word	0x08016805
 800c050:	40011400 	.word	0x40011400
 800c054:	080167dc 	.word	0x080167dc
 800c058:	40007800 	.word	0x40007800
 800c05c:	08016805 	.word	0x08016805
 800c060:	40007c00 	.word	0x40007c00
 800c064:	08016805 	.word	0x08016805
 800c068:	0801680b 	.word	0x0801680b
 800c06c:	03d09000 	.word	0x03d09000
 800c070:	08016812 	.word	0x08016812
 800c074:	000ffcff 	.word	0x000ffcff
 800c078:	003d0900 	.word	0x003d0900
        pclk = (uint32_t) LSE_VALUE;
 800c07c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c080:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c082:	4a10      	ldr	r2, [pc, #64]	; (800c0c4 <UART_SetConfig+0x368>)
 800c084:	6863      	ldr	r3, [r4, #4]
 800c086:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800c08a:	fbb0 f0f2 	udiv	r0, r0, r2
 800c08e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c092:	fbb0 f0f3 	udiv	r0, r0, r3
 800c096:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c098:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800c09c:	f1a0 0210 	sub.w	r2, r0, #16
 800c0a0:	e742      	b.n	800bf28 <UART_SetConfig+0x1cc>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0a2:	f7fc ff6b 	bl	8008f7c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	f43f af47 	beq.w	800bf3a <UART_SetConfig+0x1de>
 800c0ac:	e7e8      	b.n	800c080 <UART_SetConfig+0x324>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0ae:	f7fc ff77 	bl	8008fa0 <HAL_RCC_GetPCLK2Freq>
        break;
 800c0b2:	e7f8      	b.n	800c0a6 <UART_SetConfig+0x34a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0b4:	a803      	add	r0, sp, #12
 800c0b6:	f7fd fdb5 	bl	8009c24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c0ba:	9804      	ldr	r0, [sp, #16]
        break;
 800c0bc:	e7f3      	b.n	800c0a6 <UART_SetConfig+0x34a>
        pclk = (uint32_t) CSI_VALUE;
 800c0be:	4802      	ldr	r0, [pc, #8]	; (800c0c8 <UART_SetConfig+0x36c>)
 800c0c0:	e7de      	b.n	800c080 <UART_SetConfig+0x324>
 800c0c2:	bf00      	nop
 800c0c4:	08016812 	.word	0x08016812
 800c0c8:	003d0900 	.word	0x003d0900

0800c0cc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c0cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c0ce:	07da      	lsls	r2, r3, #31
{
 800c0d0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c0d2:	d506      	bpl.n	800c0e2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c0d4:	6801      	ldr	r1, [r0, #0]
 800c0d6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800c0d8:	684a      	ldr	r2, [r1, #4]
 800c0da:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c0de:	4322      	orrs	r2, r4
 800c0e0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c0e2:	079c      	lsls	r4, r3, #30
 800c0e4:	d506      	bpl.n	800c0f4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c0e6:	6801      	ldr	r1, [r0, #0]
 800c0e8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800c0ea:	684a      	ldr	r2, [r1, #4]
 800c0ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c0f0:	4322      	orrs	r2, r4
 800c0f2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c0f4:	0759      	lsls	r1, r3, #29
 800c0f6:	d506      	bpl.n	800c106 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c0f8:	6801      	ldr	r1, [r0, #0]
 800c0fa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c0fc:	684a      	ldr	r2, [r1, #4]
 800c0fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c102:	4322      	orrs	r2, r4
 800c104:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c106:	071a      	lsls	r2, r3, #28
 800c108:	d506      	bpl.n	800c118 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c10a:	6801      	ldr	r1, [r0, #0]
 800c10c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800c10e:	684a      	ldr	r2, [r1, #4]
 800c110:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c114:	4322      	orrs	r2, r4
 800c116:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c118:	06dc      	lsls	r4, r3, #27
 800c11a:	d506      	bpl.n	800c12a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c11c:	6801      	ldr	r1, [r0, #0]
 800c11e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c120:	688a      	ldr	r2, [r1, #8]
 800c122:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c126:	4322      	orrs	r2, r4
 800c128:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c12a:	0699      	lsls	r1, r3, #26
 800c12c:	d506      	bpl.n	800c13c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c12e:	6801      	ldr	r1, [r0, #0]
 800c130:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c132:	688a      	ldr	r2, [r1, #8]
 800c134:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c138:	4322      	orrs	r2, r4
 800c13a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c13c:	065a      	lsls	r2, r3, #25
 800c13e:	d510      	bpl.n	800c162 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c140:	6801      	ldr	r1, [r0, #0]
 800c142:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800c144:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c146:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c14a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c14e:	ea42 0204 	orr.w	r2, r2, r4
 800c152:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c154:	d105      	bne.n	800c162 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c156:	684a      	ldr	r2, [r1, #4]
 800c158:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800c15a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800c15e:	4322      	orrs	r2, r4
 800c160:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c162:	061b      	lsls	r3, r3, #24
 800c164:	d506      	bpl.n	800c174 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c166:	6802      	ldr	r2, [r0, #0]
 800c168:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800c16a:	6853      	ldr	r3, [r2, #4]
 800c16c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c170:	430b      	orrs	r3, r1
 800c172:	6053      	str	r3, [r2, #4]
}
 800c174:	bd10      	pop	{r4, pc}

0800c176 <UART_WaitOnFlagUntilTimeout>:
{
 800c176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c17a:	9d06      	ldr	r5, [sp, #24]
 800c17c:	4604      	mov	r4, r0
 800c17e:	460f      	mov	r7, r1
 800c180:	4616      	mov	r6, r2
 800c182:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c184:	6821      	ldr	r1, [r4, #0]
 800c186:	69ca      	ldr	r2, [r1, #28]
 800c188:	ea37 0302 	bics.w	r3, r7, r2
 800c18c:	bf0c      	ite	eq
 800c18e:	2201      	moveq	r2, #1
 800c190:	2200      	movne	r2, #0
 800c192:	42b2      	cmp	r2, r6
 800c194:	d001      	beq.n	800c19a <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800c196:	2000      	movs	r0, #0
 800c198:	e01a      	b.n	800c1d0 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800c19a:	1c68      	adds	r0, r5, #1
 800c19c:	d0f3      	beq.n	800c186 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c19e:	f7f9 fc1d 	bl	80059dc <HAL_GetTick>
 800c1a2:	eba0 0008 	sub.w	r0, r0, r8
 800c1a6:	42a8      	cmp	r0, r5
 800c1a8:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c1aa:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1ac:	d800      	bhi.n	800c1b0 <UART_WaitOnFlagUntilTimeout+0x3a>
 800c1ae:	b98d      	cbnz	r5, 800c1d4 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c1b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c1b4:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1b6:	6883      	ldr	r3, [r0, #8]
 800c1b8:	f023 0301 	bic.w	r3, r3, #1
 800c1bc:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800c1be:	2320      	movs	r3, #32
 800c1c0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c1c4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800c1c8:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800c1ca:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800c1cc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 800c1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c1d4:	075a      	lsls	r2, r3, #29
 800c1d6:	d5d5      	bpl.n	800c184 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c1d8:	69c3      	ldr	r3, [r0, #28]
 800c1da:	051b      	lsls	r3, r3, #20
 800c1dc:	d5d2      	bpl.n	800c184 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c1e2:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c1e4:	6803      	ldr	r3, [r0, #0]
 800c1e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c1ea:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1ec:	6883      	ldr	r3, [r0, #8]
 800c1ee:	f023 0301 	bic.w	r3, r3, #1
 800c1f2:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800c1f4:	2320      	movs	r3, #32
 800c1f6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c1fa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1fe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800c202:	e7e1      	b.n	800c1c8 <UART_WaitOnFlagUntilTimeout+0x52>

0800c204 <HAL_UART_Transmit>:
{
 800c204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c208:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800c20a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 800c20e:	4604      	mov	r4, r0
 800c210:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800c212:	2b20      	cmp	r3, #32
{
 800c214:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800c216:	d14f      	bne.n	800c2b8 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 800c218:	2900      	cmp	r1, #0
 800c21a:	d04b      	beq.n	800c2b4 <HAL_UART_Transmit+0xb0>
 800c21c:	2a00      	cmp	r2, #0
 800c21e:	d049      	beq.n	800c2b4 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 800c220:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800c224:	2b01      	cmp	r3, #1
 800c226:	d047      	beq.n	800c2b8 <HAL_UART_Transmit+0xb4>
 800c228:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c22a:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800c22c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c230:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c232:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c236:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 800c23a:	f7f9 fbcf 	bl	80059dc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c23e:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800c240:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800c242:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800c24a:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c24e:	d103      	bne.n	800c258 <HAL_UART_Transmit+0x54>
 800c250:	6923      	ldr	r3, [r4, #16]
 800c252:	b90b      	cbnz	r3, 800c258 <HAL_UART_Transmit+0x54>
 800c254:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800c256:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 800c258:	2300      	movs	r3, #0
 800c25a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 800c25e:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c262:	463b      	mov	r3, r7
 800c264:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800c268:	b292      	uxth	r2, r2
 800c26a:	b942      	cbnz	r2, 800c27e <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c26c:	2140      	movs	r1, #64	; 0x40
 800c26e:	4620      	mov	r0, r4
 800c270:	f7ff ff81 	bl	800c176 <UART_WaitOnFlagUntilTimeout>
 800c274:	b948      	cbnz	r0, 800c28a <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 800c276:	2320      	movs	r3, #32
 800c278:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 800c27c:	e006      	b.n	800c28c <HAL_UART_Transmit+0x88>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c27e:	2200      	movs	r2, #0
 800c280:	2180      	movs	r1, #128	; 0x80
 800c282:	4620      	mov	r0, r4
 800c284:	f7ff ff77 	bl	800c176 <UART_WaitOnFlagUntilTimeout>
 800c288:	b118      	cbz	r0, 800c292 <HAL_UART_Transmit+0x8e>
        return HAL_TIMEOUT;
 800c28a:	2003      	movs	r0, #3
}
 800c28c:	b003      	add	sp, #12
 800c28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c292:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800c294:	b95e      	cbnz	r6, 800c2ae <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c296:	f835 3b02 	ldrh.w	r3, [r5], #2
 800c29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c29e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800c2a0:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800c2a4:	3b01      	subs	r3, #1
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800c2ac:	e7d7      	b.n	800c25e <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c2ae:	f816 3b01 	ldrb.w	r3, [r6], #1
 800c2b2:	e7f4      	b.n	800c29e <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 800c2b4:	2001      	movs	r0, #1
 800c2b6:	e7e9      	b.n	800c28c <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 800c2b8:	2002      	movs	r0, #2
 800c2ba:	e7e7      	b.n	800c28c <HAL_UART_Transmit+0x88>

0800c2bc <UART_CheckIdleState>:
{
 800c2bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2be:	2600      	movs	r6, #0
{
 800c2c0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2c2:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 800c2c6:	f7f9 fb89 	bl	80059dc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2ca:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c2cc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	071a      	lsls	r2, r3, #28
 800c2d2:	d417      	bmi.n	800c304 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	075b      	lsls	r3, r3, #29
 800c2da:	d50a      	bpl.n	800c2f2 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	9300      	str	r3, [sp, #0]
 800c2ea:	462b      	mov	r3, r5
 800c2ec:	f7ff ff43 	bl	800c176 <UART_WaitOnFlagUntilTimeout>
 800c2f0:	b9a0      	cbnz	r0, 800c31c <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 800c2f2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800c2f4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800c2f6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800c2fa:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c2fe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 800c302:	e00c      	b.n	800c31e <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c308:	4632      	mov	r2, r6
 800c30a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	4603      	mov	r3, r0
 800c312:	4620      	mov	r0, r4
 800c314:	f7ff ff2f 	bl	800c176 <UART_WaitOnFlagUntilTimeout>
 800c318:	2800      	cmp	r0, #0
 800c31a:	d0db      	beq.n	800c2d4 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800c31c:	2003      	movs	r0, #3
}
 800c31e:	b002      	add	sp, #8
 800c320:	bd70      	pop	{r4, r5, r6, pc}

0800c322 <HAL_UART_Init>:
{
 800c322:	b510      	push	{r4, lr}
  if (huart == NULL)
 800c324:	4604      	mov	r4, r0
 800c326:	b350      	cbz	r0, 800c37e <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800c328:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800c32c:	b91b      	cbnz	r3, 800c336 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800c32e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 800c332:	f7f6 fe75 	bl	8003020 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800c336:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c338:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c33a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800c33c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 800c340:	6813      	ldr	r3, [r2, #0]
 800c342:	f023 0301 	bic.w	r3, r3, #1
 800c346:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c348:	f7ff fd08 	bl	800bd5c <UART_SetConfig>
 800c34c:	2801      	cmp	r0, #1
 800c34e:	d016      	beq.n	800c37e <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c350:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c352:	b113      	cbz	r3, 800c35a <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 800c354:	4620      	mov	r0, r4
 800c356:	f7ff feb9 	bl	800c0cc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c35a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800c35c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c35e:	685a      	ldr	r2, [r3, #4]
 800c360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c364:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c366:	689a      	ldr	r2, [r3, #8]
 800c368:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c36c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	f042 0201 	orr.w	r2, r2, #1
}
 800c374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800c378:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800c37a:	f7ff bf9f 	b.w	800c2bc <UART_CheckIdleState>
}
 800c37e:	2001      	movs	r0, #1
 800c380:	bd10      	pop	{r4, pc}
	...

0800c384 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c384:	b084      	sub	sp, #16
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c386:	f240 1307 	movw	r3, #263	; 0x107
 800c38a:	4a17      	ldr	r2, [pc, #92]	; (800c3e8 <UARTEx_SetNbDataToProcess+0x64>)
 800c38c:	e9cd 2300 	strd	r2, r3, [sp]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c390:	4b16      	ldr	r3, [pc, #88]	; (800c3ec <UARTEx_SetNbDataToProcess+0x68>)
 800c392:	9302      	str	r3, [sp, #8]
 800c394:	f1a3 2303 	sub.w	r3, r3, #50332416	; 0x3000300
 800c398:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800c39c:	9303      	str	r3, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c39e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800c3a0:	b923      	cbnz	r3, 800c3ac <UARTEx_SetNbDataToProcess+0x28>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 800c3a2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800c3a6:	6683      	str	r3, [r0, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c3a8:	b004      	add	sp, #16
 800c3aa:	4770      	bx	lr
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c3ac:	6802      	ldr	r2, [r0, #0]
 800c3ae:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c3b0:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c3b2:	aa04      	add	r2, sp, #16
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c3b4:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c3b8:	eb02 7151 	add.w	r1, r2, r1, lsr #29
 800c3bc:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800c3c0:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 800c3c4:	0112      	lsls	r2, r2, #4
 800c3c6:	fb92 f2f1 	sdiv	r2, r2, r1
 800c3ca:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c3ce:	aa04      	add	r2, sp, #16
 800c3d0:	4413      	add	r3, r2
 800c3d2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800c3d6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800c3da:	0112      	lsls	r2, r2, #4
 800c3dc:	fb92 f3f3 	sdiv	r3, r2, r3
 800c3e0:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 800c3e4:	e7e0      	b.n	800c3a8 <UARTEx_SetNbDataToProcess+0x24>
 800c3e6:	bf00      	nop
 800c3e8:	03010101 	.word	0x03010101
 800c3ec:	04020408 	.word	0x04020408

0800c3f0 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800c3f0:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d014      	beq.n	800c422 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3f8:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c3fa:	2324      	movs	r3, #36	; 0x24
 800c3fc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c400:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800c402:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c404:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800c408:	f023 0301 	bic.w	r3, r3, #1
 800c40c:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c40e:	2300      	movs	r3, #0
 800c410:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c412:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c414:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800c416:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_READY;
 800c41a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return HAL_OK;
 800c41e:	4618      	mov	r0, r3
 800c420:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c422:	2002      	movs	r0, #2
}
 800c424:	4770      	bx	lr

0800c426 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800c426:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800c428:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 800c42c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800c42e:	2b01      	cmp	r3, #1
 800c430:	d01b      	beq.n	800c46a <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800c432:	2301      	movs	r3, #1
 800c434:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800c438:	2324      	movs	r3, #36	; 0x24
 800c43a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c43e:	6803      	ldr	r3, [r0, #0]
 800c440:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	f022 0201 	bic.w	r2, r2, #1
 800c448:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c44a:	689a      	ldr	r2, [r3, #8]
 800c44c:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800c450:	4311      	orrs	r1, r2
 800c452:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c454:	f7ff ff96 	bl	800c384 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c458:	6803      	ldr	r3, [r0, #0]
 800c45a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c45c:	2320      	movs	r3, #32
 800c45e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800c462:	2000      	movs	r0, #0
 800c464:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800c468:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800c46a:	2002      	movs	r0, #2
 800c46c:	e7fc      	b.n	800c468 <HAL_UARTEx_SetTxFifoThreshold+0x42>

0800c46e <HAL_UARTEx_SetRxFifoThreshold>:
{
 800c46e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800c470:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 800c474:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800c476:	2b01      	cmp	r3, #1
 800c478:	d01b      	beq.n	800c4b2 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800c47a:	2301      	movs	r3, #1
 800c47c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800c480:	2324      	movs	r3, #36	; 0x24
 800c482:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c486:	6803      	ldr	r3, [r0, #0]
 800c488:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	f022 0201 	bic.w	r2, r2, #1
 800c490:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c492:	689a      	ldr	r2, [r3, #8]
 800c494:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800c498:	4311      	orrs	r1, r2
 800c49a:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c49c:	f7ff ff72 	bl	800c384 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4a0:	6803      	ldr	r3, [r0, #0]
 800c4a2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c4a4:	2320      	movs	r3, #32
 800c4a6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800c4b0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800c4b2:	2002      	movs	r0, #2
 800c4b4:	e7fc      	b.n	800c4b0 <HAL_UARTEx_SetRxFifoThreshold+0x42>
	...

0800c4b8 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4b8:	4b12      	ldr	r3, [pc, #72]	; (800c504 <SDMMC_GetCmdResp2+0x4c>)
 800c4ba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	fbb3 f2f2 	udiv	r2, r3, r2
 800c4c4:	f241 3388 	movw	r3, #5000	; 0x1388
 800c4c8:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800c4ca:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c4ce:	d315      	bcc.n	800c4fc <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800c4d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c4d2:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c4d6:	d0f8      	beq.n	800c4ca <SDMMC_GetCmdResp2+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4d8:	0492      	lsls	r2, r2, #18
 800c4da:	d4f6      	bmi.n	800c4ca <SDMMC_GetCmdResp2+0x12>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c4de:	075b      	lsls	r3, r3, #29
 800c4e0:	d503      	bpl.n	800c4ea <SDMMC_GetCmdResp2+0x32>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4e2:	2304      	movs	r3, #4

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c4e4:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c4ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c4ec:	f013 0301 	ands.w	r3, r3, #1
 800c4f0:	d001      	beq.n	800c4f6 <SDMMC_GetCmdResp2+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	e7f6      	b.n	800c4e4 <SDMMC_GetCmdResp2+0x2c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4f6:	4a04      	ldr	r2, [pc, #16]	; (800c508 <SDMMC_GetCmdResp2+0x50>)
 800c4f8:	6382      	str	r2, [r0, #56]	; 0x38
 800c4fa:	e7f4      	b.n	800c4e6 <SDMMC_GetCmdResp2+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800c4fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c500:	e7f1      	b.n	800c4e6 <SDMMC_GetCmdResp2+0x2e>
 800c502:	bf00      	nop
 800c504:	24000000 	.word	0x24000000
 800c508:	002000c5 	.word	0x002000c5

0800c50c <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c50c:	4b0f      	ldr	r3, [pc, #60]	; (800c54c <SDMMC_GetCmdResp3+0x40>)
 800c50e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	fbb3 f2f2 	udiv	r2, r3, r2
 800c518:	f241 3388 	movw	r3, #5000	; 0x1388
 800c51c:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800c51e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c522:	d310      	bcc.n	800c546 <SDMMC_GetCmdResp3+0x3a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800c524:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c526:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c52a:	d0f8      	beq.n	800c51e <SDMMC_GetCmdResp3+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c52c:	0492      	lsls	r2, r2, #18
 800c52e:	d4f6      	bmi.n	800c51e <SDMMC_GetCmdResp3+0x12>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c530:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c532:	f013 0304 	ands.w	r3, r3, #4
 800c536:	d003      	beq.n	800c540 <SDMMC_GetCmdResp3+0x34>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c538:	2304      	movs	r3, #4
 800c53a:	6383      	str	r3, [r0, #56]	; 0x38
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
 800c53c:	4618      	mov	r0, r3
 800c53e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c540:	4a03      	ldr	r2, [pc, #12]	; (800c550 <SDMMC_GetCmdResp3+0x44>)
 800c542:	6382      	str	r2, [r0, #56]	; 0x38
 800c544:	e7fa      	b.n	800c53c <SDMMC_GetCmdResp3+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c546:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c54a:	4770      	bx	lr
 800c54c:	24000000 	.word	0x24000000
 800c550:	002000c5 	.word	0x002000c5

0800c554 <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c554:	4b44      	ldr	r3, [pc, #272]	; (800c668 <SDMMC_GetCmdResp1+0x114>)
{
 800c556:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 800c55e:	fbb3 f3f4 	udiv	r3, r3, r4
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c562:	4c42      	ldr	r4, [pc, #264]	; (800c66c <SDMMC_GetCmdResp1+0x118>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c564:	435a      	muls	r2, r3
    if (count-- == 0U)
 800c566:	2a00      	cmp	r2, #0
 800c568:	d049      	beq.n	800c5fe <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 800c56a:	6b43      	ldr	r3, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c56c:	4223      	tst	r3, r4
 800c56e:	d008      	beq.n	800c582 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c570:	049b      	lsls	r3, r3, #18
 800c572:	d406      	bmi.n	800c582 <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c574:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c576:	075b      	lsls	r3, r3, #29
 800c578:	d505      	bpl.n	800c586 <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c57a:	2304      	movs	r3, #4
 800c57c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c57e:	4618      	mov	r0, r3
}
 800c580:	bd10      	pop	{r4, pc}
 800c582:	3a01      	subs	r2, #1
 800c584:	e7ef      	b.n	800c566 <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c586:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c588:	07dc      	lsls	r4, r3, #31
 800c58a:	d503      	bpl.n	800c594 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c58c:	2301      	movs	r3, #1
 800c58e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c590:	2001      	movs	r0, #1
 800c592:	e7f5      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c594:	4b36      	ldr	r3, [pc, #216]	; (800c670 <SDMMC_GetCmdResp1+0x11c>)
 800c596:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c598:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	4299      	cmp	r1, r3
 800c59e:	d1f7      	bne.n	800c590 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 800c5a0:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c5a2:	4834      	ldr	r0, [pc, #208]	; (800c674 <SDMMC_GetCmdResp1+0x120>)
 800c5a4:	4018      	ands	r0, r3
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d0ea      	beq.n	800c580 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	db2a      	blt.n	800c604 <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c5ae:	005a      	lsls	r2, r3, #1
 800c5b0:	d42b      	bmi.n	800c60a <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c5b2:	009c      	lsls	r4, r3, #2
 800c5b4:	d42b      	bmi.n	800c60e <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c5b6:	00d9      	lsls	r1, r3, #3
 800c5b8:	d42b      	bmi.n	800c612 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c5ba:	011a      	lsls	r2, r3, #4
 800c5bc:	d42c      	bmi.n	800c618 <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c5be:	015c      	lsls	r4, r3, #5
 800c5c0:	d42d      	bmi.n	800c61e <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c5c2:	01d9      	lsls	r1, r3, #7
 800c5c4:	d42e      	bmi.n	800c624 <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c5c6:	021a      	lsls	r2, r3, #8
 800c5c8:	d42f      	bmi.n	800c62a <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c5ca:	025c      	lsls	r4, r3, #9
 800c5cc:	d430      	bmi.n	800c630 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c5ce:	0299      	lsls	r1, r3, #10
 800c5d0:	d431      	bmi.n	800c636 <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c5d2:	02da      	lsls	r2, r3, #11
 800c5d4:	d432      	bmi.n	800c63c <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c5d6:	035c      	lsls	r4, r3, #13
 800c5d8:	d433      	bmi.n	800c642 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c5da:	0399      	lsls	r1, r3, #14
 800c5dc:	d434      	bmi.n	800c648 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c5de:	03da      	lsls	r2, r3, #15
 800c5e0:	d435      	bmi.n	800c64e <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c5e2:	041c      	lsls	r4, r3, #16
 800c5e4:	d436      	bmi.n	800c654 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c5e6:	0459      	lsls	r1, r3, #17
 800c5e8:	d437      	bmi.n	800c65a <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c5ea:	049a      	lsls	r2, r3, #18
 800c5ec:	d438      	bmi.n	800c660 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c5ee:	f013 0f08 	tst.w	r3, #8
 800c5f2:	bf0c      	ite	eq
 800c5f4:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c5f8:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c5fc:	e7c0      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800c5fe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c602:	e7bd      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c604:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c608:	e7ba      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c60a:	2040      	movs	r0, #64	; 0x40
 800c60c:	e7b8      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c60e:	2080      	movs	r0, #128	; 0x80
 800c610:	e7b6      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c612:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c616:	e7b3      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c618:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c61c:	e7b0      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c61e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c622:	e7ad      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c624:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c628:	e7aa      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c62a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c62e:	e7a7      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c630:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c634:	e7a4      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c636:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c63a:	e7a1      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 800c63c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c640:	e79e      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c642:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c646:	e79b      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c648:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c64c:	e798      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c64e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c652:	e795      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c654:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c658:	e792      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c65a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c65e:	e78f      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 800c660:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800c664:	e78c      	b.n	800c580 <SDMMC_GetCmdResp1+0x2c>
 800c666:	bf00      	nop
 800c668:	24000000 	.word	0x24000000
 800c66c:	00200045 	.word	0x00200045
 800c670:	002000c5 	.word	0x002000c5
 800c674:	fdffe008 	.word	0xfdffe008

0800c678 <SDMMC_Init>:
{
 800c678:	b084      	sub	sp, #16
 800c67a:	b510      	push	{r4, lr}
 800c67c:	ac03      	add	r4, sp, #12
 800c67e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800c682:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c686:	6841      	ldr	r1, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 800c688:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 800c68a:	9a05      	ldr	r2, [sp, #20]
 800c68c:	4313      	orrs	r3, r2
             Init.BusWide             |\
 800c68e:	9a06      	ldr	r2, [sp, #24]
 800c690:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 800c692:	9a07      	ldr	r2, [sp, #28]
 800c694:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c696:	4a04      	ldr	r2, [pc, #16]	; (800c6a8 <SDMMC_Init+0x30>)
 800c698:	400a      	ands	r2, r1
}
 800c69a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c69e:	4313      	orrs	r3, r2
}
 800c6a0:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c6a2:	6043      	str	r3, [r0, #4]
}
 800c6a4:	2000      	movs	r0, #0
 800c6a6:	4770      	bx	lr
 800c6a8:	ffc02c00 	.word	0xffc02c00

0800c6ac <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800c6ac:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800c6b0:	4770      	bx	lr

0800c6b2 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800c6b2:	680b      	ldr	r3, [r1, #0]
 800c6b4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	4770      	bx	lr

0800c6bc <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c6bc:	6803      	ldr	r3, [r0, #0]
 800c6be:	f043 0303 	orr.w	r3, r3, #3
 800c6c2:	6003      	str	r3, [r0, #0]
}
 800c6c4:	2000      	movs	r0, #0
 800c6c6:	4770      	bx	lr

0800c6c8 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c6c8:	6800      	ldr	r0, [r0, #0]
}
 800c6ca:	f000 0003 	and.w	r0, r0, #3
 800c6ce:	4770      	bx	lr

0800c6d0 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800c6d0:	680b      	ldr	r3, [r1, #0]
{
 800c6d2:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 800c6d4:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c6d6:	68c4      	ldr	r4, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6d8:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 800c6dc:	4313      	orrs	r3, r2
                       Command->Response         |\
 800c6de:	68ca      	ldr	r2, [r1, #12]
 800c6e0:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800c6e2:	690a      	ldr	r2, [r1, #16]
 800c6e4:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c6e6:	4a03      	ldr	r2, [pc, #12]	; (800c6f4 <SDMMC_SendCommand+0x24>)
 800c6e8:	4022      	ands	r2, r4
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	60c3      	str	r3, [r0, #12]
}
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	bd10      	pop	{r4, pc}
 800c6f2:	bf00      	nop
 800c6f4:	fffee0c0 	.word	0xfffee0c0

0800c6f8 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c6f8:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800c6fa:	5840      	ldr	r0, [r0, r1]
}
 800c6fc:	4770      	bx	lr

0800c6fe <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c6fe:	680b      	ldr	r3, [r1, #0]
{
 800c700:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c702:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800c704:	684b      	ldr	r3, [r1, #4]
 800c706:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c708:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c70a:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c70e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c712:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 800c714:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 800c716:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 800c718:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800c71a:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c71c:	4313      	orrs	r3, r2
 800c71e:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800c720:	2000      	movs	r0, #0
 800c722:	bd10      	pop	{r4, pc}

0800c724 <SDMMC_CmdBlockLength>:
{
 800c724:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c726:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c72a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c72c:	2410      	movs	r4, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c72e:	2200      	movs	r2, #0
{
 800c730:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c732:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c734:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c736:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c73a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c73e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c742:	f7ff ffc5 	bl	800c6d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c746:	f241 3288 	movw	r2, #5000	; 0x1388
 800c74a:	4621      	mov	r1, r4
 800c74c:	4628      	mov	r0, r5
 800c74e:	f7ff ff01 	bl	800c554 <SDMMC_GetCmdResp1>
}
 800c752:	b007      	add	sp, #28
 800c754:	bd30      	pop	{r4, r5, pc}

0800c756 <SDMMC_CmdReadSingleBlock>:
{
 800c756:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c758:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c75c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c75e:	2411      	movs	r4, #17
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c760:	2200      	movs	r2, #0
{
 800c762:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c764:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c766:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c768:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c76c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c770:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c774:	f7ff ffac 	bl	800c6d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c778:	f241 3288 	movw	r2, #5000	; 0x1388
 800c77c:	4621      	mov	r1, r4
 800c77e:	4628      	mov	r0, r5
 800c780:	f7ff fee8 	bl	800c554 <SDMMC_GetCmdResp1>
}
 800c784:	b007      	add	sp, #28
 800c786:	bd30      	pop	{r4, r5, pc}

0800c788 <SDMMC_CmdReadMultiBlock>:
{
 800c788:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c78a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c78e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c790:	2412      	movs	r4, #18
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c792:	2200      	movs	r2, #0
{
 800c794:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c796:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c798:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c79a:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c79e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7a6:	f7ff ff93 	bl	800c6d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c7aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	f7ff fecf 	bl	800c554 <SDMMC_GetCmdResp1>
}
 800c7b6:	b007      	add	sp, #28
 800c7b8:	bd30      	pop	{r4, r5, pc}

0800c7ba <SDMMC_CmdWriteSingleBlock>:
{
 800c7ba:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7bc:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c7c0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7c2:	2418      	movs	r4, #24
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7c4:	2200      	movs	r2, #0
{
 800c7c6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c7c8:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7ca:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7cc:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7d8:	f7ff ff7a 	bl	800c6d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c7dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	f7ff feb6 	bl	800c554 <SDMMC_GetCmdResp1>
}
 800c7e8:	b007      	add	sp, #28
 800c7ea:	bd30      	pop	{r4, r5, pc}

0800c7ec <SDMMC_CmdWriteMultiBlock>:
{
 800c7ec:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7ee:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c7f2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7f4:	2419      	movs	r4, #25
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7f6:	2200      	movs	r2, #0
{
 800c7f8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c7fa:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7fc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7fe:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c806:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c80a:	f7ff ff61 	bl	800c6d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c80e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c812:	4621      	mov	r1, r4
 800c814:	4628      	mov	r0, r5
 800c816:	f7ff fe9d 	bl	800c554 <SDMMC_GetCmdResp1>
}
 800c81a:	b007      	add	sp, #28
 800c81c:	bd30      	pop	{r4, r5, pc}
	...

0800c820 <SDMMC_CmdStopTransfer>:
{
 800c820:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c822:	2300      	movs	r3, #0
{
 800c824:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c826:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c828:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800c82c:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c82e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c830:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c834:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c83c:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c83e:	68c3      	ldr	r3, [r0, #12]
 800c840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c844:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c846:	68c3      	ldr	r3, [r0, #12]
 800c848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c84c:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c84e:	f7ff ff3f 	bl	800c6d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c852:	4a07      	ldr	r2, [pc, #28]	; (800c870 <SDMMC_CmdStopTransfer+0x50>)
 800c854:	4629      	mov	r1, r5
 800c856:	4620      	mov	r0, r4
 800c858:	f7ff fe7c 	bl	800c554 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c85c:	68e3      	ldr	r3, [r4, #12]
}
 800c85e:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800c862:	bf08      	it	eq
 800c864:	2000      	moveq	r0, #0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c86a:	60e3      	str	r3, [r4, #12]
}
 800c86c:	b007      	add	sp, #28
 800c86e:	bd30      	pop	{r4, r5, pc}
 800c870:	05f5e100 	.word	0x05f5e100

0800c874 <SDMMC_CmdSelDesel>:
{
 800c874:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c876:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c87a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c87c:	2407      	movs	r4, #7
{
 800c87e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c880:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c882:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c884:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c886:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c88a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c88e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c892:	f7ff ff1d 	bl	800c6d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c896:	f241 3288 	movw	r2, #5000	; 0x1388
 800c89a:	4621      	mov	r1, r4
 800c89c:	4628      	mov	r0, r5
 800c89e:	f7ff fe59 	bl	800c554 <SDMMC_GetCmdResp1>
}
 800c8a2:	b007      	add	sp, #28
 800c8a4:	bd30      	pop	{r4, r5, pc}
	...

0800c8a8 <SDMMC_CmdGoIdleState>:
{
 800c8a8:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 800c8aa:	2300      	movs	r3, #0
{
 800c8ac:	b086      	sub	sp, #24
 800c8ae:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8b0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c8b2:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8b6:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c8be:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8c0:	f7ff ff06 	bl	800c6d0 <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c8c4:	4b0b      	ldr	r3, [pc, #44]	; (800c8f4 <SDMMC_CmdGoIdleState+0x4c>)
 800c8c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	fbb3 f2f2 	udiv	r2, r3, r2
 800c8d0:	f241 3388 	movw	r3, #5000	; 0x1388
 800c8d4:	4353      	muls	r3, r2
    if (count-- == 0U)
 800c8d6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c8da:	d307      	bcc.n	800c8ec <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c8dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c8de:	0612      	lsls	r2, r2, #24
 800c8e0:	d5f9      	bpl.n	800c8d6 <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c8e2:	4b05      	ldr	r3, [pc, #20]	; (800c8f8 <SDMMC_CmdGoIdleState+0x50>)
  return SDMMC_ERROR_NONE;
 800c8e4:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c8e6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800c8e8:	b006      	add	sp, #24
 800c8ea:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800c8ec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800c8f0:	e7fa      	b.n	800c8e8 <SDMMC_CmdGoIdleState+0x40>
 800c8f2:	bf00      	nop
 800c8f4:	24000000 	.word	0x24000000
 800c8f8:	002000c5 	.word	0x002000c5

0800c8fc <SDMMC_CmdOperCond>:
{
 800c8fc:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c8fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
{
 800c902:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c904:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c906:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 800c90a:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c90c:	e9cd 1301 	strd	r1, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c910:	2300      	movs	r3, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c912:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c914:	e9cd c303 	strd	ip, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c91c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c91e:	f7ff fed7 	bl	800c6d0 <SDMMC_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c922:	4b15      	ldr	r3, [pc, #84]	; (800c978 <SDMMC_CmdOperCond+0x7c>)
 800c924:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c92e:	f241 3388 	movw	r3, #5000	; 0x1388
 800c932:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800c934:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c938:	d31a      	bcc.n	800c970 <SDMMC_CmdOperCond+0x74>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800c93a:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c93c:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c940:	d0f8      	beq.n	800c934 <SDMMC_CmdOperCond+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c942:	0492      	lsls	r2, r2, #18
 800c944:	d4f6      	bmi.n	800c934 <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c946:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c948:	075b      	lsls	r3, r3, #29
 800c94a:	d503      	bpl.n	800c954 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c94c:	2004      	movs	r0, #4
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c94e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800c950:	b006      	add	sp, #24
 800c952:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c954:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c956:	f012 0201 	ands.w	r2, r2, #1
 800c95a:	d001      	beq.n	800c960 <SDMMC_CmdOperCond+0x64>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c95c:	2001      	movs	r0, #1
 800c95e:	e7f6      	b.n	800c94e <SDMMC_CmdOperCond+0x52>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c960:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800c962:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800c966:	d0f3      	beq.n	800c950 <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c968:	2340      	movs	r3, #64	; 0x40
  }

  return SDMMC_ERROR_NONE;
 800c96a:	4610      	mov	r0, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c96c:	63a3      	str	r3, [r4, #56]	; 0x38
 800c96e:	e7ef      	b.n	800c950 <SDMMC_CmdOperCond+0x54>
      return SDMMC_ERROR_TIMEOUT;
 800c970:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c974:	e7ec      	b.n	800c950 <SDMMC_CmdOperCond+0x54>
 800c976:	bf00      	nop
 800c978:	24000000 	.word	0x24000000

0800c97c <SDMMC_CmdAppCommand>:
{
 800c97c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c97e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c982:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c984:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c986:	2200      	movs	r2, #0
{
 800c988:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c98a:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c98c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c98e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c996:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c99a:	f7ff fe99 	bl	800c6d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c99e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9a2:	4621      	mov	r1, r4
 800c9a4:	4628      	mov	r0, r5
 800c9a6:	f7ff fdd5 	bl	800c554 <SDMMC_GetCmdResp1>
}
 800c9aa:	b007      	add	sp, #28
 800c9ac:	bd30      	pop	{r4, r5, pc}

0800c9ae <SDMMC_CmdAppOperCommand>:
{
 800c9ae:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9b0:	2229      	movs	r2, #41	; 0x29
{
 800c9b2:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9b4:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c9b8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800c9ba:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9bc:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9be:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c9c6:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9ca:	a901      	add	r1, sp, #4
 800c9cc:	f7ff fe80 	bl	800c6d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f7ff fd9b 	bl	800c50c <SDMMC_GetCmdResp3>
}
 800c9d6:	b006      	add	sp, #24
 800c9d8:	bd10      	pop	{r4, pc}

0800c9da <SDMMC_CmdBusWidth>:
{
 800c9da:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9dc:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c9e0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9e2:	2406      	movs	r4, #6
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9e4:	2200      	movs	r2, #0
{
 800c9e6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c9e8:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9ea:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9ec:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c9f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9f8:	f7ff fe6a 	bl	800c6d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c9fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca00:	4621      	mov	r1, r4
 800ca02:	4628      	mov	r0, r5
 800ca04:	f7ff fda6 	bl	800c554 <SDMMC_GetCmdResp1>
}
 800ca08:	b007      	add	sp, #28
 800ca0a:	bd30      	pop	{r4, r5, pc}

0800ca0c <SDMMC_CmdSendSCR>:
{
 800ca0c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ca0e:	2300      	movs	r3, #0
{
 800ca10:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ca12:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca14:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800ca18:	4605      	mov	r5, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca1a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca1c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ca20:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca28:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca2a:	f7ff fe51 	bl	800c6d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ca2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca32:	4621      	mov	r1, r4
 800ca34:	4628      	mov	r0, r5
 800ca36:	f7ff fd8d 	bl	800c554 <SDMMC_GetCmdResp1>
}
 800ca3a:	b007      	add	sp, #28
 800ca3c:	bd30      	pop	{r4, r5, pc}

0800ca3e <SDMMC_CmdSendCID>:
{
 800ca3e:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ca40:	2300      	movs	r3, #0
{
 800ca42:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ca44:	2202      	movs	r2, #2
{
 800ca46:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca48:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ca4a:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ca4e:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca52:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca5a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca5c:	f7ff fe38 	bl	800c6d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ca60:	4620      	mov	r0, r4
 800ca62:	f7ff fd29 	bl	800c4b8 <SDMMC_GetCmdResp2>
}
 800ca66:	b006      	add	sp, #24
 800ca68:	bd10      	pop	{r4, pc}

0800ca6a <SDMMC_CmdSendCSD>:
{
 800ca6a:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ca6c:	2209      	movs	r2, #9
{
 800ca6e:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ca70:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 800ca74:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800ca76:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca78:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ca7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca82:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca86:	a901      	add	r1, sp, #4
 800ca88:	f7ff fe22 	bl	800c6d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f7ff fd13 	bl	800c4b8 <SDMMC_GetCmdResp2>
}
 800ca92:	b006      	add	sp, #24
 800ca94:	bd10      	pop	{r4, pc}
	...

0800ca98 <SDMMC_CmdSetRelAdd>:
{
 800ca98:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ca9a:	2300      	movs	r3, #0
{
 800ca9c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ca9e:	2203      	movs	r2, #3
{
 800caa0:	460d      	mov	r5, r1
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800caa2:	a901      	add	r1, sp, #4
{
 800caa4:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800caa6:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800caaa:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800caae:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cab6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cab8:	f7ff fe0a 	bl	800c6d0 <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cabc:	4b1e      	ldr	r3, [pc, #120]	; (800cb38 <SDMMC_CmdSetRelAdd+0xa0>)
 800cabe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	fbb3 f2f2 	udiv	r2, r3, r2
 800cac8:	f241 3388 	movw	r3, #5000	; 0x1388
 800cacc:	4353      	muls	r3, r2
    if (count-- == 0U)
 800cace:	f113 33ff 	adds.w	r3, r3, #4294967295
 800cad2:	d328      	bcc.n	800cb26 <SDMMC_CmdSetRelAdd+0x8e>
    sta_reg = SDMMCx->STA;
 800cad4:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cad6:	f012 0f45 	tst.w	r2, #69	; 0x45
 800cada:	d0f8      	beq.n	800cace <SDMMC_CmdSetRelAdd+0x36>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cadc:	0492      	lsls	r2, r2, #18
 800cade:	d4f6      	bmi.n	800cace <SDMMC_CmdSetRelAdd+0x36>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cae0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cae2:	0758      	lsls	r0, r3, #29
 800cae4:	d503      	bpl.n	800caee <SDMMC_CmdSetRelAdd+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cae6:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cae8:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800caea:	b007      	add	sp, #28
 800caec:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800caee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800caf0:	07d9      	lsls	r1, r3, #31
 800caf2:	d501      	bpl.n	800caf8 <SDMMC_CmdSetRelAdd+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800caf4:	2001      	movs	r0, #1
 800caf6:	e7f7      	b.n	800cae8 <SDMMC_CmdSetRelAdd+0x50>
  return (uint8_t)(SDMMCx->RESPCMD);
 800caf8:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	2b03      	cmp	r3, #3
 800cafe:	d115      	bne.n	800cb2c <SDMMC_CmdSetRelAdd+0x94>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cb00:	4b0e      	ldr	r3, [pc, #56]	; (800cb3c <SDMMC_CmdSetRelAdd+0xa4>)
 800cb02:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800cb04:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cb06:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800cb0a:	d102      	bne.n	800cb12 <SDMMC_CmdSetRelAdd+0x7a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cb0c:	0c1b      	lsrs	r3, r3, #16
 800cb0e:	802b      	strh	r3, [r5, #0]
 800cb10:	e7eb      	b.n	800caea <SDMMC_CmdSetRelAdd+0x52>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cb12:	045a      	lsls	r2, r3, #17
 800cb14:	d40c      	bmi.n	800cb30 <SDMMC_CmdSetRelAdd+0x98>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cb16:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800cb1a:	bf0c      	ite	eq
 800cb1c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800cb20:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800cb24:	e7e1      	b.n	800caea <SDMMC_CmdSetRelAdd+0x52>
      return SDMMC_ERROR_TIMEOUT;
 800cb26:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800cb2a:	e7de      	b.n	800caea <SDMMC_CmdSetRelAdd+0x52>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb2c:	2001      	movs	r0, #1
 800cb2e:	e7dc      	b.n	800caea <SDMMC_CmdSetRelAdd+0x52>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cb30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800cb34:	e7d9      	b.n	800caea <SDMMC_CmdSetRelAdd+0x52>
 800cb36:	bf00      	nop
 800cb38:	24000000 	.word	0x24000000
 800cb3c:	002000c5 	.word	0x002000c5

0800cb40 <SDMMC_CmdSendStatus>:
{
 800cb40:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb42:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800cb46:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb48:	240d      	movs	r4, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb4a:	2200      	movs	r2, #0
{
 800cb4c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 800cb4e:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb50:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb52:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb5e:	f7ff fdb7 	bl	800c6d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cb62:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb66:	4621      	mov	r1, r4
 800cb68:	4628      	mov	r0, r5
 800cb6a:	f7ff fcf3 	bl	800c554 <SDMMC_GetCmdResp1>
}
 800cb6e:	b007      	add	sp, #28
 800cb70:	bd30      	pop	{r4, r5, pc}

0800cb72 <SDMMC_CmdStatusRegister>:
{
 800cb72:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800cb74:	2300      	movs	r3, #0
{
 800cb76:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800cb78:	240d      	movs	r4, #13
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb7a:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800cb7e:	4605      	mov	r5, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb80:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb82:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800cb86:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb8e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb90:	f7ff fd9e 	bl	800c6d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800cb94:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb98:	4621      	mov	r1, r4
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	f7ff fcda 	bl	800c554 <SDMMC_GetCmdResp1>
}
 800cba0:	b007      	add	sp, #28
 800cba2:	bd30      	pop	{r4, r5, pc}

0800cba4 <SDMMC_CmdVoltageSwitch>:
{
 800cba4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800cba6:	2300      	movs	r3, #0
{
 800cba8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800cbaa:	240b      	movs	r4, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbac:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800cbb0:	4605      	mov	r5, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbb2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbb4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800cbb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbc0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbc2:	f7ff fd85 	bl	800c6d0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800cbc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbca:	4621      	mov	r1, r4
 800cbcc:	4628      	mov	r0, r5
 800cbce:	f7ff fcc1 	bl	800c554 <SDMMC_GetCmdResp1>
}
 800cbd2:	b007      	add	sp, #28
 800cbd4:	bd30      	pop	{r4, r5, pc}
	...

0800cbd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cbd8:	4b0a      	ldr	r3, [pc, #40]	; (800cc04 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	d00f      	beq.n	800cbfe <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cbde:	6902      	ldr	r2, [r0, #16]
 800cbe0:	2a00      	cmp	r2, #0
 800cbe2:	dafa      	bge.n	800cbda <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cbe4:	6903      	ldr	r3, [r0, #16]
 800cbe6:	4a07      	ldr	r2, [pc, #28]	; (800cc04 <USB_CoreReset+0x2c>)
 800cbe8:	f043 0301 	orr.w	r3, r3, #1
 800cbec:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800cbee:	3a01      	subs	r2, #1
 800cbf0:	d005      	beq.n	800cbfe <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cbf2:	6903      	ldr	r3, [r0, #16]
 800cbf4:	f013 0301 	ands.w	r3, r3, #1
 800cbf8:	d1f9      	bne.n	800cbee <USB_CoreReset+0x16>

  return HAL_OK;
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	4770      	bx	lr
      return HAL_TIMEOUT;
 800cbfe:	2003      	movs	r0, #3
}
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	00030d41 	.word	0x00030d41

0800cc08 <USB_CoreInit>:
{
 800cc08:	b084      	sub	sp, #16
 800cc0a:	b538      	push	{r3, r4, r5, lr}
 800cc0c:	ad05      	add	r5, sp, #20
 800cc0e:	4604      	mov	r4, r0
 800cc10:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cc14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d126      	bne.n	800cc68 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cc1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cc1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc20:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cc22:	68c3      	ldr	r3, [r0, #12]
 800cc24:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800cc28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc2c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cc2e:	68c3      	ldr	r3, [r0, #12]
 800cc30:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cc34:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800cc36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d103      	bne.n	800cc44 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cc3c:	68c3      	ldr	r3, [r0, #12]
 800cc3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc42:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800cc44:	4620      	mov	r0, r4
 800cc46:	f7ff ffc7 	bl	800cbd8 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800cc4a:	9b08      	ldr	r3, [sp, #32]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d107      	bne.n	800cc60 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cc50:	68a3      	ldr	r3, [r4, #8]
 800cc52:	f043 0306 	orr.w	r3, r3, #6
 800cc56:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cc58:	68a3      	ldr	r3, [r4, #8]
 800cc5a:	f043 0320 	orr.w	r3, r3, #32
 800cc5e:	60a3      	str	r3, [r4, #8]
}
 800cc60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc64:	b004      	add	sp, #16
 800cc66:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cc68:	68c3      	ldr	r3, [r0, #12]
 800cc6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc6e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800cc70:	f7ff ffb2 	bl	800cbd8 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800cc74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc76:	b923      	cbnz	r3, 800cc82 <USB_CoreInit+0x7a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cc78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cc7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cc7e:	63a3      	str	r3, [r4, #56]	; 0x38
 800cc80:	e7e3      	b.n	800cc4a <USB_CoreInit+0x42>
 800cc82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cc84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc88:	e7f9      	b.n	800cc7e <USB_CoreInit+0x76>
	...

0800cc8c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800cc8c:	2a02      	cmp	r2, #2
 800cc8e:	d158      	bne.n	800cd42 <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cc90:	4b2e      	ldr	r3, [pc, #184]	; (800cd4c <USB_SetTurnaroundTime+0xc0>)
 800cc92:	4a2f      	ldr	r2, [pc, #188]	; (800cd50 <USB_SetTurnaroundTime+0xc4>)
 800cc94:	440b      	add	r3, r1
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d947      	bls.n	800cd2a <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cc9a:	4b2e      	ldr	r3, [pc, #184]	; (800cd54 <USB_SetTurnaroundTime+0xc8>)
 800cc9c:	4a2e      	ldr	r2, [pc, #184]	; (800cd58 <USB_SetTurnaroundTime+0xcc>)
 800cc9e:	440b      	add	r3, r1
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d944      	bls.n	800cd2e <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cca4:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800cca8:	4a2c      	ldr	r2, [pc, #176]	; (800cd5c <USB_SetTurnaroundTime+0xd0>)
 800ccaa:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d93f      	bls.n	800cd32 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ccb2:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800ccb6:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 800ccba:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800ccbe:	32a0      	adds	r2, #160	; 0xa0
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d938      	bls.n	800cd36 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ccc4:	4b26      	ldr	r3, [pc, #152]	; (800cd60 <USB_SetTurnaroundTime+0xd4>)
 800ccc6:	4a27      	ldr	r2, [pc, #156]	; (800cd64 <USB_SetTurnaroundTime+0xd8>)
 800ccc8:	440b      	add	r3, r1
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d935      	bls.n	800cd3a <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ccce:	4b26      	ldr	r3, [pc, #152]	; (800cd68 <USB_SetTurnaroundTime+0xdc>)
 800ccd0:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 800ccd4:	440b      	add	r3, r1
 800ccd6:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d92f      	bls.n	800cd3e <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ccde:	4b23      	ldr	r3, [pc, #140]	; (800cd6c <USB_SetTurnaroundTime+0xe0>)
 800cce0:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 800cce4:	440b      	add	r3, r1
 800cce6:	f502 7220 	add.w	r2, r2, #640	; 0x280
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d929      	bls.n	800cd42 <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ccee:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800ccf2:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 800ccf6:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 800ccfa:	f502 7258 	add.w	r2, r2, #864	; 0x360
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d921      	bls.n	800cd46 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cd02:	4b1b      	ldr	r3, [pc, #108]	; (800cd70 <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 800cd04:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cd08:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 800cd0a:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	bf94      	ite	ls
 800cd12:	2307      	movls	r3, #7
 800cd14:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cd16:	68c2      	ldr	r2, [r0, #12]
 800cd18:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800cd1c:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cd1e:	68c2      	ldr	r2, [r0, #12]
 800cd20:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 800cd24:	60c3      	str	r3, [r0, #12]
}
 800cd26:	2000      	movs	r0, #0
 800cd28:	4770      	bx	lr
      UsbTrd = 0xFU;
 800cd2a:	230f      	movs	r3, #15
 800cd2c:	e7f3      	b.n	800cd16 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 800cd2e:	230e      	movs	r3, #14
 800cd30:	e7f1      	b.n	800cd16 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 800cd32:	230d      	movs	r3, #13
 800cd34:	e7ef      	b.n	800cd16 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 800cd36:	230c      	movs	r3, #12
 800cd38:	e7ed      	b.n	800cd16 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 800cd3a:	230b      	movs	r3, #11
 800cd3c:	e7eb      	b.n	800cd16 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 800cd3e:	230a      	movs	r3, #10
 800cd40:	e7e9      	b.n	800cd16 <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cd42:	2309      	movs	r3, #9
 800cd44:	e7e7      	b.n	800cd16 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 800cd46:	2308      	movs	r3, #8
 800cd48:	e7e5      	b.n	800cd16 <USB_SetTurnaroundTime+0x8a>
 800cd4a:	bf00      	nop
 800cd4c:	ff275340 	.word	0xff275340
 800cd50:	000c34ff 	.word	0x000c34ff
 800cd54:	ff1b1e40 	.word	0xff1b1e40
 800cd58:	000f423f 	.word	0x000f423f
 800cd5c:	00124f7f 	.word	0x00124f7f
 800cd60:	fee5b660 	.word	0xfee5b660
 800cd64:	0016e35f 	.word	0x0016e35f
 800cd68:	feced300 	.word	0xfeced300
 800cd6c:	feb35bc0 	.word	0xfeb35bc0
 800cd70:	fe5954e0 	.word	0xfe5954e0

0800cd74 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cd74:	6883      	ldr	r3, [r0, #8]
 800cd76:	f043 0301 	orr.w	r3, r3, #1
 800cd7a:	6083      	str	r3, [r0, #8]
}
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	4770      	bx	lr

0800cd80 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cd80:	6883      	ldr	r3, [r0, #8]
 800cd82:	f023 0301 	bic.w	r3, r3, #1
 800cd86:	6083      	str	r3, [r0, #8]
}
 800cd88:	2000      	movs	r0, #0
 800cd8a:	4770      	bx	lr

0800cd8c <USB_SetCurrentMode>:
{
 800cd8c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cd8e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800cd90:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cd92:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cd96:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800cd98:	d108      	bne.n	800cdac <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cd9a:	68c3      	ldr	r3, [r0, #12]
 800cd9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cda0:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800cda2:	2032      	movs	r0, #50	; 0x32
 800cda4:	f7f8 fe20 	bl	80059e8 <HAL_Delay>
  return HAL_OK;
 800cda8:	2000      	movs	r0, #0
}
 800cdaa:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800cdac:	b919      	cbnz	r1, 800cdb6 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cdae:	68c3      	ldr	r3, [r0, #12]
 800cdb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cdb4:	e7f4      	b.n	800cda0 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800cdb6:	2001      	movs	r0, #1
 800cdb8:	e7f7      	b.n	800cdaa <USB_SetCurrentMode+0x1e>
	...

0800cdbc <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cdbc:	0189      	lsls	r1, r1, #6
 800cdbe:	4a07      	ldr	r2, [pc, #28]	; (800cddc <USB_FlushTxFifo+0x20>)
 800cdc0:	f041 0120 	orr.w	r1, r1, #32
 800cdc4:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800cdc6:	3a01      	subs	r2, #1
 800cdc8:	d005      	beq.n	800cdd6 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cdca:	6903      	ldr	r3, [r0, #16]
 800cdcc:	f013 0320 	ands.w	r3, r3, #32
 800cdd0:	d1f9      	bne.n	800cdc6 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	4770      	bx	lr
      return HAL_TIMEOUT;
 800cdd6:	2003      	movs	r0, #3
}
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	00030d41 	.word	0x00030d41

0800cde0 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cde0:	2310      	movs	r3, #16
 800cde2:	4a06      	ldr	r2, [pc, #24]	; (800cdfc <USB_FlushRxFifo+0x1c>)
 800cde4:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800cde6:	3a01      	subs	r2, #1
 800cde8:	d005      	beq.n	800cdf6 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cdea:	6903      	ldr	r3, [r0, #16]
 800cdec:	f013 0310 	ands.w	r3, r3, #16
 800cdf0:	d1f9      	bne.n	800cde6 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	4770      	bx	lr
      return HAL_TIMEOUT;
 800cdf6:	2003      	movs	r0, #3
}
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	00030d41 	.word	0x00030d41

0800ce00 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800ce00:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800ce04:	4319      	orrs	r1, r3
 800ce06:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800ce0a:	2000      	movs	r0, #0
 800ce0c:	4770      	bx	lr
	...

0800ce10 <USB_DevInit>:
{
 800ce10:	b084      	sub	sp, #16
 800ce12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce16:	4604      	mov	r4, r0
 800ce18:	a809      	add	r0, sp, #36	; 0x24
 800ce1a:	460f      	mov	r7, r1
 800ce1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800ce20:	2300      	movs	r3, #0
 800ce22:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 800ce24:	4619      	mov	r1, r3
 800ce26:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 800ce2a:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 800ce2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800ce30:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800ce32:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800ce34:	d1f7      	bne.n	800ce26 <USB_DevInit+0x16>
 800ce36:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 800ce3a:	2d00      	cmp	r5, #0
 800ce3c:	d16c      	bne.n	800cf18 <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ce3e:	6873      	ldr	r3, [r6, #4]
 800ce40:	f043 0302 	orr.w	r3, r3, #2
 800ce44:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ce46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ce48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce4c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ce4e:	6823      	ldr	r3, [r4, #0]
 800ce50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce54:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ce56:	6823      	ldr	r3, [r4, #0]
 800ce58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce5c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ce64:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800ce68:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ce6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d159      	bne.n	800cf26 <USB_DevInit+0x116>
    if (cfg.speed == USBD_HS_SPEED)
 800ce72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce74:	2900      	cmp	r1, #0
 800ce76:	d154      	bne.n	800cf22 <USB_DevInit+0x112>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ce78:	4620      	mov	r0, r4
 800ce7a:	f7ff ffc1 	bl	800ce00 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ce7e:	2110      	movs	r1, #16
 800ce80:	4620      	mov	r0, r4
 800ce82:	f7ff ff9b 	bl	800cdbc <USB_FlushTxFifo>
 800ce86:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f7ff ffa9 	bl	800cde0 <USB_FlushRxFifo>
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	d14b      	bne.n	800cf2a <USB_DevInit+0x11a>
  HAL_StatusTypeDef ret = HAL_OK;
 800ce92:	1c08      	adds	r0, r1, #0
 800ce94:	bf18      	it	ne
 800ce96:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ce9e:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cea2:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800cea6:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cea8:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 800ceac:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ceae:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ceb0:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ceb2:	42bb      	cmp	r3, r7
 800ceb4:	d13b      	bne.n	800cf2e <USB_DevInit+0x11e>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ceb6:	2100      	movs	r1, #0
 800ceb8:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cebc:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cec0:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cec4:	460f      	mov	r7, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cec6:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ceca:	428b      	cmp	r3, r1
 800cecc:	d142      	bne.n	800cf54 <USB_DevInit+0x144>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cece:	6933      	ldr	r3, [r6, #16]
 800ced0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ced4:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800ced6:	2300      	movs	r3, #0
 800ced8:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ceda:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800cede:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800cee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cee2:	b91b      	cbnz	r3, 800ceec <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cee4:	69a3      	ldr	r3, [r4, #24]
 800cee6:	f043 0310 	orr.w	r3, r3, #16
 800ceea:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ceec:	69a2      	ldr	r2, [r4, #24]
 800ceee:	4b23      	ldr	r3, [pc, #140]	; (800cf7c <USB_DevInit+0x16c>)
 800cef0:	4313      	orrs	r3, r2
 800cef2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800cef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cef6:	b11b      	cbz	r3, 800cf00 <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cef8:	69a3      	ldr	r3, [r4, #24]
 800cefa:	f043 0308 	orr.w	r3, r3, #8
 800cefe:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800cf00:	2d01      	cmp	r5, #1
 800cf02:	d105      	bne.n	800cf10 <USB_DevInit+0x100>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cf04:	69a3      	ldr	r3, [r4, #24]
 800cf06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf0a:	f043 0304 	orr.w	r3, r3, #4
 800cf0e:	61a3      	str	r3, [r4, #24]
}
 800cf10:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf14:	b004      	add	sp, #16
 800cf16:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cf18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cf1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf1e:	63a3      	str	r3, [r4, #56]	; 0x38
 800cf20:	e79d      	b.n	800ce5e <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cf22:	4619      	mov	r1, r3
 800cf24:	e7a8      	b.n	800ce78 <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cf26:	2103      	movs	r1, #3
 800cf28:	e7a6      	b.n	800ce78 <USB_DevInit+0x68>
    ret = HAL_ERROR;
 800cf2a:	2001      	movs	r0, #1
 800cf2c:	e7b4      	b.n	800ce98 <USB_DevInit+0x88>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cf2e:	f8d2 9000 	ldr.w	r9, [r2]
 800cf32:	f1b9 0f00 	cmp.w	r9, #0
 800cf36:	da0b      	bge.n	800cf50 <USB_DevInit+0x140>
      if (i == 0U)
 800cf38:	b93b      	cbnz	r3, 800cf4a <USB_DevInit+0x13a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cf3a:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cf3e:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf40:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cf42:	f8c2 8008 	str.w	r8, [r2, #8]
 800cf46:	3220      	adds	r2, #32
 800cf48:	e7b3      	b.n	800ceb2 <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cf4a:	f8c2 c000 	str.w	ip, [r2]
 800cf4e:	e7f6      	b.n	800cf3e <USB_DevInit+0x12e>
      USBx_INEP(i)->DIEPCTL = 0U;
 800cf50:	6011      	str	r1, [r2, #0]
 800cf52:	e7f4      	b.n	800cf3e <USB_DevInit+0x12e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cf54:	f8d2 9000 	ldr.w	r9, [r2]
 800cf58:	f1b9 0f00 	cmp.w	r9, #0
 800cf5c:	da0b      	bge.n	800cf76 <USB_DevInit+0x166>
      if (i == 0U)
 800cf5e:	b939      	cbnz	r1, 800cf70 <USB_DevInit+0x160>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cf60:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cf64:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf66:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cf68:	f8c2 8008 	str.w	r8, [r2, #8]
 800cf6c:	3220      	adds	r2, #32
 800cf6e:	e7ac      	b.n	800ceca <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cf70:	f8c2 c000 	str.w	ip, [r2]
 800cf74:	e7f6      	b.n	800cf64 <USB_DevInit+0x154>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cf76:	6017      	str	r7, [r2, #0]
 800cf78:	e7f4      	b.n	800cf64 <USB_DevInit+0x154>
 800cf7a:	bf00      	nop
 800cf7c:	803c3800 	.word	0x803c3800

0800cf80 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cf80:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cf84:	f013 0006 	ands.w	r0, r3, #6
 800cf88:	d004      	beq.n	800cf94 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cf8a:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 800cf8e:	bf14      	ite	ne
 800cf90:	2002      	movne	r0, #2
 800cf92:	200f      	moveq	r0, #15
}
 800cf94:	4770      	bx	lr

0800cf96 <USB_ActivateEndpoint>:
{
 800cf96:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800cf98:	780d      	ldrb	r5, [r1, #0]
 800cf9a:	2401      	movs	r4, #1
 800cf9c:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800cfa0:	f005 030f 	and.w	r3, r5, #15
 800cfa4:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 800cfa8:	409c      	lsls	r4, r3
  if (ep->is_in == 1U)
 800cfaa:	784b      	ldrb	r3, [r1, #1]
 800cfac:	2b01      	cmp	r3, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cfae:	69d3      	ldr	r3, [r2, #28]
  if (ep->is_in == 1U)
 800cfb0:	d118      	bne.n	800cfe4 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cfb2:	431c      	orrs	r4, r3
 800cfb4:	61d4      	str	r4, [r2, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cfb6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800cfba:	041a      	lsls	r2, r3, #16
 800cfbc:	d410      	bmi.n	800cfe0 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cfbe:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cfc0:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cfc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cfc6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800cfca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfd2:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800cfd6:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cfe4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800cfe8:	61d4      	str	r4, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cfea:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800cfee:	041b      	lsls	r3, r3, #16
 800cff0:	d4f6      	bmi.n	800cfe0 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cff2:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 800cff4:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cff6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cffa:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800cffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d006:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800d00a:	4313      	orrs	r3, r2
 800d00c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800d010:	e7e6      	b.n	800cfe0 <USB_ActivateEndpoint+0x4a>
	...

0800d014 <USB_DeactivateEndpoint>:
{
 800d014:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800d016:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800d018:	7849      	ldrb	r1, [r1, #1]
 800d01a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 800d01e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800d022:	2901      	cmp	r1, #1
 800d024:	f002 010f 	and.w	r1, r2, #15
 800d028:	d120      	bne.n	800d06c <USB_DeactivateEndpoint+0x58>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d02a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800d02e:	2a00      	cmp	r2, #0
 800d030:	da0b      	bge.n	800d04a <USB_DeactivateEndpoint+0x36>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d032:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800d036:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800d03a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d03e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800d042:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d046:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d04a:	2201      	movs	r2, #1
 800d04c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800d04e:	408a      	lsls	r2, r1
 800d050:	43d2      	mvns	r2, r2
 800d052:	4014      	ands	r4, r2
 800d054:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d056:	69c1      	ldr	r1, [r0, #28]
 800d058:	400a      	ands	r2, r1
 800d05a:	61c2      	str	r2, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d05c:	4a14      	ldr	r2, [pc, #80]	; (800d0b0 <USB_DeactivateEndpoint+0x9c>)
 800d05e:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800d062:	400a      	ands	r2, r1
 800d064:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 800d068:	2000      	movs	r0, #0
 800d06a:	bd10      	pop	{r4, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d06c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800d070:	2a00      	cmp	r2, #0
 800d072:	da0b      	bge.n	800d08c <USB_DeactivateEndpoint+0x78>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d074:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800d078:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800d07c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d080:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800d084:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d088:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d08c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d090:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800d092:	408a      	lsls	r2, r1
 800d094:	43d2      	mvns	r2, r2
 800d096:	4014      	ands	r4, r2
 800d098:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d09a:	69c1      	ldr	r1, [r0, #28]
 800d09c:	400a      	ands	r2, r1
 800d09e:	61c2      	str	r2, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d0a0:	4a04      	ldr	r2, [pc, #16]	; (800d0b4 <USB_DeactivateEndpoint+0xa0>)
 800d0a2:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800d0a6:	400a      	ands	r2, r1
 800d0a8:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800d0ac:	e7dc      	b.n	800d068 <USB_DeactivateEndpoint+0x54>
 800d0ae:	bf00      	nop
 800d0b0:	ec337800 	.word	0xec337800
 800d0b4:	eff37800 	.word	0xeff37800

0800d0b8 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 800d0b8:	784b      	ldrb	r3, [r1, #1]
{
 800d0ba:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	780c      	ldrb	r4, [r1, #0]
 800d0c0:	694d      	ldr	r5, [r1, #20]
 800d0c2:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800d0c6:	4e34      	ldr	r6, [pc, #208]	; (800d198 <USB_EP0StartXfer+0xe0>)
 800d0c8:	4f34      	ldr	r7, [pc, #208]	; (800d19c <USB_EP0StartXfer+0xe4>)
 800d0ca:	d144      	bne.n	800d156 <USB_EP0StartXfer+0x9e>
 800d0cc:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800d0d0:	b9b5      	cbnz	r5, 800d100 <USB_EP0StartXfer+0x48>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d0d2:	691d      	ldr	r5, [r3, #16]
 800d0d4:	402e      	ands	r6, r5
 800d0d6:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d0d8:	691d      	ldr	r5, [r3, #16]
 800d0da:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800d0de:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d0e0:	691d      	ldr	r5, [r3, #16]
 800d0e2:	402f      	ands	r7, r5
 800d0e4:	611f      	str	r7, [r3, #16]
    if (dma == 1U)
 800d0e6:	2a01      	cmp	r2, #1
 800d0e8:	d121      	bne.n	800d12e <USB_EP0StartXfer+0x76>
      if ((uint32_t)ep->dma_addr != 0U)
 800d0ea:	690a      	ldr	r2, [r1, #16]
 800d0ec:	b102      	cbz	r2, 800d0f0 <USB_EP0StartXfer+0x38>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d0ee:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d0f0:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800d0f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d0f8:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d100:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800d104:	ea0c 0707 	and.w	r7, ip, r7
 800d108:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d10a:	691f      	ldr	r7, [r3, #16]
 800d10c:	403e      	ands	r6, r7
 800d10e:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800d110:	688e      	ldr	r6, [r1, #8]
 800d112:	42ae      	cmp	r6, r5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d114:	691d      	ldr	r5, [r3, #16]
 800d116:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 800d11a:	bf38      	it	cc
 800d11c:	614e      	strcc	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d11e:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d120:	694d      	ldr	r5, [r1, #20]
 800d122:	691e      	ldr	r6, [r3, #16]
 800d124:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800d128:	4335      	orrs	r5, r6
 800d12a:	611d      	str	r5, [r3, #16]
 800d12c:	e7db      	b.n	800d0e6 <USB_EP0StartXfer+0x2e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d12e:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800d132:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d136:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800d13a:	694b      	ldr	r3, [r1, #20]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d0dd      	beq.n	800d0fc <USB_EP0StartXfer+0x44>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d140:	780b      	ldrb	r3, [r1, #0]
 800d142:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800d146:	f003 020f 	and.w	r2, r3, #15
 800d14a:	2301      	movs	r3, #1
 800d14c:	4093      	lsls	r3, r2
 800d14e:	4323      	orrs	r3, r4
 800d150:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800d154:	e7d2      	b.n	800d0fc <USB_EP0StartXfer+0x44>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d156:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800d15a:	6918      	ldr	r0, [r3, #16]
 800d15c:	4038      	ands	r0, r7
 800d15e:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d160:	6918      	ldr	r0, [r3, #16]
 800d162:	4030      	ands	r0, r6
 800d164:	6118      	str	r0, [r3, #16]
 800d166:	6888      	ldr	r0, [r1, #8]
    if (ep->xfer_len > 0U)
 800d168:	b105      	cbz	r5, 800d16c <USB_EP0StartXfer+0xb4>
      ep->xfer_len = ep->maxpacket;
 800d16a:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d16c:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d16e:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 800d172:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d174:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800d178:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d17a:	691d      	ldr	r5, [r3, #16]
 800d17c:	ea40 0005 	orr.w	r0, r0, r5
 800d180:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800d182:	d102      	bne.n	800d18a <USB_EP0StartXfer+0xd2>
      if ((uint32_t)ep->xfer_buff != 0U)
 800d184:	68ca      	ldr	r2, [r1, #12]
 800d186:	b102      	cbz	r2, 800d18a <USB_EP0StartXfer+0xd2>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d188:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d18a:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800d18e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d192:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800d196:	e7b1      	b.n	800d0fc <USB_EP0StartXfer+0x44>
 800d198:	e007ffff 	.word	0xe007ffff
 800d19c:	fff80000 	.word	0xfff80000

0800d1a0 <USB_WritePacket>:
{
 800d1a0:	b510      	push	{r4, lr}
 800d1a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800d1a6:	b94c      	cbnz	r4, 800d1bc <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 800d1a8:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d1aa:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    count32b = ((uint32_t)len + 3U) / 4U;
 800d1ae:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d1b0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800d1b4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 800d1b8:	4299      	cmp	r1, r3
 800d1ba:	d101      	bne.n	800d1c0 <USB_WritePacket+0x20>
}
 800d1bc:	2000      	movs	r0, #0
 800d1be:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d1c0:	f851 2b04 	ldr.w	r2, [r1], #4
 800d1c4:	6002      	str	r2, [r0, #0]
 800d1c6:	e7f7      	b.n	800d1b8 <USB_WritePacket+0x18>

0800d1c8 <USB_EPStartXfer>:
{
 800d1c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800d1ca:	784d      	ldrb	r5, [r1, #1]
 800d1cc:	780c      	ldrb	r4, [r1, #0]
 800d1ce:	2d01      	cmp	r5, #1
 800d1d0:	694b      	ldr	r3, [r1, #20]
 800d1d2:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800d1d6:	78ce      	ldrb	r6, [r1, #3]
 800d1d8:	f8df c194 	ldr.w	ip, [pc, #404]	; 800d370 <USB_EPStartXfer+0x1a8>
 800d1dc:	f8df e194 	ldr.w	lr, [pc, #404]	; 800d374 <USB_EPStartXfer+0x1ac>
 800d1e0:	d17d      	bne.n	800d2de <USB_EPStartXfer+0x116>
 800d1e2:	f504 6510 	add.w	r5, r4, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1e6:	692f      	ldr	r7, [r5, #16]
    if (ep->xfer_len == 0U)
 800d1e8:	bb3b      	cbnz	r3, 800d23a <USB_EPStartXfer+0x72>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1ea:	ea07 070c 	and.w	r7, r7, ip
 800d1ee:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d1f0:	692f      	ldr	r7, [r5, #16]
 800d1f2:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800d1f6:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1f8:	692f      	ldr	r7, [r5, #16]
 800d1fa:	ea07 070e 	and.w	r7, r7, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d1fe:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 800d200:	2a01      	cmp	r2, #1
 800d202:	d142      	bne.n	800d28a <USB_EPStartXfer+0xc2>
      if ((uint32_t)ep->dma_addr != 0U)
 800d204:	690b      	ldr	r3, [r1, #16]
 800d206:	b103      	cbz	r3, 800d20a <USB_EPStartXfer+0x42>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d208:	616b      	str	r3, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 800d20a:	2e01      	cmp	r6, #1
 800d20c:	d10c      	bne.n	800d228 <USB_EPStartXfer+0x60>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d20e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800d212:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d216:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800d21a:	bf0c      	ite	eq
 800d21c:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d220:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800d224:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d228:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800d22c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d230:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800d234:	2000      	movs	r0, #0
 800d236:	b003      	add	sp, #12
 800d238:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d23a:	ea07 070e 	and.w	r7, r7, lr
      if (ep->type == EP_TYPE_ISOC)
 800d23e:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d240:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d242:	692f      	ldr	r7, [r5, #16]
 800d244:	ea07 070c 	and.w	r7, r7, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d248:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d24c:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d24e:	eb0c 0703 	add.w	r7, ip, r3
 800d252:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800d256:	f107 37ff 	add.w	r7, r7, #4294967295
 800d25a:	fbb7 fcfc 	udiv	ip, r7, ip
 800d25e:	4f43      	ldr	r7, [pc, #268]	; (800d36c <USB_EPStartXfer+0x1a4>)
 800d260:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 800d264:	ea47 070e 	orr.w	r7, r7, lr
 800d268:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d26a:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800d26e:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800d272:	ea47 070c 	orr.w	r7, r7, ip
 800d276:	612f      	str	r7, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800d278:	d1c2      	bne.n	800d200 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d27a:	692f      	ldr	r7, [r5, #16]
 800d27c:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 800d280:	612f      	str	r7, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d282:	692f      	ldr	r7, [r5, #16]
 800d284:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800d288:	e7b9      	b.n	800d1fe <USB_EPStartXfer+0x36>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d28a:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800d28e:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d290:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800d294:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800d298:	d00c      	beq.n	800d2b4 <USB_EPStartXfer+0xec>
        if (ep->xfer_len > 0U)
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d0ca      	beq.n	800d234 <USB_EPStartXfer+0x6c>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d29e:	780b      	ldrb	r3, [r1, #0]
 800d2a0:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800d2a4:	f003 020f 	and.w	r2, r3, #15
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	4093      	lsls	r3, r2
 800d2ac:	4323      	orrs	r3, r4
 800d2ae:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800d2b2:	e7bf      	b.n	800d234 <USB_EPStartXfer+0x6c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d2b4:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d2b8:	b29b      	uxth	r3, r3
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d2ba:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d2be:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 800d2c2:	bf0c      	ite	eq
 800d2c4:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d2c8:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 800d2cc:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d2d0:	780c      	ldrb	r4, [r1, #0]
 800d2d2:	9200      	str	r2, [sp, #0]
 800d2d4:	4622      	mov	r2, r4
 800d2d6:	68c9      	ldr	r1, [r1, #12]
 800d2d8:	f7ff ff62 	bl	800d1a0 <USB_WritePacket>
 800d2dc:	e7aa      	b.n	800d234 <USB_EPStartXfer+0x6c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d2de:	f504 6730 	add.w	r7, r4, #2816	; 0xb00
 800d2e2:	693d      	ldr	r5, [r7, #16]
 800d2e4:	ea05 050e 	and.w	r5, r5, lr
 800d2e8:	613d      	str	r5, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d2ea:	693d      	ldr	r5, [r7, #16]
 800d2ec:	ea05 050c 	and.w	r5, r5, ip
 800d2f0:	613d      	str	r5, [r7, #16]
 800d2f2:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 800d2f4:	bb1b      	cbnz	r3, 800d33e <USB_EPStartXfer+0x176>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800d2fc:	431d      	orrs	r5, r3
 800d2fe:	613d      	str	r5, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (dma == 1U)
 800d306:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d308:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 800d30a:	d102      	bne.n	800d312 <USB_EPStartXfer+0x14a>
      if ((uint32_t)ep->xfer_buff != 0U)
 800d30c:	68cb      	ldr	r3, [r1, #12]
 800d30e:	b103      	cbz	r3, 800d312 <USB_EPStartXfer+0x14a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d310:	617b      	str	r3, [r7, #20]
    if (ep->type == EP_TYPE_ISOC)
 800d312:	2e01      	cmp	r6, #1
 800d314:	d10c      	bne.n	800d330 <USB_EPStartXfer+0x168>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d316:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800d31a:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d31e:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800d322:	bf0c      	ite	eq
 800d324:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d328:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800d32c:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d330:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800d334:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d338:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800d33c:	e77a      	b.n	800d234 <USB_EPStartXfer+0x6c>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d33e:	442b      	add	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d340:	f8df c028 	ldr.w	ip, [pc, #40]	; 800d36c <USB_EPStartXfer+0x1a4>
 800d344:	f8d7 e010 	ldr.w	lr, [r7, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d348:	3b01      	subs	r3, #1
 800d34a:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d34e:	ea0c 4cc3 	and.w	ip, ip, r3, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d352:	b29b      	uxth	r3, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d354:	ea4c 0c0e 	orr.w	ip, ip, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d358:	436b      	muls	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d35a:	f8c7 c010 	str.w	ip, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d35e:	f8d7 c010 	ldr.w	ip, [r7, #16]
 800d362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d366:	ea43 030c 	orr.w	r3, r3, ip
 800d36a:	e7cc      	b.n	800d306 <USB_EPStartXfer+0x13e>
 800d36c:	1ff80000 	.word	0x1ff80000
 800d370:	e007ffff 	.word	0xe007ffff
 800d374:	fff80000 	.word	0xfff80000

0800d378 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d378:	3203      	adds	r2, #3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d37a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d37e:	0892      	lsrs	r2, r2, #2
 800d380:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
 800d384:	4291      	cmp	r1, r2
 800d386:	d101      	bne.n	800d38c <USB_ReadPacket+0x14>
}
 800d388:	4608      	mov	r0, r1
 800d38a:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d38c:	6803      	ldr	r3, [r0, #0]
 800d38e:	f841 3b04 	str.w	r3, [r1], #4
 800d392:	e7f7      	b.n	800d384 <USB_ReadPacket+0xc>

0800d394 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800d394:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d396:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800d398:	2a01      	cmp	r2, #1
 800d39a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800d39e:	d112      	bne.n	800d3c6 <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d3a0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800d3a4:	2a00      	cmp	r2, #0
 800d3a6:	db06      	blt.n	800d3b6 <USB_EPSetStall+0x22>
 800d3a8:	b12b      	cbz	r3, 800d3b6 <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d3aa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d3ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d3b2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d3b6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d3ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d3be:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d3c2:	2000      	movs	r0, #0
 800d3c4:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d3c6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800d3ca:	2a00      	cmp	r2, #0
 800d3cc:	db06      	blt.n	800d3dc <USB_EPSetStall+0x48>
 800d3ce:	b12b      	cbz	r3, 800d3dc <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d3d0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d3d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d3d8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d3dc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d3e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d3e4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800d3e8:	e7eb      	b.n	800d3c2 <USB_EPSetStall+0x2e>

0800d3ea <USB_EPClearStall>:
{
 800d3ea:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800d3ec:	784a      	ldrb	r2, [r1, #1]
 800d3ee:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800d3f2:	78cb      	ldrb	r3, [r1, #3]
 800d3f4:	2a01      	cmp	r2, #1
 800d3f6:	f1a3 0302 	sub.w	r3, r3, #2
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	d10f      	bne.n	800d41e <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d3fe:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d402:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d404:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800d408:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d40c:	d805      	bhi.n	800d41a <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d40e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d416:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d41a:	2000      	movs	r0, #0
 800d41c:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d41e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d422:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d424:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800d428:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d42c:	d8f5      	bhi.n	800d41a <USB_EPClearStall+0x30>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d42e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d436:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800d43a:	e7ee      	b.n	800d41a <USB_EPClearStall+0x30>

0800d43c <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d43c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d440:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d442:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d446:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d44a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d44e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800d452:	4319      	orrs	r1, r3
 800d454:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800d458:	2000      	movs	r0, #0
 800d45a:	4770      	bx	lr

0800d45c <USB_DevConnect>:
{
 800d45c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d45e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800d462:	f023 0302 	bic.w	r3, r3, #2
 800d466:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800d46a:	2003      	movs	r0, #3
 800d46c:	f7f8 fabc 	bl	80059e8 <HAL_Delay>
}
 800d470:	2000      	movs	r0, #0
 800d472:	bd08      	pop	{r3, pc}

0800d474 <USB_DevDisconnect>:
{
 800d474:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d476:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800d47a:	f043 0302 	orr.w	r3, r3, #2
 800d47e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800d482:	2003      	movs	r0, #3
 800d484:	f7f8 fab0 	bl	80059e8 <HAL_Delay>
}
 800d488:	2000      	movs	r0, #0
 800d48a:	bd08      	pop	{r3, pc}

0800d48c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800d48c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800d48e:	6980      	ldr	r0, [r0, #24]
}
 800d490:	4010      	ands	r0, r2
 800d492:	4770      	bx	lr

0800d494 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800d494:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800d498:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d49c:	69c0      	ldr	r0, [r0, #28]
 800d49e:	4018      	ands	r0, r3
}
 800d4a0:	0c00      	lsrs	r0, r0, #16
 800d4a2:	4770      	bx	lr

0800d4a4 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800d4a4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800d4a8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d4ac:	69c0      	ldr	r0, [r0, #28]
 800d4ae:	4018      	ands	r0, r3
}
 800d4b0:	b280      	uxth	r0, r0
 800d4b2:	4770      	bx	lr

0800d4b4 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d4b4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d4b8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d4bc:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d4c0:	6940      	ldr	r0, [r0, #20]
}
 800d4c2:	4010      	ands	r0, r2
 800d4c4:	4770      	bx	lr

0800d4c6 <USB_ReadDevInEPInterrupt>:
{
 800d4c6:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 800d4c8:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d4cc:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d4d0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d4d4:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d4d8:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d4dc:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d4de:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d4e0:	01db      	lsls	r3, r3, #7
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	4323      	orrs	r3, r4
}
 800d4e6:	4018      	ands	r0, r3
 800d4e8:	bd10      	pop	{r4, pc}

0800d4ea <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800d4ea:	6940      	ldr	r0, [r0, #20]
}
 800d4ec:	f000 0001 	and.w	r0, r0, #1
 800d4f0:	4770      	bx	lr

0800d4f2 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d4f2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d4f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d4fa:	f023 0307 	bic.w	r3, r3, #7
 800d4fe:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d502:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800d506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d50a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800d50e:	2000      	movs	r0, #0
 800d510:	4770      	bx	lr
	...

0800d514 <USB_EP0_OutStart>:
{
 800d514:	b530      	push	{r4, r5, lr}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d516:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800d518:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d51c:	4c0f      	ldr	r4, [pc, #60]	; (800d55c <USB_EP0_OutStart+0x48>)
 800d51e:	42a5      	cmp	r5, r4
 800d520:	d903      	bls.n	800d52a <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d522:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800d526:	2c00      	cmp	r4, #0
 800d528:	db16      	blt.n	800d558 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d52a:	2400      	movs	r4, #0
  if (dma == 1U)
 800d52c:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d52e:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d530:	691c      	ldr	r4, [r3, #16]
 800d532:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800d536:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d538:	691c      	ldr	r4, [r3, #16]
 800d53a:	f044 0418 	orr.w	r4, r4, #24
 800d53e:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d540:	691c      	ldr	r4, [r3, #16]
 800d542:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800d546:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 800d548:	d106      	bne.n	800d558 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d54a:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d54c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d550:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d554:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800d558:	2000      	movs	r0, #0
 800d55a:	bd30      	pop	{r4, r5, pc}
 800d55c:	4f54300a 	.word	0x4f54300a

0800d560 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d560:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d562:	4903      	ldr	r1, [pc, #12]	; (800d570 <MX_FATFS_Init+0x10>)
 800d564:	4803      	ldr	r0, [pc, #12]	; (800d574 <MX_FATFS_Init+0x14>)
 800d566:	f002 fab3 	bl	800fad0 <FATFS_LinkDriver>
 800d56a:	4b03      	ldr	r3, [pc, #12]	; (800d578 <MX_FATFS_Init+0x18>)
 800d56c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d56e:	bd08      	pop	{r3, pc}
 800d570:	2401ec95 	.word	0x2401ec95
 800d574:	0801682c 	.word	0x0801682c
 800d578:	2401ec94 	.word	0x2401ec94

0800d57c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800d57c:	2000      	movs	r0, #0
 800d57e:	4770      	bx	lr

0800d580 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d580:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d582:	4613      	mov	r3, r2
 800d584:	460a      	mov	r2, r1
 800d586:	4601      	mov	r1, r0
 800d588:	4803      	ldr	r0, [pc, #12]	; (800d598 <BSP_SD_ReadBlocks_DMA+0x18>)
 800d58a:	f7fc fde5 	bl	800a158 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800d58e:	3000      	adds	r0, #0
 800d590:	bf18      	it	ne
 800d592:	2001      	movne	r0, #1
 800d594:	bd08      	pop	{r3, pc}
 800d596:	bf00      	nop
 800d598:	2400c0c0 	.word	0x2400c0c0

0800d59c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d59c:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d59e:	4613      	mov	r3, r2
 800d5a0:	460a      	mov	r2, r1
 800d5a2:	4601      	mov	r1, r0
 800d5a4:	4803      	ldr	r0, [pc, #12]	; (800d5b4 <BSP_SD_WriteBlocks_DMA+0x18>)
 800d5a6:	f7fc fe3b 	bl	800a220 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800d5aa:	3000      	adds	r0, #0
 800d5ac:	bf18      	it	ne
 800d5ae:	2001      	movne	r0, #1
 800d5b0:	bd08      	pop	{r3, pc}
 800d5b2:	bf00      	nop
 800d5b4:	2400c0c0 	.word	0x2400c0c0

0800d5b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d5b8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d5ba:	4803      	ldr	r0, [pc, #12]	; (800d5c8 <BSP_SD_GetCardState+0x10>)
 800d5bc:	f7fd fa0c 	bl	800a9d8 <HAL_SD_GetCardState>
}
 800d5c0:	3804      	subs	r0, #4
 800d5c2:	bf18      	it	ne
 800d5c4:	2001      	movne	r0, #1
 800d5c6:	bd08      	pop	{r3, pc}
 800d5c8:	2400c0c0 	.word	0x2400c0c0

0800d5cc <BSP_SD_GetCardInfo>:
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d5cc:	4601      	mov	r1, r0
 800d5ce:	4801      	ldr	r0, [pc, #4]	; (800d5d4 <BSP_SD_GetCardInfo+0x8>)
 800d5d0:	f7fd b954 	b.w	800a87c <HAL_SD_GetCardInfo>
 800d5d4:	2400c0c0 	.word	0x2400c0c0

0800d5d8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d5d8:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800d5da:	f000 f907 	bl	800d7ec <BSP_SD_WriteCpltCallback>
}
 800d5de:	bd08      	pop	{r3, pc}

0800d5e0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d5e0:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800d5e2:	f000 f913 	bl	800d80c <BSP_SD_ReadCpltCallback>
}
 800d5e6:	bd08      	pop	{r3, pc}

0800d5e8 <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 800d5e8:	2301      	movs	r3, #1
{
 800d5ea:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 800d5ec:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d5f0:	f000 f81e 	bl	800d630 <BSP_PlatformIsDetected>
 800d5f4:	b908      	cbnz	r0, 800d5fa <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 800d5f6:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800d5fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800d5fe:	b003      	add	sp, #12
 800d600:	f85d fb04 	ldr.w	pc, [sp], #4

0800d604 <BSP_SD_Init>:
{
 800d604:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d606:	f7ff ffef 	bl	800d5e8 <BSP_SD_IsDetected>
 800d60a:	2801      	cmp	r0, #1
 800d60c:	d10c      	bne.n	800d628 <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd1);
 800d60e:	4807      	ldr	r0, [pc, #28]	; (800d62c <BSP_SD_Init+0x28>)
 800d610:	f7fd f9f6 	bl	800aa00 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800d614:	b938      	cbnz	r0, 800d626 <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d616:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d61a:	4804      	ldr	r0, [pc, #16]	; (800d62c <BSP_SD_Init+0x28>)
 800d61c:	f7fd f940 	bl	800a8a0 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800d620:	3000      	adds	r0, #0
 800d622:	bf18      	it	ne
 800d624:	2001      	movne	r0, #1
}
 800d626:	bd08      	pop	{r3, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 800d628:	2002      	movs	r0, #2
 800d62a:	e7fc      	b.n	800d626 <BSP_SD_Init+0x22>
 800d62c:	2400c0c0 	.word	0x2400c0c0

0800d630 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d630:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d636:	4803      	ldr	r0, [pc, #12]	; (800d644 <BSP_PlatformIsDetected+0x14>)
 800d638:	f7fa faf8 	bl	8007c2c <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800d63c:	fab0 f080 	clz	r0, r0
 800d640:	0940      	lsrs	r0, r0, #5
 800d642:	bd08      	pop	{r3, pc}
 800d644:	58020800 	.word	0x58020800

0800d648 <SD_CheckStatus.isra.0>:
  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
  Stat = STA_NOINIT;
 800d648:	2301      	movs	r3, #1
static DSTATUS SD_CheckStatus(BYTE lun)
 800d64a:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800d64c:	4c05      	ldr	r4, [pc, #20]	; (800d664 <SD_CheckStatus.isra.0+0x1c>)
 800d64e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d650:	f7ff ffb2 	bl	800d5b8 <BSP_SD_GetCardState>
 800d654:	4623      	mov	r3, r4
 800d656:	b918      	cbnz	r0, 800d660 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 800d658:	7822      	ldrb	r2, [r4, #0]
 800d65a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d65e:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 800d660:	7818      	ldrb	r0, [r3, #0]
}
 800d662:	bd10      	pop	{r4, pc}
 800d664:	24000020 	.word	0x24000020

0800d668 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d668:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800d66a:	2301      	movs	r3, #1
 800d66c:	4c0f      	ldr	r4, [pc, #60]	; (800d6ac <SD_initialize+0x44>)
 800d66e:	7023      	strb	r3, [r4, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800d670:	f002 fa76 	bl	800fb60 <osKernelGetState>
 800d674:	2802      	cmp	r0, #2
 800d676:	d116      	bne.n	800d6a6 <SD_initialize+0x3e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d678:	f7ff ffc4 	bl	800d604 <BSP_SD_Init>
 800d67c:	b910      	cbnz	r0, 800d684 <SD_initialize+0x1c>
    {
      Stat = SD_CheckStatus(lun);
 800d67e:	f7ff ffe3 	bl	800d648 <SD_CheckStatus.isra.0>
 800d682:	7020      	strb	r0, [r4, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d684:	7823      	ldrb	r3, [r4, #0]
 800d686:	2b01      	cmp	r3, #1
 800d688:	d00d      	beq.n	800d6a6 <SD_initialize+0x3e>
    {
      if (SDQueueID == NULL)
 800d68a:	4d09      	ldr	r5, [pc, #36]	; (800d6b0 <SD_initialize+0x48>)
 800d68c:	682a      	ldr	r2, [r5, #0]
 800d68e:	b922      	cbnz	r2, 800d69a <SD_initialize+0x32>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800d690:	2102      	movs	r1, #2
 800d692:	200a      	movs	r0, #10
 800d694:	f002 fcc6 	bl	8010024 <osMessageQueueNew>
 800d698:	6028      	str	r0, [r5, #0]
#endif
      }

      if (SDQueueID == NULL)
 800d69a:	682b      	ldr	r3, [r5, #0]
 800d69c:	b91b      	cbnz	r3, 800d6a6 <SD_initialize+0x3e>
      {
        Stat |= STA_NOINIT;
 800d69e:	7823      	ldrb	r3, [r4, #0]
 800d6a0:	f043 0301 	orr.w	r3, r3, #1
 800d6a4:	7023      	strb	r3, [r4, #0]
      }
    }
  }

  return Stat;
 800d6a6:	7820      	ldrb	r0, [r4, #0]
}
 800d6a8:	bd38      	pop	{r3, r4, r5, pc}
 800d6aa:	bf00      	nop
 800d6ac:	24000020 	.word	0x24000020
 800d6b0:	240008fc 	.word	0x240008fc

0800d6b4 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 800d6b4:	f7ff bfc8 	b.w	800d648 <SD_CheckStatus.isra.0>

0800d6b8 <SD_read.part.1>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
 800d6b8:	b538      	push	{r3, r4, r5, lr}
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
          if ((status == osOK) && (event == READ_CPLT_MSG))
          {
            timer = osKernelGetTickCount();
 800d6ba:	f002 fa81 	bl	800fbc0 <osKernelGetTickCount>
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800d6be:	f247 542f 	movw	r4, #29999	; 0x752f
            timer = osKernelGetTickCount();
 800d6c2:	4605      	mov	r5, r0
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800d6c4:	f002 fa7c 	bl	800fbc0 <osKernelGetTickCount>
 800d6c8:	1b40      	subs	r0, r0, r5
 800d6ca:	42a0      	cmp	r0, r4
 800d6cc:	d901      	bls.n	800d6d2 <SD_read.part.1+0x1a>
  DRESULT res = RES_ERROR;
 800d6ce:	2001      	movs	r0, #1
 800d6d0:	e003      	b.n	800d6da <SD_read.part.1+0x22>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d6d2:	f7ff ff71 	bl	800d5b8 <BSP_SD_GetCardState>
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	d1f4      	bne.n	800d6c4 <SD_read.part.1+0xc>
      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
}
 800d6da:	bd38      	pop	{r3, r4, r5, pc}

0800d6dc <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d6dc:	4b12      	ldr	r3, [pc, #72]	; (800d728 <SD_ioctl+0x4c>)
{
 800d6de:	b510      	push	{r4, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d6e0:	781b      	ldrb	r3, [r3, #0]
{
 800d6e2:	b08a      	sub	sp, #40	; 0x28
 800d6e4:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d6e6:	07db      	lsls	r3, r3, #31
 800d6e8:	d41b      	bmi.n	800d722 <SD_ioctl+0x46>

  switch (cmd)
 800d6ea:	2903      	cmp	r1, #3
 800d6ec:	d803      	bhi.n	800d6f6 <SD_ioctl+0x1a>
 800d6ee:	e8df f001 	tbb	[pc, r1]
 800d6f2:	0510      	.short	0x0510
 800d6f4:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 800d6f6:	2004      	movs	r0, #4
  }

  return res;
}
 800d6f8:	b00a      	add	sp, #40	; 0x28
 800d6fa:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800d6fc:	a801      	add	r0, sp, #4
 800d6fe:	f7ff ff65 	bl	800d5cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d702:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d704:	6023      	str	r3, [r4, #0]
 800d706:	e004      	b.n	800d712 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 800d708:	a801      	add	r0, sp, #4
 800d70a:	f7ff ff5f 	bl	800d5cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d70e:	9b08      	ldr	r3, [sp, #32]
 800d710:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800d712:	2000      	movs	r0, #0
 800d714:	e7f0      	b.n	800d6f8 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 800d716:	a801      	add	r0, sp, #4
 800d718:	f7ff ff58 	bl	800d5cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d71c:	9b08      	ldr	r3, [sp, #32]
 800d71e:	0a5b      	lsrs	r3, r3, #9
 800d720:	e7f0      	b.n	800d704 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d722:	2003      	movs	r0, #3
 800d724:	e7e8      	b.n	800d6f8 <SD_ioctl+0x1c>
 800d726:	bf00      	nop
 800d728:	24000020 	.word	0x24000020

0800d72c <SD_CheckStatusWithTimeout.constprop.4>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 800d72c:	b538      	push	{r3, r4, r5, lr}
  timer = osKernelGetTickCount();
 800d72e:	f002 fa47 	bl	800fbc0 <osKernelGetTickCount>
  while( osKernelGetTickCount() - timer < timeout)
 800d732:	f247 542f 	movw	r4, #29999	; 0x752f
  timer = osKernelGetTickCount();
 800d736:	4605      	mov	r5, r0
  while( osKernelGetTickCount() - timer < timeout)
 800d738:	f002 fa42 	bl	800fbc0 <osKernelGetTickCount>
 800d73c:	1b40      	subs	r0, r0, r5
 800d73e:	42a0      	cmp	r0, r4
 800d740:	d902      	bls.n	800d748 <SD_CheckStatusWithTimeout.constprop.4+0x1c>
  return -1;
 800d742:	f04f 30ff 	mov.w	r0, #4294967295
 800d746:	e003      	b.n	800d750 <SD_CheckStatusWithTimeout.constprop.4+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d748:	f7ff ff36 	bl	800d5b8 <BSP_SD_GetCardState>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	d1f3      	bne.n	800d738 <SD_CheckStatusWithTimeout.constprop.4+0xc>
}
 800d750:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d754 <SD_write>:
{
 800d754:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d756:	460c      	mov	r4, r1
 800d758:	4615      	mov	r5, r2
 800d75a:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d75c:	f7ff ffe6 	bl	800d72c <SD_CheckStatusWithTimeout.constprop.4>
 800d760:	2800      	cmp	r0, #0
 800d762:	da02      	bge.n	800d76a <SD_write+0x16>
    return res;
 800d764:	2001      	movs	r0, #1
}
 800d766:	b002      	add	sp, #8
 800d768:	bd70      	pop	{r4, r5, r6, pc}
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d76a:	4632      	mov	r2, r6
 800d76c:	4629      	mov	r1, r5
 800d76e:	4620      	mov	r0, r4
 800d770:	f7ff ff14 	bl	800d59c <BSP_SD_WriteBlocks_DMA>
 800d774:	4602      	mov	r2, r0
 800d776:	2800      	cmp	r0, #0
 800d778:	d1f4      	bne.n	800d764 <SD_write+0x10>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800d77a:	4808      	ldr	r0, [pc, #32]	; (800d79c <SD_write+0x48>)
 800d77c:	f247 5330 	movw	r3, #30000	; 0x7530
 800d780:	f10d 0106 	add.w	r1, sp, #6
 800d784:	6800      	ldr	r0, [r0, #0]
 800d786:	f002 fcd5 	bl	8010134 <osMessageQueueGet>
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800d78a:	2800      	cmp	r0, #0
 800d78c:	d1ea      	bne.n	800d764 <SD_write+0x10>
 800d78e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d792:	2b02      	cmp	r3, #2
 800d794:	d1e6      	bne.n	800d764 <SD_write+0x10>
 800d796:	f7ff ff8f 	bl	800d6b8 <SD_read.part.1>
 800d79a:	e7e4      	b.n	800d766 <SD_write+0x12>
 800d79c:	240008fc 	.word	0x240008fc

0800d7a0 <SD_read>:
{
 800d7a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d7a2:	460c      	mov	r4, r1
 800d7a4:	4615      	mov	r5, r2
 800d7a6:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d7a8:	f7ff ffc0 	bl	800d72c <SD_CheckStatusWithTimeout.constprop.4>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	da02      	bge.n	800d7b6 <SD_read+0x16>
    return res;
 800d7b0:	2001      	movs	r0, #1
}
 800d7b2:	b002      	add	sp, #8
 800d7b4:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d7b6:	4632      	mov	r2, r6
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	f7ff fee0 	bl	800d580 <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	d1f4      	bne.n	800d7b0 <SD_read+0x10>
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800d7c6:	4808      	ldr	r0, [pc, #32]	; (800d7e8 <SD_read+0x48>)
 800d7c8:	f247 5330 	movw	r3, #30000	; 0x7530
 800d7cc:	f10d 0106 	add.w	r1, sp, #6
 800d7d0:	6800      	ldr	r0, [r0, #0]
 800d7d2:	f002 fcaf 	bl	8010134 <osMessageQueueGet>
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	d1ea      	bne.n	800d7b0 <SD_read+0x10>
 800d7da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d1e6      	bne.n	800d7b0 <SD_read+0x10>
 800d7e2:	f7ff ff69 	bl	800d6b8 <SD_read.part.1>
 800d7e6:	e7e4      	b.n	800d7b2 <SD_read+0x12>
 800d7e8:	240008fc 	.word	0x240008fc

0800d7ec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d7ec:	b507      	push	{r0, r1, r2, lr}
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800d7ee:	2302      	movs	r3, #2
 800d7f0:	a902      	add	r1, sp, #8
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800d7f2:	4805      	ldr	r0, [pc, #20]	; (800d808 <BSP_SD_WriteCpltCallback+0x1c>)
   const uint16_t msg = WRITE_CPLT_MSG;
 800d7f4:	f821 3d02 	strh.w	r3, [r1, #-2]!
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	6800      	ldr	r0, [r0, #0]
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	f002 fc57 	bl	80100b0 <osMessageQueuePut>
#endif
}
 800d802:	b003      	add	sp, #12
 800d804:	f85d fb04 	ldr.w	pc, [sp], #4
 800d808:	240008fc 	.word	0x240008fc

0800d80c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d80c:	b507      	push	{r0, r1, r2, lr}
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800d80e:	2301      	movs	r3, #1
 800d810:	a902      	add	r1, sp, #8
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800d812:	4805      	ldr	r0, [pc, #20]	; (800d828 <BSP_SD_ReadCpltCallback+0x1c>)
   const uint16_t msg = READ_CPLT_MSG;
 800d814:	f821 3d02 	strh.w	r3, [r1, #-2]!
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800d818:	2300      	movs	r3, #0
 800d81a:	6800      	ldr	r0, [r0, #0]
 800d81c:	461a      	mov	r2, r3
 800d81e:	f002 fc47 	bl	80100b0 <osMessageQueuePut>
#endif
}
 800d822:	b003      	add	sp, #12
 800d824:	f85d fb04 	ldr.w	pc, [sp], #4
 800d828:	240008fc 	.word	0x240008fc

0800d82c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d82c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
{
 800d830:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d832:	b16b      	cbz	r3, 800d850 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d834:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d838:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800d83c:	28ff      	cmp	r0, #255	; 0xff
 800d83e:	d007      	beq.n	800d850 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	4621      	mov	r1, r4
 800d844:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800d848:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800d84a:	23ff      	movs	r3, #255	; 0xff
 800d84c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 800d850:	2000      	movs	r0, #0
 800d852:	bd10      	pop	{r4, pc}

0800d854 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d854:	2343      	movs	r3, #67	; 0x43
 800d856:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800d858:	4800      	ldr	r0, [pc, #0]	; (800d85c <USBD_CDC_GetFSCfgDesc+0x8>)
 800d85a:	4770      	bx	lr
 800d85c:	2400005c 	.word	0x2400005c

0800d860 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d860:	2343      	movs	r3, #67	; 0x43
 800d862:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800d864:	4800      	ldr	r0, [pc, #0]	; (800d868 <USBD_CDC_GetHSCfgDesc+0x8>)
 800d866:	4770      	bx	lr
 800d868:	240000a0 	.word	0x240000a0

0800d86c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d86c:	2343      	movs	r3, #67	; 0x43
 800d86e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800d870:	4800      	ldr	r0, [pc, #0]	; (800d874 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800d872:	4770      	bx	lr
 800d874:	240000f0 	.word	0x240000f0

0800d878 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d878:	230a      	movs	r3, #10
 800d87a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800d87c:	4800      	ldr	r0, [pc, #0]	; (800d880 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800d87e:	4770      	bx	lr
 800d880:	240000e4 	.word	0x240000e4

0800d884 <USBD_CDC_DataOut>:
{
 800d884:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d886:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
{
 800d88a:	4605      	mov	r5, r0
  if (pdev->pClassData == NULL)
 800d88c:	b16c      	cbz	r4, 800d8aa <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d88e:	f005 fcb5 	bl	80131fc <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d892:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d896:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d89a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800d8a4:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800d8a6:	2000      	movs	r0, #0
}
 800d8a8:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800d8aa:	2003      	movs	r0, #3
 800d8ac:	e7fc      	b.n	800d8a8 <USBD_CDC_DataOut+0x24>

0800d8ae <USBD_CDC_DataIn>:
{
 800d8ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 800d8b0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	460a      	mov	r2, r1
  if (pdev->pClassData == NULL)
 800d8b8:	b323      	cbz	r3, 800d904 <USBD_CDC_DataIn+0x56>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d8ba:	2614      	movs	r6, #20
 800d8bc:	fb06 0601 	mla	r6, r6, r1, r0
 800d8c0:	69b7      	ldr	r7, [r6, #24]
 800d8c2:	b19f      	cbz	r7, 800d8ec <USBD_CDC_DataIn+0x3e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d8c4:	f04f 0c1c 	mov.w	ip, #28
 800d8c8:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800d8cc:	fb0c 4401 	mla	r4, ip, r1, r4
 800d8d0:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 800d8d4:	fbb7 f4fc 	udiv	r4, r7, ip
 800d8d8:	fb0c 7414 	mls	r4, ip, r4, r7
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d8dc:	b934      	cbnz	r4, 800d8ec <USBD_CDC_DataIn+0x3e>
    pdev->ep_in[epnum].total_length = 0U;
 800d8de:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d8e0:	4623      	mov	r3, r4
 800d8e2:	4622      	mov	r2, r4
 800d8e4:	f005 fc6e 	bl	80131c4 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800d8e8:	4620      	mov	r0, r4
}
 800d8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hcdc->TxState = 0U;
 800d8ec:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d8ee:	f8d5 12c0 	ldr.w	r1, [r5, #704]	; 0x2c0
 800d8f2:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800d8f6:	690d      	ldr	r5, [r1, #16]
 800d8f8:	f503 7104 	add.w	r1, r3, #528	; 0x210
    hcdc->TxState = 0U;
 800d8fc:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d900:	47a8      	blx	r5
 800d902:	e7f1      	b.n	800d8e8 <USBD_CDC_DataIn+0x3a>
    return (uint8_t)USBD_FAIL;
 800d904:	2003      	movs	r0, #3
 800d906:	e7f0      	b.n	800d8ea <USBD_CDC_DataIn+0x3c>

0800d908 <USBD_CDC_Setup>:
{
 800d908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d90c:	780a      	ldrb	r2, [r1, #0]
  uint8_t ifalt = 0U;
 800d90e:	f04f 0800 	mov.w	r8, #0
{
 800d912:	4605      	mov	r5, r0
 800d914:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d916:	f012 0360 	ands.w	r3, r2, #96	; 0x60
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d91a:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800d91e:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800d922:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d926:	d025      	beq.n	800d974 <USBD_CDC_Setup+0x6c>
 800d928:	2b20      	cmp	r3, #32
 800d92a:	d155      	bne.n	800d9d8 <USBD_CDC_Setup+0xd0>
    if (req->wLength != 0U)
 800d92c:	88cc      	ldrh	r4, [r1, #6]
 800d92e:	784b      	ldrb	r3, [r1, #1]
 800d930:	b1cc      	cbz	r4, 800d966 <USBD_CDC_Setup+0x5e>
      if ((req->bmRequest & 0x80U) != 0U)
 800d932:	0612      	lsls	r2, r2, #24
 800d934:	d50d      	bpl.n	800d952 <USBD_CDC_Setup+0x4a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d936:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800d93a:	4639      	mov	r1, r7
 800d93c:	4618      	mov	r0, r3
 800d93e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800d942:	4622      	mov	r2, r4
 800d944:	47c8      	blx	r9
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d946:	88f2      	ldrh	r2, [r6, #6]
 800d948:	4639      	mov	r1, r7
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d94a:	4628      	mov	r0, r5
 800d94c:	f000 fc90 	bl	800e270 <USBD_CtlSendData>
 800d950:	e007      	b.n	800d962 <USBD_CDC_Setup+0x5a>
        hcdc->CmdOpCode = req->bRequest;
 800d952:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d956:	4622      	mov	r2, r4
        hcdc->CmdLength = (uint8_t)req->wLength;
 800d958:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d95c:	4639      	mov	r1, r7
 800d95e:	f000 fc9c 	bl	800e29a <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800d962:	2000      	movs	r0, #0
 800d964:	e03d      	b.n	800d9e2 <USBD_CDC_Setup+0xda>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d966:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800d96a:	4618      	mov	r0, r3
 800d96c:	6895      	ldr	r5, [r2, #8]
 800d96e:	4622      	mov	r2, r4
 800d970:	47a8      	blx	r5
 800d972:	e7f6      	b.n	800d962 <USBD_CDC_Setup+0x5a>
    switch (req->bRequest)
 800d974:	784b      	ldrb	r3, [r1, #1]
 800d976:	2b0b      	cmp	r3, #11
 800d978:	d82e      	bhi.n	800d9d8 <USBD_CDC_Setup+0xd0>
 800d97a:	a201      	add	r2, pc, #4	; (adr r2, 800d980 <USBD_CDC_Setup+0x78>)
 800d97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d980:	0800d9b1 	.word	0x0800d9b1
 800d984:	0800d963 	.word	0x0800d963
 800d988:	0800d9d9 	.word	0x0800d9d9
 800d98c:	0800d9d9 	.word	0x0800d9d9
 800d990:	0800d9d9 	.word	0x0800d9d9
 800d994:	0800d9d9 	.word	0x0800d9d9
 800d998:	0800d9d9 	.word	0x0800d9d9
 800d99c:	0800d9d9 	.word	0x0800d9d9
 800d9a0:	0800d9d9 	.word	0x0800d9d9
 800d9a4:	0800d9d9 	.word	0x0800d9d9
 800d9a8:	0800d9c1 	.word	0x0800d9c1
 800d9ac:	0800d9d1 	.word	0x0800d9d1
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9b0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800d9b4:	2b03      	cmp	r3, #3
 800d9b6:	d10f      	bne.n	800d9d8 <USBD_CDC_Setup+0xd0>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d9b8:	2202      	movs	r2, #2
 800d9ba:	f10d 0106 	add.w	r1, sp, #6
 800d9be:	e7c4      	b.n	800d94a <USBD_CDC_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9c0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800d9c4:	2b03      	cmp	r3, #3
 800d9c6:	d107      	bne.n	800d9d8 <USBD_CDC_Setup+0xd0>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f10d 0105 	add.w	r1, sp, #5
 800d9ce:	e7bc      	b.n	800d94a <USBD_CDC_Setup+0x42>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d9d0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800d9d4:	2b03      	cmp	r3, #3
 800d9d6:	d0c4      	beq.n	800d962 <USBD_CDC_Setup+0x5a>
      USBD_CtlError(pdev, req);
 800d9d8:	4628      	mov	r0, r5
 800d9da:	4631      	mov	r1, r6
 800d9dc:	f000 fc21 	bl	800e222 <USBD_CtlError>
      ret = USBD_FAIL;
 800d9e0:	2003      	movs	r0, #3
}
 800d9e2:	b003      	add	sp, #12
 800d9e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d9e8 <USBD_CDC_DeInit>:
{
 800d9e8:	b538      	push	{r3, r4, r5, lr}
 800d9ea:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d9ec:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d9ee:	2181      	movs	r1, #129	; 0x81
 800d9f0:	f005 fb9c 	bl	801312c <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d9f4:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d9f6:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	f005 fb97 	bl	801312c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d9fe:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800da02:	2182      	movs	r1, #130	; 0x82
 800da04:	4620      	mov	r0, r4
 800da06:	f005 fb91 	bl	801312c <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800da0a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800da0e:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800da10:	b14b      	cbz	r3, 800da26 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800da12:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800da1a:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800da1e:	f005 fc23 	bl	8013268 <free>
    pdev->pClassData = NULL;
 800da22:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800da26:	2000      	movs	r0, #0
 800da28:	bd38      	pop	{r3, r4, r5, pc}

0800da2a <USBD_CDC_Init>:
{
 800da2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da2e:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800da30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800da34:	f005 fc10 	bl	8013258 <malloc>
  if (hcdc == NULL)
 800da38:	4606      	mov	r6, r0
    pdev->pClassData = NULL;
 800da3a:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (hcdc == NULL)
 800da3e:	b910      	cbnz	r0, 800da46 <USBD_CDC_Init+0x1c>
    return (uint8_t)USBD_EMEM;
 800da40:	2002      	movs	r0, #2
}
 800da42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da46:	7c23      	ldrb	r3, [r4, #16]
 800da48:	bbab      	cbnz	r3, 800dab6 <USBD_CDC_Init+0x8c>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800da4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da4e:	2202      	movs	r2, #2
 800da50:	2181      	movs	r1, #129	; 0x81
 800da52:	4620      	mov	r0, r4
 800da54:	f005 fb5a 	bl	801310c <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800da58:	2501      	movs	r5, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800da5a:	f44f 7300 	mov.w	r3, #512	; 0x200
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800da5e:	8725      	strh	r5, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800da60:	4629      	mov	r1, r5
 800da62:	2202      	movs	r2, #2
 800da64:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800da66:	2701      	movs	r7, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800da68:	f005 fb50 	bl	801310c <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800da6c:	2310      	movs	r3, #16
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800da6e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800da72:	2203      	movs	r2, #3
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800da74:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800da78:	2182      	movs	r1, #130	; 0x82
 800da7a:	2308      	movs	r3, #8
 800da7c:	4620      	mov	r0, r4
 800da7e:	f005 fb45 	bl	801310c <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800da82:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800da86:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  hcdc->TxState = 0U;
 800da8a:	2500      	movs	r5, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da90:	f894 8010 	ldrb.w	r8, [r4, #16]
  hcdc->TxState = 0U;
 800da94:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800da98:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da9c:	f1b8 0f00 	cmp.w	r8, #0
 800daa0:	d113      	bne.n	800daca <USBD_CDC_Init+0xa0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800daa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800daa6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800daaa:	4639      	mov	r1, r7
 800daac:	4620      	mov	r0, r4
 800daae:	f005 fb97 	bl	80131e0 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800dab2:	4640      	mov	r0, r8
 800dab4:	e7c5      	b.n	800da42 <USBD_CDC_Init+0x18>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dab6:	2501      	movs	r5, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dab8:	2340      	movs	r3, #64	; 0x40
 800daba:	2202      	movs	r2, #2
 800dabc:	2181      	movs	r1, #129	; 0x81
 800dabe:	4620      	mov	r0, r4
 800dac0:	f005 fb24 	bl	801310c <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dac4:	8725      	strh	r5, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dac6:	2340      	movs	r3, #64	; 0x40
 800dac8:	e7ca      	b.n	800da60 <USBD_CDC_Init+0x36>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800daca:	2340      	movs	r3, #64	; 0x40
 800dacc:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800dad0:	4639      	mov	r1, r7
 800dad2:	4620      	mov	r0, r4
 800dad4:	f005 fb84 	bl	80131e0 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800dad8:	4628      	mov	r0, r5
 800dada:	e7b2      	b.n	800da42 <USBD_CDC_Init+0x18>

0800dadc <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800dadc:	b119      	cbz	r1, 800dae6 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800dade:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800dae2:	2000      	movs	r0, #0
 800dae4:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800dae6:	2003      	movs	r0, #3
}
 800dae8:	4770      	bx	lr

0800daea <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800daea:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 800daee:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800daf0:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800daf4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800daf8:	4770      	bx	lr

0800dafa <USBD_CDC_SetRxBuffer>:
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800dafa:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
}
 800dafe:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800db00:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800db04:	4770      	bx	lr

0800db06 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db06:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800db0a:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800db0c:	b17a      	cbz	r2, 800db2e <USBD_CDC_TransmitPacket+0x28>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800db0e:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800db12:	2301      	movs	r3, #1
 800db14:	b96c      	cbnz	r4, 800db32 <USBD_CDC_TransmitPacket+0x2c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800db16:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800db1a:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800db1c:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800db20:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800db24:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800db26:	f005 fb4d 	bl	80131c4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800db2a:	4620      	mov	r0, r4
  }

  return (uint8_t)ret;
}
 800db2c:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800db2e:	2003      	movs	r0, #3
 800db30:	e7fc      	b.n	800db2c <USBD_CDC_TransmitPacket+0x26>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800db32:	4618      	mov	r0, r3
 800db34:	e7fa      	b.n	800db2c <USBD_CDC_TransmitPacket+0x26>

0800db36 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db36:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800db3a:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800db3c:	b162      	cbz	r2, 800db58 <USBD_CDC_ReceivePacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db3e:	7c04      	ldrb	r4, [r0, #16]
 800db40:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800db44:	b934      	cbnz	r4, 800db54 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800db46:	f44f 7300 	mov.w	r3, #512	; 0x200
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800db4a:	2101      	movs	r1, #1
 800db4c:	f005 fb48 	bl	80131e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800db50:	2000      	movs	r0, #0
}
 800db52:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800db54:	2340      	movs	r3, #64	; 0x40
 800db56:	e7f8      	b.n	800db4a <USBD_CDC_ReceivePacket+0x14>
    return (uint8_t)USBD_FAIL;
 800db58:	2003      	movs	r0, #3
 800db5a:	e7fa      	b.n	800db52 <USBD_CDC_ReceivePacket+0x1c>

0800db5c <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800db5c:	b1a0      	cbz	r0, 800db88 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800db5e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800db62:	b113      	cbz	r3, 800db6a <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 800db64:	2300      	movs	r3, #0
 800db66:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800db6a:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 800db6e:	b113      	cbz	r3, 800db76 <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 800db70:	2300      	movs	r3, #0
 800db72:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800db76:	b109      	cbz	r1, 800db7c <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 800db78:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db7c:	2301      	movs	r3, #1
  pdev->id = id;
 800db7e:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db80:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800db84:	f005 ba84 	b.w	8013090 <USBD_LL_Init>

  return ret;
}
 800db88:	2003      	movs	r0, #3
 800db8a:	4770      	bx	lr

0800db8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800db8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t len = 0U;
 800db8e:	2400      	movs	r4, #0
{
 800db90:	4605      	mov	r5, r0
  uint16_t len = 0U;
 800db92:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800db96:	b151      	cbz	r1, 800dbae <USBD_RegisterClass+0x22>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800db98:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800db9c:	f10d 0006 	add.w	r0, sp, #6
 800dba0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800dba2:	4798      	blx	r3
 800dba4:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800dba8:	4620      	mov	r0, r4
}
 800dbaa:	b003      	add	sp, #12
 800dbac:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800dbae:	2003      	movs	r0, #3
 800dbb0:	e7fb      	b.n	800dbaa <USBD_RegisterClass+0x1e>

0800dbb2 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dbb2:	f005 ba9d 	b.w	80130f0 <USBD_LL_Start>

0800dbb6 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800dbb6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dbba:	b10b      	cbz	r3, 800dbc0 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4718      	bx	r3
  }

  return ret;
}
 800dbc0:	2003      	movs	r0, #3
 800dbc2:	4770      	bx	lr

0800dbc4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dbc4:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800dbc6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dbca:	b10b      	cbz	r3, 800dbd0 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	4798      	blx	r3
  }

  return USBD_OK;
}
 800dbd0:	2000      	movs	r0, #0
 800dbd2:	bd08      	pop	{r3, pc}

0800dbd4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dbd4:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dbd6:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800dbda:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dbdc:	4628      	mov	r0, r5
 800dbde:	f000 fb0c 	bl	800e1fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dbe2:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800dbe4:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800dbe8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800dbec:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800dbf0:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800dbf4:	f001 031f 	and.w	r3, r1, #31
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d00f      	beq.n	800dc1c <USBD_LL_SetupStage+0x48>
 800dbfc:	d308      	bcc.n	800dc10 <USBD_LL_SetupStage+0x3c>
 800dbfe:	2b02      	cmp	r3, #2
 800dc00:	d012      	beq.n	800dc28 <USBD_LL_SetupStage+0x54>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dc02:	4620      	mov	r0, r4
 800dc04:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800dc08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dc0c:	f005 ba9c 	b.w	8013148 <USBD_LL_StallEP>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dc10:	4629      	mov	r1, r5
 800dc12:	4620      	mov	r0, r4
}
 800dc14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dc18:	f000 b8f4 	b.w	800de04 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dc1c:	4629      	mov	r1, r5
 800dc1e:	4620      	mov	r0, r4
}
 800dc20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dc24:	f000 ba2e 	b.w	800e084 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dc28:	4629      	mov	r1, r5
 800dc2a:	4620      	mov	r0, r4
}
 800dc2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dc30:	f000 ba4f 	b.w	800e0d2 <USBD_StdEPReq>

0800dc34 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dc34:	b570      	push	{r4, r5, r6, lr}
 800dc36:	4604      	mov	r4, r0
 800dc38:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dc3a:	bb09      	cbnz	r1, 800dc80 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dc3c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800dc40:	2b03      	cmp	r3, #3
 800dc42:	d10e      	bne.n	800dc62 <USBD_LL_DataOutStage+0x2e>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc44:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
 800dc48:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d90a      	bls.n	800dc66 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 800dc50:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dc52:	4631      	mov	r1, r6
 800dc54:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800dc56:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dc5a:	bf28      	it	cs
 800dc5c:	461a      	movcs	r2, r3
 800dc5e:	f000 fb2b 	bl	800e2b8 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800dc62:	2000      	movs	r0, #0
}
 800dc64:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800dc66:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dc6a:	691b      	ldr	r3, [r3, #16]
 800dc6c:	b123      	cbz	r3, 800dc78 <USBD_LL_DataOutStage+0x44>
 800dc6e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800dc72:	2a03      	cmp	r2, #3
 800dc74:	d100      	bne.n	800dc78 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 800dc76:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 800dc78:	4620      	mov	r0, r4
 800dc7a:	f000 fb25 	bl	800e2c8 <USBD_CtlSendStatus>
 800dc7e:	e7f0      	b.n	800dc62 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 800dc80:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dc84:	699b      	ldr	r3, [r3, #24]
 800dc86:	b133      	cbz	r3, 800dc96 <USBD_LL_DataOutStage+0x62>
 800dc88:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800dc8c:	2a03      	cmp	r2, #3
 800dc8e:	d102      	bne.n	800dc96 <USBD_LL_DataOutStage+0x62>
}
 800dc90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dc94:	4718      	bx	r3
    return USBD_FAIL;
 800dc96:	2003      	movs	r0, #3
 800dc98:	e7e4      	b.n	800dc64 <USBD_LL_DataOutStage+0x30>

0800dc9a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dc9a:	b570      	push	{r4, r5, r6, lr}
 800dc9c:	4604      	mov	r4, r0
 800dc9e:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dca0:	460d      	mov	r5, r1
 800dca2:	bbd1      	cbnz	r1, 800dd1a <USBD_LL_DataInStage+0x80>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dca4:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800dca8:	2b02      	cmp	r3, #2
 800dcaa:	d10e      	bne.n	800dcca <USBD_LL_DataInStage+0x30>
    {
      if (pep->rem_length > pep->maxpacket)
 800dcac:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d912      	bls.n	800dcda <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 800dcb4:	1ad2      	subs	r2, r2, r3

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dcb6:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 800dcb8:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dcba:	f000 fae6 	bl	800e28a <USBD_CtlContinueSendData>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dcbe:	462b      	mov	r3, r5
 800dcc0:	462a      	mov	r2, r5
 800dcc2:	4629      	mov	r1, r5
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	f005 fa8b 	bl	80131e0 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800dcca:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800dcce:	2000      	movs	r0, #0
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	d101      	bne.n	800dcd8 <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800dcd4:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800dcd8:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 800dcda:	d10c      	bne.n	800dcf6 <USBD_LL_DataInStage+0x5c>
            (pep->total_length >= pep->maxpacket) &&
 800dcdc:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d809      	bhi.n	800dcf6 <USBD_LL_DataInStage+0x5c>
            (pep->total_length >= pep->maxpacket) &&
 800dce2:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d205      	bcs.n	800dcf6 <USBD_LL_DataInStage+0x5c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dcea:	460a      	mov	r2, r1
 800dcec:	f000 facd 	bl	800e28a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dcf0:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800dcf4:	e7e3      	b.n	800dcbe <USBD_LL_DataInStage+0x24>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800dcf6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	b12b      	cbz	r3, 800dd0a <USBD_LL_DataInStage+0x70>
 800dcfe:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800dd02:	2a03      	cmp	r2, #3
 800dd04:	d101      	bne.n	800dd0a <USBD_LL_DataInStage+0x70>
            pdev->pClass->EP0_TxSent(pdev);
 800dd06:	4620      	mov	r0, r4
 800dd08:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd0a:	2180      	movs	r1, #128	; 0x80
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f005 fa1b 	bl	8013148 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dd12:	4620      	mov	r0, r4
 800dd14:	f000 fae3 	bl	800e2de <USBD_CtlReceiveStatus>
 800dd18:	e7d7      	b.n	800dcca <USBD_LL_DataInStage+0x30>
  else if ((pdev->pClass->DataIn != NULL) &&
 800dd1a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dd1e:	695b      	ldr	r3, [r3, #20]
 800dd20:	b133      	cbz	r3, 800dd30 <USBD_LL_DataInStage+0x96>
 800dd22:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800dd26:	2a03      	cmp	r2, #3
 800dd28:	d102      	bne.n	800dd30 <USBD_LL_DataInStage+0x96>
}
 800dd2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800dd2e:	4718      	bx	r3
    return USBD_FAIL;
 800dd30:	2003      	movs	r0, #3
 800dd32:	e7d1      	b.n	800dcd8 <USBD_LL_DataInStage+0x3e>

0800dd34 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd34:	2301      	movs	r3, #1
  pdev->ep0_state = USBD_EP0_IDLE;
 800dd36:	2100      	movs	r1, #0
{
 800dd38:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd3a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
{
 800dd3e:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 800dd40:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  pdev->ep0_state = USBD_EP0_IDLE;
 800dd44:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800dd48:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800dd4a:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 800dd4e:	b11b      	cbz	r3, 800dd58 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dd50:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd58:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd5a:	2540      	movs	r5, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dd5c:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd5e:	2340      	movs	r3, #64	; 0x40
 800dd60:	4611      	mov	r1, r2
 800dd62:	4620      	mov	r0, r4
 800dd64:	f005 f9d2 	bl	801310c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dd68:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd6c:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd70:	462b      	mov	r3, r5
 800dd72:	2200      	movs	r2, #0
 800dd74:	2180      	movs	r1, #128	; 0x80
 800dd76:	4620      	mov	r0, r4
 800dd78:	f005 f9c8 	bl	801310c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dd7c:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd7e:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 800dd80:	2000      	movs	r0, #0
 800dd82:	bd70      	pop	{r4, r5, r6, pc}

0800dd84 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800dd84:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800dd86:	2000      	movs	r0, #0
 800dd88:	4770      	bx	lr

0800dd8a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800dd8a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dd8e:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dd92:	2304      	movs	r3, #4
 800dd94:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800dd98:	2000      	movs	r0, #0
 800dd9a:	4770      	bx	lr

0800dd9c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dd9c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dda0:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800dda2:	bf04      	itt	eq
 800dda4:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800dda8:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800ddac:	2000      	movs	r0, #0
 800ddae:	4770      	bx	lr

0800ddb0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ddb0:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddb2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ddb6:	2a03      	cmp	r2, #3
 800ddb8:	d104      	bne.n	800ddc4 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800ddba:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ddbe:	69db      	ldr	r3, [r3, #28]
 800ddc0:	b103      	cbz	r3, 800ddc4 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800ddc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800ddc4:	2000      	movs	r0, #0
 800ddc6:	bd08      	pop	{r3, pc}

0800ddc8 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800ddc8:	2000      	movs	r0, #0
 800ddca:	4770      	bx	lr

0800ddcc <USBD_LL_IsoOUTIncomplete>:
 800ddcc:	2000      	movs	r0, #0
 800ddce:	4770      	bx	lr

0800ddd0 <USBD_LL_DevConnected>:
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	4770      	bx	lr

0800ddd4 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ddd4:	2201      	movs	r2, #1
{
 800ddd6:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ddd8:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800dddc:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800dde0:	b112      	cbz	r2, 800dde8 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dde2:	6852      	ldr	r2, [r2, #4]
 800dde4:	7901      	ldrb	r1, [r0, #4]
 800dde6:	4790      	blx	r2
  }

  return USBD_OK;
}
 800dde8:	2000      	movs	r0, #0
 800ddea:	bd08      	pop	{r3, pc}

0800ddec <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800ddec:	b510      	push	{r4, lr}
 800ddee:	4604      	mov	r4, r0
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddf0:	2180      	movs	r1, #128	; 0x80
 800ddf2:	f005 f9a9 	bl	8013148 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	4620      	mov	r0, r4
}
 800ddfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800ddfe:	f005 b9a3 	b.w	8013148 <USBD_LL_StallEP>
	...

0800de04 <USBD_StdDevReq>:
{
 800de04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de06:	780b      	ldrb	r3, [r1, #0]
{
 800de08:	4604      	mov	r4, r0
 800de0a:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de10:	2b20      	cmp	r3, #32
 800de12:	d012      	beq.n	800de3a <USBD_StdDevReq+0x36>
 800de14:	2b40      	cmp	r3, #64	; 0x40
 800de16:	d010      	beq.n	800de3a <USBD_StdDevReq+0x36>
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d158      	bne.n	800dece <USBD_StdDevReq+0xca>
    switch (req->bRequest)
 800de1c:	784b      	ldrb	r3, [r1, #1]
 800de1e:	2b09      	cmp	r3, #9
 800de20:	d855      	bhi.n	800dece <USBD_StdDevReq+0xca>
 800de22:	e8df f013 	tbh	[pc, r3, lsl #1]
 800de26:	0100      	.short	0x0100
 800de28:	0054011e 	.word	0x0054011e
 800de2c:	00540115 	.word	0x00540115
 800de30:	00140081 	.word	0x00140081
 800de34:	00e90054 	.word	0x00e90054
 800de38:	00a0      	.short	0x00a0
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de3a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800de3e:	4631      	mov	r1, r6
 800de40:	4620      	mov	r0, r4
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	4798      	blx	r3
 800de46:	4605      	mov	r5, r0
}
 800de48:	4628      	mov	r0, r5
 800de4a:	b003      	add	sp, #12
 800de4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t len = 0U;
 800de4e:	2300      	movs	r3, #0
 800de50:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800de54:	884b      	ldrh	r3, [r1, #2]
 800de56:	0a1a      	lsrs	r2, r3, #8
 800de58:	3a01      	subs	r2, #1
 800de5a:	2a06      	cmp	r2, #6
 800de5c:	d837      	bhi.n	800dece <USBD_StdDevReq+0xca>
 800de5e:	e8df f002 	tbb	[pc, r2]
 800de62:	1c04      	.short	0x1c04
 800de64:	4e363629 	.word	0x4e363629
 800de68:	58          	.byte	0x58
 800de69:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800de6a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800de6e:	681b      	ldr	r3, [r3, #0]
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800de70:	f10d 0106 	add.w	r1, sp, #6
 800de74:	7c20      	ldrb	r0, [r4, #16]
 800de76:	4798      	blx	r3
    if (req->wLength != 0U)
 800de78:	88f2      	ldrh	r2, [r6, #6]
 800de7a:	2a00      	cmp	r2, #0
 800de7c:	f000 80ed 	beq.w	800e05a <USBD_StdDevReq+0x256>
      if (len != 0U)
 800de80:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800de84:	b31b      	cbz	r3, 800dece <USBD_StdDevReq+0xca>
        len = MIN(len, req->wLength);
 800de86:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800de88:	4601      	mov	r1, r0
        len = MIN(len, req->wLength);
 800de8a:	bf28      	it	cs
 800de8c:	461a      	movcs	r2, r3
 800de8e:	f8ad 2006 	strh.w	r2, [sp, #6]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800de92:	4620      	mov	r0, r4
 800de94:	f000 f9ec 	bl	800e270 <USBD_CtlSendData>
 800de98:	e05f      	b.n	800df5a <USBD_StdDevReq+0x156>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de9a:	7c02      	ldrb	r2, [r0, #16]
 800de9c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dea0:	b932      	cbnz	r2, 800deb0 <USBD_StdDevReq+0xac>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dea4:	f10d 0006 	add.w	r0, sp, #6
 800dea8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800deaa:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800deac:	7043      	strb	r3, [r0, #1]
 800deae:	e7e3      	b.n	800de78 <USBD_StdDevReq+0x74>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800deb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb2:	e7f7      	b.n	800dea4 <USBD_StdDevReq+0xa0>
    switch ((uint8_t)(req->wValue))
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	2b05      	cmp	r3, #5
 800deb8:	d809      	bhi.n	800dece <USBD_StdDevReq+0xca>
 800deba:	e8df f003 	tbb	[pc, r3]
 800debe:	0c03      	.short	0x0c03
 800dec0:	1c181410 	.word	0x1c181410
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dec4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dec8:	685b      	ldr	r3, [r3, #4]
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1d0      	bne.n	800de70 <USBD_StdDevReq+0x6c>
      USBD_CtlError(pdev, req);
 800dece:	4620      	mov	r0, r4
 800ded0:	f7ff ff8c 	bl	800ddec <USBD_CtlError.constprop.1>
 800ded4:	e041      	b.n	800df5a <USBD_StdDevReq+0x156>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ded6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800deda:	689b      	ldr	r3, [r3, #8]
 800dedc:	e7f5      	b.n	800deca <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dede:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	e7f1      	b.n	800deca <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dee6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800deea:	691b      	ldr	r3, [r3, #16]
 800deec:	e7ed      	b.n	800deca <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800deee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800def2:	695b      	ldr	r3, [r3, #20]
 800def4:	e7e9      	b.n	800deca <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800def6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800defa:	699b      	ldr	r3, [r3, #24]
 800defc:	e7e5      	b.n	800deca <USBD_StdDevReq+0xc6>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800defe:	7c03      	ldrb	r3, [r0, #16]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1e4      	bne.n	800dece <USBD_StdDevReq+0xca>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800df04:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800df08:	f10d 0006 	add.w	r0, sp, #6
 800df0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df0e:	4798      	blx	r3
 800df10:	e7b2      	b.n	800de78 <USBD_StdDevReq+0x74>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df12:	7c03      	ldrb	r3, [r0, #16]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d1da      	bne.n	800dece <USBD_StdDevReq+0xca>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800df18:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800df1c:	f10d 0006 	add.w	r0, sp, #6
 800df20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df22:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800df24:	2307      	movs	r3, #7
 800df26:	e7c1      	b.n	800deac <USBD_StdDevReq+0xa8>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800df28:	888b      	ldrh	r3, [r1, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d1cf      	bne.n	800dece <USBD_StdDevReq+0xca>
 800df2e:	88cf      	ldrh	r7, [r1, #6]
 800df30:	2f00      	cmp	r7, #0
 800df32:	d1cc      	bne.n	800dece <USBD_StdDevReq+0xca>
 800df34:	884d      	ldrh	r5, [r1, #2]
 800df36:	2d7f      	cmp	r5, #127	; 0x7f
 800df38:	d8c9      	bhi.n	800dece <USBD_StdDevReq+0xca>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df3a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800df3e:	2b03      	cmp	r3, #3
 800df40:	d0c5      	beq.n	800dece <USBD_StdDevReq+0xca>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800df42:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800df44:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800df48:	f005 f92e 	bl	80131a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800df4c:	4620      	mov	r0, r4
 800df4e:	f000 f9bb 	bl	800e2c8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800df52:	b125      	cbz	r5, 800df5e <USBD_StdDevReq+0x15a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df54:	2302      	movs	r3, #2
 800df56:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
  USBD_StatusTypeDef ret = USBD_OK;
 800df5a:	2500      	movs	r5, #0
 800df5c:	e774      	b.n	800de48 <USBD_StdDevReq+0x44>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800df5e:	2301      	movs	r3, #1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df60:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800df64:	e770      	b.n	800de48 <USBD_StdDevReq+0x44>
  cfgidx = (uint8_t)(req->wValue);
 800df66:	788d      	ldrb	r5, [r1, #2]
 800df68:	4e45      	ldr	r6, [pc, #276]	; (800e080 <USBD_StdDevReq+0x27c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800df6a:	2d01      	cmp	r5, #1
  cfgidx = (uint8_t)(req->wValue);
 800df6c:	7035      	strb	r5, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800df6e:	d903      	bls.n	800df78 <USBD_StdDevReq+0x174>
    USBD_CtlError(pdev, req);
 800df70:	f7ff ff3c 	bl	800ddec <USBD_CtlError.constprop.1>
    ret = USBD_FAIL;
 800df74:	2503      	movs	r5, #3
 800df76:	e767      	b.n	800de48 <USBD_StdDevReq+0x44>
  switch (pdev->dev_state)
 800df78:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800df7c:	2b02      	cmp	r3, #2
 800df7e:	d008      	beq.n	800df92 <USBD_StdDevReq+0x18e>
 800df80:	2b03      	cmp	r3, #3
 800df82:	d016      	beq.n	800dfb2 <USBD_StdDevReq+0x1ae>
    USBD_CtlError(pdev, req);
 800df84:	f7ff ff32 	bl	800ddec <USBD_CtlError.constprop.1>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800df88:	7831      	ldrb	r1, [r6, #0]
 800df8a:	4620      	mov	r0, r4
 800df8c:	f7ff fe1a 	bl	800dbc4 <USBD_ClrClassConfig>
 800df90:	e7f0      	b.n	800df74 <USBD_StdDevReq+0x170>
    if (cfgidx != 0U)
 800df92:	2d00      	cmp	r5, #0
 800df94:	d061      	beq.n	800e05a <USBD_StdDevReq+0x256>
      pdev->dev_config = cfgidx;
 800df96:	2101      	movs	r1, #1
 800df98:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800df9a:	f7ff fe0c 	bl	800dbb6 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800df9e:	4605      	mov	r5, r0
        USBD_CtlError(pdev, req);
 800dfa0:	4620      	mov	r0, r4
      if (ret != USBD_OK)
 800dfa2:	b115      	cbz	r5, 800dfaa <USBD_StdDevReq+0x1a6>
        USBD_CtlError(pdev, req);
 800dfa4:	f7ff ff22 	bl	800ddec <USBD_CtlError.constprop.1>
 800dfa8:	e74e      	b.n	800de48 <USBD_StdDevReq+0x44>
        (void)USBD_CtlSendStatus(pdev);
 800dfaa:	f000 f98d 	bl	800e2c8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800dfae:	2303      	movs	r3, #3
 800dfb0:	e7d6      	b.n	800df60 <USBD_StdDevReq+0x15c>
    if (cfgidx == 0U)
 800dfb2:	b955      	cbnz	r5, 800dfca <USBD_StdDevReq+0x1c6>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800dfb4:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 800dfb6:	6045      	str	r5, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dfb8:	4629      	mov	r1, r5
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800dfba:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dfbe:	f7ff fe01 	bl	800dbc4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f000 f980 	bl	800e2c8 <USBD_CtlSendStatus>
 800dfc8:	e73e      	b.n	800de48 <USBD_StdDevReq+0x44>
    else if (cfgidx != pdev->dev_config)
 800dfca:	6841      	ldr	r1, [r0, #4]
 800dfcc:	2901      	cmp	r1, #1
 800dfce:	d044      	beq.n	800e05a <USBD_StdDevReq+0x256>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dfd0:	b2c9      	uxtb	r1, r1
 800dfd2:	f7ff fdf7 	bl	800dbc4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800dfd6:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800dfd8:	4620      	mov	r0, r4
      pdev->dev_config = cfgidx;
 800dfda:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800dfdc:	f7ff fdeb 	bl	800dbb6 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800dfe0:	4605      	mov	r5, r0
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	d039      	beq.n	800e05a <USBD_StdDevReq+0x256>
        USBD_CtlError(pdev, req);
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	f7ff ff00 	bl	800ddec <USBD_CtlError.constprop.1>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dfec:	7921      	ldrb	r1, [r4, #4]
 800dfee:	4620      	mov	r0, r4
 800dff0:	f7ff fde8 	bl	800dbc4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dff4:	2302      	movs	r3, #2
 800dff6:	e7b3      	b.n	800df60 <USBD_StdDevReq+0x15c>
  if (req->wLength != 1U)
 800dff8:	88ca      	ldrh	r2, [r1, #6]
 800dffa:	2a01      	cmp	r2, #1
 800dffc:	f47f af67 	bne.w	800dece <USBD_StdDevReq+0xca>
    switch (pdev->dev_state)
 800e000:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e004:	2b00      	cmp	r3, #0
 800e006:	f43f af62 	beq.w	800dece <USBD_StdDevReq+0xca>
 800e00a:	2b02      	cmp	r3, #2
 800e00c:	d904      	bls.n	800e018 <USBD_StdDevReq+0x214>
 800e00e:	2b03      	cmp	r3, #3
 800e010:	f47f af5d 	bne.w	800dece <USBD_StdDevReq+0xca>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e014:	1d01      	adds	r1, r0, #4
 800e016:	e73c      	b.n	800de92 <USBD_StdDevReq+0x8e>
      pdev->dev_default_config = 0U;
 800e018:	2500      	movs	r5, #0
 800e01a:	4601      	mov	r1, r0
 800e01c:	f841 5f08 	str.w	r5, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e020:	f000 f926 	bl	800e270 <USBD_CtlSendData>
 800e024:	e710      	b.n	800de48 <USBD_StdDevReq+0x44>
  switch (pdev->dev_state)
 800e026:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e02a:	3b01      	subs	r3, #1
 800e02c:	2b02      	cmp	r3, #2
 800e02e:	f63f af4e 	bhi.w	800dece <USBD_StdDevReq+0xca>
    if (req->wLength != 0x2U)
 800e032:	88cb      	ldrh	r3, [r1, #6]
 800e034:	2b02      	cmp	r3, #2
 800e036:	f47f af4a 	bne.w	800dece <USBD_StdDevReq+0xca>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e03a:	2301      	movs	r3, #1
 800e03c:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 800e03e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800e042:	b10b      	cbz	r3, 800e048 <USBD_StdDevReq+0x244>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e044:	2303      	movs	r3, #3
 800e046:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e048:	2202      	movs	r2, #2
 800e04a:	f104 010c 	add.w	r1, r4, #12
 800e04e:	e720      	b.n	800de92 <USBD_StdDevReq+0x8e>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e050:	884b      	ldrh	r3, [r1, #2]
 800e052:	2b01      	cmp	r3, #1
 800e054:	d181      	bne.n	800df5a <USBD_StdDevReq+0x156>
    pdev->dev_remote_wakeup = 1U;
 800e056:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e05a:	4620      	mov	r0, r4
 800e05c:	f000 f934 	bl	800e2c8 <USBD_CtlSendStatus>
 800e060:	e77b      	b.n	800df5a <USBD_StdDevReq+0x156>
  switch (pdev->dev_state)
 800e062:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e066:	3b01      	subs	r3, #1
 800e068:	2b02      	cmp	r3, #2
 800e06a:	f63f af30 	bhi.w	800dece <USBD_StdDevReq+0xca>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e06e:	884b      	ldrh	r3, [r1, #2]
 800e070:	2500      	movs	r5, #0
 800e072:	2b01      	cmp	r3, #1
 800e074:	f47f aee8 	bne.w	800de48 <USBD_StdDevReq+0x44>
        pdev->dev_remote_wakeup = 0U;
 800e078:	f8c0 52a4 	str.w	r5, [r0, #676]	; 0x2a4
 800e07c:	e7a1      	b.n	800dfc2 <USBD_StdDevReq+0x1be>
 800e07e:	bf00      	nop
 800e080:	24000900 	.word	0x24000900

0800e084 <USBD_StdItfReq>:
{
 800e084:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e086:	780b      	ldrb	r3, [r1, #0]
{
 800e088:	4604      	mov	r4, r0
 800e08a:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e08c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e090:	2b20      	cmp	r3, #32
 800e092:	d002      	beq.n	800e09a <USBD_StdItfReq+0x16>
 800e094:	2b40      	cmp	r3, #64	; 0x40
 800e096:	d000      	beq.n	800e09a <USBD_StdItfReq+0x16>
 800e098:	b9b3      	cbnz	r3, 800e0c8 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 800e09a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	2b02      	cmp	r3, #2
 800e0a2:	d811      	bhi.n	800e0c8 <USBD_StdItfReq+0x44>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e0a4:	7933      	ldrb	r3, [r6, #4]
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d80e      	bhi.n	800e0c8 <USBD_StdItfReq+0x44>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e0aa:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e0ae:	4631      	mov	r1, r6
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	689b      	ldr	r3, [r3, #8]
 800e0b4:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e0b6:	88f3      	ldrh	r3, [r6, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e0b8:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e0ba:	b91b      	cbnz	r3, 800e0c4 <USBD_StdItfReq+0x40>
 800e0bc:	b910      	cbnz	r0, 800e0c4 <USBD_StdItfReq+0x40>
          (void)USBD_CtlSendStatus(pdev);
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f000 f902 	bl	800e2c8 <USBD_CtlSendStatus>
}
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	bd70      	pop	{r4, r5, r6, pc}
      USBD_CtlError(pdev, req);
 800e0c8:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800e0ca:	2500      	movs	r5, #0
      USBD_CtlError(pdev, req);
 800e0cc:	f7ff fe8e 	bl	800ddec <USBD_CtlError.constprop.1>
      break;
 800e0d0:	e7f8      	b.n	800e0c4 <USBD_StdItfReq+0x40>

0800e0d2 <USBD_StdEPReq>:
{
 800e0d2:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0d4:	780b      	ldrb	r3, [r1, #0]
{
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e0de:	2b20      	cmp	r3, #32
 800e0e0:	d014      	beq.n	800e10c <USBD_StdEPReq+0x3a>
 800e0e2:	2b40      	cmp	r3, #64	; 0x40
 800e0e4:	d012      	beq.n	800e10c <USBD_StdEPReq+0x3a>
 800e0e6:	b96b      	cbnz	r3, 800e104 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 800e0e8:	786a      	ldrb	r2, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 800e0ea:	888b      	ldrh	r3, [r1, #4]
    switch (req->bRequest)
 800e0ec:	2a01      	cmp	r2, #1
  ep_addr = LOBYTE(req->wIndex);
 800e0ee:	b2d9      	uxtb	r1, r3
    switch (req->bRequest)
 800e0f0:	d021      	beq.n	800e136 <USBD_StdEPReq+0x64>
 800e0f2:	d340      	bcc.n	800e176 <USBD_StdEPReq+0xa4>
 800e0f4:	2a03      	cmp	r2, #3
 800e0f6:	d105      	bne.n	800e104 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 800e0f8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e0fc:	2b02      	cmp	r3, #2
 800e0fe:	d031      	beq.n	800e164 <USBD_StdEPReq+0x92>
 800e100:	2b03      	cmp	r3, #3
 800e102:	d00b      	beq.n	800e11c <USBD_StdEPReq+0x4a>
        USBD_CtlError(pdev, req);
 800e104:	4620      	mov	r0, r4
 800e106:	f7ff fe71 	bl	800ddec <USBD_CtlError.constprop.1>
        break;
 800e10a:	e012      	b.n	800e132 <USBD_StdEPReq+0x60>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e10c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e110:	4629      	mov	r1, r5
 800e112:	4620      	mov	r0, r4
 800e114:	689b      	ldr	r3, [r3, #8]
}
 800e116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e11a:	4718      	bx	r3
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e11c:	886b      	ldrh	r3, [r5, #2]
 800e11e:	b92b      	cbnz	r3, 800e12c <USBD_StdEPReq+0x5a>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e120:	064a      	lsls	r2, r1, #25
 800e122:	d003      	beq.n	800e12c <USBD_StdEPReq+0x5a>
 800e124:	88eb      	ldrh	r3, [r5, #6]
 800e126:	b90b      	cbnz	r3, 800e12c <USBD_StdEPReq+0x5a>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800e128:	f005 f80e 	bl	8013148 <USBD_LL_StallEP>
        (void)USBD_CtlSendStatus(pdev);
 800e12c:	4620      	mov	r0, r4
 800e12e:	f000 f8cb 	bl	800e2c8 <USBD_CtlSendStatus>
}
 800e132:	2000      	movs	r0, #0
 800e134:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800e136:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e13a:	2b02      	cmp	r3, #2
 800e13c:	d012      	beq.n	800e164 <USBD_StdEPReq+0x92>
 800e13e:	2b03      	cmp	r3, #3
 800e140:	d1e0      	bne.n	800e104 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e142:	886b      	ldrh	r3, [r5, #2]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d1f4      	bne.n	800e132 <USBD_StdEPReq+0x60>
          if ((ep_addr & 0x7FU) != 0x00U)
 800e148:	064e      	lsls	r6, r1, #25
 800e14a:	d001      	beq.n	800e150 <USBD_StdEPReq+0x7e>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e14c:	f005 f80a 	bl	8013164 <USBD_LL_ClearStallEP>
          (void)USBD_CtlSendStatus(pdev);
 800e150:	4620      	mov	r0, r4
 800e152:	f000 f8b9 	bl	800e2c8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e156:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e15a:	4629      	mov	r1, r5
 800e15c:	4620      	mov	r0, r4
 800e15e:	689b      	ldr	r3, [r3, #8]
 800e160:	4798      	blx	r3
 800e162:	e7e6      	b.n	800e132 <USBD_StdEPReq+0x60>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e164:	064b      	lsls	r3, r1, #25
 800e166:	d0cd      	beq.n	800e104 <USBD_StdEPReq+0x32>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e168:	f004 ffee 	bl	8013148 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e16c:	2180      	movs	r1, #128	; 0x80
 800e16e:	4620      	mov	r0, r4
 800e170:	f004 ffea 	bl	8013148 <USBD_LL_StallEP>
 800e174:	e7dd      	b.n	800e132 <USBD_StdEPReq+0x60>
      switch (pdev->dev_state)
 800e176:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e17a:	2a02      	cmp	r2, #2
 800e17c:	d019      	beq.n	800e1b2 <USBD_StdEPReq+0xe0>
 800e17e:	2a03      	cmp	r2, #3
 800e180:	d1c0      	bne.n	800e104 <USBD_StdEPReq+0x32>
 800e182:	f001 020f 	and.w	r2, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 800e186:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e18a:	f04f 0314 	mov.w	r3, #20
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e18e:	fb03 0202 	mla	r2, r3, r2, r0
        if ((ep_addr & 0x80U) == 0x80U)
 800e192:	d01f      	beq.n	800e1d4 <USBD_StdEPReq+0x102>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e194:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800e196:	2a00      	cmp	r2, #0
 800e198:	d0b4      	beq.n	800e104 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e19a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800e19e:	fb05 3503 	mla	r5, r5, r3, r3
 800e1a2:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e1a4:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800e1a8:	d11f      	bne.n	800e1ea <USBD_StdEPReq+0x118>
            pep->status = 0x0001U;
 800e1aa:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e1ac:	2202      	movs	r2, #2
 800e1ae:	4629      	mov	r1, r5
 800e1b0:	e00c      	b.n	800e1cc <USBD_StdEPReq+0xfa>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1b2:	064a      	lsls	r2, r1, #25
 800e1b4:	d1a6      	bne.n	800e104 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1b6:	061b      	lsls	r3, r3, #24
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e1b8:	f04f 0202 	mov.w	r2, #2
        pep->status = 0x0000U;
 800e1bc:	f04f 0300 	mov.w	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1c0:	bf4c      	ite	mi
 800e1c2:	f100 0114 	addmi.w	r1, r0, #20
 800e1c6:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
        pep->status = 0x0000U;
 800e1ca:	600b      	str	r3, [r1, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	f000 f84f 	bl	800e270 <USBD_CtlSendData>
          break;
 800e1d2:	e7ae      	b.n	800e132 <USBD_StdEPReq+0x60>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e1d4:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800e1d8:	2a00      	cmp	r2, #0
 800e1da:	d093      	beq.n	800e104 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1dc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800e1e0:	fb03 0505 	mla	r5, r3, r5, r0
 800e1e4:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800e1e8:	e7dc      	b.n	800e1a4 <USBD_StdEPReq+0xd2>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	f004 ffc8 	bl	8013180 <USBD_LL_IsStallEP>
 800e1f0:	b108      	cbz	r0, 800e1f6 <USBD_StdEPReq+0x124>
            pep->status = 0x0001U;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	e7d9      	b.n	800e1aa <USBD_StdEPReq+0xd8>
            pep->status = 0x0000U;
 800e1f6:	6028      	str	r0, [r5, #0]
 800e1f8:	e7d8      	b.n	800e1ac <USBD_StdEPReq+0xda>

0800e1fa <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800e1fa:	780b      	ldrb	r3, [r1, #0]
 800e1fc:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800e1fe:	784b      	ldrb	r3, [r1, #1]
 800e200:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e202:	78ca      	ldrb	r2, [r1, #3]
 800e204:	788b      	ldrb	r3, [r1, #2]
 800e206:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800e20a:	8043      	strh	r3, [r0, #2]
 800e20c:	794a      	ldrb	r2, [r1, #5]
 800e20e:	790b      	ldrb	r3, [r1, #4]
 800e210:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800e214:	8083      	strh	r3, [r0, #4]
 800e216:	79ca      	ldrb	r2, [r1, #7]
 800e218:	798b      	ldrb	r3, [r1, #6]
 800e21a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800e21e:	80c3      	strh	r3, [r0, #6]
}
 800e220:	4770      	bx	lr

0800e222 <USBD_CtlError>:
{
 800e222:	b510      	push	{r4, lr}
 800e224:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e226:	2180      	movs	r1, #128	; 0x80
 800e228:	f004 ff8e 	bl	8013148 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e22c:	2100      	movs	r1, #0
 800e22e:	4620      	mov	r0, r4
}
 800e230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800e234:	f004 bf88 	b.w	8013148 <USBD_LL_StallEP>

0800e238 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e238:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800e23a:	b188      	cbz	r0, 800e260 <USBD_GetString+0x28>
 800e23c:	4605      	mov	r5, r0
 800e23e:	1a2b      	subs	r3, r5, r0
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800e240:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e244:	b2db      	uxtb	r3, r3
 800e246:	2c00      	cmp	r4, #0
 800e248:	d1f9      	bne.n	800e23e <USBD_GetString+0x6>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e24a:	3301      	adds	r3, #1
 800e24c:	3801      	subs	r0, #1
 800e24e:	005b      	lsls	r3, r3, #1
 800e250:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800e252:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e254:	2303      	movs	r3, #3
 800e256:	704b      	strb	r3, [r1, #1]
  idx++;
 800e258:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800e25a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800e25e:	b902      	cbnz	r2, 800e262 <USBD_GetString+0x2a>
}
 800e260:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 800e262:	54ca      	strb	r2, [r1, r3]
    idx++;
 800e264:	1c5a      	adds	r2, r3, #1
    idx++;
 800e266:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800e268:	b2d2      	uxtb	r2, r2
    idx++;
 800e26a:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800e26c:	548c      	strb	r4, [r1, r2]
 800e26e:	e7f4      	b.n	800e25a <USBD_GetString+0x22>

0800e270 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e270:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e272:	2202      	movs	r2, #2
{
 800e274:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e276:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e27a:	460a      	mov	r2, r1
 800e27c:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length = len;
 800e27e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e282:	f004 ff9f 	bl	80131c4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800e286:	2000      	movs	r0, #0
 800e288:	bd10      	pop	{r4, pc}

0800e28a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e28a:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e28c:	4613      	mov	r3, r2
 800e28e:	460a      	mov	r2, r1
 800e290:	2100      	movs	r1, #0
 800e292:	f004 ff97 	bl	80131c4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800e296:	2000      	movs	r0, #0
 800e298:	bd08      	pop	{r3, pc}

0800e29a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e29a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e29c:	2203      	movs	r2, #3
{
 800e29e:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e2a0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2a4:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 800e2a6:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2aa:	2100      	movs	r1, #0
  pdev->ep_out[0].rem_length = len;
 800e2ac:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2b0:	f004 ff96 	bl	80131e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e2b4:	2000      	movs	r0, #0
 800e2b6:	bd10      	pop	{r4, pc}

0800e2b8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e2b8:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	460a      	mov	r2, r1
 800e2be:	2100      	movs	r1, #0
 800e2c0:	f004 ff8e 	bl	80131e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	bd08      	pop	{r3, pc}

0800e2c8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e2c8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e2ca:	2304      	movs	r3, #4
 800e2cc:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	f004 ff75 	bl	80131c4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800e2da:	2000      	movs	r0, #0
 800e2dc:	bd08      	pop	{r3, pc}

0800e2de <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e2de:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e2e0:	2305      	movs	r3, #5
 800e2e2:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	f004 ff78 	bl	80131e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e2f0:	2000      	movs	r0, #0
 800e2f2:	bd08      	pop	{r3, pc}

0800e2f4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e2f4:	4b03      	ldr	r3, [pc, #12]	; (800e304 <disk_status+0x10>)
 800e2f6:	181a      	adds	r2, r3, r0
 800e2f8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	7a10      	ldrb	r0, [r2, #8]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	4718      	bx	r3
 800e304:	2400092c 	.word	0x2400092c

0800e308 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800e308:	4b06      	ldr	r3, [pc, #24]	; (800e324 <disk_initialize+0x1c>)
 800e30a:	5c1a      	ldrb	r2, [r3, r0]
 800e30c:	b942      	cbnz	r2, 800e320 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 800e30e:	2201      	movs	r2, #1
 800e310:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e312:	181a      	adds	r2, r3, r0
 800e314:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800e318:	7a10      	ldrb	r0, [r2, #8]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4718      	bx	r3
  }
  return stat;
}
 800e320:	2000      	movs	r0, #0
 800e322:	4770      	bx	lr
 800e324:	2400092c 	.word	0x2400092c

0800e328 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e328:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e32a:	4c05      	ldr	r4, [pc, #20]	; (800e340 <disk_read+0x18>)
 800e32c:	1825      	adds	r5, r4, r0
 800e32e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800e332:	6860      	ldr	r0, [r4, #4]
 800e334:	6884      	ldr	r4, [r0, #8]
 800e336:	7a28      	ldrb	r0, [r5, #8]
 800e338:	46a4      	mov	ip, r4
  return res;
}
 800e33a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e33c:	4760      	bx	ip
 800e33e:	bf00      	nop
 800e340:	2400092c 	.word	0x2400092c

0800e344 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e344:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e346:	4c05      	ldr	r4, [pc, #20]	; (800e35c <disk_write+0x18>)
 800e348:	1825      	adds	r5, r4, r0
 800e34a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800e34e:	6860      	ldr	r0, [r4, #4]
 800e350:	68c4      	ldr	r4, [r0, #12]
 800e352:	7a28      	ldrb	r0, [r5, #8]
 800e354:	46a4      	mov	ip, r4
  return res;
}
 800e356:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e358:	4760      	bx	ip
 800e35a:	bf00      	nop
 800e35c:	2400092c 	.word	0x2400092c

0800e360 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e360:	4b05      	ldr	r3, [pc, #20]	; (800e378 <disk_ioctl+0x18>)
{
 800e362:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e364:	181c      	adds	r4, r3, r0
 800e366:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	7a20      	ldrb	r0, [r4, #8]
 800e36e:	691b      	ldr	r3, [r3, #16]
  return res;
}
 800e370:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e374:	4718      	bx	r3
 800e376:	bf00      	nop
 800e378:	2400092c 	.word	0x2400092c

0800e37c <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 800e37c:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 800e37e:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 800e380:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 800e382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 800e386:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800e38a:	4770      	bx	lr

0800e38c <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800e38c:	0a0b      	lsrs	r3, r1, #8
 800e38e:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e390:	7043      	strb	r3, [r0, #1]
 800e392:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800e394:	0e09      	lsrs	r1, r1, #24
 800e396:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800e398:	70c1      	strb	r1, [r0, #3]
}
 800e39a:	4770      	bx	lr

0800e39c <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e39c:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800e39e:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 800e3a2:	4290      	cmp	r0, r2
 800e3a4:	d1fb      	bne.n	800e39e <mem_set+0x2>
}
 800e3a6:	4770      	bx	lr

0800e3a8 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800e3a8:	4a1b      	ldr	r2, [pc, #108]	; (800e418 <chk_lock+0x70>)
 800e3aa:	6813      	ldr	r3, [r2, #0]
{
 800e3ac:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 800e3ae:	b163      	cbz	r3, 800e3ca <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e3b0:	6804      	ldr	r4, [r0, #0]
 800e3b2:	429c      	cmp	r4, r3
 800e3b4:	d107      	bne.n	800e3c6 <chk_lock+0x1e>
 800e3b6:	6854      	ldr	r4, [r2, #4]
 800e3b8:	6883      	ldr	r3, [r0, #8]
 800e3ba:	429c      	cmp	r4, r3
 800e3bc:	d103      	bne.n	800e3c6 <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 800e3be:	6894      	ldr	r4, [r2, #8]
 800e3c0:	6943      	ldr	r3, [r0, #20]
 800e3c2:	429c      	cmp	r4, r3
 800e3c4:	d020      	beq.n	800e408 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e3c6:	2400      	movs	r4, #0
 800e3c8:	e000      	b.n	800e3cc <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 800e3ca:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 800e3cc:	6913      	ldr	r3, [r2, #16]
 800e3ce:	b1cb      	cbz	r3, 800e404 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e3d0:	6805      	ldr	r5, [r0, #0]
 800e3d2:	42ab      	cmp	r3, r5
 800e3d4:	d107      	bne.n	800e3e6 <chk_lock+0x3e>
 800e3d6:	6955      	ldr	r5, [r2, #20]
 800e3d8:	6883      	ldr	r3, [r0, #8]
 800e3da:	429d      	cmp	r5, r3
 800e3dc:	d103      	bne.n	800e3e6 <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 800e3de:	6995      	ldr	r5, [r2, #24]
 800e3e0:	6943      	ldr	r3, [r0, #20]
 800e3e2:	429d      	cmp	r5, r3
 800e3e4:	d015      	beq.n	800e412 <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e3e6:	b96c      	cbnz	r4, 800e404 <chk_lock+0x5c>
 800e3e8:	2902      	cmp	r1, #2
 800e3ea:	bf0c      	ite	eq
 800e3ec:	2000      	moveq	r0, #0
 800e3ee:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 800e3f0:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e3f2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800e3f6:	8993      	ldrh	r3, [r2, #12]
 800e3f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3fc:	bf14      	ite	ne
 800e3fe:	2000      	movne	r0, #0
 800e400:	2010      	moveq	r0, #16
 800e402:	e7f5      	b.n	800e3f0 <chk_lock+0x48>
 800e404:	2000      	movs	r0, #0
 800e406:	e7f3      	b.n	800e3f0 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e408:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e40a:	2900      	cmp	r1, #0
 800e40c:	d0f1      	beq.n	800e3f2 <chk_lock+0x4a>
 800e40e:	2010      	movs	r0, #16
 800e410:	e7ee      	b.n	800e3f0 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e412:	2301      	movs	r3, #1
 800e414:	e7f9      	b.n	800e40a <chk_lock+0x62>
 800e416:	bf00      	nop
 800e418:	24000908 	.word	0x24000908

0800e41c <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800e41c:	4a1e      	ldr	r2, [pc, #120]	; (800e498 <inc_lock+0x7c>)
{
 800e41e:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 800e420:	6813      	ldr	r3, [r2, #0]
 800e422:	6805      	ldr	r5, [r0, #0]
 800e424:	429d      	cmp	r5, r3
 800e426:	d107      	bne.n	800e438 <inc_lock+0x1c>
 800e428:	6856      	ldr	r6, [r2, #4]
 800e42a:	6884      	ldr	r4, [r0, #8]
 800e42c:	42a6      	cmp	r6, r4
 800e42e:	d103      	bne.n	800e438 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 800e430:	6946      	ldr	r6, [r0, #20]
 800e432:	6894      	ldr	r4, [r2, #8]
 800e434:	42a6      	cmp	r6, r4
 800e436:	d021      	beq.n	800e47c <inc_lock+0x60>
		if (Files[i].fs == dp->obj.fs &&
 800e438:	6914      	ldr	r4, [r2, #16]
 800e43a:	42ac      	cmp	r4, r5
 800e43c:	d107      	bne.n	800e44e <inc_lock+0x32>
 800e43e:	6957      	ldr	r7, [r2, #20]
 800e440:	6886      	ldr	r6, [r0, #8]
 800e442:	42b7      	cmp	r7, r6
 800e444:	d103      	bne.n	800e44e <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 800e446:	6997      	ldr	r7, [r2, #24]
 800e448:	6946      	ldr	r6, [r0, #20]
 800e44a:	42b7      	cmp	r7, r6
 800e44c:	d020      	beq.n	800e490 <inc_lock+0x74>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e44e:	b10b      	cbz	r3, 800e454 <inc_lock+0x38>
 800e450:	bb04      	cbnz	r4, 800e494 <inc_lock+0x78>
 800e452:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 800e454:	011e      	lsls	r6, r3, #4
 800e456:	1994      	adds	r4, r2, r6
 800e458:	5195      	str	r5, [r2, r6]
		Files[i].clu = dp->obj.sclust;
 800e45a:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 800e45c:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 800e45e:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 800e460:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 800e462:	2000      	movs	r0, #0
 800e464:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e466:	b981      	cbnz	r1, 800e48a <inc_lock+0x6e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e468:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 800e46c:	8989      	ldrh	r1, [r1, #12]
 800e46e:	3101      	adds	r1, #1
 800e470:	b289      	uxth	r1, r1
 800e472:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 800e476:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e478:	8191      	strh	r1, [r2, #12]
}
 800e47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e47c:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e47e:	2900      	cmp	r1, #0
 800e480:	d0f2      	beq.n	800e468 <inc_lock+0x4c>
 800e482:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 800e486:	8989      	ldrh	r1, [r1, #12]
 800e488:	b921      	cbnz	r1, 800e494 <inc_lock+0x78>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e48a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e48e:	e7f0      	b.n	800e472 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e490:	2301      	movs	r3, #1
 800e492:	e7f4      	b.n	800e47e <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e494:	2000      	movs	r0, #0
 800e496:	e7f0      	b.n	800e47a <inc_lock+0x5e>
 800e498:	24000908 	.word	0x24000908

0800e49c <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e49c:	3801      	subs	r0, #1
 800e49e:	2801      	cmp	r0, #1
 800e4a0:	d814      	bhi.n	800e4cc <dec_lock+0x30>
		n = Files[i].ctr;
 800e4a2:	490b      	ldr	r1, [pc, #44]	; (800e4d0 <dec_lock+0x34>)
 800e4a4:	0102      	lsls	r2, r0, #4
 800e4a6:	1888      	adds	r0, r1, r2
 800e4a8:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e4aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4ae:	d104      	bne.n	800e4ba <dec_lock+0x1e>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	5088      	str	r0, [r1, r2]
 800e4b8:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d0fa      	beq.n	800e4b4 <dec_lock+0x18>
 800e4be:	3b01      	subs	r3, #1
 800e4c0:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 800e4c2:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d0f5      	beq.n	800e4b4 <dec_lock+0x18>
		res = FR_OK;
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e4cc:	2002      	movs	r0, #2
	}
	return res;
}
 800e4ce:	4770      	bx	lr
 800e4d0:	24000908 	.word	0x24000908

0800e4d4 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e4d4:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 800e4d6:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e4d8:	3b02      	subs	r3, #2
 800e4da:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 800e4dc:	bf83      	ittte	hi
 800e4de:	8943      	ldrhhi	r3, [r0, #10]
 800e4e0:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
 800e4e2:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e4e6:	2000      	movls	r0, #0
}
 800e4e8:	4770      	bx	lr

0800e4ea <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e4ea:	6802      	ldr	r2, [r0, #0]
 800e4ec:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e4ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e4f0:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e4f2:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e4f4:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e4f8:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e4fa:	b130      	cbz	r0, 800e50a <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 800e4fc:	4281      	cmp	r1, r0
 800e4fe:	d302      	bcc.n	800e506 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 800e500:	1a09      	subs	r1, r1, r0
 800e502:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e504:	e7f8      	b.n	800e4f8 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 800e506:	6858      	ldr	r0, [r3, #4]
 800e508:	4408      	add	r0, r1
}
 800e50a:	4770      	bx	lr

0800e50c <get_achar>:
)
{
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800e50c:	6803      	ldr	r3, [r0, #0]
 800e50e:	1c5a      	adds	r2, r3, #1
 800e510:	6002      	str	r2, [r0, #0]
 800e512:	781a      	ldrb	r2, [r3, #0]
 800e514:	b290      	uxth	r0, r2
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800e516:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e51a:	2b19      	cmp	r3, #25
 800e51c:	d802      	bhi.n	800e524 <get_achar+0x18>
 800e51e:	3820      	subs	r0, #32
 800e520:	b280      	uxth	r0, r0
 800e522:	4770      	bx	lr
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800e524:	287f      	cmp	r0, #127	; 0x7f
 800e526:	bf82      	ittt	hi
 800e528:	4b02      	ldrhi	r3, [pc, #8]	; (800e534 <get_achar+0x28>)
 800e52a:	189b      	addhi	r3, r3, r2
 800e52c:	f813 0c80 	ldrbhi.w	r0, [r3, #-128]
#endif
	return chr;
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	08016840 	.word	0x08016840

0800e538 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800e538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e53a:	b085      	sub	sp, #20
 800e53c:	4605      	mov	r5, r0
 800e53e:	461e      	mov	r6, r3
 800e540:	ac04      	add	r4, sp, #16
 800e542:	f844 1d0c 	str.w	r1, [r4, #-12]!
 800e546:	4611      	mov	r1, r2
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800e548:	b929      	cbnz	r1, 800e556 <pattern_matching+0x1e>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800e54a:	782b      	ldrb	r3, [r5, #0]
 800e54c:	b95b      	cbnz	r3, 800e566 <pattern_matching+0x2e>
 800e54e:	b156      	cbz	r6, 800e566 <pattern_matching+0x2e>
 800e550:	2001      	movs	r0, #1
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800e552:	b005      	add	sp, #20
 800e554:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800e556:	4620      	mov	r0, r4
 800e558:	f7ff ffd8 	bl	800e50c <get_achar>
 800e55c:	3901      	subs	r1, #1
 800e55e:	2800      	cmp	r0, #0
 800e560:	d1f2      	bne.n	800e548 <pattern_matching+0x10>
 800e562:	2000      	movs	r0, #0
 800e564:	e7f5      	b.n	800e552 <pattern_matching+0x1a>
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800e566:	ac04      	add	r4, sp, #16
 800e568:	9b01      	ldr	r3, [sp, #4]
 800e56a:	9502      	str	r5, [sp, #8]
 800e56c:	f844 3d04 	str.w	r3, [r4, #-4]!
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800e570:	9b02      	ldr	r3, [sp, #8]
 800e572:	781b      	ldrb	r3, [r3, #0]
 800e574:	2b3f      	cmp	r3, #63	; 0x3f
 800e576:	d001      	beq.n	800e57c <pattern_matching+0x44>
 800e578:	2b2a      	cmp	r3, #42	; 0x2a
 800e57a:	d11d      	bne.n	800e5b8 <pattern_matching+0x80>
 800e57c:	2300      	movs	r3, #0
 800e57e:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800e580:	9902      	ldr	r1, [sp, #8]
 800e582:	1c48      	adds	r0, r1, #1
 800e584:	9002      	str	r0, [sp, #8]
 800e586:	780c      	ldrb	r4, [r1, #0]
				} while (*pp == '?' || *pp == '*');
 800e588:	7849      	ldrb	r1, [r1, #1]
					if (*pp++ == '?') nm++; else nx = 1;
 800e58a:	2c3f      	cmp	r4, #63	; 0x3f
 800e58c:	bf0c      	ite	eq
 800e58e:	3201      	addeq	r2, #1
 800e590:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800e592:	293f      	cmp	r1, #63	; 0x3f
 800e594:	d0f4      	beq.n	800e580 <pattern_matching+0x48>
 800e596:	292a      	cmp	r1, #42	; 0x2a
 800e598:	d0f2      	beq.n	800e580 <pattern_matching+0x48>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800e59a:	9903      	ldr	r1, [sp, #12]
 800e59c:	f7ff ffcc 	bl	800e538 <pattern_matching>
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	d1d5      	bne.n	800e550 <pattern_matching+0x18>
				nc = *np; break;	/* Branch mismatched */
 800e5a4:	9b03      	ldr	r3, [sp, #12]
 800e5a6:	7819      	ldrb	r1, [r3, #0]
		get_achar(&nam);			/* nam++ */
 800e5a8:	a801      	add	r0, sp, #4
 800e5aa:	f7ff ffaf 	bl	800e50c <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800e5ae:	2e00      	cmp	r6, #0
 800e5b0:	d0d7      	beq.n	800e562 <pattern_matching+0x2a>
 800e5b2:	2900      	cmp	r1, #0
 800e5b4:	d1d7      	bne.n	800e566 <pattern_matching+0x2e>
 800e5b6:	e7d4      	b.n	800e562 <pattern_matching+0x2a>
			pc = get_achar(&pp);	/* Get a pattern char */
 800e5b8:	a802      	add	r0, sp, #8
 800e5ba:	f7ff ffa7 	bl	800e50c <get_achar>
 800e5be:	4607      	mov	r7, r0
			nc = get_achar(&np);	/* Get a name char */
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	f7ff ffa3 	bl	800e50c <get_achar>
			if (pc != nc) break;	/* Branch mismatched? */
 800e5c6:	4287      	cmp	r7, r0
			nc = get_achar(&np);	/* Get a name char */
 800e5c8:	4601      	mov	r1, r0
			if (pc != nc) break;	/* Branch mismatched? */
 800e5ca:	d1ed      	bne.n	800e5a8 <pattern_matching+0x70>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800e5cc:	2f00      	cmp	r7, #0
 800e5ce:	d1cf      	bne.n	800e570 <pattern_matching+0x38>
 800e5d0:	e7be      	b.n	800e550 <pattern_matching+0x18>

0800e5d2 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e5d2:	6802      	ldr	r2, [r0, #0]
{
 800e5d4:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 800e5d6:	b152      	cbz	r2, 800e5ee <get_ldnumber+0x1c>
 800e5d8:	4611      	mov	r1, r2
 800e5da:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e5dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5e0:	2c20      	cmp	r4, #32
 800e5e2:	d90c      	bls.n	800e5fe <get_ldnumber+0x2c>
 800e5e4:	2c3a      	cmp	r4, #58	; 0x3a
 800e5e6:	d1f8      	bne.n	800e5da <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 800e5e8:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e5ea:	428b      	cmp	r3, r1
 800e5ec:	d002      	beq.n	800e5f4 <get_ldnumber+0x22>
	int vol = -1;
 800e5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f2:	e005      	b.n	800e600 <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e5f4:	7812      	ldrb	r2, [r2, #0]
 800e5f6:	2a30      	cmp	r2, #48	; 0x30
 800e5f8:	d1f9      	bne.n	800e5ee <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e5fe:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800e600:	bd10      	pop	{r4, pc}

0800e602 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e602:	3801      	subs	r0, #1
 800e604:	440a      	add	r2, r1
			*d++ = *s++;
 800e606:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800e60a:	4291      	cmp	r1, r2
			*d++ = *s++;
 800e60c:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800e610:	d1f9      	bne.n	800e606 <mem_cpy.part.0+0x4>
}
 800e612:	4770      	bx	lr

0800e614 <ld_clust.isra.1>:
	if (fs->fs_type == FS_FAT32) {
 800e614:	2803      	cmp	r0, #3
	rv = rv << 8 | ptr[0];
 800e616:	7eca      	ldrb	r2, [r1, #27]
 800e618:	7e8b      	ldrb	r3, [r1, #26]
 800e61a:	bf08      	it	eq
 800e61c:	7d48      	ldrbeq	r0, [r1, #21]
	cl = ld_word(dir + DIR_FstClusLO);
 800e61e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800e622:	bf02      	ittt	eq
 800e624:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e626:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 800e62a:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 800e62e:	4618      	mov	r0, r3
 800e630:	4770      	bx	lr

0800e632 <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 800e632:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e636:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800e638:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 800e63a:	7803      	ldrb	r3, [r0, #0]
 800e63c:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e63e:	bf01      	itttt	eq
 800e640:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800e642:	750a      	strbeq	r2, [r1, #20]
 800e644:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800e646:	754a      	strbeq	r2, [r1, #21]
}
 800e648:	4770      	bx	lr

0800e64a <get_fileinfo.part.3>:
void get_fileinfo (		/* No return code */
 800e64a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		c = (TCHAR)dp->dir[i++];
 800e64c:	6a04      	ldr	r4, [r0, #32]
	i = j = 0;
 800e64e:	2300      	movs	r3, #0
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e650:	262e      	movs	r6, #46	; 0x2e
 800e652:	1e65      	subs	r5, r4, #1
	i = j = 0;
 800e654:	4618      	mov	r0, r3
		c = (TCHAR)dp->dir[i++];
 800e656:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800e65a:	3001      	adds	r0, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800e65c:	2a20      	cmp	r2, #32
 800e65e:	d00a      	beq.n	800e676 <get_fileinfo.part.3+0x2c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e660:	2a05      	cmp	r2, #5
 800e662:	bf08      	it	eq
 800e664:	22e5      	moveq	r2, #229	; 0xe5
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e666:	2809      	cmp	r0, #9
 800e668:	bf02      	ittt	eq
 800e66a:	18cf      	addeq	r7, r1, r3
 800e66c:	3301      	addeq	r3, #1
 800e66e:	727e      	strbeq	r6, [r7, #9]
		fno->fname[j++] = c;
 800e670:	18cf      	adds	r7, r1, r3
 800e672:	3301      	adds	r3, #1
 800e674:	727a      	strb	r2, [r7, #9]
	while (i < 11) {		/* Copy name body and extension */
 800e676:	280b      	cmp	r0, #11
 800e678:	d1ed      	bne.n	800e656 <get_fileinfo.part.3+0xc>
	fno->fname[j] = 0;
 800e67a:	440b      	add	r3, r1
 800e67c:	2200      	movs	r2, #0
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e67e:	f104 001c 	add.w	r0, r4, #28
	fno->fname[j] = 0;
 800e682:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e684:	7ae3      	ldrb	r3, [r4, #11]
 800e686:	720b      	strb	r3, [r1, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e688:	f7ff fe78 	bl	800e37c <ld_dword>
 800e68c:	6008      	str	r0, [r1, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e68e:	f104 0016 	add.w	r0, r4, #22
 800e692:	f7ff fe73 	bl	800e37c <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e696:	80c8      	strh	r0, [r1, #6]
 800e698:	0c00      	lsrs	r0, r0, #16
 800e69a:	8088      	strh	r0, [r1, #4]
}
 800e69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e69e <sync_window.part.5>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800e69e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 800e6a0:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e6a2:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800e6a6:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	462a      	mov	r2, r5
 800e6ac:	4639      	mov	r1, r7
 800e6ae:	7840      	ldrb	r0, [r0, #1]
 800e6b0:	f7ff fe48 	bl	800e344 <disk_write>
 800e6b4:	b9a0      	cbnz	r0, 800e6e0 <sync_window.part.5+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e6b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6b8:	69e2      	ldr	r2, [r4, #28]
 800e6ba:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 800e6bc:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d301      	bcc.n	800e6c6 <sync_window.part.5+0x28>
	FRESULT res = FR_OK;
 800e6c2:	2000      	movs	r0, #0
}
 800e6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e6c6:	78a6      	ldrb	r6, [r4, #2]
 800e6c8:	2e01      	cmp	r6, #1
 800e6ca:	d9fa      	bls.n	800e6c2 <sync_window.part.5+0x24>
					wsect += fs->fsize;
 800e6cc:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e6ce:	4639      	mov	r1, r7
 800e6d0:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e6d2:	3e01      	subs	r6, #1
					wsect += fs->fsize;
 800e6d4:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	462a      	mov	r2, r5
 800e6da:	f7ff fe33 	bl	800e344 <disk_write>
 800e6de:	e7f3      	b.n	800e6c8 <sync_window.part.5+0x2a>
			res = FR_DISK_ERR;
 800e6e0:	2001      	movs	r0, #1
 800e6e2:	e7ef      	b.n	800e6c4 <sync_window.part.5+0x26>

0800e6e4 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e6e4:	78c3      	ldrb	r3, [r0, #3]
 800e6e6:	b10b      	cbz	r3, 800e6ec <sync_window+0x8>
 800e6e8:	f7ff bfd9 	b.w	800e69e <sync_window.part.5>
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	4770      	bx	lr

0800e6f0 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 800e6f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e6f2:	428b      	cmp	r3, r1
{
 800e6f4:	b570      	push	{r4, r5, r6, lr}
 800e6f6:	4606      	mov	r6, r0
 800e6f8:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800e6fa:	d012      	beq.n	800e722 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 800e6fc:	f7ff fff2 	bl	800e6e4 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e700:	4604      	mov	r4, r0
 800e702:	b960      	cbnz	r0, 800e71e <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e704:	462a      	mov	r2, r5
 800e706:	2301      	movs	r3, #1
 800e708:	f106 0134 	add.w	r1, r6, #52	; 0x34
 800e70c:	7870      	ldrb	r0, [r6, #1]
 800e70e:	f7ff fe0b 	bl	800e328 <disk_read>
 800e712:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 800e714:	bf1c      	itt	ne
 800e716:	f04f 35ff 	movne.w	r5, #4294967295
 800e71a:	2401      	movne	r4, #1
			fs->winsect = sector;
 800e71c:	6335      	str	r5, [r6, #48]	; 0x30
}
 800e71e:	4620      	mov	r0, r4
 800e720:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 800e722:	2400      	movs	r4, #0
 800e724:	e7fb      	b.n	800e71e <move_window+0x2e>
	...

0800e728 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e728:	2300      	movs	r3, #0
{
 800e72a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e72c:	70c3      	strb	r3, [r0, #3]
 800e72e:	f04f 33ff 	mov.w	r3, #4294967295
{
 800e732:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e734:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e736:	f7ff ffdb 	bl	800e6f0 <move_window>
 800e73a:	bb30      	cbnz	r0, 800e78a <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 800e73c:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 800e740:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 800e744:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e748:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d11e      	bne.n	800e78e <check_fs+0x66>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e750:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800e754:	2be9      	cmp	r3, #233	; 0xe9
 800e756:	d005      	beq.n	800e764 <check_fs+0x3c>
 800e758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e75a:	4a10      	ldr	r2, [pc, #64]	; (800e79c <check_fs+0x74>)
 800e75c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800e760:	4293      	cmp	r3, r2
 800e762:	d116      	bne.n	800e792 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e764:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 800e768:	f7ff fe08 	bl	800e37c <ld_dword>
 800e76c:	4b0c      	ldr	r3, [pc, #48]	; (800e7a0 <check_fs+0x78>)
 800e76e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800e772:	4298      	cmp	r0, r3
 800e774:	d00f      	beq.n	800e796 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e776:	f104 0086 	add.w	r0, r4, #134	; 0x86
 800e77a:	f7ff fdff 	bl	800e37c <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e77e:	4b09      	ldr	r3, [pc, #36]	; (800e7a4 <check_fs+0x7c>)
 800e780:	4298      	cmp	r0, r3
 800e782:	bf14      	ite	ne
 800e784:	2002      	movne	r0, #2
 800e786:	2000      	moveq	r0, #0
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800e788:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e78a:	2004      	movs	r0, #4
 800e78c:	e7fc      	b.n	800e788 <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e78e:	2003      	movs	r0, #3
 800e790:	e7fa      	b.n	800e788 <check_fs+0x60>
	return 2;
 800e792:	2002      	movs	r0, #2
 800e794:	e7f8      	b.n	800e788 <check_fs+0x60>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e796:	2000      	movs	r0, #0
 800e798:	e7f6      	b.n	800e788 <check_fs+0x60>
 800e79a:	bf00      	nop
 800e79c:	009000eb 	.word	0x009000eb
 800e7a0:	00544146 	.word	0x00544146
 800e7a4:	33544146 	.word	0x33544146

0800e7a8 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e7a8:	2300      	movs	r3, #0
{
 800e7aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 800e7ae:	600b      	str	r3, [r1, #0]
{
 800e7b0:	b085      	sub	sp, #20
 800e7b2:	460f      	mov	r7, r1
 800e7b4:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800e7b6:	f7ff ff0c 	bl	800e5d2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800e7ba:	1e06      	subs	r6, r0, #0
 800e7bc:	f2c0 813f 	blt.w	800ea3e <find_volume+0x296>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e7c0:	4ba4      	ldr	r3, [pc, #656]	; (800ea54 <find_volume+0x2ac>)
 800e7c2:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e7c6:	2c00      	cmp	r4, #0
 800e7c8:	f000 813b 	beq.w	800ea42 <find_volume+0x29a>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e7cc:	68e0      	ldr	r0, [r4, #12]
 800e7ce:	f001 f993 	bl	800faf8 <ff_req_grant>
 800e7d2:	2800      	cmp	r0, #0
 800e7d4:	f000 8137 	beq.w	800ea46 <find_volume+0x29e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e7d8:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e7da:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e7de:	7823      	ldrb	r3, [r4, #0]
 800e7e0:	b173      	cbz	r3, 800e800 <find_volume+0x58>
		stat = disk_status(fs->drv);
 800e7e2:	7860      	ldrb	r0, [r4, #1]
 800e7e4:	f7ff fd86 	bl	800e2f4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e7e8:	07c1      	lsls	r1, r0, #31
 800e7ea:	d409      	bmi.n	800e800 <find_volume+0x58>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e7ec:	2d00      	cmp	r5, #0
 800e7ee:	f000 812c 	beq.w	800ea4a <find_volume+0x2a2>
 800e7f2:	f010 0004 	ands.w	r0, r0, #4
 800e7f6:	d000      	beq.n	800e7fa <find_volume+0x52>
				return FR_WRITE_PROTECTED;
 800e7f8:	200a      	movs	r0, #10
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800e7fa:	b005      	add	sp, #20
 800e7fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800e800:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e802:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800e804:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e806:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e808:	f7ff fd7e 	bl	800e308 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e80c:	07c2      	lsls	r2, r0, #31
 800e80e:	f100 811e 	bmi.w	800ea4e <find_volume+0x2a6>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e812:	b10d      	cbz	r5, 800e818 <find_volume+0x70>
 800e814:	0743      	lsls	r3, r0, #29
 800e816:	d4ef      	bmi.n	800e7f8 <find_volume+0x50>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e818:	2100      	movs	r1, #0
 800e81a:	4620      	mov	r0, r4
 800e81c:	f7ff ff84 	bl	800e728 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e820:	2802      	cmp	r0, #2
 800e822:	f040 80f3 	bne.w	800ea0c <find_volume+0x264>
 800e826:	f504 75fd 	add.w	r5, r4, #506	; 0x1fa
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e82a:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e82c:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 800e830:	b110      	cbz	r0, 800e838 <find_volume+0x90>
 800e832:	4628      	mov	r0, r5
 800e834:	f7ff fda2 	bl	800e37c <ld_dword>
 800e838:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e83c:	3101      	adds	r1, #1
 800e83e:	3510      	adds	r5, #16
 800e840:	2904      	cmp	r1, #4
 800e842:	d1f3      	bne.n	800e82c <find_volume+0x84>
 800e844:	2600      	movs	r6, #0
			bsect = br[i];
 800e846:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e84a:	2d00      	cmp	r5, #0
 800e84c:	f000 80d5 	beq.w	800e9fa <find_volume+0x252>
 800e850:	4629      	mov	r1, r5
 800e852:	4620      	mov	r0, r4
 800e854:	f7ff ff68 	bl	800e728 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e858:	2801      	cmp	r0, #1
 800e85a:	f200 80cf 	bhi.w	800e9fc <find_volume+0x254>
	rv = rv << 8 | ptr[0];
 800e85e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800e862:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800e866:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e86a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e86e:	f040 80d1 	bne.w	800ea14 <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 800e872:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800e876:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e87a:	ea56 2603 	orrs.w	r6, r6, r3, lsl #8
 800e87e:	d104      	bne.n	800e88a <find_volume+0xe2>
 800e880:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e884:	f7ff fd7a 	bl	800e37c <ld_dword>
 800e888:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e88a:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
		fs->fsize = fasize;
 800e88e:	61e6      	str	r6, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e890:	f109 33ff 	add.w	r3, r9, #4294967295
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e894:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e898:	2b01      	cmp	r3, #1
 800e89a:	f200 80bb 	bhi.w	800ea14 <find_volume+0x26c>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e89e:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
 800e8a2:	b2bb      	uxth	r3, r7
 800e8a4:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	f000 80b4 	beq.w	800ea14 <find_volume+0x26c>
 800e8ac:	1e7b      	subs	r3, r7, #1
 800e8ae:	423b      	tst	r3, r7
 800e8b0:	f040 80b0 	bne.w	800ea14 <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 800e8b4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e8b8:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 800e8bc:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e8c0:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e8c4:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e8c8:	f040 80a4 	bne.w	800ea14 <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 800e8cc:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800e8d0:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e8d4:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 800e8d8:	d103      	bne.n	800e8e2 <find_volume+0x13a>
 800e8da:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800e8de:	f7ff fd4d 	bl	800e37c <ld_dword>
	rv = rv << 8 | ptr[0];
 800e8e2:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e8e6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e8ea:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800e8ee:	f000 8091 	beq.w	800ea14 <find_volume+0x26c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e8f2:	fb06 fc09 	mul.w	ip, r6, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e8f6:	eb03 1218 	add.w	r2, r3, r8, lsr #4
 800e8fa:	4462      	add	r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e8fc:	4290      	cmp	r0, r2
 800e8fe:	f0c0 8089 	bcc.w	800ea14 <find_volume+0x26c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e902:	1a81      	subs	r1, r0, r2
 800e904:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e908:	2900      	cmp	r1, #0
 800e90a:	f000 8083 	beq.w	800ea14 <find_volume+0x26c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e90e:	f64f 77f5 	movw	r7, #65525	; 0xfff5
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e912:	f640 70f5 	movw	r0, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e916:	442b      	add	r3, r5
		fs->database = bsect + sysect;					/* Data start sector */
 800e918:	442a      	add	r2, r5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e91a:	42b9      	cmp	r1, r7
 800e91c:	bf8c      	ite	hi
 800e91e:	2703      	movhi	r7, #3
 800e920:	2702      	movls	r7, #2
		fs->volbase = bsect;							/* Volume start sector */
 800e922:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e924:	6263      	str	r3, [r4, #36]	; 0x24
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e926:	4281      	cmp	r1, r0
 800e928:	bf98      	it	ls
 800e92a:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e92c:	3102      	adds	r1, #2
		fs->database = bsect + sysect;					/* Data start sector */
 800e92e:	62e2      	str	r2, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e930:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e932:	61a1      	str	r1, [r4, #24]
		if (fmt == FS_FAT32) {
 800e934:	d172      	bne.n	800ea1c <find_volume+0x274>
	rv = rv << 8 | ptr[0];
 800e936:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 800e93a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e93e:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800e942:	d167      	bne.n	800ea14 <find_volume+0x26c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e944:	f1b8 0f00 	cmp.w	r8, #0
 800e948:	d164      	bne.n	800ea14 <find_volume+0x26c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e94a:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800e94e:	f7ff fd15 	bl	800e37c <ld_dword>
 800e952:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e954:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e956:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 800e95a:	ebb6 2f51 	cmp.w	r6, r1, lsr #9
 800e95e:	d359      	bcc.n	800ea14 <find_volume+0x26c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e960:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e964:	2f03      	cmp	r7, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e966:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800e96a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800e96e:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e970:	d12f      	bne.n	800e9d2 <find_volume+0x22a>
	rv = rv << 8 | ptr[0];
 800e972:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 800e976:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800e97a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d127      	bne.n	800e9d2 <find_volume+0x22a>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e982:	1c69      	adds	r1, r5, #1
 800e984:	4620      	mov	r0, r4
 800e986:	f7ff feb3 	bl	800e6f0 <move_window>
 800e98a:	bb10      	cbnz	r0, 800e9d2 <find_volume+0x22a>
	rv = rv << 8 | ptr[0];
 800e98c:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 800e990:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 800e994:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 800e996:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e99a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d117      	bne.n	800e9d2 <find_volume+0x22a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e9a2:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800e9a6:	f7ff fce9 	bl	800e37c <ld_dword>
 800e9aa:	4b2b      	ldr	r3, [pc, #172]	; (800ea58 <find_volume+0x2b0>)
 800e9ac:	4298      	cmp	r0, r3
 800e9ae:	d110      	bne.n	800e9d2 <find_volume+0x22a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e9b0:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800e9b4:	f7ff fce2 	bl	800e37c <ld_dword>
 800e9b8:	4b28      	ldr	r3, [pc, #160]	; (800ea5c <find_volume+0x2b4>)
 800e9ba:	4298      	cmp	r0, r3
 800e9bc:	d109      	bne.n	800e9d2 <find_volume+0x22a>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e9be:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800e9c2:	f7ff fcdb 	bl	800e37c <ld_dword>
 800e9c6:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e9c8:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800e9cc:	f7ff fcd6 	bl	800e37c <ld_dword>
 800e9d0:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 800e9d2:	4a23      	ldr	r2, [pc, #140]	; (800ea60 <find_volume+0x2b8>)
 800e9d4:	2000      	movs	r0, #0
	fs->fs_type = fmt;		/* FAT sub-type */
 800e9d6:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e9d8:	8813      	ldrh	r3, [r2, #0]
 800e9da:	3301      	adds	r3, #1
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	8013      	strh	r3, [r2, #0]
 800e9e0:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e9e2:	4b20      	ldr	r3, [pc, #128]	; (800ea64 <find_volume+0x2bc>)
 800e9e4:	681a      	ldr	r2, [r3, #0]
 800e9e6:	4294      	cmp	r4, r2
 800e9e8:	bf04      	itt	eq
 800e9ea:	2200      	moveq	r2, #0
 800e9ec:	601a      	streq	r2, [r3, #0]
 800e9ee:	691a      	ldr	r2, [r3, #16]
 800e9f0:	4294      	cmp	r4, r2
 800e9f2:	f47f af02 	bne.w	800e7fa <find_volume+0x52>
 800e9f6:	6118      	str	r0, [r3, #16]
 800e9f8:	e6ff      	b.n	800e7fa <find_volume+0x52>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e9fa:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e9fc:	3601      	adds	r6, #1
 800e9fe:	2e04      	cmp	r6, #4
 800ea00:	f47f af21 	bne.w	800e846 <find_volume+0x9e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ea04:	2804      	cmp	r0, #4
 800ea06:	d105      	bne.n	800ea14 <find_volume+0x26c>
 800ea08:	2001      	movs	r0, #1
 800ea0a:	e6f6      	b.n	800e7fa <find_volume+0x52>
 800ea0c:	2804      	cmp	r0, #4
 800ea0e:	d0fb      	beq.n	800ea08 <find_volume+0x260>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ea10:	2801      	cmp	r0, #1
 800ea12:	d901      	bls.n	800ea18 <find_volume+0x270>
 800ea14:	200d      	movs	r0, #13
 800ea16:	e6f0      	b.n	800e7fa <find_volume+0x52>
	bsect = 0;
 800ea18:	2500      	movs	r5, #0
 800ea1a:	e720      	b.n	800e85e <find_volume+0xb6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ea1c:	f1b8 0f00 	cmp.w	r8, #0
 800ea20:	d0f8      	beq.n	800ea14 <find_volume+0x26c>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ea22:	2f02      	cmp	r7, #2
 800ea24:	ea4f 0041 	mov.w	r0, r1, lsl #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ea28:	4463      	add	r3, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ea2a:	bf1c      	itt	ne
 800ea2c:	1840      	addne	r0, r0, r1
 800ea2e:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ea32:	62a3      	str	r3, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ea34:	bf0c      	ite	eq
 800ea36:	4601      	moveq	r1, r0
 800ea38:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 800ea3c:	e78b      	b.n	800e956 <find_volume+0x1ae>
	if (vol < 0) return FR_INVALID_DRIVE;
 800ea3e:	200b      	movs	r0, #11
 800ea40:	e6db      	b.n	800e7fa <find_volume+0x52>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ea42:	200c      	movs	r0, #12
 800ea44:	e6d9      	b.n	800e7fa <find_volume+0x52>
	ENTER_FF(fs);						/* Lock the volume */
 800ea46:	200f      	movs	r0, #15
 800ea48:	e6d7      	b.n	800e7fa <find_volume+0x52>
			return FR_OK;				/* The file system object is valid */
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	e6d5      	b.n	800e7fa <find_volume+0x52>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ea4e:	2003      	movs	r0, #3
 800ea50:	e6d3      	b.n	800e7fa <find_volume+0x52>
 800ea52:	bf00      	nop
 800ea54:	24000904 	.word	0x24000904
 800ea58:	41615252 	.word	0x41615252
 800ea5c:	61417272 	.word	0x61417272
 800ea60:	24000928 	.word	0x24000928
 800ea64:	24000908 	.word	0x24000908

0800ea68 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ea68:	2901      	cmp	r1, #1
{
 800ea6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea6e:	4605      	mov	r5, r0
 800ea70:	460c      	mov	r4, r1
 800ea72:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ea74:	d973      	bls.n	800eb5e <put_fat+0xf6>
 800ea76:	6983      	ldr	r3, [r0, #24]
 800ea78:	428b      	cmp	r3, r1
 800ea7a:	d970      	bls.n	800eb5e <put_fat+0xf6>
		switch (fs->fs_type) {
 800ea7c:	7803      	ldrb	r3, [r0, #0]
 800ea7e:	2b02      	cmp	r3, #2
 800ea80:	d040      	beq.n	800eb04 <put_fat+0x9c>
 800ea82:	2b03      	cmp	r3, #3
 800ea84:	d051      	beq.n	800eb2a <put_fat+0xc2>
 800ea86:	2b01      	cmp	r3, #1
 800ea88:	d169      	bne.n	800eb5e <put_fat+0xf6>
			bc = (UINT)clst; bc += bc / 2;
 800ea8a:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ea8e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800ea90:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800ea94:	f7ff fe2c 	bl	800e6f0 <move_window>
 800ea98:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 800ea9a:	bb40      	cbnz	r0, 800eaee <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ea9c:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 800eaa0:	f105 0934 	add.w	r9, r5, #52	; 0x34
 800eaa4:	f108 0a01 	add.w	sl, r8, #1
 800eaa8:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800eaac:	bf08      	it	eq
 800eaae:	b2fb      	uxtbeq	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eab0:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800eab2:	bf1f      	itttt	ne
 800eab4:	f819 3008 	ldrbne.w	r3, [r9, r8]
 800eab8:	f003 020f 	andne.w	r2, r3, #15
 800eabc:	013b      	lslne	r3, r7, #4
 800eabe:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 800eac2:	bf18      	it	ne
 800eac4:	4313      	orrne	r3, r2
 800eac6:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 800eaca:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eacc:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 800eace:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ead0:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800ead4:	f7ff fe0c 	bl	800e6f0 <move_window>
			if (res != FR_OK) break;
 800ead8:	4606      	mov	r6, r0
 800eada:	b940      	cbnz	r0, 800eaee <put_fat+0x86>
			p = fs->win + bc % SS(fs);
 800eadc:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800eae0:	b144      	cbz	r4, 800eaf4 <put_fat+0x8c>
 800eae2:	f3c7 1707 	ubfx	r7, r7, #4, #8
 800eae6:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 800eaea:	2301      	movs	r3, #1
 800eaec:	70eb      	strb	r3, [r5, #3]
}
 800eaee:	4630      	mov	r0, r6
 800eaf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800eaf4:	f819 300a 	ldrb.w	r3, [r9, sl]
 800eaf8:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800eafc:	f023 030f 	bic.w	r3, r3, #15
 800eb00:	431f      	orrs	r7, r3
 800eb02:	e7f0      	b.n	800eae6 <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800eb04:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800eb06:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800eb0a:	f7ff fdf1 	bl	800e6f0 <move_window>
			if (res != FR_OK) break;
 800eb0e:	4606      	mov	r6, r0
 800eb10:	2800      	cmp	r0, #0
 800eb12:	d1ec      	bne.n	800eaee <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800eb14:	0064      	lsls	r4, r4, #1
 800eb16:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800eb1a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800eb1e:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800eb20:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800eb22:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 800eb26:	7057      	strb	r7, [r2, #1]
 800eb28:	e7df      	b.n	800eaea <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800eb2a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800eb2c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800eb30:	f7ff fdde 	bl	800e6f0 <move_window>
			if (res != FR_OK) break;
 800eb34:	4606      	mov	r6, r0
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d1d9      	bne.n	800eaee <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800eb3a:	00a4      	lsls	r4, r4, #2
 800eb3c:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800eb40:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 800eb44:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800eb48:	441c      	add	r4, r3
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	f7ff fc16 	bl	800e37c <ld_dword>
 800eb50:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800eb54:	4620      	mov	r0, r4
 800eb56:	4339      	orrs	r1, r7
 800eb58:	f7ff fc18 	bl	800e38c <st_dword>
 800eb5c:	e7c5      	b.n	800eaea <put_fat+0x82>
	FRESULT res = FR_INT_ERR;
 800eb5e:	2602      	movs	r6, #2
 800eb60:	e7c5      	b.n	800eaee <put_fat+0x86>

0800eb62 <get_fat.isra.9>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eb62:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800eb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb66:	4605      	mov	r5, r0
 800eb68:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eb6a:	d952      	bls.n	800ec12 <get_fat.isra.9+0xb0>
 800eb6c:	6983      	ldr	r3, [r0, #24]
 800eb6e:	4299      	cmp	r1, r3
 800eb70:	d24f      	bcs.n	800ec12 <get_fat.isra.9+0xb0>
		switch (fs->fs_type) {
 800eb72:	7803      	ldrb	r3, [r0, #0]
 800eb74:	2b02      	cmp	r3, #2
 800eb76:	d029      	beq.n	800ebcc <get_fat.isra.9+0x6a>
 800eb78:	2b03      	cmp	r3, #3
 800eb7a:	d038      	beq.n	800ebee <get_fat.isra.9+0x8c>
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d148      	bne.n	800ec12 <get_fat.isra.9+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 800eb80:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb84:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800eb86:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800eb8a:	f7ff fdb1 	bl	800e6f0 <move_window>
 800eb8e:	b110      	cbz	r0, 800eb96 <get_fat.isra.9+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800eb90:	f04f 30ff 	mov.w	r0, #4294967295
}
 800eb94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800eb96:	1c77      	adds	r7, r6, #1
 800eb98:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb9c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800eb9e:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800eba0:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eba2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800eba6:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ebaa:	f7ff fda1 	bl	800e6f0 <move_window>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	d1ee      	bne.n	800eb90 <get_fat.isra.9+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ebb2:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ebb6:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800ebb8:	443d      	add	r5, r7
 800ebba:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800ebbe:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ebc2:	bf4c      	ite	mi
 800ebc4:	0900      	lsrmi	r0, r0, #4
 800ebc6:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800ebca:	e7e3      	b.n	800eb94 <get_fat.isra.9+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ebcc:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800ebce:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800ebd2:	f7ff fd8d 	bl	800e6f0 <move_window>
 800ebd6:	2800      	cmp	r0, #0
 800ebd8:	d1da      	bne.n	800eb90 <get_fat.isra.9+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ebda:	0064      	lsls	r4, r4, #1
 800ebdc:	3534      	adds	r5, #52	; 0x34
 800ebde:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800ebe2:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 800ebe4:	5d28      	ldrb	r0, [r5, r4]
 800ebe6:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ebe8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800ebec:	e7d2      	b.n	800eb94 <get_fat.isra.9+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ebee:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800ebf0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800ebf4:	f7ff fd7c 	bl	800e6f0 <move_window>
 800ebf8:	2800      	cmp	r0, #0
 800ebfa:	d1c9      	bne.n	800eb90 <get_fat.isra.9+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ebfc:	00a4      	lsls	r4, r4, #2
 800ebfe:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800ec02:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800ec06:	4420      	add	r0, r4
 800ec08:	f7ff fbb8 	bl	800e37c <ld_dword>
 800ec0c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800ec10:	e7c0      	b.n	800eb94 <get_fat.isra.9+0x32>
			val = 1;	/* Internal error */
 800ec12:	2001      	movs	r0, #1
 800ec14:	e7be      	b.n	800eb94 <get_fat.isra.9+0x32>

0800ec16 <create_chain>:
{
 800ec16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec1a:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800ec1c:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800ec1e:	460f      	mov	r7, r1
 800ec20:	b971      	cbnz	r1, 800ec40 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ec22:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ec24:	b1f6      	cbz	r6, 800ec64 <create_chain+0x4e>
 800ec26:	69ab      	ldr	r3, [r5, #24]
 800ec28:	42b3      	cmp	r3, r6
 800ec2a:	bf98      	it	ls
 800ec2c:	2601      	movls	r6, #1
 800ec2e:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800ec30:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ec32:	69ab      	ldr	r3, [r5, #24]
 800ec34:	42a3      	cmp	r3, r4
 800ec36:	d818      	bhi.n	800ec6a <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 800ec38:	2e01      	cmp	r6, #1
 800ec3a:	d815      	bhi.n	800ec68 <create_chain+0x52>
 800ec3c:	2400      	movs	r4, #0
 800ec3e:	e009      	b.n	800ec54 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ec40:	4628      	mov	r0, r5
 800ec42:	f7ff ff8e 	bl	800eb62 <get_fat.isra.9>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ec46:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ec48:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ec4a:	d937      	bls.n	800ecbc <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ec4c:	1c43      	adds	r3, r0, #1
 800ec4e:	d104      	bne.n	800ec5a <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ec50:	f04f 34ff 	mov.w	r4, #4294967295
}
 800ec54:	4620      	mov	r0, r4
 800ec56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ec5a:	69ab      	ldr	r3, [r5, #24]
 800ec5c:	4283      	cmp	r3, r0
 800ec5e:	d8f9      	bhi.n	800ec54 <create_chain+0x3e>
 800ec60:	463e      	mov	r6, r7
 800ec62:	e7e4      	b.n	800ec2e <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ec64:	2601      	movs	r6, #1
 800ec66:	e7e2      	b.n	800ec2e <create_chain+0x18>
				ncl = 2;
 800ec68:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ec6a:	4621      	mov	r1, r4
 800ec6c:	f8d8 0000 	ldr.w	r0, [r8]
 800ec70:	f7ff ff77 	bl	800eb62 <get_fat.isra.9>
			if (cs == 0) break;				/* Found a free cluster */
 800ec74:	b130      	cbz	r0, 800ec84 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ec76:	2801      	cmp	r0, #1
 800ec78:	d020      	beq.n	800ecbc <create_chain+0xa6>
 800ec7a:	3001      	adds	r0, #1
 800ec7c:	d0e8      	beq.n	800ec50 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 800ec7e:	42b4      	cmp	r4, r6
 800ec80:	d1d6      	bne.n	800ec30 <create_chain+0x1a>
 800ec82:	e7db      	b.n	800ec3c <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ec84:	f04f 32ff 	mov.w	r2, #4294967295
 800ec88:	4621      	mov	r1, r4
 800ec8a:	4628      	mov	r0, r5
 800ec8c:	f7ff feec 	bl	800ea68 <put_fat>
		if (res == FR_OK && clst != 0) {
 800ec90:	b990      	cbnz	r0, 800ecb8 <create_chain+0xa2>
 800ec92:	b957      	cbnz	r7, 800ecaa <create_chain+0x94>
		fs->last_clst = ncl;
 800ec94:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ec96:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 800ec9a:	3a02      	subs	r2, #2
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d90f      	bls.n	800ecc0 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 800eca0:	792b      	ldrb	r3, [r5, #4]
 800eca2:	f043 0301 	orr.w	r3, r3, #1
 800eca6:	712b      	strb	r3, [r5, #4]
 800eca8:	e7d4      	b.n	800ec54 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ecaa:	4622      	mov	r2, r4
 800ecac:	4639      	mov	r1, r7
 800ecae:	4628      	mov	r0, r5
 800ecb0:	f7ff feda 	bl	800ea68 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ecb4:	2800      	cmp	r0, #0
 800ecb6:	d0ed      	beq.n	800ec94 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ecb8:	2801      	cmp	r0, #1
 800ecba:	d0c9      	beq.n	800ec50 <create_chain+0x3a>
 800ecbc:	2401      	movs	r4, #1
 800ecbe:	e7c9      	b.n	800ec54 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	616b      	str	r3, [r5, #20]
 800ecc4:	e7ec      	b.n	800eca0 <create_chain+0x8a>

0800ecc6 <remove_chain>:
{
 800ecc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecc8:	460d      	mov	r5, r1
 800ecca:	4607      	mov	r7, r0
 800eccc:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ecce:	2d01      	cmp	r5, #1
 800ecd0:	d92c      	bls.n	800ed2c <remove_chain+0x66>
	FATFS *fs = obj->fs;
 800ecd2:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ecd4:	69a3      	ldr	r3, [r4, #24]
 800ecd6:	42ab      	cmp	r3, r5
 800ecd8:	d928      	bls.n	800ed2c <remove_chain+0x66>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ecda:	b12a      	cbz	r2, 800ece8 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ecdc:	f04f 32ff 	mov.w	r2, #4294967295
 800ece0:	4620      	mov	r0, r4
 800ece2:	f7ff fec1 	bl	800ea68 <put_fat>
		if (res != FR_OK) return res;
 800ece6:	b930      	cbnz	r0, 800ecf6 <remove_chain+0x30>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ece8:	4629      	mov	r1, r5
 800ecea:	6838      	ldr	r0, [r7, #0]
 800ecec:	f7ff ff39 	bl	800eb62 <get_fat.isra.9>
		if (nxt == 0) break;				/* Empty cluster? */
 800ecf0:	4606      	mov	r6, r0
 800ecf2:	b908      	cbnz	r0, 800ecf8 <remove_chain+0x32>
	return FR_OK;
 800ecf4:	2000      	movs	r0, #0
}
 800ecf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ecf8:	2801      	cmp	r0, #1
 800ecfa:	d017      	beq.n	800ed2c <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ecfc:	1c43      	adds	r3, r0, #1
 800ecfe:	d017      	beq.n	800ed30 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ed00:	2200      	movs	r2, #0
 800ed02:	4629      	mov	r1, r5
 800ed04:	4620      	mov	r0, r4
 800ed06:	f7ff feaf 	bl	800ea68 <put_fat>
			if (res != FR_OK) return res;
 800ed0a:	2800      	cmp	r0, #0
 800ed0c:	d1f3      	bne.n	800ecf6 <remove_chain+0x30>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ed0e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800ed12:	1e91      	subs	r1, r2, #2
 800ed14:	428b      	cmp	r3, r1
 800ed16:	d205      	bcs.n	800ed24 <remove_chain+0x5e>
			fs->free_clst++;
 800ed18:	3301      	adds	r3, #1
 800ed1a:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 800ed1c:	7923      	ldrb	r3, [r4, #4]
 800ed1e:	f043 0301 	orr.w	r3, r3, #1
 800ed22:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ed24:	42b2      	cmp	r2, r6
 800ed26:	4635      	mov	r5, r6
 800ed28:	d8de      	bhi.n	800ece8 <remove_chain+0x22>
 800ed2a:	e7e3      	b.n	800ecf4 <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ed2c:	2002      	movs	r0, #2
 800ed2e:	e7e2      	b.n	800ecf6 <remove_chain+0x30>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ed30:	2001      	movs	r0, #1
 800ed32:	e7e0      	b.n	800ecf6 <remove_chain+0x30>

0800ed34 <unlock_fs>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ed34:	b140      	cbz	r0, 800ed48 <unlock_fs+0x14>
 800ed36:	f1a1 030b 	sub.w	r3, r1, #11
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d904      	bls.n	800ed48 <unlock_fs+0x14>
 800ed3e:	290f      	cmp	r1, #15
 800ed40:	d002      	beq.n	800ed48 <unlock_fs+0x14>
		ff_rel_grant(fs->sobj);
 800ed42:	68c0      	ldr	r0, [r0, #12]
 800ed44:	f000 bee1 	b.w	800fb0a <ff_rel_grant>
}
 800ed48:	4770      	bx	lr

0800ed4a <sync_fs>:
{
 800ed4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed4c:	4604      	mov	r4, r0
	res = sync_window(fs);
 800ed4e:	f7ff fcc9 	bl	800e6e4 <sync_window>
 800ed52:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800ed54:	2800      	cmp	r0, #0
 800ed56:	d142      	bne.n	800edde <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ed58:	7823      	ldrb	r3, [r4, #0]
 800ed5a:	2b03      	cmp	r3, #3
 800ed5c:	d137      	bne.n	800edce <sync_fs+0x84>
 800ed5e:	7927      	ldrb	r7, [r4, #4]
 800ed60:	2f01      	cmp	r7, #1
 800ed62:	d134      	bne.n	800edce <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 800ed64:	f104 0634 	add.w	r6, r4, #52	; 0x34
 800ed68:	4601      	mov	r1, r0
 800ed6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed6e:	4630      	mov	r0, r6
 800ed70:	f7ff fb14 	bl	800e39c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800ed74:	2355      	movs	r3, #85	; 0x55
	*ptr++ = (BYTE)val;
 800ed76:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800ed78:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val; val >>= 8;
 800ed7a:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 800ed7e:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE)val;
 800ed80:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ed84:	f504 7007 	add.w	r0, r4, #540	; 0x21c
	*ptr++ = (BYTE)val;
 800ed88:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 800ed8c:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val; val >>= 8;
 800ed8e:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val; val >>= 8;
 800ed92:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800ed96:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 800ed9a:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 800ed9c:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 800eda0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 800eda4:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 800eda8:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800edac:	6961      	ldr	r1, [r4, #20]
 800edae:	f7ff faed 	bl	800e38c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800edb2:	6921      	ldr	r1, [r4, #16]
 800edb4:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800edb8:	f7ff fae8 	bl	800e38c <st_dword>
			fs->winsect = fs->volbase + 1;
 800edbc:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800edbe:	463b      	mov	r3, r7
 800edc0:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800edc2:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800edc4:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800edc6:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800edc8:	f7ff fabc 	bl	800e344 <disk_write>
			fs->fsi_flag = 0;
 800edcc:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800edce:	2200      	movs	r2, #0
 800edd0:	7860      	ldrb	r0, [r4, #1]
 800edd2:	4611      	mov	r1, r2
 800edd4:	f7ff fac4 	bl	800e360 <disk_ioctl>
 800edd8:	3000      	adds	r0, #0
 800edda:	bf18      	it	ne
 800eddc:	2001      	movne	r0, #1
}
 800edde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ede0 <dir_sdi.constprop.14>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800ede0:	b538      	push	{r3, r4, r5, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ede2:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 800ede4:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800ede6:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800ede8:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800edea:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800edec:	b992      	cbnz	r2, 800ee14 <dir_sdi.constprop.14+0x34>
 800edee:	7823      	ldrb	r3, [r4, #0]
 800edf0:	2b02      	cmp	r3, #2
 800edf2:	d901      	bls.n	800edf8 <dir_sdi.constprop.14+0x18>
		clst = fs->dirbase;
 800edf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800edf6:	b973      	cbnz	r3, 800ee16 <dir_sdi.constprop.14+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800edf8:	8923      	ldrh	r3, [r4, #8]
 800edfa:	b90b      	cbnz	r3, 800ee00 <dir_sdi.constprop.14+0x20>
 800edfc:	2002      	movs	r0, #2
}
 800edfe:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 800ee00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ee02:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 800ee04:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 800ee06:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d0f7      	beq.n	800edfc <dir_sdi.constprop.14+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ee0c:	3434      	adds	r4, #52	; 0x34
	return FR_OK;
 800ee0e:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ee10:	622c      	str	r4, [r5, #32]
 800ee12:	e7f4      	b.n	800edfe <dir_sdi.constprop.14+0x1e>
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ee14:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ee16:	8961      	ldrh	r1, [r4, #10]
 800ee18:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 800ee1a:	b961      	cbnz	r1, 800ee36 <dir_sdi.constprop.14+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ee1c:	4611      	mov	r1, r2
 800ee1e:	6828      	ldr	r0, [r5, #0]
 800ee20:	f7ff fe9f 	bl	800eb62 <get_fat.isra.9>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ee24:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ee26:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ee28:	d00b      	beq.n	800ee42 <dir_sdi.constprop.14+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ee2a:	2801      	cmp	r0, #1
 800ee2c:	d9e6      	bls.n	800edfc <dir_sdi.constprop.14+0x1c>
 800ee2e:	69a3      	ldr	r3, [r4, #24]
 800ee30:	4298      	cmp	r0, r3
 800ee32:	d3f3      	bcc.n	800ee1c <dir_sdi.constprop.14+0x3c>
 800ee34:	e7e2      	b.n	800edfc <dir_sdi.constprop.14+0x1c>
		dp->sect = clust2sect(fs, clst);
 800ee36:	4619      	mov	r1, r3
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f7ff fb4b 	bl	800e4d4 <clust2sect>
 800ee3e:	61e8      	str	r0, [r5, #28]
 800ee40:	e7e0      	b.n	800ee04 <dir_sdi.constprop.14+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ee42:	2001      	movs	r0, #1
 800ee44:	e7db      	b.n	800edfe <dir_sdi.constprop.14+0x1e>

0800ee46 <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ee46:	69c3      	ldr	r3, [r0, #28]
{
 800ee48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee4c:	4605      	mov	r5, r0
 800ee4e:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ee50:	b1ab      	cbz	r3, 800ee7e <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ee52:	6942      	ldr	r2, [r0, #20]
 800ee54:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ee58:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 800ee5c:	d20f      	bcs.n	800ee7e <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ee5e:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 800ee62:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ee64:	f1b9 0f00 	cmp.w	r9, #0
 800ee68:	d14d      	bne.n	800ef06 <dir_next+0xc0>
		dp->sect++;				/* Next sector */
 800ee6a:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800ee6c:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800ee6e:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800ee70:	b939      	cbnz	r1, 800ee82 <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ee72:	8923      	ldrh	r3, [r4, #8]
 800ee74:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 800ee78:	d845      	bhi.n	800ef06 <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ee7e:	2004      	movs	r0, #4
 800ee80:	e00b      	b.n	800ee9a <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ee82:	8963      	ldrh	r3, [r4, #10]
 800ee84:	3b01      	subs	r3, #1
 800ee86:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 800ee8a:	d13c      	bne.n	800ef06 <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f7ff fe68 	bl	800eb62 <get_fat.isra.9>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ee92:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ee94:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ee96:	d802      	bhi.n	800ee9e <dir_next+0x58>
 800ee98:	2002      	movs	r0, #2
}
 800ee9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ee9e:	1c42      	adds	r2, r0, #1
 800eea0:	d101      	bne.n	800eea6 <dir_next+0x60>
 800eea2:	2001      	movs	r0, #1
 800eea4:	e7f9      	b.n	800ee9a <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800eea6:	69a3      	ldr	r3, [r4, #24]
 800eea8:	4283      	cmp	r3, r0
 800eeaa:	d826      	bhi.n	800eefa <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 800eeac:	2f00      	cmp	r7, #0
 800eeae:	d0e4      	beq.n	800ee7a <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800eeb0:	69a9      	ldr	r1, [r5, #24]
 800eeb2:	4628      	mov	r0, r5
 800eeb4:	f7ff feaf 	bl	800ec16 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800eeb8:	4606      	mov	r6, r0
 800eeba:	2800      	cmp	r0, #0
 800eebc:	d036      	beq.n	800ef2c <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800eebe:	2801      	cmp	r0, #1
 800eec0:	d0ea      	beq.n	800ee98 <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eec2:	1c43      	adds	r3, r0, #1
 800eec4:	d0ed      	beq.n	800eea2 <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800eec6:	4620      	mov	r0, r4
 800eec8:	f7ff fc0c 	bl	800e6e4 <sync_window>
 800eecc:	4607      	mov	r7, r0
 800eece:	2800      	cmp	r0, #0
 800eed0:	d1e7      	bne.n	800eea2 <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800eed2:	4601      	mov	r1, r0
 800eed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eed8:	f104 0034 	add.w	r0, r4, #52	; 0x34
						fs->wflag = 1;
 800eedc:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800eee0:	f7ff fa5c 	bl	800e39c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eee4:	4631      	mov	r1, r6
 800eee6:	4620      	mov	r0, r4
 800eee8:	f7ff faf4 	bl	800e4d4 <clust2sect>
 800eeec:	6320      	str	r0, [r4, #48]	; 0x30
 800eeee:	8963      	ldrh	r3, [r4, #10]
 800eef0:	429f      	cmp	r7, r3
 800eef2:	d30f      	bcc.n	800ef14 <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 800eef4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eef6:	1bdf      	subs	r7, r3, r7
 800eef8:	6327      	str	r7, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 800eefa:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 800eefc:	4631      	mov	r1, r6
 800eefe:	4620      	mov	r0, r4
 800ef00:	f7ff fae8 	bl	800e4d4 <clust2sect>
 800ef04:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ef06:	3434      	adds	r4, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800ef08:	f8c5 8014 	str.w	r8, [r5, #20]
	return FR_OK;
 800ef0c:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ef0e:	444c      	add	r4, r9
 800ef10:	622c      	str	r4, [r5, #32]
	return FR_OK;
 800ef12:	e7c2      	b.n	800ee9a <dir_next+0x54>
						fs->wflag = 1;
 800ef14:	f884 a003 	strb.w	sl, [r4, #3]
 800ef18:	4620      	mov	r0, r4
 800ef1a:	f7ff fbc0 	bl	800e69e <sync_window.part.5>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ef1e:	2800      	cmp	r0, #0
 800ef20:	d1bf      	bne.n	800eea2 <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ef22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ef24:	3701      	adds	r7, #1
 800ef26:	3301      	adds	r3, #1
 800ef28:	6323      	str	r3, [r4, #48]	; 0x30
 800ef2a:	e7e0      	b.n	800eeee <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ef2c:	2007      	movs	r0, #7
 800ef2e:	e7b4      	b.n	800ee9a <dir_next+0x54>

0800ef30 <follow_path>:
{
 800ef30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef34:	4604      	mov	r4, r0
	FATFS *fs = obj->fs;
 800ef36:	6807      	ldr	r7, [r0, #0]
 800ef38:	460d      	mov	r5, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ef3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef3e:	2b2f      	cmp	r3, #47	; 0x2f
 800ef40:	d0fa      	beq.n	800ef38 <follow_path+0x8>
 800ef42:	2b5c      	cmp	r3, #92	; 0x5c
 800ef44:	d0f8      	beq.n	800ef38 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 800ef46:	2300      	movs	r3, #0
 800ef48:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ef4a:	782b      	ldrb	r3, [r5, #0]
 800ef4c:	2b1f      	cmp	r3, #31
 800ef4e:	d95a      	bls.n	800f006 <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ef50:	f8df 814c 	ldr.w	r8, [pc, #332]	; 800f0a0 <follow_path+0x170>
	p = *path; sfn = dp->fn;
 800ef54:	f104 0624 	add.w	r6, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 800ef58:	220b      	movs	r2, #11
 800ef5a:	2120      	movs	r1, #32
 800ef5c:	4630      	mov	r0, r6
 800ef5e:	f7ff fa1d 	bl	800e39c <mem_set>
	si = i = 0; ni = 8;
 800ef62:	2200      	movs	r2, #0
 800ef64:	f105 3cff 	add.w	ip, r5, #4294967295
 800ef68:	2008      	movs	r0, #8
 800ef6a:	4611      	mov	r1, r2
		c = (BYTE)p[si++];
 800ef6c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800ef70:	3101      	adds	r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ef72:	2b20      	cmp	r3, #32
 800ef74:	d90d      	bls.n	800ef92 <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ef76:	2b2f      	cmp	r3, #47	; 0x2f
 800ef78:	d001      	beq.n	800ef7e <follow_path+0x4e>
 800ef7a:	2b5c      	cmp	r3, #92	; 0x5c
 800ef7c:	d14b      	bne.n	800f016 <follow_path+0xe6>
 800ef7e:	1868      	adds	r0, r5, r1
 800ef80:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ef82:	f810 cb01 	ldrb.w	ip, [r0], #1
 800ef86:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800ef8a:	d0f9      	beq.n	800ef80 <follow_path+0x50>
 800ef8c:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
 800ef90:	d0f6      	beq.n	800ef80 <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 800ef92:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ef94:	2a00      	cmp	r2, #0
 800ef96:	d051      	beq.n	800f03c <follow_path+0x10c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ef98:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ef9c:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800ef9e:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800efa2:	2ae5      	cmp	r2, #229	; 0xe5
 800efa4:	bf04      	itt	eq
 800efa6:	2205      	moveq	r2, #5
 800efa8:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800efac:	2b21      	cmp	r3, #33	; 0x21
 800efae:	bf34      	ite	cc
 800efb0:	2304      	movcc	r3, #4
 800efb2:	2300      	movcs	r3, #0
 800efb4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800efb8:	f7ff ff12 	bl	800ede0 <dir_sdi.constprop.14>
	if (res != FR_OK) return res;
 800efbc:	2800      	cmp	r0, #0
 800efbe:	d141      	bne.n	800f044 <follow_path+0x114>
		res = move_window(fs, dp->sect);
 800efc0:	69e1      	ldr	r1, [r4, #28]
 800efc2:	4648      	mov	r0, r9
 800efc4:	f7ff fb94 	bl	800e6f0 <move_window>
		if (res != FR_OK) break;
 800efc8:	2800      	cmp	r0, #0
 800efca:	d13b      	bne.n	800f044 <follow_path+0x114>
		c = dp->dir[DIR_Name];
 800efcc:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800efce:	781a      	ldrb	r2, [r3, #0]
 800efd0:	2a00      	cmp	r2, #0
 800efd2:	d042      	beq.n	800f05a <follow_path+0x12a>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800efd4:	7ada      	ldrb	r2, [r3, #11]
 800efd6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800efda:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800efdc:	7ada      	ldrb	r2, [r3, #11]
 800efde:	0711      	lsls	r1, r2, #28
 800efe0:	d40c      	bmi.n	800effc <follow_path+0xcc>
 800efe2:	f103 0c0b 	add.w	ip, r3, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800efe6:	4631      	mov	r1, r6
		r = *d++ - *s++;
 800efe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efec:	f811 eb01 	ldrb.w	lr, [r1], #1
	} while (--cnt && r == 0);
 800eff0:	459c      	cmp	ip, r3
		r = *d++ - *s++;
 800eff2:	eba2 020e 	sub.w	r2, r2, lr
	} while (--cnt && r == 0);
 800eff6:	d023      	beq.n	800f040 <follow_path+0x110>
 800eff8:	2a00      	cmp	r2, #0
 800effa:	d0f5      	beq.n	800efe8 <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 800effc:	2100      	movs	r1, #0
 800effe:	4620      	mov	r0, r4
 800f000:	f7ff ff21 	bl	800ee46 <dir_next>
 800f004:	e7da      	b.n	800efbc <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 800f006:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800f008:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 800f00a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}
 800f00e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 800f012:	f7ff bee5 	b.w	800ede0 <dir_sdi.constprop.14>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f016:	2b2e      	cmp	r3, #46	; 0x2e
 800f018:	d033      	beq.n	800f082 <follow_path+0x152>
 800f01a:	4290      	cmp	r0, r2
 800f01c:	d90e      	bls.n	800f03c <follow_path+0x10c>
		if (c >= 0x80) {				/* Extended character? */
 800f01e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f022:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800f0a4 <follow_path+0x174>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f026:	bf1c      	itt	ne
 800f028:	3b80      	subne	r3, #128	; 0x80
 800f02a:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 800f02e:	f819 ef01 	ldrb.w	lr, [r9, #1]!
 800f032:	f1be 0f00 	cmp.w	lr, #0
 800f036:	d029      	beq.n	800f08c <follow_path+0x15c>
 800f038:	4573      	cmp	r3, lr
 800f03a:	d1f8      	bne.n	800f02e <follow_path+0xfe>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f03c:	2006      	movs	r0, #6
	return res;
 800f03e:	e00a      	b.n	800f056 <follow_path+0x126>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f040:	2a00      	cmp	r2, #0
 800f042:	d1db      	bne.n	800effc <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 800f044:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800f048:	b148      	cbz	r0, 800f05e <follow_path+0x12e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f04a:	2804      	cmp	r0, #4
 800f04c:	d103      	bne.n	800f056 <follow_path+0x126>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f04e:	f013 0f04 	tst.w	r3, #4
 800f052:	bf08      	it	eq
 800f054:	2005      	moveq	r0, #5
}
 800f056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f05a:	2004      	movs	r0, #4
 800f05c:	e7f2      	b.n	800f044 <follow_path+0x114>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f05e:	075a      	lsls	r2, r3, #29
 800f060:	d4f9      	bmi.n	800f056 <follow_path+0x126>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f062:	79a3      	ldrb	r3, [r4, #6]
 800f064:	06db      	lsls	r3, r3, #27
 800f066:	d50a      	bpl.n	800f07e <follow_path+0x14e>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f068:	6963      	ldr	r3, [r4, #20]
 800f06a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800f06e:	7838      	ldrb	r0, [r7, #0]
 800f070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f074:	4419      	add	r1, r3
 800f076:	f7ff facd 	bl	800e614 <ld_clust.isra.1>
 800f07a:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f07c:	e76a      	b.n	800ef54 <follow_path+0x24>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f07e:	2005      	movs	r0, #5
 800f080:	e7e9      	b.n	800f056 <follow_path+0x126>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f082:	280b      	cmp	r0, #11
 800f084:	d0da      	beq.n	800f03c <follow_path+0x10c>
			i = 8; ni = 11;				/* Goto extension */
 800f086:	2208      	movs	r2, #8
 800f088:	200b      	movs	r0, #11
 800f08a:	e76f      	b.n	800ef6c <follow_path+0x3c>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f08c:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 800f090:	f1be 0f19 	cmp.w	lr, #25
 800f094:	d801      	bhi.n	800f09a <follow_path+0x16a>
 800f096:	3b20      	subs	r3, #32
 800f098:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 800f09a:	54b3      	strb	r3, [r6, r2]
 800f09c:	3201      	adds	r2, #1
 800f09e:	e765      	b.n	800ef6c <follow_path+0x3c>
 800f0a0:	08016840 	.word	0x08016840
 800f0a4:	080168bf 	.word	0x080168bf

0800f0a8 <dir_read.constprop.12>:
FRESULT dir_read (
 800f0a8:	b538      	push	{r3, r4, r5, lr}
 800f0aa:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800f0ac:	6805      	ldr	r5, [r0, #0]
	FRESULT res = FR_NO_FILE;
 800f0ae:	2004      	movs	r0, #4
	while (dp->sect) {
 800f0b0:	69e1      	ldr	r1, [r4, #28]
 800f0b2:	b909      	cbnz	r1, 800f0b8 <dir_read.constprop.12+0x10>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f0b4:	b1a8      	cbz	r0, 800f0e2 <dir_read.constprop.12+0x3a>
 800f0b6:	e01c      	b.n	800f0f2 <dir_read.constprop.12+0x4a>
		res = move_window(fs, dp->sect);
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	f7ff fb19 	bl	800e6f0 <move_window>
		if (res != FR_OK) break;
 800f0be:	b9c0      	cbnz	r0, 800f0f2 <dir_read.constprop.12+0x4a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f0c0:	6a23      	ldr	r3, [r4, #32]
 800f0c2:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) {
 800f0c4:	b1c2      	cbz	r2, 800f0f8 <dir_read.constprop.12+0x50>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f0c6:	7adb      	ldrb	r3, [r3, #11]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f0c8:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f0ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0ce:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f0d0:	d009      	beq.n	800f0e6 <dir_read.constprop.12+0x3e>
 800f0d2:	2a2e      	cmp	r2, #46	; 0x2e
 800f0d4:	d007      	beq.n	800f0e6 <dir_read.constprop.12+0x3e>
 800f0d6:	2b0f      	cmp	r3, #15
 800f0d8:	d005      	beq.n	800f0e6 <dir_read.constprop.12+0x3e>
 800f0da:	f023 0320 	bic.w	r3, r3, #32
 800f0de:	2b08      	cmp	r3, #8
 800f0e0:	d001      	beq.n	800f0e6 <dir_read.constprop.12+0x3e>
		res = move_window(fs, dp->sect);
 800f0e2:	2000      	movs	r0, #0
}
 800f0e4:	bd38      	pop	{r3, r4, r5, pc}
		res = dir_next(dp, 0);		/* Next entry */
 800f0e6:	2100      	movs	r1, #0
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	f7ff feac 	bl	800ee46 <dir_next>
		if (res != FR_OK) break;
 800f0ee:	2800      	cmp	r0, #0
 800f0f0:	d0de      	beq.n	800f0b0 <dir_read.constprop.12+0x8>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	61e3      	str	r3, [r4, #28]
 800f0f6:	e7f5      	b.n	800f0e4 <dir_read.constprop.12+0x3c>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f0f8:	2004      	movs	r0, #4
 800f0fa:	e7fa      	b.n	800f0f2 <dir_read.constprop.12+0x4a>

0800f0fc <dir_register>:
{
 800f0fc:	b570      	push	{r4, r5, r6, lr}
 800f0fe:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800f100:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800f102:	f7ff fe6d 	bl	800ede0 <dir_sdi.constprop.14>
	if (res == FR_OK) {
 800f106:	4604      	mov	r4, r0
 800f108:	bb28      	cbnz	r0, 800f156 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 800f10a:	69e9      	ldr	r1, [r5, #28]
 800f10c:	4630      	mov	r0, r6
 800f10e:	f7ff faef 	bl	800e6f0 <move_window>
			if (res != FR_OK) break;
 800f112:	4604      	mov	r4, r0
 800f114:	b9f8      	cbnz	r0, 800f156 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f116:	6a2b      	ldr	r3, [r5, #32]
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	2be5      	cmp	r3, #229	; 0xe5
 800f11c:	d114      	bne.n	800f148 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 800f11e:	69e9      	ldr	r1, [r5, #28]
 800f120:	4630      	mov	r0, r6
 800f122:	f7ff fae5 	bl	800e6f0 <move_window>
		if (res == FR_OK) {
 800f126:	4604      	mov	r4, r0
 800f128:	b960      	cbnz	r0, 800f144 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f12a:	4601      	mov	r1, r0
 800f12c:	2220      	movs	r2, #32
 800f12e:	6a28      	ldr	r0, [r5, #32]
 800f130:	f7ff f934 	bl	800e39c <mem_set>
 800f134:	220b      	movs	r2, #11
 800f136:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800f13a:	6a28      	ldr	r0, [r5, #32]
 800f13c:	f7ff fa61 	bl	800e602 <mem_cpy.part.0>
			fs->wflag = 1;
 800f140:	2301      	movs	r3, #1
 800f142:	70f3      	strb	r3, [r6, #3]
}
 800f144:	4620      	mov	r0, r4
 800f146:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d0e8      	beq.n	800f11e <dir_register+0x22>
			res = dir_next(dp, 1);
 800f14c:	2101      	movs	r1, #1
 800f14e:	4628      	mov	r0, r5
 800f150:	f7ff fe79 	bl	800ee46 <dir_next>
 800f154:	e7d7      	b.n	800f106 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f156:	2c04      	cmp	r4, #4
 800f158:	bf08      	it	eq
 800f15a:	2407      	moveq	r4, #7
 800f15c:	e7f2      	b.n	800f144 <dir_register+0x48>

0800f15e <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f15e:	b538      	push	{r3, r4, r5, lr}
 800f160:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f162:	4604      	mov	r4, r0
 800f164:	b1d0      	cbz	r0, 800f19c <validate+0x3e>
 800f166:	6803      	ldr	r3, [r0, #0]
 800f168:	b1db      	cbz	r3, 800f1a2 <validate+0x44>
 800f16a:	781a      	ldrb	r2, [r3, #0]
 800f16c:	b1b2      	cbz	r2, 800f19c <validate+0x3e>
 800f16e:	8881      	ldrh	r1, [r0, #4]
 800f170:	88da      	ldrh	r2, [r3, #6]
 800f172:	4291      	cmp	r1, r2
 800f174:	d112      	bne.n	800f19c <validate+0x3e>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f176:	68d8      	ldr	r0, [r3, #12]
 800f178:	f000 fcbe 	bl	800faf8 <ff_req_grant>
 800f17c:	4603      	mov	r3, r0
 800f17e:	b190      	cbz	r0, 800f1a6 <validate+0x48>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f180:	6823      	ldr	r3, [r4, #0]
 800f182:	7858      	ldrb	r0, [r3, #1]
 800f184:	f7ff f8b6 	bl	800e2f4 <disk_status>
 800f188:	f010 0001 	ands.w	r0, r0, #1
 800f18c:	d102      	bne.n	800f194 <validate+0x36>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f18e:	6823      	ldr	r3, [r4, #0]
 800f190:	602b      	str	r3, [r5, #0]
	return res;
}
 800f192:	bd38      	pop	{r3, r4, r5, pc}
				unlock_fs(obj->fs, FR_OK);
 800f194:	2100      	movs	r1, #0
 800f196:	6820      	ldr	r0, [r4, #0]
 800f198:	f7ff fdcc 	bl	800ed34 <unlock_fs>
	FRESULT res = FR_INVALID_OBJECT;
 800f19c:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f19e:	2300      	movs	r3, #0
 800f1a0:	e7f6      	b.n	800f190 <validate+0x32>
	FRESULT res = FR_INVALID_OBJECT;
 800f1a2:	2009      	movs	r0, #9
 800f1a4:	e7f4      	b.n	800f190 <validate+0x32>
			res = FR_TIMEOUT;
 800f1a6:	200f      	movs	r0, #15
 800f1a8:	e7f2      	b.n	800f190 <validate+0x32>
	...

0800f1ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1ae:	b085      	sub	sp, #20
 800f1b0:	4616      	mov	r6, r2
 800f1b2:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f1b6:	a804      	add	r0, sp, #16
 800f1b8:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f1bc:	f7ff fa09 	bl	800e5d2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800f1c0:	1e07      	subs	r7, r0, #0
 800f1c2:	db35      	blt.n	800f230 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f1c4:	4d1c      	ldr	r5, [pc, #112]	; (800f238 <f_mount+0x8c>)
 800f1c6:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]

	if (cfs) {
 800f1ca:	b1a4      	cbz	r4, 800f1f6 <f_mount+0x4a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f1cc:	4b1b      	ldr	r3, [pc, #108]	; (800f23c <f_mount+0x90>)
#if _FS_LOCK != 0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f1ce:	68e0      	ldr	r0, [r4, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	4294      	cmp	r4, r2
 800f1d4:	bf04      	itt	eq
 800f1d6:	2200      	moveq	r2, #0
 800f1d8:	601a      	streq	r2, [r3, #0]
 800f1da:	691a      	ldr	r2, [r3, #16]
 800f1dc:	4294      	cmp	r4, r2
 800f1de:	bf04      	itt	eq
 800f1e0:	2200      	moveq	r2, #0
 800f1e2:	611a      	streq	r2, [r3, #16]
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f1e4:	f000 fc83 	bl	800faee <ff_del_syncobj>
 800f1e8:	b918      	cbnz	r0, 800f1f2 <f_mount+0x46>
 800f1ea:	2402      	movs	r4, #2

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	b005      	add	sp, #20
 800f1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cfs->fs_type = 0;				/* Clear old fs object */
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	7023      	strb	r3, [r4, #0]
	if (fs) {
 800f1f6:	9901      	ldr	r1, [sp, #4]
 800f1f8:	b989      	cbnz	r1, 800f21e <f_mount+0x72>
	FatFs[vol] = fs;					/* Register new fs object */
 800f1fa:	9c01      	ldr	r4, [sp, #4]
 800f1fc:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f200:	2c00      	cmp	r4, #0
 800f202:	d0f3      	beq.n	800f1ec <f_mount+0x40>
 800f204:	2e01      	cmp	r6, #1
 800f206:	d115      	bne.n	800f234 <f_mount+0x88>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f208:	a901      	add	r1, sp, #4
 800f20a:	2200      	movs	r2, #0
 800f20c:	4668      	mov	r0, sp
 800f20e:	f7ff facb 	bl	800e7a8 <find_volume>
 800f212:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 800f214:	4601      	mov	r1, r0
 800f216:	9801      	ldr	r0, [sp, #4]
 800f218:	f7ff fd8c 	bl	800ed34 <unlock_fs>
 800f21c:	e7e6      	b.n	800f1ec <f_mount+0x40>
		fs->fs_type = 0;				/* Clear new fs object */
 800f21e:	2300      	movs	r3, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f220:	b2f8      	uxtb	r0, r7
		fs->fs_type = 0;				/* Clear new fs object */
 800f222:	f801 3b0c 	strb.w	r3, [r1], #12
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f226:	f000 fc56 	bl	800fad6 <ff_cre_syncobj>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	d1e5      	bne.n	800f1fa <f_mount+0x4e>
 800f22e:	e7dc      	b.n	800f1ea <f_mount+0x3e>
	if (vol < 0) return FR_INVALID_DRIVE;
 800f230:	240b      	movs	r4, #11
 800f232:	e7db      	b.n	800f1ec <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f234:	2400      	movs	r4, #0
 800f236:	e7d9      	b.n	800f1ec <f_mount+0x40>
 800f238:	24000904 	.word	0x24000904
 800f23c:	24000908 	.word	0x24000908

0800f240 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f244:	b090      	sub	sp, #64	; 0x40
 800f246:	4690      	mov	r8, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f248:	4604      	mov	r4, r0
{
 800f24a:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 800f24c:	2800      	cmp	r0, #0
 800f24e:	f000 80bb 	beq.w	800f3c8 <f_open+0x188>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f252:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800f256:	a902      	add	r1, sp, #8
 800f258:	a801      	add	r0, sp, #4
 800f25a:	462a      	mov	r2, r5
 800f25c:	f7ff faa4 	bl	800e7a8 <find_volume>
	if (res == FR_OK) {
 800f260:	4607      	mov	r7, r0
 800f262:	2800      	cmp	r0, #0
 800f264:	d165      	bne.n	800f332 <f_open+0xf2>
		dj.obj.fs = fs;
 800f266:	ae10      	add	r6, sp, #64	; 0x40
 800f268:	9b02      	ldr	r3, [sp, #8]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f26a:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800f26c:	f846 3d34 	str.w	r3, [r6, #-52]!
		res = follow_path(&dj, path);	/* Follow the file path */
 800f270:	4630      	mov	r0, r6
 800f272:	f7ff fe5d 	bl	800ef30 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f276:	b958      	cbnz	r0, 800f290 <f_open+0x50>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f278:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	db63      	blt.n	800f348 <f_open+0x108>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f280:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 800f284:	4630      	mov	r0, r6
 800f286:	bf14      	ite	ne
 800f288:	2101      	movne	r1, #1
 800f28a:	2100      	moveq	r1, #0
 800f28c:	f7ff f88c 	bl	800e3a8 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f290:	f018 0f1c 	tst.w	r8, #28
 800f294:	d064      	beq.n	800f360 <f_open+0x120>
			if (res != FR_OK) {					/* No file, create new */
 800f296:	2800      	cmp	r0, #0
 800f298:	d058      	beq.n	800f34c <f_open+0x10c>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f29a:	2804      	cmp	r0, #4
 800f29c:	d149      	bne.n	800f332 <f_open+0xf2>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f29e:	4b6f      	ldr	r3, [pc, #444]	; (800f45c <f_open+0x21c>)
 800f2a0:	681a      	ldr	r2, [r3, #0]
 800f2a2:	b11a      	cbz	r2, 800f2ac <f_open+0x6c>
 800f2a4:	691b      	ldr	r3, [r3, #16]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f040 8088 	bne.w	800f3bc <f_open+0x17c>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f2ac:	4630      	mov	r0, r6
 800f2ae:	f7ff ff25 	bl	800f0fc <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f2b2:	2800      	cmp	r0, #0
 800f2b4:	d13d      	bne.n	800f332 <f_open+0xf2>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f2b6:	f045 0508 	orr.w	r5, r5, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f2ba:	0728      	lsls	r0, r5, #28
 800f2bc:	d55b      	bpl.n	800f376 <f_open+0x136>
				dw = GET_FATTIME();
 800f2be:	f7fe f95d 	bl	800d57c <get_fattime>
 800f2c2:	4602      	mov	r2, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f2c4:	4601      	mov	r1, r0
 800f2c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f2c8:	300e      	adds	r0, #14
 800f2ca:	f7ff f85f 	bl	800e38c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f2ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f2d0:	4611      	mov	r1, r2
 800f2d2:	3016      	adds	r0, #22
 800f2d4:	f7ff f85a 	bl	800e38c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f2d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2da:	2220      	movs	r2, #32
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f2dc:	f8dd 9008 	ldr.w	r9, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f2e0:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f2e2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800f2e6:	f899 0000 	ldrb.w	r0, [r9]
 800f2ea:	4651      	mov	r1, sl
 800f2ec:	f7ff f992 	bl	800e614 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f2f0:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f2f2:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f2f4:	4648      	mov	r0, r9
 800f2f6:	f7ff f99c 	bl	800e632 <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f2fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800f2fc:	2200      	movs	r2, #0
					fs->wflag = 1;
 800f2fe:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800f300:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800f302:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 800f304:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 800f306:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 800f308:	9b02      	ldr	r3, [sp, #8]
 800f30a:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f30c:	f1b8 0f00 	cmp.w	r8, #0
 800f310:	d031      	beq.n	800f376 <f_open+0x136>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 800f312:	4641      	mov	r1, r8
 800f314:	4630      	mov	r0, r6
						dw = fs->winsect;
 800f316:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800f31a:	f7ff fcd4 	bl	800ecc6 <remove_chain>
						if (res == FR_OK) {
 800f31e:	b940      	cbnz	r0, 800f332 <f_open+0xf2>
							res = move_window(fs, dw);
 800f320:	4649      	mov	r1, r9
 800f322:	9802      	ldr	r0, [sp, #8]
 800f324:	f7ff f9e4 	bl	800e6f0 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f328:	f108 33ff 	add.w	r3, r8, #4294967295
 800f32c:	9a02      	ldr	r2, [sp, #8]
 800f32e:	6113      	str	r3, [r2, #16]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 800f330:	b308      	cbz	r0, 800f376 <f_open+0x136>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f332:	2300      	movs	r3, #0
 800f334:	4607      	mov	r7, r0
 800f336:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
 800f338:	4639      	mov	r1, r7
 800f33a:	9802      	ldr	r0, [sp, #8]
 800f33c:	f7ff fcfa 	bl	800ed34 <unlock_fs>
}
 800f340:	4638      	mov	r0, r7
 800f342:	b010      	add	sp, #64	; 0x40
 800f344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 800f348:	2006      	movs	r0, #6
 800f34a:	e7a1      	b.n	800f290 <f_open+0x50>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f34c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800f350:	f013 0f11 	tst.w	r3, #17
 800f354:	d136      	bne.n	800f3c4 <f_open+0x184>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f356:	f018 0f04 	tst.w	r8, #4
 800f35a:	d0ae      	beq.n	800f2ba <f_open+0x7a>
 800f35c:	2008      	movs	r0, #8
 800f35e:	e7e8      	b.n	800f332 <f_open+0xf2>
			if (res == FR_OK) {					/* Following succeeded */
 800f360:	2800      	cmp	r0, #0
 800f362:	d1e6      	bne.n	800f332 <f_open+0xf2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f364:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800f368:	06da      	lsls	r2, r3, #27
 800f36a:	d429      	bmi.n	800f3c0 <f_open+0x180>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f36c:	f018 0f02 	tst.w	r8, #2
 800f370:	d001      	beq.n	800f376 <f_open+0x136>
 800f372:	07db      	lsls	r3, r3, #31
 800f374:	d426      	bmi.n	800f3c4 <f_open+0x184>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f376:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f378:	9b02      	ldr	r3, [sp, #8]
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f37a:	4630      	mov	r0, r6
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				mode |= FA_MODIFIED;
 800f37e:	bf48      	it	mi
 800f380:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f384:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f386:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 800f38a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f38c:	bf14      	ite	ne
 800f38e:	2101      	movne	r1, #1
 800f390:	2100      	moveq	r1, #0
			fp->dir_ptr = dj.dir;
 800f392:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f394:	f7ff f842 	bl	800e41c <inc_lock>
 800f398:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f39a:	b9b8      	cbnz	r0, 800f3cc <f_open+0x18c>
 800f39c:	2002      	movs	r0, #2
 800f39e:	e7c8      	b.n	800f332 <f_open+0xf2>
					clst = get_fat(&fp->obj, clst);
 800f3a0:	6820      	ldr	r0, [r4, #0]
 800f3a2:	eba5 0508 	sub.w	r5, r5, r8
 800f3a6:	f7ff fbdc 	bl	800eb62 <get_fat.isra.9>
					if (clst <= 1) res = FR_INT_ERR;
 800f3aa:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800f3ac:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800f3ae:	d903      	bls.n	800f3b8 <f_open+0x178>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f3b0:	1c42      	adds	r2, r0, #1
 800f3b2:	d134      	bne.n	800f41e <f_open+0x1de>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f3b4:	2001      	movs	r0, #1
 800f3b6:	e035      	b.n	800f424 <f_open+0x1e4>
					if (clst <= 1) res = FR_INT_ERR;
 800f3b8:	2002      	movs	r0, #2
 800f3ba:	e033      	b.n	800f424 <f_open+0x1e4>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f3bc:	2012      	movs	r0, #18
 800f3be:	e7b8      	b.n	800f332 <f_open+0xf2>
					res = FR_NO_FILE;
 800f3c0:	2004      	movs	r0, #4
 800f3c2:	e7b6      	b.n	800f332 <f_open+0xf2>
					res = FR_DENIED;
 800f3c4:	2007      	movs	r0, #7
 800f3c6:	e7b4      	b.n	800f332 <f_open+0xf2>
	if (!fp) return FR_INVALID_OBJECT;
 800f3c8:	2709      	movs	r7, #9
 800f3ca:	e7b9      	b.n	800f340 <f_open+0x100>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f3cc:	9e02      	ldr	r6, [sp, #8]
 800f3ce:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800f3d2:	7830      	ldrb	r0, [r6, #0]
 800f3d4:	4641      	mov	r1, r8
 800f3d6:	f7ff f91d 	bl	800e614 <ld_clust.isra.1>
 800f3da:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f3dc:	f108 001c 	add.w	r0, r8, #28
 800f3e0:	f7fe ffcc 	bl	800e37c <ld_dword>
			fp->obj.id = fs->id;
 800f3e4:	88f3      	ldrh	r3, [r6, #6]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f3e6:	2100      	movs	r1, #0
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f3e8:	6026      	str	r6, [r4, #0]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f3ea:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f3ee:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 800f3f0:	80a3      	strh	r3, [r4, #4]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f3f2:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f3f6:	62e1      	str	r1, [r4, #44]	; 0x2c
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f3f8:	4630      	mov	r0, r6
			fp->flag = mode;		/* Set file access mode */
 800f3fa:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 800f3fc:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f3fe:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f400:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f402:	f7fe ffcb 	bl	800e39c <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f406:	06ab      	lsls	r3, r5, #26
 800f408:	d596      	bpl.n	800f338 <f_open+0xf8>
 800f40a:	68e5      	ldr	r5, [r4, #12]
 800f40c:	2d00      	cmp	r5, #0
 800f40e:	d093      	beq.n	800f338 <f_open+0xf8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f410:	9b02      	ldr	r3, [sp, #8]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f412:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f414:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f418:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f41a:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f41e:	45a8      	cmp	r8, r5
 800f420:	d3be      	bcc.n	800f3a0 <f_open+0x160>
 800f422:	2000      	movs	r0, #0
				fp->clust = clst;
 800f424:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f426:	2800      	cmp	r0, #0
 800f428:	d183      	bne.n	800f332 <f_open+0xf2>
 800f42a:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d082      	beq.n	800f338 <f_open+0xf8>
 800f432:	f8dd 8008 	ldr.w	r8, [sp, #8]
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f436:	4640      	mov	r0, r8
 800f438:	f7ff f84c 	bl	800e4d4 <clust2sect>
 800f43c:	2800      	cmp	r0, #0
 800f43e:	d0ad      	beq.n	800f39c <f_open+0x15c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f440:	eb00 2255 	add.w	r2, r0, r5, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f444:	2301      	movs	r3, #1
 800f446:	4631      	mov	r1, r6
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f448:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f44a:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f44e:	f7fe ff6b 	bl	800e328 <disk_read>
 800f452:	2800      	cmp	r0, #0
 800f454:	f43f af70 	beq.w	800f338 <f_open+0xf8>
 800f458:	2001      	movs	r0, #1
 800f45a:	e76a      	b.n	800f332 <f_open+0xf2>
 800f45c:	24000908 	.word	0x24000908

0800f460 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f464:	469b      	mov	fp, r3
 800f466:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800f468:	2300      	movs	r3, #0
{
 800f46a:	4689      	mov	r9, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f46c:	a903      	add	r1, sp, #12
{
 800f46e:	4604      	mov	r4, r0
	*bw = 0;	/* Clear write byte counter */
 800f470:	f8cb 3000 	str.w	r3, [fp]
{
 800f474:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f476:	f7ff fe72 	bl	800f15e <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f47a:	4605      	mov	r5, r0
 800f47c:	b908      	cbnz	r0, 800f482 <f_write+0x22>
 800f47e:	7d65      	ldrb	r5, [r4, #21]
 800f480:	b10d      	cbz	r5, 800f486 <f_write+0x26>
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
 800f482:	4629      	mov	r1, r5
 800f484:	e01e      	b.n	800f4c4 <f_write+0x64>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f486:	7d23      	ldrb	r3, [r4, #20]
 800f488:	079a      	lsls	r2, r3, #30
 800f48a:	d408      	bmi.n	800f49e <f_write+0x3e>
 800f48c:	2507      	movs	r5, #7
 800f48e:	2107      	movs	r1, #7
 800f490:	9803      	ldr	r0, [sp, #12]
 800f492:	f7ff fc4f 	bl	800ed34 <unlock_fs>
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800f496:	4628      	mov	r0, r5
 800f498:	b005      	add	sp, #20
 800f49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f49e:	69a3      	ldr	r3, [r4, #24]
 800f4a0:	42fb      	cmn	r3, r7
 800f4a2:	d300      	bcc.n	800f4a6 <f_write+0x46>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f4a4:	43df      	mvns	r7, r3
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f4a6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800f4aa:	9300      	str	r3, [sp, #0]
 800f4ac:	e070      	b.n	800f590 <f_write+0x130>
					if (fp->cltbl) {
 800f4ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f4b0:	b163      	cbz	r3, 800f4cc <f_write+0x6c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	f7ff f819 	bl	800e4ea <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f4b8:	b950      	cbnz	r0, 800f4d0 <f_write+0x70>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f4ba:	7d23      	ldrb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800f4bc:	2100      	movs	r1, #0
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f4be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4c2:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800f4c4:	9803      	ldr	r0, [sp, #12]
 800f4c6:	f7ff fc35 	bl	800ed34 <unlock_fs>
 800f4ca:	e7e4      	b.n	800f496 <f_write+0x36>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f4cc:	69e1      	ldr	r1, [r4, #28]
 800f4ce:	e073      	b.n	800f5b8 <f_write+0x158>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f4d0:	2801      	cmp	r0, #1
 800f4d2:	d102      	bne.n	800f4da <f_write+0x7a>
 800f4d4:	2502      	movs	r5, #2
					ABORT(fs, FR_DISK_ERR);
 800f4d6:	7565      	strb	r5, [r4, #21]
 800f4d8:	e7d3      	b.n	800f482 <f_write+0x22>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f4da:	1c43      	adds	r3, r0, #1
 800f4dc:	d101      	bne.n	800f4e2 <f_write+0x82>
					ABORT(fs, FR_DISK_ERR);
 800f4de:	2501      	movs	r5, #1
 800f4e0:	e7f9      	b.n	800f4d6 <f_write+0x76>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f4e2:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800f4e4:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f4e6:	b903      	cbnz	r3, 800f4ea <f_write+0x8a>
 800f4e8:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f4ea:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	da0c      	bge.n	800f50c <f_write+0xac>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f4f2:	9803      	ldr	r0, [sp, #12]
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	6a22      	ldr	r2, [r4, #32]
 800f4f8:	9900      	ldr	r1, [sp, #0]
 800f4fa:	7840      	ldrb	r0, [r0, #1]
 800f4fc:	f7fe ff22 	bl	800e344 <disk_write>
 800f500:	2800      	cmp	r0, #0
 800f502:	d1ec      	bne.n	800f4de <f_write+0x7e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f504:	7d23      	ldrb	r3, [r4, #20]
 800f506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f50a:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f50c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800f510:	69e1      	ldr	r1, [r4, #28]
 800f512:	4650      	mov	r0, sl
 800f514:	f7fe ffde 	bl	800e4d4 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f518:	b920      	cbnz	r0, 800f524 <f_write+0xc4>
 800f51a:	2502      	movs	r5, #2
 800f51c:	4650      	mov	r0, sl
 800f51e:	7565      	strb	r5, [r4, #21]
 800f520:	4629      	mov	r1, r5
 800f522:	e7d0      	b.n	800f4c6 <f_write+0x66>
			sect += csect;
 800f524:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f526:	0a7e      	lsrs	r6, r7, #9
			sect += csect;
 800f528:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f52c:	d048      	beq.n	800f5c0 <f_write+0x160>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f52e:	9a01      	ldr	r2, [sp, #4]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f530:	4649      	mov	r1, r9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f532:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 800f536:	4432      	add	r2, r6
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f538:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f53c:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800f53e:	bf84      	itt	hi
 800f540:	9a01      	ldrhi	r2, [sp, #4]
 800f542:	1a9e      	subhi	r6, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f544:	4642      	mov	r2, r8
 800f546:	4633      	mov	r3, r6
 800f548:	f7fe fefc 	bl	800e344 <disk_write>
 800f54c:	2800      	cmp	r0, #0
 800f54e:	d1c6      	bne.n	800f4de <f_write+0x7e>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f550:	6a21      	ldr	r1, [r4, #32]
 800f552:	eba1 0108 	sub.w	r1, r1, r8
 800f556:	42b1      	cmp	r1, r6
 800f558:	d20a      	bcs.n	800f570 <f_write+0x110>
 800f55a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f55e:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 800f562:	9800      	ldr	r0, [sp, #0]
 800f564:	f7ff f84d 	bl	800e602 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f568:	7d23      	ldrb	r3, [r4, #20]
 800f56a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f56e:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f570:	0276      	lsls	r6, r6, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f572:	69a3      	ldr	r3, [r4, #24]
 800f574:	44b1      	add	r9, r6
 800f576:	68e2      	ldr	r2, [r4, #12]
 800f578:	1bbf      	subs	r7, r7, r6
 800f57a:	4433      	add	r3, r6
 800f57c:	61a3      	str	r3, [r4, #24]
 800f57e:	429a      	cmp	r2, r3
 800f580:	bf2c      	ite	cs
 800f582:	60e2      	strcs	r2, [r4, #12]
 800f584:	60e3      	strcc	r3, [r4, #12]
 800f586:	f8db 3000 	ldr.w	r3, [fp]
 800f58a:	4433      	add	r3, r6
 800f58c:	f8cb 3000 	str.w	r3, [fp]
	for ( ;  btw;							/* Repeat until all data written */
 800f590:	2f00      	cmp	r7, #0
 800f592:	d092      	beq.n	800f4ba <f_write+0x5a>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f594:	69a1      	ldr	r1, [r4, #24]
 800f596:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800f59a:	bb23      	cbnz	r3, 800f5e6 <f_write+0x186>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f59c:	9b03      	ldr	r3, [sp, #12]
 800f59e:	895b      	ldrh	r3, [r3, #10]
 800f5a0:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800f5a2:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 800f5a6:	9301      	str	r3, [sp, #4]
 800f5a8:	d19f      	bne.n	800f4ea <f_write+0x8a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f5aa:	2900      	cmp	r1, #0
 800f5ac:	f47f af7f 	bne.w	800f4ae <f_write+0x4e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f5b0:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	d18c      	bne.n	800f4d0 <f_write+0x70>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f5b6:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f5b8:	4620      	mov	r0, r4
 800f5ba:	f7ff fb2c 	bl	800ec16 <create_chain>
 800f5be:	e77b      	b.n	800f4b8 <f_write+0x58>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f5c0:	6a23      	ldr	r3, [r4, #32]
 800f5c2:	4543      	cmp	r3, r8
 800f5c4:	d00d      	beq.n	800f5e2 <f_write+0x182>
 800f5c6:	68e2      	ldr	r2, [r4, #12]
 800f5c8:	69a3      	ldr	r3, [r4, #24]
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d909      	bls.n	800f5e2 <f_write+0x182>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	4642      	mov	r2, r8
 800f5d2:	9900      	ldr	r1, [sp, #0]
 800f5d4:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800f5d8:	f7fe fea6 	bl	800e328 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	f47f af7e 	bne.w	800f4de <f_write+0x7e>
			fp->sect = sect;
 800f5e2:	f8c4 8020 	str.w	r8, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f5e6:	69a0      	ldr	r0, [r4, #24]
 800f5e8:	4649      	mov	r1, r9
 800f5ea:	9b00      	ldr	r3, [sp, #0]
 800f5ec:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800f5f0:	f5c0 7600 	rsb	r6, r0, #512	; 0x200
 800f5f4:	4418      	add	r0, r3
 800f5f6:	42be      	cmp	r6, r7
 800f5f8:	bf28      	it	cs
 800f5fa:	463e      	movcs	r6, r7
 800f5fc:	4632      	mov	r2, r6
 800f5fe:	f7ff f800 	bl	800e602 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 800f602:	7d23      	ldrb	r3, [r4, #20]
 800f604:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f608:	7523      	strb	r3, [r4, #20]
 800f60a:	e7b2      	b.n	800f572 <f_write+0x112>

0800f60c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f60c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f60e:	a901      	add	r1, sp, #4
{
 800f610:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f612:	f7ff fda4 	bl	800f15e <validate>
	if (res == FR_OK) {
 800f616:	4605      	mov	r5, r0
 800f618:	2800      	cmp	r0, #0
 800f61a:	d142      	bne.n	800f6a2 <f_sync+0x96>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f61c:	7d23      	ldrb	r3, [r4, #20]
 800f61e:	065a      	lsls	r2, r3, #25
 800f620:	d53f      	bpl.n	800f6a2 <f_sync+0x96>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f622:	061b      	lsls	r3, r3, #24
 800f624:	d514      	bpl.n	800f650 <f_sync+0x44>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f626:	9801      	ldr	r0, [sp, #4]
 800f628:	2301      	movs	r3, #1
 800f62a:	6a22      	ldr	r2, [r4, #32]
 800f62c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800f630:	7840      	ldrb	r0, [r0, #1]
 800f632:	f7fe fe87 	bl	800e344 <disk_write>
 800f636:	b138      	cbz	r0, 800f648 <f_sync+0x3c>
 800f638:	2501      	movs	r5, #1
 800f63a:	2101      	movs	r1, #1
 800f63c:	9801      	ldr	r0, [sp, #4]
 800f63e:	f7ff fb79 	bl	800ed34 <unlock_fs>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800f642:	4628      	mov	r0, r5
 800f644:	b003      	add	sp, #12
 800f646:	bdf0      	pop	{r4, r5, r6, r7, pc}
				fp->flag &= (BYTE)~FA_DIRTY;
 800f648:	7d23      	ldrb	r3, [r4, #20]
 800f64a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f64e:	7523      	strb	r3, [r4, #20]
			tm = GET_FATTIME();				/* Modified time */
 800f650:	f7fd ff94 	bl	800d57c <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800f654:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 800f656:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 800f658:	9801      	ldr	r0, [sp, #4]
 800f65a:	f7ff f849 	bl	800e6f0 <move_window>
				if (res == FR_OK) {
 800f65e:	4605      	mov	r5, r0
 800f660:	b9f8      	cbnz	r0, 800f6a2 <f_sync+0x96>
					dir = fp->dir_ptr;
 800f662:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f664:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f666:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f668:	f043 0320 	orr.w	r3, r3, #32
 800f66c:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f66e:	68a2      	ldr	r2, [r4, #8]
 800f670:	6820      	ldr	r0, [r4, #0]
 800f672:	f7fe ffde 	bl	800e632 <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f676:	68e1      	ldr	r1, [r4, #12]
 800f678:	f106 001c 	add.w	r0, r6, #28
 800f67c:	f7fe fe86 	bl	800e38c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f680:	4639      	mov	r1, r7
 800f682:	f106 0016 	add.w	r0, r6, #22
 800f686:	f7fe fe81 	bl	800e38c <st_dword>
					fs->wflag = 1;
 800f68a:	2301      	movs	r3, #1
 800f68c:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800f68e:	74b5      	strb	r5, [r6, #18]
	*ptr++ = (BYTE)val;
 800f690:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 800f692:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f694:	f7ff fb59 	bl	800ed4a <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f698:	7d23      	ldrb	r3, [r4, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f69a:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f69c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6a0:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, res);
 800f6a2:	4629      	mov	r1, r5
 800f6a4:	9801      	ldr	r0, [sp, #4]
 800f6a6:	f7ff fb45 	bl	800ed34 <unlock_fs>
 800f6aa:	e7ca      	b.n	800f642 <f_sync+0x36>

0800f6ac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f6ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6ae:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f6b0:	f7ff ffac 	bl	800f60c <f_sync>
	if (res == FR_OK)
 800f6b4:	4604      	mov	r4, r0
 800f6b6:	b978      	cbnz	r0, 800f6d8 <f_close+0x2c>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f6b8:	a901      	add	r1, sp, #4
 800f6ba:	4628      	mov	r0, r5
 800f6bc:	f7ff fd4f 	bl	800f15e <validate>
		if (res == FR_OK) {
 800f6c0:	4604      	mov	r4, r0
 800f6c2:	b948      	cbnz	r0, 800f6d8 <f_close+0x2c>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f6c4:	6928      	ldr	r0, [r5, #16]
 800f6c6:	f7fe fee9 	bl	800e49c <dec_lock>
			if (res == FR_OK)
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	b900      	cbnz	r0, 800f6d0 <f_close+0x24>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f6ce:	6028      	str	r0, [r5, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	9801      	ldr	r0, [sp, #4]
 800f6d4:	f7ff fb2e 	bl	800ed34 <unlock_fs>
#endif
		}
	}
	return res;
}
 800f6d8:	4620      	mov	r0, r4
 800f6da:	b003      	add	sp, #12
 800f6dc:	bd30      	pop	{r4, r5, pc}

0800f6de <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f6de:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6e2:	460e      	mov	r6, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f6e4:	a901      	add	r1, sp, #4
{
 800f6e6:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f6e8:	f7ff fd39 	bl	800f15e <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f6ec:	4604      	mov	r4, r0
 800f6ee:	b908      	cbnz	r0, 800f6f4 <f_lseek+0x16>
 800f6f0:	7d6c      	ldrb	r4, [r5, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f6f2:	b114      	cbz	r4, 800f6fa <f_lseek+0x1c>
#endif
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
 800f6f4:	4621      	mov	r1, r4
 800f6f6:	9801      	ldr	r0, [sp, #4]
 800f6f8:	e051      	b.n	800f79e <f_lseek+0xc0>
	if (fp->cltbl) {	/* Fast seek */
 800f6fa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d07c      	beq.n	800f7fa <f_lseek+0x11c>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f700:	1c72      	adds	r2, r6, #1
 800f702:	d134      	bne.n	800f76e <f_lseek+0x90>
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f704:	68af      	ldr	r7, [r5, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f706:	f103 0904 	add.w	r9, r3, #4
 800f70a:	f8d3 a000 	ldr.w	sl, [r3]
 800f70e:	2602      	movs	r6, #2
			if (cl) {
 800f710:	b327      	cbz	r7, 800f75c <f_lseek+0x7e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f712:	f04f 0800 	mov.w	r8, #0
 800f716:	eb07 0108 	add.w	r1, r7, r8
						cl = get_fat(&fp->obj, cl);
 800f71a:	6828      	ldr	r0, [r5, #0]
 800f71c:	f7ff fa21 	bl	800eb62 <get_fat.isra.9>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f720:	2801      	cmp	r0, #1
						cl = get_fat(&fp->obj, cl);
 800f722:	f108 0801 	add.w	r8, r8, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f726:	d804      	bhi.n	800f732 <f_lseek+0x54>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f728:	2402      	movs	r4, #2
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f72a:	756c      	strb	r4, [r5, #21]
 800f72c:	e7e2      	b.n	800f6f4 <f_lseek+0x16>
 800f72e:	4607      	mov	r7, r0
 800f730:	e7ef      	b.n	800f712 <f_lseek+0x34>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f732:	1c43      	adds	r3, r0, #1
 800f734:	d101      	bne.n	800f73a <f_lseek+0x5c>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f736:	2401      	movs	r4, #1
 800f738:	e7f7      	b.n	800f72a <f_lseek+0x4c>
					} while (cl == pcl + 1);
 800f73a:	eb07 0308 	add.w	r3, r7, r8
 800f73e:	4283      	cmp	r3, r0
 800f740:	d0e9      	beq.n	800f716 <f_lseek+0x38>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f742:	3602      	adds	r6, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f744:	45b2      	cmp	sl, r6
						*tbl++ = ncl; *tbl++ = tcl;
 800f746:	bf21      	itttt	cs
 800f748:	464b      	movcs	r3, r9
 800f74a:	f843 8b08 	strcs.w	r8, [r3], #8
 800f74e:	f8c9 7004 	strcs.w	r7, [r9, #4]
 800f752:	4699      	movcs	r9, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f754:	9b01      	ldr	r3, [sp, #4]
 800f756:	699b      	ldr	r3, [r3, #24]
 800f758:	4283      	cmp	r3, r0
 800f75a:	d8e8      	bhi.n	800f72e <f_lseek+0x50>
			*fp->cltbl = ulen;	/* Number of items used */
 800f75c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			if (ulen <= tlen) {
 800f75e:	4556      	cmp	r6, sl
			*fp->cltbl = ulen;	/* Number of items used */
 800f760:	601e      	str	r6, [r3, #0]
			if (ulen <= tlen) {
 800f762:	f200 80e4 	bhi.w	800f92e <f_lseek+0x250>
				*tbl = 0;		/* Terminate table */
 800f766:	2300      	movs	r3, #0
 800f768:	f8c9 3000 	str.w	r3, [r9]
 800f76c:	e7c2      	b.n	800f6f4 <f_lseek+0x16>
 800f76e:	68e8      	ldr	r0, [r5, #12]
 800f770:	4286      	cmp	r6, r0
 800f772:	bf28      	it	cs
 800f774:	4606      	movcs	r6, r0
			fp->fptr = ofs;				/* Set file pointer */
 800f776:	61ae      	str	r6, [r5, #24]
			if (ofs) {
 800f778:	2e00      	cmp	r6, #0
 800f77a:	d0bb      	beq.n	800f6f4 <f_lseek+0x16>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f77c:	f106 38ff 	add.w	r8, r6, #4294967295
 800f780:	9f01      	ldr	r7, [sp, #4]
 800f782:	4628      	mov	r0, r5
 800f784:	4641      	mov	r1, r8
 800f786:	f7fe feb0 	bl	800e4ea <clmt_clust>
 800f78a:	4601      	mov	r1, r0
 800f78c:	61e8      	str	r0, [r5, #28]
				dsc = clust2sect(fs, fp->clust);
 800f78e:	4638      	mov	r0, r7
 800f790:	f7fe fea0 	bl	800e4d4 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f794:	b948      	cbnz	r0, 800f7aa <f_lseek+0xcc>
 800f796:	2402      	movs	r4, #2
 800f798:	4638      	mov	r0, r7
 800f79a:	4621      	mov	r1, r4
 800f79c:	756c      	strb	r4, [r5, #21]
	LEAVE_FF(fs, res);
 800f79e:	f7ff fac9 	bl	800ed34 <unlock_fs>
}
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	b002      	add	sp, #8
 800f7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f7aa:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800f7ae:	2e00      	cmp	r6, #0
 800f7b0:	d0a0      	beq.n	800f6f4 <f_lseek+0x16>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f7b2:	897e      	ldrh	r6, [r7, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f7b4:	6a2a      	ldr	r2, [r5, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f7b6:	3e01      	subs	r6, #1
 800f7b8:	ea06 2658 	and.w	r6, r6, r8, lsr #9
 800f7bc:	4406      	add	r6, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f7be:	42b2      	cmp	r2, r6
 800f7c0:	d098      	beq.n	800f6f4 <f_lseek+0x16>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f7c2:	f995 3014 	ldrsb.w	r3, [r5, #20]
 800f7c6:	f105 0830 	add.w	r8, r5, #48	; 0x30
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	da0a      	bge.n	800f7e4 <f_lseek+0x106>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	4641      	mov	r1, r8
 800f7d2:	7878      	ldrb	r0, [r7, #1]
 800f7d4:	f7fe fdb6 	bl	800e344 <disk_write>
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	d1ac      	bne.n	800f736 <f_lseek+0x58>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f7dc:	7d2b      	ldrb	r3, [r5, #20]
 800f7de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7e2:	752b      	strb	r3, [r5, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f7e4:	9801      	ldr	r0, [sp, #4]
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	4632      	mov	r2, r6
 800f7ea:	4641      	mov	r1, r8
 800f7ec:	7840      	ldrb	r0, [r0, #1]
 800f7ee:	f7fe fd9b 	bl	800e328 <disk_read>
 800f7f2:	2800      	cmp	r0, #0
 800f7f4:	d19f      	bne.n	800f736 <f_lseek+0x58>
					fp->sect = dsc;
 800f7f6:	622e      	str	r6, [r5, #32]
 800f7f8:	e77c      	b.n	800f6f4 <f_lseek+0x16>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f7fa:	68eb      	ldr	r3, [r5, #12]
 800f7fc:	42b3      	cmp	r3, r6
 800f7fe:	d204      	bcs.n	800f80a <f_lseek+0x12c>
 800f800:	7d2a      	ldrb	r2, [r5, #20]
 800f802:	f012 0f02 	tst.w	r2, #2
 800f806:	bf08      	it	eq
 800f808:	461e      	moveq	r6, r3
		fp->fptr = nsect = 0;
 800f80a:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800f80c:	69ab      	ldr	r3, [r5, #24]
		fp->fptr = nsect = 0;
 800f80e:	61aa      	str	r2, [r5, #24]
		if (ofs) {
 800f810:	b90e      	cbnz	r6, 800f816 <f_lseek+0x138>
		fp->fptr = nsect = 0;
 800f812:	4637      	mov	r7, r6
 800f814:	e01d      	b.n	800f852 <f_lseek+0x174>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f816:	9a01      	ldr	r2, [sp, #4]
 800f818:	8957      	ldrh	r7, [r2, #10]
 800f81a:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d040      	beq.n	800f8a2 <f_lseek+0x1c4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f820:	3b01      	subs	r3, #1
 800f822:	1e72      	subs	r2, r6, #1
 800f824:	fbb3 f1f7 	udiv	r1, r3, r7
 800f828:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 800f82c:	428a      	cmp	r2, r1
 800f82e:	d338      	bcc.n	800f8a2 <f_lseek+0x1c4>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f830:	427a      	negs	r2, r7
				clst = fp->clust;
 800f832:	69e9      	ldr	r1, [r5, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f834:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 800f836:	1af6      	subs	r6, r6, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f838:	61ab      	str	r3, [r5, #24]
			if (clst != 0) {
 800f83a:	2900      	cmp	r1, #0
 800f83c:	d160      	bne.n	800f900 <f_lseek+0x222>
		fp->fptr = nsect = 0;
 800f83e:	2700      	movs	r7, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f840:	68eb      	ldr	r3, [r5, #12]
 800f842:	69ae      	ldr	r6, [r5, #24]
 800f844:	429e      	cmp	r6, r3
			fp->flag |= FA_MODIFIED;
 800f846:	bf81      	itttt	hi
 800f848:	7d2b      	ldrbhi	r3, [r5, #20]
			fp->obj.objsize = fp->fptr;
 800f84a:	60ee      	strhi	r6, [r5, #12]
			fp->flag |= FA_MODIFIED;
 800f84c:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 800f850:	752b      	strbhi	r3, [r5, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f852:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800f856:	2e00      	cmp	r6, #0
 800f858:	f43f af4c 	beq.w	800f6f4 <f_lseek+0x16>
 800f85c:	6a2a      	ldr	r2, [r5, #32]
 800f85e:	4297      	cmp	r7, r2
 800f860:	f43f af48 	beq.w	800f6f4 <f_lseek+0x16>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f864:	f995 3014 	ldrsb.w	r3, [r5, #20]
 800f868:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	da0c      	bge.n	800f88a <f_lseek+0x1ac>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f870:	9801      	ldr	r0, [sp, #4]
 800f872:	2301      	movs	r3, #1
 800f874:	4631      	mov	r1, r6
 800f876:	7840      	ldrb	r0, [r0, #1]
 800f878:	f7fe fd64 	bl	800e344 <disk_write>
 800f87c:	2800      	cmp	r0, #0
 800f87e:	f47f af5a 	bne.w	800f736 <f_lseek+0x58>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f882:	7d2b      	ldrb	r3, [r5, #20]
 800f884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f888:	752b      	strb	r3, [r5, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f88a:	9801      	ldr	r0, [sp, #4]
 800f88c:	2301      	movs	r3, #1
 800f88e:	463a      	mov	r2, r7
 800f890:	4631      	mov	r1, r6
 800f892:	7840      	ldrb	r0, [r0, #1]
 800f894:	f7fe fd48 	bl	800e328 <disk_read>
 800f898:	2800      	cmp	r0, #0
 800f89a:	f47f af4c 	bne.w	800f736 <f_lseek+0x58>
			fp->sect = nsect;
 800f89e:	622f      	str	r7, [r5, #32]
 800f8a0:	e728      	b.n	800f6f4 <f_lseek+0x16>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f8a2:	68a9      	ldr	r1, [r5, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f8a4:	b951      	cbnz	r1, 800f8bc <f_lseek+0x1de>
					clst = create_chain(&fp->obj, 0);
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	f7ff f9b5 	bl	800ec16 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f8ac:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 800f8ae:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f8b0:	f43f af3a 	beq.w	800f728 <f_lseek+0x4a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f8b4:	3001      	adds	r0, #1
 800f8b6:	f43f af3e 	beq.w	800f736 <f_lseek+0x58>
					fp->obj.sclust = clst;
 800f8ba:	60a9      	str	r1, [r5, #8]
				fp->clust = clst;
 800f8bc:	61e9      	str	r1, [r5, #28]
 800f8be:	e7bc      	b.n	800f83a <f_lseek+0x15c>
					ofs -= bcs; fp->fptr += bcs;
 800f8c0:	443b      	add	r3, r7
 800f8c2:	1bf6      	subs	r6, r6, r7
 800f8c4:	61ab      	str	r3, [r5, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f8c6:	7d2b      	ldrb	r3, [r5, #20]
 800f8c8:	079a      	lsls	r2, r3, #30
 800f8ca:	d506      	bpl.n	800f8da <f_lseek+0x1fc>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	f7ff f9a2 	bl	800ec16 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f8d2:	4601      	mov	r1, r0
 800f8d4:	b928      	cbnz	r0, 800f8e2 <f_lseek+0x204>
							ofs = 0; break;
 800f8d6:	4606      	mov	r6, r0
 800f8d8:	e015      	b.n	800f906 <f_lseek+0x228>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f8da:	6828      	ldr	r0, [r5, #0]
 800f8dc:	f7ff f941 	bl	800eb62 <get_fat.isra.9>
 800f8e0:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f8e2:	1c4b      	adds	r3, r1, #1
 800f8e4:	9801      	ldr	r0, [sp, #4]
 800f8e6:	d103      	bne.n	800f8f0 <f_lseek+0x212>
 800f8e8:	2401      	movs	r4, #1
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f8ea:	756c      	strb	r4, [r5, #21]
 800f8ec:	4621      	mov	r1, r4
 800f8ee:	e756      	b.n	800f79e <f_lseek+0xc0>
 800f8f0:	2901      	cmp	r1, #1
 800f8f2:	d902      	bls.n	800f8fa <f_lseek+0x21c>
 800f8f4:	6983      	ldr	r3, [r0, #24]
 800f8f6:	428b      	cmp	r3, r1
 800f8f8:	d801      	bhi.n	800f8fe <f_lseek+0x220>
 800f8fa:	2402      	movs	r4, #2
 800f8fc:	e7f5      	b.n	800f8ea <f_lseek+0x20c>
					fp->clust = clst;
 800f8fe:	61e9      	str	r1, [r5, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f900:	42be      	cmp	r6, r7
 800f902:	69ab      	ldr	r3, [r5, #24]
 800f904:	d8dc      	bhi.n	800f8c0 <f_lseek+0x1e2>
				fp->fptr += ofs;
 800f906:	69ab      	ldr	r3, [r5, #24]
 800f908:	4433      	add	r3, r6
 800f90a:	61ab      	str	r3, [r5, #24]
				if (ofs % SS(fs)) {
 800f90c:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800f910:	2b00      	cmp	r3, #0
 800f912:	d094      	beq.n	800f83e <f_lseek+0x160>
 800f914:	9a01      	ldr	r2, [sp, #4]
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f916:	4610      	mov	r0, r2
 800f918:	f7fe fddc 	bl	800e4d4 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f91c:	b920      	cbnz	r0, 800f928 <f_lseek+0x24a>
 800f91e:	2402      	movs	r4, #2
 800f920:	4610      	mov	r0, r2
 800f922:	756c      	strb	r4, [r5, #21]
 800f924:	4621      	mov	r1, r4
 800f926:	e73a      	b.n	800f79e <f_lseek+0xc0>
					nsect += (DWORD)(ofs / SS(fs));
 800f928:	eb00 2756 	add.w	r7, r0, r6, lsr #9
 800f92c:	e788      	b.n	800f840 <f_lseek+0x162>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f92e:	2411      	movs	r4, #17
 800f930:	e6e0      	b.n	800f6f4 <f_lseek+0x16>

0800f932 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f932:	b530      	push	{r4, r5, lr}
 800f934:	b085      	sub	sp, #20
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f936:	4604      	mov	r4, r0
{
 800f938:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 800f93a:	2800      	cmp	r0, #0
 800f93c:	d03c      	beq.n	800f9b8 <f_opendir+0x86>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 800f93e:	2200      	movs	r2, #0
 800f940:	a903      	add	r1, sp, #12
 800f942:	a801      	add	r0, sp, #4
 800f944:	f7fe ff30 	bl	800e7a8 <find_volume>
	if (res == FR_OK) {
 800f948:	4605      	mov	r5, r0
 800f94a:	b980      	cbnz	r0, 800f96e <f_opendir+0x3c>
		obj->fs = fs;
 800f94c:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f94e:	4620      	mov	r0, r4
 800f950:	9901      	ldr	r1, [sp, #4]
		obj->fs = fs;
 800f952:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f954:	f7ff faec 	bl	800ef30 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800f958:	4605      	mov	r5, r0
 800f95a:	bb40      	cbnz	r0, 800f9ae <f_opendir+0x7c>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f95c:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 800f960:	9d03      	ldr	r5, [sp, #12]
 800f962:	2b00      	cmp	r3, #0
 800f964:	db0b      	blt.n	800f97e <f_opendir+0x4c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f966:	79a3      	ldrb	r3, [r4, #6]
 800f968:	06db      	lsls	r3, r3, #27
 800f96a:	d403      	bmi.n	800f974 <f_opendir+0x42>
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f96c:	2505      	movs	r5, #5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f96e:	2300      	movs	r3, #0
 800f970:	6023      	str	r3, [r4, #0]
 800f972:	e013      	b.n	800f99c <f_opendir+0x6a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f974:	7828      	ldrb	r0, [r5, #0]
 800f976:	6a21      	ldr	r1, [r4, #32]
 800f978:	f7fe fe4c 	bl	800e614 <ld_clust.isra.1>
 800f97c:	60a0      	str	r0, [r4, #8]
				obj->id = fs->id;
 800f97e:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f980:	4620      	mov	r0, r4
				obj->id = fs->id;
 800f982:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f984:	f7ff fa2c 	bl	800ede0 <dir_sdi.constprop.14>
				if (res == FR_OK) {
 800f988:	4605      	mov	r5, r0
 800f98a:	b980      	cbnz	r0, 800f9ae <f_opendir+0x7c>
					if (obj->sclust) {
 800f98c:	68a3      	ldr	r3, [r4, #8]
 800f98e:	b163      	cbz	r3, 800f9aa <f_opendir+0x78>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f990:	4601      	mov	r1, r0
 800f992:	4620      	mov	r0, r4
 800f994:	f7fe fd42 	bl	800e41c <inc_lock>
 800f998:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f99a:	b158      	cbz	r0, 800f9b4 <f_opendir+0x82>

	LEAVE_FF(fs, res);
 800f99c:	4629      	mov	r1, r5
 800f99e:	9803      	ldr	r0, [sp, #12]
 800f9a0:	f7ff f9c8 	bl	800ed34 <unlock_fs>
}
 800f9a4:	4628      	mov	r0, r5
 800f9a6:	b005      	add	sp, #20
 800f9a8:	bd30      	pop	{r4, r5, pc}
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f9aa:	6120      	str	r0, [r4, #16]
 800f9ac:	e7f6      	b.n	800f99c <f_opendir+0x6a>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f9ae:	2d04      	cmp	r5, #4
 800f9b0:	d0dc      	beq.n	800f96c <f_opendir+0x3a>
 800f9b2:	e7dc      	b.n	800f96e <f_opendir+0x3c>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f9b4:	2512      	movs	r5, #18
 800f9b6:	e7da      	b.n	800f96e <f_opendir+0x3c>
	if (!dp) return FR_INVALID_OBJECT;
 800f9b8:	2509      	movs	r5, #9
 800f9ba:	e7f3      	b.n	800f9a4 <f_opendir+0x72>

0800f9bc <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f9bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f9be:	a901      	add	r1, sp, #4
{
 800f9c0:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f9c2:	f7ff fbcc 	bl	800f15e <validate>
	if (res == FR_OK) {
 800f9c6:	b940      	cbnz	r0, 800f9da <f_closedir+0x1e>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800f9c8:	6928      	ldr	r0, [r5, #16]
 800f9ca:	b940      	cbnz	r0, 800f9de <f_closedir+0x22>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800f9cc:	2400      	movs	r4, #0
 800f9ce:	602c      	str	r4, [r5, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f9d0:	9801      	ldr	r0, [sp, #4]
 800f9d2:	2100      	movs	r1, #0
 800f9d4:	f7ff f9ae 	bl	800ed34 <unlock_fs>
 800f9d8:	4620      	mov	r0, r4
#endif
	}
	return res;
}
 800f9da:	b003      	add	sp, #12
 800f9dc:	bd30      	pop	{r4, r5, pc}
			res = dec_lock(dp->obj.lockid);
 800f9de:	f7fe fd5d 	bl	800e49c <dec_lock>
		if (res == FR_OK)
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	d1f3      	bne.n	800f9d0 <f_closedir+0x14>
 800f9e8:	e7f0      	b.n	800f9cc <f_closedir+0x10>

0800f9ea <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f9ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f9ec:	460e      	mov	r6, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f9ee:	a901      	add	r1, sp, #4
{
 800f9f0:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f9f2:	f7ff fbb4 	bl	800f15e <validate>
	if (res == FR_OK) {
 800f9f6:	4604      	mov	r4, r0
 800f9f8:	b920      	cbnz	r0, 800fa04 <f_readdir+0x1a>
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f9fa:	4628      	mov	r0, r5
		if (!fno) {
 800f9fc:	b94e      	cbnz	r6, 800fa12 <f_readdir+0x28>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f9fe:	f7ff f9ef 	bl	800ede0 <dir_sdi.constprop.14>
 800fa02:	4604      	mov	r4, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800fa04:	9801      	ldr	r0, [sp, #4]
 800fa06:	4621      	mov	r1, r4
 800fa08:	f7ff f994 	bl	800ed34 <unlock_fs>
}
 800fa0c:	4620      	mov	r0, r4
 800fa0e:	b002      	add	sp, #8
 800fa10:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read(dp, 0);			/* Read an item */
 800fa12:	f7ff fb49 	bl	800f0a8 <dir_read.constprop.12>
			if (res == FR_OK) {				/* A valid entry is found */
 800fa16:	f010 03fb 	ands.w	r3, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 800fa1a:	4604      	mov	r4, r0
			if (res == FR_OK) {				/* A valid entry is found */
 800fa1c:	d1f2      	bne.n	800fa04 <f_readdir+0x1a>
	fno->fname[0] = 0;		/* Invaidate file info */
 800fa1e:	7273      	strb	r3, [r6, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fa20:	69eb      	ldr	r3, [r5, #28]
 800fa22:	b11b      	cbz	r3, 800fa2c <f_readdir+0x42>
 800fa24:	4631      	mov	r1, r6
 800fa26:	4628      	mov	r0, r5
 800fa28:	f7fe fe0f 	bl	800e64a <get_fileinfo.part.3>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	4628      	mov	r0, r5
 800fa30:	f7ff fa09 	bl	800ee46 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800fa34:	2804      	cmp	r0, #4
 800fa36:	bf14      	ite	ne
 800fa38:	4604      	movne	r4, r0
 800fa3a:	2400      	moveq	r4, #0
 800fa3c:	e7e2      	b.n	800fa04 <f_readdir+0x1a>

0800fa3e <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800fa3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa40:	4606      	mov	r6, r0
 800fa42:	460d      	mov	r5, r1


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800fa44:	f101 0709 	add.w	r7, r1, #9
		res = f_readdir(dp, fno);		/* Get a directory item */
 800fa48:	4629      	mov	r1, r5
 800fa4a:	4630      	mov	r0, r6
 800fa4c:	f7ff ffcd 	bl	800f9ea <f_readdir>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800fa50:	4604      	mov	r4, r0
 800fa52:	b950      	cbnz	r0, 800fa6a <f_findnext+0x2c>
 800fa54:	b14d      	cbz	r5, 800fa6a <f_findnext+0x2c>
 800fa56:	7a6b      	ldrb	r3, [r5, #9]
 800fa58:	b13b      	cbz	r3, 800fa6a <f_findnext+0x2c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	4602      	mov	r2, r0
 800fa5e:	4639      	mov	r1, r7
 800fa60:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800fa62:	f7fe fd69 	bl	800e538 <pattern_matching>
 800fa66:	2800      	cmp	r0, #0
 800fa68:	d0ee      	beq.n	800fa48 <f_findnext+0xa>
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 800fa6a:	4620      	mov	r0, r4
 800fa6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa6e <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800fa6e:	b538      	push	{r3, r4, r5, lr}
 800fa70:	460d      	mov	r5, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800fa72:	6303      	str	r3, [r0, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 800fa74:	4611      	mov	r1, r2
{
 800fa76:	4604      	mov	r4, r0
	res = f_opendir(dp, path);		/* Open the target directory */
 800fa78:	f7ff ff5b 	bl	800f932 <f_opendir>
	if (res == FR_OK) {
 800fa7c:	b928      	cbnz	r0, 800fa8a <f_findfirst+0x1c>
		res = f_findnext(dp, fno);	/* Find the first item */
 800fa7e:	4629      	mov	r1, r5
 800fa80:	4620      	mov	r0, r4
	}
	return res;
}
 800fa82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 800fa86:	f7ff bfda 	b.w	800fa3e <f_findnext>
}
 800fa8a:	bd38      	pop	{r3, r4, r5, pc}

0800fa8c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800fa8c:	4b0f      	ldr	r3, [pc, #60]	; (800facc <FATFS_LinkDriverEx+0x40>)
{
 800fa8e:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 800fa90:	7a5d      	ldrb	r5, [r3, #9]
 800fa92:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800fa96:	b9b5      	cbnz	r5, 800fac6 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fa98:	7a5d      	ldrb	r5, [r3, #9]
 800fa9a:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800fa9c:	7a5d      	ldrb	r5, [r3, #9]
 800fa9e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800faa2:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800faa4:	7a58      	ldrb	r0, [r3, #9]
 800faa6:	4418      	add	r0, r3
 800faa8:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800faaa:	7a5a      	ldrb	r2, [r3, #9]
 800faac:	b2d2      	uxtb	r2, r2
 800faae:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 800fab0:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800fab2:	b2c0      	uxtb	r0, r0
 800fab4:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 800fab6:	233a      	movs	r3, #58	; 0x3a
    path[2] = '/';
    path[3] = 0;
 800fab8:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 800faba:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800fabc:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800fabe:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 800fac0:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 800fac2:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 800fac4:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800fac6:	2001      	movs	r0, #1
 800fac8:	e7fc      	b.n	800fac4 <FATFS_LinkDriverEx+0x38>
 800faca:	bf00      	nop
 800facc:	2400092c 	.word	0x2400092c

0800fad0 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800fad0:	2200      	movs	r2, #0
 800fad2:	f7ff bfdb 	b.w	800fa8c <FATFS_LinkDriverEx>

0800fad6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800fad6:	b510      	push	{r4, lr}
 800fad8:	460c      	mov	r4, r1

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800fada:	2101      	movs	r1, #1
 800fadc:	2200      	movs	r2, #0
 800fade:	4608      	mov	r0, r1
 800fae0:	f000 f9b6 	bl	800fe50 <osSemaphoreNew>
 800fae4:	6020      	str	r0, [r4, #0]

#endif
    ret = (*sobj != NULL);

    return ret;
}
 800fae6:	3000      	adds	r0, #0
 800fae8:	bf18      	it	ne
 800faea:	2001      	movne	r0, #1
 800faec:	bd10      	pop	{r4, pc}

0800faee <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800faee:	b508      	push	{r3, lr}
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800faf0:	f000 fa78 	bl	800ffe4 <osSemaphoreDelete>
#endif
    return 1;
}
 800faf4:	2001      	movs	r0, #1
 800faf6:	bd08      	pop	{r3, pc}

0800faf8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800faf8:	b508      	push	{r3, lr}
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800fafa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fafe:	f000 f9fd 	bl	800fefc <osSemaphoreAcquire>
  {
    ret = 1;
  }

  return ret;
}
 800fb02:	fab0 f080 	clz	r0, r0
 800fb06:	0940      	lsrs	r0, r0, #5
 800fb08:	bd08      	pop	{r3, pc}

0800fb0a <ff_rel_grant>:
)
{
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800fb0a:	f000 ba33 	b.w	800ff74 <osSemaphoreRelease>
	...

0800fb10 <SysTick_Handler>:
extern void xPortSysTickHandler (void);

/*
  SysTick handler implementation that also clears overflow flag.
*/
void SysTick_Handler (void) {
 800fb10:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800fb12:	4b05      	ldr	r3, [pc, #20]	; (800fb28 <SysTick_Handler+0x18>)
 800fb14:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fb16:	f002 fb19 	bl	801214c <xTaskGetSchedulerState>
 800fb1a:	2801      	cmp	r0, #1
 800fb1c:	d003      	beq.n	800fb26 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800fb1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800fb22:	f002 bf5f 	b.w	80129e4 <xPortSysTickHandler>
}
 800fb26:	bd08      	pop	{r3, pc}
 800fb28:	e000e010 	.word	0xe000e010

0800fb2c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb2c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800fb30:	b113      	cbz	r3, 800fb38 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800fb32:	f06f 0005 	mvn.w	r0, #5
 800fb36:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb38:	f3ef 8210 	mrs	r2, PRIMASK
 800fb3c:	4b07      	ldr	r3, [pc, #28]	; (800fb5c <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800fb3e:	b912      	cbnz	r2, 800fb46 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fb40:	f3ef 8211 	mrs	r2, BASEPRI
 800fb44:	b112      	cbz	r2, 800fb4c <osKernelInitialize+0x20>
 800fb46:	681a      	ldr	r2, [r3, #0]
 800fb48:	2a02      	cmp	r2, #2
 800fb4a:	d0f2      	beq.n	800fb32 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fb4c:	6818      	ldr	r0, [r3, #0]
 800fb4e:	b910      	cbnz	r0, 800fb56 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fb50:	2201      	movs	r2, #1
 800fb52:	601a      	str	r2, [r3, #0]
 800fb54:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 800fb56:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800fb5a:	4770      	bx	lr
 800fb5c:	24000b94 	.word	0x24000b94

0800fb60 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800fb60:	b508      	push	{r3, lr}
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800fb62:	f002 faf3 	bl	801214c <xTaskGetSchedulerState>
 800fb66:	b138      	cbz	r0, 800fb78 <osKernelGetState+0x18>
 800fb68:	2802      	cmp	r0, #2
 800fb6a:	d006      	beq.n	800fb7a <osKernelGetState+0x1a>
      state = osKernelLocked;
      break;

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800fb6c:	4b03      	ldr	r3, [pc, #12]	; (800fb7c <osKernelGetState+0x1c>)
 800fb6e:	6818      	ldr	r0, [r3, #0]
 800fb70:	1e43      	subs	r3, r0, #1
 800fb72:	4258      	negs	r0, r3
 800fb74:	4158      	adcs	r0, r3
 800fb76:	e000      	b.n	800fb7a <osKernelGetState+0x1a>
      state = osKernelLocked;
 800fb78:	2003      	movs	r0, #3
      }
      break;
  }

  return (state);
}
 800fb7a:	bd08      	pop	{r3, pc}
 800fb7c:	24000b94 	.word	0x24000b94

0800fb80 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800fb80:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb82:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800fb86:	b113      	cbz	r3, 800fb8e <osKernelStart+0xe>
    stat = osErrorISR;
 800fb88:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800fb8c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb8e:	f3ef 8210 	mrs	r2, PRIMASK
 800fb92:	4b0a      	ldr	r3, [pc, #40]	; (800fbbc <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800fb94:	b912      	cbnz	r2, 800fb9c <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fb96:	f3ef 8211 	mrs	r2, BASEPRI
 800fb9a:	b112      	cbz	r2, 800fba2 <osKernelStart+0x22>
 800fb9c:	681a      	ldr	r2, [r3, #0]
 800fb9e:	2a02      	cmp	r2, #2
 800fba0:	d0f2      	beq.n	800fb88 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800fba2:	681a      	ldr	r2, [r3, #0]
 800fba4:	2a01      	cmp	r2, #1
 800fba6:	d105      	bne.n	800fbb4 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800fba8:	2202      	movs	r2, #2
 800fbaa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800fbac:	f001 ff02 	bl	80119b4 <vTaskStartScheduler>
      stat = osOK;
 800fbb0:	2000      	movs	r0, #0
 800fbb2:	e7eb      	b.n	800fb8c <osKernelStart+0xc>
      stat = osError;
 800fbb4:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800fbb8:	e7e8      	b.n	800fb8c <osKernelStart+0xc>
 800fbba:	bf00      	nop
 800fbbc:	24000b94 	.word	0x24000b94

0800fbc0 <osKernelGetTickCount>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbc0:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 800fbc4:	b10b      	cbz	r3, 800fbca <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 800fbc6:	f001 bf5d 	b.w	8011a84 <xTaskGetTickCountFromISR>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fbca:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800fbce:	b913      	cbnz	r3, 800fbd6 <osKernelGetTickCount+0x16>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fbd0:	f3ef 8311 	mrs	r3, BASEPRI
 800fbd4:	b11b      	cbz	r3, 800fbde <osKernelGetTickCount+0x1e>
 800fbd6:	4b03      	ldr	r3, [pc, #12]	; (800fbe4 <osKernelGetTickCount+0x24>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	2b02      	cmp	r3, #2
 800fbdc:	d0f3      	beq.n	800fbc6 <osKernelGetTickCount+0x6>
  } else {
    ticks = xTaskGetTickCount();
 800fbde:	f001 bf4b 	b.w	8011a78 <xTaskGetTickCount>
 800fbe2:	bf00      	nop
 800fbe4:	24000b94 	.word	0x24000b94

0800fbe8 <osKernelGetTickFreq>:
  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}
 800fbe8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fbec:	4770      	bx	lr
	...

0800fbf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbf2:	4614      	mov	r4, r2
 800fbf4:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fbf6:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fbf8:	460b      	mov	r3, r1
  hTask = NULL;
 800fbfa:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbfc:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800fc00:	bb32      	cbnz	r2, 800fc50 <osThreadNew+0x60>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc02:	f3ef 8210 	mrs	r2, PRIMASK
 800fc06:	b912      	cbnz	r2, 800fc0e <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fc08:	f3ef 8211 	mrs	r2, BASEPRI
 800fc0c:	b11a      	cbz	r2, 800fc16 <osThreadNew+0x26>
 800fc0e:	4a22      	ldr	r2, [pc, #136]	; (800fc98 <osThreadNew+0xa8>)
 800fc10:	6812      	ldr	r2, [r2, #0]
 800fc12:	2a02      	cmp	r2, #2
 800fc14:	d01c      	beq.n	800fc50 <osThreadNew+0x60>
 800fc16:	b1d8      	cbz	r0, 800fc50 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800fc18:	2c00      	cmp	r4, #0
 800fc1a:	d036      	beq.n	800fc8a <osThreadNew+0x9a>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800fc1c:	69a5      	ldr	r5, [r4, #24]
      if (attr->name != NULL) {
 800fc1e:	6821      	ldr	r1, [r4, #0]
 800fc20:	2d00      	cmp	r5, #0
 800fc22:	bf08      	it	eq
 800fc24:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fc26:	1e6a      	subs	r2, r5, #1
 800fc28:	462f      	mov	r7, r5
 800fc2a:	2a37      	cmp	r2, #55	; 0x37
 800fc2c:	d831      	bhi.n	800fc92 <osThreadNew+0xa2>
 800fc2e:	6862      	ldr	r2, [r4, #4]
 800fc30:	07d2      	lsls	r2, r2, #31
 800fc32:	d42e      	bmi.n	800fc92 <osThreadNew+0xa2>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800fc34:	6966      	ldr	r6, [r4, #20]
 800fc36:	b176      	cbz	r6, 800fc56 <osThreadNew+0x66>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fc38:	08b2      	lsrs	r2, r6, #2
 800fc3a:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fc3e:	f1bc 0f00 	cmp.w	ip, #0
 800fc42:	d00a      	beq.n	800fc5a <osThreadNew+0x6a>
 800fc44:	f1be 0f5b 	cmp.w	lr, #91	; 0x5b
 800fc48:	d902      	bls.n	800fc50 <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fc4a:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fc4c:	b104      	cbz	r4, 800fc50 <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fc4e:	b9ae      	cbnz	r6, 800fc7c <osThreadNew+0x8c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fc50:	9805      	ldr	r0, [sp, #20]
}
 800fc52:	b007      	add	sp, #28
 800fc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800fc56:	2280      	movs	r2, #128	; 0x80
 800fc58:	e7ef      	b.n	800fc3a <osThreadNew+0x4a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fc5a:	f1be 0f00 	cmp.w	lr, #0
 800fc5e:	d1f7      	bne.n	800fc50 <osThreadNew+0x60>
      if (mem == 0) {
 800fc60:	6924      	ldr	r4, [r4, #16]
 800fc62:	2c00      	cmp	r4, #0
 800fc64:	d1f4      	bne.n	800fc50 <osThreadNew+0x60>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fc66:	ac05      	add	r4, sp, #20
 800fc68:	b292      	uxth	r2, r2
 800fc6a:	e9cd 7400 	strd	r7, r4, [sp]
 800fc6e:	f001 fe73 	bl	8011958 <xTaskCreate>
 800fc72:	2801      	cmp	r0, #1
          hTask = NULL;
 800fc74:	bf1c      	itt	ne
 800fc76:	2300      	movne	r3, #0
 800fc78:	9305      	strne	r3, [sp, #20]
 800fc7a:	e7e9      	b.n	800fc50 <osThreadNew+0x60>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fc7c:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 800fc80:	9500      	str	r5, [sp, #0]
 800fc82:	f001 fe31 	bl	80118e8 <xTaskCreateStatic>
 800fc86:	9005      	str	r0, [sp, #20]
 800fc88:	e7e2      	b.n	800fc50 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;
 800fc8a:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 800fc8c:	2280      	movs	r2, #128	; 0x80
    name = NULL;
 800fc8e:	4621      	mov	r1, r4
 800fc90:	e7e9      	b.n	800fc66 <osThreadNew+0x76>
        return (NULL);
 800fc92:	2000      	movs	r0, #0
 800fc94:	e7dd      	b.n	800fc52 <osThreadNew+0x62>
 800fc96:	bf00      	nop
 800fc98:	24000b94 	.word	0x24000b94

0800fc9c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800fc9c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc9e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800fca2:	b113      	cbz	r3, 800fcaa <osDelay+0xe>
    stat = osErrorISR;
 800fca4:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800fca8:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fcaa:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800fcae:	b913      	cbnz	r3, 800fcb6 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fcb0:	f3ef 8311 	mrs	r3, BASEPRI
 800fcb4:	b11b      	cbz	r3, 800fcbe <osDelay+0x22>
 800fcb6:	4b05      	ldr	r3, [pc, #20]	; (800fccc <osDelay+0x30>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	2b02      	cmp	r3, #2
 800fcbc:	d0f2      	beq.n	800fca4 <osDelay+0x8>
    if (ticks != 0U) {
 800fcbe:	2800      	cmp	r0, #0
 800fcc0:	d0f2      	beq.n	800fca8 <osDelay+0xc>
      vTaskDelay(ticks);
 800fcc2:	f002 f88b 	bl	8011ddc <vTaskDelay>
    stat = osOK;
 800fcc6:	2000      	movs	r0, #0
 800fcc8:	e7ee      	b.n	800fca8 <osDelay+0xc>
 800fcca:	bf00      	nop
 800fccc:	24000b94 	.word	0x24000b94

0800fcd0 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800fcd0:	b513      	push	{r0, r1, r4, lr}
 800fcd2:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fcd4:	f3ef 8305 	mrs	r3, IPSR
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800fcd8:	b11b      	cbz	r3, 800fce2 <osDelayUntil+0x12>
    stat = osErrorISR;
 800fcda:	f06f 0005 	mvn.w	r0, #5
      stat = osErrorParameter;
    }
  }

  return (stat);
}
 800fcde:	b002      	add	sp, #8
 800fce0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fce2:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800fce6:	b913      	cbnz	r3, 800fcee <osDelayUntil+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fce8:	f3ef 8311 	mrs	r3, BASEPRI
 800fcec:	b11b      	cbz	r3, 800fcf6 <osDelayUntil+0x26>
 800fcee:	4b09      	ldr	r3, [pc, #36]	; (800fd14 <osDelayUntil+0x44>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	2b02      	cmp	r3, #2
 800fcf4:	d0f1      	beq.n	800fcda <osDelayUntil+0xa>
    tcnt = xTaskGetTickCount();
 800fcf6:	f001 febf 	bl	8011a78 <xTaskGetTickCount>
    delay = (TickType_t)ticks - tcnt;
 800fcfa:	1a21      	subs	r1, r4, r0
    tcnt = xTaskGetTickCount();
 800fcfc:	9001      	str	r0, [sp, #4]
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800fcfe:	2900      	cmp	r1, #0
 800fd00:	dd04      	ble.n	800fd0c <osDelayUntil+0x3c>
      vTaskDelayUntil (&tcnt, delay);
 800fd02:	a801      	add	r0, sp, #4
 800fd04:	f001 fffe 	bl	8011d04 <vTaskDelayUntil>
    stat = osOK;
 800fd08:	2000      	movs	r0, #0
 800fd0a:	e7e8      	b.n	800fcde <osDelayUntil+0xe>
      stat = osErrorParameter;
 800fd0c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800fd10:	e7e5      	b.n	800fcde <osDelayUntil+0xe>
 800fd12:	bf00      	nop
 800fd14:	24000b94 	.word	0x24000b94

0800fd18 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800fd18:	b570      	push	{r4, r5, r6, lr}
 800fd1a:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd1c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800fd20:	b113      	cbz	r3, 800fd28 <osMutexNew+0x10>
  hMutex = NULL;
 800fd22:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800fd24:	4628      	mov	r0, r5
 800fd26:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd28:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 800fd2c:	b912      	cbnz	r2, 800fd34 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fd2e:	f3ef 8211 	mrs	r2, BASEPRI
 800fd32:	b11a      	cbz	r2, 800fd3c <osMutexNew+0x24>
 800fd34:	4a18      	ldr	r2, [pc, #96]	; (800fd98 <osMutexNew+0x80>)
 800fd36:	6812      	ldr	r2, [r2, #0]
 800fd38:	2a02      	cmp	r2, #2
 800fd3a:	d0f2      	beq.n	800fd22 <osMutexNew+0xa>
    if (attr != NULL) {
 800fd3c:	b104      	cbz	r4, 800fd40 <osMutexNew+0x28>
      type = attr->attr_bits;
 800fd3e:	6863      	ldr	r3, [r4, #4]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800fd40:	f003 0601 	and.w	r6, r3, #1
    if ((type & osMutexRobust) != osMutexRobust) {
 800fd44:	071b      	lsls	r3, r3, #28
 800fd46:	d4ec      	bmi.n	800fd22 <osMutexNew+0xa>
      if (attr != NULL) {
 800fd48:	b1b4      	cbz	r4, 800fd78 <osMutexNew+0x60>
 800fd4a:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fd4e:	b189      	cbz	r1, 800fd74 <osMutexNew+0x5c>
 800fd50:	2b4f      	cmp	r3, #79	; 0x4f
 800fd52:	d9e6      	bls.n	800fd22 <osMutexNew+0xa>
        if (rmtx != 0U) {
 800fd54:	b1de      	cbz	r6, 800fd8e <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800fd56:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800fd58:	f000 fdba 	bl	80108d0 <xQueueCreateMutexStatic>
 800fd5c:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	d0df      	beq.n	800fd22 <osMutexNew+0xa>
          name = attr->name;
 800fd62:	6821      	ldr	r1, [r4, #0]
        vQueueAddToRegistry (hMutex, name);
 800fd64:	4628      	mov	r0, r5
 800fd66:	f001 fb3f 	bl	80113e8 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800fd6a:	2e00      	cmp	r6, #0
 800fd6c:	d0da      	beq.n	800fd24 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800fd6e:	f045 0501 	orr.w	r5, r5, #1
  return ((osMutexId_t)hMutex);
 800fd72:	e7d7      	b.n	800fd24 <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d1d4      	bne.n	800fd22 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800fd78:	b15e      	cbz	r6, 800fd92 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800fd7a:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 800fd7c:	f000 fe02 	bl	8010984 <xQueueCreateMutex>
 800fd80:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 800fd82:	2800      	cmp	r0, #0
 800fd84:	d0cd      	beq.n	800fd22 <osMutexNew+0xa>
        if (attr != NULL) {
 800fd86:	2c00      	cmp	r4, #0
 800fd88:	d1eb      	bne.n	800fd62 <osMutexNew+0x4a>
          name = NULL;
 800fd8a:	4621      	mov	r1, r4
 800fd8c:	e7ea      	b.n	800fd64 <osMutexNew+0x4c>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800fd8e:	2001      	movs	r0, #1
 800fd90:	e7e2      	b.n	800fd58 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800fd92:	2001      	movs	r0, #1
 800fd94:	e7f2      	b.n	800fd7c <osMutexNew+0x64>
 800fd96:	bf00      	nop
 800fd98:	24000b94 	.word	0x24000b94

0800fd9c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800fd9c:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800fd9e:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800fda2:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800fda4:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800fda8:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdaa:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800fdae:	b112      	cbz	r2, 800fdb6 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800fdb0:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800fdb4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fdb6:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800fdba:	b912      	cbnz	r2, 800fdc2 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fdbc:	f3ef 8211 	mrs	r2, BASEPRI
 800fdc0:	b11a      	cbz	r2, 800fdca <osMutexAcquire+0x2e>
 800fdc2:	4a0d      	ldr	r2, [pc, #52]	; (800fdf8 <osMutexAcquire+0x5c>)
 800fdc4:	6812      	ldr	r2, [r2, #0]
 800fdc6:	2a02      	cmp	r2, #2
 800fdc8:	d0f2      	beq.n	800fdb0 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800fdca:	b188      	cbz	r0, 800fdf0 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800fdcc:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800fdce:	b163      	cbz	r3, 800fdea <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800fdd0:	f001 fa3c 	bl	801124c <xQueueTakeMutexRecursive>
 800fdd4:	2801      	cmp	r0, #1
 800fdd6:	d101      	bne.n	800fddc <osMutexAcquire+0x40>
  stat = osOK;
 800fdd8:	2000      	movs	r0, #0
 800fdda:	e7eb      	b.n	800fdb4 <osMutexAcquire+0x18>
          stat = osErrorResource;
 800fddc:	2c00      	cmp	r4, #0
 800fdde:	bf14      	ite	ne
 800fde0:	f06f 0001 	mvnne.w	r0, #1
 800fde4:	f06f 0002 	mvneq.w	r0, #2
 800fde8:	e7e4      	b.n	800fdb4 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800fdea:	f001 f8a7 	bl	8010f3c <xQueueSemaphoreTake>
 800fdee:	e7f1      	b.n	800fdd4 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 800fdf0:	f06f 0003 	mvn.w	r0, #3
 800fdf4:	e7de      	b.n	800fdb4 <osMutexAcquire+0x18>
 800fdf6:	bf00      	nop
 800fdf8:	24000b94 	.word	0x24000b94

0800fdfc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800fdfc:	b508      	push	{r3, lr}
 800fdfe:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800fe00:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800fe04:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe08:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800fe0c:	b112      	cbz	r2, 800fe14 <osMutexRelease+0x18>
    stat = osErrorISR;
 800fe0e:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800fe12:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe14:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800fe18:	b912      	cbnz	r2, 800fe20 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fe1a:	f3ef 8211 	mrs	r2, BASEPRI
 800fe1e:	b11a      	cbz	r2, 800fe28 <osMutexRelease+0x2c>
 800fe20:	4a0a      	ldr	r2, [pc, #40]	; (800fe4c <osMutexRelease+0x50>)
 800fe22:	6812      	ldr	r2, [r2, #0]
 800fe24:	2a02      	cmp	r2, #2
 800fe26:	d0f2      	beq.n	800fe0e <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 800fe28:	b168      	cbz	r0, 800fe46 <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 800fe2a:	b13b      	cbz	r3, 800fe3c <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800fe2c:	f000 fd66 	bl	80108fc <xQueueGiveMutexRecursive>
 800fe30:	2801      	cmp	r0, #1
  stat = osOK;
 800fe32:	bf0c      	ite	eq
 800fe34:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800fe36:	f06f 0002 	mvnne.w	r0, #2
 800fe3a:	e7ea      	b.n	800fe12 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	4619      	mov	r1, r3
 800fe40:	f000 fbf8 	bl	8010634 <xQueueGenericSend>
 800fe44:	e7f4      	b.n	800fe30 <osMutexRelease+0x34>
    stat = osErrorParameter;
 800fe46:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800fe4a:	e7e2      	b.n	800fe12 <osMutexRelease+0x16>
 800fe4c:	24000b94 	.word	0x24000b94

0800fe50 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800fe50:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe52:	460e      	mov	r6, r1
 800fe54:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe56:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800fe5a:	b11b      	cbz	r3, 800fe64 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800fe5c:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800fe5e:	4620      	mov	r0, r4
 800fe60:	b002      	add	sp, #8
 800fe62:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe64:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800fe68:	b913      	cbnz	r3, 800fe70 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fe6a:	f3ef 8311 	mrs	r3, BASEPRI
 800fe6e:	b11b      	cbz	r3, 800fe78 <osSemaphoreNew+0x28>
 800fe70:	4b21      	ldr	r3, [pc, #132]	; (800fef8 <osSemaphoreNew+0xa8>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	2b02      	cmp	r3, #2
 800fe76:	d0f1      	beq.n	800fe5c <osSemaphoreNew+0xc>
 800fe78:	2800      	cmp	r0, #0
 800fe7a:	d0ef      	beq.n	800fe5c <osSemaphoreNew+0xc>
 800fe7c:	42b0      	cmp	r0, r6
 800fe7e:	d3ed      	bcc.n	800fe5c <osSemaphoreNew+0xc>
    if (attr != NULL) {
 800fe80:	b1ed      	cbz	r5, 800febe <osSemaphoreNew+0x6e>
 800fe82:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fe86:	b1c3      	cbz	r3, 800feba <osSemaphoreNew+0x6a>
 800fe88:	2a4f      	cmp	r2, #79	; 0x4f
 800fe8a:	d9e7      	bls.n	800fe5c <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800fe8c:	2801      	cmp	r0, #1
 800fe8e:	d126      	bne.n	800fede <osSemaphoreNew+0x8e>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800fe90:	2203      	movs	r2, #3
 800fe92:	9200      	str	r2, [sp, #0]
 800fe94:	2200      	movs	r2, #0
 800fe96:	4611      	mov	r1, r2
 800fe98:	f000 fb10 	bl	80104bc <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800fe9c:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800fe9e:	2800      	cmp	r0, #0
 800fea0:	d0dc      	beq.n	800fe5c <osSemaphoreNew+0xc>
 800fea2:	b1ce      	cbz	r6, 800fed8 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fea4:	2300      	movs	r3, #0
 800fea6:	461a      	mov	r2, r3
 800fea8:	4619      	mov	r1, r3
 800feaa:	f000 fbc3 	bl	8010634 <xQueueGenericSend>
 800feae:	2801      	cmp	r0, #1
 800feb0:	d012      	beq.n	800fed8 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 800feb2:	4620      	mov	r0, r4
 800feb4:	f001 fad0 	bl	8011458 <vQueueDelete>
 800feb8:	e7d0      	b.n	800fe5c <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800feba:	2a00      	cmp	r2, #0
 800febc:	d1ce      	bne.n	800fe5c <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800febe:	2801      	cmp	r0, #1
 800fec0:	d104      	bne.n	800fecc <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 800fec2:	2203      	movs	r2, #3
 800fec4:	2100      	movs	r1, #0
 800fec6:	f000 fb3f 	bl	8010548 <xQueueGenericCreate>
 800feca:	e7e7      	b.n	800fe9c <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800fecc:	4631      	mov	r1, r6
 800fece:	f000 fb93 	bl	80105f8 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800fed2:	4604      	mov	r4, r0
 800fed4:	2800      	cmp	r0, #0
 800fed6:	d0c1      	beq.n	800fe5c <osSemaphoreNew+0xc>
        if (attr != NULL) {
 800fed8:	b945      	cbnz	r5, 800feec <osSemaphoreNew+0x9c>
          name = NULL;
 800feda:	4629      	mov	r1, r5
 800fedc:	e007      	b.n	800feee <osSemaphoreNew+0x9e>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800fede:	461a      	mov	r2, r3
 800fee0:	4631      	mov	r1, r6
 800fee2:	f000 fb67 	bl	80105b4 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800fee6:	4604      	mov	r4, r0
 800fee8:	2800      	cmp	r0, #0
 800feea:	d0b7      	beq.n	800fe5c <osSemaphoreNew+0xc>
          name = attr->name;
 800feec:	6829      	ldr	r1, [r5, #0]
        vQueueAddToRegistry (hSemaphore, name);
 800feee:	4620      	mov	r0, r4
 800fef0:	f001 fa7a 	bl	80113e8 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800fef4:	e7b3      	b.n	800fe5e <osSemaphoreNew+0xe>
 800fef6:	bf00      	nop
 800fef8:	24000b94 	.word	0x24000b94

0800fefc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800fefc:	b513      	push	{r0, r1, r4, lr}
 800fefe:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ff00:	b918      	cbnz	r0, 800ff0a <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800ff02:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800ff06:	b002      	add	sp, #8
 800ff08:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff0a:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800ff0e:	b16b      	cbz	r3, 800ff2c <osSemaphoreAcquire+0x30>
    if (timeout != 0U) {
 800ff10:	2c00      	cmp	r4, #0
 800ff12:	d1f6      	bne.n	800ff02 <osSemaphoreAcquire+0x6>
      yield = pdFALSE;
 800ff14:	aa02      	add	r2, sp, #8
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ff16:	4621      	mov	r1, r4
      yield = pdFALSE;
 800ff18:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ff1c:	f001 f9b8 	bl	8011290 <xQueueReceiveFromISR>
 800ff20:	2801      	cmp	r0, #1
 800ff22:	d113      	bne.n	800ff4c <osSemaphoreAcquire+0x50>
        portYIELD_FROM_ISR (yield);
 800ff24:	9b01      	ldr	r3, [sp, #4]
 800ff26:	b9a3      	cbnz	r3, 800ff52 <osSemaphoreAcquire+0x56>
  stat = osOK;
 800ff28:	2000      	movs	r0, #0
 800ff2a:	e7ec      	b.n	800ff06 <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff2c:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800ff30:	b913      	cbnz	r3, 800ff38 <osSemaphoreAcquire+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ff32:	f3ef 8311 	mrs	r3, BASEPRI
 800ff36:	b11b      	cbz	r3, 800ff40 <osSemaphoreAcquire+0x44>
 800ff38:	4b0c      	ldr	r3, [pc, #48]	; (800ff6c <osSemaphoreAcquire+0x70>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	2b02      	cmp	r3, #2
 800ff3e:	d0e7      	beq.n	800ff10 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ff40:	4621      	mov	r1, r4
 800ff42:	f000 fffb 	bl	8010f3c <xQueueSemaphoreTake>
 800ff46:	2801      	cmp	r0, #1
 800ff48:	d0ee      	beq.n	800ff28 <osSemaphoreAcquire+0x2c>
      if (timeout != 0U) {
 800ff4a:	b95c      	cbnz	r4, 800ff64 <osSemaphoreAcquire+0x68>
        stat = osErrorResource;
 800ff4c:	f06f 0002 	mvn.w	r0, #2
 800ff50:	e7d9      	b.n	800ff06 <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800ff52:	4b07      	ldr	r3, [pc, #28]	; (800ff70 <osSemaphoreAcquire+0x74>)
 800ff54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff58:	601a      	str	r2, [r3, #0]
 800ff5a:	f3bf 8f4f 	dsb	sy
 800ff5e:	f3bf 8f6f 	isb	sy
 800ff62:	e7e1      	b.n	800ff28 <osSemaphoreAcquire+0x2c>
        stat = osErrorTimeout;
 800ff64:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800ff68:	e7cd      	b.n	800ff06 <osSemaphoreAcquire+0xa>
 800ff6a:	bf00      	nop
 800ff6c:	24000b94 	.word	0x24000b94
 800ff70:	e000ed04 	.word	0xe000ed04

0800ff74 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ff74:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ff76:	b368      	cbz	r0, 800ffd4 <osSemaphoreRelease+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff78:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800ff7c:	b153      	cbz	r3, 800ff94 <osSemaphoreRelease+0x20>
    yield = pdFALSE;
 800ff7e:	a902      	add	r1, sp, #8
 800ff80:	2400      	movs	r4, #0
 800ff82:	f841 4d04 	str.w	r4, [r1, #-4]!

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ff86:	f000 fe77 	bl	8010c78 <xQueueGiveFromISR>
 800ff8a:	2801      	cmp	r0, #1
 800ff8c:	d014      	beq.n	800ffb8 <osSemaphoreRelease+0x44>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800ff8e:	f06f 0002 	mvn.w	r0, #2
 800ff92:	e014      	b.n	800ffbe <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff94:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800ff98:	b913      	cbnz	r3, 800ffa0 <osSemaphoreRelease+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ff9a:	f3ef 8311 	mrs	r3, BASEPRI
 800ff9e:	b11b      	cbz	r3, 800ffa8 <osSemaphoreRelease+0x34>
 800ffa0:	4b0e      	ldr	r3, [pc, #56]	; (800ffdc <osSemaphoreRelease+0x68>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	2b02      	cmp	r3, #2
 800ffa6:	d0ea      	beq.n	800ff7e <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	461a      	mov	r2, r3
 800ffac:	4619      	mov	r1, r3
 800ffae:	f000 fb41 	bl	8010634 <xQueueGenericSend>
 800ffb2:	2801      	cmp	r0, #1
 800ffb4:	d002      	beq.n	800ffbc <osSemaphoreRelease+0x48>
 800ffb6:	e7ea      	b.n	800ff8e <osSemaphoreRelease+0x1a>
      portYIELD_FROM_ISR (yield);
 800ffb8:	9b01      	ldr	r3, [sp, #4]
 800ffba:	b913      	cbnz	r3, 800ffc2 <osSemaphoreRelease+0x4e>
  stat = osOK;
 800ffbc:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800ffbe:	b002      	add	sp, #8
 800ffc0:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800ffc2:	4b07      	ldr	r3, [pc, #28]	; (800ffe0 <osSemaphoreRelease+0x6c>)
 800ffc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffc8:	601a      	str	r2, [r3, #0]
 800ffca:	f3bf 8f4f 	dsb	sy
 800ffce:	f3bf 8f6f 	isb	sy
 800ffd2:	e7f3      	b.n	800ffbc <osSemaphoreRelease+0x48>
    stat = osErrorParameter;
 800ffd4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800ffd8:	e7f1      	b.n	800ffbe <osSemaphoreRelease+0x4a>
 800ffda:	bf00      	nop
 800ffdc:	24000b94 	.word	0x24000b94
 800ffe0:	e000ed04 	.word	0xe000ed04

0800ffe4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800ffe4:	b510      	push	{r4, lr}
 800ffe6:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffe8:	f3ef 8305 	mrs	r3, IPSR
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800ffec:	b113      	cbz	r3, 800fff4 <osSemaphoreDelete+0x10>
    stat = osErrorISR;
 800ffee:	f06f 0005 	mvn.w	r0, #5
#else
  stat = osError;
#endif

  return (stat);
}
 800fff2:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fff4:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800fff8:	b913      	cbnz	r3, 8010000 <osSemaphoreDelete+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fffa:	f3ef 8311 	mrs	r3, BASEPRI
 800fffe:	b11b      	cbz	r3, 8010008 <osSemaphoreDelete+0x24>
 8010000:	4b07      	ldr	r3, [pc, #28]	; (8010020 <osSemaphoreDelete+0x3c>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	2b02      	cmp	r3, #2
 8010006:	d0f2      	beq.n	800ffee <osSemaphoreDelete+0xa>
  else if (hSemaphore == NULL) {
 8010008:	b13c      	cbz	r4, 801001a <osSemaphoreDelete+0x36>
    vQueueUnregisterQueue (hSemaphore);
 801000a:	4620      	mov	r0, r4
 801000c:	f001 fa10 	bl	8011430 <vQueueUnregisterQueue>
    vSemaphoreDelete (hSemaphore);
 8010010:	4620      	mov	r0, r4
 8010012:	f001 fa21 	bl	8011458 <vQueueDelete>
    stat = osOK;
 8010016:	2000      	movs	r0, #0
 8010018:	e7eb      	b.n	800fff2 <osSemaphoreDelete+0xe>
    stat = osErrorParameter;
 801001a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 801001e:	e7e8      	b.n	800fff2 <osSemaphoreDelete+0xe>
 8010020:	24000b94 	.word	0x24000b94

08010024 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010024:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010026:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010028:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801002c:	b11b      	cbz	r3, 8010036 <osMessageQueueNew+0x12>
  hQueue = NULL;
 801002e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8010030:	4628      	mov	r0, r5
 8010032:	b002      	add	sp, #8
 8010034:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010036:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801003a:	b913      	cbnz	r3, 8010042 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801003c:	f3ef 8311 	mrs	r3, BASEPRI
 8010040:	b11b      	cbz	r3, 801004a <osMessageQueueNew+0x26>
 8010042:	4b1a      	ldr	r3, [pc, #104]	; (80100ac <osMessageQueueNew+0x88>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	2b02      	cmp	r3, #2
 8010048:	d0f1      	beq.n	801002e <osMessageQueueNew+0xa>
 801004a:	2800      	cmp	r0, #0
 801004c:	d0ef      	beq.n	801002e <osMessageQueueNew+0xa>
 801004e:	2900      	cmp	r1, #0
 8010050:	d0ed      	beq.n	801002e <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8010052:	b304      	cbz	r4, 8010096 <osMessageQueueNew+0x72>
 8010054:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010058:	b1ab      	cbz	r3, 8010086 <osMessageQueueNew+0x62>
 801005a:	2a4f      	cmp	r2, #79	; 0x4f
 801005c:	d9e7      	bls.n	801002e <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801005e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010060:	2a00      	cmp	r2, #0
 8010062:	d0e4      	beq.n	801002e <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010064:	fb01 f500 	mul.w	r5, r1, r0
 8010068:	6966      	ldr	r6, [r4, #20]
 801006a:	42ae      	cmp	r6, r5
 801006c:	d3df      	bcc.n	801002e <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801006e:	2500      	movs	r5, #0
 8010070:	9500      	str	r5, [sp, #0]
 8010072:	f000 fa23 	bl	80104bc <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8010076:	4605      	mov	r5, r0
 8010078:	2800      	cmp	r0, #0
 801007a:	d0d8      	beq.n	801002e <osMessageQueueNew+0xa>
        name = attr->name;
 801007c:	6821      	ldr	r1, [r4, #0]
      vQueueAddToRegistry (hQueue, name);
 801007e:	4628      	mov	r0, r5
 8010080:	f001 f9b2 	bl	80113e8 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8010084:	e7d4      	b.n	8010030 <osMessageQueueNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010086:	2a00      	cmp	r2, #0
 8010088:	d1d1      	bne.n	801002e <osMessageQueueNew+0xa>
 801008a:	6923      	ldr	r3, [r4, #16]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d1ce      	bne.n	801002e <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010090:	6963      	ldr	r3, [r4, #20]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d1cb      	bne.n	801002e <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8010096:	2200      	movs	r2, #0
 8010098:	f000 fa56 	bl	8010548 <xQueueGenericCreate>
    if (hQueue != NULL) {
 801009c:	4605      	mov	r5, r0
 801009e:	2800      	cmp	r0, #0
 80100a0:	d0c5      	beq.n	801002e <osMessageQueueNew+0xa>
      if (attr != NULL) {
 80100a2:	2c00      	cmp	r4, #0
 80100a4:	d1ea      	bne.n	801007c <osMessageQueueNew+0x58>
        name = NULL;
 80100a6:	4621      	mov	r1, r4
 80100a8:	e7e9      	b.n	801007e <osMessageQueueNew+0x5a>
 80100aa:	bf00      	nop
 80100ac:	24000b94 	.word	0x24000b94

080100b0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80100b0:	b513      	push	{r0, r1, r4, lr}
 80100b2:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100b4:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80100b8:	b123      	cbz	r3, 80100c4 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80100ba:	b9d8      	cbnz	r0, 80100f4 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 80100bc:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80100c0:	b002      	add	sp, #8
 80100c2:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80100c4:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80100c8:	b913      	cbnz	r3, 80100d0 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80100ca:	f3ef 8311 	mrs	r3, BASEPRI
 80100ce:	b11b      	cbz	r3, 80100d8 <osMessageQueuePut+0x28>
 80100d0:	4b16      	ldr	r3, [pc, #88]	; (801012c <osMessageQueuePut+0x7c>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	2b02      	cmp	r3, #2
 80100d6:	d0f0      	beq.n	80100ba <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80100d8:	2800      	cmp	r0, #0
 80100da:	d0ef      	beq.n	80100bc <osMessageQueuePut+0xc>
 80100dc:	2900      	cmp	r1, #0
 80100de:	d0ed      	beq.n	80100bc <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80100e0:	2300      	movs	r3, #0
 80100e2:	4622      	mov	r2, r4
 80100e4:	f000 faa6 	bl	8010634 <xQueueGenericSend>
 80100e8:	2801      	cmp	r0, #1
 80100ea:	d011      	beq.n	8010110 <osMessageQueuePut+0x60>
        if (timeout != 0U) {
 80100ec:	b9dc      	cbnz	r4, 8010126 <osMessageQueuePut+0x76>
          stat = osErrorResource;
 80100ee:	f06f 0002 	mvn.w	r0, #2
 80100f2:	e7e5      	b.n	80100c0 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80100f4:	2900      	cmp	r1, #0
 80100f6:	d0e1      	beq.n	80100bc <osMessageQueuePut+0xc>
 80100f8:	2c00      	cmp	r4, #0
 80100fa:	d1df      	bne.n	80100bc <osMessageQueuePut+0xc>
      yield = pdFALSE;
 80100fc:	aa02      	add	r2, sp, #8
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80100fe:	4623      	mov	r3, r4
      yield = pdFALSE;
 8010100:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010104:	f000 fc50 	bl	80109a8 <xQueueGenericSendFromISR>
 8010108:	2801      	cmp	r0, #1
 801010a:	d1f0      	bne.n	80100ee <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 801010c:	9b01      	ldr	r3, [sp, #4]
 801010e:	b90b      	cbnz	r3, 8010114 <osMessageQueuePut+0x64>
  stat = osOK;
 8010110:	2000      	movs	r0, #0
 8010112:	e7d5      	b.n	80100c0 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8010114:	4b06      	ldr	r3, [pc, #24]	; (8010130 <osMessageQueuePut+0x80>)
 8010116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801011a:	601a      	str	r2, [r3, #0]
 801011c:	f3bf 8f4f 	dsb	sy
 8010120:	f3bf 8f6f 	isb	sy
 8010124:	e7f4      	b.n	8010110 <osMessageQueuePut+0x60>
          stat = osErrorTimeout;
 8010126:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 801012a:	e7c9      	b.n	80100c0 <osMessageQueuePut+0x10>
 801012c:	24000b94 	.word	0x24000b94
 8010130:	e000ed04 	.word	0xe000ed04

08010134 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010134:	b513      	push	{r0, r1, r4, lr}
 8010136:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010138:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 801013c:	b123      	cbz	r3, 8010148 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801013e:	b9d0      	cbnz	r0, 8010176 <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 8010140:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8010144:	b002      	add	sp, #8
 8010146:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010148:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 801014c:	b913      	cbnz	r3, 8010154 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801014e:	f3ef 8311 	mrs	r3, BASEPRI
 8010152:	b11b      	cbz	r3, 801015c <osMessageQueueGet+0x28>
 8010154:	4b15      	ldr	r3, [pc, #84]	; (80101ac <osMessageQueueGet+0x78>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	2b02      	cmp	r3, #2
 801015a:	d0f0      	beq.n	801013e <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801015c:	2800      	cmp	r0, #0
 801015e:	d0ef      	beq.n	8010140 <osMessageQueueGet+0xc>
 8010160:	2900      	cmp	r1, #0
 8010162:	d0ed      	beq.n	8010140 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010164:	4622      	mov	r2, r4
 8010166:	f000 fd8b 	bl	8010c80 <xQueueReceive>
 801016a:	2801      	cmp	r0, #1
 801016c:	d010      	beq.n	8010190 <osMessageQueueGet+0x5c>
        if (timeout != 0U) {
 801016e:	b9d4      	cbnz	r4, 80101a6 <osMessageQueueGet+0x72>
          stat = osErrorResource;
 8010170:	f06f 0002 	mvn.w	r0, #2
 8010174:	e7e6      	b.n	8010144 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010176:	2900      	cmp	r1, #0
 8010178:	d0e2      	beq.n	8010140 <osMessageQueueGet+0xc>
 801017a:	2c00      	cmp	r4, #0
 801017c:	d1e0      	bne.n	8010140 <osMessageQueueGet+0xc>
      yield = pdFALSE;
 801017e:	aa02      	add	r2, sp, #8
 8010180:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010184:	f001 f884 	bl	8011290 <xQueueReceiveFromISR>
 8010188:	2801      	cmp	r0, #1
 801018a:	d1f1      	bne.n	8010170 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 801018c:	9b01      	ldr	r3, [sp, #4]
 801018e:	b90b      	cbnz	r3, 8010194 <osMessageQueueGet+0x60>
  stat = osOK;
 8010190:	2000      	movs	r0, #0
 8010192:	e7d7      	b.n	8010144 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8010194:	4b06      	ldr	r3, [pc, #24]	; (80101b0 <osMessageQueueGet+0x7c>)
 8010196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801019a:	601a      	str	r2, [r3, #0]
 801019c:	f3bf 8f4f 	dsb	sy
 80101a0:	f3bf 8f6f 	isb	sy
 80101a4:	e7f4      	b.n	8010190 <osMessageQueueGet+0x5c>
          stat = osErrorTimeout;
 80101a6:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80101aa:	e7cb      	b.n	8010144 <osMessageQueueGet+0x10>
 80101ac:	24000b94 	.word	0x24000b94
 80101b0:	e000ed04 	.word	0xe000ed04

080101b4 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80101b4:	4b03      	ldr	r3, [pc, #12]	; (80101c4 <vApplicationGetIdleTaskMemory+0x10>)
 80101b6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80101b8:	4b03      	ldr	r3, [pc, #12]	; (80101c8 <vApplicationGetIdleTaskMemory+0x14>)
 80101ba:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80101bc:	2380      	movs	r3, #128	; 0x80
 80101be:	6013      	str	r3, [r2, #0]
}
 80101c0:	4770      	bx	lr
 80101c2:	bf00      	nop
 80101c4:	24000b38 	.word	0x24000b38
 80101c8:	24000938 	.word	0x24000938

080101cc <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80101cc:	4b03      	ldr	r3, [pc, #12]	; (80101dc <vApplicationGetTimerTaskMemory+0x10>)
 80101ce:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80101d0:	4b03      	ldr	r3, [pc, #12]	; (80101e0 <vApplicationGetTimerTaskMemory+0x14>)
 80101d2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80101d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80101d8:	6013      	str	r3, [r2, #0]
}
 80101da:	4770      	bx	lr
 80101dc:	24000f98 	.word	0x24000f98
 80101e0:	24000b98 	.word	0x24000b98

080101e4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101e4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80101e8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101ec:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101ee:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101f0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80101f4:	2300      	movs	r3, #0
 80101f6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80101f8:	4770      	bx	lr

080101fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80101fa:	2300      	movs	r3, #0
 80101fc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80101fe:	4770      	bx	lr

08010200 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8010200:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010202:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8010204:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010206:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010208:	689a      	ldr	r2, [r3, #8]
 801020a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801020c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 801020e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8010210:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8010212:	3301      	adds	r3, #1
 8010214:	6003      	str	r3, [r0, #0]
}
 8010216:	4770      	bx	lr

08010218 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010218:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801021a:	1c53      	adds	r3, r2, #1
{
 801021c:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 801021e:	d10a      	bne.n	8010236 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010220:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010222:	685a      	ldr	r2, [r3, #4]
 8010224:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010226:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010228:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 801022a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 801022c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 801022e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8010230:	3301      	adds	r3, #1
 8010232:	6003      	str	r3, [r0, #0]
}
 8010234:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010236:	f100 0308 	add.w	r3, r0, #8
 801023a:	685c      	ldr	r4, [r3, #4]
 801023c:	6825      	ldr	r5, [r4, #0]
 801023e:	4295      	cmp	r5, r2
 8010240:	d8ef      	bhi.n	8010222 <vListInsert+0xa>
 8010242:	4623      	mov	r3, r4
 8010244:	e7f9      	b.n	801023a <vListInsert+0x22>

08010246 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010246:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 801024a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801024c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801024e:	6882      	ldr	r2, [r0, #8]
 8010250:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010252:	6859      	ldr	r1, [r3, #4]
 8010254:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010256:	bf08      	it	eq
 8010258:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801025a:	2200      	movs	r2, #0
 801025c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	3a01      	subs	r2, #1
 8010262:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010264:	6818      	ldr	r0, [r3, #0]
}
 8010266:	4770      	bx	lr

08010268 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010268:	b510      	push	{r4, lr}
 801026a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801026c:	f002 fb52 	bl	8012914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010270:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8010272:	f002 fb71 	bl	8012958 <vPortExitCritical>

	return xReturn;
}
 8010276:	fab4 f084 	clz	r0, r4
 801027a:	0940      	lsrs	r0, r0, #5
 801027c:	bd10      	pop	{r4, pc}

0801027e <prvCopyDataToQueue>:
{
 801027e:	b570      	push	{r4, r5, r6, lr}
 8010280:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010282:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8010284:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010286:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010288:	b942      	cbnz	r2, 801029c <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801028a:	6805      	ldr	r5, [r0, #0]
 801028c:	b99d      	cbnz	r5, 80102b6 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801028e:	6880      	ldr	r0, [r0, #8]
 8010290:	f001 ffe2 	bl	8012258 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010294:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010296:	3601      	adds	r6, #1
 8010298:	63a6      	str	r6, [r4, #56]	; 0x38
}
 801029a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 801029c:	b96d      	cbnz	r5, 80102ba <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801029e:	6840      	ldr	r0, [r0, #4]
 80102a0:	f002 ffea 	bl	8013278 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80102a4:	6863      	ldr	r3, [r4, #4]
 80102a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80102a8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80102aa:	68a2      	ldr	r2, [r4, #8]
 80102ac:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80102ae:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80102b0:	d301      	bcc.n	80102b6 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80102b2:	6823      	ldr	r3, [r4, #0]
 80102b4:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80102b6:	2000      	movs	r0, #0
 80102b8:	e7ed      	b.n	8010296 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80102ba:	68c0      	ldr	r0, [r0, #12]
 80102bc:	f002 ffdc 	bl	8013278 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80102c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80102c2:	68e2      	ldr	r2, [r4, #12]
 80102c4:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80102c6:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80102c8:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80102ca:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80102cc:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80102ce:	bf3e      	ittt	cc
 80102d0:	68a2      	ldrcc	r2, [r4, #8]
 80102d2:	189b      	addcc	r3, r3, r2
 80102d4:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80102d6:	2d02      	cmp	r5, #2
 80102d8:	d1ed      	bne.n	80102b6 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80102da:	b10e      	cbz	r6, 80102e0 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80102dc:	3e01      	subs	r6, #1
 80102de:	e7ea      	b.n	80102b6 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80102e0:	4630      	mov	r0, r6
 80102e2:	e7d8      	b.n	8010296 <prvCopyDataToQueue+0x18>

080102e4 <prvCopyDataFromQueue>:
{
 80102e4:	4603      	mov	r3, r0
 80102e6:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80102e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80102ea:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80102ec:	b162      	cbz	r2, 8010308 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80102ee:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80102f0:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80102f2:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80102f4:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80102f6:	60d9      	str	r1, [r3, #12]
}
 80102f8:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80102fc:	bf24      	itt	cs
 80102fe:	6819      	ldrcs	r1, [r3, #0]
 8010300:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010302:	68d9      	ldr	r1, [r3, #12]
 8010304:	f002 bfb8 	b.w	8013278 <memcpy>
}
 8010308:	f85d 4b04 	ldr.w	r4, [sp], #4
 801030c:	4770      	bx	lr

0801030e <prvUnlockQueue>:
{
 801030e:	b570      	push	{r4, r5, r6, lr}
 8010310:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8010312:	f002 faff 	bl	8012914 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010316:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801031a:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 801031e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010320:	2d00      	cmp	r5, #0
 8010322:	dc14      	bgt.n	801034e <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8010324:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010326:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 801032a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 801032e:	f002 fb13 	bl	8012958 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010332:	f002 faef 	bl	8012914 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010336:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 801033a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801033c:	2d00      	cmp	r5, #0
 801033e:	dc12      	bgt.n	8010366 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8010340:	23ff      	movs	r3, #255	; 0xff
 8010342:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8010346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 801034a:	f002 bb05 	b.w	8012958 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801034e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010350:	2b00      	cmp	r3, #0
 8010352:	d0e7      	beq.n	8010324 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010354:	4630      	mov	r0, r6
 8010356:	f001 fe3f 	bl	8011fd8 <xTaskRemoveFromEventList>
 801035a:	b108      	cbz	r0, 8010360 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 801035c:	f001 fed4 	bl	8012108 <vTaskMissedYield>
 8010360:	3d01      	subs	r5, #1
 8010362:	b26d      	sxtb	r5, r5
 8010364:	e7dc      	b.n	8010320 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010366:	6923      	ldr	r3, [r4, #16]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d0e9      	beq.n	8010340 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801036c:	4630      	mov	r0, r6
 801036e:	f001 fe33 	bl	8011fd8 <xTaskRemoveFromEventList>
 8010372:	b108      	cbz	r0, 8010378 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8010374:	f001 fec8 	bl	8012108 <vTaskMissedYield>
 8010378:	3d01      	subs	r5, #1
 801037a:	b26d      	sxtb	r5, r5
 801037c:	e7de      	b.n	801033c <prvUnlockQueue+0x2e>
	...

08010380 <xQueueGenericReset>:
{
 8010380:	b538      	push	{r3, r4, r5, lr}
 8010382:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8010384:	4604      	mov	r4, r0
 8010386:	b940      	cbnz	r0, 801039a <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801038c:	f383 8811 	msr	BASEPRI, r3
 8010390:	f3bf 8f6f 	isb	sy
 8010394:	f3bf 8f4f 	dsb	sy
 8010398:	e7fe      	b.n	8010398 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 801039a:	f002 fabb 	bl	8012914 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801039e:	6822      	ldr	r2, [r4, #0]
 80103a0:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80103a4:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80103a6:	4343      	muls	r3, r0
 80103a8:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80103aa:	1a1b      	subs	r3, r3, r0
 80103ac:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80103ae:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80103b0:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80103b2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80103b4:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80103b6:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80103b8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80103bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80103c0:	b995      	cbnz	r5, 80103e8 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103c2:	6923      	ldr	r3, [r4, #16]
 80103c4:	b163      	cbz	r3, 80103e0 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103c6:	f104 0010 	add.w	r0, r4, #16
 80103ca:	f001 fe05 	bl	8011fd8 <xTaskRemoveFromEventList>
 80103ce:	b138      	cbz	r0, 80103e0 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80103d0:	4b0a      	ldr	r3, [pc, #40]	; (80103fc <xQueueGenericReset+0x7c>)
 80103d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103d6:	601a      	str	r2, [r3, #0]
 80103d8:	f3bf 8f4f 	dsb	sy
 80103dc:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80103e0:	f002 faba 	bl	8012958 <vPortExitCritical>
}
 80103e4:	2001      	movs	r0, #1
 80103e6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80103e8:	f104 0010 	add.w	r0, r4, #16
 80103ec:	f7ff fefa 	bl	80101e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80103f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80103f4:	f7ff fef6 	bl	80101e4 <vListInitialise>
 80103f8:	e7f2      	b.n	80103e0 <xQueueGenericReset+0x60>
 80103fa:	bf00      	nop
 80103fc:	e000ed04 	.word	0xe000ed04

08010400 <prvInitialiseNewQueue>:
{
 8010400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010402:	9c06      	ldr	r4, [sp, #24]
 8010404:	461d      	mov	r5, r3
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010406:	2900      	cmp	r1, #0
 8010408:	bf08      	it	eq
 801040a:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 801040c:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010410:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010412:	2101      	movs	r1, #1
 8010414:	4620      	mov	r0, r4
 8010416:	f7ff ffb3 	bl	8010380 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 801041a:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
	traceQUEUE_CREATE( pxNewQueue );
 801041e:	4d24      	ldr	r5, [pc, #144]	; (80104b0 <prvInitialiseNewQueue+0xb0>)
 8010420:	4620      	mov	r0, r4
 8010422:	f7f4 fa3f 	bl	80048a4 <prvTraceGetQueueType>
 8010426:	5c28      	ldrb	r0, [r5, r0]
 8010428:	f7f4 fe2e 	bl	8005088 <prvTraceGetObjectHandle>
 801042c:	b281      	uxth	r1, r0
 801042e:	4620      	mov	r0, r4
 8010430:	f7f4 fa69 	bl	8004906 <prvTraceSetQueueNumberLow16>
 8010434:	4b1f      	ldr	r3, [pc, #124]	; (80104b4 <prvInitialiseNewQueue+0xb4>)
 8010436:	4620      	mov	r0, r4
 8010438:	8819      	ldrh	r1, [r3, #0]
 801043a:	f7f4 fa72 	bl	8004922 <prvTraceSetQueueNumberHigh16>
 801043e:	4620      	mov	r0, r4
 8010440:	f7f4 fa30 	bl	80048a4 <prvTraceGetQueueType>
 8010444:	5c2e      	ldrb	r6, [r5, r0]
 8010446:	4620      	mov	r0, r4
 8010448:	f7f4 fa53 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 801044c:	b2c1      	uxtb	r1, r0
 801044e:	4630      	mov	r0, r6
 8010450:	4e19      	ldr	r6, [pc, #100]	; (80104b8 <prvInitialiseNewQueue+0xb8>)
 8010452:	f7f4 fd07 	bl	8004e64 <prvMarkObjectAsUsed>
 8010456:	f7f4 fac5 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 801045a:	f7f4 fa2a 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 801045e:	8833      	ldrh	r3, [r6, #0]
 8010460:	4218      	tst	r0, r3
 8010462:	d017      	beq.n	8010494 <prvInitialiseNewQueue+0x94>
 8010464:	4620      	mov	r0, r4
 8010466:	f7f4 fa49 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 801046a:	8833      	ldrh	r3, [r6, #0]
 801046c:	4218      	tst	r0, r3
 801046e:	d011      	beq.n	8010494 <prvInitialiseNewQueue+0x94>
 8010470:	4620      	mov	r0, r4
 8010472:	f7f4 fa17 	bl	80048a4 <prvTraceGetQueueType>
 8010476:	5c2e      	ldrb	r6, [r5, r0]
 8010478:	4620      	mov	r0, r4
 801047a:	3618      	adds	r6, #24
 801047c:	f7f4 fa12 	bl	80048a4 <prvTraceGetQueueType>
 8010480:	5c2f      	ldrb	r7, [r5, r0]
 8010482:	4620      	mov	r0, r4
 8010484:	b2f6      	uxtb	r6, r6
 8010486:	f7f4 fa34 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 801048a:	4639      	mov	r1, r7
 801048c:	b2c2      	uxtb	r2, r0
 801048e:	4630      	mov	r0, r6
 8010490:	f7f5 f8a6 	bl	80055e0 <prvTraceStoreKernelCall>
 8010494:	4620      	mov	r0, r4
 8010496:	f7f4 fa05 	bl	80048a4 <prvTraceGetQueueType>
 801049a:	5c2d      	ldrb	r5, [r5, r0]
 801049c:	4620      	mov	r0, r4
 801049e:	f7f4 fa28 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 80104a2:	2200      	movs	r2, #0
 80104a4:	b2c1      	uxtb	r1, r0
 80104a6:	4628      	mov	r0, r5
}
 80104a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	traceQUEUE_CREATE( pxNewQueue );
 80104ac:	f7f4 bdaa 	b.w	8005004 <prvTraceSetObjectState>
 80104b0:	24000008 	.word	0x24000008
 80104b4:	2400000e 	.word	0x2400000e
 80104b8:	24000010 	.word	0x24000010

080104bc <xQueueGenericCreateStatic>:
	{
 80104bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80104be:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80104c0:	b940      	cbnz	r0, 80104d4 <xQueueGenericCreateStatic+0x18>
 80104c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c6:	f383 8811 	msr	BASEPRI, r3
 80104ca:	f3bf 8f6f 	isb	sy
 80104ce:	f3bf 8f4f 	dsb	sy
 80104d2:	e7fe      	b.n	80104d2 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 80104d4:	b943      	cbnz	r3, 80104e8 <xQueueGenericCreateStatic+0x2c>
 80104d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104da:	f383 8811 	msr	BASEPRI, r3
 80104de:	f3bf 8f6f 	isb	sy
 80104e2:	f3bf 8f4f 	dsb	sy
 80104e6:	e7fe      	b.n	80104e6 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80104e8:	b14a      	cbz	r2, 80104fe <xQueueGenericCreateStatic+0x42>
 80104ea:	b991      	cbnz	r1, 8010512 <xQueueGenericCreateStatic+0x56>
 80104ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f0:	f383 8811 	msr	BASEPRI, r3
 80104f4:	f3bf 8f6f 	isb	sy
 80104f8:	f3bf 8f4f 	dsb	sy
 80104fc:	e7fe      	b.n	80104fc <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80104fe:	b141      	cbz	r1, 8010512 <xQueueGenericCreateStatic+0x56>
 8010500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010504:	f383 8811 	msr	BASEPRI, r3
 8010508:	f3bf 8f6f 	isb	sy
 801050c:	f3bf 8f4f 	dsb	sy
 8010510:	e7fe      	b.n	8010510 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010512:	2350      	movs	r3, #80	; 0x50
 8010514:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010516:	9b03      	ldr	r3, [sp, #12]
 8010518:	2b50      	cmp	r3, #80	; 0x50
 801051a:	d008      	beq.n	801052e <xQueueGenericCreateStatic+0x72>
 801051c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010520:	f383 8811 	msr	BASEPRI, r3
 8010524:	f3bf 8f6f 	isb	sy
 8010528:	f3bf 8f4f 	dsb	sy
 801052c:	e7fe      	b.n	801052c <xQueueGenericCreateStatic+0x70>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801052e:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010530:	2301      	movs	r3, #1
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010532:	9400      	str	r4, [sp, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010534:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010538:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801053c:	f7ff ff60 	bl	8010400 <prvInitialiseNewQueue>
	}
 8010540:	4620      	mov	r0, r4
 8010542:	b004      	add	sp, #16
 8010544:	bd10      	pop	{r4, pc}
	...

08010548 <xQueueGenericCreate>:
	{
 8010548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801054a:	460f      	mov	r7, r1
 801054c:	4616      	mov	r6, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801054e:	4605      	mov	r5, r0
 8010550:	b940      	cbnz	r0, 8010564 <xQueueGenericCreate+0x1c>
 8010552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010556:	f383 8811 	msr	BASEPRI, r3
 801055a:	f3bf 8f6f 	isb	sy
 801055e:	f3bf 8f4f 	dsb	sy
 8010562:	e7fe      	b.n	8010562 <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010564:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010566:	3050      	adds	r0, #80	; 0x50
 8010568:	f002 fb42 	bl	8012bf0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 801056c:	4604      	mov	r4, r0
 801056e:	b168      	cbz	r0, 801058c <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010570:	2300      	movs	r3, #0
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010572:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8010576:	4639      	mov	r1, r7
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010578:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801057c:	4633      	mov	r3, r6
 801057e:	9000      	str	r0, [sp, #0]
 8010580:	4628      	mov	r0, r5
 8010582:	f7ff ff3d 	bl	8010400 <prvInitialiseNewQueue>
	}
 8010586:	4620      	mov	r0, r4
 8010588:	b003      	add	sp, #12
 801058a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			traceQUEUE_CREATE_FAILED( ucQueueType );
 801058c:	f7f4 fa2a 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8010590:	f7f4 f98f 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8010594:	4b05      	ldr	r3, [pc, #20]	; (80105ac <xQueueGenericCreate+0x64>)
 8010596:	881b      	ldrh	r3, [r3, #0]
 8010598:	4218      	tst	r0, r3
 801059a:	d0f4      	beq.n	8010586 <xQueueGenericCreate+0x3e>
 801059c:	4b04      	ldr	r3, [pc, #16]	; (80105b0 <xQueueGenericCreate+0x68>)
 801059e:	4621      	mov	r1, r4
 80105a0:	5d98      	ldrb	r0, [r3, r6]
 80105a2:	3040      	adds	r0, #64	; 0x40
 80105a4:	b2c0      	uxtb	r0, r0
 80105a6:	f7f5 f8c1 	bl	800572c <prvTraceStoreKernelCallWithNumericParamOnly>
		return pxNewQueue;
 80105aa:	e7ec      	b.n	8010586 <xQueueGenericCreate+0x3e>
 80105ac:	24000010 	.word	0x24000010
 80105b0:	24000008 	.word	0x24000008

080105b4 <xQueueCreateCountingSemaphoreStatic>:
	{
 80105b4:	b513      	push	{r0, r1, r4, lr}
 80105b6:	4613      	mov	r3, r2
 80105b8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80105ba:	b940      	cbnz	r0, 80105ce <xQueueCreateCountingSemaphoreStatic+0x1a>
 80105bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c0:	f383 8811 	msr	BASEPRI, r3
 80105c4:	f3bf 8f6f 	isb	sy
 80105c8:	f3bf 8f4f 	dsb	sy
 80105cc:	e7fe      	b.n	80105cc <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 80105ce:	4288      	cmp	r0, r1
 80105d0:	d208      	bcs.n	80105e4 <xQueueCreateCountingSemaphoreStatic+0x30>
 80105d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d6:	f383 8811 	msr	BASEPRI, r3
 80105da:	f3bf 8f6f 	isb	sy
 80105de:	f3bf 8f4f 	dsb	sy
 80105e2:	e7fe      	b.n	80105e2 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80105e4:	2202      	movs	r2, #2
 80105e6:	9200      	str	r2, [sp, #0]
 80105e8:	2200      	movs	r2, #0
 80105ea:	4611      	mov	r1, r2
 80105ec:	f7ff ff66 	bl	80104bc <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80105f0:	b100      	cbz	r0, 80105f4 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80105f2:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80105f4:	b002      	add	sp, #8
 80105f6:	bd10      	pop	{r4, pc}

080105f8 <xQueueCreateCountingSemaphore>:
	{
 80105f8:	b510      	push	{r4, lr}
 80105fa:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80105fc:	b940      	cbnz	r0, 8010610 <xQueueCreateCountingSemaphore+0x18>
 80105fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010602:	f383 8811 	msr	BASEPRI, r3
 8010606:	f3bf 8f6f 	isb	sy
 801060a:	f3bf 8f4f 	dsb	sy
 801060e:	e7fe      	b.n	801060e <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010610:	4288      	cmp	r0, r1
 8010612:	d208      	bcs.n	8010626 <xQueueCreateCountingSemaphore+0x2e>
 8010614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010618:	f383 8811 	msr	BASEPRI, r3
 801061c:	f3bf 8f6f 	isb	sy
 8010620:	f3bf 8f4f 	dsb	sy
 8010624:	e7fe      	b.n	8010624 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010626:	2202      	movs	r2, #2
 8010628:	2100      	movs	r1, #0
 801062a:	f7ff ff8d 	bl	8010548 <xQueueGenericCreate>
		if( xHandle != NULL )
 801062e:	b100      	cbz	r0, 8010632 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010630:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8010632:	bd10      	pop	{r4, pc}

08010634 <xQueueGenericSend>:
{
 8010634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010638:	b085      	sub	sp, #20
 801063a:	460f      	mov	r7, r1
 801063c:	461d      	mov	r5, r3
	configASSERT( pxQueue );
 801063e:	4604      	mov	r4, r0
{
 8010640:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8010642:	b940      	cbnz	r0, 8010656 <xQueueGenericSend+0x22>
 8010644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010648:	f383 8811 	msr	BASEPRI, r3
 801064c:	f3bf 8f6f 	isb	sy
 8010650:	f3bf 8f4f 	dsb	sy
 8010654:	e7fe      	b.n	8010654 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010656:	b951      	cbnz	r1, 801066e <xQueueGenericSend+0x3a>
 8010658:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801065a:	b143      	cbz	r3, 801066e <xQueueGenericSend+0x3a>
 801065c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010660:	f383 8811 	msr	BASEPRI, r3
 8010664:	f3bf 8f6f 	isb	sy
 8010668:	f3bf 8f4f 	dsb	sy
 801066c:	e7fe      	b.n	801066c <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801066e:	2d02      	cmp	r5, #2
 8010670:	d10b      	bne.n	801068a <xQueueGenericSend+0x56>
 8010672:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010674:	2b01      	cmp	r3, #1
 8010676:	d008      	beq.n	801068a <xQueueGenericSend+0x56>
 8010678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067c:	f383 8811 	msr	BASEPRI, r3
 8010680:	f3bf 8f6f 	isb	sy
 8010684:	f3bf 8f4f 	dsb	sy
 8010688:	e7fe      	b.n	8010688 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801068a:	f001 fd5f 	bl	801214c <xTaskGetSchedulerState>
 801068e:	b950      	cbnz	r0, 80106a6 <xQueueGenericSend+0x72>
 8010690:	9e01      	ldr	r6, [sp, #4]
 8010692:	b14e      	cbz	r6, 80106a8 <xQueueGenericSend+0x74>
 8010694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010698:	f383 8811 	msr	BASEPRI, r3
 801069c:	f3bf 8f6f 	isb	sy
 80106a0:	f3bf 8f4f 	dsb	sy
 80106a4:	e7fe      	b.n	80106a4 <xQueueGenericSend+0x70>
 80106a6:	2600      	movs	r6, #0
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80106a8:	f8df 8218 	ldr.w	r8, [pc, #536]	; 80108c4 <xQueueGenericSend+0x290>
					portYIELD_WITHIN_API();
 80106ac:	f8df a21c 	ldr.w	sl, [pc, #540]	; 80108cc <xQueueGenericSend+0x298>
 80106b0:	f8df 9214 	ldr.w	r9, [pc, #532]	; 80108c8 <xQueueGenericSend+0x294>
 80106b4:	e098      	b.n	80107e8 <xQueueGenericSend+0x1b4>
				traceQUEUE_SEND( pxQueue );
 80106b6:	2625      	movs	r6, #37	; 0x25
 80106b8:	e0b9      	b.n	801082e <xQueueGenericSend+0x1fa>
 80106ba:	2200      	movs	r2, #0
 80106bc:	e0d9      	b.n	8010872 <xQueueGenericSend+0x23e>
				if( xTicksToWait == ( TickType_t ) 0 )
 80106be:	9b01      	ldr	r3, [sp, #4]
 80106c0:	bb3b      	cbnz	r3, 8010712 <xQueueGenericSend+0xde>
					taskEXIT_CRITICAL();
 80106c2:	f002 f949 	bl	8012958 <vPortExitCritical>
			traceQUEUE_SEND_FAILED( pxQueue );
 80106c6:	4e7f      	ldr	r6, [pc, #508]	; (80108c4 <xQueueGenericSend+0x290>)
 80106c8:	f7f4 f98c 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 80106cc:	f7f4 f8f1 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 80106d0:	8833      	ldrh	r3, [r6, #0]
 80106d2:	4218      	tst	r0, r3
 80106d4:	d01b      	beq.n	801070e <xQueueGenericSend+0xda>
 80106d6:	4620      	mov	r0, r4
 80106d8:	f7f4 f910 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 80106dc:	8833      	ldrh	r3, [r6, #0]
 80106de:	4218      	tst	r0, r3
 80106e0:	d015      	beq.n	801070e <xQueueGenericSend+0xda>
 80106e2:	4e79      	ldr	r6, [pc, #484]	; (80108c8 <xQueueGenericSend+0x294>)
 80106e4:	2d00      	cmp	r5, #0
 80106e6:	f040 80ea 	bne.w	80108be <xQueueGenericSend+0x28a>
 80106ea:	4620      	mov	r0, r4
 80106ec:	f7f4 f8da 	bl	80048a4 <prvTraceGetQueueType>
 80106f0:	5c35      	ldrb	r5, [r6, r0]
 80106f2:	3548      	adds	r5, #72	; 0x48
 80106f4:	b2ed      	uxtb	r5, r5
 80106f6:	4620      	mov	r0, r4
 80106f8:	f7f4 f8d4 	bl	80048a4 <prvTraceGetQueueType>
 80106fc:	5c36      	ldrb	r6, [r6, r0]
 80106fe:	4620      	mov	r0, r4
 8010700:	f7f4 f8f7 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8010704:	4631      	mov	r1, r6
 8010706:	b2c2      	uxtb	r2, r0
 8010708:	4628      	mov	r0, r5
 801070a:	f7f4 ff69 	bl	80055e0 <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 801070e:	2000      	movs	r0, #0
 8010710:	e0ca      	b.n	80108a8 <xQueueGenericSend+0x274>
				else if( xEntryTimeSet == pdFALSE )
 8010712:	b916      	cbnz	r6, 801071a <xQueueGenericSend+0xe6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010714:	a802      	add	r0, sp, #8
 8010716:	f001 fcaf 	bl	8012078 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801071a:	f002 f91d 	bl	8012958 <vPortExitCritical>
		vTaskSuspendAll();
 801071e:	f001 f9a3 	bl	8011a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010722:	f002 f8f7 	bl	8012914 <vPortEnterCritical>
 8010726:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801072a:	2bff      	cmp	r3, #255	; 0xff
 801072c:	d102      	bne.n	8010734 <xQueueGenericSend+0x100>
 801072e:	2300      	movs	r3, #0
 8010730:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010734:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010738:	2bff      	cmp	r3, #255	; 0xff
 801073a:	d102      	bne.n	8010742 <xQueueGenericSend+0x10e>
 801073c:	2300      	movs	r3, #0
 801073e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010742:	f002 f909 	bl	8012958 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010746:	a901      	add	r1, sp, #4
 8010748:	a802      	add	r0, sp, #8
 801074a:	f001 fca1 	bl	8012090 <xTaskCheckForTimeOut>
 801074e:	2800      	cmp	r0, #0
 8010750:	f040 80af 	bne.w	80108b2 <xQueueGenericSend+0x27e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010754:	f002 f8de 	bl	8012914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010758:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801075a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801075c:	429a      	cmp	r2, r3
 801075e:	d13b      	bne.n	80107d8 <xQueueGenericSend+0x1a4>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8010760:	f002 f8fa 	bl	8012958 <vPortExitCritical>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8010764:	f7f4 f93e 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8010768:	f7f4 f8a3 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 801076c:	f8b8 3000 	ldrh.w	r3, [r8]
 8010770:	4218      	tst	r0, r3
 8010772:	d01d      	beq.n	80107b0 <xQueueGenericSend+0x17c>
 8010774:	4620      	mov	r0, r4
 8010776:	f7f4 f8c1 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 801077a:	f8b8 3000 	ldrh.w	r3, [r8]
 801077e:	4218      	tst	r0, r3
 8010780:	d016      	beq.n	80107b0 <xQueueGenericSend+0x17c>
 8010782:	2d00      	cmp	r5, #0
 8010784:	f040 8093 	bne.w	80108ae <xQueueGenericSend+0x27a>
 8010788:	4620      	mov	r0, r4
 801078a:	f7f4 f88b 	bl	80048a4 <prvTraceGetQueueType>
 801078e:	f819 6000 	ldrb.w	r6, [r9, r0]
 8010792:	3670      	adds	r6, #112	; 0x70
 8010794:	b2f6      	uxtb	r6, r6
 8010796:	4620      	mov	r0, r4
 8010798:	f7f4 f884 	bl	80048a4 <prvTraceGetQueueType>
 801079c:	f819 b000 	ldrb.w	fp, [r9, r0]
 80107a0:	4620      	mov	r0, r4
 80107a2:	f7f4 f8a6 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 80107a6:	4659      	mov	r1, fp
 80107a8:	b2c2      	uxtb	r2, r0
 80107aa:	4630      	mov	r0, r6
 80107ac:	f7f4 ff18 	bl	80055e0 <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80107b0:	9901      	ldr	r1, [sp, #4]
 80107b2:	f104 0010 	add.w	r0, r4, #16
 80107b6:	f001 fbb1 	bl	8011f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80107ba:	4620      	mov	r0, r4
 80107bc:	f7ff fda7 	bl	801030e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80107c0:	f001 fa1c 	bl	8011bfc <xTaskResumeAll>
 80107c4:	b978      	cbnz	r0, 80107e6 <xQueueGenericSend+0x1b2>
					portYIELD_WITHIN_API();
 80107c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80107ca:	f8ca 3000 	str.w	r3, [sl]
 80107ce:	f3bf 8f4f 	dsb	sy
 80107d2:	f3bf 8f6f 	isb	sy
 80107d6:	e006      	b.n	80107e6 <xQueueGenericSend+0x1b2>
	taskEXIT_CRITICAL();
 80107d8:	f002 f8be 	bl	8012958 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80107dc:	4620      	mov	r0, r4
 80107de:	f7ff fd96 	bl	801030e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80107e2:	f001 fa0b 	bl	8011bfc <xTaskResumeAll>
 80107e6:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80107e8:	f002 f894 	bl	8012914 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80107ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80107ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d302      	bcc.n	80107fa <xQueueGenericSend+0x1c6>
 80107f4:	2d02      	cmp	r5, #2
 80107f6:	f47f af62 	bne.w	80106be <xQueueGenericSend+0x8a>
				traceQUEUE_SEND( pxQueue );
 80107fa:	4e32      	ldr	r6, [pc, #200]	; (80108c4 <xQueueGenericSend+0x290>)
 80107fc:	f7f4 f8f2 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8010800:	f7f4 f857 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8010804:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80108c8 <xQueueGenericSend+0x294>
 8010808:	8833      	ldrh	r3, [r6, #0]
 801080a:	4218      	tst	r0, r3
 801080c:	d01c      	beq.n	8010848 <xQueueGenericSend+0x214>
 801080e:	4620      	mov	r0, r4
 8010810:	f7f4 f874 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 8010814:	8833      	ldrh	r3, [r6, #0]
 8010816:	4218      	tst	r0, r3
 8010818:	d016      	beq.n	8010848 <xQueueGenericSend+0x214>
 801081a:	2d00      	cmp	r5, #0
 801081c:	f47f af4b 	bne.w	80106b6 <xQueueGenericSend+0x82>
 8010820:	4620      	mov	r0, r4
 8010822:	f7f4 f83f 	bl	80048a4 <prvTraceGetQueueType>
 8010826:	f818 6000 	ldrb.w	r6, [r8, r0]
 801082a:	3620      	adds	r6, #32
 801082c:	b2f6      	uxtb	r6, r6
 801082e:	4620      	mov	r0, r4
 8010830:	f7f4 f838 	bl	80048a4 <prvTraceGetQueueType>
 8010834:	f818 9000 	ldrb.w	r9, [r8, r0]
 8010838:	4620      	mov	r0, r4
 801083a:	f7f4 f85a 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 801083e:	4649      	mov	r1, r9
 8010840:	b2c2      	uxtb	r2, r0
 8010842:	4630      	mov	r0, r6
 8010844:	f7f4 fecc 	bl	80055e0 <prvTraceStoreKernelCall>
 8010848:	4620      	mov	r0, r4
 801084a:	f7f4 f82b 	bl	80048a4 <prvTraceGetQueueType>
 801084e:	f818 6000 	ldrb.w	r6, [r8, r0]
 8010852:	4620      	mov	r0, r4
 8010854:	f7f4 f84d 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8010858:	fa5f f980 	uxtb.w	r9, r0
 801085c:	4620      	mov	r0, r4
 801085e:	f7f4 f821 	bl	80048a4 <prvTraceGetQueueType>
 8010862:	f818 3000 	ldrb.w	r3, [r8, r0]
 8010866:	2b02      	cmp	r3, #2
 8010868:	f43f af27 	beq.w	80106ba <xQueueGenericSend+0x86>
 801086c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801086e:	3201      	adds	r2, #1
 8010870:	b2d2      	uxtb	r2, r2
 8010872:	4649      	mov	r1, r9
 8010874:	4630      	mov	r0, r6
 8010876:	f7f4 fbc5 	bl	8005004 <prvTraceSetObjectState>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801087a:	462a      	mov	r2, r5
 801087c:	4639      	mov	r1, r7
 801087e:	4620      	mov	r0, r4
 8010880:	f7ff fcfd 	bl	801027e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010884:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010886:	b11b      	cbz	r3, 8010890 <xQueueGenericSend+0x25c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010888:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801088c:	f001 fba4 	bl	8011fd8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8010890:	b138      	cbz	r0, 80108a2 <xQueueGenericSend+0x26e>
						queueYIELD_IF_USING_PREEMPTION();
 8010892:	4b0e      	ldr	r3, [pc, #56]	; (80108cc <xQueueGenericSend+0x298>)
 8010894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010898:	601a      	str	r2, [r3, #0]
 801089a:	f3bf 8f4f 	dsb	sy
 801089e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80108a2:	f002 f859 	bl	8012958 <vPortExitCritical>
				return pdPASS;
 80108a6:	2001      	movs	r0, #1
}
 80108a8:	b005      	add	sp, #20
 80108aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80108ae:	2675      	movs	r6, #117	; 0x75
 80108b0:	e771      	b.n	8010796 <xQueueGenericSend+0x162>
			prvUnlockQueue( pxQueue );
 80108b2:	4620      	mov	r0, r4
 80108b4:	f7ff fd2b 	bl	801030e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80108b8:	f001 f9a0 	bl	8011bfc <xTaskResumeAll>
 80108bc:	e703      	b.n	80106c6 <xQueueGenericSend+0x92>
			traceQUEUE_SEND_FAILED( pxQueue );
 80108be:	254d      	movs	r5, #77	; 0x4d
 80108c0:	e719      	b.n	80106f6 <xQueueGenericSend+0xc2>
 80108c2:	bf00      	nop
 80108c4:	24000010 	.word	0x24000010
 80108c8:	24000008 	.word	0x24000008
 80108cc:	e000ed04 	.word	0xe000ed04

080108d0 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80108d0:	2200      	movs	r2, #0
 80108d2:	460b      	mov	r3, r1
	{
 80108d4:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80108d6:	4611      	mov	r1, r2
 80108d8:	9000      	str	r0, [sp, #0]
 80108da:	2001      	movs	r0, #1
 80108dc:	f7ff fdee 	bl	80104bc <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 80108e0:	4604      	mov	r4, r0
 80108e2:	b138      	cbz	r0, 80108f4 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80108e4:	2300      	movs	r3, #0
 80108e6:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80108e8:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80108ea:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80108ec:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80108ee:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80108f0:	f7ff fea0 	bl	8010634 <xQueueGenericSend>
	}
 80108f4:	4620      	mov	r0, r4
 80108f6:	b002      	add	sp, #8
 80108f8:	bd10      	pop	{r4, pc}
	...

080108fc <xQueueGiveMutexRecursive>:
	{
 80108fc:	b570      	push	{r4, r5, r6, lr}
		configASSERT( pxMutex );
 80108fe:	4604      	mov	r4, r0
 8010900:	b940      	cbnz	r0, 8010914 <xQueueGiveMutexRecursive+0x18>
 8010902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010906:	f383 8811 	msr	BASEPRI, r3
 801090a:	f3bf 8f6f 	isb	sy
 801090e:	f3bf 8f4f 	dsb	sy
 8010912:	e7fe      	b.n	8010912 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010914:	6885      	ldr	r5, [r0, #8]
 8010916:	f001 fc13 	bl	8012140 <xTaskGetCurrentTaskHandle>
 801091a:	4285      	cmp	r5, r0
 801091c:	d10a      	bne.n	8010934 <xQueueGiveMutexRecursive+0x38>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801091e:	68e3      	ldr	r3, [r4, #12]
 8010920:	3b01      	subs	r3, #1
 8010922:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8010924:	b923      	cbnz	r3, 8010930 <xQueueGiveMutexRecursive+0x34>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8010926:	461a      	mov	r2, r3
 8010928:	4619      	mov	r1, r3
 801092a:	4620      	mov	r0, r4
 801092c:	f7ff fe82 	bl	8010634 <xQueueGenericSend>
			xReturn = pdPASS;
 8010930:	2001      	movs	r0, #1
		return xReturn;
 8010932:	e008      	b.n	8010946 <xQueueGiveMutexRecursive+0x4a>
			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 8010934:	4d11      	ldr	r5, [pc, #68]	; (801097c <xQueueGiveMutexRecursive+0x80>)
 8010936:	f7f4 f855 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 801093a:	f7f3 ffba 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 801093e:	882b      	ldrh	r3, [r5, #0]
 8010940:	4218      	tst	r0, r3
 8010942:	d101      	bne.n	8010948 <xQueueGiveMutexRecursive+0x4c>
			xReturn = pdFAIL;
 8010944:	2000      	movs	r0, #0
	}
 8010946:	bd70      	pop	{r4, r5, r6, pc}
			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 8010948:	4620      	mov	r0, r4
 801094a:	f7f3 ffd7 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 801094e:	882b      	ldrh	r3, [r5, #0]
 8010950:	4218      	tst	r0, r3
 8010952:	d0f7      	beq.n	8010944 <xQueueGiveMutexRecursive+0x48>
 8010954:	4e0a      	ldr	r6, [pc, #40]	; (8010980 <xQueueGiveMutexRecursive+0x84>)
 8010956:	4620      	mov	r0, r4
 8010958:	f7f3 ffa4 	bl	80048a4 <prvTraceGetQueueType>
 801095c:	5c35      	ldrb	r5, [r6, r0]
 801095e:	4620      	mov	r0, r4
 8010960:	f7f3 ffa0 	bl	80048a4 <prvTraceGetQueueType>
 8010964:	5c36      	ldrb	r6, [r6, r0]
 8010966:	3548      	adds	r5, #72	; 0x48
 8010968:	4620      	mov	r0, r4
 801096a:	f7f3 ffc2 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 801096e:	4631      	mov	r1, r6
 8010970:	b2ed      	uxtb	r5, r5
 8010972:	b2c2      	uxtb	r2, r0
 8010974:	4628      	mov	r0, r5
 8010976:	f7f4 fe33 	bl	80055e0 <prvTraceStoreKernelCall>
 801097a:	e7e3      	b.n	8010944 <xQueueGiveMutexRecursive+0x48>
 801097c:	24000010 	.word	0x24000010
 8010980:	24000008 	.word	0x24000008

08010984 <xQueueCreateMutex>:
	{
 8010984:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010986:	4602      	mov	r2, r0
 8010988:	2100      	movs	r1, #0
 801098a:	2001      	movs	r0, #1
 801098c:	f7ff fddc 	bl	8010548 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8010990:	4604      	mov	r4, r0
 8010992:	b138      	cbz	r0, 80109a4 <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010994:	2300      	movs	r3, #0
 8010996:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010998:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801099a:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801099c:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801099e:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80109a0:	f7ff fe48 	bl	8010634 <xQueueGenericSend>
	}
 80109a4:	4620      	mov	r0, r4
 80109a6:	bd10      	pop	{r4, pc}

080109a8 <xQueueGenericSendFromISR>:
{
 80109a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109ac:	468b      	mov	fp, r1
 80109ae:	4692      	mov	sl, r2
 80109b0:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 80109b2:	4604      	mov	r4, r0
 80109b4:	b940      	cbnz	r0, 80109c8 <xQueueGenericSendFromISR+0x20>
 80109b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ba:	f383 8811 	msr	BASEPRI, r3
 80109be:	f3bf 8f6f 	isb	sy
 80109c2:	f3bf 8f4f 	dsb	sy
 80109c6:	e7fe      	b.n	80109c6 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80109c8:	b951      	cbnz	r1, 80109e0 <xQueueGenericSendFromISR+0x38>
 80109ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80109cc:	b143      	cbz	r3, 80109e0 <xQueueGenericSendFromISR+0x38>
 80109ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d2:	f383 8811 	msr	BASEPRI, r3
 80109d6:	f3bf 8f6f 	isb	sy
 80109da:	f3bf 8f4f 	dsb	sy
 80109de:	e7fe      	b.n	80109de <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80109e0:	f1b8 0f02 	cmp.w	r8, #2
 80109e4:	d10b      	bne.n	80109fe <xQueueGenericSendFromISR+0x56>
 80109e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	d008      	beq.n	80109fe <xQueueGenericSendFromISR+0x56>
 80109ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109f0:	f383 8811 	msr	BASEPRI, r3
 80109f4:	f3bf 8f6f 	isb	sy
 80109f8:	f3bf 8f4f 	dsb	sy
 80109fc:	e7fe      	b.n	80109fc <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80109fe:	f002 f8a5 	bl	8012b4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010a02:	f3ef 8611 	mrs	r6, BASEPRI
 8010a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a0a:	f383 8811 	msr	BASEPRI, r3
 8010a0e:	f3bf 8f6f 	isb	sy
 8010a12:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010a16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010a18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010a1a:	4f3d      	ldr	r7, [pc, #244]	; (8010b10 <xQueueGenericSendFromISR+0x168>)
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d302      	bcc.n	8010a26 <xQueueGenericSendFromISR+0x7e>
 8010a20:	f1b8 0f02 	cmp.w	r8, #2
 8010a24:	d154      	bne.n	8010ad0 <xQueueGenericSendFromISR+0x128>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8010a26:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8010a28:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8010a2c:	f7f3 ff66 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 8010a30:	883b      	ldrh	r3, [r7, #0]
			const int8_t cTxLock = pxQueue->cTxLock;
 8010a32:	b26d      	sxtb	r5, r5
 8010a34:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8010b14 <xQueueGenericSendFromISR+0x16c>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8010a38:	4218      	tst	r0, r3
 8010a3a:	d017      	beq.n	8010a6c <xQueueGenericSendFromISR+0xc4>
 8010a3c:	f1b8 0f00 	cmp.w	r8, #0
 8010a40:	d12e      	bne.n	8010aa0 <xQueueGenericSendFromISR+0xf8>
 8010a42:	4620      	mov	r0, r4
 8010a44:	f7f3 ff2e 	bl	80048a4 <prvTraceGetQueueType>
 8010a48:	f819 7000 	ldrb.w	r7, [r9, r0]
 8010a4c:	3730      	adds	r7, #48	; 0x30
 8010a4e:	b2ff      	uxtb	r7, r7
 8010a50:	4620      	mov	r0, r4
 8010a52:	f7f3 ff27 	bl	80048a4 <prvTraceGetQueueType>
 8010a56:	f819 1000 	ldrb.w	r1, [r9, r0]
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	9101      	str	r1, [sp, #4]
 8010a5e:	f7f3 ff48 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8010a62:	9901      	ldr	r1, [sp, #4]
 8010a64:	b2c2      	uxtb	r2, r0
 8010a66:	4638      	mov	r0, r7
 8010a68:	f7f4 fdba 	bl	80055e0 <prvTraceStoreKernelCall>
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	f7f3 ff19 	bl	80048a4 <prvTraceGetQueueType>
 8010a72:	f819 7000 	ldrb.w	r7, [r9, r0]
 8010a76:	4620      	mov	r0, r4
 8010a78:	f7f3 ff3b 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8010a7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010a7e:	b2c1      	uxtb	r1, r0
 8010a80:	4638      	mov	r0, r7
 8010a82:	3201      	adds	r2, #1
 8010a84:	b2d2      	uxtb	r2, r2
 8010a86:	f7f4 fabd 	bl	8005004 <prvTraceSetObjectState>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a8a:	4642      	mov	r2, r8
 8010a8c:	4659      	mov	r1, fp
 8010a8e:	4620      	mov	r0, r4
 8010a90:	f7ff fbf5 	bl	801027e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8010a94:	1c6b      	adds	r3, r5, #1
 8010a96:	d116      	bne.n	8010ac6 <xQueueGenericSendFromISR+0x11e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a9a:	b91b      	cbnz	r3, 8010aa4 <xQueueGenericSendFromISR+0xfc>
			xReturn = pdPASS;
 8010a9c:	2001      	movs	r0, #1
 8010a9e:	e00d      	b.n	8010abc <xQueueGenericSendFromISR+0x114>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8010aa0:	2735      	movs	r7, #53	; 0x35
 8010aa2:	e7d5      	b.n	8010a50 <xQueueGenericSendFromISR+0xa8>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010aa4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010aa8:	f001 fa96 	bl	8011fd8 <xTaskRemoveFromEventList>
 8010aac:	2800      	cmp	r0, #0
 8010aae:	d0f5      	beq.n	8010a9c <xQueueGenericSendFromISR+0xf4>
							if( pxHigherPriorityTaskWoken != NULL )
 8010ab0:	f1ba 0f00 	cmp.w	sl, #0
 8010ab4:	d0f2      	beq.n	8010a9c <xQueueGenericSendFromISR+0xf4>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010ab6:	2001      	movs	r0, #1
 8010ab8:	f8ca 0000 	str.w	r0, [sl]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010abc:	f386 8811 	msr	BASEPRI, r6
}
 8010ac0:	b003      	add	sp, #12
 8010ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010ac6:	3501      	adds	r5, #1
 8010ac8:	b26d      	sxtb	r5, r5
 8010aca:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8010ace:	e7e5      	b.n	8010a9c <xQueueGenericSendFromISR+0xf4>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	f7f3 ff13 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 8010ad6:	883b      	ldrh	r3, [r7, #0]
 8010ad8:	4018      	ands	r0, r3
 8010ada:	d0ef      	beq.n	8010abc <xQueueGenericSendFromISR+0x114>
 8010adc:	4f0d      	ldr	r7, [pc, #52]	; (8010b14 <xQueueGenericSendFromISR+0x16c>)
 8010ade:	f1b8 0f00 	cmp.w	r8, #0
 8010ae2:	d113      	bne.n	8010b0c <xQueueGenericSendFromISR+0x164>
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	f7f3 fedd 	bl	80048a4 <prvTraceGetQueueType>
 8010aea:	5c3d      	ldrb	r5, [r7, r0]
 8010aec:	3558      	adds	r5, #88	; 0x58
 8010aee:	b2ed      	uxtb	r5, r5
 8010af0:	4620      	mov	r0, r4
 8010af2:	f7f3 fed7 	bl	80048a4 <prvTraceGetQueueType>
 8010af6:	5c3f      	ldrb	r7, [r7, r0]
 8010af8:	4620      	mov	r0, r4
 8010afa:	f7f3 fefa 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8010afe:	4639      	mov	r1, r7
 8010b00:	b2c2      	uxtb	r2, r0
 8010b02:	4628      	mov	r0, r5
 8010b04:	f7f4 fd6c 	bl	80055e0 <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 8010b08:	2000      	movs	r0, #0
 8010b0a:	e7d7      	b.n	8010abc <xQueueGenericSendFromISR+0x114>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8010b0c:	255d      	movs	r5, #93	; 0x5d
 8010b0e:	e7ef      	b.n	8010af0 <xQueueGenericSendFromISR+0x148>
 8010b10:	24000010 	.word	0x24000010
 8010b14:	24000008 	.word	0x24000008

08010b18 <MyWrapper_xQueueGiveFromISR>:
{
 8010b18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b1c:	4689      	mov	r9, r1
 8010b1e:	4617      	mov	r7, r2
	configASSERT( pxQueue );
 8010b20:	4604      	mov	r4, r0
 8010b22:	b940      	cbnz	r0, 8010b36 <MyWrapper_xQueueGiveFromISR+0x1e>
	__asm volatile
 8010b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b28:	f383 8811 	msr	BASEPRI, r3
 8010b2c:	f3bf 8f6f 	isb	sy
 8010b30:	f3bf 8f4f 	dsb	sy
 8010b34:	e7fe      	b.n	8010b34 <MyWrapper_xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8010b36:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010b38:	b143      	cbz	r3, 8010b4c <MyWrapper_xQueueGiveFromISR+0x34>
 8010b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b3e:	f383 8811 	msr	BASEPRI, r3
 8010b42:	f3bf 8f6f 	isb	sy
 8010b46:	f3bf 8f4f 	dsb	sy
 8010b4a:	e7fe      	b.n	8010b4a <MyWrapper_xQueueGiveFromISR+0x32>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010b4c:	6803      	ldr	r3, [r0, #0]
 8010b4e:	b953      	cbnz	r3, 8010b66 <MyWrapper_xQueueGiveFromISR+0x4e>
 8010b50:	6883      	ldr	r3, [r0, #8]
 8010b52:	b143      	cbz	r3, 8010b66 <MyWrapper_xQueueGiveFromISR+0x4e>
 8010b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b58:	f383 8811 	msr	BASEPRI, r3
 8010b5c:	f3bf 8f6f 	isb	sy
 8010b60:	f3bf 8f4f 	dsb	sy
 8010b64:	e7fe      	b.n	8010b64 <MyWrapper_xQueueGiveFromISR+0x4c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b66:	f001 fff1 	bl	8012b4c <vPortValidateInterruptPriority>
	__asm volatile
 8010b6a:	f3ef 8611 	mrs	r6, BASEPRI
 8010b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b72:	f383 8811 	msr	BASEPRI, r3
 8010b76:	f3bf 8f6f 	isb	sy
 8010b7a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b7e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010b82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010b84:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8010c70 <MyWrapper_xQueueGiveFromISR+0x158>
 8010b88:	4598      	cmp	r8, r3
 8010b8a:	d24f      	bcs.n	8010c2c <MyWrapper_xQueueGiveFromISR+0x114>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8010b8c:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8010b8e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8010b92:	f7f3 feb3 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 8010b96:	f8ba 3000 	ldrh.w	r3, [sl]
			const int8_t cTxLock = pxQueue->cTxLock;
 8010b9a:	b26d      	sxtb	r5, r5
 8010b9c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010c74 <MyWrapper_xQueueGiveFromISR+0x15c>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8010ba0:	4218      	tst	r0, r3
 8010ba2:	d014      	beq.n	8010bce <MyWrapper_xQueueGiveFromISR+0xb6>
 8010ba4:	bb5f      	cbnz	r7, 8010bfe <MyWrapper_xQueueGiveFromISR+0xe6>
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	f7f3 fe7c 	bl	80048a4 <prvTraceGetQueueType>
 8010bac:	f81a 7000 	ldrb.w	r7, [sl, r0]
 8010bb0:	3730      	adds	r7, #48	; 0x30
 8010bb2:	b2ff      	uxtb	r7, r7
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f7f3 fe75 	bl	80048a4 <prvTraceGetQueueType>
 8010bba:	f81a b000 	ldrb.w	fp, [sl, r0]
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	f7f3 fe97 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8010bc4:	4659      	mov	r1, fp
 8010bc6:	b2c2      	uxtb	r2, r0
 8010bc8:	4638      	mov	r0, r7
 8010bca:	f7f4 fd09 	bl	80055e0 <prvTraceStoreKernelCall>
 8010bce:	4620      	mov	r0, r4
 8010bd0:	f7f3 fe68 	bl	80048a4 <prvTraceGetQueueType>
 8010bd4:	f81a 7000 	ldrb.w	r7, [sl, r0]
 8010bd8:	4620      	mov	r0, r4
 8010bda:	f7f3 fe8a 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8010bde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010be0:	b2c1      	uxtb	r1, r0
 8010be2:	4638      	mov	r0, r7
 8010be4:	3201      	adds	r2, #1
 8010be6:	b2d2      	uxtb	r2, r2
 8010be8:	f7f4 fa0c 	bl	8005004 <prvTraceSetObjectState>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010bec:	f108 0301 	add.w	r3, r8, #1
 8010bf0:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8010bf2:	1c6b      	adds	r3, r5, #1
 8010bf4:	d115      	bne.n	8010c22 <MyWrapper_xQueueGiveFromISR+0x10a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bf8:	b91b      	cbnz	r3, 8010c02 <MyWrapper_xQueueGiveFromISR+0xea>
			xReturn = pdPASS;
 8010bfa:	2001      	movs	r0, #1
 8010bfc:	e00d      	b.n	8010c1a <MyWrapper_xQueueGiveFromISR+0x102>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8010bfe:	2735      	movs	r7, #53	; 0x35
 8010c00:	e7d8      	b.n	8010bb4 <MyWrapper_xQueueGiveFromISR+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010c06:	f001 f9e7 	bl	8011fd8 <xTaskRemoveFromEventList>
 8010c0a:	2800      	cmp	r0, #0
 8010c0c:	d0f5      	beq.n	8010bfa <MyWrapper_xQueueGiveFromISR+0xe2>
							if( pxHigherPriorityTaskWoken != NULL )
 8010c0e:	f1b9 0f00 	cmp.w	r9, #0
 8010c12:	d0f2      	beq.n	8010bfa <MyWrapper_xQueueGiveFromISR+0xe2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010c14:	2001      	movs	r0, #1
 8010c16:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8010c1a:	f386 8811 	msr	BASEPRI, r6
}
 8010c1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010c22:	3501      	adds	r5, #1
 8010c24:	b26d      	sxtb	r5, r5
 8010c26:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8010c2a:	e7e6      	b.n	8010bfa <MyWrapper_xQueueGiveFromISR+0xe2>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8010c2c:	4620      	mov	r0, r4
 8010c2e:	f7f3 fe65 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 8010c32:	f8ba 3000 	ldrh.w	r3, [sl]
 8010c36:	4018      	ands	r0, r3
 8010c38:	d0ef      	beq.n	8010c1a <MyWrapper_xQueueGiveFromISR+0x102>
 8010c3a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8010c74 <MyWrapper_xQueueGiveFromISR+0x15c>
 8010c3e:	b9af      	cbnz	r7, 8010c6c <MyWrapper_xQueueGiveFromISR+0x154>
 8010c40:	4620      	mov	r0, r4
 8010c42:	f7f3 fe2f 	bl	80048a4 <prvTraceGetQueueType>
 8010c46:	f818 5000 	ldrb.w	r5, [r8, r0]
 8010c4a:	3558      	adds	r5, #88	; 0x58
 8010c4c:	b2ed      	uxtb	r5, r5
 8010c4e:	4620      	mov	r0, r4
 8010c50:	f7f3 fe28 	bl	80048a4 <prvTraceGetQueueType>
 8010c54:	f818 7000 	ldrb.w	r7, [r8, r0]
 8010c58:	4620      	mov	r0, r4
 8010c5a:	f7f3 fe4a 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8010c5e:	4639      	mov	r1, r7
 8010c60:	b2c2      	uxtb	r2, r0
 8010c62:	4628      	mov	r0, r5
 8010c64:	f7f4 fcbc 	bl	80055e0 <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 8010c68:	2000      	movs	r0, #0
 8010c6a:	e7d6      	b.n	8010c1a <MyWrapper_xQueueGiveFromISR+0x102>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8010c6c:	255d      	movs	r5, #93	; 0x5d
 8010c6e:	e7ee      	b.n	8010c4e <MyWrapper_xQueueGiveFromISR+0x136>
 8010c70:	24000010 	.word	0x24000010
 8010c74:	24000008 	.word	0x24000008

08010c78 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 8010c78:	2200      	movs	r2, #0
 8010c7a:	f7ff bf4d 	b.w	8010b18 <MyWrapper_xQueueGiveFromISR>
	...

08010c80 <xQueueReceive>:
{
 8010c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c84:	4688      	mov	r8, r1
 8010c86:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010c88:	4604      	mov	r4, r0
 8010c8a:	b940      	cbnz	r0, 8010c9e <xQueueReceive+0x1e>
	__asm volatile
 8010c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c90:	f383 8811 	msr	BASEPRI, r3
 8010c94:	f3bf 8f6f 	isb	sy
 8010c98:	f3bf 8f4f 	dsb	sy
 8010c9c:	e7fe      	b.n	8010c9c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c9e:	b951      	cbnz	r1, 8010cb6 <xQueueReceive+0x36>
 8010ca0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010ca2:	b143      	cbz	r3, 8010cb6 <xQueueReceive+0x36>
 8010ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca8:	f383 8811 	msr	BASEPRI, r3
 8010cac:	f3bf 8f6f 	isb	sy
 8010cb0:	f3bf 8f4f 	dsb	sy
 8010cb4:	e7fe      	b.n	8010cb4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010cb6:	f001 fa49 	bl	801214c <xTaskGetSchedulerState>
 8010cba:	b950      	cbnz	r0, 8010cd2 <xQueueReceive+0x52>
 8010cbc:	9e01      	ldr	r6, [sp, #4]
 8010cbe:	b14e      	cbz	r6, 8010cd4 <xQueueReceive+0x54>
 8010cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc4:	f383 8811 	msr	BASEPRI, r3
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	f3bf 8f4f 	dsb	sy
 8010cd0:	e7fe      	b.n	8010cd0 <xQueueReceive+0x50>
 8010cd2:	2600      	movs	r6, #0
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8010cd4:	4f96      	ldr	r7, [pc, #600]	; (8010f30 <xQueueReceive+0x2b0>)
					portYIELD_WITHIN_API();
 8010cd6:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8010f38 <xQueueReceive+0x2b8>
 8010cda:	e09b      	b.n	8010e14 <xQueueReceive+0x194>
				traceQUEUE_RECEIVE( pxQueue );
 8010cdc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010cde:	3a01      	subs	r2, #1
 8010ce0:	b2d2      	uxtb	r2, r2
 8010ce2:	e0d8      	b.n	8010e96 <xQueueReceive+0x216>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ce4:	9d01      	ldr	r5, [sp, #4]
 8010ce6:	bb2d      	cbnz	r5, 8010d34 <xQueueReceive+0xb4>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8010ce8:	4e91      	ldr	r6, [pc, #580]	; (8010f30 <xQueueReceive+0x2b0>)
					taskEXIT_CRITICAL();
 8010cea:	f001 fe35 	bl	8012958 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8010cee:	f7f3 fe79 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8010cf2:	f7f3 fdde 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8010cf6:	8833      	ldrh	r3, [r6, #0]
 8010cf8:	4218      	tst	r0, r3
 8010cfa:	d101      	bne.n	8010d00 <xQueueReceive+0x80>
				return errQUEUE_EMPTY;
 8010cfc:	2000      	movs	r0, #0
 8010cfe:	e0e2      	b.n	8010ec6 <xQueueReceive+0x246>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8010d00:	4620      	mov	r0, r4
 8010d02:	f7f3 fdfb 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 8010d06:	8833      	ldrh	r3, [r6, #0]
 8010d08:	4218      	tst	r0, r3
 8010d0a:	d0f7      	beq.n	8010cfc <xQueueReceive+0x7c>
 8010d0c:	4f89      	ldr	r7, [pc, #548]	; (8010f34 <xQueueReceive+0x2b4>)
 8010d0e:	4620      	mov	r0, r4
 8010d10:	f7f3 fdc8 	bl	80048a4 <prvTraceGetQueueType>
 8010d14:	5c3e      	ldrb	r6, [r7, r0]
 8010d16:	4620      	mov	r0, r4
 8010d18:	f7f3 fdc4 	bl	80048a4 <prvTraceGetQueueType>
 8010d1c:	5c3f      	ldrb	r7, [r7, r0]
 8010d1e:	3650      	adds	r6, #80	; 0x50
 8010d20:	4620      	mov	r0, r4
 8010d22:	f7f3 fde6 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8010d26:	4639      	mov	r1, r7
 8010d28:	b2f6      	uxtb	r6, r6
 8010d2a:	b2c2      	uxtb	r2, r0
 8010d2c:	4630      	mov	r0, r6
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8010d2e:	f7f4 fc57 	bl	80055e0 <prvTraceStoreKernelCall>
 8010d32:	e7e3      	b.n	8010cfc <xQueueReceive+0x7c>
				else if( xEntryTimeSet == pdFALSE )
 8010d34:	b916      	cbnz	r6, 8010d3c <xQueueReceive+0xbc>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010d36:	a802      	add	r0, sp, #8
 8010d38:	f001 f99e 	bl	8012078 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010d3c:	f001 fe0c 	bl	8012958 <vPortExitCritical>
		vTaskSuspendAll();
 8010d40:	f000 fe92 	bl	8011a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d44:	f001 fde6 	bl	8012914 <vPortEnterCritical>
 8010d48:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010d4c:	2bff      	cmp	r3, #255	; 0xff
 8010d4e:	d102      	bne.n	8010d56 <xQueueReceive+0xd6>
 8010d50:	2300      	movs	r3, #0
 8010d52:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010d56:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010d5a:	2bff      	cmp	r3, #255	; 0xff
 8010d5c:	d102      	bne.n	8010d64 <xQueueReceive+0xe4>
 8010d5e:	2300      	movs	r3, #0
 8010d60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010d64:	f001 fdf8 	bl	8012958 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010d68:	a901      	add	r1, sp, #4
 8010d6a:	a802      	add	r0, sp, #8
 8010d6c:	f001 f990 	bl	8012090 <xTaskCheckForTimeOut>
 8010d70:	2800      	cmp	r0, #0
 8010d72:	f040 80b1 	bne.w	8010ed8 <xQueueReceive+0x258>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010d76:	4620      	mov	r0, r4
 8010d78:	f7ff fa76 	bl	8010268 <prvIsQueueEmpty>
 8010d7c:	2800      	cmp	r0, #0
 8010d7e:	f000 80a5 	beq.w	8010ecc <xQueueReceive+0x24c>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8010d82:	f7f3 fe2f 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8010d86:	4e6b      	ldr	r6, [pc, #428]	; (8010f34 <xQueueReceive+0x2b4>)
 8010d88:	f7f3 fd93 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8010d8c:	883b      	ldrh	r3, [r7, #0]
 8010d8e:	4218      	tst	r0, r3
 8010d90:	d018      	beq.n	8010dc4 <xQueueReceive+0x144>
 8010d92:	4620      	mov	r0, r4
 8010d94:	f7f3 fdb2 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 8010d98:	883b      	ldrh	r3, [r7, #0]
 8010d9a:	4218      	tst	r0, r3
 8010d9c:	d012      	beq.n	8010dc4 <xQueueReceive+0x144>
 8010d9e:	4620      	mov	r0, r4
 8010da0:	f7f3 fd80 	bl	80048a4 <prvTraceGetQueueType>
 8010da4:	5c35      	ldrb	r5, [r6, r0]
 8010da6:	4620      	mov	r0, r4
 8010da8:	3568      	adds	r5, #104	; 0x68
 8010daa:	f7f3 fd7b 	bl	80048a4 <prvTraceGetQueueType>
 8010dae:	f816 a000 	ldrb.w	sl, [r6, r0]
 8010db2:	4620      	mov	r0, r4
 8010db4:	b2ed      	uxtb	r5, r5
 8010db6:	f7f3 fd9c 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8010dba:	4651      	mov	r1, sl
 8010dbc:	b2c2      	uxtb	r2, r0
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	f7f4 fc0e 	bl	80055e0 <prvTraceStoreKernelCall>
 8010dc4:	4620      	mov	r0, r4
 8010dc6:	f7f3 fd6d 	bl	80048a4 <prvTraceGetQueueType>
 8010dca:	5c33      	ldrb	r3, [r6, r0]
 8010dcc:	2b02      	cmp	r3, #2
 8010dce:	d00d      	beq.n	8010dec <xQueueReceive+0x16c>
 8010dd0:	f7f3 fe08 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8010dd4:	f7f3 fd6d 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8010dd8:	883b      	ldrh	r3, [r7, #0]
 8010dda:	4218      	tst	r0, r3
 8010ddc:	d006      	beq.n	8010dec <xQueueReceive+0x16c>
 8010dde:	f7f3 fe01 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8010de2:	f7f3 fd61 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8010de6:	b2c0      	uxtb	r0, r0
 8010de8:	f7f4 f932 	bl	8005050 <prvTraceSetTaskInstanceFinished>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010dec:	9901      	ldr	r1, [sp, #4]
 8010dee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010df2:	f001 f893 	bl	8011f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010df6:	4620      	mov	r0, r4
 8010df8:	f7ff fa89 	bl	801030e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010dfc:	f000 fefe 	bl	8011bfc <xTaskResumeAll>
 8010e00:	b938      	cbnz	r0, 8010e12 <xQueueReceive+0x192>
					portYIELD_WITHIN_API();
 8010e02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010e06:	f8c9 3000 	str.w	r3, [r9]
 8010e0a:	f3bf 8f4f 	dsb	sy
 8010e0e:	f3bf 8f6f 	isb	sy
 8010e12:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8010e14:	f001 fd7e 	bl	8012914 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e18:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e1a:	2d00      	cmp	r5, #0
 8010e1c:	f43f af62 	beq.w	8010ce4 <xQueueReceive+0x64>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010e20:	4641      	mov	r1, r8
 8010e22:	4620      	mov	r0, r4
				traceQUEUE_RECEIVE( pxQueue );
 8010e24:	4e42      	ldr	r6, [pc, #264]	; (8010f30 <xQueueReceive+0x2b0>)
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010e26:	f7ff fa5d 	bl	80102e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8010e2a:	f7f3 fddb 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8010e2e:	4f41      	ldr	r7, [pc, #260]	; (8010f34 <xQueueReceive+0x2b4>)
 8010e30:	f7f3 fd3f 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8010e34:	8833      	ldrh	r3, [r6, #0]
 8010e36:	4218      	tst	r0, r3
 8010e38:	d018      	beq.n	8010e6c <xQueueReceive+0x1ec>
 8010e3a:	4620      	mov	r0, r4
 8010e3c:	f7f3 fd5e 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 8010e40:	8833      	ldrh	r3, [r6, #0]
 8010e42:	4218      	tst	r0, r3
 8010e44:	d012      	beq.n	8010e6c <xQueueReceive+0x1ec>
 8010e46:	4620      	mov	r0, r4
 8010e48:	f7f3 fd2c 	bl	80048a4 <prvTraceGetQueueType>
 8010e4c:	5c3e      	ldrb	r6, [r7, r0]
 8010e4e:	4620      	mov	r0, r4
 8010e50:	3628      	adds	r6, #40	; 0x28
 8010e52:	f7f3 fd27 	bl	80048a4 <prvTraceGetQueueType>
 8010e56:	f817 8000 	ldrb.w	r8, [r7, r0]
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	b2f6      	uxtb	r6, r6
 8010e5e:	f7f3 fd48 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8010e62:	4641      	mov	r1, r8
 8010e64:	b2c2      	uxtb	r2, r0
 8010e66:	4630      	mov	r0, r6
 8010e68:	f7f4 fbba 	bl	80055e0 <prvTraceStoreKernelCall>
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	f7f3 fd19 	bl	80048a4 <prvTraceGetQueueType>
 8010e72:	5c3e      	ldrb	r6, [r7, r0]
 8010e74:	4620      	mov	r0, r4
 8010e76:	f7f3 fd3c 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8010e7a:	fa5f f880 	uxtb.w	r8, r0
 8010e7e:	4620      	mov	r0, r4
 8010e80:	f7f3 fd10 	bl	80048a4 <prvTraceGetQueueType>
 8010e84:	5c3b      	ldrb	r3, [r7, r0]
 8010e86:	2b02      	cmp	r3, #2
 8010e88:	f47f af28 	bne.w	8010cdc <xQueueReceive+0x5c>
 8010e8c:	f7f3 fdaa 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8010e90:	f7f3 fd0a 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8010e94:	b2c2      	uxtb	r2, r0
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010e96:	3d01      	subs	r5, #1
				traceQUEUE_RECEIVE( pxQueue );
 8010e98:	4641      	mov	r1, r8
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	f7f4 f8b2 	bl	8005004 <prvTraceSetObjectState>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010ea0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ea2:	6923      	ldr	r3, [r4, #16]
 8010ea4:	b163      	cbz	r3, 8010ec0 <xQueueReceive+0x240>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ea6:	f104 0010 	add.w	r0, r4, #16
 8010eaa:	f001 f895 	bl	8011fd8 <xTaskRemoveFromEventList>
 8010eae:	b138      	cbz	r0, 8010ec0 <xQueueReceive+0x240>
						queueYIELD_IF_USING_PREEMPTION();
 8010eb0:	4b21      	ldr	r3, [pc, #132]	; (8010f38 <xQueueReceive+0x2b8>)
 8010eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010eb6:	601a      	str	r2, [r3, #0]
 8010eb8:	f3bf 8f4f 	dsb	sy
 8010ebc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010ec0:	f001 fd4a 	bl	8012958 <vPortExitCritical>
				return pdPASS;
 8010ec4:	2001      	movs	r0, #1
}
 8010ec6:	b004      	add	sp, #16
 8010ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8010ecc:	4620      	mov	r0, r4
 8010ece:	f7ff fa1e 	bl	801030e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ed2:	f000 fe93 	bl	8011bfc <xTaskResumeAll>
 8010ed6:	e79c      	b.n	8010e12 <xQueueReceive+0x192>
			prvUnlockQueue( pxQueue );
 8010ed8:	4620      	mov	r0, r4
 8010eda:	f7ff fa18 	bl	801030e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ede:	f000 fe8d 	bl	8011bfc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	f7ff f9c0 	bl	8010268 <prvIsQueueEmpty>
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	d092      	beq.n	8010e12 <xQueueReceive+0x192>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8010eec:	4d10      	ldr	r5, [pc, #64]	; (8010f30 <xQueueReceive+0x2b0>)
 8010eee:	f7f3 fd79 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8010ef2:	f7f3 fcde 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8010ef6:	882b      	ldrh	r3, [r5, #0]
 8010ef8:	4218      	tst	r0, r3
 8010efa:	f43f aeff 	beq.w	8010cfc <xQueueReceive+0x7c>
 8010efe:	4620      	mov	r0, r4
 8010f00:	f7f3 fcfc 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 8010f04:	882b      	ldrh	r3, [r5, #0]
 8010f06:	4218      	tst	r0, r3
 8010f08:	f43f aef8 	beq.w	8010cfc <xQueueReceive+0x7c>
 8010f0c:	4e09      	ldr	r6, [pc, #36]	; (8010f34 <xQueueReceive+0x2b4>)
 8010f0e:	4620      	mov	r0, r4
 8010f10:	f7f3 fcc8 	bl	80048a4 <prvTraceGetQueueType>
 8010f14:	5c35      	ldrb	r5, [r6, r0]
 8010f16:	4620      	mov	r0, r4
 8010f18:	f7f3 fcc4 	bl	80048a4 <prvTraceGetQueueType>
 8010f1c:	5c36      	ldrb	r6, [r6, r0]
 8010f1e:	3550      	adds	r5, #80	; 0x50
 8010f20:	4620      	mov	r0, r4
 8010f22:	f7f3 fce6 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8010f26:	4631      	mov	r1, r6
 8010f28:	b2ed      	uxtb	r5, r5
 8010f2a:	b2c2      	uxtb	r2, r0
 8010f2c:	4628      	mov	r0, r5
 8010f2e:	e6fe      	b.n	8010d2e <xQueueReceive+0xae>
 8010f30:	24000010 	.word	0x24000010
 8010f34:	24000008 	.word	0x24000008
 8010f38:	e000ed04 	.word	0xe000ed04

08010f3c <xQueueSemaphoreTake>:
{
 8010f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	configASSERT( ( pxQueue ) );
 8010f40:	4604      	mov	r4, r0
{
 8010f42:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010f44:	b940      	cbnz	r0, 8010f58 <xQueueSemaphoreTake+0x1c>
 8010f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f4a:	f383 8811 	msr	BASEPRI, r3
 8010f4e:	f3bf 8f6f 	isb	sy
 8010f52:	f3bf 8f4f 	dsb	sy
 8010f56:	e7fe      	b.n	8010f56 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8010f58:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8010f5a:	b145      	cbz	r5, 8010f6e <xQueueSemaphoreTake+0x32>
 8010f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f60:	f383 8811 	msr	BASEPRI, r3
 8010f64:	f3bf 8f6f 	isb	sy
 8010f68:	f3bf 8f4f 	dsb	sy
 8010f6c:	e7fe      	b.n	8010f6c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f6e:	f001 f8ed 	bl	801214c <xTaskGetSchedulerState>
 8010f72:	b950      	cbnz	r0, 8010f8a <xQueueSemaphoreTake+0x4e>
 8010f74:	9d01      	ldr	r5, [sp, #4]
 8010f76:	b145      	cbz	r5, 8010f8a <xQueueSemaphoreTake+0x4e>
 8010f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f7c:	f383 8811 	msr	BASEPRI, r3
 8010f80:	f3bf 8f6f 	isb	sy
 8010f84:	f3bf 8f4f 	dsb	sy
 8010f88:	e7fe      	b.n	8010f88 <xQueueSemaphoreTake+0x4c>
 8010f8a:	46a9      	mov	r9, r5
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8010f8c:	4fac      	ldr	r7, [pc, #688]	; (8011240 <xQueueSemaphoreTake+0x304>)
					portYIELD_WITHIN_API();
 8010f8e:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8011248 <xQueueSemaphoreTake+0x30c>
 8010f92:	e0b5      	b.n	8011100 <xQueueSemaphoreTake+0x1c4>
				traceQUEUE_RECEIVE( pxQueue );
 8010f94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010f96:	3a01      	subs	r2, #1
 8010f98:	b2d2      	uxtb	r2, r2
 8010f9a:	e0ee      	b.n	801117a <xQueueSemaphoreTake+0x23e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010f9c:	9b01      	ldr	r3, [sp, #4]
 8010f9e:	bb7b      	cbnz	r3, 8011000 <xQueueSemaphoreTake+0xc4>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010fa0:	b145      	cbz	r5, 8010fb4 <xQueueSemaphoreTake+0x78>
 8010fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa6:	f383 8811 	msr	BASEPRI, r3
 8010faa:	f3bf 8f6f 	isb	sy
 8010fae:	f3bf 8f4f 	dsb	sy
 8010fb2:	e7fe      	b.n	8010fb2 <xQueueSemaphoreTake+0x76>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8010fb4:	4ea2      	ldr	r6, [pc, #648]	; (8011240 <xQueueSemaphoreTake+0x304>)
					taskEXIT_CRITICAL();
 8010fb6:	f001 fccf 	bl	8012958 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8010fba:	f7f3 fd13 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8010fbe:	f7f3 fc78 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8010fc2:	8833      	ldrh	r3, [r6, #0]
 8010fc4:	4218      	tst	r0, r3
 8010fc6:	d101      	bne.n	8010fcc <xQueueSemaphoreTake+0x90>
				return errQUEUE_EMPTY;
 8010fc8:	2500      	movs	r5, #0
 8010fca:	e0f3      	b.n	80111b4 <xQueueSemaphoreTake+0x278>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8010fcc:	4620      	mov	r0, r4
 8010fce:	f7f3 fc95 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 8010fd2:	8833      	ldrh	r3, [r6, #0]
 8010fd4:	4218      	tst	r0, r3
 8010fd6:	d0f7      	beq.n	8010fc8 <xQueueSemaphoreTake+0x8c>
 8010fd8:	4f9a      	ldr	r7, [pc, #616]	; (8011244 <xQueueSemaphoreTake+0x308>)
 8010fda:	4620      	mov	r0, r4
 8010fdc:	f7f3 fc62 	bl	80048a4 <prvTraceGetQueueType>
 8010fe0:	5c3e      	ldrb	r6, [r7, r0]
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	f7f3 fc5e 	bl	80048a4 <prvTraceGetQueueType>
 8010fe8:	5c3f      	ldrb	r7, [r7, r0]
 8010fea:	3650      	adds	r6, #80	; 0x50
 8010fec:	4620      	mov	r0, r4
 8010fee:	f7f3 fc80 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8010ff2:	4639      	mov	r1, r7
 8010ff4:	b2f6      	uxtb	r6, r6
 8010ff6:	b2c2      	uxtb	r2, r0
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	f7f4 faf1 	bl	80055e0 <prvTraceStoreKernelCall>
 8010ffe:	e0d9      	b.n	80111b4 <xQueueSemaphoreTake+0x278>
				else if( xEntryTimeSet == pdFALSE )
 8011000:	f1b9 0f00 	cmp.w	r9, #0
 8011004:	d102      	bne.n	801100c <xQueueSemaphoreTake+0xd0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011006:	a802      	add	r0, sp, #8
 8011008:	f001 f836 	bl	8012078 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801100c:	f001 fca4 	bl	8012958 <vPortExitCritical>
		vTaskSuspendAll();
 8011010:	f000 fd2a 	bl	8011a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011014:	f001 fc7e 	bl	8012914 <vPortEnterCritical>
 8011018:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801101c:	2bff      	cmp	r3, #255	; 0xff
 801101e:	d102      	bne.n	8011026 <xQueueSemaphoreTake+0xea>
 8011020:	2300      	movs	r3, #0
 8011022:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011026:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801102a:	2bff      	cmp	r3, #255	; 0xff
 801102c:	d102      	bne.n	8011034 <xQueueSemaphoreTake+0xf8>
 801102e:	2300      	movs	r3, #0
 8011030:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011034:	f001 fc90 	bl	8012958 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011038:	a901      	add	r1, sp, #4
 801103a:	a802      	add	r0, sp, #8
 801103c:	f001 f828 	bl	8012090 <xTaskCheckForTimeOut>
 8011040:	2800      	cmp	r0, #0
 8011042:	f040 80c1 	bne.w	80111c8 <xQueueSemaphoreTake+0x28c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011046:	4620      	mov	r0, r4
 8011048:	f7ff f90e 	bl	8010268 <prvIsQueueEmpty>
 801104c:	2800      	cmp	r0, #0
 801104e:	f000 80b5 	beq.w	80111bc <xQueueSemaphoreTake+0x280>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8011052:	f7f3 fcc7 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8011056:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8011244 <xQueueSemaphoreTake+0x308>
 801105a:	f7f3 fc2a 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 801105e:	883b      	ldrh	r3, [r7, #0]
 8011060:	4218      	tst	r0, r3
 8011062:	d019      	beq.n	8011098 <xQueueSemaphoreTake+0x15c>
 8011064:	4620      	mov	r0, r4
 8011066:	f7f3 fc49 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 801106a:	883b      	ldrh	r3, [r7, #0]
 801106c:	4218      	tst	r0, r3
 801106e:	d013      	beq.n	8011098 <xQueueSemaphoreTake+0x15c>
 8011070:	4620      	mov	r0, r4
 8011072:	f7f3 fc17 	bl	80048a4 <prvTraceGetQueueType>
 8011076:	f819 6000 	ldrb.w	r6, [r9, r0]
 801107a:	4620      	mov	r0, r4
 801107c:	3668      	adds	r6, #104	; 0x68
 801107e:	f7f3 fc11 	bl	80048a4 <prvTraceGetQueueType>
 8011082:	f819 a000 	ldrb.w	sl, [r9, r0]
 8011086:	4620      	mov	r0, r4
 8011088:	b2f6      	uxtb	r6, r6
 801108a:	f7f3 fc32 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 801108e:	4651      	mov	r1, sl
 8011090:	b2c2      	uxtb	r2, r0
 8011092:	4630      	mov	r0, r6
 8011094:	f7f4 faa4 	bl	80055e0 <prvTraceStoreKernelCall>
 8011098:	4620      	mov	r0, r4
 801109a:	f7f3 fc03 	bl	80048a4 <prvTraceGetQueueType>
 801109e:	f819 3000 	ldrb.w	r3, [r9, r0]
 80110a2:	2b02      	cmp	r3, #2
 80110a4:	d00d      	beq.n	80110c2 <xQueueSemaphoreTake+0x186>
 80110a6:	f7f3 fc9d 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 80110aa:	f7f3 fc02 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 80110ae:	883b      	ldrh	r3, [r7, #0]
 80110b0:	4218      	tst	r0, r3
 80110b2:	d006      	beq.n	80110c2 <xQueueSemaphoreTake+0x186>
 80110b4:	f7f3 fc96 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 80110b8:	f7f3 fbf6 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 80110bc:	b2c0      	uxtb	r0, r0
 80110be:	f7f3 ffc7 	bl	8005050 <prvTraceSetTaskInstanceFinished>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80110c2:	6823      	ldr	r3, [r4, #0]
 80110c4:	b93b      	cbnz	r3, 80110d6 <xQueueSemaphoreTake+0x19a>
						taskENTER_CRITICAL();
 80110c6:	f001 fc25 	bl	8012914 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80110ca:	68a0      	ldr	r0, [r4, #8]
 80110cc:	f001 f84e 	bl	801216c <xTaskPriorityInherit>
 80110d0:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80110d2:	f001 fc41 	bl	8012958 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80110d6:	9901      	ldr	r1, [sp, #4]
 80110d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80110dc:	f000 ff1e 	bl	8011f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80110e0:	4620      	mov	r0, r4
 80110e2:	f7ff f914 	bl	801030e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80110e6:	f000 fd89 	bl	8011bfc <xTaskResumeAll>
 80110ea:	b938      	cbnz	r0, 80110fc <xQueueSemaphoreTake+0x1c0>
					portYIELD_WITHIN_API();
 80110ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80110f0:	f8c8 3000 	str.w	r3, [r8]
 80110f4:	f3bf 8f4f 	dsb	sy
 80110f8:	f3bf 8f6f 	isb	sy
 80110fc:	f04f 0901 	mov.w	r9, #1
		taskENTER_CRITICAL();
 8011100:	f001 fc08 	bl	8012914 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011104:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011106:	2e00      	cmp	r6, #0
 8011108:	f43f af48 	beq.w	8010f9c <xQueueSemaphoreTake+0x60>
				traceQUEUE_RECEIVE( pxQueue );
 801110c:	4d4c      	ldr	r5, [pc, #304]	; (8011240 <xQueueSemaphoreTake+0x304>)
 801110e:	f7f3 fc69 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8011112:	f7f3 fbce 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8011116:	4f4b      	ldr	r7, [pc, #300]	; (8011244 <xQueueSemaphoreTake+0x308>)
 8011118:	882b      	ldrh	r3, [r5, #0]
 801111a:	4218      	tst	r0, r3
 801111c:	d018      	beq.n	8011150 <xQueueSemaphoreTake+0x214>
 801111e:	4620      	mov	r0, r4
 8011120:	f7f3 fbec 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 8011124:	882b      	ldrh	r3, [r5, #0]
 8011126:	4218      	tst	r0, r3
 8011128:	d012      	beq.n	8011150 <xQueueSemaphoreTake+0x214>
 801112a:	4620      	mov	r0, r4
 801112c:	f7f3 fbba 	bl	80048a4 <prvTraceGetQueueType>
 8011130:	5c3d      	ldrb	r5, [r7, r0]
 8011132:	4620      	mov	r0, r4
 8011134:	3528      	adds	r5, #40	; 0x28
 8011136:	f7f3 fbb5 	bl	80048a4 <prvTraceGetQueueType>
 801113a:	f817 8000 	ldrb.w	r8, [r7, r0]
 801113e:	4620      	mov	r0, r4
 8011140:	b2ed      	uxtb	r5, r5
 8011142:	f7f3 fbd6 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8011146:	4641      	mov	r1, r8
 8011148:	b2c2      	uxtb	r2, r0
 801114a:	4628      	mov	r0, r5
 801114c:	f7f4 fa48 	bl	80055e0 <prvTraceStoreKernelCall>
 8011150:	4620      	mov	r0, r4
 8011152:	f7f3 fba7 	bl	80048a4 <prvTraceGetQueueType>
 8011156:	5c3d      	ldrb	r5, [r7, r0]
 8011158:	4620      	mov	r0, r4
 801115a:	f7f3 fbca 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 801115e:	fa5f f880 	uxtb.w	r8, r0
 8011162:	4620      	mov	r0, r4
 8011164:	f7f3 fb9e 	bl	80048a4 <prvTraceGetQueueType>
 8011168:	5c3b      	ldrb	r3, [r7, r0]
 801116a:	2b02      	cmp	r3, #2
 801116c:	f47f af12 	bne.w	8010f94 <xQueueSemaphoreTake+0x58>
 8011170:	f7f3 fc38 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8011174:	f7f3 fb98 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8011178:	b2c2      	uxtb	r2, r0
 801117a:	4641      	mov	r1, r8
 801117c:	4628      	mov	r0, r5
 801117e:	f7f3 ff41 	bl	8005004 <prvTraceSetObjectState>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011182:	3e01      	subs	r6, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011184:	6823      	ldr	r3, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011186:	63a6      	str	r6, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011188:	b913      	cbnz	r3, 8011190 <xQueueSemaphoreTake+0x254>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801118a:	f001 f955 	bl	8012438 <pvTaskIncrementMutexHeldCount>
 801118e:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011190:	6923      	ldr	r3, [r4, #16]
 8011192:	b163      	cbz	r3, 80111ae <xQueueSemaphoreTake+0x272>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011194:	f104 0010 	add.w	r0, r4, #16
 8011198:	f000 ff1e 	bl	8011fd8 <xTaskRemoveFromEventList>
 801119c:	b138      	cbz	r0, 80111ae <xQueueSemaphoreTake+0x272>
						queueYIELD_IF_USING_PREEMPTION();
 801119e:	4b2a      	ldr	r3, [pc, #168]	; (8011248 <xQueueSemaphoreTake+0x30c>)
 80111a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111a4:	601a      	str	r2, [r3, #0]
 80111a6:	f3bf 8f4f 	dsb	sy
 80111aa:	f3bf 8f6f 	isb	sy
				return pdPASS;
 80111ae:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 80111b0:	f001 fbd2 	bl	8012958 <vPortExitCritical>
}
 80111b4:	4628      	mov	r0, r5
 80111b6:	b004      	add	sp, #16
 80111b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80111bc:	4620      	mov	r0, r4
 80111be:	f7ff f8a6 	bl	801030e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80111c2:	f000 fd1b 	bl	8011bfc <xTaskResumeAll>
 80111c6:	e799      	b.n	80110fc <xQueueSemaphoreTake+0x1c0>
			prvUnlockQueue( pxQueue );
 80111c8:	4620      	mov	r0, r4
 80111ca:	f7ff f8a0 	bl	801030e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80111ce:	f000 fd15 	bl	8011bfc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80111d2:	4620      	mov	r0, r4
 80111d4:	f7ff f848 	bl	8010268 <prvIsQueueEmpty>
 80111d8:	2800      	cmp	r0, #0
 80111da:	d08f      	beq.n	80110fc <xQueueSemaphoreTake+0x1c0>
					if( xInheritanceOccurred != pdFALSE )
 80111dc:	b165      	cbz	r5, 80111f8 <xQueueSemaphoreTake+0x2bc>
						taskENTER_CRITICAL();
 80111de:	f001 fb99 	bl	8012914 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80111e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80111e4:	b119      	cbz	r1, 80111ee <xQueueSemaphoreTake+0x2b2>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80111e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80111e8:	6819      	ldr	r1, [r3, #0]
 80111ea:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80111ee:	68a0      	ldr	r0, [r4, #8]
 80111f0:	f001 f8a4 	bl	801233c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80111f4:	f001 fbb0 	bl	8012958 <vPortExitCritical>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80111f8:	4d11      	ldr	r5, [pc, #68]	; (8011240 <xQueueSemaphoreTake+0x304>)
 80111fa:	f7f3 fbf3 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 80111fe:	f7f3 fb58 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8011202:	882b      	ldrh	r3, [r5, #0]
 8011204:	4218      	tst	r0, r3
 8011206:	f43f aedf 	beq.w	8010fc8 <xQueueSemaphoreTake+0x8c>
 801120a:	4620      	mov	r0, r4
 801120c:	f7f3 fb76 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 8011210:	882b      	ldrh	r3, [r5, #0]
 8011212:	4218      	tst	r0, r3
 8011214:	f43f aed8 	beq.w	8010fc8 <xQueueSemaphoreTake+0x8c>
 8011218:	4e0a      	ldr	r6, [pc, #40]	; (8011244 <xQueueSemaphoreTake+0x308>)
 801121a:	4620      	mov	r0, r4
 801121c:	f7f3 fb42 	bl	80048a4 <prvTraceGetQueueType>
 8011220:	5c35      	ldrb	r5, [r6, r0]
 8011222:	4620      	mov	r0, r4
 8011224:	f7f3 fb3e 	bl	80048a4 <prvTraceGetQueueType>
 8011228:	5c36      	ldrb	r6, [r6, r0]
 801122a:	3550      	adds	r5, #80	; 0x50
 801122c:	4620      	mov	r0, r4
 801122e:	f7f3 fb60 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8011232:	4631      	mov	r1, r6
 8011234:	b2ed      	uxtb	r5, r5
 8011236:	b2c2      	uxtb	r2, r0
 8011238:	4628      	mov	r0, r5
 801123a:	f7f4 f9d1 	bl	80055e0 <prvTraceStoreKernelCall>
 801123e:	e6c3      	b.n	8010fc8 <xQueueSemaphoreTake+0x8c>
 8011240:	24000010 	.word	0x24000010
 8011244:	24000008 	.word	0x24000008
 8011248:	e000ed04 	.word	0xe000ed04

0801124c <xQueueTakeMutexRecursive>:
	{
 801124c:	b570      	push	{r4, r5, r6, lr}
 801124e:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 8011250:	4604      	mov	r4, r0
 8011252:	b940      	cbnz	r0, 8011266 <xQueueTakeMutexRecursive+0x1a>
 8011254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011258:	f383 8811 	msr	BASEPRI, r3
 801125c:	f3bf 8f6f 	isb	sy
 8011260:	f3bf 8f4f 	dsb	sy
 8011264:	e7fe      	b.n	8011264 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011266:	6886      	ldr	r6, [r0, #8]
 8011268:	f000 ff6a 	bl	8012140 <xTaskGetCurrentTaskHandle>
 801126c:	4286      	cmp	r6, r0
 801126e:	d104      	bne.n	801127a <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011270:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8011272:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011274:	3301      	adds	r3, #1
 8011276:	60e3      	str	r3, [r4, #12]
	}
 8011278:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801127a:	4629      	mov	r1, r5
 801127c:	4620      	mov	r0, r4
 801127e:	f7ff fe5d 	bl	8010f3c <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8011282:	2800      	cmp	r0, #0
 8011284:	d0f8      	beq.n	8011278 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011286:	68e3      	ldr	r3, [r4, #12]
 8011288:	3301      	adds	r3, #1
 801128a:	60e3      	str	r3, [r4, #12]
		return xReturn;
 801128c:	e7f4      	b.n	8011278 <xQueueTakeMutexRecursive+0x2c>
	...

08011290 <xQueueReceiveFromISR>:
{
 8011290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011294:	468b      	mov	fp, r1
 8011296:	4692      	mov	sl, r2
	configASSERT( pxQueue );
 8011298:	4604      	mov	r4, r0
 801129a:	b940      	cbnz	r0, 80112ae <xQueueReceiveFromISR+0x1e>
 801129c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a0:	f383 8811 	msr	BASEPRI, r3
 80112a4:	f3bf 8f6f 	isb	sy
 80112a8:	f3bf 8f4f 	dsb	sy
 80112ac:	e7fe      	b.n	80112ac <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80112ae:	b951      	cbnz	r1, 80112c6 <xQueueReceiveFromISR+0x36>
 80112b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80112b2:	b143      	cbz	r3, 80112c6 <xQueueReceiveFromISR+0x36>
 80112b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112b8:	f383 8811 	msr	BASEPRI, r3
 80112bc:	f3bf 8f6f 	isb	sy
 80112c0:	f3bf 8f4f 	dsb	sy
 80112c4:	e7fe      	b.n	80112c4 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80112c6:	f001 fc41 	bl	8012b4c <vPortValidateInterruptPriority>
	__asm volatile
 80112ca:	f3ef 8611 	mrs	r6, BASEPRI
 80112ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d2:	f383 8811 	msr	BASEPRI, r3
 80112d6:	f3bf 8f6f 	isb	sy
 80112da:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112de:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 80112e0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80113d0 <xQueueReceiveFromISR+0x140>
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80112e4:	2f00      	cmp	r7, #0
 80112e6:	d053      	beq.n	8011390 <xQueueReceiveFromISR+0x100>
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 80112e8:	4620      	mov	r0, r4
			const int8_t cRxLock = pxQueue->cRxLock;
 80112ea:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 80112ee:	f7f3 fb05 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 80112f2:	f8b8 3000 	ldrh.w	r3, [r8]
			const int8_t cRxLock = pxQueue->cRxLock;
 80112f6:	b26d      	sxtb	r5, r5
 80112f8:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80113d4 <xQueueReceiveFromISR+0x144>
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 80112fc:	4218      	tst	r0, r3
 80112fe:	d016      	beq.n	801132e <xQueueReceiveFromISR+0x9e>
 8011300:	4620      	mov	r0, r4
 8011302:	f7f3 facf 	bl	80048a4 <prvTraceGetQueueType>
 8011306:	f819 8000 	ldrb.w	r8, [r9, r0]
 801130a:	4620      	mov	r0, r4
 801130c:	f108 0838 	add.w	r8, r8, #56	; 0x38
 8011310:	f7f3 fac8 	bl	80048a4 <prvTraceGetQueueType>
 8011314:	f819 1000 	ldrb.w	r1, [r9, r0]
 8011318:	4620      	mov	r0, r4
 801131a:	fa5f f888 	uxtb.w	r8, r8
 801131e:	9101      	str	r1, [sp, #4]
 8011320:	f7f3 fae7 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8011324:	9901      	ldr	r1, [sp, #4]
 8011326:	b2c2      	uxtb	r2, r0
 8011328:	4640      	mov	r0, r8
 801132a:	f7f4 f959 	bl	80055e0 <prvTraceStoreKernelCall>
 801132e:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011330:	3f01      	subs	r7, #1
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8011332:	f7f3 fab7 	bl	80048a4 <prvTraceGetQueueType>
 8011336:	f819 8000 	ldrb.w	r8, [r9, r0]
 801133a:	4620      	mov	r0, r4
 801133c:	f7f3 fad9 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8011340:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011342:	b2c1      	uxtb	r1, r0
 8011344:	4640      	mov	r0, r8
 8011346:	3a01      	subs	r2, #1
 8011348:	b2d2      	uxtb	r2, r2
 801134a:	f7f3 fe5b 	bl	8005004 <prvTraceSetObjectState>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801134e:	4659      	mov	r1, fp
 8011350:	4620      	mov	r0, r4
 8011352:	f7fe ffc7 	bl	80102e4 <prvCopyDataFromQueue>
			if( cRxLock == queueUNLOCKED )
 8011356:	1c6b      	adds	r3, r5, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011358:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 801135a:	d114      	bne.n	8011386 <xQueueReceiveFromISR+0xf6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801135c:	6923      	ldr	r3, [r4, #16]
 801135e:	b90b      	cbnz	r3, 8011364 <xQueueReceiveFromISR+0xd4>
			xReturn = pdPASS;
 8011360:	2001      	movs	r0, #1
 8011362:	e00b      	b.n	801137c <xQueueReceiveFromISR+0xec>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011364:	f104 0010 	add.w	r0, r4, #16
 8011368:	f000 fe36 	bl	8011fd8 <xTaskRemoveFromEventList>
 801136c:	2800      	cmp	r0, #0
 801136e:	d0f7      	beq.n	8011360 <xQueueReceiveFromISR+0xd0>
						if( pxHigherPriorityTaskWoken != NULL )
 8011370:	f1ba 0f00 	cmp.w	sl, #0
 8011374:	d0f4      	beq.n	8011360 <xQueueReceiveFromISR+0xd0>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011376:	2001      	movs	r0, #1
 8011378:	f8ca 0000 	str.w	r0, [sl]
	__asm volatile
 801137c:	f386 8811 	msr	BASEPRI, r6
}
 8011380:	b003      	add	sp, #12
 8011382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011386:	3501      	adds	r5, #1
 8011388:	b26d      	sxtb	r5, r5
 801138a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
 801138e:	e7e7      	b.n	8011360 <xQueueReceiveFromISR+0xd0>
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8011390:	4620      	mov	r0, r4
 8011392:	f7f3 fab3 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 8011396:	f8b8 3000 	ldrh.w	r3, [r8]
 801139a:	4018      	ands	r0, r3
 801139c:	d0ee      	beq.n	801137c <xQueueReceiveFromISR+0xec>
 801139e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80113d4 <xQueueReceiveFromISR+0x144>
 80113a2:	4620      	mov	r0, r4
 80113a4:	f7f3 fa7e 	bl	80048a4 <prvTraceGetQueueType>
 80113a8:	f818 5000 	ldrb.w	r5, [r8, r0]
 80113ac:	4620      	mov	r0, r4
 80113ae:	f7f3 fa79 	bl	80048a4 <prvTraceGetQueueType>
 80113b2:	f818 8000 	ldrb.w	r8, [r8, r0]
 80113b6:	3560      	adds	r5, #96	; 0x60
 80113b8:	4620      	mov	r0, r4
 80113ba:	f7f3 fa9a 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 80113be:	4641      	mov	r1, r8
 80113c0:	b2ed      	uxtb	r5, r5
 80113c2:	b2c2      	uxtb	r2, r0
 80113c4:	4628      	mov	r0, r5
 80113c6:	f7f4 f90b 	bl	80055e0 <prvTraceStoreKernelCall>
			xReturn = pdFAIL;
 80113ca:	4638      	mov	r0, r7
 80113cc:	e7d6      	b.n	801137c <xQueueReceiveFromISR+0xec>
 80113ce:	bf00      	nop
 80113d0:	24000010 	.word	0x24000010
 80113d4:	24000008 	.word	0x24000008

080113d8 <uxQueueGetQueueNumber>:
	}
 80113d8:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80113da:	4770      	bx	lr

080113dc <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 80113dc:	6481      	str	r1, [r0, #72]	; 0x48
	}
 80113de:	4770      	bx	lr

080113e0 <ucQueueGetQueueType>:
	}
 80113e0:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
 80113e4:	4770      	bx	lr
	...

080113e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80113e8:	b570      	push	{r4, r5, r6, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80113ea:	2300      	movs	r3, #0
	{
 80113ec:	4604      	mov	r4, r0
 80113ee:	460d      	mov	r5, r1
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80113f0:	480d      	ldr	r0, [pc, #52]	; (8011428 <vQueueAddToRegistry+0x40>)
 80113f2:	f850 1033 	ldr.w	r1, [r0, r3, lsl #3]
 80113f6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80113fa:	b989      	cbnz	r1, 8011420 <vQueueAddToRegistry+0x38>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80113fc:	f840 5033 	str.w	r5, [r0, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8011400:	4620      	mov	r0, r4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011402:	6054      	str	r4, [r2, #4]
				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8011404:	f7f3 fa4e 	bl	80048a4 <prvTraceGetQueueType>
 8011408:	4b08      	ldr	r3, [pc, #32]	; (801142c <vQueueAddToRegistry+0x44>)
 801140a:	5c1e      	ldrb	r6, [r3, r0]
 801140c:	4620      	mov	r0, r4
 801140e:	f7f3 fa70 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 8011412:	462a      	mov	r2, r5
 8011414:	b2c1      	uxtb	r1, r0
 8011416:	4630      	mov	r0, r6
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 801141c:	f7f3 beba 	b.w	8005194 <prvTraceSetObjectName>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011420:	3301      	adds	r3, #1
 8011422:	2b08      	cmp	r3, #8
 8011424:	d1e5      	bne.n	80113f2 <vQueueAddToRegistry+0xa>
	}
 8011426:	bd70      	pop	{r4, r5, r6, pc}
 8011428:	2401f100 	.word	0x2401f100
 801142c:	24000008 	.word	0x24000008

08011430 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011430:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011432:	4a08      	ldr	r2, [pc, #32]	; (8011454 <vQueueUnregisterQueue+0x24>)
	{
 8011434:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011436:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801143a:	684c      	ldr	r4, [r1, #4]
 801143c:	4284      	cmp	r4, r0
 801143e:	d104      	bne.n	801144a <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011440:	2000      	movs	r0, #0
 8011442:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011446:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011448:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801144a:	3301      	adds	r3, #1
 801144c:	2b08      	cmp	r3, #8
 801144e:	d1f2      	bne.n	8011436 <vQueueUnregisterQueue+0x6>
 8011450:	e7fa      	b.n	8011448 <vQueueUnregisterQueue+0x18>
 8011452:	bf00      	nop
 8011454:	2401f100 	.word	0x2401f100

08011458 <vQueueDelete>:
{
 8011458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( pxQueue );
 801145c:	4604      	mov	r4, r0
 801145e:	b940      	cbnz	r0, 8011472 <vQueueDelete+0x1a>
	__asm volatile
 8011460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011464:	f383 8811 	msr	BASEPRI, r3
 8011468:	f3bf 8f6f 	isb	sy
 801146c:	f3bf 8f4f 	dsb	sy
 8011470:	e7fe      	b.n	8011470 <vQueueDelete+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011472:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011476:	2301      	movs	r3, #1
 8011478:	f383 8810 	msr	PRIMASK, r3
	traceQUEUE_DELETE( pxQueue );
 801147c:	4e30      	ldr	r6, [pc, #192]	; (8011540 <vQueueDelete+0xe8>)
 801147e:	f7f3 fab1 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8011482:	f7f3 fa16 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8011486:	4d2f      	ldr	r5, [pc, #188]	; (8011544 <vQueueDelete+0xec>)
 8011488:	8833      	ldrh	r3, [r6, #0]
 801148a:	4218      	tst	r0, r3
 801148c:	d018      	beq.n	80114c0 <vQueueDelete+0x68>
 801148e:	4620      	mov	r0, r4
 8011490:	f7f3 fa34 	bl	80048fc <prvTraceGetQueueNumberHigh16>
 8011494:	8833      	ldrh	r3, [r6, #0]
 8011496:	4218      	tst	r0, r3
 8011498:	d012      	beq.n	80114c0 <vQueueDelete+0x68>
 801149a:	4620      	mov	r0, r4
 801149c:	f7f3 fa02 	bl	80048a4 <prvTraceGetQueueType>
 80114a0:	5c2e      	ldrb	r6, [r5, r0]
 80114a2:	4620      	mov	r0, r4
 80114a4:	f7f3 f9fe 	bl	80048a4 <prvTraceGetQueueType>
 80114a8:	f086 0680 	eor.w	r6, r6, #128	; 0x80
 80114ac:	f815 8000 	ldrb.w	r8, [r5, r0]
 80114b0:	4620      	mov	r0, r4
 80114b2:	f7f3 fa1e 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 80114b6:	4641      	mov	r1, r8
 80114b8:	b2c2      	uxtb	r2, r0
 80114ba:	4630      	mov	r0, r6
 80114bc:	f7f4 f890 	bl	80055e0 <prvTraceStoreKernelCall>
 80114c0:	4620      	mov	r0, r4
 80114c2:	f7f3 f9ef 	bl	80048a4 <prvTraceGetQueueType>
 80114c6:	5c2e      	ldrb	r6, [r5, r0]
 80114c8:	4620      	mov	r0, r4
 80114ca:	3608      	adds	r6, #8
 80114cc:	f7f3 fa11 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 80114d0:	4680      	mov	r8, r0
 80114d2:	4620      	mov	r0, r4
 80114d4:	b2f6      	uxtb	r6, r6
 80114d6:	f7f3 f9e5 	bl	80048a4 <prvTraceGetQueueType>
 80114da:	5c2a      	ldrb	r2, [r5, r0]
 80114dc:	fa5f f188 	uxtb.w	r1, r8
 80114e0:	4630      	mov	r0, r6
 80114e2:	f7f3 fccf 	bl	8004e84 <prvTraceStoreObjectNameOnCloseEvent>
 80114e6:	4620      	mov	r0, r4
 80114e8:	f7f3 f9dc 	bl	80048a4 <prvTraceGetQueueType>
 80114ec:	5c2e      	ldrb	r6, [r5, r0]
 80114ee:	4620      	mov	r0, r4
 80114f0:	3610      	adds	r6, #16
 80114f2:	f7f3 f9fe 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 80114f6:	4680      	mov	r8, r0
 80114f8:	4620      	mov	r0, r4
 80114fa:	b2f6      	uxtb	r6, r6
 80114fc:	f7f3 f9d2 	bl	80048a4 <prvTraceGetQueueType>
 8011500:	5c2a      	ldrb	r2, [r5, r0]
 8011502:	fa5f f188 	uxtb.w	r1, r8
 8011506:	4630      	mov	r0, r6
 8011508:	f7f3 fcec 	bl	8004ee4 <prvTraceStoreObjectPropertiesOnCloseEvent>
 801150c:	4620      	mov	r0, r4
 801150e:	f7f3 f9c9 	bl	80048a4 <prvTraceGetQueueType>
 8011512:	5c2d      	ldrb	r5, [r5, r0]
 8011514:	4620      	mov	r0, r4
 8011516:	f7f3 f9ec 	bl	80048f2 <prvTraceGetQueueNumberLow16>
 801151a:	b2c1      	uxtb	r1, r0
 801151c:	4628      	mov	r0, r5
 801151e:	f7f3 fe09 	bl	8005134 <prvTraceFreeObjectHandle>
 8011522:	f387 8810 	msr	PRIMASK, r7
		vQueueUnregisterQueue( pxQueue );
 8011526:	4620      	mov	r0, r4
 8011528:	f7ff ff82 	bl	8011430 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801152c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011530:	b923      	cbnz	r3, 801153c <vQueueDelete+0xe4>
			vPortFree( pxQueue );
 8011532:	4620      	mov	r0, r4
}
 8011534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			vPortFree( pxQueue );
 8011538:	f001 bbf4 	b.w	8012d24 <vPortFree>
}
 801153c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011540:	24000010 	.word	0x24000010
 8011544:	24000008 	.word	0x24000008

08011548 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011548:	b570      	push	{r4, r5, r6, lr}
 801154a:	4604      	mov	r4, r0
 801154c:	460d      	mov	r5, r1
 801154e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011550:	f001 f9e0 	bl	8012914 <vPortEnterCritical>
 8011554:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011558:	2bff      	cmp	r3, #255	; 0xff
 801155a:	d102      	bne.n	8011562 <vQueueWaitForMessageRestricted+0x1a>
 801155c:	2300      	movs	r3, #0
 801155e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011562:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011566:	2bff      	cmp	r3, #255	; 0xff
 8011568:	d102      	bne.n	8011570 <vQueueWaitForMessageRestricted+0x28>
 801156a:	2300      	movs	r3, #0
 801156c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011570:	f001 f9f2 	bl	8012958 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011574:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011576:	b92b      	cbnz	r3, 8011584 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011578:	4632      	mov	r2, r6
 801157a:	4629      	mov	r1, r5
 801157c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011580:	f000 fce6 	bl	8011f50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011584:	4620      	mov	r0, r4
	}
 8011586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 801158a:	f7fe bec0 	b.w	801030e <prvUnlockQueue>
	...

08011590 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011594:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011596:	f001 f9bd 	bl	8012914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801159a:	4b50      	ldr	r3, [pc, #320]	; (80116dc <prvAddNewTaskToReadyList+0x14c>)
		if( pxCurrentTCB == NULL )
 801159c:	4d50      	ldr	r5, [pc, #320]	; (80116e0 <prvAddNewTaskToReadyList+0x150>)
		uxCurrentNumberOfTasks++;
 801159e:	681a      	ldr	r2, [r3, #0]
 80115a0:	4f50      	ldr	r7, [pc, #320]	; (80116e4 <prvAddNewTaskToReadyList+0x154>)
 80115a2:	3201      	adds	r2, #1
 80115a4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80115a6:	682e      	ldr	r6, [r5, #0]
 80115a8:	2e00      	cmp	r6, #0
 80115aa:	f040 808c 	bne.w	80116c6 <prvAddNewTaskToReadyList+0x136>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80115ae:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	2b01      	cmp	r3, #1
 80115b4:	d11f      	bne.n	80115f6 <prvAddNewTaskToReadyList+0x66>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80115b6:	f04f 0814 	mov.w	r8, #20
 80115ba:	fb08 7006 	mla	r0, r8, r6, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80115be:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80115c0:	f7fe fe10 	bl	80101e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80115c4:	2e38      	cmp	r6, #56	; 0x38
 80115c6:	d1f8      	bne.n	80115ba <prvAddNewTaskToReadyList+0x2a>
	}

	vListInitialise( &xDelayedTaskList1 );
 80115c8:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8011718 <prvAddNewTaskToReadyList+0x188>
	vListInitialise( &xDelayedTaskList2 );
 80115cc:	4e46      	ldr	r6, [pc, #280]	; (80116e8 <prvAddNewTaskToReadyList+0x158>)
	vListInitialise( &xDelayedTaskList1 );
 80115ce:	4640      	mov	r0, r8
 80115d0:	f7fe fe08 	bl	80101e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80115d4:	4630      	mov	r0, r6
 80115d6:	f7fe fe05 	bl	80101e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80115da:	4844      	ldr	r0, [pc, #272]	; (80116ec <prvAddNewTaskToReadyList+0x15c>)
 80115dc:	f7fe fe02 	bl	80101e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80115e0:	4843      	ldr	r0, [pc, #268]	; (80116f0 <prvAddNewTaskToReadyList+0x160>)
 80115e2:	f7fe fdff 	bl	80101e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80115e6:	4843      	ldr	r0, [pc, #268]	; (80116f4 <prvAddNewTaskToReadyList+0x164>)
 80115e8:	f7fe fdfc 	bl	80101e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80115ec:	4b42      	ldr	r3, [pc, #264]	; (80116f8 <prvAddNewTaskToReadyList+0x168>)
 80115ee:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80115f2:	4b42      	ldr	r3, [pc, #264]	; (80116fc <prvAddNewTaskToReadyList+0x16c>)
 80115f4:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 80115f6:	4a42      	ldr	r2, [pc, #264]	; (8011700 <prvAddNewTaskToReadyList+0x170>)
		traceTASK_CREATE( pxNewTCB );
 80115f8:	2003      	movs	r0, #3
 80115fa:	4e42      	ldr	r6, [pc, #264]	; (8011704 <prvAddNewTaskToReadyList+0x174>)
		uxTaskNumber++;
 80115fc:	6813      	ldr	r3, [r2, #0]
 80115fe:	3301      	adds	r3, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011600:	6463      	str	r3, [r4, #68]	; 0x44
		uxTaskNumber++;
 8011602:	6013      	str	r3, [r2, #0]
		traceTASK_CREATE( pxNewTCB );
 8011604:	f7f3 fd40 	bl	8005088 <prvTraceGetObjectHandle>
 8011608:	b281      	uxth	r1, r0
 801160a:	4620      	mov	r0, r4
 801160c:	f7f3 f956 	bl	80048bc <prvTraceSetTaskNumberLow16>
 8011610:	4b3d      	ldr	r3, [pc, #244]	; (8011708 <prvAddNewTaskToReadyList+0x178>)
 8011612:	4620      	mov	r0, r4
 8011614:	8819      	ldrh	r1, [r3, #0]
 8011616:	f7f3 f95f 	bl	80048d8 <prvTraceSetTaskNumberHigh16>
 801161a:	4620      	mov	r0, r4
 801161c:	f7f3 f944 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8011620:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8011624:	b2c1      	uxtb	r1, r0
 8011626:	2003      	movs	r0, #3
 8011628:	f7f3 fdb4 	bl	8005194 <prvTraceSetObjectName>
 801162c:	4620      	mov	r0, r4
 801162e:	f7f3 f93b 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8011632:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8011636:	b2c1      	uxtb	r1, r0
 8011638:	2003      	movs	r0, #3
 801163a:	f7f3 fc97 	bl	8004f6c <prvTraceSetPriorityProperty>
 801163e:	f7f3 f9d1 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8011642:	f7f3 f936 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8011646:	8833      	ldrh	r3, [r6, #0]
 8011648:	4218      	tst	r0, r3
 801164a:	d00d      	beq.n	8011668 <prvAddNewTaskToReadyList+0xd8>
 801164c:	4620      	mov	r0, r4
 801164e:	f7f3 f930 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8011652:	8833      	ldrh	r3, [r6, #0]
 8011654:	4218      	tst	r0, r3
 8011656:	d007      	beq.n	8011668 <prvAddNewTaskToReadyList+0xd8>
 8011658:	4620      	mov	r0, r4
 801165a:	f7f3 f925 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 801165e:	2103      	movs	r1, #3
 8011660:	b2c2      	uxtb	r2, r0
 8011662:	201b      	movs	r0, #27
 8011664:	f7f3 ffbc 	bl	80055e0 <prvTraceStoreKernelCall>
 8011668:	4620      	mov	r0, r4
 801166a:	f7f3 f967 	bl	800493c <prvAddTaskToStackMonitor>
		prvAddTaskToReadyList( pxNewTCB );
 801166e:	4620      	mov	r0, r4
 8011670:	f7f3 f91f 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8011674:	8833      	ldrh	r3, [r6, #0]
 8011676:	4218      	tst	r0, r3
 8011678:	d005      	beq.n	8011686 <prvAddNewTaskToReadyList+0xf6>
 801167a:	4620      	mov	r0, r4
 801167c:	f7f3 f914 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8011680:	b2c0      	uxtb	r0, r0
 8011682:	f7f3 ff13 	bl	80054ac <prvTraceStoreTaskReady>
 8011686:	4a21      	ldr	r2, [pc, #132]	; (801170c <prvAddNewTaskToReadyList+0x17c>)
 8011688:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801168a:	6811      	ldr	r1, [r2, #0]
 801168c:	428b      	cmp	r3, r1
 801168e:	d900      	bls.n	8011692 <prvAddNewTaskToReadyList+0x102>
 8011690:	6013      	str	r3, [r2, #0]
 8011692:	2014      	movs	r0, #20
 8011694:	1d21      	adds	r1, r4, #4
 8011696:	fb00 7003 	mla	r0, r0, r3, r7
 801169a:	f7fe fdb1 	bl	8010200 <vListInsertEnd>
	taskEXIT_CRITICAL();
 801169e:	f001 f95b 	bl	8012958 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80116a2:	4b1b      	ldr	r3, [pc, #108]	; (8011710 <prvAddNewTaskToReadyList+0x180>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	b163      	cbz	r3, 80116c2 <prvAddNewTaskToReadyList+0x132>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80116a8:	682b      	ldr	r3, [r5, #0]
 80116aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d207      	bcs.n	80116c2 <prvAddNewTaskToReadyList+0x132>
			taskYIELD_IF_USING_PREEMPTION();
 80116b2:	4b18      	ldr	r3, [pc, #96]	; (8011714 <prvAddNewTaskToReadyList+0x184>)
 80116b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116b8:	601a      	str	r2, [r3, #0]
 80116ba:	f3bf 8f4f 	dsb	sy
 80116be:	f3bf 8f6f 	isb	sy
}
 80116c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80116c6:	4b12      	ldr	r3, [pc, #72]	; (8011710 <prvAddNewTaskToReadyList+0x180>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d193      	bne.n	80115f6 <prvAddNewTaskToReadyList+0x66>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80116ce:	682b      	ldr	r3, [r5, #0]
 80116d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d88e      	bhi.n	80115f6 <prvAddNewTaskToReadyList+0x66>
					pxCurrentTCB = pxNewTCB;
 80116d8:	602c      	str	r4, [r5, #0]
 80116da:	e78c      	b.n	80115f6 <prvAddNewTaskToReadyList+0x66>
 80116dc:	24001460 	.word	0x24001460
 80116e0:	24000ff4 	.word	0x24000ff4
 80116e4:	24001000 	.word	0x24001000
 80116e8:	2400148c 	.word	0x2400148c
 80116ec:	240014a8 	.word	0x240014a8
 80116f0:	240014d4 	.word	0x240014d4
 80116f4:	240014c0 	.word	0x240014c0
 80116f8:	24000ff8 	.word	0x24000ff8
 80116fc:	24000ffc 	.word	0x24000ffc
 8011700:	24001470 	.word	0x24001470
 8011704:	24000010 	.word	0x24000010
 8011708:	2400000e 	.word	0x2400000e
 801170c:	24001474 	.word	0x24001474
 8011710:	240014bc 	.word	0x240014bc
 8011714:	e000ed04 	.word	0xe000ed04
 8011718:	24001478 	.word	0x24001478

0801171c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801171c:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801171e:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
	{
 8011722:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011724:	b93b      	cbnz	r3, 8011736 <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011726:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011728:	f001 fafc 	bl	8012d24 <vPortFree>
				vPortFree( pxTCB );
 801172c:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801172e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8011732:	f001 baf7 	b.w	8012d24 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011736:	2b01      	cmp	r3, #1
 8011738:	d0f9      	beq.n	801172e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801173a:	2b02      	cmp	r3, #2
 801173c:	d008      	beq.n	8011750 <prvDeleteTCB+0x34>
 801173e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011742:	f383 8811 	msr	BASEPRI, r3
 8011746:	f3bf 8f6f 	isb	sy
 801174a:	f3bf 8f4f 	dsb	sy
 801174e:	e7fe      	b.n	801174e <prvDeleteTCB+0x32>
	}
 8011750:	bd10      	pop	{r4, pc}
	...

08011754 <prvIdleTask>:
{
 8011754:	b580      	push	{r7, lr}
				taskYIELD();
 8011756:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80117b4 <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801175a:	4f12      	ldr	r7, [pc, #72]	; (80117a4 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801175c:	4c12      	ldr	r4, [pc, #72]	; (80117a8 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 801175e:	4d13      	ldr	r5, [pc, #76]	; (80117ac <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011760:	6823      	ldr	r3, [r4, #0]
 8011762:	b963      	cbnz	r3, 801177e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011764:	4b12      	ldr	r3, [pc, #72]	; (80117b0 <prvIdleTask+0x5c>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	2b01      	cmp	r3, #1
 801176a:	d9f8      	bls.n	801175e <prvIdleTask+0xa>
				taskYIELD();
 801176c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011770:	f8c8 3000 	str.w	r3, [r8]
 8011774:	f3bf 8f4f 	dsb	sy
 8011778:	f3bf 8f6f 	isb	sy
 801177c:	e7ee      	b.n	801175c <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 801177e:	f001 f8c9 	bl	8012914 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011786:	1d30      	adds	r0, r6, #4
 8011788:	f7fe fd5d 	bl	8010246 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801178c:	682b      	ldr	r3, [r5, #0]
 801178e:	3b01      	subs	r3, #1
 8011790:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011792:	6823      	ldr	r3, [r4, #0]
 8011794:	3b01      	subs	r3, #1
 8011796:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8011798:	f001 f8de 	bl	8012958 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 801179c:	4630      	mov	r0, r6
 801179e:	f7ff ffbd 	bl	801171c <prvDeleteTCB>
 80117a2:	e7dd      	b.n	8011760 <prvIdleTask+0xc>
 80117a4:	240014d4 	.word	0x240014d4
 80117a8:	24001464 	.word	0x24001464
 80117ac:	24001460 	.word	0x24001460
 80117b0:	24001000 	.word	0x24001000
 80117b4:	e000ed04 	.word	0xe000ed04

080117b8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80117b8:	4a06      	ldr	r2, [pc, #24]	; (80117d4 <prvResetNextTaskUnblockTime+0x1c>)
 80117ba:	6813      	ldr	r3, [r2, #0]
 80117bc:	6819      	ldr	r1, [r3, #0]
 80117be:	4b06      	ldr	r3, [pc, #24]	; (80117d8 <prvResetNextTaskUnblockTime+0x20>)
 80117c0:	b919      	cbnz	r1, 80117ca <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80117c2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80117c6:	601a      	str	r2, [r3, #0]
	}
}
 80117c8:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117ca:	6812      	ldr	r2, [r2, #0]
 80117cc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80117ce:	68d2      	ldr	r2, [r2, #12]
 80117d0:	6852      	ldr	r2, [r2, #4]
 80117d2:	e7f8      	b.n	80117c6 <prvResetNextTaskUnblockTime+0xe>
 80117d4:	24000ff8 	.word	0x24000ff8
 80117d8:	240014a0 	.word	0x240014a0

080117dc <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80117dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80117e0:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80117e4:	4607      	mov	r7, r0
 80117e6:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80117e8:	21a5      	movs	r1, #165	; 0xa5
 80117ea:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80117ec:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80117ee:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80117f2:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80117f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80117f8:	f001 fd49 	bl	801328e <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80117fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80117fe:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011800:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8011804:	b395      	cbz	r5, 801186c <prvInitialiseNewTask.isra.2+0x90>
 8011806:	1e6b      	subs	r3, r5, #1
 8011808:	f104 0234 	add.w	r2, r4, #52	; 0x34
 801180c:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801180e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8011812:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8011816:	7819      	ldrb	r1, [r3, #0]
 8011818:	b109      	cbz	r1, 801181e <prvInitialiseNewTask.isra.2+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801181a:	42ab      	cmp	r3, r5
 801181c:	d1f7      	bne.n	801180e <prvInitialiseNewTask.isra.2+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801181e:	2300      	movs	r3, #0
 8011820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011824:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8011826:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801182a:	1d20      	adds	r0, r4, #4
 801182c:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 801182e:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8011832:	bf28      	it	cs
 8011834:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8011836:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8011838:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801183a:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801183e:	f7fe fcdc 	bl	80101fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011842:	f104 0018 	add.w	r0, r4, #24
 8011846:	f7fe fcd8 	bl	80101fa <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 801184a:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801184e:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011850:	4642      	mov	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011852:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011854:	4639      	mov	r1, r7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011856:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011858:	4648      	mov	r0, r9
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801185a:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801185e:	f001 f835 	bl	80128cc <pxPortInitialiseStack>
 8011862:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8011864:	b106      	cbz	r6, 8011868 <prvInitialiseNewTask.isra.2+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011866:	6034      	str	r4, [r6, #0]
}
 8011868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801186c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8011870:	e7d8      	b.n	8011824 <prvInitialiseNewTask.isra.2+0x48>
	...

08011874 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011876:	4b16      	ldr	r3, [pc, #88]	; (80118d0 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8011878:	4605      	mov	r5, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801187a:	4e16      	ldr	r6, [pc, #88]	; (80118d4 <prvAddCurrentTaskToDelayedList+0x60>)
{
 801187c:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 801187e:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011880:	6830      	ldr	r0, [r6, #0]
 8011882:	3004      	adds	r0, #4
 8011884:	f7fe fcdf 	bl	8010246 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011888:	1c6b      	adds	r3, r5, #1
 801188a:	4633      	mov	r3, r6
 801188c:	d107      	bne.n	801189e <prvAddCurrentTaskToDelayedList+0x2a>
 801188e:	b137      	cbz	r7, 801189e <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011890:	6831      	ldr	r1, [r6, #0]
 8011892:	4811      	ldr	r0, [pc, #68]	; (80118d8 <prvAddCurrentTaskToDelayedList+0x64>)
 8011894:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801189a:	f7fe bcb1 	b.w	8010200 <vListInsertEnd>
 801189e:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80118a0:	681a      	ldr	r2, [r3, #0]
 80118a2:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80118a4:	d307      	bcc.n	80118b6 <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80118a6:	4a0d      	ldr	r2, [pc, #52]	; (80118dc <prvAddCurrentTaskToDelayedList+0x68>)
 80118a8:	6810      	ldr	r0, [r2, #0]
 80118aa:	6819      	ldr	r1, [r3, #0]
}
 80118ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80118b0:	3104      	adds	r1, #4
 80118b2:	f7fe bcb1 	b.w	8010218 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80118b6:	4a0a      	ldr	r2, [pc, #40]	; (80118e0 <prvAddCurrentTaskToDelayedList+0x6c>)
 80118b8:	6810      	ldr	r0, [r2, #0]
 80118ba:	6819      	ldr	r1, [r3, #0]
 80118bc:	3104      	adds	r1, #4
 80118be:	f7fe fcab 	bl	8010218 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80118c2:	4b08      	ldr	r3, [pc, #32]	; (80118e4 <prvAddCurrentTaskToDelayedList+0x70>)
 80118c4:	681a      	ldr	r2, [r3, #0]
 80118c6:	42a2      	cmp	r2, r4
 80118c8:	d900      	bls.n	80118cc <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 80118ca:	601c      	str	r4, [r3, #0]
}
 80118cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118ce:	bf00      	nop
 80118d0:	240014e8 	.word	0x240014e8
 80118d4:	24000ff4 	.word	0x24000ff4
 80118d8:	240014c0 	.word	0x240014c0
 80118dc:	24000ffc 	.word	0x24000ffc
 80118e0:	24000ff8 	.word	0x24000ff8
 80118e4:	240014a0 	.word	0x240014a0

080118e8 <xTaskCreateStatic>:
	{
 80118e8:	b570      	push	{r4, r5, r6, lr}
 80118ea:	b086      	sub	sp, #24
 80118ec:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80118f0:	b945      	cbnz	r5, 8011904 <xTaskCreateStatic+0x1c>
 80118f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f6:	f383 8811 	msr	BASEPRI, r3
 80118fa:	f3bf 8f6f 	isb	sy
 80118fe:	f3bf 8f4f 	dsb	sy
 8011902:	e7fe      	b.n	8011902 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8011904:	b944      	cbnz	r4, 8011918 <xTaskCreateStatic+0x30>
 8011906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801190a:	f383 8811 	msr	BASEPRI, r3
 801190e:	f3bf 8f6f 	isb	sy
 8011912:	f3bf 8f4f 	dsb	sy
 8011916:	e7fe      	b.n	8011916 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8011918:	265c      	movs	r6, #92	; 0x5c
 801191a:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801191c:	9e05      	ldr	r6, [sp, #20]
 801191e:	2e5c      	cmp	r6, #92	; 0x5c
 8011920:	d008      	beq.n	8011934 <xTaskCreateStatic+0x4c>
 8011922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011926:	f383 8811 	msr	BASEPRI, r3
 801192a:	f3bf 8f6f 	isb	sy
 801192e:	f3bf 8f4f 	dsb	sy
 8011932:	e7fe      	b.n	8011932 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011934:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011936:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011938:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801193a:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801193e:	ad04      	add	r5, sp, #16
 8011940:	9402      	str	r4, [sp, #8]
 8011942:	9501      	str	r5, [sp, #4]
 8011944:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011946:	9500      	str	r5, [sp, #0]
 8011948:	f7ff ff48 	bl	80117dc <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 801194c:	4620      	mov	r0, r4
 801194e:	f7ff fe1f 	bl	8011590 <prvAddNewTaskToReadyList>
	}
 8011952:	9804      	ldr	r0, [sp, #16]
 8011954:	b006      	add	sp, #24
 8011956:	bd70      	pop	{r4, r5, r6, pc}

08011958 <xTaskCreate>:
	{
 8011958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801195c:	4607      	mov	r7, r0
 801195e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011960:	0090      	lsls	r0, r2, #2
	{
 8011962:	4688      	mov	r8, r1
 8011964:	4616      	mov	r6, r2
 8011966:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011968:	f001 f942 	bl	8012bf0 <pvPortMalloc>
			if( pxStack != NULL )
 801196c:	4605      	mov	r5, r0
 801196e:	b1e8      	cbz	r0, 80119ac <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011970:	205c      	movs	r0, #92	; 0x5c
 8011972:	f001 f93d 	bl	8012bf0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8011976:	4604      	mov	r4, r0
 8011978:	b1a8      	cbz	r0, 80119a6 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801197a:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 801197c:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801197e:	4632      	mov	r2, r6
 8011980:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011982:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011988:	9002      	str	r0, [sp, #8]
 801198a:	4638      	mov	r0, r7
 801198c:	9301      	str	r3, [sp, #4]
 801198e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011990:	9300      	str	r3, [sp, #0]
 8011992:	464b      	mov	r3, r9
 8011994:	f7ff ff22 	bl	80117dc <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011998:	4620      	mov	r0, r4
 801199a:	f7ff fdf9 	bl	8011590 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801199e:	2001      	movs	r0, #1
	}
 80119a0:	b005      	add	sp, #20
 80119a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80119a6:	4628      	mov	r0, r5
 80119a8:	f001 f9bc 	bl	8012d24 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80119ac:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80119b0:	e7f6      	b.n	80119a0 <xTaskCreate+0x48>
	...

080119b4 <vTaskStartScheduler>:
{
 80119b4:	b510      	push	{r4, lr}
 80119b6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80119b8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80119ba:	aa07      	add	r2, sp, #28
 80119bc:	a906      	add	r1, sp, #24
 80119be:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80119c0:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80119c4:	f7fe fbf6 	bl	80101b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80119c8:	9b05      	ldr	r3, [sp, #20]
 80119ca:	9a07      	ldr	r2, [sp, #28]
 80119cc:	9302      	str	r3, [sp, #8]
 80119ce:	9b06      	ldr	r3, [sp, #24]
 80119d0:	491e      	ldr	r1, [pc, #120]	; (8011a4c <vTaskStartScheduler+0x98>)
 80119d2:	481f      	ldr	r0, [pc, #124]	; (8011a50 <vTaskStartScheduler+0x9c>)
 80119d4:	e9cd 4300 	strd	r4, r3, [sp]
 80119d8:	4623      	mov	r3, r4
 80119da:	f7ff ff85 	bl	80118e8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80119de:	b340      	cbz	r0, 8011a32 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 80119e0:	f000 fd88 	bl	80124f4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80119e4:	2801      	cmp	r0, #1
 80119e6:	d126      	bne.n	8011a36 <vTaskStartScheduler+0x82>
 80119e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ec:	f383 8811 	msr	BASEPRI, r3
 80119f0:	f3bf 8f6f 	isb	sy
 80119f4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80119f8:	f04f 32ff 	mov.w	r2, #4294967295
 80119fc:	4b15      	ldr	r3, [pc, #84]	; (8011a54 <vTaskStartScheduler+0xa0>)
 80119fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011a00:	4b15      	ldr	r3, [pc, #84]	; (8011a58 <vTaskStartScheduler+0xa4>)
 8011a02:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011a04:	4b15      	ldr	r3, [pc, #84]	; (8011a5c <vTaskStartScheduler+0xa8>)
 8011a06:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8011a08:	4c15      	ldr	r4, [pc, #84]	; (8011a60 <vTaskStartScheduler+0xac>)
 8011a0a:	6020      	str	r0, [r4, #0]
 8011a0c:	f7f2 ffea 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8011a10:	f7f2 ff4f 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8011a14:	4b13      	ldr	r3, [pc, #76]	; (8011a64 <vTaskStartScheduler+0xb0>)
 8011a16:	881b      	ldrh	r3, [r3, #0]
 8011a18:	4218      	tst	r0, r3
 8011a1a:	d006      	beq.n	8011a2a <vTaskStartScheduler+0x76>
 8011a1c:	f7f2 ffe2 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8011a20:	f7f2 ff42 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8011a24:	b2c0      	uxtb	r0, r0
 8011a26:	f7f3 fec7 	bl	80057b8 <prvTraceStoreTaskswitch>
 8011a2a:	2302      	movs	r3, #2
 8011a2c:	6023      	str	r3, [r4, #0]
		if( xPortStartScheduler() != pdFALSE )
 8011a2e:	f001 f809 	bl	8012a44 <xPortStartScheduler>
}
 8011a32:	b008      	add	sp, #32
 8011a34:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011a36:	3001      	adds	r0, #1
 8011a38:	d1fb      	bne.n	8011a32 <vTaskStartScheduler+0x7e>
 8011a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a3e:	f383 8811 	msr	BASEPRI, r3
 8011a42:	f3bf 8f6f 	isb	sy
 8011a46:	f3bf 8f4f 	dsb	sy
 8011a4a:	e7fe      	b.n	8011a4a <vTaskStartScheduler+0x96>
 8011a4c:	080168cf 	.word	0x080168cf
 8011a50:	08011755 	.word	0x08011755
 8011a54:	240014a0 	.word	0x240014a0
 8011a58:	240014bc 	.word	0x240014bc
 8011a5c:	240014e8 	.word	0x240014e8
 8011a60:	240008f0 	.word	0x240008f0
 8011a64:	24000010 	.word	0x24000010

08011a68 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8011a68:	4a02      	ldr	r2, [pc, #8]	; (8011a74 <vTaskSuspendAll+0xc>)
 8011a6a:	6813      	ldr	r3, [r2, #0]
 8011a6c:	3301      	adds	r3, #1
 8011a6e:	6013      	str	r3, [r2, #0]
}
 8011a70:	4770      	bx	lr
 8011a72:	bf00      	nop
 8011a74:	2400146c 	.word	0x2400146c

08011a78 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8011a78:	4b01      	ldr	r3, [pc, #4]	; (8011a80 <xTaskGetTickCount+0x8>)
 8011a7a:	6818      	ldr	r0, [r3, #0]
}
 8011a7c:	4770      	bx	lr
 8011a7e:	bf00      	nop
 8011a80:	240014e8 	.word	0x240014e8

08011a84 <xTaskGetTickCountFromISR>:
{
 8011a84:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011a86:	f001 f861 	bl	8012b4c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8011a8a:	4b01      	ldr	r3, [pc, #4]	; (8011a90 <xTaskGetTickCountFromISR+0xc>)
 8011a8c:	6818      	ldr	r0, [r3, #0]
}
 8011a8e:	bd08      	pop	{r3, pc}
 8011a90:	240014e8 	.word	0x240014e8

08011a94 <xTaskIncrementTick>:
{
 8011a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	traceTASK_INCREMENT_TICK( xTickCount );
 8011a98:	4c4b      	ldr	r4, [pc, #300]	; (8011bc8 <xTaskIncrementTick+0x134>)
 8011a9a:	6823      	ldr	r3, [r4, #0]
 8011a9c:	2b01      	cmp	r3, #1
 8011a9e:	d002      	beq.n	8011aa6 <xTaskIncrementTick+0x12>
 8011aa0:	4b4a      	ldr	r3, [pc, #296]	; (8011bcc <xTaskIncrementTick+0x138>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	b933      	cbnz	r3, 8011ab4 <xTaskIncrementTick+0x20>
 8011aa6:	4a4a      	ldr	r2, [pc, #296]	; (8011bd0 <xTaskIncrementTick+0x13c>)
 8011aa8:	2000      	movs	r0, #0
 8011aaa:	6813      	ldr	r3, [r2, #0]
 8011aac:	3301      	adds	r3, #1
 8011aae:	6013      	str	r3, [r2, #0]
 8011ab0:	f7f3 fc5c 	bl	800536c <prvTracePortGetTimeStamp>
 8011ab4:	6823      	ldr	r3, [r4, #0]
 8011ab6:	b92b      	cbnz	r3, 8011ac4 <xTaskIncrementTick+0x30>
 8011ab8:	4b46      	ldr	r3, [pc, #280]	; (8011bd4 <xTaskIncrementTick+0x140>)
 8011aba:	2003      	movs	r0, #3
 8011abc:	6819      	ldr	r1, [r3, #0]
 8011abe:	3101      	adds	r1, #1
 8011ac0:	f7f3 fe34 	bl	800572c <prvTraceStoreKernelCallWithNumericParamOnly>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ac4:	6823      	ldr	r3, [r4, #0]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d178      	bne.n	8011bbc <xTaskIncrementTick+0x128>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011aca:	4b42      	ldr	r3, [pc, #264]	; (8011bd4 <xTaskIncrementTick+0x140>)
 8011acc:	681d      	ldr	r5, [r3, #0]
 8011ace:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8011ad0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011ad2:	b9bd      	cbnz	r5, 8011b04 <xTaskIncrementTick+0x70>
			taskSWITCH_DELAYED_LISTS();
 8011ad4:	4b40      	ldr	r3, [pc, #256]	; (8011bd8 <xTaskIncrementTick+0x144>)
 8011ad6:	681a      	ldr	r2, [r3, #0]
 8011ad8:	6812      	ldr	r2, [r2, #0]
 8011ada:	b142      	cbz	r2, 8011aee <xTaskIncrementTick+0x5a>
 8011adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae0:	f383 8811 	msr	BASEPRI, r3
 8011ae4:	f3bf 8f6f 	isb	sy
 8011ae8:	f3bf 8f4f 	dsb	sy
 8011aec:	e7fe      	b.n	8011aec <xTaskIncrementTick+0x58>
 8011aee:	4a3b      	ldr	r2, [pc, #236]	; (8011bdc <xTaskIncrementTick+0x148>)
 8011af0:	6819      	ldr	r1, [r3, #0]
 8011af2:	6810      	ldr	r0, [r2, #0]
 8011af4:	6018      	str	r0, [r3, #0]
 8011af6:	6011      	str	r1, [r2, #0]
 8011af8:	4a39      	ldr	r2, [pc, #228]	; (8011be0 <xTaskIncrementTick+0x14c>)
 8011afa:	6813      	ldr	r3, [r2, #0]
 8011afc:	3301      	adds	r3, #1
 8011afe:	6013      	str	r3, [r2, #0]
 8011b00:	f7ff fe5a 	bl	80117b8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011b04:	4e37      	ldr	r6, [pc, #220]	; (8011be4 <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 8011b06:	2400      	movs	r4, #0
 8011b08:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8011bf4 <xTaskIncrementTick+0x160>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011b0c:	6833      	ldr	r3, [r6, #0]
 8011b0e:	42ab      	cmp	r3, r5
 8011b10:	d911      	bls.n	8011b36 <xTaskIncrementTick+0xa2>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011b12:	f8d8 3000 	ldr.w	r3, [r8]
 8011b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b18:	2314      	movs	r3, #20
 8011b1a:	4353      	muls	r3, r2
 8011b1c:	4a32      	ldr	r2, [pc, #200]	; (8011be8 <xTaskIncrementTick+0x154>)
 8011b1e:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8011b20:	2b02      	cmp	r3, #2
 8011b22:	bf28      	it	cs
 8011b24:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8011b26:	4b31      	ldr	r3, [pc, #196]	; (8011bec <xTaskIncrementTick+0x158>)
 8011b28:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8011b2a:	2b00      	cmp	r3, #0
}
 8011b2c:	bf0c      	ite	eq
 8011b2e:	4620      	moveq	r0, r4
 8011b30:	2001      	movne	r0, #1
 8011b32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011b36:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8011bd8 <xTaskIncrementTick+0x144>
					prvAddTaskToReadyList( pxTCB );
 8011b3a:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 8011bf8 <xTaskIncrementTick+0x164>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011b3e:	f8da 3000 	ldr.w	r3, [sl]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	b91b      	cbnz	r3, 8011b4e <xTaskIncrementTick+0xba>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b46:	f04f 33ff 	mov.w	r3, #4294967295
 8011b4a:	6033      	str	r3, [r6, #0]
					break;
 8011b4c:	e7e1      	b.n	8011b12 <xTaskIncrementTick+0x7e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b4e:	f8da 3000 	ldr.w	r3, [sl]
 8011b52:	68db      	ldr	r3, [r3, #12]
 8011b54:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011b56:	687a      	ldr	r2, [r7, #4]
					if( xConstTickCount < xItemValue )
 8011b58:	4295      	cmp	r5, r2
 8011b5a:	d201      	bcs.n	8011b60 <xTaskIncrementTick+0xcc>
						xNextTaskUnblockTime = xItemValue;
 8011b5c:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011b5e:	e7d8      	b.n	8011b12 <xTaskIncrementTick+0x7e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b60:	f107 0904 	add.w	r9, r7, #4
 8011b64:	4648      	mov	r0, r9
 8011b66:	f7fe fb6e 	bl	8010246 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b6c:	b11a      	cbz	r2, 8011b76 <xTaskIncrementTick+0xe2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b6e:	f107 0018 	add.w	r0, r7, #24
 8011b72:	f7fe fb68 	bl	8010246 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011b76:	4638      	mov	r0, r7
 8011b78:	f7f2 fe9b 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8011b7c:	4b1c      	ldr	r3, [pc, #112]	; (8011bf0 <xTaskIncrementTick+0x15c>)
 8011b7e:	881a      	ldrh	r2, [r3, #0]
 8011b80:	4210      	tst	r0, r2
 8011b82:	d005      	beq.n	8011b90 <xTaskIncrementTick+0xfc>
 8011b84:	4638      	mov	r0, r7
 8011b86:	f7f2 fe8f 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8011b8a:	b2c0      	uxtb	r0, r0
 8011b8c:	f7f3 fc8e 	bl	80054ac <prvTraceStoreTaskReady>
 8011b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b92:	f8db 1000 	ldr.w	r1, [fp]
 8011b96:	428a      	cmp	r2, r1
 8011b98:	d901      	bls.n	8011b9e <xTaskIncrementTick+0x10a>
 8011b9a:	f8cb 2000 	str.w	r2, [fp]
 8011b9e:	4b12      	ldr	r3, [pc, #72]	; (8011be8 <xTaskIncrementTick+0x154>)
 8011ba0:	2014      	movs	r0, #20
 8011ba2:	4649      	mov	r1, r9
 8011ba4:	fb00 3002 	mla	r0, r0, r2, r3
 8011ba8:	f7fe fb2a 	bl	8010200 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011bac:	f8d8 1000 	ldr.w	r1, [r8]
 8011bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bb2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	bf28      	it	cs
 8011bb8:	2401      	movcs	r4, #1
 8011bba:	e7c0      	b.n	8011b3e <xTaskIncrementTick+0xaa>
		++uxPendedTicks;
 8011bbc:	4a03      	ldr	r2, [pc, #12]	; (8011bcc <xTaskIncrementTick+0x138>)
BaseType_t xSwitchRequired = pdFALSE;
 8011bbe:	2400      	movs	r4, #0
		++uxPendedTicks;
 8011bc0:	6813      	ldr	r3, [r2, #0]
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	6013      	str	r3, [r2, #0]
 8011bc6:	e7ae      	b.n	8011b26 <xTaskIncrementTick+0x92>
 8011bc8:	2400146c 	.word	0x2400146c
 8011bcc:	24001468 	.word	0x24001468
 8011bd0:	240008f4 	.word	0x240008f4
 8011bd4:	240014e8 	.word	0x240014e8
 8011bd8:	24000ff8 	.word	0x24000ff8
 8011bdc:	24000ffc 	.word	0x24000ffc
 8011be0:	240014a4 	.word	0x240014a4
 8011be4:	240014a0 	.word	0x240014a0
 8011be8:	24001000 	.word	0x24001000
 8011bec:	240014ec 	.word	0x240014ec
 8011bf0:	24000010 	.word	0x24000010
 8011bf4:	24000ff4 	.word	0x24000ff4
 8011bf8:	24001474 	.word	0x24001474

08011bfc <xTaskResumeAll>:
{
 8011bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8011c00:	4c36      	ldr	r4, [pc, #216]	; (8011cdc <xTaskResumeAll+0xe0>)
 8011c02:	6823      	ldr	r3, [r4, #0]
 8011c04:	b943      	cbnz	r3, 8011c18 <xTaskResumeAll+0x1c>
 8011c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c0a:	f383 8811 	msr	BASEPRI, r3
 8011c0e:	f3bf 8f6f 	isb	sy
 8011c12:	f3bf 8f4f 	dsb	sy
 8011c16:	e7fe      	b.n	8011c16 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8011c18:	f000 fe7c 	bl	8012914 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8011c1c:	6823      	ldr	r3, [r4, #0]
 8011c1e:	3b01      	subs	r3, #1
 8011c20:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c22:	6824      	ldr	r4, [r4, #0]
 8011c24:	b12c      	cbz	r4, 8011c32 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8011c26:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8011c28:	f000 fe96 	bl	8012958 <vPortExitCritical>
}
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011c32:	4b2b      	ldr	r3, [pc, #172]	; (8011ce0 <xTaskResumeAll+0xe4>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d0f5      	beq.n	8011c26 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011c3a:	4d2a      	ldr	r5, [pc, #168]	; (8011ce4 <xTaskResumeAll+0xe8>)
					prvAddTaskToReadyList( pxTCB );
 8011c3c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8011d00 <xTaskResumeAll+0x104>
 8011c40:	4e29      	ldr	r6, [pc, #164]	; (8011ce8 <xTaskResumeAll+0xec>)
 8011c42:	e02b      	b.n	8011c9c <xTaskResumeAll+0xa0>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c44:	68eb      	ldr	r3, [r5, #12]
 8011c46:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c48:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011c4a:	f104 0018 	add.w	r0, r4, #24
 8011c4e:	f7fe fafa 	bl	8010246 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c52:	4638      	mov	r0, r7
 8011c54:	f7fe faf7 	bl	8010246 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011c58:	4620      	mov	r0, r4
 8011c5a:	f7f2 fe2a 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8011c5e:	f8b8 3000 	ldrh.w	r3, [r8]
 8011c62:	4218      	tst	r0, r3
 8011c64:	d005      	beq.n	8011c72 <xTaskResumeAll+0x76>
 8011c66:	4620      	mov	r0, r4
 8011c68:	f7f2 fe1e 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8011c6c:	b2c0      	uxtb	r0, r0
 8011c6e:	f7f3 fc1d 	bl	80054ac <prvTraceStoreTaskReady>
 8011c72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011c74:	6832      	ldr	r2, [r6, #0]
 8011c76:	4293      	cmp	r3, r2
 8011c78:	d900      	bls.n	8011c7c <xTaskResumeAll+0x80>
 8011c7a:	6033      	str	r3, [r6, #0]
 8011c7c:	4a1b      	ldr	r2, [pc, #108]	; (8011cec <xTaskResumeAll+0xf0>)
 8011c7e:	2014      	movs	r0, #20
 8011c80:	4639      	mov	r1, r7
 8011c82:	fb00 2003 	mla	r0, r0, r3, r2
 8011c86:	f7fe fabb 	bl	8010200 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011c8a:	4b19      	ldr	r3, [pc, #100]	; (8011cf0 <xTaskResumeAll+0xf4>)
 8011c8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d302      	bcc.n	8011c9c <xTaskResumeAll+0xa0>
						xYieldPending = pdTRUE;
 8011c96:	4b17      	ldr	r3, [pc, #92]	; (8011cf4 <xTaskResumeAll+0xf8>)
 8011c98:	2201      	movs	r2, #1
 8011c9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011c9c:	682b      	ldr	r3, [r5, #0]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d1d0      	bne.n	8011c44 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8011ca2:	b10c      	cbz	r4, 8011ca8 <xTaskResumeAll+0xac>
					prvResetNextTaskUnblockTime();
 8011ca4:	f7ff fd88 	bl	80117b8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011ca8:	4d13      	ldr	r5, [pc, #76]	; (8011cf8 <xTaskResumeAll+0xfc>)
 8011caa:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011cac:	b144      	cbz	r4, 8011cc0 <xTaskResumeAll+0xc4>
								xYieldPending = pdTRUE;
 8011cae:	4e11      	ldr	r6, [pc, #68]	; (8011cf4 <xTaskResumeAll+0xf8>)
 8011cb0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8011cb2:	f7ff feef 	bl	8011a94 <xTaskIncrementTick>
 8011cb6:	b100      	cbz	r0, 8011cba <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
 8011cb8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011cba:	3c01      	subs	r4, #1
 8011cbc:	d1f9      	bne.n	8011cb2 <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
 8011cbe:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8011cc0:	4b0c      	ldr	r3, [pc, #48]	; (8011cf4 <xTaskResumeAll+0xf8>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d0ae      	beq.n	8011c26 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8011cc8:	4b0c      	ldr	r3, [pc, #48]	; (8011cfc <xTaskResumeAll+0x100>)
 8011cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cce:	601a      	str	r2, [r3, #0]
 8011cd0:	f3bf 8f4f 	dsb	sy
 8011cd4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8011cd8:	2401      	movs	r4, #1
 8011cda:	e7a5      	b.n	8011c28 <xTaskResumeAll+0x2c>
 8011cdc:	2400146c 	.word	0x2400146c
 8011ce0:	24001460 	.word	0x24001460
 8011ce4:	240014a8 	.word	0x240014a8
 8011ce8:	24001474 	.word	0x24001474
 8011cec:	24001000 	.word	0x24001000
 8011cf0:	24000ff4 	.word	0x24000ff4
 8011cf4:	240014ec 	.word	0x240014ec
 8011cf8:	24001468 	.word	0x24001468
 8011cfc:	e000ed04 	.word	0xe000ed04
 8011d00:	24000010 	.word	0x24000010

08011d04 <vTaskDelayUntil>:
	{
 8011d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxPreviousWakeTime );
 8011d06:	b940      	cbnz	r0, 8011d1a <vTaskDelayUntil+0x16>
 8011d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d0c:	f383 8811 	msr	BASEPRI, r3
 8011d10:	f3bf 8f6f 	isb	sy
 8011d14:	f3bf 8f4f 	dsb	sy
 8011d18:	e7fe      	b.n	8011d18 <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 8011d1a:	b941      	cbnz	r1, 8011d2e <vTaskDelayUntil+0x2a>
 8011d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d20:	f383 8811 	msr	BASEPRI, r3
 8011d24:	f3bf 8f6f 	isb	sy
 8011d28:	f3bf 8f4f 	dsb	sy
 8011d2c:	e7fe      	b.n	8011d2c <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 8011d2e:	4b26      	ldr	r3, [pc, #152]	; (8011dc8 <vTaskDelayUntil+0xc4>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	b143      	cbz	r3, 8011d46 <vTaskDelayUntil+0x42>
 8011d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d38:	f383 8811 	msr	BASEPRI, r3
 8011d3c:	f3bf 8f6f 	isb	sy
 8011d40:	f3bf 8f4f 	dsb	sy
 8011d44:	e7fe      	b.n	8011d44 <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 8011d46:	f7ff fe8f 	bl	8011a68 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8011d4a:	4b20      	ldr	r3, [pc, #128]	; (8011dcc <vTaskDelayUntil+0xc8>)
 8011d4c:	681e      	ldr	r6, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8011d4e:	6803      	ldr	r3, [r0, #0]
 8011d50:	185c      	adds	r4, r3, r1
 8011d52:	bf2c      	ite	cs
 8011d54:	2201      	movcs	r2, #1
 8011d56:	2200      	movcc	r2, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8011d58:	42b3      	cmp	r3, r6
			*pxPreviousWakeTime = xTimeToWake;
 8011d5a:	6004      	str	r4, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 8011d5c:	d90c      	bls.n	8011d78 <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8011d5e:	b962      	cbnz	r2, 8011d7a <vTaskDelayUntil+0x76>
		xAlreadyYielded = xTaskResumeAll();
 8011d60:	f7ff ff4c 	bl	8011bfc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8011d64:	b938      	cbnz	r0, 8011d76 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
 8011d66:	4b1a      	ldr	r3, [pc, #104]	; (8011dd0 <vTaskDelayUntil+0xcc>)
 8011d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d6c:	601a      	str	r2, [r3, #0]
 8011d6e:	f3bf 8f4f 	dsb	sy
 8011d72:	f3bf 8f6f 	isb	sy
	}
 8011d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8011d78:	b90a      	cbnz	r2, 8011d7e <vTaskDelayUntil+0x7a>
 8011d7a:	42a6      	cmp	r6, r4
 8011d7c:	d2f0      	bcs.n	8011d60 <vTaskDelayUntil+0x5c>
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8011d7e:	4f15      	ldr	r7, [pc, #84]	; (8011dd4 <vTaskDelayUntil+0xd0>)
 8011d80:	4d15      	ldr	r5, [pc, #84]	; (8011dd8 <vTaskDelayUntil+0xd4>)
 8011d82:	6838      	ldr	r0, [r7, #0]
 8011d84:	f7f2 fd95 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8011d88:	882a      	ldrh	r2, [r5, #0]
 8011d8a:	4210      	tst	r0, r2
 8011d8c:	d009      	beq.n	8011da2 <vTaskDelayUntil+0x9e>
 8011d8e:	4621      	mov	r1, r4
 8011d90:	2088      	movs	r0, #136	; 0x88
 8011d92:	f7f3 fccb 	bl	800572c <prvTraceStoreKernelCallWithNumericParamOnly>
 8011d96:	6838      	ldr	r0, [r7, #0]
 8011d98:	f7f2 fd86 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8011d9c:	b2c0      	uxtb	r0, r0
 8011d9e:	f7f3 f957 	bl	8005050 <prvTraceSetTaskInstanceFinished>
 8011da2:	f7f2 fe1f 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8011da6:	f7f2 fd84 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8011daa:	882b      	ldrh	r3, [r5, #0]
 8011dac:	4218      	tst	r0, r3
 8011dae:	d006      	beq.n	8011dbe <vTaskDelayUntil+0xba>
 8011db0:	f7f2 fe18 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8011db4:	f7f2 fd78 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8011db8:	b2c0      	uxtb	r0, r0
 8011dba:	f7f3 f949 	bl	8005050 <prvTraceSetTaskInstanceFinished>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8011dbe:	2100      	movs	r1, #0
 8011dc0:	1ba0      	subs	r0, r4, r6
 8011dc2:	f7ff fd57 	bl	8011874 <prvAddCurrentTaskToDelayedList>
 8011dc6:	e7cb      	b.n	8011d60 <vTaskDelayUntil+0x5c>
 8011dc8:	2400146c 	.word	0x2400146c
 8011dcc:	240014e8 	.word	0x240014e8
 8011dd0:	e000ed04 	.word	0xe000ed04
 8011dd4:	24000ff4 	.word	0x24000ff4
 8011dd8:	24000010 	.word	0x24000010

08011ddc <vTaskDelay>:
	{
 8011ddc:	b570      	push	{r4, r5, r6, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011dde:	4605      	mov	r5, r0
 8011de0:	b940      	cbnz	r0, 8011df4 <vTaskDelay+0x18>
			portYIELD_WITHIN_API();
 8011de2:	4b20      	ldr	r3, [pc, #128]	; (8011e64 <vTaskDelay+0x88>)
 8011de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011de8:	601a      	str	r2, [r3, #0]
 8011dea:	f3bf 8f4f 	dsb	sy
 8011dee:	f3bf 8f6f 	isb	sy
	}
 8011df2:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8011df4:	4b1c      	ldr	r3, [pc, #112]	; (8011e68 <vTaskDelay+0x8c>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	b143      	cbz	r3, 8011e0c <vTaskDelay+0x30>
 8011dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dfe:	f383 8811 	msr	BASEPRI, r3
 8011e02:	f3bf 8f6f 	isb	sy
 8011e06:	f3bf 8f4f 	dsb	sy
 8011e0a:	e7fe      	b.n	8011e0a <vTaskDelay+0x2e>
				traceTASK_DELAY();
 8011e0c:	4e17      	ldr	r6, [pc, #92]	; (8011e6c <vTaskDelay+0x90>)
			vTaskSuspendAll();
 8011e0e:	f7ff fe2b 	bl	8011a68 <vTaskSuspendAll>
				traceTASK_DELAY();
 8011e12:	4c17      	ldr	r4, [pc, #92]	; (8011e70 <vTaskDelay+0x94>)
 8011e14:	6830      	ldr	r0, [r6, #0]
 8011e16:	f7f2 fd4c 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8011e1a:	8822      	ldrh	r2, [r4, #0]
 8011e1c:	4210      	tst	r0, r2
 8011e1e:	d009      	beq.n	8011e34 <vTaskDelay+0x58>
 8011e20:	4629      	mov	r1, r5
 8011e22:	2089      	movs	r0, #137	; 0x89
 8011e24:	f7f3 fc82 	bl	800572c <prvTraceStoreKernelCallWithNumericParamOnly>
 8011e28:	6830      	ldr	r0, [r6, #0]
 8011e2a:	f7f2 fd3d 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8011e2e:	b2c0      	uxtb	r0, r0
 8011e30:	f7f3 f90e 	bl	8005050 <prvTraceSetTaskInstanceFinished>
 8011e34:	f7f2 fdd6 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8011e38:	f7f2 fd3b 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8011e3c:	8823      	ldrh	r3, [r4, #0]
 8011e3e:	4218      	tst	r0, r3
 8011e40:	d006      	beq.n	8011e50 <vTaskDelay+0x74>
 8011e42:	f7f2 fdcf 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8011e46:	f7f2 fd2f 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8011e4a:	b2c0      	uxtb	r0, r0
 8011e4c:	f7f3 f900 	bl	8005050 <prvTraceSetTaskInstanceFinished>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011e50:	2100      	movs	r1, #0
 8011e52:	4628      	mov	r0, r5
 8011e54:	f7ff fd0e 	bl	8011874 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8011e58:	f7ff fed0 	bl	8011bfc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8011e5c:	2800      	cmp	r0, #0
 8011e5e:	d0c0      	beq.n	8011de2 <vTaskDelay+0x6>
 8011e60:	e7c7      	b.n	8011df2 <vTaskDelay+0x16>
 8011e62:	bf00      	nop
 8011e64:	e000ed04 	.word	0xe000ed04
 8011e68:	2400146c 	.word	0x2400146c
 8011e6c:	24000ff4 	.word	0x24000ff4
 8011e70:	24000010 	.word	0x24000010

08011e74 <vTaskSwitchContext>:
{
 8011e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011e76:	4b22      	ldr	r3, [pc, #136]	; (8011f00 <vTaskSwitchContext+0x8c>)
 8011e78:	681a      	ldr	r2, [r3, #0]
 8011e7a:	4b22      	ldr	r3, [pc, #136]	; (8011f04 <vTaskSwitchContext+0x90>)
 8011e7c:	b112      	cbz	r2, 8011e84 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8011e7e:	2201      	movs	r2, #1
 8011e80:	601a      	str	r2, [r3, #0]
}
 8011e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8011e84:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e86:	2714      	movs	r7, #20
 8011e88:	4d1f      	ldr	r5, [pc, #124]	; (8011f08 <vTaskSwitchContext+0x94>)
 8011e8a:	4a20      	ldr	r2, [pc, #128]	; (8011f0c <vTaskSwitchContext+0x98>)
 8011e8c:	682b      	ldr	r3, [r5, #0]
 8011e8e:	4616      	mov	r6, r2
 8011e90:	fb07 f103 	mul.w	r1, r7, r3
 8011e94:	5854      	ldr	r4, [r2, r1]
 8011e96:	1850      	adds	r0, r2, r1
 8011e98:	b334      	cbz	r4, 8011ee8 <vTaskSwitchContext+0x74>
 8011e9a:	6844      	ldr	r4, [r0, #4]
 8011e9c:	3108      	adds	r1, #8
 8011e9e:	6864      	ldr	r4, [r4, #4]
 8011ea0:	440a      	add	r2, r1
 8011ea2:	4294      	cmp	r4, r2
 8011ea4:	6044      	str	r4, [r0, #4]
 8011ea6:	bf08      	it	eq
 8011ea8:	6862      	ldreq	r2, [r4, #4]
		traceTASK_SWITCHED_IN();
 8011eaa:	4c19      	ldr	r4, [pc, #100]	; (8011f10 <vTaskSwitchContext+0x9c>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011eac:	bf08      	it	eq
 8011eae:	6042      	streq	r2, [r0, #4]
 8011eb0:	2214      	movs	r2, #20
 8011eb2:	fb02 6203 	mla	r2, r2, r3, r6
 8011eb6:	6852      	ldr	r2, [r2, #4]
 8011eb8:	68d1      	ldr	r1, [r2, #12]
 8011eba:	4a16      	ldr	r2, [pc, #88]	; (8011f14 <vTaskSwitchContext+0xa0>)
 8011ebc:	6011      	str	r1, [r2, #0]
 8011ebe:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	6023      	str	r3, [r4, #0]
 8011ec4:	f7f2 fd8e 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8011ec8:	f7f2 fcf3 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8011ecc:	4b12      	ldr	r3, [pc, #72]	; (8011f18 <vTaskSwitchContext+0xa4>)
 8011ece:	881b      	ldrh	r3, [r3, #0]
 8011ed0:	4218      	tst	r0, r3
 8011ed2:	d006      	beq.n	8011ee2 <vTaskSwitchContext+0x6e>
 8011ed4:	f7f2 fd86 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8011ed8:	f7f2 fce6 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8011edc:	b2c0      	uxtb	r0, r0
 8011ede:	f7f3 fc6b 	bl	80057b8 <prvTraceStoreTaskswitch>
 8011ee2:	2302      	movs	r3, #2
 8011ee4:	6023      	str	r3, [r4, #0]
}
 8011ee6:	e7cc      	b.n	8011e82 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ee8:	b943      	cbnz	r3, 8011efc <vTaskSwitchContext+0x88>
 8011eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eee:	f383 8811 	msr	BASEPRI, r3
 8011ef2:	f3bf 8f6f 	isb	sy
 8011ef6:	f3bf 8f4f 	dsb	sy
 8011efa:	e7fe      	b.n	8011efa <vTaskSwitchContext+0x86>
 8011efc:	3b01      	subs	r3, #1
 8011efe:	e7c7      	b.n	8011e90 <vTaskSwitchContext+0x1c>
 8011f00:	2400146c 	.word	0x2400146c
 8011f04:	240014ec 	.word	0x240014ec
 8011f08:	24001474 	.word	0x24001474
 8011f0c:	24001000 	.word	0x24001000
 8011f10:	240008f0 	.word	0x240008f0
 8011f14:	24000ff4 	.word	0x24000ff4
 8011f18:	24000010 	.word	0x24000010

08011f1c <vTaskPlaceOnEventList>:
{
 8011f1c:	b510      	push	{r4, lr}
 8011f1e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8011f20:	b940      	cbnz	r0, 8011f34 <vTaskPlaceOnEventList+0x18>
 8011f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f26:	f383 8811 	msr	BASEPRI, r3
 8011f2a:	f3bf 8f6f 	isb	sy
 8011f2e:	f3bf 8f4f 	dsb	sy
 8011f32:	e7fe      	b.n	8011f32 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011f34:	4b05      	ldr	r3, [pc, #20]	; (8011f4c <vTaskPlaceOnEventList+0x30>)
 8011f36:	6819      	ldr	r1, [r3, #0]
 8011f38:	3118      	adds	r1, #24
 8011f3a:	f7fe f96d 	bl	8010218 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011f3e:	4620      	mov	r0, r4
 8011f40:	2101      	movs	r1, #1
}
 8011f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011f46:	f7ff bc95 	b.w	8011874 <prvAddCurrentTaskToDelayedList>
 8011f4a:	bf00      	nop
 8011f4c:	24000ff4 	.word	0x24000ff4

08011f50 <vTaskPlaceOnEventListRestricted>:
	{
 8011f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f52:	460c      	mov	r4, r1
 8011f54:	4617      	mov	r7, r2
		configASSERT( pxEventList );
 8011f56:	b940      	cbnz	r0, 8011f6a <vTaskPlaceOnEventListRestricted+0x1a>
 8011f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f5c:	f383 8811 	msr	BASEPRI, r3
 8011f60:	f3bf 8f6f 	isb	sy
 8011f64:	f3bf 8f4f 	dsb	sy
 8011f68:	e7fe      	b.n	8011f68 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011f6a:	4e18      	ldr	r6, [pc, #96]	; (8011fcc <vTaskPlaceOnEventListRestricted+0x7c>)
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8011f6c:	4d18      	ldr	r5, [pc, #96]	; (8011fd0 <vTaskPlaceOnEventListRestricted+0x80>)
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011f6e:	6831      	ldr	r1, [r6, #0]
 8011f70:	3118      	adds	r1, #24
 8011f72:	f7fe f945 	bl	8010200 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8011f76:	2f00      	cmp	r7, #0
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8011f78:	6830      	ldr	r0, [r6, #0]
			xTicksToWait = portMAX_DELAY;
 8011f7a:	bf18      	it	ne
 8011f7c:	f04f 34ff 	movne.w	r4, #4294967295
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8011f80:	f7f2 fc97 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8011f84:	882a      	ldrh	r2, [r5, #0]
 8011f86:	4210      	tst	r0, r2
 8011f88:	d00b      	beq.n	8011fa2 <vTaskPlaceOnEventListRestricted+0x52>
 8011f8a:	4b12      	ldr	r3, [pc, #72]	; (8011fd4 <vTaskPlaceOnEventListRestricted+0x84>)
 8011f8c:	2088      	movs	r0, #136	; 0x88
 8011f8e:	6819      	ldr	r1, [r3, #0]
 8011f90:	4421      	add	r1, r4
 8011f92:	f7f3 fbcb 	bl	800572c <prvTraceStoreKernelCallWithNumericParamOnly>
 8011f96:	6830      	ldr	r0, [r6, #0]
 8011f98:	f7f2 fc86 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8011f9c:	b2c0      	uxtb	r0, r0
 8011f9e:	f7f3 f857 	bl	8005050 <prvTraceSetTaskInstanceFinished>
 8011fa2:	f7f2 fd1f 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8011fa6:	f7f2 fc84 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8011faa:	882b      	ldrh	r3, [r5, #0]
 8011fac:	4218      	tst	r0, r3
 8011fae:	d006      	beq.n	8011fbe <vTaskPlaceOnEventListRestricted+0x6e>
 8011fb0:	f7f2 fd18 	bl	80049e4 <prvTraceGetCurrentTaskHandle>
 8011fb4:	f7f2 fc78 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8011fb8:	b2c0      	uxtb	r0, r0
 8011fba:	f7f3 f849 	bl	8005050 <prvTraceSetTaskInstanceFinished>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011fbe:	4639      	mov	r1, r7
 8011fc0:	4620      	mov	r0, r4
	}
 8011fc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011fc6:	f7ff bc55 	b.w	8011874 <prvAddCurrentTaskToDelayedList>
 8011fca:	bf00      	nop
 8011fcc:	24000ff4 	.word	0x24000ff4
 8011fd0:	24000010 	.word	0x24000010
 8011fd4:	240014e8 	.word	0x240014e8

08011fd8 <xTaskRemoveFromEventList>:
{
 8011fd8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fda:	68c3      	ldr	r3, [r0, #12]
 8011fdc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8011fde:	b944      	cbnz	r4, 8011ff2 <xTaskRemoveFromEventList+0x1a>
 8011fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fe4:	f383 8811 	msr	BASEPRI, r3
 8011fe8:	f3bf 8f6f 	isb	sy
 8011fec:	f3bf 8f4f 	dsb	sy
 8011ff0:	e7fe      	b.n	8011ff0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011ff2:	f104 0518 	add.w	r5, r4, #24
 8011ff6:	4628      	mov	r0, r5
 8011ff8:	f7fe f925 	bl	8010246 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ffc:	4b17      	ldr	r3, [pc, #92]	; (801205c <xTaskRemoveFromEventList+0x84>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	bb3b      	cbnz	r3, 8012052 <xTaskRemoveFromEventList+0x7a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012002:	1d25      	adds	r5, r4, #4
 8012004:	4628      	mov	r0, r5
 8012006:	f7fe f91e 	bl	8010246 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801200a:	4620      	mov	r0, r4
 801200c:	f7f2 fc51 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 8012010:	4b13      	ldr	r3, [pc, #76]	; (8012060 <xTaskRemoveFromEventList+0x88>)
 8012012:	881b      	ldrh	r3, [r3, #0]
 8012014:	4218      	tst	r0, r3
 8012016:	d005      	beq.n	8012024 <xTaskRemoveFromEventList+0x4c>
 8012018:	4620      	mov	r0, r4
 801201a:	f7f2 fc45 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 801201e:	b2c0      	uxtb	r0, r0
 8012020:	f7f3 fa44 	bl	80054ac <prvTraceStoreTaskReady>
 8012024:	4a0f      	ldr	r2, [pc, #60]	; (8012064 <xTaskRemoveFromEventList+0x8c>)
 8012026:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012028:	6811      	ldr	r1, [r2, #0]
 801202a:	428b      	cmp	r3, r1
 801202c:	d900      	bls.n	8012030 <xTaskRemoveFromEventList+0x58>
 801202e:	6013      	str	r3, [r2, #0]
 8012030:	4a0d      	ldr	r2, [pc, #52]	; (8012068 <xTaskRemoveFromEventList+0x90>)
 8012032:	2014      	movs	r0, #20
 8012034:	4629      	mov	r1, r5
 8012036:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801203a:	f7fe f8e1 	bl	8010200 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801203e:	4b0b      	ldr	r3, [pc, #44]	; (801206c <xTaskRemoveFromEventList+0x94>)
 8012040:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012046:	429a      	cmp	r2, r3
 8012048:	d906      	bls.n	8012058 <xTaskRemoveFromEventList+0x80>
		xYieldPending = pdTRUE;
 801204a:	2001      	movs	r0, #1
 801204c:	4b08      	ldr	r3, [pc, #32]	; (8012070 <xTaskRemoveFromEventList+0x98>)
 801204e:	6018      	str	r0, [r3, #0]
}
 8012050:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012052:	4629      	mov	r1, r5
 8012054:	4807      	ldr	r0, [pc, #28]	; (8012074 <xTaskRemoveFromEventList+0x9c>)
 8012056:	e7f0      	b.n	801203a <xTaskRemoveFromEventList+0x62>
		xReturn = pdFALSE;
 8012058:	2000      	movs	r0, #0
	return xReturn;
 801205a:	e7f9      	b.n	8012050 <xTaskRemoveFromEventList+0x78>
 801205c:	2400146c 	.word	0x2400146c
 8012060:	24000010 	.word	0x24000010
 8012064:	24001474 	.word	0x24001474
 8012068:	24001000 	.word	0x24001000
 801206c:	24000ff4 	.word	0x24000ff4
 8012070:	240014ec 	.word	0x240014ec
 8012074:	240014a8 	.word	0x240014a8

08012078 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012078:	4b03      	ldr	r3, [pc, #12]	; (8012088 <vTaskInternalSetTimeOutState+0x10>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801207e:	4b03      	ldr	r3, [pc, #12]	; (801208c <vTaskInternalSetTimeOutState+0x14>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	6043      	str	r3, [r0, #4]
}
 8012084:	4770      	bx	lr
 8012086:	bf00      	nop
 8012088:	240014a4 	.word	0x240014a4
 801208c:	240014e8 	.word	0x240014e8

08012090 <xTaskCheckForTimeOut>:
{
 8012090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012092:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8012094:	4605      	mov	r5, r0
 8012096:	b940      	cbnz	r0, 80120aa <xTaskCheckForTimeOut+0x1a>
 8012098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801209c:	f383 8811 	msr	BASEPRI, r3
 80120a0:	f3bf 8f6f 	isb	sy
 80120a4:	f3bf 8f4f 	dsb	sy
 80120a8:	e7fe      	b.n	80120a8 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80120aa:	b941      	cbnz	r1, 80120be <xTaskCheckForTimeOut+0x2e>
 80120ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b0:	f383 8811 	msr	BASEPRI, r3
 80120b4:	f3bf 8f6f 	isb	sy
 80120b8:	f3bf 8f4f 	dsb	sy
 80120bc:	e7fe      	b.n	80120bc <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80120be:	f000 fc29 	bl	8012914 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80120c2:	4b0f      	ldr	r3, [pc, #60]	; (8012100 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80120c4:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 80120c6:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80120c8:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80120ca:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 80120cc:	1c5e      	adds	r6, r3, #1
 80120ce:	d00d      	beq.n	80120ec <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80120d0:	4e0c      	ldr	r6, [pc, #48]	; (8012104 <xTaskCheckForTimeOut+0x74>)
 80120d2:	682f      	ldr	r7, [r5, #0]
 80120d4:	6836      	ldr	r6, [r6, #0]
 80120d6:	42b7      	cmp	r7, r6
 80120d8:	d001      	beq.n	80120de <xTaskCheckForTimeOut+0x4e>
 80120da:	4288      	cmp	r0, r1
 80120dc:	d90d      	bls.n	80120fa <xTaskCheckForTimeOut+0x6a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80120de:	4293      	cmp	r3, r2
 80120e0:	d909      	bls.n	80120f6 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 80120e2:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 80120e4:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80120e6:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80120e8:	f7ff ffc6 	bl	8012078 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80120ec:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80120ee:	f000 fc33 	bl	8012958 <vPortExitCritical>
}
 80120f2:	4620      	mov	r0, r4
 80120f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 80120f6:	2300      	movs	r3, #0
 80120f8:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80120fa:	2401      	movs	r4, #1
 80120fc:	e7f7      	b.n	80120ee <xTaskCheckForTimeOut+0x5e>
 80120fe:	bf00      	nop
 8012100:	240014e8 	.word	0x240014e8
 8012104:	240014a4 	.word	0x240014a4

08012108 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8012108:	4b01      	ldr	r3, [pc, #4]	; (8012110 <vTaskMissedYield+0x8>)
 801210a:	2201      	movs	r2, #1
 801210c:	601a      	str	r2, [r3, #0]
}
 801210e:	4770      	bx	lr
 8012110:	240014ec 	.word	0x240014ec

08012114 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
 8012114:	b100      	cbz	r0, 8012118 <uxTaskGetTaskNumber+0x4>
			uxReturn = pxTCB->uxTaskNumber;
 8012116:	6c80      	ldr	r0, [r0, #72]	; 0x48
	}
 8012118:	4770      	bx	lr

0801211a <vTaskSetTaskNumber>:
		if( xTask != NULL )
 801211a:	b100      	cbz	r0, 801211e <vTaskSetTaskNumber+0x4>
			pxTCB->uxTaskNumber = uxHandle;
 801211c:	6481      	str	r1, [r0, #72]	; 0x48
	}
 801211e:	4770      	bx	lr

08012120 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 8012120:	b908      	cbnz	r0, 8012126 <uxTaskGetStackHighWaterMark+0x6>
 8012122:	4b06      	ldr	r3, [pc, #24]	; (801213c <uxTaskGetStackHighWaterMark+0x1c>)
 8012124:	6818      	ldr	r0, [r3, #0]
 8012126:	6b02      	ldr	r2, [r0, #48]	; 0x30
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8012128:	4613      	mov	r3, r2
 801212a:	1a98      	subs	r0, r3, r2
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801212c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8012130:	29a5      	cmp	r1, #165	; 0xa5
 8012132:	d0fa      	beq.n	801212a <uxTaskGetStackHighWaterMark+0xa>
	}
 8012134:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8012138:	4770      	bx	lr
 801213a:	bf00      	nop
 801213c:	24000ff4 	.word	0x24000ff4

08012140 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8012140:	4b01      	ldr	r3, [pc, #4]	; (8012148 <xTaskGetCurrentTaskHandle+0x8>)
 8012142:	6818      	ldr	r0, [r3, #0]
	}
 8012144:	4770      	bx	lr
 8012146:	bf00      	nop
 8012148:	24000ff4 	.word	0x24000ff4

0801214c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 801214c:	4b05      	ldr	r3, [pc, #20]	; (8012164 <xTaskGetSchedulerState+0x18>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	b133      	cbz	r3, 8012160 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012152:	4b05      	ldr	r3, [pc, #20]	; (8012168 <xTaskGetSchedulerState+0x1c>)
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8012158:	bf0c      	ite	eq
 801215a:	2002      	moveq	r0, #2
 801215c:	2000      	movne	r0, #0
 801215e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012160:	2001      	movs	r0, #1
	}
 8012162:	4770      	bx	lr
 8012164:	240014bc 	.word	0x240014bc
 8012168:	2400146c 	.word	0x2400146c

0801216c <xTaskPriorityInherit>:
	{
 801216c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8012170:	4604      	mov	r4, r0
 8012172:	2800      	cmp	r0, #0
 8012174:	d066      	beq.n	8012244 <xTaskPriorityInherit+0xd8>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012176:	4a34      	ldr	r2, [pc, #208]	; (8012248 <xTaskPriorityInherit+0xdc>)
 8012178:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801217a:	6811      	ldr	r1, [r2, #0]
 801217c:	4615      	mov	r5, r2
 801217e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8012180:	428b      	cmp	r3, r1
 8012182:	d258      	bcs.n	8012236 <xTaskPriorityInherit+0xca>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012184:	6982      	ldr	r2, [r0, #24]
 8012186:	2a00      	cmp	r2, #0
 8012188:	db04      	blt.n	8012194 <xTaskPriorityInherit+0x28>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801218a:	682a      	ldr	r2, [r5, #0]
 801218c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801218e:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8012192:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012194:	2214      	movs	r2, #20
 8012196:	4f2d      	ldr	r7, [pc, #180]	; (801224c <xTaskPriorityInherit+0xe0>)
 8012198:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8012254 <xTaskPriorityInherit+0xe8>
 801219c:	fb02 7303 	mla	r3, r2, r3, r7
 80121a0:	6962      	ldr	r2, [r4, #20]
 80121a2:	429a      	cmp	r2, r3
 80121a4:	d143      	bne.n	801222e <xTaskPriorityInherit+0xc2>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121a6:	1d26      	adds	r6, r4, #4
 80121a8:	4630      	mov	r0, r6
 80121aa:	f7fe f84c 	bl	8010246 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80121ae:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80121b0:	4620      	mov	r0, r4
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80121b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121b4:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80121b6:	f7f2 fb7c 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 80121ba:	f8b8 3000 	ldrh.w	r3, [r8]
 80121be:	4218      	tst	r0, r3
 80121c0:	d005      	beq.n	80121ce <xTaskPriorityInherit+0x62>
 80121c2:	4620      	mov	r0, r4
 80121c4:	f7f2 fb70 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 80121c8:	b2c0      	uxtb	r0, r0
 80121ca:	f7f3 f96f 	bl	80054ac <prvTraceStoreTaskReady>
 80121ce:	4a20      	ldr	r2, [pc, #128]	; (8012250 <xTaskPriorityInherit+0xe4>)
 80121d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80121d2:	6811      	ldr	r1, [r2, #0]
 80121d4:	428b      	cmp	r3, r1
 80121d6:	d900      	bls.n	80121da <xTaskPriorityInherit+0x6e>
 80121d8:	6013      	str	r3, [r2, #0]
 80121da:	2014      	movs	r0, #20
 80121dc:	4631      	mov	r1, r6
 80121de:	fb00 7003 	mla	r0, r0, r3, r7
 80121e2:	f7fe f80d 	bl	8010200 <vListInsertEnd>
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80121e6:	4620      	mov	r0, r4
 80121e8:	f7f2 fb63 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 80121ec:	f8b8 3000 	ldrh.w	r3, [r8]
 80121f0:	4218      	tst	r0, r3
 80121f2:	d01a      	beq.n	801222a <xTaskPriorityInherit+0xbe>
 80121f4:	4620      	mov	r0, r4
 80121f6:	f7f2 fb57 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 80121fa:	4606      	mov	r6, r0
 80121fc:	4620      	mov	r0, r4
 80121fe:	f7f2 fb53 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8012202:	b2c1      	uxtb	r1, r0
 8012204:	2003      	movs	r0, #3
 8012206:	f7f2 fed7 	bl	8004fb8 <prvTraceGetPriorityProperty>
 801220a:	2103      	movs	r1, #3
 801220c:	4603      	mov	r3, r0
 801220e:	b2f2      	uxtb	r2, r6
 8012210:	208e      	movs	r0, #142	; 0x8e
 8012212:	f7f3 fa33 	bl	800567c <prvTraceStoreKernelCallWithParam>
 8012216:	4620      	mov	r0, r4
 8012218:	f7f2 fb46 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 801221c:	682b      	ldr	r3, [r5, #0]
 801221e:	b2c1      	uxtb	r1, r0
 8012220:	2003      	movs	r0, #3
 8012222:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8012226:	f7f2 fea1 	bl	8004f6c <prvTraceSetPriorityProperty>
				xReturn = pdTRUE;
 801222a:	2001      	movs	r0, #1
		return xReturn;
 801222c:	e00a      	b.n	8012244 <xTaskPriorityInherit+0xd8>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801222e:	682b      	ldr	r3, [r5, #0]
 8012230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012232:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012234:	e7d7      	b.n	80121e6 <xTaskPriorityInherit+0x7a>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012236:	6813      	ldr	r3, [r2, #0]
 8012238:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801223a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801223c:	42a0      	cmp	r0, r4
 801223e:	bf2c      	ite	cs
 8012240:	2000      	movcs	r0, #0
 8012242:	2001      	movcc	r0, #1
	}
 8012244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012248:	24000ff4 	.word	0x24000ff4
 801224c:	24001000 	.word	0x24001000
 8012250:	24001474 	.word	0x24001474
 8012254:	24000010 	.word	0x24000010

08012258 <xTaskPriorityDisinherit>:
	{
 8012258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 801225a:	4604      	mov	r4, r0
 801225c:	b908      	cbnz	r0, 8012262 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 801225e:	2000      	movs	r0, #0
	}
 8012260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8012262:	4b32      	ldr	r3, [pc, #200]	; (801232c <xTaskPriorityDisinherit+0xd4>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	4283      	cmp	r3, r0
 8012268:	d008      	beq.n	801227c <xTaskPriorityDisinherit+0x24>
 801226a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801226e:	f383 8811 	msr	BASEPRI, r3
 8012272:	f3bf 8f6f 	isb	sy
 8012276:	f3bf 8f4f 	dsb	sy
 801227a:	e7fe      	b.n	801227a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 801227c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801227e:	b943      	cbnz	r3, 8012292 <xTaskPriorityDisinherit+0x3a>
 8012280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012284:	f383 8811 	msr	BASEPRI, r3
 8012288:	f3bf 8f6f 	isb	sy
 801228c:	f3bf 8f4f 	dsb	sy
 8012290:	e7fe      	b.n	8012290 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012292:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8012294:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012296:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8012298:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801229a:	4291      	cmp	r1, r2
 801229c:	d0df      	beq.n	801225e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d1dd      	bne.n	801225e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122a2:	1d06      	adds	r6, r0, #4
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80122a4:	4d22      	ldr	r5, [pc, #136]	; (8012330 <xTaskPriorityDisinherit+0xd8>)
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122a6:	4630      	mov	r0, r6
 80122a8:	f7fd ffcd 	bl	8010246 <uxListRemove>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80122ac:	4620      	mov	r0, r4
 80122ae:	f7f2 fb00 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 80122b2:	882a      	ldrh	r2, [r5, #0]
 80122b4:	4210      	tst	r0, r2
 80122b6:	d019      	beq.n	80122ec <xTaskPriorityDisinherit+0x94>
 80122b8:	4620      	mov	r0, r4
 80122ba:	f7f2 faf5 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 80122be:	4607      	mov	r7, r0
 80122c0:	4620      	mov	r0, r4
 80122c2:	f7f2 faf1 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 80122c6:	b2c1      	uxtb	r1, r0
 80122c8:	2003      	movs	r0, #3
 80122ca:	f7f2 fe75 	bl	8004fb8 <prvTraceGetPriorityProperty>
 80122ce:	2103      	movs	r1, #3
 80122d0:	4603      	mov	r3, r0
 80122d2:	b2fa      	uxtb	r2, r7
 80122d4:	208f      	movs	r0, #143	; 0x8f
 80122d6:	f7f3 f9d1 	bl	800567c <prvTraceStoreKernelCallWithParam>
 80122da:	4620      	mov	r0, r4
 80122dc:	f7f2 fae4 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 80122e0:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 80122e4:	b2c1      	uxtb	r1, r0
 80122e6:	2003      	movs	r0, #3
 80122e8:	f7f2 fe40 	bl	8004f6c <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80122ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 80122ee:	4620      	mov	r0, r4
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80122f0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122f2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80122f6:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80122f8:	f7f2 fadb 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 80122fc:	882b      	ldrh	r3, [r5, #0]
 80122fe:	4218      	tst	r0, r3
 8012300:	d005      	beq.n	801230e <xTaskPriorityDisinherit+0xb6>
 8012302:	4620      	mov	r0, r4
 8012304:	f7f2 fad0 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8012308:	b2c0      	uxtb	r0, r0
 801230a:	f7f3 f8cf 	bl	80054ac <prvTraceStoreTaskReady>
 801230e:	4a09      	ldr	r2, [pc, #36]	; (8012334 <xTaskPriorityDisinherit+0xdc>)
 8012310:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012312:	6811      	ldr	r1, [r2, #0]
 8012314:	428b      	cmp	r3, r1
 8012316:	d900      	bls.n	801231a <xTaskPriorityDisinherit+0xc2>
 8012318:	6013      	str	r3, [r2, #0]
 801231a:	4a07      	ldr	r2, [pc, #28]	; (8012338 <xTaskPriorityDisinherit+0xe0>)
 801231c:	2014      	movs	r0, #20
 801231e:	4631      	mov	r1, r6
 8012320:	fb00 2003 	mla	r0, r0, r3, r2
 8012324:	f7fd ff6c 	bl	8010200 <vListInsertEnd>
					xReturn = pdTRUE;
 8012328:	2001      	movs	r0, #1
		return xReturn;
 801232a:	e799      	b.n	8012260 <xTaskPriorityDisinherit+0x8>
 801232c:	24000ff4 	.word	0x24000ff4
 8012330:	24000010 	.word	0x24000010
 8012334:	24001474 	.word	0x24001474
 8012338:	24001000 	.word	0x24001000

0801233c <vTaskPriorityDisinheritAfterTimeout>:
	{
 801233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 801233e:	4604      	mov	r4, r0
 8012340:	2800      	cmp	r0, #0
 8012342:	d070      	beq.n	8012426 <vTaskPriorityDisinheritAfterTimeout+0xea>
			configASSERT( pxTCB->uxMutexesHeld );
 8012344:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012346:	b943      	cbnz	r3, 801235a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8012348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801234c:	f383 8811 	msr	BASEPRI, r3
 8012350:	f3bf 8f6f 	isb	sy
 8012354:	f3bf 8f4f 	dsb	sy
 8012358:	e7fe      	b.n	8012358 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 801235a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801235c:	4291      	cmp	r1, r2
 801235e:	bf38      	it	cc
 8012360:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012362:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8012364:	428a      	cmp	r2, r1
 8012366:	460d      	mov	r5, r1
 8012368:	d05d      	beq.n	8012426 <vTaskPriorityDisinheritAfterTimeout+0xea>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801236a:	2b01      	cmp	r3, #1
 801236c:	d15b      	bne.n	8012426 <vTaskPriorityDisinheritAfterTimeout+0xea>
					configASSERT( pxTCB != pxCurrentTCB );
 801236e:	4b2e      	ldr	r3, [pc, #184]	; (8012428 <vTaskPriorityDisinheritAfterTimeout+0xec>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	4283      	cmp	r3, r0
 8012374:	d108      	bne.n	8012388 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 8012376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801237a:	f383 8811 	msr	BASEPRI, r3
 801237e:	f3bf 8f6f 	isb	sy
 8012382:	f3bf 8f4f 	dsb	sy
 8012386:	e7fe      	b.n	8012386 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8012388:	4e28      	ldr	r6, [pc, #160]	; (801242c <vTaskPriorityDisinheritAfterTimeout+0xf0>)
 801238a:	f7f2 fa92 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 801238e:	8833      	ldrh	r3, [r6, #0]
 8012390:	4218      	tst	r0, r3
 8012392:	d019      	beq.n	80123c8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
 8012394:	4620      	mov	r0, r4
 8012396:	f7f2 fa87 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 801239a:	4607      	mov	r7, r0
 801239c:	4620      	mov	r0, r4
 801239e:	f7f2 fa83 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 80123a2:	b2c1      	uxtb	r1, r0
 80123a4:	2003      	movs	r0, #3
 80123a6:	f7f2 fe07 	bl	8004fb8 <prvTraceGetPriorityProperty>
 80123aa:	2103      	movs	r1, #3
 80123ac:	4603      	mov	r3, r0
 80123ae:	b2fa      	uxtb	r2, r7
 80123b0:	208f      	movs	r0, #143	; 0x8f
 80123b2:	f7f3 f963 	bl	800567c <prvTraceStoreKernelCallWithParam>
 80123b6:	4620      	mov	r0, r4
 80123b8:	f7f2 fa76 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 80123bc:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 80123c0:	b2c1      	uxtb	r1, r0
 80123c2:	2003      	movs	r0, #3
 80123c4:	f7f2 fdd2 	bl	8004f6c <prvTraceSetPriorityProperty>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80123c8:	69a2      	ldr	r2, [r4, #24]
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80123ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80123cc:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80123ce:	4f18      	ldr	r7, [pc, #96]	; (8012430 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80123d0:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 80123d4:	62e5      	str	r5, [r4, #44]	; 0x2c
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123d6:	bfa8      	it	ge
 80123d8:	f1c5 0538 	rsbge	r5, r5, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80123dc:	fb02 7303 	mla	r3, r2, r3, r7
 80123e0:	6962      	ldr	r2, [r4, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123e2:	bfa8      	it	ge
 80123e4:	61a5      	strge	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d11d      	bne.n	8012426 <vTaskPriorityDisinheritAfterTimeout+0xea>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80123ea:	1d25      	adds	r5, r4, #4
 80123ec:	4628      	mov	r0, r5
 80123ee:	f7fd ff2a 	bl	8010246 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80123f2:	4620      	mov	r0, r4
 80123f4:	f7f2 fa5d 	bl	80048b2 <prvTraceGetTaskNumberHigh16>
 80123f8:	8833      	ldrh	r3, [r6, #0]
 80123fa:	4218      	tst	r0, r3
 80123fc:	d005      	beq.n	801240a <vTaskPriorityDisinheritAfterTimeout+0xce>
 80123fe:	4620      	mov	r0, r4
 8012400:	f7f2 fa52 	bl	80048a8 <prvTraceGetTaskNumberLow16>
 8012404:	b2c0      	uxtb	r0, r0
 8012406:	f7f3 f851 	bl	80054ac <prvTraceStoreTaskReady>
 801240a:	4a0a      	ldr	r2, [pc, #40]	; (8012434 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801240c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801240e:	6811      	ldr	r1, [r2, #0]
 8012410:	428b      	cmp	r3, r1
 8012412:	d900      	bls.n	8012416 <vTaskPriorityDisinheritAfterTimeout+0xda>
 8012414:	6013      	str	r3, [r2, #0]
 8012416:	2014      	movs	r0, #20
 8012418:	4629      	mov	r1, r5
 801241a:	fb00 7003 	mla	r0, r0, r3, r7
	}
 801241e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8012422:	f7fd beed 	b.w	8010200 <vListInsertEnd>
	}
 8012426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012428:	24000ff4 	.word	0x24000ff4
 801242c:	24000010 	.word	0x24000010
 8012430:	24001000 	.word	0x24001000
 8012434:	24001474 	.word	0x24001474

08012438 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8012438:	4b04      	ldr	r3, [pc, #16]	; (801244c <pvTaskIncrementMutexHeldCount+0x14>)
 801243a:	681a      	ldr	r2, [r3, #0]
 801243c:	b11a      	cbz	r2, 8012446 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 801243e:	6819      	ldr	r1, [r3, #0]
 8012440:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8012442:	3201      	adds	r2, #1
 8012444:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8012446:	6818      	ldr	r0, [r3, #0]
	}
 8012448:	4770      	bx	lr
 801244a:	bf00      	nop
 801244c:	24000ff4 	.word	0x24000ff4

08012450 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8012452:	4c11      	ldr	r4, [pc, #68]	; (8012498 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8012454:	f000 fa5e 	bl	8012914 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8012458:	6825      	ldr	r5, [r4, #0]
 801245a:	b9bd      	cbnz	r5, 801248c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 801245c:	4f0f      	ldr	r7, [pc, #60]	; (801249c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 801245e:	4e10      	ldr	r6, [pc, #64]	; (80124a0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8012460:	4638      	mov	r0, r7
 8012462:	f7fd febf 	bl	80101e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012466:	4630      	mov	r0, r6
 8012468:	f7fd febc 	bl	80101e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801246c:	4b0d      	ldr	r3, [pc, #52]	; (80124a4 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801246e:	4a0e      	ldr	r2, [pc, #56]	; (80124a8 <prvCheckForValidListAndQueue+0x58>)
 8012470:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8012472:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012474:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8012476:	4b0d      	ldr	r3, [pc, #52]	; (80124ac <prvCheckForValidListAndQueue+0x5c>)
 8012478:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801247a:	9500      	str	r5, [sp, #0]
 801247c:	4b0c      	ldr	r3, [pc, #48]	; (80124b0 <prvCheckForValidListAndQueue+0x60>)
 801247e:	f7fe f81d 	bl	80104bc <xQueueGenericCreateStatic>
 8012482:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012484:	b110      	cbz	r0, 801248c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012486:	490b      	ldr	r1, [pc, #44]	; (80124b4 <prvCheckForValidListAndQueue+0x64>)
 8012488:	f7fe ffae 	bl	80113e8 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 801248c:	b003      	add	sp, #12
 801248e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8012492:	f000 ba61 	b.w	8012958 <vPortExitCritical>
 8012496:	bf00      	nop
 8012498:	24001614 	.word	0x24001614
 801249c:	24001598 	.word	0x24001598
 80124a0:	240015ac 	.word	0x240015ac
 80124a4:	240014f0 	.word	0x240014f0
 80124a8:	240014f8 	.word	0x240014f8
 80124ac:	240014f4 	.word	0x240014f4
 80124b0:	240015c4 	.word	0x240015c4
 80124b4:	080168d4 	.word	0x080168d4

080124b8 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80124b8:	4291      	cmp	r1, r2
{
 80124ba:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80124bc:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80124be:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80124c0:	d80a      	bhi.n	80124d8 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124c2:	1ad2      	subs	r2, r2, r3
 80124c4:	6983      	ldr	r3, [r0, #24]
 80124c6:	429a      	cmp	r2, r3
 80124c8:	d20d      	bcs.n	80124e6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80124ca:	1d01      	adds	r1, r0, #4
 80124cc:	4b07      	ldr	r3, [pc, #28]	; (80124ec <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80124ce:	6818      	ldr	r0, [r3, #0]
 80124d0:	f7fd fea2 	bl	8010218 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80124d4:	2000      	movs	r0, #0
}
 80124d6:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80124d8:	429a      	cmp	r2, r3
 80124da:	d201      	bcs.n	80124e0 <prvInsertTimerInActiveList+0x28>
 80124dc:	4299      	cmp	r1, r3
 80124de:	d202      	bcs.n	80124e6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80124e0:	1d01      	adds	r1, r0, #4
 80124e2:	4b03      	ldr	r3, [pc, #12]	; (80124f0 <prvInsertTimerInActiveList+0x38>)
 80124e4:	e7f3      	b.n	80124ce <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80124e6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80124e8:	e7f5      	b.n	80124d6 <prvInsertTimerInActiveList+0x1e>
 80124ea:	bf00      	nop
 80124ec:	240014f4 	.word	0x240014f4
 80124f0:	240014f0 	.word	0x240014f0

080124f4 <xTimerCreateTimerTask>:
{
 80124f4:	b510      	push	{r4, lr}
 80124f6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80124f8:	f7ff ffaa 	bl	8012450 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80124fc:	4b12      	ldr	r3, [pc, #72]	; (8012548 <xTimerCreateTimerTask+0x54>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	b1b3      	cbz	r3, 8012530 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012502:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012504:	aa07      	add	r2, sp, #28
 8012506:	a906      	add	r1, sp, #24
 8012508:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801250a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801250e:	f7fd fe5d 	bl	80101cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012512:	9b05      	ldr	r3, [sp, #20]
 8012514:	9a07      	ldr	r2, [sp, #28]
 8012516:	9302      	str	r3, [sp, #8]
 8012518:	9b06      	ldr	r3, [sp, #24]
 801251a:	490c      	ldr	r1, [pc, #48]	; (801254c <xTimerCreateTimerTask+0x58>)
 801251c:	9301      	str	r3, [sp, #4]
 801251e:	2302      	movs	r3, #2
 8012520:	480b      	ldr	r0, [pc, #44]	; (8012550 <xTimerCreateTimerTask+0x5c>)
 8012522:	9300      	str	r3, [sp, #0]
 8012524:	4623      	mov	r3, r4
 8012526:	f7ff f9df 	bl	80118e8 <xTaskCreateStatic>
 801252a:	4b0a      	ldr	r3, [pc, #40]	; (8012554 <xTimerCreateTimerTask+0x60>)
 801252c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801252e:	b940      	cbnz	r0, 8012542 <xTimerCreateTimerTask+0x4e>
 8012530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012534:	f383 8811 	msr	BASEPRI, r3
 8012538:	f3bf 8f6f 	isb	sy
 801253c:	f3bf 8f4f 	dsb	sy
 8012540:	e7fe      	b.n	8012540 <xTimerCreateTimerTask+0x4c>
}
 8012542:	2001      	movs	r0, #1
 8012544:	b008      	add	sp, #32
 8012546:	bd10      	pop	{r4, pc}
 8012548:	24001614 	.word	0x24001614
 801254c:	080168d9 	.word	0x080168d9
 8012550:	08012631 	.word	0x08012631
 8012554:	24001618 	.word	0x24001618

08012558 <xTimerGenericCommand>:
{
 8012558:	b530      	push	{r4, r5, lr}
 801255a:	4615      	mov	r5, r2
 801255c:	b085      	sub	sp, #20
 801255e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8012560:	4603      	mov	r3, r0
 8012562:	b940      	cbnz	r0, 8012576 <xTimerGenericCommand+0x1e>
 8012564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012568:	f383 8811 	msr	BASEPRI, r3
 801256c:	f3bf 8f6f 	isb	sy
 8012570:	f3bf 8f4f 	dsb	sy
 8012574:	e7fe      	b.n	8012574 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8012576:	4c0d      	ldr	r4, [pc, #52]	; (80125ac <xTimerGenericCommand+0x54>)
 8012578:	6820      	ldr	r0, [r4, #0]
 801257a:	b178      	cbz	r0, 801259c <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801257c:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801257e:	9302      	str	r3, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012580:	e9cd 1500 	strd	r1, r5, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012584:	dc0c      	bgt.n	80125a0 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012586:	f7ff fde1 	bl	801214c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801258a:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801258c:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801258e:	4669      	mov	r1, sp
 8012590:	6820      	ldr	r0, [r4, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012592:	bf0c      	ite	eq
 8012594:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012596:	461a      	movne	r2, r3
 8012598:	f7fe f84c 	bl	8010634 <xQueueGenericSend>
}
 801259c:	b005      	add	sp, #20
 801259e:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80125a0:	2300      	movs	r3, #0
 80125a2:	4669      	mov	r1, sp
 80125a4:	f7fe fa00 	bl	80109a8 <xQueueGenericSendFromISR>
 80125a8:	e7f8      	b.n	801259c <xTimerGenericCommand+0x44>
 80125aa:	bf00      	nop
 80125ac:	24001614 	.word	0x24001614

080125b0 <prvSwitchTimerLists>:
{
 80125b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80125b4:	4d1c      	ldr	r5, [pc, #112]	; (8012628 <prvSwitchTimerLists+0x78>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80125b6:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80125ba:	682b      	ldr	r3, [r5, #0]
 80125bc:	681a      	ldr	r2, [r3, #0]
 80125be:	b932      	cbnz	r2, 80125ce <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 80125c0:	4a1a      	ldr	r2, [pc, #104]	; (801262c <prvSwitchTimerLists+0x7c>)
 80125c2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80125c4:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80125c6:	6029      	str	r1, [r5, #0]
}
 80125c8:	b002      	add	sp, #8
 80125ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80125ce:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125d0:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80125d2:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80125d4:	1d27      	adds	r7, r4, #4
 80125d6:	4638      	mov	r0, r7
 80125d8:	f7fd fe35 	bl	8010246 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80125dc:	6a23      	ldr	r3, [r4, #32]
 80125de:	4620      	mov	r0, r4
 80125e0:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80125e2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80125e6:	075b      	lsls	r3, r3, #29
 80125e8:	d5e7      	bpl.n	80125ba <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80125ea:	69a3      	ldr	r3, [r4, #24]
 80125ec:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80125ee:	429e      	cmp	r6, r3
 80125f0:	d206      	bcs.n	8012600 <prvSwitchTimerLists+0x50>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80125f2:	6063      	str	r3, [r4, #4]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80125f4:	4639      	mov	r1, r7
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80125f6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80125f8:	6828      	ldr	r0, [r5, #0]
 80125fa:	f7fd fe0d 	bl	8010218 <vListInsert>
 80125fe:	e7dc      	b.n	80125ba <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012600:	2300      	movs	r3, #0
 8012602:	f8cd 8000 	str.w	r8, [sp]
 8012606:	4632      	mov	r2, r6
 8012608:	4620      	mov	r0, r4
 801260a:	4619      	mov	r1, r3
 801260c:	f7ff ffa4 	bl	8012558 <xTimerGenericCommand>
				configASSERT( xResult );
 8012610:	2800      	cmp	r0, #0
 8012612:	d1d2      	bne.n	80125ba <prvSwitchTimerLists+0xa>
 8012614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012618:	f383 8811 	msr	BASEPRI, r3
 801261c:	f3bf 8f6f 	isb	sy
 8012620:	f3bf 8f4f 	dsb	sy
 8012624:	e7fe      	b.n	8012624 <prvSwitchTimerLists+0x74>
 8012626:	bf00      	nop
 8012628:	240014f0 	.word	0x240014f0
 801262c:	240014f4 	.word	0x240014f4

08012630 <prvTimerTask>:
{
 8012630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012634:	4d81      	ldr	r5, [pc, #516]	; (801283c <prvTimerTask+0x20c>)
{
 8012636:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 8012638:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8012848 <prvTimerTask+0x218>
 801263c:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801263e:	682a      	ldr	r2, [r5, #0]
 8012640:	6813      	ldr	r3, [r2, #0]
 8012642:	b353      	cbz	r3, 801269a <prvTimerTask+0x6a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012644:	68d3      	ldr	r3, [r2, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012646:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012648:	f8d3 9000 	ldr.w	r9, [r3]
	if( xTimeNow < xLastTime )
 801264c:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801284c <prvTimerTask+0x21c>
	vTaskSuspendAll();
 8012650:	f7ff fa0a 	bl	8011a68 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8012654:	f7ff fa10 	bl	8011a78 <xTaskGetTickCount>
 8012658:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 801265a:	f8db 3000 	ldr.w	r3, [fp]
 801265e:	465e      	mov	r6, fp
 8012660:	4298      	cmp	r0, r3
 8012662:	d31d      	bcc.n	80126a0 <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 8012664:	f8cb 0000 	str.w	r0, [fp]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012668:	b32c      	cbz	r4, 80126b6 <prvTimerTask+0x86>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801266a:	4b75      	ldr	r3, [pc, #468]	; (8012840 <prvTimerTask+0x210>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	681a      	ldr	r2, [r3, #0]
 8012670:	fab2 f282 	clz	r2, r2
 8012674:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012676:	4b73      	ldr	r3, [pc, #460]	; (8012844 <prvTimerTask+0x214>)
 8012678:	eba9 010a 	sub.w	r1, r9, sl
 801267c:	6818      	ldr	r0, [r3, #0]
 801267e:	f7fe ff63 	bl	8011548 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012682:	f7ff fabb 	bl	8011bfc <xTaskResumeAll>
 8012686:	b988      	cbnz	r0, 80126ac <prvTimerTask+0x7c>
					portYIELD_WITHIN_API();
 8012688:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801268c:	f8c8 3000 	str.w	r3, [r8]
 8012690:	f3bf 8f4f 	dsb	sy
 8012694:	f3bf 8f6f 	isb	sy
 8012698:	e008      	b.n	80126ac <prvTimerTask+0x7c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801269a:	2401      	movs	r4, #1
		xNextExpireTime = ( TickType_t ) 0U;
 801269c:	4699      	mov	r9, r3
 801269e:	e7d5      	b.n	801264c <prvTimerTask+0x1c>
		prvSwitchTimerLists();
 80126a0:	f7ff ff86 	bl	80125b0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80126a4:	f8cb a000 	str.w	sl, [fp]
			( void ) xTaskResumeAll();
 80126a8:	f7ff faa8 	bl	8011bfc <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80126ac:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8012844 <prvTimerTask+0x214>
 80126b0:	f04f 0a00 	mov.w	sl, #0
 80126b4:	e07d      	b.n	80127b2 <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80126b6:	4581      	cmp	r9, r0
 80126b8:	d830      	bhi.n	801271c <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 80126ba:	f7ff fa9f 	bl	8011bfc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	68db      	ldr	r3, [r3, #12]
 80126c2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80126c6:	f10b 0004 	add.w	r0, fp, #4
 80126ca:	f7fd fdbc 	bl	8010246 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80126ce:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
 80126d2:	0758      	lsls	r0, r3, #29
 80126d4:	d519      	bpl.n	801270a <prvTimerTask+0xda>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80126d6:	f8db 1018 	ldr.w	r1, [fp, #24]
 80126da:	464b      	mov	r3, r9
 80126dc:	4652      	mov	r2, sl
 80126de:	4658      	mov	r0, fp
 80126e0:	4449      	add	r1, r9
 80126e2:	f7ff fee9 	bl	80124b8 <prvInsertTimerInActiveList>
 80126e6:	b1a0      	cbz	r0, 8012712 <prvTimerTask+0xe2>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80126e8:	9400      	str	r4, [sp, #0]
 80126ea:	4623      	mov	r3, r4
 80126ec:	464a      	mov	r2, r9
 80126ee:	4621      	mov	r1, r4
 80126f0:	4658      	mov	r0, fp
 80126f2:	f7ff ff31 	bl	8012558 <xTimerGenericCommand>
			configASSERT( xResult );
 80126f6:	b960      	cbnz	r0, 8012712 <prvTimerTask+0xe2>
 80126f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126fc:	f383 8811 	msr	BASEPRI, r3
 8012700:	f3bf 8f6f 	isb	sy
 8012704:	f3bf 8f4f 	dsb	sy
 8012708:	e7fe      	b.n	8012708 <prvTimerTask+0xd8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801270a:	f023 0301 	bic.w	r3, r3, #1
 801270e:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012712:	f8db 3020 	ldr.w	r3, [fp, #32]
 8012716:	4658      	mov	r0, fp
 8012718:	4798      	blx	r3
 801271a:	e7c7      	b.n	80126ac <prvTimerTask+0x7c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801271c:	4622      	mov	r2, r4
 801271e:	e7aa      	b.n	8012676 <prvTimerTask+0x46>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012720:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012724:	465a      	mov	r2, fp
 8012726:	69a1      	ldr	r1, [r4, #24]
 8012728:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801272a:	f043 0301 	orr.w	r3, r3, #1
 801272e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012732:	9b03      	ldr	r3, [sp, #12]
 8012734:	4419      	add	r1, r3
 8012736:	f7ff febf 	bl	80124b8 <prvInsertTimerInActiveList>
 801273a:	2800      	cmp	r0, #0
 801273c:	d039      	beq.n	80127b2 <prvTimerTask+0x182>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801273e:	6a23      	ldr	r3, [r4, #32]
 8012740:	4620      	mov	r0, r4
 8012742:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012744:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012748:	0759      	lsls	r1, r3, #29
 801274a:	d532      	bpl.n	80127b2 <prvTimerTask+0x182>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801274c:	69a2      	ldr	r2, [r4, #24]
 801274e:	2300      	movs	r3, #0
 8012750:	9903      	ldr	r1, [sp, #12]
 8012752:	4620      	mov	r0, r4
 8012754:	f8cd a000 	str.w	sl, [sp]
 8012758:	440a      	add	r2, r1
 801275a:	4619      	mov	r1, r3
 801275c:	f7ff fefc 	bl	8012558 <xTimerGenericCommand>
							configASSERT( xResult );
 8012760:	bb38      	cbnz	r0, 80127b2 <prvTimerTask+0x182>
 8012762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012766:	f383 8811 	msr	BASEPRI, r3
 801276a:	f3bf 8f6f 	isb	sy
 801276e:	f3bf 8f4f 	dsb	sy
 8012772:	e7fe      	b.n	8012772 <prvTimerTask+0x142>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012774:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012778:	f023 0301 	bic.w	r3, r3, #1
 801277c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8012780:	e017      	b.n	80127b2 <prvTimerTask+0x182>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012782:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012786:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012788:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801278c:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801278e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012792:	b941      	cbnz	r1, 80127a6 <prvTimerTask+0x176>
 8012794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012798:	f383 8811 	msr	BASEPRI, r3
 801279c:	f3bf 8f6f 	isb	sy
 80127a0:	f3bf 8f4f 	dsb	sy
 80127a4:	e7fe      	b.n	80127a4 <prvTimerTask+0x174>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80127a6:	465b      	mov	r3, fp
 80127a8:	465a      	mov	r2, fp
 80127aa:	4459      	add	r1, fp
 80127ac:	4620      	mov	r0, r4
 80127ae:	f7ff fe83 	bl	80124b8 <prvInsertTimerInActiveList>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80127b2:	2200      	movs	r2, #0
 80127b4:	a902      	add	r1, sp, #8
 80127b6:	f8d9 0000 	ldr.w	r0, [r9]
 80127ba:	f7fe fa61 	bl	8010c80 <xQueueReceive>
 80127be:	2800      	cmp	r0, #0
 80127c0:	f43f af3d 	beq.w	801263e <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80127c4:	9b02      	ldr	r3, [sp, #8]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	da03      	bge.n	80127d2 <prvTimerTask+0x1a2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80127ca:	9b03      	ldr	r3, [sp, #12]
 80127cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80127d0:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80127d2:	9b02      	ldr	r3, [sp, #8]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	dbec      	blt.n	80127b2 <prvTimerTask+0x182>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80127d8:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80127da:	6963      	ldr	r3, [r4, #20]
 80127dc:	b113      	cbz	r3, 80127e4 <prvTimerTask+0x1b4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80127de:	1d20      	adds	r0, r4, #4
 80127e0:	f7fd fd31 	bl	8010246 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80127e4:	f7ff f948 	bl	8011a78 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80127e8:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 80127ea:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 80127ec:	4298      	cmp	r0, r3
 80127ee:	d201      	bcs.n	80127f4 <prvTimerTask+0x1c4>
		prvSwitchTimerLists();
 80127f0:	f7ff fede 	bl	80125b0 <prvSwitchTimerLists>
			switch( xMessage.xMessageID )
 80127f4:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 80127f6:	f8c6 b000 	str.w	fp, [r6]
			switch( xMessage.xMessageID )
 80127fa:	2b09      	cmp	r3, #9
 80127fc:	d8d9      	bhi.n	80127b2 <prvTimerTask+0x182>
 80127fe:	a201      	add	r2, pc, #4	; (adr r2, 8012804 <prvTimerTask+0x1d4>)
 8012800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012804:	08012721 	.word	0x08012721
 8012808:	08012721 	.word	0x08012721
 801280c:	08012721 	.word	0x08012721
 8012810:	08012775 	.word	0x08012775
 8012814:	08012783 	.word	0x08012783
 8012818:	0801282d 	.word	0x0801282d
 801281c:	08012721 	.word	0x08012721
 8012820:	08012721 	.word	0x08012721
 8012824:	08012775 	.word	0x08012775
 8012828:	08012783 	.word	0x08012783
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801282c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012830:	079a      	lsls	r2, r3, #30
 8012832:	d4a1      	bmi.n	8012778 <prvTimerTask+0x148>
							vPortFree( pxTimer );
 8012834:	4620      	mov	r0, r4
 8012836:	f000 fa75 	bl	8012d24 <vPortFree>
 801283a:	e7ba      	b.n	80127b2 <prvTimerTask+0x182>
 801283c:	240014f0 	.word	0x240014f0
 8012840:	240014f4 	.word	0x240014f4
 8012844:	24001614 	.word	0x24001614
 8012848:	e000ed04 	.word	0xe000ed04
 801284c:	240015c0 	.word	0x240015c0

08012850 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 8012850:	2300      	movs	r3, #0
{
 8012852:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8012854:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012856:	4b0d      	ldr	r3, [pc, #52]	; (801288c <prvTaskExitError+0x3c>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	3301      	adds	r3, #1
 801285c:	d008      	beq.n	8012870 <prvTaskExitError+0x20>
 801285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012862:	f383 8811 	msr	BASEPRI, r3
 8012866:	f3bf 8f6f 	isb	sy
 801286a:	f3bf 8f4f 	dsb	sy
 801286e:	e7fe      	b.n	801286e <prvTaskExitError+0x1e>
 8012870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012874:	f383 8811 	msr	BASEPRI, r3
 8012878:	f3bf 8f6f 	isb	sy
 801287c:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012880:	9b01      	ldr	r3, [sp, #4]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d0fc      	beq.n	8012880 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012886:	b002      	add	sp, #8
 8012888:	4770      	bx	lr
 801288a:	bf00      	nop
 801288c:	24000134 	.word	0x24000134

08012890 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012890:	4808      	ldr	r0, [pc, #32]	; (80128b4 <prvPortStartFirstTask+0x24>)
 8012892:	6800      	ldr	r0, [r0, #0]
 8012894:	6800      	ldr	r0, [r0, #0]
 8012896:	f380 8808 	msr	MSP, r0
 801289a:	f04f 0000 	mov.w	r0, #0
 801289e:	f380 8814 	msr	CONTROL, r0
 80128a2:	b662      	cpsie	i
 80128a4:	b661      	cpsie	f
 80128a6:	f3bf 8f4f 	dsb	sy
 80128aa:	f3bf 8f6f 	isb	sy
 80128ae:	df00      	svc	0
 80128b0:	bf00      	nop
 80128b2:	0000      	.short	0x0000
 80128b4:	e000ed08 	.word	0xe000ed08

080128b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80128b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80128c8 <vPortEnableVFP+0x10>
 80128bc:	6801      	ldr	r1, [r0, #0]
 80128be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80128c2:	6001      	str	r1, [r0, #0]
 80128c4:	4770      	bx	lr
 80128c6:	0000      	.short	0x0000
 80128c8:	e000ed88 	.word	0xe000ed88

080128cc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80128cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80128d0:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80128d4:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80128d8:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80128da:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80128dc:	4b03      	ldr	r3, [pc, #12]	; (80128ec <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80128de:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80128e0:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80128e2:	f06f 0302 	mvn.w	r3, #2
 80128e6:	6203      	str	r3, [r0, #32]
}
 80128e8:	4770      	bx	lr
 80128ea:	bf00      	nop
 80128ec:	08012851 	.word	0x08012851

080128f0 <SVC_Handler>:
	__asm volatile (
 80128f0:	4b07      	ldr	r3, [pc, #28]	; (8012910 <pxCurrentTCBConst2>)
 80128f2:	6819      	ldr	r1, [r3, #0]
 80128f4:	6808      	ldr	r0, [r1, #0]
 80128f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128fa:	f380 8809 	msr	PSP, r0
 80128fe:	f3bf 8f6f 	isb	sy
 8012902:	f04f 0000 	mov.w	r0, #0
 8012906:	f380 8811 	msr	BASEPRI, r0
 801290a:	4770      	bx	lr
 801290c:	f3af 8000 	nop.w

08012910 <pxCurrentTCBConst2>:
 8012910:	24000ff4 	.word	0x24000ff4

08012914 <vPortEnterCritical>:
 8012914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012918:	f383 8811 	msr	BASEPRI, r3
 801291c:	f3bf 8f6f 	isb	sy
 8012920:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8012924:	4a0a      	ldr	r2, [pc, #40]	; (8012950 <vPortEnterCritical+0x3c>)
 8012926:	6813      	ldr	r3, [r2, #0]
 8012928:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801292a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 801292c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801292e:	d10d      	bne.n	801294c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012930:	4b08      	ldr	r3, [pc, #32]	; (8012954 <vPortEnterCritical+0x40>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012938:	d008      	beq.n	801294c <vPortEnterCritical+0x38>
 801293a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801293e:	f383 8811 	msr	BASEPRI, r3
 8012942:	f3bf 8f6f 	isb	sy
 8012946:	f3bf 8f4f 	dsb	sy
 801294a:	e7fe      	b.n	801294a <vPortEnterCritical+0x36>
}
 801294c:	4770      	bx	lr
 801294e:	bf00      	nop
 8012950:	24000134 	.word	0x24000134
 8012954:	e000ed04 	.word	0xe000ed04

08012958 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8012958:	4a08      	ldr	r2, [pc, #32]	; (801297c <vPortExitCritical+0x24>)
 801295a:	6813      	ldr	r3, [r2, #0]
 801295c:	b943      	cbnz	r3, 8012970 <vPortExitCritical+0x18>
 801295e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012962:	f383 8811 	msr	BASEPRI, r3
 8012966:	f3bf 8f6f 	isb	sy
 801296a:	f3bf 8f4f 	dsb	sy
 801296e:	e7fe      	b.n	801296e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8012970:	3b01      	subs	r3, #1
 8012972:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012974:	b90b      	cbnz	r3, 801297a <vPortExitCritical+0x22>
	__asm volatile
 8012976:	f383 8811 	msr	BASEPRI, r3
}
 801297a:	4770      	bx	lr
 801297c:	24000134 	.word	0x24000134

08012980 <PendSV_Handler>:
	__asm volatile
 8012980:	f3ef 8009 	mrs	r0, PSP
 8012984:	f3bf 8f6f 	isb	sy
 8012988:	4b15      	ldr	r3, [pc, #84]	; (80129e0 <pxCurrentTCBConst>)
 801298a:	681a      	ldr	r2, [r3, #0]
 801298c:	f01e 0f10 	tst.w	lr, #16
 8012990:	bf08      	it	eq
 8012992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801299a:	6010      	str	r0, [r2, #0]
 801299c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80129a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80129a4:	f380 8811 	msr	BASEPRI, r0
 80129a8:	f3bf 8f4f 	dsb	sy
 80129ac:	f3bf 8f6f 	isb	sy
 80129b0:	f7ff fa60 	bl	8011e74 <vTaskSwitchContext>
 80129b4:	f04f 0000 	mov.w	r0, #0
 80129b8:	f380 8811 	msr	BASEPRI, r0
 80129bc:	bc09      	pop	{r0, r3}
 80129be:	6819      	ldr	r1, [r3, #0]
 80129c0:	6808      	ldr	r0, [r1, #0]
 80129c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129c6:	f01e 0f10 	tst.w	lr, #16
 80129ca:	bf08      	it	eq
 80129cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80129d0:	f380 8809 	msr	PSP, r0
 80129d4:	f3bf 8f6f 	isb	sy
 80129d8:	4770      	bx	lr
 80129da:	bf00      	nop
 80129dc:	f3af 8000 	nop.w

080129e0 <pxCurrentTCBConst>:
 80129e0:	24000ff4 	.word	0x24000ff4

080129e4 <xPortSysTickHandler>:
{
 80129e4:	b508      	push	{r3, lr}
	__asm volatile
 80129e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ea:	f383 8811 	msr	BASEPRI, r3
 80129ee:	f3bf 8f6f 	isb	sy
 80129f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80129f6:	f7ff f84d 	bl	8011a94 <xTaskIncrementTick>
 80129fa:	b118      	cbz	r0, 8012a04 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80129fc:	4b03      	ldr	r3, [pc, #12]	; (8012a0c <xPortSysTickHandler+0x28>)
 80129fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a02:	601a      	str	r2, [r3, #0]
	__asm volatile
 8012a04:	2300      	movs	r3, #0
 8012a06:	f383 8811 	msr	BASEPRI, r3
}
 8012a0a:	bd08      	pop	{r3, pc}
 8012a0c:	e000ed04 	.word	0xe000ed04

08012a10 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012a10:	2300      	movs	r3, #0
 8012a12:	4a08      	ldr	r2, [pc, #32]	; (8012a34 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012a14:	4908      	ldr	r1, [pc, #32]	; (8012a38 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012a16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012a18:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012a1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012a1e:	4b07      	ldr	r3, [pc, #28]	; (8012a3c <vPortSetupTimerInterrupt+0x2c>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8012a26:	4906      	ldr	r1, [pc, #24]	; (8012a40 <vPortSetupTimerInterrupt+0x30>)
 8012a28:	3b01      	subs	r3, #1
 8012a2a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012a2c:	2307      	movs	r3, #7
 8012a2e:	6013      	str	r3, [r2, #0]
}
 8012a30:	4770      	bx	lr
 8012a32:	bf00      	nop
 8012a34:	e000e010 	.word	0xe000e010
 8012a38:	e000e018 	.word	0xe000e018
 8012a3c:	24000000 	.word	0x24000000
 8012a40:	e000e014 	.word	0xe000e014

08012a44 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012a44:	4b38      	ldr	r3, [pc, #224]	; (8012b28 <xPortStartScheduler+0xe4>)
 8012a46:	4a39      	ldr	r2, [pc, #228]	; (8012b2c <xPortStartScheduler+0xe8>)
{
 8012a48:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012a4a:	6819      	ldr	r1, [r3, #0]
 8012a4c:	4291      	cmp	r1, r2
 8012a4e:	d108      	bne.n	8012a62 <xPortStartScheduler+0x1e>
	__asm volatile
 8012a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a54:	f383 8811 	msr	BASEPRI, r3
 8012a58:	f3bf 8f6f 	isb	sy
 8012a5c:	f3bf 8f4f 	dsb	sy
 8012a60:	e7fe      	b.n	8012a60 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012a62:	681a      	ldr	r2, [r3, #0]
 8012a64:	4b32      	ldr	r3, [pc, #200]	; (8012b30 <xPortStartScheduler+0xec>)
 8012a66:	429a      	cmp	r2, r3
 8012a68:	d108      	bne.n	8012a7c <xPortStartScheduler+0x38>
 8012a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a6e:	f383 8811 	msr	BASEPRI, r3
 8012a72:	f3bf 8f6f 	isb	sy
 8012a76:	f3bf 8f4f 	dsb	sy
 8012a7a:	e7fe      	b.n	8012a7a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012a7c:	4b2d      	ldr	r3, [pc, #180]	; (8012b34 <xPortStartScheduler+0xf0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012a7e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012a80:	781a      	ldrb	r2, [r3, #0]
 8012a82:	b2d2      	uxtb	r2, r2
 8012a84:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012a86:	22ff      	movs	r2, #255	; 0xff
 8012a88:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012a8a:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012a8c:	4a2a      	ldr	r2, [pc, #168]	; (8012b38 <xPortStartScheduler+0xf4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012a94:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012a98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012a9c:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012a9e:	2207      	movs	r2, #7
 8012aa0:	4b26      	ldr	r3, [pc, #152]	; (8012b3c <xPortStartScheduler+0xf8>)
 8012aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012aa4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012aa8:	1e54      	subs	r4, r2, #1
 8012aaa:	0600      	lsls	r0, r0, #24
 8012aac:	d40d      	bmi.n	8012aca <xPortStartScheduler+0x86>
 8012aae:	b101      	cbz	r1, 8012ab2 <xPortStartScheduler+0x6e>
 8012ab0:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8012ab2:	681a      	ldr	r2, [r3, #0]
 8012ab4:	2a03      	cmp	r2, #3
 8012ab6:	d011      	beq.n	8012adc <xPortStartScheduler+0x98>
 8012ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012abc:	f383 8811 	msr	BASEPRI, r3
 8012ac0:	f3bf 8f6f 	isb	sy
 8012ac4:	f3bf 8f4f 	dsb	sy
 8012ac8:	e7fe      	b.n	8012ac8 <xPortStartScheduler+0x84>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012aca:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012ace:	2101      	movs	r1, #1
 8012ad0:	0052      	lsls	r2, r2, #1
 8012ad2:	b2d2      	uxtb	r2, r2
 8012ad4:	f88d 2003 	strb.w	r2, [sp, #3]
 8012ad8:	4622      	mov	r2, r4
 8012ada:	e7e3      	b.n	8012aa4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012adc:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 8012ade:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012ae0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8012ae4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012ae6:	9b01      	ldr	r3, [sp, #4]
 8012ae8:	4a12      	ldr	r2, [pc, #72]	; (8012b34 <xPortStartScheduler+0xf0>)
 8012aea:	b2db      	uxtb	r3, r3
 8012aec:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012aee:	4b14      	ldr	r3, [pc, #80]	; (8012b40 <xPortStartScheduler+0xfc>)
 8012af0:	681a      	ldr	r2, [r3, #0]
 8012af2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8012af6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012af8:	681a      	ldr	r2, [r3, #0]
 8012afa:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8012afe:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8012b00:	f7ff ff86 	bl	8012a10 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8012b04:	4b0f      	ldr	r3, [pc, #60]	; (8012b44 <xPortStartScheduler+0x100>)
 8012b06:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8012b08:	f7ff fed6 	bl	80128b8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012b0c:	4a0e      	ldr	r2, [pc, #56]	; (8012b48 <xPortStartScheduler+0x104>)
 8012b0e:	6813      	ldr	r3, [r2, #0]
 8012b10:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012b14:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8012b16:	f7ff febb 	bl	8012890 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8012b1a:	f7ff f9ab 	bl	8011e74 <vTaskSwitchContext>
	prvTaskExitError();
 8012b1e:	f7ff fe97 	bl	8012850 <prvTaskExitError>
}
 8012b22:	4620      	mov	r0, r4
 8012b24:	b002      	add	sp, #8
 8012b26:	bd10      	pop	{r4, pc}
 8012b28:	e000ed00 	.word	0xe000ed00
 8012b2c:	410fc271 	.word	0x410fc271
 8012b30:	410fc270 	.word	0x410fc270
 8012b34:	e000e400 	.word	0xe000e400
 8012b38:	2400161c 	.word	0x2400161c
 8012b3c:	24001620 	.word	0x24001620
 8012b40:	e000ed20 	.word	0xe000ed20
 8012b44:	24000134 	.word	0x24000134
 8012b48:	e000ef34 	.word	0xe000ef34

08012b4c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012b4c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012b50:	2b0f      	cmp	r3, #15
 8012b52:	d90e      	bls.n	8012b72 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012b54:	4a10      	ldr	r2, [pc, #64]	; (8012b98 <vPortValidateInterruptPriority+0x4c>)
 8012b56:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012b58:	4a10      	ldr	r2, [pc, #64]	; (8012b9c <vPortValidateInterruptPriority+0x50>)
 8012b5a:	7812      	ldrb	r2, [r2, #0]
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d908      	bls.n	8012b72 <vPortValidateInterruptPriority+0x26>
 8012b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b64:	f383 8811 	msr	BASEPRI, r3
 8012b68:	f3bf 8f6f 	isb	sy
 8012b6c:	f3bf 8f4f 	dsb	sy
 8012b70:	e7fe      	b.n	8012b70 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012b72:	4b0b      	ldr	r3, [pc, #44]	; (8012ba0 <vPortValidateInterruptPriority+0x54>)
 8012b74:	4a0b      	ldr	r2, [pc, #44]	; (8012ba4 <vPortValidateInterruptPriority+0x58>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	6812      	ldr	r2, [r2, #0]
 8012b7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012b7e:	4293      	cmp	r3, r2
 8012b80:	d908      	bls.n	8012b94 <vPortValidateInterruptPriority+0x48>
 8012b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b86:	f383 8811 	msr	BASEPRI, r3
 8012b8a:	f3bf 8f6f 	isb	sy
 8012b8e:	f3bf 8f4f 	dsb	sy
 8012b92:	e7fe      	b.n	8012b92 <vPortValidateInterruptPriority+0x46>
	}
 8012b94:	4770      	bx	lr
 8012b96:	bf00      	nop
 8012b98:	e000e3f0 	.word	0xe000e3f0
 8012b9c:	2400161c 	.word	0x2400161c
 8012ba0:	e000ed0c 	.word	0xe000ed0c
 8012ba4:	24001620 	.word	0x24001620

08012ba8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012ba8:	4b0f      	ldr	r3, [pc, #60]	; (8012be8 <prvInsertBlockIntoFreeList+0x40>)
{
 8012baa:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012bac:	681a      	ldr	r2, [r3, #0]
 8012bae:	4282      	cmp	r2, r0
 8012bb0:	d318      	bcc.n	8012be4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012bb2:	685c      	ldr	r4, [r3, #4]
 8012bb4:	1919      	adds	r1, r3, r4
 8012bb6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012bb8:	bf01      	itttt	eq
 8012bba:	6841      	ldreq	r1, [r0, #4]
 8012bbc:	4618      	moveq	r0, r3
 8012bbe:	1909      	addeq	r1, r1, r4
 8012bc0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012bc2:	6844      	ldr	r4, [r0, #4]
 8012bc4:	1901      	adds	r1, r0, r4
 8012bc6:	428a      	cmp	r2, r1
 8012bc8:	d107      	bne.n	8012bda <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012bca:	4908      	ldr	r1, [pc, #32]	; (8012bec <prvInsertBlockIntoFreeList+0x44>)
 8012bcc:	6809      	ldr	r1, [r1, #0]
 8012bce:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012bd0:	bf1f      	itttt	ne
 8012bd2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012bd4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012bd6:	1909      	addne	r1, r1, r4
 8012bd8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012bda:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012bdc:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012bde:	bf18      	it	ne
 8012be0:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012be2:	bd10      	pop	{r4, pc}
 8012be4:	4613      	mov	r3, r2
 8012be6:	e7e1      	b.n	8012bac <prvInsertBlockIntoFreeList+0x4>
 8012be8:	24008e34 	.word	0x24008e34
 8012bec:	24001624 	.word	0x24001624

08012bf0 <pvPortMalloc>:
{
 8012bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bf4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8012bf6:	f7fe ff37 	bl	8011a68 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8012bfa:	4944      	ldr	r1, [pc, #272]	; (8012d0c <pvPortMalloc+0x11c>)
 8012bfc:	4d44      	ldr	r5, [pc, #272]	; (8012d10 <pvPortMalloc+0x120>)
 8012bfe:	680b      	ldr	r3, [r1, #0]
 8012c00:	bb03      	cbnz	r3, 8012c44 <pvPortMalloc+0x54>
	uxAddress = ( size_t ) ucHeap;
 8012c02:	4a44      	ldr	r2, [pc, #272]	; (8012d14 <pvPortMalloc+0x124>)
	xStart.xBlockSize = ( size_t ) 0;
 8012c04:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012c06:	0756      	lsls	r6, r2, #29
 8012c08:	f502 43f0 	add.w	r3, r2, #30720	; 0x7800
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012c0c:	4e42      	ldr	r6, [pc, #264]	; (8012d18 <pvPortMalloc+0x128>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012c0e:	bf14      	ite	ne
 8012c10:	3207      	addne	r2, #7
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012c12:	f44f 43f0 	moveq.w	r3, #30720	; 0x7800
	xStart.xBlockSize = ( size_t ) 0;
 8012c16:	6070      	str	r0, [r6, #4]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012c18:	bf1c      	itt	ne
 8012c1a:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012c1e:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012c20:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012c22:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8012c24:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012c26:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8012c2a:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012c2e:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8012c30:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012c32:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012c36:	4b39      	ldr	r3, [pc, #228]	; (8012d1c <pvPortMalloc+0x12c>)
 8012c38:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012c3a:	4b39      	ldr	r3, [pc, #228]	; (8012d20 <pvPortMalloc+0x130>)
 8012c3c:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012c3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012c42:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012c44:	f8d5 8000 	ldr.w	r8, [r5]
 8012c48:	ea18 0f04 	tst.w	r8, r4
 8012c4c:	d153      	bne.n	8012cf6 <pvPortMalloc+0x106>
			if( xWantedSize > 0 )
 8012c4e:	2c00      	cmp	r4, #0
 8012c50:	d051      	beq.n	8012cf6 <pvPortMalloc+0x106>
				xWantedSize += xHeapStructSize;
 8012c52:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012c54:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012c56:	bf1c      	itt	ne
 8012c58:	f024 0407 	bicne.w	r4, r4, #7
 8012c5c:	3408      	addne	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012c5e:	2c00      	cmp	r4, #0
 8012c60:	d049      	beq.n	8012cf6 <pvPortMalloc+0x106>
 8012c62:	4b2f      	ldr	r3, [pc, #188]	; (8012d20 <pvPortMalloc+0x130>)
 8012c64:	681f      	ldr	r7, [r3, #0]
 8012c66:	4699      	mov	r9, r3
 8012c68:	42a7      	cmp	r7, r4
 8012c6a:	d344      	bcc.n	8012cf6 <pvPortMalloc+0x106>
				pxBlock = xStart.pxNextFreeBlock;
 8012c6c:	4b2a      	ldr	r3, [pc, #168]	; (8012d18 <pvPortMalloc+0x128>)
 8012c6e:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012c70:	6868      	ldr	r0, [r5, #4]
 8012c72:	42a0      	cmp	r0, r4
 8012c74:	d201      	bcs.n	8012c7a <pvPortMalloc+0x8a>
 8012c76:	682a      	ldr	r2, [r5, #0]
 8012c78:	b9aa      	cbnz	r2, 8012ca6 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 8012c7a:	680a      	ldr	r2, [r1, #0]
 8012c7c:	42aa      	cmp	r2, r5
 8012c7e:	d03a      	beq.n	8012cf6 <pvPortMalloc+0x106>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012c80:	682a      	ldr	r2, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012c82:	681e      	ldr	r6, [r3, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012c84:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012c86:	1b03      	subs	r3, r0, r4
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012c88:	3608      	adds	r6, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012c8a:	2b10      	cmp	r3, #16
 8012c8c:	d912      	bls.n	8012cb4 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012c8e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c90:	0742      	lsls	r2, r0, #29
 8012c92:	d00b      	beq.n	8012cac <pvPortMalloc+0xbc>
 8012c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c98:	f383 8811 	msr	BASEPRI, r3
 8012c9c:	f3bf 8f6f 	isb	sy
 8012ca0:	f3bf 8f4f 	dsb	sy
 8012ca4:	e7fe      	b.n	8012ca4 <pvPortMalloc+0xb4>
 8012ca6:	462b      	mov	r3, r5
 8012ca8:	4615      	mov	r5, r2
 8012caa:	e7e1      	b.n	8012c70 <pvPortMalloc+0x80>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012cac:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012cae:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012cb0:	f7ff ff7a 	bl	8012ba8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012cb4:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012cb6:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012cb8:	4918      	ldr	r1, [pc, #96]	; (8012d1c <pvPortMalloc+0x12c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012cba:	1abf      	subs	r7, r7, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012cbc:	ea48 0202 	orr.w	r2, r8, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012cc0:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012cc2:	f8c9 7000 	str.w	r7, [r9]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012cc6:	4287      	cmp	r7, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012cc8:	606a      	str	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012cca:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012ccc:	bf38      	it	cc
 8012cce:	600f      	strcc	r7, [r1, #0]
		traceMALLOC( pvReturn, xWantedSize );
 8012cd0:	b18e      	cbz	r6, 8012cf6 <pvPortMalloc+0x106>
 8012cd2:	4622      	mov	r2, r4
 8012cd4:	4631      	mov	r1, r6
 8012cd6:	2094      	movs	r0, #148	; 0x94
 8012cd8:	f7f2 fc24 	bl	8005524 <vTraceStoreMemMangEvent>
	( void ) xTaskResumeAll();
 8012cdc:	f7fe ff8e 	bl	8011bfc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ce0:	0773      	lsls	r3, r6, #29
 8012ce2:	d00f      	beq.n	8012d04 <pvPortMalloc+0x114>
 8012ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce8:	f383 8811 	msr	BASEPRI, r3
 8012cec:	f3bf 8f6f 	isb	sy
 8012cf0:	f3bf 8f4f 	dsb	sy
 8012cf4:	e7fe      	b.n	8012cf4 <pvPortMalloc+0x104>
		traceMALLOC( pvReturn, xWantedSize );
 8012cf6:	4622      	mov	r2, r4
 8012cf8:	2100      	movs	r1, #0
 8012cfa:	20e8      	movs	r0, #232	; 0xe8
 8012cfc:	2600      	movs	r6, #0
 8012cfe:	f7f2 fc11 	bl	8005524 <vTraceStoreMemMangEvent>
 8012d02:	e7eb      	b.n	8012cdc <pvPortMalloc+0xec>
}
 8012d04:	4630      	mov	r0, r6
 8012d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d0a:	bf00      	nop
 8012d0c:	24001624 	.word	0x24001624
 8012d10:	24008e28 	.word	0x24008e28
 8012d14:	24001628 	.word	0x24001628
 8012d18:	24008e34 	.word	0x24008e34
 8012d1c:	24008e30 	.word	0x24008e30
 8012d20:	24008e2c 	.word	0x24008e2c

08012d24 <vPortFree>:
{
 8012d24:	b510      	push	{r4, lr}
	if( pv != NULL )
 8012d26:	4604      	mov	r4, r0
 8012d28:	b398      	cbz	r0, 8012d92 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012d2a:	4a1a      	ldr	r2, [pc, #104]	; (8012d94 <vPortFree+0x70>)
 8012d2c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012d30:	6812      	ldr	r2, [r2, #0]
 8012d32:	4213      	tst	r3, r2
 8012d34:	d108      	bne.n	8012d48 <vPortFree+0x24>
 8012d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d3a:	f383 8811 	msr	BASEPRI, r3
 8012d3e:	f3bf 8f6f 	isb	sy
 8012d42:	f3bf 8f4f 	dsb	sy
 8012d46:	e7fe      	b.n	8012d46 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012d48:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8012d4c:	b141      	cbz	r1, 8012d60 <vPortFree+0x3c>
 8012d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d52:	f383 8811 	msr	BASEPRI, r3
 8012d56:	f3bf 8f6f 	isb	sy
 8012d5a:	f3bf 8f4f 	dsb	sy
 8012d5e:	e7fe      	b.n	8012d5e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012d60:	ea23 0302 	bic.w	r3, r3, r2
 8012d64:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8012d68:	f7fe fe7e 	bl	8011a68 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012d6c:	490a      	ldr	r1, [pc, #40]	; (8012d98 <vPortFree+0x74>)
 8012d6e:	f854 2c04 	ldr.w	r2, [r4, #-4]
					traceFREE( pv, pxLink->xBlockSize );
 8012d72:	2096      	movs	r0, #150	; 0x96
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012d74:	680b      	ldr	r3, [r1, #0]
 8012d76:	4413      	add	r3, r2
					traceFREE( pv, pxLink->xBlockSize );
 8012d78:	4252      	negs	r2, r2
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012d7a:	600b      	str	r3, [r1, #0]
					traceFREE( pv, pxLink->xBlockSize );
 8012d7c:	4621      	mov	r1, r4
 8012d7e:	f7f2 fbd1 	bl	8005524 <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012d82:	f1a4 0008 	sub.w	r0, r4, #8
 8012d86:	f7ff ff0f 	bl	8012ba8 <prvInsertBlockIntoFreeList>
}
 8012d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8012d8e:	f7fe bf35 	b.w	8011bfc <xTaskResumeAll>
}
 8012d92:	bd10      	pop	{r4, pc}
 8012d94:	24008e28 	.word	0x24008e28
 8012d98:	24008e2c 	.word	0x24008e2c

08012d9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012d9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012d9e:	2200      	movs	r2, #0
 8012da0:	490f      	ldr	r1, [pc, #60]	; (8012de0 <MX_USB_DEVICE_Init+0x44>)
 8012da2:	4810      	ldr	r0, [pc, #64]	; (8012de4 <MX_USB_DEVICE_Init+0x48>)
 8012da4:	f7fa feda 	bl	800db5c <USBD_Init>
 8012da8:	b108      	cbz	r0, 8012dae <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8012daa:	f7ef feb3 	bl	8002b14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012dae:	490e      	ldr	r1, [pc, #56]	; (8012de8 <MX_USB_DEVICE_Init+0x4c>)
 8012db0:	480c      	ldr	r0, [pc, #48]	; (8012de4 <MX_USB_DEVICE_Init+0x48>)
 8012db2:	f7fa feeb 	bl	800db8c <USBD_RegisterClass>
 8012db6:	b108      	cbz	r0, 8012dbc <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8012db8:	f7ef feac 	bl	8002b14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012dbc:	490b      	ldr	r1, [pc, #44]	; (8012dec <MX_USB_DEVICE_Init+0x50>)
 8012dbe:	4809      	ldr	r0, [pc, #36]	; (8012de4 <MX_USB_DEVICE_Init+0x48>)
 8012dc0:	f7fa fe8c 	bl	800dadc <USBD_CDC_RegisterInterface>
 8012dc4:	b108      	cbz	r0, 8012dca <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8012dc6:	f7ef fea5 	bl	8002b14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012dca:	4806      	ldr	r0, [pc, #24]	; (8012de4 <MX_USB_DEVICE_Init+0x48>)
 8012dcc:	f7fa fef1 	bl	800dbb2 <USBD_Start>
 8012dd0:	b108      	cbz	r0, 8012dd6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8012dd2:	f7ef fe9f 	bl	8002b14 <Error_Handler>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012dd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 8012dda:	f7f5 bc4f 	b.w	800867c <HAL_PWREx_EnableUSBVoltageDetector>
 8012dde:	bf00      	nop
 8012de0:	2400014c 	.word	0x2400014c
 8012de4:	2401f140 	.word	0x2401f140
 8012de8:	24000024 	.word	0x24000024
 8012dec:	24000138 	.word	0x24000138

08012df0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8012df0:	2000      	movs	r0, #0
 8012df2:	4770      	bx	lr

08012df4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8012df4:	2000      	movs	r0, #0
 8012df6:	4770      	bx	lr

08012df8 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8012df8:	2000      	movs	r0, #0
 8012dfa:	4770      	bx	lr

08012dfc <CDC_Receive_FS>:
{
 8012dfc:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012dfe:	4c05      	ldr	r4, [pc, #20]	; (8012e14 <CDC_Receive_FS+0x18>)
 8012e00:	4601      	mov	r1, r0
 8012e02:	4620      	mov	r0, r4
 8012e04:	f7fa fe79 	bl	800dafa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012e08:	4620      	mov	r0, r4
 8012e0a:	f7fa fe94 	bl	800db36 <USBD_CDC_ReceivePacket>
}
 8012e0e:	2000      	movs	r0, #0
 8012e10:	bd10      	pop	{r4, pc}
 8012e12:	bf00      	nop
 8012e14:	2401f140 	.word	0x2401f140

08012e18 <CDC_Init_FS>:
{
 8012e18:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012e1a:	4c06      	ldr	r4, [pc, #24]	; (8012e34 <CDC_Init_FS+0x1c>)
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	4906      	ldr	r1, [pc, #24]	; (8012e38 <CDC_Init_FS+0x20>)
 8012e20:	4620      	mov	r0, r4
 8012e22:	f7fa fe62 	bl	800daea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012e26:	4905      	ldr	r1, [pc, #20]	; (8012e3c <CDC_Init_FS+0x24>)
 8012e28:	4620      	mov	r0, r4
 8012e2a:	f7fa fe66 	bl	800dafa <USBD_CDC_SetRxBuffer>
}
 8012e2e:	2000      	movs	r0, #0
 8012e30:	bd10      	pop	{r4, pc}
 8012e32:	bf00      	nop
 8012e34:	2401f140 	.word	0x2401f140
 8012e38:	2401fc10 	.word	0x2401fc10
 8012e3c:	2401f410 	.word	0x2401f410

08012e40 <CDC_Transmit_FS>:
{
 8012e40:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012e42:	4c09      	ldr	r4, [pc, #36]	; (8012e68 <CDC_Transmit_FS+0x28>)
{
 8012e44:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012e46:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 8012e4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012e4e:	b943      	cbnz	r3, 8012e62 <CDC_Transmit_FS+0x22>
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012e50:	4601      	mov	r1, r0
 8012e52:	4620      	mov	r0, r4
 8012e54:	f7fa fe49 	bl	800daea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012e58:	4620      	mov	r0, r4
}
 8012e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012e5e:	f7fa be52 	b.w	800db06 <USBD_CDC_TransmitPacket>
}
 8012e62:	2001      	movs	r0, #1
 8012e64:	bd10      	pop	{r4, pc}
 8012e66:	bf00      	nop
 8012e68:	2401f140 	.word	0x2401f140

08012e6c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012e6c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8012e6e:	4801      	ldr	r0, [pc, #4]	; (8012e74 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8012e70:	800b      	strh	r3, [r1, #0]
}
 8012e72:	4770      	bx	lr
 8012e74:	24000168 	.word	0x24000168

08012e78 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012e78:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8012e7a:	4801      	ldr	r0, [pc, #4]	; (8012e80 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8012e7c:	800b      	strh	r3, [r1, #0]
}
 8012e7e:	4770      	bx	lr
 8012e80:	2400017c 	.word	0x2400017c

08012e84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012e84:	2300      	movs	r3, #0
 8012e86:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8012e88:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 8012e8a:	0f05      	lsrs	r5, r0, #28
    value = value << 4;
 8012e8c:	0100      	lsls	r0, r0, #4
 8012e8e:	b2ec      	uxtb	r4, r5
    if (((value >> 28)) < 0xA)
 8012e90:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8012e92:	bf94      	ite	ls
 8012e94:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012e96:	3437      	addhi	r4, #55	; 0x37
 8012e98:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8012e9c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8012ea0:	3301      	adds	r3, #1
 8012ea2:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 8012ea4:	b2dc      	uxtb	r4, r3
 8012ea6:	42a2      	cmp	r2, r4
 8012ea8:	d8ef      	bhi.n	8012e8a <IntToUnicode+0x6>
  }
}
 8012eaa:	bd70      	pop	{r4, r5, r6, pc}

08012eac <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8012eac:	231a      	movs	r3, #26
{
 8012eae:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8012eb0:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012eb2:	4b09      	ldr	r3, [pc, #36]	; (8012ed8 <USBD_FS_SerialStrDescriptor+0x2c>)
 8012eb4:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012eb6:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8012eb8:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8012eba:	18c0      	adds	r0, r0, r3
 8012ebc:	d00a      	beq.n	8012ed4 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012ebe:	4b07      	ldr	r3, [pc, #28]	; (8012edc <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012ec0:	2208      	movs	r2, #8
 8012ec2:	4907      	ldr	r1, [pc, #28]	; (8012ee0 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012ec4:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012ec6:	f7ff ffdd 	bl	8012e84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012eca:	2204      	movs	r2, #4
 8012ecc:	4905      	ldr	r1, [pc, #20]	; (8012ee4 <USBD_FS_SerialStrDescriptor+0x38>)
 8012ece:	4620      	mov	r0, r4
 8012ed0:	f7ff ffd8 	bl	8012e84 <IntToUnicode>
}
 8012ed4:	4804      	ldr	r0, [pc, #16]	; (8012ee8 <USBD_FS_SerialStrDescriptor+0x3c>)
 8012ed6:	bd10      	pop	{r4, pc}
 8012ed8:	1ff1e800 	.word	0x1ff1e800
 8012edc:	1ff1e804 	.word	0x1ff1e804
 8012ee0:	24000182 	.word	0x24000182
 8012ee4:	24000192 	.word	0x24000192
 8012ee8:	24000180 	.word	0x24000180

08012eec <USBD_FS_ManufacturerStrDescriptor>:
{
 8012eec:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012eee:	4c04      	ldr	r4, [pc, #16]	; (8012f00 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8012ef0:	460a      	mov	r2, r1
 8012ef2:	4804      	ldr	r0, [pc, #16]	; (8012f04 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8012ef4:	4621      	mov	r1, r4
 8012ef6:	f7fb f99f 	bl	800e238 <USBD_GetString>
}
 8012efa:	4620      	mov	r0, r4
 8012efc:	bd10      	pop	{r4, pc}
 8012efe:	bf00      	nop
 8012f00:	24020410 	.word	0x24020410
 8012f04:	080168fa 	.word	0x080168fa

08012f08 <USBD_FS_ProductStrDescriptor>:
{
 8012f08:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012f0a:	4c04      	ldr	r4, [pc, #16]	; (8012f1c <USBD_FS_ProductStrDescriptor+0x14>)
 8012f0c:	460a      	mov	r2, r1
 8012f0e:	4804      	ldr	r0, [pc, #16]	; (8012f20 <USBD_FS_ProductStrDescriptor+0x18>)
 8012f10:	4621      	mov	r1, r4
 8012f12:	f7fb f991 	bl	800e238 <USBD_GetString>
}
 8012f16:	4620      	mov	r0, r4
 8012f18:	bd10      	pop	{r4, pc}
 8012f1a:	bf00      	nop
 8012f1c:	24020410 	.word	0x24020410
 8012f20:	080168ff 	.word	0x080168ff

08012f24 <USBD_FS_ConfigStrDescriptor>:
{
 8012f24:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012f26:	4c04      	ldr	r4, [pc, #16]	; (8012f38 <USBD_FS_ConfigStrDescriptor+0x14>)
 8012f28:	460a      	mov	r2, r1
 8012f2a:	4804      	ldr	r0, [pc, #16]	; (8012f3c <USBD_FS_ConfigStrDescriptor+0x18>)
 8012f2c:	4621      	mov	r1, r4
 8012f2e:	f7fb f983 	bl	800e238 <USBD_GetString>
}
 8012f32:	4620      	mov	r0, r4
 8012f34:	bd10      	pop	{r4, pc}
 8012f36:	bf00      	nop
 8012f38:	24020410 	.word	0x24020410
 8012f3c:	080168e1 	.word	0x080168e1

08012f40 <USBD_FS_InterfaceStrDescriptor>:
{
 8012f40:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012f42:	4c04      	ldr	r4, [pc, #16]	; (8012f54 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8012f44:	460a      	mov	r2, r1
 8012f46:	4804      	ldr	r0, [pc, #16]	; (8012f58 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8012f48:	4621      	mov	r1, r4
 8012f4a:	f7fb f975 	bl	800e238 <USBD_GetString>
}
 8012f4e:	4620      	mov	r0, r4
 8012f50:	bd10      	pop	{r4, pc}
 8012f52:	bf00      	nop
 8012f54:	24020410 	.word	0x24020410
 8012f58:	080168ec 	.word	0x080168ec

08012f5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012f5c:	b510      	push	{r4, lr}
 8012f5e:	b088      	sub	sp, #32
 8012f60:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012f62:	2214      	movs	r2, #20
 8012f64:	2100      	movs	r1, #0
 8012f66:	a803      	add	r0, sp, #12
 8012f68:	f000 f991 	bl	801328e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012f6c:	6822      	ldr	r2, [r4, #0]
 8012f6e:	4b18      	ldr	r3, [pc, #96]	; (8012fd0 <HAL_PCD_MspInit+0x74>)
 8012f70:	429a      	cmp	r2, r3
 8012f72:	d12b      	bne.n	8012fcc <HAL_PCD_MspInit+0x70>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012f74:	4c17      	ldr	r4, [pc, #92]	; (8012fd4 <HAL_PCD_MspInit+0x78>)
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f76:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012f7a:	a903      	add	r1, sp, #12
 8012f7c:	4816      	ldr	r0, [pc, #88]	; (8012fd8 <HAL_PCD_MspInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012f7e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8012f82:	f043 0301 	orr.w	r3, r3, #1
 8012f86:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8012f8a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8012f8e:	f003 0301 	and.w	r3, r3, #1
 8012f92:	9301      	str	r3, [sp, #4]
 8012f94:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f96:	2302      	movs	r3, #2
 8012f98:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8012f9c:	230a      	movs	r3, #10
 8012f9e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012fa0:	f7f4 fd5a 	bl	8007a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012fa4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012fa8:	2065      	movs	r0, #101	; 0x65
 8012faa:	2200      	movs	r2, #0
 8012fac:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012fae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012fb2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8012fb6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8012fba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012fbe:	9302      	str	r3, [sp, #8]
 8012fc0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012fc2:	f7f3 fb87 	bl	80066d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012fc6:	2065      	movs	r0, #101	; 0x65
 8012fc8:	f7f3 fbb6 	bl	8006738 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012fcc:	b008      	add	sp, #32
 8012fce:	bd10      	pop	{r4, pc}
 8012fd0:	40080000 	.word	0x40080000
 8012fd4:	58024400 	.word	0x58024400
 8012fd8:	58020000 	.word	0x58020000

08012fdc <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012fdc:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8012fe0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012fe4:	f7fa bdf6 	b.w	800dbd4 <USBD_LL_SetupStage>

08012fe8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012fe8:	231c      	movs	r3, #28
 8012fea:	fb03 0301 	mla	r3, r3, r1, r0
 8012fee:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012ff2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012ff6:	f7fa be1d 	b.w	800dc34 <USBD_LL_DataOutStage>

08012ffa <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012ffa:	231c      	movs	r3, #28
 8012ffc:	fb03 0301 	mla	r3, r3, r1, r0
 8013000:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013004:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013006:	f7fa be48 	b.w	800dc9a <USBD_LL_DataInStage>

0801300a <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801300a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801300e:	f7fa becf 	b.w	800ddb0 <USBD_LL_SOF>

08013012 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013012:	68c1      	ldr	r1, [r0, #12]
{
 8013014:	b510      	push	{r4, lr}
 8013016:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013018:	b121      	cbz	r1, 8013024 <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801301a:	2902      	cmp	r1, #2
 801301c:	d001      	beq.n	8013022 <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 801301e:	f7ef fd79 	bl	8002b14 <Error_Handler>
    speed = USBD_SPEED_FULL;
 8013022:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013024:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8013028:	f7fa feac 	bl	800dd84 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801302c:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8013030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013034:	f7fa be7e 	b.w	800dd34 <USBD_LL_Reset>

08013038 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013038:	b510      	push	{r4, lr}
 801303a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801303c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013040:	f7fa fea3 	bl	800dd8a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013044:	6822      	ldr	r2, [r4, #0]
 8013046:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801304a:	f043 0301 	orr.w	r3, r3, #1
 801304e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013052:	6a23      	ldr	r3, [r4, #32]
 8013054:	b123      	cbz	r3, 8013060 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013056:	4a03      	ldr	r2, [pc, #12]	; (8013064 <HAL_PCD_SuspendCallback+0x2c>)
 8013058:	6913      	ldr	r3, [r2, #16]
 801305a:	f043 0306 	orr.w	r3, r3, #6
 801305e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013060:	bd10      	pop	{r4, pc}
 8013062:	bf00      	nop
 8013064:	e000ed00 	.word	0xe000ed00

08013068 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013068:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801306c:	f7fa be96 	b.w	800dd9c <USBD_LL_Resume>

08013070 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013070:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013074:	f7fa beaa 	b.w	800ddcc <USBD_LL_IsoOUTIncomplete>

08013078 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013078:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801307c:	f7fa bea4 	b.w	800ddc8 <USBD_LL_IsoINIncomplete>

08013080 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013080:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013084:	f7fa bea4 	b.w	800ddd0 <USBD_LL_DevConnected>

08013088 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013088:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801308c:	f7fa bea2 	b.w	800ddd4 <USBD_LL_DevDisconnected>

08013090 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013090:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013092:	7802      	ldrb	r2, [r0, #0]
 8013094:	bb32      	cbnz	r2, 80130e4 <USBD_LL_Init+0x54>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013096:	4b14      	ldr	r3, [pc, #80]	; (80130e8 <USBD_LL_Init+0x58>)
  pdev->pData = &hpcd_USB_OTG_FS;

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8013098:	2109      	movs	r1, #9
  hpcd_USB_OTG_FS.pData = pdev;
 801309a:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801309e:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80130a2:	4812      	ldr	r0, [pc, #72]	; (80130ec <USBD_LL_Init+0x5c>)
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80130a4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80130a6:	e9c3 0100 	strd	r0, r1, [r3]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80130aa:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80130ac:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80130ae:	e9c3 1203 	strd	r1, r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80130b2:	e9c3 1206 	strd	r1, r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80130b6:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80130ba:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80130be:	f7f4 fdc7 	bl	8007c50 <HAL_PCD_Init>
 80130c2:	b108      	cbz	r0, 80130c8 <USBD_LL_Init+0x38>
  {
    Error_Handler( );
 80130c4:	f7ef fd26 	bl	8002b14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80130c8:	2180      	movs	r1, #128	; 0x80
 80130ca:	4807      	ldr	r0, [pc, #28]	; (80130e8 <USBD_LL_Init+0x58>)
 80130cc:	f7f5 fa99 	bl	8008602 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80130d0:	2240      	movs	r2, #64	; 0x40
 80130d2:	2100      	movs	r1, #0
 80130d4:	4804      	ldr	r0, [pc, #16]	; (80130e8 <USBD_LL_Init+0x58>)
 80130d6:	f7f5 fa74 	bl	80085c2 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80130da:	2280      	movs	r2, #128	; 0x80
 80130dc:	2101      	movs	r1, #1
 80130de:	4802      	ldr	r0, [pc, #8]	; (80130e8 <USBD_LL_Init+0x58>)
 80130e0:	f7f5 fa6f 	bl	80085c2 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 80130e4:	2000      	movs	r0, #0
 80130e6:	bd08      	pop	{r3, pc}
 80130e8:	24020610 	.word	0x24020610
 80130ec:	40080000 	.word	0x40080000

080130f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80130f0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80130f2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80130f6:	f7f4 fe36 	bl	8007d66 <HAL_PCD_Start>
 80130fa:	2803      	cmp	r0, #3
 80130fc:	bf96      	itet	ls
 80130fe:	4b02      	ldrls	r3, [pc, #8]	; (8013108 <USBD_LL_Start+0x18>)
 8013100:	2003      	movhi	r0, #3
 8013102:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8013104:	bd08      	pop	{r3, pc}
 8013106:	bf00      	nop
 8013108:	08016913 	.word	0x08016913

0801310c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801310c:	b510      	push	{r4, lr}
 801310e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013110:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013114:	4613      	mov	r3, r2
 8013116:	4622      	mov	r2, r4
 8013118:	f7f5 f930 	bl	800837c <HAL_PCD_EP_Open>
 801311c:	2803      	cmp	r0, #3
 801311e:	bf96      	itet	ls
 8013120:	4b01      	ldrls	r3, [pc, #4]	; (8013128 <USBD_LL_OpenEP+0x1c>)
 8013122:	2003      	movhi	r0, #3
 8013124:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8013126:	bd10      	pop	{r4, pc}
 8013128:	08016913 	.word	0x08016913

0801312c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801312c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801312e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013132:	f7f5 f95b 	bl	80083ec <HAL_PCD_EP_Close>
 8013136:	2803      	cmp	r0, #3
 8013138:	bf96      	itet	ls
 801313a:	4b02      	ldrls	r3, [pc, #8]	; (8013144 <USBD_LL_CloseEP+0x18>)
 801313c:	2003      	movhi	r0, #3
 801313e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8013140:	bd08      	pop	{r3, pc}
 8013142:	bf00      	nop
 8013144:	08016913 	.word	0x08016913

08013148 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013148:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801314a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801314e:	f7f5 f9c8 	bl	80084e2 <HAL_PCD_EP_SetStall>
 8013152:	2803      	cmp	r0, #3
 8013154:	bf96      	itet	ls
 8013156:	4b02      	ldrls	r3, [pc, #8]	; (8013160 <USBD_LL_StallEP+0x18>)
 8013158:	2003      	movhi	r0, #3
 801315a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801315c:	bd08      	pop	{r3, pc}
 801315e:	bf00      	nop
 8013160:	08016913 	.word	0x08016913

08013164 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013164:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013166:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801316a:	f7f5 f9f4 	bl	8008556 <HAL_PCD_EP_ClrStall>
 801316e:	2803      	cmp	r0, #3
 8013170:	bf96      	itet	ls
 8013172:	4b02      	ldrls	r3, [pc, #8]	; (801317c <USBD_LL_ClearStallEP+0x18>)
 8013174:	2003      	movhi	r0, #3
 8013176:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8013178:	bd08      	pop	{r3, pc}
 801317a:	bf00      	nop
 801317c:	08016913 	.word	0x08016913

08013180 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 8013180:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013184:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 8013188:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801318c:	bf17      	itett	ne
 801318e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013192:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013196:	fb02 3101 	mlane	r1, r2, r1, r3
 801319a:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801319e:	bf08      	it	eq
 80131a0:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 80131a4:	4770      	bx	lr
	...

080131a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80131a8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80131aa:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80131ae:	f7f5 f8d1 	bl	8008354 <HAL_PCD_SetAddress>
 80131b2:	2803      	cmp	r0, #3
 80131b4:	bf96      	itet	ls
 80131b6:	4b02      	ldrls	r3, [pc, #8]	; (80131c0 <USBD_LL_SetUSBAddress+0x18>)
 80131b8:	2003      	movhi	r0, #3
 80131ba:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80131bc:	bd08      	pop	{r3, pc}
 80131be:	bf00      	nop
 80131c0:	08016913 	.word	0x08016913

080131c4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80131c4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80131c6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80131ca:	f7f5 f96a 	bl	80084a2 <HAL_PCD_EP_Transmit>
 80131ce:	2803      	cmp	r0, #3
 80131d0:	bf96      	itet	ls
 80131d2:	4b02      	ldrls	r3, [pc, #8]	; (80131dc <USBD_LL_Transmit+0x18>)
 80131d4:	2003      	movhi	r0, #3
 80131d6:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80131d8:	bd08      	pop	{r3, pc}
 80131da:	bf00      	nop
 80131dc:	08016913 	.word	0x08016913

080131e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80131e0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80131e2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80131e6:	f7f5 f930 	bl	800844a <HAL_PCD_EP_Receive>
 80131ea:	2803      	cmp	r0, #3
 80131ec:	bf96      	itet	ls
 80131ee:	4b02      	ldrls	r3, [pc, #8]	; (80131f8 <USBD_LL_PrepareReceive+0x18>)
 80131f0:	2003      	movhi	r0, #3
 80131f2:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80131f4:	bd08      	pop	{r3, pc}
 80131f6:	bf00      	nop
 80131f8:	08016913 	.word	0x08016913

080131fc <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80131fc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013200:	f7f5 b947 	b.w	8008492 <HAL_PCD_EP_GetRxCount>

08013204 <__errno>:
 8013204:	4b01      	ldr	r3, [pc, #4]	; (801320c <__errno+0x8>)
 8013206:	6818      	ldr	r0, [r3, #0]
 8013208:	4770      	bx	lr
 801320a:	bf00      	nop
 801320c:	2400019c 	.word	0x2400019c

08013210 <__libc_init_array>:
 8013210:	b570      	push	{r4, r5, r6, lr}
 8013212:	4e0d      	ldr	r6, [pc, #52]	; (8013248 <__libc_init_array+0x38>)
 8013214:	4c0d      	ldr	r4, [pc, #52]	; (801324c <__libc_init_array+0x3c>)
 8013216:	1ba4      	subs	r4, r4, r6
 8013218:	10a4      	asrs	r4, r4, #2
 801321a:	2500      	movs	r5, #0
 801321c:	42a5      	cmp	r5, r4
 801321e:	d109      	bne.n	8013234 <__libc_init_array+0x24>
 8013220:	4e0b      	ldr	r6, [pc, #44]	; (8013250 <__libc_init_array+0x40>)
 8013222:	4c0c      	ldr	r4, [pc, #48]	; (8013254 <__libc_init_array+0x44>)
 8013224:	f001 fcd2 	bl	8014bcc <_init>
 8013228:	1ba4      	subs	r4, r4, r6
 801322a:	10a4      	asrs	r4, r4, #2
 801322c:	2500      	movs	r5, #0
 801322e:	42a5      	cmp	r5, r4
 8013230:	d105      	bne.n	801323e <__libc_init_array+0x2e>
 8013232:	bd70      	pop	{r4, r5, r6, pc}
 8013234:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013238:	4798      	blx	r3
 801323a:	3501      	adds	r5, #1
 801323c:	e7ee      	b.n	801321c <__libc_init_array+0xc>
 801323e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013242:	4798      	blx	r3
 8013244:	3501      	adds	r5, #1
 8013246:	e7f2      	b.n	801322e <__libc_init_array+0x1e>
 8013248:	08016c78 	.word	0x08016c78
 801324c:	08016c78 	.word	0x08016c78
 8013250:	08016c78 	.word	0x08016c78
 8013254:	08016c7c 	.word	0x08016c7c

08013258 <malloc>:
 8013258:	4b02      	ldr	r3, [pc, #8]	; (8013264 <malloc+0xc>)
 801325a:	4601      	mov	r1, r0
 801325c:	6818      	ldr	r0, [r3, #0]
 801325e:	f000 b86d 	b.w	801333c <_malloc_r>
 8013262:	bf00      	nop
 8013264:	2400019c 	.word	0x2400019c

08013268 <free>:
 8013268:	4b02      	ldr	r3, [pc, #8]	; (8013274 <free+0xc>)
 801326a:	4601      	mov	r1, r0
 801326c:	6818      	ldr	r0, [r3, #0]
 801326e:	f000 b817 	b.w	80132a0 <_free_r>
 8013272:	bf00      	nop
 8013274:	2400019c 	.word	0x2400019c

08013278 <memcpy>:
 8013278:	b510      	push	{r4, lr}
 801327a:	1e43      	subs	r3, r0, #1
 801327c:	440a      	add	r2, r1
 801327e:	4291      	cmp	r1, r2
 8013280:	d100      	bne.n	8013284 <memcpy+0xc>
 8013282:	bd10      	pop	{r4, pc}
 8013284:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013288:	f803 4f01 	strb.w	r4, [r3, #1]!
 801328c:	e7f7      	b.n	801327e <memcpy+0x6>

0801328e <memset>:
 801328e:	4402      	add	r2, r0
 8013290:	4603      	mov	r3, r0
 8013292:	4293      	cmp	r3, r2
 8013294:	d100      	bne.n	8013298 <memset+0xa>
 8013296:	4770      	bx	lr
 8013298:	f803 1b01 	strb.w	r1, [r3], #1
 801329c:	e7f9      	b.n	8013292 <memset+0x4>
	...

080132a0 <_free_r>:
 80132a0:	b538      	push	{r3, r4, r5, lr}
 80132a2:	4605      	mov	r5, r0
 80132a4:	2900      	cmp	r1, #0
 80132a6:	d045      	beq.n	8013334 <_free_r+0x94>
 80132a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80132ac:	1f0c      	subs	r4, r1, #4
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	bfb8      	it	lt
 80132b2:	18e4      	addlt	r4, r4, r3
 80132b4:	f000 f934 	bl	8013520 <__malloc_lock>
 80132b8:	4a1f      	ldr	r2, [pc, #124]	; (8013338 <_free_r+0x98>)
 80132ba:	6813      	ldr	r3, [r2, #0]
 80132bc:	4610      	mov	r0, r2
 80132be:	b933      	cbnz	r3, 80132ce <_free_r+0x2e>
 80132c0:	6063      	str	r3, [r4, #4]
 80132c2:	6014      	str	r4, [r2, #0]
 80132c4:	4628      	mov	r0, r5
 80132c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80132ca:	f000 b92a 	b.w	8013522 <__malloc_unlock>
 80132ce:	42a3      	cmp	r3, r4
 80132d0:	d90c      	bls.n	80132ec <_free_r+0x4c>
 80132d2:	6821      	ldr	r1, [r4, #0]
 80132d4:	1862      	adds	r2, r4, r1
 80132d6:	4293      	cmp	r3, r2
 80132d8:	bf04      	itt	eq
 80132da:	681a      	ldreq	r2, [r3, #0]
 80132dc:	685b      	ldreq	r3, [r3, #4]
 80132de:	6063      	str	r3, [r4, #4]
 80132e0:	bf04      	itt	eq
 80132e2:	1852      	addeq	r2, r2, r1
 80132e4:	6022      	streq	r2, [r4, #0]
 80132e6:	6004      	str	r4, [r0, #0]
 80132e8:	e7ec      	b.n	80132c4 <_free_r+0x24>
 80132ea:	4613      	mov	r3, r2
 80132ec:	685a      	ldr	r2, [r3, #4]
 80132ee:	b10a      	cbz	r2, 80132f4 <_free_r+0x54>
 80132f0:	42a2      	cmp	r2, r4
 80132f2:	d9fa      	bls.n	80132ea <_free_r+0x4a>
 80132f4:	6819      	ldr	r1, [r3, #0]
 80132f6:	1858      	adds	r0, r3, r1
 80132f8:	42a0      	cmp	r0, r4
 80132fa:	d10b      	bne.n	8013314 <_free_r+0x74>
 80132fc:	6820      	ldr	r0, [r4, #0]
 80132fe:	4401      	add	r1, r0
 8013300:	1858      	adds	r0, r3, r1
 8013302:	4282      	cmp	r2, r0
 8013304:	6019      	str	r1, [r3, #0]
 8013306:	d1dd      	bne.n	80132c4 <_free_r+0x24>
 8013308:	6810      	ldr	r0, [r2, #0]
 801330a:	6852      	ldr	r2, [r2, #4]
 801330c:	605a      	str	r2, [r3, #4]
 801330e:	4401      	add	r1, r0
 8013310:	6019      	str	r1, [r3, #0]
 8013312:	e7d7      	b.n	80132c4 <_free_r+0x24>
 8013314:	d902      	bls.n	801331c <_free_r+0x7c>
 8013316:	230c      	movs	r3, #12
 8013318:	602b      	str	r3, [r5, #0]
 801331a:	e7d3      	b.n	80132c4 <_free_r+0x24>
 801331c:	6820      	ldr	r0, [r4, #0]
 801331e:	1821      	adds	r1, r4, r0
 8013320:	428a      	cmp	r2, r1
 8013322:	bf04      	itt	eq
 8013324:	6811      	ldreq	r1, [r2, #0]
 8013326:	6852      	ldreq	r2, [r2, #4]
 8013328:	6062      	str	r2, [r4, #4]
 801332a:	bf04      	itt	eq
 801332c:	1809      	addeq	r1, r1, r0
 801332e:	6021      	streq	r1, [r4, #0]
 8013330:	605c      	str	r4, [r3, #4]
 8013332:	e7c7      	b.n	80132c4 <_free_r+0x24>
 8013334:	bd38      	pop	{r3, r4, r5, pc}
 8013336:	bf00      	nop
 8013338:	24008e3c 	.word	0x24008e3c

0801333c <_malloc_r>:
 801333c:	b570      	push	{r4, r5, r6, lr}
 801333e:	1ccd      	adds	r5, r1, #3
 8013340:	f025 0503 	bic.w	r5, r5, #3
 8013344:	3508      	adds	r5, #8
 8013346:	2d0c      	cmp	r5, #12
 8013348:	bf38      	it	cc
 801334a:	250c      	movcc	r5, #12
 801334c:	2d00      	cmp	r5, #0
 801334e:	4606      	mov	r6, r0
 8013350:	db01      	blt.n	8013356 <_malloc_r+0x1a>
 8013352:	42a9      	cmp	r1, r5
 8013354:	d903      	bls.n	801335e <_malloc_r+0x22>
 8013356:	230c      	movs	r3, #12
 8013358:	6033      	str	r3, [r6, #0]
 801335a:	2000      	movs	r0, #0
 801335c:	bd70      	pop	{r4, r5, r6, pc}
 801335e:	f000 f8df 	bl	8013520 <__malloc_lock>
 8013362:	4a21      	ldr	r2, [pc, #132]	; (80133e8 <_malloc_r+0xac>)
 8013364:	6814      	ldr	r4, [r2, #0]
 8013366:	4621      	mov	r1, r4
 8013368:	b991      	cbnz	r1, 8013390 <_malloc_r+0x54>
 801336a:	4c20      	ldr	r4, [pc, #128]	; (80133ec <_malloc_r+0xb0>)
 801336c:	6823      	ldr	r3, [r4, #0]
 801336e:	b91b      	cbnz	r3, 8013378 <_malloc_r+0x3c>
 8013370:	4630      	mov	r0, r6
 8013372:	f000 f83d 	bl	80133f0 <_sbrk_r>
 8013376:	6020      	str	r0, [r4, #0]
 8013378:	4629      	mov	r1, r5
 801337a:	4630      	mov	r0, r6
 801337c:	f000 f838 	bl	80133f0 <_sbrk_r>
 8013380:	1c43      	adds	r3, r0, #1
 8013382:	d124      	bne.n	80133ce <_malloc_r+0x92>
 8013384:	230c      	movs	r3, #12
 8013386:	6033      	str	r3, [r6, #0]
 8013388:	4630      	mov	r0, r6
 801338a:	f000 f8ca 	bl	8013522 <__malloc_unlock>
 801338e:	e7e4      	b.n	801335a <_malloc_r+0x1e>
 8013390:	680b      	ldr	r3, [r1, #0]
 8013392:	1b5b      	subs	r3, r3, r5
 8013394:	d418      	bmi.n	80133c8 <_malloc_r+0x8c>
 8013396:	2b0b      	cmp	r3, #11
 8013398:	d90f      	bls.n	80133ba <_malloc_r+0x7e>
 801339a:	600b      	str	r3, [r1, #0]
 801339c:	50cd      	str	r5, [r1, r3]
 801339e:	18cc      	adds	r4, r1, r3
 80133a0:	4630      	mov	r0, r6
 80133a2:	f000 f8be 	bl	8013522 <__malloc_unlock>
 80133a6:	f104 000b 	add.w	r0, r4, #11
 80133aa:	1d23      	adds	r3, r4, #4
 80133ac:	f020 0007 	bic.w	r0, r0, #7
 80133b0:	1ac3      	subs	r3, r0, r3
 80133b2:	d0d3      	beq.n	801335c <_malloc_r+0x20>
 80133b4:	425a      	negs	r2, r3
 80133b6:	50e2      	str	r2, [r4, r3]
 80133b8:	e7d0      	b.n	801335c <_malloc_r+0x20>
 80133ba:	428c      	cmp	r4, r1
 80133bc:	684b      	ldr	r3, [r1, #4]
 80133be:	bf16      	itet	ne
 80133c0:	6063      	strne	r3, [r4, #4]
 80133c2:	6013      	streq	r3, [r2, #0]
 80133c4:	460c      	movne	r4, r1
 80133c6:	e7eb      	b.n	80133a0 <_malloc_r+0x64>
 80133c8:	460c      	mov	r4, r1
 80133ca:	6849      	ldr	r1, [r1, #4]
 80133cc:	e7cc      	b.n	8013368 <_malloc_r+0x2c>
 80133ce:	1cc4      	adds	r4, r0, #3
 80133d0:	f024 0403 	bic.w	r4, r4, #3
 80133d4:	42a0      	cmp	r0, r4
 80133d6:	d005      	beq.n	80133e4 <_malloc_r+0xa8>
 80133d8:	1a21      	subs	r1, r4, r0
 80133da:	4630      	mov	r0, r6
 80133dc:	f000 f808 	bl	80133f0 <_sbrk_r>
 80133e0:	3001      	adds	r0, #1
 80133e2:	d0cf      	beq.n	8013384 <_malloc_r+0x48>
 80133e4:	6025      	str	r5, [r4, #0]
 80133e6:	e7db      	b.n	80133a0 <_malloc_r+0x64>
 80133e8:	24008e3c 	.word	0x24008e3c
 80133ec:	24008e40 	.word	0x24008e40

080133f0 <_sbrk_r>:
 80133f0:	b538      	push	{r3, r4, r5, lr}
 80133f2:	4c06      	ldr	r4, [pc, #24]	; (801340c <_sbrk_r+0x1c>)
 80133f4:	2300      	movs	r3, #0
 80133f6:	4605      	mov	r5, r0
 80133f8:	4608      	mov	r0, r1
 80133fa:	6023      	str	r3, [r4, #0]
 80133fc:	f7ef ffe2 	bl	80033c4 <_sbrk>
 8013400:	1c43      	adds	r3, r0, #1
 8013402:	d102      	bne.n	801340a <_sbrk_r+0x1a>
 8013404:	6823      	ldr	r3, [r4, #0]
 8013406:	b103      	cbz	r3, 801340a <_sbrk_r+0x1a>
 8013408:	602b      	str	r3, [r5, #0]
 801340a:	bd38      	pop	{r3, r4, r5, pc}
 801340c:	24020a18 	.word	0x24020a18

08013410 <sniprintf>:
 8013410:	b40c      	push	{r2, r3}
 8013412:	b530      	push	{r4, r5, lr}
 8013414:	4b17      	ldr	r3, [pc, #92]	; (8013474 <sniprintf+0x64>)
 8013416:	1e0c      	subs	r4, r1, #0
 8013418:	b09d      	sub	sp, #116	; 0x74
 801341a:	681d      	ldr	r5, [r3, #0]
 801341c:	da08      	bge.n	8013430 <sniprintf+0x20>
 801341e:	238b      	movs	r3, #139	; 0x8b
 8013420:	602b      	str	r3, [r5, #0]
 8013422:	f04f 30ff 	mov.w	r0, #4294967295
 8013426:	b01d      	add	sp, #116	; 0x74
 8013428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801342c:	b002      	add	sp, #8
 801342e:	4770      	bx	lr
 8013430:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013434:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013438:	bf14      	ite	ne
 801343a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801343e:	4623      	moveq	r3, r4
 8013440:	9304      	str	r3, [sp, #16]
 8013442:	9307      	str	r3, [sp, #28]
 8013444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013448:	9002      	str	r0, [sp, #8]
 801344a:	9006      	str	r0, [sp, #24]
 801344c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013450:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013452:	ab21      	add	r3, sp, #132	; 0x84
 8013454:	a902      	add	r1, sp, #8
 8013456:	4628      	mov	r0, r5
 8013458:	9301      	str	r3, [sp, #4]
 801345a:	f000 f8bd 	bl	80135d8 <_svfiprintf_r>
 801345e:	1c43      	adds	r3, r0, #1
 8013460:	bfbc      	itt	lt
 8013462:	238b      	movlt	r3, #139	; 0x8b
 8013464:	602b      	strlt	r3, [r5, #0]
 8013466:	2c00      	cmp	r4, #0
 8013468:	d0dd      	beq.n	8013426 <sniprintf+0x16>
 801346a:	9b02      	ldr	r3, [sp, #8]
 801346c:	2200      	movs	r2, #0
 801346e:	701a      	strb	r2, [r3, #0]
 8013470:	e7d9      	b.n	8013426 <sniprintf+0x16>
 8013472:	bf00      	nop
 8013474:	2400019c 	.word	0x2400019c

08013478 <strcpy>:
 8013478:	4603      	mov	r3, r0
 801347a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801347e:	f803 2b01 	strb.w	r2, [r3], #1
 8013482:	2a00      	cmp	r2, #0
 8013484:	d1f9      	bne.n	801347a <strcpy+0x2>
 8013486:	4770      	bx	lr

08013488 <strncmp>:
 8013488:	b510      	push	{r4, lr}
 801348a:	b16a      	cbz	r2, 80134a8 <strncmp+0x20>
 801348c:	3901      	subs	r1, #1
 801348e:	1884      	adds	r4, r0, r2
 8013490:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013494:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013498:	4293      	cmp	r3, r2
 801349a:	d103      	bne.n	80134a4 <strncmp+0x1c>
 801349c:	42a0      	cmp	r0, r4
 801349e:	d001      	beq.n	80134a4 <strncmp+0x1c>
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d1f5      	bne.n	8013490 <strncmp+0x8>
 80134a4:	1a98      	subs	r0, r3, r2
 80134a6:	bd10      	pop	{r4, pc}
 80134a8:	4610      	mov	r0, r2
 80134aa:	e7fc      	b.n	80134a6 <strncmp+0x1e>

080134ac <_vsniprintf_r>:
 80134ac:	b530      	push	{r4, r5, lr}
 80134ae:	1e14      	subs	r4, r2, #0
 80134b0:	4605      	mov	r5, r0
 80134b2:	b09b      	sub	sp, #108	; 0x6c
 80134b4:	4618      	mov	r0, r3
 80134b6:	da05      	bge.n	80134c4 <_vsniprintf_r+0x18>
 80134b8:	238b      	movs	r3, #139	; 0x8b
 80134ba:	602b      	str	r3, [r5, #0]
 80134bc:	f04f 30ff 	mov.w	r0, #4294967295
 80134c0:	b01b      	add	sp, #108	; 0x6c
 80134c2:	bd30      	pop	{r4, r5, pc}
 80134c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80134c8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80134cc:	bf14      	ite	ne
 80134ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80134d2:	4623      	moveq	r3, r4
 80134d4:	9302      	str	r3, [sp, #8]
 80134d6:	9305      	str	r3, [sp, #20]
 80134d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80134dc:	9100      	str	r1, [sp, #0]
 80134de:	9104      	str	r1, [sp, #16]
 80134e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80134e4:	4602      	mov	r2, r0
 80134e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80134e8:	4669      	mov	r1, sp
 80134ea:	4628      	mov	r0, r5
 80134ec:	f000 f874 	bl	80135d8 <_svfiprintf_r>
 80134f0:	1c43      	adds	r3, r0, #1
 80134f2:	bfbc      	itt	lt
 80134f4:	238b      	movlt	r3, #139	; 0x8b
 80134f6:	602b      	strlt	r3, [r5, #0]
 80134f8:	2c00      	cmp	r4, #0
 80134fa:	d0e1      	beq.n	80134c0 <_vsniprintf_r+0x14>
 80134fc:	9b00      	ldr	r3, [sp, #0]
 80134fe:	2200      	movs	r2, #0
 8013500:	701a      	strb	r2, [r3, #0]
 8013502:	e7dd      	b.n	80134c0 <_vsniprintf_r+0x14>

08013504 <vsniprintf>:
 8013504:	b507      	push	{r0, r1, r2, lr}
 8013506:	9300      	str	r3, [sp, #0]
 8013508:	4613      	mov	r3, r2
 801350a:	460a      	mov	r2, r1
 801350c:	4601      	mov	r1, r0
 801350e:	4803      	ldr	r0, [pc, #12]	; (801351c <vsniprintf+0x18>)
 8013510:	6800      	ldr	r0, [r0, #0]
 8013512:	f7ff ffcb 	bl	80134ac <_vsniprintf_r>
 8013516:	b003      	add	sp, #12
 8013518:	f85d fb04 	ldr.w	pc, [sp], #4
 801351c:	2400019c 	.word	0x2400019c

08013520 <__malloc_lock>:
 8013520:	4770      	bx	lr

08013522 <__malloc_unlock>:
 8013522:	4770      	bx	lr

08013524 <__ssputs_r>:
 8013524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013528:	688e      	ldr	r6, [r1, #8]
 801352a:	429e      	cmp	r6, r3
 801352c:	4682      	mov	sl, r0
 801352e:	460c      	mov	r4, r1
 8013530:	4690      	mov	r8, r2
 8013532:	4699      	mov	r9, r3
 8013534:	d837      	bhi.n	80135a6 <__ssputs_r+0x82>
 8013536:	898a      	ldrh	r2, [r1, #12]
 8013538:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801353c:	d031      	beq.n	80135a2 <__ssputs_r+0x7e>
 801353e:	6825      	ldr	r5, [r4, #0]
 8013540:	6909      	ldr	r1, [r1, #16]
 8013542:	1a6f      	subs	r7, r5, r1
 8013544:	6965      	ldr	r5, [r4, #20]
 8013546:	2302      	movs	r3, #2
 8013548:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801354c:	fb95 f5f3 	sdiv	r5, r5, r3
 8013550:	f109 0301 	add.w	r3, r9, #1
 8013554:	443b      	add	r3, r7
 8013556:	429d      	cmp	r5, r3
 8013558:	bf38      	it	cc
 801355a:	461d      	movcc	r5, r3
 801355c:	0553      	lsls	r3, r2, #21
 801355e:	d530      	bpl.n	80135c2 <__ssputs_r+0x9e>
 8013560:	4629      	mov	r1, r5
 8013562:	f7ff feeb 	bl	801333c <_malloc_r>
 8013566:	4606      	mov	r6, r0
 8013568:	b950      	cbnz	r0, 8013580 <__ssputs_r+0x5c>
 801356a:	230c      	movs	r3, #12
 801356c:	f8ca 3000 	str.w	r3, [sl]
 8013570:	89a3      	ldrh	r3, [r4, #12]
 8013572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013576:	81a3      	strh	r3, [r4, #12]
 8013578:	f04f 30ff 	mov.w	r0, #4294967295
 801357c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013580:	463a      	mov	r2, r7
 8013582:	6921      	ldr	r1, [r4, #16]
 8013584:	f7ff fe78 	bl	8013278 <memcpy>
 8013588:	89a3      	ldrh	r3, [r4, #12]
 801358a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801358e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013592:	81a3      	strh	r3, [r4, #12]
 8013594:	6126      	str	r6, [r4, #16]
 8013596:	6165      	str	r5, [r4, #20]
 8013598:	443e      	add	r6, r7
 801359a:	1bed      	subs	r5, r5, r7
 801359c:	6026      	str	r6, [r4, #0]
 801359e:	60a5      	str	r5, [r4, #8]
 80135a0:	464e      	mov	r6, r9
 80135a2:	454e      	cmp	r6, r9
 80135a4:	d900      	bls.n	80135a8 <__ssputs_r+0x84>
 80135a6:	464e      	mov	r6, r9
 80135a8:	4632      	mov	r2, r6
 80135aa:	4641      	mov	r1, r8
 80135ac:	6820      	ldr	r0, [r4, #0]
 80135ae:	f000 fa93 	bl	8013ad8 <memmove>
 80135b2:	68a3      	ldr	r3, [r4, #8]
 80135b4:	1b9b      	subs	r3, r3, r6
 80135b6:	60a3      	str	r3, [r4, #8]
 80135b8:	6823      	ldr	r3, [r4, #0]
 80135ba:	441e      	add	r6, r3
 80135bc:	6026      	str	r6, [r4, #0]
 80135be:	2000      	movs	r0, #0
 80135c0:	e7dc      	b.n	801357c <__ssputs_r+0x58>
 80135c2:	462a      	mov	r2, r5
 80135c4:	f000 faa1 	bl	8013b0a <_realloc_r>
 80135c8:	4606      	mov	r6, r0
 80135ca:	2800      	cmp	r0, #0
 80135cc:	d1e2      	bne.n	8013594 <__ssputs_r+0x70>
 80135ce:	6921      	ldr	r1, [r4, #16]
 80135d0:	4650      	mov	r0, sl
 80135d2:	f7ff fe65 	bl	80132a0 <_free_r>
 80135d6:	e7c8      	b.n	801356a <__ssputs_r+0x46>

080135d8 <_svfiprintf_r>:
 80135d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135dc:	461d      	mov	r5, r3
 80135de:	898b      	ldrh	r3, [r1, #12]
 80135e0:	061f      	lsls	r7, r3, #24
 80135e2:	b09d      	sub	sp, #116	; 0x74
 80135e4:	4680      	mov	r8, r0
 80135e6:	460c      	mov	r4, r1
 80135e8:	4616      	mov	r6, r2
 80135ea:	d50f      	bpl.n	801360c <_svfiprintf_r+0x34>
 80135ec:	690b      	ldr	r3, [r1, #16]
 80135ee:	b96b      	cbnz	r3, 801360c <_svfiprintf_r+0x34>
 80135f0:	2140      	movs	r1, #64	; 0x40
 80135f2:	f7ff fea3 	bl	801333c <_malloc_r>
 80135f6:	6020      	str	r0, [r4, #0]
 80135f8:	6120      	str	r0, [r4, #16]
 80135fa:	b928      	cbnz	r0, 8013608 <_svfiprintf_r+0x30>
 80135fc:	230c      	movs	r3, #12
 80135fe:	f8c8 3000 	str.w	r3, [r8]
 8013602:	f04f 30ff 	mov.w	r0, #4294967295
 8013606:	e0c8      	b.n	801379a <_svfiprintf_r+0x1c2>
 8013608:	2340      	movs	r3, #64	; 0x40
 801360a:	6163      	str	r3, [r4, #20]
 801360c:	2300      	movs	r3, #0
 801360e:	9309      	str	r3, [sp, #36]	; 0x24
 8013610:	2320      	movs	r3, #32
 8013612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013616:	2330      	movs	r3, #48	; 0x30
 8013618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801361c:	9503      	str	r5, [sp, #12]
 801361e:	f04f 0b01 	mov.w	fp, #1
 8013622:	4637      	mov	r7, r6
 8013624:	463d      	mov	r5, r7
 8013626:	f815 3b01 	ldrb.w	r3, [r5], #1
 801362a:	b10b      	cbz	r3, 8013630 <_svfiprintf_r+0x58>
 801362c:	2b25      	cmp	r3, #37	; 0x25
 801362e:	d13e      	bne.n	80136ae <_svfiprintf_r+0xd6>
 8013630:	ebb7 0a06 	subs.w	sl, r7, r6
 8013634:	d00b      	beq.n	801364e <_svfiprintf_r+0x76>
 8013636:	4653      	mov	r3, sl
 8013638:	4632      	mov	r2, r6
 801363a:	4621      	mov	r1, r4
 801363c:	4640      	mov	r0, r8
 801363e:	f7ff ff71 	bl	8013524 <__ssputs_r>
 8013642:	3001      	adds	r0, #1
 8013644:	f000 80a4 	beq.w	8013790 <_svfiprintf_r+0x1b8>
 8013648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801364a:	4453      	add	r3, sl
 801364c:	9309      	str	r3, [sp, #36]	; 0x24
 801364e:	783b      	ldrb	r3, [r7, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	f000 809d 	beq.w	8013790 <_svfiprintf_r+0x1b8>
 8013656:	2300      	movs	r3, #0
 8013658:	f04f 32ff 	mov.w	r2, #4294967295
 801365c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013660:	9304      	str	r3, [sp, #16]
 8013662:	9307      	str	r3, [sp, #28]
 8013664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013668:	931a      	str	r3, [sp, #104]	; 0x68
 801366a:	462f      	mov	r7, r5
 801366c:	2205      	movs	r2, #5
 801366e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013672:	4850      	ldr	r0, [pc, #320]	; (80137b4 <_svfiprintf_r+0x1dc>)
 8013674:	f7ec fe3c 	bl	80002f0 <memchr>
 8013678:	9b04      	ldr	r3, [sp, #16]
 801367a:	b9d0      	cbnz	r0, 80136b2 <_svfiprintf_r+0xda>
 801367c:	06d9      	lsls	r1, r3, #27
 801367e:	bf44      	itt	mi
 8013680:	2220      	movmi	r2, #32
 8013682:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013686:	071a      	lsls	r2, r3, #28
 8013688:	bf44      	itt	mi
 801368a:	222b      	movmi	r2, #43	; 0x2b
 801368c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013690:	782a      	ldrb	r2, [r5, #0]
 8013692:	2a2a      	cmp	r2, #42	; 0x2a
 8013694:	d015      	beq.n	80136c2 <_svfiprintf_r+0xea>
 8013696:	9a07      	ldr	r2, [sp, #28]
 8013698:	462f      	mov	r7, r5
 801369a:	2000      	movs	r0, #0
 801369c:	250a      	movs	r5, #10
 801369e:	4639      	mov	r1, r7
 80136a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136a4:	3b30      	subs	r3, #48	; 0x30
 80136a6:	2b09      	cmp	r3, #9
 80136a8:	d94d      	bls.n	8013746 <_svfiprintf_r+0x16e>
 80136aa:	b1b8      	cbz	r0, 80136dc <_svfiprintf_r+0x104>
 80136ac:	e00f      	b.n	80136ce <_svfiprintf_r+0xf6>
 80136ae:	462f      	mov	r7, r5
 80136b0:	e7b8      	b.n	8013624 <_svfiprintf_r+0x4c>
 80136b2:	4a40      	ldr	r2, [pc, #256]	; (80137b4 <_svfiprintf_r+0x1dc>)
 80136b4:	1a80      	subs	r0, r0, r2
 80136b6:	fa0b f000 	lsl.w	r0, fp, r0
 80136ba:	4318      	orrs	r0, r3
 80136bc:	9004      	str	r0, [sp, #16]
 80136be:	463d      	mov	r5, r7
 80136c0:	e7d3      	b.n	801366a <_svfiprintf_r+0x92>
 80136c2:	9a03      	ldr	r2, [sp, #12]
 80136c4:	1d11      	adds	r1, r2, #4
 80136c6:	6812      	ldr	r2, [r2, #0]
 80136c8:	9103      	str	r1, [sp, #12]
 80136ca:	2a00      	cmp	r2, #0
 80136cc:	db01      	blt.n	80136d2 <_svfiprintf_r+0xfa>
 80136ce:	9207      	str	r2, [sp, #28]
 80136d0:	e004      	b.n	80136dc <_svfiprintf_r+0x104>
 80136d2:	4252      	negs	r2, r2
 80136d4:	f043 0302 	orr.w	r3, r3, #2
 80136d8:	9207      	str	r2, [sp, #28]
 80136da:	9304      	str	r3, [sp, #16]
 80136dc:	783b      	ldrb	r3, [r7, #0]
 80136de:	2b2e      	cmp	r3, #46	; 0x2e
 80136e0:	d10c      	bne.n	80136fc <_svfiprintf_r+0x124>
 80136e2:	787b      	ldrb	r3, [r7, #1]
 80136e4:	2b2a      	cmp	r3, #42	; 0x2a
 80136e6:	d133      	bne.n	8013750 <_svfiprintf_r+0x178>
 80136e8:	9b03      	ldr	r3, [sp, #12]
 80136ea:	1d1a      	adds	r2, r3, #4
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	9203      	str	r2, [sp, #12]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	bfb8      	it	lt
 80136f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80136f8:	3702      	adds	r7, #2
 80136fa:	9305      	str	r3, [sp, #20]
 80136fc:	4d2e      	ldr	r5, [pc, #184]	; (80137b8 <_svfiprintf_r+0x1e0>)
 80136fe:	7839      	ldrb	r1, [r7, #0]
 8013700:	2203      	movs	r2, #3
 8013702:	4628      	mov	r0, r5
 8013704:	f7ec fdf4 	bl	80002f0 <memchr>
 8013708:	b138      	cbz	r0, 801371a <_svfiprintf_r+0x142>
 801370a:	2340      	movs	r3, #64	; 0x40
 801370c:	1b40      	subs	r0, r0, r5
 801370e:	fa03 f000 	lsl.w	r0, r3, r0
 8013712:	9b04      	ldr	r3, [sp, #16]
 8013714:	4303      	orrs	r3, r0
 8013716:	3701      	adds	r7, #1
 8013718:	9304      	str	r3, [sp, #16]
 801371a:	7839      	ldrb	r1, [r7, #0]
 801371c:	4827      	ldr	r0, [pc, #156]	; (80137bc <_svfiprintf_r+0x1e4>)
 801371e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013722:	2206      	movs	r2, #6
 8013724:	1c7e      	adds	r6, r7, #1
 8013726:	f7ec fde3 	bl	80002f0 <memchr>
 801372a:	2800      	cmp	r0, #0
 801372c:	d038      	beq.n	80137a0 <_svfiprintf_r+0x1c8>
 801372e:	4b24      	ldr	r3, [pc, #144]	; (80137c0 <_svfiprintf_r+0x1e8>)
 8013730:	bb13      	cbnz	r3, 8013778 <_svfiprintf_r+0x1a0>
 8013732:	9b03      	ldr	r3, [sp, #12]
 8013734:	3307      	adds	r3, #7
 8013736:	f023 0307 	bic.w	r3, r3, #7
 801373a:	3308      	adds	r3, #8
 801373c:	9303      	str	r3, [sp, #12]
 801373e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013740:	444b      	add	r3, r9
 8013742:	9309      	str	r3, [sp, #36]	; 0x24
 8013744:	e76d      	b.n	8013622 <_svfiprintf_r+0x4a>
 8013746:	fb05 3202 	mla	r2, r5, r2, r3
 801374a:	2001      	movs	r0, #1
 801374c:	460f      	mov	r7, r1
 801374e:	e7a6      	b.n	801369e <_svfiprintf_r+0xc6>
 8013750:	2300      	movs	r3, #0
 8013752:	3701      	adds	r7, #1
 8013754:	9305      	str	r3, [sp, #20]
 8013756:	4619      	mov	r1, r3
 8013758:	250a      	movs	r5, #10
 801375a:	4638      	mov	r0, r7
 801375c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013760:	3a30      	subs	r2, #48	; 0x30
 8013762:	2a09      	cmp	r2, #9
 8013764:	d903      	bls.n	801376e <_svfiprintf_r+0x196>
 8013766:	2b00      	cmp	r3, #0
 8013768:	d0c8      	beq.n	80136fc <_svfiprintf_r+0x124>
 801376a:	9105      	str	r1, [sp, #20]
 801376c:	e7c6      	b.n	80136fc <_svfiprintf_r+0x124>
 801376e:	fb05 2101 	mla	r1, r5, r1, r2
 8013772:	2301      	movs	r3, #1
 8013774:	4607      	mov	r7, r0
 8013776:	e7f0      	b.n	801375a <_svfiprintf_r+0x182>
 8013778:	ab03      	add	r3, sp, #12
 801377a:	9300      	str	r3, [sp, #0]
 801377c:	4622      	mov	r2, r4
 801377e:	4b11      	ldr	r3, [pc, #68]	; (80137c4 <_svfiprintf_r+0x1ec>)
 8013780:	a904      	add	r1, sp, #16
 8013782:	4640      	mov	r0, r8
 8013784:	f3af 8000 	nop.w
 8013788:	f1b0 3fff 	cmp.w	r0, #4294967295
 801378c:	4681      	mov	r9, r0
 801378e:	d1d6      	bne.n	801373e <_svfiprintf_r+0x166>
 8013790:	89a3      	ldrh	r3, [r4, #12]
 8013792:	065b      	lsls	r3, r3, #25
 8013794:	f53f af35 	bmi.w	8013602 <_svfiprintf_r+0x2a>
 8013798:	9809      	ldr	r0, [sp, #36]	; 0x24
 801379a:	b01d      	add	sp, #116	; 0x74
 801379c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137a0:	ab03      	add	r3, sp, #12
 80137a2:	9300      	str	r3, [sp, #0]
 80137a4:	4622      	mov	r2, r4
 80137a6:	4b07      	ldr	r3, [pc, #28]	; (80137c4 <_svfiprintf_r+0x1ec>)
 80137a8:	a904      	add	r1, sp, #16
 80137aa:	4640      	mov	r0, r8
 80137ac:	f000 f882 	bl	80138b4 <_printf_i>
 80137b0:	e7ea      	b.n	8013788 <_svfiprintf_r+0x1b0>
 80137b2:	bf00      	nop
 80137b4:	08016917 	.word	0x08016917
 80137b8:	0801691d 	.word	0x0801691d
 80137bc:	08016921 	.word	0x08016921
 80137c0:	00000000 	.word	0x00000000
 80137c4:	08013525 	.word	0x08013525

080137c8 <_printf_common>:
 80137c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137cc:	4691      	mov	r9, r2
 80137ce:	461f      	mov	r7, r3
 80137d0:	688a      	ldr	r2, [r1, #8]
 80137d2:	690b      	ldr	r3, [r1, #16]
 80137d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80137d8:	4293      	cmp	r3, r2
 80137da:	bfb8      	it	lt
 80137dc:	4613      	movlt	r3, r2
 80137de:	f8c9 3000 	str.w	r3, [r9]
 80137e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80137e6:	4606      	mov	r6, r0
 80137e8:	460c      	mov	r4, r1
 80137ea:	b112      	cbz	r2, 80137f2 <_printf_common+0x2a>
 80137ec:	3301      	adds	r3, #1
 80137ee:	f8c9 3000 	str.w	r3, [r9]
 80137f2:	6823      	ldr	r3, [r4, #0]
 80137f4:	0699      	lsls	r1, r3, #26
 80137f6:	bf42      	ittt	mi
 80137f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80137fc:	3302      	addmi	r3, #2
 80137fe:	f8c9 3000 	strmi.w	r3, [r9]
 8013802:	6825      	ldr	r5, [r4, #0]
 8013804:	f015 0506 	ands.w	r5, r5, #6
 8013808:	d107      	bne.n	801381a <_printf_common+0x52>
 801380a:	f104 0a19 	add.w	sl, r4, #25
 801380e:	68e3      	ldr	r3, [r4, #12]
 8013810:	f8d9 2000 	ldr.w	r2, [r9]
 8013814:	1a9b      	subs	r3, r3, r2
 8013816:	42ab      	cmp	r3, r5
 8013818:	dc28      	bgt.n	801386c <_printf_common+0xa4>
 801381a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801381e:	6822      	ldr	r2, [r4, #0]
 8013820:	3300      	adds	r3, #0
 8013822:	bf18      	it	ne
 8013824:	2301      	movne	r3, #1
 8013826:	0692      	lsls	r2, r2, #26
 8013828:	d42d      	bmi.n	8013886 <_printf_common+0xbe>
 801382a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801382e:	4639      	mov	r1, r7
 8013830:	4630      	mov	r0, r6
 8013832:	47c0      	blx	r8
 8013834:	3001      	adds	r0, #1
 8013836:	d020      	beq.n	801387a <_printf_common+0xb2>
 8013838:	6823      	ldr	r3, [r4, #0]
 801383a:	68e5      	ldr	r5, [r4, #12]
 801383c:	f8d9 2000 	ldr.w	r2, [r9]
 8013840:	f003 0306 	and.w	r3, r3, #6
 8013844:	2b04      	cmp	r3, #4
 8013846:	bf08      	it	eq
 8013848:	1aad      	subeq	r5, r5, r2
 801384a:	68a3      	ldr	r3, [r4, #8]
 801384c:	6922      	ldr	r2, [r4, #16]
 801384e:	bf0c      	ite	eq
 8013850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013854:	2500      	movne	r5, #0
 8013856:	4293      	cmp	r3, r2
 8013858:	bfc4      	itt	gt
 801385a:	1a9b      	subgt	r3, r3, r2
 801385c:	18ed      	addgt	r5, r5, r3
 801385e:	f04f 0900 	mov.w	r9, #0
 8013862:	341a      	adds	r4, #26
 8013864:	454d      	cmp	r5, r9
 8013866:	d11a      	bne.n	801389e <_printf_common+0xd6>
 8013868:	2000      	movs	r0, #0
 801386a:	e008      	b.n	801387e <_printf_common+0xb6>
 801386c:	2301      	movs	r3, #1
 801386e:	4652      	mov	r2, sl
 8013870:	4639      	mov	r1, r7
 8013872:	4630      	mov	r0, r6
 8013874:	47c0      	blx	r8
 8013876:	3001      	adds	r0, #1
 8013878:	d103      	bne.n	8013882 <_printf_common+0xba>
 801387a:	f04f 30ff 	mov.w	r0, #4294967295
 801387e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013882:	3501      	adds	r5, #1
 8013884:	e7c3      	b.n	801380e <_printf_common+0x46>
 8013886:	18e1      	adds	r1, r4, r3
 8013888:	1c5a      	adds	r2, r3, #1
 801388a:	2030      	movs	r0, #48	; 0x30
 801388c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013890:	4422      	add	r2, r4
 8013892:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013896:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801389a:	3302      	adds	r3, #2
 801389c:	e7c5      	b.n	801382a <_printf_common+0x62>
 801389e:	2301      	movs	r3, #1
 80138a0:	4622      	mov	r2, r4
 80138a2:	4639      	mov	r1, r7
 80138a4:	4630      	mov	r0, r6
 80138a6:	47c0      	blx	r8
 80138a8:	3001      	adds	r0, #1
 80138aa:	d0e6      	beq.n	801387a <_printf_common+0xb2>
 80138ac:	f109 0901 	add.w	r9, r9, #1
 80138b0:	e7d8      	b.n	8013864 <_printf_common+0x9c>
	...

080138b4 <_printf_i>:
 80138b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80138b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80138bc:	460c      	mov	r4, r1
 80138be:	7e09      	ldrb	r1, [r1, #24]
 80138c0:	b085      	sub	sp, #20
 80138c2:	296e      	cmp	r1, #110	; 0x6e
 80138c4:	4617      	mov	r7, r2
 80138c6:	4606      	mov	r6, r0
 80138c8:	4698      	mov	r8, r3
 80138ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80138cc:	f000 80b3 	beq.w	8013a36 <_printf_i+0x182>
 80138d0:	d822      	bhi.n	8013918 <_printf_i+0x64>
 80138d2:	2963      	cmp	r1, #99	; 0x63
 80138d4:	d036      	beq.n	8013944 <_printf_i+0x90>
 80138d6:	d80a      	bhi.n	80138ee <_printf_i+0x3a>
 80138d8:	2900      	cmp	r1, #0
 80138da:	f000 80b9 	beq.w	8013a50 <_printf_i+0x19c>
 80138de:	2958      	cmp	r1, #88	; 0x58
 80138e0:	f000 8083 	beq.w	80139ea <_printf_i+0x136>
 80138e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80138e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80138ec:	e032      	b.n	8013954 <_printf_i+0xa0>
 80138ee:	2964      	cmp	r1, #100	; 0x64
 80138f0:	d001      	beq.n	80138f6 <_printf_i+0x42>
 80138f2:	2969      	cmp	r1, #105	; 0x69
 80138f4:	d1f6      	bne.n	80138e4 <_printf_i+0x30>
 80138f6:	6820      	ldr	r0, [r4, #0]
 80138f8:	6813      	ldr	r3, [r2, #0]
 80138fa:	0605      	lsls	r5, r0, #24
 80138fc:	f103 0104 	add.w	r1, r3, #4
 8013900:	d52a      	bpl.n	8013958 <_printf_i+0xa4>
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	6011      	str	r1, [r2, #0]
 8013906:	2b00      	cmp	r3, #0
 8013908:	da03      	bge.n	8013912 <_printf_i+0x5e>
 801390a:	222d      	movs	r2, #45	; 0x2d
 801390c:	425b      	negs	r3, r3
 801390e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013912:	486f      	ldr	r0, [pc, #444]	; (8013ad0 <_printf_i+0x21c>)
 8013914:	220a      	movs	r2, #10
 8013916:	e039      	b.n	801398c <_printf_i+0xd8>
 8013918:	2973      	cmp	r1, #115	; 0x73
 801391a:	f000 809d 	beq.w	8013a58 <_printf_i+0x1a4>
 801391e:	d808      	bhi.n	8013932 <_printf_i+0x7e>
 8013920:	296f      	cmp	r1, #111	; 0x6f
 8013922:	d020      	beq.n	8013966 <_printf_i+0xb2>
 8013924:	2970      	cmp	r1, #112	; 0x70
 8013926:	d1dd      	bne.n	80138e4 <_printf_i+0x30>
 8013928:	6823      	ldr	r3, [r4, #0]
 801392a:	f043 0320 	orr.w	r3, r3, #32
 801392e:	6023      	str	r3, [r4, #0]
 8013930:	e003      	b.n	801393a <_printf_i+0x86>
 8013932:	2975      	cmp	r1, #117	; 0x75
 8013934:	d017      	beq.n	8013966 <_printf_i+0xb2>
 8013936:	2978      	cmp	r1, #120	; 0x78
 8013938:	d1d4      	bne.n	80138e4 <_printf_i+0x30>
 801393a:	2378      	movs	r3, #120	; 0x78
 801393c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013940:	4864      	ldr	r0, [pc, #400]	; (8013ad4 <_printf_i+0x220>)
 8013942:	e055      	b.n	80139f0 <_printf_i+0x13c>
 8013944:	6813      	ldr	r3, [r2, #0]
 8013946:	1d19      	adds	r1, r3, #4
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	6011      	str	r1, [r2, #0]
 801394c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013954:	2301      	movs	r3, #1
 8013956:	e08c      	b.n	8013a72 <_printf_i+0x1be>
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	6011      	str	r1, [r2, #0]
 801395c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013960:	bf18      	it	ne
 8013962:	b21b      	sxthne	r3, r3
 8013964:	e7cf      	b.n	8013906 <_printf_i+0x52>
 8013966:	6813      	ldr	r3, [r2, #0]
 8013968:	6825      	ldr	r5, [r4, #0]
 801396a:	1d18      	adds	r0, r3, #4
 801396c:	6010      	str	r0, [r2, #0]
 801396e:	0628      	lsls	r0, r5, #24
 8013970:	d501      	bpl.n	8013976 <_printf_i+0xc2>
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	e002      	b.n	801397c <_printf_i+0xc8>
 8013976:	0668      	lsls	r0, r5, #25
 8013978:	d5fb      	bpl.n	8013972 <_printf_i+0xbe>
 801397a:	881b      	ldrh	r3, [r3, #0]
 801397c:	4854      	ldr	r0, [pc, #336]	; (8013ad0 <_printf_i+0x21c>)
 801397e:	296f      	cmp	r1, #111	; 0x6f
 8013980:	bf14      	ite	ne
 8013982:	220a      	movne	r2, #10
 8013984:	2208      	moveq	r2, #8
 8013986:	2100      	movs	r1, #0
 8013988:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801398c:	6865      	ldr	r5, [r4, #4]
 801398e:	60a5      	str	r5, [r4, #8]
 8013990:	2d00      	cmp	r5, #0
 8013992:	f2c0 8095 	blt.w	8013ac0 <_printf_i+0x20c>
 8013996:	6821      	ldr	r1, [r4, #0]
 8013998:	f021 0104 	bic.w	r1, r1, #4
 801399c:	6021      	str	r1, [r4, #0]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d13d      	bne.n	8013a1e <_printf_i+0x16a>
 80139a2:	2d00      	cmp	r5, #0
 80139a4:	f040 808e 	bne.w	8013ac4 <_printf_i+0x210>
 80139a8:	4665      	mov	r5, ip
 80139aa:	2a08      	cmp	r2, #8
 80139ac:	d10b      	bne.n	80139c6 <_printf_i+0x112>
 80139ae:	6823      	ldr	r3, [r4, #0]
 80139b0:	07db      	lsls	r3, r3, #31
 80139b2:	d508      	bpl.n	80139c6 <_printf_i+0x112>
 80139b4:	6923      	ldr	r3, [r4, #16]
 80139b6:	6862      	ldr	r2, [r4, #4]
 80139b8:	429a      	cmp	r2, r3
 80139ba:	bfde      	ittt	le
 80139bc:	2330      	movle	r3, #48	; 0x30
 80139be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80139c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80139c6:	ebac 0305 	sub.w	r3, ip, r5
 80139ca:	6123      	str	r3, [r4, #16]
 80139cc:	f8cd 8000 	str.w	r8, [sp]
 80139d0:	463b      	mov	r3, r7
 80139d2:	aa03      	add	r2, sp, #12
 80139d4:	4621      	mov	r1, r4
 80139d6:	4630      	mov	r0, r6
 80139d8:	f7ff fef6 	bl	80137c8 <_printf_common>
 80139dc:	3001      	adds	r0, #1
 80139de:	d14d      	bne.n	8013a7c <_printf_i+0x1c8>
 80139e0:	f04f 30ff 	mov.w	r0, #4294967295
 80139e4:	b005      	add	sp, #20
 80139e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139ea:	4839      	ldr	r0, [pc, #228]	; (8013ad0 <_printf_i+0x21c>)
 80139ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80139f0:	6813      	ldr	r3, [r2, #0]
 80139f2:	6821      	ldr	r1, [r4, #0]
 80139f4:	1d1d      	adds	r5, r3, #4
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	6015      	str	r5, [r2, #0]
 80139fa:	060a      	lsls	r2, r1, #24
 80139fc:	d50b      	bpl.n	8013a16 <_printf_i+0x162>
 80139fe:	07ca      	lsls	r2, r1, #31
 8013a00:	bf44      	itt	mi
 8013a02:	f041 0120 	orrmi.w	r1, r1, #32
 8013a06:	6021      	strmi	r1, [r4, #0]
 8013a08:	b91b      	cbnz	r3, 8013a12 <_printf_i+0x15e>
 8013a0a:	6822      	ldr	r2, [r4, #0]
 8013a0c:	f022 0220 	bic.w	r2, r2, #32
 8013a10:	6022      	str	r2, [r4, #0]
 8013a12:	2210      	movs	r2, #16
 8013a14:	e7b7      	b.n	8013986 <_printf_i+0xd2>
 8013a16:	064d      	lsls	r5, r1, #25
 8013a18:	bf48      	it	mi
 8013a1a:	b29b      	uxthmi	r3, r3
 8013a1c:	e7ef      	b.n	80139fe <_printf_i+0x14a>
 8013a1e:	4665      	mov	r5, ip
 8013a20:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a24:	fb02 3311 	mls	r3, r2, r1, r3
 8013a28:	5cc3      	ldrb	r3, [r0, r3]
 8013a2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013a2e:	460b      	mov	r3, r1
 8013a30:	2900      	cmp	r1, #0
 8013a32:	d1f5      	bne.n	8013a20 <_printf_i+0x16c>
 8013a34:	e7b9      	b.n	80139aa <_printf_i+0xf6>
 8013a36:	6813      	ldr	r3, [r2, #0]
 8013a38:	6825      	ldr	r5, [r4, #0]
 8013a3a:	6961      	ldr	r1, [r4, #20]
 8013a3c:	1d18      	adds	r0, r3, #4
 8013a3e:	6010      	str	r0, [r2, #0]
 8013a40:	0628      	lsls	r0, r5, #24
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	d501      	bpl.n	8013a4a <_printf_i+0x196>
 8013a46:	6019      	str	r1, [r3, #0]
 8013a48:	e002      	b.n	8013a50 <_printf_i+0x19c>
 8013a4a:	066a      	lsls	r2, r5, #25
 8013a4c:	d5fb      	bpl.n	8013a46 <_printf_i+0x192>
 8013a4e:	8019      	strh	r1, [r3, #0]
 8013a50:	2300      	movs	r3, #0
 8013a52:	6123      	str	r3, [r4, #16]
 8013a54:	4665      	mov	r5, ip
 8013a56:	e7b9      	b.n	80139cc <_printf_i+0x118>
 8013a58:	6813      	ldr	r3, [r2, #0]
 8013a5a:	1d19      	adds	r1, r3, #4
 8013a5c:	6011      	str	r1, [r2, #0]
 8013a5e:	681d      	ldr	r5, [r3, #0]
 8013a60:	6862      	ldr	r2, [r4, #4]
 8013a62:	2100      	movs	r1, #0
 8013a64:	4628      	mov	r0, r5
 8013a66:	f7ec fc43 	bl	80002f0 <memchr>
 8013a6a:	b108      	cbz	r0, 8013a70 <_printf_i+0x1bc>
 8013a6c:	1b40      	subs	r0, r0, r5
 8013a6e:	6060      	str	r0, [r4, #4]
 8013a70:	6863      	ldr	r3, [r4, #4]
 8013a72:	6123      	str	r3, [r4, #16]
 8013a74:	2300      	movs	r3, #0
 8013a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a7a:	e7a7      	b.n	80139cc <_printf_i+0x118>
 8013a7c:	6923      	ldr	r3, [r4, #16]
 8013a7e:	462a      	mov	r2, r5
 8013a80:	4639      	mov	r1, r7
 8013a82:	4630      	mov	r0, r6
 8013a84:	47c0      	blx	r8
 8013a86:	3001      	adds	r0, #1
 8013a88:	d0aa      	beq.n	80139e0 <_printf_i+0x12c>
 8013a8a:	6823      	ldr	r3, [r4, #0]
 8013a8c:	079b      	lsls	r3, r3, #30
 8013a8e:	d413      	bmi.n	8013ab8 <_printf_i+0x204>
 8013a90:	68e0      	ldr	r0, [r4, #12]
 8013a92:	9b03      	ldr	r3, [sp, #12]
 8013a94:	4298      	cmp	r0, r3
 8013a96:	bfb8      	it	lt
 8013a98:	4618      	movlt	r0, r3
 8013a9a:	e7a3      	b.n	80139e4 <_printf_i+0x130>
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	464a      	mov	r2, r9
 8013aa0:	4639      	mov	r1, r7
 8013aa2:	4630      	mov	r0, r6
 8013aa4:	47c0      	blx	r8
 8013aa6:	3001      	adds	r0, #1
 8013aa8:	d09a      	beq.n	80139e0 <_printf_i+0x12c>
 8013aaa:	3501      	adds	r5, #1
 8013aac:	68e3      	ldr	r3, [r4, #12]
 8013aae:	9a03      	ldr	r2, [sp, #12]
 8013ab0:	1a9b      	subs	r3, r3, r2
 8013ab2:	42ab      	cmp	r3, r5
 8013ab4:	dcf2      	bgt.n	8013a9c <_printf_i+0x1e8>
 8013ab6:	e7eb      	b.n	8013a90 <_printf_i+0x1dc>
 8013ab8:	2500      	movs	r5, #0
 8013aba:	f104 0919 	add.w	r9, r4, #25
 8013abe:	e7f5      	b.n	8013aac <_printf_i+0x1f8>
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d1ac      	bne.n	8013a1e <_printf_i+0x16a>
 8013ac4:	7803      	ldrb	r3, [r0, #0]
 8013ac6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013aca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ace:	e76c      	b.n	80139aa <_printf_i+0xf6>
 8013ad0:	08016928 	.word	0x08016928
 8013ad4:	08016939 	.word	0x08016939

08013ad8 <memmove>:
 8013ad8:	4288      	cmp	r0, r1
 8013ada:	b510      	push	{r4, lr}
 8013adc:	eb01 0302 	add.w	r3, r1, r2
 8013ae0:	d807      	bhi.n	8013af2 <memmove+0x1a>
 8013ae2:	1e42      	subs	r2, r0, #1
 8013ae4:	4299      	cmp	r1, r3
 8013ae6:	d00a      	beq.n	8013afe <memmove+0x26>
 8013ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013aec:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013af0:	e7f8      	b.n	8013ae4 <memmove+0xc>
 8013af2:	4283      	cmp	r3, r0
 8013af4:	d9f5      	bls.n	8013ae2 <memmove+0xa>
 8013af6:	1881      	adds	r1, r0, r2
 8013af8:	1ad2      	subs	r2, r2, r3
 8013afa:	42d3      	cmn	r3, r2
 8013afc:	d100      	bne.n	8013b00 <memmove+0x28>
 8013afe:	bd10      	pop	{r4, pc}
 8013b00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013b04:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013b08:	e7f7      	b.n	8013afa <memmove+0x22>

08013b0a <_realloc_r>:
 8013b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b0c:	4607      	mov	r7, r0
 8013b0e:	4614      	mov	r4, r2
 8013b10:	460e      	mov	r6, r1
 8013b12:	b921      	cbnz	r1, 8013b1e <_realloc_r+0x14>
 8013b14:	4611      	mov	r1, r2
 8013b16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013b1a:	f7ff bc0f 	b.w	801333c <_malloc_r>
 8013b1e:	b922      	cbnz	r2, 8013b2a <_realloc_r+0x20>
 8013b20:	f7ff fbbe 	bl	80132a0 <_free_r>
 8013b24:	4625      	mov	r5, r4
 8013b26:	4628      	mov	r0, r5
 8013b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b2a:	f000 f814 	bl	8013b56 <_malloc_usable_size_r>
 8013b2e:	42a0      	cmp	r0, r4
 8013b30:	d20f      	bcs.n	8013b52 <_realloc_r+0x48>
 8013b32:	4621      	mov	r1, r4
 8013b34:	4638      	mov	r0, r7
 8013b36:	f7ff fc01 	bl	801333c <_malloc_r>
 8013b3a:	4605      	mov	r5, r0
 8013b3c:	2800      	cmp	r0, #0
 8013b3e:	d0f2      	beq.n	8013b26 <_realloc_r+0x1c>
 8013b40:	4631      	mov	r1, r6
 8013b42:	4622      	mov	r2, r4
 8013b44:	f7ff fb98 	bl	8013278 <memcpy>
 8013b48:	4631      	mov	r1, r6
 8013b4a:	4638      	mov	r0, r7
 8013b4c:	f7ff fba8 	bl	80132a0 <_free_r>
 8013b50:	e7e9      	b.n	8013b26 <_realloc_r+0x1c>
 8013b52:	4635      	mov	r5, r6
 8013b54:	e7e7      	b.n	8013b26 <_realloc_r+0x1c>

08013b56 <_malloc_usable_size_r>:
 8013b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b5a:	1f18      	subs	r0, r3, #4
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	bfbc      	itt	lt
 8013b60:	580b      	ldrlt	r3, [r1, r0]
 8013b62:	18c0      	addlt	r0, r0, r3
 8013b64:	4770      	bx	lr

08013b66 <checkint>:
 8013b66:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8013b6a:	2b7e      	cmp	r3, #126	; 0x7e
 8013b6c:	dd10      	ble.n	8013b90 <checkint+0x2a>
 8013b6e:	2b96      	cmp	r3, #150	; 0x96
 8013b70:	dc0c      	bgt.n	8013b8c <checkint+0x26>
 8013b72:	2201      	movs	r2, #1
 8013b74:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8013b78:	fa02 f303 	lsl.w	r3, r2, r3
 8013b7c:	1e5a      	subs	r2, r3, #1
 8013b7e:	4202      	tst	r2, r0
 8013b80:	d106      	bne.n	8013b90 <checkint+0x2a>
 8013b82:	4203      	tst	r3, r0
 8013b84:	bf0c      	ite	eq
 8013b86:	2002      	moveq	r0, #2
 8013b88:	2001      	movne	r0, #1
 8013b8a:	4770      	bx	lr
 8013b8c:	2002      	movs	r0, #2
 8013b8e:	4770      	bx	lr
 8013b90:	2000      	movs	r0, #0
 8013b92:	4770      	bx	lr
 8013b94:	0000      	movs	r0, r0
	...

08013b98 <powf>:
 8013b98:	ee10 1a10 	vmov	r1, s0
 8013b9c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8013ba0:	ee10 4a90 	vmov	r4, s1
 8013ba4:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8013ba8:	0062      	lsls	r2, r4, #1
 8013baa:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8013bae:	eef0 4a60 	vmov.f32	s9, s1
 8013bb2:	f102 30ff 	add.w	r0, r2, #4294967295
 8013bb6:	4b92      	ldr	r3, [pc, #584]	; (8013e00 <powf+0x268>)
 8013bb8:	d255      	bcs.n	8013c66 <powf+0xce>
 8013bba:	4298      	cmp	r0, r3
 8013bbc:	d855      	bhi.n	8013c6a <powf+0xd2>
 8013bbe:	2000      	movs	r0, #0
 8013bc0:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8013bc4:	4a8f      	ldr	r2, [pc, #572]	; (8013e04 <powf+0x26c>)
 8013bc6:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 8013bca:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8013bce:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8013bd2:	0ddb      	lsrs	r3, r3, #23
 8013bd4:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8013bd8:	05db      	lsls	r3, r3, #23
 8013bda:	ed94 6b00 	vldr	d6, [r4]
 8013bde:	1ac9      	subs	r1, r1, r3
 8013be0:	ee07 1a90 	vmov	s15, r1
 8013be4:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8013be8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013bec:	eea6 2b07 	vfma.f64	d2, d6, d7
 8013bf0:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 8013bf4:	ee22 6b02 	vmul.f64	d6, d2, d2
 8013bf8:	eea2 7b05 	vfma.f64	d7, d2, d5
 8013bfc:	15db      	asrs	r3, r3, #23
 8013bfe:	ed94 5b02 	vldr	d5, [r4, #8]
 8013c02:	ee00 3a10 	vmov	s0, r3
 8013c06:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8013c0a:	ee30 0b05 	vadd.f64	d0, d0, d5
 8013c0e:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 8013c12:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 8013c16:	eea2 0b05 	vfma.f64	d0, d2, d5
 8013c1a:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 8013c1e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8013c22:	eea6 0b05 	vfma.f64	d0, d6, d5
 8013c26:	ee26 6b06 	vmul.f64	d6, d6, d6
 8013c2a:	eea7 0b06 	vfma.f64	d0, d7, d6
 8013c2e:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 8013c32:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013c36:	ee10 3a90 	vmov	r3, s1
 8013c3a:	2500      	movs	r5, #0
 8013c3c:	0bda      	lsrs	r2, r3, #15
 8013c3e:	2300      	movs	r3, #0
 8013c40:	b292      	uxth	r2, r2
 8013c42:	f248 04be 	movw	r4, #32958	; 0x80be
 8013c46:	429d      	cmp	r5, r3
 8013c48:	bf08      	it	eq
 8013c4a:	4294      	cmpeq	r4, r2
 8013c4c:	f080 8094 	bcs.w	8013d78 <powf+0x1e0>
 8013c50:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8013de8 <powf+0x250>
 8013c54:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c5c:	dd76      	ble.n	8013d4c <powf+0x1b4>
 8013c5e:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8013c62:	f000 be57 	b.w	8014914 <__math_oflowf>
 8013c66:	4298      	cmp	r0, r3
 8013c68:	d92d      	bls.n	8013cc6 <powf+0x12e>
 8013c6a:	b952      	cbnz	r2, 8013c82 <powf+0xea>
 8013c6c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8013c70:	005b      	lsls	r3, r3, #1
 8013c72:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8013c76:	f240 80ae 	bls.w	8013dd6 <powf+0x23e>
 8013c7a:	ee30 0a24 	vadd.f32	s0, s0, s9
 8013c7e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8013c82:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8013c86:	d105      	bne.n	8013c94 <powf+0xfc>
 8013c88:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8013c8c:	0064      	lsls	r4, r4, #1
 8013c8e:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8013c92:	e7f0      	b.n	8013c76 <powf+0xde>
 8013c94:	004b      	lsls	r3, r1, #1
 8013c96:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8013c9a:	d8ee      	bhi.n	8013c7a <powf+0xe2>
 8013c9c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8013ca0:	d1eb      	bne.n	8013c7a <powf+0xe2>
 8013ca2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8013ca6:	f000 8096 	beq.w	8013dd6 <powf+0x23e>
 8013caa:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8013cae:	ea6f 0404 	mvn.w	r4, r4
 8013cb2:	bf34      	ite	cc
 8013cb4:	2300      	movcc	r3, #0
 8013cb6:	2301      	movcs	r3, #1
 8013cb8:	0fe4      	lsrs	r4, r4, #31
 8013cba:	42a3      	cmp	r3, r4
 8013cbc:	f040 808e 	bne.w	8013ddc <powf+0x244>
 8013cc0:	ee24 0aa4 	vmul.f32	s0, s9, s9
 8013cc4:	e7db      	b.n	8013c7e <powf+0xe6>
 8013cc6:	004d      	lsls	r5, r1, #1
 8013cc8:	1e6a      	subs	r2, r5, #1
 8013cca:	429a      	cmp	r2, r3
 8013ccc:	d91b      	bls.n	8013d06 <powf+0x16e>
 8013cce:	2900      	cmp	r1, #0
 8013cd0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013cd4:	da0e      	bge.n	8013cf4 <powf+0x15c>
 8013cd6:	ee10 0a90 	vmov	r0, s1
 8013cda:	f7ff ff44 	bl	8013b66 <checkint>
 8013cde:	2801      	cmp	r0, #1
 8013ce0:	d108      	bne.n	8013cf4 <powf+0x15c>
 8013ce2:	eeb1 0a40 	vneg.f32	s0, s0
 8013ce6:	b93d      	cbnz	r5, 8013cf8 <powf+0x160>
 8013ce8:	2c00      	cmp	r4, #0
 8013cea:	dac8      	bge.n	8013c7e <powf+0xe6>
 8013cec:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8013cf0:	f000 be16 	b.w	8014920 <__math_divzerof>
 8013cf4:	2000      	movs	r0, #0
 8013cf6:	e7f6      	b.n	8013ce6 <powf+0x14e>
 8013cf8:	2c00      	cmp	r4, #0
 8013cfa:	dac0      	bge.n	8013c7e <powf+0xe6>
 8013cfc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013d00:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8013d04:	e7bb      	b.n	8013c7e <powf+0xe6>
 8013d06:	2900      	cmp	r1, #0
 8013d08:	da1e      	bge.n	8013d48 <powf+0x1b0>
 8013d0a:	ee10 0a90 	vmov	r0, s1
 8013d0e:	f7ff ff2a 	bl	8013b66 <checkint>
 8013d12:	b918      	cbnz	r0, 8013d1c <powf+0x184>
 8013d14:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8013d18:	f000 be12 	b.w	8014940 <__math_invalidf>
 8013d1c:	2801      	cmp	r0, #1
 8013d1e:	bf0c      	ite	eq
 8013d20:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8013d24:	2000      	movne	r0, #0
 8013d26:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013d2a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8013d2e:	f4bf af47 	bcs.w	8013bc0 <powf+0x28>
 8013d32:	eddf 0a35 	vldr	s1, [pc, #212]	; 8013e08 <powf+0x270>
 8013d36:	ee20 0a20 	vmul.f32	s0, s0, s1
 8013d3a:	ee10 3a10 	vmov	r3, s0
 8013d3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013d42:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8013d46:	e73b      	b.n	8013bc0 <powf+0x28>
 8013d48:	2000      	movs	r0, #0
 8013d4a:	e7ee      	b.n	8013d2a <powf+0x192>
 8013d4c:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8013df0 <powf+0x258>
 8013d50:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d58:	d803      	bhi.n	8013d62 <powf+0x1ca>
 8013d5a:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8013d5e:	f000 bdcd 	b.w	80148fc <__math_uflowf>
 8013d62:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8013df8 <powf+0x260>
 8013d66:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d6e:	d503      	bpl.n	8013d78 <powf+0x1e0>
 8013d70:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8013d74:	f000 bdc8 	b.w	8014908 <__math_may_uflowf>
 8013d78:	4924      	ldr	r1, [pc, #144]	; (8013e0c <powf+0x274>)
 8013d7a:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 8013d7e:	ee30 6b07 	vadd.f64	d6, d0, d7
 8013d82:	ec55 4b16 	vmov	r4, r5, d6
 8013d86:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013d8a:	f004 021f 	and.w	r2, r4, #31
 8013d8e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8013d92:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 8013d96:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013d9a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013d9e:	e9d2 6700 	ldrd	r6, r7, [r2]
 8013da2:	eea0 7b06 	vfma.f64	d7, d0, d6
 8013da6:	1824      	adds	r4, r4, r0
 8013da8:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8013dac:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8013db0:	2000      	movs	r0, #0
 8013db2:	1982      	adds	r2, r0, r6
 8013db4:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 8013db8:	eb41 0307 	adc.w	r3, r1, r7
 8013dbc:	eea0 6b05 	vfma.f64	d6, d0, d5
 8013dc0:	ee20 0b00 	vmul.f64	d0, d0, d0
 8013dc4:	eea6 7b00 	vfma.f64	d7, d6, d0
 8013dc8:	ec43 2b16 	vmov	d6, r2, r3
 8013dcc:	ee27 0b06 	vmul.f64	d0, d7, d6
 8013dd0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013dd4:	e753      	b.n	8013c7e <powf+0xe6>
 8013dd6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013dda:	e750      	b.n	8013c7e <powf+0xe6>
 8013ddc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8013e10 <powf+0x278>
 8013de0:	e74d      	b.n	8013c7e <powf+0xe6>
 8013de2:	bf00      	nop
 8013de4:	f3af 8000 	nop.w
 8013de8:	ffd1d571 	.word	0xffd1d571
 8013dec:	405fffff 	.word	0x405fffff
 8013df0:	00000000 	.word	0x00000000
 8013df4:	c062c000 	.word	0xc062c000
 8013df8:	00000000 	.word	0x00000000
 8013dfc:	c062a000 	.word	0xc062a000
 8013e00:	fefffffe 	.word	0xfefffffe
 8013e04:	080169b0 	.word	0x080169b0
 8013e08:	4b000000 	.word	0x4b000000
 8013e0c:	08016b28 	.word	0x08016b28
	...

08013e18 <pow>:
 8013e18:	b570      	push	{r4, r5, r6, lr}
 8013e1a:	ed2d 8b0a 	vpush	{d8-d12}
 8013e1e:	eeb0 9b40 	vmov.f64	d9, d0
 8013e22:	eeb0 8b41 	vmov.f64	d8, d1
 8013e26:	4c8c      	ldr	r4, [pc, #560]	; (8014058 <pow+0x240>)
 8013e28:	b08a      	sub	sp, #40	; 0x28
 8013e2a:	f000 f9c1 	bl	80141b0 <__ieee754_pow>
 8013e2e:	f994 3000 	ldrsb.w	r3, [r4]
 8013e32:	eeb0 ab40 	vmov.f64	d10, d0
 8013e36:	1c5a      	adds	r2, r3, #1
 8013e38:	4626      	mov	r6, r4
 8013e3a:	d04b      	beq.n	8013ed4 <pow+0xbc>
 8013e3c:	eeb4 8b48 	vcmp.f64	d8, d8
 8013e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e44:	d646      	bvs.n	8013ed4 <pow+0xbc>
 8013e46:	eeb4 9b49 	vcmp.f64	d9, d9
 8013e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e4e:	d719      	bvc.n	8013e84 <pow+0x6c>
 8013e50:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e58:	d13c      	bne.n	8013ed4 <pow+0xbc>
 8013e5a:	2201      	movs	r2, #1
 8013e5c:	9200      	str	r2, [sp, #0]
 8013e5e:	497f      	ldr	r1, [pc, #508]	; (801405c <pow+0x244>)
 8013e60:	4a7f      	ldr	r2, [pc, #508]	; (8014060 <pow+0x248>)
 8013e62:	9201      	str	r2, [sp, #4]
 8013e64:	2000      	movs	r0, #0
 8013e66:	2200      	movs	r2, #0
 8013e68:	2b02      	cmp	r3, #2
 8013e6a:	9208      	str	r2, [sp, #32]
 8013e6c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8013e70:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013e74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013e78:	d02a      	beq.n	8013ed0 <pow+0xb8>
 8013e7a:	4668      	mov	r0, sp
 8013e7c:	f000 fd80 	bl	8014980 <matherr>
 8013e80:	bb00      	cbnz	r0, 8013ec4 <pow+0xac>
 8013e82:	e04e      	b.n	8013f22 <pow+0x10a>
 8013e84:	ed9f bb72 	vldr	d11, [pc, #456]	; 8014050 <pow+0x238>
 8013e88:	eeb4 9b4b 	vcmp.f64	d9, d11
 8013e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e90:	eeb0 cb4b 	vmov.f64	d12, d11
 8013e94:	d14a      	bne.n	8013f2c <pow+0x114>
 8013e96:	eeb4 8b4b 	vcmp.f64	d8, d11
 8013e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e9e:	d11f      	bne.n	8013ee0 <pow+0xc8>
 8013ea0:	2201      	movs	r2, #1
 8013ea2:	9200      	str	r2, [sp, #0]
 8013ea4:	4a6e      	ldr	r2, [pc, #440]	; (8014060 <pow+0x248>)
 8013ea6:	9201      	str	r2, [sp, #4]
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	9208      	str	r2, [sp, #32]
 8013eac:	ed8d 9b02 	vstr	d9, [sp, #8]
 8013eb0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013eb4:	ed8d bb06 	vstr	d11, [sp, #24]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d0de      	beq.n	8013e7a <pow+0x62>
 8013ebc:	4b67      	ldr	r3, [pc, #412]	; (801405c <pow+0x244>)
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013ec4:	9b08      	ldr	r3, [sp, #32]
 8013ec6:	b11b      	cbz	r3, 8013ed0 <pow+0xb8>
 8013ec8:	f7ff f99c 	bl	8013204 <__errno>
 8013ecc:	9b08      	ldr	r3, [sp, #32]
 8013ece:	6003      	str	r3, [r0, #0]
 8013ed0:	ed9d ab06 	vldr	d10, [sp, #24]
 8013ed4:	eeb0 0b4a 	vmov.f64	d0, d10
 8013ed8:	b00a      	add	sp, #40	; 0x28
 8013eda:	ecbd 8b0a 	vpop	{d8-d12}
 8013ede:	bd70      	pop	{r4, r5, r6, pc}
 8013ee0:	eeb0 0b48 	vmov.f64	d0, d8
 8013ee4:	f000 fd44 	bl	8014970 <finite>
 8013ee8:	2800      	cmp	r0, #0
 8013eea:	d0f3      	beq.n	8013ed4 <pow+0xbc>
 8013eec:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8013ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef4:	d5ee      	bpl.n	8013ed4 <pow+0xbc>
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	9300      	str	r3, [sp, #0]
 8013efa:	4b59      	ldr	r3, [pc, #356]	; (8014060 <pow+0x248>)
 8013efc:	9301      	str	r3, [sp, #4]
 8013efe:	2300      	movs	r3, #0
 8013f00:	9308      	str	r3, [sp, #32]
 8013f02:	f994 3000 	ldrsb.w	r3, [r4]
 8013f06:	ed8d 9b02 	vstr	d9, [sp, #8]
 8013f0a:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013f0e:	b913      	cbnz	r3, 8013f16 <pow+0xfe>
 8013f10:	ed8d bb06 	vstr	d11, [sp, #24]
 8013f14:	e7b1      	b.n	8013e7a <pow+0x62>
 8013f16:	4953      	ldr	r1, [pc, #332]	; (8014064 <pow+0x24c>)
 8013f18:	2000      	movs	r0, #0
 8013f1a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013f1e:	2b02      	cmp	r3, #2
 8013f20:	d1ab      	bne.n	8013e7a <pow+0x62>
 8013f22:	f7ff f96f 	bl	8013204 <__errno>
 8013f26:	2321      	movs	r3, #33	; 0x21
 8013f28:	6003      	str	r3, [r0, #0]
 8013f2a:	e7cb      	b.n	8013ec4 <pow+0xac>
 8013f2c:	f000 fd20 	bl	8014970 <finite>
 8013f30:	4605      	mov	r5, r0
 8013f32:	2800      	cmp	r0, #0
 8013f34:	d164      	bne.n	8014000 <pow+0x1e8>
 8013f36:	eeb0 0b49 	vmov.f64	d0, d9
 8013f3a:	f000 fd19 	bl	8014970 <finite>
 8013f3e:	2800      	cmp	r0, #0
 8013f40:	d05e      	beq.n	8014000 <pow+0x1e8>
 8013f42:	eeb0 0b48 	vmov.f64	d0, d8
 8013f46:	f000 fd13 	bl	8014970 <finite>
 8013f4a:	2800      	cmp	r0, #0
 8013f4c:	d058      	beq.n	8014000 <pow+0x1e8>
 8013f4e:	eeb4 ab4a 	vcmp.f64	d10, d10
 8013f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f56:	f994 3000 	ldrsb.w	r3, [r4]
 8013f5a:	4a41      	ldr	r2, [pc, #260]	; (8014060 <pow+0x248>)
 8013f5c:	d70e      	bvc.n	8013f7c <pow+0x164>
 8013f5e:	2101      	movs	r1, #1
 8013f60:	e9cd 1200 	strd	r1, r2, [sp]
 8013f64:	9508      	str	r5, [sp, #32]
 8013f66:	ed8d 9b02 	vstr	d9, [sp, #8]
 8013f6a:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d0ce      	beq.n	8013f10 <pow+0xf8>
 8013f72:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 8013f76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013f7a:	e7d0      	b.n	8013f1e <pow+0x106>
 8013f7c:	2103      	movs	r1, #3
 8013f7e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013f82:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8013f86:	ee28 8b07 	vmul.f64	d8, d8, d7
 8013f8a:	e9cd 1200 	strd	r1, r2, [sp]
 8013f8e:	9508      	str	r5, [sp, #32]
 8013f90:	ed8d 9b02 	vstr	d9, [sp, #8]
 8013f94:	b9fb      	cbnz	r3, 8013fd6 <pow+0x1be>
 8013f96:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 8013f9a:	4b33      	ldr	r3, [pc, #204]	; (8014068 <pow+0x250>)
 8013f9c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013fa8:	d54b      	bpl.n	8014042 <pow+0x22a>
 8013faa:	eeb0 0b48 	vmov.f64	d0, d8
 8013fae:	f000 fcf3 	bl	8014998 <rint>
 8013fb2:	eeb4 0b48 	vcmp.f64	d0, d8
 8013fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fba:	d004      	beq.n	8013fc6 <pow+0x1ae>
 8013fbc:	4b2b      	ldr	r3, [pc, #172]	; (801406c <pow+0x254>)
 8013fbe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013fc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013fc6:	f996 3000 	ldrsb.w	r3, [r6]
 8013fca:	2b02      	cmp	r3, #2
 8013fcc:	d139      	bne.n	8014042 <pow+0x22a>
 8013fce:	f7ff f919 	bl	8013204 <__errno>
 8013fd2:	2322      	movs	r3, #34	; 0x22
 8013fd4:	e7a8      	b.n	8013f28 <pow+0x110>
 8013fd6:	4b26      	ldr	r3, [pc, #152]	; (8014070 <pow+0x258>)
 8013fd8:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 8013fdc:	2200      	movs	r2, #0
 8013fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fe2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013fe6:	d5ee      	bpl.n	8013fc6 <pow+0x1ae>
 8013fe8:	eeb0 0b48 	vmov.f64	d0, d8
 8013fec:	f000 fcd4 	bl	8014998 <rint>
 8013ff0:	eeb4 0b48 	vcmp.f64	d0, d8
 8013ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ff8:	d0e5      	beq.n	8013fc6 <pow+0x1ae>
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	4b19      	ldr	r3, [pc, #100]	; (8014064 <pow+0x24c>)
 8013ffe:	e7e0      	b.n	8013fc2 <pow+0x1aa>
 8014000:	eeb5 ab40 	vcmp.f64	d10, #0.0
 8014004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014008:	f47f af64 	bne.w	8013ed4 <pow+0xbc>
 801400c:	eeb0 0b49 	vmov.f64	d0, d9
 8014010:	f000 fcae 	bl	8014970 <finite>
 8014014:	2800      	cmp	r0, #0
 8014016:	f43f af5d 	beq.w	8013ed4 <pow+0xbc>
 801401a:	eeb0 0b48 	vmov.f64	d0, d8
 801401e:	f000 fca7 	bl	8014970 <finite>
 8014022:	2800      	cmp	r0, #0
 8014024:	f43f af56 	beq.w	8013ed4 <pow+0xbc>
 8014028:	2304      	movs	r3, #4
 801402a:	9300      	str	r3, [sp, #0]
 801402c:	4b0c      	ldr	r3, [pc, #48]	; (8014060 <pow+0x248>)
 801402e:	9301      	str	r3, [sp, #4]
 8014030:	2300      	movs	r3, #0
 8014032:	9308      	str	r3, [sp, #32]
 8014034:	ed8d 9b02 	vstr	d9, [sp, #8]
 8014038:	ed8d 8b04 	vstr	d8, [sp, #16]
 801403c:	ed8d cb06 	vstr	d12, [sp, #24]
 8014040:	e7c1      	b.n	8013fc6 <pow+0x1ae>
 8014042:	4668      	mov	r0, sp
 8014044:	f000 fc9c 	bl	8014980 <matherr>
 8014048:	2800      	cmp	r0, #0
 801404a:	f47f af3b 	bne.w	8013ec4 <pow+0xac>
 801404e:	e7be      	b.n	8013fce <pow+0x1b6>
	...
 8014058:	24000200 	.word	0x24000200
 801405c:	3ff00000 	.word	0x3ff00000
 8014060:	08016ad8 	.word	0x08016ad8
 8014064:	fff00000 	.word	0xfff00000
 8014068:	47efffff 	.word	0x47efffff
 801406c:	c7efffff 	.word	0xc7efffff
 8014070:	7ff00000 	.word	0x7ff00000
 8014074:	00000000 	.word	0x00000000

08014078 <sqrt>:
 8014078:	b500      	push	{lr}
 801407a:	ed2d 8b02 	vpush	{d8}
 801407e:	eeb0 8b40 	vmov.f64	d8, d0
 8014082:	b08b      	sub	sp, #44	; 0x2c
 8014084:	f000 fc1a 	bl	80148bc <__ieee754_sqrt>
 8014088:	4b1f      	ldr	r3, [pc, #124]	; (8014108 <sqrt+0x90>)
 801408a:	f993 3000 	ldrsb.w	r3, [r3]
 801408e:	1c5a      	adds	r2, r3, #1
 8014090:	d024      	beq.n	80140dc <sqrt+0x64>
 8014092:	eeb4 8b48 	vcmp.f64	d8, d8
 8014096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801409a:	d61f      	bvs.n	80140dc <sqrt+0x64>
 801409c:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8014100 <sqrt+0x88>
 80140a0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80140a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140a8:	d518      	bpl.n	80140dc <sqrt+0x64>
 80140aa:	2201      	movs	r2, #1
 80140ac:	9200      	str	r2, [sp, #0]
 80140ae:	4a17      	ldr	r2, [pc, #92]	; (801410c <sqrt+0x94>)
 80140b0:	9201      	str	r2, [sp, #4]
 80140b2:	2200      	movs	r2, #0
 80140b4:	9208      	str	r2, [sp, #32]
 80140b6:	ed8d 8b04 	vstr	d8, [sp, #16]
 80140ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80140be:	b993      	cbnz	r3, 80140e6 <sqrt+0x6e>
 80140c0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80140c4:	4668      	mov	r0, sp
 80140c6:	f000 fc5b 	bl	8014980 <matherr>
 80140ca:	b190      	cbz	r0, 80140f2 <sqrt+0x7a>
 80140cc:	9b08      	ldr	r3, [sp, #32]
 80140ce:	b11b      	cbz	r3, 80140d8 <sqrt+0x60>
 80140d0:	f7ff f898 	bl	8013204 <__errno>
 80140d4:	9b08      	ldr	r3, [sp, #32]
 80140d6:	6003      	str	r3, [r0, #0]
 80140d8:	ed9d 0b06 	vldr	d0, [sp, #24]
 80140dc:	b00b      	add	sp, #44	; 0x2c
 80140de:	ecbd 8b02 	vpop	{d8}
 80140e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80140e6:	2b02      	cmp	r3, #2
 80140e8:	ee87 6b07 	vdiv.f64	d6, d7, d7
 80140ec:	ed8d 6b06 	vstr	d6, [sp, #24]
 80140f0:	d1e8      	bne.n	80140c4 <sqrt+0x4c>
 80140f2:	f7ff f887 	bl	8013204 <__errno>
 80140f6:	2321      	movs	r3, #33	; 0x21
 80140f8:	6003      	str	r3, [r0, #0]
 80140fa:	e7e7      	b.n	80140cc <sqrt+0x54>
 80140fc:	f3af 8000 	nop.w
	...
 8014108:	24000200 	.word	0x24000200
 801410c:	08016adc 	.word	0x08016adc

08014110 <sqrtf>:
 8014110:	b500      	push	{lr}
 8014112:	ed2d 8b02 	vpush	{d8}
 8014116:	b08b      	sub	sp, #44	; 0x2c
 8014118:	eeb0 8a40 	vmov.f32	s16, s0
 801411c:	f000 fbd1 	bl	80148c2 <__ieee754_sqrtf>
 8014120:	4b21      	ldr	r3, [pc, #132]	; (80141a8 <sqrtf+0x98>)
 8014122:	f993 3000 	ldrsb.w	r3, [r3]
 8014126:	1c5a      	adds	r2, r3, #1
 8014128:	d028      	beq.n	801417c <sqrtf+0x6c>
 801412a:	eeb4 8a48 	vcmp.f32	s16, s16
 801412e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014132:	d623      	bvs.n	801417c <sqrtf+0x6c>
 8014134:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801413c:	d51e      	bpl.n	801417c <sqrtf+0x6c>
 801413e:	2201      	movs	r2, #1
 8014140:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8014144:	9200      	str	r2, [sp, #0]
 8014146:	4a19      	ldr	r2, [pc, #100]	; (80141ac <sqrtf+0x9c>)
 8014148:	9201      	str	r2, [sp, #4]
 801414a:	2200      	movs	r2, #0
 801414c:	9208      	str	r2, [sp, #32]
 801414e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8014152:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014156:	ed9f 7b12 	vldr	d7, [pc, #72]	; 80141a0 <sqrtf+0x90>
 801415a:	b9a3      	cbnz	r3, 8014186 <sqrtf+0x76>
 801415c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014160:	4668      	mov	r0, sp
 8014162:	f000 fc0d 	bl	8014980 <matherr>
 8014166:	b1a0      	cbz	r0, 8014192 <sqrtf+0x82>
 8014168:	9b08      	ldr	r3, [sp, #32]
 801416a:	b11b      	cbz	r3, 8014174 <sqrtf+0x64>
 801416c:	f7ff f84a 	bl	8013204 <__errno>
 8014170:	9b08      	ldr	r3, [sp, #32]
 8014172:	6003      	str	r3, [r0, #0]
 8014174:	ed9d 0b06 	vldr	d0, [sp, #24]
 8014178:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801417c:	b00b      	add	sp, #44	; 0x2c
 801417e:	ecbd 8b02 	vpop	{d8}
 8014182:	f85d fb04 	ldr.w	pc, [sp], #4
 8014186:	2b02      	cmp	r3, #2
 8014188:	ee87 6b07 	vdiv.f64	d6, d7, d7
 801418c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8014190:	d1e6      	bne.n	8014160 <sqrtf+0x50>
 8014192:	f7ff f837 	bl	8013204 <__errno>
 8014196:	2321      	movs	r3, #33	; 0x21
 8014198:	6003      	str	r3, [r0, #0]
 801419a:	e7e5      	b.n	8014168 <sqrtf+0x58>
 801419c:	f3af 8000 	nop.w
	...
 80141a8:	24000200 	.word	0x24000200
 80141ac:	08016ae1 	.word	0x08016ae1

080141b0 <__ieee754_pow>:
 80141b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b4:	ec57 6b11 	vmov	r6, r7, d1
 80141b8:	ed2d 8b02 	vpush	{d8}
 80141bc:	eeb0 8b40 	vmov.f64	d8, d0
 80141c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80141c4:	ea58 0306 	orrs.w	r3, r8, r6
 80141c8:	b085      	sub	sp, #20
 80141ca:	46b9      	mov	r9, r7
 80141cc:	ee11 2a10 	vmov	r2, s2
 80141d0:	f000 8306 	beq.w	80147e0 <__ieee754_pow+0x630>
 80141d4:	ee18 aa90 	vmov	sl, s17
 80141d8:	4bb9      	ldr	r3, [pc, #740]	; (80144c0 <__ieee754_pow+0x310>)
 80141da:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 80141de:	429c      	cmp	r4, r3
 80141e0:	ee10 ba10 	vmov	fp, s0
 80141e4:	dc0b      	bgt.n	80141fe <__ieee754_pow+0x4e>
 80141e6:	d105      	bne.n	80141f4 <__ieee754_pow+0x44>
 80141e8:	f1bb 0f00 	cmp.w	fp, #0
 80141ec:	d107      	bne.n	80141fe <__ieee754_pow+0x4e>
 80141ee:	45a0      	cmp	r8, r4
 80141f0:	dc0d      	bgt.n	801420e <__ieee754_pow+0x5e>
 80141f2:	e001      	b.n	80141f8 <__ieee754_pow+0x48>
 80141f4:	4598      	cmp	r8, r3
 80141f6:	dc02      	bgt.n	80141fe <__ieee754_pow+0x4e>
 80141f8:	4598      	cmp	r8, r3
 80141fa:	d110      	bne.n	801421e <__ieee754_pow+0x6e>
 80141fc:	b17a      	cbz	r2, 801421e <__ieee754_pow+0x6e>
 80141fe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014202:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014206:	ea54 030b 	orrs.w	r3, r4, fp
 801420a:	f000 82e9 	beq.w	80147e0 <__ieee754_pow+0x630>
 801420e:	48ad      	ldr	r0, [pc, #692]	; (80144c4 <__ieee754_pow+0x314>)
 8014210:	b005      	add	sp, #20
 8014212:	ecbd 8b02 	vpop	{d8}
 8014216:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801421a:	f000 bbb5 	b.w	8014988 <nan>
 801421e:	f1ba 0f00 	cmp.w	sl, #0
 8014222:	da4e      	bge.n	80142c2 <__ieee754_pow+0x112>
 8014224:	4ba8      	ldr	r3, [pc, #672]	; (80144c8 <__ieee754_pow+0x318>)
 8014226:	4598      	cmp	r8, r3
 8014228:	dc49      	bgt.n	80142be <__ieee754_pow+0x10e>
 801422a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801422e:	4598      	cmp	r8, r3
 8014230:	dd47      	ble.n	80142c2 <__ieee754_pow+0x112>
 8014232:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014236:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801423a:	2b14      	cmp	r3, #20
 801423c:	dd24      	ble.n	8014288 <__ieee754_pow+0xd8>
 801423e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014242:	fa22 f503 	lsr.w	r5, r2, r3
 8014246:	fa05 f303 	lsl.w	r3, r5, r3
 801424a:	4293      	cmp	r3, r2
 801424c:	d139      	bne.n	80142c2 <__ieee754_pow+0x112>
 801424e:	f005 0501 	and.w	r5, r5, #1
 8014252:	f1c5 0502 	rsb	r5, r5, #2
 8014256:	2a00      	cmp	r2, #0
 8014258:	d15a      	bne.n	8014310 <__ieee754_pow+0x160>
 801425a:	4b99      	ldr	r3, [pc, #612]	; (80144c0 <__ieee754_pow+0x310>)
 801425c:	4598      	cmp	r8, r3
 801425e:	d122      	bne.n	80142a6 <__ieee754_pow+0xf6>
 8014260:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014264:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014268:	ea53 030b 	orrs.w	r3, r3, fp
 801426c:	f000 82b8 	beq.w	80147e0 <__ieee754_pow+0x630>
 8014270:	4b96      	ldr	r3, [pc, #600]	; (80144cc <__ieee754_pow+0x31c>)
 8014272:	429c      	cmp	r4, r3
 8014274:	dd27      	ble.n	80142c6 <__ieee754_pow+0x116>
 8014276:	f1b9 0f00 	cmp.w	r9, #0
 801427a:	f280 82b4 	bge.w	80147e6 <__ieee754_pow+0x636>
 801427e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8014490 <__ieee754_pow+0x2e0>
 8014282:	ed8d 7b00 	vstr	d7, [sp]
 8014286:	e026      	b.n	80142d6 <__ieee754_pow+0x126>
 8014288:	2a00      	cmp	r2, #0
 801428a:	d140      	bne.n	801430e <__ieee754_pow+0x15e>
 801428c:	f1c3 0314 	rsb	r3, r3, #20
 8014290:	fa48 f503 	asr.w	r5, r8, r3
 8014294:	fa05 f303 	lsl.w	r3, r5, r3
 8014298:	4543      	cmp	r3, r8
 801429a:	f040 82aa 	bne.w	80147f2 <__ieee754_pow+0x642>
 801429e:	f005 0501 	and.w	r5, r5, #1
 80142a2:	f1c5 0502 	rsb	r5, r5, #2
 80142a6:	4b8a      	ldr	r3, [pc, #552]	; (80144d0 <__ieee754_pow+0x320>)
 80142a8:	4598      	cmp	r8, r3
 80142aa:	d11b      	bne.n	80142e4 <__ieee754_pow+0x134>
 80142ac:	f1b9 0f00 	cmp.w	r9, #0
 80142b0:	f280 829c 	bge.w	80147ec <__ieee754_pow+0x63c>
 80142b4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80142b8:	ee87 7b08 	vdiv.f64	d7, d7, d8
 80142bc:	e7e1      	b.n	8014282 <__ieee754_pow+0xd2>
 80142be:	2502      	movs	r5, #2
 80142c0:	e7c9      	b.n	8014256 <__ieee754_pow+0xa6>
 80142c2:	2500      	movs	r5, #0
 80142c4:	e7c7      	b.n	8014256 <__ieee754_pow+0xa6>
 80142c6:	f1b9 0f00 	cmp.w	r9, #0
 80142ca:	dad8      	bge.n	801427e <__ieee754_pow+0xce>
 80142cc:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 80142d0:	4633      	mov	r3, r6
 80142d2:	e9cd 3400 	strd	r3, r4, [sp]
 80142d6:	ed9d 0b00 	vldr	d0, [sp]
 80142da:	b005      	add	sp, #20
 80142dc:	ecbd 8b02 	vpop	{d8}
 80142e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80142e8:	d102      	bne.n	80142f0 <__ieee754_pow+0x140>
 80142ea:	ee28 7b08 	vmul.f64	d7, d8, d8
 80142ee:	e7c8      	b.n	8014282 <__ieee754_pow+0xd2>
 80142f0:	4b78      	ldr	r3, [pc, #480]	; (80144d4 <__ieee754_pow+0x324>)
 80142f2:	4599      	cmp	r9, r3
 80142f4:	d10c      	bne.n	8014310 <__ieee754_pow+0x160>
 80142f6:	f1ba 0f00 	cmp.w	sl, #0
 80142fa:	db09      	blt.n	8014310 <__ieee754_pow+0x160>
 80142fc:	eeb0 0b48 	vmov.f64	d0, d8
 8014300:	b005      	add	sp, #20
 8014302:	ecbd 8b02 	vpop	{d8}
 8014306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801430a:	f000 bad7 	b.w	80148bc <__ieee754_sqrt>
 801430e:	2500      	movs	r5, #0
 8014310:	eeb0 0b48 	vmov.f64	d0, d8
 8014314:	f000 fb23 	bl	801495e <fabs>
 8014318:	ed8d 0b00 	vstr	d0, [sp]
 801431c:	f1bb 0f00 	cmp.w	fp, #0
 8014320:	d128      	bne.n	8014374 <__ieee754_pow+0x1c4>
 8014322:	b124      	cbz	r4, 801432e <__ieee754_pow+0x17e>
 8014324:	4b6a      	ldr	r3, [pc, #424]	; (80144d0 <__ieee754_pow+0x320>)
 8014326:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 801432a:	429a      	cmp	r2, r3
 801432c:	d122      	bne.n	8014374 <__ieee754_pow+0x1c4>
 801432e:	f1b9 0f00 	cmp.w	r9, #0
 8014332:	da07      	bge.n	8014344 <__ieee754_pow+0x194>
 8014334:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014338:	ed9d 6b00 	vldr	d6, [sp]
 801433c:	ee87 7b06 	vdiv.f64	d7, d7, d6
 8014340:	ed8d 7b00 	vstr	d7, [sp]
 8014344:	f1ba 0f00 	cmp.w	sl, #0
 8014348:	dac5      	bge.n	80142d6 <__ieee754_pow+0x126>
 801434a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801434e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014352:	ea54 0305 	orrs.w	r3, r4, r5
 8014356:	d106      	bne.n	8014366 <__ieee754_pow+0x1b6>
 8014358:	ed9d 7b00 	vldr	d7, [sp]
 801435c:	ee37 7b47 	vsub.f64	d7, d7, d7
 8014360:	ee87 7b07 	vdiv.f64	d7, d7, d7
 8014364:	e78d      	b.n	8014282 <__ieee754_pow+0xd2>
 8014366:	2d01      	cmp	r5, #1
 8014368:	d1b5      	bne.n	80142d6 <__ieee754_pow+0x126>
 801436a:	ed9d 7b00 	vldr	d7, [sp]
 801436e:	eeb1 7b47 	vneg.f64	d7, d7
 8014372:	e786      	b.n	8014282 <__ieee754_pow+0xd2>
 8014374:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8014378:	f10a 3aff 	add.w	sl, sl, #4294967295
 801437c:	ea55 030a 	orrs.w	r3, r5, sl
 8014380:	d104      	bne.n	801438c <__ieee754_pow+0x1dc>
 8014382:	ee38 8b48 	vsub.f64	d8, d8, d8
 8014386:	ee88 7b08 	vdiv.f64	d7, d8, d8
 801438a:	e77a      	b.n	8014282 <__ieee754_pow+0xd2>
 801438c:	4b52      	ldr	r3, [pc, #328]	; (80144d8 <__ieee754_pow+0x328>)
 801438e:	4598      	cmp	r8, r3
 8014390:	f340 80a8 	ble.w	80144e4 <__ieee754_pow+0x334>
 8014394:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014398:	4598      	cmp	r8, r3
 801439a:	dd0b      	ble.n	80143b4 <__ieee754_pow+0x204>
 801439c:	4b4b      	ldr	r3, [pc, #300]	; (80144cc <__ieee754_pow+0x31c>)
 801439e:	429c      	cmp	r4, r3
 80143a0:	dc0e      	bgt.n	80143c0 <__ieee754_pow+0x210>
 80143a2:	f1b9 0f00 	cmp.w	r9, #0
 80143a6:	f6bf af6a 	bge.w	801427e <__ieee754_pow+0xce>
 80143aa:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8014498 <__ieee754_pow+0x2e8>
 80143ae:	ee27 7b07 	vmul.f64	d7, d7, d7
 80143b2:	e766      	b.n	8014282 <__ieee754_pow+0xd2>
 80143b4:	4b49      	ldr	r3, [pc, #292]	; (80144dc <__ieee754_pow+0x32c>)
 80143b6:	429c      	cmp	r4, r3
 80143b8:	ddf3      	ble.n	80143a2 <__ieee754_pow+0x1f2>
 80143ba:	4b45      	ldr	r3, [pc, #276]	; (80144d0 <__ieee754_pow+0x320>)
 80143bc:	429c      	cmp	r4, r3
 80143be:	dd03      	ble.n	80143c8 <__ieee754_pow+0x218>
 80143c0:	f1b9 0f00 	cmp.w	r9, #0
 80143c4:	dcf1      	bgt.n	80143aa <__ieee754_pow+0x1fa>
 80143c6:	e75a      	b.n	801427e <__ieee754_pow+0xce>
 80143c8:	ed9d 7b00 	vldr	d7, [sp]
 80143cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80143d0:	ed9f 5b33 	vldr	d5, [pc, #204]	; 80144a0 <__ieee754_pow+0x2f0>
 80143d4:	ee37 6b46 	vsub.f64	d6, d7, d6
 80143d8:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 80143dc:	eeb1 3b46 	vneg.f64	d3, d6
 80143e0:	eea3 5b07 	vfma.f64	d5, d3, d7
 80143e4:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80143e8:	eea5 7b46 	vfms.f64	d7, d5, d6
 80143ec:	ee26 5b06 	vmul.f64	d5, d6, d6
 80143f0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80143f4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 80144a8 <__ieee754_pow+0x2f8>
 80143f8:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80143fc:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80144b0 <__ieee754_pow+0x300>
 8014400:	eea6 7b05 	vfma.f64	d7, d6, d5
 8014404:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80144b8 <__ieee754_pow+0x308>
 8014408:	eeb0 4b47 	vmov.f64	d4, d7
 801440c:	eea6 4b05 	vfma.f64	d4, d6, d5
 8014410:	ec53 2b14 	vmov	r2, r3, d4
 8014414:	2200      	movs	r2, #0
 8014416:	ec43 2b14 	vmov	d4, r2, r3
 801441a:	eeb0 6b44 	vmov.f64	d6, d4
 801441e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014422:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014426:	3d01      	subs	r5, #1
 8014428:	ea55 030a 	orrs.w	r3, r5, sl
 801442c:	f04f 0200 	mov.w	r2, #0
 8014430:	463b      	mov	r3, r7
 8014432:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8014436:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801443a:	ec47 6b15 	vmov	d5, r6, r7
 801443e:	fe06 8b08 	vseleq.f64	d8, d6, d8
 8014442:	ec47 6b13 	vmov	d3, r6, r7
 8014446:	ec43 2b16 	vmov	d6, r2, r3
 801444a:	ee27 7b03 	vmul.f64	d7, d7, d3
 801444e:	ee35 5b46 	vsub.f64	d5, d5, d6
 8014452:	4b23      	ldr	r3, [pc, #140]	; (80144e0 <__ieee754_pow+0x330>)
 8014454:	eea5 7b04 	vfma.f64	d7, d5, d4
 8014458:	ee24 6b06 	vmul.f64	d6, d4, d6
 801445c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8014460:	ee15 1a90 	vmov	r1, s11
 8014464:	4299      	cmp	r1, r3
 8014466:	ee15 2a10 	vmov	r2, s10
 801446a:	f340 819b 	ble.w	80147a4 <__ieee754_pow+0x5f4>
 801446e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014472:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014476:	4313      	orrs	r3, r2
 8014478:	f000 810a 	beq.w	8014690 <__ieee754_pow+0x4e0>
 801447c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8014498 <__ieee754_pow+0x2e8>
 8014480:	ee28 8b07 	vmul.f64	d8, d8, d7
 8014484:	ee28 7b07 	vmul.f64	d7, d8, d7
 8014488:	e6fb      	b.n	8014282 <__ieee754_pow+0xd2>
 801448a:	bf00      	nop
 801448c:	f3af 8000 	nop.w
	...
 8014498:	8800759c 	.word	0x8800759c
 801449c:	7e37e43c 	.word	0x7e37e43c
 80144a0:	55555555 	.word	0x55555555
 80144a4:	3fd55555 	.word	0x3fd55555
 80144a8:	652b82fe 	.word	0x652b82fe
 80144ac:	3ff71547 	.word	0x3ff71547
 80144b0:	f85ddf44 	.word	0xf85ddf44
 80144b4:	3e54ae0b 	.word	0x3e54ae0b
 80144b8:	60000000 	.word	0x60000000
 80144bc:	3ff71547 	.word	0x3ff71547
 80144c0:	7ff00000 	.word	0x7ff00000
 80144c4:	0801576b 	.word	0x0801576b
 80144c8:	433fffff 	.word	0x433fffff
 80144cc:	3fefffff 	.word	0x3fefffff
 80144d0:	3ff00000 	.word	0x3ff00000
 80144d4:	3fe00000 	.word	0x3fe00000
 80144d8:	41e00000 	.word	0x41e00000
 80144dc:	3feffffe 	.word	0x3feffffe
 80144e0:	408fffff 	.word	0x408fffff
 80144e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80144e8:	f280 80ce 	bge.w	8014688 <__ieee754_pow+0x4d8>
 80144ec:	ed9d 6b00 	vldr	d6, [sp]
 80144f0:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 80147f8 <__ieee754_pow+0x648>
 80144f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80144f8:	ed8d 7b00 	vstr	d7, [sp]
 80144fc:	9c01      	ldr	r4, [sp, #4]
 80144fe:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8014502:	1521      	asrs	r1, r4, #20
 8014504:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014508:	4419      	add	r1, r3
 801450a:	4be3      	ldr	r3, [pc, #908]	; (8014898 <__ieee754_pow+0x6e8>)
 801450c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014510:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 8014514:	429c      	cmp	r4, r3
 8014516:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 801451a:	dd06      	ble.n	801452a <__ieee754_pow+0x37a>
 801451c:	4bdf      	ldr	r3, [pc, #892]	; (801489c <__ieee754_pow+0x6ec>)
 801451e:	429c      	cmp	r4, r3
 8014520:	f340 80b4 	ble.w	801468c <__ieee754_pow+0x4dc>
 8014524:	3101      	adds	r1, #1
 8014526:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801452a:	2400      	movs	r4, #0
 801452c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014530:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8014534:	4603      	mov	r3, r0
 8014536:	ec43 2b17 	vmov	d7, r2, r3
 801453a:	4bd9      	ldr	r3, [pc, #868]	; (80148a0 <__ieee754_pow+0x6f0>)
 801453c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8014540:	4463      	add	r3, ip
 8014542:	ed93 5b00 	vldr	d5, [r3]
 8014546:	1040      	asrs	r0, r0, #1
 8014548:	ee37 2b45 	vsub.f64	d2, d7, d5
 801454c:	ee35 6b07 	vadd.f64	d6, d5, d7
 8014550:	ee84 1b06 	vdiv.f64	d1, d4, d6
 8014554:	ee22 6b01 	vmul.f64	d6, d2, d1
 8014558:	ed8d 6b00 	vstr	d6, [sp]
 801455c:	e9dd 8900 	ldrd	r8, r9, [sp]
 8014560:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8014564:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 8014568:	f04f 0800 	mov.w	r8, #0
 801456c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 8014570:	2200      	movs	r2, #0
 8014572:	ec49 8b14 	vmov	d4, r8, r9
 8014576:	ec43 2b16 	vmov	d6, r2, r3
 801457a:	eeb1 3b44 	vneg.f64	d3, d4
 801457e:	eea3 2b06 	vfma.f64	d2, d3, d6
 8014582:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014586:	ee37 7b46 	vsub.f64	d7, d7, d6
 801458a:	eea3 2b07 	vfma.f64	d2, d3, d7
 801458e:	ed9d 7b00 	vldr	d7, [sp]
 8014592:	ee22 2b01 	vmul.f64	d2, d2, d1
 8014596:	ee27 5b07 	vmul.f64	d5, d7, d7
 801459a:	ee37 6b04 	vadd.f64	d6, d7, d4
 801459e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8014800 <__ieee754_pow+0x650>
 80145a2:	ee25 0b05 	vmul.f64	d0, d5, d5
 80145a6:	ee26 6b02 	vmul.f64	d6, d6, d2
 80145aa:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8014808 <__ieee754_pow+0x658>
 80145ae:	eea5 7b01 	vfma.f64	d7, d5, d1
 80145b2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8014810 <__ieee754_pow+0x660>
 80145b6:	eea7 1b05 	vfma.f64	d1, d7, d5
 80145ba:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8014818 <__ieee754_pow+0x668>
 80145be:	eea1 7b05 	vfma.f64	d7, d1, d5
 80145c2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8014820 <__ieee754_pow+0x670>
 80145c6:	eea7 1b05 	vfma.f64	d1, d7, d5
 80145ca:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8014828 <__ieee754_pow+0x678>
 80145ce:	eea1 7b05 	vfma.f64	d7, d1, d5
 80145d2:	eea0 6b07 	vfma.f64	d6, d0, d7
 80145d6:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 80145da:	eeb0 5b47 	vmov.f64	d5, d7
 80145de:	eea4 5b04 	vfma.f64	d5, d4, d4
 80145e2:	ee35 5b06 	vadd.f64	d5, d5, d6
 80145e6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80145ea:	f8cd 8008 	str.w	r8, [sp, #8]
 80145ee:	ed9d 5b02 	vldr	d5, [sp, #8]
 80145f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80145f6:	eea3 7b04 	vfma.f64	d7, d3, d4
 80145fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80145fe:	ed9d 6b00 	vldr	d6, [sp]
 8014602:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014606:	eea2 7b05 	vfma.f64	d7, d2, d5
 801460a:	eeb0 6b47 	vmov.f64	d6, d7
 801460e:	eea4 6b05 	vfma.f64	d6, d4, d5
 8014612:	ed8d 6b00 	vstr	d6, [sp]
 8014616:	f8cd 8000 	str.w	r8, [sp]
 801461a:	ed9d 2b00 	vldr	d2, [sp]
 801461e:	eeb0 6b42 	vmov.f64	d6, d2
 8014622:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014626:	ee37 7b46 	vsub.f64	d7, d7, d6
 801462a:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8014830 <__ieee754_pow+0x680>
 801462e:	4b9d      	ldr	r3, [pc, #628]	; (80148a4 <__ieee754_pow+0x6f4>)
 8014630:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014634:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8014838 <__ieee754_pow+0x688>
 8014638:	4463      	add	r3, ip
 801463a:	eea2 7b06 	vfma.f64	d7, d2, d6
 801463e:	ed93 6b00 	vldr	d6, [r3]
 8014642:	4b99      	ldr	r3, [pc, #612]	; (80148a8 <__ieee754_pow+0x6f8>)
 8014644:	ee37 6b06 	vadd.f64	d6, d7, d6
 8014648:	449c      	add	ip, r3
 801464a:	ed9c 1b00 	vldr	d1, [ip]
 801464e:	eeb0 4b46 	vmov.f64	d4, d6
 8014652:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8014840 <__ieee754_pow+0x690>
 8014656:	ee07 1a90 	vmov	s15, r1
 801465a:	eea2 4b03 	vfma.f64	d4, d2, d3
 801465e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014662:	ee34 4b01 	vadd.f64	d4, d4, d1
 8014666:	ee34 5b07 	vadd.f64	d5, d4, d7
 801466a:	ed8d 5b00 	vstr	d5, [sp]
 801466e:	f8cd 8000 	str.w	r8, [sp]
 8014672:	ed9d 4b00 	vldr	d4, [sp]
 8014676:	ee34 7b47 	vsub.f64	d7, d4, d7
 801467a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801467e:	eea2 7b43 	vfms.f64	d7, d2, d3
 8014682:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014686:	e6ce      	b.n	8014426 <__ieee754_pow+0x276>
 8014688:	2300      	movs	r3, #0
 801468a:	e73a      	b.n	8014502 <__ieee754_pow+0x352>
 801468c:	2401      	movs	r4, #1
 801468e:	e74d      	b.n	801452c <__ieee754_pow+0x37c>
 8014690:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8014848 <__ieee754_pow+0x698>
 8014694:	ee35 5b46 	vsub.f64	d5, d5, d6
 8014698:	ee37 4b04 	vadd.f64	d4, d7, d4
 801469c:	eeb4 4bc5 	vcmpe.f64	d4, d5
 80146a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a4:	f73f aeea 	bgt.w	801447c <__ieee754_pow+0x2cc>
 80146a8:	4a80      	ldr	r2, [pc, #512]	; (80148ac <__ieee754_pow+0x6fc>)
 80146aa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80146ae:	4293      	cmp	r3, r2
 80146b0:	f340 808e 	ble.w	80147d0 <__ieee754_pow+0x620>
 80146b4:	151b      	asrs	r3, r3, #20
 80146b6:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 80146ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80146be:	4103      	asrs	r3, r0
 80146c0:	440b      	add	r3, r1
 80146c2:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80146c6:	487a      	ldr	r0, [pc, #488]	; (80148b0 <__ieee754_pow+0x700>)
 80146c8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80146cc:	4110      	asrs	r0, r2
 80146ce:	ea23 0500 	bic.w	r5, r3, r0
 80146d2:	f3c3 0013 	ubfx	r0, r3, #0, #20
 80146d6:	2400      	movs	r4, #0
 80146d8:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 80146dc:	f1c2 0214 	rsb	r2, r2, #20
 80146e0:	ec45 4b15 	vmov	d5, r4, r5
 80146e4:	4110      	asrs	r0, r2
 80146e6:	2900      	cmp	r1, #0
 80146e8:	bfb8      	it	lt
 80146ea:	4240      	neglt	r0, r0
 80146ec:	ee36 6b45 	vsub.f64	d6, d6, d5
 80146f0:	ee36 5b07 	vadd.f64	d5, d6, d7
 80146f4:	ec53 2b15 	vmov	r2, r3, d5
 80146f8:	2200      	movs	r2, #0
 80146fa:	ec43 2b15 	vmov	d5, r2, r3
 80146fe:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8014850 <__ieee754_pow+0x6a0>
 8014702:	ee35 6b46 	vsub.f64	d6, d5, d6
 8014706:	ee37 6b46 	vsub.f64	d6, d7, d6
 801470a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8014858 <__ieee754_pow+0x6a8>
 801470e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8014712:	eea6 7b04 	vfma.f64	d7, d6, d4
 8014716:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8014860 <__ieee754_pow+0x6b0>
 801471a:	eeb0 4b47 	vmov.f64	d4, d7
 801471e:	eea5 4b06 	vfma.f64	d4, d5, d6
 8014722:	eeb0 3b44 	vmov.f64	d3, d4
 8014726:	eea5 3b46 	vfms.f64	d3, d5, d6
 801472a:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8014868 <__ieee754_pow+0x6b8>
 801472e:	ee37 7b43 	vsub.f64	d7, d7, d3
 8014732:	ee24 6b04 	vmul.f64	d6, d4, d4
 8014736:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8014870 <__ieee754_pow+0x6c0>
 801473a:	eea4 7b07 	vfma.f64	d7, d4, d7
 801473e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8014742:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8014878 <__ieee754_pow+0x6c8>
 8014746:	eea3 5b06 	vfma.f64	d5, d3, d6
 801474a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8014880 <__ieee754_pow+0x6d0>
 801474e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8014752:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8014888 <__ieee754_pow+0x6d8>
 8014756:	eea3 5b06 	vfma.f64	d5, d3, d6
 801475a:	eeb0 3b44 	vmov.f64	d3, d4
 801475e:	eea5 3b46 	vfms.f64	d3, d5, d6
 8014762:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8014766:	eeb0 6b43 	vmov.f64	d6, d3
 801476a:	ee24 3b03 	vmul.f64	d3, d4, d3
 801476e:	ee36 5b45 	vsub.f64	d5, d6, d5
 8014772:	ee83 6b05 	vdiv.f64	d6, d3, d5
 8014776:	ee36 7b47 	vsub.f64	d7, d6, d7
 801477a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801477e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8014782:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014786:	ed8d 7b00 	vstr	d7, [sp]
 801478a:	9901      	ldr	r1, [sp, #4]
 801478c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 8014790:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8014794:	da1e      	bge.n	80147d4 <__ieee754_pow+0x624>
 8014796:	eeb0 0b47 	vmov.f64	d0, d7
 801479a:	f000 f989 	bl	8014ab0 <scalbn>
 801479e:	ee20 7b08 	vmul.f64	d7, d0, d8
 80147a2:	e56e      	b.n	8014282 <__ieee754_pow+0xd2>
 80147a4:	4b43      	ldr	r3, [pc, #268]	; (80148b4 <__ieee754_pow+0x704>)
 80147a6:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 80147aa:	4298      	cmp	r0, r3
 80147ac:	f77f af7c 	ble.w	80146a8 <__ieee754_pow+0x4f8>
 80147b0:	4b41      	ldr	r3, [pc, #260]	; (80148b8 <__ieee754_pow+0x708>)
 80147b2:	440b      	add	r3, r1
 80147b4:	4313      	orrs	r3, r2
 80147b6:	d002      	beq.n	80147be <__ieee754_pow+0x60e>
 80147b8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8014890 <__ieee754_pow+0x6e0>
 80147bc:	e660      	b.n	8014480 <__ieee754_pow+0x2d0>
 80147be:	ee35 5b46 	vsub.f64	d5, d5, d6
 80147c2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80147c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ca:	f6ff af6d 	blt.w	80146a8 <__ieee754_pow+0x4f8>
 80147ce:	e7f3      	b.n	80147b8 <__ieee754_pow+0x608>
 80147d0:	2000      	movs	r0, #0
 80147d2:	e78d      	b.n	80146f0 <__ieee754_pow+0x540>
 80147d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80147d8:	460b      	mov	r3, r1
 80147da:	ec43 2b10 	vmov	d0, r2, r3
 80147de:	e7de      	b.n	801479e <__ieee754_pow+0x5ee>
 80147e0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80147e4:	e54d      	b.n	8014282 <__ieee754_pow+0xd2>
 80147e6:	e9cd 6700 	strd	r6, r7, [sp]
 80147ea:	e574      	b.n	80142d6 <__ieee754_pow+0x126>
 80147ec:	ed8d 8b00 	vstr	d8, [sp]
 80147f0:	e571      	b.n	80142d6 <__ieee754_pow+0x126>
 80147f2:	4615      	mov	r5, r2
 80147f4:	e557      	b.n	80142a6 <__ieee754_pow+0xf6>
 80147f6:	bf00      	nop
 80147f8:	00000000 	.word	0x00000000
 80147fc:	43400000 	.word	0x43400000
 8014800:	4a454eef 	.word	0x4a454eef
 8014804:	3fca7e28 	.word	0x3fca7e28
 8014808:	93c9db65 	.word	0x93c9db65
 801480c:	3fcd864a 	.word	0x3fcd864a
 8014810:	a91d4101 	.word	0xa91d4101
 8014814:	3fd17460 	.word	0x3fd17460
 8014818:	518f264d 	.word	0x518f264d
 801481c:	3fd55555 	.word	0x3fd55555
 8014820:	db6fabff 	.word	0xdb6fabff
 8014824:	3fdb6db6 	.word	0x3fdb6db6
 8014828:	33333303 	.word	0x33333303
 801482c:	3fe33333 	.word	0x3fe33333
 8014830:	dc3a03fd 	.word	0xdc3a03fd
 8014834:	3feec709 	.word	0x3feec709
 8014838:	145b01f5 	.word	0x145b01f5
 801483c:	be3e2fe0 	.word	0xbe3e2fe0
 8014840:	e0000000 	.word	0xe0000000
 8014844:	3feec709 	.word	0x3feec709
 8014848:	652b82fe 	.word	0x652b82fe
 801484c:	3c971547 	.word	0x3c971547
 8014850:	fefa39ef 	.word	0xfefa39ef
 8014854:	3fe62e42 	.word	0x3fe62e42
 8014858:	0ca86c39 	.word	0x0ca86c39
 801485c:	be205c61 	.word	0xbe205c61
 8014860:	00000000 	.word	0x00000000
 8014864:	3fe62e43 	.word	0x3fe62e43
 8014868:	72bea4d0 	.word	0x72bea4d0
 801486c:	3e663769 	.word	0x3e663769
 8014870:	c5d26bf1 	.word	0xc5d26bf1
 8014874:	bebbbd41 	.word	0xbebbbd41
 8014878:	af25de2c 	.word	0xaf25de2c
 801487c:	3f11566a 	.word	0x3f11566a
 8014880:	16bebd93 	.word	0x16bebd93
 8014884:	bf66c16c 	.word	0xbf66c16c
 8014888:	5555553e 	.word	0x5555553e
 801488c:	3fc55555 	.word	0x3fc55555
 8014890:	c2f8f359 	.word	0xc2f8f359
 8014894:	01a56e1f 	.word	0x01a56e1f
 8014898:	0003988e 	.word	0x0003988e
 801489c:	000bb679 	.word	0x000bb679
 80148a0:	08016ae8 	.word	0x08016ae8
 80148a4:	08016b08 	.word	0x08016b08
 80148a8:	08016af8 	.word	0x08016af8
 80148ac:	3fe00000 	.word	0x3fe00000
 80148b0:	000fffff 	.word	0x000fffff
 80148b4:	4090cbff 	.word	0x4090cbff
 80148b8:	3f6f3400 	.word	0x3f6f3400

080148bc <__ieee754_sqrt>:
 80148bc:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80148c0:	4770      	bx	lr

080148c2 <__ieee754_sqrtf>:
 80148c2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80148c6:	4770      	bx	lr

080148c8 <with_errnof>:
 80148c8:	b510      	push	{r4, lr}
 80148ca:	ed2d 8b02 	vpush	{d8}
 80148ce:	eeb0 8a40 	vmov.f32	s16, s0
 80148d2:	4604      	mov	r4, r0
 80148d4:	f7fe fc96 	bl	8013204 <__errno>
 80148d8:	eeb0 0a48 	vmov.f32	s0, s16
 80148dc:	ecbd 8b02 	vpop	{d8}
 80148e0:	6004      	str	r4, [r0, #0]
 80148e2:	bd10      	pop	{r4, pc}

080148e4 <xflowf>:
 80148e4:	b130      	cbz	r0, 80148f4 <xflowf+0x10>
 80148e6:	eef1 7a40 	vneg.f32	s15, s0
 80148ea:	2022      	movs	r0, #34	; 0x22
 80148ec:	ee27 0a80 	vmul.f32	s0, s15, s0
 80148f0:	f7ff bfea 	b.w	80148c8 <with_errnof>
 80148f4:	eef0 7a40 	vmov.f32	s15, s0
 80148f8:	e7f7      	b.n	80148ea <xflowf+0x6>
	...

080148fc <__math_uflowf>:
 80148fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014904 <__math_uflowf+0x8>
 8014900:	f7ff bff0 	b.w	80148e4 <xflowf>
 8014904:	10000000 	.word	0x10000000

08014908 <__math_may_uflowf>:
 8014908:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014910 <__math_may_uflowf+0x8>
 801490c:	f7ff bfea 	b.w	80148e4 <xflowf>
 8014910:	1a200000 	.word	0x1a200000

08014914 <__math_oflowf>:
 8014914:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801491c <__math_oflowf+0x8>
 8014918:	f7ff bfe4 	b.w	80148e4 <xflowf>
 801491c:	70000000 	.word	0x70000000

08014920 <__math_divzerof>:
 8014920:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014924:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8014928:	2800      	cmp	r0, #0
 801492a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 801492e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801493c <__math_divzerof+0x1c>
 8014932:	2022      	movs	r0, #34	; 0x22
 8014934:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8014938:	f7ff bfc6 	b.w	80148c8 <with_errnof>
 801493c:	00000000 	.word	0x00000000

08014940 <__math_invalidf>:
 8014940:	eef0 7a40 	vmov.f32	s15, s0
 8014944:	ee30 7a40 	vsub.f32	s14, s0, s0
 8014948:	eef4 7a67 	vcmp.f32	s15, s15
 801494c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014950:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8014954:	d602      	bvs.n	801495c <__math_invalidf+0x1c>
 8014956:	2021      	movs	r0, #33	; 0x21
 8014958:	f7ff bfb6 	b.w	80148c8 <with_errnof>
 801495c:	4770      	bx	lr

0801495e <fabs>:
 801495e:	ec51 0b10 	vmov	r0, r1, d0
 8014962:	ee10 2a10 	vmov	r2, s0
 8014966:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801496a:	ec43 2b10 	vmov	d0, r2, r3
 801496e:	4770      	bx	lr

08014970 <finite>:
 8014970:	ee10 3a90 	vmov	r3, s1
 8014974:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8014978:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801497c:	0fc0      	lsrs	r0, r0, #31
 801497e:	4770      	bx	lr

08014980 <matherr>:
 8014980:	2000      	movs	r0, #0
 8014982:	4770      	bx	lr
 8014984:	0000      	movs	r0, r0
	...

08014988 <nan>:
 8014988:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014990 <nan+0x8>
 801498c:	4770      	bx	lr
 801498e:	bf00      	nop
 8014990:	00000000 	.word	0x00000000
 8014994:	7ff80000 	.word	0x7ff80000

08014998 <rint>:
 8014998:	b530      	push	{r4, r5, lr}
 801499a:	b085      	sub	sp, #20
 801499c:	ed8d 0b00 	vstr	d0, [sp]
 80149a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80149a4:	f3c3 510a 	ubfx	r1, r3, #20, #11
 80149a8:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 80149ac:	2813      	cmp	r0, #19
 80149ae:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 80149b2:	dc5a      	bgt.n	8014a6a <rint+0xd2>
 80149b4:	2800      	cmp	r0, #0
 80149b6:	da2f      	bge.n	8014a18 <rint+0x80>
 80149b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80149bc:	4311      	orrs	r1, r2
 80149be:	d027      	beq.n	8014a10 <rint+0x78>
 80149c0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80149c4:	4315      	orrs	r5, r2
 80149c6:	426a      	negs	r2, r5
 80149c8:	432a      	orrs	r2, r5
 80149ca:	0b12      	lsrs	r2, r2, #12
 80149cc:	0c5b      	lsrs	r3, r3, #17
 80149ce:	045b      	lsls	r3, r3, #17
 80149d0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80149d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80149d8:	ea42 0103 	orr.w	r1, r2, r3
 80149dc:	4b31      	ldr	r3, [pc, #196]	; (8014aa4 <rint+0x10c>)
 80149de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80149e2:	ed93 6b00 	vldr	d6, [r3]
 80149e6:	ec41 0b17 	vmov	d7, r0, r1
 80149ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80149ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80149f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80149f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80149fa:	ed8d 7b00 	vstr	d7, [sp]
 80149fe:	9b01      	ldr	r3, [sp, #4]
 8014a00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014a08:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 8014a0c:	e9cd 0100 	strd	r0, r1, [sp]
 8014a10:	ed9d 0b00 	vldr	d0, [sp]
 8014a14:	b005      	add	sp, #20
 8014a16:	bd30      	pop	{r4, r5, pc}
 8014a18:	4923      	ldr	r1, [pc, #140]	; (8014aa8 <rint+0x110>)
 8014a1a:	4101      	asrs	r1, r0
 8014a1c:	ea03 0501 	and.w	r5, r3, r1
 8014a20:	4315      	orrs	r5, r2
 8014a22:	d0f5      	beq.n	8014a10 <rint+0x78>
 8014a24:	0849      	lsrs	r1, r1, #1
 8014a26:	ea03 0501 	and.w	r5, r3, r1
 8014a2a:	432a      	orrs	r2, r5
 8014a2c:	d00b      	beq.n	8014a46 <rint+0xae>
 8014a2e:	ea23 0101 	bic.w	r1, r3, r1
 8014a32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014a36:	2813      	cmp	r0, #19
 8014a38:	fa43 f300 	asr.w	r3, r3, r0
 8014a3c:	bf0c      	ite	eq
 8014a3e:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8014a42:	2200      	movne	r2, #0
 8014a44:	430b      	orrs	r3, r1
 8014a46:	4619      	mov	r1, r3
 8014a48:	4b16      	ldr	r3, [pc, #88]	; (8014aa4 <rint+0x10c>)
 8014a4a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8014a4e:	ed94 6b00 	vldr	d6, [r4]
 8014a52:	4610      	mov	r0, r2
 8014a54:	ec41 0b17 	vmov	d7, r0, r1
 8014a58:	ee36 7b07 	vadd.f64	d7, d6, d7
 8014a5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014a60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014a64:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014a68:	e008      	b.n	8014a7c <rint+0xe4>
 8014a6a:	2833      	cmp	r0, #51	; 0x33
 8014a6c:	dd09      	ble.n	8014a82 <rint+0xea>
 8014a6e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014a72:	d1cd      	bne.n	8014a10 <rint+0x78>
 8014a74:	ed9d 7b00 	vldr	d7, [sp]
 8014a78:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014a7c:	ed8d 7b00 	vstr	d7, [sp]
 8014a80:	e7c6      	b.n	8014a10 <rint+0x78>
 8014a82:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 8014a86:	f04f 31ff 	mov.w	r1, #4294967295
 8014a8a:	40c1      	lsrs	r1, r0
 8014a8c:	420a      	tst	r2, r1
 8014a8e:	d0bf      	beq.n	8014a10 <rint+0x78>
 8014a90:	0849      	lsrs	r1, r1, #1
 8014a92:	420a      	tst	r2, r1
 8014a94:	bf1f      	itttt	ne
 8014a96:	ea22 0101 	bicne.w	r1, r2, r1
 8014a9a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8014a9e:	4102      	asrne	r2, r0
 8014aa0:	430a      	orrne	r2, r1
 8014aa2:	e7d0      	b.n	8014a46 <rint+0xae>
 8014aa4:	08016b18 	.word	0x08016b18
 8014aa8:	000fffff 	.word	0x000fffff
 8014aac:	00000000 	.word	0x00000000

08014ab0 <scalbn>:
 8014ab0:	b500      	push	{lr}
 8014ab2:	ed2d 8b02 	vpush	{d8}
 8014ab6:	b083      	sub	sp, #12
 8014ab8:	ed8d 0b00 	vstr	d0, [sp]
 8014abc:	9b01      	ldr	r3, [sp, #4]
 8014abe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014ac2:	b9a2      	cbnz	r2, 8014aee <scalbn+0x3e>
 8014ac4:	9a00      	ldr	r2, [sp, #0]
 8014ac6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014aca:	4313      	orrs	r3, r2
 8014acc:	d03a      	beq.n	8014b44 <scalbn+0x94>
 8014ace:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014b88 <scalbn+0xd8>
 8014ad2:	4b35      	ldr	r3, [pc, #212]	; (8014ba8 <scalbn+0xf8>)
 8014ad4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014ad8:	4298      	cmp	r0, r3
 8014ada:	ed8d 7b00 	vstr	d7, [sp]
 8014ade:	da11      	bge.n	8014b04 <scalbn+0x54>
 8014ae0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8014b90 <scalbn+0xe0>
 8014ae4:	ed9d 6b00 	vldr	d6, [sp]
 8014ae8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014aec:	e007      	b.n	8014afe <scalbn+0x4e>
 8014aee:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014af2:	428a      	cmp	r2, r1
 8014af4:	d10a      	bne.n	8014b0c <scalbn+0x5c>
 8014af6:	ed9d 7b00 	vldr	d7, [sp]
 8014afa:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014afe:	ed8d 7b00 	vstr	d7, [sp]
 8014b02:	e01f      	b.n	8014b44 <scalbn+0x94>
 8014b04:	9b01      	ldr	r3, [sp, #4]
 8014b06:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014b0a:	3a36      	subs	r2, #54	; 0x36
 8014b0c:	4402      	add	r2, r0
 8014b0e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014b12:	428a      	cmp	r2, r1
 8014b14:	dd0a      	ble.n	8014b2c <scalbn+0x7c>
 8014b16:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8014b98 <scalbn+0xe8>
 8014b1a:	eeb0 0b48 	vmov.f64	d0, d8
 8014b1e:	ed9d 1b00 	vldr	d1, [sp]
 8014b22:	f000 f843 	bl	8014bac <copysign>
 8014b26:	ee20 7b08 	vmul.f64	d7, d0, d8
 8014b2a:	e7e8      	b.n	8014afe <scalbn+0x4e>
 8014b2c:	2a00      	cmp	r2, #0
 8014b2e:	dd10      	ble.n	8014b52 <scalbn+0xa2>
 8014b30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014b38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014b3c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014b40:	e9cd 0100 	strd	r0, r1, [sp]
 8014b44:	ed9d 0b00 	vldr	d0, [sp]
 8014b48:	b003      	add	sp, #12
 8014b4a:	ecbd 8b02 	vpop	{d8}
 8014b4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b52:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014b56:	da06      	bge.n	8014b66 <scalbn+0xb6>
 8014b58:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014b5c:	4298      	cmp	r0, r3
 8014b5e:	dcda      	bgt.n	8014b16 <scalbn+0x66>
 8014b60:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8014b90 <scalbn+0xe0>
 8014b64:	e7d9      	b.n	8014b1a <scalbn+0x6a>
 8014b66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014b6e:	3236      	adds	r2, #54	; 0x36
 8014b70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014b74:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014b78:	ec41 0b17 	vmov	d7, r0, r1
 8014b7c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8014ba0 <scalbn+0xf0>
 8014b80:	e7b2      	b.n	8014ae8 <scalbn+0x38>
 8014b82:	bf00      	nop
 8014b84:	f3af 8000 	nop.w
 8014b88:	00000000 	.word	0x00000000
 8014b8c:	43500000 	.word	0x43500000
 8014b90:	c2f8f359 	.word	0xc2f8f359
 8014b94:	01a56e1f 	.word	0x01a56e1f
 8014b98:	8800759c 	.word	0x8800759c
 8014b9c:	7e37e43c 	.word	0x7e37e43c
 8014ba0:	00000000 	.word	0x00000000
 8014ba4:	3c900000 	.word	0x3c900000
 8014ba8:	ffff3cb0 	.word	0xffff3cb0

08014bac <copysign>:
 8014bac:	ec51 0b10 	vmov	r0, r1, d0
 8014bb0:	ee11 0a90 	vmov	r0, s3
 8014bb4:	ee10 2a10 	vmov	r2, s0
 8014bb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014bbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014bc0:	ea41 0300 	orr.w	r3, r1, r0
 8014bc4:	ec43 2b10 	vmov	d0, r2, r3
 8014bc8:	4770      	bx	lr
	...

08014bcc <_init>:
 8014bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bce:	bf00      	nop
 8014bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014bd2:	bc08      	pop	{r3}
 8014bd4:	469e      	mov	lr, r3
 8014bd6:	4770      	bx	lr

08014bd8 <_fini>:
 8014bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bda:	bf00      	nop
 8014bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014bde:	bc08      	pop	{r3}
 8014be0:	469e      	mov	lr, r3
 8014be2:	4770      	bx	lr
