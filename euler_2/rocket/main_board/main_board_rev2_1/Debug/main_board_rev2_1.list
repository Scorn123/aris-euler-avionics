
main_board_rev2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c74  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013e0  08014f18  08014f18  00024f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080162f8  080162f8  0003020c  2**0
                  CONTENTS
  4 .ARM          00000008  080162f8  080162f8  000262f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016300  08016300  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016300  08016300  00026300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016304  08016304  00026304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  24000000  08016308  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00026084  2400020c  08016514  0003020c  2**2
                  ALLOC
 10 ._user_heap_stack 00001300  24026290  08016514  00036290  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008fafc  00000000  00000000  0003023a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000ec81  00000000  00000000  000bfd36  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00027cd3  00000000  00000000  000ce9b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002c30  00000000  00000000  000f6690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00004220  00000000  00000000  000f92c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0005176a  00000000  00000000  000fd4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00047525  00000000  00000000  0014ec4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0019e057  00000000  00000000  0019616f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  003341c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008eb4  00000000  00000000  00334244  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400020c 	.word	0x2400020c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014efc 	.word	0x08014efc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000210 	.word	0x24000210
 80002dc:	08014efc 	.word	0x08014efc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <calculateCRC>:
uint16_t calculateCRC(uint8_t *data, uint8_t len) {
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;

	for (int i = 0; i < len + 2; i += 2) {
 8000690:	2200      	movs	r2, #0
 8000692:	f101 0c01 	add.w	ip, r1, #1
uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8000696:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t crc = 0;
 8000698:	4613      	mov	r3, r2
			carry = crc & 0x8000;
			crc <<= 1;
			if (c & shifter)
				crc++;
			if (carry)
				crc ^= 0x1021;
 800069a:	f241 0e21 	movw	lr, #4129	; 0x1021
	for (int i = 0; i < len + 2; i += 2) {
 800069e:	4594      	cmp	ip, r2
 80006a0:	da01      	bge.n	80006a6 <calculateCRC+0x16>
			shifter >>= 1;
		} while (shifter);
	}
	return crc;
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (i == len) {
 80006a6:	4291      	cmp	r1, r2
			c = 0;
 80006a8:	461f      	mov	r7, r3
 80006aa:	f44f 4600 	mov.w	r6, #32768	; 0x8000
			c = data[i + 1] << 8 | data[i];
 80006ae:	bf17      	itett	ne
 80006b0:	1884      	addne	r4, r0, r2
			c = 0;
 80006b2:	2400      	moveq	r4, #0
			c = data[i + 1] << 8 | data[i];
 80006b4:	7865      	ldrbne	r5, [r4, #1]
 80006b6:	5c84      	ldrbne	r4, [r0, r2]
 80006b8:	bf18      	it	ne
 80006ba:	ea44 2405 	orrne.w	r4, r4, r5, lsl #8
			c = 0;
 80006be:	2510      	movs	r5, #16
			crc <<= 1;
 80006c0:	005b      	lsls	r3, r3, #1
			if (c & shifter)
 80006c2:	4226      	tst	r6, r4
			shifter >>= 1;
 80006c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
			crc <<= 1;
 80006c8:	b29b      	uxth	r3, r3
				crc++;
 80006ca:	bf1c      	itt	ne
 80006cc:	3301      	addne	r3, #1
 80006ce:	b29b      	uxthne	r3, r3
			if (carry)
 80006d0:	043f      	lsls	r7, r7, #16
				crc ^= 0x1021;
 80006d2:	bf48      	it	mi
 80006d4:	ea83 030e 	eormi.w	r3, r3, lr
		} while (shifter);
 80006d8:	3d01      	subs	r5, #1
 80006da:	d101      	bne.n	80006e0 <calculateCRC+0x50>
	for (int i = 0; i < len + 2; i += 2) {
 80006dc:	3202      	adds	r2, #2
 80006de:	e7de      	b.n	800069e <calculateCRC+0xe>
 80006e0:	461f      	mov	r7, r3
 80006e2:	e7ed      	b.n	80006c0 <calculateCRC+0x30>

080006e4 <WriteCommand>:

	return status;

}

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer) {
 80006e4:	b570      	push	{r4, r5, r6, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	460d      	mov	r5, r1
	osStatus_t status = osError;

	uint8_t byte_stream_write[14] = { 0 };
 80006ea:	2100      	movs	r1, #0
osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer) {
 80006ec:	4606      	mov	r6, r0
 80006ee:	4614      	mov	r4, r2

	uint8_t dma_buffer[20] = { 0 };
 80006f0:	a807      	add	r0, sp, #28
 80006f2:	2214      	movs	r2, #20
	uint8_t byte_stream_write[14] = { 0 };
 80006f4:	f8cd 1012 	str.w	r1, [sp, #18]
 80006f8:	f8cd 1016 	str.w	r1, [sp, #22]
	uint8_t dma_buffer[20] = { 0 };
 80006fc:	f012 ffab 	bl	8013656 <memset>

	byte_stream_write[0] = 0x90;			// DLE
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <WriteCommand+0xcc>)
	byte_stream_write[10] = data[1];		// Data
	byte_stream_write[11] = data[0];		// Data - high byte

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
	memcpy(crc_data_array, &byte_stream_write[2],
 8000702:	aa0c      	add	r2, sp, #48	; 0x30
	byte_stream_write[0] = 0x90;			// DLE
 8000704:	9303      	str	r3, [sp, #12]
	byte_stream_write[3] = 0x04;			// Length of Data in Words
 8000706:	2301      	movs	r3, #1
 8000708:	f88d 3010 	strb.w	r3, [sp, #16]
	byte_stream_write[5] = command[1];		// Index Low Byte
 800070c:	7873      	ldrb	r3, [r6, #1]
 800070e:	f88d 3011 	strb.w	r3, [sp, #17]
	byte_stream_write[6] = command[0];		// Index High byte
 8000712:	7833      	ldrb	r3, [r6, #0]

	HAL_UART_DMAResume(&huart4);
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
	osDelay(5);
	HAL_UART_DMAStop(&huart4);
	memcpy(rx_buffer, dma_buffer, 20);
 8000714:	ae0b      	add	r6, sp, #44	; 0x2c
	byte_stream_write[6] = command[0];		// Index High byte
 8000716:	f88d 3012 	strb.w	r3, [sp, #18]
	byte_stream_write[8] = data[3];			// Data - low byte
 800071a:	78eb      	ldrb	r3, [r5, #3]
 800071c:	f88d 3014 	strb.w	r3, [sp, #20]
	byte_stream_write[9] = data[2];			// Data
 8000720:	78ab      	ldrb	r3, [r5, #2]
 8000722:	f88d 3015 	strb.w	r3, [sp, #21]
	byte_stream_write[10] = data[1];		// Data
 8000726:	786b      	ldrb	r3, [r5, #1]
 8000728:	f88d 3016 	strb.w	r3, [sp, #22]
	byte_stream_write[11] = data[0];		// Data - high byte
 800072c:	782b      	ldrb	r3, [r5, #0]
 800072e:	f88d 3017 	strb.w	r3, [sp, #23]
	memcpy(crc_data_array, &byte_stream_write[2],
 8000732:	466b      	mov	r3, sp
 8000734:	f852 0d22 	ldr.w	r0, [r2, #-34]!
 8000738:	6851      	ldr	r1, [r2, #4]
 800073a:	8912      	ldrh	r2, [r2, #8]
 800073c:	c303      	stmia	r3!, {r0, r1}
	crc_calc = calculateCRC(crc_data_array, 10);
 800073e:	210a      	movs	r1, #10
	memcpy(crc_data_array, &byte_stream_write[2],
 8000740:	801a      	strh	r2, [r3, #0]
	crc_calc = calculateCRC(crc_data_array, 10);
 8000742:	4668      	mov	r0, sp
 8000744:	f7ff ffa4 	bl	8000690 <calculateCRC>
	byte_stream_write[12] = crc_calc & 0xFF;
 8000748:	f88d 0018 	strb.w	r0, [sp, #24]
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;
 800074c:	0a00      	lsrs	r0, r0, #8
	HAL_UART_Transmit_DMA(&huart4, byte_stream_write, 14);
 800074e:	220e      	movs	r2, #14
 8000750:	a903      	add	r1, sp, #12
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;
 8000752:	f88d 0019 	strb.w	r0, [sp, #25]
	HAL_UART_Transmit_DMA(&huart4, byte_stream_write, 14);
 8000756:	4817      	ldr	r0, [pc, #92]	; (80007b4 <WriteCommand+0xd0>)
 8000758:	f00b fb9c 	bl	800be94 <HAL_UART_Transmit_DMA>
	HAL_UART_DMAResume(&huart4);
 800075c:	4815      	ldr	r0, [pc, #84]	; (80007b4 <WriteCommand+0xd0>)
 800075e:	f00b fc5d 	bl	800c01c <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
 8000762:	2214      	movs	r2, #20
 8000764:	a907      	add	r1, sp, #28
 8000766:	4813      	ldr	r0, [pc, #76]	; (80007b4 <WriteCommand+0xd0>)
 8000768:	f00b fbde 	bl	800bf28 <HAL_UART_Receive_DMA>
	osDelay(5);
 800076c:	2005      	movs	r0, #5
 800076e:	f00f fd77 	bl	8010260 <osDelay>
	HAL_UART_DMAStop(&huart4);
 8000772:	4810      	ldr	r0, [pc, #64]	; (80007b4 <WriteCommand+0xd0>)
 8000774:	f00b fc7c 	bl	800c070 <HAL_UART_DMAStop>
	memcpy(rx_buffer, dma_buffer, 20);
 8000778:	ab07      	add	r3, sp, #28
 800077a:	4622      	mov	r2, r4
 800077c:	461d      	mov	r5, r3
 800077e:	3208      	adds	r2, #8
 8000780:	cd03      	ldmia	r5!, {r0, r1}
 8000782:	42b5      	cmp	r5, r6
 8000784:	f842 0c08 	str.w	r0, [r2, #-8]
 8000788:	f842 1c04 	str.w	r1, [r2, #-4]
 800078c:	462b      	mov	r3, r5
 800078e:	d1f5      	bne.n	800077c <WriteCommand+0x98>
 8000790:	6828      	ldr	r0, [r5, #0]
 8000792:	6010      	str	r0, [r2, #0]

	/* Check if we have an error code */
	if ((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0) {
 8000794:	79a2      	ldrb	r2, [r4, #6]
 8000796:	79e3      	ldrb	r3, [r4, #7]
 8000798:	4313      	orrs	r3, r2
 800079a:	7962      	ldrb	r2, [r4, #5]
 800079c:	4313      	orrs	r3, r2
 800079e:	7922      	ldrb	r2, [r4, #4]
 80007a0:	4313      	orrs	r3, r2
		status = osOK;
	}

	return status;

}
 80007a2:	bf14      	ite	ne
 80007a4:	f04f 30ff 	movne.w	r0, #4294967295
 80007a8:	2000      	moveq	r0, #0
 80007aa:	b00c      	add	sp, #48	; 0x30
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	bf00      	nop
 80007b0:	04680290 	.word	0x04680290
 80007b4:	2401b4c0 	.word	0x2401b4c0

080007b8 <DisableMotor>:
osStatus_t DisableMotor() {
 80007b8:	b500      	push	{lr}
	command[0] = 0x60;
 80007ba:	f244 1360 	movw	r3, #16736	; 0x4160
osStatus_t DisableMotor() {
 80007be:	b089      	sub	sp, #36	; 0x24
	command[0] = 0x60;
 80007c0:	f8ad 3004 	strh.w	r3, [sp, #4]
	status = WriteCommand(command, data, rx_buffer_write);
 80007c4:	aa03      	add	r2, sp, #12
	data[0] = 0x00;
 80007c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	status = WriteCommand(command, data, rx_buffer_write);
 80007ca:	a902      	add	r1, sp, #8
 80007cc:	a801      	add	r0, sp, #4
	data[0] = 0x00;
 80007ce:	9302      	str	r3, [sp, #8]
	status = WriteCommand(command, data, rx_buffer_write);
 80007d0:	f7ff ff88 	bl	80006e4 <WriteCommand>
}
 80007d4:	b009      	add	sp, #36	; 0x24
 80007d6:	f85d fb04 	ldr.w	pc, [sp], #4

080007da <SetPositionMode>:
osStatus_t SetPositionMode(int8_t position_mode) {
 80007da:	b500      	push	{lr}
	command[0] = 0x60;
 80007dc:	f246 0360 	movw	r3, #24672	; 0x6060
osStatus_t SetPositionMode(int8_t position_mode) {
 80007e0:	b089      	sub	sp, #36	; 0x24
	command[0] = 0x60;
 80007e2:	f8ad 3004 	strh.w	r3, [sp, #4]
	status = WriteCommand(command, data, rx_buffer_write);
 80007e6:	aa03      	add	r2, sp, #12
	data[0] = 0x00;
 80007e8:	2300      	movs	r3, #0
	status = WriteCommand(command, data, rx_buffer_write);
 80007ea:	a902      	add	r1, sp, #8
	data[3] = position_mode;
 80007ec:	f88d 000b 	strb.w	r0, [sp, #11]
	status = WriteCommand(command, data, rx_buffer_write);
 80007f0:	a801      	add	r0, sp, #4
	data[0] = 0x00;
 80007f2:	f8ad 3008 	strh.w	r3, [sp, #8]
	data[1] = 0x00;
 80007f6:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 80007fa:	f7ff ff73 	bl	80006e4 <WriteCommand>
}
 80007fe:	b009      	add	sp, #36	; 0x24
 8000800:	f85d fb04 	ldr.w	pc, [sp], #4

08000804 <MoveToPositionPPM>:
osStatus_t MoveToPositionPPM(int32_t position) {
 8000804:	b510      	push	{r4, lr}
	command[0] = 0x60;
 8000806:	f647 2360 	movw	r3, #31328	; 0x7a60
osStatus_t MoveToPositionPPM(int32_t position) {
 800080a:	b088      	sub	sp, #32
	command[0] = 0x60;
 800080c:	f244 0460 	movw	r4, #16480	; 0x4060
	command[0] = 0x60;
 8000810:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (position >> 24) & 0xFF;
 8000814:	0e03      	lsrs	r3, r0, #24
	data[3] = position & 0xFF;
 8000816:	f88d 000b 	strb.w	r0, [sp, #11]
	status = WriteCommand(command, data, rx_buffer_write);
 800081a:	aa03      	add	r2, sp, #12
	data[0] = (position >> 24) & 0xFF;
 800081c:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (position >> 16) & 0xFF;
 8000820:	1403      	asrs	r3, r0, #16
	status = WriteCommand(command, data, rx_buffer_write);
 8000822:	a902      	add	r1, sp, #8
	data[1] = (position >> 16) & 0xFF;
 8000824:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (position >> 8) & 0xFF;
 8000828:	1203      	asrs	r3, r0, #8
	status = WriteCommand(command, data, rx_buffer_write);
 800082a:	a801      	add	r0, sp, #4
	data[2] = (position >> 8) & 0xFF;
 800082c:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 8000830:	f7ff ff58 	bl	80006e4 <WriteCommand>
	data[0] = 0x00;
 8000834:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
	status = WriteCommand(command, data, rx_buffer_write);
 8000838:	aa03      	add	r2, sp, #12
 800083a:	a902      	add	r1, sp, #8
 800083c:	a801      	add	r0, sp, #4
	data[0] = 0x00;
 800083e:	9302      	str	r3, [sp, #8]
	command[0] = 0x60;
 8000840:	f8ad 4004 	strh.w	r4, [sp, #4]
	status = WriteCommand(command, data, rx_buffer_write);
 8000844:	f7ff ff4e 	bl	80006e4 <WriteCommand>
	data[0] = 0x00;
 8000848:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
	status = WriteCommand(command, data, rx_buffer_write);
 800084c:	aa03      	add	r2, sp, #12
 800084e:	a902      	add	r1, sp, #8
 8000850:	a801      	add	r0, sp, #4
	command[0] = 0x60;
 8000852:	f8ad 4004 	strh.w	r4, [sp, #4]
	data[0] = 0x00;
 8000856:	9302      	str	r3, [sp, #8]
	status = WriteCommand(command, data, rx_buffer_write);
 8000858:	f7ff ff44 	bl	80006e4 <WriteCommand>
}
 800085c:	b008      	add	sp, #32
 800085e:	bd10      	pop	{r4, pc}

08000860 <ConfigurePPM>:
		int32_t deceleration) {
 8000860:	b530      	push	{r4, r5, lr}
	command[0] = 0x60;
 8000862:	f248 1360 	movw	r3, #33120	; 0x8160
		int32_t deceleration) {
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	460d      	mov	r5, r1
 800086a:	4614      	mov	r4, r2
	command[0] = 0x60;
 800086c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (velocity >> 24) & 0xFF;
 8000870:	0e03      	lsrs	r3, r0, #24
	data[3] = velocity & 0xFF;
 8000872:	f88d 000b 	strb.w	r0, [sp, #11]
	status = WriteCommand(command, data, rx_buffer_write);
 8000876:	aa03      	add	r2, sp, #12
	data[0] = (velocity >> 24) & 0xFF;
 8000878:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (velocity >> 16) & 0xFF;
 800087c:	1403      	asrs	r3, r0, #16
	status = WriteCommand(command, data, rx_buffer_write);
 800087e:	a902      	add	r1, sp, #8
	data[1] = (velocity >> 16) & 0xFF;
 8000880:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (velocity >> 8) & 0xFF;
 8000884:	1203      	asrs	r3, r0, #8
	status = WriteCommand(command, data, rx_buffer_write);
 8000886:	a801      	add	r0, sp, #4
	data[2] = (velocity >> 8) & 0xFF;
 8000888:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 800088c:	f7ff ff2a 	bl	80006e4 <WriteCommand>
	command[0] = 0x60;
 8000890:	f248 3360 	movw	r3, #33632	; 0x8360
	status = WriteCommand(command, data, rx_buffer_write);
 8000894:	aa03      	add	r2, sp, #12
 8000896:	a902      	add	r1, sp, #8
 8000898:	a801      	add	r0, sp, #4
	command[0] = 0x60;
 800089a:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (acceleration >> 24) & 0xFF;
 800089e:	0e2b      	lsrs	r3, r5, #24
	data[3] = acceleration & 0xFF;
 80008a0:	f88d 500b 	strb.w	r5, [sp, #11]
	data[0] = (acceleration >> 24) & 0xFF;
 80008a4:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (acceleration >> 16) & 0xFF;
 80008a8:	142b      	asrs	r3, r5, #16
 80008aa:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (acceleration >> 8) & 0xFF;
 80008ae:	122b      	asrs	r3, r5, #8
 80008b0:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 80008b4:	f7ff ff16 	bl	80006e4 <WriteCommand>
	command[0] = 0x60;
 80008b8:	f248 4360 	movw	r3, #33888	; 0x8460
	status = WriteCommand(command, data, rx_buffer_write);
 80008bc:	aa03      	add	r2, sp, #12
 80008be:	a902      	add	r1, sp, #8
 80008c0:	a801      	add	r0, sp, #4
	command[0] = 0x60;
 80008c2:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (deceleration >> 24) & 0xFF;
 80008c6:	0e23      	lsrs	r3, r4, #24
	data[3] = deceleration & 0xFF;
 80008c8:	f88d 400b 	strb.w	r4, [sp, #11]
	data[0] = (deceleration >> 24) & 0xFF;
 80008cc:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (deceleration >> 16) & 0xFF;
 80008d0:	1423      	asrs	r3, r4, #16
 80008d2:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (deceleration >> 8) & 0xFF;
 80008d6:	1223      	asrs	r3, r4, #8
 80008d8:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 80008dc:	f7ff ff02 	bl	80006e4 <WriteCommand>
}
 80008e0:	b009      	add	sp, #36	; 0x24
 80008e2:	bd30      	pop	{r4, r5, pc}

080008e4 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer) {
 80008e4:	b570      	push	{r4, r5, r6, lr}
 80008e6:	b08e      	sub	sp, #56	; 0x38
 80008e8:	4605      	mov	r5, r0
	osStatus_t status = osError;

	uint8_t byte_stream_read[10];

	uint8_t dma_buffer[30] = { 0 };
 80008ea:	221e      	movs	r2, #30
osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer) {
 80008ec:	460c      	mov	r4, r1
	uint8_t dma_buffer[30] = { 0 };
 80008ee:	a806      	add	r0, sp, #24
 80008f0:	2100      	movs	r1, #0
 80008f2:	f012 feb0 	bl	8013656 <memset>

	byte_stream_read[0] = 0x90;				// DLE
 80008f6:	4b26      	ldr	r3, [pc, #152]	; (8000990 <ReadCommand+0xac>)
	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
	memcpy(crc_data_array, &byte_stream_read[2], 6 * sizeof(*byte_stream_read));

	uint16_t crc_calc = 0;
	crc_calc = calculateCRC(crc_data_array, 6);
 80008f8:	2106      	movs	r1, #6

	HAL_UART_DMAResume(&huart4);
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
	osDelay(5);
	HAL_UART_DMAStop(&huart4);
	memcpy(rx_buffer, dma_buffer, 20);
 80008fa:	ae0a      	add	r6, sp, #40	; 0x28
	byte_stream_read[0] = 0x90;				// DLE
 80008fc:	9303      	str	r3, [sp, #12]
	byte_stream_read[3] = 0x02;				// Length of stuff sent
 80008fe:	2301      	movs	r3, #1
 8000900:	f88d 3010 	strb.w	r3, [sp, #16]
	byte_stream_read[5] = command[1];		// Index Low Byte
 8000904:	786b      	ldrb	r3, [r5, #1]
 8000906:	f88d 3011 	strb.w	r3, [sp, #17]
	byte_stream_read[6] = command[0];		// Index High byte
 800090a:	782b      	ldrb	r3, [r5, #0]
 800090c:	f88d 3012 	strb.w	r3, [sp, #18]
	byte_stream_read[7] = 0x00;				// Subindex of object
 8000910:	2300      	movs	r3, #0
 8000912:	f88d 3013 	strb.w	r3, [sp, #19]
	memcpy(crc_data_array, &byte_stream_read[2], 6 * sizeof(*byte_stream_read));
 8000916:	ab0e      	add	r3, sp, #56	; 0x38
 8000918:	f853 0d2a 	ldr.w	r0, [r3, #-42]!
 800091c:	889b      	ldrh	r3, [r3, #4]
 800091e:	9001      	str	r0, [sp, #4]
	crc_calc = calculateCRC(crc_data_array, 6);
 8000920:	a801      	add	r0, sp, #4
	memcpy(crc_data_array, &byte_stream_read[2], 6 * sizeof(*byte_stream_read));
 8000922:	f8ad 3008 	strh.w	r3, [sp, #8]
	crc_calc = calculateCRC(crc_data_array, 6);
 8000926:	f7ff feb3 	bl	8000690 <calculateCRC>
	byte_stream_read[8] = crc_calc & 0xFF;
 800092a:	f88d 0014 	strb.w	r0, [sp, #20]
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;
 800092e:	0a00      	lsrs	r0, r0, #8
	HAL_UART_Transmit_DMA(&huart4, byte_stream_read, 10);
 8000930:	220a      	movs	r2, #10
 8000932:	a903      	add	r1, sp, #12
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;
 8000934:	f88d 0015 	strb.w	r0, [sp, #21]
	HAL_UART_Transmit_DMA(&huart4, byte_stream_read, 10);
 8000938:	4816      	ldr	r0, [pc, #88]	; (8000994 <ReadCommand+0xb0>)
 800093a:	f00b faab 	bl	800be94 <HAL_UART_Transmit_DMA>
	HAL_UART_DMAResume(&huart4);
 800093e:	4815      	ldr	r0, [pc, #84]	; (8000994 <ReadCommand+0xb0>)
 8000940:	f00b fb6c 	bl	800c01c <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
 8000944:	2214      	movs	r2, #20
 8000946:	a906      	add	r1, sp, #24
 8000948:	4812      	ldr	r0, [pc, #72]	; (8000994 <ReadCommand+0xb0>)
 800094a:	f00b faed 	bl	800bf28 <HAL_UART_Receive_DMA>
	osDelay(5);
 800094e:	2005      	movs	r0, #5
 8000950:	f00f fc86 	bl	8010260 <osDelay>
	HAL_UART_DMAStop(&huart4);
 8000954:	480f      	ldr	r0, [pc, #60]	; (8000994 <ReadCommand+0xb0>)
 8000956:	f00b fb8b 	bl	800c070 <HAL_UART_DMAStop>
	memcpy(rx_buffer, dma_buffer, 20);
 800095a:	ab06      	add	r3, sp, #24
 800095c:	4622      	mov	r2, r4
 800095e:	461d      	mov	r5, r3
 8000960:	3208      	adds	r2, #8
 8000962:	cd03      	ldmia	r5!, {r0, r1}
 8000964:	42b5      	cmp	r5, r6
 8000966:	f842 0c08 	str.w	r0, [r2, #-8]
 800096a:	f842 1c04 	str.w	r1, [r2, #-4]
 800096e:	462b      	mov	r3, r5
 8000970:	d1f5      	bne.n	800095e <ReadCommand+0x7a>
 8000972:	6828      	ldr	r0, [r5, #0]
 8000974:	6010      	str	r0, [r2, #0]

	/* check if we have an error code */
	if ((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0) {
 8000976:	79a2      	ldrb	r2, [r4, #6]
 8000978:	79e3      	ldrb	r3, [r4, #7]
 800097a:	4313      	orrs	r3, r2
 800097c:	7962      	ldrb	r2, [r4, #5]
 800097e:	4313      	orrs	r3, r2
 8000980:	7922      	ldrb	r2, [r4, #4]
 8000982:	4313      	orrs	r3, r2
		status = osOK;
	}
	return status;

}
 8000984:	bf14      	ite	ne
 8000986:	f04f 30ff 	movne.w	r0, #4294967295
 800098a:	2000      	moveq	r0, #0
 800098c:	b00e      	add	sp, #56	; 0x38
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	02600290 	.word	0x02600290
 8000994:	2401b4c0 	.word	0x2401b4c0

08000998 <EnableMotor>:
osStatus_t EnableMotor() {
 8000998:	b510      	push	{r4, lr}
 800099a:	b08c      	sub	sp, #48	; 0x30
	data[0] = 0x00;
 800099c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
	command[0] = 0x60;
 80009a0:	f244 0460 	movw	r4, #16480	; 0x4060
	status = WriteCommand(command, data, rx_buffer_write);
 80009a4:	aa02      	add	r2, sp, #8
 80009a6:	a901      	add	r1, sp, #4
 80009a8:	4668      	mov	r0, sp
	data[0] = 0x00;
 80009aa:	9301      	str	r3, [sp, #4]
	command[0] = 0x60;
 80009ac:	f8ad 4000 	strh.w	r4, [sp]
	status = WriteCommand(command, data, rx_buffer_write);
 80009b0:	f7ff fe98 	bl	80006e4 <WriteCommand>
	data[0] = 0x00;
 80009b4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
	status = WriteCommand(command, data, rx_buffer_write);
 80009b8:	aa02      	add	r2, sp, #8
 80009ba:	a901      	add	r1, sp, #4
 80009bc:	4668      	mov	r0, sp
	data[0] = 0x00;
 80009be:	9301      	str	r3, [sp, #4]
	command[0] = 0x60;
 80009c0:	f8ad 4000 	strh.w	r4, [sp]
	status = WriteCommand(command, data, rx_buffer_write);
 80009c4:	f7ff fe8e 	bl	80006e4 <WriteCommand>
	command[0] = 0x60;
 80009c8:	f244 1360 	movw	r3, #16736	; 0x4160
	status = ReadCommand(command, rx_buffer_read);
 80009cc:	a907      	add	r1, sp, #28
 80009ce:	4668      	mov	r0, sp
	command[0] = 0x60;
 80009d0:	f8ad 3000 	strh.w	r3, [sp]
	status = ReadCommand(command, rx_buffer_read);
 80009d4:	f7ff ff86 	bl	80008e4 <ReadCommand>
	if (rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04) {
 80009d8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80009dc:	2b37      	cmp	r3, #55	; 0x37
 80009de:	d104      	bne.n	80009ea <EnableMotor+0x52>
 80009e0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80009e4:	2b04      	cmp	r3, #4
		status = osOK;
 80009e6:	bf08      	it	eq
 80009e8:	2000      	moveq	r0, #0
}
 80009ea:	b00c      	add	sp, #48	; 0x30
 80009ec:	bd10      	pop	{r4, pc}

080009ee <GetPosition>:
osStatus_t GetPosition(int32_t *position) {
 80009ee:	b510      	push	{r4, lr}
 80009f0:	b086      	sub	sp, #24
	command[0] = 0x60;
 80009f2:	f246 4360 	movw	r3, #25696	; 0x6460
osStatus_t GetPosition(int32_t *position) {
 80009f6:	4604      	mov	r4, r0
	status = ReadCommand(command, rx_buffer_read);
 80009f8:	a901      	add	r1, sp, #4
 80009fa:	4668      	mov	r0, sp
	command[0] = 0x60;
 80009fc:	f8ad 3000 	strh.w	r3, [sp]
	status = ReadCommand(command, rx_buffer_read);
 8000a00:	f7ff ff70 	bl	80008e4 <ReadCommand>
	*position = rx_buffer_read[8] + (rx_buffer_read[9] << 8)
 8000a04:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8000a08:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000a0c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			+ (rx_buffer_read[10] << 16) + (rx_buffer_read[11] << 24);
 8000a10:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8000a14:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8000a18:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000a1c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
	*position = rx_buffer_read[8] + (rx_buffer_read[9] << 8)
 8000a20:	6023      	str	r3, [r4, #0]
}
 8000a22:	b006      	add	sp, #24
 8000a24:	bd10      	pop	{r4, pc}
	...

08000a28 <write_read_command>:
	uint8_t read_buffer = 0;
	return write_read_command(&enable_command, &read_buffer, 1);
}


osStatus_t write_read_command(uint8_t* write_data, uint8_t* read_data, int32_t size){
 8000a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a2a:	4614      	mov	r4, r2
 8000a2c:	4607      	mov	r7, r0
	osStatus_t status = osOK;
	HAL_StatusTypeDef HAL_status = HAL_ERROR;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	HAL_status = HAL_SPI_Transmit_DMA(&hspi4, write_data, size);
 8000a2e:	4d0b      	ldr	r5, [pc, #44]	; (8000a5c <write_read_command+0x34>)
osStatus_t write_read_command(uint8_t* write_data, uint8_t* read_data, int32_t size){
 8000a30:	460e      	mov	r6, r1
	HAL_status = HAL_SPI_Transmit_DMA(&hspi4, write_data, size);
 8000a32:	b2a4      	uxth	r4, r4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2110      	movs	r1, #16
 8000a38:	4809      	ldr	r0, [pc, #36]	; (8000a60 <write_read_command+0x38>)
 8000a3a:	f007 fb15 	bl	8008068 <HAL_GPIO_WritePin>
	HAL_status = HAL_SPI_Transmit_DMA(&hspi4, write_data, size);
 8000a3e:	4622      	mov	r2, r4
 8000a40:	4639      	mov	r1, r7
 8000a42:	4628      	mov	r0, r5
 8000a44:	f00a fc54 	bl	800b2f0 <HAL_SPI_Transmit_DMA>
	HAL_status = HAL_SPI_Receive_DMA(&hspi4, read_data, size);
 8000a48:	4622      	mov	r2, r4
 8000a4a:	4631      	mov	r1, r6
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	f00a fde1 	bl	800b614 <HAL_SPI_Receive_DMA>
	if (HAL_status != HAL_OK){
 8000a52:	3000      	adds	r0, #0
 8000a54:	bf18      	it	ne
 8000a56:	2001      	movne	r0, #1
		status = osError;
	}

	return status;
}
 8000a58:	4240      	negs	r0, r0
 8000a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a5c:	240132b4 	.word	0x240132b4
 8000a60:	58020000 	.word	0x58020000

08000a64 <read_chip_id>:
	uint8_t buffer[4] = { 0 };
 8000a64:	2300      	movs	r3, #0
int32_t read_chip_id(){
 8000a66:	b507      	push	{r0, r1, r2, lr}
	write_read_command(buffer, receive_buffer, sizeof(buffer));
 8000a68:	2204      	movs	r2, #4
 8000a6a:	4668      	mov	r0, sp
	uint8_t receive_buffer[4] = { 0 };
 8000a6c:	e9cd 3300 	strd	r3, r3, [sp]
	buffer[0] = 0x90;
 8000a70:	2390      	movs	r3, #144	; 0x90
	write_read_command(buffer, receive_buffer, sizeof(buffer));
 8000a72:	eb0d 0102 	add.w	r1, sp, r2
	buffer[0] = 0x90;
 8000a76:	f88d 3000 	strb.w	r3, [sp]
	write_read_command(buffer, receive_buffer, sizeof(buffer));
 8000a7a:	f7ff ffd5 	bl	8000a28 <write_read_command>
	chip_id = receive_buffer[0] << 4 | receive_buffer[1];
 8000a7e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000a82:	f89d 3005 	ldrb.w	r3, [sp, #5]
}
 8000a86:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8000a8a:	b003      	add	sp, #12
 8000a8c:	f85d fb04 	ldr.w	pc, [sp], #4

08000a90 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2110      	movs	r1, #16
 8000a94:	4801      	ldr	r0, [pc, #4]	; (8000a9c <HAL_SPI_RxCpltCallback+0xc>)
 8000a96:	f007 bae7 	b.w	8008068 <HAL_GPIO_WritePin>
 8000a9a:	bf00      	nop
 8000a9c:	58020000 	.word	0x58020000

08000aa0 <_gps_search_start>:

#include "GPS/gps.h"

const uint8_t ubxgga[HEADER_SIZE] = {'G','G','A'};

uint32_t _gps_search_start(uint8_t *arr){
 8000aa0:	3001      	adds	r0, #1
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	f240 32a2 	movw	r2, #930	; 0x3a2
			{
			  if(arr[i-2] == ubxgga[0] && arr[i-1] == ubxgga[1] && arr[i] == ubxgga[2])
 8000aa8:	f810 1b01 	ldrb.w	r1, [r0], #1
 8000aac:	3301      	adds	r3, #1
 8000aae:	2947      	cmp	r1, #71	; 0x47
 8000ab0:	d107      	bne.n	8000ac2 <_gps_search_start+0x22>
 8000ab2:	7801      	ldrb	r1, [r0, #0]
 8000ab4:	2947      	cmp	r1, #71	; 0x47
 8000ab6:	d104      	bne.n	8000ac2 <_gps_search_start+0x22>
 8000ab8:	7841      	ldrb	r1, [r0, #1]
 8000aba:	2941      	cmp	r1, #65	; 0x41
 8000abc:	d101      	bne.n	8000ac2 <_gps_search_start+0x22>
			    return i+1;
 8000abe:	4618      	mov	r0, r3
 8000ac0:	4770      	bx	lr
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d1f0      	bne.n	8000aa8 <_gps_search_start+0x8>
			}
	return 0;
 8000ac6:	2000      	movs	r0, #0
}
 8000ac8:	4770      	bx	lr
 8000aca:	0000      	movs	r0, r0
 8000acc:	0000      	movs	r0, r0
	...

08000ad0 <_parse_data>:

uint8_t _parse_data (struct gps_device *dev, uint8_t* data){


	if (data[22] == 'N' || data[22] == 'S'){
 8000ad0:	7d8b      	ldrb	r3, [r1, #22]
 8000ad2:	2b4e      	cmp	r3, #78	; 0x4e
uint8_t _parse_data (struct gps_device *dev, uint8_t* data){
 8000ad4:	b510      	push	{r4, lr}
 8000ad6:	ed2d 8b0a 	vpush	{d8-d12}
	if (data[22] == 'N' || data[22] == 'S'){
 8000ada:	f040 80dd 	bne.w	8000c98 <_parse_data+0x1c8>
 8000ade:	1e4b      	subs	r3, r1, #1
 8000ae0:	f101 0445 	add.w	r4, r1, #69	; 0x45

		// ASCII to decimal conversion
		for(int i = 0; i < DATA_SIZE; i++) data[i] = data[i]-48;
 8000ae4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8000ae8:	3a30      	subs	r2, #48	; 0x30
 8000aea:	42a3      	cmp	r3, r4
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	d1f9      	bne.n	8000ae4 <_parse_data+0x14>


		dev->data.hour = data[1]*10 + data[2];
 8000af0:	788c      	ldrb	r4, [r1, #2]
 8000af2:	230a      	movs	r3, #10
 8000af4:	784a      	ldrb	r2, [r1, #1]
 8000af6:	fb13 4202 	smlabb	r2, r3, r2, r4
 8000afa:	6082      	str	r2, [r0, #8]
		dev->data.minute = data[3]*10 + data[4];
 8000afc:	790c      	ldrb	r4, [r1, #4]
 8000afe:	78ca      	ldrb	r2, [r1, #3]
 8000b00:	fb13 4202 	smlabb	r2, r3, r2, r4
 8000b04:	60c2      	str	r2, [r0, #12]
		dev->data.second = data[5]*10 + data[6];
 8000b06:	798a      	ldrb	r2, [r1, #6]
 8000b08:	794c      	ldrb	r4, [r1, #5]
 8000b0a:	fb13 2304 	smlabb	r3, r3, r4, r2
 8000b0e:	6103      	str	r3, [r0, #16]

		dev->data.lat_deg = data[11]*10 +data[12];
 8000b10:	7acb      	ldrb	r3, [r1, #11]
 8000b12:	7b0a      	ldrb	r2, [r1, #12]
 8000b14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b18:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000b1c:	7543      	strb	r3, [r0, #21]
		dev->data.lat_decimal = (data[13]*1e7 + data[14]*1e6 + data[16]*1e5 + data[17]*1e4 + data[18]*1e3 + data[19]*1e2 + data[20])/6;
 8000b1e:	7ccb      	ldrb	r3, [r1, #19]
 8000b20:	ee05 3a10 	vmov	s10, r3
 8000b24:	7c8b      	ldrb	r3, [r1, #18]
 8000b26:	ee06 3a10 	vmov	s12, r3
 8000b2a:	7c4b      	ldrb	r3, [r1, #17]
 8000b2c:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 8000b30:	ee04 3a10 	vmov	s8, r3
 8000b34:	7c0b      	ldrb	r3, [r1, #16]
 8000b36:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8000b3a:	ee03 3a10 	vmov	s6, r3
 8000b3e:	7b4b      	ldrb	r3, [r1, #13]
 8000b40:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8000b44:	ee02 3a10 	vmov	s4, r3
 8000b48:	7b8b      	ldrb	r3, [r1, #14]
 8000b4a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8000b4e:	ee07 3a10 	vmov	s14, r3
 8000b52:	eeb8 2bc2 	vcvt.f64.s32	d2, s4
 8000b56:	7d0b      	ldrb	r3, [r1, #20]
 8000b58:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000b5c:	ed9f ab52 	vldr	d10, [pc, #328]	; 8000ca8 <_parse_data+0x1d8>
 8000b60:	ed9f 9b53 	vldr	d9, [pc, #332]	; 8000cb0 <_parse_data+0x1e0>
 8000b64:	ed9f 8b54 	vldr	d8, [pc, #336]	; 8000cb8 <_parse_data+0x1e8>
 8000b68:	ee27 7b0a 	vmul.f64	d7, d7, d10
 8000b6c:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8000cc0 <_parse_data+0x1f0>
 8000b70:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8000cc8 <_parse_data+0x1f8>
 8000b74:	eea2 7b09 	vfma.f64	d7, d2, d9
 8000b78:	ed9f 2b55 	vldr	d2, [pc, #340]	; 8000cd0 <_parse_data+0x200>
 8000b7c:	eea3 7b08 	vfma.f64	d7, d3, d8
 8000b80:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 8000b84:	eea4 7b00 	vfma.f64	d7, d4, d0
 8000b88:	eea6 7b01 	vfma.f64	d7, d6, d1
 8000b8c:	eea5 7b02 	vfma.f64	d7, d5, d2
 8000b90:	eeb0 6b47 	vmov.f64	d6, d7
 8000b94:	ee07 3a10 	vmov	s14, r3
 8000b98:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000b9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ba0:	ee87 6b03 	vdiv.f64	d6, d7, d3
 8000ba4:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000ba8:	ed80 6a06 	vstr	s12, [r0, #24]

		dev->data.lon_deg = data[25]*10 +data[26];
 8000bac:	7e4b      	ldrb	r3, [r1, #25]
 8000bae:	7e8a      	ldrb	r2, [r1, #26]
 8000bb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bb4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000bb8:	7703      	strb	r3, [r0, #28]
		dev->data.lon_decimal = (data[27]*1e7 + data[28]*1e6 + data[30]*1e5 + data[31]*1e4 + data[32]*1e3 + data[33]*1e2 + data[34])/6;
 8000bba:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 8000bbe:	ee0c 3a10 	vmov	s24, r3
 8000bc2:	f891 3020 	ldrb.w	r3, [r1, #32]
 8000bc6:	ee0b 3a10 	vmov	s22, r3
 8000bca:	7fcb      	ldrb	r3, [r1, #31]
 8000bcc:	eeb8 cbcc 	vcvt.f64.s32	d12, s24
 8000bd0:	ee06 3a10 	vmov	s12, r3
 8000bd4:	7f8b      	ldrb	r3, [r1, #30]
 8000bd6:	eeb8 bbcb 	vcvt.f64.s32	d11, s22
 8000bda:	ee05 3a10 	vmov	s10, r3
 8000bde:	7ecb      	ldrb	r3, [r1, #27]
 8000be0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8000be4:	ee04 3a10 	vmov	s8, r3
 8000be8:	7f0b      	ldrb	r3, [r1, #28]
 8000bea:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 8000bee:	ee07 3a10 	vmov	s14, r3
 8000bf2:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8000bf6:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
 8000bfa:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000bfe:	ee27 7b0a 	vmul.f64	d7, d7, d10
 8000c02:	eea4 7b09 	vfma.f64	d7, d4, d9
 8000c06:	eea5 7b08 	vfma.f64	d7, d5, d8
 8000c0a:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000c0e:	eeab 7b01 	vfma.f64	d7, d11, d1
 8000c12:	eeac 7b02 	vfma.f64	d7, d12, d2
 8000c16:	eeb0 ab47 	vmov.f64	d10, d7
 8000c1a:	ee07 3a10 	vmov	s14, r3
 8000c1e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000c22:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8000c26:	ee87 6b03 	vdiv.f64	d6, d7, d3
 8000c2a:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000c2e:	ed80 6a08 	vstr	s12, [r0, #32]

		dev->data.fix = data[38];
 8000c32:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8000c36:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

		dev->data.satellite = data[40]*10 + data[41];
 8000c3a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000c3e:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8000c42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c46:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000c4a:	7503      	strb	r3, [r0, #20]

		dev->data.HDOP = data[43]*100+data[45]*10+data[46];
 8000c4c:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8000c50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c54:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000c58:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8000c5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000c66:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
 8000c6a:	4413      	add	r3, r2
 8000c6c:	84c3      	strh	r3, [r0, #38]	; 0x26

		dev->data.altitude= data[48]*100+data[49]*10+data[50];
 8000c6e:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8000c72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c76:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000c7a:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8000c7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000c88:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
 8000c8c:	4413      	add	r3, r2
 8000c8e:	8503      	strh	r3, [r0, #40]	; 0x28
 8000c90:	2001      	movs	r0, #1
	else {
		dev->data.fix = 0;
		return 0;
	}
	return 1;
}
 8000c92:	ecbd 8b0a 	vpop	{d8-d12}
 8000c96:	bd10      	pop	{r4, pc}
	if (data[22] == 'N' || data[22] == 'S'){
 8000c98:	2b53      	cmp	r3, #83	; 0x53
 8000c9a:	f43f af20 	beq.w	8000ade <_parse_data+0xe>
		dev->data.fix = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		return 0;
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	e7f4      	b.n	8000c92 <_parse_data+0x1c2>
 8000ca8:	00000000 	.word	0x00000000
 8000cac:	412e8480 	.word	0x412e8480
 8000cb0:	00000000 	.word	0x00000000
 8000cb4:	416312d0 	.word	0x416312d0
 8000cb8:	00000000 	.word	0x00000000
 8000cbc:	40f86a00 	.word	0x40f86a00
 8000cc0:	00000000 	.word	0x00000000
 8000cc4:	40c38800 	.word	0x40c38800
 8000cc8:	00000000 	.word	0x00000000
 8000ccc:	408f4000 	.word	0x408f4000
 8000cd0:	00000000 	.word	0x00000000
 8000cd4:	40590000 	.word	0x40590000

08000cd8 <gps_dma_init>:


void gps_dma_init(struct gps_device *dev){
 8000cd8:	b510      	push	{r4, lr}
 8000cda:	4604      	mov	r4, r0
	HAL_UART_DMAStop(dev->uart_bus);
 8000cdc:	6840      	ldr	r0, [r0, #4]
 8000cde:	f00b f9c7 	bl	800c070 <HAL_UART_DMAStop>

	HAL_UART_Receive_DMA(dev->uart_bus, gps_data[dev->id], BUFFER_SIZE);
 8000ce2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ce6:	7821      	ldrb	r1, [r4, #0]
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <gps_dma_init+0x28>)
 8000cea:	6860      	ldr	r0, [r4, #4]
 8000cec:	fb02 3101 	mla	r1, r2, r1, r3
 8000cf0:	f00b f91a 	bl	800bf28 <HAL_UART_Receive_DMA>

	HAL_UART_DMAResume(dev->uart_bus);
 8000cf4:	6860      	ldr	r0, [r4, #4]
}
 8000cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_DMAResume(dev->uart_bus);
 8000cfa:	f00b b98f 	b.w	800c01c <HAL_UART_DMAResume>
 8000cfe:	bf00      	nop
 8000d00:	24009cda 	.word	0x24009cda

08000d04 <gps_read_sensor>:



uint8_t gps_read_sensor (struct gps_device *dev){
 8000d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d06:	4604      	mov	r4, r0
	HAL_UART_DMAPause(dev->uart_bus);
 8000d08:	6840      	ldr	r0, [r0, #4]
 8000d0a:	f00b f959 	bl	800bfc0 <HAL_UART_DMAPause>

	uint32_t data_start = _gps_search_start(gps_data[dev->id]);
 8000d0e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000d12:	490d      	ldr	r1, [pc, #52]	; (8000d48 <gps_read_sensor+0x44>)
 8000d14:	7827      	ldrb	r7, [r4, #0]
 8000d16:	4e0d      	ldr	r6, [pc, #52]	; (8000d4c <gps_read_sensor+0x48>)
 8000d18:	fb05 1507 	mla	r5, r5, r7, r1
 8000d1c:	4628      	mov	r0, r5
 8000d1e:	f7ff febf 	bl	8000aa0 <_gps_search_start>
	if (data_start > 0) memcpy(gps_gga[dev->id], gps_data[dev->id] + data_start, DATA_SIZE);
 8000d22:	b128      	cbz	r0, 8000d30 <gps_read_sensor+0x2c>
 8000d24:	2246      	movs	r2, #70	; 0x46
 8000d26:	1829      	adds	r1, r5, r0
 8000d28:	fb07 6002 	mla	r0, r7, r2, r6
 8000d2c:	f012 fc88 	bl	8013640 <memcpy>

	HAL_UART_DMAResume(dev->uart_bus);
 8000d30:	6860      	ldr	r0, [r4, #4]
 8000d32:	f00b f973 	bl	800c01c <HAL_UART_DMAResume>

	return _parse_data(dev, gps_gga[dev->id]);
 8000d36:	7821      	ldrb	r1, [r4, #0]
 8000d38:	2346      	movs	r3, #70	; 0x46
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	fb01 6103 	mla	r1, r1, r3, r6
}
 8000d40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return _parse_data(dev, gps_gga[dev->id]);
 8000d44:	f7ff bec4 	b.w	8000ad0 <_parse_data>
 8000d48:	24009cda 	.word	0x24009cda
 8000d4c:	24009c08 	.word	0x24009c08

08000d50 <gps_reset>:
	dev->data.hour = 0;
	dev->data.minute = 0;
	dev->data.second = 0;

	dev->data.lat_deg = 0;
	dev->data.lat_decimal = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	6183      	str	r3, [r0, #24]

	dev->data.lon_deg = 0;
 8000d54:	7703      	strb	r3, [r0, #28]
	dev->data.lon_decimal = 0;
 8000d56:	6203      	str	r3, [r0, #32]

	dev->data.fix = 0;
 8000d58:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	dev->data.minute = 0;
 8000d5c:	6103      	str	r3, [r0, #16]
	dev->data.second = 0;
 8000d5e:	8283      	strh	r3, [r0, #20]

	dev->data.satellite = 0;

	dev->data.HDOP = 0;
 8000d60:	84c3      	strh	r3, [r0, #38]	; 0x26

	dev->data.altitude= 0;
 8000d62:	8503      	strh	r3, [r0, #40]	; 0x28
	dev->data.hour = 0;
 8000d64:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 8000d68:	4770      	bx	lr
	...

08000d6c <init_coeff>:

#include "Sim_Con/controller.h"

/* In this file, all the controller related function as the controller itself will be defined */

void init_coeff(control_data_t *control_data){
 8000d6c:	b570      	push	{r4, r5, r6, lr}
    /* The coefficients are sorted in the following way: Gain 1, Gain 2, Gain 3, Optimal Trajectory*/
    const long double coeff0[POLY_DEG+1] = {-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000868001509274695588003190560506144, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000006734144053942240645165763223097866695, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000017943967053724527790526120972453756926449, 0.000000000000000000000000000000000000000000000000000000000000000000000000000011600941491935255106453433215669137342465324, 0.000000000000000000000000000000000000000000000000000000000000000000000000024003842653456406415201075555759650350223677265, -0.000000000000000000000000000000000000000000000000000000000000000000000018111809768284050761098616789038040361039057944148, -0.000000000000000000000000000000000000000000000000000000000000000000048626795322807690622140144022438412562738932905020920, 0.000000000000000000000000000000000000000000000000000000000000000007420489314715460137826453965576002362709190070801883230, 0.000000000000000000000000000000000000000000000000000000000000094912489417915252510561501393729204256289219371483064906746, 0.000000000000000000000000000000000000000000000000000000000052920131301064704984426808487039401202507286820178230977021240, -0.000000000000000000000000000000000000000000000000000000142328584943567111040099678669599125806190931530978604529693922433, -0.000000000000000000000000000000000000000000000000000206637043647508274878826573874873913387740240970744978496233572370358, 0.000000000000000000000000000000000000000000000000130334867334591797705159920212787647558817394492967999556852539610786702, 0.000000000000000000000000000000000000000000000490489866515998216867458404379428187117827265098035412660415750117880703074, 0.000000000000000000000000000000000000000000026867380644656436850000702522289482657478939067887135595991052719132239096434, -0.000000000000000000000000000000000000000958336406527050599461484506529266000580916845814498770483885341489941271723386135, -0.000000000000000000000000000000000000380110572500376264930409844941662974846208384219693874197621108524730596015191124200, 0.000000000000000000000000000000001846228870037127080708718400229324628612006979121258828532160962041221158639206452239598, 0.000000000000000000000000000000701063223175594818444883139638145152049380684396387992241048156796428280836621271983333248, -0.000000000000000000000000003903941552353450564236090389613619312482757597027505055531398063059663437746049652332658297382, 0.000000000000000000000000921341687636553511160316676520504205771478259592850755826738722497823430579444448085268959403038, 0.000000000000000000006947147284172662813389137056975705843499706683819221137788160747028598507313290610909461975097656250, -0.000000000000000011979567065868153518301726372320952852497657147544385392023968961439095437526702880859375000000000000000, 0.000000000000010700672963404348022988568119097284740871703703768424986719765001907944679260253906250000000000000000000000, -0.000000000006235098773362018059773535637897243634301946979547892624395899474620819091796875000000000000000000000000000000, 0.000000002525183589744375369531118971666051875590852660025120712816715240478515625000000000000000000000000000000000000000, -0.000000720864945346716686813465149036295187556788732763379812240600585937500000000000000000000000000000000000000000000000, 0.000142835180023407189121506521978233195113716647028923034667968750000000000000000000000000000000000000000000000000000000, -0.018733383728017274222343857559280877467244863510131835937500000000000000000000000000000000000000000000000000000000000000, 1.463511559528952288289360694761853665113449096679687500000000000000000000000000000000000000000000000000000000000000000000, -51.561961866915225982666015625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000};
 8000d6e:	24f8      	movs	r4, #248	; 0xf8
void init_coeff(control_data_t *control_data){
 8000d70:	f5ad 7d78 	sub.w	sp, sp, #992	; 0x3e0
    const long double coeff0[POLY_DEG+1] = {};
 8000d74:	4e1a      	ldr	r6, [pc, #104]	; (8000de0 <init_coeff+0x74>)
void init_coeff(control_data_t *control_data){
 8000d76:	4605      	mov	r5, r0
    const long double coeff0[POLY_DEG+1] = {};
 8000d78:	4622      	mov	r2, r4
 8000d7a:	4668      	mov	r0, sp
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	f012 fc5f 	bl	8013640 <memcpy>
    const long double coeff1[POLY_DEG+1] = {};
 8000d82:	4622      	mov	r2, r4
 8000d84:	1931      	adds	r1, r6, r4
 8000d86:	eb0d 0004 	add.w	r0, sp, r4
 8000d8a:	f012 fc59 	bl	8013640 <memcpy>
    const long double coeff2[POLY_DEG+1] = {};
 8000d8e:	4622      	mov	r2, r4
 8000d90:	f506 71f8 	add.w	r1, r6, #496	; 0x1f0
 8000d94:	a87c      	add	r0, sp, #496	; 0x1f0
 8000d96:	f012 fc53 	bl	8013640 <memcpy>
    const long double coeff3[POLY_DEG+1] = {};
 8000d9a:	4622      	mov	r2, r4
 8000d9c:	f506 713a 	add.w	r1, r6, #744	; 0x2e8
 8000da0:	a8ba      	add	r0, sp, #744	; 0x2e8
 8000da2:	f012 fc4d 	bl	8013640 <memcpy>

    memcpy(control_data->poly_coeff[0], coeff0, sizeof(coeff0));
 8000da6:	4622      	mov	r2, r4
 8000da8:	4669      	mov	r1, sp
 8000daa:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8000dae:	f012 fc47 	bl	8013640 <memcpy>
    memcpy(control_data->poly_coeff[1], coeff1, sizeof(coeff1));
 8000db2:	4622      	mov	r2, r4
 8000db4:	eb0d 0104 	add.w	r1, sp, r4
 8000db8:	f505 709c 	add.w	r0, r5, #312	; 0x138
 8000dbc:	f012 fc40 	bl	8013640 <memcpy>
    memcpy(control_data->poly_coeff[2], coeff2, sizeof(coeff2));
 8000dc0:	4622      	mov	r2, r4
 8000dc2:	a97c      	add	r1, sp, #496	; 0x1f0
 8000dc4:	f505 700c 	add.w	r0, r5, #560	; 0x230
 8000dc8:	f012 fc3a 	bl	8013640 <memcpy>
    memcpy(control_data->poly_coeff[3], coeff3, sizeof(coeff3));
 8000dcc:	4622      	mov	r2, r4
 8000dce:	a9ba      	add	r1, sp, #744	; 0x2e8
 8000dd0:	f505 704a 	add.w	r0, r5, #808	; 0x328
 8000dd4:	f012 fc34 	bl	8013640 <memcpy>
}
 8000dd8:	f50d 7d78 	add.w	sp, sp, #992	; 0x3e0
 8000ddc:	bd70      	pop	{r4, r5, r6, pc}
 8000dde:	bf00      	nop
 8000de0:	08014f18 	.word	0x08014f18

08000de4 <control_data_init>:
    }
}


void control_data_reset(control_data_t *control_data){
    control_data->control_input = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	6003      	str	r3, [r0, #0]
    control_data->reference_error = 0;
 8000de8:	6043      	str	r3, [r0, #4]
    control_data->integrated_error = 0;
 8000dea:	6083      	str	r3, [r0, #8]
}

void control_data_init(control_data_t *control_data){
    control_data_reset(control_data);

    control_data->lowerboundary_aw = 0;
 8000dec:	6183      	str	r3, [r0, #24]
    control_data->upperboundary_aw = 0;
 8000dee:	61c3      	str	r3, [r0, #28]

    control_data->safety_counter = 0;
 8000df0:	2300      	movs	r3, #0
void control_data_init(control_data_t *control_data){
 8000df2:	b510      	push	{r4, lr}
    control_data->safety_counter = 0;
 8000df4:	8403      	strh	r3, [r0, #32]
void control_data_init(control_data_t *control_data){
 8000df6:	4604      	mov	r4, r0
    control_data->apogee_approach_phase = false;
 8000df8:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22

    init_coeff(control_data);
 8000dfc:	f7ff ffb6 	bl	8000d6c <init_coeff>

    for(int i = 0; i < NUM_GAINS; i++){
        control_data->gains[i] = 0;
 8000e00:	2200      	movs	r2, #0
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 8000e08:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8000e0c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    }
}
 8000e10:	bd10      	pop	{r4, pc}
 8000e12:	0000      	movs	r0, r0
 8000e14:	0000      	movs	r0, r0
	...

08000e18 <evaluate_polyfit>:

/* Does the Polynomial Calculation of the reference velocity */
void evaluate_polyfit(control_data_t *control_data) {
 8000e18:	b570      	push	{r4, r5, r6, lr}
 8000e1a:	ed2d 8b02 	vpush	{d8}
    /* For Speed */
    double x_placeholder = 0;

    /* Reset gains */
    for (int i = 0; i < NUM_GAINS; i++) {
        control_data->gains[i] = 0;
 8000e1e:	ed9f 8b1e 	vldr	d8, [pc, #120]	; 8000e98 <evaluate_polyfit+0x80>
void evaluate_polyfit(control_data_t *control_data) {
 8000e22:	4604      	mov	r4, r0
 8000e24:	f100 0540 	add.w	r5, r0, #64	; 0x40
        control_data->gains[i] = 0;
 8000e28:	261e      	movs	r6, #30
 8000e2a:	ed80 8b0a 	vstr	d8, [r0, #40]	; 0x28
 8000e2e:	ed80 8b0c 	vstr	d8, [r0, #48]	; 0x30
 8000e32:	ed80 8b0e 	vstr	d8, [r0, #56]	; 0x38
    /* Reset ref_velocity_placeholder*/
    double ref_velocity_placeholder = 0;

    /* For loop */
    for (int i = 0; i < POLY_DEG + 1; ++i) {
        x_placeholder = pow(control_data->sf_ref_altitude_AGL, (double)(POLY_DEG - i));
 8000e36:	ee07 6a90 	vmov	s15, r6
 8000e3a:	ed94 0a03 	vldr	s0, [r4, #12]
 8000e3e:	eeb8 1be7 	vcvt.f64.s32	d1, s15
 8000e42:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8000e46:	f013 f97f 	bl	8014148 <pow>
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8000e4a:	f116 36ff 	adds.w	r6, r6, #4294967295
        control_data->gains[0] += control_data->poly_coeff[0][i] * x_placeholder;
 8000e4e:	ecb5 6b02 	vldmia	r5!, {d6}
 8000e52:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
 8000e56:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000e5a:	ed84 7b0a 	vstr	d7, [r4, #40]	; 0x28
        control_data->gains[1] += control_data->poly_coeff[1][i] * x_placeholder;
 8000e5e:	ed94 7b0c 	vldr	d7, [r4, #48]	; 0x30
 8000e62:	ed95 6b3c 	vldr	d6, [r5, #240]	; 0xf0
 8000e66:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000e6a:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
        control_data->gains[2] += control_data->poly_coeff[2][i] * x_placeholder;
 8000e6e:	ed94 7b0e 	vldr	d7, [r4, #56]	; 0x38
 8000e72:	ed95 6b7a 	vldr	d6, [r5, #488]	; 0x1e8
 8000e76:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000e7a:	ed84 7b0e 	vstr	d7, [r4, #56]	; 0x38
        ref_velocity_placeholder += (control_data->poly_coeff[3][i] * x_placeholder);
 8000e7e:	ed95 7bb8 	vldr	d7, [r5, #736]	; 0x2e0
 8000e82:	eea7 8b00 	vfma.f64	d8, d7, d0
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8000e86:	d2d6      	bcs.n	8000e36 <evaluate_polyfit+0x1e>
    }

    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8000e88:	eef7 7bc8 	vcvt.f32.f64	s15, d8
}
 8000e8c:	ecbd 8b02 	vpop	{d8}
    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8000e90:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8000e94:	bd70      	pop	{r4, r5, r6, pc}
 8000e96:	bf00      	nop
	...

08000ea0 <compute_antiwindup_boundaries>:

void compute_antiwindup_boundaries(control_data_t *control_data) {
    control_data->upperboundary_aw = fmaxf(M_AW *
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8000ea0:	ed90 6a03 	vldr	s12, [r0, #12]
 8000ea4:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8000ee8 <compute_antiwindup_boundaries+0x48>
 8000ea8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000eac:	ed9f 4b10 	vldr	d4, [pc, #64]	; 8000ef0 <compute_antiwindup_boundaries+0x50>
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8000eb0:	ee35 7b46 	vsub.f64	d7, d5, d6
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 8000eb4:	eeb4 6bc5 	vcmpe.f64	d6, d5
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000eb8:	ee27 7b04 	vmul.f64	d7, d7, d4
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 8000ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000ec0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        control_data->upperboundary_aw = 0;
 8000ec4:	bfc8      	it	gt
 8000ec6:	2300      	movgt	r3, #0
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000ec8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        control_data->upperboundary_aw = 0;
 8000ecc:	bfc8      	it	gt
 8000ece:	61c3      	strgt	r3, [r0, #28]
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000ed0:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
 8000ed4:	bfd8      	it	le
 8000ed6:	ed80 7a07 	vstrle	s14, [r0, #28]
    }
    control_data->lowerboundary_aw = - control_data->upperboundary_aw;
 8000eda:	edd0 7a07 	vldr	s15, [r0, #28]
 8000ede:	eef1 7a67 	vneg.f32	s15, s15
 8000ee2:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8000ee6:	4770      	bx	lr
 8000ee8:	e7f5e611 	.word	0xe7f5e611
 8000eec:	409598a1 	.word	0x409598a1
 8000ef0:	47ae147b 	.word	0x47ae147b
 8000ef4:	3f747ae1 	.word	0x3f747ae1

08000ef8 <compute_reference_error>:

void compute_reference_error(control_data_t *control_data) {
    if (control_data->ref_velocity < 0) {
 8000ef8:	ed90 7a05 	vldr	s14, [r0, #20]
 8000efc:	edd0 7a04 	vldr	s15, [r0, #16]
 8000f00:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        control_data->reference_error = control_data->sf_velocity;
    }
    else{
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
 8000f08:	bf58      	it	pl
 8000f0a:	ee77 7ac7 	vsubpl.f32	s15, s15, s14
 8000f0e:	edc0 7a01 	vstr	s15, [r0, #4]
    }
}
 8000f12:	4770      	bx	lr
 8000f14:	0000      	movs	r0, r0
	...

08000f18 <check_apogee_approach_phase>:

void check_apogee_approach_phase(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
    /* if n positive samples are counted, the apogee approach phase is entered */
    if (flight_phase_detection->mach_number < CONTROL_DEACTIVATION_MACH_NUMBER) {
 8000f18:	ed91 7a01 	vldr	s14, [r1, #4]
 8000f1c:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000f48 <check_apogee_approach_phase+0x30>
 8000f20:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000f24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        control_data->safety_counter += 1;
 8000f2c:	bf42      	ittt	mi
 8000f2e:	8c03      	ldrhmi	r3, [r0, #32]
 8000f30:	3301      	addmi	r3, #1
 8000f32:	8403      	strhmi	r3, [r0, #32]
    }

    /* Check if the apogee approach phase should be entered*/
    if (control_data->safety_counter >= SAFETY_COUNTER_THRESHOLD) {
 8000f34:	8c03      	ldrh	r3, [r0, #32]
 8000f36:	2b04      	cmp	r3, #4
        control_data->apogee_approach_phase = true;
 8000f38:	bf84      	itt	hi
 8000f3a:	2301      	movhi	r3, #1
 8000f3c:	f880 3022 	strbhi.w	r3, [r0, #34]	; 0x22
    }
}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	f3af 8000 	nop.w
 8000f48:	9999999a 	.word	0x9999999a
 8000f4c:	3fb99999 	.word	0x3fb99999

08000f50 <compute_control_input>:
void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8000f50:	b538      	push	{r3, r4, r5, lr}
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8000f52:	780b      	ldrb	r3, [r1, #0]
void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8000f54:	4604      	mov	r4, r0
 8000f56:	460d      	mov	r5, r1
 8000f58:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8000f5c:	2b04      	cmp	r3, #4
void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8000f5e:	ed2d 8b02 	vpush	{d8}
 8000f62:	ed9f 8a3d 	vldr	s16, [pc, #244]	; 8001058 <compute_control_input+0x108>
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8000f66:	d158      	bne.n	800101a <compute_control_input+0xca>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8000f68:	784b      	ldrb	r3, [r1, #1]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d854      	bhi.n	800101a <compute_control_input+0xca>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8000f70:	ed91 7a01 	vldr	s14, [r1, #4]
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8000f74:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8001048 <compute_control_input+0xf8>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8000f78:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8000f7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f84:	d549      	bpl.n	800101a <compute_control_input+0xca>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8000f86:	2a00      	cmp	r2, #0
 8000f88:	d147      	bne.n	800101a <compute_control_input+0xca>
        evaluate_polyfit(control_data);
 8000f8a:	f7ff ff45 	bl	8000e18 <evaluate_polyfit>
        compute_reference_error(control_data);
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f7ff ffb2 	bl	8000ef8 <compute_reference_error>
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8000f94:	ed94 7a00 	vldr	s14, [r4]
 8000f98:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
                - control_data->gains[1] * control_data->integrated_error
 8000f9c:	ed94 7a02 	vldr	s14, [r4, #8]
 8000fa0:	ed94 3b0c 	vldr	d3, [r4, #48]	; 0x30
 8000fa4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8000fa8:	ed94 4b0a 	vldr	d4, [r4, #40]	; 0x28
                - control_data->gains[1] * control_data->integrated_error
 8000fac:	ee23 7b47 	vnmul.f64	d7, d3, d7
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8000fb0:	ed94 3a01 	vldr	s6, [r4, #4]
 8000fb4:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8000fb8:	ed94 5b0e 	vldr	d5, [r4, #56]	; 0x38
                - control_data->gains[1] * control_data->integrated_error
 8000fbc:	eea4 7b43 	vfms.f64	d7, d4, d3
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8000fc0:	ed9f 4b23 	vldr	d4, [pc, #140]	; 8001050 <compute_control_input+0x100>
 8000fc4:	ee36 4b44 	vsub.f64	d4, d6, d4
 8000fc8:	eea5 7b44 	vfms.f64	d7, d5, d4
                + control_data->control_input);
 8000fcc:	ee37 7b06 	vadd.f64	d7, d7, d6
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8000fd0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        control_data->control_input = fmaxf(0, fminf(control_data->control_input, 1));
 8000fd4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000fd8:	fe87 7a67 	vminnm.f32	s14, s14, s15
 8000fdc:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 8000fe0:	ed84 7a00 	vstr	s14, [r4]
        compute_antiwindup_boundaries(control_data);
 8000fe4:	f7ff ff5c 	bl	8000ea0 <compute_antiwindup_boundaries>
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8000fe8:	edd4 7a02 	vldr	s15, [r4, #8]
 8000fec:	edd4 6a01 	vldr	s13, [r4, #4]
        check_apogee_approach_phase(control_data, flight_phase_detection);
 8000ff0:	4629      	mov	r1, r5
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8000ff2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800105c <compute_control_input+0x10c>
 8000ff6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8000ffa:	ed94 7a07 	vldr	s14, [r4, #28]
}
 8000ffe:	ecbd 8b02 	vpop	{d8}
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8001002:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 8001006:	ed94 7a06 	vldr	s14, [r4, #24]
 800100a:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 800100e:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8001012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        check_apogee_approach_phase(control_data, flight_phase_detection);
 8001016:	f7ff bf7f 	b.w	8000f18 <check_apogee_approach_phase>
    control_data->control_input = 0;
 800101a:	ed84 8a00 	vstr	s16, [r4]
    control_data->reference_error = 0;
 800101e:	ed84 8a01 	vstr	s16, [r4, #4]
    control_data->integrated_error = 0;
 8001022:	ed84 8a02 	vstr	s16, [r4, #8]
        if (control_data->apogee_approach_phase == true) {
 8001026:	b14a      	cbz	r2, 800103c <compute_control_input+0xec>
            evaluate_polyfit(control_data);
 8001028:	4620      	mov	r0, r4
 800102a:	f7ff fef5 	bl	8000e18 <evaluate_polyfit>
            compute_reference_error(control_data);
 800102e:	4620      	mov	r0, r4
}
 8001030:	ecbd 8b02 	vpop	{d8}
 8001034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            compute_reference_error(control_data);
 8001038:	f7ff bf5e 	b.w	8000ef8 <compute_reference_error>
}
 800103c:	ecbd 8b02 	vpop	{d8}
 8001040:	bd38      	pop	{r3, r4, r5, pc}
 8001042:	bf00      	nop
 8001044:	f3af 8000 	nop.w
 8001048:	9999999a 	.word	0x9999999a
 800104c:	3fe19999 	.word	0x3fe19999
 8001050:	5fbf87db 	.word	0x5fbf87db
 8001054:	3fdfb4e1 	.word	0x3fdfb4e1
 8001058:	00000000 	.word	0x00000000
 800105c:	3c23d70a 	.word	0x3c23d70a

08001060 <init_env>:
#include "Sim_Con/env.h"

void init_env(env_t *env) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
 8001068:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 800106c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001088 <init_env+0x28>
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f80d 	bl	8001090 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 8001076:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f82c 	bl	80010d8 <update_env>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	47c5e680 	.word	0x47c5e680
 800108c:	00000000 	.word	0x00000000

08001090 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	ed87 0a02 	vstr	s0, [r7, #8]
 800109c:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 80010a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010a8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80010d0 <calibrate_env+0x40>
 80010ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	edc3 7a01 	vstr	s15, [r3, #4]
	env->p_g = p_g; //
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	601a      	str	r2, [r3, #0]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	f3af 8000 	nop.w
 80010d0:	66666666 	.word	0x66666666
 80010d4:	40711266 	.word	0x40711266

080010d8 <update_env>:

void update_env(env_t *env, float T) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 80010e4:	edd7 7a00 	vldr	s15, [r7]
 80010e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ec:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001138 <update_env+0x60>
 80010f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	edc3 7a02 	vstr	s15, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	edd3 7a02 	vldr	s15, [r3, #8]
 8001104:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001108:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001140 <update_env+0x68>
 800110c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001110:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001114:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001118:	eeb0 0a67 	vmov.f32	s0, s15
 800111c:	f012 fed4 	bl	8013ec8 <powf>
 8001120:	eef0 7a40 	vmov.f32	s15, s0
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	f3af 8000 	nop.w
 8001138:	66666666 	.word	0x66666666
 800113c:	40711266 	.word	0x40711266
 8001140:	8c1557b7 	.word	0x8c1557b7
 8001144:	40791e2f 	.word	0x40791e2f

08001148 <mach_number>:

float mach_number(env_t *env, float V_x) {
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 8001154:	edd7 7a00 	vldr	s15, [r7]
 8001158:	eef0 6ae7 	vabs.f32	s13, s15
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001166:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	ee07 3a90 	vmov	s15, r3
}
 8001170:	eeb0 0a67 	vmov.f32	s0, s15
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001180:	b580      	push	{r7, lr}
 8001182:	ed2d 8b02 	vpush	{d8}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e034      	b.n	8001202 <pressure2altitudeAGL+0x82>
		if (p_active[i]) {
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	4413      	add	r3, r2
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d02b      	beq.n	80011fc <pressure2altitudeAGL+0x7c>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80011aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ae:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001218 <pressure2altitudeAGL+0x98>
 80011b2:	ee87 8b06 	vdiv.f64	d8, d7, d6
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	ed93 7a00 	vldr	s14, [r3]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011cc:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001220 <pressure2altitudeAGL+0xa0>
 80011d0:	eeb0 0a66 	vmov.f32	s0, s13
 80011d4:	f012 fe78 	bl	8013ec8 <powf>
 80011d8:	eeb0 7a40 	vmov.f32	s14, s0
 80011dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80011e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011f2:	4413      	add	r3, r2
 80011f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011f8:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3301      	adds	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	429a      	cmp	r2, r3
 8001208:	dbc6      	blt.n	8001198 <pressure2altitudeAGL+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	ecbd 8b02 	vpop	{d8}
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	76c8b439 	.word	0x76c8b439
 800121c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001220:	3e42c4dc 	.word	0x3e42c4dc
 8001224:	00000000 	.word	0x00000000

08001228 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8001228:	b580      	push	{r7, lr}
 800122a:	ed2d 8b02 	vpush	{d8}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	e034      	b.n	80012aa <altitudeAGL2pressure+0x82>
		if (h_active[i]) {
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	4413      	add	r3, r2
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d02b      	beq.n	80012a4 <altitudeAGL2pressure+0x7c>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	ed93 8a00 	vldr	s16, [r3]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	edd3 7a00 	vldr	s15, [r3]
 800125e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001262:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80012c0 <altitudeAGL2pressure+0x98>
 8001266:	ee27 5b06 	vmul.f64	d5, d7, d6
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001270:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001274:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001278:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800127c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001280:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001284:	eddf 0a10 	vldr	s1, [pc, #64]	; 80012c8 <altitudeAGL2pressure+0xa0>
 8001288:	eeb0 0a67 	vmov.f32	s0, s15
 800128c:	f012 fe1c 	bl	8013ec8 <powf>
 8001290:	eef0 7a40 	vmov.f32	s15, s0
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800129a:	4413      	add	r3, r2
 800129c:	ee68 7a27 	vmul.f32	s15, s16, s15
 80012a0:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3301      	adds	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	dbc6      	blt.n	8001240 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	ecbd 8b02 	vpop	{d8}
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	76c8b439 	.word	0x76c8b439
 80012c4:	3f7a9fbe 	.word	0x3f7a9fbe
 80012c8:	40a83d87 	.word	0x40a83d87
 80012cc:	00000000 	.word	0x00000000

080012d0 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	ed2d 8b02 	vpush	{d8}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80012e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012ea:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001350 <altitude_gradient+0x80>
 80012ee:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	edd3 7a00 	vldr	s15, [r3]
 80012f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012fc:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8001358 <altitude_gradient+0x88>
 8001300:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001304:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ed97 7a00 	vldr	s14, [r7]
 8001312:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001316:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001360 <altitude_gradient+0x90>
 800131a:	eeb0 0a66 	vmov.f32	s0, s13
 800131e:	f012 fdd3 	bl	8013ec8 <powf>
 8001322:	eef0 7a40 	vmov.f32	s15, s0
 8001326:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800132a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800132e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001332:	edc7 7a03 	vstr	s15, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	ee07 3a90 	vmov	s15, r3
}
 800133c:	eeb0 0a67 	vmov.f32	s0, s15
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	ecbd 8b02 	vpop	{d8}
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	f3af 8000 	nop.w
 8001350:	640f3ea7 	.word	0x640f3ea7
 8001354:	c071f0fd 	.word	0xc071f0fd
 8001358:	51eb851f 	.word	0x51eb851f
 800135c:	40239eb8 	.word	0x40239eb8
 8001360:	bf4f4ec9 	.word	0xbf4f4ec9
 8001364:	00000000 	.word	0x00000000

08001368 <detect_flight_phase>:

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection,
		state_est_data_t *state_est_data, env_t *env) {

	/* determine state transition events */
	switch (flight_phase_detection->flight_phase) {
 8001368:	7803      	ldrb	r3, [r0, #0]
 800136a:	eddf 7a43 	vldr	s15, [pc, #268]	; 8001478 <detect_flight_phase+0x110>
 800136e:	3b01      	subs	r3, #1
		state_est_data_t *state_est_data, env_t *env) {
 8001370:	b510      	push	{r4, lr}
 8001372:	4604      	mov	r4, r0
	switch (flight_phase_detection->flight_phase) {
 8001374:	2b04      	cmp	r3, #4
 8001376:	d81b      	bhi.n	80013b0 <detect_flight_phase+0x48>
 8001378:	e8df f003 	tbb	[pc, r3]
 800137c:	44311a03 	.word	0x44311a03
 8001380:	57          	.byte	0x57
 8001381:	00          	.byte	0x00
	case IDLE:
		if (((float) (state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 8001382:	ed91 7a06 	vldr	s14, [r1, #24]
 8001386:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800138a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800138e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001392:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139a:	dd09      	ble.n	80013b0 <detect_flight_phase+0x48>
			flight_phase_detection->num_samples_positive += 1;
 800139c:	7a23      	ldrb	r3, [r4, #8]
 800139e:	3301      	adds	r3, #1
 80013a0:	b25b      	sxtb	r3, r3
			if (flight_phase_detection->num_samples_positive >= 4) {
 80013a2:	2b03      	cmp	r3, #3
			flight_phase_detection->num_samples_positive += 1;
 80013a4:	7223      	strb	r3, [r4, #8]
			if (flight_phase_detection->num_samples_positive >= 4) {
 80013a6:	dd03      	ble.n	80013b0 <detect_flight_phase+0x48>
				flight_phase_detection->flight_phase = THRUSTING;
 80013a8:	2303      	movs	r3, #3

	case DESCENT:
		if (((float) (state_est_data->position_world[2])) / 1000 < 20) {
			flight_phase_detection->num_samples_positive += 1;
			if (flight_phase_detection->num_samples_positive >= 4) {
				flight_phase_detection->flight_phase = RECOVERY;
 80013aa:	7023      	strb	r3, [r4, #0]
				flight_phase_detection->num_samples_positive = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	7223      	strb	r3, [r4, #8]
	default:
		break;
	}

	flight_phase_detection->mach_number = mach_number(env,
			((float) state_est_data->velocity_rocket[0]) / 1000);
 80013b0:	ed91 0a03 	vldr	s0, [r1, #12]
	flight_phase_detection->mach_number = mach_number(env,
 80013b4:	4610      	mov	r0, r2
			((float) state_est_data->velocity_rocket[0]) / 1000);
 80013b6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	flight_phase_detection->mach_number = mach_number(env,
 80013ba:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80013be:	f7ff fec3 	bl	8001148 <mach_number>
 80013c2:	ed84 0a01 	vstr	s0, [r4, #4]

	/* determine the mach regime */
	if (flight_phase_detection->mach_number >= 1.3) {
 80013c6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80013ca:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8001468 <detect_flight_phase+0x100>
 80013ce:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80013d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d6:	db3d      	blt.n	8001454 <detect_flight_phase+0xec>
		flight_phase_detection->mach_regime = SUPERSONIC;
 80013d8:	2303      	movs	r3, #3
	} else if (flight_phase_detection->mach_number >= 0.8) {
		flight_phase_detection->mach_regime = TRANSONIC;
	} else {
		flight_phase_detection->mach_regime = SUBSONIC;
 80013da:	7063      	strb	r3, [r4, #1]
	}

}
 80013dc:	bd10      	pop	{r4, pc}
		if (((float) (state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 80013de:	ed91 7a06 	vldr	s14, [r1, #24]
 80013e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80013e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013ea:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80013ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f2:	d5dd      	bpl.n	80013b0 <detect_flight_phase+0x48>
			flight_phase_detection->num_samples_positive += 1;
 80013f4:	7a23      	ldrb	r3, [r4, #8]
 80013f6:	3301      	adds	r3, #1
 80013f8:	b25b      	sxtb	r3, r3
			if (flight_phase_detection->num_samples_positive >= 4) {
 80013fa:	2b03      	cmp	r3, #3
			flight_phase_detection->num_samples_positive += 1;
 80013fc:	7223      	strb	r3, [r4, #8]
			if (flight_phase_detection->num_samples_positive >= 4) {
 80013fe:	ddd7      	ble.n	80013b0 <detect_flight_phase+0x48>
				flight_phase_detection->flight_phase = COASTING;
 8001400:	2304      	movs	r3, #4
 8001402:	e7d2      	b.n	80013aa <detect_flight_phase+0x42>
		if (((float) (state_est_data->velocity_world[2])) / 1000 < 0) {
 8001404:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8001408:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800140c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001410:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	d5ca      	bpl.n	80013b0 <detect_flight_phase+0x48>
			flight_phase_detection->num_samples_positive += 1;
 800141a:	7a23      	ldrb	r3, [r4, #8]
 800141c:	3301      	adds	r3, #1
 800141e:	b25b      	sxtb	r3, r3
			if (flight_phase_detection->num_samples_positive >= 4) {
 8001420:	2b03      	cmp	r3, #3
			flight_phase_detection->num_samples_positive += 1;
 8001422:	7223      	strb	r3, [r4, #8]
			if (flight_phase_detection->num_samples_positive >= 4) {
 8001424:	ddc4      	ble.n	80013b0 <detect_flight_phase+0x48>
				flight_phase_detection->flight_phase = DESCENT;
 8001426:	2305      	movs	r3, #5
 8001428:	e7bf      	b.n	80013aa <detect_flight_phase+0x42>
		if (((float) (state_est_data->position_world[2])) / 1000 < 20) {
 800142a:	ed91 7a02 	vldr	s14, [r1, #8]
 800142e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001432:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001436:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800143a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800143e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001442:	d5b5      	bpl.n	80013b0 <detect_flight_phase+0x48>
			flight_phase_detection->num_samples_positive += 1;
 8001444:	7a23      	ldrb	r3, [r4, #8]
 8001446:	3301      	adds	r3, #1
 8001448:	b25b      	sxtb	r3, r3
			if (flight_phase_detection->num_samples_positive >= 4) {
 800144a:	2b03      	cmp	r3, #3
			flight_phase_detection->num_samples_positive += 1;
 800144c:	7223      	strb	r3, [r4, #8]
			if (flight_phase_detection->num_samples_positive >= 4) {
 800144e:	ddaf      	ble.n	80013b0 <detect_flight_phase+0x48>
				flight_phase_detection->flight_phase = RECOVERY;
 8001450:	2306      	movs	r3, #6
 8001452:	e7aa      	b.n	80013aa <detect_flight_phase+0x42>
	} else if (flight_phase_detection->mach_number >= 0.8) {
 8001454:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8001470 <detect_flight_phase+0x108>
 8001458:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		flight_phase_detection->mach_regime = TRANSONIC;
 8001460:	bfac      	ite	ge
 8001462:	2302      	movge	r3, #2
		flight_phase_detection->mach_regime = SUBSONIC;
 8001464:	2301      	movlt	r3, #1
 8001466:	e7b8      	b.n	80013da <detect_flight_phase+0x72>
 8001468:	cccccccd 	.word	0xcccccccd
 800146c:	3ff4cccc 	.word	0x3ff4cccc
 8001470:	9999999a 	.word	0x9999999a
 8001474:	3fe99999 	.word	0x3fe99999
 8001478:	447a0000 	.word	0x447a0000

0800147c <reset_flight_phase_detection>:

void reset_flight_phase_detection(
		flight_phase_detection_t *flight_phase_detection) {
	flight_phase_detection->flight_phase = IDLE;
 800147c:	2301      	movs	r3, #1
 800147e:	7003      	strb	r3, [r0, #0]
	flight_phase_detection->mach_regime = SUBSONIC;
 8001480:	7043      	strb	r3, [r0, #1]
	flight_phase_detection->mach_number = 0.0;
 8001482:	2300      	movs	r3, #0
 8001484:	6043      	str	r3, [r0, #4]
	flight_phase_detection->num_samples_positive = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	7203      	strb	r3, [r0, #8]
}
 800148a:	4770      	bx	lr

0800148c <reset_kf_state>:
#include "Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 800148c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8001490:	4c3d      	ldr	r4, [pc, #244]	; (8001588 <reset_kf_state+0xfc>)
void reset_kf_state(kf_state_t *kf_state){
 8001492:	b090      	sub	sp, #64	; 0x40
 8001494:	4605      	mov	r5, r0
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8001496:	ae07      	add	r6, sp, #28
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8001498:	af04      	add	r7, sp, #16
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 800149a:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 800149e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80014a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80014a6:	f854 3b04 	ldr.w	r3, [r4], #4
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 80014aa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 80014ae:	6033      	str	r3, [r6, #0]
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 80014b0:	ac07      	add	r4, sp, #28
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 80014b2:	ab01      	add	r3, sp, #4
 80014b4:	46a6      	mov	lr, r4
 80014b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 80014ba:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 80014be:	462a      	mov	r2, r5
 80014c0:	4626      	mov	r6, r4
 80014c2:	3208      	adds	r2, #8
 80014c4:	ce03      	ldmia	r6!, {r0, r1}
 80014c6:	4566      	cmp	r6, ip
 80014c8:	f842 0c08 	str.w	r0, [r2, #-8]
 80014cc:	f842 1c04 	str.w	r1, [r2, #-4]
 80014d0:	4634      	mov	r4, r6
 80014d2:	d1f5      	bne.n	80014c0 <reset_kf_state+0x34>
 80014d4:	6830      	ldr	r0, [r6, #0]
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 80014d6:	f105 0854 	add.w	r8, r5, #84	; 0x54
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 80014da:	4e2c      	ldr	r6, [pc, #176]	; (800158c <reset_kf_state+0x100>)
 80014dc:	4674      	mov	r4, lr
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 80014de:	6010      	str	r0, [r2, #0]
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 80014e0:	cb03      	ldmia	r3!, {r0, r1}
 80014e2:	64a8      	str	r0, [r5, #72]	; 0x48
 80014e4:	6818      	ldr	r0, [r3, #0]
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 80014e6:	463b      	mov	r3, r7
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 80014e8:	64e9      	str	r1, [r5, #76]	; 0x4c
 80014ea:	6528      	str	r0, [r5, #80]	; 0x50
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 80014ec:	cb03      	ldmia	r3!, {r0, r1}
 80014ee:	6568      	str	r0, [r5, #84]	; 0x54
 80014f0:	6818      	ldr	r0, [r3, #0]
	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 80014f2:	2300      	movs	r3, #0
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 80014f4:	f8c8 1004 	str.w	r1, [r8, #4]
 80014f8:	f8c8 0008 	str.w	r0, [r8, #8]
	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 80014fc:	9304      	str	r3, [sp, #16]
 80014fe:	9305      	str	r3, [sp, #20]
 8001500:	9306      	str	r3, [sp, #24]
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8001502:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001506:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001508:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 800150a:	cf03      	ldmia	r7!, {r0, r1}
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 800150c:	6833      	ldr	r3, [r6, #0]
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 800150e:	f505 7288 	add.w	r2, r5, #272	; 0x110
    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 8001512:	f8c5 0104 	str.w	r0, [r5, #260]	; 0x104
 8001516:	2000      	movs	r0, #0
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8001518:	6023      	str	r3, [r4, #0]
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 800151a:	4673      	mov	r3, lr
    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 800151c:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
 8001520:	f8c5 010c 	str.w	r0, [r5, #268]	; 0x10c
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 8001524:	461c      	mov	r4, r3
 8001526:	3208      	adds	r2, #8
 8001528:	cc03      	ldmia	r4!, {r0, r1}
 800152a:	4564      	cmp	r4, ip
 800152c:	f842 0c08 	str.w	r0, [r2, #-8]
 8001530:	f842 1c04 	str.w	r1, [r2, #-4]
 8001534:	4623      	mov	r3, r4
 8001536:	d1f5      	bne.n	8001524 <reset_kf_state+0x98>
 8001538:	6820      	ldr	r0, [r4, #0]

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 800153a:	2400      	movs	r4, #0
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 800153c:	6010      	str	r0, [r2, #0]
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 800153e:	4621      	mov	r1, r4
    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 8001540:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 8001544:	2224      	movs	r2, #36	; 0x24
 8001546:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
 800154a:	f012 f884 	bl	8013656 <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
    kf_state->num_z_active = 0;

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 800154e:	2103      	movs	r1, #3
 8001550:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8001554:	462a      	mov	r2, r5
 8001556:	4608      	mov	r0, r1
    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 8001558:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
 800155c:	f8c5 418c 	str.w	r4, [r5, #396]	; 0x18c
 8001560:	f8c5 4190 	str.w	r4, [r5, #400]	; 0x190
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 8001564:	f8a5 420c 	strh.w	r4, [r5, #524]	; 0x20c
 8001568:	f885 420e 	strb.w	r4, [r5, #526]	; 0x20e
    kf_state->num_z_active = 0;
 800156c:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 8001570:	f000 fb24 	bl	8001bbc <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8001574:	f105 0360 	add.w	r3, r5, #96	; 0x60
 8001578:	4642      	mov	r2, r8
 800157a:	2101      	movs	r1, #1
 800157c:	2003      	movs	r0, #3
}
 800157e:	b010      	add	sp, #64	; 0x40
 8001580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8001584:	f000 bb1a 	b.w	8001bbc <transpose>
 8001588:	080152f8 	.word	0x080152f8
 800158c:	08015328 	.word	0x08015328

08001590 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8001590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8001594:	2103      	movs	r1, #3
void kf_prediction(kf_state_t *kf_state){
 8001596:	b085      	sub	sp, #20
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8001598:	2501      	movs	r5, #1
 800159a:	f500 769a 	add.w	r6, r0, #308	; 0x134
void kf_prediction(kf_state_t *kf_state){
 800159e:	4604      	mov	r4, r0
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 80015a0:	f04f 0800 	mov.w	r8, #0
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 80015a4:	f500 7382 	add.w	r3, r0, #260	; 0x104
 80015a8:	4602      	mov	r2, r0
 80015aa:	4608      	mov	r0, r1

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 80015ac:	f504 7905 	add.w	r9, r4, #532	; 0x214
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 80015b0:	f504 77a0 	add.w	r7, r4, #320	; 0x140
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 80015b4:	e9cd 6500 	strd	r6, r5, [sp]
 80015b8:	f000 fd2a 	bl	8002010 <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 80015bc:	f504 7380 	add.w	r3, r4, #256	; 0x100
 80015c0:	f104 0248 	add.w	r2, r4, #72	; 0x48
 80015c4:	4629      	mov	r1, r5
 80015c6:	2003      	movs	r0, #3
 80015c8:	e9cd 6800 	strd	r6, r8, [sp]
 80015cc:	f000 fd20 	bl	8002010 <matvecprod>
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 80015d0:	2203      	movs	r2, #3
 80015d2:	f504 7388 	add.w	r3, r4, #272	; 0x110
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 80015d6:	f504 760e 	add.w	r6, r4, #568	; 0x238
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 80015da:	4611      	mov	r1, r2
 80015dc:	4610      	mov	r0, r2
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	4623      	mov	r3, r4
 80015e2:	e9cd 9501 	strd	r9, r5, [sp, #4]
 80015e6:	f000 fc79 	bl	8001edc <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 80015ea:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
 80015ee:	462a      	mov	r2, r5
 80015f0:	4629      	mov	r1, r5
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2003      	movs	r0, #3
 80015f6:	f104 0354 	add.w	r3, r4, #84	; 0x54
 80015fa:	e9cd 6501 	strd	r6, r5, [sp, #4]
 80015fe:	f000 fc6d 	bl	8001edc <matmul>
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8001602:	2203      	movs	r2, #3
 8001604:	f104 0324 	add.w	r3, r4, #36	; 0x24
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 8001608:	3460      	adds	r4, #96	; 0x60
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 800160a:	4611      	mov	r1, r2
 800160c:	4610      	mov	r0, r2
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	464b      	mov	r3, r9
 8001612:	e9cd 7501 	strd	r7, r5, [sp, #4]
 8001616:	f000 fc61 	bl	8001edc <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 800161a:	2203      	movs	r2, #3
 800161c:	4633      	mov	r3, r6
 800161e:	4629      	mov	r1, r5
 8001620:	4610      	mov	r0, r2
 8001622:	9400      	str	r4, [sp, #0]
 8001624:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8001628:	f000 fc58 	bl	8001edc <matmul>
}
 800162c:	b005      	add	sp, #20
 800162e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001632 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 8001632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 8001636:	f100 056c 	add.w	r5, r0, #108	; 0x6c
void select_kf_observation_matrices(kf_state_t *kf_state){
 800163a:	4604      	mov	r4, r0
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 800163c:	2224      	movs	r2, #36	; 0x24
 800163e:	2100      	movs	r1, #0
 8001640:	4628      	mov	r0, r5
        if (kf_state->z_active[i]) {
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 8001642:	2600      	movs	r6, #0
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 8001644:	f012 f807 	bl	8013656 <memset>
            kf_state->H[i][0] = 1;
 8001648:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 800164c:	f504 7303 	add.w	r3, r4, #524	; 0x20c
 8001650:	4621      	mov	r1, r4
 8001652:	f204 200f 	addw	r0, r4, #527	; 0x20f
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 8001656:	4622      	mov	r2, r4
        if (kf_state->z_active[i]) {
 8001658:	f813 cb01 	ldrb.w	ip, [r3], #1
 800165c:	f1bc 0f00 	cmp.w	ip, #0
 8001660:	d00f      	beq.n	8001682 <select_kf_observation_matrices+0x50>
            kf_state->H[i][0] = 1;
 8001662:	66cf      	str	r7, [r1, #108]	; 0x6c
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8001664:	4283      	cmp	r3, r0
 8001666:	f101 010c 	add.w	r1, r1, #12
 800166a:	f102 0210 	add.w	r2, r2, #16
 800166e:	d1f3      	bne.n	8001658 <select_kf_observation_matrices+0x26>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 8001670:	2103      	movs	r1, #3
 8001672:	f104 0390 	add.w	r3, r4, #144	; 0x90
 8001676:	462a      	mov	r2, r5
 8001678:	4608      	mov	r0, r1
}
 800167a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 800167e:	f000 ba9d 	b.w	8001bbc <transpose>
            kf_state->R[i][i] = 0;
 8001682:	f8c2 60b8 	str.w	r6, [r2, #184]	; 0xb8
 8001686:	e7ed      	b.n	8001664 <select_kf_observation_matrices+0x32>

08001688 <kf_update>:

void kf_update(kf_state_t *kf_state) {
 8001688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 800168c:	2103      	movs	r1, #3
void kf_update(kf_state_t *kf_state) {
 800168e:	b087      	sub	sp, #28
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8001690:	2501      	movs	r5, #1
 8001692:	f500 76ca 	add.w	r6, r0, #404	; 0x194
 8001696:	f100 096c 	add.w	r9, r0, #108	; 0x6c
 800169a:	f500 7b9a 	add.w	fp, r0, #308	; 0x134
void kf_update(kf_state_t *kf_state) {
 800169e:	4604      	mov	r4, r0
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 80016a0:	4608      	mov	r0, r1
 80016a2:	465b      	mov	r3, fp
 80016a4:	464a      	mov	r2, r9
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 80016a6:	f504 77a0 	add.w	r7, r4, #320	; 0x140
 80016aa:	f504 7a11 	add.w	sl, r4, #580	; 0x244
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 80016ae:	f504 78d0 	add.w	r8, r4, #416	; 0x1a0
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 80016b2:	e9cd 6500 	strd	r6, r5, [sp]
 80016b6:	f000 fcab 	bl	8002010 <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 80016ba:	4633      	mov	r3, r6
 80016bc:	4632      	mov	r2, r6
 80016be:	f504 71c4 	add.w	r1, r4, #392	; 0x188
 80016c2:	2003      	movs	r0, #3
 80016c4:	f000 faf9 	bl	8001cba <vecsub>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 80016c8:	2203      	movs	r2, #3
 80016ca:	464b      	mov	r3, r9
 80016cc:	9700      	str	r7, [sp, #0]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4610      	mov	r0, r2
 80016d2:	e9cd a501 	strd	sl, r5, [sp, #4]
 80016d6:	f000 fc01 	bl	8001edc <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 80016da:	f104 0390 	add.w	r3, r4, #144	; 0x90
 80016de:	2203      	movs	r2, #3
 80016e0:	9304      	str	r3, [sp, #16]
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	4611      	mov	r1, r2
 80016e6:	4653      	mov	r3, sl
 80016e8:	4610      	mov	r0, r2
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 80016ea:	f504 7ae2 	add.w	sl, r4, #452	; 0x1c4
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 80016ee:	e9cd 8501 	strd	r8, r5, [sp, #4]
 80016f2:	f000 fbf3 	bl	8001edc <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 80016f6:	2103      	movs	r1, #3
 80016f8:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 80016fc:	f8cd 8000 	str.w	r8, [sp]
 8001700:	4642      	mov	r2, r8
 8001702:	4608      	mov	r0, r1
 8001704:	f000 fb04 	bl	8001d10 <matadd>
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8001708:	2224      	movs	r2, #36	; 0x24
 800170a:	2100      	movs	r1, #0
 800170c:	4650      	mov	r0, sl
 800170e:	f011 ffa2 	bl	8013656 <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8001712:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80017c4 <kf_update+0x13c>
 8001716:	4652      	mov	r2, sl
 8001718:	4641      	mov	r1, r8
 800171a:	2003      	movs	r0, #3
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 800171c:	f504 78f4 	add.w	r8, r4, #488	; 0x1e8
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8001720:	f000 fe28 	bl	8002374 <cholesky_inverse>
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 8001724:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8001728:	2203      	movs	r2, #3
 800172a:	9305      	str	r3, [sp, #20]
 800172c:	4611      	mov	r1, r2
 800172e:	4610      	mov	r0, r2
 8001730:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8001734:	9b04      	ldr	r3, [sp, #16]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	463b      	mov	r3, r7
 800173a:	f000 fbcf 	bl	8001edc <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 800173e:	2203      	movs	r2, #3
 8001740:	f8cd a000 	str.w	sl, [sp]

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 8001744:	f504 7a82 	add.w	sl, r4, #260	; 0x104
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 8001748:	9b05      	ldr	r3, [sp, #20]
 800174a:	4611      	mov	r1, r2
 800174c:	4610      	mov	r0, r2
 800174e:	e9cd 8501 	strd	r8, r5, [sp, #4]
 8001752:	f000 fbc3 	bl	8001edc <matmul>
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 8001756:	2103      	movs	r1, #3
 8001758:	4633      	mov	r3, r6
 800175a:	4642      	mov	r2, r8
 800175c:	4608      	mov	r0, r1


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 800175e:	f504 7623 	add.w	r6, r4, #652	; 0x28c
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 8001762:	e9cd a500 	strd	sl, r5, [sp]
 8001766:	f000 fc53 	bl	8002010 <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 800176a:	4653      	mov	r3, sl
 800176c:	4652      	mov	r2, sl
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 800176e:	f504 7a2c 	add.w	sl, r4, #688	; 0x2b0
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 8001772:	4659      	mov	r1, fp
 8001774:	2003      	movs	r0, #3
 8001776:	f000 fa75 	bl	8001c64 <vecadd>
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 800177a:	4651      	mov	r1, sl
 800177c:	2003      	movs	r0, #3
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 800177e:	f504 7b35 	add.w	fp, r4, #724	; 0x2d4
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8001782:	f000 f9cf 	bl	8001b24 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8001786:	2203      	movs	r2, #3
 8001788:	4643      	mov	r3, r8
 800178a:	f8cd 9000 	str.w	r9, [sp]
 800178e:	4611      	mov	r1, r2
 8001790:	4610      	mov	r0, r2
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8001792:	f504 7488 	add.w	r4, r4, #272	; 0x110
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8001796:	e9cd b501 	strd	fp, r5, [sp, #4]
 800179a:	f000 fb9f 	bl	8001edc <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 800179e:	2103      	movs	r1, #3
 80017a0:	465b      	mov	r3, fp
 80017a2:	4652      	mov	r2, sl
 80017a4:	4608      	mov	r0, r1
 80017a6:	9600      	str	r6, [sp, #0]
 80017a8:	f000 fb25 	bl	8001df6 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 80017ac:	2203      	movs	r2, #3
 80017ae:	4633      	mov	r3, r6
 80017b0:	9502      	str	r5, [sp, #8]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4610      	mov	r0, r2
 80017b6:	e9cd 7400 	strd	r7, r4, [sp]
 80017ba:	f000 fb8f 	bl	8001edc <matmul>
}
 80017be:	b007      	add	sp, #28
 80017c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017c4:	38d1b717 	.word	0x38d1b717

080017c8 <update_state_est_data>:
#include "Sim_Con\state_est.h"


void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 80017c8:	ed91 7a41 	vldr	s14, [r1, #260]	; 0x104
 80017cc:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001808 <update_state_est_data+0x40>
 80017d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80017d4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80017d8:	ed80 7a02 	vstr	s14, [r0, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 80017dc:	ed91 7a42 	vldr	s14, [r1, #264]	; 0x108
 80017e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80017e4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80017e8:	edc0 7a03 	vstr	s15, [r0, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 80017ec:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 80017f0:	edd1 7a40 	vldr	s15, [r1, #256]	; 0x100
 80017f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017fc:	edc0 7a06 	vstr	s15, [r0, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 8001800:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	447a0000 	.word	0x447a0000

0800180c <select_noise_models>:
        update_env(env, temp_meas_mean);
    }
} 

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 800180c:	b570      	push	{r4, r5, r6, lr}
 800180e:	461e      	mov	r6, r3
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 8001810:	780b      	ldrb	r3, [r1, #0]
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8001812:	4604      	mov	r4, r0
 8001814:	4615      	mov	r5, r2
    switch (flight_phase_detection->flight_phase) {
 8001816:	3b01      	subs	r3, #1
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8001818:	ed2d 8b02 	vpush	{d8}
 800181c:	b086      	sub	sp, #24
    switch (flight_phase_detection->flight_phase) {
 800181e:	2b05      	cmp	r3, #5
 8001820:	d808      	bhi.n	8001834 <select_noise_models+0x28>
 8001822:	e8df f003 	tbb	[pc, r3]
 8001826:	4141      	.short	0x4141
 8001828:	413c3703 	.word	0x413c3703
            accelerometer_x_stdev = 0.0185409;
            barometer_stdev = 1.869;
        break;
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
            barometer_stdev = 13.000;
 800182c:	eeb2 8a0a 	vmov.f32	s16, #42	; 0x41500000  13.0
            accelerometer_x_stdev = 1.250775;
 8001830:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80018b4 <select_noise_models+0xa8>
            barometer_stdev = 3.896;
        break;
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 8001834:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 8001838:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    bool h_active[1] = {true};
 800183c:	2101      	movs	r1, #1
    altitudeAGL2pressure(env, 1, h, h_active, p);
 800183e:	aa04      	add	r2, sp, #16
    float h[1] = {kf_state->x_est[0]};
 8001840:	9305      	str	r3, [sp, #20]
    bool h_active[1] = {true};
 8001842:	ab06      	add	r3, sp, #24
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 8001844:	ee27 7b07 	vmul.f64	d7, d7, d7
    altitudeAGL2pressure(env, 1, h, h_active, p);
 8001848:	4628      	mov	r0, r5
    bool h_active[1] = {true};
 800184a:	f803 1d0c 	strb.w	r1, [r3, #-12]!
    altitudeAGL2pressure(env, 1, h, h_active, p);
 800184e:	9200      	str	r2, [sp, #0]
 8001850:	aa05      	add	r2, sp, #20
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 8001852:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001856:	ed84 7a2d 	vstr	s14, [r4, #180]	; 0xb4
    altitudeAGL2pressure(env, 1, h, h_active, p);
 800185a:	f7ff fce5 	bl	8001228 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 800185e:	ed9d 0a04 	vldr	s0, [sp, #16]
 8001862:	4628      	mov	r0, r5
 8001864:	f7ff fd34 	bl	80012d0 <altitude_gradient>
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 8001868:	ee28 0a00 	vmul.f32	s0, s16, s0
 800186c:	eeb0 0ac0 	vabs.f32	s0, s0

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 8001870:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8001874:	ee20 0b00 	vmul.f64	d0, d0, d0
 8001878:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800187c:	ed84 0a2e 	vstr	s0, [r4, #184]	; 0xb8
 8001880:	ed84 0a32 	vstr	s0, [r4, #200]	; 0xc8
 8001884:	ed84 0a36 	vstr	s0, [r4, #216]	; 0xd8
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8001888:	ed86 8a25 	vstr	s16, [r6, #148]	; 0x94
}
 800188c:	b006      	add	sp, #24
 800188e:	ecbd 8b02 	vpop	{d8}
 8001892:	bd70      	pop	{r4, r5, r6, pc}
            barometer_stdev = 7.380;
 8001894:	ed9f 8a08 	vldr	s16, [pc, #32]	; 80018b8 <select_noise_models+0xac>
            accelerometer_x_stdev = 0.61803;
 8001898:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80018bc <select_noise_models+0xb0>
        break;
 800189c:	e7ca      	b.n	8001834 <select_noise_models+0x28>
            barometer_stdev = 3.896;
 800189e:	ed9f 8a08 	vldr	s16, [pc, #32]	; 80018c0 <select_noise_models+0xb4>
            accelerometer_x_stdev = 1.955133;
 80018a2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80018c4 <select_noise_models+0xb8>
        break;
 80018a6:	e7c5      	b.n	8001834 <select_noise_models+0x28>
            barometer_stdev = 1.869;
 80018a8:	ed9f 8a07 	vldr	s16, [pc, #28]	; 80018c8 <select_noise_models+0xbc>
            accelerometer_x_stdev = 0.0185409;
 80018ac:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80018cc <select_noise_models+0xc0>
 80018b0:	e7c0      	b.n	8001834 <select_noise_models+0x28>
 80018b2:	bf00      	nop
 80018b4:	3fa01965 	.word	0x3fa01965
 80018b8:	40ec28f6 	.word	0x40ec28f6
 80018bc:	3f1e3737 	.word	0x3f1e3737
 80018c0:	40795810 	.word	0x40795810
 80018c4:	3ffa41cc 	.word	0x3ffa41cc
 80018c8:	3fef3b64 	.word	0x3fef3b64
 80018cc:	3c97e316 	.word	0x3c97e316

080018d0 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 80018d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* calculate mean of the sample */
    int num_active = 0;
    float mean = 0;
    for (int i = 0; i < n; i++){
 80018d2:	2400      	movs	r4, #0
void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 80018d4:	4606      	mov	r6, r0
 80018d6:	460f      	mov	r7, r1
 80018d8:	4615      	mov	r5, r2
    int num_active = 0;
 80018da:	4623      	mov	r3, r4
void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 80018dc:	ed2d 8b02 	vpush	{d8}
    float mean = 0;
 80018e0:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 8001994 <sensor_elimination_by_stdev+0xc4>
    for (int i = 0; i < n; i++){
 80018e4:	42b4      	cmp	r4, r6
 80018e6:	db1f      	blt.n	8001928 <sensor_elimination_by_stdev+0x58>
        if (measurement_active[i]) {
            num_active += 1;
            mean += measurements[i];
        }
    }
    if (num_active > 0){
 80018e8:	b12b      	cbz	r3, 80018f6 <sensor_elimination_by_stdev+0x26>
        mean /= num_active;
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f2:	ee88 8a27 	vdiv.f32	s16, s16, s15
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
    for (int i = 0; i < n; ++i) {
 80018f6:	2400      	movs	r4, #0
    float stdev = 0;
 80018f8:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001994 <sensor_elimination_by_stdev+0xc4>
    for (int i = 0; i < n; ++i) {
 80018fc:	42b4      	cmp	r4, r6
 80018fe:	db1e      	blt.n	800193e <sensor_elimination_by_stdev+0x6e>
        if (measurement_active[i]) {
            stdev += pow(measurements[i] - mean, 2);
        }
    }
    if (num_active > 0){
 8001900:	b15b      	cbz	r3, 800191a <sensor_elimination_by_stdev+0x4a>
        stdev = sqrt(stdev / num_active);
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190a:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800190e:	eeb7 0ac7 	vcvt.f64.f32	d0, s14
 8001912:	f012 fd49 	bl	80143a8 <sqrt>
 8001916:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 800191a:	2300      	movs	r3, #0
        if (measurement_active[i]) {
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
                measurement_active[i] = false;
 800191c:	461a      	mov	r2, r3
    for (int i = 0; i < n; ++i) {
 800191e:	42b3      	cmp	r3, r6
 8001920:	db1f      	blt.n	8001962 <sensor_elimination_by_stdev+0x92>
            }
        }
    }
}
 8001922:	ecbd 8b02 	vpop	{d8}
 8001926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (measurement_active[i]) {
 8001928:	5d2a      	ldrb	r2, [r5, r4]
 800192a:	b132      	cbz	r2, 800193a <sensor_elimination_by_stdev+0x6a>
            mean += measurements[i];
 800192c:	eb07 0284 	add.w	r2, r7, r4, lsl #2
            num_active += 1;
 8001930:	3301      	adds	r3, #1
            mean += measurements[i];
 8001932:	edd2 7a00 	vldr	s15, [r2]
 8001936:	ee38 8a27 	vadd.f32	s16, s16, s15
    for (int i = 0; i < n; i++){
 800193a:	3401      	adds	r4, #1
 800193c:	e7d2      	b.n	80018e4 <sensor_elimination_by_stdev+0x14>
        if (measurement_active[i]) {
 800193e:	5d2a      	ldrb	r2, [r5, r4]
 8001940:	b16a      	cbz	r2, 800195e <sensor_elimination_by_stdev+0x8e>
            stdev += pow(measurements[i] - mean, 2);
 8001942:	eb07 0284 	add.w	r2, r7, r4, lsl #2
 8001946:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800194a:	ed92 7a00 	vldr	s14, [r2]
 800194e:	ee37 7a48 	vsub.f32	s14, s14, s16
 8001952:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001956:	eea7 0b07 	vfma.f64	d0, d7, d7
 800195a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    for (int i = 0; i < n; ++i) {
 800195e:	3401      	adds	r4, #1
 8001960:	e7cc      	b.n	80018fc <sensor_elimination_by_stdev+0x2c>
        if (measurement_active[i]) {
 8001962:	5ce9      	ldrb	r1, [r5, r3]
 8001964:	b199      	cbz	r1, 800198e <sensor_elimination_by_stdev+0xbe>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8001966:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800196a:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800196e:	ed91 7a00 	vldr	s14, [r1]
 8001972:	ee36 6b06 	vadd.f64	d6, d6, d6
 8001976:	ee37 7a48 	vsub.f32	s14, s14, s16
 800197a:	eeb0 7ac7 	vabs.f32	s14, s14
 800197e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001982:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                measurement_active[i] = false;
 800198a:	bfc8      	it	gt
 800198c:	54ea      	strbgt	r2, [r5, r3]
    for (int i = 0; i < n; ++i) {
 800198e:	3301      	adds	r3, #1
 8001990:	e7c5      	b.n	800191e <sensor_elimination_by_stdev+0x4e>
 8001992:	bf00      	nop
 8001994:	00000000 	.word	0x00000000

08001998 <process_measurements>:
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8001998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800199c:	460d      	mov	r5, r1
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 800199e:	2400      	movs	r4, #0
 80019a0:	f501 71c4 	add.w	r1, r1, #392	; 0x188
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 80019a4:	4694      	mov	ip, r2
 80019a6:	f04f 0b0c 	mov.w	fp, #12
            kf_state->z[i] = 0;
 80019aa:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8001b20 <process_measurements+0x188>
 80019ae:	460f      	mov	r7, r1
            kf_state->z_active[i] = false;
 80019b0:	46a6      	mov	lr, r4
            kf_state->z_active[i] = true;
 80019b2:	f04f 0901 	mov.w	r9, #1
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 80019b6:	ed2d 8b02 	vpush	{d8}
 80019ba:	b08d      	sub	sp, #52	; 0x34
 80019bc:	f10d 0810 	add.w	r8, sp, #16
 80019c0:	ae05      	add	r6, sp, #20
 80019c2:	9303      	str	r3, [sp, #12]
 80019c4:	9b03      	ldr	r3, [sp, #12]
 80019c6:	fb0b 3a04 	mla	sl, fp, r4, r3
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 80019ca:	6893      	ldr	r3, [r2, #8]
 80019cc:	f8da 0008 	ldr.w	r0, [sl, #8]
 80019d0:	4283      	cmp	r3, r0
 80019d2:	eb05 0004 	add.w	r0, r5, r4
 80019d6:	f240 8093 	bls.w	8001b00 <process_measurements+0x168>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 80019da:	ed92 7a00 	vldr	s14, [r2]
            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 80019de:	ab06      	add	r3, sp, #24
            temp_meas_active[i] = true;
 80019e0:	f808 9004 	strb.w	r9, [r8, r4]
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 80019e4:	ed81 7a00 	vstr	s14, [r1]
            kf_state->z_active[i] = true;
 80019e8:	f880 920c 	strb.w	r9, [r0, #524]	; 0x20c
            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 80019ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80019f0:	ed92 7a01 	vldr	s14, [r2, #4]
 80019f4:	ed80 7a00 	vstr	s14, [r0]
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 80019f8:	eb0a 1a04 	add.w	sl, sl, r4, lsl #4
 80019fc:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
 8001a00:	320c      	adds	r2, #12
 8001a02:	f10c 0c1c 	add.w	ip, ip, #28
 8001a06:	f8da 003c 	ldr.w	r0, [sl, #60]	; 0x3c
 8001a0a:	3104      	adds	r1, #4
 8001a0c:	4283      	cmp	r3, r0
 8001a0e:	ea4f 0084 	mov.w	r0, r4, lsl #2
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8001a12:	ab09      	add	r3, sp, #36	; 0x24
 8001a14:	bf88      	it	hi
 8001a16:	f8dc a014 	ldrhi.w	sl, [ip, #20]
 8001a1a:	4418      	add	r0, r3
            acc_x_meas_active[i] = true;
 8001a1c:	bf8c      	ite	hi
 8001a1e:	f806 9004 	strbhi.w	r9, [r6, r4]
            acc_x_meas_active[i] = false;
 8001a22:	f806 e004 	strbls.w	lr, [r6, r4]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8001a26:	f104 0401 	add.w	r4, r4, #1
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8001a2a:	bf8c      	ite	hi
 8001a2c:	f8c0 a000 	strhi.w	sl, [r0]
            acc_x_meas[i] = 0;
 8001a30:	edc0 7a00 	vstrls	s15, [r0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8001a34:	2c03      	cmp	r4, #3
 8001a36:	d1c5      	bne.n	80019c4 <process_measurements+0x2c>
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 8001a38:	f505 7903 	add.w	r9, r5, #524	; 0x20c
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	4639      	mov	r1, r7
    float temp_meas_mean = 0;
 8001a40:	ed9f 8a37 	vldr	s16, [pc, #220]	; 8001b20 <process_measurements+0x188>
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 8001a44:	464a      	mov	r2, r9
 8001a46:	f7ff ff43 	bl	80018d0 <sensor_elimination_by_stdev>
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 8001a4a:	4642      	mov	r2, r8
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	a906      	add	r1, sp, #24
 8001a50:	f7ff ff3e 	bl	80018d0 <sensor_elimination_by_stdev>
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 8001a54:	4620      	mov	r0, r4
 8001a56:	4632      	mov	r2, r6
 8001a58:	a909      	add	r1, sp, #36	; 0x24
 8001a5a:	f7ff ff39 	bl	80018d0 <sensor_elimination_by_stdev>
    kf_state->num_z_active = 0;
 8001a5e:	2100      	movs	r1, #0
    float u = 0;
 8001a60:	eef0 8a48 	vmov.f32	s17, s16
 8001a64:	4648      	mov	r0, r9
 8001a66:	aa06      	add	r2, sp, #24
    int num_temp_meas_active = 0;
 8001a68:	460c      	mov	r4, r1
    int num_acc_x_meas_active = 0;
 8001a6a:	4688      	mov	r8, r1
    kf_state->num_z_active = 0;
 8001a6c:	f8c5 1210 	str.w	r1, [r5, #528]	; 0x210
        if (kf_state->z_active[i]){
 8001a70:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001a74:	b123      	cbz	r3, 8001a80 <process_measurements+0xe8>
            kf_state->num_z_active += 1;
 8001a76:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
        if (acc_x_meas_active[i]) {
 8001a80:	5c73      	ldrb	r3, [r6, r1]
 8001a82:	b143      	cbz	r3, 8001a96 <process_measurements+0xfe>
            u += acc_x_meas[i];
 8001a84:	ab09      	add	r3, sp, #36	; 0x24
            num_acc_x_meas_active += 1;
 8001a86:	f108 0801 	add.w	r8, r8, #1
            u += acc_x_meas[i];
 8001a8a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	ee78 8aa7 	vadd.f32	s17, s17, s15
        if (temp_meas[i]) {
 8001a96:	ecf2 7a01 	vldmia	r2!, {s15}
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8001a9a:	3101      	adds	r1, #1
        if (temp_meas[i]) {
 8001a9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            temp_meas_mean += temp_meas[i];
 8001aa4:	bf1c      	itt	ne
 8001aa6:	ee38 8a27 	vaddne.f32	s16, s16, s15
            num_temp_meas_active += 1;
 8001aaa:	3401      	addne	r4, #1
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8001aac:	2903      	cmp	r1, #3
 8001aae:	d1df      	bne.n	8001a70 <process_measurements+0xd8>
    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 8001ab0:	9700      	str	r7, [sp, #0]
 8001ab2:	464b      	mov	r3, r9
 8001ab4:	463a      	mov	r2, r7
 8001ab6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001ab8:	f7ff fb62 	bl	8001180 <pressure2altitudeAGL>
    if (num_acc_x_meas_active > 0){
 8001abc:	f1b8 0f00 	cmp.w	r8, #0
 8001ac0:	d00f      	beq.n	8001ae2 <process_measurements+0x14a>
        u /= num_acc_x_meas_active;
 8001ac2:	ee07 8a90 	vmov	s15, r8
 8001ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        kf_state->u[0] = u - GRAVITATION;
 8001aca:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001b18 <process_measurements+0x180>
        u /= num_acc_x_meas_active;
 8001ace:	ee88 7aa7 	vdiv.f32	s14, s17, s15
        kf_state->u[0] = u - GRAVITATION;
 8001ad2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001ad6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ada:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001ade:	ed85 7a40 	vstr	s14, [r5, #256]	; 0x100
    if (num_temp_meas_active > 0){
 8001ae2:	b144      	cbz	r4, 8001af6 <process_measurements+0x15e>
        temp_meas_mean /= num_temp_meas_active;
 8001ae4:	ee07 4a90 	vmov	s15, r4
        update_env(env, temp_meas_mean);
 8001ae8:	9818      	ldr	r0, [sp, #96]	; 0x60
        temp_meas_mean /= num_temp_meas_active;
 8001aea:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        update_env(env, temp_meas_mean);
 8001aee:	ee88 0a00 	vdiv.f32	s0, s16, s0
 8001af2:	f7ff faf1 	bl	80010d8 <update_env>
} 
 8001af6:	b00d      	add	sp, #52	; 0x34
 8001af8:	ecbd 8b02 	vpop	{d8}
 8001afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            temp_meas[i] = 0;
 8001b00:	ab06      	add	r3, sp, #24
            kf_state->z[i] = 0;
 8001b02:	edc1 7a00 	vstr	s15, [r1]
            kf_state->z_active[i] = false;
 8001b06:	f880 e20c 	strb.w	lr, [r0, #524]	; 0x20c
            temp_meas[i] = 0;
 8001b0a:	eb03 0084 	add.w	r0, r3, r4, lsl #2
            temp_meas_active[i] = false;
 8001b0e:	f804 e008 	strb.w	lr, [r4, r8]
            temp_meas[i] = 0;
 8001b12:	edc0 7a00 	vstr	s15, [r0]
 8001b16:	e76f      	b.n	80019f8 <process_measurements+0x60>
 8001b18:	51eb851f 	.word	0x51eb851f
 8001b1c:	40239eb8 	.word	0x40239eb8
 8001b20:	00000000 	.word	0x00000000

08001b24 <eye>:
#include "Util/math_utils.h"


void eye(int32_t dim, float A[dim][dim]) {
 8001b24:	b490      	push	{r4, r7}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	1e43      	subs	r3, r0, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	4603      	mov	r3, r0
 8001b36:	4619      	mov	r1, r3
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	f04f 0400 	mov.w	r4, #0
 8001b44:	0154      	lsls	r4, r2, #5
 8001b46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b4a:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	e02b      	b.n	8001baa <eye+0x86>
        for(int j = 0; j < dim; j++){
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e021      	b.n	8001b9c <eye+0x78>
            if (i == j){
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d10d      	bne.n	8001b7c <eye+0x58>
				A[i][j] = 1;
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	fb03 f302 	mul.w	r3, r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	441a      	add	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e00c      	b.n	8001b96 <eye+0x72>
			} else {
				A[i][j] = 0;
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	fb03 f302 	mul.w	r3, r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	441a      	add	r2, r3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	dbd9      	blt.n	8001b58 <eye+0x34>
	for(int i = 0; i < dim; i++){
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	dbcf      	blt.n	8001b52 <eye+0x2e>
			}
        }
    }
}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc90      	pop	{r4, r7}
 8001bba:	4770      	bx	lr

08001bbc <transpose>:

void transpose(int32_t m, int32_t n, float A[m][n], float A_T[n][m]) {
 8001bbc:	b4b0      	push	{r4, r5, r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	68b8      	ldr	r0, [r7, #8]
 8001bcc:	1e43      	subs	r3, r0, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	f04f 0400 	mov.w	r4, #0
 8001be0:	0154      	lsls	r4, r2, #5
 8001be2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001be6:	014b      	lsls	r3, r1, #5
 8001be8:	68fd      	ldr	r5, [r7, #12]
 8001bea:	1e6b      	subs	r3, r5, #1
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	462b      	mov	r3, r5
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	f04f 0400 	mov.w	r4, #0
 8001bfe:	0154      	lsls	r4, r2, #5
 8001c00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c04:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	e022      	b.n	8001c52 <transpose+0x96>
		for(int j = 0; j < n; j++){
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	e018      	b.n	8001c44 <transpose+0x88>
			A_T[j][i] = A[i][j];
 8001c12:	4602      	mov	r2, r0
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fb03 f302 	mul.w	r3, r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	441a      	add	r2, r3
 8001c20:	4629      	mov	r1, r5
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fb03 f301 	mul.w	r3, r3, r1
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	6839      	ldr	r1, [r7, #0]
 8001c2c:	4419      	add	r1, r3
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3301      	adds	r3, #1
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	dbe2      	blt.n	8001c12 <transpose+0x56>
	for(int i = 0; i < m; i++){
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dbd8      	blt.n	8001c0c <transpose+0x50>
		}
	}
}
 8001c5a:	bf00      	nop
 8001c5c:	3724      	adds	r7, #36	; 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bcb0      	pop	{r4, r5, r7}
 8001c62:	4770      	bx	lr

08001c64 <vecadd>:

void vecadd(int32_t n, float a[n], float b[n], float c[n]) {
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e016      	b.n	8001ca6 <vecadd+0x42>
		c[i] = a[i] + b[i];
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	4413      	add	r3, r2
 8001c80:	ed93 7a00 	vldr	s14, [r3]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9c:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	dbe4      	blt.n	8001c78 <vecadd+0x14>
	}
}
 8001cae:	bf00      	nop
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <vecsub>:

void vecsub(int32_t n, float a[n], float b[n], float c[n]) {
 8001cba:	b480      	push	{r7}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	e016      	b.n	8001cfc <vecsub+0x42>
		c[i] = a[i] - b[i];
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	ed93 7a00 	vldr	s14, [r3]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	4413      	add	r3, r2
 8001cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dbe4      	blt.n	8001cce <vecsub+0x14>
	}
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <matadd>:

void matadd(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8001d10:	b4f0      	push	{r4, r5, r6, r7}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	68b8      	ldr	r0, [r7, #8]
 8001d20:	1e43      	subs	r3, r0, #1
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
 8001d24:	4603      	mov	r3, r0
 8001d26:	4619      	mov	r1, r3
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	f04f 0400 	mov.w	r4, #0
 8001d34:	0154      	lsls	r4, r2, #5
 8001d36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d3a:	014b      	lsls	r3, r1, #5
 8001d3c:	68bd      	ldr	r5, [r7, #8]
 8001d3e:	1e6b      	subs	r3, r5, #1
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	462b      	mov	r3, r5
 8001d44:	4619      	mov	r1, r3
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	f04f 0400 	mov.w	r4, #0
 8001d52:	0154      	lsls	r4, r2, #5
 8001d54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d58:	014b      	lsls	r3, r1, #5
 8001d5a:	68be      	ldr	r6, [r7, #8]
 8001d5c:	1e73      	subs	r3, r6, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	4633      	mov	r3, r6
 8001d62:	4619      	mov	r1, r3
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	f04f 0400 	mov.w	r4, #0
 8001d70:	0154      	lsls	r4, r2, #5
 8001d72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d76:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
 8001d7c:	e032      	b.n	8001de4 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
 8001d82:	e028      	b.n	8001dd6 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8001d84:	4602      	mov	r2, r0
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fb03 f302 	mul.w	r3, r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	441a      	add	r2, r3
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	ed93 7a00 	vldr	s14, [r3]
 8001d9c:	462a      	mov	r2, r5
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fb03 f302 	mul.w	r3, r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	441a      	add	r2, r3
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	edd3 7a00 	vldr	s15, [r3]
 8001db4:	4632      	mov	r2, r6
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	fb03 f302 	mul.w	r3, r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dc0:	441a      	add	r2, r3
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	623b      	str	r3, [r7, #32]
 8001dd6:	6a3a      	ldr	r2, [r7, #32]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dbd2      	blt.n	8001d84 <matadd+0x74>
	for(int i = 0; i < m; i++){
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3301      	adds	r3, #1
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	dbc8      	blt.n	8001d7e <matadd+0x6e>
        }
    }
}
 8001dec:	bf00      	nop
 8001dee:	3728      	adds	r7, #40	; 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bcf0      	pop	{r4, r5, r6, r7}
 8001df4:	4770      	bx	lr

08001df6 <matsub>:

void matsub(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8001df6:	b4f0      	push	{r4, r5, r6, r7}
 8001df8:	b08a      	sub	sp, #40	; 0x28
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	68b8      	ldr	r0, [r7, #8]
 8001e06:	1e43      	subs	r3, r0, #1
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	f04f 0400 	mov.w	r4, #0
 8001e1a:	0154      	lsls	r4, r2, #5
 8001e1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e20:	014b      	lsls	r3, r1, #5
 8001e22:	68bd      	ldr	r5, [r7, #8]
 8001e24:	1e6b      	subs	r3, r5, #1
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	462b      	mov	r3, r5
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	f04f 0400 	mov.w	r4, #0
 8001e38:	0154      	lsls	r4, r2, #5
 8001e3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e3e:	014b      	lsls	r3, r1, #5
 8001e40:	68be      	ldr	r6, [r7, #8]
 8001e42:	1e73      	subs	r3, r6, #1
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	4633      	mov	r3, r6
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	f04f 0400 	mov.w	r4, #0
 8001e56:	0154      	lsls	r4, r2, #5
 8001e58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e5c:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	e032      	b.n	8001eca <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	e028      	b.n	8001ebc <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	fb03 f302 	mul.w	r3, r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	441a      	add	r2, r3
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	ed93 7a00 	vldr	s14, [r3]
 8001e82:	462a      	mov	r2, r5
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	fb03 f302 	mul.w	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	441a      	add	r2, r3
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	4632      	mov	r2, r6
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	fb03 f302 	mul.w	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ea6:	441a      	add	r2, r3
 8001ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	623b      	str	r3, [r7, #32]
 8001ebc:	6a3a      	ldr	r2, [r7, #32]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dbd2      	blt.n	8001e6a <matsub+0x74>
	for(int i = 0; i < m; i++){
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dbc8      	blt.n	8001e64 <matsub+0x6e>
        }
    }
}
 8001ed2:	bf00      	nop
 8001ed4:	3728      	adds	r7, #40	; 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bcf0      	pop	{r4, r5, r6, r7}
 8001eda:	4770      	bx	lr

08001edc <matmul>:

void matmul(int32_t m, int32_t n, int32_t o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8001edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ede:	b08d      	sub	sp, #52	; 0x34
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6178      	str	r0, [r7, #20]
 8001ee4:	6139      	str	r1, [r7, #16]
 8001ee6:	60fa      	str	r2, [r7, #12]
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	693e      	ldr	r6, [r7, #16]
 8001eec:	1e73      	subs	r3, r6, #1
 8001eee:	623b      	str	r3, [r7, #32]
 8001ef0:	4633      	mov	r3, r6
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	f04f 0400 	mov.w	r4, #0
 8001f00:	0154      	lsls	r4, r2, #5
 8001f02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f06:	014b      	lsls	r3, r1, #5
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	4613      	mov	r3, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	f04f 0400 	mov.w	r4, #0
 8001f22:	0154      	lsls	r4, r2, #5
 8001f24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f28:	014b      	lsls	r3, r1, #5
 8001f2a:	68fd      	ldr	r5, [r7, #12]
 8001f2c:	1e6b      	subs	r3, r5, #1
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	462b      	mov	r3, r5
 8001f32:	4619      	mov	r1, r3
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	f04f 0400 	mov.w	r4, #0
 8001f40:	0154      	lsls	r4, r2, #5
 8001f42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f46:	014b      	lsls	r3, r1, #5
	if (reset) {
 8001f48:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d009      	beq.n	8001f64 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	fb02 f303 	mul.w	r3, r2, r3
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f60:	f011 fb79 	bl	8013656 <memset>
	}
	for(int i = 0; i < m; i++){
 8001f64:	2300      	movs	r3, #0
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
 8001f68:	e04a      	b.n	8002000 <matmul+0x124>
        for(int j = 0; j < o; j++){
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f6e:	e040      	b.n	8001ff2 <matmul+0x116>
            for(int k = 0; k < n; k++){
 8001f70:	2300      	movs	r3, #0
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f74:	e036      	b.n	8001fe4 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8001f76:	4632      	mov	r2, r6
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	fb03 f302 	mul.w	r3, r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	441a      	add	r2, r3
 8001f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	ed93 7a00 	vldr	s14, [r3]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f92:	fb03 f302 	mul.w	r3, r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f9a:	441a      	add	r2, r3
 8001f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001faa:	462a      	mov	r2, r5
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	fb03 f302 	mul.w	r3, r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fb6:	441a      	add	r2, r3
 8001fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	edd3 7a00 	vldr	s15, [r3]
 8001fc2:	462a      	mov	r2, r5
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	fb03 f302 	mul.w	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fce:	441a      	add	r2, r3
 8001fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 8001fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	dbc4      	blt.n	8001f76 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	3301      	adds	r3, #1
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	dbba      	blt.n	8001f70 <matmul+0x94>
	for(int i = 0; i < m; i++){
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8002000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	429a      	cmp	r2, r3
 8002006:	dbb0      	blt.n	8001f6a <matmul+0x8e>
            }
        }
    }
}
 8002008:	bf00      	nop
 800200a:	3734      	adds	r7, #52	; 0x34
 800200c:	46bd      	mov	sp, r7
 800200e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002010 <matvecprod>:

void matvecprod(int32_t m, int32_t n, float A[m][n], float b[n], float c[m], bool reset) {
 8002010:	b5b0      	push	{r4, r5, r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	68bd      	ldr	r5, [r7, #8]
 8002020:	1e6b      	subs	r3, r5, #1
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	462b      	mov	r3, r5
 8002026:	4619      	mov	r1, r3
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	f04f 0400 	mov.w	r4, #0
 8002034:	0154      	lsls	r4, r2, #5
 8002036:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800203a:	014b      	lsls	r3, r1, #5
	if (reset) {
 800203c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	461a      	mov	r2, r3
 800204a:	2100      	movs	r1, #0
 800204c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800204e:	f011 fb02 	bl	8013656 <memset>
	}
	for(int i = 0; i < m; i++){
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	e02e      	b.n	80020b6 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
 800205c:	e024      	b.n	80020a8 <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 800205e:	462a      	mov	r2, r5
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fb03 f302 	mul.w	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	441a      	add	r2, r3
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	ed93 7a00 	vldr	s14, [r3]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	4413      	add	r3, r2
 800207e:	edd3 7a00 	vldr	s15, [r3]
 8002082:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800208c:	4413      	add	r3, r2
 800208e:	edd3 7a00 	vldr	s15, [r3]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002098:	4413      	add	r3, r2
 800209a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209e:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3301      	adds	r3, #1
 80020a6:	61fb      	str	r3, [r7, #28]
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	dbd6      	blt.n	800205e <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	3301      	adds	r3, #1
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	dbcc      	blt.n	8002058 <matvecprod+0x48>
        }
    }
}
 80020be:	bf00      	nop
 80020c0:	3720      	adds	r7, #32
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bdb0      	pop	{r4, r5, r7, pc}

080020c6 <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int32_t lower_triangular_inverse(int32_t n, float *L) {
 80020c6:	b480      	push	{r7}
 80020c8:	b08b      	sub	sp, #44	; 0x2c
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
   int32_t i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	e01d      	b.n	8002116 <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	d102      	bne.n	80020f0 <lower_triangular_inverse+0x2a>
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	e076      	b.n	80021de <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	ed93 7a00 	vldr	s14, [r3]
 80020f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3301      	adds	r3, #1
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	3301      	adds	r3, #1
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	429a      	cmp	r2, r3
 800211c:	dbdd      	blt.n	80020da <lower_triangular_inverse+0x14>
    }

    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 800211e:	2301      	movs	r3, #1
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	4413      	add	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	e052      	b.n	80021d4 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	e041      	b.n	80021bc <lower_triangular_inverse+0xf6>
            sum = 0.0;
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	e01b      	b.n	8002180 <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4413      	add	r3, r2
 8002150:	ed93 7a00 	vldr	s14, [r3]
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	edd3 7a00 	vldr	s15, [r3]
 8002160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002164:	ed97 7a03 	vldr	s14, [r7, #12]
 8002168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216c:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	3301      	adds	r3, #1
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4413      	add	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	69fa      	ldr	r2, [r7, #28]
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	429a      	cmp	r2, r3
 8002186:	dbdf      	blt.n	8002148 <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4413      	add	r3, r2
 8002190:	edd3 7a00 	vldr	s15, [r3]
 8002194:	eeb1 7a67 	vneg.f32	s14, s15
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4413      	add	r3, r2
 80021a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a8:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4413      	add	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	3301      	adds	r3, #1
 80021ba:	623b      	str	r3, [r7, #32]
 80021bc:	6a3a      	ldr	r2, [r7, #32]
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	429a      	cmp	r2, r3
 80021c2:	dbb9      	blt.n	8002138 <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	3301      	adds	r3, #1
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4413      	add	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
 80021d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	dba8      	blt.n	800212e <lower_triangular_inverse+0x68>
        }
    }

    return 0;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	372c      	adds	r7, #44	; 0x2c
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 80021ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ec:	b08b      	sub	sp, #44	; 0x2c
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	68fe      	ldr	r6, [r7, #12]
 80021f8:	1e73      	subs	r3, r6, #1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	4633      	mov	r3, r6
 80021fe:	4619      	mov	r1, r3
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	f04f 0400 	mov.w	r4, #0
 800220c:	0154      	lsls	r4, r2, #5
 800220e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002212:	014b      	lsls	r3, r1, #5
 8002214:	68fd      	ldr	r5, [r7, #12]
 8002216:	1e6b      	subs	r3, r5, #1
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	462b      	mov	r3, r5
 800221c:	4619      	mov	r1, r3
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	f04f 0400 	mov.w	r4, #0
 800222a:	0154      	lsls	r4, r2, #5
 800222c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002230:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	fb02 f303 	mul.w	r3, r2, r3
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	461a      	mov	r2, r3
 800223e:	2100      	movs	r1, #0
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f011 fa08 	bl	8013656 <memset>
    for (int i = 0; i < n; i++)
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	e08a      	b.n	8002362 <cholesky+0x178>
        for (int j = 0; j < (i+1); j++) {
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	e07e      	b.n	8002350 <cholesky+0x166>
            float s = 0;
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
 800225c:	e022      	b.n	80022a4 <cholesky+0xba>
                s += L[i][k] * L[j][k];
 800225e:	462a      	mov	r2, r5
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	fb03 f302 	mul.w	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	441a      	add	r2, r3
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	ed93 7a00 	vldr	s14, [r3]
 8002276:	462a      	mov	r2, r5
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	fb03 f302 	mul.w	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	441a      	add	r2, r3
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	edd3 7a00 	vldr	s15, [r3]
 800228e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002292:	ed97 7a08 	vldr	s14, [r7, #32]
 8002296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229a:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	3301      	adds	r3, #1
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
 80022a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	dbd8      	blt.n	800225e <cholesky+0x74>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d116      	bne.n	80022e2 <cholesky+0xf8>
 80022b4:	4632      	mov	r2, r6
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	fb03 f302 	mul.w	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	441a      	add	r2, r3
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	ed93 7a00 	vldr	s14, [r3]
 80022cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80022d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d4:	eeb0 0a67 	vmov.f32	s0, s15
 80022d8:	f012 f8b2 	bl	8014440 <sqrtf>
 80022dc:	eef0 7a40 	vmov.f32	s15, s0
 80022e0:	e027      	b.n	8002332 <cholesky+0x148>
 80022e2:	462a      	mov	r2, r5
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	fb03 f302 	mul.w	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	441a      	add	r2, r3
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022fe:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002302:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002306:	4632      	mov	r2, r6
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	fb03 f302 	mul.w	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	441a      	add	r2, r3
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	ed93 7a00 	vldr	s14, [r3]
 800231e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002326:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800232a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800232e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002332:	462a      	mov	r2, r5
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	fb03 f302 	mul.w	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	441a      	add	r2, r3
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < (i+1); j++) {
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3301      	adds	r3, #1
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	3301      	adds	r3, #1
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	429a      	cmp	r2, r3
 8002358:	f6ff af7b 	blt.w	8002252 <cholesky+0x68>
    for (int i = 0; i < n; i++)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	3301      	adds	r3, #1
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	429a      	cmp	r2, r3
 8002368:	f6ff af70 	blt.w	800224c <cholesky+0x62>
        }
}
 800236c:	bf00      	nop
 800236e:	372c      	adds	r7, #44	; 0x2c
 8002370:	46bd      	mov	sp, r7
 8002372:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002374 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 8002374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002378:	b090      	sub	sp, #64	; 0x40
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	ed87 0a00 	vstr	s0, [r7]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1e5a      	subs	r2, r3, #1
 800238a:	63ba      	str	r2, [r7, #56]	; 0x38
 800238c:	4619      	mov	r1, r3
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	f04f 0400 	mov.w	r4, #0
 800239a:	0154      	lsls	r4, r2, #5
 800239c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023a0:	014b      	lsls	r3, r1, #5
 80023a2:	68fd      	ldr	r5, [r7, #12]
 80023a4:	1e6b      	subs	r3, r5, #1
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a8:	462b      	mov	r3, r5
 80023aa:	4619      	mov	r1, r3
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	f04f 0400 	mov.w	r4, #0
 80023b8:	0154      	lsls	r4, r2, #5
 80023ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023be:	014b      	lsls	r3, r1, #5
 80023c0:	466b      	mov	r3, sp
 80023c2:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	68fe      	ldr	r6, [r7, #12]
 80023c8:	1e43      	subs	r3, r0, #1
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
 80023cc:	4603      	mov	r3, r0
 80023ce:	4619      	mov	r1, r3
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	f04f 0400 	mov.w	r4, #0
 80023dc:	0154      	lsls	r4, r2, #5
 80023de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023e2:	014b      	lsls	r3, r1, #5
 80023e4:	4603      	mov	r3, r0
 80023e6:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80023ea:	1e73      	subs	r3, r6, #1
 80023ec:	623b      	str	r3, [r7, #32]
 80023ee:	4603      	mov	r3, r0
 80023f0:	4619      	mov	r1, r3
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	4633      	mov	r3, r6
 80023f8:	f04f 0400 	mov.w	r4, #0
 80023fc:	fb03 fe02 	mul.w	lr, r3, r2
 8002400:	fb01 fc04 	mul.w	ip, r1, r4
 8002404:	44f4      	add	ip, lr
 8002406:	fba1 3403 	umull	r3, r4, r1, r3
 800240a:	eb0c 0204 	add.w	r2, ip, r4
 800240e:	4614      	mov	r4, r2
 8002410:	f04f 0100 	mov.w	r1, #0
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	0162      	lsls	r2, r4, #5
 800241a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800241e:	0159      	lsls	r1, r3, #5
 8002420:	4603      	mov	r3, r0
 8002422:	4619      	mov	r1, r3
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	4633      	mov	r3, r6
 800242a:	f04f 0400 	mov.w	r4, #0
 800242e:	fb03 fe02 	mul.w	lr, r3, r2
 8002432:	fb01 fc04 	mul.w	ip, r1, r4
 8002436:	44f4      	add	ip, lr
 8002438:	fba1 3403 	umull	r3, r4, r1, r3
 800243c:	eb0c 0204 	add.w	r2, ip, r4
 8002440:	4614      	mov	r4, r2
 8002442:	f04f 0100 	mov.w	r1, #0
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	0162      	lsls	r2, r4, #5
 800244c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002450:	0159      	lsls	r1, r3, #5
 8002452:	4603      	mov	r3, r0
 8002454:	4632      	mov	r2, r6
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	3303      	adds	r3, #3
 800245e:	3307      	adds	r3, #7
 8002460:	08db      	lsrs	r3, r3, #3
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	ebad 0d03 	sub.w	sp, sp, r3
 8002468:	466b      	mov	r3, sp
 800246a:	3303      	adds	r3, #3
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8002472:	69f8      	ldr	r0, [r7, #28]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	fb02 f303 	mul.w	r3, r2, r3
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	461a      	mov	r2, r3
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	f011 f8dd 	bl	8013640 <memcpy>
    for (int i = 0; i < n; i++) {
 8002486:	2300      	movs	r3, #0
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
 800248a:	e022      	b.n	80024d2 <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 800248c:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002494:	fb01 f103 	mul.w	r1, r1, r3
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	440b      	add	r3, r1
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	ed93 7a00 	vldr	s14, [r3]
 80024a4:	edd7 6a00 	vldr	s13, [r7]
 80024a8:	edd7 7a00 	vldr	s15, [r7]
 80024ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b0:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80024b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024bc:	fb01 f103 	mul.w	r1, r1, r3
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	440b      	add	r3, r1
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 80024cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ce:	3301      	adds	r3, #1
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	dbd8      	blt.n	800248c <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	68fe      	ldr	r6, [r7, #12]
 80024de:	466b      	mov	r3, sp
 80024e0:	469a      	mov	sl, r3
 80024e2:	1e43      	subs	r3, r0, #1
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	4603      	mov	r3, r0
 80024e8:	4619      	mov	r1, r3
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	f04f 0400 	mov.w	r4, #0
 80024f6:	0154      	lsls	r4, r2, #5
 80024f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024fc:	014b      	lsls	r3, r1, #5
 80024fe:	4603      	mov	r3, r0
 8002500:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8002504:	1e73      	subs	r3, r6, #1
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	4603      	mov	r3, r0
 800250a:	4619      	mov	r1, r3
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	4633      	mov	r3, r6
 8002512:	f04f 0400 	mov.w	r4, #0
 8002516:	fb03 fe02 	mul.w	lr, r3, r2
 800251a:	fb01 fc04 	mul.w	ip, r1, r4
 800251e:	44f4      	add	ip, lr
 8002520:	fba1 3403 	umull	r3, r4, r1, r3
 8002524:	eb0c 0204 	add.w	r2, ip, r4
 8002528:	4614      	mov	r4, r2
 800252a:	f04f 0100 	mov.w	r1, #0
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	0162      	lsls	r2, r4, #5
 8002534:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002538:	0159      	lsls	r1, r3, #5
 800253a:	4603      	mov	r3, r0
 800253c:	4619      	mov	r1, r3
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	4633      	mov	r3, r6
 8002544:	f04f 0400 	mov.w	r4, #0
 8002548:	fb03 fe02 	mul.w	lr, r3, r2
 800254c:	fb01 fc04 	mul.w	ip, r1, r4
 8002550:	44f4      	add	ip, lr
 8002552:	fba1 3403 	umull	r3, r4, r1, r3
 8002556:	eb0c 0204 	add.w	r2, ip, r4
 800255a:	4614      	mov	r4, r2
 800255c:	f04f 0100 	mov.w	r1, #0
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	0162      	lsls	r2, r4, #5
 8002566:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800256a:	0159      	lsls	r1, r3, #5
 800256c:	4603      	mov	r3, r0
 800256e:	4632      	mov	r2, r6
 8002570:	fb02 f303 	mul.w	r3, r2, r3
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	3303      	adds	r3, #3
 8002578:	3307      	adds	r3, #7
 800257a:	08db      	lsrs	r3, r3, #3
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	ebad 0d03 	sub.w	sp, sp, r3
 8002582:	466b      	mov	r3, sp
 8002584:	3303      	adds	r3, #3
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4619      	mov	r1, r3
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f7ff fe29 	bl	80021ea <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4619      	mov	r1, r3
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f7ff fd92 	bl	80020c6 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	461a      	mov	r2, r3
 80025ae:	2100      	movs	r1, #0
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f011 f850 	bl	8013656 <memset>
    for(int i = 0; i < n; i++){
 80025b6:	2300      	movs	r3, #0
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ba:	e04e      	b.n	800265a <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 80025bc:	2300      	movs	r3, #0
 80025be:	633b      	str	r3, [r7, #48]	; 0x30
 80025c0:	e044      	b.n	800264c <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 80025c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	4293      	cmp	r3, r2
 80025c8:	bfb8      	it	lt
 80025ca:	4613      	movlt	r3, r2
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
 80025ce:	e036      	b.n	800263e <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 80025d0:	462a      	mov	r2, r5
 80025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d4:	fb03 f302 	mul.w	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	441a      	add	r2, r3
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025f0:	fb01 f103 	mul.w	r1, r1, r3
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	440b      	add	r3, r1
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	edd3 6a00 	vldr	s13, [r3]
 8002600:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002608:	fb01 f103 	mul.w	r1, r1, r3
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	440b      	add	r3, r1
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261c:	462a      	mov	r2, r5
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	fb03 f302 	mul.w	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	441a      	add	r2, r3
 800262a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8002638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263a:	3301      	adds	r3, #1
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
 800263e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	429a      	cmp	r2, r3
 8002644:	dbc4      	blt.n	80025d0 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	3301      	adds	r3, #1
 800264a:	633b      	str	r3, [r7, #48]	; 0x30
 800264c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	429a      	cmp	r2, r3
 8002652:	dbb6      	blt.n	80025c2 <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 8002654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002656:	3301      	adds	r3, #1
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800265a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	429a      	cmp	r2, r3
 8002660:	dbac      	blt.n	80025bc <cholesky_inverse+0x248>
 8002662:	46d5      	mov	sp, sl
 8002664:	46cd      	mov	sp, r9
            }
        }
    }
}
 8002666:	bf00      	nop
 8002668:	3740      	adds	r7, #64	; 0x40
 800266a:	46bd      	mov	sp, r7
 800266c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002670 <AcquireMutex>:
 *      Author: Jonas
 */
#include "Util/mutex.h"
#include "Sim_Con/env.h"

osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 8002670:	b510      	push	{r4, lr}
	osStatus_t status = osOK;
	status = osMutexAcquire(custom_mutex->mutex, 10);
 8002672:	210a      	movs	r1, #10
osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 8002674:	4604      	mov	r4, r0
	status = osMutexAcquire(custom_mutex->mutex, 10);
 8002676:	6800      	ldr	r0, [r0, #0]
 8002678:	f00d fe72 	bl	8010360 <osMutexAcquire>
	if(status == osOK){
 800267c:	b910      	cbnz	r0, 8002684 <AcquireMutex+0x14>
		custom_mutex->counter++;
 800267e:	6863      	ldr	r3, [r4, #4]
 8002680:	3301      	adds	r3, #1
 8002682:	6063      	str	r3, [r4, #4]
	}

	return status;
}
 8002684:	bd10      	pop	{r4, pc}

08002686 <ReleaseMutex>:

osStatus_t ReleaseMutex(custom_mutex_t *custom_mutex){
	return osMutexRelease(custom_mutex->mutex);
 8002686:	6800      	ldr	r0, [r0, #0]
 8002688:	f00d be9a 	b.w	80103c0 <osMutexRelease>

0800268c <ReadMutex>:
}

osStatus_t ReadMutex(custom_mutex_t *custom_mutex,void const* global_data, void* const local_data, int32_t size){
 800268c:	b570      	push	{r4, r5, r6, lr}
 800268e:	b09a      	sub	sp, #104	; 0x68
 8002690:	461c      	mov	r4, r3
 8002692:	460e      	mov	r6, r1
 8002694:	4615      	mov	r5, r2
	uint8_t buffer[100] = { 0 };
 8002696:	2100      	movs	r1, #0
 8002698:	2264      	movs	r2, #100	; 0x64
 800269a:	a801      	add	r0, sp, #4
 800269c:	f010 ffdb 	bl	8013656 <memset>
	uint32_t counter = custom_mutex->counter;
	osStatus_t status = osError;
	for(int i = 0; i < 5; i++){
		memcpy(&buffer[0], global_data, size);
 80026a0:	4622      	mov	r2, r4
 80026a2:	4631      	mov	r1, r6
 80026a4:	a801      	add	r0, sp, #4
 80026a6:	f010 ffcb 	bl	8013640 <memcpy>
		if(custom_mutex->counter == counter){
			memcpy(local_data, buffer, size);
 80026aa:	4622      	mov	r2, r4
 80026ac:	a901      	add	r1, sp, #4
 80026ae:	4628      	mov	r0, r5
 80026b0:	f010 ffc6 	bl	8013640 <memcpy>
			break;
		}
		counter = custom_mutex->counter;
	}
	return status;
}
 80026b4:	2000      	movs	r0, #0
 80026b6:	b01a      	add	sp, #104	; 0x68
 80026b8:	bd70      	pop	{r4, r5, r6, pc}
 80026ba:	0000      	movs	r0, r0
 80026bc:	0000      	movs	r0, r0
	...

080026c0 <ReadMutexStateEst>:
		/* Write in Buffer */
		Placeholder_measurement[0] = (float) (baro->pressure);
		Placeholder_timestamps[0] = baro->ts;
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
		Placeholder_timestamps[1] = imu->ts;
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 80026c0:	edd1 7a01 	vldr	s15, [r1, #4]
 80026c4:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8002730 <ReadMutexStateEst+0x70>
 80026c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 80026cc:	b570      	push	{r4, r5, r6, lr}
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 80026ce:	eec7 6a86 	vdiv.f32	s13, s15, s12
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 80026d2:	f9b2 400a 	ldrsh.w	r4, [r2, #10]
		Placeholder_measurement[0] = (float) (baro->pressure);
 80026d6:	edd1 7a00 	vldr	s15, [r1]
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 80026da:	ee07 4a10 	vmov	s14, r4
osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 80026de:	9804      	ldr	r0, [sp, #16]
 80026e0:	240c      	movs	r4, #12
		Placeholder_timestamps[1] = imu->ts;
 80026e2:	68d5      	ldr	r5, [r2, #12]

		/* Check if Mutex was aquired */
		if(custom_mutex->counter == counter){
			state->baro_data[sb_number-1].pressure = Placeholder_measurement[0];
 80026e4:	1e42      	subs	r2, r0, #1
		Placeholder_timestamps[0] = baro->ts;
 80026e6:	688e      	ldr	r6, [r1, #8]
		Placeholder_measurement[0] = (float) (baro->pressure);
 80026e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ec:	fb04 3000 	mla	r0, r4, r0, r3
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 80026f0:	eeba 7acb 	vcvt.f32.s32	s14, s14, #10
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];

			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 80026f4:	211c      	movs	r1, #28
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 80026f6:	fb04 3402 	mla	r4, r4, r2, r3
		Placeholder_measurement[0] = (float) (baro->pressure);
 80026fa:	ed40 7a03 	vstr	s15, [r0, #-12]
			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 80026fe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002702:	fb01 3302 	mla	r3, r1, r2, r3
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
 8002706:	ed40 6a02 	vstr	s13, [r0, #-8]
		counter = custom_mutex->counter;
	}


	return status;
}
 800270a:	2000      	movs	r0, #0
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 800270c:	60a6      	str	r6, [r4, #8]
			state->imu_data[sb_number-1].ts = Placeholder_timestamps[1];
 800270e:	63dd      	str	r5, [r3, #60]	; 0x3c
			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8002710:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8002728 <ReadMutexStateEst+0x68>
 8002714:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002718:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800271c:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
}
 8002720:	bd70      	pop	{r4, r5, r6, pc}
 8002722:	bf00      	nop
 8002724:	f3af 8000 	nop.w
 8002728:	51eb851f 	.word	0x51eb851f
 800272c:	40239eb8 	.word	0x40239eb8
 8002730:	42c80000 	.word	0x42c80000

08002734 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8002734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002736:	b0b1      	sub	sp, #196	; 0xc4
 8002738:	4615      	mov	r5, r2
 800273a:	4606      	mov	r6, r0
 800273c:	460f      	mov	r7, r1
	log_entry_t log_entry = { 0 };
 800273e:	2296      	movs	r2, #150	; 0x96
 8002740:	2100      	movs	r1, #0
 8002742:	a80a      	add	r0, sp, #40	; 0x28
		sensor_type_e sensor_type, void *sensor_data) {
 8002744:	461c      	mov	r4, r3
	log_entry_t log_entry = { 0 };
 8002746:	f010 ff86 	bl	8013656 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 800274a:	2301      	movs	r3, #1
 800274c:	4a3b      	ldr	r2, [pc, #236]	; (800283c <logSensor+0x108>)
 800274e:	2196      	movs	r1, #150	; 0x96
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	a80a      	add	r0, sp, #40	; 0x28
 8002754:	4633      	mov	r3, r6
 8002756:	e9cd 7501 	strd	r7, r5, [sp, #4]
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 800275a:	3d01      	subs	r5, #1
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 800275c:	f011 f83c 	bl	80137d8 <sniprintf>
			battery_data->battery, battery_data->consumption,
			battery_data->current, battery_data->supply);
	}
		break;
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 8002760:	a80a      	add	r0, sp, #40	; 0x28
	switch (sensor_type) {
 8002762:	2d03      	cmp	r5, #3
 8002764:	d861      	bhi.n	800282a <logSensor+0xf6>
 8002766:	e8df f005 	tbb	[pc, r5]
 800276a:	1802      	.short	0x1802
 800276c:	5034      	.short	0x5034
		snprintf(log_entry.str + strlen(log_entry.str),
 800276e:	f7fd fdb7 	bl	80002e0 <strlen>
 8002772:	68a3      	ldr	r3, [r4, #8]
 8002774:	4a32      	ldr	r2, [pc, #200]	; (8002840 <logSensor+0x10c>)
 8002776:	2196      	movs	r1, #150	; 0x96
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	6863      	ldr	r3, [r4, #4]
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	ac0a      	add	r4, sp, #40	; 0x28
 8002782:	4420      	add	r0, r4
 8002784:	f011 f828 	bl	80137d8 <sniprintf>
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002788:	2300      	movs	r3, #0
 800278a:	482e      	ldr	r0, [pc, #184]	; (8002844 <logSensor+0x110>)
 800278c:	a90a      	add	r1, sp, #40	; 0x28
 800278e:	461a      	mov	r2, r3
 8002790:	6800      	ldr	r0, [r0, #0]
 8002792:	f00d ff6f 	bl	8010674 <osMessageQueuePut>
}
 8002796:	b031      	add	sp, #196	; 0xc4
 8002798:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintf(log_entry.str + strlen(log_entry.str),
 800279a:	f7fd fda1 	bl	80002e0 <strlen>
 800279e:	68e2      	ldr	r2, [r4, #12]
 80027a0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80027a4:	2196      	movs	r1, #150	; 0x96
 80027a6:	9205      	str	r2, [sp, #20]
 80027a8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80027ac:	9204      	str	r2, [sp, #16]
 80027ae:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80027b2:	9203      	str	r2, [sp, #12]
 80027b4:	f9b4 2000 	ldrsh.w	r2, [r4]
 80027b8:	9202      	str	r2, [sp, #8]
 80027ba:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80027be:	9201      	str	r2, [sp, #4]
 80027c0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80027c4:	ac0a      	add	r4, sp, #40	; 0x28
 80027c6:	9200      	str	r2, [sp, #0]
 80027c8:	4420      	add	r0, r4
 80027ca:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <logSensor+0x114>)
 80027cc:	f011 f804 	bl	80137d8 <sniprintf>
		break;
 80027d0:	e7da      	b.n	8002788 <logSensor+0x54>
		snprintf(log_entry.str + strlen(log_entry.str),
 80027d2:	f7fd fd85 	bl	80002e0 <strlen>
 80027d6:	8be3      	ldrh	r3, [r4, #30]
 80027d8:	4a1c      	ldr	r2, [pc, #112]	; (800284c <logSensor+0x118>)
 80027da:	2196      	movs	r1, #150	; 0x96
 80027dc:	9308      	str	r3, [sp, #32]
 80027de:	8c23      	ldrh	r3, [r4, #32]
 80027e0:	9307      	str	r3, [sp, #28]
 80027e2:	7b23      	ldrb	r3, [r4, #12]
 80027e4:	9306      	str	r3, [sp, #24]
 80027e6:	69a3      	ldr	r3, [r4, #24]
 80027e8:	9305      	str	r3, [sp, #20]
 80027ea:	7d23      	ldrb	r3, [r4, #20]
 80027ec:	9304      	str	r3, [sp, #16]
 80027ee:	6923      	ldr	r3, [r4, #16]
 80027f0:	9303      	str	r3, [sp, #12]
 80027f2:	7b63      	ldrb	r3, [r4, #13]
 80027f4:	9302      	str	r3, [sp, #8]
 80027f6:	68a3      	ldr	r3, [r4, #8]
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	6863      	ldr	r3, [r4, #4]
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	6823      	ldr	r3, [r4, #0]
 8002800:	ac0a      	add	r4, sp, #40	; 0x28
 8002802:	4420      	add	r0, r4
 8002804:	f010 ffe8 	bl	80137d8 <sniprintf>
		break;
 8002808:	e7be      	b.n	8002788 <logSensor+0x54>
		snprintf(log_entry.str + strlen(log_entry.str),
 800280a:	f7fd fd69 	bl	80002e0 <strlen>
 800280e:	8822      	ldrh	r2, [r4, #0]
 8002810:	8863      	ldrh	r3, [r4, #2]
 8002812:	2196      	movs	r1, #150	; 0x96
 8002814:	9202      	str	r2, [sp, #8]
 8002816:	88a2      	ldrh	r2, [r4, #4]
 8002818:	9201      	str	r2, [sp, #4]
 800281a:	88e2      	ldrh	r2, [r4, #6]
 800281c:	ac0a      	add	r4, sp, #40	; 0x28
 800281e:	9200      	str	r2, [sp, #0]
 8002820:	4420      	add	r0, r4
 8002822:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <logSensor+0x11c>)
 8002824:	f010 ffd8 	bl	80137d8 <sniprintf>
		break;
 8002828:	e7ae      	b.n	8002788 <logSensor+0x54>
		snprintf(log_entry.str + strlen(log_entry.str),
 800282a:	f7fd fd59 	bl	80002e0 <strlen>
 800282e:	ab0a      	add	r3, sp, #40	; 0x28
 8002830:	4908      	ldr	r1, [pc, #32]	; (8002854 <logSensor+0x120>)
 8002832:	4418      	add	r0, r3
 8002834:	f011 f804 	bl	8013840 <strcpy>
		break;
 8002838:	e7a6      	b.n	8002788 <logSensor+0x54>
 800283a:	bf00      	nop
 800283c:	0801545b 	.word	0x0801545b
 8002840:	0801546a 	.word	0x0801546a
 8002844:	2401b5d8 	.word	0x2401b5d8
 8002848:	08015477 	.word	0x08015477
 800284c:	08015494 	.word	0x08015494
 8002850:	080154ba 	.word	0x080154ba
 8002854:	080154cb 	.word	0x080154cb

08002858 <logRocketState>:

osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 8002858:	b530      	push	{r4, r5, lr}
 800285a:	b0ad      	sub	sp, #180	; 0xb4
 800285c:	4605      	mov	r5, r0
	log_entry_t log_entry = { 0 };
 800285e:	2496      	movs	r4, #150	; 0x96
osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 8002860:	a803      	add	r0, sp, #12
 8002862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8002866:	4622      	mov	r2, r4
 8002868:	2100      	movs	r1, #0
 800286a:	a806      	add	r0, sp, #24
 800286c:	f010 fef3 	bl	8013656 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
 8002870:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002874:	4621      	mov	r1, r4
 8002876:	4a08      	ldr	r2, [pc, #32]	; (8002898 <logRocketState+0x40>)
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	2302      	movs	r3, #2
 800287c:	a806      	add	r0, sp, #24
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	462b      	mov	r3, r5
 8002882:	f010 ffa9 	bl	80137d8 <sniprintf>
			flight_phase_detection.flight_phase);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002886:	2300      	movs	r3, #0
 8002888:	4804      	ldr	r0, [pc, #16]	; (800289c <logRocketState+0x44>)
 800288a:	a906      	add	r1, sp, #24
 800288c:	461a      	mov	r2, r3
 800288e:	6800      	ldr	r0, [r0, #0]
 8002890:	f00d fef0 	bl	8010674 <osMessageQueuePut>
}
 8002894:	b02d      	add	sp, #180	; 0xb4
 8002896:	bd30      	pop	{r4, r5, pc}
 8002898:	08015450 	.word	0x08015450
 800289c:	2401b5d8 	.word	0x2401b5d8

080028a0 <logEstimatorVar>:

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 80028a0:	b084      	sub	sp, #16
 80028a2:	b530      	push	{r4, r5, lr}
 80028a4:	b0ab      	sub	sp, #172	; 0xac
 80028a6:	4605      	mov	r5, r0
	log_entry_t log_entry = { 0 };
 80028a8:	2496      	movs	r4, #150	; 0x96
osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 80028aa:	a82f      	add	r0, sp, #188	; 0xbc
 80028ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 80028b0:	4622      	mov	r2, r4
 80028b2:	2100      	movs	r1, #0
 80028b4:	a804      	add	r0, sp, #16
 80028b6:	f010 fece 	bl	8013656 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, ESTIMATOR_VAR,
 80028ba:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80028bc:	4621      	mov	r1, r4
 80028be:	4a0c      	ldr	r2, [pc, #48]	; (80028f0 <logEstimatorVar+0x50>)
 80028c0:	9303      	str	r3, [sp, #12]
 80028c2:	a804      	add	r0, sp, #16
 80028c4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80028c6:	9302      	str	r3, [sp, #8]
 80028c8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	2303      	movs	r3, #3
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	462b      	mov	r3, r5
 80028d2:	f010 ff81 	bl	80137d8 <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0], estimator_data.acceleration_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80028d6:	2300      	movs	r3, #0
 80028d8:	4806      	ldr	r0, [pc, #24]	; (80028f4 <logEstimatorVar+0x54>)
 80028da:	a904      	add	r1, sp, #16
 80028dc:	461a      	mov	r2, r3
 80028de:	6800      	ldr	r0, [r0, #0]
 80028e0:	f00d fec8 	bl	8010674 <osMessageQueuePut>
}
 80028e4:	b02b      	add	sp, #172	; 0xac
 80028e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80028ea:	b004      	add	sp, #16
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	0801542c 	.word	0x0801542c
 80028f4:	2401b5d8 	.word	0x2401b5d8

080028f8 <logControllerOutput>:

osStatus_t logControllerOutput(timestamp_t ts, int32_t controller_output, int32_t reference_error,
		int32_t integrated_error) {
 80028f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_entry_t log_entry = { 0 };
 80028fc:	2496      	movs	r4, #150	; 0x96
		int32_t integrated_error) {
 80028fe:	b0aa      	sub	sp, #168	; 0xa8
 8002900:	4605      	mov	r5, r0
 8002902:	460e      	mov	r6, r1
 8002904:	4617      	mov	r7, r2
	log_entry_t log_entry = { 0 };
 8002906:	2100      	movs	r1, #0
 8002908:	4622      	mov	r2, r4
 800290a:	a804      	add	r0, sp, #16
		int32_t integrated_error) {
 800290c:	4698      	mov	r8, r3
	log_entry_t log_entry = { 0 };
 800290e:	f010 fea2 	bl	8013656 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, CONTROLLER_OUTPUT,
 8002912:	2304      	movs	r3, #4
 8002914:	4621      	mov	r1, r4
 8002916:	9601      	str	r6, [sp, #4]
 8002918:	a804      	add	r0, sp, #16
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	462b      	mov	r3, r5
 800291e:	4a07      	ldr	r2, [pc, #28]	; (800293c <logControllerOutput+0x44>)
 8002920:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8002924:	f010 ff58 	bl	80137d8 <sniprintf>
			controller_output, reference_error, integrated_error);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002928:	2300      	movs	r3, #0
 800292a:	4805      	ldr	r0, [pc, #20]	; (8002940 <logControllerOutput+0x48>)
 800292c:	a904      	add	r1, sp, #16
 800292e:	461a      	mov	r2, r3
 8002930:	6800      	ldr	r0, [r0, #0]
 8002932:	f00d fe9f 	bl	8010674 <osMessageQueuePut>
}
 8002936:	b02a      	add	sp, #168	; 0xa8
 8002938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800293c:	0801542c 	.word	0x0801542c
 8002940:	2401b5d8 	.word	0x2401b5d8

08002944 <logMotor>:

osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 8002944:	b5f0      	push	{r4, r5, r6, r7, lr}
	log_entry_t log_entry = { 0 };
 8002946:	2496      	movs	r4, #150	; 0x96
osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 8002948:	b0ab      	sub	sp, #172	; 0xac
 800294a:	4605      	mov	r5, r0
 800294c:	460e      	mov	r6, r1
 800294e:	4617      	mov	r7, r2
	log_entry_t log_entry = { 0 };
 8002950:	2100      	movs	r1, #0
 8002952:	4622      	mov	r2, r4
 8002954:	a804      	add	r0, sp, #16
 8002956:	f010 fe7e 	bl	8013656 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld\n", ts, MOTOR_POSITION,
 800295a:	2305      	movs	r3, #5
 800295c:	4621      	mov	r1, r4
 800295e:	4a08      	ldr	r2, [pc, #32]	; (8002980 <logMotor+0x3c>)
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	a804      	add	r0, sp, #16
 8002964:	462b      	mov	r3, r5
 8002966:	e9cd 6701 	strd	r6, r7, [sp, #4]
 800296a:	f010 ff35 	bl	80137d8 <sniprintf>
			desired_position, actual_position);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 800296e:	2300      	movs	r3, #0
 8002970:	4804      	ldr	r0, [pc, #16]	; (8002984 <logMotor+0x40>)
 8002972:	a904      	add	r1, sp, #16
 8002974:	461a      	mov	r2, r3
 8002976:	6800      	ldr	r0, [r0, #0]
 8002978:	f00d fe7c 	bl	8010674 <osMessageQueuePut>
}
 800297c:	b02b      	add	sp, #172	; 0xac
 800297e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002980:	08015440 	.word	0x08015440
 8002984:	2401b5d8 	.word	0x2401b5d8

08002988 <UsbPrint>:
}


/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8002988:	b40f      	push	{r0, r1, r2, r3}
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
		osMutexRelease(print_mutex);
	}
#endif
	return ret;
}
 800298a:	2001      	movs	r0, #1
 800298c:	b004      	add	sp, #16
 800298e:	4770      	bx	lr

08002990 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002990:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002992:	f010 fbd5 	bl	8013140 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	osDelay(5000);
 8002996:	f241 3088 	movw	r0, #5000	; 0x1388
 800299a:	f00d fc61 	bl	8010260 <osDelay>
#if ( configUSE_TRACE_FACILITY == 1 )
	vTraceEnable(TRC_START);
 800299e:	2001      	movs	r0, #1
 80029a0:	f002 fcb0 	bl	8005304 <vTraceEnable>
#endif

	for (;;) {
		osDelay(1000);
 80029a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a8:	f00d fc5a 	bl	8010260 <osDelay>
 80029ac:	e7fa      	b.n	80029a4 <StartDefaultTask+0x14>
	...

080029b0 <SystemClock_Config>:
{
 80029b0:	b570      	push	{r4, r5, r6, lr}
 80029b2:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029b4:	224c      	movs	r2, #76	; 0x4c
 80029b6:	2100      	movs	r1, #0
 80029b8:	a80a      	add	r0, sp, #40	; 0x28
 80029ba:	f010 fe4c 	bl	8013656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029be:	2220      	movs	r2, #32
 80029c0:	2100      	movs	r1, #0
 80029c2:	a802      	add	r0, sp, #8
 80029c4:	f010 fe47 	bl	8013656 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029c8:	22bc      	movs	r2, #188	; 0xbc
 80029ca:	2100      	movs	r1, #0
 80029cc:	a81d      	add	r0, sp, #116	; 0x74
 80029ce:	f010 fe42 	bl	8013656 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80029d2:	2002      	movs	r0, #2
 80029d4:	f006 f846 	bl	8008a64 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80029d8:	2300      	movs	r3, #0
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <SystemClock_Config+0xf4>)
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80029e4:	619a      	str	r2, [r3, #24]
 80029e6:	699a      	ldr	r2, [r3, #24]
 80029e8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80029ec:	9201      	str	r2, [sp, #4]
 80029ee:	4a2e      	ldr	r2, [pc, #184]	; (8002aa8 <SystemClock_Config+0xf8>)
 80029f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029f2:	f041 0101 	orr.w	r1, r1, #1
 80029f6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80029f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029fa:	f002 0201 	and.w	r2, r2, #1
 80029fe:	9201      	str	r2, [sp, #4]
 8002a00:	9a01      	ldr	r2, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002a02:	699a      	ldr	r2, [r3, #24]
 8002a04:	0490      	lsls	r0, r2, #18
 8002a06:	d5fc      	bpl.n	8002a02 <SystemClock_Config+0x52>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002a08:	4a28      	ldr	r2, [pc, #160]	; (8002aac <SystemClock_Config+0xfc>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a0a:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a0c:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002a0e:	2400      	movs	r4, #0
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002a10:	6a93      	ldr	r3, [r2, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a12:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002a14:	f023 0303 	bic.w	r3, r3, #3
 8002a18:	f043 0302 	orr.w	r3, r3, #2
 8002a1c:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002a22:	9615      	str	r6, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002a24:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a26:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 120;
 8002a2a:	2378      	movs	r3, #120	; 0x78
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002a2c:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8002a30:	2314      	movs	r3, #20
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a32:	e9cd 3518 	strd	r3, r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002a36:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a38:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002a3c:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a40:	f006 f83c 	bl	8008abc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a44:	223f      	movs	r2, #63	; 0x3f
 8002a46:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a48:	2104      	movs	r1, #4
 8002a4a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8002a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002a58:	e9cd 3404 	strd	r3, r4, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002a5c:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002a5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002a62:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a66:	f006 fb59 	bl	800911c <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <SystemClock_Config+0x100>)
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002a6c:	21c0      	movs	r1, #192	; 0xc0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a6e:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002a70:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002a72:	9430      	str	r4, [sp, #192]	; 0xc0
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002a74:	9445      	str	r4, [sp, #276]	; 0x114
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002a76:	e9cd 361d 	strd	r3, r6, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8002a7a:	2313      	movs	r3, #19
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8002a7c:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002a80:	2320      	movs	r3, #32
 8002a82:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002a86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002a8a:	e9cd 5521 	strd	r5, r5, [sp, #132]	; 0x84
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002a8e:	933e      	str	r3, [sp, #248]	; 0xf8
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002a90:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002a94:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a98:	f006 fdc6 	bl	8009628 <HAL_RCCEx_PeriphCLKConfig>
  HAL_PWREx_EnableUSBVoltageDetector();
 8002a9c:	f006 f806 	bl	8008aac <HAL_PWREx_EnableUSBVoltageDetector>
}
 8002aa0:	b04c      	add	sp, #304	; 0x130
 8002aa2:	bd70      	pop	{r4, r5, r6, pc}
 8002aa4:	58024800 	.word	0x58024800
 8002aa8:	58000400 	.word	0x58000400
 8002aac:	58024400 	.word	0x58024400
 8002ab0:	000d3003 	.word	0x000d3003

08002ab4 <main>:
{
 8002ab4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002ab8:	b0bd      	sub	sp, #244	; 0xf4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aba:	4fe5      	ldr	r7, [pc, #916]	; (8002e50 <main+0x39c>)
  HAL_Init();
 8002abc:	f003 f96c 	bl	8005d98 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac0:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac2:	ad35      	add	r5, sp, #212	; 0xd4
  SystemClock_Config();
 8002ac4:	f7ff ff74 	bl	80029b0 <SystemClock_Config>
	init_env(&global_env);
 8002ac8:	48e2      	ldr	r0, [pc, #904]	; (8002e54 <main+0x3a0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aca:	2601      	movs	r6, #1
	init_env(&global_env);
 8002acc:	f7fe fac8 	bl	8001060 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 8002ad0:	48e1      	ldr	r0, [pc, #900]	; (8002e58 <main+0x3a4>)
 8002ad2:	f7fe fcd3 	bl	800147c <reset_flight_phase_detection>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad6:	2214      	movs	r2, #20
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4628      	mov	r0, r5
 8002adc:	f010 fdbb 	bl	8013656 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
  HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2102      	movs	r1, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ae8:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 8002aec:	48db      	ldr	r0, [pc, #876]	; (8002e5c <main+0x3a8>)
  hadc1.Instance = ADC1;
 8002aee:	f8df 93b0 	ldr.w	r9, [pc, #944]	; 8002ea0 <main+0x3ec>
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002af2:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002af6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002afa:	f04f 0b07 	mov.w	fp, #7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
  huart4.Instance = UART4;
 8002b02:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8002ea4 <main+0x3f0>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	9303      	str	r3, [sp, #12]
 8002b0c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b12:	f043 0304 	orr.w	r3, r3, #4
 8002b16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	9304      	str	r3, [sp, #16]
 8002b24:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	9305      	str	r3, [sp, #20]
 8002b3c:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	9306      	str	r3, [sp, #24]
 8002b54:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	9307      	str	r3, [sp, #28]
 8002b6c:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b72:	f043 0308 	orr.w	r3, r3, #8
 8002b76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	9308      	str	r3, [sp, #32]
 8002b84:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 8002b86:	f005 fa6f 	bl	8008068 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, CAMERA1_Pin|CAMERA2_Pin, GPIO_PIN_RESET);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002b90:	48b3      	ldr	r0, [pc, #716]	; (8002e60 <main+0x3ac>)
 8002b92:	f005 fa69 	bl	8008068 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED4_Pin|BUZZER_Pin|LED1_Pin
 8002b96:	2200      	movs	r2, #0
 8002b98:	f643 0103 	movw	r1, #14339	; 0x3803
 8002b9c:	48b1      	ldr	r0, [pc, #708]	; (8002e64 <main+0x3b0>)
 8002b9e:	f005 fa63 	bl	8008068 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	48af      	ldr	r0, [pc, #700]	; (8002e68 <main+0x3b4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	9437      	str	r4, [sp, #220]	; 0xdc
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bac:	e9cd 3435 	strd	r3, r4, [sp, #212]	; 0xd4
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8002bb0:	f005 f96a 	bl	8007e88 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb4:	2302      	movs	r3, #2
  HAL_GPIO_Init(PW_HOLD_GPIO_Port, &GPIO_InitStruct);
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	48a8      	ldr	r0, [pc, #672]	; (8002e5c <main+0x3a8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bba:	e9cd 3635 	strd	r3, r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbe:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(PW_HOLD_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	f005 f961 	bl	8007e88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CAMERA1_Pin|CAMERA2_Pin;
 8002bc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bca:	4629      	mov	r1, r5
 8002bcc:	48a4      	ldr	r0, [pc, #656]	; (8002e60 <main+0x3ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bce:	e9cd 3635 	strd	r3, r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bd6:	f005 f957 	bl	8007e88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|BUZZER_Pin|LED1_Pin
 8002bda:	f643 0303 	movw	r3, #14339	; 0x3803
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bde:	4629      	mov	r1, r5
 8002be0:	48a0      	ldr	r0, [pc, #640]	; (8002e64 <main+0x3b0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be2:	e9cd 3635 	strd	r3, r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be6:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bea:	f005 f94d 	bl	8007e88 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002bf2:	4622      	mov	r2, r4
 8002bf4:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bf6:	f043 0302 	orr.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002bfa:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c10:	4333      	orrs	r3, r6
 8002c12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
  ADC_MultiModeTypeDef multimode = {0};
 8002c1a:	af31      	add	r7, sp, #196	; 0xc4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c1c:	4033      	ands	r3, r6
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002c22:	f003 ff6f 	bl	8006b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002c26:	200b      	movs	r0, #11
 8002c28:	f003 ff9e 	bl	8006b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002c2c:	4622      	mov	r2, r4
 8002c2e:	2105      	movs	r1, #5
 8002c30:	200c      	movs	r0, #12
 8002c32:	f003 ff67 	bl	8006b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002c36:	200c      	movs	r0, #12
 8002c38:	f003 ff96 	bl	8006b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002c3c:	4622      	mov	r2, r4
 8002c3e:	2105      	movs	r1, #5
 8002c40:	200d      	movs	r0, #13
 8002c42:	f003 ff5f 	bl	8006b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002c46:	200d      	movs	r0, #13
 8002c48:	f003 ff8e 	bl	8006b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002c4c:	4622      	mov	r2, r4
 8002c4e:	2105      	movs	r1, #5
 8002c50:	200e      	movs	r0, #14
 8002c52:	f003 ff57 	bl	8006b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002c56:	200e      	movs	r0, #14
 8002c58:	f003 ff86 	bl	8006b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002c5c:	4622      	mov	r2, r4
 8002c5e:	2105      	movs	r1, #5
 8002c60:	200f      	movs	r0, #15
 8002c62:	f003 ff4f 	bl	8006b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002c66:	200f      	movs	r0, #15
 8002c68:	f003 ff7e 	bl	8006b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002c6c:	4622      	mov	r2, r4
 8002c6e:	2105      	movs	r1, #5
 8002c70:	2010      	movs	r0, #16
 8002c72:	f003 ff47 	bl	8006b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002c76:	2010      	movs	r0, #16
 8002c78:	f003 ff76 	bl	8006b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002c7c:	4622      	mov	r2, r4
 8002c7e:	2105      	movs	r1, #5
 8002c80:	2011      	movs	r0, #17
 8002c82:	f003 ff3f 	bl	8006b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002c86:	2011      	movs	r0, #17
 8002c88:	f003 ff6e 	bl	8006b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002c8c:	4622      	mov	r2, r4
 8002c8e:	4621      	mov	r1, r4
 8002c90:	202f      	movs	r0, #47	; 0x2f
 8002c92:	f003 ff37 	bl	8006b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002c96:	202f      	movs	r0, #47	; 0x2f
 8002c98:	f003 ff66 	bl	8006b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002c9c:	4622      	mov	r2, r4
 8002c9e:	2105      	movs	r1, #5
 8002ca0:	2038      	movs	r0, #56	; 0x38
 8002ca2:	f003 ff2f 	bl	8006b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ca6:	2038      	movs	r0, #56	; 0x38
 8002ca8:	f003 ff5e 	bl	8006b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002cac:	4622      	mov	r2, r4
 8002cae:	2105      	movs	r1, #5
 8002cb0:	2039      	movs	r0, #57	; 0x39
 8002cb2:	f003 ff27 	bl	8006b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002cb6:	2039      	movs	r0, #57	; 0x39
 8002cb8:	f003 ff56 	bl	8006b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8002cbc:	4622      	mov	r2, r4
 8002cbe:	2105      	movs	r1, #5
 8002cc0:	203c      	movs	r0, #60	; 0x3c
 8002cc2:	f003 ff1f 	bl	8006b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002cc6:	203c      	movs	r0, #60	; 0x3c
 8002cc8:	f003 ff4e 	bl	8006b68 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002ccc:	4621      	mov	r1, r4
 8002cce:	221c      	movs	r2, #28
 8002cd0:	4628      	mov	r0, r5
  ADC_MultiModeTypeDef multimode = {0};
 8002cd2:	9433      	str	r4, [sp, #204]	; 0xcc
 8002cd4:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
  ADC_ChannelConfTypeDef sConfig = {0};
 8002cd8:	f010 fcbd 	bl	8013656 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002cdc:	4a63      	ldr	r2, [pc, #396]	; (8002e6c <main+0x3b8>)
 8002cde:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ce2:	4648      	mov	r0, r9
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ce4:	f8c9 8010 	str.w	r8, [r9, #16]
  hadc1.Init.NbrOfConversion = 4;
 8002ce8:	f8c9 8018 	str.w	r8, [r9, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002cec:	f889 4014 	strb.w	r4, [r9, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002cf0:	f889 6015 	strb.w	r6, [r9, #21]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cf4:	f889 401c 	strb.w	r4, [r9, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002cf8:	f8c9 4034 	str.w	r4, [r9, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002cfc:	f889 4038 	strb.w	r4, [r9, #56]	; 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002d00:	e9c9 2300 	strd	r2, r3, [r9]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002d04:	e9c9 4602 	strd	r4, r6, [r9, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d08:	e9c9 4409 	strd	r4, r4, [r9, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d0c:	e9c9 440b 	strd	r4, r4, [r9, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d10:	f003 fd34 	bl	800677c <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002d14:	4639      	mov	r1, r7
 8002d16:	4648      	mov	r0, r9
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002d18:	9431      	str	r4, [sp, #196]	; 0xc4
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002d1a:	f003 fe43 	bl	80069a4 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d1e:	2306      	movs	r3, #6
 8002d20:	4953      	ldr	r1, [pc, #332]	; (8002e70 <main+0x3bc>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d22:	4648      	mov	r0, r9
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8002d24:	9337      	str	r3, [sp, #220]	; 0xdc
  sConfig.Offset = 0;
 8002d26:	943a      	str	r4, [sp, #232]	; 0xe8
  sConfig.OffsetSignedSaturation = DISABLE;
 8002d28:	f88d 40ed 	strb.w	r4, [sp, #237]	; 0xed
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d2c:	e9cd 1335 	strd	r1, r3, [sp, #212]	; 0xd4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002d30:	f240 73ff 	movw	r3, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d34:	4629      	mov	r1, r5
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d36:	e9cd 3838 	strd	r3, r8, [sp, #224]	; 0xe0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d3a:	f003 f8e7 	bl	8005f0c <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d3e:	f04f 080c 	mov.w	r8, #12
 8002d42:	4b4c      	ldr	r3, [pc, #304]	; (8002e74 <main+0x3c0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d44:	4629      	mov	r1, r5
 8002d46:	4648      	mov	r0, r9
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d48:	e9cd 3835 	strd	r3, r8, [sp, #212]	; 0xd4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d4c:	f003 f8de 	bl	8005f0c <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002d50:	2312      	movs	r3, #18
 8002d52:	4849      	ldr	r0, [pc, #292]	; (8002e78 <main+0x3c4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d54:	4629      	mov	r1, r5
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002d56:	e9cd 0335 	strd	r0, r3, [sp, #212]	; 0xd4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d5a:	4648      	mov	r0, r9
 8002d5c:	f003 f8d6 	bl	8005f0c <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002d60:	f8df c144 	ldr.w	ip, [pc, #324]	; 8002ea8 <main+0x3f4>
 8002d64:	2318      	movs	r3, #24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d66:	4629      	mov	r1, r5
 8002d68:	4648      	mov	r0, r9
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d6a:	f44f 2980 	mov.w	r9, #262144	; 0x40000
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002d6e:	e9cd c335 	strd	ip, r3, [sp, #212]	; 0xd4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d72:	f003 f8cb 	bl	8005f0c <HAL_ADC_ConfigChannel>
  hsd1.Instance = SDMMC1;
 8002d76:	4b41      	ldr	r3, [pc, #260]	; (8002e7c <main+0x3c8>)
 8002d78:	4a41      	ldr	r2, [pc, #260]	; (8002e80 <main+0x3cc>)
  hspi1.Instance = SPI1;
 8002d7a:	4842      	ldr	r0, [pc, #264]	; (8002e84 <main+0x3d0>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002d7c:	609c      	str	r4, [r3, #8]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002d7e:	e9c3 2400 	strd	r2, r4, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002d82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8002d86:	e9c3 4605 	strd	r4, r6, [r3, #20]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d8a:	e9c3 2403 	strd	r2, r4, [r3, #12]
  hspi1.Instance = SPI1;
 8002d8e:	4b3e      	ldr	r3, [pc, #248]	; (8002e88 <main+0x3d4>)
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002d90:	e9c0 3400 	strd	r3, r4, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d98:	e9c0 9b02 	strd	r9, fp, [r0, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d9c:	6183      	str	r3, [r0, #24]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d9e:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002da2:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCPolynomial = 0x0;
 8002da6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002daa:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002dae:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002db2:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002db6:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002dba:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002dbe:	f008 fa0d 	bl	800b1dc <HAL_SPI_Init>
  hspi2.Instance = SPI2;
 8002dc2:	4832      	ldr	r0, [pc, #200]	; (8002e8c <main+0x3d8>)
 8002dc4:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <main+0x3dc>)
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002dc6:	e9c0 3400 	strd	r3, r4, [r0]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002dca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dce:	e9c0 9b02 	strd	r9, fp, [r0, #8]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002dd2:	6183      	str	r3, [r0, #24]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dd4:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dd8:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi2.Init.CRCPolynomial = 0x0;
 8002ddc:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002de0:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002de4:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002de8:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002dec:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002df0:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002df4:	f008 f9f2 	bl	800b1dc <HAL_SPI_Init>
  hspi3.Instance = SPI3;
 8002df8:	4826      	ldr	r0, [pc, #152]	; (8002e94 <main+0x3e0>)
 8002dfa:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <main+0x3e4>)
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8002dfc:	e9c0 3400 	strd	r3, r4, [r0]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002e00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e04:	e9c0 9b02 	strd	r9, fp, [r0, #8]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002e08:	6183      	str	r3, [r0, #24]
  huart4.Init.BaudRate = 115200;
 8002e0a:	f44f 39e1 	mov.w	r9, #115200	; 0x1c200
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e0e:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e12:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi3.Init.CRCPolynomial = 0x0;
 8002e16:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002e1a:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002e1e:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002e22:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002e26:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002e2a:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002e2e:	f008 f9d5 	bl	800b1dc <HAL_SPI_Init>
  huart4.Init.BaudRate = 115200;
 8002e32:	4a1a      	ldr	r2, [pc, #104]	; (8002e9c <main+0x3e8>)
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e34:	4650      	mov	r0, sl
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e36:	f8ca 4028 	str.w	r4, [sl, #40]	; 0x28
  huart4.Init.BaudRate = 115200;
 8002e3a:	e9ca 2900 	strd	r2, r9, [sl]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002e3e:	e9ca 4804 	strd	r4, r8, [sl, #16]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002e42:	e9ca 4402 	strd	r4, r4, [sl, #8]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e46:	e9ca 4406 	strd	r4, r4, [sl, #24]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e4a:	e9ca 4408 	strd	r4, r4, [sl, #32]
 8002e4e:	e02d      	b.n	8002eac <main+0x3f8>
 8002e50:	58024400 	.word	0x58024400
 8002e54:	2400022c 	.word	0x2400022c
 8002e58:	2400023c 	.word	0x2400023c
 8002e5c:	58020400 	.word	0x58020400
 8002e60:	58021000 	.word	0x58021000
 8002e64:	58020c00 	.word	0x58020c00
 8002e68:	58020800 	.word	0x58020800
 8002e6c:	40022000 	.word	0x40022000
 8002e70:	21800100 	.word	0x21800100
 8002e74:	25b00200 	.word	0x25b00200
 8002e78:	2a000400 	.word	0x2a000400
 8002e7c:	2400cd60 	.word	0x2400cd60
 8002e80:	52007000 	.word	0x52007000
 8002e84:	2401b550 	.word	0x2401b550
 8002e88:	40013000 	.word	0x40013000
 8002e8c:	2400a994 	.word	0x2400a994
 8002e90:	40003800 	.word	0x40003800
 8002e94:	2400ef3c 	.word	0x2400ef3c
 8002e98:	40003c00 	.word	0x40003c00
 8002e9c:	40004c00 	.word	0x40004c00
 8002ea0:	2400efd4 	.word	0x2400efd4
 8002ea4:	2401b4c0 	.word	0x2401b4c0
 8002ea8:	2e300800 	.word	0x2e300800
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002eac:	f009 fd1b 	bl	800c8e6 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	4650      	mov	r0, sl
 8002eb4:	f009 fd99 	bl	800c9ea <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eb8:	4621      	mov	r1, r4
 8002eba:	4650      	mov	r0, sl
 8002ebc:	f009 fdb9 	bl	800ca32 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002ec0:	4650      	mov	r0, sl
  huart7.Instance = UART7;
 8002ec2:	f8df a3f4 	ldr.w	sl, [pc, #1012]	; 80032b8 <main+0x804>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002ec6:	f009 fd75 	bl	800c9b4 <HAL_UARTEx_DisableFifoMode>
  huart7.Instance = UART7;
 8002eca:	4acb      	ldr	r2, [pc, #812]	; (80031f8 <main+0x744>)
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002ecc:	4650      	mov	r0, sl
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ece:	f8ca 4028 	str.w	r4, [sl, #40]	; 0x28
  huart7.Init.BaudRate = 115200;
 8002ed2:	e9ca 2900 	strd	r2, r9, [sl]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002ed6:	e9ca 4804 	strd	r4, r8, [sl, #16]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002eda:	e9ca 4402 	strd	r4, r4, [sl, #8]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ede:	e9ca 4406 	strd	r4, r4, [sl, #24]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ee2:	e9ca 4408 	strd	r4, r4, [sl, #32]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002ee6:	f009 fcfe 	bl	800c8e6 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eea:	4621      	mov	r1, r4
 8002eec:	4650      	mov	r0, sl
 8002eee:	f009 fd7c 	bl	800c9ea <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	4650      	mov	r0, sl
 8002ef6:	f009 fd9c 	bl	800ca32 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002efa:	4650      	mov	r0, sl
  huart1.Instance = USART1;
 8002efc:	f8df a3bc 	ldr.w	sl, [pc, #956]	; 80032bc <main+0x808>
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002f00:	f009 fd58 	bl	800c9b4 <HAL_UARTEx_DisableFifoMode>
  huart1.Instance = USART1;
 8002f04:	4abd      	ldr	r2, [pc, #756]	; (80031fc <main+0x748>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f06:	4650      	mov	r0, sl
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f08:	f8ca 4028 	str.w	r4, [sl, #40]	; 0x28
  huart1.Init.BaudRate = 115200;
 8002f0c:	e9ca 2900 	strd	r2, r9, [sl]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f10:	e9ca 4804 	strd	r4, r8, [sl, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f14:	e9ca 4402 	strd	r4, r4, [sl, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f18:	e9ca 4406 	strd	r4, r4, [sl, #24]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f1c:	e9ca 4408 	strd	r4, r4, [sl, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f20:	f009 fce1 	bl	800c8e6 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f24:	4621      	mov	r1, r4
 8002f26:	4650      	mov	r0, sl
 8002f28:	f009 fd5f 	bl	800c9ea <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	4650      	mov	r0, sl
 8002f30:	f009 fd7f 	bl	800ca32 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f34:	4650      	mov	r0, sl
  huart2.Instance = USART2;
 8002f36:	f8df a388 	ldr.w	sl, [pc, #904]	; 80032c0 <main+0x80c>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f3a:	f009 fd3b 	bl	800c9b4 <HAL_UARTEx_DisableFifoMode>
  huart2.Instance = USART2;
 8002f3e:	4ab0      	ldr	r2, [pc, #704]	; (8003200 <main+0x74c>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f40:	4650      	mov	r0, sl
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f42:	f8ca 4028 	str.w	r4, [sl, #40]	; 0x28
  huart2.Init.BaudRate = 115200;
 8002f46:	e9ca 2900 	strd	r2, r9, [sl]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f4a:	e9ca 4804 	strd	r4, r8, [sl, #16]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f4e:	e9ca 4402 	strd	r4, r4, [sl, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f52:	e9ca 4406 	strd	r4, r4, [sl, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f56:	e9ca 4408 	strd	r4, r4, [sl, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f5a:	f009 fcc4 	bl	800c8e6 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f5e:	4621      	mov	r1, r4
 8002f60:	4650      	mov	r0, sl
 8002f62:	f009 fd42 	bl	800c9ea <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f66:	4621      	mov	r1, r4
 8002f68:	4650      	mov	r0, sl
 8002f6a:	f009 fd62 	bl	800ca32 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002f6e:	4650      	mov	r0, sl
  huart3.Instance = USART3;
 8002f70:	f8df a350 	ldr.w	sl, [pc, #848]	; 80032c4 <main+0x810>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002f74:	f009 fd1e 	bl	800c9b4 <HAL_UARTEx_DisableFifoMode>
  huart3.Instance = USART3;
 8002f78:	4aa2      	ldr	r2, [pc, #648]	; (8003204 <main+0x750>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f7a:	4650      	mov	r0, sl
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f7c:	f8ca 4028 	str.w	r4, [sl, #40]	; 0x28
  huart3.Init.BaudRate = 115200;
 8002f80:	e9ca 2900 	strd	r2, r9, [sl]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f84:	e9ca 4804 	strd	r4, r8, [sl, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f88:	e9ca 4402 	strd	r4, r4, [sl, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f8c:	e9ca 4406 	strd	r4, r4, [sl, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f90:	e9ca 4408 	strd	r4, r4, [sl, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f94:	f009 fca7 	bl	800c8e6 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f98:	4621      	mov	r1, r4
 8002f9a:	4650      	mov	r0, sl
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002f9c:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fa0:	f009 fd23 	bl	800c9ea <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	4650      	mov	r0, sl
	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 8002fa8:	f8df 931c 	ldr.w	r9, [pc, #796]	; 80032c8 <main+0x814>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fac:	f009 fd41 	bl	800ca32 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002fb0:	4650      	mov	r0, sl
 8002fb2:	f009 fcff 	bl	800c9b4 <HAL_UARTEx_DisableFifoMode>
	command_mutex_only = osMutexNew(&command_mutex_attr);
 8002fb6:	f8df a314 	ldr.w	sl, [pc, #788]	; 80032cc <main+0x818>
  MX_FATFS_Init();
 8002fba:	f00a fdb3 	bl	800db24 <MX_FATFS_Init>
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002fbe:	f8df e310 	ldr.w	lr, [pc, #784]	; 80032d0 <main+0x81c>
  hspi4.Instance = SPI4;
 8002fc2:	4891      	ldr	r0, [pc, #580]	; (8003208 <main+0x754>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002fc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fc8:	e9c0 e300 	strd	lr, r3, [r0]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002fcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002fd0:	e9c0 8306 	strd	r8, r3, [r0, #24]
	const osMutexAttr_t sb1_mutex_attr = { "sb1_mutex_only", // human readable mutex name
 8002fd4:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 80032d4 <main+0x820>
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fd8:	e9c0 4b02 	strd	r4, fp, [r0, #8]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fdc:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fe0:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi4.Init.CRCPolynomial = 0x0;
 8002fe4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002fe8:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002fec:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002ff0:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002ff4:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002ff8:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002ffc:	f008 f8ee 	bl	800b1dc <HAL_SPI_Init>
	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8003000:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 80032d8 <main+0x824>
	MX_USB_DEVICE_Init();
 8003004:	f010 f89c 	bl	8013140 <MX_USB_DEVICE_Init>
	vTraceEnable(TRC_INIT);
 8003008:	4620      	mov	r0, r4
 800300a:	f002 f97b 	bl	8005304 <vTraceEnable>
  osKernelInitialize();
 800300e:	f00d f86f 	bl	80100f0 <osKernelInitialize>
	const osMutexAttr_t sb1_mutex_attr = { "sb1_mutex_only", // human readable mutex name
 8003012:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8003016:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800301a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 800301e:	4660      	mov	r0, ip
 8003020:	f00d f95c 	bl	80102dc <osMutexNew>
 8003024:	4b79      	ldr	r3, [pc, #484]	; (800320c <main+0x758>)
	const osMutexAttr_t sb2_mutex_attr = { "sb2_mutex_only", // human readable mutex name
 8003026:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 800302a:	6018      	str	r0, [r3, #0]
	const osMutexAttr_t sb2_mutex_attr = { "sb2_mutex_only", // human readable mutex name
 800302c:	f108 0310 	add.w	r3, r8, #16
 8003030:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003032:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 8003036:	4660      	mov	r0, ip
 8003038:	f00d f950 	bl	80102dc <osMutexNew>
 800303c:	4a74      	ldr	r2, [pc, #464]	; (8003210 <main+0x75c>)
	const osMutexAttr_t sb3_mutex_attr = { "sb3_mutex_only", // human readable mutex name
 800303e:	f108 0320 	add.w	r3, r8, #32
 8003042:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 8003046:	6010      	str	r0, [r2, #0]
	const osMutexAttr_t sb3_mutex_attr = { "sb3_mutex_only", // human readable mutex name
 8003048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800304a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 800304e:	4660      	mov	r0, ip
 8003050:	f00d f944 	bl	80102dc <osMutexNew>
 8003054:	496f      	ldr	r1, [pc, #444]	; (8003214 <main+0x760>)
	const osMutexAttr_t state_est_mutex_attr = { "state_est_mutex_only", // human readable mutex name
 8003056:	f108 0330 	add.w	r3, r8, #48	; 0x30
 800305a:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 800305e:	6008      	str	r0, [r1, #0]
	const osMutexAttr_t state_est_mutex_attr = { "state_est_mutex_only", // human readable mutex name
 8003060:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003062:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 8003066:	4660      	mov	r0, ip
 8003068:	f00d f938 	bl	80102dc <osMutexNew>
 800306c:	4b6a      	ldr	r3, [pc, #424]	; (8003218 <main+0x764>)
	const osMutexAttr_t controller_mutex_attr = { "controller_mutex_only", // human readable mutex name
 800306e:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 8003072:	6018      	str	r0, [r3, #0]
	const osMutexAttr_t controller_mutex_attr = { "controller_mutex_only", // human readable mutex name
 8003074:	f108 0340 	add.w	r3, r8, #64	; 0x40
 8003078:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800307a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 800307e:	4660      	mov	r0, ip
 8003080:	f00d f92c 	bl	80102dc <osMutexNew>
 8003084:	4a65      	ldr	r2, [pc, #404]	; (800321c <main+0x768>)
	const osMutexAttr_t fsm_mutex_attr = { "fsm_mutex_only", // human readable mutex name
 8003086:	f108 0350 	add.w	r3, r8, #80	; 0x50
 800308a:	f10d 0c74 	add.w	ip, sp, #116	; 0x74
	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 800308e:	6010      	str	r0, [r2, #0]
	const osMutexAttr_t fsm_mutex_attr = { "fsm_mutex_only", // human readable mutex name
 8003090:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003092:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 8003096:	4660      	mov	r0, ip
 8003098:	f00d f920 	bl	80102dc <osMutexNew>
 800309c:	4960      	ldr	r1, [pc, #384]	; (8003220 <main+0x76c>)
	const osMutexAttr_t environment_mutex_attr = { "environment_mutex_only", // human readable mutex name
 800309e:	f108 0360 	add.w	r3, r8, #96	; 0x60
 80030a2:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 80030a6:	6008      	str	r0, [r1, #0]
	const osMutexAttr_t environment_mutex_attr = { "environment_mutex_only", // human readable mutex name
 80030a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030aa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 80030ae:	4660      	mov	r0, ip
 80030b0:	f00d f914 	bl	80102dc <osMutexNew>
 80030b4:	4b5b      	ldr	r3, [pc, #364]	; (8003224 <main+0x770>)
	const osMutexAttr_t usb_data_mutex_attr = { "usb_data_mutex_only", // human readable mutex name
 80030b6:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 80030ba:	6018      	str	r0, [r3, #0]
	const osMutexAttr_t usb_data_mutex_attr = { "usb_data_mutex_only", // human readable mutex name
 80030bc:	f108 0370 	add.w	r3, r8, #112	; 0x70
 80030c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 80030c6:	4660      	mov	r0, ip
 80030c8:	f00d f908 	bl	80102dc <osMutexNew>
	const osMutexAttr_t command_mutex_attr = { "command_mutex_only", // human readable mutex name
 80030cc:	f108 0380 	add.w	r3, r8, #128	; 0x80
 80030d0:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 80030d4:	f8cb 0000 	str.w	r0, [fp]
	const osMutexAttr_t command_mutex_attr = { "command_mutex_only", // human readable mutex name
 80030d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030da:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	command_mutex_only = osMutexNew(&command_mutex_attr);
 80030de:	4660      	mov	r0, ip
 80030e0:	f00d f8fc 	bl	80102dc <osMutexNew>
	const osMutexAttr_t gps_mutex_attr = { "gps_mutex_only", // human readable mutex name
 80030e4:	f108 0390 	add.w	r3, r8, #144	; 0x90
 80030e8:	f10d 0cb4 	add.w	ip, sp, #180	; 0xb4
	command_mutex_only = osMutexNew(&command_mutex_attr);
 80030ec:	f8ca 0000 	str.w	r0, [sl]
	const osMutexAttr_t gps_mutex_attr = { "gps_mutex_only", // human readable mutex name
 80030f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030f2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 80030f6:	4660      	mov	r0, ip
 80030f8:	f00d f8f0 	bl	80102dc <osMutexNew>
	const osMutexAttr_t battery_mutex_attr = { "battery_mutex_only", // human readable mutex name
 80030fc:	f108 03a0 	add.w	r3, r8, #160	; 0xa0
	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 8003100:	f8c9 0000 	str.w	r0, [r9]
	const osMutexAttr_t motor_mutex_attr = { "motor_mutex_only", // human readable mutex name
 8003104:	f108 08b0 	add.w	r8, r8, #176	; 0xb0
	const osMutexAttr_t battery_mutex_attr = { "battery_mutex_only", // human readable mutex name
 8003108:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800310a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	battery_mutex_only = osMutexNew(&battery_mutex_attr);
 800310e:	4638      	mov	r0, r7
 8003110:	4f45      	ldr	r7, [pc, #276]	; (8003228 <main+0x774>)
 8003112:	f00d f8e3 	bl	80102dc <osMutexNew>
 8003116:	6038      	str	r0, [r7, #0]
	const osMutexAttr_t motor_mutex_attr = { "motor_mutex_only", // human readable mutex name
 8003118:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800311c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	motor_mutex_only = osMutexNew(&motor_mutex_attr);
 8003120:	4628      	mov	r0, r5
	env_mutex.mutex = environment_mutex_only;
 8003122:	4d40      	ldr	r5, [pc, #256]	; (8003224 <main+0x770>)
	motor_mutex_only = osMutexNew(&motor_mutex_attr);
 8003124:	f00d f8da 	bl	80102dc <osMutexNew>
 8003128:	4b40      	ldr	r3, [pc, #256]	; (800322c <main+0x778>)
	sb3_mutex.mutex = sb3_mutex_only;
 800312a:	493a      	ldr	r1, [pc, #232]	; (8003214 <main+0x760>)
	motor_mutex_only = osMutexNew(&motor_mutex_attr);
 800312c:	6018      	str	r0, [r3, #0]
	sb1_mutex.mutex = sb1_mutex_only;
 800312e:	4b37      	ldr	r3, [pc, #220]	; (800320c <main+0x758>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <main+0x77c>)
 8003134:	601a      	str	r2, [r3, #0]
	sb2_mutex.mutex = sb2_mutex_only;
 8003136:	4a36      	ldr	r2, [pc, #216]	; (8003210 <main+0x75c>)
 8003138:	4b3e      	ldr	r3, [pc, #248]	; (8003234 <main+0x780>)
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	601a      	str	r2, [r3, #0]
	sb3_mutex.mutex = sb3_mutex_only;
 800313e:	680a      	ldr	r2, [r1, #0]
 8003140:	4b3d      	ldr	r3, [pc, #244]	; (8003238 <main+0x784>)
	fsm_mutex.mutex = fsm_mutex_only;
 8003142:	4937      	ldr	r1, [pc, #220]	; (8003220 <main+0x76c>)
	sb3_mutex.mutex = sb3_mutex_only;
 8003144:	601a      	str	r2, [r3, #0]
	env_mutex.mutex = environment_mutex_only;
 8003146:	682a      	ldr	r2, [r5, #0]
 8003148:	4b3c      	ldr	r3, [pc, #240]	; (800323c <main+0x788>)
 800314a:	601a      	str	r2, [r3, #0]
	fsm_mutex.mutex = fsm_mutex_only;
 800314c:	680a      	ldr	r2, [r1, #0]
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 800314e:	2196      	movs	r1, #150	; 0x96
	fsm_mutex.mutex = fsm_mutex_only;
 8003150:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <main+0x78c>)
 8003152:	601a      	str	r2, [r3, #0]
	controller_mutex.mutex = controller_mutex_only;
 8003154:	4a31      	ldr	r2, [pc, #196]	; (800321c <main+0x768>)
 8003156:	4b3b      	ldr	r3, [pc, #236]	; (8003244 <main+0x790>)
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	601a      	str	r2, [r3, #0]
	state_est_mutex.mutex = state_est_mutex_only;
 800315c:	4b2e      	ldr	r3, [pc, #184]	; (8003218 <main+0x764>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b39      	ldr	r3, [pc, #228]	; (8003248 <main+0x794>)
 8003162:	601a      	str	r2, [r3, #0]
	usb_data_mutex.mutex = usb_data_mutex_only;
 8003164:	f8db 2000 	ldr.w	r2, [fp]
 8003168:	4b38      	ldr	r3, [pc, #224]	; (800324c <main+0x798>)
 800316a:	601a      	str	r2, [r3, #0]
	command_mutex.mutex = command_mutex_only;
 800316c:	f8da 2000 	ldr.w	r2, [sl]
 8003170:	4b37      	ldr	r3, [pc, #220]	; (8003250 <main+0x79c>)
 8003172:	601a      	str	r2, [r3, #0]
	gps_mutex.mutex = gps_mutex_only;
 8003174:	f8d9 2000 	ldr.w	r2, [r9]
 8003178:	4b36      	ldr	r3, [pc, #216]	; (8003254 <main+0x7a0>)
 800317a:	601a      	str	r2, [r3, #0]
	battery_mutex.mutex = battery_mutex_only;
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	4b36      	ldr	r3, [pc, #216]	; (8003258 <main+0x7a4>)
 8003180:	601a      	str	r2, [r3, #0]
	global_telemetry_command = IDLE_COMMAND;
 8003182:	229b      	movs	r2, #155	; 0x9b
	motor_mutex.mutex = motor_mutex_only;
 8003184:	4b35      	ldr	r3, [pc, #212]	; (800325c <main+0x7a8>)
 8003186:	6018      	str	r0, [r3, #0]
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8003188:	2080      	movs	r0, #128	; 0x80
	global_flight_phase_detection.flight_phase = IDLE;
 800318a:	4b35      	ldr	r3, [pc, #212]	; (8003260 <main+0x7ac>)
 800318c:	701e      	strb	r6, [r3, #0]
	global_flight_phase_detection.mach_regime = SUBSONIC;
 800318e:	705e      	strb	r6, [r3, #1]
	global_telemetry_command = IDLE_COMMAND;
 8003190:	4b34      	ldr	r3, [pc, #208]	; (8003264 <main+0x7b0>)
 8003192:	701a      	strb	r2, [r3, #0]
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8003194:	4622      	mov	r2, r4
 8003196:	f00d fa27 	bl	80105e8 <osMessageQueueNew>
 800319a:	4b33      	ldr	r3, [pc, #204]	; (8003268 <main+0x7b4>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800319c:	4a33      	ldr	r2, [pc, #204]	; (800326c <main+0x7b8>)
 800319e:	4621      	mov	r1, r4
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 80031a0:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80031a2:	4833      	ldr	r0, [pc, #204]	; (8003270 <main+0x7bc>)
 80031a4:	f00d f806 	bl	80101b4 <osThreadNew>
 80031a8:	4b32      	ldr	r3, [pc, #200]	; (8003274 <main+0x7c0>)
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 80031aa:	4a33      	ldr	r2, [pc, #204]	; (8003278 <main+0x7c4>)
 80031ac:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80031ae:	6018      	str	r0, [r3, #0]
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 80031b0:	4832      	ldr	r0, [pc, #200]	; (800327c <main+0x7c8>)
 80031b2:	f00c ffff 	bl	80101b4 <osThreadNew>
 80031b6:	4b32      	ldr	r3, [pc, #200]	; (8003280 <main+0x7cc>)
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 80031b8:	4a32      	ldr	r2, [pc, #200]	; (8003284 <main+0x7d0>)
 80031ba:	4621      	mov	r1, r4
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 80031bc:	6018      	str	r0, [r3, #0]
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 80031be:	4832      	ldr	r0, [pc, #200]	; (8003288 <main+0x7d4>)
 80031c0:	f00c fff8 	bl	80101b4 <osThreadNew>
 80031c4:	4b31      	ldr	r3, [pc, #196]	; (800328c <main+0x7d8>)
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 80031c6:	4a32      	ldr	r2, [pc, #200]	; (8003290 <main+0x7dc>)
 80031c8:	4621      	mov	r1, r4
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 80031ca:	6018      	str	r0, [r3, #0]
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 80031cc:	4831      	ldr	r0, [pc, #196]	; (8003294 <main+0x7e0>)
 80031ce:	f00c fff1 	bl	80101b4 <osThreadNew>
 80031d2:	4b31      	ldr	r3, [pc, #196]	; (8003298 <main+0x7e4>)
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 80031d4:	4a31      	ldr	r2, [pc, #196]	; (800329c <main+0x7e8>)
 80031d6:	4621      	mov	r1, r4
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 80031d8:	6018      	str	r0, [r3, #0]
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 80031da:	4831      	ldr	r0, [pc, #196]	; (80032a0 <main+0x7ec>)
 80031dc:	f00c ffea 	bl	80101b4 <osThreadNew>
 80031e0:	4b30      	ldr	r3, [pc, #192]	; (80032a4 <main+0x7f0>)
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 80031e2:	4a31      	ldr	r2, [pc, #196]	; (80032a8 <main+0x7f4>)
 80031e4:	4621      	mov	r1, r4
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 80031e6:	6018      	str	r0, [r3, #0]
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 80031e8:	4830      	ldr	r0, [pc, #192]	; (80032ac <main+0x7f8>)
 80031ea:	f00c ffe3 	bl	80101b4 <osThreadNew>
 80031ee:	4b30      	ldr	r3, [pc, #192]	; (80032b0 <main+0x7fc>)
  task_fsmHandle = osThreadNew(vTaskFsm, NULL, &task_fsm_attributes);
 80031f0:	4a30      	ldr	r2, [pc, #192]	; (80032b4 <main+0x800>)
 80031f2:	4621      	mov	r1, r4
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 80031f4:	6018      	str	r0, [r3, #0]
 80031f6:	e071      	b.n	80032dc <main+0x828>
 80031f8:	40007800 	.word	0x40007800
 80031fc:	40011000 	.word	0x40011000
 8003200:	40004400 	.word	0x40004400
 8003204:	40004800 	.word	0x40004800
 8003208:	240132b4 	.word	0x240132b4
 800320c:	240133b8 	.word	0x240133b8
 8003210:	2401d5dc 	.word	0x2401d5dc
 8003214:	2400cea4 	.word	0x2400cea4
 8003218:	240132a0 	.word	0x240132a0
 800321c:	24021808 	.word	0x24021808
 8003220:	240133b4 	.word	0x240133b4
 8003224:	240132a8 	.word	0x240132a8
 8003228:	240132a4 	.word	0x240132a4
 800322c:	240153bc 	.word	0x240153bc
 8003230:	24011130 	.word	0x24011130
 8003234:	2402188c 	.word	0x2402188c
 8003238:	240132ac 	.word	0x240132ac
 800323c:	2400cf30 	.word	0x2400cf30
 8003240:	2400a98c 	.word	0x2400a98c
 8003244:	2400efc4 	.word	0x2400efc4
 8003248:	240173c4 	.word	0x240173c4
 800324c:	2400cc80 	.word	0x2400cc80
 8003250:	2400cf28 	.word	0x2400cf28
 8003254:	2401b458 	.word	0x2401b458
 8003258:	2400aa1c 	.word	0x2400aa1c
 800325c:	2400ab28 	.word	0x2400ab28
 8003260:	2400023c 	.word	0x2400023c
 8003264:	240173f0 	.word	0x240173f0
 8003268:	2401b5d8 	.word	0x2401b5d8
 800326c:	080154e0 	.word	0x080154e0
 8003270:	08002991 	.word	0x08002991
 8003274:	2400a910 	.word	0x2400a910
 8003278:	080157bc 	.word	0x080157bc
 800327c:	08004c11 	.word	0x08004c11
 8003280:	2400f0b4 	.word	0x2400f0b4
 8003284:	0801569c 	.word	0x0801569c
 8003288:	08003f8d 	.word	0x08003f8d
 800328c:	24021888 	.word	0x24021888
 8003290:	08015798 	.word	0x08015798
 8003294:	08004af1 	.word	0x08004af1
 8003298:	2400cf38 	.word	0x2400cf38
 800329c:	08015774 	.word	0x08015774
 80032a0:	08004749 	.word	0x08004749
 80032a4:	2400ac1c 	.word	0x2400ac1c
 80032a8:	0801572c 	.word	0x0801572c
 80032ac:	08004409 	.word	0x08004409
 80032b0:	2400f0b0 	.word	0x2400f0b0
 80032b4:	080156e4 	.word	0x080156e4
 80032b8:	2400aa24 	.word	0x2400aa24
 80032bc:	2401119c 	.word	0x2401119c
 80032c0:	2401d640 	.word	0x2401d640
 80032c4:	2400ab30 	.word	0x2400ab30
 80032c8:	240173c0 	.word	0x240173c0
 80032cc:	2400cf24 	.word	0x2400cf24
 80032d0:	40013400 	.word	0x40013400
 80032d4:	0801534c 	.word	0x0801534c
 80032d8:	2400cde0 	.word	0x2400cde0
  task_fsmHandle = osThreadNew(vTaskFsm, NULL, &task_fsm_attributes);
 80032dc:	4815      	ldr	r0, [pc, #84]	; (8003334 <main+0x880>)
 80032de:	f00c ff69 	bl	80101b4 <osThreadNew>
 80032e2:	4b15      	ldr	r3, [pc, #84]	; (8003338 <main+0x884>)
  task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 80032e4:	4a15      	ldr	r2, [pc, #84]	; (800333c <main+0x888>)
 80032e6:	4621      	mov	r1, r4
  task_fsmHandle = osThreadNew(vTaskFsm, NULL, &task_fsm_attributes);
 80032e8:	6018      	str	r0, [r3, #0]
  task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 80032ea:	4815      	ldr	r0, [pc, #84]	; (8003340 <main+0x88c>)
 80032ec:	f00c ff62 	bl	80101b4 <osThreadNew>
 80032f0:	4b14      	ldr	r3, [pc, #80]	; (8003344 <main+0x890>)
  task_batteryHandle = osThreadNew(vTaskBattery, NULL, &task_battery_attributes);
 80032f2:	4a15      	ldr	r2, [pc, #84]	; (8003348 <main+0x894>)
 80032f4:	4621      	mov	r1, r4
  task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 80032f6:	6018      	str	r0, [r3, #0]
  task_batteryHandle = osThreadNew(vTaskBattery, NULL, &task_battery_attributes);
 80032f8:	4814      	ldr	r0, [pc, #80]	; (800334c <main+0x898>)
 80032fa:	f00c ff5b 	bl	80101b4 <osThreadNew>
 80032fe:	4b14      	ldr	r3, [pc, #80]	; (8003350 <main+0x89c>)
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 8003300:	4a14      	ldr	r2, [pc, #80]	; (8003354 <main+0x8a0>)
 8003302:	4621      	mov	r1, r4
  task_batteryHandle = osThreadNew(vTaskBattery, NULL, &task_battery_attributes);
 8003304:	6018      	str	r0, [r3, #0]
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 8003306:	4814      	ldr	r0, [pc, #80]	; (8003358 <main+0x8a4>)
 8003308:	f00c ff54 	bl	80101b4 <osThreadNew>
 800330c:	4b13      	ldr	r3, [pc, #76]	; (800335c <main+0x8a8>)
  task_peripheralsHandle = osThreadNew(vTaskPeripherals, NULL, &task_peripherals_attributes);
 800330e:	4a14      	ldr	r2, [pc, #80]	; (8003360 <main+0x8ac>)
 8003310:	4621      	mov	r1, r4
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 8003312:	6018      	str	r0, [r3, #0]
  task_peripheralsHandle = osThreadNew(vTaskPeripherals, NULL, &task_peripherals_attributes);
 8003314:	4813      	ldr	r0, [pc, #76]	; (8003364 <main+0x8b0>)
 8003316:	f00c ff4d 	bl	80101b4 <osThreadNew>
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <main+0x8b4>)
  task_flashHandle = osThreadNew(vTaskFlash, NULL, &task_flash_attributes);
 800331c:	4a13      	ldr	r2, [pc, #76]	; (800336c <main+0x8b8>)
 800331e:	4621      	mov	r1, r4
  task_peripheralsHandle = osThreadNew(vTaskPeripherals, NULL, &task_peripherals_attributes);
 8003320:	6018      	str	r0, [r3, #0]
  task_flashHandle = osThreadNew(vTaskFlash, NULL, &task_flash_attributes);
 8003322:	4813      	ldr	r0, [pc, #76]	; (8003370 <main+0x8bc>)
 8003324:	f00c ff46 	bl	80101b4 <osThreadNew>
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <main+0x8c0>)
 800332a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800332c:	f00c ff0a 	bl	8010144 <osKernelStart>
 8003330:	e7fe      	b.n	8003330 <main+0x87c>
 8003332:	bf00      	nop
 8003334:	080040c9 	.word	0x080040c9
 8003338:	24021884 	.word	0x24021884
 800333c:	08015708 	.word	0x08015708
 8003340:	080041b9 	.word	0x080041b9
 8003344:	2400a894 	.word	0x2400a894
 8003348:	08015678 	.word	0x08015678
 800334c:	08003d79 	.word	0x08003d79
 8003350:	2401f7a4 	.word	0x2401f7a4
 8003354:	080157e0 	.word	0x080157e0
 8003358:	08004f39 	.word	0x08004f39
 800335c:	2401b454 	.word	0x2401b454
 8003360:	08015750 	.word	0x08015750
 8003364:	08004599 	.word	0x08004599
 8003368:	24011138 	.word	0x24011138
 800336c:	080156c0 	.word	0x080156c0
 8003370:	08004091 	.word	0x08004091
 8003374:	2400cea8 	.word	0x2400cea8

08003378 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003378:	6802      	ldr	r2, [r0, #0]
 800337a:	4b03      	ldr	r3, [pc, #12]	; (8003388 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800337c:	429a      	cmp	r2, r3
 800337e:	d101      	bne.n	8003384 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003380:	f002 bd38 	b.w	8005df4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40010000 	.word	0x40010000

0800338c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800338c:	4770      	bx	lr
	...

08003390 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003390:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <HAL_MspInit+0x20>)
{
 8003392:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003394:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003398:	f042 0202 	orr.w	r2, r2, #2
 800339c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80033a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ac:	b002      	add	sp, #8
 80033ae:	4770      	bx	lr
 80033b0:	58024400 	.word	0x58024400

080033b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ba:	2214      	movs	r2, #20
 80033bc:	2100      	movs	r1, #0
 80033be:	a803      	add	r0, sp, #12
 80033c0:	f010 f949 	bl	8013656 <memset>
  if(hadc->Instance==ADC1)
 80033c4:	6832      	ldr	r2, [r6, #0]
 80033c6:	4b2c      	ldr	r3, [pc, #176]	; (8003478 <HAL_ADC_MspInit+0xc4>)
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d152      	bne.n	8003472 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80033cc:	4b2b      	ldr	r3, [pc, #172]	; (800347c <HAL_ADC_MspInit+0xc8>)
    PC1     ------> ADC1_INP11
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = VSENS3V3_Pin|VSENSBAT_Pin|CURRBAT1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ce:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d0:	a903      	add	r1, sp, #12
 80033d2:	482b      	ldr	r0, [pc, #172]	; (8003480 <HAL_ADC_MspInit+0xcc>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80033d4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8

    GPIO_InitStruct.Pin = CURRBAT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2500      	movs	r5, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 80033da:	f042 0220 	orr.w	r2, r2, #32
 80033de:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80033e2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80033e6:	f002 0220 	and.w	r2, r2, #32
 80033ea:	9200      	str	r2, [sp, #0]
 80033ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80033f2:	f042 0204 	orr.w	r2, r2, #4
 80033f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80033fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80033fe:	f002 0204 	and.w	r2, r2, #4
 8003402:	9201      	str	r2, [sp, #4]
 8003404:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003406:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800340a:	f042 0202 	orr.w	r2, r2, #2
 800340e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	9302      	str	r3, [sp, #8]
 800341c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800341e:	2323      	movs	r3, #35	; 0x23
 8003420:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003424:	f004 fd30 	bl	8007e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CURRBAT2_Pin;
 8003428:	2301      	movs	r3, #1
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 800342a:	a903      	add	r1, sp, #12
 800342c:	4815      	ldr	r0, [pc, #84]	; (8003484 <HAL_ADC_MspInit+0xd0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003430:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 8003434:	f004 fd28 	bl	8007e88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8003438:	4c13      	ldr	r4, [pc, #76]	; (8003488 <HAL_ADC_MspInit+0xd4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800343a:	2309      	movs	r3, #9
 800343c:	4a13      	ldr	r2, [pc, #76]	; (800348c <HAL_ADC_MspInit+0xd8>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800343e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003442:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003446:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800344a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800344e:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003456:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800345a:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800345c:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003460:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003464:	f003 fd1e 	bl	8006ea4 <HAL_DMA_Init>
 8003468:	b108      	cbz	r0, 800346e <HAL_ADC_MspInit+0xba>
    {
      Error_Handler();
 800346a:	f7ff ff8f 	bl	800338c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800346e:	64f4      	str	r4, [r6, #76]	; 0x4c
 8003470:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003472:	b008      	add	sp, #32
 8003474:	bd70      	pop	{r4, r5, r6, pc}
 8003476:	bf00      	nop
 8003478:	40022000 	.word	0x40022000
 800347c:	58024400 	.word	0x58024400
 8003480:	58020800 	.word	0x58020800
 8003484:	58020400 	.word	0x58020400
 8003488:	2401333c 	.word	0x2401333c
 800348c:	40020470 	.word	0x40020470

08003490 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003496:	2214      	movs	r2, #20
 8003498:	2100      	movs	r1, #0
 800349a:	a803      	add	r0, sp, #12
 800349c:	f010 f8db 	bl	8013656 <memset>
  if(hsd->Instance==SDMMC1)
 80034a0:	6822      	ldr	r2, [r4, #0]
 80034a2:	4b26      	ldr	r3, [pc, #152]	; (800353c <HAL_SD_MspInit+0xac>)
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d146      	bne.n	8003536 <HAL_SD_MspInit+0xa6>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80034a8:	4b25      	ldr	r3, [pc, #148]	; (8003540 <HAL_SD_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80034aa:	250c      	movs	r5, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ac:	2402      	movs	r4, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80034ae:	2603      	movs	r6, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80034b0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b4:	eb0d 0105 	add.w	r1, sp, r5
 80034b8:	4822      	ldr	r0, [pc, #136]	; (8003544 <HAL_SD_MspInit+0xb4>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80034ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80034be:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80034c2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80034c6:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80034ca:	9200      	str	r2, [sp, #0]
 80034cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034d2:	f042 0204 	orr.w	r2, r2, #4
 80034d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80034da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034de:	f002 0204 	and.w	r2, r2, #4
 80034e2:	9201      	str	r2, [sp, #4]
 80034e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034ea:	f042 0208 	orr.w	r2, r2, #8
 80034ee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80034f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	9302      	str	r3, [sp, #8]
 80034fc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fe:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003502:	e9cd 6506 	strd	r6, r5, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003506:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800350a:	f004 fcbd 	bl	8007e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800350e:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003510:	eb0d 0105 	add.w	r1, sp, r5
 8003514:	480c      	ldr	r0, [pc, #48]	; (8003548 <HAL_SD_MspInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003516:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003518:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351e:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003522:	f004 fcb1 	bl	8007e88 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8003526:	2031      	movs	r0, #49	; 0x31
 8003528:	4622      	mov	r2, r4
 800352a:	2105      	movs	r1, #5
 800352c:	f003 faea 	bl	8006b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003530:	2031      	movs	r0, #49	; 0x31
 8003532:	f003 fb19 	bl	8006b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003536:	b008      	add	sp, #32
 8003538:	bd70      	pop	{r4, r5, r6, pc}
 800353a:	bf00      	nop
 800353c:	52007000 	.word	0x52007000
 8003540:	58024400 	.word	0x58024400
 8003544:	58020800 	.word	0x58020800
 8003548:	58020c00 	.word	0x58020c00

0800354c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800354c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003550:	b08e      	sub	sp, #56	; 0x38
 8003552:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003554:	2214      	movs	r2, #20
 8003556:	2100      	movs	r1, #0
 8003558:	a809      	add	r0, sp, #36	; 0x24
 800355a:	f010 f87c 	bl	8013656 <memset>
  if(hspi->Instance==SPI1)
 800355e:	682b      	ldr	r3, [r5, #0]
 8003560:	4abb      	ldr	r2, [pc, #748]	; (8003850 <HAL_SPI_MspInit+0x304>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d155      	bne.n	8003612 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003566:	4bbb      	ldr	r3, [pc, #748]	; (8003854 <HAL_SPI_MspInit+0x308>)
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15 (JTDI)     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003568:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800356a:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356c:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI1_CLK_ENABLE();
 800356e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003572:	48b9      	ldr	r0, [pc, #740]	; (8003858 <HAL_SPI_MspInit+0x30c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003574:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003578:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800357c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003580:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003584:	9200      	str	r2, [sp, #0]
 8003586:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003588:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	9301      	str	r3, [sp, #4]
 800359e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a0:	23a0      	movs	r3, #160	; 0xa0
 80035a2:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ac:	f004 fc6c 	bl	8007e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80035b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b4:	48a8      	ldr	r0, [pc, #672]	; (8003858 <HAL_SPI_MspInit+0x30c>)
 80035b6:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035b8:	940d      	str	r4, [sp, #52]	; 0x34

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 80035ba:	4ca8      	ldr	r4, [pc, #672]	; (800385c <HAL_SPI_MspInit+0x310>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035bc:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c2:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c6:	f004 fc5f 	bl	8007e88 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80035ca:	2325      	movs	r3, #37	; 0x25
 80035cc:	f8df e2c0 	ldr.w	lr, [pc, #704]	; 8003890 <HAL_SPI_MspInit+0x344>
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80035d0:	4620      	mov	r0, r4
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035d2:	61a6      	str	r6, [r4, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035d4:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80035d6:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035da:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035de:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80035e2:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035e6:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035ea:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80035ee:	f003 fc59 	bl	8006ea4 <HAL_DMA_Init>
 80035f2:	b108      	cbz	r0, 80035f8 <HAL_SPI_MspInit+0xac>
    {
      Error_Handler();
 80035f4:	f7ff feca 	bl	800338c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80035f8:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80035fa:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80035fc:	2200      	movs	r2, #0
 80035fe:	2105      	movs	r1, #5
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003600:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003602:	f003 fa7f 	bl	8006b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003606:	2023      	movs	r0, #35	; 0x23

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8003608:	f003 faae 	bl	8006b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800360c:	b00e      	add	sp, #56	; 0x38
 800360e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(hspi->Instance==SPI2)
 8003612:	4a93      	ldr	r2, [pc, #588]	; (8003860 <HAL_SPI_MspInit+0x314>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d151      	bne.n	80036bc <HAL_SPI_MspInit+0x170>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003618:	4b8e      	ldr	r3, [pc, #568]	; (8003854 <HAL_SPI_MspInit+0x308>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800361c:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361e:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003620:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003624:	488f      	ldr	r0, [pc, #572]	; (8003864 <HAL_SPI_MspInit+0x318>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800362a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800362e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003632:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003636:	9202      	str	r2, [sp, #8]
 8003638:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800363a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800363e:	f042 0202 	orr.w	r2, r2, #2
 8003642:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800364a:	940d      	str	r4, [sp, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	9303      	str	r3, [sp, #12]
 8003652:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003658:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365c:	f004 fc14 	bl	8007e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003660:	f44f 4320 	mov.w	r3, #40960	; 0xa000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003664:	487f      	ldr	r0, [pc, #508]	; (8003864 <HAL_SPI_MspInit+0x318>)
 8003666:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003668:	940d      	str	r4, [sp, #52]	; 0x34
    hdma_spi2_rx.Instance = DMA1_Stream1;
 800366a:	4c7f      	ldr	r4, [pc, #508]	; (8003868 <HAL_SPI_MspInit+0x31c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366c:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003670:	2600      	movs	r6, #0
 8003672:	2303      	movs	r3, #3
 8003674:	e9cd 630b 	strd	r6, r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003678:	f004 fc06 	bl	8007e88 <HAL_GPIO_Init>
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800367c:	2327      	movs	r3, #39	; 0x27
 800367e:	f8df c214 	ldr.w	ip, [pc, #532]	; 8003894 <HAL_SPI_MspInit+0x348>
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003682:	4620      	mov	r0, r4
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003684:	61a6      	str	r6, [r4, #24]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003686:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8003688:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800368c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003690:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8003694:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003698:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800369c:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80036a0:	f003 fc00 	bl	8006ea4 <HAL_DMA_Init>
 80036a4:	b108      	cbz	r0, 80036aa <HAL_SPI_MspInit+0x15e>
      Error_Handler();
 80036a6:	f7ff fe71 	bl	800338c <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80036aa:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80036ac:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80036ae:	2200      	movs	r2, #0
 80036b0:	2105      	movs	r1, #5
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80036b2:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80036b4:	f003 fa26 	bl	8006b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80036b8:	2024      	movs	r0, #36	; 0x24
 80036ba:	e7a5      	b.n	8003608 <HAL_SPI_MspInit+0xbc>
  else if(hspi->Instance==SPI3)
 80036bc:	4a6b      	ldr	r2, [pc, #428]	; (800386c <HAL_SPI_MspInit+0x320>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d166      	bne.n	8003790 <HAL_SPI_MspInit+0x244>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80036c2:	4b64      	ldr	r3, [pc, #400]	; (8003854 <HAL_SPI_MspInit+0x308>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c4:	2402      	movs	r4, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80036c6:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c8:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI3_CLK_ENABLE();
 80036ca:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80036ce:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d0:	4861      	ldr	r0, [pc, #388]	; (8003858 <HAL_SPI_MspInit+0x30c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80036d2:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_SPI3_CLK_ENABLE();
 80036d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036da:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80036de:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80036e2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80036e6:	9204      	str	r2, [sp, #16]
 80036e8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80036f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80036fa:	f002 0201 	and.w	r2, r2, #1
 80036fe:	9205      	str	r2, [sp, #20]
 8003700:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003702:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003706:	f042 0202 	orr.w	r2, r2, #2
 800370a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800370e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003712:	970d      	str	r7, [sp, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	9306      	str	r3, [sp, #24]
 800371a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371c:	2310      	movs	r3, #16
 800371e:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003722:	f004 fbb1 	bl	8007e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003726:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003728:	a909      	add	r1, sp, #36	; 0x24
 800372a:	484e      	ldr	r0, [pc, #312]	; (8003864 <HAL_SPI_MspInit+0x318>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003730:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003732:	e9cd 680b 	strd	r6, r8, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003736:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003738:	f004 fba6 	bl	8007e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800373c:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800373e:	4849      	ldr	r0, [pc, #292]	; (8003864 <HAL_SPI_MspInit+0x318>)
 8003740:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003742:	970d      	str	r7, [sp, #52]	; 0x34
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8003744:	4f4a      	ldr	r7, [pc, #296]	; (8003870 <HAL_SPI_MspInit+0x324>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003746:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800374a:	e9cd 680b 	strd	r6, r8, [sp, #44]	; 0x2c
    hdma_spi3_rx.Instance = DMA1_Stream2;
 800374e:	4c49      	ldr	r4, [pc, #292]	; (8003874 <HAL_SPI_MspInit+0x328>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003750:	f004 fb9a 	bl	8007e88 <HAL_GPIO_Init>
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8003754:	233d      	movs	r3, #61	; 0x3d
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003756:	4620      	mov	r0, r4
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003758:	61a6      	str	r6, [r4, #24]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800375a:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 800375c:	e9c4 7300 	strd	r7, r3, [r4]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003760:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003764:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8003768:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800376c:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003770:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003774:	f003 fb96 	bl	8006ea4 <HAL_DMA_Init>
 8003778:	b108      	cbz	r0, 800377e <HAL_SPI_MspInit+0x232>
      Error_Handler();
 800377a:	f7ff fe07 	bl	800338c <Error_Handler>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800377e:	2033      	movs	r0, #51	; 0x33
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8003780:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8003782:	2200      	movs	r2, #0
 8003784:	2105      	movs	r1, #5
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8003786:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8003788:	f003 f9bc 	bl	8006b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800378c:	2033      	movs	r0, #51	; 0x33
 800378e:	e73b      	b.n	8003608 <HAL_SPI_MspInit+0xbc>
  else if(hspi->Instance==SPI4)
 8003790:	4a39      	ldr	r2, [pc, #228]	; (8003878 <HAL_SPI_MspInit+0x32c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	f47f af3a 	bne.w	800360c <HAL_SPI_MspInit+0xc0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003798:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <HAL_SPI_MspInit+0x308>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379a:	2074      	movs	r0, #116	; 0x74
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800379c:	a909      	add	r1, sp, #36	; 0x24
    hdma_spi4_rx.Instance = DMA2_Stream0;
 800379e:	4c37      	ldr	r4, [pc, #220]	; (800387c <HAL_SPI_MspInit+0x330>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 80037a0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80037a4:	4e36      	ldr	r6, [pc, #216]	; (8003880 <HAL_SPI_MspInit+0x334>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 80037a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037aa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80037ae:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80037b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80037b6:	9207      	str	r2, [sp, #28]
 80037b8:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80037be:	f042 0210 	orr.w	r2, r2, #16
 80037c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80037c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	9308      	str	r3, [sp, #32]
 80037d0:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d2:	2302      	movs	r3, #2
 80037d4:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80037d8:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037da:	482a      	ldr	r0, [pc, #168]	; (8003884 <HAL_SPI_MspInit+0x338>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80037dc:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037de:	f004 fb53 	bl	8007e88 <HAL_GPIO_Init>
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80037e2:	2353      	movs	r3, #83	; 0x53
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80037e8:	4620      	mov	r0, r4
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80037ea:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037ee:	2300      	movs	r3, #0
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037f0:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037f4:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80037f8:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037fc:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8003800:	f003 fb50 	bl	8006ea4 <HAL_DMA_Init>
 8003804:	b108      	cbz	r0, 800380a <HAL_SPI_MspInit+0x2be>
      Error_Handler();
 8003806:	f7ff fdc1 	bl	800338c <Error_Handler>
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 800380a:	4a1f      	ldr	r2, [pc, #124]	; (8003888 <HAL_SPI_MspInit+0x33c>)
 800380c:	2354      	movs	r3, #84	; 0x54
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 800380e:	67ec      	str	r4, [r5, #124]	; 0x7c
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003810:	2140      	movs	r1, #64	; 0x40
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8003812:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8003814:	4c1d      	ldr	r4, [pc, #116]	; (800388c <HAL_SPI_MspInit+0x340>)
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8003816:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800381a:	2300      	movs	r3, #0
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800381c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8003820:	4620      	mov	r0, r4
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003822:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003826:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800382a:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800382e:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8003832:	f003 fb37 	bl	8006ea4 <HAL_DMA_Init>
 8003836:	b108      	cbz	r0, 800383c <HAL_SPI_MspInit+0x2f0>
      Error_Handler();
 8003838:	f7ff fda8 	bl	800338c <Error_Handler>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800383c:	2200      	movs	r2, #0
 800383e:	2054      	movs	r0, #84	; 0x54
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8003840:	67ac      	str	r4, [r5, #120]	; 0x78
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8003842:	4611      	mov	r1, r2
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8003844:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8003846:	f003 f95d 	bl	8006b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800384a:	2054      	movs	r0, #84	; 0x54
 800384c:	e6dc      	b.n	8003608 <HAL_SPI_MspInit+0xbc>
 800384e:	bf00      	nop
 8003850:	40013000 	.word	0x40013000
 8003854:	58024400 	.word	0x58024400
 8003858:	58020000 	.word	0x58020000
 800385c:	2401d6cc 	.word	0x2401d6cc
 8003860:	40003800 	.word	0x40003800
 8003864:	58020400 	.word	0x58020400
 8003868:	2400cce8 	.word	0x2400cce8
 800386c:	40003c00 	.word	0x40003c00
 8003870:	40020040 	.word	0x40020040
 8003874:	2402180c 	.word	0x2402180c
 8003878:	40013400 	.word	0x40013400
 800387c:	2400ceac 	.word	0x2400ceac
 8003880:	40020410 	.word	0x40020410
 8003884:	58021000 	.word	0x58021000
 8003888:	40020428 	.word	0x40020428
 800388c:	24011228 	.word	0x24011228
 8003890:	40020010 	.word	0x40020010
 8003894:	40020028 	.word	0x40020028

08003898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003898:	b530      	push	{r4, r5, lr}
 800389a:	b091      	sub	sp, #68	; 0x44
 800389c:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389e:	2214      	movs	r2, #20
 80038a0:	2100      	movs	r1, #0
 80038a2:	a80b      	add	r0, sp, #44	; 0x2c
 80038a4:	f00f fed7 	bl	8013656 <memset>
  if(huart->Instance==UART4)
 80038a8:	682b      	ldr	r3, [r5, #0]
 80038aa:	4a78      	ldr	r2, [pc, #480]	; (8003a8c <HAL_UART_MspInit+0x1f4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d13d      	bne.n	800392c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80038b0:	4b77      	ldr	r3, [pc, #476]	; (8003a90 <HAL_UART_MspInit+0x1f8>)
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b2:	f04f 0c03 	mov.w	ip, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b6:	a90b      	add	r1, sp, #44	; 0x2c
 80038b8:	4876      	ldr	r0, [pc, #472]	; (8003a94 <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80038ba:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80038be:	4c76      	ldr	r4, [pc, #472]	; (8003a98 <HAL_UART_MspInit+0x200>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80038c0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80038c4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80038c8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80038cc:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80038d0:	9201      	str	r2, [sp, #4]
 80038d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80038d8:	f042 0201 	orr.w	r2, r2, #1
 80038dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80038e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	9302      	str	r3, [sp, #8]
 80038ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ec:	2302      	movs	r3, #2
 80038ee:	e9cd c30b 	strd	ip, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038f2:	2308      	movs	r3, #8
 80038f4:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f6:	f004 fac7 	bl	8007e88 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80038fa:	4b68      	ldr	r3, [pc, #416]	; (8003a9c <HAL_UART_MspInit+0x204>)
 80038fc:	6023      	str	r3, [r4, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80038fe:	233f      	movs	r3, #63	; 0x3f
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003900:	6063      	str	r3, [r4, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003902:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003906:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003908:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800390a:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800390e:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003912:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003916:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800391a:	f003 fac3 	bl	8006ea4 <HAL_DMA_Init>
 800391e:	b108      	cbz	r0, 8003924 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 8003920:	f7ff fd34 	bl	800338c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003924:	67ac      	str	r4, [r5, #120]	; 0x78
 8003926:	63a5      	str	r5, [r4, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003928:	b011      	add	sp, #68	; 0x44
 800392a:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==UART7)
 800392c:	4a5c      	ldr	r2, [pc, #368]	; (8003aa0 <HAL_UART_MspInit+0x208>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d128      	bne.n	8003984 <HAL_UART_MspInit+0xec>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003932:	4b57      	ldr	r3, [pc, #348]	; (8003a90 <HAL_UART_MspInit+0x1f8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003934:	f44f 74c0 	mov.w	r4, #384	; 0x180
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003938:	a90b      	add	r1, sp, #44	; 0x2c
 800393a:	485a      	ldr	r0, [pc, #360]	; (8003aa4 <HAL_UART_MspInit+0x20c>)
    __HAL_RCC_UART7_CLK_ENABLE();
 800393c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003940:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003944:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003948:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800394c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003950:	9203      	str	r2, [sp, #12]
 8003952:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003954:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003958:	f042 0210 	orr.w	r2, r2, #16
 800395c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	9304      	str	r3, [sp, #16]
 800396a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396c:	2302      	movs	r3, #2
 800396e:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003972:	2307      	movs	r3, #7
    hdma_uart7_rx.Instance = DMA1_Stream4;
 8003974:	4c4c      	ldr	r4, [pc, #304]	; (8003aa8 <HAL_UART_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003976:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003978:	f004 fa86 	bl	8007e88 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream4;
 800397c:	4b4b      	ldr	r3, [pc, #300]	; (8003aac <HAL_UART_MspInit+0x214>)
 800397e:	6023      	str	r3, [r4, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8003980:	234f      	movs	r3, #79	; 0x4f
 8003982:	e7bd      	b.n	8003900 <HAL_UART_MspInit+0x68>
  else if(huart->Instance==USART1)
 8003984:	4a4a      	ldr	r2, [pc, #296]	; (8003ab0 <HAL_UART_MspInit+0x218>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d128      	bne.n	80039dc <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART1_CLK_ENABLE();
 800398a:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <HAL_UART_MspInit+0x1f8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003990:	a90b      	add	r1, sp, #44	; 0x2c
    hdma_usart1_rx.Instance = DMA1_Stream5;
 8003992:	4c48      	ldr	r4, [pc, #288]	; (8003ab4 <HAL_UART_MspInit+0x21c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003994:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003998:	f042 0210 	orr.w	r2, r2, #16
 800399c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80039a0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80039a4:	f002 0210 	and.w	r2, r2, #16
 80039a8:	9205      	str	r2, [sp, #20]
 80039aa:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80039b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	9306      	str	r3, [sp, #24]
 80039c2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c4:	2302      	movs	r3, #2
 80039c6:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039ca:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039cc:	4831      	ldr	r0, [pc, #196]	; (8003a94 <HAL_UART_MspInit+0x1fc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039ce:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d0:	f004 fa5a 	bl	8007e88 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream5;
 80039d4:	4b38      	ldr	r3, [pc, #224]	; (8003ab8 <HAL_UART_MspInit+0x220>)
 80039d6:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80039d8:	2329      	movs	r3, #41	; 0x29
 80039da:	e791      	b.n	8003900 <HAL_UART_MspInit+0x68>
  else if(huart->Instance==USART2)
 80039dc:	4a37      	ldr	r2, [pc, #220]	; (8003abc <HAL_UART_MspInit+0x224>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d127      	bne.n	8003a32 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039e2:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <HAL_UART_MspInit+0x1f8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e4:	210c      	movs	r1, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e6:	482b      	ldr	r0, [pc, #172]	; (8003a94 <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80039e8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart2_rx.Instance = DMA1_Stream6;
 80039ec:	4c34      	ldr	r4, [pc, #208]	; (8003ac0 <HAL_UART_MspInit+0x228>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80039ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80039f2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80039f6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80039fa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80039fe:	9207      	str	r2, [sp, #28]
 8003a00:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	9308      	str	r3, [sp, #32]
 8003a18:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a20:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a22:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a24:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a26:	f004 fa2f 	bl	8007e88 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream6;
 8003a2a:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <HAL_UART_MspInit+0x22c>)
 8003a2c:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003a2e:	232b      	movs	r3, #43	; 0x2b
 8003a30:	e766      	b.n	8003900 <HAL_UART_MspInit+0x68>
  else if(huart->Instance==USART3)
 8003a32:	4a25      	ldr	r2, [pc, #148]	; (8003ac8 <HAL_UART_MspInit+0x230>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	f47f af77 	bne.w	8003928 <HAL_UART_MspInit+0x90>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <HAL_UART_MspInit+0x1f8>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a3c:	a90b      	add	r1, sp, #44	; 0x2c
 8003a3e:	4823      	ldr	r0, [pc, #140]	; (8003acc <HAL_UART_MspInit+0x234>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a40:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8003a44:	4c22      	ldr	r4, [pc, #136]	; (8003ad0 <HAL_UART_MspInit+0x238>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a46:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a4a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003a4e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003a52:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003a56:	9209      	str	r2, [sp, #36]	; 0x24
 8003a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a5a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a5e:	f042 0208 	orr.w	r2, r2, #8
 8003a62:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a66:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	930a      	str	r3, [sp, #40]	; 0x28
 8003a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a76:	2302      	movs	r3, #2
 8003a78:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a7c:	2307      	movs	r3, #7
 8003a7e:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a80:	f004 fa02 	bl	8007e88 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8003a84:	4b13      	ldr	r3, [pc, #76]	; (8003ad4 <HAL_UART_MspInit+0x23c>)
 8003a86:	6023      	str	r3, [r4, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003a88:	232d      	movs	r3, #45	; 0x2d
 8003a8a:	e739      	b.n	8003900 <HAL_UART_MspInit+0x68>
 8003a8c:	40004c00 	.word	0x40004c00
 8003a90:	58024400 	.word	0x58024400
 8003a94:	58020000 	.word	0x58020000
 8003a98:	2400a898 	.word	0x2400a898
 8003a9c:	40020058 	.word	0x40020058
 8003aa0:	40007800 	.word	0x40007800
 8003aa4:	58021000 	.word	0x58021000
 8003aa8:	2400f038 	.word	0x2400f038
 8003aac:	40020070 	.word	0x40020070
 8003ab0:	40011000 	.word	0x40011000
 8003ab4:	2400f0b8 	.word	0x2400f0b8
 8003ab8:	40020088 	.word	0x40020088
 8003abc:	40004400 	.word	0x40004400
 8003ac0:	2400a914 	.word	0x2400a914
 8003ac4:	400200a0 	.word	0x400200a0
 8003ac8:	40004800 	.word	0x40004800
 8003acc:	58020c00 	.word	0x58020c00
 8003ad0:	2400aab0 	.word	0x2400aab0
 8003ad4:	400200b8 	.word	0x400200b8

08003ad8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ad8:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8003ada:	4601      	mov	r1, r0
{
 8003adc:	b08a      	sub	sp, #40	; 0x28
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2019      	movs	r0, #25
 8003ae2:	f003 f80f 	bl	8006b04 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003ae6:	2019      	movs	r0, #25
 8003ae8:	f003 f83e 	bl	8006b68 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003aec:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <HAL_InitTick+0x70>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003aee:	4669      	mov	r1, sp
 8003af0:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003af2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003af6:	4c15      	ldr	r4, [pc, #84]	; (8003b4c <HAL_InitTick+0x74>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003af8:	f042 0201 	orr.w	r2, r2, #1
 8003afc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b0c:	f005 fc72 	bl	80093f4 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003b10:	f005 fc5e 	bl	80093d0 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8003b14:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <HAL_InitTick+0x78>)
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003b16:	0040      	lsls	r0, r0, #1
  htim1.Instance = TIM1;
 8003b18:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003b1a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003b1e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <HAL_InitTick+0x7c>)
 8003b22:	fbb0 f0f3 	udiv	r0, r0, r3
 8003b26:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8003b28:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 8003b2a:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003b2c:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8003b2e:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b30:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003b32:	f008 f8f3 	bl	800bd1c <HAL_TIM_Base_Init>
 8003b36:	b920      	cbnz	r0, 8003b42 <HAL_InitTick+0x6a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003b38:	4620      	mov	r0, r4
 8003b3a:	f007 ffb7 	bl	800baac <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8003b3e:	b00a      	add	sp, #40	; 0x28
 8003b40:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8003b42:	2001      	movs	r0, #1
 8003b44:	e7fb      	b.n	8003b3e <HAL_InitTick+0x66>
 8003b46:	bf00      	nop
 8003b48:	58024400 	.word	0x58024400
 8003b4c:	24021894 	.word	0x24021894
 8003b50:	40010000 	.word	0x40010000
 8003b54:	000f4240 	.word	0x000f4240

08003b58 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b58:	4770      	bx	lr

08003b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b5a:	e7fe      	b.n	8003b5a <HardFault_Handler>

08003b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b5c:	e7fe      	b.n	8003b5c <MemManage_Handler>

08003b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b5e:	e7fe      	b.n	8003b5e <BusFault_Handler>

08003b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b60:	e7fe      	b.n	8003b60 <UsageFault_Handler>

08003b62 <DebugMon_Handler>:
 8003b62:	4770      	bx	lr

08003b64 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003b64:	4801      	ldr	r0, [pc, #4]	; (8003b6c <DMA1_Stream0_IRQHandler+0x8>)
 8003b66:	f003 bee5 	b.w	8007934 <HAL_DMA_IRQHandler>
 8003b6a:	bf00      	nop
 8003b6c:	2401d6cc 	.word	0x2401d6cc

08003b70 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003b70:	4801      	ldr	r0, [pc, #4]	; (8003b78 <DMA1_Stream1_IRQHandler+0x8>)
 8003b72:	f003 bedf 	b.w	8007934 <HAL_DMA_IRQHandler>
 8003b76:	bf00      	nop
 8003b78:	2400cce8 	.word	0x2400cce8

08003b7c <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8003b7c:	4801      	ldr	r0, [pc, #4]	; (8003b84 <DMA1_Stream2_IRQHandler+0x8>)
 8003b7e:	f003 bed9 	b.w	8007934 <HAL_DMA_IRQHandler>
 8003b82:	bf00      	nop
 8003b84:	2402180c 	.word	0x2402180c

08003b88 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003b88:	4801      	ldr	r0, [pc, #4]	; (8003b90 <DMA1_Stream3_IRQHandler+0x8>)
 8003b8a:	f003 bed3 	b.w	8007934 <HAL_DMA_IRQHandler>
 8003b8e:	bf00      	nop
 8003b90:	2400a898 	.word	0x2400a898

08003b94 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8003b94:	4801      	ldr	r0, [pc, #4]	; (8003b9c <DMA1_Stream4_IRQHandler+0x8>)
 8003b96:	f003 becd 	b.w	8007934 <HAL_DMA_IRQHandler>
 8003b9a:	bf00      	nop
 8003b9c:	2400f038 	.word	0x2400f038

08003ba0 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003ba0:	4801      	ldr	r0, [pc, #4]	; (8003ba8 <DMA1_Stream5_IRQHandler+0x8>)
 8003ba2:	f003 bec7 	b.w	8007934 <HAL_DMA_IRQHandler>
 8003ba6:	bf00      	nop
 8003ba8:	2400f0b8 	.word	0x2400f0b8

08003bac <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003bac:	4801      	ldr	r0, [pc, #4]	; (8003bb4 <DMA1_Stream6_IRQHandler+0x8>)
 8003bae:	f003 bec1 	b.w	8007934 <HAL_DMA_IRQHandler>
 8003bb2:	bf00      	nop
 8003bb4:	2400a914 	.word	0x2400a914

08003bb8 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bb8:	4801      	ldr	r0, [pc, #4]	; (8003bc0 <TIM1_UP_IRQHandler+0x8>)
 8003bba:	f007 bf99 	b.w	800baf0 <HAL_TIM_IRQHandler>
 8003bbe:	bf00      	nop
 8003bc0:	24021894 	.word	0x24021894

08003bc4 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003bc4:	4801      	ldr	r0, [pc, #4]	; (8003bcc <SPI1_IRQHandler+0x8>)
 8003bc6:	f007 be47 	b.w	800b858 <HAL_SPI_IRQHandler>
 8003bca:	bf00      	nop
 8003bcc:	2401b550 	.word	0x2401b550

08003bd0 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003bd0:	4801      	ldr	r0, [pc, #4]	; (8003bd8 <SPI2_IRQHandler+0x8>)
 8003bd2:	f007 be41 	b.w	800b858 <HAL_SPI_IRQHandler>
 8003bd6:	bf00      	nop
 8003bd8:	2400a994 	.word	0x2400a994

08003bdc <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003bdc:	4801      	ldr	r0, [pc, #4]	; (8003be4 <DMA1_Stream7_IRQHandler+0x8>)
 8003bde:	f003 bea9 	b.w	8007934 <HAL_DMA_IRQHandler>
 8003be2:	bf00      	nop
 8003be4:	2400aab0 	.word	0x2400aab0

08003be8 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003be8:	4801      	ldr	r0, [pc, #4]	; (8003bf0 <SDMMC1_IRQHandler+0x8>)
 8003bea:	f007 b97f 	b.w	800aeec <HAL_SD_IRQHandler>
 8003bee:	bf00      	nop
 8003bf0:	2400cd60 	.word	0x2400cd60

08003bf4 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003bf4:	4801      	ldr	r0, [pc, #4]	; (8003bfc <SPI3_IRQHandler+0x8>)
 8003bf6:	f007 be2f 	b.w	800b858 <HAL_SPI_IRQHandler>
 8003bfa:	bf00      	nop
 8003bfc:	2400ef3c 	.word	0x2400ef3c

08003c00 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8003c00:	4801      	ldr	r0, [pc, #4]	; (8003c08 <DMA2_Stream0_IRQHandler+0x8>)
 8003c02:	f003 be97 	b.w	8007934 <HAL_DMA_IRQHandler>
 8003c06:	bf00      	nop
 8003c08:	2400ceac 	.word	0x2400ceac

08003c0c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8003c0c:	4801      	ldr	r0, [pc, #4]	; (8003c14 <DMA2_Stream1_IRQHandler+0x8>)
 8003c0e:	f003 be91 	b.w	8007934 <HAL_DMA_IRQHandler>
 8003c12:	bf00      	nop
 8003c14:	24011228 	.word	0x24011228

08003c18 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c18:	4801      	ldr	r0, [pc, #4]	; (8003c20 <DMA2_Stream4_IRQHandler+0x8>)
 8003c1a:	f003 be8b 	b.w	8007934 <HAL_DMA_IRQHandler>
 8003c1e:	bf00      	nop
 8003c20:	2401333c 	.word	0x2401333c

08003c24 <SPI4_IRQHandler>:
void SPI4_IRQHandler(void)
{
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8003c24:	4801      	ldr	r0, [pc, #4]	; (8003c2c <SPI4_IRQHandler+0x8>)
 8003c26:	f007 be17 	b.w	800b858 <HAL_SPI_IRQHandler>
 8003c2a:	bf00      	nop
 8003c2c:	240132b4 	.word	0x240132b4

08003c30 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003c30:	4801      	ldr	r0, [pc, #4]	; (8003c38 <OTG_FS_IRQHandler+0x8>)
 8003c32:	f004 bacf 	b.w	80081d4 <HAL_PCD_IRQHandler>
 8003c36:	bf00      	nop
 8003c38:	24025e84 	.word	0x24025e84

08003c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c44:	4a14      	ldr	r2, [pc, #80]	; (8003c98 <_sbrk+0x5c>)
 8003c46:	4b15      	ldr	r3, [pc, #84]	; (8003c9c <_sbrk+0x60>)
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c50:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <_sbrk+0x64>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c58:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <_sbrk+0x64>)
 8003c5a:	4a12      	ldr	r2, [pc, #72]	; (8003ca4 <_sbrk+0x68>)
 8003c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c5e:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <_sbrk+0x64>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d207      	bcs.n	8003c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c6c:	f00f fcae 	bl	80135cc <__errno>
 8003c70:	4602      	mov	r2, r0
 8003c72:	230c      	movs	r3, #12
 8003c74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7a:	e009      	b.n	8003c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c7c:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <_sbrk+0x64>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c82:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <_sbrk+0x64>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4413      	add	r3, r2
 8003c8a:	4a05      	ldr	r2, [pc, #20]	; (8003ca0 <_sbrk+0x64>)
 8003c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	24080000 	.word	0x24080000
 8003c9c:	00000f00 	.word	0x00000f00
 8003ca0:	240002d8 	.word	0x240002d8
 8003ca4:	24026290 	.word	0x24026290

08003ca8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ca8:	4a28      	ldr	r2, [pc, #160]	; (8003d4c <SystemInit+0xa4>)
 8003caa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003cae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003cb6:	4a26      	ldr	r2, [pc, #152]	; (8003d50 <SystemInit+0xa8>)
 8003cb8:	6813      	ldr	r3, [r2, #0]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	2b06      	cmp	r3, #6
 8003cc0:	d805      	bhi.n	8003cce <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003cc2:	6813      	ldr	r3, [r2, #0]
 8003cc4:	f023 030f 	bic.w	r3, r3, #15
 8003cc8:	f043 0307 	orr.w	r3, r3, #7
 8003ccc:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003cce:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <SystemInit+0xac>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003cd8:	2200      	movs	r2, #0
 8003cda:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003cdc:	4a1e      	ldr	r2, [pc, #120]	; (8003d58 <SystemInit+0xb0>)
 8003cde:	6819      	ldr	r1, [r3, #0]
 8003ce0:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ce2:	491b      	ldr	r1, [pc, #108]	; (8003d50 <SystemInit+0xa8>)
  RCC->CR &= 0xEAF6ED7FU;
 8003ce4:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ce6:	680a      	ldr	r2, [r1, #0]
 8003ce8:	f002 020f 	and.w	r2, r2, #15
 8003cec:	2a07      	cmp	r2, #7
 8003cee:	d905      	bls.n	8003cfc <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003cf0:	680a      	ldr	r2, [r1, #0]
 8003cf2:	f022 020f 	bic.w	r2, r2, #15
 8003cf6:	f042 0207 	orr.w	r2, r2, #7
 8003cfa:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003cfc:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003cfe:	4917      	ldr	r1, [pc, #92]	; (8003d5c <SystemInit+0xb4>)
  RCC->D1CFGR = 0x00000000;
 8003d00:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8003d02:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8003d04:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8003d06:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003d08:	4915      	ldr	r1, [pc, #84]	; (8003d60 <SystemInit+0xb8>)
 8003d0a:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003d0c:	4915      	ldr	r1, [pc, #84]	; (8003d64 <SystemInit+0xbc>)
 8003d0e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003d10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003d12:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003d14:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003d16:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d18:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d1a:	6819      	ldr	r1, [r3, #0]
 8003d1c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003d20:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d22:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003d24:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <SystemInit+0xc0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	041b      	lsls	r3, r3, #16
 8003d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d30:	d202      	bcs.n	8003d38 <SystemInit+0x90>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003d32:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <SystemInit+0xc4>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d38:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <SystemInit+0xc8>)
 8003d3a:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003d3e:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d44:	4b01      	ldr	r3, [pc, #4]	; (8003d4c <SystemInit+0xa4>)
 8003d46:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	e000ed00 	.word	0xe000ed00
 8003d50:	52002000 	.word	0x52002000
 8003d54:	58024400 	.word	0x58024400
 8003d58:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d5c:	02020200 	.word	0x02020200
 8003d60:	01ff0000 	.word	0x01ff0000
 8003d64:	01010280 	.word	0x01010280
 8003d68:	5c001000 	.word	0x5c001000
 8003d6c:	51008108 	.word	0x51008108
 8003d70:	52004000 	.word	0x52004000
 8003d74:	00000000 	.word	0x00000000

08003d78 <vTaskBattery>:

#include "tasks/task_battery.h"

float get_temp(uint16_t adc_value);

void vTaskBattery(void *argument) {
 8003d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d7c:	ed2d 8b10 	vpush	{d8-d15}

	/* Initialise Variables */
	double mah;
	double curr = 0;
	double supp = 0;
	double bat = 0;
 8003d80:	ed9f db6d 	vldr	d13, [pc, #436]	; 8003f38 <vTaskBattery+0x1c0>
		tick_count += tick_update;

		double current2 = ((double) adc_value[0] * (2.5 / 4096.0)
				- (3.3 * 0.107)) / 0.264; // CURR2
		float supply_voltage = adc_value[1] * (2.5 / 4096) * 2; // 3V3
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 8003d84:	ed9f ab6e 	vldr	d10, [pc, #440]	; 8003f40 <vTaskBattery+0x1c8>
void vTaskBattery(void *argument) {
 8003d88:	b08a      	sub	sp, #40	; 0x28
	battery_data_t battery_data = { 0 };
 8003d8a:	2400      	movs	r4, #0
	tick_update = osKernelGetTickFreq() / BATTERY_SAMPLE_RATE;
 8003d8c:	2732      	movs	r7, #50	; 0x32
	double supp = 0;
 8003d8e:	eeb0 cb4d 	vmov.f64	d12, d13
	battery_data_t battery_data = { 0 };
 8003d92:	f8ad 4010 	strh.w	r4, [sp, #16]
	double curr = 0;
 8003d96:	eeb0 eb4d 	vmov.f64	d14, d13
 8003d9a:	eeb0 8b4a 	vmov.f64	d8, d10
	battery_data_t battery_data = { 0 };
 8003d9e:	e9cd 4402 	strd	r4, r4, [sp, #8]
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 8003da2:	ed9f bb69 	vldr	d11, [pc, #420]	; 8003f48 <vTaskBattery+0x1d0>
	tick_count = osKernelGetTickCount();
 8003da6:	f00c f9ed 	bl	8010184 <osKernelGetTickCount>
 8003daa:	4606      	mov	r6, r0
	tick_update = osKernelGetTickFreq() / BATTERY_SAMPLE_RATE;
 8003dac:	f00c f9fe 	bl	80101ac <osKernelGetTickFreq>
 8003db0:	fbb0 f7f7 	udiv	r7, r0, r7
	HAL_ADC_Stop_DMA(&hadc1);
 8003db4:	4870      	ldr	r0, [pc, #448]	; (8003f78 <vTaskBattery+0x200>)
 8003db6:	f002 fc0a 	bl	80065ce <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 8003dba:	2205      	movs	r2, #5
 8003dbc:	a905      	add	r1, sp, #20
 8003dbe:	486e      	ldr	r0, [pc, #440]	; (8003f78 <vTaskBattery+0x200>)
 8003dc0:	f002 fb42 	bl	8006448 <HAL_ADC_Start_DMA>
	osDelay(500);
 8003dc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003dc8:	f00c fa4a 	bl	8010260 <osDelay>
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 8003dcc:	eddd 7a07 	vldr	s15, [sp, #28]
		tick_count += tick_update;
 8003dd0:	443e      	add	r6, r7
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 8003dd2:	eeb8 fb67 	vcvt.f64.u32	d15, s15
		float supply_voltage = adc_value[1] * (2.5 / 4096) * 2; // 3V3
 8003dd6:	e9dd 8505 	ldrd	r8, r5, [sp, #20]
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 8003dda:	ee2f fb0a 	vmul.f64	d15, d15, d10
		double current1 = ((double) adc_value[3] * (2.5 / 4096.0)
				- (3.3 * 0.107)) / 0.264; // CURR1
		get_temp(adc_value[4]); // temp

		if ((adc_value[0] | adc_value[1]) == 0) {
 8003dde:	ea58 0305 	orrs.w	r3, r8, r5
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 8003de2:	ee2f fb0b 	vmul.f64	d15, d15, d11
 8003de6:	eeb7 fbcf 	vcvt.f32.f64	s30, d15
		double current1 = ((double) adc_value[3] * (2.5 / 4096.0)
 8003dea:	eddd fa08 	vldr	s31, [sp, #32]
		if ((adc_value[0] | adc_value[1]) == 0) {
 8003dee:	d107      	bne.n	8003e00 <vTaskBattery+0x88>
			HAL_ADC_Stop_DMA(&hadc1);
 8003df0:	4861      	ldr	r0, [pc, #388]	; (8003f78 <vTaskBattery+0x200>)
 8003df2:	f002 fbec 	bl	80065ce <HAL_ADC_Stop_DMA>
			HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 8003df6:	2205      	movs	r2, #5
 8003df8:	a905      	add	r1, sp, #20
 8003dfa:	485f      	ldr	r0, [pc, #380]	; (8003f78 <vTaskBattery+0x200>)
 8003dfc:	f002 fb24 	bl	8006448 <HAL_ADC_Start_DMA>
		}
		// Filter adc values
		if (counter < 50) {
 8003e00:	2c31      	cmp	r4, #49	; 0x31
 8003e02:	dc2e      	bgt.n	8003e62 <vTaskBattery+0xea>
		double current2 = ((double) adc_value[0] * (2.5 / 4096.0)
 8003e04:	ee07 8a90 	vmov	s15, r8
			counter++;
 8003e08:	3401      	adds	r4, #1
				- (3.3 * 0.107)) / 0.264; // CURR2
 8003e0a:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8003f50 <vTaskBattery+0x1d8>
		double current2 = ((double) adc_value[0] * (2.5 / 4096.0)
 8003e0e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
				- (3.3 * 0.107)) / 0.264; // CURR2
 8003e12:	eeb0 4b46 	vmov.f64	d4, d6
		double current2 = ((double) adc_value[0] * (2.5 / 4096.0)
 8003e16:	ed9f 3b50 	vldr	d3, [pc, #320]	; 8003f58 <vTaskBattery+0x1e0>
				- (3.3 * 0.107)) / 0.264; // CURR2
 8003e1a:	eea7 4b08 	vfma.f64	d4, d7, d8
		float supply_voltage = adc_value[1] * (2.5 / 4096) * 2; // 3V3
 8003e1e:	ee07 5a90 	vmov	s15, r5
 8003e22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003e26:	ee27 7b08 	vmul.f64	d7, d7, d8
		double current2 = ((double) adc_value[0] * (2.5 / 4096.0)
 8003e2a:	ee84 5b03 	vdiv.f64	d5, d4, d3
		double current1 = ((double) adc_value[3] * (2.5 / 4096.0)
 8003e2e:	eeb8 4b6f 	vcvt.f64.u32	d4, s31
		float supply_voltage = adc_value[1] * (2.5 / 4096) * 2; // 3V3
 8003e32:	ee37 7b07 	vadd.f64	d7, d7, d7
			curr += current1 + current2;
			supp += supply_voltage;
			bat += battery_voltage;
 8003e36:	eeb7 facf 	vcvt.f64.f32	d15, s30
				- (3.3 * 0.107)) / 0.264; // CURR1
 8003e3a:	eea4 6b08 	vfma.f64	d6, d4, d8
		float supply_voltage = adc_value[1] * (2.5 / 4096) * 2; // 3V3
 8003e3e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			bat += battery_voltage;
 8003e42:	ee3d db0f 	vadd.f64	d13, d13, d15
			supp += supply_voltage;
 8003e46:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
		double current1 = ((double) adc_value[3] * (2.5 / 4096.0)
 8003e4a:	ee86 4b03 	vdiv.f64	d4, d6, d3
			supp += supply_voltage;
 8003e4e:	ee3c cb07 	vadd.f64	d12, d12, d7
			curr += current1 + current2;
 8003e52:	ee35 5b04 	vadd.f64	d5, d5, d4
 8003e56:	ee3e eb05 	vadd.f64	d14, d14, d5
				global_battery_data.current = battery_data.current;
				ReleaseMutex(&battery_mutex);
			}
		}
		/* Sleep */
		osDelayUntil(tick_count);
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	f00c fa1a 	bl	8010294 <osDelayUntil>
	for (;;) {
 8003e60:	e7b4      	b.n	8003dcc <vTaskBattery+0x54>
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 8003e62:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8003f60 <vTaskBattery+0x1e8>
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 8003e66:	2232      	movs	r2, #50	; 0x32
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 8003e68:	ee8e 7b06 	vdiv.f64	d7, d14, d6
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 8003e6c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8003f68 <vTaskBattery+0x1f0>
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 8003e70:	ee39 9b07 	vadd.f64	d9, d9, d7
			battery_data.consumption = (uint16_t) mah;
 8003e74:	eefc 7bc9 	vcvt.u32.f64	s15, d9
 8003e78:	ee17 3a90 	vmov	r3, s15
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 8003e7c:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8003f70 <vTaskBattery+0x1f8>
			battery_data.consumption = (uint16_t) mah;
 8003e80:	b29c      	uxth	r4, r3
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 8003e82:	ee2e eb07 	vmul.f64	d14, d14, d7
			battery_data.consumption = (uint16_t) mah;
 8003e86:	f8ad 400e 	strh.w	r4, [sp, #14]
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 8003e8a:	eefc 7bce 	vcvt.u32.f64	s15, d14
 8003e8e:	ee17 3a90 	vmov	r3, s15
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 8003e92:	ee8e 7b06 	vdiv.f64	d7, d14, d6
 8003e96:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003f7c <vTaskBattery+0x204>
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 8003e9a:	b29b      	uxth	r3, r3
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 8003e9c:	ee8f 6a26 	vdiv.f32	s12, s30, s13
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 8003ea0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ea4:	f8ad 300c 	strh.w	r3, [sp, #12]
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 8003ea8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003eac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003eb0:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8003eb4:	ee17 2a10 	vmov	r2, s14
			battery_data.supply = (uint16_t) (supp * 20);
 8003eb8:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 8003ebc:	b290      	uxth	r0, r2
			battery_data.supply = (uint16_t) (supp * 20);
 8003ebe:	ee2c cb07 	vmul.f64	d12, d12, d7
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 8003ec2:	f8ad 0010 	strh.w	r0, [sp, #16]
			battery_data.battery = (uint16_t) (bat * 20);
 8003ec6:	ee2d db07 	vmul.f64	d13, d13, d7
			battery_data.supply = (uint16_t) (supp * 20);
 8003eca:	eebc cbcc 	vcvt.u32.f64	s24, d12
			UsbPrint(
 8003ece:	e9cd 4000 	strd	r4, r0, [sp]
			battery_data.battery = (uint16_t) (bat * 20);
 8003ed2:	eebc dbcd 	vcvt.u32.f64	s26, d13
			battery_data.supply = (uint16_t) (supp * 20);
 8003ed6:	ee1c 2a10 	vmov	r2, s24
			UsbPrint(
 8003eda:	4829      	ldr	r0, [pc, #164]	; (8003f80 <vTaskBattery+0x208>)
			battery_data.supply = (uint16_t) (supp * 20);
 8003edc:	b291      	uxth	r1, r2
			battery_data.battery = (uint16_t) (bat * 20);
 8003ede:	ee1d 2a10 	vmov	r2, s26
			battery_data.supply = (uint16_t) (supp * 20);
 8003ee2:	f8ad 1008 	strh.w	r1, [sp, #8]
			battery_data.battery = (uint16_t) (bat * 20);
 8003ee6:	b292      	uxth	r2, r2
 8003ee8:	f8ad 200a 	strh.w	r2, [sp, #10]
			UsbPrint(
 8003eec:	f7fe fd4c 	bl	8002988 <UsbPrint>
			logSensor(osKernelGetTickCount(), 1, BATTERY, &battery_data);
 8003ef0:	f00c f948 	bl	8010184 <osKernelGetTickCount>
 8003ef4:	ab02      	add	r3, sp, #8
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	2101      	movs	r1, #1
 8003efa:	f7fe fc1b 	bl	8002734 <logSensor>
			if (AcquireMutex(&battery_mutex) == osOK) {
 8003efe:	4821      	ldr	r0, [pc, #132]	; (8003f84 <vTaskBattery+0x20c>)
 8003f00:	f7fe fbb6 	bl	8002670 <AcquireMutex>
 8003f04:	4604      	mov	r4, r0
 8003f06:	b998      	cbnz	r0, 8003f30 <vTaskBattery+0x1b8>
				global_battery_data.battery = battery_data.battery;
 8003f08:	4b1f      	ldr	r3, [pc, #124]	; (8003f88 <vTaskBattery+0x210>)
 8003f0a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
				ReleaseMutex(&battery_mutex);
 8003f0e:	481d      	ldr	r0, [pc, #116]	; (8003f84 <vTaskBattery+0x20c>)
				global_battery_data.battery = battery_data.battery;
 8003f10:	801a      	strh	r2, [r3, #0]
				global_battery_data.consumption = battery_data.consumption;
 8003f12:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8003f16:	809a      	strh	r2, [r3, #4]
				global_battery_data.current = battery_data.current;
 8003f18:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8003f1c:	805a      	strh	r2, [r3, #2]
				ReleaseMutex(&battery_mutex);
 8003f1e:	f7fe fbb2 	bl	8002686 <ReleaseMutex>
			bat = 0;
 8003f22:	ed9f db05 	vldr	d13, [pc, #20]	; 8003f38 <vTaskBattery+0x1c0>
			supp = 0;
 8003f26:	eeb0 cb4d 	vmov.f64	d12, d13
			curr = 0;
 8003f2a:	eeb0 eb4d 	vmov.f64	d14, d13
 8003f2e:	e794      	b.n	8003e5a <vTaskBattery+0xe2>
			counter = 0;
 8003f30:	2400      	movs	r4, #0
 8003f32:	e7f6      	b.n	8003f22 <vTaskBattery+0x1aa>
 8003f34:	f3af 8000 	nop.w
	...
 8003f44:	3f440000 	.word	0x3f440000
 8003f48:	cccccccd 	.word	0xcccccccd
 8003f4c:	4014cccc 	.word	0x4014cccc
 8003f50:	be0ded28 	.word	0xbe0ded28
 8003f54:	bfd69930 	.word	0xbfd69930
 8003f58:	4189374c 	.word	0x4189374c
 8003f5c:	3fd0e560 	.word	0x3fd0e560
 8003f60:	00000000 	.word	0x00000000
 8003f64:	40668000 	.word	0x40668000
 8003f68:	00000000 	.word	0x00000000
 8003f6c:	40490000 	.word	0x40490000
 8003f70:	00000000 	.word	0x00000000
 8003f74:	408f4000 	.word	0x408f4000
 8003f78:	2400efd4 	.word	0x2400efd4
 8003f7c:	42480000 	.word	0x42480000
 8003f80:	08015814 	.word	0x08015814
 8003f84:	2400aa1c 	.word	0x2400aa1c
 8003f88:	2400efcc 	.word	0x2400efcc

08003f8c <vTaskController>:

#include "tasks/task_controller.h"

/* Abbreviation 'aw' is used to described everything related to the antiwindup */

void vTaskController(void *argument) {
 8003f8c:	b570      	push	{r4, r5, r6, lr}
 8003f8e:	ed2d 8b02 	vpush	{d8}
 8003f92:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
	/* For periodic update */
	uint32_t tick_count, tick_update;

	state_est_data_t state_est_data_local;
	flight_phase_detection_t current_flight_phase_detection = { 0 };
 8003f96:	2100      	movs	r1, #0

	/* Initialize the control_data struct */
	control_data_t control_data = { 0 };
 8003f98:	f44f 6284 	mov.w	r2, #1056	; 0x420

	osDelay(1100);

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8003f9c:	2564      	movs	r5, #100	; 0x64
	control_data_t control_data = { 0 };
 8003f9e:	a812      	add	r0, sp, #72	; 0x48
	flight_phase_detection_t current_flight_phase_detection = { 0 };
 8003fa0:	9102      	str	r1, [sp, #8]
		/* Update Sensor Fusion Variables */
		ReadMutex(&state_est_mutex, &state_est_data_global,
				&state_est_data_local, sizeof(state_est_data_local));

		control_data.sf_ref_altitude_AGL =
				((float) state_est_data_global.position_world[2]) / 1000;
 8003fa2:	ed9f 8a34 	vldr	s16, [pc, #208]	; 8004074 <vTaskController+0xe8>
		ReadMutex(&state_est_mutex, &state_est_data_global,
 8003fa6:	4e34      	ldr	r6, [pc, #208]	; (8004078 <vTaskController+0xec>)
 8003fa8:	eef0 8a48 	vmov.f32	s17, s16
	flight_phase_detection_t current_flight_phase_detection = { 0 };
 8003fac:	e9cd 1100 	strd	r1, r1, [sp]
	control_data_t control_data = { 0 };
 8003fb0:	f00f fb51 	bl	8013656 <memset>
	control_data_init(&control_data);
 8003fb4:	a812      	add	r0, sp, #72	; 0x48
 8003fb6:	f7fc ff15 	bl	8000de4 <control_data_init>
	osDelay(1100);
 8003fba:	f240 404c 	movw	r0, #1100	; 0x44c
 8003fbe:	f00c f94f 	bl	8010260 <osDelay>
	tick_count = osKernelGetTickCount();
 8003fc2:	f00c f8df 	bl	8010184 <osKernelGetTickCount>
 8003fc6:	4604      	mov	r4, r0
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8003fc8:	f00c f8f0 	bl	80101ac <osKernelGetTickFreq>
 8003fcc:	fbb0 f5f5 	udiv	r5, r0, r5
		ReadMutex(&state_est_mutex, &state_est_data_global,
 8003fd0:	233c      	movs	r3, #60	; 0x3c
 8003fd2:	aa03      	add	r2, sp, #12
 8003fd4:	4928      	ldr	r1, [pc, #160]	; (8004078 <vTaskController+0xec>)
		tick_count += tick_update;
 8003fd6:	442c      	add	r4, r5
		ReadMutex(&state_est_mutex, &state_est_data_global,
 8003fd8:	4828      	ldr	r0, [pc, #160]	; (800407c <vTaskController+0xf0>)
 8003fda:	f7fe fb57 	bl	800268c <ReadMutex>
				((float) state_est_data_global.position_world[2]) / 1000;
 8003fde:	edd6 7a02 	vldr	s15, [r6, #8]
		control_data.sf_velocity =
				((float) state_est_data_global.velocity_world[2]) / 1000;

		/* Update flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 8003fe2:	233c      	movs	r3, #60	; 0x3c
 8003fe4:	466a      	mov	r2, sp
				((float) state_est_data_global.position_world[2]) / 1000;
 8003fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 8003fea:	4925      	ldr	r1, [pc, #148]	; (8004080 <vTaskController+0xf4>)
 8003fec:	4825      	ldr	r0, [pc, #148]	; (8004084 <vTaskController+0xf8>)
				((float) state_est_data_global.position_world[2]) / 1000;
 8003fee:	ee87 7a88 	vdiv.f32	s14, s15, s16
				((float) state_est_data_global.velocity_world[2]) / 1000;
 8003ff2:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
 8003ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		control_data.sf_ref_altitude_AGL =
 8003ffa:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
				((float) state_est_data_global.velocity_world[2]) / 1000;
 8003ffe:	ee87 7a88 	vdiv.f32	s14, s15, s16
		control_data.sf_velocity =
 8004002:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 8004006:	f7fe fb41 	bl	800268c <ReadMutex>
				&current_flight_phase_detection, sizeof(state_est_data_local));

		/** MAKE SURE THE RIGHT CONTROLLER IS ACTIVE IS ACTIVE!!!!! **/
		if (LQR_ACTIVE) {
			compute_control_input(&control_data,
 800400a:	a812      	add	r0, sp, #72	; 0x48
 800400c:	4669      	mov	r1, sp
 800400e:	f7fc ff9f 	bl	8000f50 <compute_control_input>
		} else {
			compute_test_control_input(&control_data);
		}

		/* Write Control Input into Global Variable */
		if (AcquireMutex(&controller_mutex) == osOK) {
 8004012:	481d      	ldr	r0, [pc, #116]	; (8004088 <vTaskController+0xfc>)
 8004014:	f7fe fb2c 	bl	8002670 <AcquireMutex>
 8004018:	b958      	cbnz	r0, 8004032 <vTaskController+0xa6>
			controller_output_global = (int32_t) (control_data.control_input
					* 1000);
 800401a:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
			controller_output_global = (int32_t) (control_data.control_input
 800401e:	4b1b      	ldr	r3, [pc, #108]	; (800408c <vTaskController+0x100>)
					* 1000);
 8004020:	ee67 7a88 	vmul.f32	s15, s15, s16
			ReleaseMutex(&controller_mutex);
 8004024:	4818      	ldr	r0, [pc, #96]	; (8004088 <vTaskController+0xfc>)
			controller_output_global = (int32_t) (control_data.control_input
 8004026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800402a:	edc3 7a00 	vstr	s15, [r3]
			ReleaseMutex(&controller_mutex);
 800402e:	f7fe fb2a 	bl	8002686 <ReleaseMutex>
		}

		/* Log to SD Card */
		logControllerOutput(osKernelGetTickCount(),
 8004032:	f00c f8a7 	bl	8010184 <osKernelGetTickCount>
				(int32_t) (control_data.control_input * 1000),
				(int32_t) (control_data.reference_error * 1000),
				(int32_t) (control_data.integrated_error * 1000));
 8004036:	eddd 6a14 	vldr	s13, [sp, #80]	; 0x50
				(int32_t) (control_data.reference_error * 1000),
 800403a:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
				(int32_t) (control_data.control_input * 1000),
 800403e:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
				(int32_t) (control_data.integrated_error * 1000));
 8004042:	ee66 6aa8 	vmul.f32	s13, s13, s17
				(int32_t) (control_data.reference_error * 1000),
 8004046:	ee27 7a28 	vmul.f32	s14, s14, s17
				(int32_t) (control_data.control_input * 1000),
 800404a:	ee67 7aa8 	vmul.f32	s15, s15, s17
		logControllerOutput(osKernelGetTickCount(),
 800404e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8004052:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800405a:	ee16 3a90 	vmov	r3, s13
 800405e:	ee17 2a10 	vmov	r2, s14
 8004062:	ee17 1a90 	vmov	r1, s15
 8004066:	f7fe fc47 	bl	80028f8 <logControllerOutput>

		/* Sleep */
		osDelayUntil(tick_count);
 800406a:	4620      	mov	r0, r4
 800406c:	f00c f912 	bl	8010294 <osDelayUntil>
		tick_count += tick_update;
 8004070:	e7ae      	b.n	8003fd0 <vTaskController+0x44>
 8004072:	bf00      	nop
 8004074:	447a0000 	.word	0x447a0000
 8004078:	2400029c 	.word	0x2400029c
 800407c:	240173c4 	.word	0x240173c4
 8004080:	2400023c 	.word	0x2400023c
 8004084:	2400a98c 	.word	0x2400a98c
 8004088:	2400efc4 	.word	0x2400efc4
 800408c:	24000228 	.word	0x24000228

08004090 <vTaskFlash>:
 *  Created on: Aug 20, 2020
 *      Author: Jonas
 */
#include "tasks/task_flash.h"

void vTaskFlash(void *argument) {
 8004090:	b570      	push	{r4, r5, r6, lr}
	/* For periodic update */
	uint32_t tick_count, tick_update;

	osDelay(500);

	tick_update = osKernelGetTickFreq() / FLASH_SAMPLING_FREQ;
 8004092:	250a      	movs	r5, #10
	osDelay(500);
 8004094:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004098:	f00c f8e2 	bl	8010260 <osDelay>
		int32_t chip_id = 0;

		/* WORK */
		chip_id =  read_chip_id();

		UsbPrint("[FLASH]: ID: %ld\n", chip_id);
 800409c:	4e09      	ldr	r6, [pc, #36]	; (80040c4 <vTaskFlash+0x34>)
	tick_update = osKernelGetTickFreq() / FLASH_SAMPLING_FREQ;
 800409e:	f00c f885 	bl	80101ac <osKernelGetTickFreq>
 80040a2:	fbb0 f5f5 	udiv	r5, r0, r5
	tick_count = osKernelGetTickCount();
 80040a6:	f00c f86d 	bl	8010184 <osKernelGetTickCount>
 80040aa:	4604      	mov	r4, r0
		tick_count += tick_update;
 80040ac:	442c      	add	r4, r5
		chip_id =  read_chip_id();
 80040ae:	f7fc fcd9 	bl	8000a64 <read_chip_id>
		UsbPrint("[FLASH]: ID: %ld\n", chip_id);
 80040b2:	4601      	mov	r1, r0
 80040b4:	4630      	mov	r0, r6
 80040b6:	f7fe fc67 	bl	8002988 <UsbPrint>


		/* Sleep */
		osDelayUntil(tick_count);
 80040ba:	4620      	mov	r0, r4
 80040bc:	f00c f8ea 	bl	8010294 <osDelayUntil>
 80040c0:	e7f4      	b.n	80040ac <vTaskFlash+0x1c>
 80040c2:	bf00      	nop
 80040c4:	08015864 	.word	0x08015864

080040c8 <vTaskFsm>:
 *      Author: Jonas
 */

#include "tasks/task_fsm.h"

void vTaskFsm(void *argument) {
 80040c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040cc:	b09d      	sub	sp, #116	; 0x74
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 80040ce:	2500      	movs	r5, #0

	osDelay(1000);

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 80040d0:	2664      	movs	r6, #100	; 0x64
	while (1) {
		/* Tick Update */
		tick_count += tick_update;

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 80040d2:	4f31      	ldr	r7, [pc, #196]	; (8004198 <vTaskFsm+0xd0>)
	flight_phase_detection_t flight_phase_detection = { 0 };
 80040d4:	ac02      	add	r4, sp, #8
 80040d6:	9502      	str	r5, [sp, #8]
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 80040d8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80041b0 <vTaskFsm+0xe8>
	reset_flight_phase_detection(&flight_phase_detection);
 80040dc:	4620      	mov	r0, r4
			reset_flight_phase_detection(&flight_phase_detection);
			telemetry_command = IDLE_COMMAND;
		}

		/* Update Local State Estimation Data */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm,
 80040de:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80041b4 <vTaskFsm+0xec>
	flight_phase_detection_t flight_phase_detection = { 0 };
 80040e2:	e9c4 5501 	strd	r5, r5, [r4, #4]
	reset_flight_phase_detection(&flight_phase_detection);
 80040e6:	f7fd f9c9 	bl	800147c <reset_flight_phase_detection>
	state_est_data_t state_est_data_fsm = { 0 };
 80040ea:	4629      	mov	r1, r5
 80040ec:	223c      	movs	r2, #60	; 0x3c
 80040ee:	a80d      	add	r0, sp, #52	; 0x34
 80040f0:	f00f fab1 	bl	8013656 <memset>
	init_env(&dummy_env);
 80040f4:	a809      	add	r0, sp, #36	; 0x24
 80040f6:	f7fc ffb3 	bl	8001060 <init_env>
	init_env(&environment);
 80040fa:	a805      	add	r0, sp, #20
 80040fc:	f7fc ffb0 	bl	8001060 <init_env>
	command_e telemetry_command = IDLE_COMMAND;
 8004100:	239b      	movs	r3, #155	; 0x9b
	osDelay(1000);
 8004102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	command_e telemetry_command = IDLE_COMMAND;
 8004106:	f88d 3007 	strb.w	r3, [sp, #7]
	osDelay(1000);
 800410a:	f00c f8a9 	bl	8010260 <osDelay>
	tick_count = osKernelGetTickCount();
 800410e:	f00c f839 	bl	8010184 <osKernelGetTickCount>
 8004112:	4605      	mov	r5, r0
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 8004114:	f00c f84a 	bl	80101ac <osKernelGetTickFreq>
 8004118:	fbb0 f6f6 	udiv	r6, r0, r6
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 800411c:	2301      	movs	r3, #1
 800411e:	f10d 0207 	add.w	r2, sp, #7
 8004122:	4639      	mov	r1, r7
 8004124:	4640      	mov	r0, r8
 8004126:	f7fe fab1 	bl	800268c <ReadMutex>
		if (telemetry_command == CALIBRATE_SENSORS
 800412a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		tick_count += tick_update;
 800412e:	4435      	add	r5, r6
		if (telemetry_command == CALIBRATE_SENSORS
 8004130:	2b49      	cmp	r3, #73	; 0x49
 8004132:	d109      	bne.n	8004148 <vTaskFsm+0x80>
				&& flight_phase_detection.flight_phase == IDLE) {
 8004134:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d105      	bne.n	8004148 <vTaskFsm+0x80>
			reset_flight_phase_detection(&flight_phase_detection);
 800413c:	4620      	mov	r0, r4
 800413e:	f7fd f99d 	bl	800147c <reset_flight_phase_detection>
			telemetry_command = IDLE_COMMAND;
 8004142:	239b      	movs	r3, #155	; 0x9b
 8004144:	f88d 3007 	strb.w	r3, [sp, #7]
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm,
 8004148:	233c      	movs	r3, #60	; 0x3c
 800414a:	aa0d      	add	r2, sp, #52	; 0x34
 800414c:	4649      	mov	r1, r9
 800414e:	4813      	ldr	r0, [pc, #76]	; (800419c <vTaskFsm+0xd4>)
 8004150:	f7fe fa9c 	bl	800268c <ReadMutex>
				sizeof(state_est_data_global));

		/* Update Local Environment Data */
		ReadMutex(&env_mutex, &global_env, &environment, sizeof(global_env));
 8004154:	2310      	movs	r3, #16
 8004156:	aa05      	add	r2, sp, #20
 8004158:	4911      	ldr	r1, [pc, #68]	; (80041a0 <vTaskFsm+0xd8>)
 800415a:	4812      	ldr	r0, [pc, #72]	; (80041a4 <vTaskFsm+0xdc>)
 800415c:	f7fe fa96 	bl	800268c <ReadMutex>

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm,
 8004160:	4620      	mov	r0, r4
 8004162:	aa05      	add	r2, sp, #20
 8004164:	a90d      	add	r1, sp, #52	; 0x34
 8004166:	f7fd f8ff 	bl	8001368 <detect_flight_phase>
				&environment);

		/* Write updated flight Phase detection */
		if (AcquireMutex(&fsm_mutex) == osOK) {
 800416a:	480f      	ldr	r0, [pc, #60]	; (80041a8 <vTaskFsm+0xe0>)
 800416c:	f7fe fa80 	bl	8002670 <AcquireMutex>
 8004170:	b938      	cbnz	r0, 8004182 <vTaskFsm+0xba>
			global_flight_phase_detection = flight_phase_detection;
 8004172:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <vTaskFsm+0xe4>)
 8004174:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004178:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			ReleaseMutex(&fsm_mutex);
 800417c:	480a      	ldr	r0, [pc, #40]	; (80041a8 <vTaskFsm+0xe0>)
 800417e:	f7fe fa82 	bl	8002686 <ReleaseMutex>
		}

		logRocketState(osKernelGetTickCount(), flight_phase_detection);
 8004182:	f00b ffff 	bl	8010184 <osKernelGetTickCount>
 8004186:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800418a:	f7fe fb65 	bl	8002858 <logRocketState>

		/* Sleep */
		osDelayUntil(tick_count);
 800418e:	4628      	mov	r0, r5
 8004190:	f00c f880 	bl	8010294 <osDelayUntil>
		tick_count += tick_update;
 8004194:	e7c2      	b.n	800411c <vTaskFsm+0x54>
 8004196:	bf00      	nop
 8004198:	240173f0 	.word	0x240173f0
 800419c:	240173c4 	.word	0x240173c4
 80041a0:	2400022c 	.word	0x2400022c
 80041a4:	2400cf30 	.word	0x2400cf30
 80041a8:	2400a98c 	.word	0x2400a98c
 80041ac:	2400023c 	.word	0x2400023c
 80041b0:	2400cf28 	.word	0x2400cf28
 80041b4:	2400029c 	.word	0x2400029c

080041b8 <vTaskGps>:
 *      Author: Luca Jost
 */

#include "tasks/task_gps.h"

void vTaskGps(void *argument) {
 80041b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041bc:	b0b3      	sub	sp, #204	; 0xcc

	UBLOX GPS1 = { 0, &huart1 };
 80041be:	222c      	movs	r2, #44	; 0x2c
 80041c0:	2100      	movs	r1, #0
	UBLOX GPS2 = { 1, &huart2 };
 80041c2:	2401      	movs	r4, #1
	UBLOX GPS1 = { 0, &huart1 };
 80041c4:	a811      	add	r0, sp, #68	; 0x44
	UBLOX GPS3 = { 2, &huart3 };

	int timeout_counter1 = 0;
	int timeout_counter2 = 0;
	int timeout_counter3 = 0;
 80041c6:	2500      	movs	r5, #0
	UBLOX GPS1 = { 0, &huart1 };
 80041c8:	f00f fa45 	bl	8013656 <memset>
 80041cc:	4b80      	ldr	r3, [pc, #512]	; (80043d0 <vTaskGps+0x218>)
	UBLOX GPS2 = { 1, &huart2 };
 80041ce:	222c      	movs	r2, #44	; 0x2c
 80041d0:	2100      	movs	r1, #0
 80041d2:	a81c      	add	r0, sp, #112	; 0x70
	UBLOX GPS1 = { 0, &huart1 };
 80041d4:	9312      	str	r3, [sp, #72]	; 0x48
	UBLOX GPS2 = { 1, &huart2 };
 80041d6:	f00f fa3e 	bl	8013656 <memset>
 80041da:	4b7e      	ldr	r3, [pc, #504]	; (80043d4 <vTaskGps+0x21c>)
	UBLOX GPS3 = { 2, &huart3 };
 80041dc:	222c      	movs	r2, #44	; 0x2c
 80041de:	2100      	movs	r1, #0
 80041e0:	a827      	add	r0, sp, #156	; 0x9c
	UBLOX GPS2 = { 1, &huart2 };
 80041e2:	931d      	str	r3, [sp, #116]	; 0x74
 80041e4:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
	UBLOX GPS3 = { 2, &huart3 };
 80041e8:	f00f fa35 	bl	8013656 <memset>
 80041ec:	2302      	movs	r3, #2
	int timeout_counter2 = 0;
 80041ee:	462f      	mov	r7, r5
	int timeout_counter1 = 0;
 80041f0:	462e      	mov	r6, r5
				gps_reset(&GPS3);
				timeout_counter3 = 0;
			}
		}

		UsbPrint(
 80041f2:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 80043e4 <vTaskGps+0x22c>
	UBLOX GPS3 = { 2, &huart3 };
 80041f6:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
 80041fa:	4b77      	ldr	r3, [pc, #476]	; (80043d8 <vTaskGps+0x220>)
				"[GPS1] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
				GPS1.data.hour, GPS1.data.minute, GPS1.data.second,
				GPS1.data.lat_deg, GPS1.data.lat_decimal, GPS1.data.lon_deg,
				GPS1.data.lon_decimal, GPS1.data.satellite, GPS1.data.altitude);

		UsbPrint(
 80041fc:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 80043e8 <vTaskGps+0x230>
	UBLOX GPS3 = { 2, &huart3 };
 8004200:	9328      	str	r3, [sp, #160]	; 0xa0
	tick_count = osKernelGetTickCount();
 8004202:	f00b ffbf 	bl	8010184 <osKernelGetTickCount>
 8004206:	4680      	mov	r8, r0
	tick_update = osKernelGetTickFreq() / GPS_SAMPLE_RATE;
 8004208:	f00b ffd0 	bl	80101ac <osKernelGetTickFreq>
 800420c:	fa20 f904 	lsr.w	r9, r0, r4
	osDelay(600);
 8004210:	f44f 7016 	mov.w	r0, #600	; 0x258
 8004214:	f00c f824 	bl	8010260 <osDelay>
	gps_dma_init(&GPS1);
 8004218:	a811      	add	r0, sp, #68	; 0x44
 800421a:	f7fc fd5d 	bl	8000cd8 <gps_dma_init>
	gps_dma_init(&GPS2);
 800421e:	a81c      	add	r0, sp, #112	; 0x70
 8004220:	f7fc fd5a 	bl	8000cd8 <gps_dma_init>
	gps_dma_init(&GPS3);
 8004224:	a827      	add	r0, sp, #156	; 0x9c
 8004226:	f7fc fd57 	bl	8000cd8 <gps_dma_init>
		if (gps_read_sensor(&GPS1)) {
 800422a:	a811      	add	r0, sp, #68	; 0x44
		tick_count += tick_update;
 800422c:	44c8      	add	r8, r9
		if (gps_read_sensor(&GPS1)) {
 800422e:	f7fc fd69 	bl	8000d04 <gps_read_sensor>
 8004232:	b930      	cbnz	r0, 8004242 <vTaskGps+0x8a>
			timeout_counter1++;
 8004234:	3601      	adds	r6, #1
			if (timeout_counter1 == 10) {
 8004236:	2e0a      	cmp	r6, #10
 8004238:	d104      	bne.n	8004244 <vTaskGps+0x8c>
 800423a:	9007      	str	r0, [sp, #28]
				gps_reset(&GPS1);
 800423c:	a811      	add	r0, sp, #68	; 0x44
 800423e:	f7fc fd87 	bl	8000d50 <gps_reset>
			timeout_counter1 = 0;
 8004242:	2600      	movs	r6, #0
		if (gps_read_sensor(&GPS2)) {
 8004244:	a81c      	add	r0, sp, #112	; 0x70
 8004246:	f7fc fd5d 	bl	8000d04 <gps_read_sensor>
 800424a:	b930      	cbnz	r0, 800425a <vTaskGps+0xa2>
			timeout_counter2++;
 800424c:	3701      	adds	r7, #1
			if (timeout_counter2 == 10) {
 800424e:	2f0a      	cmp	r7, #10
 8004250:	d104      	bne.n	800425c <vTaskGps+0xa4>
 8004252:	9007      	str	r0, [sp, #28]
				gps_reset(&GPS2);
 8004254:	a81c      	add	r0, sp, #112	; 0x70
 8004256:	f7fc fd7b 	bl	8000d50 <gps_reset>
			timeout_counter2 = 0;
 800425a:	2700      	movs	r7, #0
		if (gps_read_sensor(&GPS3)) {
 800425c:	a827      	add	r0, sp, #156	; 0x9c
 800425e:	f7fc fd51 	bl	8000d04 <gps_read_sensor>
 8004262:	b930      	cbnz	r0, 8004272 <vTaskGps+0xba>
			timeout_counter3++;
 8004264:	3501      	adds	r5, #1
			if (timeout_counter3 == 10) {
 8004266:	2d0a      	cmp	r5, #10
 8004268:	d104      	bne.n	8004274 <vTaskGps+0xbc>
 800426a:	9007      	str	r0, [sp, #28]
				gps_reset(&GPS3);
 800426c:	a827      	add	r0, sp, #156	; 0x9c
 800426e:	f7fc fd6f 	bl	8000d50 <gps_reset>
			timeout_counter3 = 0;
 8004272:	2500      	movs	r5, #0
		UsbPrint(
 8004274:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8004278:	4650      	mov	r0, sl
 800427a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800427c:	9305      	str	r3, [sp, #20]
 800427e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8004282:	9304      	str	r3, [sp, #16]
 8004284:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004286:	9303      	str	r3, [sp, #12]
 8004288:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800428c:	9302      	str	r3, [sp, #8]
 800428e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800429c:	f7fe fb74 	bl	8002988 <UsbPrint>
		UsbPrint(
 80042a0:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 80042a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80042a6:	4658      	mov	r0, fp
 80042a8:	9305      	str	r3, [sp, #20]
 80042aa:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80042ae:	9304      	str	r3, [sp, #16]
 80042b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80042b2:	9303      	str	r3, [sp, #12]
 80042b4:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
 80042b8:	9302      	str	r3, [sp, #8]
 80042ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	f89d 3085 	ldrb.w	r3, [sp, #133]	; 0x85
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 80042c8:	f7fe fb5e 	bl	8002988 <UsbPrint>
				"[GPS2] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d Alt: %d\n",
				GPS2.data.hour, GPS2.data.minute, GPS2.data.second,
				GPS2.data.lat_deg, GPS2.data.lat_decimal, GPS2.data.lon_deg,
				GPS2.data.lon_decimal, GPS2.data.satellite, GPS2.data.altitude);

		UsbPrint(
 80042cc:	f8bd 30c4 	ldrh.w	r3, [sp, #196]	; 0xc4
 80042d0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80042d2:	9305      	str	r3, [sp, #20]
 80042d4:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 80042d8:	4840      	ldr	r0, [pc, #256]	; (80043dc <vTaskGps+0x224>)
 80042da:	9304      	str	r3, [sp, #16]
 80042dc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80042de:	9303      	str	r3, [sp, #12]
 80042e0:	f89d 30b8 	ldrb.w	r3, [sp, #184]	; 0xb8
 80042e4:	9302      	str	r3, [sp, #8]
 80042e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80042e8:	9301      	str	r3, [sp, #4]
 80042ea:	f89d 30b1 	ldrb.w	r3, [sp, #177]	; 0xb1
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 80042f4:	f7fe fb48 	bl	8002988 <UsbPrint>
				GPS3.data.hour, GPS3.data.minute, GPS3.data.second,
				GPS3.data.lat_deg, GPS3.data.lat_decimal, GPS3.data.lon_deg,
				GPS3.data.lon_decimal, GPS3.data.satellite, GPS3.data.altitude);

		/* Write GPS to Log */
		logSensor(osKernelGetTickCount(), 1, GPS, &GPS1.data);
 80042f8:	f00b ff44 	bl	8010184 <osKernelGetTickCount>
 80042fc:	ab13      	add	r3, sp, #76	; 0x4c
 80042fe:	2203      	movs	r2, #3
 8004300:	2101      	movs	r1, #1
 8004302:	f7fe fa17 	bl	8002734 <logSensor>
		logSensor(osKernelGetTickCount(), 2, GPS, &GPS2.data);
 8004306:	f00b ff3d 	bl	8010184 <osKernelGetTickCount>
 800430a:	ab1e      	add	r3, sp, #120	; 0x78
 800430c:	2203      	movs	r2, #3
 800430e:	2102      	movs	r1, #2
 8004310:	f7fe fa10 	bl	8002734 <logSensor>
		logSensor(osKernelGetTickCount(), 3, GPS, &GPS3.data);
 8004314:	f00b ff36 	bl	8010184 <osKernelGetTickCount>
 8004318:	2203      	movs	r2, #3
 800431a:	ab29      	add	r3, sp, #164	; 0xa4
 800431c:	4611      	mov	r1, r2
 800431e:	f7fe fa09 	bl	8002734 <logSensor>

		/* get best possible GPS for Telemetry */

		if (GPS1.data.satellite >= GPS2.data.satellite) {
 8004322:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8004326:	f89d 1084 	ldrb.w	r1, [sp, #132]	; 0x84
 800432a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 800432e:	428a      	cmp	r2, r1
 8004330:	d30f      	bcc.n	8004352 <vTaskGps+0x19a>
			if (GPS1.data.satellite >= GPS3.data.satellite) {
 8004332:	4293      	cmp	r3, r2
 8004334:	d913      	bls.n	800435e <vTaskGps+0x1a6>
//			gps_telemetry.lat_decimal = GPS2.data.lat_decimal;
//			gps_telemetry.lon_deg = GPS2.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS2.data.lon_decimal;
//			gps_telemetry.satellite = GPS2.data.satellite;
		} else {
			gps_telemetry = GPS3.data;
 8004336:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
 800433a:	ac08      	add	r4, sp, #32
 800433c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004342:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004348:	f8dc 3000 	ldr.w	r3, [ip]
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	2403      	movs	r4, #3
 8004350:	e012      	b.n	8004378 <vTaskGps+0x1c0>
		} else if (GPS2.data.satellite >= GPS3.data.satellite) {
 8004352:	4299      	cmp	r1, r3
 8004354:	d22d      	bcs.n	80043b2 <vTaskGps+0x1fa>
		} else if (GPS3.data.satellite >= GPS1.data.satellite) {
 8004356:	429a      	cmp	r2, r3
 8004358:	d9ed      	bls.n	8004336 <vTaskGps+0x17e>
		if (choose_GPS == 1) {
 800435a:	2c01      	cmp	r4, #1
 800435c:	d127      	bne.n	80043ae <vTaskGps+0x1f6>
			gps_telemetry = GPS1.data;
 800435e:	ac13      	add	r4, sp, #76	; 0x4c
 8004360:	f10d 0c20 	add.w	ip, sp, #32
 8004364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004366:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800436a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800436c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	2401      	movs	r4, #1
 8004374:	f8cc 3000 	str.w	r3, [ip]
//			gps_telemetry.lon_deg = GPS3.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS3.data.lon_decimal;
//			gps_telemetry.satellite = GPS3.data.satellite;
		}

		if (AcquireMutex(&gps_mutex) == osOK) {
 8004378:	4819      	ldr	r0, [pc, #100]	; (80043e0 <vTaskGps+0x228>)
 800437a:	f7fe f979 	bl	8002670 <AcquireMutex>
 800437e:	b990      	cbnz	r0, 80043a6 <vTaskGps+0x1ee>
			globalGPS = gps_telemetry;
 8004380:	f10d 0e20 	add.w	lr, sp, #32
 8004384:	f8df c064 	ldr.w	ip, [pc, #100]	; 80043ec <vTaskGps+0x234>
 8004388:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800438c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004390:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004394:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004398:	f8de 3000 	ldr.w	r3, [lr]
			ReleaseMutex(&gps_mutex);
 800439c:	4810      	ldr	r0, [pc, #64]	; (80043e0 <vTaskGps+0x228>)
			globalGPS = gps_telemetry;
 800439e:	f8cc 3000 	str.w	r3, [ip]
			ReleaseMutex(&gps_mutex);
 80043a2:	f7fe f970 	bl	8002686 <ReleaseMutex>
		}
		/* Sleep */
		osDelayUntil(tick_count);
 80043a6:	4640      	mov	r0, r8
 80043a8:	f00b ff74 	bl	8010294 <osDelayUntil>
		tick_count += tick_update;
 80043ac:	e73d      	b.n	800422a <vTaskGps+0x72>
		} else if (choose_GPS == 2) {
 80043ae:	2c02      	cmp	r4, #2
 80043b0:	d1c1      	bne.n	8004336 <vTaskGps+0x17e>
			gps_telemetry = GPS2.data;
 80043b2:	ac1e      	add	r4, sp, #120	; 0x78
 80043b4:	f10d 0c20 	add.w	ip, sp, #32
 80043b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80043be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	2402      	movs	r4, #2
 80043c8:	f8cc 3000 	str.w	r3, [ip]
 80043cc:	e7d4      	b.n	8004378 <vTaskGps+0x1c0>
 80043ce:	bf00      	nop
 80043d0:	2401119c 	.word	0x2401119c
 80043d4:	2401d640 	.word	0x2401d640
 80043d8:	2400ab30 	.word	0x2400ab30
 80043dc:	080158f7 	.word	0x080158f7
 80043e0:	2401b458 	.word	0x2401b458
 80043e4:	08015876 	.word	0x08015876
 80043e8:	080158b7 	.word	0x080158b7
 80043ec:	240173cc 	.word	0x240173cc

080043f0 <testairbrakes>:

		osDelayUntil(tick_count);
	}
}

void testairbrakes(int32_t position) {
 80043f0:	b508      	push	{r3, lr}
	MoveToPositionPPM(position);
 80043f2:	f7fc fa07 	bl	8000804 <MoveToPositionPPM>
	osDelay(100);
 80043f6:	2064      	movs	r0, #100	; 0x64
 80043f8:	f00b ff32 	bl	8010260 <osDelay>
	MoveToPositionPPM(2);
 80043fc:	2002      	movs	r0, #2
}
 80043fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MoveToPositionPPM(2);
 8004402:	f7fc b9ff 	b.w	8000804 <MoveToPositionPPM>
	...

08004408 <vTaskMotorCont>:
void vTaskMotorCont(void *argument) {
 8004408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	command_e telemetry_command = IDLE_COMMAND;
 800440c:	239b      	movs	r3, #155	; 0x9b
void vTaskMotorCont(void *argument) {
 800440e:	b086      	sub	sp, #24
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004410:	2400      	movs	r4, #0
	osDelay(3000);
 8004412:	f640 30b8 	movw	r0, #3000	; 0xbb8
	command_e telemetry_command = IDLE_COMMAND;
 8004416:	f88d 3003 	strb.w	r3, [sp, #3]
	flight_phase_detection.flight_phase = IDLE;
 800441a:	2301      	movs	r3, #1
	flight_phase_detection_t flight_phase_detection = { 0 };
 800441c:	9403      	str	r4, [sp, #12]
	flight_phase_detection.flight_phase = IDLE;
 800441e:	f88d 300c 	strb.w	r3, [sp, #12]
	flight_phase_detection.mach_number = SUBSONIC;
 8004422:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004426:	9405      	str	r4, [sp, #20]
	flight_phase_detection.mach_number = SUBSONIC;
 8004428:	9304      	str	r3, [sp, #16]
	osDelay(3000);
 800442a:	f00b ff19 	bl	8010260 <osDelay>
	int32_t measured_motor_position = 0;
 800442e:	e9cd 4401 	strd	r4, r4, [sp, #4]
	while (EnableMotor() != osOK) {
 8004432:	f7fc fab1 	bl	8000998 <EnableMotor>
 8004436:	2800      	cmp	r0, #0
 8004438:	f040 808e 	bne.w	8004558 <vTaskMotorCont+0x150>
	SetPositionMode(position_mode);
 800443c:	2001      	movs	r0, #1
 800443e:	f7fc f9cc 	bl	80007da <SetPositionMode>
	while (SetPositionMode(position_mode) != osOK) {
 8004442:	2001      	movs	r0, #1
 8004444:	f7fc f9c9 	bl	80007da <SetPositionMode>
 8004448:	2800      	cmp	r0, #0
 800444a:	f040 808a 	bne.w	8004562 <vTaskMotorCont+0x15a>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration,
 800444e:	4a47      	ldr	r2, [pc, #284]	; (800456c <vTaskMotorCont+0x164>)
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 8004450:	2619      	movs	r6, #25
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration,
 8004452:	f242 7010 	movw	r0, #10000	; 0x2710
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 8004456:	f8df 8134 	ldr.w	r8, [pc, #308]	; 800458c <vTaskMotorCont+0x184>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration,
 800445a:	4611      	mov	r1, r2
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 800445c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8004590 <vTaskMotorCont+0x188>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration,
 8004460:	f7fc f9fe 	bl	8000860 <ConfigurePPM>
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 8004464:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8004594 <vTaskMotorCont+0x18c>
	tick_count = osKernelGetTickCount();
 8004468:	f00b fe8c 	bl	8010184 <osKernelGetTickCount>
 800446c:	4605      	mov	r5, r0
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 800446e:	f00b fe9d 	bl	80101ac <osKernelGetTickFreq>
 8004472:	fbb0 f6f6 	udiv	r6, r0, r6
		motor_status = GetPosition(&measured_motor_position);
 8004476:	a802      	add	r0, sp, #8
		tick_count += tick_update;
 8004478:	4435      	add	r5, r6
		motor_status = GetPosition(&measured_motor_position);
 800447a:	f7fc fab8 	bl	80009ee <GetPosition>
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 800447e:	2301      	movs	r3, #1
 8004480:	f10d 0203 	add.w	r2, sp, #3
 8004484:	4641      	mov	r1, r8
 8004486:	4648      	mov	r0, r9
 8004488:	f7fe f900 	bl	800268c <ReadMutex>
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 800448c:	230c      	movs	r3, #12
 800448e:	4651      	mov	r1, sl
 8004490:	4837      	ldr	r0, [pc, #220]	; (8004570 <vTaskMotorCont+0x168>)
 8004492:	eb0d 0203 	add.w	r2, sp, r3
 8004496:	f7fe f8f9 	bl	800268c <ReadMutex>
		ReadMutex(&controller_mutex, &controller_output_global,
 800449a:	2304      	movs	r3, #4
 800449c:	4935      	ldr	r1, [pc, #212]	; (8004574 <vTaskMotorCont+0x16c>)
 800449e:	eb0d 0203 	add.w	r2, sp, r3
 80044a2:	4835      	ldr	r0, [pc, #212]	; (8004578 <vTaskMotorCont+0x170>)
 80044a4:	f7fe f8f2 	bl	800268c <ReadMutex>
		desired_motor_position = (int32_t) (((float) controller_actuation)
 80044a8:	eddd 7a01 	vldr	s15, [sp, #4]
				/ 1000 * (-150));
 80044ac:	eddf 6a33 	vldr	s13, [pc, #204]	; 800457c <vTaskMotorCont+0x174>
 80044b0:	f06f 0395 	mvn.w	r3, #149	; 0x95
		desired_motor_position = (int32_t) (((float) controller_actuation)
 80044b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
				/ 1000 * (-150));
 80044b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044bc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004580 <vTaskMotorCont+0x178>
 80044c0:	ee67 7a87 	vmul.f32	s15, s15, s14
		desired_motor_position = (int32_t) (((float) controller_actuation)
 80044c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044c8:	ee17 1a90 	vmov	r1, s15
 80044cc:	4299      	cmp	r1, r3
 80044ce:	bfb8      	it	lt
 80044d0:	4619      	movlt	r1, r3
		if (flight_phase_detection.flight_phase == COASTING) {
 80044d2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80044d6:	2902      	cmp	r1, #2
 80044d8:	bfa8      	it	ge
 80044da:	2102      	movge	r1, #2
 80044dc:	2b04      	cmp	r3, #4
			motor_status = MoveToPositionPPM(desired_motor_position);
 80044de:	bf0c      	ite	eq
 80044e0:	4608      	moveq	r0, r1
			motor_status = MoveToPositionPPM(2);
 80044e2:	2002      	movne	r0, #2
 80044e4:	460c      	mov	r4, r1
 80044e6:	f7fc f98d 	bl	8000804 <MoveToPositionPPM>
		if (flight_phase_detection.flight_phase == IDLE
 80044ea:	f89d 300c 	ldrb.w	r3, [sp, #12]
			motor_status = MoveToPositionPPM(2);
 80044ee:	4607      	mov	r7, r0
		if (flight_phase_detection.flight_phase == IDLE
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d110      	bne.n	8004516 <vTaskMotorCont+0x10e>
				&& telemetry_command == AIRBRAKE_TEST_COMMAND
 80044f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80044f8:	2bd9      	cmp	r3, #217	; 0xd9
 80044fa:	d10c      	bne.n	8004516 <vTaskMotorCont+0x10e>
				&& osKernelGetTickCount() < 60000) {
 80044fc:	f00b fe42 	bl	8010184 <osKernelGetTickCount>
 8004500:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8004504:	4298      	cmp	r0, r3
 8004506:	d806      	bhi.n	8004516 <vTaskMotorCont+0x10e>
			testairbrakes(-140);
 8004508:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 800450c:	f7ff ff70 	bl	80043f0 <testairbrakes>
			telemetry_command = IDLE_COMMAND;
 8004510:	239b      	movs	r3, #155	; 0x9b
 8004512:	f88d 3003 	strb.w	r3, [sp, #3]
		logMotor(osKernelGetTickCount(), desired_motor_position,
 8004516:	f00b fe35 	bl	8010184 <osKernelGetTickCount>
 800451a:	9a02      	ldr	r2, [sp, #8]
 800451c:	4621      	mov	r1, r4
 800451e:	f7fe fa11 	bl	8002944 <logMotor>
		if (motor_status != osOK
 8004522:	b15f      	cbz	r7, 800453c <vTaskMotorCont+0x134>
				&& flight_phase_detection.flight_phase == IDLE) {
 8004524:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d107      	bne.n	800453c <vTaskMotorCont+0x134>
			DisableMotor();
 800452c:	f7fc f944 	bl	80007b8 <DisableMotor>
			osDelay(1000);
 8004530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004534:	f00b fe94 	bl	8010260 <osDelay>
			EnableMotor();
 8004538:	f7fc fa2e 	bl	8000998 <EnableMotor>
		if (AcquireMutex(&motor_mutex) == osOK) {
 800453c:	4811      	ldr	r0, [pc, #68]	; (8004584 <vTaskMotorCont+0x17c>)
 800453e:	f7fe f897 	bl	8002670 <AcquireMutex>
 8004542:	b928      	cbnz	r0, 8004550 <vTaskMotorCont+0x148>
			global_airbrake_extension = measured_motor_position;
 8004544:	4b10      	ldr	r3, [pc, #64]	; (8004588 <vTaskMotorCont+0x180>)
 8004546:	9a02      	ldr	r2, [sp, #8]
			ReleaseMutex(&motor_mutex);
 8004548:	480e      	ldr	r0, [pc, #56]	; (8004584 <vTaskMotorCont+0x17c>)
			global_airbrake_extension = measured_motor_position;
 800454a:	601a      	str	r2, [r3, #0]
			ReleaseMutex(&motor_mutex);
 800454c:	f7fe f89b 	bl	8002686 <ReleaseMutex>
		osDelayUntil(tick_count);
 8004550:	4628      	mov	r0, r5
 8004552:	f00b fe9f 	bl	8010294 <osDelayUntil>
		tick_count += tick_update;
 8004556:	e78e      	b.n	8004476 <vTaskMotorCont+0x6e>
		osDelay(1000);
 8004558:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800455c:	f00b fe80 	bl	8010260 <osDelay>
 8004560:	e767      	b.n	8004432 <vTaskMotorCont+0x2a>
		osDelay(1000);
 8004562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004566:	f00b fe7b 	bl	8010260 <osDelay>
 800456a:	e76a      	b.n	8004442 <vTaskMotorCont+0x3a>
 800456c:	000186a0 	.word	0x000186a0
 8004570:	2400a98c 	.word	0x2400a98c
 8004574:	24000228 	.word	0x24000228
 8004578:	2400efc4 	.word	0x2400efc4
 800457c:	447a0000 	.word	0x447a0000
 8004580:	c3160000 	.word	0xc3160000
 8004584:	2400ab28 	.word	0x2400ab28
 8004588:	2401b54c 	.word	0x2401b54c
 800458c:	240173f0 	.word	0x240173f0
 8004590:	2400cf28 	.word	0x2400cf28
 8004594:	2400023c 	.word	0x2400023c

08004598 <vTaskPeripherals>:
 *      Author: Jonas
 */

#include "tasks/task_peripherals.h"

void vTaskPeripherals(void *argument) {
 8004598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* For periodic update */
	uint32_t tick_count, tick_update;

	osDelay(1200);
 800459c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
void vTaskPeripherals(void *argument) {
 80045a0:	b087      	sub	sp, #28
	osDelay(1200);
 80045a2:	f00b fe5d 	bl	8010260 <osDelay>
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 80045a6:	2201      	movs	r2, #1
 80045a8:	2102      	movs	r1, #2
 80045aa:	4860      	ldr	r0, [pc, #384]	; (800472c <vTaskPeripherals+0x194>)

	/* Telemetry Command */
	command_e telemetry_command = IDLE_COMMAND;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 80045ac:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 80045ae:	f003 fd5b 	bl	8008068 <HAL_GPIO_WritePin>
	command_e telemetry_command = IDLE_COMMAND;
 80045b2:	239b      	movs	r3, #155	; 0x9b
	reset_flight_phase_detection(&flight_phase_detection);
 80045b4:	a803      	add	r0, sp, #12
	flight_phase_detection_t flight_phase_detection = { 0 };
 80045b6:	9405      	str	r4, [sp, #20]
	bool buzzer_on_telemetry = false;
 80045b8:	46a2      	mov	sl, r4
	command_e telemetry_command = IDLE_COMMAND;
 80045ba:	f88d 300b 	strb.w	r3, [sp, #11]
	bool buzzer_on_fsm = false;
 80045be:	46a1      	mov	r9, r4
	bool camera_ready = false;
 80045c0:	4627      	mov	r7, r4
	bool camera_wait = false;
 80045c2:	4626      	mov	r6, r4
	uint32_t camera_counter = 0;
 80045c4:	4625      	mov	r5, r4
	flight_phase_detection_t flight_phase_detection = { 0 };
 80045c6:	e9cd 4403 	strd	r4, r4, [sp, #12]
	reset_flight_phase_detection(&flight_phase_detection);
 80045ca:	f7fc ff57 	bl	800147c <reset_flight_phase_detection>

	/* Infinite loop */

	tick_update = osKernelGetTickFreq() / PERIPHERALS_SAMPLING_FREQ;
 80045ce:	f00b fded 	bl	80101ac <osKernelGetTickFreq>
 80045d2:	230a      	movs	r3, #10
 80045d4:	fbb0 fbf3 	udiv	fp, r0, r3
	tick_count = osKernelGetTickCount();
 80045d8:	f00b fdd4 	bl	8010184 <osKernelGetTickCount>
 80045dc:	4680      	mov	r8, r0
	bool camera_trigger = false;
 80045de:	9401      	str	r4, [sp, #4]
	bool camera_enabled = false;
 80045e0:	9400      	str	r4, [sp, #0]
	while (1) {
		/* Tick Update */
		tick_count += tick_update;

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 80045e2:	2301      	movs	r3, #1
 80045e4:	f10d 020b 	add.w	r2, sp, #11
 80045e8:	4951      	ldr	r1, [pc, #324]	; (8004730 <vTaskPeripherals+0x198>)
		tick_count += tick_update;
 80045ea:	44d8      	add	r8, fp
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 80045ec:	4851      	ldr	r0, [pc, #324]	; (8004734 <vTaskPeripherals+0x19c>)
 80045ee:	f7fe f84d 	bl	800268c <ReadMutex>
				sizeof(global_telemetry_command));

		/* Read Flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 80045f2:	230c      	movs	r3, #12
 80045f4:	4950      	ldr	r1, [pc, #320]	; (8004738 <vTaskPeripherals+0x1a0>)
 80045f6:	eb0d 0203 	add.w	r2, sp, r3
 80045fa:	4850      	ldr	r0, [pc, #320]	; (800473c <vTaskPeripherals+0x1a4>)
 80045fc:	f7fe f846 	bl	800268c <ReadMutex>
				&flight_phase_detection, sizeof(global_flight_phase_detection));

		/* Enable Buzzer trough Telemetry */
		if (telemetry_command == ENABLE_BUZZER) {
 8004600:	f89d 300b 	ldrb.w	r3, [sp, #11]
			buzzer_on_telemetry = !buzzer_on_telemetry;
		}

		/* Enable Buzzer Trough FSM */
		if (flight_phase_detection.flight_phase == RECOVERY) {
 8004604:	f89d 200c 	ldrb.w	r2, [sp, #12]
		if (telemetry_command == ENABLE_BUZZER) {
 8004608:	2b71      	cmp	r3, #113	; 0x71
			buzzer_on_telemetry = !buzzer_on_telemetry;
 800460a:	bf08      	it	eq
 800460c:	f08a 0a01 	eoreq.w	sl, sl, #1
			buzzer_on_fsm = true;
 8004610:	2a06      	cmp	r2, #6
 8004612:	bf08      	it	eq
 8004614:	f04f 0901 	moveq.w	r9, #1
		}

		/* Enable Self Power Hold */
		if (telemetry_command == TELEMETRY_HIGH_SAMPLING) {
 8004618:	2b0d      	cmp	r3, #13
 800461a:	d104      	bne.n	8004626 <vTaskPeripherals+0x8e>
			HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 800461c:	2200      	movs	r2, #0
 800461e:	2102      	movs	r1, #2
 8004620:	4842      	ldr	r0, [pc, #264]	; (800472c <vTaskPeripherals+0x194>)
 8004622:	f003 fd21 	bl	8008068 <HAL_GPIO_WritePin>
		}

		/* Disable Self Power Hold */
		if (telemetry_command == DISABLE_SELF_HOLD) {
 8004626:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800462a:	2bfb      	cmp	r3, #251	; 0xfb
 800462c:	d104      	bne.n	8004638 <vTaskPeripherals+0xa0>
			HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 800462e:	2201      	movs	r2, #1
 8004630:	2102      	movs	r1, #2
 8004632:	483e      	ldr	r0, [pc, #248]	; (800472c <vTaskPeripherals+0x194>)
 8004634:	f003 fd18 	bl	8008068 <HAL_GPIO_WritePin>
		}

		/* Start Enable Camera Sequence */
		if ((telemetry_command == ENABLE_CAMERA) && !camera_enabled) {
 8004638:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d113      	bne.n	8004668 <vTaskPeripherals+0xd0>
 8004640:	9b00      	ldr	r3, [sp, #0]
 8004642:	b98b      	cbnz	r3, 8004668 <vTaskPeripherals+0xd0>
			camera_enabled = true;
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_SET);
 8004644:	2201      	movs	r2, #1
 8004646:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800464a:	483d      	ldr	r0, [pc, #244]	; (8004740 <vTaskPeripherals+0x1a8>)
 800464c:	f003 fd0c 	bl	8008068 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_SET);
 8004650:	2201      	movs	r2, #1
 8004652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004656:	483a      	ldr	r0, [pc, #232]	; (8004740 <vTaskPeripherals+0x1a8>)
 8004658:	f003 fd06 	bl	8008068 <HAL_GPIO_WritePin>
			camera_counter = osKernelGetTickCount() + CAMERA_ON;
 800465c:	f00b fd92 	bl	8010184 <osKernelGetTickCount>
			camera_enabled = true;
 8004660:	2301      	movs	r3, #1
			camera_counter = osKernelGetTickCount() + CAMERA_ON;
 8004662:	f600 55ac 	addw	r5, r0, #3500	; 0xdac
			camera_enabled = true;
 8004666:	9300      	str	r3, [sp, #0]
		}

		if ((camera_counter > osKernelGetTickCount()) && !camera_wait) {
 8004668:	f00b fd8c 	bl	8010184 <osKernelGetTickCount>
 800466c:	42a8      	cmp	r0, r5
 800466e:	d211      	bcs.n	8004694 <vTaskPeripherals+0xfc>
 8004670:	b986      	cbnz	r6, 8004694 <vTaskPeripherals+0xfc>
			camera_wait = true;
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_RESET);
 8004672:	4632      	mov	r2, r6
 8004674:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004678:	4831      	ldr	r0, [pc, #196]	; (8004740 <vTaskPeripherals+0x1a8>)
 800467a:	f003 fcf5 	bl	8008068 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 800467e:	4632      	mov	r2, r6
 8004680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004684:	482e      	ldr	r0, [pc, #184]	; (8004740 <vTaskPeripherals+0x1a8>)
 8004686:	f003 fcef 	bl	8008068 <HAL_GPIO_WritePin>
			camera_wait = true;
 800468a:	2601      	movs	r6, #1
			camera_counter = osKernelGetTickCount() + CAMERA_WAIT;
 800468c:	f00b fd7a 	bl	8010184 <osKernelGetTickCount>
 8004690:	f500 757a 	add.w	r5, r0, #1000	; 0x3e8
		}

		if ((camera_counter > osKernelGetTickCount()) && !camera_trigger) {
 8004694:	f00b fd76 	bl	8010184 <osKernelGetTickCount>
 8004698:	42a8      	cmp	r0, r5
 800469a:	d213      	bcs.n	80046c4 <vTaskPeripherals+0x12c>
 800469c:	9b01      	ldr	r3, [sp, #4]
 800469e:	b98b      	cbnz	r3, 80046c4 <vTaskPeripherals+0x12c>
			camera_trigger = true;
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_SET);
 80046a0:	2201      	movs	r2, #1
 80046a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80046a6:	4826      	ldr	r0, [pc, #152]	; (8004740 <vTaskPeripherals+0x1a8>)
 80046a8:	f003 fcde 	bl	8008068 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_SET);
 80046ac:	2201      	movs	r2, #1
 80046ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046b2:	4823      	ldr	r0, [pc, #140]	; (8004740 <vTaskPeripherals+0x1a8>)
 80046b4:	f003 fcd8 	bl	8008068 <HAL_GPIO_WritePin>
			camera_counter = osKernelGetTickCount() + CAMERA_TRIGGER;
 80046b8:	f00b fd64 	bl	8010184 <osKernelGetTickCount>
			camera_trigger = true;
 80046bc:	2301      	movs	r3, #1
			camera_counter = osKernelGetTickCount() + CAMERA_TRIGGER;
 80046be:	f100 05c8 	add.w	r5, r0, #200	; 0xc8
			camera_trigger = true;
 80046c2:	9301      	str	r3, [sp, #4]
		}

		if ((camera_counter > osKernelGetTickCount()) && !camera_ready) {
 80046c4:	f00b fd5e 	bl	8010184 <osKernelGetTickCount>
 80046c8:	42a8      	cmp	r0, r5
 80046ca:	d20d      	bcs.n	80046e8 <vTaskPeripherals+0x150>
 80046cc:	b967      	cbnz	r7, 80046e8 <vTaskPeripherals+0x150>
			camera_ready = true;
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_RESET);
 80046ce:	463a      	mov	r2, r7
 80046d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80046d4:	481a      	ldr	r0, [pc, #104]	; (8004740 <vTaskPeripherals+0x1a8>)
 80046d6:	f003 fcc7 	bl	8008068 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 80046da:	463a      	mov	r2, r7
			camera_ready = true;
 80046dc:	2701      	movs	r7, #1
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 80046de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046e2:	4817      	ldr	r0, [pc, #92]	; (8004740 <vTaskPeripherals+0x1a8>)
 80046e4:	f003 fcc0 	bl	8008068 <HAL_GPIO_WritePin>
		}

		/* Camera first enable for some time, then turn off and finally turn on again */

		/* Enable Buzzer */
		if (buzzer_on_fsm ^ buzzer_on_telemetry) {
 80046e8:	45d1      	cmp	r9, sl
 80046ea:	d011      	beq.n	8004710 <vTaskPeripherals+0x178>
			if (buzzercounter > (400 / tick_update)) {
 80046ec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80046f0:	fbb3 f3fb 	udiv	r3, r3, fp
 80046f4:	429c      	cmp	r4, r3
 80046f6:	d905      	bls.n	8004704 <vTaskPeripherals+0x16c>
				HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
				buzzercounter = 0;
 80046f8:	2400      	movs	r4, #0
				HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80046fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046fe:	4811      	ldr	r0, [pc, #68]	; (8004744 <vTaskPeripherals+0x1ac>)
 8004700:	f003 fcb7 	bl	8008072 <HAL_GPIO_TogglePin>
		}

		else if (osKernelGetTickCount() > 5000) {
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
		}
		buzzercounter++;
 8004704:	3401      	adds	r4, #1

		/* Sleep */
		osDelayUntil(tick_count);
 8004706:	4640      	mov	r0, r8
		buzzercounter++;
 8004708:	b2e4      	uxtb	r4, r4
		osDelayUntil(tick_count);
 800470a:	f00b fdc3 	bl	8010294 <osDelayUntil>
		tick_count += tick_update;
 800470e:	e768      	b.n	80045e2 <vTaskPeripherals+0x4a>
		else if (osKernelGetTickCount() > 5000) {
 8004710:	f00b fd38 	bl	8010184 <osKernelGetTickCount>
 8004714:	f241 3388 	movw	r3, #5000	; 0x1388
 8004718:	4298      	cmp	r0, r3
 800471a:	d9f3      	bls.n	8004704 <vTaskPeripherals+0x16c>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800471c:	2200      	movs	r2, #0
 800471e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004722:	4808      	ldr	r0, [pc, #32]	; (8004744 <vTaskPeripherals+0x1ac>)
 8004724:	f003 fca0 	bl	8008068 <HAL_GPIO_WritePin>
 8004728:	e7ec      	b.n	8004704 <vTaskPeripherals+0x16c>
 800472a:	bf00      	nop
 800472c:	58020400 	.word	0x58020400
 8004730:	240173f0 	.word	0x240173f0
 8004734:	2400cf28 	.word	0x2400cf28
 8004738:	2400023c 	.word	0x2400023c
 800473c:	2400a98c 	.word	0x2400a98c
 8004740:	58021000 	.word	0x58021000
 8004744:	58020c00 	.word	0x58020c00

08004748 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8004748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Try everything forever;
	for (;;) {
		osDelay(100);
 800474c:	2064      	movs	r0, #100	; 0x64
void vTaskSdCard(void *argument) {
 800474e:	b0cd      	sub	sp, #308	; 0x134
		osDelay(100);
 8004750:	f00b fd86 	bl	8010260 <osDelay>
		flight_phase_detection_t local_flight_phase;
		FRESULT res;
		char EULER_LOG_FILE_NAME[13] = "";
 8004754:	2300      	movs	r3, #0
		UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8004756:	4890      	ldr	r0, [pc, #576]	; (8004998 <vTaskSdCard+0x250>)
		char EULER_LOG_FILE_NAME[13] = "";
 8004758:	9309      	str	r3, [sp, #36]	; 0x24
 800475a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		local_flight_phase.flight_phase = IDLE;
		resetSDCard: //UsbPrint("[STORAGE TASK] Mounting SD card\n");
		do {
			EULER_LOG_FILE_NAME[0] = 0;
			res = f_mount(&EULER_FatFS, "", 1);
 800475e:	4c8f      	ldr	r4, [pc, #572]	; (800499c <vTaskSdCard+0x254>)
 8004760:	4d8f      	ldr	r5, [pc, #572]	; (80049a0 <vTaskSdCard+0x258>)
			if (res != FR_OK) {
				UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8004762:	4e90      	ldr	r6, [pc, #576]	; (80049a4 <vTaskSdCard+0x25c>)
		char EULER_LOG_FILE_NAME[13] = "";
 8004764:	e9cd 3307 	strd	r3, r3, [sp, #28]
		UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8004768:	f7fe f90e 	bl	8002988 <UsbPrint>
		local_flight_phase.flight_phase = IDLE;
 800476c:	2301      	movs	r3, #1
 800476e:	f88d 3010 	strb.w	r3, [sp, #16]
			EULER_LOG_FILE_NAME[0] = 0;
 8004772:	2700      	movs	r7, #0
			res = f_mount(&EULER_FatFS, "", 1);
 8004774:	4621      	mov	r1, r4
 8004776:	2201      	movs	r2, #1
 8004778:	4628      	mov	r0, r5
			EULER_LOG_FILE_NAME[0] = 0;
 800477a:	f88d 701c 	strb.w	r7, [sp, #28]
			res = f_mount(&EULER_FatFS, "", 1);
 800477e:	f00a fff7 	bl	800f770 <f_mount>
			if (res != FR_OK) {
 8004782:	4601      	mov	r1, r0
 8004784:	2800      	cmp	r0, #0
 8004786:	d147      	bne.n	8004818 <vTaskSdCard+0xd0>
				osDelay(10);
			}
		} while (res != FR_OK);

		logToNewFile: if (!EULER_LOG_FILE_NAME[0]) {
			UsbPrint("[STORAGE TASK] Creating file name\n");
 8004788:	4f87      	ldr	r7, [pc, #540]	; (80049a8 <vTaskSdCard+0x260>)

			unsigned int file_number = 1;

			DIR dj;
			FILINFO fno;
			res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 800478a:	f8df 8268 	ldr.w	r8, [pc, #616]	; 80049f4 <vTaskSdCard+0x2ac>
		logToNewFile: if (!EULER_LOG_FILE_NAME[0]) {
 800478e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d165      	bne.n	8004862 <vTaskSdCard+0x11a>
			UsbPrint("[STORAGE TASK] Creating file name\n");
 8004796:	4638      	mov	r0, r7
			unsigned int file_number = 1;
 8004798:	f04f 0901 	mov.w	r9, #1
			while (res == FR_OK && fno.fname[0]) {
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 800479c:	f04f 0a64 	mov.w	sl, #100	; 0x64
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 80047a0:	f04f 0b0a 	mov.w	fp, #10
			UsbPrint("[STORAGE TASK] Creating file name\n");
 80047a4:	f7fe f8f0 	bl	8002988 <UsbPrint>
			res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 80047a8:	4643      	mov	r3, r8
 80047aa:	4622      	mov	r2, r4
 80047ac:	a90b      	add	r1, sp, #44	; 0x2c
 80047ae:	a819      	add	r0, sp, #100	; 0x64
 80047b0:	f00b fc3f 	bl	8010032 <f_findfirst>
			while (res == FR_OK && fno.fname[0]) {
 80047b4:	2800      	cmp	r0, #0
 80047b6:	f040 80eb 	bne.w	8004990 <vTaskSdCard+0x248>
 80047ba:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d139      	bne.n	8004836 <vTaskSdCard+0xee>
						"[STORAGE TASK] Failed finding first or next file: %d\n",
						res);
				goto resetSDCard;
			}

			strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 80047c2:	497a      	ldr	r1, [pc, #488]	; (80049ac <vTaskSdCard+0x264>)
 80047c4:	a807      	add	r0, sp, #28
 80047c6:	f00f f83b 	bl	8013840 <strcpy>
			EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 80047ca:	230a      	movs	r3, #10
			EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
			EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;

			UsbPrint("[STORAGE TASK] Using file name: %s\n",
 80047cc:	4878      	ldr	r0, [pc, #480]	; (80049b0 <vTaskSdCard+0x268>)
			EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 80047ce:	fbb9 f1f3 	udiv	r1, r9, r3
 80047d2:	fb03 9211 	mls	r2, r3, r1, r9
 80047d6:	3230      	adds	r2, #48	; 0x30
 80047d8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
			EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 80047dc:	fbb1 f2f3 	udiv	r2, r1, r3
 80047e0:	fb03 1212 	mls	r2, r3, r2, r1
			UsbPrint("[STORAGE TASK] Using file name: %s\n",
 80047e4:	a907      	add	r1, sp, #28
			EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 80047e6:	3230      	adds	r2, #48	; 0x30
 80047e8:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
			EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 80047ec:	2264      	movs	r2, #100	; 0x64
 80047ee:	fbb9 f9f2 	udiv	r9, r9, r2
 80047f2:	fbb9 f2f3 	udiv	r2, r9, r3
 80047f6:	fb03 9912 	mls	r9, r3, r2, r9
 80047fa:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80047fe:	f88d 9020 	strb.w	r9, [sp, #32]
			UsbPrint("[STORAGE TASK] Using file name: %s\n",
 8004802:	f7fe f8c1 	bl	8002988 <UsbPrint>
					EULER_LOG_FILE_NAME);

			res = f_closedir(&dj);
 8004806:	a819      	add	r0, sp, #100	; 0x64
 8004808:	f00b fbba 	bl	800ff80 <f_closedir>
			if (res != FR_OK) {
 800480c:	4601      	mov	r1, r0
 800480e:	b340      	cbz	r0, 8004862 <vTaskSdCard+0x11a>
				UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8004810:	4868      	ldr	r0, [pc, #416]	; (80049b4 <vTaskSdCard+0x26c>)

					UsbPrint("[STORAGE TASK] Syncing file..\n");
					HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
					res = f_sync(&EULER_LOG_FILE);
					if (res != FR_OK) {
						UsbPrint("[STORAGE TASK] Failed syncing file: %d\n",
 8004812:	f7fe f8b9 	bl	8002988 <UsbPrint>
								res);
						goto resetSDCard;
 8004816:	e7ac      	b.n	8004772 <vTaskSdCard+0x2a>
				UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8004818:	4630      	mov	r0, r6
 800481a:	f7fe f8b5 	bl	8002988 <UsbPrint>
				disk.is_initialized[0] = 0;
 800481e:	4b66      	ldr	r3, [pc, #408]	; (80049b8 <vTaskSdCard+0x270>)
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8004820:	2201      	movs	r2, #1
 8004822:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004826:	4865      	ldr	r0, [pc, #404]	; (80049bc <vTaskSdCard+0x274>)
				disk.is_initialized[0] = 0;
 8004828:	701f      	strb	r7, [r3, #0]
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800482a:	f003 fc1d 	bl	8008068 <HAL_GPIO_WritePin>
				osDelay(10);
 800482e:	200a      	movs	r0, #10
 8004830:	f00b fd16 	bl	8010260 <osDelay>
 8004834:	e79d      	b.n	8004772 <vTaskSdCard+0x2a>
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8004836:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				res = f_findnext(&dj, &fno);
 800483a:	a90b      	add	r1, sp, #44	; 0x2c
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 800483c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
				res = f_findnext(&dj, &fno);
 8004840:	a819      	add	r0, sp, #100	; 0x64
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8004842:	3a30      	subs	r2, #48	; 0x30
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8004844:	3b30      	subs	r3, #48	; 0x30
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8004846:	fb0b f202 	mul.w	r2, fp, r2
 800484a:	fb0a 2303 	mla	r3, sl, r3, r2
 800484e:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8004852:	4413      	add	r3, r2
				if (current_file_number + 1 > file_number) {
 8004854:	3b2f      	subs	r3, #47	; 0x2f
 8004856:	4599      	cmp	r9, r3
 8004858:	bf38      	it	cc
 800485a:	4699      	movcc	r9, r3
				res = f_findnext(&dj, &fno);
 800485c:	f00b fbd1 	bl	8010002 <f_findnext>
 8004860:	e7a8      	b.n	80047b4 <vTaskSdCard+0x6c>
		res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8004862:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80049d8 <vTaskSdCard+0x290>
		UsbPrint("[STORAGE TASK] Opening log file\n");
 8004866:	4856      	ldr	r0, [pc, #344]	; (80049c0 <vTaskSdCard+0x278>)
 8004868:	f7fe f88e 	bl	8002988 <UsbPrint>
		res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 800486c:	a907      	add	r1, sp, #28
 800486e:	2212      	movs	r2, #18
 8004870:	4648      	mov	r0, r9
 8004872:	f00a ffc7 	bl	800f804 <f_open>
		if (res != FR_OK) {
 8004876:	4601      	mov	r1, r0
 8004878:	b108      	cbz	r0, 800487e <vTaskSdCard+0x136>
			UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 800487a:	4852      	ldr	r0, [pc, #328]	; (80049c4 <vTaskSdCard+0x27c>)
 800487c:	e7c9      	b.n	8004812 <vTaskSdCard+0xca>
		UsbPrint("[STORAGE TASK] Going to end of file\n");
 800487e:	4852      	ldr	r0, [pc, #328]	; (80049c8 <vTaskSdCard+0x280>)
 8004880:	f7fe f882 	bl	8002988 <UsbPrint>
		res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 8004884:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8004888:	4648      	mov	r0, r9
 800488a:	f00b fa0a 	bl	800fca2 <f_lseek>
		if (res != FR_OK) {
 800488e:	4601      	mov	r1, r0
 8004890:	b108      	cbz	r0, 8004896 <vTaskSdCard+0x14e>
			UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8004892:	484e      	ldr	r0, [pc, #312]	; (80049cc <vTaskSdCard+0x284>)
 8004894:	e7bd      	b.n	8004812 <vTaskSdCard+0xca>
		char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8004896:	4b4e      	ldr	r3, [pc, #312]	; (80049d0 <vTaskSdCard+0x288>)
 8004898:	aa11      	add	r2, sp, #68	; 0x44
		volatile int32_t msgCounter = 0;
 800489a:	9003      	str	r0, [sp, #12]
		char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 800489c:	f103 0e18 	add.w	lr, r3, #24
 80048a0:	4691      	mov	r9, r2
 80048a2:	6818      	ldr	r0, [r3, #0]
 80048a4:	3308      	adds	r3, #8
 80048a6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80048aa:	4694      	mov	ip, r2
 80048ac:	4573      	cmp	r3, lr
 80048ae:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80048b2:	4662      	mov	r2, ip
 80048b4:	d1f5      	bne.n	80048a2 <vTaskSdCard+0x15a>
 80048b6:	8899      	ldrh	r1, [r3, #4]
 80048b8:	6818      	ldr	r0, [r3, #0]
 80048ba:	799b      	ldrb	r3, [r3, #6]
 80048bc:	f8cc 0000 	str.w	r0, [ip]
		res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 80048c0:	4648      	mov	r0, r9
		char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 80048c2:	f88c 3006 	strb.w	r3, [ip, #6]
 80048c6:	2300      	movs	r3, #0
 80048c8:	f8ac 1004 	strh.w	r1, [ip, #4]
 80048cc:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
		res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 80048d0:	f7fb fd06 	bl	80002e0 <strlen>
 80048d4:	4649      	mov	r1, r9
 80048d6:	4602      	mov	r2, r0
 80048d8:	4b3e      	ldr	r3, [pc, #248]	; (80049d4 <vTaskSdCard+0x28c>)
 80048da:	483f      	ldr	r0, [pc, #252]	; (80049d8 <vTaskSdCard+0x290>)
 80048dc:	f00b f8a2 	bl	800fa24 <f_write>
		if (res != FR_OK) {
 80048e0:	4681      	mov	r9, r0
 80048e2:	b110      	cbz	r0, 80048ea <vTaskSdCard+0x1a2>
			UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 80048e4:	4601      	mov	r1, r0
						UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 80048e6:	483d      	ldr	r0, [pc, #244]	; (80049dc <vTaskSdCard+0x294>)
 80048e8:	e793      	b.n	8004812 <vTaskSdCard+0xca>
		log_entry_t log_entry = { 0 };
 80048ea:	4601      	mov	r1, r0
 80048ec:	2296      	movs	r2, #150	; 0x96
 80048ee:	a826      	add	r0, sp, #152	; 0x98
			if (osMessageQueueGet(log_queue, &log_entry, NULL,
 80048f0:	f8df a104 	ldr.w	sl, [pc, #260]	; 80049f8 <vTaskSdCard+0x2b0>
		log_entry_t log_entry = { 0 };
 80048f4:	f00e feaf 	bl	8013656 <memset>
					res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 80048f8:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80049d4 <vTaskSdCard+0x28c>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80048fc:	464a      	mov	r2, r9
					res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 80048fe:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80049d8 <vTaskSdCard+0x290>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004906:	482d      	ldr	r0, [pc, #180]	; (80049bc <vTaskSdCard+0x274>)
 8004908:	f003 fbae 	bl	8008068 <HAL_GPIO_WritePin>
			if (osMessageQueueGet(log_queue, &log_entry, NULL,
 800490c:	f04f 33ff 	mov.w	r3, #4294967295
 8004910:	2200      	movs	r2, #0
 8004912:	a926      	add	r1, sp, #152	; 0x98
 8004914:	f8da 0000 	ldr.w	r0, [sl]
 8004918:	f00b feee 	bl	80106f8 <osMessageQueueGet>
 800491c:	2800      	cmp	r0, #0
 800491e:	d1f5      	bne.n	800490c <vTaskSdCard+0x1c4>
				num_bytes = strlen(log_entry.str);
 8004920:	a826      	add	r0, sp, #152	; 0x98
 8004922:	f7fb fcdd 	bl	80002e0 <strlen>
				if (num_bytes > 0) {
 8004926:	4602      	mov	r2, r0
 8004928:	b138      	cbz	r0, 800493a <vTaskSdCard+0x1f2>
					res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 800492a:	a926      	add	r1, sp, #152	; 0x98
 800492c:	465b      	mov	r3, fp
 800492e:	4648      	mov	r0, r9
 8004930:	f00b f878 	bl	800fa24 <f_write>
					if (res != FR_OK) {
 8004934:	4601      	mov	r1, r0
 8004936:	2800      	cmp	r0, #0
 8004938:	d1d5      	bne.n	80048e6 <vTaskSdCard+0x19e>
				msgCounter++;
 800493a:	9b03      	ldr	r3, [sp, #12]
 800493c:	3301      	adds	r3, #1
 800493e:	9303      	str	r3, [sp, #12]
				if (msgCounter >= SYNC_AFTER_COUNT) {
 8004940:	9b03      	ldr	r3, [sp, #12]
 8004942:	2b7f      	cmp	r3, #127	; 0x7f
 8004944:	dde2      	ble.n	800490c <vTaskSdCard+0x1c4>
					msgCounter = 0;
 8004946:	2300      	movs	r3, #0
					UsbPrint("[STORAGE TASK] Syncing file..\n");
 8004948:	4825      	ldr	r0, [pc, #148]	; (80049e0 <vTaskSdCard+0x298>)
					msgCounter = 0;
 800494a:	9303      	str	r3, [sp, #12]
					UsbPrint("[STORAGE TASK] Syncing file..\n");
 800494c:	f7fe f81c 	bl	8002988 <UsbPrint>
					HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8004950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004954:	4819      	ldr	r0, [pc, #100]	; (80049bc <vTaskSdCard+0x274>)
 8004956:	f003 fb8c 	bl	8008072 <HAL_GPIO_TogglePin>
					res = f_sync(&EULER_LOG_FILE);
 800495a:	4648      	mov	r0, r9
 800495c:	f00b f938 	bl	800fbd0 <f_sync>
					if (res != FR_OK) {
 8004960:	4601      	mov	r1, r0
 8004962:	b108      	cbz	r0, 8004968 <vTaskSdCard+0x220>
						UsbPrint("[STORAGE TASK] Failed syncing file: %d\n",
 8004964:	481f      	ldr	r0, [pc, #124]	; (80049e4 <vTaskSdCard+0x29c>)
 8004966:	e754      	b.n	8004812 <vTaskSdCard+0xca>
					}

					;

					// if the rocket landed, create a new file and write to that one
					if (ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 8004968:	230c      	movs	r3, #12
 800496a:	aa04      	add	r2, sp, #16
 800496c:	491e      	ldr	r1, [pc, #120]	; (80049e8 <vTaskSdCard+0x2a0>)
 800496e:	481f      	ldr	r0, [pc, #124]	; (80049ec <vTaskSdCard+0x2a4>)
 8004970:	f7fd fe8c 	bl	800268c <ReadMutex>
 8004974:	2800      	cmp	r0, #0
 8004976:	d1c9      	bne.n	800490c <vTaskSdCard+0x1c4>
							&local_flight_phase,
							sizeof(global_flight_phase_detection)) == osOK
							&& local_flight_phase.flight_phase == RECOVERY) {
 8004978:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800497c:	2a06      	cmp	r2, #6
 800497e:	d1c5      	bne.n	800490c <vTaskSdCard+0x1c4>
 8004980:	9001      	str	r0, [sp, #4]
						f_close(&EULER_LOG_FILE);
 8004982:	4815      	ldr	r0, [pc, #84]	; (80049d8 <vTaskSdCard+0x290>)
 8004984:	f00b f974 	bl	800fc70 <f_close>
						// "clean" current file name
						EULER_LOG_FILE_NAME[0] = 0;
 8004988:	9b01      	ldr	r3, [sp, #4]
 800498a:	f88d 301c 	strb.w	r3, [sp, #28]
						goto logToNewFile;
 800498e:	e6fe      	b.n	800478e <vTaskSdCard+0x46>
				UsbPrint(
 8004990:	4601      	mov	r1, r0
 8004992:	4817      	ldr	r0, [pc, #92]	; (80049f0 <vTaskSdCard+0x2a8>)
 8004994:	e73d      	b.n	8004812 <vTaskSdCard+0xca>
 8004996:	bf00      	nop
 8004998:	08015938 	.word	0x08015938
 800499c:	08015ad3 	.word	0x08015ad3
 80049a0:	24021b10 	.word	0x24021b10
 80049a4:	08015960 	.word	0x08015960
 80049a8:	0801598c 	.word	0x0801598c
 80049ac:	08015b32 	.word	0x08015b32
 80049b0:	08015b3e 	.word	0x08015b3e
 80049b4:	080159bb 	.word	0x080159bb
 80049b8:	240016a4 	.word	0x240016a4
 80049bc:	58020c00 	.word	0x58020c00
 80049c0:	080159e8 	.word	0x080159e8
 80049c4:	08015a09 	.word	0x08015a09
 80049c8:	08015a35 	.word	0x08015a35
 80049cc:	08015a5a 	.word	0x08015a5a
 80049d0:	0801540c 	.word	0x0801540c
 80049d4:	24021d44 	.word	0x24021d44
 80049d8:	240218e0 	.word	0x240218e0
 80049dc:	08015a8a 	.word	0x08015a8a
 80049e0:	08015ab5 	.word	0x08015ab5
 80049e4:	08015ad4 	.word	0x08015ad4
 80049e8:	2400023c 	.word	0x2400023c
 80049ec:	2400a98c 	.word	0x2400a98c
 80049f0:	08015afc 	.word	0x08015afc
 80049f4:	080159af 	.word	0x080159af
 80049f8:	2401b5d8 	.word	0x2401b5d8

080049fc <calculate_checksum_sb>:
	}
}

uint8_t calculate_checksum_sb(sb_data_t *sb_data) {

	return sb_data->baro.pressure + sb_data->baro.temperature
 80049fc:	e9d0 3200 	ldrd	r3, r2, [r0]
 8004a00:	4413      	add	r3, r2
			+ sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z
 8004a02:	7b02      	ldrb	r2, [r0, #12]
 8004a04:	4413      	add	r3, r2
 8004a06:	7b82      	ldrb	r2, [r0, #14]
 8004a08:	4413      	add	r3, r2
 8004a0a:	7c02      	ldrb	r2, [r0, #16]
 8004a0c:	4413      	add	r3, r2
			+ sb_data->imu.acc_x + sb_data->imu.acc_y + sb_data->imu.acc_z;
 8004a0e:	7c82      	ldrb	r2, [r0, #18]
 8004a10:	4413      	add	r3, r2
 8004a12:	7d02      	ldrb	r2, [r0, #20]
 8004a14:	7d80      	ldrb	r0, [r0, #22]
 8004a16:	4413      	add	r3, r2
 8004a18:	4418      	add	r0, r3
}
 8004a1a:	b2c0      	uxtb	r0, r0
 8004a1c:	4770      	bx	lr
	...

08004a20 <ReadDataSB>:
void ReadDataSB(sb_data_t *sb1, sb_data_t *sb2, sb_data_t *sb3) {
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a22:	4606      	mov	r6, r0
 8004a24:	460d      	mov	r5, r1
 8004a26:	4614      	mov	r4, r2
	checksum = calculate_checksum_sb(sb1);
 8004a28:	f7ff ffe8 	bl	80049fc <calculate_checksum_sb>
	if (checksum == sb1->checksum) {
 8004a2c:	7f33      	ldrb	r3, [r6, #28]
 8004a2e:	4283      	cmp	r3, r0
 8004a30:	d114      	bne.n	8004a5c <ReadDataSB+0x3c>
		if (AcquireMutex(&sb1_mutex) == osOK) {
 8004a32:	4826      	ldr	r0, [pc, #152]	; (8004acc <ReadDataSB+0xac>)
 8004a34:	f7fd fe1c 	bl	8002670 <AcquireMutex>
 8004a38:	b980      	cbnz	r0, 8004a5c <ReadDataSB+0x3c>
			sb1_baro = sb1->baro;
 8004a3a:	4b25      	ldr	r3, [pc, #148]	; (8004ad0 <ReadDataSB+0xb0>)
			sb1_imu = sb1->imu;
 8004a3c:	4f25      	ldr	r7, [pc, #148]	; (8004ad4 <ReadDataSB+0xb4>)
			sb1_baro = sb1->baro;
 8004a3e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
			sb1_imu = sb1->imu;
 8004a42:	360c      	adds	r6, #12
			sb1_baro = sb1->baro;
 8004a44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb1->imu;
 8004a48:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004a4c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
			ReleaseMutex(&sb1_mutex);
 8004a50:	481e      	ldr	r0, [pc, #120]	; (8004acc <ReadDataSB+0xac>)
 8004a52:	f7fd fe18 	bl	8002686 <ReleaseMutex>
			sb1_imu.acc_z = -sb1_imu.acc_z;
 8004a56:	897b      	ldrh	r3, [r7, #10]
 8004a58:	425b      	negs	r3, r3
 8004a5a:	817b      	strh	r3, [r7, #10]
	checksum = calculate_checksum_sb(sb2);
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f7ff ffcd 	bl	80049fc <calculate_checksum_sb>
	if (checksum == sb2->checksum) {
 8004a62:	7f2b      	ldrb	r3, [r5, #28]
 8004a64:	4283      	cmp	r3, r0
 8004a66:	d114      	bne.n	8004a92 <ReadDataSB+0x72>
		if (AcquireMutex(&sb2_mutex) == osOK) {
 8004a68:	481b      	ldr	r0, [pc, #108]	; (8004ad8 <ReadDataSB+0xb8>)
 8004a6a:	f7fd fe01 	bl	8002670 <AcquireMutex>
 8004a6e:	b980      	cbnz	r0, 8004a92 <ReadDataSB+0x72>
			sb2_baro = sb2->baro;
 8004a70:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <ReadDataSB+0xbc>)
			sb2_imu = sb2->imu;
 8004a72:	4e1b      	ldr	r6, [pc, #108]	; (8004ae0 <ReadDataSB+0xc0>)
			sb2_baro = sb2->baro;
 8004a74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
			sb2_imu = sb2->imu;
 8004a78:	350c      	adds	r5, #12
			sb2_baro = sb2->baro;
 8004a7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb2->imu;
 8004a7e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004a82:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			ReleaseMutex(&sb2_mutex);
 8004a86:	4814      	ldr	r0, [pc, #80]	; (8004ad8 <ReadDataSB+0xb8>)
 8004a88:	f7fd fdfd 	bl	8002686 <ReleaseMutex>
			sb2_imu.acc_z = -sb2_imu.acc_z;
 8004a8c:	8973      	ldrh	r3, [r6, #10]
 8004a8e:	425b      	negs	r3, r3
 8004a90:	8173      	strh	r3, [r6, #10]
	checksum = calculate_checksum_sb(sb3);
 8004a92:	4620      	mov	r0, r4
 8004a94:	f7ff ffb2 	bl	80049fc <calculate_checksum_sb>
	if (checksum == sb3->checksum) {
 8004a98:	7f23      	ldrb	r3, [r4, #28]
 8004a9a:	4283      	cmp	r3, r0
 8004a9c:	d114      	bne.n	8004ac8 <ReadDataSB+0xa8>
		if (AcquireMutex(&sb3_mutex) == osOK) {
 8004a9e:	4811      	ldr	r0, [pc, #68]	; (8004ae4 <ReadDataSB+0xc4>)
 8004aa0:	f7fd fde6 	bl	8002670 <AcquireMutex>
 8004aa4:	b980      	cbnz	r0, 8004ac8 <ReadDataSB+0xa8>
			sb3_baro = sb3->baro;
 8004aa6:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <ReadDataSB+0xc8>)
			sb3_imu = sb3->imu;
 8004aa8:	4d10      	ldr	r5, [pc, #64]	; (8004aec <ReadDataSB+0xcc>)
			sb3_baro = sb3->baro;
 8004aaa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
			sb3_imu = sb3->imu;
 8004aae:	340c      	adds	r4, #12
			sb3_baro = sb3->baro;
 8004ab0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3->imu;
 8004ab4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ab8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			ReleaseMutex(&sb3_mutex);
 8004abc:	4809      	ldr	r0, [pc, #36]	; (8004ae4 <ReadDataSB+0xc4>)
 8004abe:	f7fd fde2 	bl	8002686 <ReleaseMutex>
			sb3_imu.acc_z = -sb3_imu.acc_z;
 8004ac2:	896b      	ldrh	r3, [r5, #10]
 8004ac4:	425b      	negs	r3, r3
 8004ac6:	816b      	strh	r3, [r5, #10]
}
 8004ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aca:	bf00      	nop
 8004acc:	24011130 	.word	0x24011130
 8004ad0:	24000248 	.word	0x24000248
 8004ad4:	24000254 	.word	0x24000254
 8004ad8:	2402188c 	.word	0x2402188c
 8004adc:	24000264 	.word	0x24000264
 8004ae0:	24000270 	.word	0x24000270
 8004ae4:	240132ac 	.word	0x240132ac
 8004ae8:	24000280 	.word	0x24000280
 8004aec:	2400028c 	.word	0x2400028c

08004af0 <vTaskSensRead>:
void vTaskSensRead(void *argument) {
 8004af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8004af4:	f04f 0864 	mov.w	r8, #100	; 0x64
	osDelay(800);
 8004af8:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004afc:	f00b fbb0 	bl	8010260 <osDelay>
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 8004b00:	4d23      	ldr	r5, [pc, #140]	; (8004b90 <vTaskSensRead+0xa0>)
	tick_count = osKernelGetTickCount();
 8004b02:	f00b fb3f 	bl	8010184 <osKernelGetTickCount>
 8004b06:	4604      	mov	r4, r0
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8004b08:	f00b fb50 	bl	80101ac <osKernelGetTickFreq>
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 8004b0c:	4e21      	ldr	r6, [pc, #132]	; (8004b94 <vTaskSensRead+0xa4>)
 8004b0e:	4f22      	ldr	r7, [pc, #136]	; (8004b98 <vTaskSensRead+0xa8>)
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8004b10:	fbb0 f8f8 	udiv	r8, r0, r8
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 8004b14:	462a      	mov	r2, r5
 8004b16:	4631      	mov	r1, r6
 8004b18:	4638      	mov	r0, r7
		tick_count += tick_update;
 8004b1a:	4444      	add	r4, r8
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 8004b1c:	f7ff ff80 	bl	8004a20 <ReadDataSB>
		logSensor(tick_count, 1, BARO, &sb1_data.baro);
 8004b20:	2201      	movs	r2, #1
 8004b22:	463b      	mov	r3, r7
 8004b24:	4620      	mov	r0, r4
 8004b26:	4611      	mov	r1, r2
 8004b28:	f7fd fe04 	bl	8002734 <logSensor>
		logSensor(tick_count, 1, IMU, &sb1_data.imu);
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	; (8004b9c <vTaskSensRead+0xac>)
 8004b2e:	2202      	movs	r2, #2
 8004b30:	2101      	movs	r1, #1
 8004b32:	4620      	mov	r0, r4
 8004b34:	f7fd fdfe 	bl	8002734 <logSensor>
		logSensor(tick_count, 2, BARO, &sb2_data.baro);
 8004b38:	4633      	mov	r3, r6
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f7fd fdf8 	bl	8002734 <logSensor>
		logSensor(tick_count, 2, IMU, &sb2_data.imu);
 8004b44:	2202      	movs	r2, #2
 8004b46:	4b16      	ldr	r3, [pc, #88]	; (8004ba0 <vTaskSensRead+0xb0>)
 8004b48:	4620      	mov	r0, r4
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	f7fd fdf2 	bl	8002734 <logSensor>
		logSensor(tick_count, 3, BARO, &sb3_data.baro);
 8004b50:	462b      	mov	r3, r5
 8004b52:	2201      	movs	r2, #1
 8004b54:	2103      	movs	r1, #3
 8004b56:	4620      	mov	r0, r4
 8004b58:	f7fd fdec 	bl	8002734 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_data.imu);
 8004b5c:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <vTaskSensRead+0xb4>)
 8004b5e:	2202      	movs	r2, #2
 8004b60:	2103      	movs	r1, #3
 8004b62:	4620      	mov	r0, r4
 8004b64:	f7fd fde6 	bl	8002734 <logSensor>
		HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) &sb1_data, sizeof(sb1_data));
 8004b68:	4639      	mov	r1, r7
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	480e      	ldr	r0, [pc, #56]	; (8004ba8 <vTaskSensRead+0xb8>)
 8004b6e:	f006 fd51 	bl	800b614 <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &sb2_data, sizeof(sb2_data));
 8004b72:	4631      	mov	r1, r6
 8004b74:	2220      	movs	r2, #32
 8004b76:	480d      	ldr	r0, [pc, #52]	; (8004bac <vTaskSensRead+0xbc>)
 8004b78:	f006 fd4c 	bl	800b614 <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	4629      	mov	r1, r5
 8004b80:	480b      	ldr	r0, [pc, #44]	; (8004bb0 <vTaskSensRead+0xc0>)
 8004b82:	f006 fd47 	bl	800b614 <HAL_SPI_Receive_DMA>
		osDelayUntil(tick_count);
 8004b86:	4620      	mov	r0, r4
 8004b88:	f00b fb84 	bl	8010294 <osDelayUntil>
 8004b8c:	e7c2      	b.n	8004b14 <vTaskSensRead+0x24>
 8004b8e:	bf00      	nop
 8004b90:	2400031c 	.word	0x2400031c
 8004b94:	240002fc 	.word	0x240002fc
 8004b98:	240002dc 	.word	0x240002dc
 8004b9c:	240002e8 	.word	0x240002e8
 8004ba0:	24000308 	.word	0x24000308
 8004ba4:	24000328 	.word	0x24000328
 8004ba8:	2401b550 	.word	0x2401b550
 8004bac:	2400a994 	.word	0x2400a994
 8004bb0:	2400ef3c 	.word	0x2400ef3c

08004bb4 <resetStateEstimation>:
}

void resetStateEstimation(kf_state_t *kf_state,
		flight_phase_detection_t *flight_phase_detection, env_t *environment,
		extrapolation_rolling_memory_t *extrapolation_rolling_memory,
		float pressure, float temperature) {
 8004bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb8:	ed2d 8b02 	vpush	{d8}
 8004bbc:	eeb0 8a60 	vmov.f32	s16, s1
 8004bc0:	4614      	mov	r4, r2
 8004bc2:	eef0 8a40 	vmov.f32	s17, s0
 8004bc6:	4605      	mov	r5, r0
	reset_flight_phase_detection(flight_phase_detection);
 8004bc8:	4608      	mov	r0, r1
		float pressure, float temperature) {
 8004bca:	461f      	mov	r7, r3
 8004bcc:	460e      	mov	r6, r1
	reset_flight_phase_detection(flight_phase_detection);
 8004bce:	f7fc fc55 	bl	800147c <reset_flight_phase_detection>
	calibrate_env(environment, pressure, temperature);
 8004bd2:	eef0 0a48 	vmov.f32	s1, s16
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	eeb0 0a68 	vmov.f32	s0, s17
 8004bdc:	f7fc fa58 	bl	8001090 <calibrate_env>
	update_env(environment, temperature);
 8004be0:	eeb0 0a48 	vmov.f32	s0, s16
 8004be4:	4620      	mov	r0, r4
 8004be6:	f7fc fa77 	bl	80010d8 <update_env>
	reset_kf_state(kf_state);
 8004bea:	4628      	mov	r0, r5
 8004bec:	f7fc fc4e 	bl	800148c <reset_kf_state>
	*extrapolation_rolling_memory = EMPTY_MEMORY;
 8004bf0:	22b0      	movs	r2, #176	; 0xb0
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	f00e fd2e 	bl	8013656 <memset>
	select_noise_models(kf_state, flight_phase_detection, environment,
 8004bfa:	463b      	mov	r3, r7
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4628      	mov	r0, r5
			extrapolation_rolling_memory);
}
 8004c02:	ecbd 8b02 	vpop	{d8}
 8004c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	select_noise_models(kf_state, flight_phase_detection, environment,
 8004c0a:	f7fc bdff 	b.w	800180c <select_noise_models>
	...

08004c10 <vTaskStateEst>:
void vTaskStateEst(void *argument) {
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	ed2d 8b04 	vpush	{d8-d9}
 8004c18:	f2ad 5dac 	subw	sp, sp, #1452	; 0x5ac
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004c1c:	2600      	movs	r6, #0
	float sum_press = 0;
 8004c1e:	ed9f 8a8f 	vldr	s16, [pc, #572]	; 8004e5c <vTaskStateEst+0x24c>
	init_env(&env);
 8004c22:	ad12      	add	r5, sp, #72	; 0x48
	uint32_t reset_counter = 0;
 8004c24:	46b0      	mov	r8, r6
	float average_press = 0;
 8004c26:	eef0 9a48 	vmov.f32	s19, s16
	uint16_t calibrate_count = 0;
 8004c2a:	4634      	mov	r4, r6
	init_env(&env);
 8004c2c:	4628      	mov	r0, r5
	float sum_temp = 0;
 8004c2e:	eef0 8a48 	vmov.f32	s17, s16
	init_env(&env);
 8004c32:	f7fc fa15 	bl	8001060 <init_env>
	state_est_meas_t state_est_meas = { 0 };
 8004c36:	2278      	movs	r2, #120	; 0x78
 8004c38:	2100      	movs	r1, #0
 8004c3a:	a816      	add	r0, sp, #88	; 0x58
 8004c3c:	f00e fd0b 	bl	8013656 <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 8004c40:	2278      	movs	r2, #120	; 0x78
 8004c42:	2100      	movs	r1, #0
 8004c44:	a834      	add	r0, sp, #208	; 0xd0
 8004c46:	f00e fd06 	bl	8013656 <memset>
	reset_kf_state(&kf_state);
 8004c4a:	a87f      	add	r0, sp, #508	; 0x1fc
 8004c4c:	f7fc fc1e 	bl	800148c <reset_kf_state>
	extrapolation_rolling_memory_t extrapolation_rolling_memory = { 0 };
 8004c50:	22b0      	movs	r2, #176	; 0xb0
 8004c52:	2100      	movs	r1, #0
 8004c54:	a852      	add	r0, sp, #328	; 0x148
 8004c56:	f00e fcfe 	bl	8013656 <memset>
	reset_flight_phase_detection(&flight_phase_detection);
 8004c5a:	a80f      	add	r0, sp, #60	; 0x3c
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004c5c:	9611      	str	r6, [sp, #68]	; 0x44
	float average_temp = 0;
 8004c5e:	eeb0 9a48 	vmov.f32	s18, s16
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004c62:	e9cd 660f 	strd	r6, r6, [sp, #60]	; 0x3c
	reset_flight_phase_detection(&flight_phase_detection);
 8004c66:	f7fc fc09 	bl	800147c <reset_flight_phase_detection>
	command_e telemetry_command = IDLE_COMMAND;
 8004c6a:	239b      	movs	r3, #155	; 0x9b
	select_noise_models(&kf_state, &flight_phase_detection, &env,
 8004c6c:	462a      	mov	r2, r5
 8004c6e:	a90f      	add	r1, sp, #60	; 0x3c
	command_e telemetry_command = IDLE_COMMAND;
 8004c70:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
	select_noise_models(&kf_state, &flight_phase_detection, &env,
 8004c74:	a87f      	add	r0, sp, #508	; 0x1fc
 8004c76:	ab52      	add	r3, sp, #328	; 0x148
 8004c78:	f7fc fdc8 	bl	800180c <select_noise_models>
	osDelay(900);
 8004c7c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8004c80:	f00b faee 	bl	8010260 <osDelay>
	tick_count = osKernelGetTickCount();
 8004c84:	f00b fa7e 	bl	8010184 <osKernelGetTickCount>
 8004c88:	4607      	mov	r7, r0
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8004c8a:	f00b fa8f 	bl	80101ac <osKernelGetTickFreq>
 8004c8e:	2364      	movs	r3, #100	; 0x64
 8004c90:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c94:	930d      	str	r3, [sp, #52]	; 0x34
		tick_count += tick_update;
 8004c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 8004c98:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
 8004c9c:	4970      	ldr	r1, [pc, #448]	; (8004e60 <vTaskStateEst+0x250>)
		tick_count += tick_update;
 8004c9e:	441f      	add	r7, r3
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 8004ca0:	4870      	ldr	r0, [pc, #448]	; (8004e64 <vTaskStateEst+0x254>)
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f7fd fcf2 	bl	800268c <ReadMutex>
		if (flight_phase_detection.flight_phase == IDLE
 8004ca8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d10d      	bne.n	8004ccc <vTaskStateEst+0xbc>
				&& global_telemetry_command == CALIBRATE_SENSORS) {
 8004cb0:	4b6b      	ldr	r3, [pc, #428]	; (8004e60 <vTaskStateEst+0x250>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b49      	cmp	r3, #73	; 0x49
 8004cb6:	d109      	bne.n	8004ccc <vTaskStateEst+0xbc>
			resetStateEstimation(&kf_state, &flight_phase_detection, &env,
 8004cb8:	eef0 0a49 	vmov.f32	s1, s18
 8004cbc:	ab52      	add	r3, sp, #328	; 0x148
 8004cbe:	eeb0 0a69 	vmov.f32	s0, s19
 8004cc2:	462a      	mov	r2, r5
 8004cc4:	a90f      	add	r1, sp, #60	; 0x3c
 8004cc6:	a87f      	add	r0, sp, #508	; 0x1fc
 8004cc8:	f7ff ff74 	bl	8004bb4 <resetStateEstimation>
		if (reset_counter > 30 * STATE_ESTIMATION_FREQUENCY && !was_reset) {
 8004ccc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004cd0:	4598      	cmp	r8, r3
 8004cd2:	d90b      	bls.n	8004cec <vTaskStateEst+0xdc>
 8004cd4:	b956      	cbnz	r6, 8004cec <vTaskStateEst+0xdc>
			was_reset = true;
 8004cd6:	2601      	movs	r6, #1
			resetStateEstimation(&kf_state, &flight_phase_detection, &env,
 8004cd8:	eef0 0a49 	vmov.f32	s1, s18
 8004cdc:	eeb0 0a69 	vmov.f32	s0, s19
 8004ce0:	ab52      	add	r3, sp, #328	; 0x148
 8004ce2:	462a      	mov	r2, r5
 8004ce4:	a90f      	add	r1, sp, #60	; 0x3c
 8004ce6:	a87f      	add	r0, sp, #508	; 0x1fc
 8004ce8:	f7ff ff64 	bl	8004bb4 <resetStateEstimation>
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 8004cec:	2301      	movs	r3, #1
 8004cee:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8004e94 <vTaskStateEst+0x284>
 8004cf2:	4a5d      	ldr	r2, [pc, #372]	; (8004e68 <vTaskStateEst+0x258>)
		reset_counter++;
 8004cf4:	f108 0801 	add.w	r8, r8, #1
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	4659      	mov	r1, fp
 8004cfc:	ab16      	add	r3, sp, #88	; 0x58
 8004cfe:	485b      	ldr	r0, [pc, #364]	; (8004e6c <vTaskStateEst+0x25c>)
 8004d00:	f7fd fcde 	bl	80026c0 <ReadMutexStateEst>
		ReadMutexStateEst(&sb2_mutex, &sb2_baro, &sb2_imu, &state_est_meas, 2);
 8004d04:	f8df a190 	ldr.w	sl, [pc, #400]	; 8004e98 <vTaskStateEst+0x288>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	4a59      	ldr	r2, [pc, #356]	; (8004e70 <vTaskStateEst+0x260>)
 8004d0c:	4651      	mov	r1, sl
 8004d0e:	4859      	ldr	r0, [pc, #356]	; (8004e74 <vTaskStateEst+0x264>)
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	ab16      	add	r3, sp, #88	; 0x58
 8004d14:	f7fd fcd4 	bl	80026c0 <ReadMutexStateEst>
		ReadMutexStateEst(&sb3_mutex, &sb3_baro, &sb3_imu, &state_est_meas, 3);
 8004d18:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8004e9c <vTaskStateEst+0x28c>
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	4a56      	ldr	r2, [pc, #344]	; (8004e78 <vTaskStateEst+0x268>)
 8004d20:	4649      	mov	r1, r9
 8004d22:	4856      	ldr	r0, [pc, #344]	; (8004e7c <vTaskStateEst+0x26c>)
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	ab16      	add	r3, sp, #88	; 0x58
 8004d28:	f7fd fcca 	bl	80026c0 <ReadMutexStateEst>
		if (flight_phase_detection.flight_phase == IDLE) {
 8004d2c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d130      	bne.n	8004d96 <vTaskStateEst+0x186>
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 8004d34:	f8da 2000 	ldr.w	r2, [sl]
			calibrate_count += 3;
 8004d38:	3403      	adds	r4, #3
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 8004d3a:	f8db 3000 	ldr.w	r3, [fp]
					+ sb3_baro.temperature)) / 100;
 8004d3e:	eddf 6a50 	vldr	s13, [pc, #320]	; 8004e80 <vTaskStateEst+0x270>
			calibrate_count += 3;
 8004d42:	b2a4      	uxth	r4, r4
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 8004d44:	4413      	add	r3, r2
					+ sb3_baro.pressure);
 8004d46:	f8d9 2000 	ldr.w	r2, [r9]
			if (calibrate_count > 150) {
 8004d4a:	2c96      	cmp	r4, #150	; 0x96
					+ sb3_baro.pressure);
 8004d4c:	4413      	add	r3, r2
			sum_temp += ((float) (sb1_baro.temperature + sb2_baro.temperature
 8004d4e:	f8da 2004 	ldr.w	r2, [sl, #4]
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 8004d52:	ee07 3a90 	vmov	s15, r3
			sum_temp += ((float) (sb1_baro.temperature + sb2_baro.temperature
 8004d56:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004d5a:	4413      	add	r3, r2
					+ sb3_baro.temperature)) / 100;
 8004d5c:	f8d9 2004 	ldr.w	r2, [r9, #4]
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 8004d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
					+ sb3_baro.temperature)) / 100;
 8004d64:	4413      	add	r3, r2
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 8004d66:	ee38 8a27 	vadd.f32	s16, s16, s15
			sum_temp += ((float) (sb1_baro.temperature + sb2_baro.temperature
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
					+ sb3_baro.temperature)) / 100;
 8004d72:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			sum_temp += ((float) (sb1_baro.temperature + sb2_baro.temperature
 8004d76:	ee78 8a87 	vadd.f32	s17, s17, s14
			if (calibrate_count > 150) {
 8004d7a:	d90c      	bls.n	8004d96 <vTaskStateEst+0x186>
				average_press = sum_press / (float) calibrate_count;
 8004d7c:	ee07 4a90 	vmov	s15, r4
				calibrate_count = 0;
 8004d80:	2400      	movs	r4, #0
				average_press = sum_press / (float) calibrate_count;
 8004d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d86:	eec8 9a27 	vdiv.f32	s19, s16, s15
				sum_press = 0;
 8004d8a:	ed9f 8a34 	vldr	s16, [pc, #208]	; 8004e5c <vTaskStateEst+0x24c>
				average_temp = sum_temp / (float) calibrate_count;
 8004d8e:	ee88 9aa7 	vdiv.f32	s18, s17, s15
				sum_temp = 0;
 8004d92:	eef0 8a48 	vmov.f32	s17, s16
		process_measurements(tick_count, &kf_state, &state_est_meas,
 8004d96:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 8004d9a:	230c      	movs	r3, #12
 8004d9c:	aa0f      	add	r2, sp, #60	; 0x3c
 8004d9e:	4939      	ldr	r1, [pc, #228]	; (8004e84 <vTaskStateEst+0x274>)
 8004da0:	4839      	ldr	r0, [pc, #228]	; (8004e88 <vTaskStateEst+0x278>)
 8004da2:	f7fd fc73 	bl	800268c <ReadMutex>
		process_measurements(tick_count, &kf_state, &state_est_meas,
 8004da6:	ab34      	add	r3, sp, #208	; 0xd0
 8004da8:	aa16      	add	r2, sp, #88	; 0x58
 8004daa:	a97f      	add	r1, sp, #508	; 0x1fc
 8004dac:	4638      	mov	r0, r7
 8004dae:	e9cd 5900 	strd	r5, r9, [sp]
 8004db2:	f7fc fdf1 	bl	8001998 <process_measurements>
		select_noise_models(&kf_state, &flight_phase_detection, &env,
 8004db6:	464b      	mov	r3, r9
 8004db8:	462a      	mov	r2, r5
 8004dba:	a90f      	add	r1, sp, #60	; 0x3c
 8004dbc:	a87f      	add	r0, sp, #508	; 0x1fc
 8004dbe:	f7fc fd25 	bl	800180c <select_noise_models>
		kf_prediction(&kf_state);
 8004dc2:	a87f      	add	r0, sp, #508	; 0x1fc
 8004dc4:	f7fc fbe4 	bl	8001590 <kf_prediction>
		if (kf_state.num_z_active > 0) {
 8004dc8:	f8dd 340c 	ldr.w	r3, [sp, #1036]	; 0x40c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	dd3e      	ble.n	8004e4e <vTaskStateEst+0x23e>
			select_kf_observation_matrices(&kf_state);
 8004dd0:	a87f      	add	r0, sp, #508	; 0x1fc
 8004dd2:	f7fc fc2e 	bl	8001632 <select_kf_observation_matrices>
			kf_update(&kf_state);
 8004dd6:	a87f      	add	r0, sp, #508	; 0x1fc
 8004dd8:	f7fc fc56 	bl	8001688 <kf_update>
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 8004ddc:	2278      	movs	r2, #120	; 0x78
 8004dde:	a916      	add	r1, sp, #88	; 0x58
 8004de0:	a834      	add	r0, sp, #208	; 0xd0
 8004de2:	f00e fc2d 	bl	8013640 <memcpy>
		if (AcquireMutex(&state_est_mutex) == osOK) {
 8004de6:	4829      	ldr	r0, [pc, #164]	; (8004e8c <vTaskStateEst+0x27c>)
 8004de8:	f7fd fc42 	bl	8002670 <AcquireMutex>
 8004dec:	b930      	cbnz	r0, 8004dfc <vTaskStateEst+0x1ec>
			update_state_est_data(&state_est_data_global, &kf_state);
 8004dee:	4828      	ldr	r0, [pc, #160]	; (8004e90 <vTaskStateEst+0x280>)
 8004df0:	a97f      	add	r1, sp, #508	; 0x1fc
 8004df2:	f7fc fce9 	bl	80017c8 <update_state_est_data>
			ReleaseMutex(&state_est_mutex);
 8004df6:	4825      	ldr	r0, [pc, #148]	; (8004e8c <vTaskStateEst+0x27c>)
 8004df8:	f7fd fc45 	bl	8002686 <ReleaseMutex>
		if (AcquireMutex(&fsm_mutex) == osOK) {
 8004dfc:	4822      	ldr	r0, [pc, #136]	; (8004e88 <vTaskStateEst+0x278>)
 8004dfe:	f7fd fc37 	bl	8002670 <AcquireMutex>
 8004e02:	b940      	cbnz	r0, 8004e16 <vTaskStateEst+0x206>
			global_env = env;
 8004e04:	f8df c098 	ldr.w	ip, [pc, #152]	; 8004ea0 <vTaskStateEst+0x290>
 8004e08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004e0c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			ReleaseMutex(&fsm_mutex);
 8004e10:	481d      	ldr	r0, [pc, #116]	; (8004e88 <vTaskStateEst+0x278>)
 8004e12:	f7fd fc38 	bl	8002686 <ReleaseMutex>
		logEstimatorVar(osKernelGetTickCount(), state_est_data_global);
 8004e16:	f00b f9b5 	bl	8010184 <osKernelGetTickCount>
 8004e1a:	f8df e088 	ldr.w	lr, [pc, #136]	; 8004ea4 <vTaskStateEst+0x294>
 8004e1e:	4681      	mov	r9, r0
 8004e20:	46ec      	mov	ip, sp
 8004e22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004e26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004e2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004e2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004e32:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8004e36:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8004e3a:	f1ae 032c 	sub.w	r3, lr, #44	; 0x2c
 8004e3e:	4648      	mov	r0, r9
 8004e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e42:	f7fd fd2d 	bl	80028a0 <logEstimatorVar>
		osDelayUntil(tick_count);
 8004e46:	4638      	mov	r0, r7
 8004e48:	f00b fa24 	bl	8010294 <osDelayUntil>
		tick_count += tick_update;
 8004e4c:	e723      	b.n	8004c96 <vTaskStateEst+0x86>
			memcpy(kf_state.x_est, kf_state.x_priori,
 8004e4e:	aacc      	add	r2, sp, #816	; 0x330
 8004e50:	abc0      	add	r3, sp, #768	; 0x300
 8004e52:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004e58:	e7c0      	b.n	8004ddc <vTaskStateEst+0x1cc>
 8004e5a:	bf00      	nop
 8004e5c:	00000000 	.word	0x00000000
 8004e60:	240173f0 	.word	0x240173f0
 8004e64:	2400cf28 	.word	0x2400cf28
 8004e68:	24000254 	.word	0x24000254
 8004e6c:	24011130 	.word	0x24011130
 8004e70:	24000270 	.word	0x24000270
 8004e74:	2402188c 	.word	0x2402188c
 8004e78:	2400028c 	.word	0x2400028c
 8004e7c:	240132ac 	.word	0x240132ac
 8004e80:	42c80000 	.word	0x42c80000
 8004e84:	2400023c 	.word	0x2400023c
 8004e88:	2400a98c 	.word	0x2400a98c
 8004e8c:	240173c4 	.word	0x240173c4
 8004e90:	2400029c 	.word	0x2400029c
 8004e94:	24000248 	.word	0x24000248
 8004e98:	24000264 	.word	0x24000264
 8004e9c:	24000280 	.word	0x24000280
 8004ea0:	2400022c 	.word	0x2400022c
 8004ea4:	240002a8 	.word	0x240002a8

08004ea8 <HAL_UART_RxCpltCallback>:
		osDelayUntil(tick_count);
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart == &huart7) {
 8004ea8:	4b16      	ldr	r3, [pc, #88]	; (8004f04 <HAL_UART_RxCpltCallback+0x5c>)
 8004eaa:	4283      	cmp	r3, r0
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004eac:	b430      	push	{r4, r5}
	if (huart == &huart7) {
 8004eae:	d126      	bne.n	8004efe <HAL_UART_RxCpltCallback+0x56>

		static uint8_t buffer[4];
		buffer[uart_counter] = local_command_rx;
 8004eb0:	4915      	ldr	r1, [pc, #84]	; (8004f08 <HAL_UART_RxCpltCallback+0x60>)
 8004eb2:	4a16      	ldr	r2, [pc, #88]	; (8004f0c <HAL_UART_RxCpltCallback+0x64>)
 8004eb4:	680b      	ldr	r3, [r1, #0]
 8004eb6:	7814      	ldrb	r4, [r2, #0]
 8004eb8:	4a15      	ldr	r2, [pc, #84]	; (8004f10 <HAL_UART_RxCpltCallback+0x68>)
 8004eba:	54d4      	strb	r4, [r2, r3]
		uart_counter++;
 8004ebc:	3301      	adds	r3, #1
		if (uart_counter == 4) {
 8004ebe:	2b04      	cmp	r3, #4
		uart_counter++;
 8004ec0:	600b      	str	r3, [r1, #0]
		if (uart_counter == 4) {
 8004ec2:	d10e      	bne.n	8004ee2 <HAL_UART_RxCpltCallback+0x3a>
			uint8_t succesful = 1;
			for (int i = 1; i < 4; i++)
				if (buffer[0] != buffer[i])
 8004ec4:	7810      	ldrb	r0, [r2, #0]
 8004ec6:	7853      	ldrb	r3, [r2, #1]
					succesful = 0;
 8004ec8:	1a1d      	subs	r5, r3, r0
 8004eca:	426b      	negs	r3, r5
 8004ecc:	416b      	adcs	r3, r5
				if (buffer[0] != buffer[i])
 8004ece:	7895      	ldrb	r5, [r2, #2]
 8004ed0:	78d2      	ldrb	r2, [r2, #3]
					succesful = 0;
 8004ed2:	4285      	cmp	r5, r0
 8004ed4:	bf18      	it	ne
 8004ed6:	2300      	movne	r3, #0
				if (buffer[0] != buffer[i])
 8004ed8:	4282      	cmp	r2, r0
 8004eda:	f04f 0200 	mov.w	r2, #0
			uart_counter = 0;
 8004ede:	600a      	str	r2, [r1, #0]
				if (buffer[0] != buffer[i])
 8004ee0:	d005      	beq.n	8004eee <HAL_UART_RxCpltCallback+0x46>
				new_command = true;
				local_command = local_command_rx;
			}
		}

		HAL_UART_Receive_IT(huart, (uint8_t*) &local_command_rx, 1);
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	4909      	ldr	r1, [pc, #36]	; (8004f0c <HAL_UART_RxCpltCallback+0x64>)
 8004ee6:	4807      	ldr	r0, [pc, #28]	; (8004f04 <HAL_UART_RxCpltCallback+0x5c>)
	}
}
 8004ee8:	bc30      	pop	{r4, r5}
		HAL_UART_Receive_IT(huart, (uint8_t*) &local_command_rx, 1);
 8004eea:	f006 bf5b 	b.w	800bda4 <HAL_UART_Receive_IT>
			if (succesful) {
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f7      	beq.n	8004ee2 <HAL_UART_RxCpltCallback+0x3a>
				new_command = true;
 8004ef2:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <HAL_UART_RxCpltCallback+0x6c>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	701a      	strb	r2, [r3, #0]
				local_command = local_command_rx;
 8004ef8:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <HAL_UART_RxCpltCallback+0x70>)
 8004efa:	701c      	strb	r4, [r3, #0]
 8004efc:	e7f1      	b.n	8004ee2 <HAL_UART_RxCpltCallback+0x3a>
}
 8004efe:	bc30      	pop	{r4, r5}
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	2400aa24 	.word	0x2400aa24
 8004f08:	24000344 	.word	0x24000344
 8004f0c:	24021d49 	.word	0x24021d49
 8004f10:	2400033c 	.word	0x2400033c
 8004f14:	24000340 	.word	0x24000340
 8004f18:	24021d48 	.word	0x24021d48

08004f1c <calculate_checksum>:

uint8_t calculate_checksum(telemetry_t *cnf) {
 8004f1c:	f100 025c 	add.w	r2, r0, #92	; 0x5c
	uint8_t cs = 0;
 8004f20:	2300      	movs	r3, #0
	uint8_t *data;
	data = (uint8_t*) cnf;
	for (int i = 0; i < sizeof(telemetry_t); i++) {
 8004f22:	4290      	cmp	r0, r2
 8004f24:	d102      	bne.n	8004f2c <calculate_checksum+0x10>
		cs += *data++;
	}
	return (255 - cs);
 8004f26:	43d8      	mvns	r0, r3
}
 8004f28:	b2c0      	uxtb	r0, r0
 8004f2a:	4770      	bx	lr
		cs += *data++;
 8004f2c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004f30:	440b      	add	r3, r1
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	e7f5      	b.n	8004f22 <calculate_checksum+0x6>
	...

08004f38 <vTaskXbee>:
void vTaskXbee(void *argument) {
 8004f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	telemetry_t telemetry_send = { 0 };
 8004f3c:	225c      	movs	r2, #92	; 0x5c
void vTaskXbee(void *argument) {
 8004f3e:	b0af      	sub	sp, #188	; 0xbc
	telemetry_t telemetry_send = { 0 };
 8004f40:	2100      	movs	r1, #0
	local_command_rx = IDLE_COMMAND;
 8004f42:	4f5b      	ldr	r7, [pc, #364]	; (80050b0 <vTaskXbee+0x178>)
	telemetry_t telemetry_send = { 0 };
 8004f44:	eb0d 0002 	add.w	r0, sp, r2
	local_command = IDLE_COMMAND;
 8004f48:	4c5a      	ldr	r4, [pc, #360]	; (80050b4 <vTaskXbee+0x17c>)
	telemetry_t telemetry_send = { 0 };
 8004f4a:	f00e fb84 	bl	8013656 <memset>
	telemetry_send.flight_phase = IDLE;
 8004f4e:	2301      	movs	r3, #1
	tick_update_slow = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 8004f50:	f04f 080a 	mov.w	r8, #10
	tick_update_fast = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ_HIGH;
 8004f54:	f04f 0964 	mov.w	r9, #100	; 0x64
	telemetry_send.flight_phase = IDLE;
 8004f58:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
	telemetry_send.startbyte = 0x17;
 8004f5c:	2317      	movs	r3, #23
	osDelay(700);
 8004f5e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
	bool fast_sampling = false;
 8004f62:	2500      	movs	r5, #0
	telemetry_send.startbyte = 0x17;
 8004f64:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	local_command_rx = IDLE_COMMAND;
 8004f68:	239b      	movs	r3, #155	; 0x9b
		HAL_UART_Receive_IT(&huart7, (uint8_t*) &local_command_rx, 1);
 8004f6a:	f8df a190 	ldr.w	sl, [pc, #400]	; 80050fc <vTaskXbee+0x1c4>
	local_command_rx = IDLE_COMMAND;
 8004f6e:	703b      	strb	r3, [r7, #0]
	local_command = IDLE_COMMAND;
 8004f70:	7023      	strb	r3, [r4, #0]
	osDelay(700);
 8004f72:	f00b f975 	bl	8010260 <osDelay>
		ReadMutex(&sb1_mutex, &sb1_baro, &local_sb_data.baro, sizeof(sb1_baro));
 8004f76:	f8df b188 	ldr.w	fp, [pc, #392]	; 8005100 <vTaskXbee+0x1c8>
	tick_update_slow = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 8004f7a:	f00b f917 	bl	80101ac <osKernelGetTickFreq>
 8004f7e:	fbb0 f8f8 	udiv	r8, r0, r8
	tick_update_fast = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ_HIGH;
 8004f82:	f00b f913 	bl	80101ac <osKernelGetTickFreq>
 8004f86:	fbb0 f9f9 	udiv	r9, r0, r9
	tick_count = osKernelGetTickCount();
 8004f8a:	f00b f8fb 	bl	8010184 <osKernelGetTickCount>
 8004f8e:	4606      	mov	r6, r0
		if (fast_sampling) {
 8004f90:	2d00      	cmp	r5, #0
 8004f92:	f000 8089 	beq.w	80050a8 <vTaskXbee+0x170>
			tick_count += tick_update_fast;
 8004f96:	444e      	add	r6, r9
		HAL_UART_Receive_IT(&huart7, (uint8_t*) &local_command_rx, 1);
 8004f98:	2201      	movs	r2, #1
 8004f9a:	4945      	ldr	r1, [pc, #276]	; (80050b0 <vTaskXbee+0x178>)
 8004f9c:	4650      	mov	r0, sl
 8004f9e:	f006 ff01 	bl	800bda4 <HAL_UART_Receive_IT>
		UsbPrint("[Telemetry] ts: %u, Received Commmand: %u, Rx_buffer; %u\n",
 8004fa2:	783b      	ldrb	r3, [r7, #0]
 8004fa4:	7822      	ldrb	r2, [r4, #0]
 8004fa6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8004fa8:	4843      	ldr	r0, [pc, #268]	; (80050b8 <vTaskXbee+0x180>)
 8004faa:	f7fd fced 	bl	8002988 <UsbPrint>
		if (AcquireMutex(&command_mutex) == osOK) {
 8004fae:	4843      	ldr	r0, [pc, #268]	; (80050bc <vTaskXbee+0x184>)
 8004fb0:	f7fd fb5e 	bl	8002670 <AcquireMutex>
 8004fb4:	b928      	cbnz	r0, 8004fc2 <vTaskXbee+0x8a>
			global_telemetry_command = local_command;
 8004fb6:	7822      	ldrb	r2, [r4, #0]
 8004fb8:	4b41      	ldr	r3, [pc, #260]	; (80050c0 <vTaskXbee+0x188>)
			ReleaseMutex(&command_mutex);
 8004fba:	4840      	ldr	r0, [pc, #256]	; (80050bc <vTaskXbee+0x184>)
			global_telemetry_command = local_command;
 8004fbc:	701a      	strb	r2, [r3, #0]
			ReleaseMutex(&command_mutex);
 8004fbe:	f7fd fb62 	bl	8002686 <ReleaseMutex>
		if (local_command == TELEMETRY_HIGH_SAMPLING) {
 8004fc2:	7823      	ldrb	r3, [r4, #0]
 8004fc4:	2b0d      	cmp	r3, #13
 8004fc6:	d071      	beq.n	80050ac <vTaskXbee+0x174>
			fast_sampling = false;
 8004fc8:	2bc5      	cmp	r3, #197	; 0xc5
 8004fca:	bf08      	it	eq
 8004fcc:	2500      	moveq	r5, #0
		if (telemetry_send.flight_phase == RECOVERY) {
 8004fce:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
			fast_sampling = false;
 8004fd2:	2b06      	cmp	r3, #6
		if (new_command) {
 8004fd4:	4b3b      	ldr	r3, [pc, #236]	; (80050c4 <vTaskXbee+0x18c>)
 8004fd6:	781a      	ldrb	r2, [r3, #0]
			fast_sampling = false;
 8004fd8:	bf08      	it	eq
 8004fda:	2500      	moveq	r5, #0
		if (new_command) {
 8004fdc:	b11a      	cbz	r2, 8004fe6 <vTaskXbee+0xae>
			local_command = IDLE_COMMAND;
 8004fde:	229b      	movs	r2, #155	; 0x9b
 8004fe0:	7022      	strb	r2, [r4, #0]
			new_command = false;
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	701a      	strb	r2, [r3, #0]
		ReadMutex(&sb1_mutex, &sb1_baro, &local_sb_data.baro, sizeof(sb1_baro));
 8004fe6:	466a      	mov	r2, sp
 8004fe8:	230c      	movs	r3, #12
 8004fea:	4937      	ldr	r1, [pc, #220]	; (80050c8 <vTaskXbee+0x190>)
 8004fec:	4658      	mov	r0, fp
 8004fee:	f7fd fb4d 	bl	800268c <ReadMutex>
		ReadMutex(&sb1_mutex, &sb1_imu, &local_sb_data.imu, sizeof(sb1_imu));
 8004ff2:	aa03      	add	r2, sp, #12
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	4935      	ldr	r1, [pc, #212]	; (80050cc <vTaskXbee+0x194>)
 8004ff8:	4658      	mov	r0, fp
 8004ffa:	f7fd fb47 	bl	800268c <ReadMutex>
		telemetry_send.sb_data.pressure = local_sb_data.baro.pressure;
 8004ffe:	9b00      	ldr	r3, [sp, #0]
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data,
 8005000:	aa08      	add	r2, sp, #32
 8005002:	4933      	ldr	r1, [pc, #204]	; (80050d0 <vTaskXbee+0x198>)
		telemetry_send.sb_data.pressure = local_sb_data.baro.pressure;
 8005004:	9318      	str	r3, [sp, #96]	; 0x60
		telemetry_send.sb_data.temperature = local_sb_data.baro.temperature;
 8005006:	9b01      	ldr	r3, [sp, #4]
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data,
 8005008:	4832      	ldr	r0, [pc, #200]	; (80050d4 <vTaskXbee+0x19c>)
		telemetry_send.sb_data.temperature = local_sb_data.baro.temperature;
 800500a:	9319      	str	r3, [sp, #100]	; 0x64
		telemetry_send.sb_data.acc_x = local_sb_data.imu.acc_x;
 800500c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8005010:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
		telemetry_send.sb_data.acc_y = local_sb_data.imu.acc_y;
 8005014:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8005018:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		telemetry_send.sb_data.acc_z = local_sb_data.imu.acc_z;
 800501c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8005020:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
		telemetry_send.sb_data.gyro_x = local_sb_data.imu.gyro_x;
 8005024:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005028:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
		telemetry_send.sb_data.gyro_y = local_sb_data.imu.gyro_y;
 800502c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005030:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
		telemetry_send.sb_data.gyro_z = local_sb_data.imu.gyro_z;
 8005034:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8005038:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data,
 800503c:	233c      	movs	r3, #60	; 0x3c
 800503e:	f7fd fb25 	bl	800268c <ReadMutex>
		ReadMutex(&motor_mutex, &global_airbrake_extension,
 8005042:	aa2a      	add	r2, sp, #168	; 0xa8
 8005044:	2304      	movs	r3, #4
 8005046:	4924      	ldr	r1, [pc, #144]	; (80050d8 <vTaskXbee+0x1a0>)
 8005048:	4824      	ldr	r0, [pc, #144]	; (80050dc <vTaskXbee+0x1a4>)
 800504a:	f7fd fb1f 	bl	800268c <ReadMutex>
		ReadMutex(&fsm_mutex, &global_flight_phase_detection.flight_phase,
 800504e:	aa2b      	add	r2, sp, #172	; 0xac
 8005050:	2301      	movs	r3, #1
 8005052:	4923      	ldr	r1, [pc, #140]	; (80050e0 <vTaskXbee+0x1a8>)
 8005054:	4823      	ldr	r0, [pc, #140]	; (80050e4 <vTaskXbee+0x1ac>)
 8005056:	f7fd fb19 	bl	800268c <ReadMutex>
		ReadMutex(&gps_mutex, &globalGPS, &telemetry_send.gps,
 800505a:	aa1f      	add	r2, sp, #124	; 0x7c
 800505c:	2324      	movs	r3, #36	; 0x24
 800505e:	4922      	ldr	r1, [pc, #136]	; (80050e8 <vTaskXbee+0x1b0>)
 8005060:	4822      	ldr	r0, [pc, #136]	; (80050ec <vTaskXbee+0x1b4>)
 8005062:	f7fd fb13 	bl	800268c <ReadMutex>
		ReadMutex(&battery_mutex, &global_battery_data, &telemetry_send.battery,
 8005066:	aa1d      	add	r2, sp, #116	; 0x74
 8005068:	4921      	ldr	r1, [pc, #132]	; (80050f0 <vTaskXbee+0x1b8>)
 800506a:	2306      	movs	r3, #6
 800506c:	4821      	ldr	r0, [pc, #132]	; (80050f4 <vTaskXbee+0x1bc>)
 800506e:	f7fd fb0d 	bl	800268c <ReadMutex>
		telemetry_send.height = state_est_data.position_world[2];
 8005072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005074:	9328      	str	r3, [sp, #160]	; 0xa0
		telemetry_send.velocity = state_est_data.velocity_world[2];
 8005076:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005078:	9329      	str	r3, [sp, #164]	; 0xa4
		telemetry_send.ts = osKernelGetTickCount();
 800507a:	f00b f883 	bl	8010184 <osKernelGetTickCount>
 800507e:	902c      	str	r0, [sp, #176]	; 0xb0
		telemetry_send.checksum = calculate_checksum(&telemetry_send);
 8005080:	a817      	add	r0, sp, #92	; 0x5c
 8005082:	f7ff ff4b 	bl	8004f1c <calculate_checksum>
		HAL_UART_Transmit_DMA(&huart7, (uint8_t*) &telemetry_send,
 8005086:	225c      	movs	r2, #92	; 0x5c
		telemetry_send.checksum = calculate_checksum(&telemetry_send);
 8005088:	f88d 00b4 	strb.w	r0, [sp, #180]	; 0xb4
		HAL_UART_Transmit_DMA(&huart7, (uint8_t*) &telemetry_send,
 800508c:	4650      	mov	r0, sl
 800508e:	eb0d 0102 	add.w	r1, sp, r2
 8005092:	f006 feff 	bl	800be94 <HAL_UART_Transmit_DMA>
		telemetry_send.checksum = 0;
 8005096:	2300      	movs	r3, #0
		uart_counter = 0;
 8005098:	4a17      	ldr	r2, [pc, #92]	; (80050f8 <vTaskXbee+0x1c0>)
		osDelayUntil(tick_count);
 800509a:	4630      	mov	r0, r6
		telemetry_send.checksum = 0;
 800509c:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
		uart_counter = 0;
 80050a0:	6013      	str	r3, [r2, #0]
		osDelayUntil(tick_count);
 80050a2:	f00b f8f7 	bl	8010294 <osDelayUntil>
		if (fast_sampling) {
 80050a6:	e773      	b.n	8004f90 <vTaskXbee+0x58>
			tick_count += tick_update_slow;
 80050a8:	4446      	add	r6, r8
 80050aa:	e775      	b.n	8004f98 <vTaskXbee+0x60>
			fast_sampling = true;
 80050ac:	2501      	movs	r5, #1
 80050ae:	e78e      	b.n	8004fce <vTaskXbee+0x96>
 80050b0:	24021d49 	.word	0x24021d49
 80050b4:	24021d48 	.word	0x24021d48
 80050b8:	08015b62 	.word	0x08015b62
 80050bc:	2400cf28 	.word	0x2400cf28
 80050c0:	240173f0 	.word	0x240173f0
 80050c4:	24000340 	.word	0x24000340
 80050c8:	24000248 	.word	0x24000248
 80050cc:	24000254 	.word	0x24000254
 80050d0:	2400029c 	.word	0x2400029c
 80050d4:	240173c4 	.word	0x240173c4
 80050d8:	2401b54c 	.word	0x2401b54c
 80050dc:	2400ab28 	.word	0x2400ab28
 80050e0:	2400023c 	.word	0x2400023c
 80050e4:	2400a98c 	.word	0x2400a98c
 80050e8:	240173cc 	.word	0x240173cc
 80050ec:	2401b458 	.word	0x2401b458
 80050f0:	2400efcc 	.word	0x2400efcc
 80050f4:	2400aa1c 	.word	0x2400aa1c
 80050f8:	24000344 	.word	0x24000344
 80050fc:	2400aa24 	.word	0x2400aa24
 8005100:	24011130 	.word	0x24011130

08005104 <trcCDCReceive>:
#include "usbd_cdc_if.h"

extern recBuf commandBuffer;

/* The READ function, used in trcStreamingPort.h */
int32_t trcCDCReceive(void *data, uint32_t size, int32_t *NumBytes) {
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t i, diff;

	if (commandBuffer.idx > 0) {
 8005106:	4c13      	ldr	r4, [pc, #76]	; (8005154 <trcCDCReceive+0x50>)
int32_t trcCDCReceive(void *data, uint32_t size, int32_t *NumBytes) {
 8005108:	4617      	mov	r7, r2
 800510a:	460d      	mov	r5, r1
	if (commandBuffer.idx > 0) {
 800510c:	6822      	ldr	r2, [r4, #0]
 800510e:	4626      	mov	r6, r4
 8005110:	b1ea      	cbz	r2, 800514e <trcCDCReceive+0x4a>
		if (size >= commandBuffer.idx) {
 8005112:	428a      	cmp	r2, r1
 8005114:	d808      	bhi.n	8005128 <trcCDCReceive+0x24>
			// more than what is stored, number of bytes will be .idx
			memcpy(data, commandBuffer.data, commandBuffer.idx);
 8005116:	1d21      	adds	r1, r4, #4
 8005118:	f00e fa92 	bl	8013640 <memcpy>
			*NumBytes = commandBuffer.idx;
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	603b      	str	r3, [r7, #0]
			commandBuffer.idx = 0; // Make the buffer ready for a new command
 8005120:	2300      	movs	r3, #0
 8005122:	6023      	str	r3, [r4, #0]
		}
	} else {
		*NumBytes = 0;
	}
	return 0;
}
 8005124:	2000      	movs	r0, #0
 8005126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			diff = commandBuffer.idx - size;
 8005128:	1a54      	subs	r4, r2, r1
			memcpy(data, commandBuffer.data, size);
 800512a:	460a      	mov	r2, r1
 800512c:	1d31      	adds	r1, r6, #4
 800512e:	f00e fa87 	bl	8013640 <memcpy>
 8005132:	1cf2      	adds	r2, r6, #3
 8005134:	1ceb      	adds	r3, r5, #3
				commandBuffer.data[i] = commandBuffer.data[i + size];
 8005136:	4269      	negs	r1, r5
 8005138:	442a      	add	r2, r5
 800513a:	4433      	add	r3, r6
 800513c:	4422      	add	r2, r4
 800513e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
			for (i = 0; i < diff; i++) {
 8005142:	4293      	cmp	r3, r2
				commandBuffer.data[i] = commandBuffer.data[i + size];
 8005144:	5458      	strb	r0, [r3, r1]
			for (i = 0; i < diff; i++) {
 8005146:	d1fa      	bne.n	800513e <trcCDCReceive+0x3a>
			*NumBytes = size;
 8005148:	603d      	str	r5, [r7, #0]
			commandBuffer.idx = diff;
 800514a:	6034      	str	r4, [r6, #0]
 800514c:	e7ea      	b.n	8005124 <trcCDCReceive+0x20>
		*NumBytes = 0;
 800514e:	603a      	str	r2, [r7, #0]
 8005150:	e7e8      	b.n	8005124 <trcCDCReceive+0x20>
 8005152:	bf00      	nop
 8005154:	24009bc4 	.word	0x24009bc4

08005158 <trcCDCTransmit>:

/* The WRITE function, used in trcStreamingPort.h */
int32_t trcCDCTransmit(void *data, uint32_t size, int32_t *noOfBytesSent) {
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	460c      	mov	r4, r1
	int32_t result;
	result = CDC_Transmit_FS(data, size);
 800515c:	b289      	uxth	r1, r1
int32_t trcCDCTransmit(void *data, uint32_t size, int32_t *noOfBytesSent) {
 800515e:	4615      	mov	r5, r2
	result = CDC_Transmit_FS(data, size);
 8005160:	f00e f84e 	bl	8013200 <CDC_Transmit_FS>
	*noOfBytesSent = size;

	/* Return value should be 0 on success (not sure what the value of USBD_OK is) */
	if (result == USBD_OK)
 8005164:	3000      	adds	r0, #0
	*noOfBytesSent = size;
 8005166:	602c      	str	r4, [r5, #0]
	if (result == USBD_OK)
 8005168:	bf18      	it	ne
 800516a:	2001      	movne	r0, #1
		return 0;
	else
		return -1;
}
 800516c:	4240      	negs	r0, r0
 800516e:	bd38      	pop	{r3, r4, r5, pc}

08005170 <prvTraceGetTaskNumberHigh16>:
{
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
}

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 8005170:	b508      	push	{r3, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 8005172:	f00d f9a5 	bl	80124c0 <uxTaskGetTaskNumber>
}
 8005176:	0c00      	lsrs	r0, r0, #16
 8005178:	bd08      	pop	{r3, pc}

0800517a <prvTraceSetTaskNumberHigh16>:
{
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
}

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 800517a:	b538      	push	{r3, r4, r5, lr}
 800517c:	4604      	mov	r4, r0
 800517e:	460d      	mov	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8005180:	f00d f99e 	bl	80124c0 <uxTaskGetTaskNumber>
 8005184:	b280      	uxth	r0, r0
 8005186:	ea40 4105 	orr.w	r1, r0, r5, lsl #16
 800518a:	4620      	mov	r0, r4
}
 800518c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8005190:	f00d b999 	b.w	80124c6 <vTaskSetTaskNumber>

08005194 <prvTraceGetQueueNumberHigh16>:
{
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
}

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 8005194:	b508      	push	{r3, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8005196:	f00c fb7f 	bl	8011898 <uxQueueGetQueueNumber>
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
}
 800519a:	0c00      	lsrs	r0, r0, #16
 800519c:	bd08      	pop	{r3, pc}

0800519e <prvTraceSetQueueNumberHigh16>:
{
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
}

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 800519e:	b538      	push	{r3, r4, r5, lr}
 80051a0:	4604      	mov	r4, r0
 80051a2:	460d      	mov	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
 80051a4:	f00c fb78 	bl	8011898 <uxQueueGetQueueNumber>
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 80051a8:	b280      	uxth	r0, r0
 80051aa:	ea40 4105 	orr.w	r1, r0, r5, lsl #16
 80051ae:	4620      	mov	r0, r4
}
 80051b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 80051b4:	f00c bb72 	b.w	801189c <vQueueSetQueueNumber>

080051b8 <prvAddTaskToStackMonitor>:
{
	int i;
	int foundEmptySlot = 0;

	// find an empty slot
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 80051b8:	2300      	movs	r3, #0
	{
		if (tasksInStackMonitor[i].tcb == NULL)
 80051ba:	4a0a      	ldr	r2, [pc, #40]	; (80051e4 <prvAddTaskToStackMonitor+0x2c>)
{
 80051bc:	b510      	push	{r4, lr}
		if (tasksInStackMonitor[i].tcb == NULL)
 80051be:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80051c2:	00d9      	lsls	r1, r3, #3
 80051c4:	b934      	cbnz	r4, 80051d4 <prvAddTaskToStackMonitor+0x1c>
		{
			tasksInStackMonitor[i].tcb = task;
 80051c6:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
 80051ca:	440a      	add	r2, r1
 80051cc:	f04f 33ff 	mov.w	r3, #4294967295
 80051d0:	6053      	str	r3, [r2, #4]

	if (foundEmptySlot == 0)
	{
		tasksNotIncluded++;
	}
}
 80051d2:	bd10      	pop	{r4, pc}
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 80051d4:	3301      	adds	r3, #1
 80051d6:	2b0f      	cmp	r3, #15
 80051d8:	d1f1      	bne.n	80051be <prvAddTaskToStackMonitor+0x6>
		tasksNotIncluded++;
 80051da:	4a03      	ldr	r2, [pc, #12]	; (80051e8 <prvAddTaskToStackMonitor+0x30>)
 80051dc:	6813      	ldr	r3, [r2, #0]
 80051de:	3301      	adds	r3, #1
 80051e0:	6013      	str	r3, [r2, #0]
}
 80051e2:	e7f6      	b.n	80051d2 <prvAddTaskToStackMonitor+0x1a>
 80051e4:	24000b54 	.word	0x24000b54
 80051e8:	24000bcc 	.word	0x24000bcc

080051ec <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
 80051ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
 80051f0:	4c13      	ldr	r4, [pc, #76]	; (8005240 <prvReportStackUsage+0x54>)
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
 80051f2:	4f14      	ldr	r7, [pc, #80]	; (8005244 <prvReportStackUsage+0x58>)
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
 80051f4:	6826      	ldr	r6, [r4, #0]
 80051f6:	46b8      	mov	r8, r7
		if (tasksInStackMonitor[i].tcb != NULL)
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 80051fe:	b180      	cbz	r0, 8005222 <prvReportStackUsage+0x36>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
 8005200:	f00d f964 	bl	80124cc <uxTaskGetStackHighWaterMark>

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
 8005204:	6821      	ldr	r1, [r4, #0]
 8005206:	00cb      	lsls	r3, r1, #3
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
 8005208:	f858 1031 	ldr.w	r1, [r8, r1, lsl #3]
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
 800520c:	18fa      	adds	r2, r7, r3
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
 800520e:	4443      	add	r3, r8
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
 8005210:	6855      	ldr	r5, [r2, #4]
 8005212:	4285      	cmp	r5, r0
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
 8005214:	bf88      	it	hi
 8005216:	6050      	strhi	r0, [r2, #4]
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
 8005218:	20ea      	movs	r0, #234	; 0xea
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	f000 fd0a 	bl	8005c34 <prvTraceStoreEvent2>
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
 8005220:	2001      	movs	r0, #1
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	220f      	movs	r2, #15
 8005226:	3301      	adds	r3, #1
 8005228:	fb93 f2f2 	sdiv	r2, r3, r2
 800522c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005230:	1a9b      	subs	r3, r3, r2
 8005232:	6023      	str	r3, [r4, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
 8005234:	b908      	cbnz	r0, 800523a <prvReportStackUsage+0x4e>
 8005236:	42b3      	cmp	r3, r6
 8005238:	d1de      	bne.n	80051f8 <prvReportStackUsage+0xc>
}
 800523a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800523e:	bf00      	nop
 8005240:	2400034c 	.word	0x2400034c
 8005244:	24000b54 	.word	0x24000b54

08005248 <TzCtrl>:
 * Task for sending the trace data from the internal buffer to the stream 
 * interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
 * receiving commands from Tracealyzer. Also does some diagnostics.
 ******************************************************************************/
static portTASK_FUNCTION( TzCtrl, pvParameters )
{
 8005248:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (tasksNotIncluded > 0)
 800524c:	4d28      	ldr	r5, [pc, #160]	; (80052f0 <TzCtrl+0xa8>)
	if (NoRoomForSymbol > 0)
 800524e:	4e29      	ldr	r6, [pc, #164]	; (80052f4 <TzCtrl+0xac>)
	if (NoRoomForObjectData > 0)
 8005250:	4f29      	ldr	r7, [pc, #164]	; (80052f8 <TzCtrl+0xb0>)
	while (1)
	{
		do
		{
			/* Listen for new commands */
			bytes = 0;
 8005252:	f04f 0800 	mov.w	r8, #0
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 8005256:	2108      	movs	r1, #8
 8005258:	aa01      	add	r2, sp, #4
			bytes = 0;
 800525a:	f8cd 8004 	str.w	r8, [sp, #4]
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 800525e:	eb0d 0001 	add.w	r0, sp, r1
 8005262:	f7ff ff4f 	bl	8005104 <trcCDCReceive>

			if (status != 0)
 8005266:	2800      	cmp	r0, #0
 8005268:	d036      	beq.n	80052d8 <TzCtrl+0x90>
			{
				/* The connection has failed, stop tracing */
				vTraceStop();
 800526a:	f000 fc17 	bl	8005a9c <vTraceStop>

/* If the internal buffer is disabled, the COMMIT macro instead sends the data directly 
   from the "event functions" (using TRC_STREAM_PORT_WRITE_DATA). */			
#if (TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1)
			/* If there is a buffer page, this sends it to the streaming interface using TRC_STREAM_PORT_WRITE_DATA. */
			bytes = prvPagedEventBufferTransfer();
 800526e:	f000 fc19 	bl	8005aa4 <prvPagedEventBufferTransfer>
 8005272:	4604      	mov	r4, r0
 8005274:	9001      	str	r0, [sp, #4]
#endif			
			
		/* If there was data sent or received (bytes != 0), loop around and repeat, if there is more data to send or receive.
		Otherwise, step out of this loop and sleep for a while. */		
		
		} while (bytes != 0);
 8005276:	2800      	cmp	r0, #0
 8005278:	d1ed      	bne.n	8005256 <TzCtrl+0xe>

		if (xTraceIsRecordingEnabled())
 800527a:	f000 f8d3 	bl	8005424 <xTraceIsRecordingEnabled>
 800527e:	b338      	cbz	r0, 80052d0 <TzCtrl+0x88>
	if (tasksNotIncluded > 0)
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	dd03      	ble.n	800528e <TzCtrl+0x46>
		prvTraceWarning(PSF_WARNING_STACKMON_NO_SLOTS);
 8005286:	200e      	movs	r0, #14
 8005288:	f000 fade 	bl	8005848 <prvTraceWarning>
		tasksNotIncluded = 0;
 800528c:	602c      	str	r4, [r5, #0]
	if (NoRoomForSymbol > 0)
 800528e:	6833      	ldr	r3, [r6, #0]
 8005290:	b123      	cbz	r3, 800529c <TzCtrl+0x54>
		prvTraceWarning(PSF_WARNING_SYMBOL_TABLE_SLOTS);
 8005292:	2007      	movs	r0, #7
 8005294:	f000 fad8 	bl	8005848 <prvTraceWarning>
		NoRoomForSymbol = 0;
 8005298:	2300      	movs	r3, #0
 800529a:	6033      	str	r3, [r6, #0]
	if (NoRoomForObjectData > 0)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	b123      	cbz	r3, 80052aa <TzCtrl+0x62>
		prvTraceWarning(PSF_WARNING_OBJECT_DATA_SLOTS);
 80052a0:	2009      	movs	r0, #9
 80052a2:	f000 fad1 	bl	8005848 <prvTraceWarning>
		NoRoomForObjectData = 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	603b      	str	r3, [r7, #0]
	if (LongestSymbolName > (TRC_CFG_SYMBOL_MAX_LENGTH))
 80052aa:	4c14      	ldr	r4, [pc, #80]	; (80052fc <TzCtrl+0xb4>)
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	2b1e      	cmp	r3, #30
 80052b0:	d904      	bls.n	80052bc <TzCtrl+0x74>
		prvTraceWarning(PSF_WARNING_SYMBOL_MAX_LENGTH);
 80052b2:	2008      	movs	r0, #8
 80052b4:	f000 fac8 	bl	8005848 <prvTraceWarning>
		LongestSymbolName = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	6023      	str	r3, [r4, #0]
	if (MaxBytesTruncated > 0)
 80052bc:	4c10      	ldr	r4, [pc, #64]	; (8005300 <TzCtrl+0xb8>)
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	b123      	cbz	r3, 80052cc <TzCtrl+0x84>
		prvTraceWarning(PSF_WARNING_STRING_TOO_LONG);
 80052c2:	200a      	movs	r0, #10
 80052c4:	f000 fac0 	bl	8005848 <prvTraceWarning>
		MaxBytesTruncated = 0;
 80052c8:	2300      	movs	r3, #0
 80052ca:	6023      	str	r3, [r4, #0]
		{
			prvCheckRecorderStatus();
			prvReportStackUsage();
 80052cc:	f7ff ff8e 	bl	80051ec <prvReportStackUsage>
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 80052d0:	200a      	movs	r0, #10
 80052d2:	f00c ff81 	bl	80121d8 <vTaskDelay>
	while (1)
 80052d6:	e7bc      	b.n	8005252 <TzCtrl+0xa>
			if ((status == 0) && (bytes == sizeof(TracealyzerCommandType)))
 80052d8:	9b01      	ldr	r3, [sp, #4]
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d1c7      	bne.n	800526e <TzCtrl+0x26>
				if (prvIsValidCommand(&msg))
 80052de:	a802      	add	r0, sp, #8
 80052e0:	f000 f966 	bl	80055b0 <prvIsValidCommand>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d0c2      	beq.n	800526e <TzCtrl+0x26>
					prvProcessCommand(&msg); /* Start or Stop currently... */
 80052e8:	a802      	add	r0, sp, #8
 80052ea:	f000 fc41 	bl	8005b70 <prvProcessCommand>
 80052ee:	e7be      	b.n	800526e <TzCtrl+0x26>
 80052f0:	24000bcc 	.word	0x24000bcc
 80052f4:	24000c48 	.word	0x24000c48
 80052f8:	24000c44 	.word	0x24000c44
 80052fc:	24000c3c 	.word	0x24000c3c
 8005300:	24000c40 	.word	0x24000c40

08005304 <vTraceEnable>:
{
 8005304:	b570      	push	{r4, r5, r6, lr}
	if (HandleTzCtrl == NULL)
 8005306:	4d2c      	ldr	r5, [pc, #176]	; (80053b8 <vTraceEnable+0xb4>)
{
 8005308:	b088      	sub	sp, #32
	int32_t bytes = 0;
 800530a:	2300      	movs	r3, #0
{
 800530c:	4604      	mov	r4, r0
	if (HandleTzCtrl == NULL)
 800530e:	682e      	ldr	r6, [r5, #0]
	int32_t bytes = 0;
 8005310:	9305      	str	r3, [sp, #20]
	if (HandleTzCtrl == NULL)
 8005312:	b9c6      	cbnz	r6, 8005346 <vTraceEnable+0x42>
		TRC_STREAM_PORT_INIT();
 8005314:	f00d ff14 	bl	8013140 <MX_USB_DEVICE_Init>
		trcWarningChannel = xTraceRegisterString("#WFR"); 
 8005318:	4828      	ldr	r0, [pc, #160]	; (80053bc <vTraceEnable+0xb8>)
 800531a:	f000 fa33 	bl	8005784 <xTraceRegisterString>
 800531e:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <vTraceEnable+0xbc>)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
 8005320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005324:	4927      	ldr	r1, [pc, #156]	; (80053c4 <vTraceEnable+0xc0>)
		trcWarningChannel = xTraceRegisterString("#WFR"); 
 8005326:	6018      	str	r0, [r3, #0]
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
 8005328:	4b27      	ldr	r3, [pc, #156]	; (80053c8 <vTraceEnable+0xc4>)
 800532a:	4828      	ldr	r0, [pc, #160]	; (80053cc <vTraceEnable+0xc8>)
 800532c:	9302      	str	r3, [sp, #8]
 800532e:	4b28      	ldr	r3, [pc, #160]	; (80053d0 <vTraceEnable+0xcc>)
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	2301      	movs	r3, #1
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	4633      	mov	r3, r6
 8005338:	f00c fcea 	bl	8011d10 <xTaskCreateStatic>
 800533c:	6028      	str	r0, [r5, #0]
		if (HandleTzCtrl == NULL)
 800533e:	b910      	cbnz	r0, 8005346 <vTraceEnable+0x42>
			prvTraceError(PSF_ERROR_TZCTRLTASK_NOT_CREATED);
 8005340:	2005      	movs	r0, #5
 8005342:	f000 fc1d 	bl	8005b80 <prvTraceError>
	if (startOption == TRC_START_AWAIT_HOST)
 8005346:	2c02      	cmp	r4, #2
 8005348:	d110      	bne.n	800536c <vTraceEnable+0x68>
			bytes = 0;
 800534a:	2400      	movs	r4, #0
		while (RecorderEnabled == 0);
 800534c:	4d21      	ldr	r5, [pc, #132]	; (80053d4 <vTraceEnable+0xd0>)
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 800534e:	aa05      	add	r2, sp, #20
 8005350:	2108      	movs	r1, #8
 8005352:	a806      	add	r0, sp, #24
			bytes = 0;
 8005354:	9405      	str	r4, [sp, #20]
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 8005356:	f7ff fed5 	bl	8005104 <trcCDCReceive>
			if (status != 0)
 800535a:	b1b0      	cbz	r0, 800538a <vTraceEnable+0x86>
				prvTraceWarning(PSF_WARNING_STREAM_PORT_READ);
 800535c:	200b      	movs	r0, #11
 800535e:	f000 fa73 	bl	8005848 <prvTraceWarning>
		while (RecorderEnabled == 0);
 8005362:	682b      	ldr	r3, [r5, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0f2      	beq.n	800534e <vTraceEnable+0x4a>
}
 8005368:	b008      	add	sp, #32
 800536a:	bd70      	pop	{r4, r5, r6, pc}
	else if (startOption == TRC_START)
 800536c:	2c01      	cmp	r4, #1
 800536e:	d109      	bne.n	8005384 <vTraceEnable+0x80>
		TRC_PORT_SPECIFIC_INIT();
 8005370:	f000 fcc2 	bl	8005cf8 <prvTraceInitCortexM>
		msg.cmdCode = CMD_SET_ACTIVE;
 8005374:	a808      	add	r0, sp, #32
 8005376:	f240 1301 	movw	r3, #257	; 0x101
 800537a:	f820 3d08 	strh.w	r3, [r0, #-8]!
		prvProcessCommand(&msg);
 800537e:	f000 fbf7 	bl	8005b70 <prvProcessCommand>
 8005382:	e7f1      	b.n	8005368 <vTraceEnable+0x64>
		TRC_PORT_SPECIFIC_INIT();
 8005384:	f000 fcb8 	bl	8005cf8 <prvTraceInitCortexM>
}
 8005388:	e7ee      	b.n	8005368 <vTraceEnable+0x64>
			if ((status == 0) && (bytes == sizeof(TracealyzerCommandType)))
 800538a:	9b05      	ldr	r3, [sp, #20]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d1e8      	bne.n	8005362 <vTraceEnable+0x5e>
				if (prvIsValidCommand(&msg))
 8005390:	a806      	add	r0, sp, #24
 8005392:	f000 f90d 	bl	80055b0 <prvIsValidCommand>
 8005396:	2800      	cmp	r0, #0
 8005398:	d0e3      	beq.n	8005362 <vTraceEnable+0x5e>
					if (msg.cmdCode == CMD_SET_ACTIVE && msg.param1 == 1)
 800539a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d105      	bne.n	80053ae <vTraceEnable+0xaa>
 80053a2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d101      	bne.n	80053ae <vTraceEnable+0xaa>
						TRC_PORT_SPECIFIC_INIT();
 80053aa:	f000 fca5 	bl	8005cf8 <prvTraceInitCortexM>
					prvProcessCommand(&msg);
 80053ae:	a806      	add	r0, sp, #24
 80053b0:	f000 fbde 	bl	8005b70 <prvProcessCommand>
 80053b4:	e7d5      	b.n	8005362 <vTraceEnable+0x5e>
 80053b6:	bf00      	nop
 80053b8:	24000348 	.word	0x24000348
 80053bc:	08015b9c 	.word	0x08015b9c
 80053c0:	24024460 	.word	0x24024460
 80053c4:	08015ba1 	.word	0x08015ba1
 80053c8:	24000bd0 	.word	0x24000bd0
 80053cc:	08005249 	.word	0x08005249
 80053d0:	24000354 	.word	0x24000354
 80053d4:	24000c4c 	.word	0x24000c4c

080053d8 <prvTraceGetCurrentTaskHandle>:
	return xTaskGetCurrentTaskHandle();
 80053d8:	f00d b888 	b.w	80124ec <xTaskGetCurrentTaskHandle>

080053dc <prvIsNewTCB>:
	if (pCurrentTCB != pNewTCB)
 80053dc:	4b03      	ldr	r3, [pc, #12]	; (80053ec <prvIsNewTCB+0x10>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	4282      	cmp	r2, r0
		pCurrentTCB = pNewTCB;
 80053e2:	bf1a      	itte	ne
 80053e4:	6018      	strne	r0, [r3, #0]
		return 1;
 80053e6:	2001      	movne	r0, #1
	return 0;
 80053e8:	2000      	moveq	r0, #0
}
 80053ea:	4770      	bx	lr
 80053ec:	24000350 	.word	0x24000350

080053f0 <prvAllocateBufferPage>:
static int prvAllocateBufferPage(int prevPage)
{
	int index;
	int count = 0;

	index = (prevPage + 1) % (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT);
 80053f0:	1c42      	adds	r2, r0, #1
 80053f2:	2314      	movs	r3, #20

	while((PageInfo[index].Status != PAGE_STATUS_FREE) && (count ++ < (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT)))
 80053f4:	490a      	ldr	r1, [pc, #40]	; (8005420 <prvAllocateBufferPage+0x30>)
	index = (prevPage + 1) % (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT);
 80053f6:	fb92 f0f3 	sdiv	r0, r2, r3
 80053fa:	fb03 2010 	mls	r0, r3, r0, r2
	while((PageInfo[index].Status != PAGE_STATUS_FREE) && (count ++ < (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT)))
 80053fe:	2215      	movs	r2, #21
{
 8005400:	b510      	push	{r4, lr}
	while((PageInfo[index].Status != PAGE_STATUS_FREE) && (count ++ < (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT)))
 8005402:	f831 4030 	ldrh.w	r4, [r1, r0, lsl #3]
 8005406:	b11c      	cbz	r4, 8005410 <prvAllocateBufferPage+0x20>
 8005408:	3a01      	subs	r2, #1
 800540a:	d102      	bne.n	8005412 <prvAllocateBufferPage+0x22>
	if (PageInfo[index].Status == PAGE_STATUS_FREE)
	{
		return index;
	}

	return -1;
 800540c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005410:	bd10      	pop	{r4, pc}
		index = (index + 1) % (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT);
 8005412:	3001      	adds	r0, #1
 8005414:	fb90 f4f3 	sdiv	r4, r0, r3
 8005418:	fb03 0014 	mls	r0, r3, r4, r0
 800541c:	e7f1      	b.n	8005402 <prvAllocateBufferPage+0x12>
 800541e:	bf00      	nop
 8005420:	24024464 	.word	0x24024464

08005424 <xTraceIsRecordingEnabled>:
}
 8005424:	4b01      	ldr	r3, [pc, #4]	; (800542c <xTraceIsRecordingEnabled+0x8>)
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	24000c4c 	.word	0x24000c4c

08005430 <prvTraceSaveObjectSymbol>:
{
 8005430:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005432:	f3ef 8610 	mrs	r6, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005436:	2301      	movs	r3, #1
 8005438:	f383 8810 	msr	PRIMASK, r3
	if (firstFreeSymbolTableIndex < SYMBOL_TABLE_BUFFER_SIZE)
 800543c:	4d14      	ldr	r5, [pc, #80]	; (8005490 <prvTraceSaveObjectSymbol+0x60>)
 800543e:	682a      	ldr	r2, [r5, #0]
 8005440:	f5b2 6f07 	cmp.w	r2, #2160	; 0x870
 8005444:	d21f      	bcs.n	8005486 <prvTraceSaveObjectSymbol+0x56>
		symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[firstFreeSymbolTableIndex / sizeof(uint32_t)] = (uint32_t)address;
 8005446:	4b13      	ldr	r3, [pc, #76]	; (8005494 <prvTraceSaveObjectSymbol+0x64>)
 8005448:	0894      	lsrs	r4, r2, #2
 800544a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		ptrSymbol = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[firstFreeSymbolTableIndex + sizeof(uint32_t)];
 800544e:	1d10      	adds	r0, r2, #4
 8005450:	1e4c      	subs	r4, r1, #1
 8005452:	4418      	add	r0, r3
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 8005454:	2300      	movs	r3, #0
			ptrSymbol[i] = (uint8_t)name[i];	/* We do this first to ensure we also get the 0 termination, if there is one */
 8005456:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800545a:	54c7      	strb	r7, [r0, r3]
			if (name[i] == 0)
 800545c:	7827      	ldrb	r7, [r4, #0]
 800545e:	b137      	cbz	r7, 800546e <prvTraceSaveObjectSymbol+0x3e>
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 8005460:	3301      	adds	r3, #1
 8005462:	2b1e      	cmp	r3, #30
 8005464:	d1f7      	bne.n	8005456 <prvTraceSaveObjectSymbol+0x26>
		while ((name[i] != 0) && i < 128)
 8005466:	5cc8      	ldrb	r0, [r1, r3]
 8005468:	b108      	cbz	r0, 800546e <prvTraceSaveObjectSymbol+0x3e>
 800546a:	2b80      	cmp	r3, #128	; 0x80
 800546c:	d109      	bne.n	8005482 <prvTraceSaveObjectSymbol+0x52>
		if (i > LongestSymbolName)
 800546e:	490a      	ldr	r1, [pc, #40]	; (8005498 <prvTraceSaveObjectSymbol+0x68>)
 8005470:	6808      	ldr	r0, [r1, #0]
 8005472:	4298      	cmp	r0, r3
 8005474:	d200      	bcs.n	8005478 <prvTraceSaveObjectSymbol+0x48>
			LongestSymbolName = i;
 8005476:	600b      	str	r3, [r1, #0]
		firstFreeSymbolTableIndex += SYMBOL_TABLE_SLOT_SIZE;
 8005478:	3224      	adds	r2, #36	; 0x24
 800547a:	602a      	str	r2, [r5, #0]
 800547c:	f386 8810 	msr	PRIMASK, r6
}
 8005480:	bdf0      	pop	{r4, r5, r6, r7, pc}
			i++;
 8005482:	3301      	adds	r3, #1
 8005484:	e7ef      	b.n	8005466 <prvTraceSaveObjectSymbol+0x36>
		NoRoomForSymbol++;
 8005486:	4a05      	ldr	r2, [pc, #20]	; (800549c <prvTraceSaveObjectSymbol+0x6c>)
 8005488:	6813      	ldr	r3, [r2, #0]
 800548a:	3301      	adds	r3, #1
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	e7f5      	b.n	800547c <prvTraceSaveObjectSymbol+0x4c>
 8005490:	24000c60 	.word	0x24000c60
 8005494:	24000df4 	.word	0x24000df4
 8005498:	24000c3c 	.word	0x24000c3c
 800549c:	24000c48 	.word	0x24000c48

080054a0 <prvTraceSaveSymbol>:
{
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4601      	mov	r1, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054a4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a8:	2301      	movs	r3, #1
 80054aa:	f383 8810 	msr	PRIMASK, r3
	if (firstFreeSymbolTableIndex < SYMBOL_TABLE_BUFFER_SIZE)
 80054ae:	4b08      	ldr	r3, [pc, #32]	; (80054d0 <prvTraceSaveSymbol+0x30>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f5b3 6f07 	cmp.w	r3, #2160	; 0x870
 80054b6:	d208      	bcs.n	80054ca <prvTraceSaveSymbol+0x2a>
		retVal = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[firstFreeSymbolTableIndex];
 80054b8:	4c06      	ldr	r4, [pc, #24]	; (80054d4 <prvTraceSaveSymbol+0x34>)
 80054ba:	441c      	add	r4, r3
		prvTraceSaveObjectSymbol(retVal, name);
 80054bc:	4620      	mov	r0, r4
 80054be:	f7ff ffb7 	bl	8005430 <prvTraceSaveObjectSymbol>
 80054c2:	f385 8810 	msr	PRIMASK, r5
}
 80054c6:	4620      	mov	r0, r4
 80054c8:	bd38      	pop	{r3, r4, r5, pc}
	void* retVal = 0;
 80054ca:	2400      	movs	r4, #0
 80054cc:	e7f9      	b.n	80054c2 <prvTraceSaveSymbol+0x22>
 80054ce:	bf00      	nop
 80054d0:	24000c60 	.word	0x24000c60
 80054d4:	24000df4 	.word	0x24000df4

080054d8 <prvTraceDeleteSymbol>:
{
 80054d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054da:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054de:	2301      	movs	r3, #1
 80054e0:	f383 8810 	msr	PRIMASK, r3
	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
 80054e4:	4d15      	ldr	r5, [pc, #84]	; (800553c <prvTraceDeleteSymbol+0x64>)
 80054e6:	2300      	movs	r3, #0
		if (*ptr == (uint32_t)address)
 80054e8:	4a15      	ldr	r2, [pc, #84]	; (8005540 <prvTraceDeleteSymbol+0x68>)
	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
 80054ea:	6829      	ldr	r1, [r5, #0]
 80054ec:	4299      	cmp	r1, r3
 80054ee:	d91b      	bls.n	8005528 <prvTraceDeleteSymbol+0x50>
		ptr = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i / sizeof(uint32_t)];
 80054f0:	089c      	lsrs	r4, r3, #2
		if (*ptr == (uint32_t)address)
 80054f2:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 80054f6:	42b8      	cmp	r0, r7
 80054f8:	d11d      	bne.n	8005536 <prvTraceDeleteSymbol+0x5e>
			if (firstFreeSymbolTableIndex > SYMBOL_TABLE_SLOT_SIZE && i != (firstFreeSymbolTableIndex - SYMBOL_TABLE_SLOT_SIZE))
 80054fa:	2924      	cmp	r1, #36	; 0x24
 80054fc:	f1a1 0024 	sub.w	r0, r1, #36	; 0x24
 8005500:	d915      	bls.n	800552e <prvTraceDeleteSymbol+0x56>
 8005502:	4283      	cmp	r3, r0
 8005504:	d013      	beq.n	800552e <prvTraceDeleteSymbol+0x56>
				lastEntryPtr = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[(firstFreeSymbolTableIndex - SYMBOL_TABLE_SLOT_SIZE) / sizeof(uint32_t)];
 8005506:	0881      	lsrs	r1, r0, #2
				for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE) / sizeof(uint32_t); j++)
 8005508:	2300      	movs	r3, #0
				lastEntryPtr = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[(firstFreeSymbolTableIndex - SYMBOL_TABLE_SLOT_SIZE) / sizeof(uint32_t)];
 800550a:	eb02 0e81 	add.w	lr, r2, r1, lsl #2
					ptr[j] = lastEntryPtr[j];
 800550e:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
 8005512:	eb04 0c03 	add.w	ip, r4, r3
				for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE) / sizeof(uint32_t); j++)
 8005516:	3301      	adds	r3, #1
					ptr[j] = lastEntryPtr[j];
 8005518:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
				for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE) / sizeof(uint32_t); j++)
 800551c:	2b09      	cmp	r3, #9
 800551e:	d1f6      	bne.n	800550e <prvTraceDeleteSymbol+0x36>
				*lastEntryPtr = 0;
 8005520:	2300      	movs	r3, #0
 8005522:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			firstFreeSymbolTableIndex -= SYMBOL_TABLE_SLOT_SIZE;
 8005526:	6028      	str	r0, [r5, #0]
 8005528:	f386 8810 	msr	PRIMASK, r6
}
 800552c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				*ptr = 0; /* No other entry found, or this is the last entry */
 800552e:	2300      	movs	r3, #0
 8005530:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005534:	e7f7      	b.n	8005526 <prvTraceDeleteSymbol+0x4e>
	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
 8005536:	3324      	adds	r3, #36	; 0x24
 8005538:	e7d8      	b.n	80054ec <prvTraceDeleteSymbol+0x14>
 800553a:	bf00      	nop
 800553c:	24000c60 	.word	0x24000c60
 8005540:	24000df4 	.word	0x24000df4

08005544 <prvTraceSaveObjectData>:
{
 8005544:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005546:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554a:	2301      	movs	r3, #1
 800554c:	f383 8810 	msr	PRIMASK, r3
	foundSlot = firstFreeObjectDataTableIndex;
 8005550:	4c14      	ldr	r4, [pc, #80]	; (80055a4 <prvTraceSaveObjectData+0x60>)
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 8005552:	2200      	movs	r2, #0
		if (*ptr == (uint32_t)address)
 8005554:	4f14      	ldr	r7, [pc, #80]	; (80055a8 <prvTraceSaveObjectData+0x64>)
	foundSlot = firstFreeObjectDataTableIndex;
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	46a4      	mov	ip, r4
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 800555a:	429a      	cmp	r2, r3
 800555c:	d30d      	bcc.n	800557a <prvTraceSaveObjectData+0x36>
	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
 800555e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005562:	d21a      	bcs.n	800559a <prvTraceSaveObjectData+0x56>
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
 8005564:	089a      	lsrs	r2, r3, #2
 8005566:	4d10      	ldr	r5, [pc, #64]	; (80055a8 <prvTraceSaveObjectData+0x64>)
			firstFreeObjectDataTableIndex += OBJECT_DATA_SLOT_SIZE;
 8005568:	3308      	adds	r3, #8
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
 800556a:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 800556e:	3201      	adds	r2, #1
			firstFreeObjectDataTableIndex += OBJECT_DATA_SLOT_SIZE;
 8005570:	f8cc 3000 	str.w	r3, [ip]
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 8005574:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8005578:	e00c      	b.n	8005594 <prvTraceSaveObjectData+0x50>
		ptr = &objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i / sizeof(uint32_t)];
 800557a:	0895      	lsrs	r5, r2, #2
		if (*ptr == (uint32_t)address)
 800557c:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
 8005580:	42a0      	cmp	r0, r4
 8005582:	d001      	beq.n	8005588 <prvTraceSaveObjectData+0x44>
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 8005584:	3208      	adds	r2, #8
 8005586:	e7e8      	b.n	800555a <prvTraceSaveObjectData+0x16>
	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
 8005588:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 800558c:	d205      	bcs.n	800559a <prvTraceSaveObjectData+0x56>
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 800558e:	3501      	adds	r5, #1
 8005590:	f847 1025 	str.w	r1, [r7, r5, lsl #2]
 8005594:	f386 8810 	msr	PRIMASK, r6
}
 8005598:	bdf0      	pop	{r4, r5, r6, r7, pc}
		NoRoomForObjectData++;
 800559a:	4a04      	ldr	r2, [pc, #16]	; (80055ac <prvTraceSaveObjectData+0x68>)
 800559c:	6813      	ldr	r3, [r2, #0]
 800559e:	3301      	adds	r3, #1
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e7f7      	b.n	8005594 <prvTraceSaveObjectData+0x50>
 80055a4:	24000c5c 	.word	0x24000c5c
 80055a8:	24000c64 	.word	0x24000c64
 80055ac:	24000c44 	.word	0x24000c44

080055b0 <prvIsValidCommand>:
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 80055b0:	7802      	ldrb	r2, [r0, #0]
												cmd->param1 +
 80055b2:	7843      	ldrb	r3, [r0, #1]
												cmd->param2 +
 80055b4:	7881      	ldrb	r1, [r0, #2]
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 80055b6:	4413      	add	r3, r2
												cmd->param1 +
 80055b8:	440b      	add	r3, r1
												cmd->param3 +
 80055ba:	78c1      	ldrb	r1, [r0, #3]
												cmd->param2 +
 80055bc:	4419      	add	r1, r3
												cmd->param4 +
 80055be:	7903      	ldrb	r3, [r0, #4]
												cmd->param3 +
 80055c0:	4419      	add	r1, r3
												cmd->param5));
 80055c2:	7943      	ldrb	r3, [r0, #5]
												cmd->param4 +
 80055c4:	440b      	add	r3, r1
	if (cmd->checksumMSB != (unsigned char)(checksum >> 8))
 80055c6:	79c1      	ldrb	r1, [r0, #7]
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 80055c8:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 80055cc:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
	if (cmd->checksumMSB != (unsigned char)(checksum >> 8))
 80055d0:	ebb1 2f13 	cmp.w	r1, r3, lsr #8
 80055d4:	d108      	bne.n	80055e8 <prvIsValidCommand+0x38>
	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFF))
 80055d6:	7981      	ldrb	r1, [r0, #6]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	4299      	cmp	r1, r3
 80055dc:	d104      	bne.n	80055e8 <prvIsValidCommand+0x38>
	if (cmd->cmdCode > CMD_LAST_COMMAND)
 80055de:	2a01      	cmp	r2, #1
 80055e0:	bf8c      	ite	hi
 80055e2:	2000      	movhi	r0, #0
 80055e4:	2001      	movls	r0, #1
 80055e6:	4770      	bx	lr
		return 0;
 80055e8:	2000      	movs	r0, #0
}
 80055ea:	4770      	bx	lr

080055ec <prvPagedEventBufferGetWritePointer>:
 * Parameters:
 * - sizeOfEvent: The size of the event that is to be placed in the buffer.
 *
*******************************************************************************/
void* prvPagedEventBufferGetWritePointer(int sizeOfEvent)
{
 80055ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	void* ret;
	static int currentWritePage = -1;

	if (currentWritePage == -1)
 80055f0:	4c20      	ldr	r4, [pc, #128]	; (8005674 <prvPagedEventBufferGetWritePointer+0x88>)
{
 80055f2:	4605      	mov	r5, r0
	if (currentWritePage == -1)
 80055f4:	6820      	ldr	r0, [r4, #0]
 80055f6:	46a0      	mov	r8, r4
 80055f8:	1c43      	adds	r3, r0, #1
 80055fa:	d10b      	bne.n	8005614 <prvPagedEventBufferGetWritePointer+0x28>
	{
	    currentWritePage = prvAllocateBufferPage(currentWritePage);
 80055fc:	f7ff fef8 	bl	80053f0 <prvAllocateBufferPage>
 8005600:	6020      	str	r0, [r4, #0]
		if (currentWritePage == -1)
 8005602:	3001      	adds	r0, #1
 8005604:	d106      	bne.n	8005614 <prvPagedEventBufferGetWritePointer+0x28>
		  TotalBytesRemaining_LowWaterMark = TotalBytesRemaining;

		currentWritePage = prvAllocateBufferPage(currentWritePage);
		if (currentWritePage == -1)
		{
		  DroppedEventCounter++;
 8005606:	4a1c      	ldr	r2, [pc, #112]	; (8005678 <prvPagedEventBufferGetWritePointer+0x8c>)
		  return NULL;
 8005608:	2000      	movs	r0, #0
		  DroppedEventCounter++;
 800560a:	6813      	ldr	r3, [r2, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	6013      	str	r3, [r2, #0]

	if (TotalBytesRemaining < TotalBytesRemaining_LowWaterMark)
		TotalBytesRemaining_LowWaterMark = TotalBytesRemaining;

	return ret;
}
 8005610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (PageInfo[currentWritePage].BytesRemaining - sizeOfEvent < 0)
 8005614:	f8d8 0000 	ldr.w	r0, [r8]
 8005618:	4c18      	ldr	r4, [pc, #96]	; (800567c <prvPagedEventBufferGetWritePointer+0x90>)
 800561a:	4f19      	ldr	r7, [pc, #100]	; (8005680 <prvPagedEventBufferGetWritePointer+0x94>)
 800561c:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
 8005620:	4e18      	ldr	r6, [pc, #96]	; (8005684 <prvPagedEventBufferGetWritePointer+0x98>)
 8005622:	8851      	ldrh	r1, [r2, #2]
 8005624:	1b4a      	subs	r2, r1, r5
 8005626:	2a00      	cmp	r2, #0
 8005628:	da10      	bge.n	800564c <prvPagedEventBufferGetWritePointer+0x60>
 800562a:	683b      	ldr	r3, [r7, #0]
		PageInfo[currentWritePage].Status = PAGE_STATUS_READ;
 800562c:	f04f 0c02 	mov.w	ip, #2
 8005630:	6832      	ldr	r2, [r6, #0]
		TotalBytesRemaining -= PageInfo[currentWritePage].BytesRemaining; // Last trailing bytes
 8005632:	1a5b      	subs	r3, r3, r1
		PageInfo[currentWritePage].Status = PAGE_STATUS_READ;
 8005634:	f824 c030 	strh.w	ip, [r4, r0, lsl #3]
		if (TotalBytesRemaining < TotalBytesRemaining_LowWaterMark)
 8005638:	4293      	cmp	r3, r2
		TotalBytesRemaining -= PageInfo[currentWritePage].BytesRemaining; // Last trailing bytes
 800563a:	603b      	str	r3, [r7, #0]
		  TotalBytesRemaining_LowWaterMark = TotalBytesRemaining;
 800563c:	bf38      	it	cc
 800563e:	6033      	strcc	r3, [r6, #0]
		currentWritePage = prvAllocateBufferPage(currentWritePage);
 8005640:	f7ff fed6 	bl	80053f0 <prvAllocateBufferPage>
 8005644:	f8c8 0000 	str.w	r0, [r8]
		if (currentWritePage == -1)
 8005648:	3001      	adds	r0, #1
 800564a:	d0dc      	beq.n	8005606 <prvPagedEventBufferGetWritePointer+0x1a>
	ret = PageInfo[currentWritePage].WritePointer;
 800564c:	f8d8 3000 	ldr.w	r3, [r8]
 8005650:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005654:	6858      	ldr	r0, [r3, #4]
	PageInfo[currentWritePage].WritePointer += sizeOfEvent;
 8005656:	1942      	adds	r2, r0, r5
 8005658:	605a      	str	r2, [r3, #4]
	PageInfo[currentWritePage].BytesRemaining = (uint16_t)(PageInfo[currentWritePage].BytesRemaining -sizeOfEvent);
 800565a:	885a      	ldrh	r2, [r3, #2]
 800565c:	1b52      	subs	r2, r2, r5
	TotalBytesRemaining = (TotalBytesRemaining-(uint16_t)sizeOfEvent);
 800565e:	b2ad      	uxth	r5, r5
	PageInfo[currentWritePage].BytesRemaining = (uint16_t)(PageInfo[currentWritePage].BytesRemaining -sizeOfEvent);
 8005660:	805a      	strh	r2, [r3, #2]
	TotalBytesRemaining = (TotalBytesRemaining-(uint16_t)sizeOfEvent);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	1b5d      	subs	r5, r3, r5
	if (TotalBytesRemaining < TotalBytesRemaining_LowWaterMark)
 8005666:	6833      	ldr	r3, [r6, #0]
 8005668:	429d      	cmp	r5, r3
	TotalBytesRemaining = (TotalBytesRemaining-(uint16_t)sizeOfEvent);
 800566a:	603d      	str	r5, [r7, #0]
		TotalBytesRemaining_LowWaterMark = TotalBytesRemaining;
 800566c:	bf38      	it	cc
 800566e:	6035      	strcc	r5, [r6, #0]
 8005670:	e7ce      	b.n	8005610 <prvPagedEventBufferGetWritePointer+0x24>
 8005672:	bf00      	nop
 8005674:	2400001c 	.word	0x2400001c
 8005678:	24000c30 	.word	0x24000c30
 800567c:	24024464 	.word	0x24024464
 8005680:	24000014 	.word	0x24000014
 8005684:	24000018 	.word	0x24000018

08005688 <prvTraceStoreStringEventHelper>:
{
 8005688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568c:	468b      	mov	fp, r1
	nStrWords = (len+1+3)/4;
 800568e:	1d1c      	adds	r4, r3, #4
 8005690:	2104      	movs	r1, #4
{
 8005692:	4680      	mov	r8, r0
 8005694:	4691      	mov	r9, r2
 8005696:	461d      	mov	r5, r3
 8005698:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
	offset = nArgs * 4;
 800569c:	0086      	lsls	r6, r0, #2
	nStrWords = (len+1+3)/4;
 800569e:	fb94 f4f1 	sdiv	r4, r4, r1
	nWords = nStrWords + nArgs;
 80056a2:	4404      	add	r4, r0
	if (nWords > 15) /* if attempting to store more than 60 byte (= max) */
 80056a4:	2c0f      	cmp	r4, #15
 80056a6:	dd09      	ble.n	80056bc <prvTraceStoreStringEventHelper+0x34>
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 80056a8:	3c0f      	subs	r4, #15
		if (bytesTruncated > MaxBytesTruncated)
 80056aa:	4b27      	ldr	r3, [pc, #156]	; (8005748 <prvTraceStoreStringEventHelper+0xc0>)
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 80056ac:	00a4      	lsls	r4, r4, #2
		if (bytesTruncated > MaxBytesTruncated)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	42a2      	cmp	r2, r4
 80056b2:	d200      	bcs.n	80056b6 <prvTraceStoreStringEventHelper+0x2e>
			MaxBytesTruncated = bytesTruncated;
 80056b4:	601c      	str	r4, [r3, #0]
		len = 15 * 4 - offset;
 80056b6:	f1c6 053c 	rsb	r5, r6, #60	; 0x3c
		nWords = 15;
 80056ba:	240f      	movs	r4, #15
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056bc:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c0:	2301      	movs	r3, #1
 80056c2:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 80056c6:	4b21      	ldr	r3, [pc, #132]	; (800574c <prvTraceStoreStringEventHelper+0xc4>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	b31b      	cbz	r3, 8005714 <prvTraceStoreStringEventHelper+0x8c>
		eventCounter++;
 80056cc:	4a20      	ldr	r2, [pc, #128]	; (8005750 <prvTraceStoreStringEventHelper+0xc8>)
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 80056ce:	1ca0      	adds	r0, r4, #2
		eventCounter++;
 80056d0:	6813      	ldr	r3, [r2, #0]
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
 80056d2:	0080      	lsls	r0, r0, #2
		eventCounter++;
 80056d4:	3301      	adds	r3, #1
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	9301      	str	r3, [sp, #4]
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
 80056da:	f7ff ff87 	bl	80055ec <prvPagedEventBufferGetWritePointer>
			if (event != NULL)
 80056de:	b1c8      	cbz	r0, 8005714 <prvTraceStoreStringEventHelper+0x8c>
				event->base.EventCount = (uint16_t)eventCounter;
 80056e0:	9b01      	ldr	r3, [sp, #4]
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 80056e2:	ea4b 3404 	orr.w	r4, fp, r4, lsl #12
				data32 = (uint32_t*) &(event->data[0]);
 80056e6:	f100 0108 	add.w	r1, r0, #8
				event->base.EventCount = (uint16_t)eventCounter;
 80056ea:	8043      	strh	r3, [r0, #2]
	return TRC_HWTC_COUNT;
 80056ec:	4b19      	ldr	r3, [pc, #100]	; (8005754 <prvTraceStoreStringEventHelper+0xcc>)
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 80056ee:	8004      	strh	r4, [r0, #0]
	return TRC_HWTC_COUNT;
 80056f0:	681b      	ldr	r3, [r3, #0]
				event->base.TS = prvGetTimestamp32();
 80056f2:	6043      	str	r3, [r0, #4]
				for (i = 0; i < nArgs; i++)
 80056f4:	2300      	movs	r3, #0
 80056f6:	4543      	cmp	r3, r8
 80056f8:	db11      	blt.n	800571e <prvTraceStoreStringEventHelper+0x96>
 80056fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056fc:	198a      	adds	r2, r1, r6
 80056fe:	3b01      	subs	r3, #1
 8005700:	4611      	mov	r1, r2
				for (i = 0; i < len; i++)
 8005702:	1a50      	subs	r0, r2, r1
 8005704:	4285      	cmp	r5, r0
 8005706:	dc19      	bgt.n	800573c <prvTraceStoreStringEventHelper+0xb4>
				if (len < (15 * 4 - offset))
 8005708:	f1c6 063c 	rsb	r6, r6, #60	; 0x3c
 800570c:	42ae      	cmp	r6, r5
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 800570e:	bfc4      	itt	gt
 8005710:	2300      	movgt	r3, #0
 8005712:	554b      	strbgt	r3, [r1, r5]
 8005714:	f387 8810 	msr	PRIMASK, r7
}
 8005718:	b003      	add	sp, #12
 800571a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if ((userEvtChannel != NULL) && (i == 0))
 800571e:	f1b9 0f00 	cmp.w	r9, #0
 8005722:	d004      	beq.n	800572e <prvTraceStoreStringEventHelper+0xa6>
 8005724:	b91b      	cbnz	r3, 800572e <prvTraceStoreStringEventHelper+0xa6>
						data32[i] = (uint32_t)userEvtChannel;
 8005726:	f8c0 9008 	str.w	r9, [r0, #8]
				for (i = 0; i < nArgs; i++)
 800572a:	3301      	adds	r3, #1
 800572c:	e7e3      	b.n	80056f6 <prvTraceStoreStringEventHelper+0x6e>
						data32[i] = va_arg(vl, uint32_t);
 800572e:	f8da 4000 	ldr.w	r4, [sl]
 8005732:	f10a 0a04 	add.w	sl, sl, #4
 8005736:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 800573a:	e7f6      	b.n	800572a <prvTraceStoreStringEventHelper+0xa2>
					data8[offset + i] = str[i];
 800573c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8005740:	f802 0b01 	strb.w	r0, [r2], #1
 8005744:	e7dd      	b.n	8005702 <prvTraceStoreStringEventHelper+0x7a>
 8005746:	bf00      	nop
 8005748:	24000c40 	.word	0x24000c40
 800574c:	24000c4c 	.word	0x24000c4c
 8005750:	24000c58 	.word	0x24000c58
 8005754:	e0001004 	.word	0xe0001004

08005758 <prvTraceStoreStringEvent>:
{
 8005758:	b40c      	push	{r2, r3}
 800575a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800575c:	9a06      	ldr	r2, [sp, #24]
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 800575e:	2300      	movs	r3, #0
 8005760:	5cd4      	ldrb	r4, [r2, r3]
 8005762:	b10c      	cbz	r4, 8005768 <prvTraceStoreStringEvent+0x10>
 8005764:	2b34      	cmp	r3, #52	; 0x34
 8005766:	d10b      	bne.n	8005780 <prvTraceStoreStringEvent+0x28>
	va_start(vl, str);
 8005768:	ac07      	add	r4, sp, #28
	prvTraceStoreStringEventHelper(nArgs, eventID, NULL, len, str, vl);
 800576a:	e9cd 2400 	strd	r2, r4, [sp]
 800576e:	2200      	movs	r2, #0
	va_start(vl, str);
 8005770:	9403      	str	r4, [sp, #12]
	prvTraceStoreStringEventHelper(nArgs, eventID, NULL, len, str, vl);
 8005772:	f7ff ff89 	bl	8005688 <prvTraceStoreStringEventHelper>
}
 8005776:	b004      	add	sp, #16
 8005778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800577c:	b002      	add	sp, #8
 800577e:	4770      	bx	lr
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 8005780:	3301      	adds	r3, #1
 8005782:	e7ed      	b.n	8005760 <prvTraceStoreStringEvent+0x8>

08005784 <xTraceRegisterString>:
{
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	4605      	mov	r5, r0
	str = prvTraceSaveSymbol(name);
 8005788:	f7ff fe8a 	bl	80054a0 <prvTraceSaveSymbol>
 800578c:	4604      	mov	r4, r0
	prvTraceStoreStringEvent(1, eventID, (const char*)name, str);
 800578e:	4603      	mov	r3, r0
 8005790:	462a      	mov	r2, r5
 8005792:	2103      	movs	r1, #3
 8005794:	2001      	movs	r0, #1
 8005796:	f7ff ffdf 	bl	8005758 <prvTraceStoreStringEvent>
}
 800579a:	4620      	mov	r0, r4
 800579c:	bd38      	pop	{r3, r4, r5, pc}
	...

080057a0 <prvTraceStoreSimpleStringEventHelper>:
{
 80057a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a4:	4605      	mov	r5, r0
 80057a6:	4689      	mov	r9, r1
 80057a8:	4617      	mov	r7, r2
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 80057aa:	2400      	movs	r4, #0
 80057ac:	5d3b      	ldrb	r3, [r7, r4]
 80057ae:	b10b      	cbz	r3, 80057b4 <prvTraceStoreSimpleStringEventHelper+0x14>
 80057b0:	2c34      	cmp	r4, #52	; 0x34
 80057b2:	d139      	bne.n	8005828 <prvTraceStoreSimpleStringEventHelper+0x88>
	if (userEvtChannel)
 80057b4:	f1b9 0f00 	cmp.w	r9, #0
 80057b8:	d038      	beq.n	800582c <prvTraceStoreSimpleStringEventHelper+0x8c>
		eventID++;
 80057ba:	3501      	adds	r5, #1
		nArgs++;
 80057bc:	2601      	movs	r6, #1
		eventID++;
 80057be:	b2ad      	uxth	r5, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057c0:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c4:	2301      	movs	r3, #1
 80057c6:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 80057ca:	4b1c      	ldr	r3, [pc, #112]	; (800583c <prvTraceStoreSimpleStringEventHelper+0x9c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	b33b      	cbz	r3, 8005820 <prvTraceStoreSimpleStringEventHelper+0x80>
	nStrWords = (len+1+3)/4;
 80057d0:	f104 0a04 	add.w	sl, r4, #4
		eventCounter++;
 80057d4:	4a1a      	ldr	r2, [pc, #104]	; (8005840 <prvTraceStoreSimpleStringEventHelper+0xa0>)
	nWords = nStrWords + nArgs;
 80057d6:	eb06 0aaa 	add.w	sl, r6, sl, asr #2
		eventCounter++;
 80057da:	6813      	ldr	r3, [r2, #0]
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 80057dc:	f10a 0002 	add.w	r0, sl, #2
		eventCounter++;
 80057e0:	f103 0b01 	add.w	fp, r3, #1
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
 80057e4:	0080      	lsls	r0, r0, #2
		eventCounter++;
 80057e6:	f8c2 b000 	str.w	fp, [r2]
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
 80057ea:	f7ff feff 	bl	80055ec <prvPagedEventBufferGetWritePointer>
			if (event != NULL)
 80057ee:	b1b8      	cbz	r0, 8005820 <prvTraceStoreSimpleStringEventHelper+0x80>
	return TRC_HWTC_COUNT;
 80057f0:	4b14      	ldr	r3, [pc, #80]	; (8005844 <prvTraceStoreSimpleStringEventHelper+0xa4>)
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 80057f2:	ea45 350a 	orr.w	r5, r5, sl, lsl #12
				event->base.EventCount = (uint16_t)eventCounter;
 80057f6:	f8a0 b002 	strh.w	fp, [r0, #2]
	return TRC_HWTC_COUNT;
 80057fa:	681b      	ldr	r3, [r3, #0]
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 80057fc:	8005      	strh	r5, [r0, #0]
				event->base.TS = prvGetTimestamp32();
 80057fe:	6043      	str	r3, [r0, #4]
				if (userEvtChannel != NULL)
 8005800:	f1b9 0f00 	cmp.w	r9, #0
 8005804:	d001      	beq.n	800580a <prvTraceStoreSimpleStringEventHelper+0x6a>
					data32[0] = (uint32_t)userEvtChannel;
 8005806:	f8c0 9008 	str.w	r9, [r0, #8]
	offset = nArgs * 4;
 800580a:	00b6      	lsls	r6, r6, #2
				data8 = (uint8_t*) &(event->data[0]);
 800580c:	3008      	adds	r0, #8
 800580e:	1e7a      	subs	r2, r7, #1
 8005810:	1983      	adds	r3, r0, r6
 8005812:	461d      	mov	r5, r3
				for (i = 0; i < len; i++)
 8005814:	1b59      	subs	r1, r3, r5
 8005816:	428c      	cmp	r4, r1
 8005818:	dc0a      	bgt.n	8005830 <prvTraceStoreSimpleStringEventHelper+0x90>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 800581a:	4420      	add	r0, r4
 800581c:	2300      	movs	r3, #0
 800581e:	5583      	strb	r3, [r0, r6]
 8005820:	f388 8810 	msr	PRIMASK, r8
}
 8005824:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 8005828:	3401      	adds	r4, #1
 800582a:	e7bf      	b.n	80057ac <prvTraceStoreSimpleStringEventHelper+0xc>
	int nArgs = 0;
 800582c:	464e      	mov	r6, r9
 800582e:	e7c7      	b.n	80057c0 <prvTraceStoreSimpleStringEventHelper+0x20>
					data8[offset + i] = str[i];
 8005830:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005834:	f803 1b01 	strb.w	r1, [r3], #1
 8005838:	e7ec      	b.n	8005814 <prvTraceStoreSimpleStringEventHelper+0x74>
 800583a:	bf00      	nop
 800583c:	24000c4c 	.word	0x24000c4c
 8005840:	24000c58 	.word	0x24000c58
 8005844:	e0001004 	.word	0xe0001004

08005848 <prvTraceWarning>:
{
 8005848:	b410      	push	{r4}
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 800584a:	3801      	subs	r0, #1
 800584c:	2301      	movs	r3, #1
 800584e:	4c0b      	ldr	r4, [pc, #44]	; (800587c <prvTraceWarning+0x34>)
 8005850:	4083      	lsls	r3, r0
 8005852:	6821      	ldr	r1, [r4, #0]
 8005854:	ea13 0201 	ands.w	r2, r3, r1
 8005858:	d10d      	bne.n	8005876 <prvTraceWarning+0x2e>
		SET_ERROR_WARNING_FLAG(errCode);
 800585a:	430b      	orrs	r3, r1
 800585c:	280d      	cmp	r0, #13
 800585e:	6023      	str	r3, [r4, #0]
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8005860:	4b07      	ldr	r3, [pc, #28]	; (8005880 <prvTraceWarning+0x38>)
}
 8005862:	f85d 4b04 	ldr.w	r4, [sp], #4
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 8005866:	6819      	ldr	r1, [r3, #0]
 8005868:	bf9c      	itt	ls
 800586a:	4b06      	ldrls	r3, [pc, #24]	; (8005884 <prvTraceWarning+0x3c>)
 800586c:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
 8005870:	2090      	movs	r0, #144	; 0x90
 8005872:	f7ff bf95 	b.w	80057a0 <prvTraceStoreSimpleStringEventHelper>
}
 8005876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	24000c34 	.word	0x24000c34
 8005880:	24024460 	.word	0x24024460
 8005884:	08015ba8 	.word	0x08015ba8

08005888 <prvPagedEventBufferInit>:
void prvPagedEventBufferInit(char* buffer)
{
  	int i;
  	TRACE_ALLOC_CRITICAL_SECTION();
    
    EventBuffer = buffer;
 8005888:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <prvPagedEventBufferInit+0x38>)
{
 800588a:	b530      	push	{r4, r5, lr}
    EventBuffer = buffer;
 800588c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800588e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005892:	2201      	movs	r2, #1
 8005894:	f382 8810 	msr	PRIMASK, r2
 8005898:	681b      	ldr	r3, [r3, #0]
    
	TRACE_ENTER_CRITICAL_SECTION();
	for (i = 0; i < (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT); i++)
	{
		PageInfo[i].BytesRemaining = (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE);
 800589a:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800589e:	4a09      	ldr	r2, [pc, #36]	; (80058c4 <prvPagedEventBufferInit+0x3c>)
		PageInfo[i].WritePointer = &EventBuffer[i * (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE)];
		PageInfo[i].Status = PAGE_STATUS_FREE;
 80058a0:	2400      	movs	r4, #0
 80058a2:	f503 511c 	add.w	r1, r3, #9984	; 0x2700
 80058a6:	3110      	adds	r1, #16
		PageInfo[i].WritePointer = &EventBuffer[i * (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE)];
 80058a8:	6053      	str	r3, [r2, #4]
 80058aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		PageInfo[i].BytesRemaining = (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE);
 80058ae:	8055      	strh	r5, [r2, #2]
	for (i = 0; i < (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT); i++)
 80058b0:	428b      	cmp	r3, r1
		PageInfo[i].Status = PAGE_STATUS_FREE;
 80058b2:	f822 4b08 	strh.w	r4, [r2], #8
	for (i = 0; i < (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT); i++)
 80058b6:	d1f7      	bne.n	80058a8 <prvPagedEventBufferInit+0x20>
 80058b8:	f380 8810 	msr	PRIMASK, r0
	}
	TRACE_EXIT_CRITICAL_SECTION();

}
 80058bc:	bd30      	pop	{r4, r5, pc}
 80058be:	bf00      	nop
 80058c0:	24000c38 	.word	0x24000c38
 80058c4:	24024464 	.word	0x24024464

080058c8 <prvSetRecorderEnabled>:
{
 80058c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (RecorderEnabled == isEnabled)
 80058cc:	4e61      	ldr	r6, [pc, #388]	; (8005a54 <prvSetRecorderEnabled+0x18c>)
{
 80058ce:	4607      	mov	r7, r0
	if (RecorderEnabled == isEnabled)
 80058d0:	6833      	ldr	r3, [r6, #0]
 80058d2:	4283      	cmp	r3, r0
 80058d4:	f000 80b9 	beq.w	8005a4a <prvSetRecorderEnabled+0x182>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058d8:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058dc:	2501      	movs	r5, #1
 80058de:	f385 8810 	msr	PRIMASK, r5
	if (isEnabled)
 80058e2:	2800      	cmp	r0, #0
 80058e4:	f000 80ae 	beq.w	8005a44 <prvSetRecorderEnabled+0x17c>
		prvPagedEventBufferInit(_TzTraceData);
 80058e8:	485b      	ldr	r0, [pc, #364]	; (8005a58 <prvSetRecorderEnabled+0x190>)
 80058ea:	f7ff ffcd 	bl	8005888 <prvPagedEventBufferInit>
     	eventCounter = 0;
 80058ee:	4c5b      	ldr	r4, [pc, #364]	; (8005a5c <prvSetRecorderEnabled+0x194>)
 80058f0:	2300      	movs	r3, #0
        ISR_stack_index = -1;
 80058f2:	22ff      	movs	r2, #255	; 0xff
     	eventCounter = 0;
 80058f4:	6023      	str	r3, [r4, #0]
        ISR_stack_index = -1;
 80058f6:	4b5a      	ldr	r3, [pc, #360]	; (8005a60 <prvSetRecorderEnabled+0x198>)
 80058f8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058fa:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fe:	f385 8810 	msr	PRIMASK, r5
	  	TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(PSFHeaderInfo, header, sizeof(PSFHeaderInfo));
 8005902:	2018      	movs	r0, #24
 8005904:	f7ff fe72 	bl	80055ec <prvPagedEventBufferGetWritePointer>
 8005908:	2800      	cmp	r0, #0
 800590a:	d0fa      	beq.n	8005902 <prvSetRecorderEnabled+0x3a>
		header->psf = PSFEndianessIdentifier;
 800590c:	4955      	ldr	r1, [pc, #340]	; (8005a64 <prvSetRecorderEnabled+0x19c>)
		header->platform = TRACE_KERNEL_VERSION;
 800590e:	2500      	movs	r5, #0
		header->psf = PSFEndianessIdentifier;
 8005910:	4b55      	ldr	r3, [pc, #340]	; (8005a68 <prvSetRecorderEnabled+0x1a0>)
		header->symbolCount = (TRC_CFG_SYMBOL_TABLE_SLOTS);
 8005912:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8005a90 <prvSetRecorderEnabled+0x1c8>
		header->platform = TRACE_KERNEL_VERSION;
 8005916:	6085      	str	r5, [r0, #8]
		header->psf = PSFEndianessIdentifier;
 8005918:	e9c0 1300 	strd	r1, r3, [r0]
		header->heapCounter = trcHeapCounter;
 800591c:	4b53      	ldr	r3, [pc, #332]	; (8005a6c <prvSetRecorderEnabled+0x1a4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60c3      	str	r3, [r0, #12]
		header->symbolCount = (TRC_CFG_SYMBOL_TABLE_SLOTS);
 8005922:	4b53      	ldr	r3, [pc, #332]	; (8005a70 <prvSetRecorderEnabled+0x1a8>)
 8005924:	e9c0 c304 	strd	ip, r3, [r0, #16]
 8005928:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800592c:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005930:	2301      	movs	r3, #1
 8005932:	f383 8810 	msr	PRIMASK, r3
            	data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 8005936:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005a94 <prvSetRecorderEnabled+0x1cc>
			TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(uint32_t, data, SYMBOL_TABLE_SLOT_SIZE);            
 800593a:	2024      	movs	r0, #36	; 0x24
 800593c:	f7ff fe56 	bl	80055ec <prvPagedEventBufferGetWritePointer>
 8005940:	2800      	cmp	r0, #0
 8005942:	d0fa      	beq.n	800593a <prvSetRecorderEnabled+0x72>
            for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
 8005944:	2300      	movs	r3, #0
            	data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 8005946:	18ea      	adds	r2, r5, r3
 8005948:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800594c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
 8005950:	3301      	adds	r3, #1
 8005952:	2b09      	cmp	r3, #9
 8005954:	d1f7      	bne.n	8005946 <prvSetRecorderEnabled+0x7e>
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
 8005956:	3509      	adds	r5, #9
 8005958:	f5b5 7f07 	cmp.w	r5, #540	; 0x21c
 800595c:	d1ed      	bne.n	800593a <prvSetRecorderEnabled+0x72>
 800595e:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005962:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005966:	2301      	movs	r3, #1
 8005968:	f383 8810 	msr	PRIMASK, r3
 800596c:	2500      	movs	r5, #0
            	data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 800596e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005a98 <prvSetRecorderEnabled+0x1d0>
            TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(uint32_t, data, OBJECT_DATA_SLOT_SIZE);
 8005972:	2008      	movs	r0, #8
 8005974:	f7ff fe3a 	bl	80055ec <prvPagedEventBufferGetWritePointer>
 8005978:	2800      	cmp	r0, #0
 800597a:	d0fa      	beq.n	8005972 <prvSetRecorderEnabled+0xaa>
            	data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 800597c:	f855 3009 	ldr.w	r3, [r5, r9]
 8005980:	6003      	str	r3, [r0, #0]
 8005982:	eb09 0305 	add.w	r3, r9, r5
 8005986:	3508      	adds	r5, #8
 8005988:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 800598a:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
            	data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 800598e:	6043      	str	r3, [r0, #4]
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 8005990:	d1ef      	bne.n	8005972 <prvSetRecorderEnabled+0xaa>
 8005992:	f38a 8810 	msr	PRIMASK, sl
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005996:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599a:	2301      	movs	r3, #1
 800599c:	f383 8810 	msr	PRIMASK, r3
		TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(PSFExtensionInfoType, extinfo, sizeof(PSFExtensionInfoType));
 80059a0:	2004      	movs	r0, #4
 80059a2:	f7ff fe23 	bl	80055ec <prvPagedEventBufferGetWritePointer>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d0fa      	beq.n	80059a0 <prvSetRecorderEnabled+0xd8>
		memcpy(extinfo, &PSFExtensionInfo, sizeof(PSFExtensionInfoType));
 80059aa:	4b32      	ldr	r3, [pc, #200]	; (8005a74 <prvSetRecorderEnabled+0x1ac>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6003      	str	r3, [r0, #0]
 80059b0:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b4:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b8:	2301      	movs	r3, #1
 80059ba:	f383 8810 	msr	PRIMASK, r3
	if (uiTraceSystemState == TRC_STATE_IN_STARTUP)
 80059be:	4b2e      	ldr	r3, [pc, #184]	; (8005a78 <prvSetRecorderEnabled+0x1b0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d043      	beq.n	8005a4e <prvSetRecorderEnabled+0x186>
		currentTask = TRACE_GET_CURRENT_TASK();
 80059c6:	f7ff fd07 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 80059ca:	4682      	mov	sl, r0
	eventCounter++;
 80059cc:	6825      	ldr	r5, [r4, #0]
 80059ce:	3501      	adds	r5, #1
 80059d0:	6025      	str	r5, [r4, #0]
		TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(EventWithParam_3, pxEvent, sizeof(EventWithParam_3));
 80059d2:	2014      	movs	r0, #20
 80059d4:	f7ff fe0a 	bl	80055ec <prvPagedEventBufferGetWritePointer>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d0fa      	beq.n	80059d2 <prvSetRecorderEnabled+0x10a>
			pxEvent->base.EventID = PSF_EVENT_TRACE_START | PARAM_COUNT(3);
 80059dc:	f243 0301 	movw	r3, #12289	; 0x3001
			pxEvent->param3 = SessionCounter++;
 80059e0:	4926      	ldr	r1, [pc, #152]	; (8005a7c <prvSetRecorderEnabled+0x1b4>)
			pxEvent->base.EventCount = (uint16_t)eventCounter;
 80059e2:	8045      	strh	r5, [r0, #2]
			pxEvent->base.EventID = PSF_EVENT_TRACE_START | PARAM_COUNT(3);
 80059e4:	8003      	strh	r3, [r0, #0]
	return TRC_HWTC_COUNT;
 80059e6:	4b26      	ldr	r3, [pc, #152]	; (8005a80 <prvSetRecorderEnabled+0x1b8>)
 80059e8:	681a      	ldr	r2, [r3, #0]
			pxEvent->base.TS = prvGetTimestamp32();
 80059ea:	6042      	str	r2, [r0, #4]
			pxEvent->param1 = (uint32_t)TRACE_GET_OS_TICKS();
 80059ec:	4a25      	ldr	r2, [pc, #148]	; (8005a84 <prvSetRecorderEnabled+0x1bc>)
 80059ee:	6812      	ldr	r2, [r2, #0]
			pxEvent->param2 = (uint32_t)currentTask;
 80059f0:	e9c0 2a02 	strd	r2, sl, [r0, #8]
			pxEvent->param3 = SessionCounter++;
 80059f4:	680a      	ldr	r2, [r1, #0]
 80059f6:	1c55      	adds	r5, r2, #1
 80059f8:	6102      	str	r2, [r0, #16]
 80059fa:	600d      	str	r5, [r1, #0]
 80059fc:	f389 8810 	msr	PRIMASK, r9
	if (timestampFrequency == 0)
 8005a00:	4d21      	ldr	r5, [pc, #132]	; (8005a88 <prvSetRecorderEnabled+0x1c0>)
 8005a02:	469a      	mov	sl, r3
 8005a04:	682a      	ldr	r2, [r5, #0]
 8005a06:	b912      	cbnz	r2, 8005a0e <prvSetRecorderEnabled+0x146>
		timestampFrequency = TRC_HWTC_FREQ_HZ;
 8005a08:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <prvSetRecorderEnabled+0x1c4>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	602b      	str	r3, [r5, #0]
	eventCounter++;
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	f103 0901 	add.w	r9, r3, #1
 8005a14:	f8c4 9000 	str.w	r9, [r4]
		TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(EventWithParam_4, event, sizeof(EventWithParam_4));
 8005a18:	2018      	movs	r0, #24
 8005a1a:	f7ff fde7 	bl	80055ec <prvPagedEventBufferGetWritePointer>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d0fa      	beq.n	8005a18 <prvSetRecorderEnabled+0x150>
			event->base.EventID = PSF_EVENT_TS_CONFIG | (uint16_t)PARAM_COUNT(4);
 8005a22:	f244 0302 	movw	r3, #16386	; 0x4002
			event->param3 = (uint32_t)(TRC_HWTC_TYPE);
 8005a26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
			event->base.EventCount = (uint16_t)eventCounter;
 8005a2a:	f8a0 9002 	strh.w	r9, [r0, #2]
			event->base.EventID = PSF_EVENT_TS_CONFIG | (uint16_t)PARAM_COUNT(4);
 8005a2e:	8003      	strh	r3, [r0, #0]
	return TRC_HWTC_COUNT;
 8005a30:	f8da 3000 	ldr.w	r3, [sl]
			event->base.TS = prvGetTimestamp32();
 8005a34:	6043      	str	r3, [r0, #4]
			event->param1 = (uint32_t)timestampFrequency;
 8005a36:	682b      	ldr	r3, [r5, #0]
 8005a38:	6083      	str	r3, [r0, #8]
			event->param3 = (uint32_t)(TRC_HWTC_TYPE);
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e9c0 2303 	strd	r2, r3, [r0, #12]
			event->param4 = (uint32_t)(TRC_CFG_ISR_TAILCHAINING_THRESHOLD);
 8005a40:	2300      	movs	r3, #0
 8005a42:	6143      	str	r3, [r0, #20]
	RecorderEnabled = isEnabled;		
 8005a44:	6037      	str	r7, [r6, #0]
 8005a46:	f388 8810 	msr	PRIMASK, r8
}
 8005a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		currentTask = (void*)HANDLE_NO_TASK;
 8005a4e:	f04f 0a02 	mov.w	sl, #2
 8005a52:	e7bb      	b.n	80059cc <prvSetRecorderEnabled+0x104>
 8005a54:	24000c4c 	.word	0x24000c4c
 8005a58:	24021d50 	.word	0x24021d50
 8005a5c:	24000c58 	.word	0x24000c58
 8005a60:	2400000c 	.word	0x2400000c
 8005a64:	50534600 	.word	0x50534600
 8005a68:	1aa10006 	.word	0x1aa10006
 8005a6c:	24001668 	.word	0x24001668
 8005a70:	00320008 	.word	0x00320008
 8005a74:	2400000e 	.word	0x2400000e
 8005a78:	2400166c 	.word	0x2400166c
 8005a7c:	24000c50 	.word	0x24000c50
 8005a80:	e0001004 	.word	0xe0001004
 8005a84:	24001670 	.word	0x24001670
 8005a88:	24001664 	.word	0x24001664
 8005a8c:	24000000 	.word	0x24000000
 8005a90:	003c0024 	.word	0x003c0024
 8005a94:	24000df4 	.word	0x24000df4
 8005a98:	24000c64 	.word	0x24000c64

08005a9c <vTraceStop>:
	prvSetRecorderEnabled(0);
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	f7ff bf13 	b.w	80058c8 <prvSetRecorderEnabled>
	...

08005aa4 <prvPagedEventBufferTransfer>:
{
 8005aa4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  	int8_t index = (int8_t) ((lastPage + 1) % (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT));
 8005aa8:	4c2d      	ldr	r4, [pc, #180]	; (8005b60 <prvPagedEventBufferTransfer+0xbc>)
	int32_t bytesTransferredNow = 0;
 8005aaa:	2300      	movs	r3, #0
  	int8_t index = (int8_t) ((lastPage + 1) % (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT));
 8005aac:	2015      	movs	r0, #21
 8005aae:	f994 2000 	ldrsb.w	r2, [r4]
	int32_t bytesTransferredNow = 0;
 8005ab2:	9301      	str	r3, [sp, #4]
  	int8_t index = (int8_t) ((lastPage + 1) % (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT));
 8005ab4:	2314      	movs	r3, #20
 8005ab6:	3201      	adds	r2, #1
 8005ab8:	fb92 f5f3 	sdiv	r5, r2, r3
 8005abc:	fb03 2515 	mls	r5, r3, r5, r2
	while((PageInfo[index].Status != PAGE_STATUS_READ) && (count++ < (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT)))
 8005ac0:	4a28      	ldr	r2, [pc, #160]	; (8005b64 <prvPagedEventBufferTransfer+0xc0>)
  	int8_t index = (int8_t) ((lastPage + 1) % (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT));
 8005ac2:	b26d      	sxtb	r5, r5
 8005ac4:	4617      	mov	r7, r2
	while((PageInfo[index].Status != PAGE_STATUS_READ) && (count++ < (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT)))
 8005ac6:	f832 1035 	ldrh.w	r1, [r2, r5, lsl #3]
 8005aca:	2902      	cmp	r1, #2
 8005acc:	d00f      	beq.n	8005aee <prvPagedEventBufferTransfer+0x4a>
 8005ace:	3801      	subs	r0, #1
 8005ad0:	d102      	bne.n	8005ad8 <prvPagedEventBufferTransfer+0x34>
}
 8005ad2:	b002      	add	sp, #8
 8005ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index = (int8_t)((index + 1) % (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT));
 8005ad8:	1c69      	adds	r1, r5, #1
 8005ada:	fb91 f5f3 	sdiv	r5, r1, r3
 8005ade:	fb03 1515 	mls	r5, r3, r5, r1
 8005ae2:	b26d      	sxtb	r5, r5
 8005ae4:	e7ef      	b.n	8005ac6 <prvPagedEventBufferTransfer+0x22>
				vTraceStop();
 8005ae6:	f7ff ffd9 	bl	8005a9c <vTraceStop>
	return 0;
 8005aea:	2000      	movs	r0, #0
 8005aec:	e7f1      	b.n	8005ad2 <prvPagedEventBufferTransfer+0x2e>
		*bytesUsed = (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE) - PageInfo[index].BytesRemaining;
 8005aee:	00ee      	lsls	r6, r5, #3
    if (pageToTransfer > -1)
 8005af0:	2d00      	cmp	r5, #0
		lastPage = index;
 8005af2:	7025      	strb	r5, [r4, #0]
		*bytesUsed = (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE) - PageInfo[index].BytesRemaining;
 8005af4:	4432      	add	r2, r6
 8005af6:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 8005afa:	f5c8 78fa 	rsb	r8, r8, #500	; 0x1f4
    if (pageToTransfer > -1)
 8005afe:	dbf4      	blt.n	8005aea <prvPagedEventBufferTransfer+0x46>
			if (TRC_STREAM_PORT_WRITE_DATA(
 8005b00:	f44f 79fa 	mov.w	r9, #500	; 0x1f4
    int32_t bytesTransferredTotal = 0;
 8005b04:	2400      	movs	r4, #0
			if (TRC_STREAM_PORT_WRITE_DATA(
 8005b06:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005b6c <prvPagedEventBufferTransfer+0xc8>
 8005b0a:	fb09 f905 	mul.w	r9, r9, r5
 8005b0e:	eb09 0004 	add.w	r0, r9, r4
 8005b12:	f8da 3000 	ldr.w	r3, [sl]
 8005b16:	aa01      	add	r2, sp, #4
 8005b18:	eba8 0104 	sub.w	r1, r8, r4
 8005b1c:	4418      	add	r0, r3
 8005b1e:	f7ff fb1b 	bl	8005158 <trcCDCTransmit>
 8005b22:	2800      	cmp	r0, #0
 8005b24:	d1df      	bne.n	8005ae6 <prvPagedEventBufferTransfer+0x42>
				bytesTransferredTotal += bytesTransferredNow;
 8005b26:	9b01      	ldr	r3, [sp, #4]
 8005b28:	441c      	add	r4, r3
				if (bytesTransferredTotal == bytesToTransfer)
 8005b2a:	4544      	cmp	r4, r8
 8005b2c:	d1ef      	bne.n	8005b0e <prvPagedEventBufferTransfer+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b2e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b32:	2301      	movs	r3, #1
 8005b34:	f383 8810 	msr	PRIMASK, r3
	PageInfo[pageIndex].BytesRemaining = (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE);
 8005b38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005b3c:	443e      	add	r6, r7
	TotalBytesRemaining += (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE);
 8005b3e:	4a0a      	ldr	r2, [pc, #40]	; (8005b68 <prvPagedEventBufferTransfer+0xc4>)
	PageInfo[pageIndex].BytesRemaining = (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE);
 8005b40:	8073      	strh	r3, [r6, #2]
	PageInfo[pageIndex].WritePointer = &EventBuffer[pageIndex * (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE)];
 8005b42:	f8da 3000 	ldr.w	r3, [sl]
	PageInfo[pageIndex].Status = PAGE_STATUS_FREE;
 8005b46:	f827 0035 	strh.w	r0, [r7, r5, lsl #3]
	PageInfo[pageIndex].WritePointer = &EventBuffer[pageIndex * (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE)];
 8005b4a:	444b      	add	r3, r9
 8005b4c:	6073      	str	r3, [r6, #4]
	TotalBytesRemaining += (TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE);
 8005b4e:	6813      	ldr	r3, [r2, #0]
 8005b50:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	f381 8810 	msr	PRIMASK, r1
					return (uint32_t)bytesTransferredTotal;
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	e7b9      	b.n	8005ad2 <prvPagedEventBufferTransfer+0x2e>
 8005b5e:	bf00      	nop
 8005b60:	24000020 	.word	0x24000020
 8005b64:	24024464 	.word	0x24024464
 8005b68:	24000014 	.word	0x24000014
 8005b6c:	24000c38 	.word	0x24000c38

08005b70 <prvProcessCommand>:
  	switch(cmd->cmdCode)
 8005b70:	7803      	ldrb	r3, [r0, #0]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d102      	bne.n	8005b7c <prvProcessCommand+0xc>
		  	prvSetRecorderEnabled(cmd->param1);
 8005b76:	7840      	ldrb	r0, [r0, #1]
 8005b78:	f7ff bea6 	b.w	80058c8 <prvSetRecorderEnabled>
}
 8005b7c:	4770      	bx	lr
	...

08005b80 <prvTraceError>:
	if (errorCode == PSF_ERROR_NONE)
 8005b80:	4b11      	ldr	r3, [pc, #68]	; (8005bc8 <prvTraceError+0x48>)
 8005b82:	681a      	ldr	r2, [r3, #0]
{
 8005b84:	b510      	push	{r4, lr}
	if (errorCode == PSF_ERROR_NONE)
 8005b86:	b9f2      	cbnz	r2, 8005bc6 <prvTraceError+0x46>
		errorCode = errCode;
 8005b88:	6018      	str	r0, [r3, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 8005b8a:	3801      	subs	r0, #1
 8005b8c:	490f      	ldr	r1, [pc, #60]	; (8005bcc <prvTraceError+0x4c>)
 8005b8e:	2301      	movs	r3, #1
 8005b90:	280d      	cmp	r0, #13
 8005b92:	680c      	ldr	r4, [r1, #0]
 8005b94:	fa03 f300 	lsl.w	r3, r3, r0
 8005b98:	ea43 0304 	orr.w	r3, r3, r4
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8005b9c:	4c0c      	ldr	r4, [pc, #48]	; (8005bd0 <prvTraceError+0x50>)
		SET_ERROR_WARNING_FLAG(errorCode);
 8005b9e:	600b      	str	r3, [r1, #0]
 8005ba0:	bf98      	it	ls
 8005ba2:	4b0c      	ldrls	r3, [pc, #48]	; (8005bd4 <prvTraceError+0x54>)
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8005ba4:	6821      	ldr	r1, [r4, #0]
 8005ba6:	bf98      	it	ls
 8005ba8:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
 8005bac:	2090      	movs	r0, #144	; 0x90
 8005bae:	f7ff fdf7 	bl	80057a0 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 8005bb2:	6821      	ldr	r1, [r4, #0]
 8005bb4:	2090      	movs	r0, #144	; 0x90
 8005bb6:	4a08      	ldr	r2, [pc, #32]	; (8005bd8 <prvTraceError+0x58>)
 8005bb8:	f7ff fdf2 	bl	80057a0 <prvTraceStoreSimpleStringEventHelper>
		prvSetRecorderEnabled(0);
 8005bbc:	2000      	movs	r0, #0
}
 8005bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prvSetRecorderEnabled(0);
 8005bc2:	f7ff be81 	b.w	80058c8 <prvSetRecorderEnabled>
}
 8005bc6:	bd10      	pop	{r4, pc}
 8005bc8:	24000c54 	.word	0x24000c54
 8005bcc:	24000c34 	.word	0x24000c34
 8005bd0:	24024460 	.word	0x24024460
 8005bd4:	08015ba8 	.word	0x08015ba8
 8005bd8:	08015be0 	.word	0x08015be0

08005bdc <prvTraceStoreEvent1>:
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8005bdc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
{
 8005be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be2:	4605      	mov	r5, r0
 8005be4:	460f      	mov	r7, r1
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8005be6:	d304      	bcc.n	8005bf2 <prvTraceStoreEvent1+0x16>
 8005be8:	2001      	movs	r0, #1
}
 8005bea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8005bee:	f7ff bfc7 	b.w	8005b80 <prvTraceError>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <prvTraceStoreEvent1+0x4c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	b17b      	cbz	r3, 8005c22 <prvTraceStoreEvent1+0x46>
		eventCounter++;
 8005c02:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <prvTraceStoreEvent1+0x50>)
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_1, event, sizeof(EventWithParam_1));
 8005c04:	200c      	movs	r0, #12
		eventCounter++;
 8005c06:	681c      	ldr	r4, [r3, #0]
 8005c08:	3401      	adds	r4, #1
 8005c0a:	601c      	str	r4, [r3, #0]
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_1, event, sizeof(EventWithParam_1));
 8005c0c:	f7ff fcee 	bl	80055ec <prvPagedEventBufferGetWritePointer>
			if (event != NULL)
 8005c10:	b138      	cbz	r0, 8005c22 <prvTraceStoreEvent1+0x46>
	return TRC_HWTC_COUNT;
 8005c12:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <prvTraceStoreEvent1+0x54>)
				event->base.EventID = eventID | PARAM_COUNT(1);
 8005c14:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
				event->base.EventCount = (uint16_t)eventCounter;
 8005c18:	8044      	strh	r4, [r0, #2]
	return TRC_HWTC_COUNT;
 8005c1a:	681b      	ldr	r3, [r3, #0]
				event->base.EventID = eventID | PARAM_COUNT(1);
 8005c1c:	8005      	strh	r5, [r0, #0]
				event->param1 = (uint32_t)param1;
 8005c1e:	e9c0 3701 	strd	r3, r7, [r0, #4]
 8005c22:	f386 8810 	msr	PRIMASK, r6
}
 8005c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c28:	24000c4c 	.word	0x24000c4c
 8005c2c:	24000c58 	.word	0x24000c58
 8005c30:	e0001004 	.word	0xe0001004

08005c34 <prvTraceStoreEvent2>:
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8005c34:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
{
 8005c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	4688      	mov	r8, r1
 8005c40:	4617      	mov	r7, r2
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8005c42:	d304      	bcc.n	8005c4e <prvTraceStoreEvent2+0x1a>
 8005c44:	2001      	movs	r0, #1
}
 8005c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8005c4a:	f7ff bf99 	b.w	8005b80 <prvTraceError>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c4e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c52:	2301      	movs	r3, #1
 8005c54:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 8005c58:	4b0b      	ldr	r3, [pc, #44]	; (8005c88 <prvTraceStoreEvent2+0x54>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	b183      	cbz	r3, 8005c80 <prvTraceStoreEvent2+0x4c>
		eventCounter++;
 8005c5e:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <prvTraceStoreEvent2+0x58>)
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_2, event, sizeof(EventWithParam_2));
 8005c60:	2010      	movs	r0, #16
		eventCounter++;
 8005c62:	681c      	ldr	r4, [r3, #0]
 8005c64:	3401      	adds	r4, #1
 8005c66:	601c      	str	r4, [r3, #0]
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_2, event, sizeof(EventWithParam_2));
 8005c68:	f7ff fcc0 	bl	80055ec <prvPagedEventBufferGetWritePointer>
			if (event != NULL)
 8005c6c:	b140      	cbz	r0, 8005c80 <prvTraceStoreEvent2+0x4c>
	return TRC_HWTC_COUNT;
 8005c6e:	4b08      	ldr	r3, [pc, #32]	; (8005c90 <prvTraceStoreEvent2+0x5c>)
				event->base.EventID = eventID | PARAM_COUNT(2);
 8005c70:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000
				event->base.EventCount = (uint16_t)eventCounter;
 8005c74:	8044      	strh	r4, [r0, #2]
	return TRC_HWTC_COUNT;
 8005c76:	681b      	ldr	r3, [r3, #0]
				event->base.EventID = eventID | PARAM_COUNT(2);
 8005c78:	8005      	strh	r5, [r0, #0]
				event->param2 = param2;
 8005c7a:	60c7      	str	r7, [r0, #12]
				event->param1 = (uint32_t)param1;
 8005c7c:	e9c0 3801 	strd	r3, r8, [r0, #4]
 8005c80:	f386 8810 	msr	PRIMASK, r6
}
 8005c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c88:	24000c4c 	.word	0x24000c4c
 8005c8c:	24000c58 	.word	0x24000c58
 8005c90:	e0001004 	.word	0xe0001004

08005c94 <prvTraceStoreEvent3>:
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8005c94:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
{
 8005c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	4688      	mov	r8, r1
 8005ca0:	4691      	mov	r9, r2
 8005ca2:	461f      	mov	r7, r3
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8005ca4:	d304      	bcc.n	8005cb0 <prvTraceStoreEvent3+0x1c>
 8005ca6:	2001      	movs	r0, #1
}
 8005ca8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8005cac:	f7ff bf68 	b.w	8005b80 <prvTraceError>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f383 8810 	msr	PRIMASK, r3
	if (RecorderEnabled)
 8005cba:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <prvTraceStoreEvent3+0x58>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	b18b      	cbz	r3, 8005ce4 <prvTraceStoreEvent3+0x50>
  		eventCounter++;
 8005cc0:	480b      	ldr	r0, [pc, #44]	; (8005cf0 <prvTraceStoreEvent3+0x5c>)
 8005cc2:	6804      	ldr	r4, [r0, #0]
 8005cc4:	3401      	adds	r4, #1
 8005cc6:	6004      	str	r4, [r0, #0]
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_3, event, sizeof(EventWithParam_3));
 8005cc8:	2014      	movs	r0, #20
 8005cca:	f7ff fc8f 	bl	80055ec <prvPagedEventBufferGetWritePointer>
			if (event != NULL)
 8005cce:	b148      	cbz	r0, 8005ce4 <prvTraceStoreEvent3+0x50>
	return TRC_HWTC_COUNT;
 8005cd0:	4b08      	ldr	r3, [pc, #32]	; (8005cf4 <prvTraceStoreEvent3+0x60>)
				event->base.EventID = eventID | PARAM_COUNT(3);
 8005cd2:	f445 5540 	orr.w	r5, r5, #12288	; 0x3000
				event->base.EventCount = (uint16_t)eventCounter;
 8005cd6:	8044      	strh	r4, [r0, #2]
	return TRC_HWTC_COUNT;
 8005cd8:	681b      	ldr	r3, [r3, #0]
				event->base.EventID = eventID | PARAM_COUNT(3);
 8005cda:	8005      	strh	r5, [r0, #0]
				event->param1 = (uint32_t)param1;
 8005cdc:	e9c0 3801 	strd	r3, r8, [r0, #4]
				event->param3 = param3;
 8005ce0:	e9c0 9703 	strd	r9, r7, [r0, #12]
 8005ce4:	f386 8810 	msr	PRIMASK, r6
}
 8005ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cec:	24000c4c 	.word	0x24000c4c
 8005cf0:	24000c58 	.word	0x24000c58
 8005cf4:	e0001004 	.word	0xe0001004

08005cf8 <prvTraceInitCortexM>:
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <prvTraceInitCortexM+0x3c>)
 8005cfa:	4a0f      	ldr	r2, [pc, #60]	; (8005d38 <prvTraceInitCortexM+0x40>)
 8005cfc:	601a      	str	r2, [r3, #0]
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 8005cfe:	f503 434e 	add.w	r3, r3, #52736	; 0xce00
 8005d02:	334c      	adds	r3, #76	; 0x4c
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005d0a:	601a      	str	r2, [r3, #0]
		if (TRC_REG_DEMCR == 0)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	b913      	cbnz	r3, 8005d16 <prvTraceInitCortexM+0x1e>
			prvTraceError(PSF_ERROR_DWT_NOT_SUPPORTED);
 8005d10:	2003      	movs	r0, #3
			prvTraceError(PSF_ERROR_DWT_CYCCNT_NOT_SUPPORTED);
 8005d12:	f7ff bf35 	b.w	8005b80 <prvTraceError>
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 8005d16:	4a09      	ldr	r2, [pc, #36]	; (8005d3c <prvTraceInitCortexM+0x44>)
 8005d18:	6813      	ldr	r3, [r2, #0]
 8005d1a:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8005d1e:	d001      	beq.n	8005d24 <prvTraceInitCortexM+0x2c>
			prvTraceError(PSF_ERROR_DWT_CYCCNT_NOT_SUPPORTED);
 8005d20:	2004      	movs	r0, #4
 8005d22:	e7f6      	b.n	8005d12 <prvTraceInitCortexM+0x1a>
		TRC_REG_DWT_CYCCNT = 0;
 8005d24:	4906      	ldr	r1, [pc, #24]	; (8005d40 <prvTraceInitCortexM+0x48>)
 8005d26:	600b      	str	r3, [r1, #0]
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8005d28:	6813      	ldr	r3, [r2, #0]
 8005d2a:	f043 0301 	orr.w	r3, r3, #1
 8005d2e:	6013      	str	r3, [r2, #0]
}
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	e0001fb0 	.word	0xe0001fb0
 8005d38:	c5acce55 	.word	0xc5acce55
 8005d3c:	e0001000 	.word	0xe0001000
 8005d40:	e0001004 	.word	0xe0001004

08005d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d7c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005d48:	f7fd ffae 	bl	8003ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005d4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005d4e:	e003      	b.n	8005d58 <LoopCopyDataInit>

08005d50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8005d52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005d54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005d56:	3104      	adds	r1, #4

08005d58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005d58:	480a      	ldr	r0, [pc, #40]	; (8005d84 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8005d5a:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8005d5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005d5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005d60:	d3f6      	bcc.n	8005d50 <CopyDataInit>
  ldr  r2, =_sbss
 8005d62:	4a0a      	ldr	r2, [pc, #40]	; (8005d8c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8005d64:	e002      	b.n	8005d6c <LoopFillZerobss>

08005d66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005d66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005d68:	f842 3b04 	str.w	r3, [r2], #4

08005d6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005d6c:	4b08      	ldr	r3, [pc, #32]	; (8005d90 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8005d6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005d70:	d3f9      	bcc.n	8005d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005d72:	f00d fc31 	bl	80135d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d76:	f7fc fe9d 	bl	8002ab4 <main>
  bx  lr    
 8005d7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005d7c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8005d80:	08016308 	.word	0x08016308
  ldr  r0, =_sdata
 8005d84:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8005d88:	2400020c 	.word	0x2400020c
  ldr  r2, =_sbss
 8005d8c:	2400020c 	.word	0x2400020c
  ldr  r3, = _ebss
 8005d90:	24026290 	.word	0x24026290

08005d94 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d94:	e7fe      	b.n	8005d94 <ADC3_IRQHandler>
	...

08005d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d98:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d9a:	2003      	movs	r0, #3
 8005d9c:	f000 fea0 	bl	8006ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005da0:	f003 f920 	bl	8008fe4 <HAL_RCC_GetSysClockFreq>
 8005da4:	490f      	ldr	r1, [pc, #60]	; (8005de4 <HAL_Init+0x4c>)
 8005da6:	4a10      	ldr	r2, [pc, #64]	; (8005de8 <HAL_Init+0x50>)
 8005da8:	698b      	ldr	r3, [r1, #24]
 8005daa:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005dae:	5cd3      	ldrb	r3, [r2, r3]
 8005db0:	f003 031f 	and.w	r3, r3, #31
 8005db4:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005db6:	698b      	ldr	r3, [r1, #24]
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	5cd3      	ldrb	r3, [r2, r3]
 8005dbe:	4a0b      	ldr	r2, [pc, #44]	; (8005dec <HAL_Init+0x54>)
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	fa20 f303 	lsr.w	r3, r0, r3
 8005dc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dca:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <HAL_Init+0x58>)
 8005dcc:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005dce:	2000      	movs	r0, #0
 8005dd0:	f7fd fe82 	bl	8003ad8 <HAL_InitTick>
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	b918      	cbnz	r0, 8005de0 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005dd8:	f7fd fada 	bl	8003390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8005ddc:	4620      	mov	r0, r4
 8005dde:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005de0:	2401      	movs	r4, #1
 8005de2:	e7fb      	b.n	8005ddc <HAL_Init+0x44>
 8005de4:	58024400 	.word	0x58024400
 8005de8:	08015804 	.word	0x08015804
 8005dec:	24000004 	.word	0x24000004
 8005df0:	24000000 	.word	0x24000000

08005df4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005df4:	4a03      	ldr	r2, [pc, #12]	; (8005e04 <HAL_IncTick+0x10>)
 8005df6:	4b04      	ldr	r3, [pc, #16]	; (8005e08 <HAL_IncTick+0x14>)
 8005df8:	6811      	ldr	r1, [r2, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	440b      	add	r3, r1
 8005dfe:	6013      	str	r3, [r2, #0]
}
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	24024504 	.word	0x24024504
 8005e08:	24000021 	.word	0x24000021

08005e0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005e0c:	4b01      	ldr	r3, [pc, #4]	; (8005e14 <HAL_GetTick+0x8>)
 8005e0e:	6818      	ldr	r0, [r3, #0]
}
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	24024504 	.word	0x24024504

08005e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005e1c:	f7ff fff6 	bl	8005e0c <HAL_GetTick>
 8005e20:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e22:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005e24:	bf1e      	ittt	ne
 8005e26:	4b04      	ldrne	r3, [pc, #16]	; (8005e38 <HAL_Delay+0x20>)
 8005e28:	781b      	ldrbne	r3, [r3, #0]
 8005e2a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e2c:	f7ff ffee 	bl	8005e0c <HAL_GetTick>
 8005e30:	1b40      	subs	r0, r0, r5
 8005e32:	42a0      	cmp	r0, r4
 8005e34:	d3fa      	bcc.n	8005e2c <HAL_Delay+0x14>
  {
  }
}
 8005e36:	bd38      	pop	{r3, r4, r5, pc}
 8005e38:	24000021 	.word	0x24000021

08005e3c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8005e3c:	4b01      	ldr	r3, [pc, #4]	; (8005e44 <HAL_GetREVID+0x8>)
 8005e3e:	6818      	ldr	r0, [r3, #0]
}
 8005e40:	0c00      	lsrs	r0, r0, #16
 8005e42:	4770      	bx	lr
 8005e44:	5c001000 	.word	0x5c001000

08005e48 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005e48:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005e4a:	0dcc      	lsrs	r4, r1, #23
 8005e4c:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8005e4e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8005e52:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005e54:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8005e58:	408d      	lsls	r5, r1
 8005e5a:	fa02 f101 	lsl.w	r1, r2, r1
 8005e5e:	5823      	ldr	r3, [r4, r0]
 8005e60:	ea23 0305 	bic.w	r3, r3, r5
 8005e64:	4319      	orrs	r1, r3
 8005e66:	5021      	str	r1, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005e68:	bd30      	pop	{r4, r5, pc}

08005e6a <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e6a:	6880      	ldr	r0, [r0, #8]
}
 8005e6c:	f000 0001 	and.w	r0, r0, #1
 8005e70:	4770      	bx	lr

08005e72 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e72:	6880      	ldr	r0, [r0, #8]
}
 8005e74:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8005e78:	4770      	bx	lr

08005e7a <HAL_ADC_ConvCpltCallback>:
 8005e7a:	4770      	bx	lr

08005e7c <HAL_ADC_ConvHalfCpltCallback>:
 8005e7c:	4770      	bx	lr

08005e7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e7e:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005e80:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005e82:	f7ff fffb 	bl	8005e7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e86:	bd08      	pop	{r3, pc}

08005e88 <HAL_ADC_ErrorCallback>:
 8005e88:	4770      	bx	lr

08005e8a <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e8e:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 8005e94:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005e96:	d121      	bne.n	8005edc <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e9c:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	6811      	ldr	r1, [r2, #0]
 8005ea2:	0708      	lsls	r0, r1, #28
 8005ea4:	d516      	bpl.n	8005ed4 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005ea6:	68d1      	ldr	r1, [r2, #12]
 8005ea8:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8005eac:	d10e      	bne.n	8005ecc <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005eae:	68d2      	ldr	r2, [r2, #12]
 8005eb0:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005eb4:	d10a      	bne.n	8005ecc <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005eb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ebc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ebe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ec0:	04d1      	lsls	r1, r2, #19
 8005ec2:	d403      	bmi.n	8005ecc <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ec4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff ffd4 	bl	8005e7a <HAL_ADC_ConvCpltCallback>
}
 8005ed2:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005ed4:	68d2      	ldr	r2, [r2, #12]
 8005ed6:	f012 0f03 	tst.w	r2, #3
 8005eda:	e7eb      	b.n	8005eb4 <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005edc:	06d2      	lsls	r2, r2, #27
 8005ede:	d503      	bpl.n	8005ee8 <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff ffd1 	bl	8005e88 <HAL_ADC_ErrorCallback>
 8005ee6:	e7f4      	b.n	8005ed2 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef0:	4718      	bx	r3

08005ef2 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ef2:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005ef4:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005ef6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005efc:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005efe:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005f00:	f043 0304 	orr.w	r3, r3, #4
 8005f04:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005f06:	f7ff ffbf 	bl	8005e88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f0a:	bd08      	pop	{r3, pc}

08005f0c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 8005f0c:	2300      	movs	r3, #0
{
 8005f0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8005f10:	9301      	str	r3, [sp, #4]
{
 8005f12:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8005f14:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8005f18:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	f000 8173 	beq.w	8006206 <HAL_ADC_ConfigChannel+0x2fa>
 8005f20:	2301      	movs	r3, #1
 8005f22:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f26:	6800      	ldr	r0, [r0, #0]
 8005f28:	f7ff ffa3 	bl	8005e72 <LL_ADC_REG_IsConversionOngoing>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	f040 8164 	bne.w	80061fa <HAL_ADC_ConfigChannel+0x2ee>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005f32:	680a      	ldr	r2, [r1, #0]
 8005f34:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8005f38:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8005f3c:	bb50      	cbnz	r0, 8005f94 <HAL_ADC_ConfigChannel+0x88>
 8005f3e:	408b      	lsls	r3, r1
 8005f40:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(*preg,
 8005f42:	271f      	movs	r7, #31
 8005f44:	69c2      	ldr	r2, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005f46:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8005f4a:	4313      	orrs	r3, r2
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005f4c:	686a      	ldr	r2, [r5, #4]
 8005f4e:	0996      	lsrs	r6, r2, #6
  MODIFY_REG(*preg,
 8005f50:	f002 021f 	and.w	r2, r2, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005f54:	61c3      	str	r3, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005f56:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8005f5a:	4097      	lsls	r7, r2
 8005f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f60:	f856 300c 	ldr.w	r3, [r6, ip]
 8005f64:	ea23 0307 	bic.w	r3, r3, r7
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f846 300c 	str.w	r3, [r6, ip]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f6e:	f7ff ff80 	bl	8005e72 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f72:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005f74:	689e      	ldr	r6, [r3, #8]
 8005f76:	f016 0608 	ands.w	r6, r6, #8
 8005f7a:	f000 8146 	beq.w	800620a <HAL_ADC_ConfigChannel+0x2fe>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f7e:	6820      	ldr	r0, [r4, #0]
 8005f80:	f7ff ff73 	bl	8005e6a <LL_ADC_IsEnabled>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d03c      	beq.n	8006002 <HAL_ADC_ConfigChannel+0xf6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f88:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005f90:	b003      	add	sp, #12
 8005f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f94:	fa92 f0a2 	rbit	r0, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005f98:	fab0 f080 	clz	r0, r0
 8005f9c:	f000 001f 	and.w	r0, r0, #31
 8005fa0:	4083      	lsls	r3, r0
 8005fa2:	e7cd      	b.n	8005f40 <HAL_ADC_ConfigChannel+0x34>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005fa4:	68d9      	ldr	r1, [r3, #12]
 8005fa6:	68d8      	ldr	r0, [r3, #12]
 8005fa8:	06c9      	lsls	r1, r1, #27
 8005faa:	f140 8141 	bpl.w	8006230 <HAL_ADC_ConfigChannel+0x324>
 8005fae:	0840      	lsrs	r0, r0, #1
 8005fb0:	f000 0008 	and.w	r0, r0, #8
 8005fb4:	e13f      	b.n	8006236 <HAL_ADC_ConfigChannel+0x32a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005fb6:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005fb8:	0692      	lsls	r2, r2, #26
 8005fba:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005fbe:	4291      	cmp	r1, r2
 8005fc0:	d103      	bne.n	8005fca <HAL_ADC_ConfigChannel+0xbe>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005fc2:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005fc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005fc8:	6619      	str	r1, [r3, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005fca:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8005fcc:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005fd0:	428a      	cmp	r2, r1
 8005fd2:	d103      	bne.n	8005fdc <HAL_ADC_ConfigChannel+0xd0>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005fd4:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8005fd6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005fda:	6659      	str	r1, [r3, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005fdc:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005fde:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005fe2:	428a      	cmp	r2, r1
 8005fe4:	d103      	bne.n	8005fee <HAL_ADC_ConfigChannel+0xe2>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005fe6:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005fe8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005fec:	6699      	str	r1, [r3, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005fee:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8005ff0:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005ff4:	428a      	cmp	r2, r1
 8005ff6:	d1c2      	bne.n	8005f7e <HAL_ADC_ConfigChannel+0x72>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005ff8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005ffa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ffe:	66da      	str	r2, [r3, #108]	; 0x6c
 8006000:	e7bd      	b.n	8005f7e <HAL_ADC_ConfigChannel+0x72>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006002:	68ee      	ldr	r6, [r5, #12]
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8006008:	f006 0c18 	and.w	ip, r6, #24
 800600c:	4aa3      	ldr	r2, [pc, #652]	; (800629c <HAL_ADC_ConfigChannel+0x390>)
 800600e:	f3c3 0713 	ubfx	r7, r3, #0, #20
 8006012:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 8006016:	fa22 f20c 	lsr.w	r2, r2, ip
 800601a:	ea21 0107 	bic.w	r1, r1, r7
 800601e:	401a      	ands	r2, r3
 8006020:	430a      	orrs	r2, r1
 8006022:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006026:	4a9e      	ldr	r2, [pc, #632]	; (80062a0 <HAL_ADC_ConfigChannel+0x394>)
 8006028:	4296      	cmp	r6, r2
 800602a:	d11d      	bne.n	8006068 <HAL_ADC_ConfigChannel+0x15c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800602c:	2f00      	cmp	r7, #0
 800602e:	d161      	bne.n	80060f4 <HAL_ADC_ConfigChannel+0x1e8>
 8006030:	0e9a      	lsrs	r2, r3, #26
 8006032:	3201      	adds	r2, #1
 8006034:	f002 061f 	and.w	r6, r2, #31
 8006038:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800603a:	2e09      	cmp	r6, #9
 800603c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006040:	f04f 0201 	mov.w	r2, #1
 8006044:	fa02 f206 	lsl.w	r2, r2, r6
 8006048:	f200 8085 	bhi.w	8006156 <HAL_ADC_ConfigChannel+0x24a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800604c:	4311      	orrs	r1, r2
 800604e:	2f00      	cmp	r7, #0
 8006050:	d16b      	bne.n	800612a <HAL_ADC_ConfigChannel+0x21e>
 8006052:	0e9b      	lsrs	r3, r3, #26
 8006054:	3301      	adds	r3, #1
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800605e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006060:	4319      	orrs	r1, r3
 8006062:	68aa      	ldr	r2, [r5, #8]
 8006064:	f7ff fef0 	bl	8005e48 <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	da8c      	bge.n	8005f88 <HAL_ADC_ConfigChannel+0x7c>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800606e:	6822      	ldr	r2, [r4, #0]
 8006070:	498c      	ldr	r1, [pc, #560]	; (80062a4 <HAL_ADC_ConfigChannel+0x398>)
 8006072:	428a      	cmp	r2, r1
 8006074:	f000 8089 	beq.w	800618a <HAL_ADC_ConfigChannel+0x27e>
 8006078:	4e8b      	ldr	r6, [pc, #556]	; (80062a8 <HAL_ADC_ConfigChannel+0x39c>)
 800607a:	4b8c      	ldr	r3, [pc, #560]	; (80062ac <HAL_ADC_ConfigChannel+0x3a0>)
 800607c:	488c      	ldr	r0, [pc, #560]	; (80062b0 <HAL_ADC_ConfigChannel+0x3a4>)
 800607e:	42b2      	cmp	r2, r6
 8006080:	bf08      	it	eq
 8006082:	4603      	moveq	r3, r0
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006084:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	d002      	beq.n	8006090 <HAL_ADC_ConfigChannel+0x184>
 800608a:	4987      	ldr	r1, [pc, #540]	; (80062a8 <HAL_ADC_ConfigChannel+0x39c>)
 800608c:	428a      	cmp	r2, r1
 800608e:	d17e      	bne.n	800618e <HAL_ADC_ConfigChannel+0x282>
 8006090:	4884      	ldr	r0, [pc, #528]	; (80062a4 <HAL_ADC_ConfigChannel+0x398>)
 8006092:	f7ff feea 	bl	8005e6a <LL_ADC_IsEnabled>
 8006096:	4602      	mov	r2, r0
 8006098:	4883      	ldr	r0, [pc, #524]	; (80062a8 <HAL_ADC_ConfigChannel+0x39c>)
 800609a:	f7ff fee6 	bl	8005e6a <LL_ADC_IsEnabled>
 800609e:	4302      	orrs	r2, r0
 80060a0:	bf0c      	ite	eq
 80060a2:	2001      	moveq	r0, #1
 80060a4:	2000      	movne	r0, #0
 80060a6:	2800      	cmp	r0, #0
 80060a8:	f000 80a1 	beq.w	80061ee <HAL_ADC_ConfigChannel+0x2e2>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80060ac:	6829      	ldr	r1, [r5, #0]
 80060ae:	f003 72e0 	and.w	r2, r3, #29360128	; 0x1c00000
 80060b2:	4880      	ldr	r0, [pc, #512]	; (80062b4 <HAL_ADC_ConfigChannel+0x3a8>)
 80060b4:	4281      	cmp	r1, r0
 80060b6:	d171      	bne.n	800619c <HAL_ADC_ConfigChannel+0x290>
 80060b8:	021b      	lsls	r3, r3, #8
 80060ba:	f53f af65 	bmi.w	8005f88 <HAL_ADC_ConfigChannel+0x7c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80060be:	6821      	ldr	r1, [r4, #0]
 80060c0:	4b7d      	ldr	r3, [pc, #500]	; (80062b8 <HAL_ADC_ConfigChannel+0x3ac>)
 80060c2:	4299      	cmp	r1, r3
 80060c4:	f47f af60 	bne.w	8005f88 <HAL_ADC_ConfigChannel+0x7c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80060c8:	4978      	ldr	r1, [pc, #480]	; (80062ac <HAL_ADC_ConfigChannel+0x3a0>)
 80060ca:	688b      	ldr	r3, [r1, #8]
 80060cc:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80060d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80060d4:	4313      	orrs	r3, r2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80060d6:	4a79      	ldr	r2, [pc, #484]	; (80062bc <HAL_ADC_ConfigChannel+0x3b0>)
 80060d8:	608b      	str	r3, [r1, #8]
 80060da:	4b79      	ldr	r3, [pc, #484]	; (80062c0 <HAL_ADC_ConfigChannel+0x3b4>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	fbb3 f3f2 	udiv	r3, r3, r2
 80060e2:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 80060e4:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 80060e6:	9b01      	ldr	r3, [sp, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f43f af4d 	beq.w	8005f88 <HAL_ADC_ConfigChannel+0x7c>
                wait_loop_index--;
 80060ee:	9b01      	ldr	r3, [sp, #4]
 80060f0:	3b01      	subs	r3, #1
 80060f2:	e7f7      	b.n	80060e4 <HAL_ADC_ConfigChannel+0x1d8>
 80060f4:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80060f8:	fab2 f282 	clz	r2, r2
 80060fc:	3201      	adds	r2, #1
 80060fe:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006102:	2a09      	cmp	r2, #9
 8006104:	d816      	bhi.n	8006134 <HAL_ADC_ConfigChannel+0x228>
 8006106:	fa93 f1a3 	rbit	r1, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800610a:	fab1 f181 	clz	r1, r1
 800610e:	3101      	adds	r1, #1
 8006110:	0689      	lsls	r1, r1, #26
 8006112:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8006116:	fa93 f2a3 	rbit	r2, r3
 800611a:	fab2 f282 	clz	r2, r2
 800611e:	3201      	adds	r2, #1
 8006120:	f002 061f 	and.w	r6, r2, #31
 8006124:	2201      	movs	r2, #1
 8006126:	40b2      	lsls	r2, r6
 8006128:	e790      	b.n	800604c <HAL_ADC_ConfigChannel+0x140>
 800612a:	fa93 f3a3 	rbit	r3, r3
 800612e:	fab3 f383 	clz	r3, r3
 8006132:	e78f      	b.n	8006054 <HAL_ADC_ConfigChannel+0x148>
 8006134:	fa93 f1a3 	rbit	r1, r3
 8006138:	fab1 f181 	clz	r1, r1
 800613c:	3101      	adds	r1, #1
 800613e:	0689      	lsls	r1, r1, #26
 8006140:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8006144:	fa93 f2a3 	rbit	r2, r3
 8006148:	fab2 f282 	clz	r2, r2
 800614c:	3201      	adds	r2, #1
 800614e:	f002 061f 	and.w	r6, r2, #31
 8006152:	2201      	movs	r2, #1
 8006154:	40b2      	lsls	r2, r6
 8006156:	430a      	orrs	r2, r1
 8006158:	b95f      	cbnz	r7, 8006172 <HAL_ADC_ConfigChannel+0x266>
 800615a:	0e9b      	lsrs	r3, r3, #26
 800615c:	3301      	adds	r3, #1
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006166:	391e      	subs	r1, #30
 8006168:	0509      	lsls	r1, r1, #20
 800616a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800616e:	4311      	orrs	r1, r2
 8006170:	e777      	b.n	8006062 <HAL_ADC_ConfigChannel+0x156>
 8006172:	fa93 f3a3 	rbit	r3, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006176:	fab3 f383 	clz	r3, r3
 800617a:	3301      	adds	r3, #1
 800617c:	f003 031f 	and.w	r3, r3, #31
 8006180:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006184:	f1a3 011e 	sub.w	r1, r3, #30
 8006188:	e7ee      	b.n	8006168 <HAL_ADC_ConfigChannel+0x25c>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800618a:	4b49      	ldr	r3, [pc, #292]	; (80062b0 <HAL_ADC_ConfigChannel+0x3a4>)
 800618c:	e77a      	b.n	8006084 <HAL_ADC_ConfigChannel+0x178>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800618e:	484a      	ldr	r0, [pc, #296]	; (80062b8 <HAL_ADC_ConfigChannel+0x3ac>)
 8006190:	f7ff fe6b 	bl	8005e6a <LL_ADC_IsEnabled>
 8006194:	fab0 f080 	clz	r0, r0
 8006198:	0940      	lsrs	r0, r0, #5
 800619a:	e784      	b.n	80060a6 <HAL_ADC_ConfigChannel+0x19a>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800619c:	4849      	ldr	r0, [pc, #292]	; (80062c4 <HAL_ADC_ConfigChannel+0x3b8>)
 800619e:	4281      	cmp	r1, r0
 80061a0:	d111      	bne.n	80061c6 <HAL_ADC_ConfigChannel+0x2ba>
 80061a2:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
 80061a6:	f47f aeef 	bne.w	8005f88 <HAL_ADC_ConfigChannel+0x7c>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80061aa:	6821      	ldr	r1, [r4, #0]
 80061ac:	4b42      	ldr	r3, [pc, #264]	; (80062b8 <HAL_ADC_ConfigChannel+0x3ac>)
 80061ae:	4299      	cmp	r1, r3
 80061b0:	f47f aeea 	bne.w	8005f88 <HAL_ADC_ConfigChannel+0x7c>
 80061b4:	493d      	ldr	r1, [pc, #244]	; (80062ac <HAL_ADC_ConfigChannel+0x3a0>)
 80061b6:	688b      	ldr	r3, [r1, #8]
 80061b8:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80061bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061c0:	4313      	orrs	r3, r2
 80061c2:	608b      	str	r3, [r1, #8]
 80061c4:	e6e1      	b.n	8005f8a <HAL_ADC_ConfigChannel+0x7e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80061c6:	4840      	ldr	r0, [pc, #256]	; (80062c8 <HAL_ADC_ConfigChannel+0x3bc>)
 80061c8:	4281      	cmp	r1, r0
 80061ca:	f47f aedd 	bne.w	8005f88 <HAL_ADC_ConfigChannel+0x7c>
 80061ce:	f413 0080 	ands.w	r0, r3, #4194304	; 0x400000
 80061d2:	f47f aed9 	bne.w	8005f88 <HAL_ADC_ConfigChannel+0x7c>
            if (ADC_VREFINT_INSTANCE(hadc))
 80061d6:	6821      	ldr	r1, [r4, #0]
 80061d8:	4b37      	ldr	r3, [pc, #220]	; (80062b8 <HAL_ADC_ConfigChannel+0x3ac>)
 80061da:	4299      	cmp	r1, r3
 80061dc:	f47f aed4 	bne.w	8005f88 <HAL_ADC_ConfigChannel+0x7c>
 80061e0:	4932      	ldr	r1, [pc, #200]	; (80062ac <HAL_ADC_ConfigChannel+0x3a0>)
 80061e2:	688b      	ldr	r3, [r1, #8]
 80061e4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80061e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80061ec:	e7e8      	b.n	80061c0 <HAL_ADC_ConfigChannel+0x2b4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80061f0:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061f2:	f043 0320 	orr.w	r3, r3, #32
 80061f6:	6563      	str	r3, [r4, #84]	; 0x54
 80061f8:	e6c7      	b.n	8005f8a <HAL_ADC_ConfigChannel+0x7e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061fa:	6d62      	ldr	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80061fc:	4618      	mov	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061fe:	f042 0220 	orr.w	r2, r2, #32
 8006202:	6562      	str	r2, [r4, #84]	; 0x54
 8006204:	e6c1      	b.n	8005f8a <HAL_ADC_ConfigChannel+0x7e>
  __HAL_LOCK(hadc);
 8006206:	2002      	movs	r0, #2
 8006208:	e6c2      	b.n	8005f90 <HAL_ADC_ConfigChannel+0x84>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800620a:	2800      	cmp	r0, #0
 800620c:	f47f aeb7 	bne.w	8005f7e <HAL_ADC_ConfigChannel+0x72>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006210:	68aa      	ldr	r2, [r5, #8]
 8006212:	4618      	mov	r0, r3
 8006214:	6829      	ldr	r1, [r5, #0]
 8006216:	f7ff fe17 	bl	8005e48 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800621a:	4b2c      	ldr	r3, [pc, #176]	; (80062cc <HAL_ADC_ConfigChannel+0x3c0>)
 800621c:	696a      	ldr	r2, [r5, #20]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006224:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	f47f aebb 	bne.w	8005fa4 <HAL_ADC_ConfigChannel+0x98>
 800622e:	68d8      	ldr	r0, [r3, #12]
 8006230:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8006234:	0040      	lsls	r0, r0, #1
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006236:	f8d5 c010 	ldr.w	ip, [r5, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800623a:	fa02 f000 	lsl.w	r0, r2, r0
 800623e:	682a      	ldr	r2, [r5, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006240:	f1bc 0f04 	cmp.w	ip, #4
 8006244:	f43f aeb7 	beq.w	8005fb6 <HAL_ADC_ConfigChannel+0xaa>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006248:	f103 0760 	add.w	r7, r3, #96	; 0x60
    MODIFY_REG(*preg,
 800624c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8006250:	f857 102c 	ldr.w	r1, [r7, ip, lsl #2]
 8006254:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006258:	430a      	orrs	r2, r1
 800625a:	4302      	orrs	r2, r0
 800625c:	f847 202c 	str.w	r2, [r7, ip, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006260:	7e6a      	ldrb	r2, [r5, #25]
 8006262:	6929      	ldr	r1, [r5, #16]
 8006264:	2a01      	cmp	r2, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006266:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
 800626a:	bf14      	ite	ne
 800626c:	2000      	movne	r0, #0
 800626e:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 8006272:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006276:	4302      	orrs	r2, r0
 8006278:	f847 2021 	str.w	r2, [r7, r1, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800627c:	7e29      	ldrb	r1, [r5, #24]
 800627e:	692a      	ldr	r2, [r5, #16]
 8006280:	2901      	cmp	r1, #1
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006282:	6919      	ldr	r1, [r3, #16]
 8006284:	f002 021f 	and.w	r2, r2, #31
 8006288:	bf08      	it	eq
 800628a:	f44f 6600 	moveq.w	r6, #2048	; 0x800
 800628e:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
 8006292:	fa06 f202 	lsl.w	r2, r6, r2
 8006296:	430a      	orrs	r2, r1
 8006298:	611a      	str	r2, [r3, #16]
 800629a:	e670      	b.n	8005f7e <HAL_ADC_ConfigChannel+0x72>
 800629c:	000fffff 	.word	0x000fffff
 80062a0:	47ff0000 	.word	0x47ff0000
 80062a4:	40022000 	.word	0x40022000
 80062a8:	40022100 	.word	0x40022100
 80062ac:	58026300 	.word	0x58026300
 80062b0:	40022300 	.word	0x40022300
 80062b4:	cb840000 	.word	0xcb840000
 80062b8:	58026000 	.word	0x58026000
 80062bc:	00030d40 	.word	0x00030d40
 80062c0:	24000000 	.word	0x24000000
 80062c4:	c7520000 	.word	0xc7520000
 80062c8:	cfb80000 	.word	0xcfb80000
 80062cc:	5c001000 	.word	0x5c001000

080062d0 <ADC_ConversionStop>:
{
 80062d0:	b570      	push	{r4, r5, r6, lr}
 80062d2:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80062d4:	6800      	ldr	r0, [r0, #0]
 80062d6:	f7ff fdcc 	bl	8005e72 <LL_ADC_REG_IsConversionOngoing>
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80062da:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	0716      	lsls	r6, r2, #28
 80062e0:	d556      	bpl.n	8006390 <ADC_ConversionStop+0xc0>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	0190      	lsls	r0, r2, #6
 80062e6:	d52b      	bpl.n	8006340 <ADC_ConversionStop+0x70>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80062e8:	8aa0      	ldrh	r0, [r4, #20]
 80062ea:	f240 1201 	movw	r2, #257	; 0x101
 80062ee:	4290      	cmp	r0, r2
 80062f0:	d126      	bne.n	8006340 <ADC_ConversionStop+0x70>
 80062f2:	4a29      	ldr	r2, [pc, #164]	; (8006398 <ADC_ConversionStop+0xc8>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80062f4:	6819      	ldr	r1, [r3, #0]
 80062f6:	0649      	lsls	r1, r1, #25
 80062f8:	d516      	bpl.n	8006328 <ADC_ConversionStop+0x58>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80062fa:	2240      	movs	r2, #64	; 0x40
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80062fc:	2101      	movs	r1, #1
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80062fe:	601a      	str	r2, [r3, #0]
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff fdb6 	bl	8005e72 <LL_ADC_REG_IsConversionOngoing>
 8006306:	b158      	cbz	r0, 8006320 <ADC_ConversionStop+0x50>
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006308:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800630a:	6893      	ldr	r3, [r2, #8]
 800630c:	079e      	lsls	r6, r3, #30
 800630e:	d407      	bmi.n	8006320 <ADC_ConversionStop+0x50>
  MODIFY_REG(ADCx->CR,
 8006310:	6893      	ldr	r3, [r2, #8]
 8006312:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006316:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800631a:	f043 0310 	orr.w	r3, r3, #16
 800631e:	6093      	str	r3, [r2, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006320:	2901      	cmp	r1, #1
 8006322:	d10f      	bne.n	8006344 <ADC_ConversionStop+0x74>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006324:	2504      	movs	r5, #4
 8006326:	e022      	b.n	800636e <ADC_ConversionStop+0x9e>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006328:	3a01      	subs	r2, #1
 800632a:	d1e3      	bne.n	80062f4 <ADC_ConversionStop+0x24>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800632c:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800632e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006330:	f043 0310 	orr.w	r3, r3, #16
 8006334:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800633e:	bd70      	pop	{r4, r5, r6, pc}
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006340:	2902      	cmp	r1, #2
 8006342:	d1dd      	bne.n	8006300 <ADC_ConversionStop+0x30>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006344:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006346:	6893      	ldr	r3, [r2, #8]
 8006348:	0718      	lsls	r0, r3, #28
 800634a:	d50a      	bpl.n	8006362 <ADC_ConversionStop+0x92>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800634c:	6893      	ldr	r3, [r2, #8]
 800634e:	079b      	lsls	r3, r3, #30
 8006350:	d407      	bmi.n	8006362 <ADC_ConversionStop+0x92>
  MODIFY_REG(ADCx->CR,
 8006352:	6893      	ldr	r3, [r2, #8]
 8006354:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006358:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800635c:	f043 0320 	orr.w	r3, r3, #32
 8006360:	6093      	str	r3, [r2, #8]
    switch (conversion_group_reassigned)
 8006362:	2902      	cmp	r1, #2
 8006364:	d00c      	beq.n	8006380 <ADC_ConversionStop+0xb0>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006366:	2903      	cmp	r1, #3
 8006368:	bf0c      	ite	eq
 800636a:	250c      	moveq	r5, #12
 800636c:	2504      	movne	r5, #4
    tickstart = HAL_GetTick();
 800636e:	f7ff fd4d 	bl	8005e0c <HAL_GetTick>
 8006372:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	422b      	tst	r3, r5
 800637a:	d103      	bne.n	8006384 <ADC_ConversionStop+0xb4>
  return HAL_OK;
 800637c:	2000      	movs	r0, #0
 800637e:	e7de      	b.n	800633e <ADC_ConversionStop+0x6e>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006380:	2508      	movs	r5, #8
 8006382:	e7f4      	b.n	800636e <ADC_ConversionStop+0x9e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006384:	f7ff fd42 	bl	8005e0c <HAL_GetTick>
 8006388:	1b80      	subs	r0, r0, r6
 800638a:	2805      	cmp	r0, #5
 800638c:	d9f2      	bls.n	8006374 <ADC_ConversionStop+0xa4>
 800638e:	e7cd      	b.n	800632c <ADC_ConversionStop+0x5c>
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006390:	2800      	cmp	r0, #0
 8006392:	d1a6      	bne.n	80062e2 <ADC_ConversionStop+0x12>
 8006394:	e7f2      	b.n	800637c <ADC_ConversionStop+0xac>
 8006396:	bf00      	nop
 8006398:	000cdc01 	.word	0x000cdc01

0800639c <ADC_Enable>:
{
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063a0:	6800      	ldr	r0, [r0, #0]
 80063a2:	f7ff fd62 	bl	8005e6a <LL_ADC_IsEnabled>
 80063a6:	b108      	cbz	r0, 80063ac <ADC_Enable+0x10>
  return HAL_OK;
 80063a8:	2000      	movs	r0, #0
}
 80063aa:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80063ac:	6822      	ldr	r2, [r4, #0]
 80063ae:	4b21      	ldr	r3, [pc, #132]	; (8006434 <ADC_Enable+0x98>)
 80063b0:	6891      	ldr	r1, [r2, #8]
 80063b2:	4219      	tst	r1, r3
 80063b4:	d009      	beq.n	80063ca <ADC_Enable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80063b8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063ba:	f043 0310 	orr.w	r3, r3, #16
 80063be:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063c2:	f043 0301 	orr.w	r3, r3, #1
 80063c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80063c8:	e7ef      	b.n	80063aa <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 80063ca:	6893      	ldr	r3, [r2, #8]
 80063cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063d4:	f043 0301 	orr.w	r3, r3, #1
 80063d8:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80063da:	f7ff fd17 	bl	8005e0c <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80063de:	6822      	ldr	r2, [r4, #0]
 80063e0:	4b15      	ldr	r3, [pc, #84]	; (8006438 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 80063e2:	4605      	mov	r5, r0
 80063e4:	4915      	ldr	r1, [pc, #84]	; (800643c <ADC_Enable+0xa0>)
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d00e      	beq.n	8006408 <ADC_Enable+0x6c>
 80063ea:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80063ee:	4814      	ldr	r0, [pc, #80]	; (8006440 <ADC_Enable+0xa4>)
 80063f0:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 80063f4:	428a      	cmp	r2, r1
 80063f6:	bf08      	it	eq
 80063f8:	4603      	moveq	r3, r0
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80063fa:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	d101      	bne.n	8006404 <ADC_Enable+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006400:	06db      	lsls	r3, r3, #27
 8006402:	d1d1      	bne.n	80063a8 <ADC_Enable+0xc>
  MODIFY_REG(ADCx->CR,
 8006404:	4e0f      	ldr	r6, [pc, #60]	; (8006444 <ADC_Enable+0xa8>)
 8006406:	e00f      	b.n	8006428 <ADC_Enable+0x8c>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006408:	4b0d      	ldr	r3, [pc, #52]	; (8006440 <ADC_Enable+0xa4>)
 800640a:	e7f6      	b.n	80063fa <ADC_Enable+0x5e>
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800640c:	f7ff fd2d 	bl	8005e6a <LL_ADC_IsEnabled>
 8006410:	b928      	cbnz	r0, 800641e <ADC_Enable+0x82>
          LL_ADC_Enable(hadc->Instance);
 8006412:	6822      	ldr	r2, [r4, #0]
 8006414:	6893      	ldr	r3, [r2, #8]
 8006416:	4033      	ands	r3, r6
 8006418:	f043 0301 	orr.w	r3, r3, #1
 800641c:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800641e:	f7ff fcf5 	bl	8005e0c <HAL_GetTick>
 8006422:	1b40      	subs	r0, r0, r5
 8006424:	2802      	cmp	r0, #2
 8006426:	d8c6      	bhi.n	80063b6 <ADC_Enable+0x1a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006428:	6820      	ldr	r0, [r4, #0]
 800642a:	6803      	ldr	r3, [r0, #0]
 800642c:	07da      	lsls	r2, r3, #31
 800642e:	d5ed      	bpl.n	800640c <ADC_Enable+0x70>
 8006430:	e7ba      	b.n	80063a8 <ADC_Enable+0xc>
 8006432:	bf00      	nop
 8006434:	8000003f 	.word	0x8000003f
 8006438:	40022000 	.word	0x40022000
 800643c:	40022100 	.word	0x40022100
 8006440:	40022300 	.word	0x40022300
 8006444:	7fffffc0 	.word	0x7fffffc0

08006448 <HAL_ADC_Start_DMA>:
{
 8006448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800644c:	4b40      	ldr	r3, [pc, #256]	; (8006550 <HAL_ADC_Start_DMA+0x108>)
{
 800644e:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006450:	6800      	ldr	r0, [r0, #0]
{
 8006452:	460e      	mov	r6, r1
 8006454:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006456:	4298      	cmp	r0, r3
 8006458:	d069      	beq.n	800652e <HAL_ADC_Start_DMA+0xe6>
 800645a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800645e:	493d      	ldr	r1, [pc, #244]	; (8006554 <HAL_ADC_Start_DMA+0x10c>)
 8006460:	4a3d      	ldr	r2, [pc, #244]	; (8006558 <HAL_ADC_Start_DMA+0x110>)
 8006462:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 8006466:	4288      	cmp	r0, r1
 8006468:	bf08      	it	eq
 800646a:	4613      	moveq	r3, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800646c:	689b      	ldr	r3, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800646e:	f7ff fd00 	bl	8005e72 <LL_ADC_REG_IsConversionOngoing>
 8006472:	2800      	cmp	r0, #0
 8006474:	d165      	bne.n	8006542 <HAL_ADC_Start_DMA+0xfa>
    __HAL_LOCK(hadc);
 8006476:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800647a:	2a01      	cmp	r2, #1
 800647c:	d061      	beq.n	8006542 <HAL_ADC_Start_DMA+0xfa>
 800647e:	f003 081f 	and.w	r8, r3, #31
 8006482:	2301      	movs	r3, #1
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006484:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 8006488:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800648c:	d854      	bhi.n	8006538 <HAL_ADC_Start_DMA+0xf0>
 800648e:	f240 2321 	movw	r3, #545	; 0x221
 8006492:	fa23 f308 	lsr.w	r3, r3, r8
 8006496:	43db      	mvns	r3, r3
 8006498:	f013 0501 	ands.w	r5, r3, #1
 800649c:	d14c      	bne.n	8006538 <HAL_ADC_Start_DMA+0xf0>
      tmp_hal_status = ADC_Enable(hadc);
 800649e:	4620      	mov	r0, r4
 80064a0:	f7ff ff7c 	bl	800639c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d144      	bne.n	8006532 <HAL_ADC_Start_DMA+0xea>
        ADC_STATE_CLR_SET(hadc->State,
 80064a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80064aa:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80064ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80064b0:	f023 0301 	bic.w	r3, r3, #1
 80064b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064b8:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80064ba:	4b26      	ldr	r3, [pc, #152]	; (8006554 <HAL_ADC_Start_DMA+0x10c>)
 80064bc:	4299      	cmp	r1, r3
 80064be:	d042      	beq.n	8006546 <HAL_ADC_Start_DMA+0xfe>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80064c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80064c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80064c6:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80064c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80064ca:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80064ce:	d002      	beq.n	80064d6 <HAL_ADC_Start_DMA+0x8e>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80064d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064d2:	f023 0306 	bic.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80064d6:	65a3      	str	r3, [r4, #88]	; 0x58
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80064d8:	3140      	adds	r1, #64	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80064da:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80064dc:	4b1f      	ldr	r3, [pc, #124]	; (800655c <HAL_ADC_Start_DMA+0x114>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80064de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80064e0:	63c3      	str	r3, [r0, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80064e2:	4b1f      	ldr	r3, [pc, #124]	; (8006560 <HAL_ADC_Start_DMA+0x118>)
 80064e4:	6403      	str	r3, [r0, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80064e6:	4b1f      	ldr	r3, [pc, #124]	; (8006564 <HAL_ADC_Start_DMA+0x11c>)
 80064e8:	64c3      	str	r3, [r0, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80064ea:	231c      	movs	r3, #28
 80064ec:	f841 3c40 	str.w	r3, [r1, #-64]
        __HAL_UNLOCK(hadc);
 80064f0:	2300      	movs	r3, #0
 80064f2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80064f6:	f851 3c3c 	ldr.w	r3, [r1, #-60]
 80064fa:	f043 0310 	orr.w	r3, r3, #16
 80064fe:	f841 3c3c 	str.w	r3, [r1, #-60]
 8006502:	f851 3c34 	ldr.w	r3, [r1, #-52]
 8006506:	f023 0303 	bic.w	r3, r3, #3
 800650a:	4313      	orrs	r3, r2
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800650c:	4632      	mov	r2, r6
 800650e:	f841 3c34 	str.w	r3, [r1, #-52]
 8006512:	463b      	mov	r3, r7
 8006514:	f000 fe8a 	bl	800722c <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006518:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800651a:	6893      	ldr	r3, [r2, #8]
 800651c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006520:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006524:	f043 0304 	orr.w	r3, r3, #4
 8006528:	6093      	str	r3, [r2, #8]
}
 800652a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800652e:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <HAL_ADC_Start_DMA+0x110>)
 8006530:	e79c      	b.n	800646c <HAL_ADC_Start_DMA+0x24>
        __HAL_UNLOCK(hadc);
 8006532:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8006536:	e7f8      	b.n	800652a <HAL_ADC_Start_DMA+0xe2>
      __HAL_UNLOCK(hadc);
 8006538:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
 800653a:	2001      	movs	r0, #1
      __HAL_UNLOCK(hadc);
 800653c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8006540:	e7f3      	b.n	800652a <HAL_ADC_Start_DMA+0xe2>
    tmp_hal_status = HAL_BUSY;
 8006542:	2002      	movs	r0, #2
 8006544:	e7f1      	b.n	800652a <HAL_ADC_Start_DMA+0xe2>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006546:	f1b8 0f00 	cmp.w	r8, #0
 800654a:	d0b9      	beq.n	80064c0 <HAL_ADC_Start_DMA+0x78>
 800654c:	e7bc      	b.n	80064c8 <HAL_ADC_Start_DMA+0x80>
 800654e:	bf00      	nop
 8006550:	40022000 	.word	0x40022000
 8006554:	40022100 	.word	0x40022100
 8006558:	40022300 	.word	0x40022300
 800655c:	08005e8b 	.word	0x08005e8b
 8006560:	08005e7f 	.word	0x08005e7f
 8006564:	08005ef3 	.word	0x08005ef3

08006568 <ADC_Disable>:
{
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4604      	mov	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800656c:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800656e:	6883      	ldr	r3, [r0, #8]
 8006570:	f003 0302 	and.w	r3, r3, #2
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006574:	f7ff fc79 	bl	8005e6a <LL_ADC_IsEnabled>
 8006578:	b908      	cbnz	r0, 800657e <ADC_Disable+0x16>
  return HAL_OK;
 800657a:	2000      	movs	r0, #0
}
 800657c:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1fb      	bne.n	800657a <ADC_Disable+0x12>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006582:	6822      	ldr	r2, [r4, #0]
 8006584:	6893      	ldr	r3, [r2, #8]
 8006586:	f003 030d 	and.w	r3, r3, #13
 800658a:	2b01      	cmp	r3, #1
 800658c:	d115      	bne.n	80065ba <ADC_Disable+0x52>
  MODIFY_REG(ADCx->CR,
 800658e:	6893      	ldr	r3, [r2, #8]
 8006590:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006594:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006598:	f043 0302 	orr.w	r3, r3, #2
 800659c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800659e:	2303      	movs	r3, #3
 80065a0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80065a2:	f7ff fc33 	bl	8005e0c <HAL_GetTick>
 80065a6:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	07db      	lsls	r3, r3, #31
 80065ae:	d5e4      	bpl.n	800657a <ADC_Disable+0x12>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80065b0:	f7ff fc2c 	bl	8005e0c <HAL_GetTick>
 80065b4:	1b40      	subs	r0, r0, r5
 80065b6:	2802      	cmp	r0, #2
 80065b8:	d9f6      	bls.n	80065a8 <ADC_Disable+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 80065bc:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065be:	f043 0310 	orr.w	r3, r3, #16
 80065c2:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065c6:	f043 0301 	orr.w	r3, r3, #1
 80065ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80065cc:	e7d6      	b.n	800657c <ADC_Disable+0x14>

080065ce <HAL_ADC_Stop_DMA>:
{
 80065ce:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 80065d0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80065d4:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d035      	beq.n	8006646 <HAL_ADC_Stop_DMA+0x78>
 80065da:	2301      	movs	r3, #1
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80065dc:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 80065de:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80065e2:	f7ff fe75 	bl	80062d0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80065e6:	4605      	mov	r5, r0
 80065e8:	b9e0      	cbnz	r0, 8006624 <HAL_ADC_Stop_DMA+0x56>
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 80065ea:	6822      	ldr	r2, [r4, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80065ec:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 80065ee:	68d3      	ldr	r3, [r2, #12]
 80065f0:	f023 0303 	bic.w	r3, r3, #3
 80065f4:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80065f6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d107      	bne.n	800660e <HAL_ADC_Stop_DMA+0x40>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80065fe:	f000 ff33 	bl	8007468 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8006602:	4605      	mov	r5, r0
 8006604:	b118      	cbz	r0, 800660e <HAL_ADC_Stop_DMA+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006606:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800660c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800660e:	6822      	ldr	r2, [r4, #0]
      tmp_hal_status = ADC_Disable(hadc);
 8006610:	4620      	mov	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006612:	6853      	ldr	r3, [r2, #4]
 8006614:	f023 0310 	bic.w	r3, r3, #16
 8006618:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 800661a:	b945      	cbnz	r5, 800662e <HAL_ADC_Stop_DMA+0x60>
      tmp_hal_status = ADC_Disable(hadc);
 800661c:	f7ff ffa4 	bl	8006568 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8006620:	4605      	mov	r5, r0
 8006622:	b138      	cbz	r0, 8006634 <HAL_ADC_Stop_DMA+0x66>
  __HAL_UNLOCK(hadc);
 8006624:	2300      	movs	r3, #0
 8006626:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800662a:	4628      	mov	r0, r5
 800662c:	bd38      	pop	{r3, r4, r5, pc}
      (void)ADC_Disable(hadc);
 800662e:	f7ff ff9b 	bl	8006568 <ADC_Disable>
 8006632:	e7f7      	b.n	8006624 <HAL_ADC_Stop_DMA+0x56>
      ADC_STATE_CLR_SET(hadc->State,
 8006634:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006636:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800663a:	f023 0301 	bic.w	r3, r3, #1
 800663e:	f043 0301 	orr.w	r3, r3, #1
 8006642:	6563      	str	r3, [r4, #84]	; 0x54
 8006644:	e7ee      	b.n	8006624 <HAL_ADC_Stop_DMA+0x56>
  __HAL_LOCK(hadc);
 8006646:	2502      	movs	r5, #2
 8006648:	e7ef      	b.n	800662a <HAL_ADC_Stop_DMA+0x5c>
	...

0800664c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800664c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800664e:	4a44      	ldr	r2, [pc, #272]	; (8006760 <ADC_ConfigureBoostMode+0x114>)
{
 8006650:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006652:	6803      	ldr	r3, [r0, #0]
 8006654:	4293      	cmp	r3, r2
 8006656:	d003      	beq.n	8006660 <ADC_ConfigureBoostMode+0x14>
 8006658:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800665c:	4293      	cmp	r3, r2
 800665e:	d118      	bne.n	8006692 <ADC_ConfigureBoostMode+0x46>
 8006660:	4b40      	ldr	r3, [pc, #256]	; (8006764 <ADC_ConfigureBoostMode+0x118>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8006668:	bf14      	ite	ne
 800666a:	2301      	movne	r3, #1
 800666c:	2300      	moveq	r3, #0
 800666e:	b30b      	cbz	r3, 80066b4 <ADC_ConfigureBoostMode+0x68>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006670:	f002 fe7a 	bl	8009368 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006674:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8006676:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8006678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800667c:	d005      	beq.n	800668a <ADC_ConfigureBoostMode+0x3e>
 800667e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006682:	d008      	beq.n	8006696 <ADC_ConfigureBoostMode+0x4a>
 8006684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006688:	d106      	bne.n	8006698 <ADC_ConfigureBoostMode+0x4c>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800668a:	0c1b      	lsrs	r3, r3, #16
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800668c:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8006690:	e002      	b.n	8006698 <ADC_ConfigureBoostMode+0x4c>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006692:	4b35      	ldr	r3, [pc, #212]	; (8006768 <ADC_ConfigureBoostMode+0x11c>)
 8006694:	e7e5      	b.n	8006662 <ADC_ConfigureBoostMode+0x16>
        freq /= 4UL;
 8006696:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006698:	f7ff fbd0 	bl	8005e3c <HAL_GetREVID>
 800669c:	f241 0303 	movw	r3, #4099	; 0x1003
 80066a0:	4298      	cmp	r0, r3
 80066a2:	682b      	ldr	r3, [r5, #0]
 80066a4:	d841      	bhi.n	800672a <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 80066a6:	4a31      	ldr	r2, [pc, #196]	; (800676c <ADC_ConfigureBoostMode+0x120>)
 80066a8:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80066aa:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 80066ac:	d939      	bls.n	8006722 <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80066ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066b2:	e038      	b.n	8006726 <ADC_ConfigureBoostMode+0xda>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80066b4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80066b8:	f003 fe18 	bl	800a2ec <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80066bc:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80066be:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 80066c0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80066c4:	d00a      	beq.n	80066dc <ADC_ConfigureBoostMode+0x90>
 80066c6:	d812      	bhi.n	80066ee <ADC_ConfigureBoostMode+0xa2>
 80066c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80066cc:	d006      	beq.n	80066dc <ADC_ConfigureBoostMode+0x90>
 80066ce:	d808      	bhi.n	80066e2 <ADC_ConfigureBoostMode+0x96>
 80066d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066d4:	d002      	beq.n	80066dc <ADC_ConfigureBoostMode+0x90>
 80066d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066da:	d1dd      	bne.n	8006698 <ADC_ConfigureBoostMode+0x4c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80066dc:	0c9b      	lsrs	r3, r3, #18
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	e7d4      	b.n	800668c <ADC_ConfigureBoostMode+0x40>
    switch (hadc->Init.ClockPrescaler)
 80066e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066e6:	d0f9      	beq.n	80066dc <ADC_ConfigureBoostMode+0x90>
 80066e8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80066ec:	e7f5      	b.n	80066da <ADC_ConfigureBoostMode+0x8e>
 80066ee:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80066f2:	d012      	beq.n	800671a <ADC_ConfigureBoostMode+0xce>
 80066f4:	d807      	bhi.n	8006706 <ADC_ConfigureBoostMode+0xba>
 80066f6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80066fa:	d00c      	beq.n	8006716 <ADC_ConfigureBoostMode+0xca>
 80066fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006700:	d1ca      	bne.n	8006698 <ADC_ConfigureBoostMode+0x4c>
        freq /= 32UL;
 8006702:	0944      	lsrs	r4, r0, #5
        break;
 8006704:	e7c8      	b.n	8006698 <ADC_ConfigureBoostMode+0x4c>
    switch (hadc->Init.ClockPrescaler)
 8006706:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800670a:	d008      	beq.n	800671e <ADC_ConfigureBoostMode+0xd2>
 800670c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006710:	d1c2      	bne.n	8006698 <ADC_ConfigureBoostMode+0x4c>
        freq /= 256UL;
 8006712:	0a04      	lsrs	r4, r0, #8
        break;
 8006714:	e7c0      	b.n	8006698 <ADC_ConfigureBoostMode+0x4c>
        freq /= 16UL;
 8006716:	0904      	lsrs	r4, r0, #4
        break;
 8006718:	e7be      	b.n	8006698 <ADC_ConfigureBoostMode+0x4c>
        freq /= 64UL;
 800671a:	0984      	lsrs	r4, r0, #6
        break;
 800671c:	e7bc      	b.n	8006698 <ADC_ConfigureBoostMode+0x4c>
        freq /= 128UL;
 800671e:	09c4      	lsrs	r4, r0, #7
        break;
 8006720:	e7ba      	b.n	8006698 <ADC_ConfigureBoostMode+0x4c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006722:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006726:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006728:	bd38      	pop	{r3, r4, r5, pc}
    freq /= 2U; /* divider by 2 for Rev.V */
 800672a:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 800672c:	4a10      	ldr	r2, [pc, #64]	; (8006770 <ADC_ConfigureBoostMode+0x124>)
 800672e:	4294      	cmp	r4, r2
 8006730:	d803      	bhi.n	800673a <ADC_ConfigureBoostMode+0xee>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006738:	e7f5      	b.n	8006726 <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 800673a:	4a0e      	ldr	r2, [pc, #56]	; (8006774 <ADC_ConfigureBoostMode+0x128>)
 800673c:	4294      	cmp	r4, r2
 800673e:	d803      	bhi.n	8006748 <ADC_ConfigureBoostMode+0xfc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006746:	e7b2      	b.n	80066ae <ADC_ConfigureBoostMode+0x62>
    else if (freq <= 25000000UL)
 8006748:	4a0b      	ldr	r2, [pc, #44]	; (8006778 <ADC_ConfigureBoostMode+0x12c>)
 800674a:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	bf96      	itet	ls
 8006750:	f422 7240 	bicls.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006754:	f442 7240 	orrhi.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006758:	f442 7200 	orrls.w	r2, r2, #512	; 0x200
 800675c:	e7e3      	b.n	8006726 <ADC_ConfigureBoostMode+0xda>
 800675e:	bf00      	nop
 8006760:	40022000 	.word	0x40022000
 8006764:	40022300 	.word	0x40022300
 8006768:	58026300 	.word	0x58026300
 800676c:	01312d00 	.word	0x01312d00
 8006770:	005f5e10 	.word	0x005f5e10
 8006774:	00bebc20 	.word	0x00bebc20
 8006778:	017d7840 	.word	0x017d7840

0800677c <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 800677c:	2300      	movs	r3, #0
{
 800677e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (hadc == NULL)
 8006780:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8006782:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8006784:	2800      	cmp	r0, #0
 8006786:	f000 80c8 	beq.w	800691a <HAL_ADC_Init+0x19e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800678a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800678c:	b925      	cbnz	r5, 8006798 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 800678e:	f7fc fe11 	bl	80033b4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006792:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8006794:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006798:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800679a:	6883      	ldr	r3, [r0, #8]
 800679c:	009d      	lsls	r5, r3, #2
 800679e:	d505      	bpl.n	80067ac <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80067a0:	6883      	ldr	r3, [r0, #8]
 80067a2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80067a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80067aa:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80067ac:	6883      	ldr	r3, [r0, #8]
 80067ae:	00d9      	lsls	r1, r3, #3
 80067b0:	d504      	bpl.n	80067bc <HAL_ADC_Init+0x40>
 80067b2:	6883      	ldr	r3, [r0, #8]
 80067b4:	00da      	lsls	r2, r3, #3
 80067b6:	d515      	bpl.n	80067e4 <HAL_ADC_Init+0x68>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067b8:	2500      	movs	r5, #0
 80067ba:	e01c      	b.n	80067f6 <HAL_ADC_Init+0x7a>
  MODIFY_REG(ADCx->CR,
 80067bc:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80067be:	4a6d      	ldr	r2, [pc, #436]	; (8006974 <HAL_ADC_Init+0x1f8>)
 80067c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80067c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80067c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067cc:	6083      	str	r3, [r0, #8]
 80067ce:	4b6a      	ldr	r3, [pc, #424]	; (8006978 <HAL_ADC_Init+0x1fc>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80067d6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80067d8:	9b01      	ldr	r3, [sp, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0e9      	beq.n	80067b2 <HAL_ADC_Init+0x36>
      wait_loop_index--;
 80067de:	9b01      	ldr	r3, [sp, #4]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	e7f8      	b.n	80067d6 <HAL_ADC_Init+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80067e6:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067e8:	f043 0310 	orr.w	r3, r3, #16
 80067ec:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067f0:	f043 0301 	orr.w	r3, r3, #1
 80067f4:	65a3      	str	r3, [r4, #88]	; 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80067f6:	f7ff fb3c 	bl	8005e72 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80067fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80067fc:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8006800:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006802:	f040 8087 	bne.w	8006914 <HAL_ADC_Init+0x198>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006806:	2800      	cmp	r0, #0
 8006808:	f040 8084 	bne.w	8006914 <HAL_ADC_Init+0x198>
    ADC_STATE_CLR_SET(hadc->State,
 800680c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006810:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8006812:	f043 0302 	orr.w	r3, r3, #2
 8006816:	6563      	str	r3, [r4, #84]	; 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006818:	f7ff fb27 	bl	8005e6a <LL_ADC_IsEnabled>
 800681c:	bb30      	cbnz	r0, 800686c <HAL_ADC_Init+0xf0>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	4a56      	ldr	r2, [pc, #344]	; (800697c <HAL_ADC_Init+0x200>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d003      	beq.n	800682e <HAL_ADC_Init+0xb2>
 8006826:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800682a:	4293      	cmp	r3, r2
 800682c:	d15f      	bne.n	80068ee <HAL_ADC_Init+0x172>
 800682e:	4853      	ldr	r0, [pc, #332]	; (800697c <HAL_ADC_Init+0x200>)
 8006830:	f7ff fb1b 	bl	8005e6a <LL_ADC_IsEnabled>
 8006834:	4603      	mov	r3, r0
 8006836:	4852      	ldr	r0, [pc, #328]	; (8006980 <HAL_ADC_Init+0x204>)
 8006838:	f7ff fb17 	bl	8005e6a <LL_ADC_IsEnabled>
 800683c:	4303      	orrs	r3, r0
 800683e:	bf0c      	ite	eq
 8006840:	2001      	moveq	r0, #1
 8006842:	2000      	movne	r0, #0
 8006844:	b190      	cbz	r0, 800686c <HAL_ADC_Init+0xf0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006846:	6822      	ldr	r2, [r4, #0]
 8006848:	4b4c      	ldr	r3, [pc, #304]	; (800697c <HAL_ADC_Init+0x200>)
 800684a:	429a      	cmp	r2, r3
 800684c:	d056      	beq.n	80068fc <HAL_ADC_Init+0x180>
 800684e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006852:	484b      	ldr	r0, [pc, #300]	; (8006980 <HAL_ADC_Init+0x204>)
 8006854:	494b      	ldr	r1, [pc, #300]	; (8006984 <HAL_ADC_Init+0x208>)
 8006856:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 800685a:	4282      	cmp	r2, r0
 800685c:	bf08      	it	eq
 800685e:	460b      	moveq	r3, r1
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006860:	689a      	ldr	r2, [r3, #8]
 8006862:	6861      	ldr	r1, [r4, #4]
 8006864:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8006868:	430a      	orrs	r2, r1
 800686a:	609a      	str	r2, [r3, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800686c:	f7ff fae6 	bl	8005e3c <HAL_GetREVID>
 8006870:	f241 0303 	movw	r3, #4099	; 0x1003
 8006874:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006876:	4298      	cmp	r0, r3
 8006878:	7f21      	ldrb	r1, [r4, #28]
 800687a:	7d60      	ldrb	r0, [r4, #21]
 800687c:	68a3      	ldr	r3, [r4, #8]
 800687e:	d93f      	bls.n	8006900 <HAL_ADC_Init+0x184>
 8006880:	2b10      	cmp	r3, #16
 8006882:	d13d      	bne.n	8006900 <HAL_ADC_Init+0x184>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006884:	f042 031c 	orr.w	r3, r2, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006888:	2901      	cmp	r1, #1
                  hadc->Init.Overrun                                                    |
 800688a:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800688e:	bf08      	it	eq
 8006890:	6a22      	ldreq	r2, [r4, #32]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006892:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006896:	bf04      	itt	eq
 8006898:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800689c:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80068a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068a2:	b122      	cbz	r2, 80068ae <HAL_ADC_Init+0x132>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80068a4:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80068a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80068aa:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80068ac:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80068ae:	6820      	ldr	r0, [r4, #0]
 80068b0:	4a35      	ldr	r2, [pc, #212]	; (8006988 <HAL_ADC_Init+0x20c>)
 80068b2:	68c1      	ldr	r1, [r0, #12]
 80068b4:	400a      	ands	r2, r1
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60c3      	str	r3, [r0, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80068ba:	f7ff fada 	bl	8005e72 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80068be:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80068c0:	6893      	ldr	r3, [r2, #8]
 80068c2:	071b      	lsls	r3, r3, #28
 80068c4:	d52b      	bpl.n	800691e <HAL_ADC_Init+0x1a2>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80068c6:	68e3      	ldr	r3, [r4, #12]
 80068c8:	6822      	ldr	r2, [r4, #0]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d11e      	bne.n	800690c <HAL_ADC_Init+0x190>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80068ce:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80068d0:	69a3      	ldr	r3, [r4, #24]
 80068d2:	f021 010f 	bic.w	r1, r1, #15
 80068d6:	3b01      	subs	r3, #1
 80068d8:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80068da:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80068dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80068de:	f023 0303 	bic.w	r3, r3, #3
 80068e2:	f043 0301 	orr.w	r3, r3, #1
 80068e6:	6563      	str	r3, [r4, #84]	; 0x54
}
 80068e8:	4628      	mov	r0, r5
 80068ea:	b003      	add	sp, #12
 80068ec:	bd30      	pop	{r4, r5, pc}
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068ee:	4827      	ldr	r0, [pc, #156]	; (800698c <HAL_ADC_Init+0x210>)
 80068f0:	f7ff fabb 	bl	8005e6a <LL_ADC_IsEnabled>
 80068f4:	fab0 f080 	clz	r0, r0
 80068f8:	0940      	lsrs	r0, r0, #5
 80068fa:	e7a3      	b.n	8006844 <HAL_ADC_Init+0xc8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80068fc:	4b21      	ldr	r3, [pc, #132]	; (8006984 <HAL_ADC_Init+0x208>)
 80068fe:	e7af      	b.n	8006860 <HAL_ADC_Init+0xe4>
                  hadc->Init.Overrun                                                    |
 8006900:	4313      	orrs	r3, r2
 8006902:	e7c1      	b.n	8006888 <HAL_ADC_Init+0x10c>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006904:	6913      	ldr	r3, [r2, #16]
 8006906:	f023 0301 	bic.w	r3, r3, #1
 800690a:	e028      	b.n	800695e <HAL_ADC_Init+0x1e2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800690c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800690e:	f023 030f 	bic.w	r3, r3, #15
 8006912:	e7e2      	b.n	80068da <HAL_ADC_Init+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006914:	f043 0310 	orr.w	r3, r3, #16
 8006918:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 800691a:	2501      	movs	r5, #1
 800691c:	e7e4      	b.n	80068e8 <HAL_ADC_Init+0x16c>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800691e:	2800      	cmp	r0, #0
 8006920:	d1d1      	bne.n	80068c6 <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006922:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006924:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006926:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800692a:	f023 0303 	bic.w	r3, r3, #3
 800692e:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 8006932:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006934:	430b      	orrs	r3, r1
 8006936:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8006938:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800693c:	2b01      	cmp	r3, #1
 800693e:	d1e1      	bne.n	8006904 <HAL_ADC_Init+0x188>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006940:	6910      	ldr	r0, [r2, #16]
 8006942:	e9d4 3110 	ldrd	r3, r1, [r4, #64]	; 0x40
 8006946:	430b      	orrs	r3, r1
 8006948:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800694a:	f043 0301 	orr.w	r3, r3, #1
 800694e:	430b      	orrs	r3, r1
 8006950:	490f      	ldr	r1, [pc, #60]	; (8006990 <HAL_ADC_Init+0x214>)
 8006952:	4001      	ands	r1, r0
 8006954:	430b      	orrs	r3, r1
 8006956:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006958:	3901      	subs	r1, #1
 800695a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800695e:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8006960:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006962:	6913      	ldr	r3, [r2, #16]
 8006964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006966:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800696a:	430b      	orrs	r3, r1
 800696c:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 800696e:	f7ff fe6d 	bl	800664c <ADC_ConfigureBoostMode>
 8006972:	e7a8      	b.n	80068c6 <HAL_ADC_Init+0x14a>
 8006974:	00030d40 	.word	0x00030d40
 8006978:	24000000 	.word	0x24000000
 800697c:	40022000 	.word	0x40022000
 8006980:	40022100 	.word	0x40022100
 8006984:	40022300 	.word	0x40022300
 8006988:	fff0c003 	.word	0xfff0c003
 800698c:	58026000 	.word	0x58026000
 8006990:	fc00f81e 	.word	0xfc00f81e

08006994 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006994:	6880      	ldr	r0, [r0, #8]
}
 8006996:	f000 0001 	and.w	r0, r0, #1
 800699a:	4770      	bx	lr

0800699c <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800699c:	6880      	ldr	r0, [r0, #8]
}
 800699e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80069a2:	4770      	bx	lr

080069a4 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80069a4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 80069a8:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80069aa:	2a01      	cmp	r2, #1
{
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	b09a      	sub	sp, #104	; 0x68
  __HAL_LOCK(hadc);
 80069b0:	f000 808b 	beq.w	8006aca <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80069b4:	2201      	movs	r2, #1
 80069b6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80069ba:	4a45      	ldr	r2, [pc, #276]	; (8006ad0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80069bc:	6800      	ldr	r0, [r0, #0]
 80069be:	4290      	cmp	r0, r2
 80069c0:	bf0c      	ite	eq
 80069c2:	f502 7280 	addeq.w	r2, r2, #256	; 0x100
 80069c6:	2200      	movne	r2, #0
 80069c8:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 80069ca:	9801      	ldr	r0, [sp, #4]
 80069cc:	b940      	cbnz	r0, 80069e0 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80069d0:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50

    return HAL_ERROR;
 80069d4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069d6:	f042 0220 	orr.w	r2, r2, #32
 80069da:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80069dc:	b01a      	add	sp, #104	; 0x68
 80069de:	bd70      	pop	{r4, r5, r6, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80069e0:	f7ff ffdc 	bl	800699c <LL_ADC_REG_IsConversionOngoing>
 80069e4:	4602      	mov	r2, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80069e6:	6818      	ldr	r0, [r3, #0]
 80069e8:	f7ff ffd8 	bl	800699c <LL_ADC_REG_IsConversionOngoing>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d166      	bne.n	8006abe <HAL_ADCEx_MultiModeConfigChannel+0x11a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80069f0:	2a00      	cmp	r2, #0
 80069f2:	d164      	bne.n	8006abe <HAL_ADCEx_MultiModeConfigChannel+0x11a>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	4a36      	ldr	r2, [pc, #216]	; (8006ad0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80069f8:	4290      	cmp	r0, r2
 80069fa:	d029      	beq.n	8006a50 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80069fc:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8006a00:	4d34      	ldr	r5, [pc, #208]	; (8006ad4 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8006a02:	4c35      	ldr	r4, [pc, #212]	; (8006ad8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8006a04:	f502 4286 	add.w	r2, r2, #17152	; 0x4300
 8006a08:	42a8      	cmp	r0, r5
 8006a0a:	bf08      	it	eq
 8006a0c:	4622      	moveq	r2, r4
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a0e:	680c      	ldr	r4, [r1, #0]
 8006a10:	4d2f      	ldr	r5, [pc, #188]	; (8006ad0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8006a12:	2c00      	cmp	r4, #0
 8006a14:	d030      	beq.n	8006a78 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006a16:	6894      	ldr	r4, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a18:	42a8      	cmp	r0, r5
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006a1a:	684e      	ldr	r6, [r1, #4]
 8006a1c:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
 8006a20:	ea44 0406 	orr.w	r4, r4, r6
 8006a24:	6094      	str	r4, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a26:	d002      	beq.n	8006a2e <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8006a28:	4c2a      	ldr	r4, [pc, #168]	; (8006ad4 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8006a2a:	42a0      	cmp	r0, r4
 8006a2c:	d112      	bne.n	8006a54 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
 8006a2e:	4828      	ldr	r0, [pc, #160]	; (8006ad0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8006a30:	f7ff ffb0 	bl	8006994 <LL_ADC_IsEnabled>
 8006a34:	4604      	mov	r4, r0
 8006a36:	4827      	ldr	r0, [pc, #156]	; (8006ad4 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8006a38:	f7ff ffac 	bl	8006994 <LL_ADC_IsEnabled>
 8006a3c:	4320      	orrs	r0, r4
 8006a3e:	bf0c      	ite	eq
 8006a40:	2001      	moveq	r0, #1
 8006a42:	2000      	movne	r0, #0
 8006a44:	b968      	cbnz	r0, 8006a62 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a46:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return tmp_hal_status;
 8006a4e:	e7c5      	b.n	80069dc <HAL_ADCEx_MultiModeConfigChannel+0x38>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006a50:	4a21      	ldr	r2, [pc, #132]	; (8006ad8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8006a52:	e7dc      	b.n	8006a0e <HAL_ADCEx_MultiModeConfigChannel+0x6a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a54:	4821      	ldr	r0, [pc, #132]	; (8006adc <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8006a56:	f7ff ff9d 	bl	8006994 <LL_ADC_IsEnabled>
 8006a5a:	fab0 f080 	clz	r0, r0
 8006a5e:	0940      	lsrs	r0, r0, #5
 8006a60:	e7f0      	b.n	8006a44 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
        MODIFY_REG(tmpADC_Common->CCR,
 8006a62:	6808      	ldr	r0, [r1, #0]
 8006a64:	6894      	ldr	r4, [r2, #8]
 8006a66:	6889      	ldr	r1, [r1, #8]
 8006a68:	4301      	orrs	r1, r0
 8006a6a:	f424 6071 	bic.w	r0, r4, #3856	; 0xf10
 8006a6e:	f020 000f 	bic.w	r0, r0, #15
 8006a72:	4301      	orrs	r1, r0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006a74:	6091      	str	r1, [r2, #8]
 8006a76:	e7e6      	b.n	8006a46 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006a78:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a7a:	42a8      	cmp	r0, r5
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006a7c:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8006a80:	6091      	str	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a82:	d002      	beq.n	8006a8a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
 8006a84:	4913      	ldr	r1, [pc, #76]	; (8006ad4 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8006a86:	4288      	cmp	r0, r1
 8006a88:	d112      	bne.n	8006ab0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
 8006a8a:	4811      	ldr	r0, [pc, #68]	; (8006ad0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8006a8c:	f7ff ff82 	bl	8006994 <LL_ADC_IsEnabled>
 8006a90:	4601      	mov	r1, r0
 8006a92:	4810      	ldr	r0, [pc, #64]	; (8006ad4 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8006a94:	f7ff ff7e 	bl	8006994 <LL_ADC_IsEnabled>
 8006a98:	4301      	orrs	r1, r0
 8006a9a:	bf0c      	ite	eq
 8006a9c:	2001      	moveq	r0, #1
 8006a9e:	2000      	movne	r0, #0
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d0d0      	beq.n	8006a46 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006aa4:	6891      	ldr	r1, [r2, #8]
 8006aa6:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8006aaa:	f021 010f 	bic.w	r1, r1, #15
 8006aae:	e7e1      	b.n	8006a74 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ab0:	480a      	ldr	r0, [pc, #40]	; (8006adc <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8006ab2:	f7ff ff6f 	bl	8006994 <LL_ADC_IsEnabled>
 8006ab6:	fab0 f080 	clz	r0, r0
 8006aba:	0940      	lsrs	r0, r0, #5
 8006abc:	e7f0      	b.n	8006aa0 <HAL_ADCEx_MultiModeConfigChannel+0xfc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006abe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006ac0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ac2:	f042 0220 	orr.w	r2, r2, #32
 8006ac6:	655a      	str	r2, [r3, #84]	; 0x54
 8006ac8:	e7be      	b.n	8006a48 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
  __HAL_LOCK(hadc);
 8006aca:	2002      	movs	r0, #2
 8006acc:	e786      	b.n	80069dc <HAL_ADCEx_MultiModeConfigChannel+0x38>
 8006ace:	bf00      	nop
 8006ad0:	40022000 	.word	0x40022000
 8006ad4:	40022100 	.word	0x40022100
 8006ad8:	40022300 	.word	0x40022300
 8006adc:	58026000 	.word	0x58026000

08006ae0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ae0:	4a07      	ldr	r2, [pc, #28]	; (8006b00 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ae2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ae4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ae6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006aea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006aee:	041b      	lsls	r3, r3, #16
 8006af0:	0c1b      	lsrs	r3, r3, #16
 8006af2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8006afa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8006afc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006afe:	4770      	bx	lr
 8006b00:	e000ed00 	.word	0xe000ed00

08006b04 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b04:	4b16      	ldr	r3, [pc, #88]	; (8006b60 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b06:	b570      	push	{r4, r5, r6, lr}
 8006b08:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b0a:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b0e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b12:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b16:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b18:	2d04      	cmp	r5, #4
 8006b1a:	bf28      	it	cs
 8006b1c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b1e:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b20:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b24:	bf8c      	ite	hi
 8006b26:	3c03      	subhi	r4, #3
 8006b28:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8006b2a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b2c:	ea21 0303 	bic.w	r3, r1, r3
 8006b30:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b34:	fa06 f404 	lsl.w	r4, r6, r4
 8006b38:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b3c:	ea43 0304 	orr.w	r3, r3, r4
 8006b40:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006b44:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8006b46:	db06      	blt.n	8006b56 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b48:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006b4c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006b50:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006b54:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b56:	f000 000f 	and.w	r0, r0, #15
 8006b5a:	4a02      	ldr	r2, [pc, #8]	; (8006b64 <HAL_NVIC_SetPriority+0x60>)
 8006b5c:	5413      	strb	r3, [r2, r0]
 8006b5e:	e7f9      	b.n	8006b54 <HAL_NVIC_SetPriority+0x50>
 8006b60:	e000ed00 	.word	0xe000ed00
 8006b64:	e000ed14 	.word	0xe000ed14

08006b68 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	db08      	blt.n	8006b7e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b6c:	0942      	lsrs	r2, r0, #5
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f000 001f 	and.w	r0, r0, #31
 8006b74:	fa03 f000 	lsl.w	r0, r3, r0
 8006b78:	4b01      	ldr	r3, [pc, #4]	; (8006b80 <HAL_NVIC_EnableIRQ+0x18>)
 8006b7a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006b7e:	4770      	bx	lr
 8006b80:	e000e100 	.word	0xe000e100

08006b84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b84:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b86:	4d5c      	ldr	r5, [pc, #368]	; (8006cf8 <DMA_SetConfig+0x174>)
 8006b88:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b8a:	6d87      	ldr	r7, [r0, #88]	; 0x58
 8006b8c:	46ac      	mov	ip, r5
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b8e:	42ac      	cmp	r4, r5
 8006b90:	d045      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006b92:	4e5a      	ldr	r6, [pc, #360]	; (8006cfc <DMA_SetConfig+0x178>)
 8006b94:	42b4      	cmp	r4, r6
 8006b96:	d042      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006b98:	3618      	adds	r6, #24
 8006b9a:	42b4      	cmp	r4, r6
 8006b9c:	d03f      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006b9e:	3618      	adds	r6, #24
 8006ba0:	42b4      	cmp	r4, r6
 8006ba2:	d03c      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006ba4:	3618      	adds	r6, #24
 8006ba6:	42b4      	cmp	r4, r6
 8006ba8:	d039      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006baa:	3618      	adds	r6, #24
 8006bac:	42b4      	cmp	r4, r6
 8006bae:	d036      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006bb0:	3618      	adds	r6, #24
 8006bb2:	42b4      	cmp	r4, r6
 8006bb4:	d033      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006bb6:	3618      	adds	r6, #24
 8006bb8:	42b4      	cmp	r4, r6
 8006bba:	d030      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006bbc:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8006bc0:	42b4      	cmp	r4, r6
 8006bc2:	d02c      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006bc4:	3618      	adds	r6, #24
 8006bc6:	42b4      	cmp	r4, r6
 8006bc8:	d029      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006bca:	3618      	adds	r6, #24
 8006bcc:	42b4      	cmp	r4, r6
 8006bce:	d026      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006bd0:	3618      	adds	r6, #24
 8006bd2:	42b4      	cmp	r4, r6
 8006bd4:	d023      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006bd6:	3618      	adds	r6, #24
 8006bd8:	42b4      	cmp	r4, r6
 8006bda:	d020      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006bdc:	3618      	adds	r6, #24
 8006bde:	42b4      	cmp	r4, r6
 8006be0:	d01d      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006be2:	3618      	adds	r6, #24
 8006be4:	42b4      	cmp	r4, r6
 8006be6:	d01a      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006be8:	3618      	adds	r6, #24
 8006bea:	42b4      	cmp	r4, r6
 8006bec:	d017      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006bee:	4e44      	ldr	r6, [pc, #272]	; (8006d00 <DMA_SetConfig+0x17c>)
 8006bf0:	42b4      	cmp	r4, r6
 8006bf2:	d014      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006bf4:	3614      	adds	r6, #20
 8006bf6:	42b4      	cmp	r4, r6
 8006bf8:	d011      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006bfa:	3614      	adds	r6, #20
 8006bfc:	42b4      	cmp	r4, r6
 8006bfe:	d00e      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006c00:	3614      	adds	r6, #20
 8006c02:	42b4      	cmp	r4, r6
 8006c04:	d00b      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006c06:	3614      	adds	r6, #20
 8006c08:	42b4      	cmp	r4, r6
 8006c0a:	d008      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006c0c:	3614      	adds	r6, #20
 8006c0e:	42b4      	cmp	r4, r6
 8006c10:	d005      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006c12:	3614      	adds	r6, #20
 8006c14:	42b4      	cmp	r4, r6
 8006c16:	d002      	beq.n	8006c1e <DMA_SetConfig+0x9a>
 8006c18:	3614      	adds	r6, #20
 8006c1a:	42b4      	cmp	r4, r6
 8006c1c:	d167      	bne.n	8006cee <DMA_SetConfig+0x16a>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c1e:	e9d0 6519 	ldrd	r6, r5, [r0, #100]	; 0x64
 8006c22:	6075      	str	r5, [r6, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006c24:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 8006c26:	b116      	cbz	r6, 8006c2e <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c28:	e9d0 651c 	ldrd	r6, r5, [r0, #112]	; 0x70
 8006c2c:	6075      	str	r5, [r6, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c2e:	4564      	cmp	r4, ip
 8006c30:	d037      	beq.n	8006ca2 <DMA_SetConfig+0x11e>
 8006c32:	4d32      	ldr	r5, [pc, #200]	; (8006cfc <DMA_SetConfig+0x178>)
 8006c34:	42ac      	cmp	r4, r5
 8006c36:	d034      	beq.n	8006ca2 <DMA_SetConfig+0x11e>
 8006c38:	3518      	adds	r5, #24
 8006c3a:	42ac      	cmp	r4, r5
 8006c3c:	d031      	beq.n	8006ca2 <DMA_SetConfig+0x11e>
 8006c3e:	3518      	adds	r5, #24
 8006c40:	42ac      	cmp	r4, r5
 8006c42:	d02e      	beq.n	8006ca2 <DMA_SetConfig+0x11e>
 8006c44:	3518      	adds	r5, #24
 8006c46:	42ac      	cmp	r4, r5
 8006c48:	d02b      	beq.n	8006ca2 <DMA_SetConfig+0x11e>
 8006c4a:	3518      	adds	r5, #24
 8006c4c:	42ac      	cmp	r4, r5
 8006c4e:	d028      	beq.n	8006ca2 <DMA_SetConfig+0x11e>
 8006c50:	3518      	adds	r5, #24
 8006c52:	42ac      	cmp	r4, r5
 8006c54:	d025      	beq.n	8006ca2 <DMA_SetConfig+0x11e>
 8006c56:	3518      	adds	r5, #24
 8006c58:	42ac      	cmp	r4, r5
 8006c5a:	d022      	beq.n	8006ca2 <DMA_SetConfig+0x11e>
 8006c5c:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8006c60:	42ac      	cmp	r4, r5
 8006c62:	d01e      	beq.n	8006ca2 <DMA_SetConfig+0x11e>
 8006c64:	3518      	adds	r5, #24
 8006c66:	42ac      	cmp	r4, r5
 8006c68:	d01b      	beq.n	8006ca2 <DMA_SetConfig+0x11e>
 8006c6a:	3518      	adds	r5, #24
 8006c6c:	42ac      	cmp	r4, r5
 8006c6e:	d018      	beq.n	8006ca2 <DMA_SetConfig+0x11e>
 8006c70:	3518      	adds	r5, #24
 8006c72:	42ac      	cmp	r4, r5
 8006c74:	d015      	beq.n	8006ca2 <DMA_SetConfig+0x11e>
 8006c76:	3518      	adds	r5, #24
 8006c78:	42ac      	cmp	r4, r5
 8006c7a:	d012      	beq.n	8006ca2 <DMA_SetConfig+0x11e>
 8006c7c:	3518      	adds	r5, #24
 8006c7e:	42ac      	cmp	r4, r5
 8006c80:	d00f      	beq.n	8006ca2 <DMA_SetConfig+0x11e>
 8006c82:	3518      	adds	r5, #24
 8006c84:	42ac      	cmp	r4, r5
 8006c86:	d00c      	beq.n	8006ca2 <DMA_SetConfig+0x11e>
 8006c88:	3518      	adds	r5, #24
 8006c8a:	42ac      	cmp	r4, r5
 8006c8c:	d009      	beq.n	8006ca2 <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006c8e:	4d1c      	ldr	r5, [pc, #112]	; (8006d00 <DMA_SetConfig+0x17c>)
 8006c90:	42ac      	cmp	r4, r5
 8006c92:	d117      	bne.n	8006cc4 <DMA_SetConfig+0x140>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c94:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8006c96:	f005 061f 	and.w	r6, r5, #31
 8006c9a:	2501      	movs	r5, #1
 8006c9c:	40b5      	lsls	r5, r6
 8006c9e:	607d      	str	r5, [r7, #4]
 8006ca0:	e009      	b.n	8006cb6 <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ca2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8006ca4:	f005 061f 	and.w	r6, r5, #31
 8006ca8:	253f      	movs	r5, #63	; 0x3f
 8006caa:	40b5      	lsls	r5, r6
 8006cac:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006cae:	6825      	ldr	r5, [r4, #0]
 8006cb0:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8006cb4:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006cb6:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006cb8:	6883      	ldr	r3, [r0, #8]
 8006cba:	2b40      	cmp	r3, #64	; 0x40
 8006cbc:	d118      	bne.n	8006cf0 <DMA_SetConfig+0x16c>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006cbe:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006cc0:	60e1      	str	r1, [r4, #12]
 8006cc2:	e014      	b.n	8006cee <DMA_SetConfig+0x16a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006cc4:	4d0f      	ldr	r5, [pc, #60]	; (8006d04 <DMA_SetConfig+0x180>)
 8006cc6:	42ac      	cmp	r4, r5
 8006cc8:	d0e4      	beq.n	8006c94 <DMA_SetConfig+0x110>
 8006cca:	3514      	adds	r5, #20
 8006ccc:	42ac      	cmp	r4, r5
 8006cce:	d0e1      	beq.n	8006c94 <DMA_SetConfig+0x110>
 8006cd0:	3514      	adds	r5, #20
 8006cd2:	42ac      	cmp	r4, r5
 8006cd4:	d0de      	beq.n	8006c94 <DMA_SetConfig+0x110>
 8006cd6:	3514      	adds	r5, #20
 8006cd8:	42ac      	cmp	r4, r5
 8006cda:	d0db      	beq.n	8006c94 <DMA_SetConfig+0x110>
 8006cdc:	3514      	adds	r5, #20
 8006cde:	42ac      	cmp	r4, r5
 8006ce0:	d0d8      	beq.n	8006c94 <DMA_SetConfig+0x110>
 8006ce2:	3514      	adds	r5, #20
 8006ce4:	42ac      	cmp	r4, r5
 8006ce6:	d0d5      	beq.n	8006c94 <DMA_SetConfig+0x110>
 8006ce8:	3514      	adds	r5, #20
 8006cea:	42ac      	cmp	r4, r5
 8006cec:	d0d2      	beq.n	8006c94 <DMA_SetConfig+0x110>
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006cf0:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006cf2:	60e2      	str	r2, [r4, #12]
}
 8006cf4:	e7fb      	b.n	8006cee <DMA_SetConfig+0x16a>
 8006cf6:	bf00      	nop
 8006cf8:	40020010 	.word	0x40020010
 8006cfc:	40020028 	.word	0x40020028
 8006d00:	58025408 	.word	0x58025408
 8006d04:	5802541c 	.word	0x5802541c

08006d08 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d08:	6803      	ldr	r3, [r0, #0]
 8006d0a:	4a24      	ldr	r2, [pc, #144]	; (8006d9c <DMA_CalcBaseAndBitshift+0x94>)
 8006d0c:	4293      	cmp	r3, r2
{
 8006d0e:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d10:	d032      	beq.n	8006d78 <DMA_CalcBaseAndBitshift+0x70>
 8006d12:	3218      	adds	r2, #24
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d02f      	beq.n	8006d78 <DMA_CalcBaseAndBitshift+0x70>
 8006d18:	3218      	adds	r2, #24
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d02c      	beq.n	8006d78 <DMA_CalcBaseAndBitshift+0x70>
 8006d1e:	3218      	adds	r2, #24
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d029      	beq.n	8006d78 <DMA_CalcBaseAndBitshift+0x70>
 8006d24:	3218      	adds	r2, #24
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d026      	beq.n	8006d78 <DMA_CalcBaseAndBitshift+0x70>
 8006d2a:	3218      	adds	r2, #24
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d023      	beq.n	8006d78 <DMA_CalcBaseAndBitshift+0x70>
 8006d30:	3218      	adds	r2, #24
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d020      	beq.n	8006d78 <DMA_CalcBaseAndBitshift+0x70>
 8006d36:	3218      	adds	r2, #24
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d01d      	beq.n	8006d78 <DMA_CalcBaseAndBitshift+0x70>
 8006d3c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d019      	beq.n	8006d78 <DMA_CalcBaseAndBitshift+0x70>
 8006d44:	3218      	adds	r2, #24
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d016      	beq.n	8006d78 <DMA_CalcBaseAndBitshift+0x70>
 8006d4a:	3218      	adds	r2, #24
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d013      	beq.n	8006d78 <DMA_CalcBaseAndBitshift+0x70>
 8006d50:	3218      	adds	r2, #24
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d010      	beq.n	8006d78 <DMA_CalcBaseAndBitshift+0x70>
 8006d56:	3218      	adds	r2, #24
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00d      	beq.n	8006d78 <DMA_CalcBaseAndBitshift+0x70>
 8006d5c:	3218      	adds	r2, #24
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00a      	beq.n	8006d78 <DMA_CalcBaseAndBitshift+0x70>
 8006d62:	3218      	adds	r2, #24
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d007      	beq.n	8006d78 <DMA_CalcBaseAndBitshift+0x70>
 8006d68:	3218      	adds	r2, #24
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d004      	beq.n	8006d78 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006d6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006d72:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8006d74:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8006d76:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	2118      	movs	r1, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006d7c:	4c08      	ldr	r4, [pc, #32]	; (8006da0 <DMA_CalcBaseAndBitshift+0x98>)
 8006d7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d82:	3a10      	subs	r2, #16
 8006d84:	f023 0303 	bic.w	r3, r3, #3
 8006d88:	fbb2 f2f1 	udiv	r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006d8c:	f002 0107 	and.w	r1, r2, #7
    if (stream_number > 3U)
 8006d90:	2a03      	cmp	r2, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006d92:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006d94:	bf88      	it	hi
 8006d96:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006d98:	65c1      	str	r1, [r0, #92]	; 0x5c
 8006d9a:	e7ea      	b.n	8006d72 <DMA_CalcBaseAndBitshift+0x6a>
 8006d9c:	40020010 	.word	0x40020010
 8006da0:	08015e60 	.word	0x08015e60

08006da4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006da4:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006da6:	491f      	ldr	r1, [pc, #124]	; (8006e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8006da8:	b2d3      	uxtb	r3, r2
 8006daa:	428a      	cmp	r2, r1
 8006dac:	d024      	beq.n	8006df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006dae:	3114      	adds	r1, #20
 8006db0:	428a      	cmp	r2, r1
 8006db2:	d021      	beq.n	8006df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006db4:	3114      	adds	r1, #20
 8006db6:	428a      	cmp	r2, r1
 8006db8:	d01e      	beq.n	8006df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006dba:	3114      	adds	r1, #20
 8006dbc:	428a      	cmp	r2, r1
 8006dbe:	d01b      	beq.n	8006df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006dc0:	3114      	adds	r1, #20
 8006dc2:	428a      	cmp	r2, r1
 8006dc4:	d018      	beq.n	8006df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006dc6:	3114      	adds	r1, #20
 8006dc8:	428a      	cmp	r2, r1
 8006dca:	d015      	beq.n	8006df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006dcc:	3114      	adds	r1, #20
 8006dce:	428a      	cmp	r2, r1
 8006dd0:	d012      	beq.n	8006df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006dd2:	3114      	adds	r1, #20
 8006dd4:	428a      	cmp	r2, r1
 8006dd6:	d00f      	beq.n	8006df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006dd8:	2118      	movs	r1, #24
 8006dda:	3b10      	subs	r3, #16
 8006ddc:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006de0:	4911      	ldr	r1, [pc, #68]	; (8006e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8006de2:	4411      	add	r1, r2
 8006de4:	29a8      	cmp	r1, #168	; 0xa8
 8006de6:	d91a      	bls.n	8006e1e <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006de8:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8006dec:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
 8006df0:	0092      	lsls	r2, r2, #2
 8006df2:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006df4:	4a0d      	ldr	r2, [pc, #52]	; (8006e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8006df6:	e00a      	b.n	8006e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006df8:	2214      	movs	r2, #20
 8006dfa:	3b08      	subs	r3, #8
 8006dfc:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006e00:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
 8006e04:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
 8006e08:	0092      	lsls	r2, r2, #2
 8006e0a:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006e0c:	4a08      	ldr	r2, [pc, #32]	; (8006e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006e0e:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006e10:	f003 031f 	and.w	r3, r3, #31
 8006e14:	2201      	movs	r2, #1
 8006e16:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1a:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 8006e1c:	4770      	bx	lr
      stream_number += 8U;
 8006e1e:	3308      	adds	r3, #8
 8006e20:	e7e2      	b.n	8006de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 8006e22:	bf00      	nop
 8006e24:	58025408 	.word	0x58025408
 8006e28:	bffdfbf0 	.word	0xbffdfbf0
 8006e2c:	40020880 	.word	0x40020880
 8006e30:	58025880 	.word	0x58025880

08006e34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006e34:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006e36:	1e51      	subs	r1, r2, #1
 8006e38:	2907      	cmp	r1, #7
{
 8006e3a:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006e3c:	d821      	bhi.n	8006e82 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006e3e:	6803      	ldr	r3, [r0, #0]
 8006e40:	4c13      	ldr	r4, [pc, #76]	; (8006e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 8006e42:	42a3      	cmp	r3, r4
 8006e44:	d01e      	beq.n	8006e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006e46:	3414      	adds	r4, #20
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	d01b      	beq.n	8006e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006e4c:	3414      	adds	r4, #20
 8006e4e:	42a3      	cmp	r3, r4
 8006e50:	d018      	beq.n	8006e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006e52:	3414      	adds	r4, #20
 8006e54:	42a3      	cmp	r3, r4
 8006e56:	d015      	beq.n	8006e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006e58:	3414      	adds	r4, #20
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	d012      	beq.n	8006e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006e5e:	3414      	adds	r4, #20
 8006e60:	42a3      	cmp	r3, r4
 8006e62:	d00f      	beq.n	8006e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006e64:	3414      	adds	r4, #20
 8006e66:	42a3      	cmp	r3, r4
 8006e68:	d00c      	beq.n	8006e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006e6a:	3414      	adds	r4, #20
 8006e6c:	42a3      	cmp	r3, r4
 8006e6e:	d009      	beq.n	8006e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e70:	4b08      	ldr	r3, [pc, #32]	; (8006e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 8006e72:	4413      	add	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006e78:	4b07      	ldr	r3, [pc, #28]	; (8006e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006e7a:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	408b      	lsls	r3, r1
 8006e80:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 8006e82:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e84:	4b05      	ldr	r3, [pc, #20]	; (8006e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006e8c:	4b04      	ldr	r3, [pc, #16]	; (8006ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8006e8e:	e7f4      	b.n	8006e7a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x46>
 8006e90:	58025408 	.word	0x58025408
 8006e94:	1000823f 	.word	0x1000823f
 8006e98:	40020940 	.word	0x40020940
 8006e9c:	1600963f 	.word	0x1600963f
 8006ea0:	58025940 	.word	0x58025940

08006ea4 <HAL_DMA_Init>:
{
 8006ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006ea8:	f7fe ffb0 	bl	8005e0c <HAL_GetTick>
 8006eac:	4606      	mov	r6, r0
  if(hdma == NULL)
 8006eae:	2c00      	cmp	r4, #0
 8006eb0:	f000 8165 	beq.w	800717e <HAL_DMA_Init+0x2da>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	4db3      	ldr	r5, [pc, #716]	; (8007184 <HAL_DMA_Init+0x2e0>)
 8006eb8:	42ab      	cmp	r3, r5
 8006eba:	d06a      	beq.n	8006f92 <HAL_DMA_Init+0xee>
 8006ebc:	4ab2      	ldr	r2, [pc, #712]	; (8007188 <HAL_DMA_Init+0x2e4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d067      	beq.n	8006f92 <HAL_DMA_Init+0xee>
 8006ec2:	3218      	adds	r2, #24
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d064      	beq.n	8006f92 <HAL_DMA_Init+0xee>
 8006ec8:	3218      	adds	r2, #24
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d061      	beq.n	8006f92 <HAL_DMA_Init+0xee>
 8006ece:	3218      	adds	r2, #24
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d05e      	beq.n	8006f92 <HAL_DMA_Init+0xee>
 8006ed4:	3218      	adds	r2, #24
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d05b      	beq.n	8006f92 <HAL_DMA_Init+0xee>
 8006eda:	3218      	adds	r2, #24
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d058      	beq.n	8006f92 <HAL_DMA_Init+0xee>
 8006ee0:	3218      	adds	r2, #24
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d055      	beq.n	8006f92 <HAL_DMA_Init+0xee>
 8006ee6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d051      	beq.n	8006f92 <HAL_DMA_Init+0xee>
 8006eee:	3218      	adds	r2, #24
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d04e      	beq.n	8006f92 <HAL_DMA_Init+0xee>
 8006ef4:	3218      	adds	r2, #24
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d04b      	beq.n	8006f92 <HAL_DMA_Init+0xee>
 8006efa:	3218      	adds	r2, #24
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d048      	beq.n	8006f92 <HAL_DMA_Init+0xee>
 8006f00:	3218      	adds	r2, #24
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d045      	beq.n	8006f92 <HAL_DMA_Init+0xee>
 8006f06:	3218      	adds	r2, #24
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d042      	beq.n	8006f92 <HAL_DMA_Init+0xee>
 8006f0c:	3218      	adds	r2, #24
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d03f      	beq.n	8006f92 <HAL_DMA_Init+0xee>
 8006f12:	3218      	adds	r2, #24
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d03c      	beq.n	8006f92 <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006f18:	4a9c      	ldr	r2, [pc, #624]	; (800718c <HAL_DMA_Init+0x2e8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	f040 8160 	bne.w	80071e0 <HAL_DMA_Init+0x33c>
    __HAL_UNLOCK(hdma);
 8006f20:	2200      	movs	r2, #0
 8006f22:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f26:	2202      	movs	r2, #2
 8006f28:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006f2c:	68a2      	ldr	r2, [r4, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006f2e:	6819      	ldr	r1, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006f30:	2a40      	cmp	r2, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006f32:	f421 31ff 	bic.w	r1, r1, #130560	; 0x1fe00
 8006f36:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006f3a:	f000 816f 	beq.w	800721c <HAL_DMA_Init+0x378>
 8006f3e:	2a80      	cmp	r2, #128	; 0x80
 8006f40:	bf14      	ite	ne
 8006f42:	2000      	movne	r0, #0
 8006f44:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006f48:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 8006f4c:	08d2      	lsrs	r2, r2, #3
 8006f4e:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006f52:	6966      	ldr	r6, [r4, #20]
 8006f54:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006f58:	69a6      	ldr	r6, [r4, #24]
 8006f5a:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006f5e:	69e6      	ldr	r6, [r4, #28]
 8006f60:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006f64:	6a26      	ldr	r6, [r4, #32]
 8006f66:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8006f6a:	430a      	orrs	r2, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006f6c:	4302      	orrs	r2, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f6e:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006f70:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006f72:	4a87      	ldr	r2, [pc, #540]	; (8007190 <HAL_DMA_Init+0x2ec>)
 8006f74:	441a      	add	r2, r3
 8006f76:	2314      	movs	r3, #20
 8006f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f7c:	0092      	lsls	r2, r2, #2
 8006f7e:	65e2      	str	r2, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f80:	f7ff fec2 	bl	8006d08 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f84:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006f86:	f003 021f 	and.w	r2, r3, #31
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	4093      	lsls	r3, r2
 8006f8e:	6043      	str	r3, [r0, #4]
 8006f90:	e081      	b.n	8007096 <HAL_DMA_Init+0x1f2>
    __HAL_UNLOCK(hdma);
 8006f92:	2200      	movs	r2, #0
    __HAL_DMA_DISABLE(hdma);
 8006f94:	42ab      	cmp	r3, r5
    __HAL_UNLOCK(hdma);
 8006f96:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f9a:	f04f 0202 	mov.w	r2, #2
 8006f9e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8006fa2:	d01e      	beq.n	8006fe2 <HAL_DMA_Init+0x13e>
 8006fa4:	4a78      	ldr	r2, [pc, #480]	; (8007188 <HAL_DMA_Init+0x2e4>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d01b      	beq.n	8006fe2 <HAL_DMA_Init+0x13e>
 8006faa:	3218      	adds	r2, #24
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d018      	beq.n	8006fe2 <HAL_DMA_Init+0x13e>
 8006fb0:	3218      	adds	r2, #24
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d015      	beq.n	8006fe2 <HAL_DMA_Init+0x13e>
 8006fb6:	3218      	adds	r2, #24
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d012      	beq.n	8006fe2 <HAL_DMA_Init+0x13e>
 8006fbc:	3218      	adds	r2, #24
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00f      	beq.n	8006fe2 <HAL_DMA_Init+0x13e>
 8006fc2:	3218      	adds	r2, #24
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d00c      	beq.n	8006fe2 <HAL_DMA_Init+0x13e>
 8006fc8:	3218      	adds	r2, #24
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d009      	beq.n	8006fe2 <HAL_DMA_Init+0x13e>
 8006fce:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d005      	beq.n	8006fe2 <HAL_DMA_Init+0x13e>
 8006fd6:	3218      	adds	r2, #24
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d002      	beq.n	8006fe2 <HAL_DMA_Init+0x13e>
 8006fdc:	3218      	adds	r2, #24
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d0ff      	beq.n	8006fe2 <HAL_DMA_Init+0x13e>
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	f022 0201 	bic.w	r2, r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006fea:	6821      	ldr	r1, [r4, #0]
 8006fec:	680b      	ldr	r3, [r1, #0]
 8006fee:	07db      	lsls	r3, r3, #31
 8006ff0:	f100 80ba 	bmi.w	8007168 <HAL_DMA_Init+0x2c4>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006ff4:	680b      	ldr	r3, [r1, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006ff6:	4e67      	ldr	r6, [pc, #412]	; (8007194 <HAL_DMA_Init+0x2f0>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ff8:	69a0      	ldr	r0, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006ffa:	401e      	ands	r6, r3
    registerValue |=  hdma->Init.Direction           |
 8006ffc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007000:	4313      	orrs	r3, r2
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007002:	6922      	ldr	r2, [r4, #16]
 8007004:	4313      	orrs	r3, r2
 8007006:	6962      	ldr	r2, [r4, #20]
 8007008:	4313      	orrs	r3, r2
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800700a:	69e2      	ldr	r2, [r4, #28]
 800700c:	4303      	orrs	r3, r0
 800700e:	4313      	orrs	r3, r2
            hdma->Init.Mode                | hdma->Init.Priority;
 8007010:	6a22      	ldr	r2, [r4, #32]
 8007012:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007014:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007016:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007018:	2e04      	cmp	r6, #4
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800701a:	bf02      	ittt	eq
 800701c:	e9d4 270b 	ldrdeq	r2, r7, [r4, #44]	; 0x2c
 8007020:	433a      	orreq	r2, r7
 8007022:	4313      	orreq	r3, r2
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007024:	4a5c      	ldr	r2, [pc, #368]	; (8007198 <HAL_DMA_Init+0x2f4>)
 8007026:	6812      	ldr	r2, [r2, #0]
 8007028:	0c12      	lsrs	r2, r2, #16
 800702a:	0412      	lsls	r2, r2, #16
 800702c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8007030:	d30f      	bcc.n	8007052 <HAL_DMA_Init+0x1ae>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007032:	6862      	ldr	r2, [r4, #4]
 8007034:	f1a2 0c29 	sub.w	ip, r2, #41	; 0x29
 8007038:	f1bc 0f1f 	cmp.w	ip, #31
 800703c:	d804      	bhi.n	8007048 <HAL_DMA_Init+0x1a4>
 800703e:	4f57      	ldr	r7, [pc, #348]	; (800719c <HAL_DMA_Init+0x2f8>)
 8007040:	fa27 f70c 	lsr.w	r7, r7, ip
 8007044:	07ff      	lsls	r7, r7, #31
 8007046:	d402      	bmi.n	800704e <HAL_DMA_Init+0x1aa>
 8007048:	3a4f      	subs	r2, #79	; 0x4f
 800704a:	2a03      	cmp	r2, #3
 800704c:	d801      	bhi.n	8007052 <HAL_DMA_Init+0x1ae>
        registerValue |= DMA_SxCR_TRBUFF;
 800704e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007052:	600b      	str	r3, [r1, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007054:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007056:	694b      	ldr	r3, [r1, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007058:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800705c:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007060:	d10f      	bne.n	8007082 <HAL_DMA_Init+0x1de>
      registerValue |= hdma->Init.FIFOThreshold;
 8007062:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8007066:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007068:	b15e      	cbz	r6, 8007082 <HAL_DMA_Init+0x1de>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800706a:	2800      	cmp	r0, #0
 800706c:	f040 8098 	bne.w	80071a0 <HAL_DMA_Init+0x2fc>
    switch (hdma->Init.FIFOThreshold)
 8007070:	2a01      	cmp	r2, #1
 8007072:	f000 80a7 	beq.w	80071c4 <HAL_DMA_Init+0x320>
 8007076:	d301      	bcc.n	800707c <HAL_DMA_Init+0x1d8>
 8007078:	2a02      	cmp	r2, #2
    switch (hdma->Init.FIFOThreshold)
 800707a:	d102      	bne.n	8007082 <HAL_DMA_Init+0x1de>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800707c:	01f2      	lsls	r2, r6, #7
 800707e:	f100 80a5 	bmi.w	80071cc <HAL_DMA_Init+0x328>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007082:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007084:	4620      	mov	r0, r4
 8007086:	f7ff fe3f 	bl	8006d08 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800708a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800708c:	f003 021f 	and.w	r2, r3, #31
 8007090:	233f      	movs	r3, #63	; 0x3f
 8007092:	4093      	lsls	r3, r2
 8007094:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	42ab      	cmp	r3, r5
 800709a:	d045      	beq.n	8007128 <HAL_DMA_Init+0x284>
 800709c:	4a3a      	ldr	r2, [pc, #232]	; (8007188 <HAL_DMA_Init+0x2e4>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d042      	beq.n	8007128 <HAL_DMA_Init+0x284>
 80070a2:	3218      	adds	r2, #24
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d03f      	beq.n	8007128 <HAL_DMA_Init+0x284>
 80070a8:	3218      	adds	r2, #24
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d03c      	beq.n	8007128 <HAL_DMA_Init+0x284>
 80070ae:	3218      	adds	r2, #24
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d039      	beq.n	8007128 <HAL_DMA_Init+0x284>
 80070b4:	3218      	adds	r2, #24
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d036      	beq.n	8007128 <HAL_DMA_Init+0x284>
 80070ba:	3218      	adds	r2, #24
 80070bc:	4293      	cmp	r3, r2
 80070be:	d033      	beq.n	8007128 <HAL_DMA_Init+0x284>
 80070c0:	3218      	adds	r2, #24
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d030      	beq.n	8007128 <HAL_DMA_Init+0x284>
 80070c6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d02c      	beq.n	8007128 <HAL_DMA_Init+0x284>
 80070ce:	3218      	adds	r2, #24
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d029      	beq.n	8007128 <HAL_DMA_Init+0x284>
 80070d4:	3218      	adds	r2, #24
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d026      	beq.n	8007128 <HAL_DMA_Init+0x284>
 80070da:	3218      	adds	r2, #24
 80070dc:	4293      	cmp	r3, r2
 80070de:	d023      	beq.n	8007128 <HAL_DMA_Init+0x284>
 80070e0:	3218      	adds	r2, #24
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d020      	beq.n	8007128 <HAL_DMA_Init+0x284>
 80070e6:	3218      	adds	r2, #24
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d01d      	beq.n	8007128 <HAL_DMA_Init+0x284>
 80070ec:	3218      	adds	r2, #24
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d01a      	beq.n	8007128 <HAL_DMA_Init+0x284>
 80070f2:	3218      	adds	r2, #24
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d017      	beq.n	8007128 <HAL_DMA_Init+0x284>
 80070f8:	4a24      	ldr	r2, [pc, #144]	; (800718c <HAL_DMA_Init+0x2e8>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d014      	beq.n	8007128 <HAL_DMA_Init+0x284>
 80070fe:	3214      	adds	r2, #20
 8007100:	4293      	cmp	r3, r2
 8007102:	d011      	beq.n	8007128 <HAL_DMA_Init+0x284>
 8007104:	3214      	adds	r2, #20
 8007106:	4293      	cmp	r3, r2
 8007108:	d00e      	beq.n	8007128 <HAL_DMA_Init+0x284>
 800710a:	3214      	adds	r2, #20
 800710c:	4293      	cmp	r3, r2
 800710e:	d00b      	beq.n	8007128 <HAL_DMA_Init+0x284>
 8007110:	3214      	adds	r2, #20
 8007112:	4293      	cmp	r3, r2
 8007114:	d008      	beq.n	8007128 <HAL_DMA_Init+0x284>
 8007116:	3214      	adds	r2, #20
 8007118:	4293      	cmp	r3, r2
 800711a:	d005      	beq.n	8007128 <HAL_DMA_Init+0x284>
 800711c:	3214      	adds	r2, #20
 800711e:	4293      	cmp	r3, r2
 8007120:	d002      	beq.n	8007128 <HAL_DMA_Init+0x284>
 8007122:	3214      	adds	r2, #20
 8007124:	4293      	cmp	r3, r2
 8007126:	d119      	bne.n	800715c <HAL_DMA_Init+0x2b8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007128:	4620      	mov	r0, r4
 800712a:	2500      	movs	r5, #0
 800712c:	f7ff fe3a 	bl	8006da4 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007130:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007132:	6e22      	ldr	r2, [r4, #96]	; 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007134:	2b80      	cmp	r3, #128	; 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007136:	bf04      	itt	eq
 8007138:	2300      	moveq	r3, #0
 800713a:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800713c:	6863      	ldr	r3, [r4, #4]
 800713e:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007140:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007142:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007144:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007146:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
 800714a:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800714c:	d868      	bhi.n	8007220 <HAL_DMA_Init+0x37c>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800714e:	f7ff fe71 	bl	8006e34 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007152:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007154:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007156:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 800715a:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800715c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800715e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007160:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8007162:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8007166:	e036      	b.n	80071d6 <HAL_DMA_Init+0x332>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007168:	f7fe fe50 	bl	8005e0c <HAL_GetTick>
 800716c:	1b80      	subs	r0, r0, r6
 800716e:	2805      	cmp	r0, #5
 8007170:	f67f af3b 	bls.w	8006fea <HAL_DMA_Init+0x146>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007174:	2320      	movs	r3, #32
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007176:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007178:	2303      	movs	r3, #3
 800717a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 800717e:	2001      	movs	r0, #1
 8007180:	e029      	b.n	80071d6 <HAL_DMA_Init+0x332>
 8007182:	bf00      	nop
 8007184:	40020010 	.word	0x40020010
 8007188:	40020028 	.word	0x40020028
 800718c:	58025408 	.word	0x58025408
 8007190:	a7fdabf8 	.word	0xa7fdabf8
 8007194:	fe10803f 	.word	0xfe10803f
 8007198:	5c001000 	.word	0x5c001000
 800719c:	c3c0003f 	.word	0xc3c0003f
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80071a0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80071a4:	d118      	bne.n	80071d8 <HAL_DMA_Init+0x334>
    switch (hdma->Init.FIFOThreshold)
 80071a6:	2a03      	cmp	r2, #3
 80071a8:	f63f af6b 	bhi.w	8007082 <HAL_DMA_Init+0x1de>
 80071ac:	a001      	add	r0, pc, #4	; (adr r0, 80071b4 <HAL_DMA_Init+0x310>)
 80071ae:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80071b2:	bf00      	nop
 80071b4:	080071cd 	.word	0x080071cd
 80071b8:	0800707d 	.word	0x0800707d
 80071bc:	080071cd 	.word	0x080071cd
 80071c0:	080071c5 	.word	0x080071c5
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071c4:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 80071c8:	f47f af5b 	bne.w	8007082 <HAL_DMA_Init+0x1de>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80071cc:	2340      	movs	r3, #64	; 0x40
          hdma->State = HAL_DMA_STATE_READY;
 80071ce:	2001      	movs	r0, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80071d0:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80071d2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80071d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 80071d8:	2a02      	cmp	r2, #2
 80071da:	d9f7      	bls.n	80071cc <HAL_DMA_Init+0x328>
 80071dc:	2a03      	cmp	r2, #3
 80071de:	e74c      	b.n	800707a <HAL_DMA_Init+0x1d6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80071e0:	4a11      	ldr	r2, [pc, #68]	; (8007228 <HAL_DMA_Init+0x384>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	f43f ae9c 	beq.w	8006f20 <HAL_DMA_Init+0x7c>
 80071e8:	3214      	adds	r2, #20
 80071ea:	4293      	cmp	r3, r2
 80071ec:	f43f ae98 	beq.w	8006f20 <HAL_DMA_Init+0x7c>
 80071f0:	3214      	adds	r2, #20
 80071f2:	4293      	cmp	r3, r2
 80071f4:	f43f ae94 	beq.w	8006f20 <HAL_DMA_Init+0x7c>
 80071f8:	3214      	adds	r2, #20
 80071fa:	4293      	cmp	r3, r2
 80071fc:	f43f ae90 	beq.w	8006f20 <HAL_DMA_Init+0x7c>
 8007200:	3214      	adds	r2, #20
 8007202:	4293      	cmp	r3, r2
 8007204:	f43f ae8c 	beq.w	8006f20 <HAL_DMA_Init+0x7c>
 8007208:	3214      	adds	r2, #20
 800720a:	4293      	cmp	r3, r2
 800720c:	f43f ae88 	beq.w	8006f20 <HAL_DMA_Init+0x7c>
 8007210:	3214      	adds	r2, #20
 8007212:	4293      	cmp	r3, r2
 8007214:	f43f ae84 	beq.w	8006f20 <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007218:	2340      	movs	r3, #64	; 0x40
 800721a:	e7ac      	b.n	8007176 <HAL_DMA_Init+0x2d2>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800721c:	2010      	movs	r0, #16
 800721e:	e693      	b.n	8006f48 <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 8007220:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007224:	6765      	str	r5, [r4, #116]	; 0x74
 8007226:	e799      	b.n	800715c <HAL_DMA_Init+0x2b8>
 8007228:	5802541c 	.word	0x5802541c

0800722c <HAL_DMA_Start_IT>:
{
 800722c:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 800722e:	4604      	mov	r4, r0
 8007230:	2800      	cmp	r0, #0
 8007232:	f000 810d 	beq.w	8007450 <HAL_DMA_Start_IT+0x224>
  __HAL_LOCK(hdma);
 8007236:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800723a:	2801      	cmp	r0, #1
 800723c:	f000 810a 	beq.w	8007454 <HAL_DMA_Start_IT+0x228>
 8007240:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8007242:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
 8007246:	4285      	cmp	r5, r0
  __HAL_LOCK(hdma);
 8007248:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 800724c:	f04f 0500 	mov.w	r5, #0
  if(HAL_DMA_STATE_READY == hdma->State)
 8007250:	f040 80f8 	bne.w	8007444 <HAL_DMA_Start_IT+0x218>
    hdma->State = HAL_DMA_STATE_BUSY;
 8007254:	2002      	movs	r0, #2
 8007256:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800725a:	6565      	str	r5, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800725c:	6820      	ldr	r0, [r4, #0]
 800725e:	4d7e      	ldr	r5, [pc, #504]	; (8007458 <HAL_DMA_Start_IT+0x22c>)
 8007260:	42a8      	cmp	r0, r5
 8007262:	d01e      	beq.n	80072a2 <HAL_DMA_Start_IT+0x76>
 8007264:	4e7d      	ldr	r6, [pc, #500]	; (800745c <HAL_DMA_Start_IT+0x230>)
 8007266:	42b0      	cmp	r0, r6
 8007268:	d01b      	beq.n	80072a2 <HAL_DMA_Start_IT+0x76>
 800726a:	3618      	adds	r6, #24
 800726c:	42b0      	cmp	r0, r6
 800726e:	d018      	beq.n	80072a2 <HAL_DMA_Start_IT+0x76>
 8007270:	3618      	adds	r6, #24
 8007272:	42b0      	cmp	r0, r6
 8007274:	d015      	beq.n	80072a2 <HAL_DMA_Start_IT+0x76>
 8007276:	3618      	adds	r6, #24
 8007278:	42b0      	cmp	r0, r6
 800727a:	d012      	beq.n	80072a2 <HAL_DMA_Start_IT+0x76>
 800727c:	3618      	adds	r6, #24
 800727e:	42b0      	cmp	r0, r6
 8007280:	d00f      	beq.n	80072a2 <HAL_DMA_Start_IT+0x76>
 8007282:	3618      	adds	r6, #24
 8007284:	42b0      	cmp	r0, r6
 8007286:	d00c      	beq.n	80072a2 <HAL_DMA_Start_IT+0x76>
 8007288:	3618      	adds	r6, #24
 800728a:	42b0      	cmp	r0, r6
 800728c:	d009      	beq.n	80072a2 <HAL_DMA_Start_IT+0x76>
 800728e:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8007292:	42b0      	cmp	r0, r6
 8007294:	d005      	beq.n	80072a2 <HAL_DMA_Start_IT+0x76>
 8007296:	3618      	adds	r6, #24
 8007298:	42b0      	cmp	r0, r6
 800729a:	d002      	beq.n	80072a2 <HAL_DMA_Start_IT+0x76>
 800729c:	3618      	adds	r6, #24
 800729e:	42b0      	cmp	r0, r6
 80072a0:	d0ff      	beq.n	80072a2 <HAL_DMA_Start_IT+0x76>
 80072a2:	6806      	ldr	r6, [r0, #0]
 80072a4:	f026 0601 	bic.w	r6, r6, #1
 80072a8:	6006      	str	r6, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80072aa:	4620      	mov	r0, r4
 80072ac:	f7ff fc6a 	bl	8006b84 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80072b4:	42ab      	cmp	r3, r5
 80072b6:	d053      	beq.n	8007360 <HAL_DMA_Start_IT+0x134>
 80072b8:	4a68      	ldr	r2, [pc, #416]	; (800745c <HAL_DMA_Start_IT+0x230>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d050      	beq.n	8007360 <HAL_DMA_Start_IT+0x134>
 80072be:	3218      	adds	r2, #24
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d04d      	beq.n	8007360 <HAL_DMA_Start_IT+0x134>
 80072c4:	3218      	adds	r2, #24
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d04a      	beq.n	8007360 <HAL_DMA_Start_IT+0x134>
 80072ca:	3218      	adds	r2, #24
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d047      	beq.n	8007360 <HAL_DMA_Start_IT+0x134>
 80072d0:	3218      	adds	r2, #24
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d044      	beq.n	8007360 <HAL_DMA_Start_IT+0x134>
 80072d6:	3218      	adds	r2, #24
 80072d8:	4293      	cmp	r3, r2
 80072da:	d041      	beq.n	8007360 <HAL_DMA_Start_IT+0x134>
 80072dc:	3218      	adds	r2, #24
 80072de:	4293      	cmp	r3, r2
 80072e0:	d03e      	beq.n	8007360 <HAL_DMA_Start_IT+0x134>
 80072e2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d03a      	beq.n	8007360 <HAL_DMA_Start_IT+0x134>
 80072ea:	3218      	adds	r2, #24
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d037      	beq.n	8007360 <HAL_DMA_Start_IT+0x134>
 80072f0:	3218      	adds	r2, #24
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d034      	beq.n	8007360 <HAL_DMA_Start_IT+0x134>
 80072f6:	3218      	adds	r2, #24
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d031      	beq.n	8007360 <HAL_DMA_Start_IT+0x134>
 80072fc:	3218      	adds	r2, #24
 80072fe:	4293      	cmp	r3, r2
 8007300:	d02e      	beq.n	8007360 <HAL_DMA_Start_IT+0x134>
 8007302:	3218      	adds	r2, #24
 8007304:	4293      	cmp	r3, r2
 8007306:	d02b      	beq.n	8007360 <HAL_DMA_Start_IT+0x134>
 8007308:	3218      	adds	r2, #24
 800730a:	4293      	cmp	r3, r2
 800730c:	d028      	beq.n	8007360 <HAL_DMA_Start_IT+0x134>
 800730e:	3218      	adds	r2, #24
 8007310:	4293      	cmp	r3, r2
 8007312:	d025      	beq.n	8007360 <HAL_DMA_Start_IT+0x134>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	f022 020e 	bic.w	r2, r2, #14
 800731a:	f042 020a 	orr.w	r2, r2, #10
 800731e:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8007320:	2900      	cmp	r1, #0
 8007322:	d156      	bne.n	80073d2 <HAL_DMA_Start_IT+0x1a6>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007324:	4a4e      	ldr	r2, [pc, #312]	; (8007460 <HAL_DMA_Start_IT+0x234>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d027      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 800732a:	4a4e      	ldr	r2, [pc, #312]	; (8007464 <HAL_DMA_Start_IT+0x238>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d024      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 8007330:	3214      	adds	r2, #20
 8007332:	4293      	cmp	r3, r2
 8007334:	d021      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 8007336:	3214      	adds	r2, #20
 8007338:	4293      	cmp	r3, r2
 800733a:	d01e      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 800733c:	3214      	adds	r2, #20
 800733e:	4293      	cmp	r3, r2
 8007340:	d01b      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 8007342:	3214      	adds	r2, #20
 8007344:	4293      	cmp	r3, r2
 8007346:	d018      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 8007348:	3214      	adds	r2, #20
 800734a:	4293      	cmp	r3, r2
 800734c:	d015      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 800734e:	3214      	adds	r2, #20
 8007350:	4293      	cmp	r3, r2
 8007352:	d012      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
    __HAL_DMA_ENABLE(hdma);
 8007354:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007356:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8007358:	f042 0201 	orr.w	r2, r2, #1
 800735c:	601a      	str	r2, [r3, #0]
}
 800735e:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	f022 021e 	bic.w	r2, r2, #30
 8007366:	f042 0216 	orr.w	r2, r2, #22
 800736a:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800736c:	b119      	cbz	r1, 8007376 <HAL_DMA_Start_IT+0x14a>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	f042 0208 	orr.w	r2, r2, #8
 8007374:	601a      	str	r2, [r3, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007376:	42ab      	cmp	r3, r5
 8007378:	d130      	bne.n	80073dc <HAL_DMA_Start_IT+0x1b0>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800737a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800737c:	6811      	ldr	r1, [r2, #0]
 800737e:	03c9      	lsls	r1, r1, #15
 8007380:	d45b      	bmi.n	800743a <HAL_DMA_Start_IT+0x20e>
      if(hdma->DMAmuxRequestGen != 0U)
 8007382:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007384:	b11a      	cbz	r2, 800738e <HAL_DMA_Start_IT+0x162>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007386:	6811      	ldr	r1, [r2, #0]
 8007388:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800738c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800738e:	42ab      	cmp	r3, r5
 8007390:	d0e0      	beq.n	8007354 <HAL_DMA_Start_IT+0x128>
 8007392:	4a32      	ldr	r2, [pc, #200]	; (800745c <HAL_DMA_Start_IT+0x230>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d0dd      	beq.n	8007354 <HAL_DMA_Start_IT+0x128>
 8007398:	3218      	adds	r2, #24
 800739a:	4293      	cmp	r3, r2
 800739c:	d0da      	beq.n	8007354 <HAL_DMA_Start_IT+0x128>
 800739e:	3218      	adds	r2, #24
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d0d7      	beq.n	8007354 <HAL_DMA_Start_IT+0x128>
 80073a4:	3218      	adds	r2, #24
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d0d4      	beq.n	8007354 <HAL_DMA_Start_IT+0x128>
 80073aa:	3218      	adds	r2, #24
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d0d1      	beq.n	8007354 <HAL_DMA_Start_IT+0x128>
 80073b0:	3218      	adds	r2, #24
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d0ce      	beq.n	8007354 <HAL_DMA_Start_IT+0x128>
 80073b6:	3218      	adds	r2, #24
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d0cb      	beq.n	8007354 <HAL_DMA_Start_IT+0x128>
 80073bc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d0c7      	beq.n	8007354 <HAL_DMA_Start_IT+0x128>
 80073c4:	3218      	adds	r2, #24
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d0c4      	beq.n	8007354 <HAL_DMA_Start_IT+0x128>
 80073ca:	3218      	adds	r2, #24
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d0c1      	beq.n	8007354 <HAL_DMA_Start_IT+0x128>
 80073d0:	e7c0      	b.n	8007354 <HAL_DMA_Start_IT+0x128>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	f042 0204 	orr.w	r2, r2, #4
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	e7a3      	b.n	8007324 <HAL_DMA_Start_IT+0xf8>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073dc:	4a1f      	ldr	r2, [pc, #124]	; (800745c <HAL_DMA_Start_IT+0x230>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d0cb      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 80073e2:	3218      	adds	r2, #24
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d0c8      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 80073e8:	3218      	adds	r2, #24
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d0c5      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 80073ee:	3218      	adds	r2, #24
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d0c2      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 80073f4:	3218      	adds	r2, #24
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d0bf      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 80073fa:	3218      	adds	r2, #24
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d0bc      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 8007400:	3218      	adds	r2, #24
 8007402:	4293      	cmp	r3, r2
 8007404:	d0b9      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 8007406:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800740a:	4293      	cmp	r3, r2
 800740c:	d0b5      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 800740e:	3218      	adds	r2, #24
 8007410:	4293      	cmp	r3, r2
 8007412:	d0b2      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 8007414:	3218      	adds	r2, #24
 8007416:	4293      	cmp	r3, r2
 8007418:	d0af      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 800741a:	3218      	adds	r2, #24
 800741c:	4293      	cmp	r3, r2
 800741e:	d0ac      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 8007420:	3218      	adds	r2, #24
 8007422:	4293      	cmp	r3, r2
 8007424:	d0a9      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 8007426:	3218      	adds	r2, #24
 8007428:	4293      	cmp	r3, r2
 800742a:	d0a6      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 800742c:	3218      	adds	r2, #24
 800742e:	4293      	cmp	r3, r2
 8007430:	d0a3      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 8007432:	3218      	adds	r2, #24
 8007434:	4293      	cmp	r3, r2
 8007436:	d0a0      	beq.n	800737a <HAL_DMA_Start_IT+0x14e>
 8007438:	e774      	b.n	8007324 <HAL_DMA_Start_IT+0xf8>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800743a:	6811      	ldr	r1, [r2, #0]
 800743c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007440:	6011      	str	r1, [r2, #0]
 8007442:	e79e      	b.n	8007382 <HAL_DMA_Start_IT+0x156>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007444:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8007448:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800744c:	6563      	str	r3, [r4, #84]	; 0x54
 800744e:	e786      	b.n	800735e <HAL_DMA_Start_IT+0x132>
    return HAL_ERROR;
 8007450:	2001      	movs	r0, #1
 8007452:	e784      	b.n	800735e <HAL_DMA_Start_IT+0x132>
  __HAL_LOCK(hdma);
 8007454:	2002      	movs	r0, #2
 8007456:	e782      	b.n	800735e <HAL_DMA_Start_IT+0x132>
 8007458:	40020010 	.word	0x40020010
 800745c:	40020028 	.word	0x40020028
 8007460:	58025408 	.word	0x58025408
 8007464:	5802541c 	.word	0x5802541c

08007468 <HAL_DMA_Abort>:
{
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800746c:	f7fe fcce 	bl	8005e0c <HAL_GetTick>
 8007470:	4607      	mov	r7, r0
  if(hdma == NULL)
 8007472:	b145      	cbz	r5, 8007486 <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007474:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8007478:	2b02      	cmp	r3, #2
 800747a:	d006      	beq.n	800748a <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800747c:	2380      	movs	r3, #128	; 0x80
 800747e:	656b      	str	r3, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8007480:	2300      	movs	r3, #0
 8007482:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8007486:	2001      	movs	r0, #1
 8007488:	e162      	b.n	8007750 <HAL_DMA_Abort+0x2e8>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800748a:	682c      	ldr	r4, [r5, #0]
 800748c:	4ecc      	ldr	r6, [pc, #816]	; (80077c0 <HAL_DMA_Abort+0x358>)
 800748e:	42b4      	cmp	r4, r6
 8007490:	f000 80d3 	beq.w	800763a <HAL_DMA_Abort+0x1d2>
 8007494:	4bcb      	ldr	r3, [pc, #812]	; (80077c4 <HAL_DMA_Abort+0x35c>)
 8007496:	429c      	cmp	r4, r3
 8007498:	f000 80cf 	beq.w	800763a <HAL_DMA_Abort+0x1d2>
 800749c:	3318      	adds	r3, #24
 800749e:	429c      	cmp	r4, r3
 80074a0:	f000 80cb 	beq.w	800763a <HAL_DMA_Abort+0x1d2>
 80074a4:	3318      	adds	r3, #24
 80074a6:	429c      	cmp	r4, r3
 80074a8:	f000 80c7 	beq.w	800763a <HAL_DMA_Abort+0x1d2>
 80074ac:	3318      	adds	r3, #24
 80074ae:	429c      	cmp	r4, r3
 80074b0:	f000 80c3 	beq.w	800763a <HAL_DMA_Abort+0x1d2>
 80074b4:	3318      	adds	r3, #24
 80074b6:	429c      	cmp	r4, r3
 80074b8:	f000 80bf 	beq.w	800763a <HAL_DMA_Abort+0x1d2>
 80074bc:	3318      	adds	r3, #24
 80074be:	429c      	cmp	r4, r3
 80074c0:	f000 80bb 	beq.w	800763a <HAL_DMA_Abort+0x1d2>
 80074c4:	3318      	adds	r3, #24
 80074c6:	429c      	cmp	r4, r3
 80074c8:	f000 80b7 	beq.w	800763a <HAL_DMA_Abort+0x1d2>
 80074cc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80074d0:	429c      	cmp	r4, r3
 80074d2:	f000 80b2 	beq.w	800763a <HAL_DMA_Abort+0x1d2>
 80074d6:	3318      	adds	r3, #24
 80074d8:	429c      	cmp	r4, r3
 80074da:	f000 80ae 	beq.w	800763a <HAL_DMA_Abort+0x1d2>
 80074de:	3318      	adds	r3, #24
 80074e0:	429c      	cmp	r4, r3
 80074e2:	f000 80aa 	beq.w	800763a <HAL_DMA_Abort+0x1d2>
 80074e6:	3318      	adds	r3, #24
 80074e8:	429c      	cmp	r4, r3
 80074ea:	f000 80a6 	beq.w	800763a <HAL_DMA_Abort+0x1d2>
 80074ee:	3318      	adds	r3, #24
 80074f0:	429c      	cmp	r4, r3
 80074f2:	f000 80a2 	beq.w	800763a <HAL_DMA_Abort+0x1d2>
 80074f6:	3318      	adds	r3, #24
 80074f8:	429c      	cmp	r4, r3
 80074fa:	f000 809e 	beq.w	800763a <HAL_DMA_Abort+0x1d2>
 80074fe:	3318      	adds	r3, #24
 8007500:	429c      	cmp	r4, r3
 8007502:	f000 809a 	beq.w	800763a <HAL_DMA_Abort+0x1d2>
 8007506:	3318      	adds	r3, #24
 8007508:	429c      	cmp	r4, r3
 800750a:	f000 8096 	beq.w	800763a <HAL_DMA_Abort+0x1d2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	f023 030e 	bic.w	r3, r3, #14
 8007514:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007516:	4bac      	ldr	r3, [pc, #688]	; (80077c8 <HAL_DMA_Abort+0x360>)
 8007518:	429c      	cmp	r4, r3
 800751a:	f000 80c7 	beq.w	80076ac <HAL_DMA_Abort+0x244>
 800751e:	3314      	adds	r3, #20
 8007520:	429c      	cmp	r4, r3
 8007522:	f000 80c3 	beq.w	80076ac <HAL_DMA_Abort+0x244>
 8007526:	3314      	adds	r3, #20
 8007528:	429c      	cmp	r4, r3
 800752a:	f000 80bf 	beq.w	80076ac <HAL_DMA_Abort+0x244>
 800752e:	3314      	adds	r3, #20
 8007530:	429c      	cmp	r4, r3
 8007532:	f000 80bb 	beq.w	80076ac <HAL_DMA_Abort+0x244>
 8007536:	3314      	adds	r3, #20
 8007538:	429c      	cmp	r4, r3
 800753a:	f000 80b7 	beq.w	80076ac <HAL_DMA_Abort+0x244>
 800753e:	3314      	adds	r3, #20
 8007540:	429c      	cmp	r4, r3
 8007542:	f000 80b3 	beq.w	80076ac <HAL_DMA_Abort+0x244>
 8007546:	3314      	adds	r3, #20
 8007548:	429c      	cmp	r4, r3
 800754a:	f000 80af 	beq.w	80076ac <HAL_DMA_Abort+0x244>
 800754e:	3314      	adds	r3, #20
 8007550:	429c      	cmp	r4, r3
 8007552:	f000 80ab 	beq.w	80076ac <HAL_DMA_Abort+0x244>
    __HAL_DMA_DISABLE(hdma);
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	f023 0301 	bic.w	r3, r3, #1
 800755c:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	07db      	lsls	r3, r3, #31
 8007562:	f100 80d5 	bmi.w	8007710 <HAL_DMA_Abort+0x2a8>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007566:	682b      	ldr	r3, [r5, #0]
 8007568:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800756a:	42b3      	cmp	r3, r6
 800756c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800756e:	f002 021f 	and.w	r2, r2, #31
 8007572:	f000 80dc 	beq.w	800772e <HAL_DMA_Abort+0x2c6>
 8007576:	4993      	ldr	r1, [pc, #588]	; (80077c4 <HAL_DMA_Abort+0x35c>)
 8007578:	428b      	cmp	r3, r1
 800757a:	f000 80d8 	beq.w	800772e <HAL_DMA_Abort+0x2c6>
 800757e:	3118      	adds	r1, #24
 8007580:	428b      	cmp	r3, r1
 8007582:	f000 80d4 	beq.w	800772e <HAL_DMA_Abort+0x2c6>
 8007586:	3118      	adds	r1, #24
 8007588:	428b      	cmp	r3, r1
 800758a:	f000 80d0 	beq.w	800772e <HAL_DMA_Abort+0x2c6>
 800758e:	3118      	adds	r1, #24
 8007590:	428b      	cmp	r3, r1
 8007592:	f000 80cc 	beq.w	800772e <HAL_DMA_Abort+0x2c6>
 8007596:	3118      	adds	r1, #24
 8007598:	428b      	cmp	r3, r1
 800759a:	f000 80c8 	beq.w	800772e <HAL_DMA_Abort+0x2c6>
 800759e:	3118      	adds	r1, #24
 80075a0:	428b      	cmp	r3, r1
 80075a2:	f000 80c4 	beq.w	800772e <HAL_DMA_Abort+0x2c6>
 80075a6:	3118      	adds	r1, #24
 80075a8:	428b      	cmp	r3, r1
 80075aa:	f000 80c0 	beq.w	800772e <HAL_DMA_Abort+0x2c6>
 80075ae:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80075b2:	428b      	cmp	r3, r1
 80075b4:	f000 80bb 	beq.w	800772e <HAL_DMA_Abort+0x2c6>
 80075b8:	3118      	adds	r1, #24
 80075ba:	428b      	cmp	r3, r1
 80075bc:	f000 80b7 	beq.w	800772e <HAL_DMA_Abort+0x2c6>
 80075c0:	3118      	adds	r1, #24
 80075c2:	428b      	cmp	r3, r1
 80075c4:	f000 80b3 	beq.w	800772e <HAL_DMA_Abort+0x2c6>
 80075c8:	3118      	adds	r1, #24
 80075ca:	428b      	cmp	r3, r1
 80075cc:	f000 80af 	beq.w	800772e <HAL_DMA_Abort+0x2c6>
 80075d0:	3118      	adds	r1, #24
 80075d2:	428b      	cmp	r3, r1
 80075d4:	f000 80ab 	beq.w	800772e <HAL_DMA_Abort+0x2c6>
 80075d8:	3118      	adds	r1, #24
 80075da:	428b      	cmp	r3, r1
 80075dc:	f000 80a7 	beq.w	800772e <HAL_DMA_Abort+0x2c6>
 80075e0:	3118      	adds	r1, #24
 80075e2:	428b      	cmp	r3, r1
 80075e4:	f000 80a3 	beq.w	800772e <HAL_DMA_Abort+0x2c6>
 80075e8:	3118      	adds	r1, #24
 80075ea:	428b      	cmp	r3, r1
 80075ec:	f000 809f 	beq.w	800772e <HAL_DMA_Abort+0x2c6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80075f0:	2101      	movs	r1, #1
 80075f2:	fa01 f202 	lsl.w	r2, r1, r2
 80075f6:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80075f8:	4a73      	ldr	r2, [pc, #460]	; (80077c8 <HAL_DMA_Abort+0x360>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	f000 809d 	beq.w	800773a <HAL_DMA_Abort+0x2d2>
 8007600:	3214      	adds	r2, #20
 8007602:	4293      	cmp	r3, r2
 8007604:	f000 8099 	beq.w	800773a <HAL_DMA_Abort+0x2d2>
 8007608:	3214      	adds	r2, #20
 800760a:	4293      	cmp	r3, r2
 800760c:	f000 8095 	beq.w	800773a <HAL_DMA_Abort+0x2d2>
 8007610:	3214      	adds	r2, #20
 8007612:	4293      	cmp	r3, r2
 8007614:	f000 8091 	beq.w	800773a <HAL_DMA_Abort+0x2d2>
 8007618:	3214      	adds	r2, #20
 800761a:	4293      	cmp	r3, r2
 800761c:	f000 808d 	beq.w	800773a <HAL_DMA_Abort+0x2d2>
 8007620:	3214      	adds	r2, #20
 8007622:	4293      	cmp	r3, r2
 8007624:	f000 8089 	beq.w	800773a <HAL_DMA_Abort+0x2d2>
 8007628:	3214      	adds	r2, #20
 800762a:	4293      	cmp	r3, r2
 800762c:	f000 8085 	beq.w	800773a <HAL_DMA_Abort+0x2d2>
 8007630:	3214      	adds	r2, #20
 8007632:	4293      	cmp	r3, r2
 8007634:	f040 8086 	bne.w	8007744 <HAL_DMA_Abort+0x2dc>
 8007638:	e07f      	b.n	800773a <HAL_DMA_Abort+0x2d2>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800763a:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800763c:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800763e:	f023 031e 	bic.w	r3, r3, #30
 8007642:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007644:	6963      	ldr	r3, [r4, #20]
 8007646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800764a:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800764c:	d02e      	beq.n	80076ac <HAL_DMA_Abort+0x244>
 800764e:	4b5d      	ldr	r3, [pc, #372]	; (80077c4 <HAL_DMA_Abort+0x35c>)
 8007650:	429c      	cmp	r4, r3
 8007652:	d02b      	beq.n	80076ac <HAL_DMA_Abort+0x244>
 8007654:	3318      	adds	r3, #24
 8007656:	429c      	cmp	r4, r3
 8007658:	d028      	beq.n	80076ac <HAL_DMA_Abort+0x244>
 800765a:	3318      	adds	r3, #24
 800765c:	429c      	cmp	r4, r3
 800765e:	d025      	beq.n	80076ac <HAL_DMA_Abort+0x244>
 8007660:	3318      	adds	r3, #24
 8007662:	429c      	cmp	r4, r3
 8007664:	d022      	beq.n	80076ac <HAL_DMA_Abort+0x244>
 8007666:	3318      	adds	r3, #24
 8007668:	429c      	cmp	r4, r3
 800766a:	d01f      	beq.n	80076ac <HAL_DMA_Abort+0x244>
 800766c:	3318      	adds	r3, #24
 800766e:	429c      	cmp	r4, r3
 8007670:	d01c      	beq.n	80076ac <HAL_DMA_Abort+0x244>
 8007672:	3318      	adds	r3, #24
 8007674:	429c      	cmp	r4, r3
 8007676:	d019      	beq.n	80076ac <HAL_DMA_Abort+0x244>
 8007678:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800767c:	429c      	cmp	r4, r3
 800767e:	d015      	beq.n	80076ac <HAL_DMA_Abort+0x244>
 8007680:	3318      	adds	r3, #24
 8007682:	429c      	cmp	r4, r3
 8007684:	d012      	beq.n	80076ac <HAL_DMA_Abort+0x244>
 8007686:	3318      	adds	r3, #24
 8007688:	429c      	cmp	r4, r3
 800768a:	d00f      	beq.n	80076ac <HAL_DMA_Abort+0x244>
 800768c:	3318      	adds	r3, #24
 800768e:	429c      	cmp	r4, r3
 8007690:	d00c      	beq.n	80076ac <HAL_DMA_Abort+0x244>
 8007692:	3318      	adds	r3, #24
 8007694:	429c      	cmp	r4, r3
 8007696:	d009      	beq.n	80076ac <HAL_DMA_Abort+0x244>
 8007698:	3318      	adds	r3, #24
 800769a:	429c      	cmp	r4, r3
 800769c:	d006      	beq.n	80076ac <HAL_DMA_Abort+0x244>
 800769e:	3318      	adds	r3, #24
 80076a0:	429c      	cmp	r4, r3
 80076a2:	d003      	beq.n	80076ac <HAL_DMA_Abort+0x244>
 80076a4:	3318      	adds	r3, #24
 80076a6:	429c      	cmp	r4, r3
 80076a8:	f47f af35 	bne.w	8007516 <HAL_DMA_Abort+0xae>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80076ac:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    __HAL_DMA_DISABLE(hdma);
 80076ae:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80076b0:	6813      	ldr	r3, [r2, #0]
 80076b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80076b8:	f43f af4d 	beq.w	8007556 <HAL_DMA_Abort+0xee>
 80076bc:	4b41      	ldr	r3, [pc, #260]	; (80077c4 <HAL_DMA_Abort+0x35c>)
 80076be:	429c      	cmp	r4, r3
 80076c0:	f43f af49 	beq.w	8007556 <HAL_DMA_Abort+0xee>
 80076c4:	3318      	adds	r3, #24
 80076c6:	429c      	cmp	r4, r3
 80076c8:	f43f af45 	beq.w	8007556 <HAL_DMA_Abort+0xee>
 80076cc:	3318      	adds	r3, #24
 80076ce:	429c      	cmp	r4, r3
 80076d0:	f43f af41 	beq.w	8007556 <HAL_DMA_Abort+0xee>
 80076d4:	3318      	adds	r3, #24
 80076d6:	429c      	cmp	r4, r3
 80076d8:	f43f af3d 	beq.w	8007556 <HAL_DMA_Abort+0xee>
 80076dc:	3318      	adds	r3, #24
 80076de:	429c      	cmp	r4, r3
 80076e0:	f43f af39 	beq.w	8007556 <HAL_DMA_Abort+0xee>
 80076e4:	3318      	adds	r3, #24
 80076e6:	429c      	cmp	r4, r3
 80076e8:	f43f af35 	beq.w	8007556 <HAL_DMA_Abort+0xee>
 80076ec:	3318      	adds	r3, #24
 80076ee:	429c      	cmp	r4, r3
 80076f0:	f43f af31 	beq.w	8007556 <HAL_DMA_Abort+0xee>
 80076f4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80076f8:	429c      	cmp	r4, r3
 80076fa:	f43f af2c 	beq.w	8007556 <HAL_DMA_Abort+0xee>
 80076fe:	3318      	adds	r3, #24
 8007700:	429c      	cmp	r4, r3
 8007702:	f43f af28 	beq.w	8007556 <HAL_DMA_Abort+0xee>
 8007706:	3318      	adds	r3, #24
 8007708:	429c      	cmp	r4, r3
 800770a:	f43f af24 	beq.w	8007556 <HAL_DMA_Abort+0xee>
 800770e:	e722      	b.n	8007556 <HAL_DMA_Abort+0xee>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007710:	f7fe fb7c 	bl	8005e0c <HAL_GetTick>
 8007714:	1bc0      	subs	r0, r0, r7
 8007716:	2805      	cmp	r0, #5
 8007718:	f67f af21 	bls.w	800755e <HAL_DMA_Abort+0xf6>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800771c:	2320      	movs	r3, #32
 800771e:	656b      	str	r3, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8007720:	2300      	movs	r3, #0
 8007722:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8007726:	2303      	movs	r3, #3
 8007728:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 800772c:	e6ab      	b.n	8007486 <HAL_DMA_Abort+0x1e>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800772e:	213f      	movs	r1, #63	; 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007730:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007732:	fa01 f202 	lsl.w	r2, r1, r2
 8007736:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007738:	d10b      	bne.n	8007752 <HAL_DMA_Abort+0x2ea>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800773a:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	; 0x64
 800773e:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8007740:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8007742:	bbab      	cbnz	r3, 80077b0 <HAL_DMA_Abort+0x348>
    __HAL_UNLOCK(hdma);
 8007744:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8007746:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8007748:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800774c:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8007750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007752:	4a1c      	ldr	r2, [pc, #112]	; (80077c4 <HAL_DMA_Abort+0x35c>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d0f0      	beq.n	800773a <HAL_DMA_Abort+0x2d2>
 8007758:	3218      	adds	r2, #24
 800775a:	4293      	cmp	r3, r2
 800775c:	d0ed      	beq.n	800773a <HAL_DMA_Abort+0x2d2>
 800775e:	3218      	adds	r2, #24
 8007760:	4293      	cmp	r3, r2
 8007762:	d0ea      	beq.n	800773a <HAL_DMA_Abort+0x2d2>
 8007764:	3218      	adds	r2, #24
 8007766:	4293      	cmp	r3, r2
 8007768:	d0e7      	beq.n	800773a <HAL_DMA_Abort+0x2d2>
 800776a:	3218      	adds	r2, #24
 800776c:	4293      	cmp	r3, r2
 800776e:	d0e4      	beq.n	800773a <HAL_DMA_Abort+0x2d2>
 8007770:	3218      	adds	r2, #24
 8007772:	4293      	cmp	r3, r2
 8007774:	d0e1      	beq.n	800773a <HAL_DMA_Abort+0x2d2>
 8007776:	3218      	adds	r2, #24
 8007778:	4293      	cmp	r3, r2
 800777a:	d0de      	beq.n	800773a <HAL_DMA_Abort+0x2d2>
 800777c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007780:	4293      	cmp	r3, r2
 8007782:	d0da      	beq.n	800773a <HAL_DMA_Abort+0x2d2>
 8007784:	3218      	adds	r2, #24
 8007786:	4293      	cmp	r3, r2
 8007788:	d0d7      	beq.n	800773a <HAL_DMA_Abort+0x2d2>
 800778a:	3218      	adds	r2, #24
 800778c:	4293      	cmp	r3, r2
 800778e:	d0d4      	beq.n	800773a <HAL_DMA_Abort+0x2d2>
 8007790:	3218      	adds	r2, #24
 8007792:	4293      	cmp	r3, r2
 8007794:	d0d1      	beq.n	800773a <HAL_DMA_Abort+0x2d2>
 8007796:	3218      	adds	r2, #24
 8007798:	4293      	cmp	r3, r2
 800779a:	d0ce      	beq.n	800773a <HAL_DMA_Abort+0x2d2>
 800779c:	3218      	adds	r2, #24
 800779e:	4293      	cmp	r3, r2
 80077a0:	d0cb      	beq.n	800773a <HAL_DMA_Abort+0x2d2>
 80077a2:	3218      	adds	r2, #24
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d0c8      	beq.n	800773a <HAL_DMA_Abort+0x2d2>
 80077a8:	3218      	adds	r2, #24
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d0c5      	beq.n	800773a <HAL_DMA_Abort+0x2d2>
 80077ae:	e723      	b.n	80075f8 <HAL_DMA_Abort+0x190>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077b6:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077b8:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 80077bc:	605a      	str	r2, [r3, #4]
 80077be:	e7c1      	b.n	8007744 <HAL_DMA_Abort+0x2dc>
 80077c0:	40020010 	.word	0x40020010
 80077c4:	40020028 	.word	0x40020028
 80077c8:	58025408 	.word	0x58025408

080077cc <HAL_DMA_Abort_IT>:
{
 80077cc:	b510      	push	{r4, lr}
  if(hdma == NULL)
 80077ce:	b128      	cbz	r0, 80077dc <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077d0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d003      	beq.n	80077e0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077d8:	2380      	movs	r3, #128	; 0x80
 80077da:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80077dc:	2001      	movs	r0, #1
 80077de:	e07f      	b.n	80078e0 <HAL_DMA_Abort_IT+0x114>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80077e0:	6803      	ldr	r3, [r0, #0]
 80077e2:	4a50      	ldr	r2, [pc, #320]	; (8007924 <HAL_DMA_Abort_IT+0x158>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d052      	beq.n	800788e <HAL_DMA_Abort_IT+0xc2>
 80077e8:	494f      	ldr	r1, [pc, #316]	; (8007928 <HAL_DMA_Abort_IT+0x15c>)
 80077ea:	428b      	cmp	r3, r1
 80077ec:	d04f      	beq.n	800788e <HAL_DMA_Abort_IT+0xc2>
 80077ee:	3118      	adds	r1, #24
 80077f0:	428b      	cmp	r3, r1
 80077f2:	d04c      	beq.n	800788e <HAL_DMA_Abort_IT+0xc2>
 80077f4:	3118      	adds	r1, #24
 80077f6:	428b      	cmp	r3, r1
 80077f8:	d049      	beq.n	800788e <HAL_DMA_Abort_IT+0xc2>
 80077fa:	3118      	adds	r1, #24
 80077fc:	428b      	cmp	r3, r1
 80077fe:	d046      	beq.n	800788e <HAL_DMA_Abort_IT+0xc2>
 8007800:	3118      	adds	r1, #24
 8007802:	428b      	cmp	r3, r1
 8007804:	d043      	beq.n	800788e <HAL_DMA_Abort_IT+0xc2>
 8007806:	3118      	adds	r1, #24
 8007808:	428b      	cmp	r3, r1
 800780a:	d040      	beq.n	800788e <HAL_DMA_Abort_IT+0xc2>
 800780c:	3118      	adds	r1, #24
 800780e:	428b      	cmp	r3, r1
 8007810:	d03d      	beq.n	800788e <HAL_DMA_Abort_IT+0xc2>
 8007812:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007816:	428b      	cmp	r3, r1
 8007818:	d039      	beq.n	800788e <HAL_DMA_Abort_IT+0xc2>
 800781a:	3118      	adds	r1, #24
 800781c:	428b      	cmp	r3, r1
 800781e:	d036      	beq.n	800788e <HAL_DMA_Abort_IT+0xc2>
 8007820:	3118      	adds	r1, #24
 8007822:	428b      	cmp	r3, r1
 8007824:	d033      	beq.n	800788e <HAL_DMA_Abort_IT+0xc2>
 8007826:	3118      	adds	r1, #24
 8007828:	428b      	cmp	r3, r1
 800782a:	d030      	beq.n	800788e <HAL_DMA_Abort_IT+0xc2>
 800782c:	3118      	adds	r1, #24
 800782e:	428b      	cmp	r3, r1
 8007830:	d02d      	beq.n	800788e <HAL_DMA_Abort_IT+0xc2>
 8007832:	3118      	adds	r1, #24
 8007834:	428b      	cmp	r3, r1
 8007836:	d02a      	beq.n	800788e <HAL_DMA_Abort_IT+0xc2>
 8007838:	3118      	adds	r1, #24
 800783a:	428b      	cmp	r3, r1
 800783c:	d027      	beq.n	800788e <HAL_DMA_Abort_IT+0xc2>
 800783e:	3118      	adds	r1, #24
 8007840:	428b      	cmp	r3, r1
 8007842:	d024      	beq.n	800788e <HAL_DMA_Abort_IT+0xc2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	f022 020e 	bic.w	r2, r2, #14
 800784a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	f022 0201 	bic.w	r2, r2, #1
 8007852:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007854:	4a35      	ldr	r2, [pc, #212]	; (800792c <HAL_DMA_Abort_IT+0x160>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d143      	bne.n	80078e2 <HAL_DMA_Abort_IT+0x116>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800785a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800785c:	6813      	ldr	r3, [r2, #0]
 800785e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007862:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007864:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	; 0x58
 8007868:	f003 021f 	and.w	r2, r3, #31
 800786c:	2301      	movs	r3, #1
 800786e:	4093      	lsls	r3, r2
 8007870:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007872:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
 8007876:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8007878:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800787a:	2b00      	cmp	r3, #0
 800787c:	d046      	beq.n	800790c <HAL_DMA_Abort_IT+0x140>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007884:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007886:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	; 0x70
 800788a:	605a      	str	r2, [r3, #4]
 800788c:	e03e      	b.n	800790c <HAL_DMA_Abort_IT+0x140>
      hdma->State = HAL_DMA_STATE_ABORT;
 800788e:	2104      	movs	r1, #4
      __HAL_DMA_DISABLE(hdma);
 8007890:	4293      	cmp	r3, r2
      hdma->State = HAL_DMA_STATE_ABORT;
 8007892:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8007896:	d01e      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x10a>
 8007898:	4a23      	ldr	r2, [pc, #140]	; (8007928 <HAL_DMA_Abort_IT+0x15c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d01b      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x10a>
 800789e:	3218      	adds	r2, #24
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d018      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x10a>
 80078a4:	3218      	adds	r2, #24
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d015      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x10a>
 80078aa:	3218      	adds	r2, #24
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d012      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x10a>
 80078b0:	3218      	adds	r2, #24
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00f      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x10a>
 80078b6:	3218      	adds	r2, #24
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d00c      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x10a>
 80078bc:	3218      	adds	r2, #24
 80078be:	4293      	cmp	r3, r2
 80078c0:	d009      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x10a>
 80078c2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d005      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x10a>
 80078ca:	3218      	adds	r2, #24
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d002      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x10a>
 80078d0:	3218      	adds	r2, #24
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d0ff      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x10a>
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	f022 0201 	bic.w	r2, r2, #1
 80078dc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80078de:	2000      	movs	r0, #0
}
 80078e0:	bd10      	pop	{r4, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078e2:	4a13      	ldr	r2, [pc, #76]	; (8007930 <HAL_DMA_Abort_IT+0x164>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d0b8      	beq.n	800785a <HAL_DMA_Abort_IT+0x8e>
 80078e8:	3214      	adds	r2, #20
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d0b5      	beq.n	800785a <HAL_DMA_Abort_IT+0x8e>
 80078ee:	3214      	adds	r2, #20
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d0b2      	beq.n	800785a <HAL_DMA_Abort_IT+0x8e>
 80078f4:	3214      	adds	r2, #20
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d0af      	beq.n	800785a <HAL_DMA_Abort_IT+0x8e>
 80078fa:	3214      	adds	r2, #20
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d0ac      	beq.n	800785a <HAL_DMA_Abort_IT+0x8e>
 8007900:	3214      	adds	r2, #20
 8007902:	4293      	cmp	r3, r2
 8007904:	d0a9      	beq.n	800785a <HAL_DMA_Abort_IT+0x8e>
 8007906:	3214      	adds	r2, #20
 8007908:	4293      	cmp	r3, r2
 800790a:	d0a6      	beq.n	800785a <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 800790c:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800790e:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8007910:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8007914:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8007916:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800791a:	b10b      	cbz	r3, 8007920 <HAL_DMA_Abort_IT+0x154>
        hdma->XferAbortCallback(hdma);
 800791c:	4798      	blx	r3
 800791e:	e7de      	b.n	80078de <HAL_DMA_Abort_IT+0x112>
  return HAL_OK;
 8007920:	4618      	mov	r0, r3
 8007922:	e7dd      	b.n	80078e0 <HAL_DMA_Abort_IT+0x114>
 8007924:	40020010 	.word	0x40020010
 8007928:	40020028 	.word	0x40020028
 800792c:	58025408 	.word	0x58025408
 8007930:	5802541c 	.word	0x5802541c

08007934 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 8007934:	2300      	movs	r3, #0
{
 8007936:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 800793a:	9301      	str	r3, [sp, #4]
{
 800793c:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800793e:	4bb4      	ldr	r3, [pc, #720]	; (8007c10 <HAL_DMA_IRQHandler+0x2dc>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007940:	4eb4      	ldr	r6, [pc, #720]	; (8007c14 <HAL_DMA_IRQHandler+0x2e0>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8007942:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007944:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007946:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007948:	42b3      	cmp	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 800794a:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 800794e:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007952:	d047      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xb0>
 8007954:	4ab0      	ldr	r2, [pc, #704]	; (8007c18 <HAL_DMA_IRQHandler+0x2e4>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d044      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xb0>
 800795a:	3218      	adds	r2, #24
 800795c:	4293      	cmp	r3, r2
 800795e:	d041      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xb0>
 8007960:	3218      	adds	r2, #24
 8007962:	4293      	cmp	r3, r2
 8007964:	d03e      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xb0>
 8007966:	3218      	adds	r2, #24
 8007968:	4293      	cmp	r3, r2
 800796a:	d03b      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xb0>
 800796c:	3218      	adds	r2, #24
 800796e:	4293      	cmp	r3, r2
 8007970:	d038      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xb0>
 8007972:	3218      	adds	r2, #24
 8007974:	4293      	cmp	r3, r2
 8007976:	d035      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xb0>
 8007978:	3218      	adds	r2, #24
 800797a:	4293      	cmp	r3, r2
 800797c:	d032      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xb0>
 800797e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007982:	4293      	cmp	r3, r2
 8007984:	d02e      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xb0>
 8007986:	3218      	adds	r2, #24
 8007988:	4293      	cmp	r3, r2
 800798a:	d02b      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xb0>
 800798c:	3218      	adds	r2, #24
 800798e:	4293      	cmp	r3, r2
 8007990:	d028      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xb0>
 8007992:	3218      	adds	r2, #24
 8007994:	4293      	cmp	r3, r2
 8007996:	d025      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xb0>
 8007998:	3218      	adds	r2, #24
 800799a:	4293      	cmp	r3, r2
 800799c:	d022      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xb0>
 800799e:	3218      	adds	r2, #24
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d01f      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xb0>
 80079a4:	3218      	adds	r2, #24
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d01c      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xb0>
 80079aa:	3218      	adds	r2, #24
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d019      	beq.n	80079e4 <HAL_DMA_IRQHandler+0xb0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80079b0:	4a9a      	ldr	r2, [pc, #616]	; (8007c1c <HAL_DMA_IRQHandler+0x2e8>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	f040 820a 	bne.w	8007dcc <HAL_DMA_IRQHandler+0x498>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80079b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80079ba:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80079bc:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80079be:	f001 011f 	and.w	r1, r1, #31
 80079c2:	4088      	lsls	r0, r1
 80079c4:	ea10 0f0c 	tst.w	r0, ip
 80079c8:	f000 8227 	beq.w	8007e1a <HAL_DMA_IRQHandler+0x4e6>
 80079cc:	0756      	lsls	r6, r2, #29
 80079ce:	f140 8224 	bpl.w	8007e1a <HAL_DMA_IRQHandler+0x4e6>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079d2:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80079d4:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079d6:	f140 8218 	bpl.w	8007e0a <HAL_DMA_IRQHandler+0x4d6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079da:	03d3      	lsls	r3, r2, #15
 80079dc:	f100 821b 	bmi.w	8007e16 <HAL_DMA_IRQHandler+0x4e2>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80079e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80079e2:	e17f      	b.n	8007ce4 <HAL_DMA_IRQHandler+0x3b0>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079e4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80079e6:	2008      	movs	r0, #8
 80079e8:	f002 021f 	and.w	r2, r2, #31
 80079ec:	4090      	lsls	r0, r2
 80079ee:	ea10 0f08 	tst.w	r0, r8
 80079f2:	d03d      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x13c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80079f4:	42b3      	cmp	r3, r6
 80079f6:	d02e      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x122>
 80079f8:	4987      	ldr	r1, [pc, #540]	; (8007c18 <HAL_DMA_IRQHandler+0x2e4>)
 80079fa:	428b      	cmp	r3, r1
 80079fc:	d02b      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x122>
 80079fe:	3118      	adds	r1, #24
 8007a00:	428b      	cmp	r3, r1
 8007a02:	d028      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x122>
 8007a04:	3118      	adds	r1, #24
 8007a06:	428b      	cmp	r3, r1
 8007a08:	d025      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x122>
 8007a0a:	3118      	adds	r1, #24
 8007a0c:	428b      	cmp	r3, r1
 8007a0e:	d022      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x122>
 8007a10:	3118      	adds	r1, #24
 8007a12:	428b      	cmp	r3, r1
 8007a14:	d01f      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x122>
 8007a16:	3118      	adds	r1, #24
 8007a18:	428b      	cmp	r3, r1
 8007a1a:	d01c      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x122>
 8007a1c:	3118      	adds	r1, #24
 8007a1e:	428b      	cmp	r3, r1
 8007a20:	d019      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x122>
 8007a22:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007a26:	428b      	cmp	r3, r1
 8007a28:	d015      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x122>
 8007a2a:	3118      	adds	r1, #24
 8007a2c:	428b      	cmp	r3, r1
 8007a2e:	d012      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x122>
 8007a30:	3118      	adds	r1, #24
 8007a32:	428b      	cmp	r3, r1
 8007a34:	d00f      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x122>
 8007a36:	3118      	adds	r1, #24
 8007a38:	428b      	cmp	r3, r1
 8007a3a:	d00c      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x122>
 8007a3c:	3118      	adds	r1, #24
 8007a3e:	428b      	cmp	r3, r1
 8007a40:	d009      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x122>
 8007a42:	3118      	adds	r1, #24
 8007a44:	428b      	cmp	r3, r1
 8007a46:	d006      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x122>
 8007a48:	3118      	adds	r1, #24
 8007a4a:	428b      	cmp	r3, r1
 8007a4c:	d003      	beq.n	8007a56 <HAL_DMA_IRQHandler+0x122>
 8007a4e:	3118      	adds	r1, #24
 8007a50:	428b      	cmp	r3, r1
 8007a52:	f040 80c3 	bne.w	8007bdc <HAL_DMA_IRQHandler+0x2a8>
 8007a56:	6819      	ldr	r1, [r3, #0]
 8007a58:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8007a5c:	b141      	cbz	r1, 8007a70 <HAL_DMA_IRQHandler+0x13c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007a5e:	6819      	ldr	r1, [r3, #0]
 8007a60:	f021 0104 	bic.w	r1, r1, #4
 8007a64:	6019      	str	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a66:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007a68:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007a6a:	f041 0101 	orr.w	r1, r1, #1
 8007a6e:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a70:	fa28 f102 	lsr.w	r1, r8, r2
 8007a74:	07c8      	lsls	r0, r1, #31
 8007a76:	d534      	bpl.n	8007ae2 <HAL_DMA_IRQHandler+0x1ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007a78:	42b3      	cmp	r3, r6
 8007a7a:	d02e      	beq.n	8007ada <HAL_DMA_IRQHandler+0x1a6>
 8007a7c:	4966      	ldr	r1, [pc, #408]	; (8007c18 <HAL_DMA_IRQHandler+0x2e4>)
 8007a7e:	428b      	cmp	r3, r1
 8007a80:	d02b      	beq.n	8007ada <HAL_DMA_IRQHandler+0x1a6>
 8007a82:	3118      	adds	r1, #24
 8007a84:	428b      	cmp	r3, r1
 8007a86:	d028      	beq.n	8007ada <HAL_DMA_IRQHandler+0x1a6>
 8007a88:	3118      	adds	r1, #24
 8007a8a:	428b      	cmp	r3, r1
 8007a8c:	d025      	beq.n	8007ada <HAL_DMA_IRQHandler+0x1a6>
 8007a8e:	3118      	adds	r1, #24
 8007a90:	428b      	cmp	r3, r1
 8007a92:	d022      	beq.n	8007ada <HAL_DMA_IRQHandler+0x1a6>
 8007a94:	3118      	adds	r1, #24
 8007a96:	428b      	cmp	r3, r1
 8007a98:	d01f      	beq.n	8007ada <HAL_DMA_IRQHandler+0x1a6>
 8007a9a:	3118      	adds	r1, #24
 8007a9c:	428b      	cmp	r3, r1
 8007a9e:	d01c      	beq.n	8007ada <HAL_DMA_IRQHandler+0x1a6>
 8007aa0:	3118      	adds	r1, #24
 8007aa2:	428b      	cmp	r3, r1
 8007aa4:	d019      	beq.n	8007ada <HAL_DMA_IRQHandler+0x1a6>
 8007aa6:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007aaa:	428b      	cmp	r3, r1
 8007aac:	d015      	beq.n	8007ada <HAL_DMA_IRQHandler+0x1a6>
 8007aae:	3118      	adds	r1, #24
 8007ab0:	428b      	cmp	r3, r1
 8007ab2:	d012      	beq.n	8007ada <HAL_DMA_IRQHandler+0x1a6>
 8007ab4:	3118      	adds	r1, #24
 8007ab6:	428b      	cmp	r3, r1
 8007ab8:	d00f      	beq.n	8007ada <HAL_DMA_IRQHandler+0x1a6>
 8007aba:	3118      	adds	r1, #24
 8007abc:	428b      	cmp	r3, r1
 8007abe:	d00c      	beq.n	8007ada <HAL_DMA_IRQHandler+0x1a6>
 8007ac0:	3118      	adds	r1, #24
 8007ac2:	428b      	cmp	r3, r1
 8007ac4:	d009      	beq.n	8007ada <HAL_DMA_IRQHandler+0x1a6>
 8007ac6:	3118      	adds	r1, #24
 8007ac8:	428b      	cmp	r3, r1
 8007aca:	d006      	beq.n	8007ada <HAL_DMA_IRQHandler+0x1a6>
 8007acc:	3118      	adds	r1, #24
 8007ace:	428b      	cmp	r3, r1
 8007ad0:	d003      	beq.n	8007ada <HAL_DMA_IRQHandler+0x1a6>
 8007ad2:	3118      	adds	r1, #24
 8007ad4:	428b      	cmp	r3, r1
 8007ad6:	f040 8085 	bne.w	8007be4 <HAL_DMA_IRQHandler+0x2b0>
 8007ada:	6959      	ldr	r1, [r3, #20]
 8007adc:	0609      	lsls	r1, r1, #24
 8007ade:	f100 8083 	bmi.w	8007be8 <HAL_DMA_IRQHandler+0x2b4>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ae2:	2104      	movs	r1, #4
 8007ae4:	4091      	lsls	r1, r2
 8007ae6:	ea11 0f08 	tst.w	r1, r8
 8007aea:	d032      	beq.n	8007b52 <HAL_DMA_IRQHandler+0x21e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007aec:	42b3      	cmp	r3, r6
 8007aee:	d02d      	beq.n	8007b4c <HAL_DMA_IRQHandler+0x218>
 8007af0:	4849      	ldr	r0, [pc, #292]	; (8007c18 <HAL_DMA_IRQHandler+0x2e4>)
 8007af2:	4283      	cmp	r3, r0
 8007af4:	d02a      	beq.n	8007b4c <HAL_DMA_IRQHandler+0x218>
 8007af6:	3018      	adds	r0, #24
 8007af8:	4283      	cmp	r3, r0
 8007afa:	d027      	beq.n	8007b4c <HAL_DMA_IRQHandler+0x218>
 8007afc:	3018      	adds	r0, #24
 8007afe:	4283      	cmp	r3, r0
 8007b00:	d024      	beq.n	8007b4c <HAL_DMA_IRQHandler+0x218>
 8007b02:	3018      	adds	r0, #24
 8007b04:	4283      	cmp	r3, r0
 8007b06:	d021      	beq.n	8007b4c <HAL_DMA_IRQHandler+0x218>
 8007b08:	3018      	adds	r0, #24
 8007b0a:	4283      	cmp	r3, r0
 8007b0c:	d01e      	beq.n	8007b4c <HAL_DMA_IRQHandler+0x218>
 8007b0e:	3018      	adds	r0, #24
 8007b10:	4283      	cmp	r3, r0
 8007b12:	d01b      	beq.n	8007b4c <HAL_DMA_IRQHandler+0x218>
 8007b14:	3018      	adds	r0, #24
 8007b16:	4283      	cmp	r3, r0
 8007b18:	d018      	beq.n	8007b4c <HAL_DMA_IRQHandler+0x218>
 8007b1a:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8007b1e:	4283      	cmp	r3, r0
 8007b20:	d014      	beq.n	8007b4c <HAL_DMA_IRQHandler+0x218>
 8007b22:	3018      	adds	r0, #24
 8007b24:	4283      	cmp	r3, r0
 8007b26:	d011      	beq.n	8007b4c <HAL_DMA_IRQHandler+0x218>
 8007b28:	3018      	adds	r0, #24
 8007b2a:	4283      	cmp	r3, r0
 8007b2c:	d00e      	beq.n	8007b4c <HAL_DMA_IRQHandler+0x218>
 8007b2e:	3018      	adds	r0, #24
 8007b30:	4283      	cmp	r3, r0
 8007b32:	d00b      	beq.n	8007b4c <HAL_DMA_IRQHandler+0x218>
 8007b34:	3018      	adds	r0, #24
 8007b36:	4283      	cmp	r3, r0
 8007b38:	d008      	beq.n	8007b4c <HAL_DMA_IRQHandler+0x218>
 8007b3a:	3018      	adds	r0, #24
 8007b3c:	4283      	cmp	r3, r0
 8007b3e:	d005      	beq.n	8007b4c <HAL_DMA_IRQHandler+0x218>
 8007b40:	3018      	adds	r0, #24
 8007b42:	4283      	cmp	r3, r0
 8007b44:	d002      	beq.n	8007b4c <HAL_DMA_IRQHandler+0x218>
 8007b46:	3018      	adds	r0, #24
 8007b48:	4283      	cmp	r3, r0
 8007b4a:	d155      	bne.n	8007bf8 <HAL_DMA_IRQHandler+0x2c4>
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	0780      	lsls	r0, r0, #30
 8007b50:	d454      	bmi.n	8007bfc <HAL_DMA_IRQHandler+0x2c8>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b52:	2110      	movs	r1, #16
 8007b54:	fa01 f202 	lsl.w	r2, r1, r2
 8007b58:	ea12 0f08 	tst.w	r2, r8
 8007b5c:	d064      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x2f4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007b5e:	42b3      	cmp	r3, r6
 8007b60:	d02d      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x28a>
 8007b62:	492d      	ldr	r1, [pc, #180]	; (8007c18 <HAL_DMA_IRQHandler+0x2e4>)
 8007b64:	428b      	cmp	r3, r1
 8007b66:	d02a      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x28a>
 8007b68:	3118      	adds	r1, #24
 8007b6a:	428b      	cmp	r3, r1
 8007b6c:	d027      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x28a>
 8007b6e:	3118      	adds	r1, #24
 8007b70:	428b      	cmp	r3, r1
 8007b72:	d024      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x28a>
 8007b74:	3118      	adds	r1, #24
 8007b76:	428b      	cmp	r3, r1
 8007b78:	d021      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x28a>
 8007b7a:	3118      	adds	r1, #24
 8007b7c:	428b      	cmp	r3, r1
 8007b7e:	d01e      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x28a>
 8007b80:	3118      	adds	r1, #24
 8007b82:	428b      	cmp	r3, r1
 8007b84:	d01b      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x28a>
 8007b86:	3118      	adds	r1, #24
 8007b88:	428b      	cmp	r3, r1
 8007b8a:	d018      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x28a>
 8007b8c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007b90:	428b      	cmp	r3, r1
 8007b92:	d014      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x28a>
 8007b94:	3118      	adds	r1, #24
 8007b96:	428b      	cmp	r3, r1
 8007b98:	d011      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x28a>
 8007b9a:	3118      	adds	r1, #24
 8007b9c:	428b      	cmp	r3, r1
 8007b9e:	d00e      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x28a>
 8007ba0:	3118      	adds	r1, #24
 8007ba2:	428b      	cmp	r3, r1
 8007ba4:	d00b      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x28a>
 8007ba6:	3118      	adds	r1, #24
 8007ba8:	428b      	cmp	r3, r1
 8007baa:	d008      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x28a>
 8007bac:	3118      	adds	r1, #24
 8007bae:	428b      	cmp	r3, r1
 8007bb0:	d005      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x28a>
 8007bb2:	3118      	adds	r1, #24
 8007bb4:	428b      	cmp	r3, r1
 8007bb6:	d002      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x28a>
 8007bb8:	3118      	adds	r1, #24
 8007bba:	428b      	cmp	r3, r1
 8007bbc:	d124      	bne.n	8007c08 <HAL_DMA_IRQHandler+0x2d4>
 8007bbe:	6819      	ldr	r1, [r3, #0]
 8007bc0:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8007bc4:	2900      	cmp	r1, #0
 8007bc6:	d02f      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x2f4>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007bc8:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	0350      	lsls	r0, r2, #13
 8007bce:	f140 8091 	bpl.w	8007cf4 <HAL_DMA_IRQHandler+0x3c0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	0319      	lsls	r1, r3, #12
 8007bd6:	d423      	bmi.n	8007c20 <HAL_DMA_IRQHandler+0x2ec>
          if(hdma->XferHalfCpltCallback != NULL)
 8007bd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bda:	e022      	b.n	8007c22 <HAL_DMA_IRQHandler+0x2ee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007bdc:	6819      	ldr	r1, [r3, #0]
 8007bde:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8007be2:	e73b      	b.n	8007a5c <HAL_DMA_IRQHandler+0x128>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007be4:	6819      	ldr	r1, [r3, #0]
 8007be6:	e77c      	b.n	8007ae2 <HAL_DMA_IRQHandler+0x1ae>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007be8:	2101      	movs	r1, #1
 8007bea:	4091      	lsls	r1, r2
 8007bec:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007bee:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007bf0:	f041 0102 	orr.w	r1, r1, #2
 8007bf4:	6561      	str	r1, [r4, #84]	; 0x54
 8007bf6:	e774      	b.n	8007ae2 <HAL_DMA_IRQHandler+0x1ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007bf8:	6819      	ldr	r1, [r3, #0]
 8007bfa:	e7aa      	b.n	8007b52 <HAL_DMA_IRQHandler+0x21e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007bfc:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007bfe:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007c00:	f041 0104 	orr.w	r1, r1, #4
 8007c04:	6561      	str	r1, [r4, #84]	; 0x54
 8007c06:	e7a4      	b.n	8007b52 <HAL_DMA_IRQHandler+0x21e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007c08:	6819      	ldr	r1, [r3, #0]
 8007c0a:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8007c0e:	e7d9      	b.n	8007bc4 <HAL_DMA_IRQHandler+0x290>
 8007c10:	24000000 	.word	0x24000000
 8007c14:	40020010 	.word	0x40020010
 8007c18:	40020028 	.word	0x40020028
 8007c1c:	58025408 	.word	0x58025408
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007c20:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8007c22:	b10b      	cbz	r3, 8007c28 <HAL_DMA_IRQHandler+0x2f4>
            hdma->XferHalfCpltCallback(hdma);
 8007c24:	4620      	mov	r0, r4
 8007c26:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c28:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007c2a:	2020      	movs	r0, #32
 8007c2c:	f001 011f 	and.w	r1, r1, #31
 8007c30:	4088      	lsls	r0, r1
 8007c32:	ea10 0f08 	tst.w	r0, r8
 8007c36:	d073      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x3ec>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	42b3      	cmp	r3, r6
 8007c3c:	d02d      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x366>
 8007c3e:	4a8f      	ldr	r2, [pc, #572]	; (8007e7c <HAL_DMA_IRQHandler+0x548>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d02a      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x366>
 8007c44:	3218      	adds	r2, #24
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d027      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x366>
 8007c4a:	3218      	adds	r2, #24
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d024      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x366>
 8007c50:	3218      	adds	r2, #24
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d021      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x366>
 8007c56:	3218      	adds	r2, #24
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d01e      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x366>
 8007c5c:	3218      	adds	r2, #24
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d01b      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x366>
 8007c62:	3218      	adds	r2, #24
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d018      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x366>
 8007c68:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d014      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x366>
 8007c70:	3218      	adds	r2, #24
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d011      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x366>
 8007c76:	3218      	adds	r2, #24
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d00e      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x366>
 8007c7c:	3218      	adds	r2, #24
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d00b      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x366>
 8007c82:	3218      	adds	r2, #24
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d008      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x366>
 8007c88:	3218      	adds	r2, #24
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d005      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x366>
 8007c8e:	3218      	adds	r2, #24
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d002      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x366>
 8007c94:	3218      	adds	r2, #24
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d135      	bne.n	8007d06 <HAL_DMA_IRQHandler+0x3d2>
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8007ca0:	2a00      	cmp	r2, #0
 8007ca2:	d03d      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x3ec>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ca4:	60a8      	str	r0, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007ca6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8007caa:	2a04      	cmp	r2, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007cac:	681a      	ldr	r2, [r3, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007cae:	d12e      	bne.n	8007d0e <HAL_DMA_IRQHandler+0x3da>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007cb0:	f022 0216 	bic.w	r2, r2, #22
 8007cb4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007cb6:	695a      	ldr	r2, [r3, #20]
 8007cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cbc:	615a      	str	r2, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007cbe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007cc0:	b90a      	cbnz	r2, 8007cc6 <HAL_DMA_IRQHandler+0x392>
 8007cc2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007cc4:	b11a      	cbz	r2, 8007cce <HAL_DMA_IRQHandler+0x39a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	f022 0208 	bic.w	r2, r2, #8
 8007ccc:	601a      	str	r2, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007cce:	233f      	movs	r3, #63	; 0x3f
 8007cd0:	fa03 f101 	lsl.w	r1, r3, r1
          __HAL_UNLOCK(hdma);
 8007cd4:	2300      	movs	r3, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007cd6:	60a9      	str	r1, [r5, #8]
          __HAL_UNLOCK(hdma);
 8007cd8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8007ce2:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (hdma->XferErrorCallback != NULL)
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 808d 	beq.w	8007e04 <HAL_DMA_IRQHandler+0x4d0>
        hdma->XferErrorCallback(hdma);
 8007cea:	4620      	mov	r0, r4
}
 8007cec:	b002      	add	sp, #8
 8007cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8007cf2:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	05d2      	lsls	r2, r2, #23
 8007cf8:	f53f af6e 	bmi.w	8007bd8 <HAL_DMA_IRQHandler+0x2a4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	f022 0208 	bic.w	r2, r2, #8
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	e768      	b.n	8007bd8 <HAL_DMA_IRQHandler+0x2a4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8007d0c:	e7c8      	b.n	8007ca0 <HAL_DMA_IRQHandler+0x36c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007d0e:	0355      	lsls	r5, r2, #13
 8007d10:	d54d      	bpl.n	8007dae <HAL_DMA_IRQHandler+0x47a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	0318      	lsls	r0, r3, #12
 8007d16:	d457      	bmi.n	8007dc8 <HAL_DMA_IRQHandler+0x494>
            if(hdma->XferM1CpltCallback != NULL)
 8007d18:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if(hdma->XferCpltCallback != NULL)
 8007d1a:	b10b      	cbz	r3, 8007d20 <HAL_DMA_IRQHandler+0x3ec>
            hdma->XferCpltCallback(hdma);
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d06e      	beq.n	8007e04 <HAL_DMA_IRQHandler+0x4d0>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007d26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007d28:	07d9      	lsls	r1, r3, #31
 8007d2a:	d53e      	bpl.n	8007daa <HAL_DMA_IRQHandler+0x476>
        hdma->State = HAL_DMA_STATE_ABORT;
 8007d2c:	2304      	movs	r3, #4
 8007d2e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	42b3      	cmp	r3, r6
 8007d36:	d01e      	beq.n	8007d76 <HAL_DMA_IRQHandler+0x442>
 8007d38:	4a50      	ldr	r2, [pc, #320]	; (8007e7c <HAL_DMA_IRQHandler+0x548>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d01b      	beq.n	8007d76 <HAL_DMA_IRQHandler+0x442>
 8007d3e:	3218      	adds	r2, #24
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d018      	beq.n	8007d76 <HAL_DMA_IRQHandler+0x442>
 8007d44:	3218      	adds	r2, #24
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d015      	beq.n	8007d76 <HAL_DMA_IRQHandler+0x442>
 8007d4a:	3218      	adds	r2, #24
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d012      	beq.n	8007d76 <HAL_DMA_IRQHandler+0x442>
 8007d50:	3218      	adds	r2, #24
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d00f      	beq.n	8007d76 <HAL_DMA_IRQHandler+0x442>
 8007d56:	3218      	adds	r2, #24
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d00c      	beq.n	8007d76 <HAL_DMA_IRQHandler+0x442>
 8007d5c:	3218      	adds	r2, #24
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d009      	beq.n	8007d76 <HAL_DMA_IRQHandler+0x442>
 8007d62:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d005      	beq.n	8007d76 <HAL_DMA_IRQHandler+0x442>
 8007d6a:	3218      	adds	r2, #24
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d002      	beq.n	8007d76 <HAL_DMA_IRQHandler+0x442>
 8007d70:	3218      	adds	r2, #24
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d0ff      	beq.n	8007d76 <HAL_DMA_IRQHandler+0x442>
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	f022 0201 	bic.w	r2, r2, #1
 8007d7c:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d7e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007d82:	fbb7 f7f2 	udiv	r7, r7, r2
          if (++count > timeout)
 8007d86:	9a01      	ldr	r2, [sp, #4]
 8007d88:	3201      	adds	r2, #1
 8007d8a:	42ba      	cmp	r2, r7
 8007d8c:	9201      	str	r2, [sp, #4]
 8007d8e:	d802      	bhi.n	8007d96 <HAL_DMA_IRQHandler+0x462>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	07d2      	lsls	r2, r2, #31
 8007d94:	d4f7      	bmi.n	8007d86 <HAL_DMA_IRQHandler+0x452>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007d96:	681b      	ldr	r3, [r3, #0]
        __HAL_UNLOCK(hdma);
 8007d98:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007d9a:	07df      	lsls	r7, r3, #31
        __HAL_UNLOCK(hdma);
 8007d9c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 8007da0:	bf4c      	ite	mi
 8007da2:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8007da4:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 8007da6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8007daa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007dac:	e79a      	b.n	8007ce4 <HAL_DMA_IRQHandler+0x3b0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8007db4:	d108      	bne.n	8007dc8 <HAL_DMA_IRQHandler+0x494>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007db6:	6819      	ldr	r1, [r3, #0]
 8007db8:	f021 0110 	bic.w	r1, r1, #16
 8007dbc:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8007dbe:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8007dc0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8007dc4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8007dc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007dca:	e7a6      	b.n	8007d1a <HAL_DMA_IRQHandler+0x3e6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007dcc:	4a2c      	ldr	r2, [pc, #176]	; (8007e80 <HAL_DMA_IRQHandler+0x54c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	f43f adf2 	beq.w	80079b8 <HAL_DMA_IRQHandler+0x84>
 8007dd4:	3214      	adds	r2, #20
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	f43f adee 	beq.w	80079b8 <HAL_DMA_IRQHandler+0x84>
 8007ddc:	3214      	adds	r2, #20
 8007dde:	4293      	cmp	r3, r2
 8007de0:	f43f adea 	beq.w	80079b8 <HAL_DMA_IRQHandler+0x84>
 8007de4:	3214      	adds	r2, #20
 8007de6:	4293      	cmp	r3, r2
 8007de8:	f43f ade6 	beq.w	80079b8 <HAL_DMA_IRQHandler+0x84>
 8007dec:	3214      	adds	r2, #20
 8007dee:	4293      	cmp	r3, r2
 8007df0:	f43f ade2 	beq.w	80079b8 <HAL_DMA_IRQHandler+0x84>
 8007df4:	3214      	adds	r2, #20
 8007df6:	4293      	cmp	r3, r2
 8007df8:	f43f adde 	beq.w	80079b8 <HAL_DMA_IRQHandler+0x84>
 8007dfc:	3214      	adds	r2, #20
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	f43f adda 	beq.w	80079b8 <HAL_DMA_IRQHandler+0x84>
}
 8007e04:	b002      	add	sp, #8
 8007e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007e0a:	0697      	lsls	r7, r2, #26
 8007e0c:	d403      	bmi.n	8007e16 <HAL_DMA_IRQHandler+0x4e2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	f022 0204 	bic.w	r2, r2, #4
 8007e14:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8007e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e18:	e764      	b.n	8007ce4 <HAL_DMA_IRQHandler+0x3b0>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007e1a:	2002      	movs	r0, #2
 8007e1c:	4088      	lsls	r0, r1
 8007e1e:	ea10 0f0c 	tst.w	r0, ip
 8007e22:	d016      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x51e>
 8007e24:	0796      	lsls	r6, r2, #30
 8007e26:	d514      	bpl.n	8007e52 <HAL_DMA_IRQHandler+0x51e>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007e28:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e2a:	0410      	lsls	r0, r2, #16
 8007e2c:	d503      	bpl.n	8007e36 <HAL_DMA_IRQHandler+0x502>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007e2e:	03d1      	lsls	r1, r2, #15
 8007e30:	d40d      	bmi.n	8007e4e <HAL_DMA_IRQHandler+0x51a>
          if(hdma->XferM1CpltCallback != NULL)
 8007e32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007e34:	e756      	b.n	8007ce4 <HAL_DMA_IRQHandler+0x3b0>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007e36:	f012 0220 	ands.w	r2, r2, #32
 8007e3a:	d108      	bne.n	8007e4e <HAL_DMA_IRQHandler+0x51a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e3c:	6819      	ldr	r1, [r3, #0]
 8007e3e:	f021 010a 	bic.w	r1, r1, #10
 8007e42:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8007e44:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8007e46:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8007e4a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8007e4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007e50:	e748      	b.n	8007ce4 <HAL_DMA_IRQHandler+0x3b0>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007e52:	2008      	movs	r0, #8
 8007e54:	4088      	lsls	r0, r1
 8007e56:	ea10 0f0c 	tst.w	r0, ip
 8007e5a:	d0d3      	beq.n	8007e04 <HAL_DMA_IRQHandler+0x4d0>
 8007e5c:	0712      	lsls	r2, r2, #28
 8007e5e:	d5d1      	bpl.n	8007e04 <HAL_DMA_IRQHandler+0x4d0>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	f022 020e 	bic.w	r2, r2, #14
 8007e66:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007e68:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8007e6a:	2200      	movs	r2, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007e6c:	fa03 f101 	lsl.w	r1, r3, r1
 8007e70:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e72:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8007e74:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 8007e78:	e795      	b.n	8007da6 <HAL_DMA_IRQHandler+0x472>
 8007e7a:	bf00      	nop
 8007e7c:	40020028 	.word	0x40020028
 8007e80:	5802541c 	.word	0x5802541c

08007e84 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8007e84:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8007e86:	4770      	bx	lr

08007e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e8c:	680b      	ldr	r3, [r1, #0]
{
 8007e8e:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008054 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007e94:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e98:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8007e9a:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 8007e9c:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8008058 <HAL_GPIO_Init+0x1d0>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ea0:	9a01      	ldr	r2, [sp, #4]
 8007ea2:	40da      	lsrs	r2, r3
 8007ea4:	d102      	bne.n	8007eac <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 8007ea6:	b005      	add	sp, #20
 8007ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007eac:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 8007eae:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007eb0:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8007eb2:	ea17 0502 	ands.w	r5, r7, r2
 8007eb6:	f000 80b6 	beq.w	8008026 <HAL_GPIO_Init+0x19e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007eba:	684a      	ldr	r2, [r1, #4]
 8007ebc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8007ec0:	2403      	movs	r4, #3
 8007ec2:	f022 0a10 	bic.w	sl, r2, #16
 8007ec6:	fa04 f40e 	lsl.w	r4, r4, lr
 8007eca:	f10a 36ff 	add.w	r6, sl, #4294967295
 8007ece:	43e4      	mvns	r4, r4
 8007ed0:	2e01      	cmp	r6, #1
 8007ed2:	d810      	bhi.n	8007ef6 <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8007ed4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ed6:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007eda:	68ce      	ldr	r6, [r1, #12]
 8007edc:	fa06 f60e 	lsl.w	r6, r6, lr
 8007ee0:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8007ee4:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8007ee6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ee8:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007eec:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8007ef0:	409e      	lsls	r6, r3
 8007ef2:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8007ef4:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8007ef6:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ef8:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007efc:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007efe:	ea07 0704 	and.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f02:	fa06 f60e 	lsl.w	r6, r6, lr
 8007f06:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 8007f0a:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f0c:	d114      	bne.n	8007f38 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 8007f0e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007f12:	f003 0b07 	and.w	fp, r3, #7
 8007f16:	270f      	movs	r7, #15
 8007f18:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8007f1c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8007f20:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007f24:	fa07 f70b 	lsl.w	r7, r7, fp
 8007f28:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f2c:	690e      	ldr	r6, [r1, #16]
 8007f2e:	fa06 f60b 	lsl.w	r6, r6, fp
 8007f32:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8007f34:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 8007f38:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f3a:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f3c:	f002 0603 	and.w	r6, r2, #3
 8007f40:	fa06 fe0e 	lsl.w	lr, r6, lr
 8007f44:	ea4e 0404 	orr.w	r4, lr, r4
      GPIOx->MODER = temp;
 8007f48:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f4a:	00d4      	lsls	r4, r2, #3
 8007f4c:	d56b      	bpl.n	8008026 <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f4e:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8007f52:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f56:	f003 0703 	and.w	r7, r3, #3
 8007f5a:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f5e:	f044 0402 	orr.w	r4, r4, #2
 8007f62:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f66:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f68:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 8007f6c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007f70:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8007f74:	f004 0402 	and.w	r4, r4, #2
 8007f78:	9403      	str	r4, [sp, #12]
 8007f7a:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f7c:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8007f80:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f84:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f88:	4c31      	ldr	r4, [pc, #196]	; (8008050 <HAL_GPIO_Init+0x1c8>)
 8007f8a:	42a0      	cmp	r0, r4
 8007f8c:	d04d      	beq.n	800802a <HAL_GPIO_Init+0x1a2>
 8007f8e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007f92:	42a0      	cmp	r0, r4
 8007f94:	d04b      	beq.n	800802e <HAL_GPIO_Init+0x1a6>
 8007f96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007f9a:	42a0      	cmp	r0, r4
 8007f9c:	d049      	beq.n	8008032 <HAL_GPIO_Init+0x1aa>
 8007f9e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007fa2:	42a0      	cmp	r0, r4
 8007fa4:	d047      	beq.n	8008036 <HAL_GPIO_Init+0x1ae>
 8007fa6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007faa:	42a0      	cmp	r0, r4
 8007fac:	d045      	beq.n	800803a <HAL_GPIO_Init+0x1b2>
 8007fae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007fb2:	42a0      	cmp	r0, r4
 8007fb4:	d043      	beq.n	800803e <HAL_GPIO_Init+0x1b6>
 8007fb6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007fba:	42a0      	cmp	r0, r4
 8007fbc:	d041      	beq.n	8008042 <HAL_GPIO_Init+0x1ba>
 8007fbe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007fc2:	42a0      	cmp	r0, r4
 8007fc4:	d03f      	beq.n	8008046 <HAL_GPIO_Init+0x1be>
 8007fc6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007fca:	42a0      	cmp	r0, r4
 8007fcc:	d03d      	beq.n	800804a <HAL_GPIO_Init+0x1c2>
 8007fce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007fd2:	42a0      	cmp	r0, r4
 8007fd4:	bf14      	ite	ne
 8007fd6:	240a      	movne	r4, #10
 8007fd8:	2409      	moveq	r4, #9
 8007fda:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007fdc:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007fde:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007fe2:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8007fe4:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 8007fe8:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 8007fec:	bf54      	ite	pl
 8007fee:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8007ff0:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ff2:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8007ff4:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8007ff8:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 8007ffc:	bf54      	ite	pl
 8007ffe:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8008000:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008002:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 8008004:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8008008:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 800800c:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8008010:	bf54      	ite	pl
 8008012:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8008014:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008016:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8008018:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 800801a:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 800801c:	bf54      	ite	pl
 800801e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8008020:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 8008022:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 8008026:	3301      	adds	r3, #1
 8008028:	e73a      	b.n	8007ea0 <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800802a:	2400      	movs	r4, #0
 800802c:	e7d5      	b.n	8007fda <HAL_GPIO_Init+0x152>
 800802e:	2401      	movs	r4, #1
 8008030:	e7d3      	b.n	8007fda <HAL_GPIO_Init+0x152>
 8008032:	2402      	movs	r4, #2
 8008034:	e7d1      	b.n	8007fda <HAL_GPIO_Init+0x152>
 8008036:	2403      	movs	r4, #3
 8008038:	e7cf      	b.n	8007fda <HAL_GPIO_Init+0x152>
 800803a:	2404      	movs	r4, #4
 800803c:	e7cd      	b.n	8007fda <HAL_GPIO_Init+0x152>
 800803e:	2405      	movs	r4, #5
 8008040:	e7cb      	b.n	8007fda <HAL_GPIO_Init+0x152>
 8008042:	2406      	movs	r4, #6
 8008044:	e7c9      	b.n	8007fda <HAL_GPIO_Init+0x152>
 8008046:	2407      	movs	r4, #7
 8008048:	e7c7      	b.n	8007fda <HAL_GPIO_Init+0x152>
 800804a:	2408      	movs	r4, #8
 800804c:	e7c5      	b.n	8007fda <HAL_GPIO_Init+0x152>
 800804e:	bf00      	nop
 8008050:	58020000 	.word	0x58020000
 8008054:	58024400 	.word	0x58024400
 8008058:	58000080 	.word	0x58000080

0800805c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800805c:	6903      	ldr	r3, [r0, #16]
 800805e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008060:	bf14      	ite	ne
 8008062:	2001      	movne	r0, #1
 8008064:	2000      	moveq	r0, #0
 8008066:	4770      	bx	lr

08008068 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008068:	b10a      	cbz	r2, 800806e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800806a:	6181      	str	r1, [r0, #24]
  }
}
 800806c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800806e:	0409      	lsls	r1, r1, #16
 8008070:	e7fb      	b.n	800806a <HAL_GPIO_WritePin+0x2>

08008072 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8008072:	6943      	ldr	r3, [r0, #20]
 8008074:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008078:	bf08      	it	eq
 800807a:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800807c:	6181      	str	r1, [r0, #24]
  }
}
 800807e:	4770      	bx	lr

08008080 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008080:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008082:	4604      	mov	r4, r0
{
 8008084:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8008086:	b360      	cbz	r0, 80080e2 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008088:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800808c:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800808e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008092:	b91b      	cbnz	r3, 800809c <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008094:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008098:	f00b f944 	bl	8013324 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800809c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800809e:	466e      	mov	r6, sp
 80080a0:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80080a2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80080a6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 80080a8:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80080aa:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 80080ae:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 80080b2:	bf08      	it	eq
 80080b4:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 80080b6:	f005 f945 	bl	800d344 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80080ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80080be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80080c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80080c6:	4625      	mov	r5, r4
 80080c8:	e886 0003 	stmia.w	r6, {r0, r1}
 80080cc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80080d0:	f855 0b10 	ldr.w	r0, [r5], #16
 80080d4:	f005 f87a 	bl	800d1cc <USB_CoreInit>
 80080d8:	4606      	mov	r6, r0
 80080da:	b120      	cbz	r0, 80080e6 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80080dc:	2302      	movs	r3, #2
 80080de:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 80080e2:	2501      	movs	r5, #1
 80080e4:	e054      	b.n	8008190 <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80080e6:	4601      	mov	r1, r0
 80080e8:	6820      	ldr	r0, [r4, #0]
 80080ea:	f005 f931 	bl	800d350 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080ee:	4630      	mov	r0, r6
 80080f0:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80080f4:	261c      	movs	r6, #28
 80080f6:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80080fa:	4601      	mov	r1, r0
 80080fc:	b2c2      	uxtb	r2, r0
 80080fe:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008100:	4594      	cmp	ip, r2
 8008102:	d81b      	bhi.n	800813c <HAL_PCD_Init+0xbc>
 8008104:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008106:	261c      	movs	r6, #28
 8008108:	4619      	mov	r1, r3
 800810a:	b2d8      	uxtb	r0, r3
 800810c:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800810e:	4584      	cmp	ip, r0
 8008110:	d822      	bhi.n	8008158 <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008112:	466e      	mov	r6, sp
 8008114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008116:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800811a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800811c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008120:	e886 0003 	stmia.w	r6, {r0, r1}
 8008124:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8008128:	6820      	ldr	r0, [r4, #0]
 800812a:	f005 f953 	bl	800d3d4 <USB_DevInit>
 800812e:	2301      	movs	r3, #1
 8008130:	4605      	mov	r5, r0
 8008132:	b300      	cbz	r0, 8008176 <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008134:	2202      	movs	r2, #2
 8008136:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 800813a:	e7d2      	b.n	80080e2 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 800813c:	fb06 4302 	mla	r3, r6, r2, r4
 8008140:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8008144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008148:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800814c:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8008150:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008152:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
 8008156:	e7d1      	b.n	80080fc <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8008158:	fb06 4200 	mla	r2, r6, r0, r4
 800815c:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8008160:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008164:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008168:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800816c:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008170:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8008174:	e7c9      	b.n	800810a <HAL_PCD_Init+0x8a>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8008176:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800817a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800817e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008180:	2b01      	cmp	r3, #1
 8008182:	d102      	bne.n	800818a <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008184:	4620      	mov	r0, r4
 8008186:	f000 fc58 	bl	8008a3a <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800818a:	6820      	ldr	r0, [r4, #0]
 800818c:	f005 fc54 	bl	800da38 <USB_DevDisconnect>

  return HAL_OK;
}
 8008190:	4628      	mov	r0, r5
 8008192:	b00b      	add	sp, #44	; 0x2c
 8008194:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008196 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8008196:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800819a:	2b01      	cmp	r3, #1
{
 800819c:	b510      	push	{r4, lr}
 800819e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80081a0:	d016      	beq.n	80081d0 <HAL_PCD_Start+0x3a>
 80081a2:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081a4:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80081a6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80081aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d106      	bne.n	80081be <HAL_PCD_Start+0x28>
 80081b0:	69a3      	ldr	r3, [r4, #24]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d003      	beq.n	80081be <HAL_PCD_Start+0x28>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80081b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80081b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081bc:	6383      	str	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80081be:	f005 fc2f 	bl	800da20 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80081c2:	6820      	ldr	r0, [r4, #0]
 80081c4:	f005 f8b8 	bl	800d338 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80081c8:	2000      	movs	r0, #0
 80081ca:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 80081ce:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80081d0:	2002      	movs	r0, #2
 80081d2:	e7fc      	b.n	80081ce <HAL_PCD_Start+0x38>

080081d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80081d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081d8:	6805      	ldr	r5, [r0, #0]
{
 80081da:	b087      	sub	sp, #28
 80081dc:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80081de:	4628      	mov	r0, r5
 80081e0:	f005 fc65 	bl	800daae <USB_GetMode>
 80081e4:	9002      	str	r0, [sp, #8]
 80081e6:	2800      	cmp	r0, #0
 80081e8:	f040 813a 	bne.w	8008460 <HAL_PCD_IRQHandler+0x28c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80081ec:	6820      	ldr	r0, [r4, #0]
 80081ee:	f005 fc2f 	bl	800da50 <USB_ReadInterrupts>
 80081f2:	2800      	cmp	r0, #0
 80081f4:	f000 8134 	beq.w	8008460 <HAL_PCD_IRQHandler+0x28c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80081f8:	6820      	ldr	r0, [r4, #0]
 80081fa:	f005 fc29 	bl	800da50 <USB_ReadInterrupts>
 80081fe:	0782      	lsls	r2, r0, #30
 8008200:	d504      	bpl.n	800820c <HAL_PCD_IRQHandler+0x38>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008202:	6822      	ldr	r2, [r4, #0]
 8008204:	6953      	ldr	r3, [r2, #20]
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	6153      	str	r3, [r2, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800820c:	6820      	ldr	r0, [r4, #0]
 800820e:	f005 fc1f 	bl	800da50 <USB_ReadInterrupts>
 8008212:	06c3      	lsls	r3, r0, #27
 8008214:	d52a      	bpl.n	800826c <HAL_PCD_IRQHandler+0x98>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008216:	6822      	ldr	r2, [r4, #0]
 8008218:	6993      	ldr	r3, [r2, #24]
 800821a:	f023 0310 	bic.w	r3, r3, #16
 800821e:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8008220:	6a2e      	ldr	r6, [r5, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008222:	f3c6 4343 	ubfx	r3, r6, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008226:	f006 080f 	and.w	r8, r6, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800822a:	2b02      	cmp	r3, #2
 800822c:	f040 811b 	bne.w	8008466 <HAL_PCD_IRQHandler+0x292>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008230:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008234:	421e      	tst	r6, r3
 8008236:	d014      	beq.n	8008262 <HAL_PCD_IRQHandler+0x8e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008238:	271c      	movs	r7, #28
 800823a:	f3c6 160a 	ubfx	r6, r6, #4, #11
 800823e:	4628      	mov	r0, r5
 8008240:	fb07 4708 	mla	r7, r7, r8, r4
 8008244:	4632      	mov	r2, r6
 8008246:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 800824a:	f005 fb77 	bl	800d93c <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800824e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8008252:	4433      	add	r3, r6
 8008254:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008258:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800825c:	441e      	add	r6, r3
 800825e:	f8c7 6214 	str.w	r6, [r7, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008262:	6822      	ldr	r2, [r4, #0]
 8008264:	6993      	ldr	r3, [r2, #24]
 8008266:	f043 0310 	orr.w	r3, r3, #16
 800826a:	6193      	str	r3, [r2, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800826c:	6820      	ldr	r0, [r4, #0]
 800826e:	f005 fbef 	bl	800da50 <USB_ReadInterrupts>
 8008272:	0307      	lsls	r7, r0, #12
 8008274:	f100 8106 	bmi.w	8008484 <HAL_PCD_IRQHandler+0x2b0>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008278:	6820      	ldr	r0, [r4, #0]
 800827a:	f005 fbe9 	bl	800da50 <USB_ReadInterrupts>
 800827e:	0346      	lsls	r6, r0, #13
 8008280:	d50b      	bpl.n	800829a <HAL_PCD_IRQHandler+0xc6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008282:	6820      	ldr	r0, [r4, #0]
 8008284:	4626      	mov	r6, r4
 8008286:	f005 fbef 	bl	800da68 <USB_ReadDevAllInEpInterrupt>

      epnum = 0U;
 800828a:	2700      	movs	r7, #0
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800828c:	4682      	mov	sl, r0
 800828e:	f505 6910 	add.w	r9, r5, #2304	; 0x900

      while (ep_intr != 0U)
 8008292:	f1ba 0f00 	cmp.w	sl, #0
 8008296:	f040 81a3 	bne.w	80085e0 <HAL_PCD_IRQHandler+0x40c>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800829a:	6820      	ldr	r0, [r4, #0]
 800829c:	f005 fbd8 	bl	800da50 <USB_ReadInterrupts>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	da15      	bge.n	80082d0 <HAL_PCD_IRQHandler+0xfc>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80082a4:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 80082a8:	f023 0301 	bic.w	r3, r3, #1
 80082ac:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 80082b0:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	f040 822e 	bne.w	8008716 <HAL_PCD_IRQHandler+0x542>
      {
        hpcd->LPM_State = LPM_L0;
 80082ba:	2100      	movs	r1, #0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80082bc:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 80082be:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80082c2:	f000 fbcd 	bl	8008a60 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80082c6:	6822      	ldr	r2, [r4, #0]
 80082c8:	6953      	ldr	r3, [r2, #20]
 80082ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082ce:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80082d0:	6820      	ldr	r0, [r4, #0]
 80082d2:	f005 fbbd 	bl	800da50 <USB_ReadInterrupts>
 80082d6:	0500      	lsls	r0, r0, #20
 80082d8:	d50b      	bpl.n	80082f2 <HAL_PCD_IRQHandler+0x11e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80082da:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 80082de:	07d9      	lsls	r1, r3, #31
 80082e0:	d502      	bpl.n	80082e8 <HAL_PCD_IRQHandler+0x114>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80082e2:	4620      	mov	r0, r4
 80082e4:	f00b f88c 	bl	8013400 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	6953      	ldr	r3, [r2, #20]
 80082ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082f0:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80082f2:	6820      	ldr	r0, [r4, #0]
 80082f4:	f005 fbac 	bl	800da50 <USB_ReadInterrupts>
 80082f8:	0102      	lsls	r2, r0, #4
 80082fa:	d514      	bpl.n	8008326 <HAL_PCD_IRQHandler+0x152>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	695a      	ldr	r2, [r3, #20]
 8008300:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008304:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008306:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 800830a:	2a00      	cmp	r2, #0
 800830c:	f040 8207 	bne.w	800871e <HAL_PCD_IRQHandler+0x54a>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8008312:	2101      	movs	r1, #1

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008314:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008316:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 800831a:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800831e:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008322:	f000 fb9d 	bl	8008a60 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008326:	6820      	ldr	r0, [r4, #0]
 8008328:	f005 fb92 	bl	800da50 <USB_ReadInterrupts>
 800832c:	04c3      	lsls	r3, r0, #19
 800832e:	d535      	bpl.n	800839c <HAL_PCD_IRQHandler+0x1c8>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008330:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 8008334:	6873      	ldr	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008336:	2110      	movs	r1, #16
 8008338:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800833a:	f023 0301 	bic.w	r3, r3, #1
 800833e:	6073      	str	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008340:	f005 f81e 	bl	800d380 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008344:	6860      	ldr	r0, [r4, #4]
 8008346:	f505 6310 	add.w	r3, r5, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800834a:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800834e:	9a02      	ldr	r2, [sp, #8]
 8008350:	4290      	cmp	r0, r2
 8008352:	f040 81e8 	bne.w	8008726 <HAL_PCD_IRQHandler+0x552>
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008356:	69f3      	ldr	r3, [r6, #28]
 8008358:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800835c:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800835e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 8200 	beq.w	8008766 <HAL_PCD_IRQHandler+0x592>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008366:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 800836a:	f043 030b 	orr.w	r3, r3, #11
 800836e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008372:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8008374:	f043 030b 	orr.w	r3, r3, #11
 8008378:	6473      	str	r3, [r6, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800837a:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800837e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008382:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008384:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008388:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800838a:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800838e:	f005 fba3 	bl	800dad8 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008392:	6822      	ldr	r2, [r4, #0]
 8008394:	6953      	ldr	r3, [r2, #20]
 8008396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800839a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800839c:	6820      	ldr	r0, [r4, #0]
 800839e:	f005 fb57 	bl	800da50 <USB_ReadInterrupts>
 80083a2:	0487      	lsls	r7, r0, #18
 80083a4:	d516      	bpl.n	80083d4 <HAL_PCD_IRQHandler+0x200>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80083a6:	6820      	ldr	r0, [r4, #0]
 80083a8:	f005 fb85 	bl	800dab6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80083ac:	6820      	ldr	r0, [r4, #0]
 80083ae:	f005 f8c9 	bl	800d544 <USB_GetDevSpeed>

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80083b2:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80083b4:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80083b6:	f000 ffd7 	bl	8009368 <HAL_RCC_GetHCLKFreq>
 80083ba:	7b22      	ldrb	r2, [r4, #12]
 80083bc:	4601      	mov	r1, r0
 80083be:	4628      	mov	r0, r5
 80083c0:	f004 ff46 	bl	800d250 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80083c4:	4620      	mov	r0, r4
 80083c6:	f00b f808 	bl	80133da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80083ca:	6822      	ldr	r2, [r4, #0]
 80083cc:	6953      	ldr	r3, [r2, #20]
 80083ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083d2:	6153      	str	r3, [r2, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80083d4:	6820      	ldr	r0, [r4, #0]
 80083d6:	f005 fb3b 	bl	800da50 <USB_ReadInterrupts>
 80083da:	0706      	lsls	r6, r0, #28
 80083dc:	d507      	bpl.n	80083ee <HAL_PCD_IRQHandler+0x21a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80083de:	4620      	mov	r0, r4
 80083e0:	f00a fff7 	bl	80133d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80083e4:	6822      	ldr	r2, [r4, #0]
 80083e6:	6953      	ldr	r3, [r2, #20]
 80083e8:	f003 0308 	and.w	r3, r3, #8
 80083ec:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80083ee:	6820      	ldr	r0, [r4, #0]
 80083f0:	f005 fb2e 	bl	800da50 <USB_ReadInterrupts>
 80083f4:	02c5      	lsls	r5, r0, #11
 80083f6:	d508      	bpl.n	800840a <HAL_PCD_IRQHandler+0x236>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80083f8:	2100      	movs	r1, #0
 80083fa:	4620      	mov	r0, r4
 80083fc:	f00b f820 	bl	8013440 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008400:	6822      	ldr	r2, [r4, #0]
 8008402:	6953      	ldr	r3, [r2, #20]
 8008404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008408:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800840a:	6820      	ldr	r0, [r4, #0]
 800840c:	f005 fb20 	bl	800da50 <USB_ReadInterrupts>
 8008410:	0280      	lsls	r0, r0, #10
 8008412:	d508      	bpl.n	8008426 <HAL_PCD_IRQHandler+0x252>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008414:	2100      	movs	r1, #0
 8008416:	4620      	mov	r0, r4
 8008418:	f00b f80e 	bl	8013438 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800841c:	6822      	ldr	r2, [r4, #0]
 800841e:	6953      	ldr	r3, [r2, #20]
 8008420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008424:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008426:	6820      	ldr	r0, [r4, #0]
 8008428:	f005 fb12 	bl	800da50 <USB_ReadInterrupts>
 800842c:	0041      	lsls	r1, r0, #1
 800842e:	d507      	bpl.n	8008440 <HAL_PCD_IRQHandler+0x26c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008430:	4620      	mov	r0, r4
 8008432:	f00b f809 	bl	8013448 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008436:	6822      	ldr	r2, [r4, #0]
 8008438:	6953      	ldr	r3, [r2, #20]
 800843a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800843e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	f005 fb05 	bl	800da50 <USB_ReadInterrupts>
 8008446:	0742      	lsls	r2, r0, #29
 8008448:	d50a      	bpl.n	8008460 <HAL_PCD_IRQHandler+0x28c>
    {
      temp = hpcd->Instance->GOTGINT;
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800844e:	076b      	lsls	r3, r5, #29
 8008450:	d502      	bpl.n	8008458 <HAL_PCD_IRQHandler+0x284>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008452:	4620      	mov	r0, r4
 8008454:	f00a fffc 	bl	8013450 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008458:	6822      	ldr	r2, [r4, #0]
 800845a:	6853      	ldr	r3, [r2, #4]
 800845c:	432b      	orrs	r3, r5
 800845e:	6053      	str	r3, [r2, #4]
    }
  }
}
 8008460:	b007      	add	sp, #28
 8008462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008466:	2b06      	cmp	r3, #6
 8008468:	f47f aefb 	bne.w	8008262 <HAL_PCD_IRQHandler+0x8e>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800846c:	271c      	movs	r7, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800846e:	2208      	movs	r2, #8
 8008470:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8008474:	4628      	mov	r0, r5
 8008476:	f005 fa61 	bl	800d93c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800847a:	fb07 4708 	mla	r7, r7, r8, r4
 800847e:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8008482:	e6e9      	b.n	8008258 <HAL_PCD_IRQHandler+0x84>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008484:	6820      	ldr	r0, [r4, #0]
      epnum = 0U;
 8008486:	2600      	movs	r6, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008488:	f005 fae6 	bl	800da58 <USB_ReadDevAllOutEpInterrupt>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800848c:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 800877c <HAL_PCD_IRQHandler+0x5a8>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008490:	4680      	mov	r8, r0
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008492:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 8008780 <HAL_PCD_IRQHandler+0x5ac>
      while (ep_intr != 0U)
 8008496:	f1b8 0f00 	cmp.w	r8, #0
 800849a:	f43f aeed 	beq.w	8008278 <HAL_PCD_IRQHandler+0xa4>
        if ((ep_intr & 0x1U) != 0U)
 800849e:	f018 0f01 	tst.w	r8, #1
 80084a2:	d061      	beq.n	8008568 <HAL_PCD_IRQHandler+0x394>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80084a4:	fa5f fa86 	uxtb.w	sl, r6
 80084a8:	6820      	ldr	r0, [r4, #0]
 80084aa:	4651      	mov	r1, sl
 80084ac:	f005 fae4 	bl	800da78 <USB_ReadDevOutEPInterrupt>
 80084b0:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80084b2:	07f8      	lsls	r0, r7, #31
 80084b4:	d51c      	bpl.n	80084f0 <HAL_PCD_IRQHandler+0x31c>
 80084b6:	0173      	lsls	r3, r6, #5
 80084b8:	f505 6230 	add.w	r2, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80084bc:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084be:	6820      	ldr	r0, [r4, #0]
 80084c0:	441a      	add	r2, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80084c2:	6091      	str	r1, [r2, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80084c4:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 80084c8:	6921      	ldr	r1, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80084ca:	4413      	add	r3, r2
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80084cc:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  if (hpcd->Init.dma_enable == 1U)
 80084d0:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80084d2:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 80084d4:	d16d      	bne.n	80085b2 <HAL_PCD_IRQHandler+0x3de>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80084d6:	0711      	lsls	r1, r2, #28
 80084d8:	d506      	bpl.n	80084e8 <HAL_PCD_IRQHandler+0x314>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084da:	45cc      	cmp	ip, r9
 80084dc:	d908      	bls.n	80084f0 <HAL_PCD_IRQHandler+0x31c>
 80084de:	0410      	lsls	r0, r2, #16
 80084e0:	d506      	bpl.n	80084f0 <HAL_PCD_IRQHandler+0x31c>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80084e6:	e002      	b.n	80084ee <HAL_PCD_IRQHandler+0x31a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80084e8:	0691      	lsls	r1, r2, #26
 80084ea:	d541      	bpl.n	8008570 <HAL_PCD_IRQHandler+0x39c>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80084ec:	2220      	movs	r2, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084ee:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80084f0:	0738      	lsls	r0, r7, #28
 80084f2:	d520      	bpl.n	8008536 <HAL_PCD_IRQHandler+0x362>
 80084f4:	0173      	lsls	r3, r6, #5
 80084f6:	f505 6230 	add.w	r2, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80084fa:	2108      	movs	r1, #8
 80084fc:	441a      	add	r2, r3
 80084fe:	6091      	str	r1, [r2, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008500:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008502:	f8d2 a040 	ldr.w	sl, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800850a:	45ca      	cmp	sl, r9
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800850c:	4413      	add	r3, r2
 800850e:	689a      	ldr	r2, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008510:	d904      	bls.n	800851c <HAL_PCD_IRQHandler+0x348>
 8008512:	0411      	lsls	r1, r2, #16
 8008514:	d502      	bpl.n	800851c <HAL_PCD_IRQHandler+0x348>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008516:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800851a:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800851c:	4620      	mov	r0, r4
 800851e:	f00a ff41 	bl	80133a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008522:	45ca      	cmp	sl, r9
 8008524:	d907      	bls.n	8008536 <HAL_PCD_IRQHandler+0x362>
 8008526:	6921      	ldr	r1, [r4, #16]
 8008528:	2901      	cmp	r1, #1
 800852a:	d104      	bne.n	8008536 <HAL_PCD_IRQHandler+0x362>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800852c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008530:	6820      	ldr	r0, [r4, #0]
 8008532:	f005 fad1 	bl	800dad8 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008536:	06fa      	lsls	r2, r7, #27
 8008538:	d505      	bpl.n	8008546 <HAL_PCD_IRQHandler+0x372>
 800853a:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800853e:	2210      	movs	r2, #16
 8008540:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8008544:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008546:	06bb      	lsls	r3, r7, #26
 8008548:	d505      	bpl.n	8008556 <HAL_PCD_IRQHandler+0x382>
 800854a:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800854e:	2220      	movs	r2, #32
 8008550:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8008554:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008556:	04bf      	lsls	r7, r7, #18
 8008558:	d506      	bpl.n	8008568 <HAL_PCD_IRQHandler+0x394>
 800855a:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800855e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008562:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8008566:	609a      	str	r2, [r3, #8]
        epnum++;
 8008568:	3601      	adds	r6, #1
        ep_intr >>= 1U;
 800856a:	ea4f 0858 	mov.w	r8, r8, lsr #1
 800856e:	e792      	b.n	8008496 <HAL_PCD_IRQHandler+0x2c2>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008570:	f012 0f28 	tst.w	r2, #40	; 0x28
 8008574:	d1bc      	bne.n	80084f0 <HAL_PCD_IRQHandler+0x31c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008576:	45cc      	cmp	ip, r9
 8008578:	d901      	bls.n	800857e <HAL_PCD_IRQHandler+0x3aa>
 800857a:	0412      	lsls	r2, r2, #16
 800857c:	d4b1      	bmi.n	80084e2 <HAL_PCD_IRQHandler+0x30e>
 800857e:	221c      	movs	r2, #28
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	fb02 4206 	mla	r2, r2, r6, r4
 8008586:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800858a:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 800858e:	1acb      	subs	r3, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008590:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008594:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8008598:	4419      	add	r1, r3
 800859a:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800859e:	b986      	cbnz	r6, 80085c2 <HAL_PCD_IRQHandler+0x3ee>
 80085a0:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 80085a4:	b96b      	cbnz	r3, 80085c2 <HAL_PCD_IRQHandler+0x3ee>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80085a6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80085aa:	2101      	movs	r1, #1
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80085ac:	f005 fa94 	bl	800dad8 <USB_EP0_OutStart>
 80085b0:	e007      	b.n	80085c2 <HAL_PCD_IRQHandler+0x3ee>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80085b2:	45dc      	cmp	ip, fp
 80085b4:	d10a      	bne.n	80085cc <HAL_PCD_IRQHandler+0x3f8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80085b6:	0411      	lsls	r1, r2, #16
 80085b8:	d493      	bmi.n	80084e2 <HAL_PCD_IRQHandler+0x30e>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80085ba:	0692      	lsls	r2, r2, #26
 80085bc:	d501      	bpl.n	80085c2 <HAL_PCD_IRQHandler+0x3ee>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80085be:	2220      	movs	r2, #32
 80085c0:	609a      	str	r2, [r3, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80085c2:	4651      	mov	r1, sl
 80085c4:	4620      	mov	r0, r4
 80085c6:	f00a fef3 	bl	80133b0 <HAL_PCD_DataOutStageCallback>
 80085ca:	e791      	b.n	80084f0 <HAL_PCD_IRQHandler+0x31c>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80085cc:	2e00      	cmp	r6, #0
 80085ce:	d1f8      	bne.n	80085c2 <HAL_PCD_IRQHandler+0x3ee>
 80085d0:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1f4      	bne.n	80085c2 <HAL_PCD_IRQHandler+0x3ee>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80085d8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80085dc:	4631      	mov	r1, r6
 80085de:	e7e5      	b.n	80085ac <HAL_PCD_IRQHandler+0x3d8>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80085e0:	f01a 0f01 	tst.w	sl, #1
 80085e4:	d074      	beq.n	80086d0 <HAL_PCD_IRQHandler+0x4fc>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80085e6:	fa5f fb87 	uxtb.w	fp, r7
 80085ea:	6820      	ldr	r0, [r4, #0]
 80085ec:	4659      	mov	r1, fp
 80085ee:	f005 fa4c 	bl	800da8a <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80085f2:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80085f6:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80085f8:	d020      	beq.n	800863c <HAL_PCD_IRQHandler+0x468>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80085fa:	2001      	movs	r0, #1
 80085fc:	f007 020f 	and.w	r2, r7, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008600:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008604:	fa00 f202 	lsl.w	r2, r0, r2
            if (hpcd->Init.dma_enable == 1U)
 8008608:	6921      	ldr	r1, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800860a:	ea23 0302 	bic.w	r3, r3, r2
            if (hpcd->Init.dma_enable == 1U)
 800860e:	4281      	cmp	r1, r0
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008610:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
 8008614:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008618:	6098      	str	r0, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 800861a:	d10b      	bne.n	8008634 <HAL_PCD_IRQHandler+0x460>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800861c:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 8008620:	4413      	add	r3, r2
 8008622:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008624:	b937      	cbnz	r7, 8008634 <HAL_PCD_IRQHandler+0x460>
 8008626:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008628:	b923      	cbnz	r3, 8008634 <HAL_PCD_IRQHandler+0x460>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800862a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800862e:	6820      	ldr	r0, [r4, #0]
 8008630:	f005 fa52 	bl	800dad8 <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008634:	4659      	mov	r1, fp
 8008636:	4620      	mov	r0, r4
 8008638:	f00a fec3 	bl	80133c2 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800863c:	f018 0f08 	tst.w	r8, #8
 8008640:	d003      	beq.n	800864a <HAL_PCD_IRQHandler+0x476>
 8008642:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008646:	2208      	movs	r2, #8
 8008648:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800864a:	f018 0f10 	tst.w	r8, #16
 800864e:	d003      	beq.n	8008658 <HAL_PCD_IRQHandler+0x484>
 8008650:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008654:	2210      	movs	r2, #16
 8008656:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008658:	f018 0f40 	tst.w	r8, #64	; 0x40
 800865c:	d003      	beq.n	8008666 <HAL_PCD_IRQHandler+0x492>
 800865e:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008662:	2240      	movs	r2, #64	; 0x40
 8008664:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008666:	f018 0f02 	tst.w	r8, #2
 800866a:	d003      	beq.n	8008674 <HAL_PCD_IRQHandler+0x4a0>
 800866c:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008670:	2202      	movs	r2, #2
 8008672:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008674:	f018 0f80 	tst.w	r8, #128	; 0x80
 8008678:	d02a      	beq.n	80086d0 <HAL_PCD_IRQHandler+0x4fc>
  if (ep->xfer_count > ep->xfer_len)
 800867a:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
 800867e:	429a      	cmp	r2, r3
 8008680:	d826      	bhi.n	80086d0 <HAL_PCD_IRQHandler+0x4fc>
  len = ep->xfer_len - ep->xfer_count;
 8008682:	1a9b      	subs	r3, r3, r2
  len32b = (len + 3U) / 4U;
 8008684:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8008686:	6821      	ldr	r1, [r4, #0]
 8008688:	4293      	cmp	r3, r2
 800868a:	9103      	str	r1, [sp, #12]
 800868c:	bf28      	it	cs
 800868e:	4613      	movcs	r3, r2
 8008690:	3303      	adds	r3, #3
 8008692:	089b      	lsrs	r3, r3, #2
 8008694:	9304      	str	r3, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008696:	f501 6310 	add.w	r3, r1, #2304	; 0x900
 800869a:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 800869e:	9305      	str	r3, [sp, #20]
 80086a0:	9b05      	ldr	r3, [sp, #20]
 80086a2:	9804      	ldr	r0, [sp, #16]
 80086a4:	6999      	ldr	r1, [r3, #24]
 80086a6:	b289      	uxth	r1, r1
 80086a8:	4281      	cmp	r1, r0
 80086aa:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
 80086ae:	d214      	bcs.n	80086da <HAL_PCD_IRQHandler+0x506>
  if (ep->xfer_len <= ep->xfer_count)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d80d      	bhi.n	80086d0 <HAL_PCD_IRQHandler+0x4fc>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80086b4:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80086b6:	f007 020f 	and.w	r2, r7, #15
 80086ba:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80086bc:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 80086c0:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80086c4:	fa01 f202 	lsl.w	r2, r1, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80086c8:	ea23 0302 	bic.w	r3, r3, r2
 80086cc:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
        epnum++;
 80086d0:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 80086d2:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 80086d6:	361c      	adds	r6, #28
 80086d8:	e5db      	b.n	8008292 <HAL_PCD_IRQHandler+0xbe>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086da:	4293      	cmp	r3, r2
 80086dc:	d9ea      	bls.n	80086b4 <HAL_PCD_IRQHandler+0x4e0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d0e8      	beq.n	80086b4 <HAL_PCD_IRQHandler+0x4e0>
    len = ep->xfer_len - ep->xfer_count;
 80086e2:	eba3 0802 	sub.w	r8, r3, r2
 80086e6:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80086e8:	465a      	mov	r2, fp
 80086ea:	9803      	ldr	r0, [sp, #12]
 80086ec:	4598      	cmp	r8, r3
 80086ee:	bf28      	it	cs
 80086f0:	4698      	movcs	r8, r3
    len32b = (len + 3U) / 4U;
 80086f2:	f108 0303 	add.w	r3, r8, #3
 80086f6:	089b      	lsrs	r3, r3, #2
 80086f8:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80086fa:	7c23      	ldrb	r3, [r4, #16]
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	fa1f f388 	uxth.w	r3, r8
 8008702:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8008704:	f005 f82e 	bl	800d764 <USB_WritePacket>
    ep->xfer_buff  += len;
 8008708:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800870a:	4443      	add	r3, r8
 800870c:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800870e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8008710:	4443      	add	r3, r8
 8008712:	6573      	str	r3, [r6, #84]	; 0x54
 8008714:	e7c4      	b.n	80086a0 <HAL_PCD_IRQHandler+0x4cc>
        HAL_PCD_ResumeCallback(hpcd);
 8008716:	4620      	mov	r0, r4
 8008718:	f00a fe8a 	bl	8013430 <HAL_PCD_ResumeCallback>
 800871c:	e5d3      	b.n	80082c6 <HAL_PCD_IRQHandler+0xf2>
        HAL_PCD_SuspendCallback(hpcd);
 800871e:	4620      	mov	r0, r4
 8008720:	f00a fe6e 	bl	8013400 <HAL_PCD_SuspendCallback>
 8008724:	e5ff      	b.n	8008326 <HAL_PCD_IRQHandler+0x152>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008726:	6099      	str	r1, [r3, #8]
 8008728:	3320      	adds	r3, #32
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800872a:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800872e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008732:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008736:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800873a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800873e:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008742:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008746:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800874a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800874e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008752:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8008756:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800875a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800875e:	9a02      	ldr	r2, [sp, #8]
 8008760:	3201      	adds	r2, #1
 8008762:	9202      	str	r2, [sp, #8]
 8008764:	e5f3      	b.n	800834e <HAL_PCD_IRQHandler+0x17a>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008766:	6973      	ldr	r3, [r6, #20]
 8008768:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800876c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008770:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008772:	6933      	ldr	r3, [r6, #16]
 8008774:	f043 030b 	orr.w	r3, r3, #11
 8008778:	6133      	str	r3, [r6, #16]
 800877a:	e5fe      	b.n	800837a <HAL_PCD_IRQHandler+0x1a6>
 800877c:	4f54300a 	.word	0x4f54300a
 8008780:	4f54310a 	.word	0x4f54310a

08008784 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8008784:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8008788:	2a01      	cmp	r2, #1
{
 800878a:	b510      	push	{r4, lr}
 800878c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800878e:	d00b      	beq.n	80087a8 <HAL_PCD_SetAddress+0x24>
 8008790:	2201      	movs	r2, #1
 8008792:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008796:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800879a:	6800      	ldr	r0, [r0, #0]
 800879c:	f005 f930 	bl	800da00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80087a0:	2000      	movs	r0, #0
 80087a2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80087a6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80087a8:	2002      	movs	r0, #2
 80087aa:	e7fc      	b.n	80087a6 <HAL_PCD_SetAddress+0x22>

080087ac <HAL_PCD_EP_Open>:
{
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	f001 050f 	and.w	r5, r1, #15
 80087b2:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80087b4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80087b8:	f04f 061c 	mov.w	r6, #28
 80087bc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 80087c0:	ea4f 0080 	mov.w	r0, r0, lsl #2
 80087c4:	d01f      	beq.n	8008806 <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087c6:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 80087ca:	fb06 4605 	mla	r6, r6, r5, r4
 80087ce:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087d0:	4421      	add	r1, r4
    ep->is_in = 1U;
 80087d2:	f886 003d 	strb.w	r0, [r6, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 80087d6:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80087d8:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087da:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 80087dc:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80087de:	b102      	cbz	r2, 80087e2 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 80087e0:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80087e2:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80087e4:	bf04      	itt	eq
 80087e6:	2300      	moveq	r3, #0
 80087e8:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80087ea:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d012      	beq.n	8008818 <HAL_PCD_EP_Open+0x6c>
 80087f2:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80087f4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80087f6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80087fa:	f004 feae 	bl	800d55a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80087fe:	2000      	movs	r0, #0
 8008800:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008804:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008806:	f500 71fe 	add.w	r1, r0, #508	; 0x1fc
    ep->is_in = 0U;
 800880a:	fb06 4605 	mla	r6, r6, r5, r4
 800880e:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008810:	4421      	add	r1, r4
    ep->is_in = 0U;
 8008812:	f886 01fd 	strb.w	r0, [r6, #509]	; 0x1fd
 8008816:	e7de      	b.n	80087d6 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8008818:	2002      	movs	r0, #2
 800881a:	e7f3      	b.n	8008804 <HAL_PCD_EP_Open+0x58>

0800881c <HAL_PCD_EP_Close>:
{
 800881c:	b510      	push	{r4, lr}
 800881e:	4604      	mov	r4, r0
 8008820:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8008824:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008828:	f04f 021c 	mov.w	r2, #28
 800882c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8008830:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008834:	d016      	beq.n	8008864 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008836:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 800883a:	fb02 4200 	mla	r2, r2, r0, r4
 800883e:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008840:	4421      	add	r1, r4
    ep->is_in = 1U;
 8008842:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008846:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8008848:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800884c:	2b01      	cmp	r3, #1
 800884e:	d012      	beq.n	8008876 <HAL_PCD_EP_Close+0x5a>
 8008850:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008852:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008854:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008858:	f004 febe 	bl	800d5d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800885c:	2000      	movs	r0, #0
 800885e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008862:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008864:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8008868:	fb02 4200 	mla	r2, r2, r0, r4
 800886c:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800886e:	4421      	add	r1, r4
    ep->is_in = 0U;
 8008870:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 8008874:	e7e7      	b.n	8008846 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8008876:	2002      	movs	r0, #2
 8008878:	e7f3      	b.n	8008862 <HAL_PCD_EP_Close+0x46>

0800887a <HAL_PCD_EP_Receive>:
{
 800887a:	b538      	push	{r3, r4, r5, lr}
 800887c:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008880:	241c      	movs	r4, #28
 8008882:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8008886:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800888a:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800888e:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8008892:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8008894:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8008898:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 800889c:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80088a0:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80088a4:	6903      	ldr	r3, [r0, #16]
 80088a6:	6800      	ldr	r0, [r0, #0]
 80088a8:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80088aa:	bf08      	it	eq
 80088ac:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 80088b0:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80088b2:	b91d      	cbnz	r5, 80088bc <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80088b4:	f004 fee2 	bl	800d67c <USB_EP0StartXfer>
}
 80088b8:	2000      	movs	r0, #0
 80088ba:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80088bc:	f004 ff66 	bl	800d78c <USB_EPStartXfer>
 80088c0:	e7fa      	b.n	80088b8 <HAL_PCD_EP_Receive+0x3e>

080088c2 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80088c2:	231c      	movs	r3, #28
 80088c4:	f001 010f 	and.w	r1, r1, #15
 80088c8:	fb03 0101 	mla	r1, r3, r1, r0
}
 80088cc:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 80088d0:	4770      	bx	lr

080088d2 <HAL_PCD_EP_Transmit>:
{
 80088d2:	b538      	push	{r3, r4, r5, lr}
 80088d4:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088d8:	241c      	movs	r4, #28
 80088da:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80088de:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088e2:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 80088e4:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 80088e6:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 80088e8:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 80088ea:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 80088ec:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80088ee:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 80088f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 80088f6:	6903      	ldr	r3, [r0, #16]
 80088f8:	6800      	ldr	r0, [r0, #0]
 80088fa:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80088fc:	bf08      	it	eq
 80088fe:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8008900:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008902:	b91d      	cbnz	r5, 800890c <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008904:	f004 feba 	bl	800d67c <USB_EP0StartXfer>
}
 8008908:	2000      	movs	r0, #0
 800890a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800890c:	f004 ff3e 	bl	800d78c <USB_EPStartXfer>
 8008910:	e7fa      	b.n	8008908 <HAL_PCD_EP_Transmit+0x36>

08008912 <HAL_PCD_EP_SetStall>:
{
 8008912:	b538      	push	{r3, r4, r5, lr}
 8008914:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008918:	6843      	ldr	r3, [r0, #4]
{
 800891a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800891c:	429d      	cmp	r5, r3
 800891e:	d82e      	bhi.n	800897e <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8008920:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008924:	f04f 021c 	mov.w	r2, #28
 8008928:	d01f      	beq.n	800896a <HAL_PCD_EP_SetStall+0x58>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800892a:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 800892e:	fb02 0105 	mla	r1, r2, r5, r0
 8008932:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008934:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8008936:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 800893a:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800893c:	701d      	strb	r5, [r3, #0]
  ep->is_stall = 1U;
 800893e:	709a      	strb	r2, [r3, #2]
  __HAL_LOCK(hpcd);
 8008940:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8008944:	4291      	cmp	r1, r2
 8008946:	d01c      	beq.n	8008982 <HAL_PCD_EP_SetStall+0x70>
 8008948:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800894c:	4619      	mov	r1, r3
 800894e:	6820      	ldr	r0, [r4, #0]
 8008950:	f005 f802 	bl	800d958 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008954:	b92d      	cbnz	r5, 8008962 <HAL_PCD_EP_SetStall+0x50>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008956:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800895a:	7c21      	ldrb	r1, [r4, #16]
 800895c:	6820      	ldr	r0, [r4, #0]
 800895e:	f005 f8bb 	bl	800dad8 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8008962:	2000      	movs	r0, #0
 8008964:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008968:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800896a:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 800896e:	fb02 0101 	mla	r1, r2, r1, r0
 8008972:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8008974:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8008978:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 800897c:	e7dd      	b.n	800893a <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 800897e:	2001      	movs	r0, #1
 8008980:	e7f2      	b.n	8008968 <HAL_PCD_EP_SetStall+0x56>
  __HAL_LOCK(hpcd);
 8008982:	2002      	movs	r0, #2
 8008984:	e7f0      	b.n	8008968 <HAL_PCD_EP_SetStall+0x56>

08008986 <HAL_PCD_EP_ClrStall>:
{
 8008986:	b538      	push	{r3, r4, r5, lr}
 8008988:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800898c:	6843      	ldr	r3, [r0, #4]
{
 800898e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008990:	429a      	cmp	r2, r3
 8008992:	d82a      	bhi.n	80089ea <HAL_PCD_EP_ClrStall+0x64>
 8008994:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8008998:	f011 0f80 	tst.w	r1, #128	; 0x80
 800899c:	f04f 001c 	mov.w	r0, #28
 80089a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80089a4:	d018      	beq.n	80089d8 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089a6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 80089aa:	fb00 4002 	mla	r0, r0, r2, r4
 80089ae:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089b0:	4421      	add	r1, r4
    ep->is_in = 1U;
 80089b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 0U;
 80089b6:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80089b8:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80089ba:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80089bc:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d014      	beq.n	80089ee <HAL_PCD_EP_ClrStall+0x68>
 80089c4:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80089c6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80089c8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80089cc:	f004 ffef 	bl	800d9ae <USB_EPClearStall>
  return HAL_OK;
 80089d0:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80089d2:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 80089d6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089d8:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80089dc:	fb00 4002 	mla	r0, r0, r2, r4
 80089e0:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089e2:	4421      	add	r1, r4
    ep->is_in = 0U;
 80089e4:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 80089e8:	e7e5      	b.n	80089b6 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 80089ea:	2001      	movs	r0, #1
 80089ec:	e7f3      	b.n	80089d6 <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 80089ee:	2002      	movs	r0, #2
 80089f0:	e7f1      	b.n	80089d6 <HAL_PCD_EP_ClrStall+0x50>

080089f2 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80089f2:	6800      	ldr	r0, [r0, #0]
 80089f4:	0412      	lsls	r2, r2, #16
{
 80089f6:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80089f8:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if (fifo == 0U)
 80089fa:	b919      	cbnz	r1, 8008a04 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80089fc:	4322      	orrs	r2, r4
 80089fe:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8008a00:	2000      	movs	r0, #0
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008a04:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8008a06:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008a08:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	1c5e      	adds	r6, r3, #1
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	429d      	cmp	r5, r3
 8008a14:	d805      	bhi.n	8008a22 <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008a16:	313f      	adds	r1, #63	; 0x3f
 8008a18:	4322      	orrs	r2, r4
 8008a1a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008a1e:	6042      	str	r2, [r0, #4]
 8008a20:	e7ee      	b.n	8008a00 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008a22:	3340      	adds	r3, #64	; 0x40
 8008a24:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008a2e:	4633      	mov	r3, r6
 8008a30:	e7ed      	b.n	8008a0e <HAL_PCDEx_SetTxFiFo+0x1c>

08008a32 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8008a32:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8008a34:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8008a36:	6259      	str	r1, [r3, #36]	; 0x24
}
 8008a38:	4770      	bx	lr

08008a3a <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8008a3a:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a3c:	6802      	ldr	r2, [r0, #0]
{
 8008a3e:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8008a40:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8008a44:	2000      	movs	r0, #0
 8008a46:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008a4a:	6993      	ldr	r3, [r2, #24]
 8008a4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a50:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008a52:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a58:	f043 0303 	orr.w	r3, r3, #3
 8008a5c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8008a5e:	4770      	bx	lr

08008a60 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008a60:	4770      	bx	lr
	...

08008a64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008a64:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008a66:	4c10      	ldr	r4, [pc, #64]	; (8008aa8 <HAL_PWREx_ConfigSupply+0x44>)
 8008a68:	68e3      	ldr	r3, [r4, #12]
 8008a6a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008a6e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008a70:	d105      	bne.n	8008a7e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008a72:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008a76:	1a18      	subs	r0, r3, r0
 8008a78:	bf18      	it	ne
 8008a7a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008a7c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008a7e:	f023 0307 	bic.w	r3, r3, #7
 8008a82:	4318      	orrs	r0, r3
 8008a84:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8008a86:	f7fd f9c1 	bl	8005e0c <HAL_GetTick>
 8008a8a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008a8c:	6863      	ldr	r3, [r4, #4]
 8008a8e:	049b      	lsls	r3, r3, #18
 8008a90:	d501      	bpl.n	8008a96 <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 8008a92:	2000      	movs	r0, #0
 8008a94:	e7f2      	b.n	8008a7c <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008a96:	f7fd f9b9 	bl	8005e0c <HAL_GetTick>
 8008a9a:	1b40      	subs	r0, r0, r5
 8008a9c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008aa0:	d9f4      	bls.n	8008a8c <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8008aa2:	2001      	movs	r0, #1
 8008aa4:	e7ea      	b.n	8008a7c <HAL_PWREx_ConfigSupply+0x18>
 8008aa6:	bf00      	nop
 8008aa8:	58024800 	.word	0x58024800

08008aac <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008aac:	4a02      	ldr	r2, [pc, #8]	; (8008ab8 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8008aae:	68d3      	ldr	r3, [r2, #12]
 8008ab0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ab4:	60d3      	str	r3, [r2, #12]
}
 8008ab6:	4770      	bx	lr
 8008ab8:	58024800 	.word	0x58024800

08008abc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008abe:	4604      	mov	r4, r0
 8008ac0:	b908      	cbnz	r0, 8008ac6 <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8008ac2:	2001      	movs	r0, #1
 8008ac4:	e08c      	b.n	8008be0 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ac6:	6803      	ldr	r3, [r0, #0]
 8008ac8:	07d8      	lsls	r0, r3, #31
 8008aca:	d45e      	bmi.n	8008b8a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	0799      	lsls	r1, r3, #30
 8008ad0:	f100 80ac 	bmi.w	8008c2c <HAL_RCC_OscConfig+0x170>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	06da      	lsls	r2, r3, #27
 8008ad8:	d527      	bpl.n	8008b2a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ada:	4ba8      	ldr	r3, [pc, #672]	; (8008d7c <HAL_RCC_OscConfig+0x2c0>)
 8008adc:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ade:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ae0:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008ae4:	2a08      	cmp	r2, #8
 8008ae6:	d007      	beq.n	8008af8 <HAL_RCC_OscConfig+0x3c>
 8008ae8:	2a18      	cmp	r2, #24
 8008aea:	f040 810a 	bne.w	8008d02 <HAL_RCC_OscConfig+0x246>
 8008aee:	f001 0203 	and.w	r2, r1, #3
 8008af2:	2a01      	cmp	r2, #1
 8008af4:	f040 8105 	bne.w	8008d02 <HAL_RCC_OscConfig+0x246>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	05db      	lsls	r3, r3, #23
 8008afc:	d502      	bpl.n	8008b04 <HAL_RCC_OscConfig+0x48>
 8008afe:	69e3      	ldr	r3, [r4, #28]
 8008b00:	2b80      	cmp	r3, #128	; 0x80
 8008b02:	d1de      	bne.n	8008ac2 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b04:	f7fd f99a 	bl	8005e3c <HAL_GetREVID>
 8008b08:	f241 0303 	movw	r3, #4099	; 0x1003
 8008b0c:	6a21      	ldr	r1, [r4, #32]
 8008b0e:	4298      	cmp	r0, r3
 8008b10:	4b9a      	ldr	r3, [pc, #616]	; (8008d7c <HAL_RCC_OscConfig+0x2c0>)
 8008b12:	f200 80ef 	bhi.w	8008cf4 <HAL_RCC_OscConfig+0x238>
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	2920      	cmp	r1, #32
 8008b1a:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8008b1e:	bf0c      	ite	eq
 8008b20:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8008b24:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8008b28:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	0719      	lsls	r1, r3, #28
 8008b2e:	f100 8129 	bmi.w	8008d84 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	069a      	lsls	r2, r3, #26
 8008b36:	f100 814a 	bmi.w	8008dce <HAL_RCC_OscConfig+0x312>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	075d      	lsls	r5, r3, #29
 8008b3e:	d51e      	bpl.n	8008b7e <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8008b40:	4d8f      	ldr	r5, [pc, #572]	; (8008d80 <HAL_RCC_OscConfig+0x2c4>)
 8008b42:	682b      	ldr	r3, [r5, #0]
 8008b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b48:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8008b4a:	f7fd f95f 	bl	8005e0c <HAL_GetTick>
 8008b4e:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	05da      	lsls	r2, r3, #23
 8008b54:	f140 8160 	bpl.w	8008e18 <HAL_RCC_OscConfig+0x35c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b58:	68a3      	ldr	r3, [r4, #8]
 8008b5a:	4d88      	ldr	r5, [pc, #544]	; (8008d7c <HAL_RCC_OscConfig+0x2c0>)
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	f040 8162 	bne.w	8008e26 <HAL_RCC_OscConfig+0x36a>
 8008b62:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008b64:	f043 0301 	orr.w	r3, r3, #1
 8008b68:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b6a:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008b6e:	f7fd f94d 	bl	8005e0c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b72:	4e82      	ldr	r6, [pc, #520]	; (8008d7c <HAL_RCC_OscConfig+0x2c0>)
      tickstart = HAL_GetTick();
 8008b74:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b76:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008b78:	079b      	lsls	r3, r3, #30
 8008b7a:	f140 817a 	bpl.w	8008e72 <HAL_RCC_OscConfig+0x3b6>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b80:	2800      	cmp	r0, #0
 8008b82:	f040 817d 	bne.w	8008e80 <HAL_RCC_OscConfig+0x3c4>
      }
    }
  }
  return HAL_OK;
 8008b86:	2000      	movs	r0, #0
 8008b88:	e02a      	b.n	8008be0 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b8a:	4b7c      	ldr	r3, [pc, #496]	; (8008d7c <HAL_RCC_OscConfig+0x2c0>)
 8008b8c:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b8e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b90:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008b94:	2a10      	cmp	r2, #16
 8008b96:	d005      	beq.n	8008ba4 <HAL_RCC_OscConfig+0xe8>
 8008b98:	2a18      	cmp	r2, #24
 8008b9a:	d10a      	bne.n	8008bb2 <HAL_RCC_OscConfig+0xf6>
 8008b9c:	f001 0203 	and.w	r2, r1, #3
 8008ba0:	2a02      	cmp	r2, #2
 8008ba2:	d106      	bne.n	8008bb2 <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	039a      	lsls	r2, r3, #14
 8008ba8:	d590      	bpl.n	8008acc <HAL_RCC_OscConfig+0x10>
 8008baa:	6863      	ldr	r3, [r4, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d18d      	bne.n	8008acc <HAL_RCC_OscConfig+0x10>
 8008bb0:	e787      	b.n	8008ac2 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bb2:	6863      	ldr	r3, [r4, #4]
 8008bb4:	4d71      	ldr	r5, [pc, #452]	; (8008d7c <HAL_RCC_OscConfig+0x2c0>)
 8008bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bba:	d112      	bne.n	8008be2 <HAL_RCC_OscConfig+0x126>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bc2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008bc4:	f7fd f922 	bl	8005e0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bc8:	4d6c      	ldr	r5, [pc, #432]	; (8008d7c <HAL_RCC_OscConfig+0x2c0>)
        tickstart = HAL_GetTick();
 8008bca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	039b      	lsls	r3, r3, #14
 8008bd0:	f53f af7c 	bmi.w	8008acc <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bd4:	f7fd f91a 	bl	8005e0c <HAL_GetTick>
 8008bd8:	1b80      	subs	r0, r0, r6
 8008bda:	2864      	cmp	r0, #100	; 0x64
 8008bdc:	d9f6      	bls.n	8008bcc <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8008bde:	2003      	movs	r0, #3
}
 8008be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008be2:	b9a3      	cbnz	r3, 8008c0e <HAL_RCC_OscConfig+0x152>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bea:	602b      	str	r3, [r5, #0]
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bf2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008bf4:	f7fd f90a 	bl	8005e0c <HAL_GetTick>
 8008bf8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bfa:	682b      	ldr	r3, [r5, #0]
 8008bfc:	039f      	lsls	r7, r3, #14
 8008bfe:	f57f af65 	bpl.w	8008acc <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c02:	f7fd f903 	bl	8005e0c <HAL_GetTick>
 8008c06:	1b80      	subs	r0, r0, r6
 8008c08:	2864      	cmp	r0, #100	; 0x64
 8008c0a:	d9f6      	bls.n	8008bfa <HAL_RCC_OscConfig+0x13e>
 8008c0c:	e7e7      	b.n	8008bde <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c12:	682b      	ldr	r3, [r5, #0]
 8008c14:	d103      	bne.n	8008c1e <HAL_RCC_OscConfig+0x162>
 8008c16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c1a:	602b      	str	r3, [r5, #0]
 8008c1c:	e7ce      	b.n	8008bbc <HAL_RCC_OscConfig+0x100>
 8008c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c22:	602b      	str	r3, [r5, #0]
 8008c24:	682b      	ldr	r3, [r5, #0]
 8008c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c2a:	e7ca      	b.n	8008bc2 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c2c:	4b53      	ldr	r3, [pc, #332]	; (8008d7c <HAL_RCC_OscConfig+0x2c0>)
 8008c2e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c30:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008c32:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8008c36:	d003      	beq.n	8008c40 <HAL_RCC_OscConfig+0x184>
 8008c38:	2a18      	cmp	r2, #24
 8008c3a:	d120      	bne.n	8008c7e <HAL_RCC_OscConfig+0x1c2>
 8008c3c:	078e      	lsls	r6, r1, #30
 8008c3e:	d11e      	bne.n	8008c7e <HAL_RCC_OscConfig+0x1c2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	075d      	lsls	r5, r3, #29
 8008c44:	d503      	bpl.n	8008c4e <HAL_RCC_OscConfig+0x192>
 8008c46:	68e3      	ldr	r3, [r4, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f43f af3a 	beq.w	8008ac2 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c4e:	f7fd f8f5 	bl	8005e3c <HAL_GetREVID>
 8008c52:	f241 0303 	movw	r3, #4099	; 0x1003
 8008c56:	6921      	ldr	r1, [r4, #16]
 8008c58:	4298      	cmp	r0, r3
 8008c5a:	4b48      	ldr	r3, [pc, #288]	; (8008d7c <HAL_RCC_OscConfig+0x2c0>)
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	d809      	bhi.n	8008c74 <HAL_RCC_OscConfig+0x1b8>
 8008c60:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8008c64:	2940      	cmp	r1, #64	; 0x40
 8008c66:	bf0c      	ite	eq
 8008c68:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 8008c6c:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 8008c70:	605a      	str	r2, [r3, #4]
 8008c72:	e72f      	b.n	8008ad4 <HAL_RCC_OscConfig+0x18>
 8008c74:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8008c78:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008c7c:	e7f8      	b.n	8008c70 <HAL_RCC_OscConfig+0x1b4>
 8008c7e:	4d3f      	ldr	r5, [pc, #252]	; (8008d7c <HAL_RCC_OscConfig+0x2c0>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008c80:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c82:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008c84:	b332      	cbz	r2, 8008cd4 <HAL_RCC_OscConfig+0x218>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c86:	f023 0319 	bic.w	r3, r3, #25
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008c8e:	f7fd f8bd 	bl	8005e0c <HAL_GetTick>
 8008c92:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c94:	682b      	ldr	r3, [r5, #0]
 8008c96:	0758      	lsls	r0, r3, #29
 8008c98:	d511      	bpl.n	8008cbe <HAL_RCC_OscConfig+0x202>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c9a:	f7fd f8cf 	bl	8005e3c <HAL_GetREVID>
 8008c9e:	f241 0303 	movw	r3, #4099	; 0x1003
 8008ca2:	6922      	ldr	r2, [r4, #16]
 8008ca4:	4298      	cmp	r0, r3
 8008ca6:	686b      	ldr	r3, [r5, #4]
 8008ca8:	d80f      	bhi.n	8008cca <HAL_RCC_OscConfig+0x20e>
 8008caa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008cae:	2a40      	cmp	r2, #64	; 0x40
 8008cb0:	bf0c      	ite	eq
 8008cb2:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8008cb6:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8008cba:	606b      	str	r3, [r5, #4]
 8008cbc:	e70a      	b.n	8008ad4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cbe:	f7fd f8a5 	bl	8005e0c <HAL_GetTick>
 8008cc2:	1b80      	subs	r0, r0, r6
 8008cc4:	2802      	cmp	r0, #2
 8008cc6:	d9e5      	bls.n	8008c94 <HAL_RCC_OscConfig+0x1d8>
 8008cc8:	e789      	b.n	8008bde <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008cce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008cd2:	e7f2      	b.n	8008cba <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_DISABLE();
 8008cd4:	f023 0301 	bic.w	r3, r3, #1
 8008cd8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008cda:	f7fd f897 	bl	8005e0c <HAL_GetTick>
 8008cde:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	0759      	lsls	r1, r3, #29
 8008ce4:	f57f aef6 	bpl.w	8008ad4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ce8:	f7fd f890 	bl	8005e0c <HAL_GetTick>
 8008cec:	1b80      	subs	r0, r0, r6
 8008cee:	2802      	cmp	r0, #2
 8008cf0:	d9f6      	bls.n	8008ce0 <HAL_RCC_OscConfig+0x224>
 8008cf2:	e774      	b.n	8008bde <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008cf4:	68da      	ldr	r2, [r3, #12]
 8008cf6:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8008cfa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008cfe:	60da      	str	r2, [r3, #12]
 8008d00:	e713      	b.n	8008b2a <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008d02:	69e3      	ldr	r3, [r4, #28]
 8008d04:	4d1d      	ldr	r5, [pc, #116]	; (8008d7c <HAL_RCC_OscConfig+0x2c0>)
 8008d06:	b343      	cbz	r3, 8008d5a <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_CSI_ENABLE();
 8008d08:	682b      	ldr	r3, [r5, #0]
 8008d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d0e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008d10:	f7fd f87c 	bl	8005e0c <HAL_GetTick>
 8008d14:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d16:	682b      	ldr	r3, [r5, #0]
 8008d18:	05df      	lsls	r7, r3, #23
 8008d1a:	d511      	bpl.n	8008d40 <HAL_RCC_OscConfig+0x284>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d1c:	f7fd f88e 	bl	8005e3c <HAL_GetREVID>
 8008d20:	f241 0303 	movw	r3, #4099	; 0x1003
 8008d24:	6a22      	ldr	r2, [r4, #32]
 8008d26:	4298      	cmp	r0, r3
 8008d28:	d810      	bhi.n	8008d4c <HAL_RCC_OscConfig+0x290>
 8008d2a:	686b      	ldr	r3, [r5, #4]
 8008d2c:	2a20      	cmp	r2, #32
 8008d2e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008d32:	bf0c      	ite	eq
 8008d34:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8008d38:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8008d3c:	606b      	str	r3, [r5, #4]
 8008d3e:	e6f4      	b.n	8008b2a <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008d40:	f7fd f864 	bl	8005e0c <HAL_GetTick>
 8008d44:	1b80      	subs	r0, r0, r6
 8008d46:	2802      	cmp	r0, #2
 8008d48:	d9e5      	bls.n	8008d16 <HAL_RCC_OscConfig+0x25a>
 8008d4a:	e748      	b.n	8008bde <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d4c:	68eb      	ldr	r3, [r5, #12]
 8008d4e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008d52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008d56:	60eb      	str	r3, [r5, #12]
 8008d58:	e6e7      	b.n	8008b2a <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_CSI_DISABLE();
 8008d5a:	682b      	ldr	r3, [r5, #0]
 8008d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008d62:	f7fd f853 	bl	8005e0c <HAL_GetTick>
 8008d66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	05d8      	lsls	r0, r3, #23
 8008d6c:	f57f aedd 	bpl.w	8008b2a <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008d70:	f7fd f84c 	bl	8005e0c <HAL_GetTick>
 8008d74:	1b80      	subs	r0, r0, r6
 8008d76:	2802      	cmp	r0, #2
 8008d78:	d9f6      	bls.n	8008d68 <HAL_RCC_OscConfig+0x2ac>
 8008d7a:	e730      	b.n	8008bde <HAL_RCC_OscConfig+0x122>
 8008d7c:	58024400 	.word	0x58024400
 8008d80:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d84:	6963      	ldr	r3, [r4, #20]
 8008d86:	4d96      	ldr	r5, [pc, #600]	; (8008fe0 <HAL_RCC_OscConfig+0x524>)
 8008d88:	b183      	cbz	r3, 8008dac <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_LSI_ENABLE();
 8008d8a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008d8c:	f043 0301 	orr.w	r3, r3, #1
 8008d90:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008d92:	f7fd f83b 	bl	8005e0c <HAL_GetTick>
 8008d96:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008d98:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008d9a:	079b      	lsls	r3, r3, #30
 8008d9c:	f53f aec9 	bmi.w	8008b32 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008da0:	f7fd f834 	bl	8005e0c <HAL_GetTick>
 8008da4:	1b80      	subs	r0, r0, r6
 8008da6:	2802      	cmp	r0, #2
 8008da8:	d9f6      	bls.n	8008d98 <HAL_RCC_OscConfig+0x2dc>
 8008daa:	e718      	b.n	8008bde <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8008dac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008dae:	f023 0301 	bic.w	r3, r3, #1
 8008db2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008db4:	f7fd f82a 	bl	8005e0c <HAL_GetTick>
 8008db8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008dba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008dbc:	079f      	lsls	r7, r3, #30
 8008dbe:	f57f aeb8 	bpl.w	8008b32 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008dc2:	f7fd f823 	bl	8005e0c <HAL_GetTick>
 8008dc6:	1b80      	subs	r0, r0, r6
 8008dc8:	2802      	cmp	r0, #2
 8008dca:	d9f6      	bls.n	8008dba <HAL_RCC_OscConfig+0x2fe>
 8008dcc:	e707      	b.n	8008bde <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008dce:	69a3      	ldr	r3, [r4, #24]
 8008dd0:	4d83      	ldr	r5, [pc, #524]	; (8008fe0 <HAL_RCC_OscConfig+0x524>)
 8008dd2:	b183      	cbz	r3, 8008df6 <HAL_RCC_OscConfig+0x33a>
      __HAL_RCC_HSI48_ENABLE();
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008dda:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008ddc:	f7fd f816 	bl	8005e0c <HAL_GetTick>
 8008de0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008de2:	682b      	ldr	r3, [r5, #0]
 8008de4:	0498      	lsls	r0, r3, #18
 8008de6:	f53f aea8 	bmi.w	8008b3a <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008dea:	f7fd f80f 	bl	8005e0c <HAL_GetTick>
 8008dee:	1b80      	subs	r0, r0, r6
 8008df0:	2802      	cmp	r0, #2
 8008df2:	d9f6      	bls.n	8008de2 <HAL_RCC_OscConfig+0x326>
 8008df4:	e6f3      	b.n	8008bde <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8008df6:	682b      	ldr	r3, [r5, #0]
 8008df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dfc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008dfe:	f7fd f805 	bl	8005e0c <HAL_GetTick>
 8008e02:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	0499      	lsls	r1, r3, #18
 8008e08:	f57f ae97 	bpl.w	8008b3a <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008e0c:	f7fc fffe 	bl	8005e0c <HAL_GetTick>
 8008e10:	1b80      	subs	r0, r0, r6
 8008e12:	2802      	cmp	r0, #2
 8008e14:	d9f6      	bls.n	8008e04 <HAL_RCC_OscConfig+0x348>
 8008e16:	e6e2      	b.n	8008bde <HAL_RCC_OscConfig+0x122>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008e18:	f7fc fff8 	bl	8005e0c <HAL_GetTick>
 8008e1c:	1b80      	subs	r0, r0, r6
 8008e1e:	2864      	cmp	r0, #100	; 0x64
 8008e20:	f67f ae96 	bls.w	8008b50 <HAL_RCC_OscConfig+0x94>
 8008e24:	e6db      	b.n	8008bde <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e26:	b9b3      	cbnz	r3, 8008e56 <HAL_RCC_OscConfig+0x39a>
 8008e28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e2a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e2e:	f023 0301 	bic.w	r3, r3, #1
 8008e32:	672b      	str	r3, [r5, #112]	; 0x70
 8008e34:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008e36:	f023 0304 	bic.w	r3, r3, #4
 8008e3a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008e3c:	f7fc ffe6 	bl	8005e0c <HAL_GetTick>
 8008e40:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e42:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008e44:	0798      	lsls	r0, r3, #30
 8008e46:	f57f ae9a 	bpl.w	8008b7e <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e4a:	f7fc ffdf 	bl	8005e0c <HAL_GetTick>
 8008e4e:	1b80      	subs	r0, r0, r6
 8008e50:	42b8      	cmp	r0, r7
 8008e52:	d9f6      	bls.n	8008e42 <HAL_RCC_OscConfig+0x386>
 8008e54:	e6c3      	b.n	8008bde <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e56:	2b05      	cmp	r3, #5
 8008e58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008e5a:	d103      	bne.n	8008e64 <HAL_RCC_OscConfig+0x3a8>
 8008e5c:	f043 0304 	orr.w	r3, r3, #4
 8008e60:	672b      	str	r3, [r5, #112]	; 0x70
 8008e62:	e67e      	b.n	8008b62 <HAL_RCC_OscConfig+0xa6>
 8008e64:	f023 0301 	bic.w	r3, r3, #1
 8008e68:	672b      	str	r3, [r5, #112]	; 0x70
 8008e6a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008e6c:	f023 0304 	bic.w	r3, r3, #4
 8008e70:	e67a      	b.n	8008b68 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e72:	f7fc ffcb 	bl	8005e0c <HAL_GetTick>
 8008e76:	1bc0      	subs	r0, r0, r7
 8008e78:	42a8      	cmp	r0, r5
 8008e7a:	f67f ae7c 	bls.w	8008b76 <HAL_RCC_OscConfig+0xba>
 8008e7e:	e6ae      	b.n	8008bde <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008e80:	4d57      	ldr	r5, [pc, #348]	; (8008fe0 <HAL_RCC_OscConfig+0x524>)
 8008e82:	692b      	ldr	r3, [r5, #16]
 8008e84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e88:	2b18      	cmp	r3, #24
 8008e8a:	d07a      	beq.n	8008f82 <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_PLL_DISABLE();
 8008e8c:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e8e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8008e90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e94:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e96:	d167      	bne.n	8008f68 <HAL_RCC_OscConfig+0x4ac>
        tickstart = HAL_GetTick();
 8008e98:	f7fc ffb8 	bl	8005e0c <HAL_GetTick>
 8008e9c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e9e:	682b      	ldr	r3, [r5, #0]
 8008ea0:	0199      	lsls	r1, r3, #6
 8008ea2:	d45b      	bmi.n	8008f5c <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ea4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008ea6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008ea8:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8008eac:	f023 0303 	bic.w	r3, r3, #3
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008eb4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008eb8:	62ab      	str	r3, [r5, #40]	; 0x28
 8008eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ebc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	3a01      	subs	r2, #1
 8008ec2:	025b      	lsls	r3, r3, #9
 8008ec4:	0412      	lsls	r2, r2, #16
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008ed0:	3a01      	subs	r2, #1
 8008ed2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008eda:	3a01      	subs	r2, #1
 8008edc:	0612      	lsls	r2, r2, #24
 8008ede:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8008ee6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008ee8:	f023 0301 	bic.w	r3, r3, #1
 8008eec:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008eee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008ef0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ef6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008efa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008efe:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008f02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008f04:	f023 030c 	bic.w	r3, r3, #12
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f0c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008f0e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008f10:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f14:	4c32      	ldr	r4, [pc, #200]	; (8008fe0 <HAL_RCC_OscConfig+0x524>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f16:	4313      	orrs	r3, r2
 8008f18:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f1a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f20:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f22:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f28:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008f2a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f30:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8008f32:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008f34:	f043 0301 	orr.w	r3, r3, #1
 8008f38:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8008f3a:	682b      	ldr	r3, [r5, #0]
 8008f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f40:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008f42:	f7fc ff63 	bl	8005e0c <HAL_GetTick>
 8008f46:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	019a      	lsls	r2, r3, #6
 8008f4c:	f53f ae1b 	bmi.w	8008b86 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f50:	f7fc ff5c 	bl	8005e0c <HAL_GetTick>
 8008f54:	1b40      	subs	r0, r0, r5
 8008f56:	2802      	cmp	r0, #2
 8008f58:	d9f6      	bls.n	8008f48 <HAL_RCC_OscConfig+0x48c>
 8008f5a:	e640      	b.n	8008bde <HAL_RCC_OscConfig+0x122>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f5c:	f7fc ff56 	bl	8005e0c <HAL_GetTick>
 8008f60:	1b80      	subs	r0, r0, r6
 8008f62:	2802      	cmp	r0, #2
 8008f64:	d99b      	bls.n	8008e9e <HAL_RCC_OscConfig+0x3e2>
 8008f66:	e63a      	b.n	8008bde <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8008f68:	f7fc ff50 	bl	8005e0c <HAL_GetTick>
 8008f6c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f6e:	682b      	ldr	r3, [r5, #0]
 8008f70:	019b      	lsls	r3, r3, #6
 8008f72:	f57f ae08 	bpl.w	8008b86 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f76:	f7fc ff49 	bl	8005e0c <HAL_GetTick>
 8008f7a:	1b00      	subs	r0, r0, r4
 8008f7c:	2802      	cmp	r0, #2
 8008f7e:	d9f6      	bls.n	8008f6e <HAL_RCC_OscConfig+0x4b2>
 8008f80:	e62d      	b.n	8008bde <HAL_RCC_OscConfig+0x122>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f82:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008f84:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008f86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f88:	f43f ae2a 	beq.w	8008be0 <HAL_RCC_OscConfig+0x124>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f8c:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008f92:	4281      	cmp	r1, r0
 8008f94:	f47f ad95 	bne.w	8008ac2 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f98:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f9c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008f9e:	428a      	cmp	r2, r1
 8008fa0:	f47f ad8f 	bne.w	8008ac2 <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008fa4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008fa6:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8008faa:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fac:	4291      	cmp	r1, r2
 8008fae:	f47f ad88 	bne.w	8008ac2 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008fb2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008fb4:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8008fb8:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008fba:	4291      	cmp	r1, r2
 8008fbc:	f47f ad81 	bne.w	8008ac2 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008fc0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008fc2:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8008fc6:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008fc8:	4291      	cmp	r1, r2
 8008fca:	f47f ad7a 	bne.w	8008ac2 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008fce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008fd0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008fd4:	3801      	subs	r0, #1
    return HAL_ERROR;
 8008fd6:	1a18      	subs	r0, r3, r0
 8008fd8:	bf18      	it	ne
 8008fda:	2001      	movne	r0, #1
 8008fdc:	e600      	b.n	8008be0 <HAL_RCC_OscConfig+0x124>
 8008fde:	bf00      	nop
 8008fe0:	58024400 	.word	0x58024400

08008fe4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fe4:	4b46      	ldr	r3, [pc, #280]	; (8009100 <HAL_RCC_GetSysClockFreq+0x11c>)
 8008fe6:	691a      	ldr	r2, [r3, #16]
 8008fe8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008fec:	2a10      	cmp	r2, #16
{
 8008fee:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ff0:	f000 8084 	beq.w	80090fc <HAL_RCC_GetSysClockFreq+0x118>
 8008ff4:	2a18      	cmp	r2, #24
 8008ff6:	d00c      	beq.n	8009012 <HAL_RCC_GetSysClockFreq+0x2e>
 8008ff8:	b10a      	cbz	r2, 8008ffe <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008ffa:	4842      	ldr	r0, [pc, #264]	; (8009104 <HAL_RCC_GetSysClockFreq+0x120>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8008ffc:	bd10      	pop	{r4, pc}
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	4841      	ldr	r0, [pc, #260]	; (8009108 <HAL_RCC_GetSysClockFreq+0x124>)
 8009002:	f012 0f20 	tst.w	r2, #32
 8009006:	d0f9      	beq.n	8008ffc <HAL_RCC_GetSysClockFreq+0x18>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800900e:	40d8      	lsrs	r0, r3
 8009010:	e7f4      	b.n	8008ffc <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009012:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009014:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009018:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800901c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 800901e:	2800      	cmp	r0, #0
 8009020:	d0ec      	beq.n	8008ffc <HAL_RCC_GetSysClockFreq+0x18>
 8009022:	ee07 0a90 	vmov	s15, r0
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009026:	f002 0201 	and.w	r2, r2, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800902a:	f3c4 00cc 	ubfx	r0, r4, #3, #13
 800902e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009032:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009036:	4342      	muls	r2, r0
 8009038:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800903c:	f001 0203 	and.w	r2, r1, #3
      switch (pllsource)
 8009040:	2a01      	cmp	r2, #1
 8009042:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8009046:	d002      	beq.n	800904e <HAL_RCC_GetSysClockFreq+0x6a>
 8009048:	d30f      	bcc.n	800906a <HAL_RCC_GetSysClockFreq+0x86>
 800904a:	2a02      	cmp	r2, #2
 800904c:	d048      	beq.n	80090e0 <HAL_RCC_GetSysClockFreq+0xfc>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800904e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009054:	ee07 3a10 	vmov	s14, r3
 8009058:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800905c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009060:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009064:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800910c <HAL_RCC_GetSysClockFreq+0x128>
 8009068:	e037      	b.n	80090da <HAL_RCC_GetSysClockFreq+0xf6>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	0692      	lsls	r2, r2, #26
 800906e:	d527      	bpl.n	80090c0 <HAL_RCC_GetSysClockFreq+0xdc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009070:	6819      	ldr	r1, [r3, #0]
 8009072:	4a25      	ldr	r2, [pc, #148]	; (8009108 <HAL_RCC_GetSysClockFreq+0x124>)
 8009074:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800907a:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800907c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009080:	ee07 2a10 	vmov	s14, r2
 8009084:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8009088:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800908c:	ee06 3a90 	vmov	s13, r3
 8009090:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009098:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800909c:	4b18      	ldr	r3, [pc, #96]	; (8009100 <HAL_RCC_GetSysClockFreq+0x11c>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800909e:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80090a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80090a8:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80090aa:	ee07 3a10 	vmov	s14, r3
 80090ae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80090b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80090b6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80090ba:	ee17 0a90 	vmov	r0, s15
 80090be:	e79d      	b.n	8008ffc <HAL_RCC_GetSysClockFreq+0x18>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c6:	ee07 3a10 	vmov	s14, r3
 80090ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80090ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80090d6:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8009110 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090da:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80090de:	e7dd      	b.n	800909c <HAL_RCC_GetSysClockFreq+0xb8>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e6:	ee07 3a10 	vmov	s14, r3
 80090ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80090ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80090f6:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8009114 <HAL_RCC_GetSysClockFreq+0x130>
 80090fa:	e7ee      	b.n	80090da <HAL_RCC_GetSysClockFreq+0xf6>
    sysclockfreq = HSE_VALUE;
 80090fc:	4806      	ldr	r0, [pc, #24]	; (8009118 <HAL_RCC_GetSysClockFreq+0x134>)
 80090fe:	e77d      	b.n	8008ffc <HAL_RCC_GetSysClockFreq+0x18>
 8009100:	58024400 	.word	0x58024400
 8009104:	003d0900 	.word	0x003d0900
 8009108:	03d09000 	.word	0x03d09000
 800910c:	4a742400 	.word	0x4a742400
 8009110:	4c742400 	.word	0x4c742400
 8009114:	4af42400 	.word	0x4af42400
 8009118:	007a1200 	.word	0x007a1200

0800911c <HAL_RCC_ClockConfig>:
{
 800911c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009120:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8009122:	4604      	mov	r4, r0
 8009124:	b910      	cbnz	r0, 800912c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8009126:	2001      	movs	r0, #1
}
 8009128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800912c:	4a88      	ldr	r2, [pc, #544]	; (8009350 <HAL_RCC_ClockConfig+0x234>)
 800912e:	6813      	ldr	r3, [r2, #0]
 8009130:	f003 030f 	and.w	r3, r3, #15
 8009134:	428b      	cmp	r3, r1
 8009136:	f0c0 8093 	bcc.w	8009260 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	075f      	lsls	r7, r3, #29
 800913e:	f100 809b 	bmi.w	8009278 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009142:	071e      	lsls	r6, r3, #28
 8009144:	d50b      	bpl.n	800915e <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009146:	4983      	ldr	r1, [pc, #524]	; (8009354 <HAL_RCC_ClockConfig+0x238>)
 8009148:	6966      	ldr	r6, [r4, #20]
 800914a:	69c8      	ldr	r0, [r1, #28]
 800914c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8009150:	4286      	cmp	r6, r0
 8009152:	d904      	bls.n	800915e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009154:	69ca      	ldr	r2, [r1, #28]
 8009156:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800915a:	4332      	orrs	r2, r6
 800915c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800915e:	06d8      	lsls	r0, r3, #27
 8009160:	d50b      	bpl.n	800917a <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009162:	497c      	ldr	r1, [pc, #496]	; (8009354 <HAL_RCC_ClockConfig+0x238>)
 8009164:	69a6      	ldr	r6, [r4, #24]
 8009166:	69c8      	ldr	r0, [r1, #28]
 8009168:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800916c:	4286      	cmp	r6, r0
 800916e:	d904      	bls.n	800917a <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009170:	69ca      	ldr	r2, [r1, #28]
 8009172:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009176:	4332      	orrs	r2, r6
 8009178:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800917a:	0699      	lsls	r1, r3, #26
 800917c:	d50b      	bpl.n	8009196 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800917e:	4975      	ldr	r1, [pc, #468]	; (8009354 <HAL_RCC_ClockConfig+0x238>)
 8009180:	69e6      	ldr	r6, [r4, #28]
 8009182:	6a08      	ldr	r0, [r1, #32]
 8009184:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8009188:	4286      	cmp	r6, r0
 800918a:	d904      	bls.n	8009196 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800918c:	6a0a      	ldr	r2, [r1, #32]
 800918e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009192:	4332      	orrs	r2, r6
 8009194:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009196:	079a      	lsls	r2, r3, #30
 8009198:	d50b      	bpl.n	80091b2 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800919a:	496e      	ldr	r1, [pc, #440]	; (8009354 <HAL_RCC_ClockConfig+0x238>)
 800919c:	68e6      	ldr	r6, [r4, #12]
 800919e:	6988      	ldr	r0, [r1, #24]
 80091a0:	f000 000f 	and.w	r0, r0, #15
 80091a4:	4286      	cmp	r6, r0
 80091a6:	d904      	bls.n	80091b2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091a8:	698a      	ldr	r2, [r1, #24]
 80091aa:	f022 020f 	bic.w	r2, r2, #15
 80091ae:	4332      	orrs	r2, r6
 80091b0:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091b2:	07df      	lsls	r7, r3, #31
 80091b4:	d46e      	bmi.n	8009294 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091b6:	6823      	ldr	r3, [r4, #0]
 80091b8:	079e      	lsls	r6, r3, #30
 80091ba:	f100 80a1 	bmi.w	8009300 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091be:	4964      	ldr	r1, [pc, #400]	; (8009350 <HAL_RCC_ClockConfig+0x234>)
 80091c0:	680a      	ldr	r2, [r1, #0]
 80091c2:	f002 020f 	and.w	r2, r2, #15
 80091c6:	42aa      	cmp	r2, r5
 80091c8:	f200 80a8 	bhi.w	800931c <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80091cc:	0758      	lsls	r0, r3, #29
 80091ce:	f100 80b1 	bmi.w	8009334 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091d2:	0719      	lsls	r1, r3, #28
 80091d4:	d50b      	bpl.n	80091ee <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80091d6:	495f      	ldr	r1, [pc, #380]	; (8009354 <HAL_RCC_ClockConfig+0x238>)
 80091d8:	6965      	ldr	r5, [r4, #20]
 80091da:	69c8      	ldr	r0, [r1, #28]
 80091dc:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80091e0:	4285      	cmp	r5, r0
 80091e2:	d204      	bcs.n	80091ee <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80091e4:	69ca      	ldr	r2, [r1, #28]
 80091e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80091ea:	432a      	orrs	r2, r5
 80091ec:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091ee:	06da      	lsls	r2, r3, #27
 80091f0:	d50b      	bpl.n	800920a <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091f2:	4958      	ldr	r1, [pc, #352]	; (8009354 <HAL_RCC_ClockConfig+0x238>)
 80091f4:	69a5      	ldr	r5, [r4, #24]
 80091f6:	69c8      	ldr	r0, [r1, #28]
 80091f8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80091fc:	4285      	cmp	r5, r0
 80091fe:	d204      	bcs.n	800920a <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009200:	69ca      	ldr	r2, [r1, #28]
 8009202:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009206:	432a      	orrs	r2, r5
 8009208:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800920a:	069b      	lsls	r3, r3, #26
 800920c:	d50b      	bpl.n	8009226 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800920e:	4a51      	ldr	r2, [pc, #324]	; (8009354 <HAL_RCC_ClockConfig+0x238>)
 8009210:	69e0      	ldr	r0, [r4, #28]
 8009212:	6a11      	ldr	r1, [r2, #32]
 8009214:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8009218:	4288      	cmp	r0, r1
 800921a:	d204      	bcs.n	8009226 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800921c:	6a13      	ldr	r3, [r2, #32]
 800921e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009222:	4303      	orrs	r3, r0
 8009224:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009226:	f7ff fedd 	bl	8008fe4 <HAL_RCC_GetSysClockFreq>
 800922a:	494a      	ldr	r1, [pc, #296]	; (8009354 <HAL_RCC_ClockConfig+0x238>)
 800922c:	4a4a      	ldr	r2, [pc, #296]	; (8009358 <HAL_RCC_ClockConfig+0x23c>)
 800922e:	698b      	ldr	r3, [r1, #24]
 8009230:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009234:	5cd3      	ldrb	r3, [r2, r3]
 8009236:	f003 031f 	and.w	r3, r3, #31
 800923a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800923c:	698b      	ldr	r3, [r1, #24]
 800923e:	f003 030f 	and.w	r3, r3, #15
 8009242:	5cd3      	ldrb	r3, [r2, r3]
 8009244:	4a45      	ldr	r2, [pc, #276]	; (800935c <HAL_RCC_ClockConfig+0x240>)
 8009246:	f003 031f 	and.w	r3, r3, #31
 800924a:	fa20 f303 	lsr.w	r3, r0, r3
 800924e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8009250:	4b43      	ldr	r3, [pc, #268]	; (8009360 <HAL_RCC_ClockConfig+0x244>)
 8009252:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8009254:	4b43      	ldr	r3, [pc, #268]	; (8009364 <HAL_RCC_ClockConfig+0x248>)
}
 8009256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800925a:	6818      	ldr	r0, [r3, #0]
 800925c:	f7fa bc3c 	b.w	8003ad8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009260:	6813      	ldr	r3, [r2, #0]
 8009262:	f023 030f 	bic.w	r3, r3, #15
 8009266:	430b      	orrs	r3, r1
 8009268:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800926a:	6813      	ldr	r3, [r2, #0]
 800926c:	f003 030f 	and.w	r3, r3, #15
 8009270:	428b      	cmp	r3, r1
 8009272:	f47f af58 	bne.w	8009126 <HAL_RCC_ClockConfig+0xa>
 8009276:	e760      	b.n	800913a <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009278:	4936      	ldr	r1, [pc, #216]	; (8009354 <HAL_RCC_ClockConfig+0x238>)
 800927a:	6926      	ldr	r6, [r4, #16]
 800927c:	6988      	ldr	r0, [r1, #24]
 800927e:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8009282:	4286      	cmp	r6, r0
 8009284:	f67f af5d 	bls.w	8009142 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009288:	698a      	ldr	r2, [r1, #24]
 800928a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800928e:	4332      	orrs	r2, r6
 8009290:	618a      	str	r2, [r1, #24]
 8009292:	e756      	b.n	8009142 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009294:	4b2f      	ldr	r3, [pc, #188]	; (8009354 <HAL_RCC_ClockConfig+0x238>)
 8009296:	68a1      	ldr	r1, [r4, #8]
 8009298:	699a      	ldr	r2, [r3, #24]
 800929a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800929e:	430a      	orrs	r2, r1
 80092a0:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80092a2:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092a4:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80092a6:	2902      	cmp	r1, #2
 80092a8:	d11d      	bne.n	80092e6 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092aa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092ae:	f43f af3a 	beq.w	8009126 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80092b2:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092b4:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092b8:	4e26      	ldr	r6, [pc, #152]	; (8009354 <HAL_RCC_ClockConfig+0x238>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80092ba:	f022 0207 	bic.w	r2, r2, #7
 80092be:	430a      	orrs	r2, r1
 80092c0:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80092c2:	f7fc fda3 	bl	8005e0c <HAL_GetTick>
 80092c6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092c8:	6933      	ldr	r3, [r6, #16]
 80092ca:	6862      	ldr	r2, [r4, #4]
 80092cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092d0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80092d4:	f43f af6f 	beq.w	80091b6 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092d8:	f7fc fd98 	bl	8005e0c <HAL_GetTick>
 80092dc:	1bc0      	subs	r0, r0, r7
 80092de:	4540      	cmp	r0, r8
 80092e0:	d9f2      	bls.n	80092c8 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 80092e2:	2003      	movs	r0, #3
 80092e4:	e720      	b.n	8009128 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80092e6:	2903      	cmp	r1, #3
 80092e8:	d102      	bne.n	80092f0 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092ea:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80092ee:	e7de      	b.n	80092ae <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80092f0:	2901      	cmp	r1, #1
 80092f2:	d102      	bne.n	80092fa <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80092f4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80092f8:	e7d9      	b.n	80092ae <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092fa:	f012 0f04 	tst.w	r2, #4
 80092fe:	e7d6      	b.n	80092ae <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009300:	4914      	ldr	r1, [pc, #80]	; (8009354 <HAL_RCC_ClockConfig+0x238>)
 8009302:	68e6      	ldr	r6, [r4, #12]
 8009304:	6988      	ldr	r0, [r1, #24]
 8009306:	f000 000f 	and.w	r0, r0, #15
 800930a:	4286      	cmp	r6, r0
 800930c:	f4bf af57 	bcs.w	80091be <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009310:	698a      	ldr	r2, [r1, #24]
 8009312:	f022 020f 	bic.w	r2, r2, #15
 8009316:	4332      	orrs	r2, r6
 8009318:	618a      	str	r2, [r1, #24]
 800931a:	e750      	b.n	80091be <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800931c:	680a      	ldr	r2, [r1, #0]
 800931e:	f022 020f 	bic.w	r2, r2, #15
 8009322:	432a      	orrs	r2, r5
 8009324:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009326:	680a      	ldr	r2, [r1, #0]
 8009328:	f002 020f 	and.w	r2, r2, #15
 800932c:	42aa      	cmp	r2, r5
 800932e:	f47f aefa 	bne.w	8009126 <HAL_RCC_ClockConfig+0xa>
 8009332:	e74b      	b.n	80091cc <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009334:	4907      	ldr	r1, [pc, #28]	; (8009354 <HAL_RCC_ClockConfig+0x238>)
 8009336:	6925      	ldr	r5, [r4, #16]
 8009338:	6988      	ldr	r0, [r1, #24]
 800933a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800933e:	4285      	cmp	r5, r0
 8009340:	f4bf af47 	bcs.w	80091d2 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009344:	698a      	ldr	r2, [r1, #24]
 8009346:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800934a:	432a      	orrs	r2, r5
 800934c:	618a      	str	r2, [r1, #24]
 800934e:	e740      	b.n	80091d2 <HAL_RCC_ClockConfig+0xb6>
 8009350:	52002000 	.word	0x52002000
 8009354:	58024400 	.word	0x58024400
 8009358:	08015804 	.word	0x08015804
 800935c:	24000004 	.word	0x24000004
 8009360:	24000000 	.word	0x24000000
 8009364:	24000024 	.word	0x24000024

08009368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009368:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800936a:	f7ff fe3b 	bl	8008fe4 <HAL_RCC_GetSysClockFreq>
 800936e:	4a0b      	ldr	r2, [pc, #44]	; (800939c <HAL_RCC_GetHCLKFreq+0x34>)
 8009370:	490b      	ldr	r1, [pc, #44]	; (80093a0 <HAL_RCC_GetHCLKFreq+0x38>)
 8009372:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009374:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009376:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800937a:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800937e:	5ccb      	ldrb	r3, [r1, r3]
 8009380:	f003 031f 	and.w	r3, r3, #31
 8009384:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009388:	5c88      	ldrb	r0, [r1, r2]
 800938a:	4a06      	ldr	r2, [pc, #24]	; (80093a4 <HAL_RCC_GetHCLKFreq+0x3c>)
 800938c:	f000 001f 	and.w	r0, r0, #31
 8009390:	fa23 f000 	lsr.w	r0, r3, r0
 8009394:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009396:	4a04      	ldr	r2, [pc, #16]	; (80093a8 <HAL_RCC_GetHCLKFreq+0x40>)
 8009398:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800939a:	bd08      	pop	{r3, pc}
 800939c:	58024400 	.word	0x58024400
 80093a0:	08015804 	.word	0x08015804
 80093a4:	24000004 	.word	0x24000004
 80093a8:	24000000 	.word	0x24000000

080093ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093ac:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80093ae:	f7ff ffdb 	bl	8009368 <HAL_RCC_GetHCLKFreq>
 80093b2:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80093b4:	4a05      	ldr	r2, [pc, #20]	; (80093cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80093b6:	69db      	ldr	r3, [r3, #28]
 80093b8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80093bc:	5cd3      	ldrb	r3, [r2, r3]
 80093be:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80093c2:	40d8      	lsrs	r0, r3
 80093c4:	bd08      	pop	{r3, pc}
 80093c6:	bf00      	nop
 80093c8:	58024400 	.word	0x58024400
 80093cc:	08015804 	.word	0x08015804

080093d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093d0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80093d2:	f7ff ffc9 	bl	8009368 <HAL_RCC_GetHCLKFreq>
 80093d6:	4b05      	ldr	r3, [pc, #20]	; (80093ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80093d8:	4a05      	ldr	r2, [pc, #20]	; (80093f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093da:	69db      	ldr	r3, [r3, #28]
 80093dc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80093e0:	5cd3      	ldrb	r3, [r2, r3]
 80093e2:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80093e6:	40d8      	lsrs	r0, r3
 80093e8:	bd08      	pop	{r3, pc}
 80093ea:	bf00      	nop
 80093ec:	58024400 	.word	0x58024400
 80093f0:	08015804 	.word	0x08015804

080093f4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80093f4:	233f      	movs	r3, #63	; 0x3f
 80093f6:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093f8:	4b11      	ldr	r3, [pc, #68]	; (8009440 <HAL_RCC_GetClockConfig+0x4c>)
 80093fa:	691a      	ldr	r2, [r3, #16]
 80093fc:	f002 0207 	and.w	r2, r2, #7
 8009400:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009402:	699a      	ldr	r2, [r3, #24]
 8009404:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8009408:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800940a:	699a      	ldr	r2, [r3, #24]
 800940c:	f002 020f 	and.w	r2, r2, #15
 8009410:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009412:	699a      	ldr	r2, [r3, #24]
 8009414:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009418:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800941a:	69da      	ldr	r2, [r3, #28]
 800941c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009420:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009422:	69da      	ldr	r2, [r3, #28]
 8009424:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009428:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800942a:	6a1b      	ldr	r3, [r3, #32]
 800942c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009430:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009432:	4b04      	ldr	r3, [pc, #16]	; (8009444 <HAL_RCC_GetClockConfig+0x50>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 030f 	and.w	r3, r3, #15
 800943a:	600b      	str	r3, [r1, #0]
}
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	58024400 	.word	0x58024400
 8009444:	52002000 	.word	0x52002000

08009448 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800944a:	4c3a      	ldr	r4, [pc, #232]	; (8009534 <RCCEx_PLL2_Config+0xec>)
{
 800944c:	4606      	mov	r6, r0
 800944e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009450:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009452:	f003 0303 	and.w	r3, r3, #3
 8009456:	2b03      	cmp	r3, #3
 8009458:	d069      	beq.n	800952e <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009460:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009462:	f7fc fcd3 	bl	8005e0c <HAL_GetTick>
 8009466:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	011a      	lsls	r2, r3, #4
 800946c:	d44b      	bmi.n	8009506 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800946e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009470:	6832      	ldr	r2, [r6, #0]
 8009472:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009476:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800947a:	62a3      	str	r3, [r4, #40]	; 0x28
 800947c:	68b3      	ldr	r3, [r6, #8]
 800947e:	68f2      	ldr	r2, [r6, #12]
 8009480:	3b01      	subs	r3, #1
 8009482:	3a01      	subs	r2, #1
 8009484:	025b      	lsls	r3, r3, #9
 8009486:	0412      	lsls	r2, r2, #16
 8009488:	b29b      	uxth	r3, r3
 800948a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800948e:	4313      	orrs	r3, r2
 8009490:	6872      	ldr	r2, [r6, #4]
 8009492:	3a01      	subs	r2, #1
 8009494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009498:	4313      	orrs	r3, r2
 800949a:	6932      	ldr	r2, [r6, #16]
 800949c:	3a01      	subs	r2, #1
 800949e:	0612      	lsls	r2, r2, #24
 80094a0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80094a4:	4313      	orrs	r3, r2
 80094a6:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80094a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80094aa:	6972      	ldr	r2, [r6, #20]
 80094ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80094b0:	4313      	orrs	r3, r2
 80094b2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80094b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80094b6:	69b2      	ldr	r2, [r6, #24]
 80094b8:	f023 0320 	bic.w	r3, r3, #32
 80094bc:	4313      	orrs	r3, r2
 80094be:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80094c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80094c2:	f023 0310 	bic.w	r3, r3, #16
 80094c6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80094c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80094ca:	69f2      	ldr	r2, [r6, #28]
 80094cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80094d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80094d8:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80094da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80094dc:	f043 0310 	orr.w	r3, r3, #16
 80094e0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80094e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80094e4:	b9b5      	cbnz	r5, 8009514 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80094e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80094ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80094ec:	4c11      	ldr	r4, [pc, #68]	; (8009534 <RCCEx_PLL2_Config+0xec>)
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80094f4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094f6:	f7fc fc89 	bl	8005e0c <HAL_GetTick>
 80094fa:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	011b      	lsls	r3, r3, #4
 8009500:	d50f      	bpl.n	8009522 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8009502:	2000      	movs	r0, #0
 8009504:	e005      	b.n	8009512 <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009506:	f7fc fc81 	bl	8005e0c <HAL_GetTick>
 800950a:	1bc0      	subs	r0, r0, r7
 800950c:	2802      	cmp	r0, #2
 800950e:	d9ab      	bls.n	8009468 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8009510:	2003      	movs	r0, #3
}
 8009512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8009514:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009516:	bf0c      	ite	eq
 8009518:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800951c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8009520:	e7e3      	b.n	80094ea <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009522:	f7fc fc73 	bl	8005e0c <HAL_GetTick>
 8009526:	1b40      	subs	r0, r0, r5
 8009528:	2802      	cmp	r0, #2
 800952a:	d9e7      	bls.n	80094fc <RCCEx_PLL2_Config+0xb4>
 800952c:	e7f0      	b.n	8009510 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800952e:	2001      	movs	r0, #1
 8009530:	e7ef      	b.n	8009512 <RCCEx_PLL2_Config+0xca>
 8009532:	bf00      	nop
 8009534:	58024400 	.word	0x58024400

08009538 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800953a:	4c3a      	ldr	r4, [pc, #232]	; (8009624 <RCCEx_PLL3_Config+0xec>)
{
 800953c:	4606      	mov	r6, r0
 800953e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009540:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009542:	f003 0303 	and.w	r3, r3, #3
 8009546:	2b03      	cmp	r3, #3
 8009548:	d069      	beq.n	800961e <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009550:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009552:	f7fc fc5b 	bl	8005e0c <HAL_GetTick>
 8009556:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	009a      	lsls	r2, r3, #2
 800955c:	d44b      	bmi.n	80095f6 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800955e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009560:	6832      	ldr	r2, [r6, #0]
 8009562:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8009566:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800956a:	62a3      	str	r3, [r4, #40]	; 0x28
 800956c:	68b3      	ldr	r3, [r6, #8]
 800956e:	68f2      	ldr	r2, [r6, #12]
 8009570:	3b01      	subs	r3, #1
 8009572:	3a01      	subs	r2, #1
 8009574:	025b      	lsls	r3, r3, #9
 8009576:	0412      	lsls	r2, r2, #16
 8009578:	b29b      	uxth	r3, r3
 800957a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800957e:	4313      	orrs	r3, r2
 8009580:	6872      	ldr	r2, [r6, #4]
 8009582:	3a01      	subs	r2, #1
 8009584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009588:	4313      	orrs	r3, r2
 800958a:	6932      	ldr	r2, [r6, #16]
 800958c:	3a01      	subs	r2, #1
 800958e:	0612      	lsls	r2, r2, #24
 8009590:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009594:	4313      	orrs	r3, r2
 8009596:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009598:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800959a:	6972      	ldr	r2, [r6, #20]
 800959c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80095a0:	4313      	orrs	r3, r2
 80095a2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80095a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095a6:	69b2      	ldr	r2, [r6, #24]
 80095a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095ac:	4313      	orrs	r3, r2
 80095ae:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80095b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095b6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80095b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80095ba:	69f2      	ldr	r2, [r6, #28]
 80095bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80095c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80095c8:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80095ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095d0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80095d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80095d4:	b9b5      	cbnz	r5, 8009604 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80095d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80095da:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80095dc:	4c11      	ldr	r4, [pc, #68]	; (8009624 <RCCEx_PLL3_Config+0xec>)
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095e4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095e6:	f7fc fc11 	bl	8005e0c <HAL_GetTick>
 80095ea:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	d50f      	bpl.n	8009612 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 80095f2:	2000      	movs	r0, #0
 80095f4:	e005      	b.n	8009602 <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80095f6:	f7fc fc09 	bl	8005e0c <HAL_GetTick>
 80095fa:	1bc0      	subs	r0, r0, r7
 80095fc:	2802      	cmp	r0, #2
 80095fe:	d9ab      	bls.n	8009558 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8009600:	2003      	movs	r0, #3
}
 8009602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8009604:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009606:	bf0c      	ite	eq
 8009608:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800960c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8009610:	e7e3      	b.n	80095da <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009612:	f7fc fbfb 	bl	8005e0c <HAL_GetTick>
 8009616:	1b40      	subs	r0, r0, r5
 8009618:	2802      	cmp	r0, #2
 800961a:	d9e7      	bls.n	80095ec <RCCEx_PLL3_Config+0xb4>
 800961c:	e7f0      	b.n	8009600 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800961e:	2001      	movs	r0, #1
 8009620:	e7ef      	b.n	8009602 <RCCEx_PLL3_Config+0xca>
 8009622:	bf00      	nop
 8009624:	58024400 	.word	0x58024400

08009628 <HAL_RCCEx_PeriphCLKConfig>:
{
 8009628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800962c:	6806      	ldr	r6, [r0, #0]
{
 800962e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009630:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8009634:	d023      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009636:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8009638:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800963c:	d018      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x48>
 800963e:	d802      	bhi.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8009640:	b183      	cbz	r3, 8009664 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8009642:	2601      	movs	r6, #1
 8009644:	e01b      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800964a:	d023      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800964c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009650:	d1f7      	bne.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009652:	4a9f      	ldr	r2, [pc, #636]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009654:	2600      	movs	r6, #0
 8009656:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009658:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800965a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800965e:	430b      	orrs	r3, r1
 8009660:	6513      	str	r3, [r2, #80]	; 0x50
 8009662:	e00c      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009664:	4a9a      	ldr	r2, [pc, #616]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009666:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800966c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800966e:	e7f0      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009670:	2102      	movs	r1, #2
 8009672:	3004      	adds	r0, #4
 8009674:	f7ff fee8 	bl	8009448 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009678:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800967a:	2800      	cmp	r0, #0
 800967c:	d0e9      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	05dd      	lsls	r5, r3, #23
 8009682:	d534      	bpl.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009684:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009686:	2b04      	cmp	r3, #4
 8009688:	d830      	bhi.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800968a:	e8df f003 	tbb	[pc, r3]
 800968e:	0f08      	.short	0x0f08
 8009690:	0d29      	.short	0x0d29
 8009692:	0d          	.byte	0x0d
 8009693:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009694:	2102      	movs	r1, #2
 8009696:	3024      	adds	r0, #36	; 0x24
 8009698:	f7ff ff4e 	bl	8009538 <RCCEx_PLL3_Config>
 800969c:	e7ec      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800969e:	4a8c      	ldr	r2, [pc, #560]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80096a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80096a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096a6:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 80096a8:	4635      	mov	r5, r6
 80096aa:	e004      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096ac:	2100      	movs	r1, #0
 80096ae:	1d20      	adds	r0, r4, #4
 80096b0:	f7ff feca 	bl	8009448 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096b4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80096b6:	b9e5      	cbnz	r5, 80096f2 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096b8:	4a85      	ldr	r2, [pc, #532]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80096ba:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80096bc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80096be:	f023 0307 	bic.w	r3, r3, #7
 80096c2:	430b      	orrs	r3, r1
 80096c4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	0598      	lsls	r0, r3, #22
 80096ca:	d521      	bpl.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai23ClockSelection)
 80096cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096ce:	2b80      	cmp	r3, #128	; 0x80
 80096d0:	d03b      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x122>
 80096d2:	d810      	bhi.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80096d4:	b36b      	cbz	r3, 8009732 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 80096d6:	2b40      	cmp	r3, #64	; 0x40
 80096d8:	d031      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x116>
      ret = HAL_ERROR;
 80096da:	2601      	movs	r6, #1
 80096dc:	4635      	mov	r5, r6
 80096de:	e017      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096e0:	2100      	movs	r1, #0
 80096e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80096e6:	f7ff ff27 	bl	8009538 <RCCEx_PLL3_Config>
 80096ea:	e7e3      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = HAL_ERROR;
 80096ec:	2601      	movs	r6, #1
 80096ee:	4635      	mov	r5, r6
 80096f0:	e7e9      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80096f2:	462e      	mov	r6, r5
 80096f4:	e7e7      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 80096f6:	2bc0      	cmp	r3, #192	; 0xc0
 80096f8:	d002      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80096fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096fe:	d1ec      	bne.n	80096da <HAL_RCCEx_PeriphCLKConfig+0xb2>
    if(ret == HAL_OK)
 8009700:	bb4d      	cbnz	r5, 8009756 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009702:	4a73      	ldr	r2, [pc, #460]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009704:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009706:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009708:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800970c:	430b      	orrs	r3, r1
 800970e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	0559      	lsls	r1, r3, #21
 8009714:	d530      	bpl.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009716:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800971a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800971e:	d047      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8009720:	d81b      	bhi.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x132>
 8009722:	2b00      	cmp	r3, #0
 8009724:	d038      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8009726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800972a:	d03b      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = HAL_ERROR;
 800972c:	2601      	movs	r6, #1
 800972e:	4635      	mov	r5, r6
 8009730:	e022      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009732:	4a67      	ldr	r2, [pc, #412]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009734:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800973a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800973c:	e7e0      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800973e:	2100      	movs	r1, #0
 8009740:	1d20      	adds	r0, r4, #4
 8009742:	f7ff fe81 	bl	8009448 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009746:	4605      	mov	r5, r0
      break;
 8009748:	e7da      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800974a:	2100      	movs	r1, #0
 800974c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009750:	f7ff fef2 	bl	8009538 <RCCEx_PLL3_Config>
 8009754:	e7f7      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8009756:	462e      	mov	r6, r5
 8009758:	e7da      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai4AClockSelection)
 800975a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800975e:	d002      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8009760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009764:	d1e2      	bne.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(ret == HAL_OK)
 8009766:	bb4d      	cbnz	r5, 80097bc <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009768:	4a59      	ldr	r2, [pc, #356]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800976a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800976e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009770:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8009774:	430b      	orrs	r3, r1
 8009776:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	051a      	lsls	r2, r3, #20
 800977c:	d52f      	bpl.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Sai4BClockSelection)
 800977e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8009782:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009786:	d041      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009788:	d81a      	bhi.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800978a:	b39b      	cbz	r3, 80097f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800978c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009790:	d036      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      ret = HAL_ERROR;
 8009792:	2601      	movs	r6, #1
 8009794:	4635      	mov	r5, r6
 8009796:	e022      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009798:	4a4d      	ldr	r2, [pc, #308]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800979a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800979c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097a0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80097a2:	e7e0      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097a4:	2100      	movs	r1, #0
 80097a6:	1d20      	adds	r0, r4, #4
 80097a8:	f7ff fe4e 	bl	8009448 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80097ac:	4605      	mov	r5, r0
      break;
 80097ae:	e7da      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80097b0:	2100      	movs	r1, #0
 80097b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80097b6:	f7ff febf 	bl	8009538 <RCCEx_PLL3_Config>
 80097ba:	e7f7      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x184>
 80097bc:	462e      	mov	r6, r5
 80097be:	e7db      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4BClockSelection)
 80097c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80097c4:	d002      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80097c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097ca:	d1e2      	bne.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    if(ret == HAL_OK)
 80097cc:	bb25      	cbnz	r5, 8009818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80097ce:	4a40      	ldr	r2, [pc, #256]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80097d0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80097d4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80097d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80097da:	430b      	orrs	r3, r1
 80097dc:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	019b      	lsls	r3, r3, #6
 80097e2:	d527      	bpl.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->QspiClockSelection)
 80097e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80097e6:	2b10      	cmp	r3, #16
 80097e8:	d033      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80097ea:	d817      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 80097ec:	b1d3      	cbz	r3, 8009824 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = HAL_ERROR;
 80097ee:	2601      	movs	r6, #1
 80097f0:	4635      	mov	r5, r6
 80097f2:	e01f      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097f4:	4a36      	ldr	r2, [pc, #216]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80097f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80097f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097fc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80097fe:	e7e5      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009800:	2100      	movs	r1, #0
 8009802:	1d20      	adds	r0, r4, #4
 8009804:	f7ff fe20 	bl	8009448 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009808:	4605      	mov	r5, r0
      break;
 800980a:	e7df      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800980c:	2100      	movs	r1, #0
 800980e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009812:	f7ff fe91 	bl	8009538 <RCCEx_PLL3_Config>
 8009816:	e7f7      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8009818:	462e      	mov	r6, r5
 800981a:	e7e0      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->QspiClockSelection)
 800981c:	2b20      	cmp	r3, #32
 800981e:	d01e      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x236>
 8009820:	2b30      	cmp	r3, #48	; 0x30
 8009822:	d1e4      	bne.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    if(ret == HAL_OK)
 8009824:	bb0d      	cbnz	r5, 800986a <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009826:	4a2a      	ldr	r2, [pc, #168]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009828:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800982a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800982c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009830:	430b      	orrs	r3, r1
 8009832:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	04df      	lsls	r7, r3, #19
 8009838:	d527      	bpl.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x262>
    switch(PeriphClkInit->Spi123ClockSelection)
 800983a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800983c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009840:	d03e      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009842:	d814      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x246>
 8009844:	b383      	cbz	r3, 80098a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8009846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800984a:	d033      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = HAL_ERROR;
 800984c:	2601      	movs	r6, #1
 800984e:	4635      	mov	r5, r6
 8009850:	e01b      	b.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009852:	4a1f      	ldr	r2, [pc, #124]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009854:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800985a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800985c:	e7e2      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800985e:	2102      	movs	r1, #2
 8009860:	1d20      	adds	r0, r4, #4
 8009862:	f7ff fdf1 	bl	8009448 <RCCEx_PLL2_Config>
 8009866:	4605      	mov	r5, r0
      break;
 8009868:	e7dc      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 800986a:	462e      	mov	r6, r5
 800986c:	e7e2      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800986e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009872:	d002      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8009874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009878:	d1e8      	bne.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 800987a:	bb3d      	cbnz	r5, 80098cc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800987c:	4a14      	ldr	r2, [pc, #80]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800987e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009880:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009886:	430b      	orrs	r3, r1
 8009888:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	0498      	lsls	r0, r3, #18
 800988e:	d532      	bpl.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009890:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009896:	d044      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8009898:	d81c      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800989a:	b323      	cbz	r3, 80098e6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800989c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098a0:	d039      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = HAL_ERROR;
 80098a2:	2601      	movs	r6, #1
 80098a4:	4635      	mov	r5, r6
 80098a6:	e026      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098a8:	4a09      	ldr	r2, [pc, #36]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80098aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80098ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098b0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80098b2:	e7e2      	b.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098b4:	2100      	movs	r1, #0
 80098b6:	1d20      	adds	r0, r4, #4
 80098b8:	f7ff fdc6 	bl	8009448 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098bc:	4605      	mov	r5, r0
      break;
 80098be:	e7dc      	b.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098c0:	2100      	movs	r1, #0
 80098c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80098c6:	f7ff fe37 	bl	8009538 <RCCEx_PLL3_Config>
 80098ca:	e7f7      	b.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x294>
 80098cc:	462e      	mov	r6, r5
 80098ce:	e7dc      	b.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x262>
 80098d0:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 80098d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80098d8:	d005      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 80098da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098de:	d002      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 80098e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80098e4:	d1dd      	bne.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(ret == HAL_OK)
 80098e6:	bb15      	cbnz	r5, 800992e <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80098e8:	4aa0      	ldr	r2, [pc, #640]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80098ea:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80098ec:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80098ee:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80098f2:	430b      	orrs	r3, r1
 80098f4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80098f6:	6823      	ldr	r3, [r4, #0]
 80098f8:	0459      	lsls	r1, r3, #17
 80098fa:	d52d      	bpl.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Spi6ClockSelection)
 80098fc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8009900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009904:	d04b      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009906:	d814      	bhi.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8009908:	b1e3      	cbz	r3, 8009944 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800990a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800990e:	d040      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      ret = HAL_ERROR;
 8009910:	2601      	movs	r6, #1
 8009912:	4635      	mov	r5, r6
 8009914:	e020      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x330>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009916:	2101      	movs	r1, #1
 8009918:	1d20      	adds	r0, r4, #4
 800991a:	f7ff fd95 	bl	8009448 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800991e:	4605      	mov	r5, r0
      break;
 8009920:	e7e1      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009922:	2101      	movs	r1, #1
 8009924:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009928:	f7ff fe06 	bl	8009538 <RCCEx_PLL3_Config>
 800992c:	e7f7      	b.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 800992e:	462e      	mov	r6, r5
 8009930:	e7e1      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009936:	d005      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8009938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800993c:	d002      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800993e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009942:	d1e5      	bne.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if(ret == HAL_OK)
 8009944:	2d00      	cmp	r5, #0
 8009946:	d130      	bne.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x382>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009948:	4a88      	ldr	r2, [pc, #544]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800994a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800994e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009950:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009954:	430b      	orrs	r3, r1
 8009956:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009958:	6823      	ldr	r3, [r4, #0]
 800995a:	041a      	lsls	r2, r3, #16
 800995c:	d50f      	bpl.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->FdcanClockSelection)
 800995e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009960:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009964:	d023      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x386>
 8009966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800996a:	d026      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x392>
 800996c:	bb5b      	cbnz	r3, 80099c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    if(ret == HAL_OK)
 800996e:	bb6d      	cbnz	r5, 80099cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009970:	4a7e      	ldr	r2, [pc, #504]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009972:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8009974:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009976:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800997a:	430b      	orrs	r3, r1
 800997c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	01db      	lsls	r3, r3, #7
 8009982:	d533      	bpl.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch(PeriphClkInit->FmcClockSelection)
 8009984:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009986:	2b03      	cmp	r3, #3
 8009988:	d874      	bhi.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800998a:	e8df f003 	tbb	[pc, r3]
 800998e:	2126      	.short	0x2126
 8009990:	266d      	.short	0x266d
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009992:	2101      	movs	r1, #1
 8009994:	1d20      	adds	r0, r4, #4
 8009996:	f7ff fd57 	bl	8009448 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800999a:	4605      	mov	r5, r0
      break;
 800999c:	e7d2      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800999e:	2101      	movs	r1, #1
 80099a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80099a4:	f7ff fdc8 	bl	8009538 <RCCEx_PLL3_Config>
 80099a8:	e7f7      	b.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80099aa:	462e      	mov	r6, r5
 80099ac:	e7d4      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099ae:	4a6f      	ldr	r2, [pc, #444]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80099b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80099b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099b6:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80099b8:	e7d9      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099ba:	2101      	movs	r1, #1
 80099bc:	1d20      	adds	r0, r4, #4
 80099be:	f7ff fd43 	bl	8009448 <RCCEx_PLL2_Config>
 80099c2:	4605      	mov	r5, r0
      break;
 80099c4:	e7d3      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = HAL_ERROR;
 80099c6:	2601      	movs	r6, #1
 80099c8:	4635      	mov	r5, r6
 80099ca:	e7d8      	b.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80099cc:	462e      	mov	r6, r5
 80099ce:	e7d6      	b.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099d0:	4a66      	ldr	r2, [pc, #408]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80099d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80099d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80099da:	2d00      	cmp	r5, #0
 80099dc:	d14d      	bne.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x452>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80099de:	4a63      	ldr	r2, [pc, #396]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80099e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80099e2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80099e4:	f023 0303 	bic.w	r3, r3, #3
 80099e8:	430b      	orrs	r3, r1
 80099ea:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80099ec:	6823      	ldr	r3, [r4, #0]
 80099ee:	025f      	lsls	r7, r3, #9
 80099f0:	d54d      	bpl.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x466>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80099f2:	4f5f      	ldr	r7, [pc, #380]	; (8009b70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099fa:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80099fc:	f7fc fa06 	bl	8005e0c <HAL_GetTick>
 8009a00:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	05d8      	lsls	r0, r3, #23
 8009a06:	d53a      	bpl.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x456>
    if(ret == HAL_OK)
 8009a08:	2d00      	cmp	r5, #0
 8009a0a:	d161      	bne.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009a0c:	4b57      	ldr	r3, [pc, #348]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009a0e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8009a12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a14:	4042      	eors	r2, r0
 8009a16:	f412 7f40 	tst.w	r2, #768	; 0x300
 8009a1a:	d00b      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009a1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a1e:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009a20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a24:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8009a28:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a2a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009a2c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009a30:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009a32:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009a34:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8009a38:	d036      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a3a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009a3e:	494b      	ldr	r1, [pc, #300]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009a40:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009a44:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009a48:	d13e      	bne.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8009a4a:	6908      	ldr	r0, [r1, #16]
 8009a4c:	4a49      	ldr	r2, [pc, #292]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8009a4e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8009a52:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009a56:	4302      	orrs	r2, r0
 8009a58:	610a      	str	r2, [r1, #16]
 8009a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a5e:	4a43      	ldr	r2, [pc, #268]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009a60:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009a62:	430b      	orrs	r3, r1
 8009a64:	6713      	str	r3, [r2, #112]	; 0x70
 8009a66:	e012      	b.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x466>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009a68:	2102      	movs	r1, #2
 8009a6a:	1d20      	adds	r0, r4, #4
 8009a6c:	f7ff fcec 	bl	8009448 <RCCEx_PLL2_Config>
 8009a70:	4605      	mov	r5, r0
      break;
 8009a72:	e7b2      	b.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = HAL_ERROR;
 8009a74:	2601      	movs	r6, #1
 8009a76:	4635      	mov	r5, r6
 8009a78:	e7b8      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8009a7a:	462e      	mov	r6, r5
 8009a7c:	e7b6      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a7e:	f7fc f9c5 	bl	8005e0c <HAL_GetTick>
 8009a82:	eba0 0008 	sub.w	r0, r0, r8
 8009a86:	2864      	cmp	r0, #100	; 0x64
 8009a88:	d9bb      	bls.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x3da>
        ret = HAL_TIMEOUT;
 8009a8a:	2603      	movs	r6, #3
 8009a8c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	07da      	lsls	r2, r3, #31
 8009a92:	d52d      	bpl.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a94:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009a96:	2b10      	cmp	r3, #16
 8009a98:	d03b      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8009a9a:	d81b      	bhi.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8009a9c:	b303      	cbz	r3, 8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8009a9e:	2b08      	cmp	r3, #8
 8009aa0:	d031      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = HAL_ERROR;
 8009aa2:	2601      	movs	r6, #1
 8009aa4:	4635      	mov	r5, r6
 8009aa6:	e023      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        tickstart = HAL_GetTick();
 8009aa8:	f7fc f9b0 	bl	8005e0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009aac:	4f2f      	ldr	r7, [pc, #188]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0x544>)
        tickstart = HAL_GetTick();
 8009aae:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ab0:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ab4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ab6:	0799      	lsls	r1, r3, #30
 8009ab8:	d4bf      	bmi.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x412>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009aba:	f7fc f9a7 	bl	8005e0c <HAL_GetTick>
 8009abe:	eba0 0008 	sub.w	r0, r0, r8
 8009ac2:	4548      	cmp	r0, r9
 8009ac4:	d9f6      	bls.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009ac6:	e7e0      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x462>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ac8:	690a      	ldr	r2, [r1, #16]
 8009aca:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8009ace:	e7c3      	b.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8009ad0:	462e      	mov	r6, r5
 8009ad2:	e7dc      	b.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x466>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009ad4:	2b20      	cmp	r3, #32
 8009ad6:	d003      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8009ad8:	2b28      	cmp	r3, #40	; 0x28
 8009ada:	d001      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8009adc:	2b18      	cmp	r3, #24
 8009ade:	d1e0      	bne.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    if(ret == HAL_OK)
 8009ae0:	b9ed      	cbnz	r5, 8009b1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ae2:	4a22      	ldr	r2, [pc, #136]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009ae4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8009ae6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009ae8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8009aec:	430b      	orrs	r3, r1
 8009aee:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	079b      	lsls	r3, r3, #30
 8009af4:	d522      	bpl.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009af6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009af8:	2b05      	cmp	r3, #5
 8009afa:	d831      	bhi.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8009afc:	e8df f003 	tbb	[pc, r3]
 8009b00:	162a1116 	.word	0x162a1116
 8009b04:	1616      	.short	0x1616
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b06:	2101      	movs	r1, #1
 8009b08:	1d20      	adds	r0, r4, #4
 8009b0a:	f7ff fc9d 	bl	8009448 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b0e:	4605      	mov	r5, r0
      break;
 8009b10:	e7e6      	b.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b12:	2101      	movs	r1, #1
 8009b14:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009b18:	f7ff fd0e 	bl	8009538 <RCCEx_PLL3_Config>
 8009b1c:	e7f7      	b.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009b1e:	462e      	mov	r6, r5
 8009b20:	e7e6      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b22:	2101      	movs	r1, #1
 8009b24:	1d20      	adds	r0, r4, #4
 8009b26:	f7ff fc8f 	bl	8009448 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b2a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009b2c:	b9dd      	cbnz	r5, 8009b66 <HAL_RCCEx_PeriphCLKConfig+0x53e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b2e:	4a0f      	ldr	r2, [pc, #60]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009b30:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8009b32:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009b34:	f023 0307 	bic.w	r3, r3, #7
 8009b38:	430b      	orrs	r3, r1
 8009b3a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b3c:	6823      	ldr	r3, [r4, #0]
 8009b3e:	075f      	lsls	r7, r3, #29
 8009b40:	d528      	bpl.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009b42:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009b46:	2b05      	cmp	r3, #5
 8009b48:	d83a      	bhi.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009b4a:	e8df f003 	tbb	[pc, r3]
 8009b4e:	151a      	.short	0x151a
 8009b50:	1a1a1a33 	.word	0x1a1a1a33
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b54:	2101      	movs	r1, #1
 8009b56:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009b5a:	f7ff fced 	bl	8009538 <RCCEx_PLL3_Config>
 8009b5e:	e7e4      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x502>
      ret = HAL_ERROR;
 8009b60:	2601      	movs	r6, #1
 8009b62:	4635      	mov	r5, r6
 8009b64:	e7ea      	b.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009b66:	462e      	mov	r6, r5
 8009b68:	e7e8      	b.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009b6a:	bf00      	nop
 8009b6c:	58024400 	.word	0x58024400
 8009b70:	58024800 	.word	0x58024800
 8009b74:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b78:	2101      	movs	r1, #1
 8009b7a:	1d20      	adds	r0, r4, #4
 8009b7c:	f7ff fc64 	bl	8009448 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b80:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009b82:	bb05      	cbnz	r5, 8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b84:	4a98      	ldr	r2, [pc, #608]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009b86:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8009b8a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009b8c:	f023 0307 	bic.w	r3, r3, #7
 8009b90:	430b      	orrs	r3, r1
 8009b92:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009b94:	6823      	ldr	r3, [r4, #0]
 8009b96:	0698      	lsls	r0, r3, #26
 8009b98:	d529      	bpl.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009b9a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ba2:	d03a      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8009ba4:	d811      	bhi.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009ba6:	b1cb      	cbz	r3, 8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8009ba8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bac:	d02f      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      ret = HAL_ERROR;
 8009bae:	2601      	movs	r6, #1
 8009bb0:	4635      	mov	r5, r6
 8009bb2:	e01c      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009bba:	f7ff fcbd 	bl	8009538 <RCCEx_PLL3_Config>
 8009bbe:	e7df      	b.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x558>
      ret = HAL_ERROR;
 8009bc0:	2601      	movs	r6, #1
 8009bc2:	4635      	mov	r5, r6
 8009bc4:	e7e6      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 8009bc6:	462e      	mov	r6, r5
 8009bc8:	e7e4      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bce:	d005      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8009bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bd4:	d002      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8009bd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bda:	d1e8      	bne.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x586>
    if(ret == HAL_OK)
 8009bdc:	bb1d      	cbnz	r5, 8009c26 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009bde:	4a82      	ldr	r2, [pc, #520]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009be0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009be4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009be6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009bea:	430b      	orrs	r3, r1
 8009bec:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	0659      	lsls	r1, r3, #25
 8009bf2:	d52c      	bpl.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009bf4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bfc:	d03f      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x656>
 8009bfe:	d814      	bhi.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x602>
 8009c00:	b1e3      	cbz	r3, 8009c3c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8009c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c06:	d034      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      ret = HAL_ERROR;
 8009c08:	2601      	movs	r6, #1
 8009c0a:	4635      	mov	r5, r6
 8009c0c:	e01f      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x626>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c0e:	2100      	movs	r1, #0
 8009c10:	1d20      	adds	r0, r4, #4
 8009c12:	f7ff fc19 	bl	8009448 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c16:	4605      	mov	r5, r0
      break;
 8009c18:	e7e0      	b.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c1a:	2102      	movs	r1, #2
 8009c1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009c20:	f7ff fc8a 	bl	8009538 <RCCEx_PLL3_Config>
 8009c24:	e7f7      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8009c26:	462e      	mov	r6, r5
 8009c28:	e7e1      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c2e:	d005      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8009c30:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009c34:	d002      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8009c36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c3a:	d1e5      	bne.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    if(ret == HAL_OK)
 8009c3c:	bb2d      	cbnz	r5, 8009c8a <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c3e:	4a6a      	ldr	r2, [pc, #424]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009c40:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8009c44:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009c46:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009c4a:	430b      	orrs	r3, r1
 8009c4c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	061a      	lsls	r2, r3, #24
 8009c52:	d530      	bpl.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009c54:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c5c:	f000 80a4 	beq.w	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8009c60:	d815      	bhi.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x666>
 8009c62:	b1eb      	cbz	r3, 8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8009c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c68:	f000 8098 	beq.w	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x774>
      ret = HAL_ERROR;
 8009c6c:	2601      	movs	r6, #1
 8009c6e:	4635      	mov	r5, r6
 8009c70:	e021      	b.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c72:	2100      	movs	r1, #0
 8009c74:	1d20      	adds	r0, r4, #4
 8009c76:	f7ff fbe7 	bl	8009448 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c7a:	4605      	mov	r5, r0
      break;
 8009c7c:	e7de      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x614>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c7e:	2102      	movs	r1, #2
 8009c80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009c84:	f7ff fc58 	bl	8009538 <RCCEx_PLL3_Config>
 8009c88:	e7f7      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8009c8a:	462e      	mov	r6, r5
 8009c8c:	e7df      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c92:	d005      	beq.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8009c94:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c98:	d002      	beq.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8009c9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c9e:	d1e5      	bne.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x644>
    if(ret == HAL_OK)
 8009ca0:	2d00      	cmp	r5, #0
 8009ca2:	f040 8087 	bne.w	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009ca6:	4a50      	ldr	r2, [pc, #320]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009ca8:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8009cac:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009cae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009cb2:	430b      	orrs	r3, r1
 8009cb4:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	071b      	lsls	r3, r3, #28
 8009cba:	d514      	bpl.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009cbc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cc4:	d107      	bne.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009cc6:	2102      	movs	r1, #2
 8009cc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ccc:	f7ff fc34 	bl	8009538 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	bf18      	it	ne
 8009cd4:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009cd6:	4a44      	ldr	r2, [pc, #272]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009cd8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8009cdc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009cde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009ce2:	430b      	orrs	r3, r1
 8009ce4:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	06df      	lsls	r7, r3, #27
 8009cea:	d514      	bpl.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009cec:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cf4:	d107      	bne.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009cf6:	2102      	movs	r1, #2
 8009cf8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009cfc:	f7ff fc1c 	bl	8009538 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8009d00:	2800      	cmp	r0, #0
 8009d02:	bf18      	it	ne
 8009d04:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d06:	4a38      	ldr	r2, [pc, #224]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009d08:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8009d0c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d12:	430b      	orrs	r3, r1
 8009d14:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	0318      	lsls	r0, r3, #12
 8009d1a:	d517      	bpl.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x724>
    switch(PeriphClkInit->AdcClockSelection)
 8009d1c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8009d20:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009d24:	d048      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8009d26:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8009d2a:	d005      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x710>
 8009d2c:	2900      	cmp	r1, #0
 8009d2e:	d149      	bne.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d30:	1d20      	adds	r0, r4, #4
 8009d32:	f7ff fb89 	bl	8009448 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d36:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009d38:	2d00      	cmp	r5, #0
 8009d3a:	d146      	bne.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d3c:	4a2a      	ldr	r2, [pc, #168]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009d3e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8009d42:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009d44:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009d48:	430b      	orrs	r3, r1
 8009d4a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	0359      	lsls	r1, r3, #13
 8009d50:	d518      	bpl.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch(PeriphClkInit->UsbClockSelection)
 8009d52:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009d56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d5a:	d038      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8009d5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d60:	d007      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8009d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d66:	d139      	bne.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d68:	4a1f      	ldr	r2, [pc, #124]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009d6a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d70:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009d72:	bbb5      	cbnz	r5, 8009de2 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d74:	4a1c      	ldr	r2, [pc, #112]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009d76:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8009d7a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009d7c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009d80:	430b      	orrs	r3, r1
 8009d82:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009d84:	6823      	ldr	r3, [r4, #0]
 8009d86:	03da      	lsls	r2, r3, #15
 8009d88:	d53e      	bpl.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->SdmmcClockSelection)
 8009d8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009d8c:	b373      	cbz	r3, 8009dec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 8009d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d92:	f000 808c 	beq.w	8009eae <HAL_RCCEx_PeriphCLKConfig+0x886>
      ret = HAL_ERROR;
 8009d96:	2601      	movs	r6, #1
 8009d98:	4635      	mov	r5, r6
 8009d9a:	e035      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	1d20      	adds	r0, r4, #4
 8009da0:	f7ff fb52 	bl	8009448 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009da4:	4605      	mov	r5, r0
      break;
 8009da6:	e77b      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009da8:	2102      	movs	r1, #2
 8009daa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009dae:	f7ff fbc3 	bl	8009538 <RCCEx_PLL3_Config>
 8009db2:	e7f7      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8009db4:	462e      	mov	r6, r5
 8009db6:	e77e      	b.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009db8:	2102      	movs	r1, #2
 8009dba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009dbe:	f7ff fbbb 	bl	8009538 <RCCEx_PLL3_Config>
 8009dc2:	e7b8      	b.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x70e>
      ret = HAL_ERROR;
 8009dc4:	2601      	movs	r6, #1
 8009dc6:	4635      	mov	r5, r6
 8009dc8:	e7c0      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x724>
 8009dca:	462e      	mov	r6, r5
 8009dcc:	e7be      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x724>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009dce:	2101      	movs	r1, #1
 8009dd0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009dd4:	f7ff fbb0 	bl	8009538 <RCCEx_PLL3_Config>
 8009dd8:	4605      	mov	r5, r0
      break;
 8009dda:	e7ca      	b.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      ret = HAL_ERROR;
 8009ddc:	2601      	movs	r6, #1
 8009dde:	4635      	mov	r5, r6
 8009de0:	e7d0      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8009de2:	462e      	mov	r6, r5
 8009de4:	e7ce      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8009de6:	bf00      	nop
 8009de8:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dec:	4a3c      	ldr	r2, [pc, #240]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009dee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009df4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009df6:	2d00      	cmp	r5, #0
 8009df8:	d15f      	bne.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x892>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009dfa:	4a39      	ldr	r2, [pc, #228]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009dfc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009dfe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e04:	430b      	orrs	r3, r1
 8009e06:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	d507      	bpl.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009e0e:	2102      	movs	r1, #2
 8009e10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e14:	f7ff fb90 	bl	8009538 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	bf18      	it	ne
 8009e1c:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009e1e:	6823      	ldr	r3, [r4, #0]
 8009e20:	039f      	lsls	r7, r3, #14
 8009e22:	d50e      	bpl.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch(PeriphClkInit->RngClockSelection)
 8009e24:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8009e26:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009e2a:	d050      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8009e2c:	d847      	bhi.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x896>
 8009e2e:	2900      	cmp	r1, #0
 8009e30:	d14b      	bne.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    if(ret == HAL_OK)
 8009e32:	2d00      	cmp	r5, #0
 8009e34:	d151      	bne.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e36:	482a      	ldr	r0, [pc, #168]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009e38:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8009e3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009e42:	02dd      	lsls	r5, r3, #11
 8009e44:	d506      	bpl.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x82c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e46:	4926      	ldr	r1, [pc, #152]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009e48:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009e4a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009e4c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009e50:	4302      	orrs	r2, r0
 8009e52:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009e54:	00d8      	lsls	r0, r3, #3
 8009e56:	d507      	bpl.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x840>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009e58:	4921      	ldr	r1, [pc, #132]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009e5a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8009e5e:	690a      	ldr	r2, [r1, #16]
 8009e60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009e64:	4302      	orrs	r2, r0
 8009e66:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e68:	0299      	lsls	r1, r3, #10
 8009e6a:	d506      	bpl.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009e6c:	491c      	ldr	r1, [pc, #112]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009e6e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009e70:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009e72:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009e76:	4302      	orrs	r2, r0
 8009e78:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009e7a:	005a      	lsls	r2, r3, #1
 8009e7c:	d509      	bpl.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x86a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e7e:	4a18      	ldr	r2, [pc, #96]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009e80:	6911      	ldr	r1, [r2, #16]
 8009e82:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8009e86:	6111      	str	r1, [r2, #16]
 8009e88:	6911      	ldr	r1, [r2, #16]
 8009e8a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8009e8e:	4301      	orrs	r1, r0
 8009e90:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	da06      	bge.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e96:	4a12      	ldr	r2, [pc, #72]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009e98:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009e9a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009e9c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8009ea4:	1c30      	adds	r0, r6, #0
 8009ea6:	bf18      	it	ne
 8009ea8:	2001      	movne	r0, #1
 8009eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009eae:	2102      	movs	r1, #2
 8009eb0:	1d20      	adds	r0, r4, #4
 8009eb2:	f7ff fac9 	bl	8009448 <RCCEx_PLL2_Config>
 8009eb6:	4605      	mov	r5, r0
      break;
 8009eb8:	e79d      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8009eba:	462e      	mov	r6, r5
 8009ebc:	e7a4      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->RngClockSelection)
 8009ebe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009ec2:	d0b6      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8009ec4:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8009ec8:	d0b3      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      ret = HAL_ERROR;
 8009eca:	2601      	movs	r6, #1
 8009ecc:	e7b9      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ece:	4804      	ldr	r0, [pc, #16]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009ed0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009ed2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009ed6:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8009ed8:	e7ab      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8009eda:	462e      	mov	r6, r5
 8009edc:	e7b1      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8009ede:	bf00      	nop
 8009ee0:	58024400 	.word	0x58024400

08009ee4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8009ee4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009ee6:	f7ff fa3f 	bl	8009368 <HAL_RCC_GetHCLKFreq>
 8009eea:	4b05      	ldr	r3, [pc, #20]	; (8009f00 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8009eec:	4a05      	ldr	r2, [pc, #20]	; (8009f04 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8009eee:	6a1b      	ldr	r3, [r3, #32]
 8009ef0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009ef4:	5cd3      	ldrb	r3, [r2, r3]
 8009ef6:	f003 031f 	and.w	r3, r3, #31
}
 8009efa:	40d8      	lsrs	r0, r3
 8009efc:	bd08      	pop	{r3, pc}
 8009efe:	bf00      	nop
 8009f00:	58024400 	.word	0x58024400
 8009f04:	08015804 	.word	0x08015804

08009f08 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f08:	494d      	ldr	r1, [pc, #308]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
{
 8009f0a:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f0c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009f0e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009f10:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009f12:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009f16:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f000 808c 	beq.w	800a036 <HAL_RCCEx_GetPLL2ClockFreq+0x12e>
 8009f1e:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009f22:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009f26:	f3c2 1300 	ubfx	r3, r2, #4, #1
 8009f2a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009f2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009f32:	436b      	muls	r3, r5
 8009f34:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f38:	f004 0303 	and.w	r3, r4, #3
    switch (pllsource)
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8009f42:	d002      	beq.n	8009f4a <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8009f44:	d30f      	bcc.n	8009f66 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d067      	beq.n	800a01a <HAL_RCCEx_GetPLL2ClockFreq+0x112>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f4a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8009f4c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800a044 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>
 8009f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f54:	ee07 3a10 	vmov	s14, r3
 8009f58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f60:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009f64:	e056      	b.n	800a014 <HAL_RCCEx_GetPLL2ClockFreq+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f66:	680b      	ldr	r3, [r1, #0]
 8009f68:	069b      	lsls	r3, r3, #26
 8009f6a:	d546      	bpl.n	8009ffa <HAL_RCCEx_GetPLL2ClockFreq+0xf2>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f6c:	680a      	ldr	r2, [r1, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f6e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f70:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8009f74:	4a34      	ldr	r2, [pc, #208]	; (800a048 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f7a:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f7c:	ee07 2a10 	vmov	s14, r2
 8009f80:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8009f84:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009f88:	ee06 3a90 	vmov	s13, r3
 8009f8c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f94:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009f98:	4a29      	ldr	r2, [pc, #164]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009f9e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009fa0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009fa4:	ee07 3a10 	vmov	s14, r3
 8009fa8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009fac:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009fb0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009fb4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009fb8:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009fbc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009fbe:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009fc2:	ee07 3a10 	vmov	s14, r3
 8009fc6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009fca:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009fce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009fd2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009fd6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009fda:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009fdc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009fe0:	ee07 3a10 	vmov	s14, r3
 8009fe4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009fe8:	ee37 6a06 	vadd.f32	s12, s14, s12
 8009fec:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8009ff0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009ff4:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009ff8:	bd30      	pop	{r4, r5, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ffa:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8009ffc:	eddf 5a13 	vldr	s11, [pc, #76]	; 800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800a000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a004:	ee07 3a10 	vmov	s14, r3
 800a008:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a00c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a010:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a014:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800a018:	e7be      	b.n	8009f98 <HAL_RCCEx_GetPLL2ClockFreq+0x90>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a01a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800a01c:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800a050 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800a020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a024:	ee07 3a10 	vmov	s14, r3
 800a028:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a02c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a030:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a034:	e7ee      	b.n	800a014 <HAL_RCCEx_GetPLL2ClockFreq+0x10c>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a036:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a03a:	6083      	str	r3, [r0, #8]
}
 800a03c:	e7dc      	b.n	8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0xf0>
 800a03e:	bf00      	nop
 800a040:	58024400 	.word	0x58024400
 800a044:	4a742400 	.word	0x4a742400
 800a048:	03d09000 	.word	0x03d09000
 800a04c:	4c742400 	.word	0x4c742400
 800a050:	4af42400 	.word	0x4af42400

0800a054 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a054:	494d      	ldr	r1, [pc, #308]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
{
 800a056:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a058:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a05a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a05c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a05e:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a062:	6c4d      	ldr	r5, [r1, #68]	; 0x44
  if (pll3m != 0U)
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 808c 	beq.w	800a182 <HAL_RCCEx_GetPLL3ClockFreq+0x12e>
 800a06a:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a06e:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a072:	f3c2 2300 	ubfx	r3, r2, #8, #1
 800a076:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a07a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a07e:	436b      	muls	r3, r5
 800a080:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a084:	f004 0303 	and.w	r3, r4, #3
    switch (pllsource)
 800a088:	2b01      	cmp	r3, #1
 800a08a:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800a08e:	d002      	beq.n	800a096 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 800a090:	d30f      	bcc.n	800a0b2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800a092:	2b02      	cmp	r3, #2
 800a094:	d067      	beq.n	800a166 <HAL_RCCEx_GetPLL3ClockFreq+0x112>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a096:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a098:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>
 800a09c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0a0:	ee07 3a10 	vmov	s14, r3
 800a0a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a0a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0ac:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a0b0:	e056      	b.n	800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0b2:	680b      	ldr	r3, [r1, #0]
 800a0b4:	069b      	lsls	r3, r3, #26
 800a0b6:	d546      	bpl.n	800a146 <HAL_RCCEx_GetPLL3ClockFreq+0xf2>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0b8:	680a      	ldr	r2, [r1, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0bc:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800a0c0:	4a34      	ldr	r2, [pc, #208]	; (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0c6:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0c8:	ee07 2a10 	vmov	s14, r2
 800a0cc:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800a0d0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800a0d4:	ee06 3a90 	vmov	s13, r3
 800a0d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a0dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0e0:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a0e4:	4a29      	ldr	r2, [pc, #164]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0e6:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a0ea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a0ec:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a0f0:	ee07 3a10 	vmov	s14, r3
 800a0f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a0f8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a0fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a100:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a104:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a108:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a10a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a10e:	ee07 3a10 	vmov	s14, r3
 800a112:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a116:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a11a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a11e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a122:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a126:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a128:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a12c:	ee07 3a10 	vmov	s14, r3
 800a130:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a134:	ee37 6a06 	vadd.f32	s12, s14, s12
 800a138:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800a13c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a140:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800a144:	bd30      	pop	{r4, r5, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a146:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a148:	eddf 5a13 	vldr	s11, [pc, #76]	; 800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800a14c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a150:	ee07 3a10 	vmov	s14, r3
 800a154:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a15c:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a160:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800a164:	e7be      	b.n	800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x90>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a166:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a168:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800a19c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800a16c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a170:	ee07 3a10 	vmov	s14, r3
 800a174:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a17c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a180:	e7ee      	b.n	800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x10c>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a182:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a186:	6083      	str	r3, [r0, #8]
}
 800a188:	e7dc      	b.n	800a144 <HAL_RCCEx_GetPLL3ClockFreq+0xf0>
 800a18a:	bf00      	nop
 800a18c:	58024400 	.word	0x58024400
 800a190:	4a742400 	.word	0x4a742400
 800a194:	03d09000 	.word	0x03d09000
 800a198:	4c742400 	.word	0x4c742400
 800a19c:	4af42400 	.word	0x4af42400

0800a1a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1a0:	494d      	ldr	r1, [pc, #308]	; (800a2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>)
{
 800a1a2:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1a4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a1a6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a1a8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a1aa:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a1ae:	6b4d      	ldr	r5, [r1, #52]	; 0x34
  if (pll1m != 0U)
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 808c 	beq.w	800a2ce <HAL_RCCEx_GetPLL1ClockFreq+0x12e>
 800a1b6:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a1ba:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a1be:	f002 0301 	and.w	r3, r2, #1
 800a1c2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a1c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a1ca:	436b      	muls	r3, r5
 800a1cc:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1d0:	f004 0303 	and.w	r3, r4, #3
    switch (pllsource)
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800a1da:	d002      	beq.n	800a1e2 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 800a1dc:	d30f      	bcc.n	800a1fe <HAL_RCCEx_GetPLL1ClockFreq+0x5e>
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d067      	beq.n	800a2b2 <HAL_RCCEx_GetPLL1ClockFreq+0x112>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a1e2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800a1e4:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800a2dc <HAL_RCCEx_GetPLL1ClockFreq+0x13c>
 800a1e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ec:	ee07 3a10 	vmov	s14, r3
 800a1f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a1f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1f8:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a1fc:	e056      	b.n	800a2ac <HAL_RCCEx_GetPLL1ClockFreq+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1fe:	680b      	ldr	r3, [r1, #0]
 800a200:	069b      	lsls	r3, r3, #26
 800a202:	d546      	bpl.n	800a292 <HAL_RCCEx_GetPLL1ClockFreq+0xf2>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a204:	680a      	ldr	r2, [r1, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a206:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a208:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800a20c:	4a34      	ldr	r2, [pc, #208]	; (800a2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a212:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a214:	ee07 2a10 	vmov	s14, r2
 800a218:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800a21c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800a220:	ee06 3a90 	vmov	s13, r3
 800a224:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a228:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a22c:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a230:	4a29      	ldr	r2, [pc, #164]	; (800a2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>)
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a232:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a236:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a238:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a23c:	ee07 3a10 	vmov	s14, r3
 800a240:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a244:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a248:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a24c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a250:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a254:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a256:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a25a:	ee07 3a10 	vmov	s14, r3
 800a25e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a262:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a266:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a26a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a26e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a272:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a274:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a278:	ee07 3a10 	vmov	s14, r3
 800a27c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a280:	ee37 6a06 	vadd.f32	s12, s14, s12
 800a284:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800a288:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a28c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800a290:	bd30      	pop	{r4, r5, pc}
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a292:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800a294:	eddf 5a13 	vldr	s11, [pc, #76]	; 800a2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800a298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a29c:	ee07 3a10 	vmov	s14, r3
 800a2a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a2a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2a8:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a2ac:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800a2b0:	e7be      	b.n	800a230 <HAL_RCCEx_GetPLL1ClockFreq+0x90>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a2b2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800a2b4:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800a2e8 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800a2b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2bc:	ee07 3a10 	vmov	s14, r3
 800a2c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a2c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2c8:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a2cc:	e7ee      	b.n	800a2ac <HAL_RCCEx_GetPLL1ClockFreq+0x10c>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a2ce:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a2d2:	6083      	str	r3, [r0, #8]
}
 800a2d4:	e7dc      	b.n	800a290 <HAL_RCCEx_GetPLL1ClockFreq+0xf0>
 800a2d6:	bf00      	nop
 800a2d8:	58024400 	.word	0x58024400
 800a2dc:	4a742400 	.word	0x4a742400
 800a2e0:	03d09000 	.word	0x03d09000
 800a2e4:	4c742400 	.word	0x4c742400
 800a2e8:	4af42400 	.word	0x4af42400

0800a2ec <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a2ec:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 800a2f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a2f2:	d122      	bne.n	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a2f4:	4b6a      	ldr	r3, [pc, #424]	; (800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a2f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2f8:	f002 0207 	and.w	r2, r2, #7
      switch (saiclocksource)
 800a2fc:	2a04      	cmp	r2, #4
 800a2fe:	d82a      	bhi.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800a300:	e8df f002 	tbb	[pc, r2]
 800a304:	c9088503 	.word	0xc9088503
 800a308:	0c          	.byte	0x0c
 800a309:	00          	.byte	0x00
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a30a:	a801      	add	r0, sp, #4
 800a30c:	f7ff ff48 	bl	800a1a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a310:	9802      	ldr	r0, [sp, #8]
          break;
 800a312:	e080      	b.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a314:	a801      	add	r0, sp, #4
 800a316:	f7ff fe9d 	bl	800a054 <HAL_RCCEx_GetPLL3ClockFreq>
 800a31a:	e07b      	b.n	800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a31c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a31e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800a322:	f000 80ad 	beq.w	800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a32a:	f000 80b6 	beq.w	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            frequency = HSE_VALUE;
 800a32e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a332:	485c      	ldr	r0, [pc, #368]	; (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800a334:	bf18      	it	ne
 800a336:	2000      	movne	r0, #0
 800a338:	e06d      	b.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a33a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a33e:	d114      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a340:	4a57      	ldr	r2, [pc, #348]	; (800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a342:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a344:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800a348:	2b80      	cmp	r3, #128	; 0x80
 800a34a:	d0e3      	beq.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800a34c:	d805      	bhi.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d0db      	beq.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800a352:	2b40      	cmp	r3, #64	; 0x40
      switch (srcclk)
 800a354:	d05b      	beq.n	800a40e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          frequency = 0;
 800a356:	2000      	movs	r0, #0
  return frequency;
 800a358:	e05d      	b.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
      switch (saiclocksource)
 800a35a:	2bc0      	cmp	r3, #192	; 0xc0
 800a35c:	f000 809b 	beq.w	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
      switch (srcclk)
 800a364:	d1f7      	bne.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a366:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a368:	e7d9      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x32>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a36a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a36e:	d113      	bne.n	800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a370:	4a4b      	ldr	r2, [pc, #300]	; (800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a372:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a374:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 800a378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a37c:	d0ca      	beq.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800a37e:	d804      	bhi.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800a380:	2b00      	cmp	r3, #0
 800a382:	d0c2      	beq.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800a384:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a388:	e7e4      	b.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800a38a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a38e:	f000 8082 	beq.w	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a392:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a396:	e7e5      	b.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a398:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800a39c:	d112      	bne.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a39e:	4a40      	ldr	r2, [pc, #256]	; (800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a3a0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a3a2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800a3a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3aa:	d0b3      	beq.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800a3ac:	d804      	bhi.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0ab      	beq.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800a3b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a3b6:	e7cd      	b.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800a3b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a3bc:	d06b      	beq.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a3be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3c2:	e7cf      	b.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a3c4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800a3c8:	d112      	bne.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a3ca:	4a35      	ldr	r2, [pc, #212]	; (800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a3cc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a3ce:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800a3d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3d6:	d09d      	beq.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800a3d8:	d804      	bhi.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d095      	beq.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800a3de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3e2:	e7b7      	b.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800a3e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3e8:	d055      	beq.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a3ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3ee:	e7b9      	b.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a3f0:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800a3f4:	d117      	bne.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a3f6:	4a2a      	ldr	r2, [pc, #168]	; (800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a3f8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a3fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800a3fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a402:	d00b      	beq.n	800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800a404:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a408:	d0ad      	beq.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1a3      	bne.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a40e:	a801      	add	r0, sp, #4
 800a410:	f7ff fd7a 	bl	8009f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a414:	9801      	ldr	r0, [sp, #4]
}
 800a416:	b005      	add	sp, #20
 800a418:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a41c:	a801      	add	r0, sp, #4
 800a41e:	f7ff fe19 	bl	800a054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a422:	9803      	ldr	r0, [sp, #12]
          break;
 800a424:	e7f7      	b.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a426:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800a42a:	d10b      	bne.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a42c:	4b1c      	ldr	r3, [pc, #112]	; (800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a42e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 800a430:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800a434:	f43f af69 	beq.w	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d08c      	beq.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a43c:	a801      	add	r0, sp, #4
 800a43e:	f7ff fd63 	bl	8009f08 <HAL_RCCEx_GetPLL2ClockFreq>
 800a442:	e7ee      	b.n	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a444:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800a448:	d185      	bne.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a44a:	4b15      	ldr	r3, [pc, #84]	; (800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a44c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a44e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800a452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a456:	d018      	beq.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a458:	d808      	bhi.n	800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 800a45a:	b19b      	cbz	r3, 800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 800a45c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a460:	f47f af79 	bne.w	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a464:	a801      	add	r0, sp, #4
 800a466:	f7ff fd4f 	bl	8009f08 <HAL_RCCEx_GetPLL2ClockFreq>
 800a46a:	e751      	b.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
      switch (srcclk)
 800a46c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a470:	d013      	beq.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 800a472:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a476:	d00c      	beq.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 800a478:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a47c:	f47f af6b 	bne.w	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
            frequency = HSI_VALUE;
 800a480:	4809      	ldr	r0, [pc, #36]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800a482:	e7c8      	b.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a484:	f7ff fd2e 	bl	8009ee4 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 800a488:	e7c5      	b.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a48a:	a801      	add	r0, sp, #4
 800a48c:	f7ff fde2 	bl	800a054 <HAL_RCCEx_GetPLL3ClockFreq>
 800a490:	e73e      	b.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          frequency = HSE_VALUE;
 800a492:	4804      	ldr	r0, [pc, #16]	; (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
          break;
 800a494:	e7bf      	b.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          frequency = EXTERNAL_CLOCK_VALUE;
 800a496:	4805      	ldr	r0, [pc, #20]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800a498:	e7bd      	b.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            frequency = CSI_VALUE;
 800a49a:	4805      	ldr	r0, [pc, #20]	; (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800a49c:	e7bb      	b.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800a49e:	bf00      	nop
 800a4a0:	58024400 	.word	0x58024400
 800a4a4:	007a1200 	.word	0x007a1200
 800a4a8:	03d09000 	.word	0x03d09000
 800a4ac:	00bb8000 	.word	0x00bb8000
 800a4b0:	003d0900 	.word	0x003d0900

0800a4b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b8:	4606      	mov	r6, r0
 800a4ba:	b087      	sub	sp, #28
 800a4bc:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a4be:	f7fb fca5 	bl	8005e0c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a4c2:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800a4c4:	4682      	mov	sl, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a4c6:	6830      	ldr	r0, [r6, #0]
 800a4c8:	f002 fc0e 	bl	800cce8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	bb50      	cbnz	r0, 800a526 <SD_FindSCR+0x72>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a4d0:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800a4d2:	6830      	ldr	r0, [r6, #0]
 800a4d4:	0409      	lsls	r1, r1, #16
 800a4d6:	f002 fd33 	bl	800cf40 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4da:	4604      	mov	r4, r0
 800a4dc:	bb18      	cbnz	r0, 800a526 <SD_FindSCR+0x72>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 800a4de:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e2:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a4e4:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a4e6:	9004      	str	r0, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a4e8:	6830      	ldr	r0, [r6, #0]
  config.DataLength    = 8U;
 800a4ea:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	e9cd 1302 	strd	r1, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a4f4:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a4f6:	4669      	mov	r1, sp
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a4f8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a4fa:	f002 fbe2 	bl	800ccc2 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a4fe:	6830      	ldr	r0, [r6, #0]
 800a500:	f002 fd66 	bl	800cfd0 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a504:	4604      	mov	r4, r0
 800a506:	b970      	cbnz	r0, 800a526 <SD_FindSCR+0x72>
  uint32_t index = 0U;
 800a508:	4683      	mov	fp, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a50a:	4605      	mov	r5, r0
 800a50c:	4607      	mov	r7, r0
  {
    return errorstate;
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a50e:	f240 592a 	movw	r9, #1322	; 0x52a
 800a512:	6830      	ldr	r0, [r6, #0]
 800a514:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a516:	ea13 0f09 	tst.w	r3, r9
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a51a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a51c:	d007      	beq.n	800a52e <SD_FindSCR+0x7a>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a51e:	0719      	lsls	r1, r3, #28
 800a520:	d51c      	bpl.n	800a55c <SD_FindSCR+0xa8>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a522:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a524:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800a526:	4620      	mov	r0, r4
 800a528:	b007      	add	sp, #28
 800a52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a52e:	031b      	lsls	r3, r3, #12
 800a530:	d40b      	bmi.n	800a54a <SD_FindSCR+0x96>
 800a532:	f1bb 0f00 	cmp.w	fp, #0
 800a536:	d108      	bne.n	800a54a <SD_FindSCR+0x96>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a538:	f002 fb9a 	bl	800cc70 <SDMMC_ReadFIFO>
 800a53c:	4607      	mov	r7, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a53e:	6830      	ldr	r0, [r6, #0]
      index++;
 800a540:	f04f 0b01 	mov.w	fp, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a544:	f002 fb94 	bl	800cc70 <SDMMC_ReadFIFO>
 800a548:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a54a:	f7fb fc5f 	bl	8005e0c <HAL_GetTick>
 800a54e:	eba0 000a 	sub.w	r0, r0, sl
 800a552:	3001      	adds	r0, #1
 800a554:	d1dd      	bne.n	800a512 <SD_FindSCR+0x5e>
      return HAL_SD_ERROR_TIMEOUT;
 800a556:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a55a:	e7e4      	b.n	800a526 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a55c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a55e:	079a      	lsls	r2, r3, #30
 800a560:	d501      	bpl.n	800a566 <SD_FindSCR+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a562:	2402      	movs	r4, #2
 800a564:	e7de      	b.n	800a524 <SD_FindSCR+0x70>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a566:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a568:	069b      	lsls	r3, r3, #26
 800a56a:	d501      	bpl.n	800a570 <SD_FindSCR+0xbc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a56c:	2420      	movs	r4, #32
 800a56e:	e7d9      	b.n	800a524 <SD_FindSCR+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a570:	4b04      	ldr	r3, [pc, #16]	; (800a584 <SD_FindSCR+0xd0>)
 800a572:	ba2d      	rev	r5, r5
 800a574:	ba3f      	rev	r7, r7
 800a576:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a578:	f8c8 5000 	str.w	r5, [r8]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a57c:	f8c8 7004 	str.w	r7, [r8, #4]
  return HAL_SD_ERROR_NONE;
 800a580:	e7d1      	b.n	800a526 <SD_FindSCR+0x72>
 800a582:	bf00      	nop
 800a584:	18000f3a 	.word	0x18000f3a

0800a588 <HAL_SD_ReadBlocks_DMA>:
{
 800a588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a58a:	4604      	mov	r4, r0
 800a58c:	b087      	sub	sp, #28
 800a58e:	4615      	mov	r5, r2
 800a590:	461e      	mov	r6, r3
  if(NULL == pData)
 800a592:	460f      	mov	r7, r1
 800a594:	b931      	cbnz	r1, 800a5a4 <HAL_SD_ReadBlocks_DMA+0x1c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a596:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a598:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a59c:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800a59e:	2001      	movs	r0, #1
}
 800a5a0:	b007      	add	sp, #28
 800a5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 800a5a4:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800a5a8:	b2c0      	uxtb	r0, r0
 800a5aa:	2801      	cmp	r0, #1
 800a5ac:	d14c      	bne.n	800a648 <HAL_SD_ReadBlocks_DMA+0xc0>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a5ae:	18d3      	adds	r3, r2, r3
 800a5b0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a5b2:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a5b4:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a5b6:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a5b8:	d904      	bls.n	800a5c4 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a5ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a5c0:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800a5c2:	e7ed      	b.n	800a5a0 <HAL_SD_ReadBlocks_DMA+0x18>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a5c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 800a5c6:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 800a5c8:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a5ca:	2a01      	cmp	r2, #1
    hsd->State = HAL_SD_STATE_BUSY;
 800a5cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a5d0:	f04f 32ff 	mov.w	r2, #4294967295
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a5d4:	ea4f 2346 	mov.w	r3, r6, lsl #9
    hsd->Instance->DCTRL = 0U;
 800a5d8:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a5da:	4669      	mov	r1, sp
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a5dc:	62e3      	str	r3, [r4, #44]	; 0x2c
      add *= 512U;
 800a5de:	bf18      	it	ne
 800a5e0:	026d      	lslne	r5, r5, #9
    hsd->pRxBuffPtr = pData;
 800a5e2:	62a7      	str	r7, [r4, #40]	; 0x28
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a5e4:	e9cd 2300 	strd	r2, r3, [sp]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a5e8:	2290      	movs	r2, #144	; 0x90
 800a5ea:	2302      	movs	r3, #2
 800a5ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a5f0:	2300      	movs	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a5f2:	e9cd 3304 	strd	r3, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a5f6:	f002 fb64 	bl	800ccc2 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a5fa:	6820      	ldr	r0, [r4, #0]
 800a5fc:	68c3      	ldr	r3, [r0, #12]
 800a5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a602:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a604:	2301      	movs	r3, #1
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a606:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 800a608:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a60a:	6503      	str	r3, [r0, #80]	; 0x50
    if(NumberOfBlocks > 1U)
 800a60c:	d911      	bls.n	800a632 <HAL_SD_ReadBlocks_DMA+0xaa>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a60e:	2382      	movs	r3, #130	; 0x82
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a610:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a612:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a614:	f002 fb9a 	bl	800cd4c <SDMMC_CmdReadMultiBlock>
 800a618:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a61a:	b180      	cbz	r0, 800a63e <HAL_SD_ReadBlocks_DMA+0xb6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a61c:	4a0b      	ldr	r2, [pc, #44]	; (800a64c <HAL_SD_ReadBlocks_DMA+0xc4>)
 800a61e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a620:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a622:	4318      	orrs	r0, r3
      hsd->Context = SD_CONTEXT_NONE;
 800a624:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 800a626:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a628:	2001      	movs	r0, #1
 800a62a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a62e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800a630:	e7b6      	b.n	800a5a0 <HAL_SD_ReadBlocks_DMA+0x18>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a632:	2381      	movs	r3, #129	; 0x81
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a634:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a636:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a638:	f002 fb6f 	bl	800cd1a <SDMMC_CmdReadSingleBlock>
 800a63c:	e7ec      	b.n	800a618 <HAL_SD_ReadBlocks_DMA+0x90>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a63e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a640:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a644:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_OK;
 800a646:	e7ab      	b.n	800a5a0 <HAL_SD_ReadBlocks_DMA+0x18>
    return HAL_BUSY;
 800a648:	2002      	movs	r0, #2
 800a64a:	e7a9      	b.n	800a5a0 <HAL_SD_ReadBlocks_DMA+0x18>
 800a64c:	1fe00fff 	.word	0x1fe00fff

0800a650 <HAL_SD_WriteBlocks_DMA>:
{
 800a650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a654:	4604      	mov	r4, r0
 800a656:	b086      	sub	sp, #24
 800a658:	4615      	mov	r5, r2
 800a65a:	461e      	mov	r6, r3
  if(NULL == pData)
 800a65c:	460f      	mov	r7, r1
 800a65e:	b939      	cbnz	r1, 800a670 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a660:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a662:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a666:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800a668:	2001      	movs	r0, #1
}
 800a66a:	b006      	add	sp, #24
 800a66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 800a670:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800a674:	b2c0      	uxtb	r0, r0
 800a676:	2801      	cmp	r0, #1
 800a678:	d14c      	bne.n	800a714 <HAL_SD_WriteBlocks_DMA+0xc4>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a67a:	18d3      	adds	r3, r2, r3
 800a67c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a67e:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a680:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a682:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a684:	d904      	bls.n	800a690 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a686:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a688:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a68c:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800a68e:	e7ec      	b.n	800a66a <HAL_SD_WriteBlocks_DMA+0x1a>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a690:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 800a692:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 800a694:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a696:	f04f 0890 	mov.w	r8, #144	; 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a69a:	2a01      	cmp	r2, #1
    hsd->State = HAL_SD_STATE_BUSY;
 800a69c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a6a0:	f04f 32ff 	mov.w	r2, #4294967295
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a6a4:	ea4f 2346 	mov.w	r3, r6, lsl #9
    hsd->Instance->DCTRL = 0U;
 800a6a8:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a6aa:	4669      	mov	r1, sp
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a6ac:	6263      	str	r3, [r4, #36]	; 0x24
      add *= 512U;
 800a6ae:	bf18      	it	ne
 800a6b0:	026d      	lslne	r5, r5, #9
    hsd->pTxBuffPtr = pData;
 800a6b2:	6227      	str	r7, [r4, #32]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a6b4:	e9cd 2300 	strd	r2, r3, [sp]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	e9cd 8302 	strd	r8, r3, [sp, #8]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a6be:	e9cd 3304 	strd	r3, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a6c2:	f002 fafe 	bl	800ccc2 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a6c6:	6820      	ldr	r0, [r4, #0]
 800a6c8:	68c3      	ldr	r3, [r0, #12]
 800a6ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6ce:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a6d0:	2301      	movs	r3, #1
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a6d2:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 800a6d4:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a6d6:	6503      	str	r3, [r0, #80]	; 0x50
    if(NumberOfBlocks > 1U)
 800a6d8:	d911      	bls.n	800a6fe <HAL_SD_WriteBlocks_DMA+0xae>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a6da:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a6dc:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a6de:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a6e0:	f002 fb66 	bl	800cdb0 <SDMMC_CmdWriteMultiBlock>
 800a6e4:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6e6:	b180      	cbz	r0, 800a70a <HAL_SD_WriteBlocks_DMA+0xba>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6e8:	4a0b      	ldr	r2, [pc, #44]	; (800a718 <HAL_SD_WriteBlocks_DMA+0xc8>)
 800a6ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a6ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a6ee:	4318      	orrs	r0, r3
      hsd->Context = SD_CONTEXT_NONE;
 800a6f0:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 800a6f2:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a6f4:	2001      	movs	r0, #1
 800a6f6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a6fa:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800a6fc:	e7b5      	b.n	800a66a <HAL_SD_WriteBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a6fe:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a702:	4629      	mov	r1, r5
 800a704:	f002 fb3b 	bl	800cd7e <SDMMC_CmdWriteSingleBlock>
 800a708:	e7ec      	b.n	800a6e4 <HAL_SD_WriteBlocks_DMA+0x94>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a70a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a70c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a710:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_OK;
 800a712:	e7aa      	b.n	800a66a <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 800a714:	2002      	movs	r0, #2
 800a716:	e7a8      	b.n	800a66a <HAL_SD_WriteBlocks_DMA+0x1a>
 800a718:	1fe00fff 	.word	0x1fe00fff

0800a71c <HAL_SD_ErrorCallback>:
 800a71c:	4770      	bx	lr

0800a71e <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 800a71e:	4770      	bx	lr

0800a720 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a720:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800a722:	0f9a      	lsrs	r2, r3, #30
 800a724:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a726:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800a72a:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a72c:	f3c3 6201 	ubfx	r2, r3, #24, #2
 800a730:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a732:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a736:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a738:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a73c:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a73e:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a740:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a742:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a744:	0d1a      	lsrs	r2, r3, #20
 800a746:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a748:	f3c3 4203 	ubfx	r2, r3, #16, #4
 800a74c:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a74e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800a752:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a754:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800a758:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a75a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800a75e:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a760:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800a764:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a766:	2200      	movs	r2, #0
 800a768:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800a76a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 800a76c:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 800a76e:	2a00      	cmp	r2, #0
 800a770:	d16b      	bne.n	800a84a <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a772:	f640 74fc 	movw	r4, #4092	; 0xffc
 800a776:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800a778:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 800a77c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800a780:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a782:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800a786:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a788:	f3c2 6302 	ubfx	r3, r2, #24, #3
 800a78c:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a78e:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800a792:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a794:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a798:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a79c:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a79e:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a7a0:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a7a2:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a7a4:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a7a6:	f002 0207 	and.w	r2, r2, #7
 800a7aa:	3202      	adds	r2, #2
 800a7ac:	4093      	lsls	r3, r2
 800a7ae:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a7b0:	7a0a      	ldrb	r2, [r1, #8]
 800a7b2:	f002 040f 	and.w	r4, r2, #15
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	40a2      	lsls	r2, r4
 800a7ba:	6502      	str	r2, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a7bc:	0a52      	lsrs	r2, r2, #9
 800a7be:	4353      	muls	r3, r2
 800a7c0:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800a7c2:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a7c6:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a7c8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800a7ca:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800a7ce:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a7d0:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a7d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a7d8:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a7da:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a7dc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->Reserved3 = 0;
 800a7de:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a7e0:	0fda      	lsrs	r2, r3, #31
 800a7e2:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a7e4:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800a7e8:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a7ea:	f3c3 6282 	ubfx	r2, r3, #26, #3
 800a7ee:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a7f0:	f3c3 5283 	ubfx	r2, r3, #22, #4
 800a7f4:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a7f6:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800a7fa:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a7fe:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 800a802:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a806:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a80a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800a80e:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a812:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800a816:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a81a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800a81e:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a822:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800a826:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a82a:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800a82e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a832:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a836:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a83a:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a83e:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800a842:	2301      	movs	r3, #1
 800a844:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 800a848:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a84a:	2a01      	cmp	r2, #1
 800a84c:	d10f      	bne.n	800a86e <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a84e:	041b      	lsls	r3, r3, #16
 800a850:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 800a854:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800a858:	4313      	orrs	r3, r2
 800a85a:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a85c:	690b      	ldr	r3, [r1, #16]
 800a85e:	3301      	adds	r3, #1
 800a860:	029b      	lsls	r3, r3, #10
 800a862:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a864:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800a866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a86a:	6503      	str	r3, [r0, #80]	; 0x50
 800a86c:	e7ab      	b.n	800a7c6 <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a86e:	6803      	ldr	r3, [r0, #0]
 800a870:	4a05      	ldr	r2, [pc, #20]	; (800a888 <HAL_SD_GetCardCSD+0x168>)
 800a872:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a874:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a87a:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a87c:	2301      	movs	r3, #1
 800a87e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800a882:	4618      	mov	r0, r3
 800a884:	e7e0      	b.n	800a848 <HAL_SD_GetCardCSD+0x128>
 800a886:	bf00      	nop
 800a888:	1fe00fff 	.word	0x1fe00fff

0800a88c <HAL_SD_InitCard>:
{
 800a88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a890:	2300      	movs	r3, #0
{
 800a892:	b098      	sub	sp, #96	; 0x60
 800a894:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a896:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800a89a:	4da1      	ldr	r5, [pc, #644]	; (800ab20 <HAL_SD_InitCard+0x294>)
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a89c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a8a0:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a8a4:	f7ff fd22 	bl	800a2ec <HAL_RCCEx_GetPeriphCLKFreq>
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a8a8:	69a3      	ldr	r3, [r4, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	6827      	ldr	r7, [r4, #0]
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a8ae:	2b02      	cmp	r3, #2
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800a8b0:	fbb0 f5f5 	udiv	r5, r0, r5
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a8b4:	d103      	bne.n	800a8be <HAL_SD_InitCard+0x32>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	f043 0310 	orr.w	r3, r3, #16
 800a8bc:	603b      	str	r3, [r7, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 800a8be:	ab0a      	add	r3, sp, #40	; 0x28
 800a8c0:	950b      	str	r5, [sp, #44]	; 0x2c
 800a8c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a8c6:	ab07      	add	r3, sp, #28
 800a8c8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a8cc:	4638      	mov	r0, r7
 800a8ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a8d0:	f002 f9b4 	bl	800cc3c <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a8d4:	6820      	ldr	r0, [r4, #0]
 800a8d6:	f002 f9d3 	bl	800cc80 <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800a8da:	0068      	lsls	r0, r5, #1
 800a8dc:	fbb6 f0f0 	udiv	r0, r6, r0
  if(sdmmc_clk != 0U)
 800a8e0:	b1f8      	cbz	r0, 800a922 <HAL_SD_InitCard+0x96>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800a8e2:	4d90      	ldr	r5, [pc, #576]	; (800ab24 <HAL_SD_InitCard+0x298>)
 800a8e4:	fbb5 f0f0 	udiv	r0, r5, r0
 800a8e8:	3001      	adds	r0, #1
    HAL_Delay(2U);
 800a8ea:	f7fb fa95 	bl	8005e18 <HAL_Delay>
  __IO uint32_t count = 0U;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 800a8f2:	f7fb fa8b 	bl	8005e0c <HAL_GetTick>
 800a8f6:	4607      	mov	r7, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a8f8:	6820      	ldr	r0, [r4, #0]
 800a8fa:	f002 fab7 	bl	800ce6c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8fe:	4605      	mov	r5, r0
 800a900:	b940      	cbnz	r0, 800a914 <HAL_SD_InitCard+0x88>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a902:	6820      	ldr	r0, [r4, #0]
 800a904:	f002 fadc 	bl	800cec0 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a908:	b168      	cbz	r0, 800a926 <HAL_SD_InitCard+0x9a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a90a:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a90c:	6820      	ldr	r0, [r4, #0]
 800a90e:	f002 faad 	bl	800ce6c <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a912:	b150      	cbz	r0, 800a92a <HAL_SD_InitCard+0x9e>
    hsd->State = HAL_SD_STATE_READY;
 800a914:	2501      	movs	r5, #1
 800a916:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a91a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a91c:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 800a91e:	63a0      	str	r0, [r4, #56]	; 0x38
    return HAL_ERROR;
 800a920:	e0b0      	b.n	800aa84 <HAL_SD_InitCard+0x1f8>
    HAL_Delay(2U);
 800a922:	2002      	movs	r0, #2
 800a924:	e7e1      	b.n	800a8ea <HAL_SD_InitCard+0x5e>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a926:	2301      	movs	r3, #1
 800a928:	6423      	str	r3, [r4, #64]	; 0x40
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a92a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d127      	bne.n	800a980 <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a930:	2100      	movs	r1, #0
 800a932:	6820      	ldr	r0, [r4, #0]
 800a934:	f002 fb04 	bl	800cf40 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a938:	b310      	cbz	r0, 800a980 <HAL_SD_InitCard+0xf4>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a93a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800a93e:	e7e9      	b.n	800a914 <HAL_SD_InitCard+0x88>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a940:	4631      	mov	r1, r6
 800a942:	6820      	ldr	r0, [r4, #0]
 800a944:	f002 fafc 	bl	800cf40 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a948:	2800      	cmp	r0, #0
 800a94a:	d1e3      	bne.n	800a914 <HAL_SD_InitCard+0x88>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a94c:	4651      	mov	r1, sl
 800a94e:	6820      	ldr	r0, [r4, #0]
 800a950:	f002 fb0f 	bl	800cf72 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a954:	2800      	cmp	r0, #0
 800a956:	d1f0      	bne.n	800a93a <HAL_SD_InitCard+0xae>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a958:	4631      	mov	r1, r6
 800a95a:	6820      	ldr	r0, [r4, #0]
 800a95c:	f002 f9ae 	bl	800ccbc <SDMMC_GetResponse>
    count++;
 800a960:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a962:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a964:	0fc6      	lsrs	r6, r0, #31
    count++;
 800a966:	3301      	adds	r3, #1
 800a968:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a96a:	9b06      	ldr	r3, [sp, #24]
 800a96c:	4543      	cmp	r3, r8
 800a96e:	d801      	bhi.n	800a974 <HAL_SD_InitCard+0xe8>
 800a970:	2e00      	cmp	r6, #0
 800a972:	d0e5      	beq.n	800a940 <HAL_SD_InitCard+0xb4>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a974:	9b06      	ldr	r3, [sp, #24]
 800a976:	454b      	cmp	r3, r9
 800a978:	d909      	bls.n	800a98e <HAL_SD_InitCard+0x102>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a97a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800a97e:	e7c9      	b.n	800a914 <HAL_SD_InitCard+0x88>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a980:	f64f 78fe 	movw	r8, #65534	; 0xfffe
{
 800a984:	2600      	movs	r6, #0
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a986:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 800ab2c <HAL_SD_InitCard+0x2a0>
 800a98a:	46c1      	mov	r9, r8
 800a98c:	e7ed      	b.n	800a96a <HAL_SD_InitCard+0xde>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a98e:	006b      	lsls	r3, r5, #1
 800a990:	d533      	bpl.n	800a9fa <HAL_SD_InitCard+0x16e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a992:	2301      	movs	r3, #1
 800a994:	6820      	ldr	r0, [r4, #0]
 800a996:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a998:	69a3      	ldr	r3, [r4, #24]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d12d      	bne.n	800a9fa <HAL_SD_InitCard+0x16e>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800a99e:	01ee      	lsls	r6, r5, #7
 800a9a0:	d52b      	bpl.n	800a9fa <HAL_SD_InitCard+0x16e>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a9a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9a6:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800a9a8:	6803      	ldr	r3, [r0, #0]
 800a9aa:	f043 0308 	orr.w	r3, r3, #8
 800a9ae:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800a9b0:	f002 fbda 	bl	800d168 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	d1ad      	bne.n	800a914 <HAL_SD_InitCard+0x88>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800a9b8:	6823      	ldr	r3, [r4, #0]
 800a9ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9bc:	0155      	lsls	r5, r2, #5
 800a9be:	d565      	bpl.n	800aa8c <HAL_SD_InitCard+0x200>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800a9c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a9c4:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800a9c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c8:	02d8      	lsls	r0, r3, #11
 800a9ca:	d5b6      	bpl.n	800a93a <HAL_SD_InitCard+0xae>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	f7ff fea6 	bl	800a71e <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800a9d2:	6822      	ldr	r2, [r4, #0]
 800a9d4:	6813      	ldr	r3, [r2, #0]
 800a9d6:	f043 0304 	orr.w	r3, r3, #4
 800a9da:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9e0:	0191      	lsls	r1, r2, #6
 800a9e2:	d55b      	bpl.n	800aa9c <HAL_SD_InitCard+0x210>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800a9e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a9e8:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800a9ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9ec:	02d2      	lsls	r2, r2, #11
 800a9ee:	d4c4      	bmi.n	800a97a <HAL_SD_InitCard+0xee>
          hsd->Instance->POWER = 0x13U;
 800a9f0:	2213      	movs	r2, #19
 800a9f2:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800a9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f8:	639a      	str	r2, [r3, #56]	; 0x38
  uint16_t sd_rca = 1U;
 800a9fa:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a9fc:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 800a9fe:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800aa02:	f002 f943 	bl	800cc8c <SDMMC_GetPowerState>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d07c      	beq.n	800ab04 <HAL_SD_InitCard+0x278>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aa0c:	2b03      	cmp	r3, #3
 800aa0e:	d018      	beq.n	800aa42 <HAL_SD_InitCard+0x1b6>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800aa10:	6820      	ldr	r0, [r4, #0]
 800aa12:	f002 faf6 	bl	800d002 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d14d      	bne.n	800aab6 <HAL_SD_InitCard+0x22a>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aa1a:	4601      	mov	r1, r0
 800aa1c:	6820      	ldr	r0, [r4, #0]
 800aa1e:	f002 f94d 	bl	800ccbc <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aa22:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aa24:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aa26:	6820      	ldr	r0, [r4, #0]
 800aa28:	f002 f948 	bl	800ccbc <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aa2c:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aa2e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aa30:	6820      	ldr	r0, [r4, #0]
 800aa32:	f002 f943 	bl	800ccbc <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aa36:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aa38:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aa3a:	6820      	ldr	r0, [r4, #0]
 800aa3c:	f002 f93e 	bl	800ccbc <SDMMC_GetResponse>
 800aa40:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aa44:	2b03      	cmp	r3, #3
 800aa46:	d12f      	bne.n	800aaa8 <HAL_SD_InitCard+0x21c>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aa4a:	2b03      	cmp	r3, #3
 800aa4c:	d139      	bne.n	800aac2 <HAL_SD_InitCard+0x236>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800aa4e:	2104      	movs	r1, #4
 800aa50:	6820      	ldr	r0, [r4, #0]
 800aa52:	f002 f933 	bl	800ccbc <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aa56:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800aa58:	0d00      	lsrs	r0, r0, #20
 800aa5a:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f7ff fe5f 	bl	800a720 <HAL_SD_GetCardCSD>
 800aa62:	4605      	mov	r5, r0
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d14a      	bne.n	800aafe <HAL_SD_InitCard+0x272>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800aa68:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	6820      	ldr	r0, [r4, #0]
 800aa6e:	0412      	lsls	r2, r2, #16
 800aa70:	f002 f9e2 	bl	800ce38 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa74:	b9f8      	cbnz	r0, 800aab6 <HAL_SD_InitCard+0x22a>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aa76:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa7a:	6820      	ldr	r0, [r4, #0]
 800aa7c:	f002 f934 	bl	800cce8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d142      	bne.n	800ab0a <HAL_SD_InitCard+0x27e>
}
 800aa84:	4628      	mov	r0, r5
 800aa86:	b018      	add	sp, #96	; 0x60
 800aa88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aa8c:	f7fb f9be 	bl	8005e0c <HAL_GetTick>
 800aa90:	1bc0      	subs	r0, r0, r7
 800aa92:	3001      	adds	r0, #1
 800aa94:	d190      	bne.n	800a9b8 <HAL_SD_InitCard+0x12c>
            return HAL_SD_ERROR_TIMEOUT;
 800aa96:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800aa9a:	e73b      	b.n	800a914 <HAL_SD_InitCard+0x88>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aa9c:	f7fb f9b6 	bl	8005e0c <HAL_GetTick>
 800aaa0:	1bc0      	subs	r0, r0, r7
 800aaa2:	3001      	adds	r0, #1
 800aaa4:	d19a      	bne.n	800a9dc <HAL_SD_InitCard+0x150>
 800aaa6:	e7f6      	b.n	800aa96 <HAL_SD_InitCard+0x20a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800aaa8:	f10d 0116 	add.w	r1, sp, #22
 800aaac:	6820      	ldr	r0, [r4, #0]
 800aaae:	f002 fad5 	bl	800d05c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800aab2:	2800      	cmp	r0, #0
 800aab4:	d0c8      	beq.n	800aa48 <HAL_SD_InitCard+0x1bc>
    hsd->State = HAL_SD_STATE_READY;
 800aab6:	2501      	movs	r5, #1
 800aab8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800aabc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aabe:	4308      	orrs	r0, r1
 800aac0:	e72d      	b.n	800a91e <HAL_SD_InitCard+0x92>
    hsd->SdCard.RelCardAdd = sd_rca;
 800aac2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aac6:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800aac8:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aaca:	0409      	lsls	r1, r1, #16
 800aacc:	f002 faaf 	bl	800d02e <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d1f0      	bne.n	800aab6 <HAL_SD_InitCard+0x22a>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aad4:	4601      	mov	r1, r0
 800aad6:	6820      	ldr	r0, [r4, #0]
 800aad8:	f002 f8f0 	bl	800ccbc <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aadc:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aade:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aae0:	6820      	ldr	r0, [r4, #0]
 800aae2:	f002 f8eb 	bl	800ccbc <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aae6:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aae8:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aaea:	6820      	ldr	r0, [r4, #0]
 800aaec:	f002 f8e6 	bl	800ccbc <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aaf0:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aaf2:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aaf4:	6820      	ldr	r0, [r4, #0]
 800aaf6:	f002 f8e1 	bl	800ccbc <SDMMC_GetResponse>
 800aafa:	66e0      	str	r0, [r4, #108]	; 0x6c
 800aafc:	e7a7      	b.n	800aa4e <HAL_SD_InitCard+0x1c2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aafe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800ab02:	e7d8      	b.n	800aab6 <HAL_SD_InitCard+0x22a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ab04:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800ab08:	e7d5      	b.n	800aab6 <HAL_SD_InitCard+0x22a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab0a:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800ab0c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab0e:	4a06      	ldr	r2, [pc, #24]	; (800ab28 <HAL_SD_InitCard+0x29c>)
 800ab10:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ab12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ab14:	4318      	orrs	r0, r3
 800ab16:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab18:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 800ab1c:	e7b2      	b.n	800aa84 <HAL_SD_InitCard+0x1f8>
 800ab1e:	bf00      	nop
 800ab20:	000c3500 	.word	0x000c3500
 800ab24:	00012110 	.word	0x00012110
 800ab28:	1fe00fff 	.word	0x1fe00fff
 800ab2c:	c1100000 	.word	0xc1100000

0800ab30 <HAL_SD_GetCardStatus>:
{
 800ab30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab34:	4604      	mov	r4, r0
 800ab36:	b096      	sub	sp, #88	; 0x58
 800ab38:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 800ab3a:	f7fb f967 	bl	8005e0c <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ab3e:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800ab40:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ab42:	6820      	ldr	r0, [r4, #0]
 800ab44:	f002 f8ba 	bl	800ccbc <SDMMC_GetResponse>
 800ab48:	0183      	lsls	r3, r0, #6
 800ab4a:	d50b      	bpl.n	800ab64 <HAL_SD_GetCardStatus+0x34>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ab4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab50:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800ab52:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab54:	4a53      	ldr	r2, [pc, #332]	; (800aca4 <HAL_SD_GetCardStatus+0x174>)
 800ab56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ab58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ab5a:	4318      	orrs	r0, r3
 800ab5c:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab5e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800ab62:	e08a      	b.n	800ac7a <HAL_SD_GetCardStatus+0x14a>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ab64:	2140      	movs	r1, #64	; 0x40
 800ab66:	6820      	ldr	r0, [r4, #0]
 800ab68:	f002 f8be 	bl	800cce8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab6c:	b110      	cbz	r0, 800ab74 <HAL_SD_GetCardStatus+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ab6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ab70:	63a3      	str	r3, [r4, #56]	; 0x38
 800ab72:	e7ed      	b.n	800ab50 <HAL_SD_GetCardStatus+0x20>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ab76:	6820      	ldr	r0, [r4, #0]
 800ab78:	0409      	lsls	r1, r1, #16
 800ab7a:	f002 f9e1 	bl	800cf40 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d1f5      	bne.n	800ab6e <HAL_SD_GetCardStatus+0x3e>
  config.DataLength    = 64U;
 800ab82:	2340      	movs	r3, #64	; 0x40
 800ab84:	f04f 35ff 	mov.w	r5, #4294967295
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ab88:	2760      	movs	r7, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ab8a:	9004      	str	r0, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ab8c:	4669      	mov	r1, sp
 800ab8e:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 800ab90:	e9cd 5300 	strd	r5, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ab94:	2302      	movs	r3, #2
 800ab96:	e9cd 7302 	strd	r7, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ab9e:	f002 f890 	bl	800ccc2 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800aba2:	6820      	ldr	r0, [r4, #0]
 800aba4:	f002 fac7 	bl	800d136 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d1e0      	bne.n	800ab6e <HAL_SD_GetCardStatus+0x3e>
  uint32_t *pData = pSDstatus;
 800abac:	af06      	add	r7, sp, #24
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800abae:	6823      	ldr	r3, [r4, #0]
 800abb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abb2:	f412 7f95 	tst.w	r2, #298	; 0x12a
 800abb6:	d00a      	beq.n	800abce <HAL_SD_GetCardStatus+0x9e>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800abb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abba:	0711      	lsls	r1, r2, #28
 800abbc:	d470      	bmi.n	800aca0 <HAL_SD_GetCardStatus+0x170>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800abbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abc0:	0792      	lsls	r2, r2, #30
 800abc2:	d46b      	bmi.n	800ac9c <HAL_SD_GetCardStatus+0x16c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800abc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc6:	069b      	lsls	r3, r3, #26
 800abc8:	d520      	bpl.n	800ac0c <HAL_SD_GetCardStatus+0xdc>
    return HAL_SD_ERROR_RX_OVERRUN;
 800abca:	2020      	movs	r0, #32
 800abcc:	e7c0      	b.n	800ab50 <HAL_SD_GetCardStatus+0x20>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800abce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abd0:	0418      	lsls	r0, r3, #16
 800abd2:	d508      	bpl.n	800abe6 <HAL_SD_GetCardStatus+0xb6>
 800abd4:	f107 0520 	add.w	r5, r7, #32
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800abd8:	6820      	ldr	r0, [r4, #0]
 800abda:	f002 f849 	bl	800cc70 <SDMMC_ReadFIFO>
 800abde:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 800abe2:	42af      	cmp	r7, r5
 800abe4:	d1f8      	bne.n	800abd8 <HAL_SD_GetCardStatus+0xa8>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800abe6:	f7fb f911 	bl	8005e0c <HAL_GetTick>
 800abea:	eba0 0008 	sub.w	r0, r0, r8
 800abee:	3001      	adds	r0, #1
 800abf0:	d1dd      	bne.n	800abae <HAL_SD_GetCardStatus+0x7e>
      return HAL_SD_ERROR_TIMEOUT;
 800abf2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800abf6:	e7ab      	b.n	800ab50 <HAL_SD_GetCardStatus+0x20>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800abf8:	f002 f83a 	bl	800cc70 <SDMMC_ReadFIFO>
 800abfc:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ac00:	f7fb f904 	bl	8005e0c <HAL_GetTick>
 800ac04:	eba0 0008 	sub.w	r0, r0, r8
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d0f2      	beq.n	800abf2 <HAL_SD_GetCardStatus+0xc2>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ac0c:	6820      	ldr	r0, [r4, #0]
 800ac0e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800ac10:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
 800ac14:	d1f0      	bne.n	800abf8 <HAL_SD_GetCardStatus+0xc8>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ac16:	9a06      	ldr	r2, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ac18:	4b23      	ldr	r3, [pc, #140]	; (800aca8 <HAL_SD_GetCardStatus+0x178>)
 800ac1a:	6383      	str	r3, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ac1c:	f3c2 1381 	ubfx	r3, r2, #6, #2
 800ac20:	7033      	strb	r3, [r6, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ac22:	f3c2 1340 	ubfx	r3, r2, #5, #1
 800ac26:	7073      	strb	r3, [r6, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ac28:	0a13      	lsrs	r3, r2, #8
 800ac2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ac2e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	8073      	strh	r3, [r6, #2]
 800ac36:	9b07      	ldr	r3, [sp, #28]
 800ac38:	ba1b      	rev	r3, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ac3a:	6073      	str	r3, [r6, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ac3c:	9b08      	ldr	r3, [sp, #32]
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	7232      	strb	r2, [r6, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ac42:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ac46:	7272      	strb	r2, [r6, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ac48:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ac4c:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ac4e:	72b2      	strb	r2, [r6, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ac50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ac56:	b2d1      	uxtb	r1, r2
 800ac58:	430b      	orrs	r3, r1
 800ac5a:	81b3      	strh	r3, [r6, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ac5c:	f3c2 2385 	ubfx	r3, r2, #10, #6
 800ac60:	73b3      	strb	r3, [r6, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ac62:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800ac66:	73f3      	strb	r3, [r6, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ac68:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ac6c:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ac70:	7433      	strb	r3, [r6, #16]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ac72:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ac76:	7472      	strb	r2, [r6, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ac78:	74b3      	strb	r3, [r6, #18]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ac7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac7e:	6820      	ldr	r0, [r4, #0]
 800ac80:	f002 f832 	bl	800cce8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac84:	b130      	cbz	r0, 800ac94 <HAL_SD_GetCardStatus+0x164>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac86:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800ac88:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac8a:	4a06      	ldr	r2, [pc, #24]	; (800aca4 <HAL_SD_GetCardStatus+0x174>)
 800ac8c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ac8e:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ac90:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
}
 800ac94:	4628      	mov	r0, r5
 800ac96:	b016      	add	sp, #88	; 0x58
 800ac98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac9c:	2002      	movs	r0, #2
 800ac9e:	e757      	b.n	800ab50 <HAL_SD_GetCardStatus+0x20>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800aca0:	2008      	movs	r0, #8
 800aca2:	e755      	b.n	800ab50 <HAL_SD_GetCardStatus+0x20>
 800aca4:	1fe00fff 	.word	0x1fe00fff
 800aca8:	18000f3a 	.word	0x18000f3a

0800acac <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800acac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800acae:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800acb0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800acb2:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800acb4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800acb6:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800acb8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800acba:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800acbc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800acbe:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800acc0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800acc2:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800acc4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800acc6:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800acc8:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 800acca:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800accc:	61cb      	str	r3, [r1, #28]
}
 800acce:	4770      	bx	lr

0800acd0 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 800acd0:	2303      	movs	r3, #3
{
 800acd2:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800acd4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 800acd8:	b08a      	sub	sp, #40	; 0x28
  if(hsd->SdCard.CardType != CARD_SECURED)
 800acda:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 800acdc:	4604      	mov	r4, r0
 800acde:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ace0:	2b03      	cmp	r3, #3
 800ace2:	d002      	beq.n	800acea <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ace4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800ace8:	d103      	bne.n	800acf2 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800acea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800acec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acf0:	e064      	b.n	800adbc <HAL_SD_ConfigWideBusOperation+0xec>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800acf2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800acf6:	6800      	ldr	r0, [r0, #0]
 800acf8:	d13b      	bne.n	800ad72 <HAL_SD_ConfigWideBusOperation+0xa2>
  uint32_t scr[2U] = {0UL, 0UL};
 800acfa:	2100      	movs	r1, #0
 800acfc:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ad00:	f001 ffdc 	bl	800ccbc <SDMMC_GetResponse>
 800ad04:	0180      	lsls	r0, r0, #6
 800ad06:	d42e      	bmi.n	800ad66 <HAL_SD_ConfigWideBusOperation+0x96>
  errorstate = SD_FindSCR(hsd, scr);
 800ad08:	a904      	add	r1, sp, #16
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f7ff fbd2 	bl	800a4b4 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad10:	b960      	cbnz	r0, 800ad2c <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ad12:	9b05      	ldr	r3, [sp, #20]
 800ad14:	0359      	lsls	r1, r3, #13
 800ad16:	d529      	bpl.n	800ad6c <HAL_SD_ConfigWideBusOperation+0x9c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ad1a:	6820      	ldr	r0, [r4, #0]
 800ad1c:	0409      	lsls	r1, r1, #16
 800ad1e:	f002 f90f 	bl	800cf40 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad22:	b918      	cbnz	r0, 800ad2c <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ad24:	2102      	movs	r1, #2
 800ad26:	6820      	ldr	r0, [r4, #0]
 800ad28:	f002 f939 	bl	800cf9e <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800ad2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ad2e:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 800ad30:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ad32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ad34:	6826      	ldr	r6, [r4, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d042      	beq.n	800adc0 <HAL_SD_ConfigWideBusOperation+0xf0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad3a:	4b32      	ldr	r3, [pc, #200]	; (800ae04 <HAL_SD_ConfigWideBusOperation+0x134>)
    status = HAL_ERROR;
 800ad3c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad3e:	63b3      	str	r3, [r6, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ad40:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad44:	6820      	ldr	r0, [r4, #0]
 800ad46:	f001 ffcf 	bl	800cce8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad4a:	b130      	cbz	r0, 800ad5a <HAL_SD_ConfigWideBusOperation+0x8a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad4c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800ad4e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad50:	4a2c      	ldr	r2, [pc, #176]	; (800ae04 <HAL_SD_ConfigWideBusOperation+0x134>)
 800ad52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ad54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ad56:	4318      	orrs	r0, r3
 800ad58:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 800ad5a:	2301      	movs	r3, #1
}
 800ad5c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800ad5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800ad62:	b00a      	add	sp, #40	; 0x28
 800ad64:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ad66:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ad6a:	e7df      	b.n	800ad2c <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad6c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800ad70:	e7dc      	b.n	800ad2c <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ad72:	bb01      	cbnz	r1, 800adb6 <HAL_SD_ConfigWideBusOperation+0xe6>
  uint32_t scr[2U] = {0UL, 0UL};
 800ad74:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ad78:	f001 ffa0 	bl	800ccbc <SDMMC_GetResponse>
 800ad7c:	0182      	lsls	r2, r0, #6
 800ad7e:	d414      	bmi.n	800adaa <HAL_SD_ConfigWideBusOperation+0xda>
  errorstate = SD_FindSCR(hsd, scr);
 800ad80:	a904      	add	r1, sp, #16
 800ad82:	4620      	mov	r0, r4
 800ad84:	f7ff fb96 	bl	800a4b4 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad88:	b960      	cbnz	r0, 800ada4 <HAL_SD_ConfigWideBusOperation+0xd4>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ad8a:	9b05      	ldr	r3, [sp, #20]
 800ad8c:	03db      	lsls	r3, r3, #15
 800ad8e:	d50f      	bpl.n	800adb0 <HAL_SD_ConfigWideBusOperation+0xe0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ad92:	6820      	ldr	r0, [r4, #0]
 800ad94:	0409      	lsls	r1, r1, #16
 800ad96:	f002 f8d3 	bl	800cf40 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad9a:	b918      	cbnz	r0, 800ada4 <HAL_SD_ConfigWideBusOperation+0xd4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ad9c:	4601      	mov	r1, r0
 800ad9e:	6820      	ldr	r0, [r4, #0]
 800ada0:	f002 f8fd 	bl	800cf9e <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800ada4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ada6:	4308      	orrs	r0, r1
 800ada8:	e7c2      	b.n	800ad30 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800adaa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800adae:	e7f9      	b.n	800ada4 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800adb0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800adb4:	e7f6      	b.n	800ada4 <HAL_SD_ConfigWideBusOperation+0xd4>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800adb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800adb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800adbc:	63a3      	str	r3, [r4, #56]	; 0x38
 800adbe:	e7b8      	b.n	800ad32 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800adc0:	6863      	ldr	r3, [r4, #4]
 800adc2:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800adc4:	68a3      	ldr	r3, [r4, #8]
    Init.BusWide             = WideMode;
 800adc6:	e9cd 3505 	strd	r3, r5, [sp, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800adca:	6923      	ldr	r3, [r4, #16]
 800adcc:	9307      	str	r3, [sp, #28]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800adce:	6963      	ldr	r3, [r4, #20]
 800add0:	2b03      	cmp	r3, #3
 800add2:	d90c      	bls.n	800adee <HAL_SD_ConfigWideBusOperation+0x11e>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800add4:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800add6:	ab0a      	add	r3, sp, #40	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 800add8:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 800adda:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800adde:	ab04      	add	r3, sp, #16
 800ade0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ade4:	4630      	mov	r0, r6
 800ade6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ade8:	f001 ff28 	bl	800cc3c <SDMMC_Init>
 800adec:	e7a8      	b.n	800ad40 <HAL_SD_ConfigWideBusOperation+0x70>
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800adee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800adf0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800adf4:	d0ee      	beq.n	800add4 <HAL_SD_ConfigWideBusOperation+0x104>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800adf6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800adfa:	bf0c      	ite	eq
 800adfc:	2302      	moveq	r3, #2
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800adfe:	2304      	movne	r3, #4
 800ae00:	e7e8      	b.n	800add4 <HAL_SD_ConfigWideBusOperation+0x104>
 800ae02:	bf00      	nop
 800ae04:	1fe00fff 	.word	0x1fe00fff

0800ae08 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae08:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 800ae0a:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae0c:	0409      	lsls	r1, r1, #16
{
 800ae0e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae10:	6800      	ldr	r0, [r0, #0]
 800ae12:	f002 f977 	bl	800d104 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae16:	4601      	mov	r1, r0
 800ae18:	b928      	cbnz	r0, 800ae26 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ae1a:	6820      	ldr	r0, [r4, #0]
 800ae1c:	f001 ff4e 	bl	800ccbc <SDMMC_GetResponse>
}
 800ae20:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800ae24:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 800ae26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 800ae28:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 800ae2a:	4319      	orrs	r1, r3
 800ae2c:	63a1      	str	r1, [r4, #56]	; 0x38
 800ae2e:	e7f7      	b.n	800ae20 <HAL_SD_GetCardState+0x18>

0800ae30 <HAL_SD_Init>:
{
 800ae30:	b570      	push	{r4, r5, r6, lr}
  if(hsd == NULL)
 800ae32:	4604      	mov	r4, r0
{
 800ae34:	b086      	sub	sp, #24
  if(hsd == NULL)
 800ae36:	b918      	cbnz	r0, 800ae40 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 800ae38:	2501      	movs	r5, #1
}
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	b006      	add	sp, #24
 800ae3e:	bd70      	pop	{r4, r5, r6, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 800ae40:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800ae44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ae48:	b93b      	cbnz	r3, 800ae5a <HAL_SD_Init+0x2a>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800ae4a:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 800ae4c:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800ae4e:	b90b      	cbnz	r3, 800ae54 <HAL_SD_Init+0x24>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800ae50:	2302      	movs	r3, #2
 800ae52:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 800ae54:	4620      	mov	r0, r4
 800ae56:	f7f8 fb1b 	bl	8003490 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800ae5a:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ae5c:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800ae5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ae62:	f7ff fd13 	bl	800a88c <HAL_SD_InitCard>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d1e6      	bne.n	800ae38 <HAL_SD_Init+0x8>
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ae6a:	a901      	add	r1, sp, #4
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f7ff fe5f 	bl	800ab30 <HAL_SD_GetCardStatus>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d1e0      	bne.n	800ae38 <HAL_SD_Init+0x8>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ae76:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 800ae78:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ae7c:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ae7e:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800ae82:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ae84:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ae86:	d11d      	bne.n	800aec4 <HAL_SD_Init+0x94>
 800ae88:	b902      	cbnz	r2, 800ae8c <HAL_SD_Init+0x5c>
 800ae8a:	b1c3      	cbz	r3, 800aebe <HAL_SD_Init+0x8e>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ae8c:	f44f 7300 	mov.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800ae90:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800ae92:	68e1      	ldr	r1, [r4, #12]
 800ae94:	4620      	mov	r0, r4
 800ae96:	f7ff ff1b 	bl	800acd0 <HAL_SD_ConfigWideBusOperation>
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d1cb      	bne.n	800ae38 <HAL_SD_Init+0x8>
  tickstart = HAL_GetTick();
 800aea0:	f7fa ffb4 	bl	8005e0c <HAL_GetTick>
 800aea4:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800aea6:	4620      	mov	r0, r4
 800aea8:	f7ff ffae 	bl	800ae08 <HAL_SD_GetCardState>
 800aeac:	2804      	cmp	r0, #4
 800aeae:	d10b      	bne.n	800aec8 <HAL_SD_Init+0x98>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800aeb4:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800aebc:	e7bd      	b.n	800ae3a <HAL_SD_Init+0xa>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800aebe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aec2:	e7e5      	b.n	800ae90 <HAL_SD_Init+0x60>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800aec4:	65e0      	str	r0, [r4, #92]	; 0x5c
 800aec6:	e7e4      	b.n	800ae92 <HAL_SD_Init+0x62>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800aec8:	f7fa ffa0 	bl	8005e0c <HAL_GetTick>
 800aecc:	1b80      	subs	r0, r0, r6
 800aece:	3001      	adds	r0, #1
 800aed0:	d1e9      	bne.n	800aea6 <HAL_SD_Init+0x76>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800aed2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
      return HAL_TIMEOUT;
 800aed6:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800aed8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800aeda:	2301      	movs	r3, #1
 800aedc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 800aee0:	e7ab      	b.n	800ae3a <HAL_SD_Init+0xa>

0800aee2 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800aee2:	4770      	bx	lr

0800aee4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800aee4:	4770      	bx	lr

0800aee6 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800aee6:	4770      	bx	lr

0800aee8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 800aee8:	4770      	bx	lr
	...

0800aeec <HAL_SD_IRQHandler>:
{
 800aeec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t context = hsd->Context;
 800aeee:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 800aef0:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800aef2:	6800      	ldr	r0, [r0, #0]
 800aef4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800aef6:	041b      	lsls	r3, r3, #16
 800aef8:	d520      	bpl.n	800af3c <HAL_SD_IRQHandler+0x50>
 800aefa:	072f      	lsls	r7, r5, #28
 800aefc:	d51e      	bpl.n	800af3c <HAL_SD_IRQHandler+0x50>
  if (hsd->RxXferSize >= 32U)
 800aefe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800af00:	2b1f      	cmp	r3, #31
 800af02:	d919      	bls.n	800af38 <HAL_SD_IRQHandler+0x4c>
  tmp = hsd->pRxBuffPtr;
 800af04:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af06:	1d35      	adds	r5, r6, #4
 800af08:	f106 0724 	add.w	r7, r6, #36	; 0x24
      data = SDMMC_ReadFIFO(hsd->Instance);
 800af0c:	6820      	ldr	r0, [r4, #0]
 800af0e:	3504      	adds	r5, #4
 800af10:	f001 feae 	bl	800cc70 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800af14:	f805 0c08 	strb.w	r0, [r5, #-8]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800af18:	0a03      	lsrs	r3, r0, #8
 800af1a:	f805 3c07 	strb.w	r3, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800af1e:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800af20:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800af22:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800af26:	f805 0c05 	strb.w	r0, [r5, #-5]
    for(count = 0U; count < 8U; count++)
 800af2a:	42bd      	cmp	r5, r7
 800af2c:	d1ee      	bne.n	800af0c <HAL_SD_IRQHandler+0x20>
    hsd->RxXferSize -= 32U;
 800af2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hsd->pRxBuffPtr = tmp;
 800af30:	3620      	adds	r6, #32
    hsd->RxXferSize -= 32U;
 800af32:	3b20      	subs	r3, #32
    hsd->pRxBuffPtr = tmp;
 800af34:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800af36:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800af38:	b003      	add	sp, #12
 800af3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800af3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800af3e:	05de      	lsls	r6, r3, #23
 800af40:	d553      	bpl.n	800afea <HAL_SD_IRQHandler+0xfe>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800af42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af46:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800af48:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800af4a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800af4e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800af52:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800af54:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800af56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af5a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800af5c:	68c3      	ldr	r3, [r0, #12]
 800af5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af62:	60c3      	str	r3, [r0, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800af64:	f015 0308 	ands.w	r3, r5, #8
 800af68:	d01f      	beq.n	800afaa <HAL_SD_IRQHandler+0xbe>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800af6a:	f015 0f22 	tst.w	r5, #34	; 0x22
 800af6e:	d008      	beq.n	800af82 <HAL_SD_IRQHandler+0x96>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800af70:	f001 ff38 	bl	800cde4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800af74:	b128      	cbz	r0, 800af82 <HAL_SD_IRQHandler+0x96>
          hsd->ErrorCode |= errorstate;
 800af76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800af78:	4318      	orrs	r0, r3
 800af7a:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800af7c:	4620      	mov	r0, r4
 800af7e:	f7ff fbcd 	bl	800a71c <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800af82:	6823      	ldr	r3, [r4, #0]
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800af84:	07a9      	lsls	r1, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800af86:	4a69      	ldr	r2, [pc, #420]	; (800b12c <HAL_SD_IRQHandler+0x240>)
 800af88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800af8a:	f04f 0301 	mov.w	r3, #1
 800af8e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800af92:	f04f 0300 	mov.w	r3, #0
 800af96:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800af98:	d003      	beq.n	800afa2 <HAL_SD_IRQHandler+0xb6>
        HAL_SD_RxCpltCallback(hsd);
 800af9a:	4620      	mov	r0, r4
 800af9c:	f002 fe02 	bl	800dba4 <HAL_SD_RxCpltCallback>
 800afa0:	e7ca      	b.n	800af38 <HAL_SD_IRQHandler+0x4c>
        HAL_SD_TxCpltCallback(hsd);
 800afa2:	4620      	mov	r0, r4
 800afa4:	f002 fdfa 	bl	800db9c <HAL_SD_TxCpltCallback>
 800afa8:	e7c6      	b.n	800af38 <HAL_SD_IRQHandler+0x4c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800afaa:	062a      	lsls	r2, r5, #24
 800afac:	d5c4      	bpl.n	800af38 <HAL_SD_IRQHandler+0x4c>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800afae:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800afb2:	6283      	str	r3, [r0, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800afb4:	62c3      	str	r3, [r0, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800afb6:	6503      	str	r3, [r0, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800afb8:	d008      	beq.n	800afcc <HAL_SD_IRQHandler+0xe0>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800afba:	f001 ff13 	bl	800cde4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800afbe:	b128      	cbz	r0, 800afcc <HAL_SD_IRQHandler+0xe0>
          hsd->ErrorCode |= errorstate;
 800afc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800afc2:	4318      	orrs	r0, r3
 800afc4:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800afc6:	4620      	mov	r0, r4
 800afc8:	f7ff fba8 	bl	800a71c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800afcc:	2301      	movs	r3, #1
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800afce:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800afd2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800afd6:	f04f 0300 	mov.w	r3, #0
 800afda:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800afdc:	d002      	beq.n	800afe4 <HAL_SD_IRQHandler+0xf8>
        HAL_SD_TxCpltCallback(hsd);
 800afde:	4620      	mov	r0, r4
 800afe0:	f002 fddc 	bl	800db9c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800afe4:	07af      	lsls	r7, r5, #30
 800afe6:	d0a7      	beq.n	800af38 <HAL_SD_IRQHandler+0x4c>
 800afe8:	e7d7      	b.n	800af9a <HAL_SD_IRQHandler+0xae>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800afea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800afec:	045e      	lsls	r6, r3, #17
 800afee:	d527      	bpl.n	800b040 <HAL_SD_IRQHandler+0x154>
 800aff0:	0729      	lsls	r1, r5, #28
 800aff2:	d525      	bpl.n	800b040 <HAL_SD_IRQHandler+0x154>
  if (hsd->TxXferSize >= 32U)
 800aff4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aff6:	2b1f      	cmp	r3, #31
 800aff8:	d99e      	bls.n	800af38 <HAL_SD_IRQHandler+0x4c>
  tmp = hsd->pTxBuffPtr;
 800affa:	6a26      	ldr	r6, [r4, #32]
 800affc:	1d35      	adds	r5, r6, #4
 800affe:	f106 0724 	add.w	r7, r6, #36	; 0x24
      data = (uint32_t)(*tmp);
 800b002:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800b006:	3504      	adds	r5, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b008:	a901      	add	r1, sp, #4
 800b00a:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800b00c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800b00e:	f815 2c07 	ldrb.w	r2, [r5, #-7]
 800b012:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b016:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800b018:	f815 2c06 	ldrb.w	r2, [r5, #-6]
 800b01c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b020:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800b022:	f815 2c05 	ldrb.w	r2, [r5, #-5]
 800b026:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b02a:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b02c:	f001 fe23 	bl	800cc76 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b030:	42af      	cmp	r7, r5
 800b032:	d1e6      	bne.n	800b002 <HAL_SD_IRQHandler+0x116>
    hsd->TxXferSize -= 32U;
 800b034:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsd->pTxBuffPtr = tmp;
 800b036:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800b038:	3b20      	subs	r3, #32
    hsd->pTxBuffPtr = tmp;
 800b03a:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize -= 32U;
 800b03c:	6263      	str	r3, [r4, #36]	; 0x24
 800b03e:	e77b      	b.n	800af38 <HAL_SD_IRQHandler+0x4c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b040:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b042:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800b046:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b048:	d056      	beq.n	800b0f8 <HAL_SD_IRQHandler+0x20c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800b04a:	079a      	lsls	r2, r3, #30
 800b04c:	d503      	bpl.n	800b056 <HAL_SD_IRQHandler+0x16a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b04e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b050:	f043 0302 	orr.w	r3, r3, #2
 800b054:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800b056:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b058:	071b      	lsls	r3, r3, #28
 800b05a:	d503      	bpl.n	800b064 <HAL_SD_IRQHandler+0x178>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b05c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b05e:	f043 0308 	orr.w	r3, r3, #8
 800b062:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800b064:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b066:	069f      	lsls	r7, r3, #26
 800b068:	d503      	bpl.n	800b072 <HAL_SD_IRQHandler+0x186>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b06a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b06c:	f043 0320 	orr.w	r3, r3, #32
 800b070:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800b072:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b074:	06de      	lsls	r6, r3, #27
 800b076:	d503      	bpl.n	800b080 <HAL_SD_IRQHandler+0x194>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b078:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b07a:	f043 0310 	orr.w	r3, r3, #16
 800b07e:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b080:	4b2a      	ldr	r3, [pc, #168]	; (800b12c <HAL_SD_IRQHandler+0x240>)
 800b082:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b084:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800b086:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800b08a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b08c:	68c3      	ldr	r3, [r0, #12]
 800b08e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b092:	60c3      	str	r3, [r0, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800b094:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b096:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b09a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800b09c:	68c3      	ldr	r3, [r0, #12]
 800b09e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0a2:	60c3      	str	r3, [r0, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b0a4:	f001 fe9e 	bl	800cde4 <SDMMC_CmdStopTransfer>
 800b0a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b0aa:	f015 0108 	ands.w	r1, r5, #8
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b0ae:	ea40 0003 	orr.w	r0, r0, r3
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800b0b2:	6823      	ldr	r3, [r4, #0]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b0b4:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800b0b6:	68da      	ldr	r2, [r3, #12]
 800b0b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0bc:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800b0be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0c2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b0c4:	d008      	beq.n	800b0d8 <HAL_SD_IRQHandler+0x1ec>
      hsd->State = HAL_SD_STATE_READY;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f7ff fb23 	bl	800a71c <HAL_SD_ErrorCallback>
 800b0d6:	e72f      	b.n	800af38 <HAL_SD_IRQHandler+0x4c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b0d8:	0628      	lsls	r0, r5, #24
 800b0da:	f57f af2d 	bpl.w	800af38 <HAL_SD_IRQHandler+0x4c>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b0de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b0e0:	2a00      	cmp	r2, #0
 800b0e2:	f43f af29 	beq.w	800af38 <HAL_SD_IRQHandler+0x4c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b0e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0e8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b0ec:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b0ee:	6519      	str	r1, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800b0f6:	e7eb      	b.n	800b0d0 <HAL_SD_IRQHandler+0x1e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800b0f8:	00da      	lsls	r2, r3, #3
 800b0fa:	f57f af1d 	bpl.w	800af38 <HAL_SD_IRQHandler+0x4c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800b0fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b102:	f005 0520 	and.w	r5, r5, #32
 800b106:	6383      	str	r3, [r0, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b108:	6d03      	ldr	r3, [r0, #80]	; 0x50
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800b10a:	4620      	mov	r0, r4
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b10c:	075b      	lsls	r3, r3, #29
 800b10e:	d406      	bmi.n	800b11e <HAL_SD_IRQHandler+0x232>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b110:	b115      	cbz	r5, 800b118 <HAL_SD_IRQHandler+0x22c>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800b112:	f7ff fee9 	bl	800aee8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800b116:	e70f      	b.n	800af38 <HAL_SD_IRQHandler+0x4c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800b118:	f7ff fee4 	bl	800aee4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800b11c:	e70c      	b.n	800af38 <HAL_SD_IRQHandler+0x4c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b11e:	b115      	cbz	r5, 800b126 <HAL_SD_IRQHandler+0x23a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800b120:	f7ff fee1 	bl	800aee6 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800b124:	e708      	b.n	800af38 <HAL_SD_IRQHandler+0x4c>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800b126:	f7ff fedc 	bl	800aee2 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800b12a:	e705      	b.n	800af38 <HAL_SD_IRQHandler+0x4c>
 800b12c:	18000f3a 	.word	0x18000f3a

0800b130 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800b130:	6803      	ldr	r3, [r0, #0]
 800b132:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b134:	699a      	ldr	r2, [r3, #24]
 800b136:	f042 0208 	orr.w	r2, r2, #8
 800b13a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b13c:	699a      	ldr	r2, [r3, #24]
 800b13e:	f042 0210 	orr.w	r2, r2, #16
 800b142:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	f022 0201 	bic.w	r2, r2, #1
 800b14a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b14c:	691a      	ldr	r2, [r3, #16]
 800b14e:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
 800b152:	f022 0203 	bic.w	r2, r2, #3
 800b156:	611a      	str	r2, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b158:	689a      	ldr	r2, [r3, #8]
 800b15a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b15e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b160:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800b164:	2a04      	cmp	r2, #4
 800b166:	d00b      	beq.n	800b180 <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b168:	068a      	lsls	r2, r1, #26
 800b16a:	d509      	bpl.n	800b180 <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b16c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800b170:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b174:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b178:	699a      	ldr	r2, [r3, #24]
 800b17a:	f042 0220 	orr.w	r2, r2, #32
 800b17e:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b180:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800b184:	2a03      	cmp	r2, #3
 800b186:	d00b      	beq.n	800b1a0 <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b188:	064a      	lsls	r2, r1, #25
 800b18a:	d509      	bpl.n	800b1a0 <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b18c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800b190:	f042 0204 	orr.w	r2, r2, #4
 800b194:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b198:	699a      	ldr	r2, [r3, #24]
 800b19a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b19e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b1a0:	058a      	lsls	r2, r1, #22
 800b1a2:	d509      	bpl.n	800b1b8 <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b1a4:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800b1a8:	f042 0201 	orr.w	r2, r2, #1
 800b1ac:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b1b0:	699a      	ldr	r2, [r3, #24]
 800b1b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1b6:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b1b8:	05ca      	lsls	r2, r1, #23
 800b1ba:	d509      	bpl.n	800b1d0 <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b1bc:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800b1c0:	f042 0208 	orr.w	r2, r2, #8
 800b1c4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b1c8:	699a      	ldr	r2, [r3, #24]
 800b1ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1ce:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b1d6:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800b1da:	4770      	bx	lr

0800b1dc <HAL_SPI_Init>:
{
 800b1dc:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800b1de:	4604      	mov	r4, r0
 800b1e0:	b908      	cbnz	r0, 800b1e6 <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 800b1e2:	2001      	movs	r0, #1
}
 800b1e4:	bd70      	pop	{r4, r5, r6, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b1e6:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b1e8:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b1ea:	4940      	ldr	r1, [pc, #256]	; (800b2ec <HAL_SPI_Init+0x110>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b1ec:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b1ee:	428a      	cmp	r2, r1
 800b1f0:	68c3      	ldr	r3, [r0, #12]
 800b1f2:	d009      	beq.n	800b208 <HAL_SPI_Init+0x2c>
 800b1f4:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 800b1f8:	428a      	cmp	r2, r1
 800b1fa:	d005      	beq.n	800b208 <HAL_SPI_Init+0x2c>
 800b1fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b200:	428a      	cmp	r2, r1
 800b202:	d001      	beq.n	800b208 <HAL_SPI_Init+0x2c>
 800b204:	2b0f      	cmp	r3, #15
 800b206:	d8ec      	bhi.n	800b1e2 <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b208:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b20a:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b20c:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800b20e:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 800b210:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b214:	4935      	ldr	r1, [pc, #212]	; (800b2ec <HAL_SPI_Init+0x110>)
 800b216:	428a      	cmp	r2, r1
 800b218:	d066      	beq.n	800b2e8 <HAL_SPI_Init+0x10c>
 800b21a:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 800b21e:	428a      	cmp	r2, r1
 800b220:	d062      	beq.n	800b2e8 <HAL_SPI_Init+0x10c>
 800b222:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b226:	428a      	cmp	r2, r1
 800b228:	d05e      	beq.n	800b2e8 <HAL_SPI_Init+0x10c>
 800b22a:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b22c:	d8d9      	bhi.n	800b1e2 <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800b22e:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800b232:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b236:	b923      	cbnz	r3, 800b242 <HAL_SPI_Init+0x66>
    hspi->Lock = HAL_UNLOCKED;
 800b238:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800b23c:	4620      	mov	r0, r4
 800b23e:	f7f8 f985 	bl	800354c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800b242:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800b244:	6822      	ldr	r2, [r4, #0]
 800b246:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 800b248:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800b24c:	6813      	ldr	r3, [r2, #0]
 800b24e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800b250:	f023 0301 	bic.w	r3, r3, #1
 800b254:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800b256:	69a3      	ldr	r3, [r4, #24]
 800b258:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b25c:	d107      	bne.n	800b26e <HAL_SPI_Init+0x92>
 800b25e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800b262:	d104      	bne.n	800b26e <HAL_SPI_Init+0x92>
 800b264:	b91d      	cbnz	r5, 800b26e <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b266:	6810      	ldr	r0, [r2, #0]
 800b268:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800b26c:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b26e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800b270:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b272:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800b274:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b276:	4330      	orrs	r0, r6
 800b278:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800b27a:	4330      	orrs	r0, r6
 800b27c:	68e6      	ldr	r6, [r4, #12]
 800b27e:	4330      	orrs	r0, r6
 800b280:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800b282:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b284:	4303      	orrs	r3, r0
 800b286:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b288:	4303      	orrs	r3, r0
 800b28a:	6920      	ldr	r0, [r4, #16]
 800b28c:	4303      	orrs	r3, r0
 800b28e:	6960      	ldr	r0, [r4, #20]
 800b290:	4303      	orrs	r3, r0
 800b292:	6a20      	ldr	r0, [r4, #32]
 800b294:	4303      	orrs	r3, r0
 800b296:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b298:	4303      	orrs	r3, r0
 800b29a:	68a0      	ldr	r0, [r4, #8]
 800b29c:	4303      	orrs	r3, r0
 800b29e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b2a0:	4303      	orrs	r3, r0
 800b2a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2a4:	4303      	orrs	r3, r0
 800b2a6:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b2a8:	b959      	cbnz	r1, 800b2c2 <HAL_SPI_Init+0xe6>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b2aa:	6893      	ldr	r3, [r2, #8]
 800b2ac:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800b2b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b2b4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b2b6:	6893      	ldr	r3, [r2, #8]
 800b2b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b2bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b2c0:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b2c2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b2c4:	f023 0301 	bic.w	r3, r3, #1
 800b2c8:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b2ca:	024b      	lsls	r3, r1, #9
 800b2cc:	d505      	bpl.n	800b2da <HAL_SPI_Init+0xfe>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b2ce:	68d3      	ldr	r3, [r2, #12]
 800b2d0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b2d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2d6:	430b      	orrs	r3, r1
 800b2d8:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b2da:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800b2dc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b2de:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b2e2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 800b2e6:	e77d      	b.n	800b1e4 <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b2e8:	2b10      	cmp	r3, #16
 800b2ea:	e79f      	b.n	800b22c <HAL_SPI_Init+0x50>
 800b2ec:	40013000 	.word	0x40013000

0800b2f0 <HAL_SPI_Transmit_DMA>:
{
 800b2f0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 800b2f2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d009      	beq.n	800b312 <HAL_SPI_Transmit_DMA+0x22>
 800b2fe:	2301      	movs	r3, #1
 800b300:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800b304:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d004      	beq.n	800b316 <HAL_SPI_Transmit_DMA+0x26>
    __HAL_UNLOCK(hspi);
 800b30c:	2300      	movs	r3, #0
 800b30e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  __HAL_LOCK(hspi);
 800b312:	2002      	movs	r0, #2
 800b314:	e004      	b.n	800b320 <HAL_SPI_Transmit_DMA+0x30>
  if ((pData == NULL) || (Size == 0UL))
 800b316:	b921      	cbnz	r1, 800b322 <HAL_SPI_Transmit_DMA+0x32>
    __HAL_UNLOCK(hspi);
 800b318:	2300      	movs	r3, #0
    return errorcode;
 800b31a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800b31c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800b320:	bd38      	pop	{r3, r4, r5, pc}
  if ((pData == NULL) || (Size == 0UL))
 800b322:	2a00      	cmp	r2, #0
 800b324:	d0f8      	beq.n	800b318 <HAL_SPI_Transmit_DMA+0x28>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b326:	2303      	movs	r3, #3
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b328:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b32a:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b32e:	2300      	movs	r3, #0
 800b330:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = Size;
 800b334:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800b338:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
  hspi->pRxBuffPtr  = NULL;
 800b33c:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t)0UL;
 800b33e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800b342:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800b346:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b34a:	6883      	ldr	r3, [r0, #8]
 800b34c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b350:	d104      	bne.n	800b35c <HAL_SPI_Transmit_DMA+0x6c>
    SPI_1LINE_TX(hspi);
 800b352:	6802      	ldr	r2, [r0, #0]
 800b354:	6813      	ldr	r3, [r2, #0]
 800b356:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b35a:	6013      	str	r3, [r2, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b35c:	68e2      	ldr	r2, [r4, #12]
 800b35e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b360:	2a0f      	cmp	r2, #15
 800b362:	6983      	ldr	r3, [r0, #24]
 800b364:	d921      	bls.n	800b3aa <HAL_SPI_Transmit_DMA+0xba>
 800b366:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b36a:	d1d5      	bne.n	800b318 <HAL_SPI_Transmit_DMA+0x28>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b36c:	4b2f      	ldr	r3, [pc, #188]	; (800b42c <HAL_SPI_Transmit_DMA+0x13c>)
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b36e:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b370:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b372:	4b2f      	ldr	r3, [pc, #188]	; (800b430 <HAL_SPI_Transmit_DMA+0x140>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800b374:	3220      	adds	r2, #32
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b376:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b378:	4b2e      	ldr	r3, [pc, #184]	; (800b434 <HAL_SPI_Transmit_DMA+0x144>)
 800b37a:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 800b37c:	2300      	movs	r3, #0
 800b37e:	6503      	str	r3, [r0, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b380:	f852 3c18 	ldr.w	r3, [r2, #-24]
 800b384:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b388:	f842 3c18 	str.w	r3, [r2, #-24]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800b38c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b390:	f7fb ff4c 	bl	800722c <HAL_DMA_Start_IT>
 800b394:	b318      	cbz	r0, 800b3de <HAL_SPI_Transmit_DMA+0xee>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b396:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b39a:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b39c:	f043 0310 	orr.w	r3, r3, #16
 800b3a0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b3a4:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
    return errorcode;
 800b3a8:	e7ba      	b.n	800b320 <HAL_SPI_Transmit_DMA+0x30>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b3aa:	2a07      	cmp	r2, #7
 800b3ac:	d90a      	bls.n	800b3c4 <HAL_SPI_Transmit_DMA+0xd4>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b3ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3b2:	d0db      	beq.n	800b36c <HAL_SPI_Transmit_DMA+0x7c>
 800b3b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3b8:	d1ae      	bne.n	800b318 <HAL_SPI_Transmit_DMA+0x28>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b3ba:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b3be:	3301      	adds	r3, #1
 800b3c0:	085b      	lsrs	r3, r3, #1
 800b3c2:	e009      	b.n	800b3d8 <HAL_SPI_Transmit_DMA+0xe8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b3c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3c8:	d0f7      	beq.n	800b3ba <HAL_SPI_Transmit_DMA+0xca>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b3ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3ce:	d1cd      	bne.n	800b36c <HAL_SPI_Transmit_DMA+0x7c>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b3d0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b3d4:	3303      	adds	r3, #3
 800b3d6:	089b      	lsrs	r3, r3, #2
 800b3d8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800b3dc:	e7c6      	b.n	800b36c <HAL_SPI_Transmit_DMA+0x7c>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b3de:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b3e0:	6823      	ldr	r3, [r4, #0]
 800b3e2:	69d2      	ldr	r2, [r2, #28]
 800b3e4:	4914      	ldr	r1, [pc, #80]	; (800b438 <HAL_SPI_Transmit_DMA+0x148>)
 800b3e6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800b3ea:	d11a      	bne.n	800b422 <HAL_SPI_Transmit_DMA+0x132>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b3ec:	685d      	ldr	r5, [r3, #4]
 800b3ee:	400d      	ands	r5, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b3f0:	605d      	str	r5, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b3f2:	689a      	ldr	r2, [r3, #8]
 800b3f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3f8:	609a      	str	r2, [r3, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800b3fa:	691a      	ldr	r2, [r3, #16]
 800b3fc:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 800b400:	611a      	str	r2, [r3, #16]
  __HAL_SPI_ENABLE(hspi);
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	f042 0201 	orr.w	r2, r2, #1
 800b408:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b40a:	6862      	ldr	r2, [r4, #4]
 800b40c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800b410:	d103      	bne.n	800b41a <HAL_SPI_Transmit_DMA+0x12a>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b418:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800b41a:	2300      	movs	r3, #0
 800b41c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800b420:	e77e      	b.n	800b320 <HAL_SPI_Transmit_DMA+0x30>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b422:	685a      	ldr	r2, [r3, #4]
 800b424:	400a      	ands	r2, r1
 800b426:	4315      	orrs	r5, r2
 800b428:	e7e2      	b.n	800b3f0 <HAL_SPI_Transmit_DMA+0x100>
 800b42a:	bf00      	nop
 800b42c:	0800b80b 	.word	0x0800b80b
 800b430:	0800b78f 	.word	0x0800b78f
 800b434:	0800b82f 	.word	0x0800b82f
 800b438:	ffff0000 	.word	0xffff0000

0800b43c <HAL_SPI_TransmitReceive_DMA>:
{
 800b43c:	b570      	push	{r4, r5, r6, lr}
 800b43e:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800b440:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 800b444:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800b446:	2b01      	cmp	r3, #1
 800b448:	d012      	beq.n	800b470 <HAL_SPI_TransmitReceive_DMA+0x34>
 800b44a:	2301      	movs	r3, #1
 800b44c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tmp_state   = hspi->State;
 800b450:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 800b454:	6840      	ldr	r0, [r0, #4]
  tmp_state   = hspi->State;
 800b456:	b2db      	uxtb	r3, r3
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 800b458:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800b45c:	d103      	bne.n	800b466 <HAL_SPI_TransmitReceive_DMA+0x2a>
 800b45e:	68a0      	ldr	r0, [r4, #8]
 800b460:	b908      	cbnz	r0, 800b466 <HAL_SPI_TransmitReceive_DMA+0x2a>
 800b462:	2b04      	cmp	r3, #4
 800b464:	d006      	beq.n	800b474 <HAL_SPI_TransmitReceive_DMA+0x38>
 800b466:	2b01      	cmp	r3, #1
 800b468:	d004      	beq.n	800b474 <HAL_SPI_TransmitReceive_DMA+0x38>
    __HAL_UNLOCK(hspi);
 800b46a:	2300      	movs	r3, #0
 800b46c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800b470:	2002      	movs	r0, #2
 800b472:	e004      	b.n	800b47e <HAL_SPI_TransmitReceive_DMA+0x42>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b474:	b921      	cbnz	r1, 800b480 <HAL_SPI_TransmitReceive_DMA+0x44>
    __HAL_UNLOCK(hspi);
 800b476:	2300      	movs	r3, #0
    return errorcode;
 800b478:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800b47a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800b47e:	bd70      	pop	{r4, r5, r6, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b480:	2a00      	cmp	r2, #0
 800b482:	d0f8      	beq.n	800b476 <HAL_SPI_TransmitReceive_DMA+0x3a>
 800b484:	2d00      	cmp	r5, #0
 800b486:	d0f6      	beq.n	800b476 <HAL_SPI_TransmitReceive_DMA+0x3a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b488:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800b48c:	2b04      	cmp	r3, #4
 800b48e:	d002      	beq.n	800b496 <HAL_SPI_TransmitReceive_DMA+0x5a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b490:	2305      	movs	r3, #5
 800b492:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b496:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b498:	65e1      	str	r1, [r4, #92]	; 0x5c
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b49a:	6821      	ldr	r1, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b49c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b4a0:	68e6      	ldr	r6, [r4, #12]
  hspi->TxXferCount = Size;
 800b4a2:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->RxXferCount = Size;
 800b4a6:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b4aa:	2e0f      	cmp	r6, #15
 800b4ac:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  hspi->TxXferSize  = Size;
 800b4ae:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b4b2:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b4b4:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->TxISR       = NULL;
 800b4b8:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b4bc:	688b      	ldr	r3, [r1, #8]
 800b4be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b4c2:	608b      	str	r3, [r1, #8]
 800b4c4:	6983      	ldr	r3, [r0, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b4c6:	d924      	bls.n	800b512 <HAL_SPI_TransmitReceive_DMA+0xd6>
 800b4c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4cc:	d1d3      	bne.n	800b476 <HAL_SPI_TransmitReceive_DMA+0x3a>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b4ce:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800b4d2:	3130      	adds	r1, #48	; 0x30
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b4d4:	2b04      	cmp	r3, #4
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b4d6:	bf0b      	itete	eq
 800b4d8:	4b48      	ldreq	r3, [pc, #288]	; (800b5fc <HAL_SPI_TransmitReceive_DMA+0x1c0>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b4da:	4b49      	ldrne	r3, [pc, #292]	; (800b600 <HAL_SPI_TransmitReceive_DMA+0x1c4>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b4dc:	6403      	streq	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b4de:	6403      	strne	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b4e0:	bf0c      	ite	eq
 800b4e2:	4b48      	ldreq	r3, [pc, #288]	; (800b604 <HAL_SPI_TransmitReceive_DMA+0x1c8>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b4e4:	4b48      	ldrne	r3, [pc, #288]	; (800b608 <HAL_SPI_TransmitReceive_DMA+0x1cc>)
 800b4e6:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b4e8:	4b48      	ldr	r3, [pc, #288]	; (800b60c <HAL_SPI_TransmitReceive_DMA+0x1d0>)
 800b4ea:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800b4f0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b4f4:	f7fb fe9a 	bl	800722c <HAL_DMA_Start_IT>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d045      	beq.n	800b58a <HAL_SPI_TransmitReceive_DMA+0x14e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b4fe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b502:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b504:	f043 0310 	orr.w	r3, r3, #16
 800b508:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b50c:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
 800b510:	e7b5      	b.n	800b47e <HAL_SPI_TransmitReceive_DMA+0x42>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b512:	2e07      	cmp	r6, #7
 800b514:	d914      	bls.n	800b540 <HAL_SPI_TransmitReceive_DMA+0x104>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b51a:	d002      	beq.n	800b522 <HAL_SPI_TransmitReceive_DMA+0xe6>
 800b51c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b520:	d1a9      	bne.n	800b476 <HAL_SPI_TransmitReceive_DMA+0x3a>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b522:	6fa6      	ldr	r6, [r4, #120]	; 0x78
 800b524:	69b6      	ldr	r6, [r6, #24]
 800b526:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 800b52a:	d105      	bne.n	800b538 <HAL_SPI_TransmitReceive_DMA+0xfc>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b52c:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800b530:	3601      	adds	r6, #1
 800b532:	0876      	lsrs	r6, r6, #1
 800b534:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b53c:	d1c7      	bne.n	800b4ce <HAL_SPI_TransmitReceive_DMA+0x92>
 800b53e:	e00d      	b.n	800b55c <HAL_SPI_TransmitReceive_DMA+0x120>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b540:	6fa6      	ldr	r6, [r4, #120]	; 0x78
 800b542:	69b6      	ldr	r6, [r6, #24]
 800b544:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800b548:	d10d      	bne.n	800b566 <HAL_SPI_TransmitReceive_DMA+0x12a>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b54a:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800b54e:	3601      	adds	r6, #1
 800b550:	0876      	lsrs	r6, r6, #1
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b552:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b55a:	d10c      	bne.n	800b576 <HAL_SPI_TransmitReceive_DMA+0x13a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b55c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b560:	3301      	adds	r3, #1
 800b562:	085b      	lsrs	r3, r3, #1
 800b564:	e00e      	b.n	800b584 <HAL_SPI_TransmitReceive_DMA+0x148>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b566:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 800b56a:	d1f4      	bne.n	800b556 <HAL_SPI_TransmitReceive_DMA+0x11a>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b56c:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800b570:	3603      	adds	r6, #3
 800b572:	08b6      	lsrs	r6, r6, #2
 800b574:	e7ed      	b.n	800b552 <HAL_SPI_TransmitReceive_DMA+0x116>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b57a:	d1a8      	bne.n	800b4ce <HAL_SPI_TransmitReceive_DMA+0x92>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b57c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b580:	3303      	adds	r3, #3
 800b582:	089b      	lsrs	r3, r3, #2
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b584:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800b588:	e7a1      	b.n	800b4ce <HAL_SPI_TransmitReceive_DMA+0x92>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b58a:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b58c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b58e:	6891      	ldr	r1, [r2, #8]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800b590:	3220      	adds	r2, #32
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b592:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800b596:	f842 1c18 	str.w	r1, [r2, #-24]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800b59a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b59c:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b5a0:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800b5a4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b5a8:	f7fb fe40 	bl	800722c <HAL_DMA_Start_IT>
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d1a6      	bne.n	800b4fe <HAL_SPI_TransmitReceive_DMA+0xc2>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b5b0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b5b2:	6822      	ldr	r2, [r4, #0]
 800b5b4:	69db      	ldr	r3, [r3, #28]
 800b5b6:	4916      	ldr	r1, [pc, #88]	; (800b610 <HAL_SPI_TransmitReceive_DMA+0x1d4>)
 800b5b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5bc:	d11a      	bne.n	800b5f4 <HAL_SPI_TransmitReceive_DMA+0x1b8>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b5be:	6855      	ldr	r5, [r2, #4]
 800b5c0:	400d      	ands	r5, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b5c2:	6055      	str	r5, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b5c4:	6893      	ldr	r3, [r2, #8]
 800b5c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5ca:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800b5cc:	6913      	ldr	r3, [r2, #16]
 800b5ce:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800b5d2:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800b5d4:	6813      	ldr	r3, [r2, #0]
 800b5d6:	f043 0301 	orr.w	r3, r3, #1
 800b5da:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b5dc:	6863      	ldr	r3, [r4, #4]
 800b5de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5e2:	d103      	bne.n	800b5ec <HAL_SPI_TransmitReceive_DMA+0x1b0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b5e4:	6813      	ldr	r3, [r2, #0]
 800b5e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b5ea:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 800b5f2:	e744      	b.n	800b47e <HAL_SPI_TransmitReceive_DMA+0x42>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b5f4:	6853      	ldr	r3, [r2, #4]
 800b5f6:	400b      	ands	r3, r1
 800b5f8:	431d      	orrs	r5, r3
 800b5fa:	e7e2      	b.n	800b5c2 <HAL_SPI_TransmitReceive_DMA+0x186>
 800b5fc:	0800b817 	.word	0x0800b817
 800b600:	0800b823 	.word	0x0800b823
 800b604:	0800b7b7 	.word	0x0800b7b7
 800b608:	0800b7e1 	.word	0x0800b7e1
 800b60c:	0800b82f 	.word	0x0800b82f
 800b610:	ffff0000 	.word	0xffff0000

0800b614 <HAL_SPI_Receive_DMA>:
{
 800b614:	b570      	push	{r4, r5, r6, lr}
 800b616:	4615      	mov	r5, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b618:	6882      	ldr	r2, [r0, #8]
{
 800b61a:	4604      	mov	r4, r0
 800b61c:	460e      	mov	r6, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b61e:	b962      	cbnz	r2, 800b63a <HAL_SPI_Receive_DMA+0x26>
 800b620:	6843      	ldr	r3, [r0, #4]
 800b622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b626:	d108      	bne.n	800b63a <HAL_SPI_Receive_DMA+0x26>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b628:	2304      	movs	r3, #4
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800b62a:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b62c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800b630:	462b      	mov	r3, r5
}
 800b632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800b636:	f7ff bf01 	b.w	800b43c <HAL_SPI_TransmitReceive_DMA>
  __HAL_LOCK(hspi);
 800b63a:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d009      	beq.n	800b656 <HAL_SPI_Receive_DMA+0x42>
 800b642:	2301      	movs	r3, #1
 800b644:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800b648:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d004      	beq.n	800b65a <HAL_SPI_Receive_DMA+0x46>
    __HAL_UNLOCK(hspi);
 800b650:	2300      	movs	r3, #0
 800b652:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800b656:	2002      	movs	r0, #2
 800b658:	e004      	b.n	800b664 <HAL_SPI_Receive_DMA+0x50>
  if ((pData == NULL) || (Size == 0UL))
 800b65a:	b926      	cbnz	r6, 800b666 <HAL_SPI_Receive_DMA+0x52>
    __HAL_UNLOCK(hspi);
 800b65c:	2300      	movs	r3, #0
    return errorcode;
 800b65e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800b660:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800b664:	bd70      	pop	{r4, r5, r6, pc}
  if ((pData == NULL) || (Size == 0UL))
 800b666:	2d00      	cmp	r5, #0
 800b668:	d0f8      	beq.n	800b65c <HAL_SPI_Receive_DMA+0x48>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b66a:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b66c:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b670:	6666      	str	r6, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b672:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b676:	f04f 0300 	mov.w	r3, #0
  hspi->RxXferSize  = Size;
 800b67a:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b67e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b682:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 800b686:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b68a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 800b68e:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b692:	d104      	bne.n	800b69e <HAL_SPI_Receive_DMA+0x8a>
    SPI_1LINE_RX(hspi);
 800b694:	6822      	ldr	r2, [r4, #0]
 800b696:	6813      	ldr	r3, [r2, #0]
 800b698:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b69c:	6013      	str	r3, [r2, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b69e:	68e3      	ldr	r3, [r4, #12]
 800b6a0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b6a2:	2b0f      	cmp	r3, #15
 800b6a4:	d90b      	bls.n	800b6be <HAL_SPI_Receive_DMA+0xaa>
 800b6a6:	6982      	ldr	r2, [r0, #24]
 800b6a8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800b6ac:	d1d6      	bne.n	800b65c <HAL_SPI_Receive_DMA+0x48>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b6ae:	6982      	ldr	r2, [r0, #24]
 800b6b0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b6b4:	d005      	beq.n	800b6c2 <HAL_SPI_Receive_DMA+0xae>
 800b6b6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800b6ba:	d1cf      	bne.n	800b65c <HAL_SPI_Receive_DMA+0x48>
 800b6bc:	e001      	b.n	800b6c2 <HAL_SPI_Receive_DMA+0xae>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b6be:	2b07      	cmp	r3, #7
 800b6c0:	d8f5      	bhi.n	800b6ae <HAL_SPI_Receive_DMA+0x9a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b6c2:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b6c4:	2b07      	cmp	r3, #7
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b6c6:	688a      	ldr	r2, [r1, #8]
 800b6c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b6cc:	608a      	str	r2, [r1, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b6ce:	d812      	bhi.n	800b6f6 <HAL_SPI_Receive_DMA+0xe2>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b6d0:	6983      	ldr	r3, [r0, #24]
 800b6d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6d6:	d104      	bne.n	800b6e2 <HAL_SPI_Receive_DMA+0xce>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b6d8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b6dc:	3301      	adds	r3, #1
 800b6de:	085b      	lsrs	r3, r3, #1
 800b6e0:	e006      	b.n	800b6f0 <HAL_SPI_Receive_DMA+0xdc>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b6e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6e6:	d10c      	bne.n	800b702 <HAL_SPI_Receive_DMA+0xee>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b6e8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b6ec:	3303      	adds	r3, #3
 800b6ee:	089b      	lsrs	r3, r3, #2
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b6f0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800b6f4:	e005      	b.n	800b702 <HAL_SPI_Receive_DMA+0xee>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b6f6:	2b0f      	cmp	r3, #15
 800b6f8:	d803      	bhi.n	800b702 <HAL_SPI_Receive_DMA+0xee>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b6fa:	6983      	ldr	r3, [r0, #24]
 800b6fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b700:	d0ea      	beq.n	800b6d8 <HAL_SPI_Receive_DMA+0xc4>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b702:	4b1e      	ldr	r3, [pc, #120]	; (800b77c <HAL_SPI_Receive_DMA+0x168>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800b704:	4632      	mov	r2, r6
 800b706:	3130      	adds	r1, #48	; 0x30
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b708:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800b70a:	4b1d      	ldr	r3, [pc, #116]	; (800b780 <HAL_SPI_Receive_DMA+0x16c>)
 800b70c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b70e:	4b1d      	ldr	r3, [pc, #116]	; (800b784 <HAL_SPI_Receive_DMA+0x170>)
 800b710:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800b712:	2300      	movs	r3, #0
 800b714:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800b716:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b71a:	f7fb fd87 	bl	800722c <HAL_DMA_Start_IT>
 800b71e:	b148      	cbz	r0, 800b734 <HAL_SPI_Receive_DMA+0x120>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b720:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b724:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b726:	f043 0310 	orr.w	r3, r3, #16
 800b72a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b72e:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
    return errorcode;
 800b732:	e797      	b.n	800b664 <HAL_SPI_Receive_DMA+0x50>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b734:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b736:	6821      	ldr	r1, [r4, #0]
 800b738:	69db      	ldr	r3, [r3, #28]
 800b73a:	4a13      	ldr	r2, [pc, #76]	; (800b788 <HAL_SPI_Receive_DMA+0x174>)
 800b73c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b740:	684b      	ldr	r3, [r1, #4]
 800b742:	ea03 0302 	and.w	r3, r3, r2
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b746:	bf18      	it	ne
 800b748:	432b      	orrne	r3, r5
 800b74a:	604b      	str	r3, [r1, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b74c:	688b      	ldr	r3, [r1, #8]
 800b74e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b752:	608b      	str	r3, [r1, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b754:	690b      	ldr	r3, [r1, #16]
 800b756:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800b75a:	610b      	str	r3, [r1, #16]
  __HAL_SPI_ENABLE(hspi);
 800b75c:	680b      	ldr	r3, [r1, #0]
 800b75e:	f043 0301 	orr.w	r3, r3, #1
 800b762:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b764:	6863      	ldr	r3, [r4, #4]
 800b766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b76a:	d103      	bne.n	800b774 <HAL_SPI_Receive_DMA+0x160>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b76c:	680b      	ldr	r3, [r1, #0]
 800b76e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b772:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(hspi);
 800b774:	2300      	movs	r3, #0
 800b776:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800b77a:	e773      	b.n	800b664 <HAL_SPI_Receive_DMA+0x50>
 800b77c:	0800b817 	.word	0x0800b817
 800b780:	0800b7b7 	.word	0x0800b7b7
 800b784:	0800b82f 	.word	0x0800b82f
 800b788:	ffff0000 	.word	0xffff0000

0800b78c <HAL_SPI_TxCpltCallback>:
 800b78c:	4770      	bx	lr

0800b78e <SPI_DMATransmitCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b78e:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800b790:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b792:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800b796:	2b07      	cmp	r3, #7
 800b798:	d006      	beq.n	800b7a8 <SPI_DMATransmitCplt+0x1a>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b79a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800b79c:	69db      	ldr	r3, [r3, #28]
 800b79e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7a2:	d102      	bne.n	800b7aa <SPI_DMATransmitCplt+0x1c>
      HAL_SPI_TxCpltCallback(hspi);
 800b7a4:	f7ff fff2 	bl	800b78c <HAL_SPI_TxCpltCallback>
}
 800b7a8:	bd08      	pop	{r3, pc}
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b7aa:	6802      	ldr	r2, [r0, #0]
 800b7ac:	6913      	ldr	r3, [r2, #16]
 800b7ae:	f043 0308 	orr.w	r3, r3, #8
 800b7b2:	6113      	str	r3, [r2, #16]
}
 800b7b4:	e7f8      	b.n	800b7a8 <SPI_DMATransmitCplt+0x1a>

0800b7b6 <SPI_DMAReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800b7b8:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b7ba:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800b7be:	2b07      	cmp	r3, #7
 800b7c0:	d006      	beq.n	800b7d0 <SPI_DMAReceiveCplt+0x1a>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b7c2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800b7c4:	69db      	ldr	r3, [r3, #28]
 800b7c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7ca:	d102      	bne.n	800b7d2 <SPI_DMAReceiveCplt+0x1c>
      HAL_SPI_RxCpltCallback(hspi);
 800b7cc:	f7f5 f960 	bl	8000a90 <HAL_SPI_RxCpltCallback>
}
 800b7d0:	bd08      	pop	{r3, pc}
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b7d2:	6802      	ldr	r2, [r0, #0]
 800b7d4:	6913      	ldr	r3, [r2, #16]
 800b7d6:	f043 0308 	orr.w	r3, r3, #8
 800b7da:	6113      	str	r3, [r2, #16]
}
 800b7dc:	e7f8      	b.n	800b7d0 <SPI_DMAReceiveCplt+0x1a>

0800b7de <HAL_SPI_TxRxCpltCallback>:
 800b7de:	4770      	bx	lr

0800b7e0 <SPI_DMATransmitReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7e0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800b7e2:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b7e4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800b7e8:	2b07      	cmp	r3, #7
 800b7ea:	d006      	beq.n	800b7fa <SPI_DMATransmitReceiveCplt+0x1a>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b7ec:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800b7ee:	69db      	ldr	r3, [r3, #28]
 800b7f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7f4:	d102      	bne.n	800b7fc <SPI_DMATransmitReceiveCplt+0x1c>
      HAL_SPI_TxRxCpltCallback(hspi);
 800b7f6:	f7ff fff2 	bl	800b7de <HAL_SPI_TxRxCpltCallback>
}
 800b7fa:	bd08      	pop	{r3, pc}
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b7fc:	6802      	ldr	r2, [r0, #0]
 800b7fe:	6913      	ldr	r3, [r2, #16]
 800b800:	f043 0308 	orr.w	r3, r3, #8
 800b804:	6113      	str	r3, [r2, #16]
}
 800b806:	e7f8      	b.n	800b7fa <SPI_DMATransmitReceiveCplt+0x1a>

0800b808 <HAL_SPI_TxHalfCpltCallback>:
 800b808:	4770      	bx	lr

0800b80a <SPI_DMAHalfTransmitCplt>:
{
 800b80a:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b80c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b80e:	f7ff fffb 	bl	800b808 <HAL_SPI_TxHalfCpltCallback>
}
 800b812:	bd08      	pop	{r3, pc}

0800b814 <HAL_SPI_RxHalfCpltCallback>:
 800b814:	4770      	bx	lr

0800b816 <SPI_DMAHalfReceiveCplt>:
{
 800b816:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b818:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b81a:	f7ff fffb 	bl	800b814 <HAL_SPI_RxHalfCpltCallback>
}
 800b81e:	bd08      	pop	{r3, pc}

0800b820 <HAL_SPI_TxRxHalfCpltCallback>:
 800b820:	4770      	bx	lr

0800b822 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800b822:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b824:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b826:	f7ff fffb 	bl	800b820 <HAL_SPI_TxRxHalfCpltCallback>
}
 800b82a:	bd08      	pop	{r3, pc}

0800b82c <HAL_SPI_ErrorCallback>:
 800b82c:	4770      	bx	lr

0800b82e <SPI_DMAError>:
{
 800b82e:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b830:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b832:	f7fc fb27 	bl	8007e84 <HAL_DMA_GetError>
 800b836:	2802      	cmp	r0, #2
 800b838:	d00d      	beq.n	800b856 <SPI_DMAError+0x28>
    SPI_CloseTransfer(hspi);
 800b83a:	4620      	mov	r0, r4
 800b83c:	f7ff fc78 	bl	800b130 <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b840:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b844:	f043 0310 	orr.w	r3, r3, #16
 800b848:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b84c:	2301      	movs	r3, #1
 800b84e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800b852:	f7ff ffeb 	bl	800b82c <HAL_SPI_ErrorCallback>
}
 800b856:	bd10      	pop	{r4, pc}

0800b858 <HAL_SPI_IRQHandler>:
{
 800b858:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t itsource = hspi->Instance->IER;
 800b85c:	6807      	ldr	r7, [r0, #0]
{
 800b85e:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800b860:	f8d7 8010 	ldr.w	r8, [r7, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800b864:	f8d7 9014 	ldr.w	r9, [r7, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b868:	68be      	ldr	r6, [r7, #8]
  uint32_t trigger  = itsource & itflag;
 800b86a:	ea08 0a09 	and.w	sl, r8, r9
  HAL_SPI_StateTypeDef State = hspi->State;
 800b86e:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b872:	f00a 0364 	and.w	r3, sl, #100	; 0x64
  HAL_SPI_StateTypeDef State = hspi->State;
 800b876:	b2ed      	uxtb	r5, r5
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b878:	2b04      	cmp	r3, #4
 800b87a:	d118      	bne.n	800b8ae <HAL_SPI_IRQHandler+0x56>
    hspi->TxISR(hspi);
 800b87c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800b87e:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b880:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b882:	4620      	mov	r0, r4
 800b884:	4798      	blx	r3
    handled = 1UL;
 800b886:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b888:	f00a 0b45 	and.w	fp, sl, #69	; 0x45
 800b88c:	f1bb 0f01 	cmp.w	fp, #1
 800b890:	d103      	bne.n	800b89a <HAL_SPI_IRQHandler+0x42>
    hspi->RxISR(hspi);
 800b892:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b894:	4620      	mov	r0, r4
 800b896:	4798      	blx	r3
    handled = 1UL;
 800b898:	465b      	mov	r3, fp
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b89a:	f00a 0226 	and.w	r2, sl, #38	; 0x26
 800b89e:	2a02      	cmp	r2, #2
 800b8a0:	d107      	bne.n	800b8b2 <HAL_SPI_IRQHandler+0x5a>
    hspi->TxISR(hspi);
 800b8a2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b8a4:	4620      	mov	r0, r4
}
 800b8a6:	b001      	add	sp, #4
 800b8a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    hspi->TxISR(hspi);
 800b8ac:	4718      	bx	r3
  uint32_t handled  = 0UL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	e7ea      	b.n	800b888 <HAL_SPI_IRQHandler+0x30>
  if (handled != 0UL)
 800b8b2:	bb03      	cbnz	r3, 800b8f6 <HAL_SPI_IRQHandler+0x9e>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b8b4:	f01a 0f08 	tst.w	sl, #8
 800b8b8:	d065      	beq.n	800b986 <HAL_SPI_IRQHandler+0x12e>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b8ba:	6823      	ldr	r3, [r4, #0]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800b8bc:	f416 4f40 	tst.w	r6, #49152	; 0xc000
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b8c0:	699a      	ldr	r2, [r3, #24]
 800b8c2:	f042 0208 	orr.w	r2, r2, #8
 800b8c6:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b8c8:	699a      	ldr	r2, [r3, #24]
 800b8ca:	f042 0210 	orr.w	r2, r2, #16
 800b8ce:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b8d0:	699a      	ldr	r2, [r3, #24]
 800b8d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8d6:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b8d8:	691a      	ldr	r2, [r3, #16]
 800b8da:	f022 0208 	bic.w	r2, r2, #8
 800b8de:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800b8e0:	d00f      	beq.n	800b902 <HAL_SPI_IRQHandler+0xaa>
 800b8e2:	2d04      	cmp	r5, #4
 800b8e4:	d00a      	beq.n	800b8fc <HAL_SPI_IRQHandler+0xa4>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800b8e6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b8e8:	69d2      	ldr	r2, [r2, #28]
 800b8ea:	b152      	cbz	r2, 800b902 <HAL_SPI_IRQHandler+0xaa>
 800b8ec:	2d03      	cmp	r5, #3
 800b8ee:	d105      	bne.n	800b8fc <HAL_SPI_IRQHandler+0xa4>
      HAL_SPI_TxCpltCallback(hspi);
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f7ff ff4b 	bl	800b78c <HAL_SPI_TxCpltCallback>
}
 800b8f6:	b001      	add	sp, #4
 800b8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800b8fc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800b8fe:	69d2      	ldr	r2, [r2, #28]
 800b900:	bb92      	cbnz	r2, 800b968 <HAL_SPI_IRQHandler+0x110>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800b908:	d01b      	beq.n	800b942 <HAL_SPI_IRQHandler+0xea>
      SPI_CloseTransfer(hspi);
 800b90a:	4620      	mov	r0, r4
 800b90c:	f7ff fc10 	bl	800b130 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 800b910:	2301      	movs	r3, #1
 800b912:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b916:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b91a:	b32b      	cbz	r3, 800b968 <HAL_SPI_IRQHandler+0x110>
        HAL_SPI_ErrorCallback(hspi);
 800b91c:	4620      	mov	r0, r4
 800b91e:	f7ff ff85 	bl	800b82c <HAL_SPI_ErrorCallback>
 800b922:	e7e8      	b.n	800b8f6 <HAL_SPI_IRQHandler+0x9e>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b924:	68e2      	ldr	r2, [r4, #12]
 800b926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b928:	2a0f      	cmp	r2, #15
 800b92a:	d910      	bls.n	800b94e <HAL_SPI_IRQHandler+0xf6>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b92c:	6822      	ldr	r2, [r4, #0]
 800b92e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b930:	f843 2b04 	str.w	r2, [r3], #4
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800b934:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800b936:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b93a:	3b01      	subs	r3, #1
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800b942:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b946:	b29b      	uxth	r3, r3
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1eb      	bne.n	800b924 <HAL_SPI_IRQHandler+0xcc>
 800b94c:	e7dd      	b.n	800b90a <HAL_SPI_IRQHandler+0xb2>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b94e:	2a07      	cmp	r2, #7
 800b950:	d903      	bls.n	800b95a <HAL_SPI_IRQHandler+0x102>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b952:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800b954:	f823 2b02 	strh.w	r2, [r3], #2
 800b958:	e7ec      	b.n	800b934 <HAL_SPI_IRQHandler+0xdc>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b95a:	6822      	ldr	r2, [r4, #0]
 800b95c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800b960:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800b962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b964:	3301      	adds	r3, #1
 800b966:	e7e5      	b.n	800b934 <HAL_SPI_IRQHandler+0xdc>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b968:	2d05      	cmp	r5, #5
 800b96a:	d103      	bne.n	800b974 <HAL_SPI_IRQHandler+0x11c>
      HAL_SPI_TxRxCpltCallback(hspi);
 800b96c:	4620      	mov	r0, r4
 800b96e:	f7ff ff36 	bl	800b7de <HAL_SPI_TxRxCpltCallback>
 800b972:	e7c0      	b.n	800b8f6 <HAL_SPI_IRQHandler+0x9e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b974:	2d04      	cmp	r5, #4
 800b976:	d103      	bne.n	800b980 <HAL_SPI_IRQHandler+0x128>
      HAL_SPI_RxCpltCallback(hspi);
 800b978:	4620      	mov	r0, r4
 800b97a:	f7f5 f889 	bl	8000a90 <HAL_SPI_RxCpltCallback>
 800b97e:	e7ba      	b.n	800b8f6 <HAL_SPI_IRQHandler+0x9e>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b980:	2d03      	cmp	r5, #3
 800b982:	d1b8      	bne.n	800b8f6 <HAL_SPI_IRQHandler+0x9e>
 800b984:	e7b4      	b.n	800b8f0 <HAL_SPI_IRQHandler+0x98>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b986:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800b98a:	d008      	beq.n	800b99e <HAL_SPI_IRQHandler+0x146>
 800b98c:	f018 0f08 	tst.w	r8, #8
 800b990:	d005      	beq.n	800b99e <HAL_SPI_IRQHandler+0x146>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b992:	6822      	ldr	r2, [r4, #0]
 800b994:	6993      	ldr	r3, [r2, #24]
 800b996:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b99a:	6193      	str	r3, [r2, #24]
    return;
 800b99c:	e7ab      	b.n	800b8f6 <HAL_SPI_IRQHandler+0x9e>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b99e:	f41a 7f58 	tst.w	sl, #864	; 0x360
 800b9a2:	d0a8      	beq.n	800b8f6 <HAL_SPI_IRQHandler+0x9e>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b9a4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800b9a8:	d00a      	beq.n	800b9c0 <HAL_SPI_IRQHandler+0x168>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b9aa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9ae:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b9b0:	f043 0304 	orr.w	r3, r3, #4
 800b9b4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9b8:	6993      	ldr	r3, [r2, #24]
 800b9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9be:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b9c0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800b9c4:	d00a      	beq.n	800b9dc <HAL_SPI_IRQHandler+0x184>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b9c6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b9ca:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b9cc:	f043 0301 	orr.w	r3, r3, #1
 800b9d0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b9d4:	6993      	ldr	r3, [r2, #24]
 800b9d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b9da:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b9dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b9e0:	d00a      	beq.n	800b9f8 <HAL_SPI_IRQHandler+0x1a0>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b9e2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b9e6:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b9e8:	f043 0308 	orr.w	r3, r3, #8
 800b9ec:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b9f0:	6993      	ldr	r3, [r2, #24]
 800b9f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9f6:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b9f8:	f01a 0f20 	tst.w	sl, #32
 800b9fc:	d00a      	beq.n	800ba14 <HAL_SPI_IRQHandler+0x1bc>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b9fe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ba02:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ba04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba08:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ba0c:	6993      	ldr	r3, [r2, #24]
 800ba0e:	f043 0320 	orr.w	r3, r3, #32
 800ba12:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba14:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f43f af6c 	beq.w	800b8f6 <HAL_SPI_IRQHandler+0x9e>
      __HAL_SPI_DISABLE(hspi);
 800ba1e:	6823      	ldr	r3, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ba20:	f406 4640 	and.w	r6, r6, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800ba24:	681a      	ldr	r2, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ba26:	f5b6 4f40 	cmp.w	r6, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800ba2a:	f022 0201 	bic.w	r2, r2, #1
 800ba2e:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800ba30:	691a      	ldr	r2, [r3, #16]
 800ba32:	f422 725a 	bic.w	r2, r2, #872	; 0x368
 800ba36:	f022 0203 	bic.w	r2, r2, #3
 800ba3a:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ba3c:	d122      	bne.n	800ba84 <HAL_SPI_IRQHandler+0x22c>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ba3e:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800ba40:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ba42:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ba46:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800ba48:	b150      	cbz	r0, 800ba60 <HAL_SPI_IRQHandler+0x208>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ba4a:	4b10      	ldr	r3, [pc, #64]	; (800ba8c <HAL_SPI_IRQHandler+0x234>)
 800ba4c:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ba4e:	f7fb febd 	bl	80077cc <HAL_DMA_Abort_IT>
 800ba52:	b128      	cbz	r0, 800ba60 <HAL_SPI_IRQHandler+0x208>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ba54:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ba58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba5c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800ba60:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ba62:	2800      	cmp	r0, #0
 800ba64:	f43f af47 	beq.w	800b8f6 <HAL_SPI_IRQHandler+0x9e>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ba68:	4b08      	ldr	r3, [pc, #32]	; (800ba8c <HAL_SPI_IRQHandler+0x234>)
 800ba6a:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ba6c:	f7fb feae 	bl	80077cc <HAL_DMA_Abort_IT>
 800ba70:	2800      	cmp	r0, #0
 800ba72:	f43f af40 	beq.w	800b8f6 <HAL_SPI_IRQHandler+0x9e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ba76:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ba7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba7e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800ba82:	e738      	b.n	800b8f6 <HAL_SPI_IRQHandler+0x9e>
        hspi->State = HAL_SPI_STATE_READY;
 800ba84:	2301      	movs	r3, #1
 800ba86:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800ba8a:	e747      	b.n	800b91c <HAL_SPI_IRQHandler+0xc4>
 800ba8c:	0800ba91 	.word	0x0800ba91

0800ba90 <SPI_DMAAbortOnError>:
{
 800ba90:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba92:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800ba94:	2300      	movs	r3, #0
 800ba96:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800ba9a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800baa4:	f7ff fec2 	bl	800b82c <HAL_SPI_ErrorCallback>
}
 800baa8:	bd08      	pop	{r3, pc}

0800baaa <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800baaa:	4770      	bx	lr

0800baac <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800baac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d115      	bne.n	800bae0 <HAL_TIM_Base_Start_IT+0x34>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bab4:	2302      	movs	r3, #2
 800bab6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800baba:	6803      	ldr	r3, [r0, #0]
 800babc:	68da      	ldr	r2, [r3, #12]
 800babe:	f042 0201 	orr.w	r2, r2, #1
 800bac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bac4:	4a07      	ldr	r2, [pc, #28]	; (800bae4 <HAL_TIM_Base_Start_IT+0x38>)
 800bac6:	6899      	ldr	r1, [r3, #8]
 800bac8:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baca:	2a06      	cmp	r2, #6
 800bacc:	d006      	beq.n	800badc <HAL_TIM_Base_Start_IT+0x30>
 800bace:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800bad2:	d003      	beq.n	800badc <HAL_TIM_Base_Start_IT+0x30>
  {
    __HAL_TIM_ENABLE(htim);
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	f042 0201 	orr.w	r2, r2, #1
 800bada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800badc:	2000      	movs	r0, #0
}
 800bade:	4770      	bx	lr
    return HAL_ERROR;
 800bae0:	2001      	movs	r0, #1
 800bae2:	4770      	bx	lr
 800bae4:	00010007 	.word	0x00010007

0800bae8 <HAL_TIM_OC_DelayElapsedCallback>:
 800bae8:	4770      	bx	lr

0800baea <HAL_TIM_IC_CaptureCallback>:
 800baea:	4770      	bx	lr

0800baec <HAL_TIM_PWM_PulseFinishedCallback>:
 800baec:	4770      	bx	lr

0800baee <HAL_TIM_TriggerCallback>:
 800baee:	4770      	bx	lr

0800baf0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800baf0:	6803      	ldr	r3, [r0, #0]
 800baf2:	691a      	ldr	r2, [r3, #16]
 800baf4:	0791      	lsls	r1, r2, #30
{
 800baf6:	b510      	push	{r4, lr}
 800baf8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bafa:	d50f      	bpl.n	800bb1c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bafc:	68da      	ldr	r2, [r3, #12]
 800bafe:	0792      	lsls	r2, r2, #30
 800bb00:	d50c      	bpl.n	800bb1c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb02:	f06f 0202 	mvn.w	r2, #2
 800bb06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb08:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb0a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb0c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb0e:	0799      	lsls	r1, r3, #30
 800bb10:	f000 8085 	beq.w	800bc1e <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb14:	f7ff ffe9 	bl	800baea <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb1c:	6823      	ldr	r3, [r4, #0]
 800bb1e:	691a      	ldr	r2, [r3, #16]
 800bb20:	0752      	lsls	r2, r2, #29
 800bb22:	d510      	bpl.n	800bb46 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb24:	68da      	ldr	r2, [r3, #12]
 800bb26:	0750      	lsls	r0, r2, #29
 800bb28:	d50d      	bpl.n	800bb46 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb2a:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb32:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb34:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb36:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb38:	f413 7f40 	tst.w	r3, #768	; 0x300
 800bb3c:	d075      	beq.n	800bc2a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800bb3e:	f7ff ffd4 	bl	800baea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb42:	2300      	movs	r3, #0
 800bb44:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb46:	6823      	ldr	r3, [r4, #0]
 800bb48:	691a      	ldr	r2, [r3, #16]
 800bb4a:	0711      	lsls	r1, r2, #28
 800bb4c:	d50f      	bpl.n	800bb6e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb4e:	68da      	ldr	r2, [r3, #12]
 800bb50:	0712      	lsls	r2, r2, #28
 800bb52:	d50c      	bpl.n	800bb6e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb54:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb58:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb5c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb5e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb60:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb62:	079b      	lsls	r3, r3, #30
 800bb64:	d067      	beq.n	800bc36 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800bb66:	f7ff ffc0 	bl	800baea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	691a      	ldr	r2, [r3, #16]
 800bb72:	06d0      	lsls	r0, r2, #27
 800bb74:	d510      	bpl.n	800bb98 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb76:	68da      	ldr	r2, [r3, #12]
 800bb78:	06d1      	lsls	r1, r2, #27
 800bb7a:	d50d      	bpl.n	800bb98 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb7c:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb80:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb84:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb86:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb88:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb8a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800bb8e:	d058      	beq.n	800bc42 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800bb90:	f7ff ffab 	bl	800baea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb94:	2300      	movs	r3, #0
 800bb96:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb98:	6823      	ldr	r3, [r4, #0]
 800bb9a:	691a      	ldr	r2, [r3, #16]
 800bb9c:	07d2      	lsls	r2, r2, #31
 800bb9e:	d508      	bpl.n	800bbb2 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bba0:	68da      	ldr	r2, [r3, #12]
 800bba2:	07d0      	lsls	r0, r2, #31
 800bba4:	d505      	bpl.n	800bbb2 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bba6:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bbaa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bbac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800bbae:	f7f7 fbe3 	bl	8003378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bbb2:	6823      	ldr	r3, [r4, #0]
 800bbb4:	691a      	ldr	r2, [r3, #16]
 800bbb6:	0611      	lsls	r1, r2, #24
 800bbb8:	d508      	bpl.n	800bbcc <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbba:	68da      	ldr	r2, [r3, #12]
 800bbbc:	0612      	lsls	r2, r2, #24
 800bbbe:	d505      	bpl.n	800bbcc <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bbc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bbc4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bbc6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800bbc8:	f000 f8d9 	bl	800bd7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bbcc:	6823      	ldr	r3, [r4, #0]
 800bbce:	691a      	ldr	r2, [r3, #16]
 800bbd0:	05d0      	lsls	r0, r2, #23
 800bbd2:	d508      	bpl.n	800bbe6 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbd4:	68da      	ldr	r2, [r3, #12]
 800bbd6:	0611      	lsls	r1, r2, #24
 800bbd8:	d505      	bpl.n	800bbe6 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbda:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bbde:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbe0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800bbe2:	f000 f8cd 	bl	800bd80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bbe6:	6823      	ldr	r3, [r4, #0]
 800bbe8:	691a      	ldr	r2, [r3, #16]
 800bbea:	0652      	lsls	r2, r2, #25
 800bbec:	d508      	bpl.n	800bc00 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bbee:	68da      	ldr	r2, [r3, #12]
 800bbf0:	0650      	lsls	r0, r2, #25
 800bbf2:	d505      	bpl.n	800bc00 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bbf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbf8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bbfa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800bbfc:	f7ff ff77 	bl	800baee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc00:	6823      	ldr	r3, [r4, #0]
 800bc02:	691a      	ldr	r2, [r3, #16]
 800bc04:	0691      	lsls	r1, r2, #26
 800bc06:	d522      	bpl.n	800bc4e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc08:	68da      	ldr	r2, [r3, #12]
 800bc0a:	0692      	lsls	r2, r2, #26
 800bc0c:	d51f      	bpl.n	800bc4e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc0e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc12:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc14:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800bc1a:	f000 b8af 	b.w	800bd7c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc1e:	f7ff ff63 	bl	800bae8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc22:	4620      	mov	r0, r4
 800bc24:	f7ff ff62 	bl	800baec <HAL_TIM_PWM_PulseFinishedCallback>
 800bc28:	e776      	b.n	800bb18 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc2a:	f7ff ff5d 	bl	800bae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f7ff ff5c 	bl	800baec <HAL_TIM_PWM_PulseFinishedCallback>
 800bc34:	e785      	b.n	800bb42 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc36:	f7ff ff57 	bl	800bae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	f7ff ff56 	bl	800baec <HAL_TIM_PWM_PulseFinishedCallback>
 800bc40:	e793      	b.n	800bb6a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc42:	f7ff ff51 	bl	800bae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc46:	4620      	mov	r0, r4
 800bc48:	f7ff ff50 	bl	800baec <HAL_TIM_PWM_PulseFinishedCallback>
 800bc4c:	e7a2      	b.n	800bb94 <HAL_TIM_IRQHandler+0xa4>
}
 800bc4e:	bd10      	pop	{r4, pc}

0800bc50 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc50:	4a30      	ldr	r2, [pc, #192]	; (800bd14 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800bc52:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc54:	4290      	cmp	r0, r2
 800bc56:	d012      	beq.n	800bc7e <TIM_Base_SetConfig+0x2e>
 800bc58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bc5c:	d00f      	beq.n	800bc7e <TIM_Base_SetConfig+0x2e>
 800bc5e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800bc62:	4290      	cmp	r0, r2
 800bc64:	d00b      	beq.n	800bc7e <TIM_Base_SetConfig+0x2e>
 800bc66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc6a:	4290      	cmp	r0, r2
 800bc6c:	d007      	beq.n	800bc7e <TIM_Base_SetConfig+0x2e>
 800bc6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc72:	4290      	cmp	r0, r2
 800bc74:	d003      	beq.n	800bc7e <TIM_Base_SetConfig+0x2e>
 800bc76:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800bc7a:	4290      	cmp	r0, r2
 800bc7c:	d119      	bne.n	800bcb2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800bc7e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800bc84:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc86:	4a23      	ldr	r2, [pc, #140]	; (800bd14 <TIM_Base_SetConfig+0xc4>)
 800bc88:	4290      	cmp	r0, r2
 800bc8a:	d01d      	beq.n	800bcc8 <TIM_Base_SetConfig+0x78>
 800bc8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bc90:	d01a      	beq.n	800bcc8 <TIM_Base_SetConfig+0x78>
 800bc92:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800bc96:	4290      	cmp	r0, r2
 800bc98:	d016      	beq.n	800bcc8 <TIM_Base_SetConfig+0x78>
 800bc9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc9e:	4290      	cmp	r0, r2
 800bca0:	d012      	beq.n	800bcc8 <TIM_Base_SetConfig+0x78>
 800bca2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bca6:	4290      	cmp	r0, r2
 800bca8:	d00e      	beq.n	800bcc8 <TIM_Base_SetConfig+0x78>
 800bcaa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800bcae:	4290      	cmp	r0, r2
 800bcb0:	d00a      	beq.n	800bcc8 <TIM_Base_SetConfig+0x78>
 800bcb2:	4a19      	ldr	r2, [pc, #100]	; (800bd18 <TIM_Base_SetConfig+0xc8>)
 800bcb4:	4290      	cmp	r0, r2
 800bcb6:	d007      	beq.n	800bcc8 <TIM_Base_SetConfig+0x78>
 800bcb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bcbc:	4290      	cmp	r0, r2
 800bcbe:	d003      	beq.n	800bcc8 <TIM_Base_SetConfig+0x78>
 800bcc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bcc4:	4290      	cmp	r0, r2
 800bcc6:	d103      	bne.n	800bcd0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bccc:	68ca      	ldr	r2, [r1, #12]
 800bcce:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bcd0:	694a      	ldr	r2, [r1, #20]
 800bcd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcd6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800bcd8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcda:	688b      	ldr	r3, [r1, #8]
 800bcdc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bcde:	680b      	ldr	r3, [r1, #0]
 800bce0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bce2:	4b0c      	ldr	r3, [pc, #48]	; (800bd14 <TIM_Base_SetConfig+0xc4>)
 800bce4:	4298      	cmp	r0, r3
 800bce6:	d00f      	beq.n	800bd08 <TIM_Base_SetConfig+0xb8>
 800bce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bcec:	4298      	cmp	r0, r3
 800bcee:	d00b      	beq.n	800bd08 <TIM_Base_SetConfig+0xb8>
 800bcf0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bcf4:	4298      	cmp	r0, r3
 800bcf6:	d007      	beq.n	800bd08 <TIM_Base_SetConfig+0xb8>
 800bcf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bcfc:	4298      	cmp	r0, r3
 800bcfe:	d003      	beq.n	800bd08 <TIM_Base_SetConfig+0xb8>
 800bd00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd04:	4298      	cmp	r0, r3
 800bd06:	d101      	bne.n	800bd0c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd08:	690b      	ldr	r3, [r1, #16]
 800bd0a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	6143      	str	r3, [r0, #20]
}
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	40010000 	.word	0x40010000
 800bd18:	40014000 	.word	0x40014000

0800bd1c <HAL_TIM_Base_Init>:
{
 800bd1c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800bd1e:	4604      	mov	r4, r0
 800bd20:	b350      	cbz	r0, 800bd78 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bd22:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800bd26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bd2a:	b91b      	cbnz	r3, 800bd34 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800bd2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800bd30:	f7ff febb 	bl	800baaa <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800bd34:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd36:	6820      	ldr	r0, [r4, #0]
 800bd38:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800bd3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd3e:	f7ff ff87 	bl	800bc50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd42:	2301      	movs	r3, #1
  return HAL_OK;
 800bd44:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd46:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800bd4e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800bd52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800bd56:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800bd5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd62:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800bd66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd6a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800bd6e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800bd72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800bd76:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800bd78:	2001      	movs	r0, #1
 800bd7a:	e7fc      	b.n	800bd76 <HAL_TIM_Base_Init+0x5a>

0800bd7c <HAL_TIMEx_CommutCallback>:
 800bd7c:	4770      	bx	lr

0800bd7e <HAL_TIMEx_BreakCallback>:
 800bd7e:	4770      	bx	lr

0800bd80 <HAL_TIMEx_Break2Callback>:
 800bd80:	4770      	bx	lr

0800bd82 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd82:	6802      	ldr	r2, [r0, #0]
 800bd84:	6813      	ldr	r3, [r2, #0]
 800bd86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd8a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd8c:	6893      	ldr	r3, [r2, #8]
 800bd8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd92:	f023 0301 	bic.w	r3, r3, #1
 800bd96:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd98:	2320      	movs	r3, #32
 800bd9a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800bda2:	4770      	bx	lr

0800bda4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800bda4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800bda8:	2b20      	cmp	r3, #32
{
 800bdaa:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800bdac:	d167      	bne.n	800be7e <HAL_UART_Receive_IT+0xda>
    if ((pData == NULL) || (Size == 0U))
 800bdae:	2900      	cmp	r1, #0
 800bdb0:	d063      	beq.n	800be7a <HAL_UART_Receive_IT+0xd6>
 800bdb2:	2a00      	cmp	r2, #0
 800bdb4:	d061      	beq.n	800be7a <HAL_UART_Receive_IT+0xd6>
    __HAL_LOCK(huart);
 800bdb6:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d05f      	beq.n	800be7e <HAL_UART_Receive_IT+0xda>
 800bdbe:	2301      	movs	r3, #1
    huart->pRxBuffPtr  = pData;
 800bdc0:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxISR       = NULL;
 800bdc2:	2100      	movs	r1, #0
    huart->RxXferSize  = Size;
 800bdc4:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    __HAL_LOCK(huart);
 800bdc8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    UART_MASK_COMPUTATION(huart);
 800bdcc:	6883      	ldr	r3, [r0, #8]
    huart->RxXferCount = Size;
 800bdce:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 800bdd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxISR       = NULL;
 800bdd6:	66c1      	str	r1, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 800bdd8:	d12e      	bne.n	800be38 <HAL_UART_Receive_IT+0x94>
 800bdda:	6901      	ldr	r1, [r0, #16]
 800bddc:	bb51      	cbnz	r1, 800be34 <HAL_UART_Receive_IT+0x90>
 800bdde:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bde2:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bde6:	2100      	movs	r1, #0
 800bde8:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bdec:	2122      	movs	r1, #34	; 0x22
 800bdee:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdf2:	6801      	ldr	r1, [r0, #0]
 800bdf4:	688c      	ldr	r4, [r1, #8]
 800bdf6:	f044 0401 	orr.w	r4, r4, #1
 800bdfa:	608c      	str	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bdfc:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800bdfe:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 800be02:	d129      	bne.n	800be58 <HAL_UART_Receive_IT+0xb4>
 800be04:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 800be08:	4294      	cmp	r4, r2
 800be0a:	d825      	bhi.n	800be58 <HAL_UART_Receive_IT+0xb4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be10:	d120      	bne.n	800be54 <HAL_UART_Receive_IT+0xb0>
 800be12:	6903      	ldr	r3, [r0, #16]
 800be14:	b9f3      	cbnz	r3, 800be54 <HAL_UART_Receive_IT+0xb0>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800be16:	4b1b      	ldr	r3, [pc, #108]	; (800be84 <HAL_UART_Receive_IT+0xe0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be18:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800be1a:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 800be1c:	2300      	movs	r3, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 800be22:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be26:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800be28:	688a      	ldr	r2, [r1, #8]
 800be2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800be2e:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 800be30:	4618      	mov	r0, r3
}
 800be32:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 800be34:	21ff      	movs	r1, #255	; 0xff
 800be36:	e7d4      	b.n	800bde2 <HAL_UART_Receive_IT+0x3e>
 800be38:	b923      	cbnz	r3, 800be44 <HAL_UART_Receive_IT+0xa0>
 800be3a:	6901      	ldr	r1, [r0, #16]
 800be3c:	2900      	cmp	r1, #0
 800be3e:	d0f9      	beq.n	800be34 <HAL_UART_Receive_IT+0x90>
 800be40:	217f      	movs	r1, #127	; 0x7f
 800be42:	e7ce      	b.n	800bde2 <HAL_UART_Receive_IT+0x3e>
 800be44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be48:	d1cb      	bne.n	800bde2 <HAL_UART_Receive_IT+0x3e>
 800be4a:	6901      	ldr	r1, [r0, #16]
 800be4c:	2900      	cmp	r1, #0
 800be4e:	d0f7      	beq.n	800be40 <HAL_UART_Receive_IT+0x9c>
 800be50:	213f      	movs	r1, #63	; 0x3f
 800be52:	e7c6      	b.n	800bde2 <HAL_UART_Receive_IT+0x3e>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800be54:	4b0c      	ldr	r3, [pc, #48]	; (800be88 <HAL_UART_Receive_IT+0xe4>)
 800be56:	e7df      	b.n	800be18 <HAL_UART_Receive_IT+0x74>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be5c:	d10b      	bne.n	800be76 <HAL_UART_Receive_IT+0xd2>
 800be5e:	6903      	ldr	r3, [r0, #16]
 800be60:	b94b      	cbnz	r3, 800be76 <HAL_UART_Receive_IT+0xd2>
        huart->RxISR = UART_RxISR_16BIT;
 800be62:	4b0a      	ldr	r3, [pc, #40]	; (800be8c <HAL_UART_Receive_IT+0xe8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800be64:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT;
 800be66:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 800be68:	2300      	movs	r3, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800be6a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
      __HAL_UNLOCK(huart);
 800be6e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800be72:	600a      	str	r2, [r1, #0]
 800be74:	e7dc      	b.n	800be30 <HAL_UART_Receive_IT+0x8c>
        huart->RxISR = UART_RxISR_8BIT;
 800be76:	4b06      	ldr	r3, [pc, #24]	; (800be90 <HAL_UART_Receive_IT+0xec>)
 800be78:	e7f4      	b.n	800be64 <HAL_UART_Receive_IT+0xc0>
      return HAL_ERROR;
 800be7a:	2001      	movs	r0, #1
 800be7c:	e7d9      	b.n	800be32 <HAL_UART_Receive_IT+0x8e>
    return HAL_BUSY;
 800be7e:	2002      	movs	r0, #2
 800be80:	e7d7      	b.n	800be32 <HAL_UART_Receive_IT+0x8e>
 800be82:	bf00      	nop
 800be84:	0800c291 	.word	0x0800c291
 800be88:	0800c1ed 	.word	0x0800c1ed
 800be8c:	0800c193 	.word	0x0800c193
 800be90:	0800c137 	.word	0x0800c137

0800be94 <HAL_UART_Transmit_DMA>:
{
 800be94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be96:	4604      	mov	r4, r0
 800be98:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800be9a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800be9e:	2f20      	cmp	r7, #32
 800bea0:	d13a      	bne.n	800bf18 <HAL_UART_Transmit_DMA+0x84>
    if ((pData == NULL) || (Size == 0U))
 800bea2:	b361      	cbz	r1, 800befe <HAL_UART_Transmit_DMA+0x6a>
 800bea4:	b35a      	cbz	r2, 800befe <HAL_UART_Transmit_DMA+0x6a>
    __HAL_LOCK(huart);
 800bea6:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 800beaa:	2a01      	cmp	r2, #1
 800beac:	d034      	beq.n	800bf18 <HAL_UART_Transmit_DMA+0x84>
 800beae:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beb0:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800beb2:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 800beb4:	6f60      	ldr	r0, [r4, #116]	; 0x74
    huart->TxXferCount = Size;
 800beb6:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    __HAL_LOCK(huart);
 800beba:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bebe:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    huart->pTxBuffPtr  = pData;
 800bec2:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bec4:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bec8:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->hdmatx != NULL)
 800becc:	b1c8      	cbz	r0, 800bf02 <HAL_UART_Transmit_DMA+0x6e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bece:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800bf1c <HAL_UART_Transmit_DMA+0x88>
 800bed2:	6822      	ldr	r2, [r4, #0]
 800bed4:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bed8:	f8df c044 	ldr.w	ip, [pc, #68]	; 800bf20 <HAL_UART_Transmit_DMA+0x8c>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bedc:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bede:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bee2:	f8df c040 	ldr.w	ip, [pc, #64]	; 800bf24 <HAL_UART_Transmit_DMA+0x90>
      huart->hdmatx->XferAbortCallback = NULL;
 800bee6:	e9c0 c613 	strd	ip, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800beea:	f7fb f99f 	bl	800722c <HAL_DMA_Start_IT>
 800beee:	b140      	cbz	r0, 800bf02 <HAL_UART_Transmit_DMA+0x6e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bef0:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800bef2:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bef6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 800befa:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
      return HAL_ERROR;
 800befe:	2001      	movs	r0, #1
 800bf00:	e009      	b.n	800bf16 <HAL_UART_Transmit_DMA+0x82>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bf02:	6823      	ldr	r3, [r4, #0]
 800bf04:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 800bf06:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bf08:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf0a:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 800bf0c:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bf14:	609a      	str	r2, [r3, #8]
}
 800bf16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800bf18:	2002      	movs	r0, #2
 800bf1a:	e7fc      	b.n	800bf16 <HAL_UART_Transmit_DMA+0x82>
 800bf1c:	0800c0fd 	.word	0x0800c0fd
 800bf20:	0800c12d 	.word	0x0800c12d
 800bf24:	0800c379 	.word	0x0800c379

0800bf28 <HAL_UART_Receive_DMA>:
{
 800bf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf2a:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
{
 800bf2e:	4604      	mov	r4, r0
 800bf30:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf32:	2f20      	cmp	r7, #32
 800bf34:	d13c      	bne.n	800bfb0 <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 800bf36:	b341      	cbz	r1, 800bf8a <HAL_UART_Receive_DMA+0x62>
 800bf38:	b33a      	cbz	r2, 800bf8a <HAL_UART_Receive_DMA+0x62>
    __HAL_LOCK(huart);
 800bf3a:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 800bf3e:	2a01      	cmp	r2, #1
 800bf40:	d036      	beq.n	800bfb0 <HAL_UART_Receive_DMA+0x88>
 800bf42:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf44:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bf46:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 800bf48:	6581      	str	r1, [r0, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf4a:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
    __HAL_LOCK(huart);
 800bf4e:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxXferSize = Size;
 800bf52:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bf56:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmarx != NULL)
 800bf5a:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800bf5c:	b1b8      	cbz	r0, 800bf8e <HAL_UART_Receive_DMA+0x66>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bf5e:	4a15      	ldr	r2, [pc, #84]	; (800bfb4 <HAL_UART_Receive_DMA+0x8c>)
 800bf60:	f8d4 c000 	ldr.w	ip, [r4]
 800bf64:	63c2      	str	r2, [r0, #60]	; 0x3c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bf66:	4a14      	ldr	r2, [pc, #80]	; (800bfb8 <HAL_UART_Receive_DMA+0x90>)
 800bf68:	6402      	str	r2, [r0, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bf6a:	4a14      	ldr	r2, [pc, #80]	; (800bfbc <HAL_UART_Receive_DMA+0x94>)
      huart->hdmarx->XferAbortCallback = NULL;
 800bf6c:	e9c0 2613 	strd	r2, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bf70:	460a      	mov	r2, r1
 800bf72:	f10c 0124 	add.w	r1, ip, #36	; 0x24
 800bf76:	f7fb f959 	bl	800722c <HAL_DMA_Start_IT>
 800bf7a:	b140      	cbz	r0, 800bf8e <HAL_UART_Receive_DMA+0x66>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bf7c:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800bf7e:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bf82:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 800bf86:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
      return HAL_ERROR;
 800bf8a:	2001      	movs	r0, #1
 800bf8c:	e00f      	b.n	800bfae <HAL_UART_Receive_DMA+0x86>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf8e:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 800bf90:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf92:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800bf94:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf9c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf9e:	689a      	ldr	r2, [r3, #8]
 800bfa0:	f042 0201 	orr.w	r2, r2, #1
 800bfa4:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfa6:	689a      	ldr	r2, [r3, #8]
 800bfa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfac:	609a      	str	r2, [r3, #8]
}
 800bfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800bfb0:	2002      	movs	r0, #2
 800bfb2:	e7fc      	b.n	800bfae <HAL_UART_Receive_DMA+0x86>
 800bfb4:	0800c331 	.word	0x0800c331
 800bfb8:	0800c36d 	.word	0x0800c36d
 800bfbc:	0800c379 	.word	0x0800c379

0800bfc0 <HAL_UART_DMAPause>:
  __HAL_LOCK(huart);
 800bfc0:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bfc4:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  __HAL_LOCK(huart);
 800bfc8:	2b01      	cmp	r3, #1
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bfca:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 800bfce:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 800bfd0:	d022      	beq.n	800c018 <HAL_UART_DMAPause+0x58>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bfd8:	6803      	ldr	r3, [r0, #0]
 800bfda:	689c      	ldr	r4, [r3, #8]
 800bfdc:	0624      	lsls	r4, r4, #24
 800bfde:	d505      	bpl.n	800bfec <HAL_UART_DMAPause+0x2c>
 800bfe0:	2a21      	cmp	r2, #33	; 0x21
 800bfe2:	d103      	bne.n	800bfec <HAL_UART_DMAPause+0x2c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bfe4:	689a      	ldr	r2, [r3, #8]
 800bfe6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bfea:	609a      	str	r2, [r3, #8]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bfec:	689a      	ldr	r2, [r3, #8]
 800bfee:	0652      	lsls	r2, r2, #25
 800bff0:	d50d      	bpl.n	800c00e <HAL_UART_DMAPause+0x4e>
 800bff2:	2922      	cmp	r1, #34	; 0x22
 800bff4:	d10b      	bne.n	800c00e <HAL_UART_DMAPause+0x4e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bffc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bffe:	689a      	ldr	r2, [r3, #8]
 800c000:	f022 0201 	bic.w	r2, r2, #1
 800c004:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c006:	689a      	ldr	r2, [r3, #8]
 800c008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c00c:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(huart);
 800c00e:	2300      	movs	r3, #0
 800c010:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800c014:	4618      	mov	r0, r3
}
 800c016:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800c018:	2002      	movs	r0, #2
 800c01a:	e7fc      	b.n	800c016 <HAL_UART_DMAPause+0x56>

0800c01c <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 800c01c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800c020:	2b01      	cmp	r3, #1
 800c022:	d023      	beq.n	800c06c <HAL_UART_DMAResume+0x50>
 800c024:	2301      	movs	r3, #1
 800c026:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c02a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800c02e:	2b21      	cmp	r3, #33	; 0x21
 800c030:	d104      	bne.n	800c03c <HAL_UART_DMAResume+0x20>
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c032:	6802      	ldr	r2, [r0, #0]
 800c034:	6893      	ldr	r3, [r2, #8]
 800c036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c03a:	6093      	str	r3, [r2, #8]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c03c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800c040:	2b22      	cmp	r3, #34	; 0x22
 800c042:	d10e      	bne.n	800c062 <HAL_UART_DMAResume+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c044:	6803      	ldr	r3, [r0, #0]
 800c046:	2208      	movs	r2, #8
 800c048:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c050:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c052:	689a      	ldr	r2, [r3, #8]
 800c054:	f042 0201 	orr.w	r2, r2, #1
 800c058:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c05a:	689a      	ldr	r2, [r3, #8]
 800c05c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c060:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(huart);
 800c062:	2300      	movs	r3, #0
 800c064:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800c068:	4618      	mov	r0, r3
 800c06a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c06c:	2002      	movs	r0, #2
}
 800c06e:	4770      	bx	lr

0800c070 <HAL_UART_DMAStop>:
{
 800c070:	b538      	push	{r3, r4, r5, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c072:	6803      	ldr	r3, [r0, #0]
{
 800c074:	4604      	mov	r4, r0
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c076:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c07a:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c07e:	6899      	ldr	r1, [r3, #8]
 800c080:	0609      	lsls	r1, r1, #24
 800c082:	d520      	bpl.n	800c0c6 <HAL_UART_DMAStop+0x56>
 800c084:	2a21      	cmp	r2, #33	; 0x21
 800c086:	d11e      	bne.n	800c0c6 <HAL_UART_DMAStop+0x56>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c088:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800c08a:	6f40      	ldr	r0, [r0, #116]	; 0x74
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c08c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c090:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800c092:	b160      	cbz	r0, 800c0ae <HAL_UART_DMAStop+0x3e>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c094:	f7fb f9e8 	bl	8007468 <HAL_DMA_Abort>
 800c098:	b148      	cbz	r0, 800c0ae <HAL_UART_DMAStop+0x3e>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c09a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c09c:	f7fb fef2 	bl	8007e84 <HAL_DMA_GetError>
 800c0a0:	2820      	cmp	r0, #32
 800c0a2:	d104      	bne.n	800c0ae <HAL_UART_DMAStop+0x3e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c0a4:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 800c0a6:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c0a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800c0ac:	bd38      	pop	{r3, r4, r5, pc}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c0ae:	6823      	ldr	r3, [r4, #0]
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c0b6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c0b8:	689a      	ldr	r2, [r3, #8]
 800c0ba:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c0be:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 800c0c0:	2320      	movs	r3, #32
 800c0c2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c0c6:	6823      	ldr	r3, [r4, #0]
 800c0c8:	6898      	ldr	r0, [r3, #8]
 800c0ca:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800c0ce:	d0ed      	beq.n	800c0ac <HAL_UART_DMAStop+0x3c>
 800c0d0:	2d22      	cmp	r5, #34	; 0x22
 800c0d2:	d110      	bne.n	800c0f6 <HAL_UART_DMAStop+0x86>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0d4:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800c0d6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0dc:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800c0de:	b138      	cbz	r0, 800c0f0 <HAL_UART_DMAStop+0x80>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c0e0:	f7fb f9c2 	bl	8007468 <HAL_DMA_Abort>
 800c0e4:	b120      	cbz	r0, 800c0f0 <HAL_UART_DMAStop+0x80>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c0e6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800c0e8:	f7fb fecc 	bl	8007e84 <HAL_DMA_GetError>
 800c0ec:	2820      	cmp	r0, #32
 800c0ee:	d0d9      	beq.n	800c0a4 <HAL_UART_DMAStop+0x34>
    UART_EndRxTransfer(huart);
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f7ff fe46 	bl	800bd82 <UART_EndRxTransfer>
  return HAL_OK;
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	e7d8      	b.n	800c0ac <HAL_UART_DMAStop+0x3c>

0800c0fa <HAL_UART_TxCpltCallback>:
 800c0fa:	4770      	bx	lr

0800c0fc <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c0fc:	69c2      	ldr	r2, [r0, #28]
 800c0fe:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 800c102:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c104:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c106:	d00c      	beq.n	800c122 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 800c108:	2200      	movs	r2, #0
 800c10a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	689a      	ldr	r2, [r3, #8]
 800c112:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c116:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c11e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c120:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800c122:	4618      	mov	r0, r3
 800c124:	f7ff ffe9 	bl	800c0fa <HAL_UART_TxCpltCallback>
}
 800c128:	e7fa      	b.n	800c120 <UART_DMATransmitCplt+0x24>

0800c12a <HAL_UART_TxHalfCpltCallback>:
 800c12a:	4770      	bx	lr

0800c12c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c12c:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c12e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800c130:	f7ff fffb 	bl	800c12a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c134:	bd08      	pop	{r3, pc}

0800c136 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c136:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800c13a:	6802      	ldr	r2, [r0, #0]
 800c13c:	2922      	cmp	r1, #34	; 0x22
{
 800c13e:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c140:	d122      	bne.n	800c188 <UART_RxISR_8BIT+0x52>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c142:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c144:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800c148:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800c14a:	4022      	ands	r2, r4
 800c14c:	700a      	strb	r2, [r1, #0]
    huart->pRxBuffPtr++;
 800c14e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800c150:	3201      	adds	r2, #1
 800c152:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800c154:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800c158:	3a01      	subs	r2, #1
 800c15a:	b292      	uxth	r2, r2
 800c15c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c160:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800c164:	b292      	uxth	r2, r2
 800c166:	b972      	cbnz	r2, 800c186 <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c168:	6801      	ldr	r1, [r0, #0]
 800c16a:	680c      	ldr	r4, [r1, #0]
 800c16c:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800c170:	600c      	str	r4, [r1, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c172:	688c      	ldr	r4, [r1, #8]
 800c174:	f024 0401 	bic.w	r4, r4, #1
 800c178:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c17a:	2120      	movs	r1, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c17c:	66c2      	str	r2, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 800c17e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c182:	f7f8 fe91 	bl	8004ea8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c186:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c188:	6993      	ldr	r3, [r2, #24]
 800c18a:	f043 0308 	orr.w	r3, r3, #8
 800c18e:	6193      	str	r3, [r2, #24]
}
 800c190:	e7f9      	b.n	800c186 <UART_RxISR_8BIT+0x50>

0800c192 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c192:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800c196:	6802      	ldr	r2, [r0, #0]
 800c198:	2922      	cmp	r1, #34	; 0x22
{
 800c19a:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c19c:	d120      	bne.n	800c1e0 <UART_RxISR_16BIT+0x4e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c19e:	6a54      	ldr	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 800c1a0:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 800c1a4:	400c      	ands	r4, r1
 800c1a6:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800c1a8:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2U;
 800c1ac:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800c1ae:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 800c1b2:	3901      	subs	r1, #1
 800c1b4:	b289      	uxth	r1, r1
 800c1b6:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c1ba:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 800c1be:	b289      	uxth	r1, r1
 800c1c0:	b969      	cbnz	r1, 800c1de <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1c2:	6814      	ldr	r4, [r2, #0]
 800c1c4:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800c1c8:	6014      	str	r4, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1ca:	6894      	ldr	r4, [r2, #8]
 800c1cc:	f024 0401 	bic.w	r4, r4, #1
 800c1d0:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1d2:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c1d4:	66c1      	str	r1, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 800c1d6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c1da:	f7f8 fe65 	bl	8004ea8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1de:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1e0:	6993      	ldr	r3, [r2, #24]
 800c1e2:	f043 0308 	orr.w	r3, r3, #8
 800c1e6:	6193      	str	r3, [r2, #24]
}
 800c1e8:	e7f9      	b.n	800c1de <UART_RxISR_16BIT+0x4c>
	...

0800c1ec <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1ec:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800c1f0:	2b22      	cmp	r3, #34	; 0x22
{
 800c1f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f6:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1f8:	d13f      	bne.n	800c27a <UART_RxISR_8BIT_FIFOEN+0x8e>
  uint16_t  uhMask = huart->Mask;
 800c1fa:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c1fe:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c202:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c206:	4f20      	ldr	r7, [pc, #128]	; (800c288 <UART_RxISR_8BIT_FIFOEN+0x9c>)
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c208:	b9a5      	cbnz	r5, 800c234 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c20a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c20e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c210:	b173      	cbz	r3, 800c230 <UART_RxISR_8BIT_FIFOEN+0x44>
 800c212:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800c216:	429a      	cmp	r2, r3
 800c218:	d90a      	bls.n	800c230 <UART_RxISR_8BIT_FIFOEN+0x44>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	689a      	ldr	r2, [r3, #8]
 800c21e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c222:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c224:	4a19      	ldr	r2, [pc, #100]	; (800c28c <UART_RxISR_8BIT_FIFOEN+0xa0>)
 800c226:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	f042 0220 	orr.w	r2, r2, #32
 800c22e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c234:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c236:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c23a:	4033      	ands	r3, r6
 800c23c:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800c23e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c240:	3301      	adds	r3, #1
 800c242:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800c244:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c248:	3b01      	subs	r3, #1
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800c250:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c254:	b29b      	uxth	r3, r3
 800c256:	b96b      	cbnz	r3, 800c274 <UART_RxISR_8BIT_FIFOEN+0x88>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c258:	6822      	ldr	r2, [r4, #0]
        HAL_UART_RxCpltCallback(huart);
 800c25a:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c25c:	6811      	ldr	r1, [r2, #0]
 800c25e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800c262:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c264:	6891      	ldr	r1, [r2, #8]
 800c266:	4039      	ands	r1, r7
 800c268:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800c26a:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 800c26e:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800c270:	f7f8 fe1a 	bl	8004ea8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c274:	3d01      	subs	r5, #1
 800c276:	b2ad      	uxth	r5, r5
 800c278:	e7c6      	b.n	800c208 <UART_RxISR_8BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c27a:	6802      	ldr	r2, [r0, #0]
 800c27c:	6993      	ldr	r3, [r2, #24]
 800c27e:	f043 0308 	orr.w	r3, r3, #8
 800c282:	6193      	str	r3, [r2, #24]
}
 800c284:	e7d4      	b.n	800c230 <UART_RxISR_8BIT_FIFOEN+0x44>
 800c286:	bf00      	nop
 800c288:	effffffe 	.word	0xeffffffe
 800c28c:	0800c137 	.word	0x0800c137

0800c290 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c290:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800c294:	2b22      	cmp	r3, #34	; 0x22
{
 800c296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c29a:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c29c:	d13d      	bne.n	800c31a <UART_RxISR_16BIT_FIFOEN+0x8a>
  uint16_t  uhMask = huart->Mask;
 800c29e:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c2a2:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c2a6:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2aa:	4f1f      	ldr	r7, [pc, #124]	; (800c328 <UART_RxISR_16BIT_FIFOEN+0x98>)
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c2ac:	b9a5      	cbnz	r5, 800c2d8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c2ae:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c2b2:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c2b4:	b173      	cbz	r3, 800c2d4 <UART_RxISR_16BIT_FIFOEN+0x44>
 800c2b6:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d90a      	bls.n	800c2d4 <UART_RxISR_16BIT_FIFOEN+0x44>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c2be:	6823      	ldr	r3, [r4, #0]
 800c2c0:	689a      	ldr	r2, [r3, #8]
 800c2c2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c2c6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c2c8:	4a18      	ldr	r2, [pc, #96]	; (800c32c <UART_RxISR_16BIT_FIFOEN+0x9c>)
 800c2ca:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	f042 0220 	orr.w	r2, r2, #32
 800c2d2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c2d8:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c2da:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c2dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800c2de:	4031      	ands	r1, r6
 800c2e0:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 800c2e4:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800c2e6:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800c2ea:	3a01      	subs	r2, #1
 800c2ec:	b292      	uxth	r2, r2
 800c2ee:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800c2f2:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800c2f6:	b292      	uxth	r2, r2
 800c2f8:	b962      	cbnz	r2, 800c314 <UART_RxISR_16BIT_FIFOEN+0x84>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2fa:	6819      	ldr	r1, [r3, #0]
        HAL_UART_RxCpltCallback(huart);
 800c2fc:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2fe:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800c302:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c304:	6899      	ldr	r1, [r3, #8]
 800c306:	4039      	ands	r1, r7
 800c308:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800c30a:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 800c30e:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800c310:	f7f8 fdca 	bl	8004ea8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c314:	3d01      	subs	r5, #1
 800c316:	b2ad      	uxth	r5, r5
 800c318:	e7c8      	b.n	800c2ac <UART_RxISR_16BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c31a:	6802      	ldr	r2, [r0, #0]
 800c31c:	6993      	ldr	r3, [r2, #24]
 800c31e:	f043 0308 	orr.w	r3, r3, #8
 800c322:	6193      	str	r3, [r2, #24]
}
 800c324:	e7d6      	b.n	800c2d4 <UART_RxISR_16BIT_FIFOEN+0x44>
 800c326:	bf00      	nop
 800c328:	effffffe 	.word	0xeffffffe
 800c32c:	0800c193 	.word	0x0800c193

0800c330 <UART_DMAReceiveCplt>:
{
 800c330:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c332:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c334:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c33a:	d012      	beq.n	800c362 <UART_DMAReceiveCplt+0x32>
    huart->RxXferCount = 0U;
 800c33c:	2300      	movs	r3, #0
 800c33e:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c342:	6813      	ldr	r3, [r2, #0]
 800c344:	6819      	ldr	r1, [r3, #0]
 800c346:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800c34a:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c34c:	6899      	ldr	r1, [r3, #8]
 800c34e:	f021 0101 	bic.w	r1, r1, #1
 800c352:	6099      	str	r1, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c354:	6899      	ldr	r1, [r3, #8]
 800c356:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800c35a:	6099      	str	r1, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800c35c:	2320      	movs	r3, #32
 800c35e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  HAL_UART_RxCpltCallback(huart);
 800c362:	4610      	mov	r0, r2
 800c364:	f7f8 fda0 	bl	8004ea8 <HAL_UART_RxCpltCallback>
}
 800c368:	bd08      	pop	{r3, pc}

0800c36a <HAL_UART_RxHalfCpltCallback>:
 800c36a:	4770      	bx	lr

0800c36c <UART_DMARxHalfCplt>:
{
 800c36c:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800c36e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800c370:	f7ff fffb 	bl	800c36a <HAL_UART_RxHalfCpltCallback>
}
 800c374:	bd08      	pop	{r3, pc}

0800c376 <HAL_UART_ErrorCallback>:
 800c376:	4770      	bx	lr

0800c378 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c378:	6b81      	ldr	r1, [r0, #56]	; 0x38
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c37a:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c37c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c380:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
{
 800c384:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c386:	689c      	ldr	r4, [r3, #8]
 800c388:	0624      	lsls	r4, r4, #24
 800c38a:	d50f      	bpl.n	800c3ac <UART_DMAError+0x34>
 800c38c:	2a21      	cmp	r2, #33	; 0x21
 800c38e:	d10d      	bne.n	800c3ac <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
 800c390:	2200      	movs	r2, #0
 800c392:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c39c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c39e:	689a      	ldr	r2, [r3, #8]
 800c3a0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c3a4:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 800c3a6:	2220      	movs	r2, #32
 800c3a8:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	065b      	lsls	r3, r3, #25
 800c3b0:	d507      	bpl.n	800c3c2 <UART_DMAError+0x4a>
 800c3b2:	2822      	cmp	r0, #34	; 0x22
 800c3b4:	d105      	bne.n	800c3c2 <UART_DMAError+0x4a>
    huart->RxXferCount = 0U;
 800c3b6:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 800c3b8:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 800c3ba:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c3be:	f7ff fce0 	bl	800bd82 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c3c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
  HAL_UART_ErrorCallback(huart);
 800c3c6:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c3c8:	f043 0310 	orr.w	r3, r3, #16
 800c3cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  HAL_UART_ErrorCallback(huart);
 800c3d0:	f7ff ffd1 	bl	800c376 <HAL_UART_ErrorCallback>
}
 800c3d4:	bd10      	pop	{r4, pc}
	...

0800c3d8 <UART_SetConfig>:
{
 800c3d8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800c3dc:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800c3de:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c3e0:	69c0      	ldr	r0, [r0, #28]
{
 800c3e2:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c3e4:	6921      	ldr	r1, [r4, #16]
 800c3e6:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c3e8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c3ea:	430a      	orrs	r2, r1
 800c3ec:	6961      	ldr	r1, [r4, #20]
 800c3ee:	430a      	orrs	r2, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 800c3f0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c3f2:	4302      	orrs	r2, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 800c3f4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c3f6:	49a8      	ldr	r1, [pc, #672]	; (800c698 <UART_SetConfig+0x2c0>)
 800c3f8:	4029      	ands	r1, r5
 800c3fa:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c3fc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c3fe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c400:	685a      	ldr	r2, [r3, #4]
 800c402:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800c406:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c408:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c40a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c40c:	4aa3      	ldr	r2, [pc, #652]	; (800c69c <UART_SetConfig+0x2c4>)
 800c40e:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800c410:	bf1c      	itt	ne
 800c412:	6a22      	ldrne	r2, [r4, #32]
 800c414:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c416:	689a      	ldr	r2, [r3, #8]
 800c418:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 800c41c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800c420:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c422:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c424:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c428:	f022 020f 	bic.w	r2, r2, #15
 800c42c:	430a      	orrs	r2, r1
 800c42e:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c430:	4a9b      	ldr	r2, [pc, #620]	; (800c6a0 <UART_SetConfig+0x2c8>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d11c      	bne.n	800c470 <UART_SetConfig+0x98>
 800c436:	4b9b      	ldr	r3, [pc, #620]	; (800c6a4 <UART_SetConfig+0x2cc>)
 800c438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c43a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c43e:	2b28      	cmp	r3, #40	; 0x28
 800c440:	d86c      	bhi.n	800c51c <UART_SetConfig+0x144>
 800c442:	4a99      	ldr	r2, [pc, #612]	; (800c6a8 <UART_SetConfig+0x2d0>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c444:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c448:	5cd3      	ldrb	r3, [r2, r3]
 800c44a:	f040 8104 	bne.w	800c656 <UART_SetConfig+0x27e>
    switch (clocksource)
 800c44e:	2b08      	cmp	r3, #8
 800c450:	f000 80fa 	beq.w	800c648 <UART_SetConfig+0x270>
 800c454:	f200 80c3 	bhi.w	800c5de <UART_SetConfig+0x206>
 800c458:	2b01      	cmp	r3, #1
 800c45a:	f000 80f2 	beq.w	800c642 <UART_SetConfig+0x26a>
 800c45e:	f0c0 80eb 	bcc.w	800c638 <UART_SetConfig+0x260>
 800c462:	2b04      	cmp	r3, #4
 800c464:	d15a      	bne.n	800c51c <UART_SetConfig+0x144>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c466:	4668      	mov	r0, sp
 800c468:	f7fd fd4e 	bl	8009f08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c46c:	9801      	ldr	r0, [sp, #4]
        break;
 800c46e:	e0e5      	b.n	800c63c <UART_SetConfig+0x264>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c470:	4a8e      	ldr	r2, [pc, #568]	; (800c6ac <UART_SetConfig+0x2d4>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d107      	bne.n	800c486 <UART_SetConfig+0xae>
 800c476:	4b8b      	ldr	r3, [pc, #556]	; (800c6a4 <UART_SetConfig+0x2cc>)
 800c478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c47a:	f003 0307 	and.w	r3, r3, #7
 800c47e:	2b05      	cmp	r3, #5
 800c480:	d84c      	bhi.n	800c51c <UART_SetConfig+0x144>
 800c482:	4a8b      	ldr	r2, [pc, #556]	; (800c6b0 <UART_SetConfig+0x2d8>)
 800c484:	e7de      	b.n	800c444 <UART_SetConfig+0x6c>
 800c486:	4a8b      	ldr	r2, [pc, #556]	; (800c6b4 <UART_SetConfig+0x2dc>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d107      	bne.n	800c49c <UART_SetConfig+0xc4>
 800c48c:	4b85      	ldr	r3, [pc, #532]	; (800c6a4 <UART_SetConfig+0x2cc>)
 800c48e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c490:	f003 0307 	and.w	r3, r3, #7
 800c494:	2b05      	cmp	r3, #5
 800c496:	d841      	bhi.n	800c51c <UART_SetConfig+0x144>
 800c498:	4a87      	ldr	r2, [pc, #540]	; (800c6b8 <UART_SetConfig+0x2e0>)
 800c49a:	e7d3      	b.n	800c444 <UART_SetConfig+0x6c>
 800c49c:	4a87      	ldr	r2, [pc, #540]	; (800c6bc <UART_SetConfig+0x2e4>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d107      	bne.n	800c4b2 <UART_SetConfig+0xda>
 800c4a2:	4b80      	ldr	r3, [pc, #512]	; (800c6a4 <UART_SetConfig+0x2cc>)
 800c4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4a6:	f003 0307 	and.w	r3, r3, #7
 800c4aa:	2b05      	cmp	r3, #5
 800c4ac:	d836      	bhi.n	800c51c <UART_SetConfig+0x144>
 800c4ae:	4a84      	ldr	r2, [pc, #528]	; (800c6c0 <UART_SetConfig+0x2e8>)
 800c4b0:	e7c8      	b.n	800c444 <UART_SetConfig+0x6c>
 800c4b2:	4a84      	ldr	r2, [pc, #528]	; (800c6c4 <UART_SetConfig+0x2ec>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d107      	bne.n	800c4c8 <UART_SetConfig+0xf0>
 800c4b8:	4b7a      	ldr	r3, [pc, #488]	; (800c6a4 <UART_SetConfig+0x2cc>)
 800c4ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4bc:	f003 0307 	and.w	r3, r3, #7
 800c4c0:	2b05      	cmp	r3, #5
 800c4c2:	d82b      	bhi.n	800c51c <UART_SetConfig+0x144>
 800c4c4:	4a80      	ldr	r2, [pc, #512]	; (800c6c8 <UART_SetConfig+0x2f0>)
 800c4c6:	e7bd      	b.n	800c444 <UART_SetConfig+0x6c>
 800c4c8:	4a80      	ldr	r2, [pc, #512]	; (800c6cc <UART_SetConfig+0x2f4>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d107      	bne.n	800c4de <UART_SetConfig+0x106>
 800c4ce:	4b75      	ldr	r3, [pc, #468]	; (800c6a4 <UART_SetConfig+0x2cc>)
 800c4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c4d6:	2b28      	cmp	r3, #40	; 0x28
 800c4d8:	d820      	bhi.n	800c51c <UART_SetConfig+0x144>
 800c4da:	4a7d      	ldr	r2, [pc, #500]	; (800c6d0 <UART_SetConfig+0x2f8>)
 800c4dc:	e7b2      	b.n	800c444 <UART_SetConfig+0x6c>
 800c4de:	4a7d      	ldr	r2, [pc, #500]	; (800c6d4 <UART_SetConfig+0x2fc>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d107      	bne.n	800c4f4 <UART_SetConfig+0x11c>
 800c4e4:	4b6f      	ldr	r3, [pc, #444]	; (800c6a4 <UART_SetConfig+0x2cc>)
 800c4e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4e8:	f003 0307 	and.w	r3, r3, #7
 800c4ec:	2b05      	cmp	r3, #5
 800c4ee:	d815      	bhi.n	800c51c <UART_SetConfig+0x144>
 800c4f0:	4a79      	ldr	r2, [pc, #484]	; (800c6d8 <UART_SetConfig+0x300>)
 800c4f2:	e7a7      	b.n	800c444 <UART_SetConfig+0x6c>
 800c4f4:	4a79      	ldr	r2, [pc, #484]	; (800c6dc <UART_SetConfig+0x304>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d107      	bne.n	800c50a <UART_SetConfig+0x132>
 800c4fa:	4b6a      	ldr	r3, [pc, #424]	; (800c6a4 <UART_SetConfig+0x2cc>)
 800c4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4fe:	f003 0307 	and.w	r3, r3, #7
 800c502:	2b05      	cmp	r3, #5
 800c504:	d80a      	bhi.n	800c51c <UART_SetConfig+0x144>
 800c506:	4a76      	ldr	r2, [pc, #472]	; (800c6e0 <UART_SetConfig+0x308>)
 800c508:	e79c      	b.n	800c444 <UART_SetConfig+0x6c>
 800c50a:	4a64      	ldr	r2, [pc, #400]	; (800c69c <UART_SetConfig+0x2c4>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d105      	bne.n	800c51c <UART_SetConfig+0x144>
 800c510:	4b64      	ldr	r3, [pc, #400]	; (800c6a4 <UART_SetConfig+0x2cc>)
 800c512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c514:	f003 0307 	and.w	r3, r3, #7
 800c518:	2b05      	cmp	r3, #5
 800c51a:	d901      	bls.n	800c520 <UART_SetConfig+0x148>
        ret = HAL_ERROR;
 800c51c:	2001      	movs	r0, #1
 800c51e:	e04b      	b.n	800c5b8 <UART_SetConfig+0x1e0>
    switch (clocksource)
 800c520:	4a70      	ldr	r2, [pc, #448]	; (800c6e4 <UART_SetConfig+0x30c>)
 800c522:	5cd3      	ldrb	r3, [r2, r3]
 800c524:	2b08      	cmp	r3, #8
 800c526:	d050      	beq.n	800c5ca <UART_SetConfig+0x1f2>
 800c528:	d808      	bhi.n	800c53c <UART_SetConfig+0x164>
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	d03f      	beq.n	800c5ae <UART_SetConfig+0x1d6>
 800c52e:	2b04      	cmp	r3, #4
 800c530:	d1f4      	bne.n	800c51c <UART_SetConfig+0x144>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c532:	4668      	mov	r0, sp
 800c534:	f7fd fce8 	bl	8009f08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c538:	9801      	ldr	r0, [sp, #4]
        break;
 800c53a:	e03a      	b.n	800c5b2 <UART_SetConfig+0x1da>
    switch (clocksource)
 800c53c:	2b20      	cmp	r3, #32
 800c53e:	d04c      	beq.n	800c5da <UART_SetConfig+0x202>
 800c540:	2b40      	cmp	r3, #64	; 0x40
 800c542:	d047      	beq.n	800c5d4 <UART_SetConfig+0x1fc>
 800c544:	2b10      	cmp	r3, #16
 800c546:	d1e9      	bne.n	800c51c <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c548:	4b56      	ldr	r3, [pc, #344]	; (800c6a4 <UART_SetConfig+0x2cc>)
 800c54a:	4867      	ldr	r0, [pc, #412]	; (800c6e8 <UART_SetConfig+0x310>)
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	f012 0f20 	tst.w	r2, #32
 800c552:	d003      	beq.n	800c55c <UART_SetConfig+0x184>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c55a:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c55c:	4b63      	ldr	r3, [pc, #396]	; (800c6ec <UART_SetConfig+0x314>)
 800c55e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c560:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c562:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c566:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c56a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c56e:	4299      	cmp	r1, r3
 800c570:	d8d4      	bhi.n	800c51c <UART_SetConfig+0x144>
 800c572:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800c576:	d8d1      	bhi.n	800c51c <UART_SetConfig+0x144>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c578:	2300      	movs	r3, #0
 800c57a:	2100      	movs	r1, #0
 800c57c:	f7f3 ff08 	bl	8000390 <__aeabi_uldivmod>
 800c580:	462a      	mov	r2, r5
 800c582:	020f      	lsls	r7, r1, #8
 800c584:	2300      	movs	r3, #0
 800c586:	0206      	lsls	r6, r0, #8
 800c588:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800c58c:	0868      	lsrs	r0, r5, #1
 800c58e:	eb16 0b00 	adds.w	fp, r6, r0
 800c592:	f147 0c00 	adc.w	ip, r7, #0
 800c596:	4658      	mov	r0, fp
 800c598:	4661      	mov	r1, ip
 800c59a:	f7f3 fef9 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c59e:	4b54      	ldr	r3, [pc, #336]	; (800c6f0 <UART_SetConfig+0x318>)
 800c5a0:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d8b9      	bhi.n	800c51c <UART_SetConfig+0x144>
          huart->Instance->BRR = usartdiv;
 800c5a8:	6823      	ldr	r3, [r4, #0]
 800c5aa:	60d8      	str	r0, [r3, #12]
 800c5ac:	e003      	b.n	800c5b6 <UART_SetConfig+0x1de>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c5ae:	f7fd fc99 	bl	8009ee4 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	d1d2      	bne.n	800c55c <UART_SetConfig+0x184>
 800c5b6:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800c5be:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800c5c2:	6723      	str	r3, [r4, #112]	; 0x70
}
 800c5c4:	b006      	add	sp, #24
 800c5c6:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5ca:	a803      	add	r0, sp, #12
 800c5cc:	f7fd fd42 	bl	800a054 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5d0:	9804      	ldr	r0, [sp, #16]
        break;
 800c5d2:	e7ee      	b.n	800c5b2 <UART_SetConfig+0x1da>
        pclk = (uint32_t) LSE_VALUE;
 800c5d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c5d8:	e7c0      	b.n	800c55c <UART_SetConfig+0x184>
        pclk = (uint32_t) CSI_VALUE;
 800c5da:	4846      	ldr	r0, [pc, #280]	; (800c6f4 <UART_SetConfig+0x31c>)
 800c5dc:	e7be      	b.n	800c55c <UART_SetConfig+0x184>
    switch (clocksource)
 800c5de:	2b20      	cmp	r3, #32
 800c5e0:	d037      	beq.n	800c652 <UART_SetConfig+0x27a>
 800c5e2:	2b40      	cmp	r3, #64	; 0x40
 800c5e4:	d00b      	beq.n	800c5fe <UART_SetConfig+0x226>
 800c5e6:	2b10      	cmp	r3, #16
 800c5e8:	d198      	bne.n	800c51c <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5ea:	4b2e      	ldr	r3, [pc, #184]	; (800c6a4 <UART_SetConfig+0x2cc>)
 800c5ec:	483e      	ldr	r0, [pc, #248]	; (800c6e8 <UART_SetConfig+0x310>)
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	f012 0f20 	tst.w	r2, #32
 800c5f4:	d003      	beq.n	800c5fe <UART_SetConfig+0x226>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c5fc:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c600:	4b3a      	ldr	r3, [pc, #232]	; (800c6ec <UART_SetConfig+0x314>)
 800c602:	6862      	ldr	r2, [r4, #4]
 800c604:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800c608:	fbb0 f0f3 	udiv	r0, r0, r3
 800c60c:	0853      	lsrs	r3, r2, #1
 800c60e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800c612:	fbb0 f0f2 	udiv	r0, r0, r2
 800c616:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c618:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800c61c:	f1a3 0110 	sub.w	r1, r3, #16
 800c620:	4291      	cmp	r1, r2
 800c622:	f63f af7b 	bhi.w	800c51c <UART_SetConfig+0x144>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c626:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c62a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800c62e:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c630:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 800c632:	4318      	orrs	r0, r3
 800c634:	60d0      	str	r0, [r2, #12]
 800c636:	e7be      	b.n	800c5b6 <UART_SetConfig+0x1de>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c638:	f7fc feb8 	bl	80093ac <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d0ba      	beq.n	800c5b6 <UART_SetConfig+0x1de>
 800c640:	e7dd      	b.n	800c5fe <UART_SetConfig+0x226>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c642:	f7fc fec5 	bl	80093d0 <HAL_RCC_GetPCLK2Freq>
        break;
 800c646:	e7f9      	b.n	800c63c <UART_SetConfig+0x264>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c648:	a803      	add	r0, sp, #12
 800c64a:	f7fd fd03 	bl	800a054 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c64e:	9804      	ldr	r0, [sp, #16]
        break;
 800c650:	e7f4      	b.n	800c63c <UART_SetConfig+0x264>
        pclk = (uint32_t) CSI_VALUE;
 800c652:	4828      	ldr	r0, [pc, #160]	; (800c6f4 <UART_SetConfig+0x31c>)
 800c654:	e7d3      	b.n	800c5fe <UART_SetConfig+0x226>
    switch (clocksource)
 800c656:	2b08      	cmp	r3, #8
 800c658:	d06a      	beq.n	800c730 <UART_SetConfig+0x358>
 800c65a:	d80a      	bhi.n	800c672 <UART_SetConfig+0x29a>
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d064      	beq.n	800c72a <UART_SetConfig+0x352>
 800c660:	d35d      	bcc.n	800c71e <UART_SetConfig+0x346>
 800c662:	2b04      	cmp	r3, #4
 800c664:	f47f af5a 	bne.w	800c51c <UART_SetConfig+0x144>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c668:	4668      	mov	r0, sp
 800c66a:	f7fd fc4d 	bl	8009f08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c66e:	9801      	ldr	r0, [sp, #4]
        break;
 800c670:	e057      	b.n	800c722 <UART_SetConfig+0x34a>
    switch (clocksource)
 800c672:	2b20      	cmp	r3, #32
 800c674:	d061      	beq.n	800c73a <UART_SetConfig+0x362>
 800c676:	2b40      	cmp	r3, #64	; 0x40
 800c678:	d03e      	beq.n	800c6f8 <UART_SetConfig+0x320>
 800c67a:	2b10      	cmp	r3, #16
 800c67c:	f47f af4e 	bne.w	800c51c <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c680:	4b08      	ldr	r3, [pc, #32]	; (800c6a4 <UART_SetConfig+0x2cc>)
 800c682:	4819      	ldr	r0, [pc, #100]	; (800c6e8 <UART_SetConfig+0x310>)
 800c684:	681a      	ldr	r2, [r3, #0]
 800c686:	f012 0f20 	tst.w	r2, #32
 800c68a:	d037      	beq.n	800c6fc <UART_SetConfig+0x324>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c692:	40d8      	lsrs	r0, r3
 800c694:	e032      	b.n	800c6fc <UART_SetConfig+0x324>
 800c696:	bf00      	nop
 800c698:	cfff69f3 	.word	0xcfff69f3
 800c69c:	58000c00 	.word	0x58000c00
 800c6a0:	40011000 	.word	0x40011000
 800c6a4:	58024400 	.word	0x58024400
 800c6a8:	08015e68 	.word	0x08015e68
 800c6ac:	40004400 	.word	0x40004400
 800c6b0:	08015e91 	.word	0x08015e91
 800c6b4:	40004800 	.word	0x40004800
 800c6b8:	08015e91 	.word	0x08015e91
 800c6bc:	40004c00 	.word	0x40004c00
 800c6c0:	08015e91 	.word	0x08015e91
 800c6c4:	40005000 	.word	0x40005000
 800c6c8:	08015e91 	.word	0x08015e91
 800c6cc:	40011400 	.word	0x40011400
 800c6d0:	08015e68 	.word	0x08015e68
 800c6d4:	40007800 	.word	0x40007800
 800c6d8:	08015e91 	.word	0x08015e91
 800c6dc:	40007c00 	.word	0x40007c00
 800c6e0:	08015e91 	.word	0x08015e91
 800c6e4:	08015e97 	.word	0x08015e97
 800c6e8:	03d09000 	.word	0x03d09000
 800c6ec:	08015e9e 	.word	0x08015e9e
 800c6f0:	000ffcff 	.word	0x000ffcff
 800c6f4:	003d0900 	.word	0x003d0900
        pclk = (uint32_t) LSE_VALUE;
 800c6f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c6fe:	4a10      	ldr	r2, [pc, #64]	; (800c740 <UART_SetConfig+0x368>)
 800c700:	6863      	ldr	r3, [r4, #4]
 800c702:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800c706:	fbb0 f0f2 	udiv	r0, r0, r2
 800c70a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c70e:	fbb0 f0f3 	udiv	r0, r0, r3
 800c712:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c714:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800c718:	f1a0 0210 	sub.w	r2, r0, #16
 800c71c:	e742      	b.n	800c5a4 <UART_SetConfig+0x1cc>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c71e:	f7fc fe45 	bl	80093ac <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c722:	2800      	cmp	r0, #0
 800c724:	f43f af47 	beq.w	800c5b6 <UART_SetConfig+0x1de>
 800c728:	e7e8      	b.n	800c6fc <UART_SetConfig+0x324>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c72a:	f7fc fe51 	bl	80093d0 <HAL_RCC_GetPCLK2Freq>
        break;
 800c72e:	e7f8      	b.n	800c722 <UART_SetConfig+0x34a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c730:	a803      	add	r0, sp, #12
 800c732:	f7fd fc8f 	bl	800a054 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c736:	9804      	ldr	r0, [sp, #16]
        break;
 800c738:	e7f3      	b.n	800c722 <UART_SetConfig+0x34a>
        pclk = (uint32_t) CSI_VALUE;
 800c73a:	4802      	ldr	r0, [pc, #8]	; (800c744 <UART_SetConfig+0x36c>)
 800c73c:	e7de      	b.n	800c6fc <UART_SetConfig+0x324>
 800c73e:	bf00      	nop
 800c740:	08015e9e 	.word	0x08015e9e
 800c744:	003d0900 	.word	0x003d0900

0800c748 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c748:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c74a:	07da      	lsls	r2, r3, #31
{
 800c74c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c74e:	d506      	bpl.n	800c75e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c750:	6801      	ldr	r1, [r0, #0]
 800c752:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800c754:	684a      	ldr	r2, [r1, #4]
 800c756:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c75a:	4322      	orrs	r2, r4
 800c75c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c75e:	079c      	lsls	r4, r3, #30
 800c760:	d506      	bpl.n	800c770 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c762:	6801      	ldr	r1, [r0, #0]
 800c764:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800c766:	684a      	ldr	r2, [r1, #4]
 800c768:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c76c:	4322      	orrs	r2, r4
 800c76e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c770:	0759      	lsls	r1, r3, #29
 800c772:	d506      	bpl.n	800c782 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c774:	6801      	ldr	r1, [r0, #0]
 800c776:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c778:	684a      	ldr	r2, [r1, #4]
 800c77a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c77e:	4322      	orrs	r2, r4
 800c780:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c782:	071a      	lsls	r2, r3, #28
 800c784:	d506      	bpl.n	800c794 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c786:	6801      	ldr	r1, [r0, #0]
 800c788:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800c78a:	684a      	ldr	r2, [r1, #4]
 800c78c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c790:	4322      	orrs	r2, r4
 800c792:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c794:	06dc      	lsls	r4, r3, #27
 800c796:	d506      	bpl.n	800c7a6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c798:	6801      	ldr	r1, [r0, #0]
 800c79a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c79c:	688a      	ldr	r2, [r1, #8]
 800c79e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c7a2:	4322      	orrs	r2, r4
 800c7a4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c7a6:	0699      	lsls	r1, r3, #26
 800c7a8:	d506      	bpl.n	800c7b8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c7aa:	6801      	ldr	r1, [r0, #0]
 800c7ac:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c7ae:	688a      	ldr	r2, [r1, #8]
 800c7b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c7b4:	4322      	orrs	r2, r4
 800c7b6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c7b8:	065a      	lsls	r2, r3, #25
 800c7ba:	d510      	bpl.n	800c7de <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c7bc:	6801      	ldr	r1, [r0, #0]
 800c7be:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800c7c0:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c7c2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c7c6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c7ca:	ea42 0204 	orr.w	r2, r2, r4
 800c7ce:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c7d0:	d105      	bne.n	800c7de <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c7d2:	684a      	ldr	r2, [r1, #4]
 800c7d4:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800c7d6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800c7da:	4322      	orrs	r2, r4
 800c7dc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c7de:	061b      	lsls	r3, r3, #24
 800c7e0:	d506      	bpl.n	800c7f0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c7e2:	6802      	ldr	r2, [r0, #0]
 800c7e4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800c7e6:	6853      	ldr	r3, [r2, #4]
 800c7e8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c7ec:	430b      	orrs	r3, r1
 800c7ee:	6053      	str	r3, [r2, #4]
}
 800c7f0:	bd10      	pop	{r4, pc}

0800c7f2 <UART_WaitOnFlagUntilTimeout>:
{
 800c7f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f6:	9d06      	ldr	r5, [sp, #24]
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	460f      	mov	r7, r1
 800c7fc:	4616      	mov	r6, r2
 800c7fe:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c800:	6821      	ldr	r1, [r4, #0]
 800c802:	69ca      	ldr	r2, [r1, #28]
 800c804:	ea37 0302 	bics.w	r3, r7, r2
 800c808:	bf0c      	ite	eq
 800c80a:	2201      	moveq	r2, #1
 800c80c:	2200      	movne	r2, #0
 800c80e:	42b2      	cmp	r2, r6
 800c810:	d001      	beq.n	800c816 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800c812:	2000      	movs	r0, #0
 800c814:	e01a      	b.n	800c84c <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800c816:	1c68      	adds	r0, r5, #1
 800c818:	d0f3      	beq.n	800c802 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c81a:	f7f9 faf7 	bl	8005e0c <HAL_GetTick>
 800c81e:	eba0 0008 	sub.w	r0, r0, r8
 800c822:	42a8      	cmp	r0, r5
 800c824:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c826:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c828:	d800      	bhi.n	800c82c <UART_WaitOnFlagUntilTimeout+0x3a>
 800c82a:	b98d      	cbnz	r5, 800c850 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c82c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c830:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c832:	6883      	ldr	r3, [r0, #8]
 800c834:	f023 0301 	bic.w	r3, r3, #1
 800c838:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800c83a:	2320      	movs	r3, #32
 800c83c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c840:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800c844:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800c846:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800c848:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 800c84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c850:	075a      	lsls	r2, r3, #29
 800c852:	d5d5      	bpl.n	800c800 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c854:	69c3      	ldr	r3, [r0, #28]
 800c856:	051b      	lsls	r3, r3, #20
 800c858:	d5d2      	bpl.n	800c800 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c85a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c85e:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c860:	6803      	ldr	r3, [r0, #0]
 800c862:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c866:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c868:	6883      	ldr	r3, [r0, #8]
 800c86a:	f023 0301 	bic.w	r3, r3, #1
 800c86e:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800c870:	2320      	movs	r3, #32
 800c872:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c876:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c87a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800c87e:	e7e1      	b.n	800c844 <UART_WaitOnFlagUntilTimeout+0x52>

0800c880 <UART_CheckIdleState>:
{
 800c880:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c882:	2600      	movs	r6, #0
{
 800c884:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c886:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 800c88a:	f7f9 fabf 	bl	8005e0c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c88e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c890:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	071a      	lsls	r2, r3, #28
 800c896:	d417      	bmi.n	800c8c8 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c898:	6823      	ldr	r3, [r4, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	075b      	lsls	r3, r3, #29
 800c89e:	d50a      	bpl.n	800c8b6 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	462b      	mov	r3, r5
 800c8b0:	f7ff ff9f 	bl	800c7f2 <UART_WaitOnFlagUntilTimeout>
 800c8b4:	b9a0      	cbnz	r0, 800c8e0 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 800c8b6:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800c8b8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800c8ba:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800c8be:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c8c2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 800c8c6:	e00c      	b.n	800c8e2 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c8cc:	4632      	mov	r2, r6
 800c8ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f7ff ff8b 	bl	800c7f2 <UART_WaitOnFlagUntilTimeout>
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	d0db      	beq.n	800c898 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800c8e0:	2003      	movs	r0, #3
}
 800c8e2:	b002      	add	sp, #8
 800c8e4:	bd70      	pop	{r4, r5, r6, pc}

0800c8e6 <HAL_UART_Init>:
{
 800c8e6:	b510      	push	{r4, lr}
  if (huart == NULL)
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	b350      	cbz	r0, 800c942 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800c8ec:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800c8f0:	b91b      	cbnz	r3, 800c8fa <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800c8f2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 800c8f6:	f7f6 ffcf 	bl	8003898 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800c8fa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c8fc:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c8fe:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800c900:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 800c904:	6813      	ldr	r3, [r2, #0]
 800c906:	f023 0301 	bic.w	r3, r3, #1
 800c90a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c90c:	f7ff fd64 	bl	800c3d8 <UART_SetConfig>
 800c910:	2801      	cmp	r0, #1
 800c912:	d016      	beq.n	800c942 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c914:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c916:	b113      	cbz	r3, 800c91e <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 800c918:	4620      	mov	r0, r4
 800c91a:	f7ff ff15 	bl	800c748 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c91e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800c920:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c922:	685a      	ldr	r2, [r3, #4]
 800c924:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c928:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c92a:	689a      	ldr	r2, [r3, #8]
 800c92c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c930:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	f042 0201 	orr.w	r2, r2, #1
}
 800c938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800c93c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800c93e:	f7ff bf9f 	b.w	800c880 <UART_CheckIdleState>
}
 800c942:	2001      	movs	r0, #1
 800c944:	bd10      	pop	{r4, pc}
	...

0800c948 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c948:	b084      	sub	sp, #16
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c94a:	f240 1307 	movw	r3, #263	; 0x107
 800c94e:	4a17      	ldr	r2, [pc, #92]	; (800c9ac <UARTEx_SetNbDataToProcess+0x64>)
 800c950:	e9cd 2300 	strd	r2, r3, [sp]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c954:	4b16      	ldr	r3, [pc, #88]	; (800c9b0 <UARTEx_SetNbDataToProcess+0x68>)
 800c956:	9302      	str	r3, [sp, #8]
 800c958:	f1a3 2303 	sub.w	r3, r3, #50332416	; 0x3000300
 800c95c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800c960:	9303      	str	r3, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c962:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800c964:	b923      	cbnz	r3, 800c970 <UARTEx_SetNbDataToProcess+0x28>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 800c966:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800c96a:	6683      	str	r3, [r0, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c96c:	b004      	add	sp, #16
 800c96e:	4770      	bx	lr
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c970:	6802      	ldr	r2, [r0, #0]
 800c972:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c974:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c976:	aa04      	add	r2, sp, #16
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c978:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c97c:	eb02 7151 	add.w	r1, r2, r1, lsr #29
 800c980:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800c984:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 800c988:	0112      	lsls	r2, r2, #4
 800c98a:	fb92 f2f1 	sdiv	r2, r2, r1
 800c98e:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c992:	aa04      	add	r2, sp, #16
 800c994:	4413      	add	r3, r2
 800c996:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800c99a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800c99e:	0112      	lsls	r2, r2, #4
 800c9a0:	fb92 f3f3 	sdiv	r3, r2, r3
 800c9a4:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 800c9a8:	e7e0      	b.n	800c96c <UARTEx_SetNbDataToProcess+0x24>
 800c9aa:	bf00      	nop
 800c9ac:	03010101 	.word	0x03010101
 800c9b0:	04020408 	.word	0x04020408

0800c9b4 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800c9b4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d014      	beq.n	800c9e6 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9bc:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c9be:	2324      	movs	r3, #36	; 0x24
 800c9c0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9c4:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800c9c6:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c9c8:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800c9cc:	f023 0301 	bic.w	r3, r3, #1
 800c9d0:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9d6:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c9d8:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800c9da:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_READY;
 800c9de:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return HAL_OK;
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c9e6:	2002      	movs	r0, #2
}
 800c9e8:	4770      	bx	lr

0800c9ea <HAL_UARTEx_SetTxFifoThreshold>:
{
 800c9ea:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800c9ec:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 800c9f0:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d01b      	beq.n	800ca2e <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800c9fc:	2324      	movs	r3, #36	; 0x24
 800c9fe:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca02:	6803      	ldr	r3, [r0, #0]
 800ca04:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	f022 0201 	bic.w	r2, r2, #1
 800ca0c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ca0e:	689a      	ldr	r2, [r3, #8]
 800ca10:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800ca14:	4311      	orrs	r1, r2
 800ca16:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800ca18:	f7ff ff96 	bl	800c948 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca1c:	6803      	ldr	r3, [r0, #0]
 800ca1e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ca20:	2320      	movs	r3, #32
 800ca22:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800ca26:	2000      	movs	r0, #0
 800ca28:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800ca2c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800ca2e:	2002      	movs	r0, #2
 800ca30:	e7fc      	b.n	800ca2c <HAL_UARTEx_SetTxFifoThreshold+0x42>

0800ca32 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800ca32:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800ca34:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 800ca38:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800ca3a:	2b01      	cmp	r3, #1
 800ca3c:	d01b      	beq.n	800ca76 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800ca3e:	2301      	movs	r3, #1
 800ca40:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800ca44:	2324      	movs	r3, #36	; 0x24
 800ca46:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca4a:	6803      	ldr	r3, [r0, #0]
 800ca4c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	f022 0201 	bic.w	r2, r2, #1
 800ca54:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ca56:	689a      	ldr	r2, [r3, #8]
 800ca58:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800ca5c:	4311      	orrs	r1, r2
 800ca5e:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800ca60:	f7ff ff72 	bl	800c948 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca64:	6803      	ldr	r3, [r0, #0]
 800ca66:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ca68:	2320      	movs	r3, #32
 800ca6a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800ca6e:	2000      	movs	r0, #0
 800ca70:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800ca74:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800ca76:	2002      	movs	r0, #2
 800ca78:	e7fc      	b.n	800ca74 <HAL_UARTEx_SetRxFifoThreshold+0x42>
	...

0800ca7c <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca7c:	4b12      	ldr	r3, [pc, #72]	; (800cac8 <SDMMC_GetCmdResp2+0x4c>)
 800ca7e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca88:	f241 3388 	movw	r3, #5000	; 0x1388
 800ca8c:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800ca8e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800ca92:	d315      	bcc.n	800cac0 <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800ca94:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca96:	f012 0f45 	tst.w	r2, #69	; 0x45
 800ca9a:	d0f8      	beq.n	800ca8e <SDMMC_GetCmdResp2+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca9c:	0492      	lsls	r2, r2, #18
 800ca9e:	d4f6      	bmi.n	800ca8e <SDMMC_GetCmdResp2+0x12>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800caa0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800caa2:	075b      	lsls	r3, r3, #29
 800caa4:	d503      	bpl.n	800caae <SDMMC_GetCmdResp2+0x32>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800caa6:	2304      	movs	r3, #4

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800caa8:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 800caaa:	4618      	mov	r0, r3
 800caac:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800caae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cab0:	f013 0301 	ands.w	r3, r3, #1
 800cab4:	d001      	beq.n	800caba <SDMMC_GetCmdResp2+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cab6:	2301      	movs	r3, #1
 800cab8:	e7f6      	b.n	800caa8 <SDMMC_GetCmdResp2+0x2c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800caba:	4a04      	ldr	r2, [pc, #16]	; (800cacc <SDMMC_GetCmdResp2+0x50>)
 800cabc:	6382      	str	r2, [r0, #56]	; 0x38
 800cabe:	e7f4      	b.n	800caaa <SDMMC_GetCmdResp2+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800cac0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cac4:	e7f1      	b.n	800caaa <SDMMC_GetCmdResp2+0x2e>
 800cac6:	bf00      	nop
 800cac8:	24000000 	.word	0x24000000
 800cacc:	002000c5 	.word	0x002000c5

0800cad0 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cad0:	4b0f      	ldr	r3, [pc, #60]	; (800cb10 <SDMMC_GetCmdResp3+0x40>)
 800cad2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	fbb3 f2f2 	udiv	r2, r3, r2
 800cadc:	f241 3388 	movw	r3, #5000	; 0x1388
 800cae0:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800cae2:	f113 33ff 	adds.w	r3, r3, #4294967295
 800cae6:	d310      	bcc.n	800cb0a <SDMMC_GetCmdResp3+0x3a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800cae8:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800caea:	f012 0f45 	tst.w	r2, #69	; 0x45
 800caee:	d0f8      	beq.n	800cae2 <SDMMC_GetCmdResp3+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800caf0:	0492      	lsls	r2, r2, #18
 800caf2:	d4f6      	bmi.n	800cae2 <SDMMC_GetCmdResp3+0x12>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800caf4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800caf6:	f013 0304 	ands.w	r3, r3, #4
 800cafa:	d003      	beq.n	800cb04 <SDMMC_GetCmdResp3+0x34>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cafc:	2304      	movs	r3, #4
 800cafe:	6383      	str	r3, [r0, #56]	; 0x38
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
 800cb00:	4618      	mov	r0, r3
 800cb02:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cb04:	4a03      	ldr	r2, [pc, #12]	; (800cb14 <SDMMC_GetCmdResp3+0x44>)
 800cb06:	6382      	str	r2, [r0, #56]	; 0x38
 800cb08:	e7fa      	b.n	800cb00 <SDMMC_GetCmdResp3+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800cb0a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800cb0e:	4770      	bx	lr
 800cb10:	24000000 	.word	0x24000000
 800cb14:	002000c5 	.word	0x002000c5

0800cb18 <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cb18:	4b44      	ldr	r3, [pc, #272]	; (800cc2c <SDMMC_GetCmdResp1+0x114>)
{
 800cb1a:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 800cb22:	fbb3 f3f4 	udiv	r3, r3, r4
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800cb26:	4c42      	ldr	r4, [pc, #264]	; (800cc30 <SDMMC_GetCmdResp1+0x118>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cb28:	435a      	muls	r2, r3
    if (count-- == 0U)
 800cb2a:	2a00      	cmp	r2, #0
 800cb2c:	d049      	beq.n	800cbc2 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 800cb2e:	6b43      	ldr	r3, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cb30:	4223      	tst	r3, r4
 800cb32:	d008      	beq.n	800cb46 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800cb34:	049b      	lsls	r3, r3, #18
 800cb36:	d406      	bmi.n	800cb46 <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cb38:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cb3a:	075b      	lsls	r3, r3, #29
 800cb3c:	d505      	bpl.n	800cb4a <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb3e:	2304      	movs	r3, #4
 800cb40:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb42:	4618      	mov	r0, r3
}
 800cb44:	bd10      	pop	{r4, pc}
 800cb46:	3a01      	subs	r2, #1
 800cb48:	e7ef      	b.n	800cb2a <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cb4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cb4c:	07dc      	lsls	r4, r3, #31
 800cb4e:	d503      	bpl.n	800cb58 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cb50:	2301      	movs	r3, #1
 800cb52:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb54:	2001      	movs	r0, #1
 800cb56:	e7f5      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cb58:	4b36      	ldr	r3, [pc, #216]	; (800cc34 <SDMMC_GetCmdResp1+0x11c>)
 800cb5a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800cb5c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	4299      	cmp	r1, r3
 800cb62:	d1f7      	bne.n	800cb54 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 800cb64:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cb66:	4834      	ldr	r0, [pc, #208]	; (800cc38 <SDMMC_GetCmdResp1+0x120>)
 800cb68:	4018      	ands	r0, r3
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	d0ea      	beq.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	db2a      	blt.n	800cbc8 <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cb72:	005a      	lsls	r2, r3, #1
 800cb74:	d42b      	bmi.n	800cbce <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cb76:	009c      	lsls	r4, r3, #2
 800cb78:	d42b      	bmi.n	800cbd2 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cb7a:	00d9      	lsls	r1, r3, #3
 800cb7c:	d42b      	bmi.n	800cbd6 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cb7e:	011a      	lsls	r2, r3, #4
 800cb80:	d42c      	bmi.n	800cbdc <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cb82:	015c      	lsls	r4, r3, #5
 800cb84:	d42d      	bmi.n	800cbe2 <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cb86:	01d9      	lsls	r1, r3, #7
 800cb88:	d42e      	bmi.n	800cbe8 <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cb8a:	021a      	lsls	r2, r3, #8
 800cb8c:	d42f      	bmi.n	800cbee <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cb8e:	025c      	lsls	r4, r3, #9
 800cb90:	d430      	bmi.n	800cbf4 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cb92:	0299      	lsls	r1, r3, #10
 800cb94:	d431      	bmi.n	800cbfa <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cb96:	02da      	lsls	r2, r3, #11
 800cb98:	d432      	bmi.n	800cc00 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cb9a:	035c      	lsls	r4, r3, #13
 800cb9c:	d433      	bmi.n	800cc06 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cb9e:	0399      	lsls	r1, r3, #14
 800cba0:	d434      	bmi.n	800cc0c <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cba2:	03da      	lsls	r2, r3, #15
 800cba4:	d435      	bmi.n	800cc12 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cba6:	041c      	lsls	r4, r3, #16
 800cba8:	d436      	bmi.n	800cc18 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cbaa:	0459      	lsls	r1, r3, #17
 800cbac:	d437      	bmi.n	800cc1e <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cbae:	049a      	lsls	r2, r3, #18
 800cbb0:	d438      	bmi.n	800cc24 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cbb2:	f013 0f08 	tst.w	r3, #8
 800cbb6:	bf0c      	ite	eq
 800cbb8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800cbbc:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800cbc0:	e7c0      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800cbc2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800cbc6:	e7bd      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cbc8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800cbcc:	e7ba      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cbce:	2040      	movs	r0, #64	; 0x40
 800cbd0:	e7b8      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cbd2:	2080      	movs	r0, #128	; 0x80
 800cbd4:	e7b6      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cbd6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cbda:	e7b3      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cbdc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cbe0:	e7b0      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cbe2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800cbe6:	e7ad      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cbe8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800cbec:	e7aa      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cbee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800cbf2:	e7a7      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cbf4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800cbf8:	e7a4      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cbfa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800cbfe:	e7a1      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 800cc00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800cc04:	e79e      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cc06:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800cc0a:	e79b      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cc0c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800cc10:	e798      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cc12:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800cc16:	e795      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cc18:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cc1c:	e792      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cc1e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800cc22:	e78f      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 800cc24:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800cc28:	e78c      	b.n	800cb44 <SDMMC_GetCmdResp1+0x2c>
 800cc2a:	bf00      	nop
 800cc2c:	24000000 	.word	0x24000000
 800cc30:	00200045 	.word	0x00200045
 800cc34:	002000c5 	.word	0x002000c5
 800cc38:	fdffe008 	.word	0xfdffe008

0800cc3c <SDMMC_Init>:
{
 800cc3c:	b084      	sub	sp, #16
 800cc3e:	b510      	push	{r4, lr}
 800cc40:	ac03      	add	r4, sp, #12
 800cc42:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800cc46:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cc4a:	6841      	ldr	r1, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 800cc4c:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 800cc4e:	9a05      	ldr	r2, [sp, #20]
 800cc50:	4313      	orrs	r3, r2
             Init.BusWide             |\
 800cc52:	9a06      	ldr	r2, [sp, #24]
 800cc54:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 800cc56:	9a07      	ldr	r2, [sp, #28]
 800cc58:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cc5a:	4a04      	ldr	r2, [pc, #16]	; (800cc6c <SDMMC_Init+0x30>)
 800cc5c:	400a      	ands	r2, r1
}
 800cc5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cc62:	4313      	orrs	r3, r2
}
 800cc64:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cc66:	6043      	str	r3, [r0, #4]
}
 800cc68:	2000      	movs	r0, #0
 800cc6a:	4770      	bx	lr
 800cc6c:	ffc02c00 	.word	0xffc02c00

0800cc70 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800cc70:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800cc74:	4770      	bx	lr

0800cc76 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800cc76:	680b      	ldr	r3, [r1, #0]
 800cc78:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	4770      	bx	lr

0800cc80 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800cc80:	6803      	ldr	r3, [r0, #0]
 800cc82:	f043 0303 	orr.w	r3, r3, #3
 800cc86:	6003      	str	r3, [r0, #0]
}
 800cc88:	2000      	movs	r0, #0
 800cc8a:	4770      	bx	lr

0800cc8c <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800cc8c:	6800      	ldr	r0, [r0, #0]
}
 800cc8e:	f000 0003 	and.w	r0, r0, #3
 800cc92:	4770      	bx	lr

0800cc94 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800cc94:	680b      	ldr	r3, [r1, #0]
{
 800cc96:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 800cc98:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cc9a:	68c4      	ldr	r4, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cc9c:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 800cca0:	4313      	orrs	r3, r2
                       Command->Response         |\
 800cca2:	68ca      	ldr	r2, [r1, #12]
 800cca4:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800cca6:	690a      	ldr	r2, [r1, #16]
 800cca8:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ccaa:	4a03      	ldr	r2, [pc, #12]	; (800ccb8 <SDMMC_SendCommand+0x24>)
 800ccac:	4022      	ands	r2, r4
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	60c3      	str	r3, [r0, #12]
}
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	bd10      	pop	{r4, pc}
 800ccb6:	bf00      	nop
 800ccb8:	fffee0c0 	.word	0xfffee0c0

0800ccbc <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ccbc:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800ccbe:	5840      	ldr	r0, [r0, r1]
}
 800ccc0:	4770      	bx	lr

0800ccc2 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ccc2:	680b      	ldr	r3, [r1, #0]
{
 800ccc4:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ccc6:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800ccc8:	684b      	ldr	r3, [r1, #4]
 800ccca:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cccc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ccce:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ccd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ccd6:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 800ccd8:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 800ccda:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 800ccdc:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800ccde:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cce0:	4313      	orrs	r3, r2
 800cce2:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800cce4:	2000      	movs	r0, #0
 800cce6:	bd10      	pop	{r4, pc}

0800cce8 <SDMMC_CmdBlockLength>:
{
 800cce8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccea:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800ccee:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccf0:	2410      	movs	r4, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccf2:	2200      	movs	r2, #0
{
 800ccf4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ccf6:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccf8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccfa:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd02:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd06:	f7ff ffc5 	bl	800cc94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cd0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd0e:	4621      	mov	r1, r4
 800cd10:	4628      	mov	r0, r5
 800cd12:	f7ff ff01 	bl	800cb18 <SDMMC_GetCmdResp1>
}
 800cd16:	b007      	add	sp, #28
 800cd18:	bd30      	pop	{r4, r5, pc}

0800cd1a <SDMMC_CmdReadSingleBlock>:
{
 800cd1a:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd1c:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800cd20:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd22:	2411      	movs	r4, #17
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd24:	2200      	movs	r2, #0
{
 800cd26:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cd28:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd2a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd2c:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd34:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd38:	f7ff ffac 	bl	800cc94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cd3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd40:	4621      	mov	r1, r4
 800cd42:	4628      	mov	r0, r5
 800cd44:	f7ff fee8 	bl	800cb18 <SDMMC_GetCmdResp1>
}
 800cd48:	b007      	add	sp, #28
 800cd4a:	bd30      	pop	{r4, r5, pc}

0800cd4c <SDMMC_CmdReadMultiBlock>:
{
 800cd4c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd4e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800cd52:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd54:	2412      	movs	r4, #18
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd56:	2200      	movs	r2, #0
{
 800cd58:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cd5a:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd5c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd5e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd66:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd6a:	f7ff ff93 	bl	800cc94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cd6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd72:	4621      	mov	r1, r4
 800cd74:	4628      	mov	r0, r5
 800cd76:	f7ff fecf 	bl	800cb18 <SDMMC_GetCmdResp1>
}
 800cd7a:	b007      	add	sp, #28
 800cd7c:	bd30      	pop	{r4, r5, pc}

0800cd7e <SDMMC_CmdWriteSingleBlock>:
{
 800cd7e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd80:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800cd84:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd86:	2418      	movs	r4, #24
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd88:	2200      	movs	r2, #0
{
 800cd8a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd8c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd8e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd90:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd98:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd9c:	f7ff ff7a 	bl	800cc94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cda0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cda4:	4621      	mov	r1, r4
 800cda6:	4628      	mov	r0, r5
 800cda8:	f7ff feb6 	bl	800cb18 <SDMMC_GetCmdResp1>
}
 800cdac:	b007      	add	sp, #28
 800cdae:	bd30      	pop	{r4, r5, pc}

0800cdb0 <SDMMC_CmdWriteMultiBlock>:
{
 800cdb0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdb2:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800cdb6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdb8:	2419      	movs	r4, #25
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdba:	2200      	movs	r2, #0
{
 800cdbc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cdbe:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdc0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdc2:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cdca:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdce:	f7ff ff61 	bl	800cc94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cdd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdd6:	4621      	mov	r1, r4
 800cdd8:	4628      	mov	r0, r5
 800cdda:	f7ff fe9d 	bl	800cb18 <SDMMC_GetCmdResp1>
}
 800cdde:	b007      	add	sp, #28
 800cde0:	bd30      	pop	{r4, r5, pc}
	...

0800cde4 <SDMMC_CmdStopTransfer>:
{
 800cde4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cde6:	2300      	movs	r3, #0
{
 800cde8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cdea:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdec:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800cdf0:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdf2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdf4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cdf8:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce00:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ce02:	68c3      	ldr	r3, [r0, #12]
 800ce04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce08:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ce0a:	68c3      	ldr	r3, [r0, #12]
 800ce0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce10:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce12:	f7ff ff3f 	bl	800cc94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ce16:	4a07      	ldr	r2, [pc, #28]	; (800ce34 <SDMMC_CmdStopTransfer+0x50>)
 800ce18:	4629      	mov	r1, r5
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	f7ff fe7c 	bl	800cb18 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ce20:	68e3      	ldr	r3, [r4, #12]
}
 800ce22:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800ce26:	bf08      	it	eq
 800ce28:	2000      	moveq	r0, #0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ce2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce2e:	60e3      	str	r3, [r4, #12]
}
 800ce30:	b007      	add	sp, #28
 800ce32:	bd30      	pop	{r4, r5, pc}
 800ce34:	05f5e100 	.word	0x05f5e100

0800ce38 <SDMMC_CmdSelDesel>:
{
 800ce38:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce3a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800ce3e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce40:	2407      	movs	r4, #7
{
 800ce42:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ce44:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce46:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce48:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce4a:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce52:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce56:	f7ff ff1d 	bl	800cc94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ce5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce5e:	4621      	mov	r1, r4
 800ce60:	4628      	mov	r0, r5
 800ce62:	f7ff fe59 	bl	800cb18 <SDMMC_GetCmdResp1>
}
 800ce66:	b007      	add	sp, #28
 800ce68:	bd30      	pop	{r4, r5, pc}
	...

0800ce6c <SDMMC_CmdGoIdleState>:
{
 800ce6c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 800ce6e:	2300      	movs	r3, #0
{
 800ce70:	b086      	sub	sp, #24
 800ce72:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce74:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ce76:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce7a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce82:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce84:	f7ff ff06 	bl	800cc94 <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce88:	4b0b      	ldr	r3, [pc, #44]	; (800ceb8 <SDMMC_CmdGoIdleState+0x4c>)
 800ce8a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	fbb3 f2f2 	udiv	r2, r3, r2
 800ce94:	f241 3388 	movw	r3, #5000	; 0x1388
 800ce98:	4353      	muls	r3, r2
    if (count-- == 0U)
 800ce9a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800ce9e:	d307      	bcc.n	800ceb0 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cea0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cea2:	0612      	lsls	r2, r2, #24
 800cea4:	d5f9      	bpl.n	800ce9a <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cea6:	4b05      	ldr	r3, [pc, #20]	; (800cebc <SDMMC_CmdGoIdleState+0x50>)
  return SDMMC_ERROR_NONE;
 800cea8:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ceaa:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800ceac:	b006      	add	sp, #24
 800ceae:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800ceb0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800ceb4:	e7fa      	b.n	800ceac <SDMMC_CmdGoIdleState+0x40>
 800ceb6:	bf00      	nop
 800ceb8:	24000000 	.word	0x24000000
 800cebc:	002000c5 	.word	0x002000c5

0800cec0 <SDMMC_CmdOperCond>:
{
 800cec0:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cec2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
{
 800cec6:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cec8:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ceca:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 800cece:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ced0:	e9cd 1301 	strd	r1, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ced4:	2300      	movs	r3, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ced6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ced8:	e9cd c303 	strd	ip, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cedc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cee0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cee2:	f7ff fed7 	bl	800cc94 <SDMMC_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cee6:	4b15      	ldr	r3, [pc, #84]	; (800cf3c <SDMMC_CmdOperCond+0x7c>)
 800cee8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	fbb3 f2f2 	udiv	r2, r3, r2
 800cef2:	f241 3388 	movw	r3, #5000	; 0x1388
 800cef6:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800cef8:	f113 33ff 	adds.w	r3, r3, #4294967295
 800cefc:	d31a      	bcc.n	800cf34 <SDMMC_CmdOperCond+0x74>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800cefe:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cf00:	f012 0f45 	tst.w	r2, #69	; 0x45
 800cf04:	d0f8      	beq.n	800cef8 <SDMMC_CmdOperCond+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf06:	0492      	lsls	r2, r2, #18
 800cf08:	d4f6      	bmi.n	800cef8 <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cf0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf0c:	075b      	lsls	r3, r3, #29
 800cf0e:	d503      	bpl.n	800cf18 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf10:	2004      	movs	r0, #4
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cf12:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800cf14:	b006      	add	sp, #24
 800cf16:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cf18:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cf1a:	f012 0201 	ands.w	r2, r2, #1
 800cf1e:	d001      	beq.n	800cf24 <SDMMC_CmdOperCond+0x64>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cf20:	2001      	movs	r0, #1
 800cf22:	e7f6      	b.n	800cf12 <SDMMC_CmdOperCond+0x52>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cf24:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800cf26:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800cf2a:	d0f3      	beq.n	800cf14 <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cf2c:	2340      	movs	r3, #64	; 0x40
  }

  return SDMMC_ERROR_NONE;
 800cf2e:	4610      	mov	r0, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cf30:	63a3      	str	r3, [r4, #56]	; 0x38
 800cf32:	e7ef      	b.n	800cf14 <SDMMC_CmdOperCond+0x54>
      return SDMMC_ERROR_TIMEOUT;
 800cf34:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800cf38:	e7ec      	b.n	800cf14 <SDMMC_CmdOperCond+0x54>
 800cf3a:	bf00      	nop
 800cf3c:	24000000 	.word	0x24000000

0800cf40 <SDMMC_CmdAppCommand>:
{
 800cf40:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf42:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800cf46:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf48:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf4a:	2200      	movs	r2, #0
{
 800cf4c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cf4e:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf50:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf52:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf5e:	f7ff fe99 	bl	800cc94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cf62:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf66:	4621      	mov	r1, r4
 800cf68:	4628      	mov	r0, r5
 800cf6a:	f7ff fdd5 	bl	800cb18 <SDMMC_GetCmdResp1>
}
 800cf6e:	b007      	add	sp, #28
 800cf70:	bd30      	pop	{r4, r5, pc}

0800cf72 <SDMMC_CmdAppOperCommand>:
{
 800cf72:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf74:	2229      	movs	r2, #41	; 0x29
{
 800cf76:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf78:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800cf7c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800cf7e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf80:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf82:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf8a:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf8e:	a901      	add	r1, sp, #4
 800cf90:	f7ff fe80 	bl	800cc94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cf94:	4620      	mov	r0, r4
 800cf96:	f7ff fd9b 	bl	800cad0 <SDMMC_GetCmdResp3>
}
 800cf9a:	b006      	add	sp, #24
 800cf9c:	bd10      	pop	{r4, pc}

0800cf9e <SDMMC_CmdBusWidth>:
{
 800cf9e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfa0:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800cfa4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfa6:	2406      	movs	r4, #6
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfa8:	2200      	movs	r2, #0
{
 800cfaa:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cfac:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfae:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfb0:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfbc:	f7ff fe6a 	bl	800cc94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cfc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfc4:	4621      	mov	r1, r4
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	f7ff fda6 	bl	800cb18 <SDMMC_GetCmdResp1>
}
 800cfcc:	b007      	add	sp, #28
 800cfce:	bd30      	pop	{r4, r5, pc}

0800cfd0 <SDMMC_CmdSendSCR>:
{
 800cfd0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cfd2:	2300      	movs	r3, #0
{
 800cfd4:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cfd6:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfd8:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800cfdc:	4605      	mov	r5, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfde:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfe0:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cfe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfec:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfee:	f7ff fe51 	bl	800cc94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cff2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cff6:	4621      	mov	r1, r4
 800cff8:	4628      	mov	r0, r5
 800cffa:	f7ff fd8d 	bl	800cb18 <SDMMC_GetCmdResp1>
}
 800cffe:	b007      	add	sp, #28
 800d000:	bd30      	pop	{r4, r5, pc}

0800d002 <SDMMC_CmdSendCID>:
{
 800d002:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d004:	2300      	movs	r3, #0
{
 800d006:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d008:	2202      	movs	r2, #2
{
 800d00a:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d00c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d00e:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d012:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d016:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d01a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d01e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d020:	f7ff fe38 	bl	800cc94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d024:	4620      	mov	r0, r4
 800d026:	f7ff fd29 	bl	800ca7c <SDMMC_GetCmdResp2>
}
 800d02a:	b006      	add	sp, #24
 800d02c:	bd10      	pop	{r4, pc}

0800d02e <SDMMC_CmdSendCSD>:
{
 800d02e:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d030:	2209      	movs	r2, #9
{
 800d032:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d034:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 800d038:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800d03a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d03c:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d03e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d046:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d04a:	a901      	add	r1, sp, #4
 800d04c:	f7ff fe22 	bl	800cc94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d050:	4620      	mov	r0, r4
 800d052:	f7ff fd13 	bl	800ca7c <SDMMC_GetCmdResp2>
}
 800d056:	b006      	add	sp, #24
 800d058:	bd10      	pop	{r4, pc}
	...

0800d05c <SDMMC_CmdSetRelAdd>:
{
 800d05c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d05e:	2300      	movs	r3, #0
{
 800d060:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d062:	2203      	movs	r2, #3
{
 800d064:	460d      	mov	r5, r1
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d066:	a901      	add	r1, sp, #4
{
 800d068:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d06a:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d06e:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d072:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d07a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d07c:	f7ff fe0a 	bl	800cc94 <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d080:	4b1e      	ldr	r3, [pc, #120]	; (800d0fc <SDMMC_CmdSetRelAdd+0xa0>)
 800d082:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	fbb3 f2f2 	udiv	r2, r3, r2
 800d08c:	f241 3388 	movw	r3, #5000	; 0x1388
 800d090:	4353      	muls	r3, r2
    if (count-- == 0U)
 800d092:	f113 33ff 	adds.w	r3, r3, #4294967295
 800d096:	d328      	bcc.n	800d0ea <SDMMC_CmdSetRelAdd+0x8e>
    sta_reg = SDMMCx->STA;
 800d098:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d09a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800d09e:	d0f8      	beq.n	800d092 <SDMMC_CmdSetRelAdd+0x36>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d0a0:	0492      	lsls	r2, r2, #18
 800d0a2:	d4f6      	bmi.n	800d092 <SDMMC_CmdSetRelAdd+0x36>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d0a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0a6:	0758      	lsls	r0, r3, #29
 800d0a8:	d503      	bpl.n	800d0b2 <SDMMC_CmdSetRelAdd+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d0aa:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d0ac:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800d0ae:	b007      	add	sp, #28
 800d0b0:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d0b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0b4:	07d9      	lsls	r1, r3, #31
 800d0b6:	d501      	bpl.n	800d0bc <SDMMC_CmdSetRelAdd+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d0b8:	2001      	movs	r0, #1
 800d0ba:	e7f7      	b.n	800d0ac <SDMMC_CmdSetRelAdd+0x50>
  return (uint8_t)(SDMMCx->RESPCMD);
 800d0bc:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	2b03      	cmp	r3, #3
 800d0c2:	d115      	bne.n	800d0f0 <SDMMC_CmdSetRelAdd+0x94>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d0c4:	4b0e      	ldr	r3, [pc, #56]	; (800d100 <SDMMC_CmdSetRelAdd+0xa4>)
 800d0c6:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800d0c8:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d0ca:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800d0ce:	d102      	bne.n	800d0d6 <SDMMC_CmdSetRelAdd+0x7a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d0d0:	0c1b      	lsrs	r3, r3, #16
 800d0d2:	802b      	strh	r3, [r5, #0]
 800d0d4:	e7eb      	b.n	800d0ae <SDMMC_CmdSetRelAdd+0x52>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d0d6:	045a      	lsls	r2, r3, #17
 800d0d8:	d40c      	bmi.n	800d0f4 <SDMMC_CmdSetRelAdd+0x98>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d0da:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800d0de:	bf0c      	ite	eq
 800d0e0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800d0e4:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800d0e8:	e7e1      	b.n	800d0ae <SDMMC_CmdSetRelAdd+0x52>
      return SDMMC_ERROR_TIMEOUT;
 800d0ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800d0ee:	e7de      	b.n	800d0ae <SDMMC_CmdSetRelAdd+0x52>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0f0:	2001      	movs	r0, #1
 800d0f2:	e7dc      	b.n	800d0ae <SDMMC_CmdSetRelAdd+0x52>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d0f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d0f8:	e7d9      	b.n	800d0ae <SDMMC_CmdSetRelAdd+0x52>
 800d0fa:	bf00      	nop
 800d0fc:	24000000 	.word	0x24000000
 800d100:	002000c5 	.word	0x002000c5

0800d104 <SDMMC_CmdSendStatus>:
{
 800d104:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d106:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800d10a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d10c:	240d      	movs	r4, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d10e:	2200      	movs	r2, #0
{
 800d110:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 800d112:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d114:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d116:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d11a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d11e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d122:	f7ff fdb7 	bl	800cc94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d126:	f241 3288 	movw	r2, #5000	; 0x1388
 800d12a:	4621      	mov	r1, r4
 800d12c:	4628      	mov	r0, r5
 800d12e:	f7ff fcf3 	bl	800cb18 <SDMMC_GetCmdResp1>
}
 800d132:	b007      	add	sp, #28
 800d134:	bd30      	pop	{r4, r5, pc}

0800d136 <SDMMC_CmdStatusRegister>:
{
 800d136:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d138:	2300      	movs	r3, #0
{
 800d13a:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d13c:	240d      	movs	r4, #13
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d13e:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800d142:	4605      	mov	r5, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d144:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d146:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d14a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d14e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d152:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d154:	f7ff fd9e 	bl	800cc94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d158:	f241 3288 	movw	r2, #5000	; 0x1388
 800d15c:	4621      	mov	r1, r4
 800d15e:	4628      	mov	r0, r5
 800d160:	f7ff fcda 	bl	800cb18 <SDMMC_GetCmdResp1>
}
 800d164:	b007      	add	sp, #28
 800d166:	bd30      	pop	{r4, r5, pc}

0800d168 <SDMMC_CmdVoltageSwitch>:
{
 800d168:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d16a:	2300      	movs	r3, #0
{
 800d16c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d16e:	240b      	movs	r4, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d170:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800d174:	4605      	mov	r5, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d176:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d178:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d17c:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d184:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d186:	f7ff fd85 	bl	800cc94 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800d18a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d18e:	4621      	mov	r1, r4
 800d190:	4628      	mov	r0, r5
 800d192:	f7ff fcc1 	bl	800cb18 <SDMMC_GetCmdResp1>
}
 800d196:	b007      	add	sp, #28
 800d198:	bd30      	pop	{r4, r5, pc}
	...

0800d19c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d19c:	4b0a      	ldr	r3, [pc, #40]	; (800d1c8 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d19e:	3b01      	subs	r3, #1
 800d1a0:	d00f      	beq.n	800d1c2 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d1a2:	6902      	ldr	r2, [r0, #16]
 800d1a4:	2a00      	cmp	r2, #0
 800d1a6:	dafa      	bge.n	800d19e <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d1a8:	6903      	ldr	r3, [r0, #16]
 800d1aa:	4a07      	ldr	r2, [pc, #28]	; (800d1c8 <USB_CoreReset+0x2c>)
 800d1ac:	f043 0301 	orr.w	r3, r3, #1
 800d1b0:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800d1b2:	3a01      	subs	r2, #1
 800d1b4:	d005      	beq.n	800d1c2 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d1b6:	6903      	ldr	r3, [r0, #16]
 800d1b8:	f013 0301 	ands.w	r3, r3, #1
 800d1bc:	d1f9      	bne.n	800d1b2 <USB_CoreReset+0x16>

  return HAL_OK;
 800d1be:	4618      	mov	r0, r3
 800d1c0:	4770      	bx	lr
      return HAL_TIMEOUT;
 800d1c2:	2003      	movs	r0, #3
}
 800d1c4:	4770      	bx	lr
 800d1c6:	bf00      	nop
 800d1c8:	00030d41 	.word	0x00030d41

0800d1cc <USB_CoreInit>:
{
 800d1cc:	b084      	sub	sp, #16
 800d1ce:	b538      	push	{r3, r4, r5, lr}
 800d1d0:	ad05      	add	r5, sp, #20
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d1d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d126      	bne.n	800d22c <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d1de:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d1e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1e4:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d1e6:	68c3      	ldr	r3, [r0, #12]
 800d1e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d1ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1f0:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d1f2:	68c3      	ldr	r3, [r0, #12]
 800d1f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d1f8:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800d1fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d103      	bne.n	800d208 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d200:	68c3      	ldr	r3, [r0, #12]
 800d202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d206:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800d208:	4620      	mov	r0, r4
 800d20a:	f7ff ffc7 	bl	800d19c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800d20e:	9b08      	ldr	r3, [sp, #32]
 800d210:	2b01      	cmp	r3, #1
 800d212:	d107      	bne.n	800d224 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d214:	68a3      	ldr	r3, [r4, #8]
 800d216:	f043 0306 	orr.w	r3, r3, #6
 800d21a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d21c:	68a3      	ldr	r3, [r4, #8]
 800d21e:	f043 0320 	orr.w	r3, r3, #32
 800d222:	60a3      	str	r3, [r4, #8]
}
 800d224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d228:	b004      	add	sp, #16
 800d22a:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d22c:	68c3      	ldr	r3, [r0, #12]
 800d22e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d232:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800d234:	f7ff ffb2 	bl	800d19c <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800d238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d23a:	b923      	cbnz	r3, 800d246 <USB_CoreInit+0x7a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d23c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d23e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d242:	63a3      	str	r3, [r4, #56]	; 0x38
 800d244:	e7e3      	b.n	800d20e <USB_CoreInit+0x42>
 800d246:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d24c:	e7f9      	b.n	800d242 <USB_CoreInit+0x76>
	...

0800d250 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800d250:	2a02      	cmp	r2, #2
 800d252:	d158      	bne.n	800d306 <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d254:	4b2e      	ldr	r3, [pc, #184]	; (800d310 <USB_SetTurnaroundTime+0xc0>)
 800d256:	4a2f      	ldr	r2, [pc, #188]	; (800d314 <USB_SetTurnaroundTime+0xc4>)
 800d258:	440b      	add	r3, r1
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d947      	bls.n	800d2ee <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d25e:	4b2e      	ldr	r3, [pc, #184]	; (800d318 <USB_SetTurnaroundTime+0xc8>)
 800d260:	4a2e      	ldr	r2, [pc, #184]	; (800d31c <USB_SetTurnaroundTime+0xcc>)
 800d262:	440b      	add	r3, r1
 800d264:	4293      	cmp	r3, r2
 800d266:	d944      	bls.n	800d2f2 <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d268:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800d26c:	4a2c      	ldr	r2, [pc, #176]	; (800d320 <USB_SetTurnaroundTime+0xd0>)
 800d26e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800d272:	4293      	cmp	r3, r2
 800d274:	d93f      	bls.n	800d2f6 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d276:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800d27a:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 800d27e:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800d282:	32a0      	adds	r2, #160	; 0xa0
 800d284:	4293      	cmp	r3, r2
 800d286:	d938      	bls.n	800d2fa <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d288:	4b26      	ldr	r3, [pc, #152]	; (800d324 <USB_SetTurnaroundTime+0xd4>)
 800d28a:	4a27      	ldr	r2, [pc, #156]	; (800d328 <USB_SetTurnaroundTime+0xd8>)
 800d28c:	440b      	add	r3, r1
 800d28e:	4293      	cmp	r3, r2
 800d290:	d935      	bls.n	800d2fe <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d292:	4b26      	ldr	r3, [pc, #152]	; (800d32c <USB_SetTurnaroundTime+0xdc>)
 800d294:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 800d298:	440b      	add	r3, r1
 800d29a:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d92f      	bls.n	800d302 <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d2a2:	4b23      	ldr	r3, [pc, #140]	; (800d330 <USB_SetTurnaroundTime+0xe0>)
 800d2a4:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 800d2a8:	440b      	add	r3, r1
 800d2aa:	f502 7220 	add.w	r2, r2, #640	; 0x280
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d929      	bls.n	800d306 <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d2b2:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800d2b6:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 800d2ba:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 800d2be:	f502 7258 	add.w	r2, r2, #864	; 0x360
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d921      	bls.n	800d30a <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d2c6:	4b1b      	ldr	r3, [pc, #108]	; (800d334 <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 800d2c8:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d2cc:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 800d2ce:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	bf94      	ite	ls
 800d2d6:	2307      	movls	r3, #7
 800d2d8:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d2da:	68c2      	ldr	r2, [r0, #12]
 800d2dc:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800d2e0:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d2e2:	68c2      	ldr	r2, [r0, #12]
 800d2e4:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 800d2e8:	60c3      	str	r3, [r0, #12]
}
 800d2ea:	2000      	movs	r0, #0
 800d2ec:	4770      	bx	lr
      UsbTrd = 0xFU;
 800d2ee:	230f      	movs	r3, #15
 800d2f0:	e7f3      	b.n	800d2da <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 800d2f2:	230e      	movs	r3, #14
 800d2f4:	e7f1      	b.n	800d2da <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 800d2f6:	230d      	movs	r3, #13
 800d2f8:	e7ef      	b.n	800d2da <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 800d2fa:	230c      	movs	r3, #12
 800d2fc:	e7ed      	b.n	800d2da <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 800d2fe:	230b      	movs	r3, #11
 800d300:	e7eb      	b.n	800d2da <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 800d302:	230a      	movs	r3, #10
 800d304:	e7e9      	b.n	800d2da <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d306:	2309      	movs	r3, #9
 800d308:	e7e7      	b.n	800d2da <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 800d30a:	2308      	movs	r3, #8
 800d30c:	e7e5      	b.n	800d2da <USB_SetTurnaroundTime+0x8a>
 800d30e:	bf00      	nop
 800d310:	ff275340 	.word	0xff275340
 800d314:	000c34ff 	.word	0x000c34ff
 800d318:	ff1b1e40 	.word	0xff1b1e40
 800d31c:	000f423f 	.word	0x000f423f
 800d320:	00124f7f 	.word	0x00124f7f
 800d324:	fee5b660 	.word	0xfee5b660
 800d328:	0016e35f 	.word	0x0016e35f
 800d32c:	feced300 	.word	0xfeced300
 800d330:	feb35bc0 	.word	0xfeb35bc0
 800d334:	fe5954e0 	.word	0xfe5954e0

0800d338 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d338:	6883      	ldr	r3, [r0, #8]
 800d33a:	f043 0301 	orr.w	r3, r3, #1
 800d33e:	6083      	str	r3, [r0, #8]
}
 800d340:	2000      	movs	r0, #0
 800d342:	4770      	bx	lr

0800d344 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d344:	6883      	ldr	r3, [r0, #8]
 800d346:	f023 0301 	bic.w	r3, r3, #1
 800d34a:	6083      	str	r3, [r0, #8]
}
 800d34c:	2000      	movs	r0, #0
 800d34e:	4770      	bx	lr

0800d350 <USB_SetCurrentMode>:
{
 800d350:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d352:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800d354:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d356:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d35a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800d35c:	d108      	bne.n	800d370 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d35e:	68c3      	ldr	r3, [r0, #12]
 800d360:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d364:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800d366:	2032      	movs	r0, #50	; 0x32
 800d368:	f7f8 fd56 	bl	8005e18 <HAL_Delay>
  return HAL_OK;
 800d36c:	2000      	movs	r0, #0
}
 800d36e:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800d370:	b919      	cbnz	r1, 800d37a <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d372:	68c3      	ldr	r3, [r0, #12]
 800d374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d378:	e7f4      	b.n	800d364 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800d37a:	2001      	movs	r0, #1
 800d37c:	e7f7      	b.n	800d36e <USB_SetCurrentMode+0x1e>
	...

0800d380 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d380:	0189      	lsls	r1, r1, #6
 800d382:	4a07      	ldr	r2, [pc, #28]	; (800d3a0 <USB_FlushTxFifo+0x20>)
 800d384:	f041 0120 	orr.w	r1, r1, #32
 800d388:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800d38a:	3a01      	subs	r2, #1
 800d38c:	d005      	beq.n	800d39a <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d38e:	6903      	ldr	r3, [r0, #16]
 800d390:	f013 0320 	ands.w	r3, r3, #32
 800d394:	d1f9      	bne.n	800d38a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800d396:	4618      	mov	r0, r3
 800d398:	4770      	bx	lr
      return HAL_TIMEOUT;
 800d39a:	2003      	movs	r0, #3
}
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop
 800d3a0:	00030d41 	.word	0x00030d41

0800d3a4 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d3a4:	2310      	movs	r3, #16
 800d3a6:	4a06      	ldr	r2, [pc, #24]	; (800d3c0 <USB_FlushRxFifo+0x1c>)
 800d3a8:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800d3aa:	3a01      	subs	r2, #1
 800d3ac:	d005      	beq.n	800d3ba <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d3ae:	6903      	ldr	r3, [r0, #16]
 800d3b0:	f013 0310 	ands.w	r3, r3, #16
 800d3b4:	d1f9      	bne.n	800d3aa <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	4770      	bx	lr
      return HAL_TIMEOUT;
 800d3ba:	2003      	movs	r0, #3
}
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	00030d41 	.word	0x00030d41

0800d3c4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800d3c4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800d3c8:	4319      	orrs	r1, r3
 800d3ca:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	4770      	bx	lr
	...

0800d3d4 <USB_DevInit>:
{
 800d3d4:	b084      	sub	sp, #16
 800d3d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3da:	4604      	mov	r4, r0
 800d3dc:	a809      	add	r0, sp, #36	; 0x24
 800d3de:	460f      	mov	r7, r1
 800d3e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 800d3ee:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 800d3f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800d3f4:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800d3f6:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800d3f8:	d1f7      	bne.n	800d3ea <USB_DevInit+0x16>
 800d3fa:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 800d3fe:	2d00      	cmp	r5, #0
 800d400:	d16c      	bne.n	800d4dc <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d402:	6873      	ldr	r3, [r6, #4]
 800d404:	f043 0302 	orr.w	r3, r3, #2
 800d408:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d40a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d40c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d410:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d412:	6823      	ldr	r3, [r4, #0]
 800d414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d418:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d41a:	6823      	ldr	r3, [r4, #0]
 800d41c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d420:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800d422:	2300      	movs	r3, #0
 800d424:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d428:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800d42c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d432:	2b01      	cmp	r3, #1
 800d434:	d159      	bne.n	800d4ea <USB_DevInit+0x116>
    if (cfg.speed == USBD_HS_SPEED)
 800d436:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d438:	2900      	cmp	r1, #0
 800d43a:	d154      	bne.n	800d4e6 <USB_DevInit+0x112>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d43c:	4620      	mov	r0, r4
 800d43e:	f7ff ffc1 	bl	800d3c4 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d442:	2110      	movs	r1, #16
 800d444:	4620      	mov	r0, r4
 800d446:	f7ff ff9b 	bl	800d380 <USB_FlushTxFifo>
 800d44a:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d44c:	4620      	mov	r0, r4
 800d44e:	f7ff ffa9 	bl	800d3a4 <USB_FlushRxFifo>
 800d452:	2800      	cmp	r0, #0
 800d454:	d14b      	bne.n	800d4ee <USB_DevInit+0x11a>
  HAL_StatusTypeDef ret = HAL_OK;
 800d456:	1c08      	adds	r0, r1, #0
 800d458:	bf18      	it	ne
 800d45a:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800d45c:	2300      	movs	r3, #0
 800d45e:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d462:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d466:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800d46a:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d46c:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 800d470:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d472:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d474:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d476:	42bb      	cmp	r3, r7
 800d478:	d13b      	bne.n	800d4f2 <USB_DevInit+0x11e>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d47a:	2100      	movs	r1, #0
 800d47c:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d480:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d484:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d488:	460f      	mov	r7, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d48a:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d48e:	428b      	cmp	r3, r1
 800d490:	d142      	bne.n	800d518 <USB_DevInit+0x144>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d492:	6933      	ldr	r3, [r6, #16]
 800d494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d498:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800d49a:	2300      	movs	r3, #0
 800d49c:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d49e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800d4a2:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800d4a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4a6:	b91b      	cbnz	r3, 800d4b0 <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d4a8:	69a3      	ldr	r3, [r4, #24]
 800d4aa:	f043 0310 	orr.w	r3, r3, #16
 800d4ae:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d4b0:	69a2      	ldr	r2, [r4, #24]
 800d4b2:	4b23      	ldr	r3, [pc, #140]	; (800d540 <USB_DevInit+0x16c>)
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800d4b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4ba:	b11b      	cbz	r3, 800d4c4 <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d4bc:	69a3      	ldr	r3, [r4, #24]
 800d4be:	f043 0308 	orr.w	r3, r3, #8
 800d4c2:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800d4c4:	2d01      	cmp	r5, #1
 800d4c6:	d105      	bne.n	800d4d4 <USB_DevInit+0x100>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d4c8:	69a3      	ldr	r3, [r4, #24]
 800d4ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d4ce:	f043 0304 	orr.w	r3, r3, #4
 800d4d2:	61a3      	str	r3, [r4, #24]
}
 800d4d4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4d8:	b004      	add	sp, #16
 800d4da:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d4dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d4de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d4e2:	63a3      	str	r3, [r4, #56]	; 0x38
 800d4e4:	e79d      	b.n	800d422 <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	e7a8      	b.n	800d43c <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d4ea:	2103      	movs	r1, #3
 800d4ec:	e7a6      	b.n	800d43c <USB_DevInit+0x68>
    ret = HAL_ERROR;
 800d4ee:	2001      	movs	r0, #1
 800d4f0:	e7b4      	b.n	800d45c <USB_DevInit+0x88>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d4f2:	f8d2 9000 	ldr.w	r9, [r2]
 800d4f6:	f1b9 0f00 	cmp.w	r9, #0
 800d4fa:	da0b      	bge.n	800d514 <USB_DevInit+0x140>
      if (i == 0U)
 800d4fc:	b93b      	cbnz	r3, 800d50e <USB_DevInit+0x13a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d4fe:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d502:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d504:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d506:	f8c2 8008 	str.w	r8, [r2, #8]
 800d50a:	3220      	adds	r2, #32
 800d50c:	e7b3      	b.n	800d476 <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d50e:	f8c2 c000 	str.w	ip, [r2]
 800d512:	e7f6      	b.n	800d502 <USB_DevInit+0x12e>
      USBx_INEP(i)->DIEPCTL = 0U;
 800d514:	6011      	str	r1, [r2, #0]
 800d516:	e7f4      	b.n	800d502 <USB_DevInit+0x12e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d518:	f8d2 9000 	ldr.w	r9, [r2]
 800d51c:	f1b9 0f00 	cmp.w	r9, #0
 800d520:	da0b      	bge.n	800d53a <USB_DevInit+0x166>
      if (i == 0U)
 800d522:	b939      	cbnz	r1, 800d534 <USB_DevInit+0x160>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d524:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d528:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d52a:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d52c:	f8c2 8008 	str.w	r8, [r2, #8]
 800d530:	3220      	adds	r2, #32
 800d532:	e7ac      	b.n	800d48e <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d534:	f8c2 c000 	str.w	ip, [r2]
 800d538:	e7f6      	b.n	800d528 <USB_DevInit+0x154>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d53a:	6017      	str	r7, [r2, #0]
 800d53c:	e7f4      	b.n	800d528 <USB_DevInit+0x154>
 800d53e:	bf00      	nop
 800d540:	803c3800 	.word	0x803c3800

0800d544 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d544:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d548:	f013 0006 	ands.w	r0, r3, #6
 800d54c:	d004      	beq.n	800d558 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d54e:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 800d552:	bf14      	ite	ne
 800d554:	2002      	movne	r0, #2
 800d556:	200f      	moveq	r0, #15
}
 800d558:	4770      	bx	lr

0800d55a <USB_ActivateEndpoint>:
{
 800d55a:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800d55c:	780d      	ldrb	r5, [r1, #0]
 800d55e:	2401      	movs	r4, #1
 800d560:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800d564:	f005 030f 	and.w	r3, r5, #15
 800d568:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 800d56c:	409c      	lsls	r4, r3
  if (ep->is_in == 1U)
 800d56e:	784b      	ldrb	r3, [r1, #1]
 800d570:	2b01      	cmp	r3, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d572:	69d3      	ldr	r3, [r2, #28]
  if (ep->is_in == 1U)
 800d574:	d118      	bne.n	800d5a8 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d576:	431c      	orrs	r4, r3
 800d578:	61d4      	str	r4, [r2, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d57a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d57e:	041a      	lsls	r2, r3, #16
 800d580:	d410      	bmi.n	800d5a4 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d582:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d584:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d58a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800d58e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d596:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800d59a:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d5a4:	2000      	movs	r0, #0
 800d5a6:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d5a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800d5ac:	61d4      	str	r4, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d5ae:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d5b2:	041b      	lsls	r3, r3, #16
 800d5b4:	d4f6      	bmi.n	800d5a4 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d5b6:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 800d5b8:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d5ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5be:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800d5c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5ca:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800d5d4:	e7e6      	b.n	800d5a4 <USB_ActivateEndpoint+0x4a>
	...

0800d5d8 <USB_DeactivateEndpoint>:
{
 800d5d8:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800d5da:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800d5dc:	7849      	ldrb	r1, [r1, #1]
 800d5de:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 800d5e2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800d5e6:	2901      	cmp	r1, #1
 800d5e8:	f002 010f 	and.w	r1, r2, #15
 800d5ec:	d120      	bne.n	800d630 <USB_DeactivateEndpoint+0x58>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d5ee:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800d5f2:	2a00      	cmp	r2, #0
 800d5f4:	da0b      	bge.n	800d60e <USB_DeactivateEndpoint+0x36>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d5f6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800d5fa:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800d5fe:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d602:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800d606:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d60a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d60e:	2201      	movs	r2, #1
 800d610:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800d612:	408a      	lsls	r2, r1
 800d614:	43d2      	mvns	r2, r2
 800d616:	4014      	ands	r4, r2
 800d618:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d61a:	69c1      	ldr	r1, [r0, #28]
 800d61c:	400a      	ands	r2, r1
 800d61e:	61c2      	str	r2, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d620:	4a14      	ldr	r2, [pc, #80]	; (800d674 <USB_DeactivateEndpoint+0x9c>)
 800d622:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800d626:	400a      	ands	r2, r1
 800d628:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 800d62c:	2000      	movs	r0, #0
 800d62e:	bd10      	pop	{r4, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d630:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800d634:	2a00      	cmp	r2, #0
 800d636:	da0b      	bge.n	800d650 <USB_DeactivateEndpoint+0x78>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d638:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800d63c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800d640:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d644:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800d648:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d64c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d650:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d654:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800d656:	408a      	lsls	r2, r1
 800d658:	43d2      	mvns	r2, r2
 800d65a:	4014      	ands	r4, r2
 800d65c:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d65e:	69c1      	ldr	r1, [r0, #28]
 800d660:	400a      	ands	r2, r1
 800d662:	61c2      	str	r2, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d664:	4a04      	ldr	r2, [pc, #16]	; (800d678 <USB_DeactivateEndpoint+0xa0>)
 800d666:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800d66a:	400a      	ands	r2, r1
 800d66c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800d670:	e7dc      	b.n	800d62c <USB_DeactivateEndpoint+0x54>
 800d672:	bf00      	nop
 800d674:	ec337800 	.word	0xec337800
 800d678:	eff37800 	.word	0xeff37800

0800d67c <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 800d67c:	784b      	ldrb	r3, [r1, #1]
{
 800d67e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800d680:	2b01      	cmp	r3, #1
 800d682:	780c      	ldrb	r4, [r1, #0]
 800d684:	694d      	ldr	r5, [r1, #20]
 800d686:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800d68a:	4e34      	ldr	r6, [pc, #208]	; (800d75c <USB_EP0StartXfer+0xe0>)
 800d68c:	4f34      	ldr	r7, [pc, #208]	; (800d760 <USB_EP0StartXfer+0xe4>)
 800d68e:	d144      	bne.n	800d71a <USB_EP0StartXfer+0x9e>
 800d690:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800d694:	b9b5      	cbnz	r5, 800d6c4 <USB_EP0StartXfer+0x48>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d696:	691d      	ldr	r5, [r3, #16]
 800d698:	402e      	ands	r6, r5
 800d69a:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d69c:	691d      	ldr	r5, [r3, #16]
 800d69e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800d6a2:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d6a4:	691d      	ldr	r5, [r3, #16]
 800d6a6:	402f      	ands	r7, r5
 800d6a8:	611f      	str	r7, [r3, #16]
    if (dma == 1U)
 800d6aa:	2a01      	cmp	r2, #1
 800d6ac:	d121      	bne.n	800d6f2 <USB_EP0StartXfer+0x76>
      if ((uint32_t)ep->dma_addr != 0U)
 800d6ae:	690a      	ldr	r2, [r1, #16]
 800d6b0:	b102      	cbz	r2, 800d6b4 <USB_EP0StartXfer+0x38>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d6b2:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d6b4:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800d6b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d6bc:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800d6c0:	2000      	movs	r0, #0
 800d6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d6c4:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800d6c8:	ea0c 0707 	and.w	r7, ip, r7
 800d6cc:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d6ce:	691f      	ldr	r7, [r3, #16]
 800d6d0:	403e      	ands	r6, r7
 800d6d2:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800d6d4:	688e      	ldr	r6, [r1, #8]
 800d6d6:	42ae      	cmp	r6, r5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d6d8:	691d      	ldr	r5, [r3, #16]
 800d6da:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 800d6de:	bf38      	it	cc
 800d6e0:	614e      	strcc	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d6e2:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d6e4:	694d      	ldr	r5, [r1, #20]
 800d6e6:	691e      	ldr	r6, [r3, #16]
 800d6e8:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800d6ec:	4335      	orrs	r5, r6
 800d6ee:	611d      	str	r5, [r3, #16]
 800d6f0:	e7db      	b.n	800d6aa <USB_EP0StartXfer+0x2e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d6f2:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800d6f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d6fa:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800d6fe:	694b      	ldr	r3, [r1, #20]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d0dd      	beq.n	800d6c0 <USB_EP0StartXfer+0x44>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d704:	780b      	ldrb	r3, [r1, #0]
 800d706:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800d70a:	f003 020f 	and.w	r2, r3, #15
 800d70e:	2301      	movs	r3, #1
 800d710:	4093      	lsls	r3, r2
 800d712:	4323      	orrs	r3, r4
 800d714:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800d718:	e7d2      	b.n	800d6c0 <USB_EP0StartXfer+0x44>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d71a:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800d71e:	6918      	ldr	r0, [r3, #16]
 800d720:	4038      	ands	r0, r7
 800d722:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d724:	6918      	ldr	r0, [r3, #16]
 800d726:	4030      	ands	r0, r6
 800d728:	6118      	str	r0, [r3, #16]
 800d72a:	6888      	ldr	r0, [r1, #8]
    if (ep->xfer_len > 0U)
 800d72c:	b105      	cbz	r5, 800d730 <USB_EP0StartXfer+0xb4>
      ep->xfer_len = ep->maxpacket;
 800d72e:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d730:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d732:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 800d736:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d738:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800d73c:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d73e:	691d      	ldr	r5, [r3, #16]
 800d740:	ea40 0005 	orr.w	r0, r0, r5
 800d744:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800d746:	d102      	bne.n	800d74e <USB_EP0StartXfer+0xd2>
      if ((uint32_t)ep->xfer_buff != 0U)
 800d748:	68ca      	ldr	r2, [r1, #12]
 800d74a:	b102      	cbz	r2, 800d74e <USB_EP0StartXfer+0xd2>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d74c:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d74e:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800d752:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d756:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800d75a:	e7b1      	b.n	800d6c0 <USB_EP0StartXfer+0x44>
 800d75c:	e007ffff 	.word	0xe007ffff
 800d760:	fff80000 	.word	0xfff80000

0800d764 <USB_WritePacket>:
{
 800d764:	b510      	push	{r4, lr}
 800d766:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800d76a:	b94c      	cbnz	r4, 800d780 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 800d76c:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d76e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    count32b = ((uint32_t)len + 3U) / 4U;
 800d772:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d774:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800d778:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 800d77c:	4299      	cmp	r1, r3
 800d77e:	d101      	bne.n	800d784 <USB_WritePacket+0x20>
}
 800d780:	2000      	movs	r0, #0
 800d782:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d784:	f851 2b04 	ldr.w	r2, [r1], #4
 800d788:	6002      	str	r2, [r0, #0]
 800d78a:	e7f7      	b.n	800d77c <USB_WritePacket+0x18>

0800d78c <USB_EPStartXfer>:
{
 800d78c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800d78e:	784d      	ldrb	r5, [r1, #1]
 800d790:	780c      	ldrb	r4, [r1, #0]
 800d792:	2d01      	cmp	r5, #1
 800d794:	694b      	ldr	r3, [r1, #20]
 800d796:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800d79a:	78ce      	ldrb	r6, [r1, #3]
 800d79c:	f8df c194 	ldr.w	ip, [pc, #404]	; 800d934 <USB_EPStartXfer+0x1a8>
 800d7a0:	f8df e194 	ldr.w	lr, [pc, #404]	; 800d938 <USB_EPStartXfer+0x1ac>
 800d7a4:	d17d      	bne.n	800d8a2 <USB_EPStartXfer+0x116>
 800d7a6:	f504 6510 	add.w	r5, r4, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d7aa:	692f      	ldr	r7, [r5, #16]
    if (ep->xfer_len == 0U)
 800d7ac:	bb3b      	cbnz	r3, 800d7fe <USB_EPStartXfer+0x72>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d7ae:	ea07 070c 	and.w	r7, r7, ip
 800d7b2:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d7b4:	692f      	ldr	r7, [r5, #16]
 800d7b6:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800d7ba:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d7bc:	692f      	ldr	r7, [r5, #16]
 800d7be:	ea07 070e 	and.w	r7, r7, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d7c2:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 800d7c4:	2a01      	cmp	r2, #1
 800d7c6:	d142      	bne.n	800d84e <USB_EPStartXfer+0xc2>
      if ((uint32_t)ep->dma_addr != 0U)
 800d7c8:	690b      	ldr	r3, [r1, #16]
 800d7ca:	b103      	cbz	r3, 800d7ce <USB_EPStartXfer+0x42>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d7cc:	616b      	str	r3, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 800d7ce:	2e01      	cmp	r6, #1
 800d7d0:	d10c      	bne.n	800d7ec <USB_EPStartXfer+0x60>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d7d2:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800d7d6:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d7da:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800d7de:	bf0c      	ite	eq
 800d7e0:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d7e4:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800d7e8:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d7ec:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800d7f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d7f4:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	b003      	add	sp, #12
 800d7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d7fe:	ea07 070e 	and.w	r7, r7, lr
      if (ep->type == EP_TYPE_ISOC)
 800d802:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d804:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d806:	692f      	ldr	r7, [r5, #16]
 800d808:	ea07 070c 	and.w	r7, r7, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d80c:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d810:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d812:	eb0c 0703 	add.w	r7, ip, r3
 800d816:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800d81a:	f107 37ff 	add.w	r7, r7, #4294967295
 800d81e:	fbb7 fcfc 	udiv	ip, r7, ip
 800d822:	4f43      	ldr	r7, [pc, #268]	; (800d930 <USB_EPStartXfer+0x1a4>)
 800d824:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 800d828:	ea47 070e 	orr.w	r7, r7, lr
 800d82c:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d82e:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800d832:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800d836:	ea47 070c 	orr.w	r7, r7, ip
 800d83a:	612f      	str	r7, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800d83c:	d1c2      	bne.n	800d7c4 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d83e:	692f      	ldr	r7, [r5, #16]
 800d840:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 800d844:	612f      	str	r7, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d846:	692f      	ldr	r7, [r5, #16]
 800d848:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800d84c:	e7b9      	b.n	800d7c2 <USB_EPStartXfer+0x36>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d84e:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800d852:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d854:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800d858:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800d85c:	d00c      	beq.n	800d878 <USB_EPStartXfer+0xec>
        if (ep->xfer_len > 0U)
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d0ca      	beq.n	800d7f8 <USB_EPStartXfer+0x6c>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d862:	780b      	ldrb	r3, [r1, #0]
 800d864:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800d868:	f003 020f 	and.w	r2, r3, #15
 800d86c:	2301      	movs	r3, #1
 800d86e:	4093      	lsls	r3, r2
 800d870:	4323      	orrs	r3, r4
 800d872:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800d876:	e7bf      	b.n	800d7f8 <USB_EPStartXfer+0x6c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d878:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d87c:	b29b      	uxth	r3, r3
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d87e:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d882:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 800d886:	bf0c      	ite	eq
 800d888:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d88c:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 800d890:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d894:	780c      	ldrb	r4, [r1, #0]
 800d896:	9200      	str	r2, [sp, #0]
 800d898:	4622      	mov	r2, r4
 800d89a:	68c9      	ldr	r1, [r1, #12]
 800d89c:	f7ff ff62 	bl	800d764 <USB_WritePacket>
 800d8a0:	e7aa      	b.n	800d7f8 <USB_EPStartXfer+0x6c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d8a2:	f504 6730 	add.w	r7, r4, #2816	; 0xb00
 800d8a6:	693d      	ldr	r5, [r7, #16]
 800d8a8:	ea05 050e 	and.w	r5, r5, lr
 800d8ac:	613d      	str	r5, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d8ae:	693d      	ldr	r5, [r7, #16]
 800d8b0:	ea05 050c 	and.w	r5, r5, ip
 800d8b4:	613d      	str	r5, [r7, #16]
 800d8b6:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 800d8b8:	bb1b      	cbnz	r3, 800d902 <USB_EPStartXfer+0x176>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800d8c0:	431d      	orrs	r5, r3
 800d8c2:	613d      	str	r5, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (dma == 1U)
 800d8ca:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d8cc:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 800d8ce:	d102      	bne.n	800d8d6 <USB_EPStartXfer+0x14a>
      if ((uint32_t)ep->xfer_buff != 0U)
 800d8d0:	68cb      	ldr	r3, [r1, #12]
 800d8d2:	b103      	cbz	r3, 800d8d6 <USB_EPStartXfer+0x14a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d8d4:	617b      	str	r3, [r7, #20]
    if (ep->type == EP_TYPE_ISOC)
 800d8d6:	2e01      	cmp	r6, #1
 800d8d8:	d10c      	bne.n	800d8f4 <USB_EPStartXfer+0x168>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d8da:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800d8de:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d8e2:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800d8e6:	bf0c      	ite	eq
 800d8e8:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d8ec:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800d8f0:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d8f4:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800d8f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d8fc:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800d900:	e77a      	b.n	800d7f8 <USB_EPStartXfer+0x6c>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d902:	442b      	add	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d904:	f8df c028 	ldr.w	ip, [pc, #40]	; 800d930 <USB_EPStartXfer+0x1a4>
 800d908:	f8d7 e010 	ldr.w	lr, [r7, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d90c:	3b01      	subs	r3, #1
 800d90e:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d912:	ea0c 4cc3 	and.w	ip, ip, r3, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d916:	b29b      	uxth	r3, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d918:	ea4c 0c0e 	orr.w	ip, ip, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d91c:	436b      	muls	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d91e:	f8c7 c010 	str.w	ip, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d922:	f8d7 c010 	ldr.w	ip, [r7, #16]
 800d926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d92a:	ea43 030c 	orr.w	r3, r3, ip
 800d92e:	e7cc      	b.n	800d8ca <USB_EPStartXfer+0x13e>
 800d930:	1ff80000 	.word	0x1ff80000
 800d934:	e007ffff 	.word	0xe007ffff
 800d938:	fff80000 	.word	0xfff80000

0800d93c <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d93c:	3203      	adds	r2, #3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d93e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d942:	0892      	lsrs	r2, r2, #2
 800d944:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
 800d948:	4291      	cmp	r1, r2
 800d94a:	d101      	bne.n	800d950 <USB_ReadPacket+0x14>
}
 800d94c:	4608      	mov	r0, r1
 800d94e:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d950:	6803      	ldr	r3, [r0, #0]
 800d952:	f841 3b04 	str.w	r3, [r1], #4
 800d956:	e7f7      	b.n	800d948 <USB_ReadPacket+0xc>

0800d958 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800d958:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d95a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800d95c:	2a01      	cmp	r2, #1
 800d95e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800d962:	d112      	bne.n	800d98a <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d964:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800d968:	2a00      	cmp	r2, #0
 800d96a:	db06      	blt.n	800d97a <USB_EPSetStall+0x22>
 800d96c:	b12b      	cbz	r3, 800d97a <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d96e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d972:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d976:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d97a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d97e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d982:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d986:	2000      	movs	r0, #0
 800d988:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d98a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800d98e:	2a00      	cmp	r2, #0
 800d990:	db06      	blt.n	800d9a0 <USB_EPSetStall+0x48>
 800d992:	b12b      	cbz	r3, 800d9a0 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d994:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d998:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d99c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d9a0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d9a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d9a8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800d9ac:	e7eb      	b.n	800d986 <USB_EPSetStall+0x2e>

0800d9ae <USB_EPClearStall>:
{
 800d9ae:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800d9b0:	784a      	ldrb	r2, [r1, #1]
 800d9b2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800d9b6:	78cb      	ldrb	r3, [r1, #3]
 800d9b8:	2a01      	cmp	r2, #1
 800d9ba:	f1a3 0302 	sub.w	r3, r3, #2
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	d10f      	bne.n	800d9e2 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d9c2:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d9c6:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d9c8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800d9cc:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d9d0:	d805      	bhi.n	800d9de <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d9d2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d9d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9da:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d9de:	2000      	movs	r0, #0
 800d9e0:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d9e2:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d9e6:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d9e8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800d9ec:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d9f0:	d8f5      	bhi.n	800d9de <USB_EPClearStall+0x30>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d9f2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d9f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9fa:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800d9fe:	e7ee      	b.n	800d9de <USB_EPClearStall+0x30>

0800da00 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800da00:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800da04:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800da06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800da0a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800da0e:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800da12:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800da16:	4319      	orrs	r1, r3
 800da18:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800da1c:	2000      	movs	r0, #0
 800da1e:	4770      	bx	lr

0800da20 <USB_DevConnect>:
{
 800da20:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800da22:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800da26:	f023 0302 	bic.w	r3, r3, #2
 800da2a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800da2e:	2003      	movs	r0, #3
 800da30:	f7f8 f9f2 	bl	8005e18 <HAL_Delay>
}
 800da34:	2000      	movs	r0, #0
 800da36:	bd08      	pop	{r3, pc}

0800da38 <USB_DevDisconnect>:
{
 800da38:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800da3a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800da3e:	f043 0302 	orr.w	r3, r3, #2
 800da42:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800da46:	2003      	movs	r0, #3
 800da48:	f7f8 f9e6 	bl	8005e18 <HAL_Delay>
}
 800da4c:	2000      	movs	r0, #0
 800da4e:	bd08      	pop	{r3, pc}

0800da50 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800da50:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800da52:	6980      	ldr	r0, [r0, #24]
}
 800da54:	4010      	ands	r0, r2
 800da56:	4770      	bx	lr

0800da58 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800da58:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800da5c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800da60:	69c0      	ldr	r0, [r0, #28]
 800da62:	4018      	ands	r0, r3
}
 800da64:	0c00      	lsrs	r0, r0, #16
 800da66:	4770      	bx	lr

0800da68 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800da68:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800da6c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800da70:	69c0      	ldr	r0, [r0, #28]
 800da72:	4018      	ands	r0, r3
}
 800da74:	b280      	uxth	r0, r0
 800da76:	4770      	bx	lr

0800da78 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800da78:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800da7c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800da80:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800da84:	6940      	ldr	r0, [r0, #20]
}
 800da86:	4010      	ands	r0, r2
 800da88:	4770      	bx	lr

0800da8a <USB_ReadDevInEPInterrupt>:
{
 800da8a:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 800da8c:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800da90:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800da94:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800da98:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800da9c:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800daa0:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800daa2:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800daa4:	01db      	lsls	r3, r3, #7
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	4323      	orrs	r3, r4
}
 800daaa:	4018      	ands	r0, r3
 800daac:	bd10      	pop	{r4, pc}

0800daae <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800daae:	6940      	ldr	r0, [r0, #20]
}
 800dab0:	f000 0001 	and.w	r0, r0, #1
 800dab4:	4770      	bx	lr

0800dab6 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dab6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800daba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dabe:	f023 0307 	bic.w	r3, r3, #7
 800dac2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dac6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800daca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dace:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800dad2:	2000      	movs	r0, #0
 800dad4:	4770      	bx	lr
	...

0800dad8 <USB_EP0_OutStart>:
{
 800dad8:	b530      	push	{r4, r5, lr}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dada:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800dadc:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dae0:	4c0f      	ldr	r4, [pc, #60]	; (800db20 <USB_EP0_OutStart+0x48>)
 800dae2:	42a5      	cmp	r5, r4
 800dae4:	d903      	bls.n	800daee <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dae6:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800daea:	2c00      	cmp	r4, #0
 800daec:	db16      	blt.n	800db1c <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800daee:	2400      	movs	r4, #0
  if (dma == 1U)
 800daf0:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800daf2:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800daf4:	691c      	ldr	r4, [r3, #16]
 800daf6:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800dafa:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dafc:	691c      	ldr	r4, [r3, #16]
 800dafe:	f044 0418 	orr.w	r4, r4, #24
 800db02:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800db04:	691c      	ldr	r4, [r3, #16]
 800db06:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800db0a:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 800db0c:	d106      	bne.n	800db1c <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800db0e:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800db10:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800db14:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800db18:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800db1c:	2000      	movs	r0, #0
 800db1e:	bd30      	pop	{r4, r5, pc}
 800db20:	4f54300a 	.word	0x4f54300a

0800db24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800db24:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800db26:	4903      	ldr	r1, [pc, #12]	; (800db34 <MX_FATFS_Init+0x10>)
 800db28:	4803      	ldr	r0, [pc, #12]	; (800db38 <MX_FATFS_Init+0x14>)
 800db2a:	f002 fab3 	bl	8010094 <FATFS_LinkDriver>
 800db2e:	4b03      	ldr	r3, [pc, #12]	; (800db3c <MX_FATFS_Init+0x18>)
 800db30:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800db32:	bd08      	pop	{r3, pc}
 800db34:	24024509 	.word	0x24024509
 800db38:	08015eb8 	.word	0x08015eb8
 800db3c:	24024508 	.word	0x24024508

0800db40 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800db40:	2000      	movs	r0, #0
 800db42:	4770      	bx	lr

0800db44 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800db44:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800db46:	4613      	mov	r3, r2
 800db48:	460a      	mov	r2, r1
 800db4a:	4601      	mov	r1, r0
 800db4c:	4803      	ldr	r0, [pc, #12]	; (800db5c <BSP_SD_ReadBlocks_DMA+0x18>)
 800db4e:	f7fc fd1b 	bl	800a588 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800db52:	3000      	adds	r0, #0
 800db54:	bf18      	it	ne
 800db56:	2001      	movne	r0, #1
 800db58:	bd08      	pop	{r3, pc}
 800db5a:	bf00      	nop
 800db5c:	2400cd60 	.word	0x2400cd60

0800db60 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800db60:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800db62:	4613      	mov	r3, r2
 800db64:	460a      	mov	r2, r1
 800db66:	4601      	mov	r1, r0
 800db68:	4803      	ldr	r0, [pc, #12]	; (800db78 <BSP_SD_WriteBlocks_DMA+0x18>)
 800db6a:	f7fc fd71 	bl	800a650 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800db6e:	3000      	adds	r0, #0
 800db70:	bf18      	it	ne
 800db72:	2001      	movne	r0, #1
 800db74:	bd08      	pop	{r3, pc}
 800db76:	bf00      	nop
 800db78:	2400cd60 	.word	0x2400cd60

0800db7c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800db7c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800db7e:	4803      	ldr	r0, [pc, #12]	; (800db8c <BSP_SD_GetCardState+0x10>)
 800db80:	f7fd f942 	bl	800ae08 <HAL_SD_GetCardState>
}
 800db84:	3804      	subs	r0, #4
 800db86:	bf18      	it	ne
 800db88:	2001      	movne	r0, #1
 800db8a:	bd08      	pop	{r3, pc}
 800db8c:	2400cd60 	.word	0x2400cd60

0800db90 <BSP_SD_GetCardInfo>:
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800db90:	4601      	mov	r1, r0
 800db92:	4801      	ldr	r0, [pc, #4]	; (800db98 <BSP_SD_GetCardInfo+0x8>)
 800db94:	f7fd b88a 	b.w	800acac <HAL_SD_GetCardInfo>
 800db98:	2400cd60 	.word	0x2400cd60

0800db9c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800db9c:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800db9e:	f000 f907 	bl	800ddb0 <BSP_SD_WriteCpltCallback>
}
 800dba2:	bd08      	pop	{r3, pc}

0800dba4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dba4:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800dba6:	f000 f913 	bl	800ddd0 <BSP_SD_ReadCpltCallback>
}
 800dbaa:	bd08      	pop	{r3, pc}

0800dbac <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 800dbac:	2301      	movs	r3, #1
{
 800dbae:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 800dbb0:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dbb4:	f000 f81e 	bl	800dbf4 <BSP_PlatformIsDetected>
 800dbb8:	b908      	cbnz	r0, 800dbbe <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 800dbba:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800dbbe:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800dbc2:	b003      	add	sp, #12
 800dbc4:	f85d fb04 	ldr.w	pc, [sp], #4

0800dbc8 <BSP_SD_Init>:
{
 800dbc8:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dbca:	f7ff ffef 	bl	800dbac <BSP_SD_IsDetected>
 800dbce:	2801      	cmp	r0, #1
 800dbd0:	d10c      	bne.n	800dbec <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd1);
 800dbd2:	4807      	ldr	r0, [pc, #28]	; (800dbf0 <BSP_SD_Init+0x28>)
 800dbd4:	f7fd f92c 	bl	800ae30 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800dbd8:	b938      	cbnz	r0, 800dbea <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800dbda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800dbde:	4804      	ldr	r0, [pc, #16]	; (800dbf0 <BSP_SD_Init+0x28>)
 800dbe0:	f7fd f876 	bl	800acd0 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800dbe4:	3000      	adds	r0, #0
 800dbe6:	bf18      	it	ne
 800dbe8:	2001      	movne	r0, #1
}
 800dbea:	bd08      	pop	{r3, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 800dbec:	2002      	movs	r0, #2
 800dbee:	e7fc      	b.n	800dbea <BSP_SD_Init+0x22>
 800dbf0:	2400cd60 	.word	0x2400cd60

0800dbf4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800dbf4:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dbf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800dbfa:	4803      	ldr	r0, [pc, #12]	; (800dc08 <BSP_PlatformIsDetected+0x14>)
 800dbfc:	f7fa fa2e 	bl	800805c <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800dc00:	fab0 f080 	clz	r0, r0
 800dc04:	0940      	lsrs	r0, r0, #5
 800dc06:	bd08      	pop	{r3, pc}
 800dc08:	58020800 	.word	0x58020800

0800dc0c <SD_CheckStatus.isra.0>:
  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
  Stat = STA_NOINIT;
 800dc0c:	2301      	movs	r3, #1
static DSTATUS SD_CheckStatus(BYTE lun)
 800dc0e:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800dc10:	4c05      	ldr	r4, [pc, #20]	; (800dc28 <SD_CheckStatus.isra.0+0x1c>)
 800dc12:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dc14:	f7ff ffb2 	bl	800db7c <BSP_SD_GetCardState>
 800dc18:	4623      	mov	r3, r4
 800dc1a:	b918      	cbnz	r0, 800dc24 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 800dc1c:	7822      	ldrb	r2, [r4, #0]
 800dc1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800dc22:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 800dc24:	7818      	ldrb	r0, [r3, #0]
}
 800dc26:	bd10      	pop	{r4, pc}
 800dc28:	24000028 	.word	0x24000028

0800dc2c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dc2c:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	4c0f      	ldr	r4, [pc, #60]	; (800dc70 <SD_initialize+0x44>)
 800dc32:	7023      	strb	r3, [r4, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800dc34:	f002 fa76 	bl	8010124 <osKernelGetState>
 800dc38:	2802      	cmp	r0, #2
 800dc3a:	d116      	bne.n	800dc6a <SD_initialize+0x3e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800dc3c:	f7ff ffc4 	bl	800dbc8 <BSP_SD_Init>
 800dc40:	b910      	cbnz	r0, 800dc48 <SD_initialize+0x1c>
    {
      Stat = SD_CheckStatus(lun);
 800dc42:	f7ff ffe3 	bl	800dc0c <SD_CheckStatus.isra.0>
 800dc46:	7020      	strb	r0, [r4, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800dc48:	7823      	ldrb	r3, [r4, #0]
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d00d      	beq.n	800dc6a <SD_initialize+0x3e>
    {
      if (SDQueueID == NULL)
 800dc4e:	4d09      	ldr	r5, [pc, #36]	; (800dc74 <SD_initialize+0x48>)
 800dc50:	682a      	ldr	r2, [r5, #0]
 800dc52:	b922      	cbnz	r2, 800dc5e <SD_initialize+0x32>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800dc54:	2102      	movs	r1, #2
 800dc56:	200a      	movs	r0, #10
 800dc58:	f002 fcc6 	bl	80105e8 <osMessageQueueNew>
 800dc5c:	6028      	str	r0, [r5, #0]
#endif
      }

      if (SDQueueID == NULL)
 800dc5e:	682b      	ldr	r3, [r5, #0]
 800dc60:	b91b      	cbnz	r3, 800dc6a <SD_initialize+0x3e>
      {
        Stat |= STA_NOINIT;
 800dc62:	7823      	ldrb	r3, [r4, #0]
 800dc64:	f043 0301 	orr.w	r3, r3, #1
 800dc68:	7023      	strb	r3, [r4, #0]
      }
    }
  }

  return Stat;
 800dc6a:	7820      	ldrb	r0, [r4, #0]
}
 800dc6c:	bd38      	pop	{r3, r4, r5, pc}
 800dc6e:	bf00      	nop
 800dc70:	24000028 	.word	0x24000028
 800dc74:	24001674 	.word	0x24001674

0800dc78 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 800dc78:	f7ff bfc8 	b.w	800dc0c <SD_CheckStatus.isra.0>

0800dc7c <SD_read.part.1>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
 800dc7c:	b538      	push	{r3, r4, r5, lr}
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
          if ((status == osOK) && (event == READ_CPLT_MSG))
          {
            timer = osKernelGetTickCount();
 800dc7e:	f002 fa81 	bl	8010184 <osKernelGetTickCount>
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800dc82:	f247 542f 	movw	r4, #29999	; 0x752f
            timer = osKernelGetTickCount();
 800dc86:	4605      	mov	r5, r0
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800dc88:	f002 fa7c 	bl	8010184 <osKernelGetTickCount>
 800dc8c:	1b40      	subs	r0, r0, r5
 800dc8e:	42a0      	cmp	r0, r4
 800dc90:	d901      	bls.n	800dc96 <SD_read.part.1+0x1a>
  DRESULT res = RES_ERROR;
 800dc92:	2001      	movs	r0, #1
 800dc94:	e003      	b.n	800dc9e <SD_read.part.1+0x22>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dc96:	f7ff ff71 	bl	800db7c <BSP_SD_GetCardState>
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	d1f4      	bne.n	800dc88 <SD_read.part.1+0xc>
      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
}
 800dc9e:	bd38      	pop	{r3, r4, r5, pc}

0800dca0 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dca0:	4b12      	ldr	r3, [pc, #72]	; (800dcec <SD_ioctl+0x4c>)
{
 800dca2:	b510      	push	{r4, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dca4:	781b      	ldrb	r3, [r3, #0]
{
 800dca6:	b08a      	sub	sp, #40	; 0x28
 800dca8:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dcaa:	07db      	lsls	r3, r3, #31
 800dcac:	d41b      	bmi.n	800dce6 <SD_ioctl+0x46>

  switch (cmd)
 800dcae:	2903      	cmp	r1, #3
 800dcb0:	d803      	bhi.n	800dcba <SD_ioctl+0x1a>
 800dcb2:	e8df f001 	tbb	[pc, r1]
 800dcb6:	0510      	.short	0x0510
 800dcb8:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 800dcba:	2004      	movs	r0, #4
  }

  return res;
}
 800dcbc:	b00a      	add	sp, #40	; 0x28
 800dcbe:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800dcc0:	a801      	add	r0, sp, #4
 800dcc2:	f7ff ff65 	bl	800db90 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dcc6:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dcc8:	6023      	str	r3, [r4, #0]
 800dcca:	e004      	b.n	800dcd6 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 800dccc:	a801      	add	r0, sp, #4
 800dcce:	f7ff ff5f 	bl	800db90 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dcd2:	9b08      	ldr	r3, [sp, #32]
 800dcd4:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800dcd6:	2000      	movs	r0, #0
 800dcd8:	e7f0      	b.n	800dcbc <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 800dcda:	a801      	add	r0, sp, #4
 800dcdc:	f7ff ff58 	bl	800db90 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dce0:	9b08      	ldr	r3, [sp, #32]
 800dce2:	0a5b      	lsrs	r3, r3, #9
 800dce4:	e7f0      	b.n	800dcc8 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dce6:	2003      	movs	r0, #3
 800dce8:	e7e8      	b.n	800dcbc <SD_ioctl+0x1c>
 800dcea:	bf00      	nop
 800dcec:	24000028 	.word	0x24000028

0800dcf0 <SD_CheckStatusWithTimeout.constprop.4>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 800dcf0:	b538      	push	{r3, r4, r5, lr}
  timer = osKernelGetTickCount();
 800dcf2:	f002 fa47 	bl	8010184 <osKernelGetTickCount>
  while( osKernelGetTickCount() - timer < timeout)
 800dcf6:	f247 542f 	movw	r4, #29999	; 0x752f
  timer = osKernelGetTickCount();
 800dcfa:	4605      	mov	r5, r0
  while( osKernelGetTickCount() - timer < timeout)
 800dcfc:	f002 fa42 	bl	8010184 <osKernelGetTickCount>
 800dd00:	1b40      	subs	r0, r0, r5
 800dd02:	42a0      	cmp	r0, r4
 800dd04:	d902      	bls.n	800dd0c <SD_CheckStatusWithTimeout.constprop.4+0x1c>
  return -1;
 800dd06:	f04f 30ff 	mov.w	r0, #4294967295
 800dd0a:	e003      	b.n	800dd14 <SD_CheckStatusWithTimeout.constprop.4+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dd0c:	f7ff ff36 	bl	800db7c <BSP_SD_GetCardState>
 800dd10:	2800      	cmp	r0, #0
 800dd12:	d1f3      	bne.n	800dcfc <SD_CheckStatusWithTimeout.constprop.4+0xc>
}
 800dd14:	bd38      	pop	{r3, r4, r5, pc}
	...

0800dd18 <SD_write>:
{
 800dd18:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd1a:	460c      	mov	r4, r1
 800dd1c:	4615      	mov	r5, r2
 800dd1e:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dd20:	f7ff ffe6 	bl	800dcf0 <SD_CheckStatusWithTimeout.constprop.4>
 800dd24:	2800      	cmp	r0, #0
 800dd26:	da02      	bge.n	800dd2e <SD_write+0x16>
    return res;
 800dd28:	2001      	movs	r0, #1
}
 800dd2a:	b002      	add	sp, #8
 800dd2c:	bd70      	pop	{r4, r5, r6, pc}
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dd2e:	4632      	mov	r2, r6
 800dd30:	4629      	mov	r1, r5
 800dd32:	4620      	mov	r0, r4
 800dd34:	f7ff ff14 	bl	800db60 <BSP_SD_WriteBlocks_DMA>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	2800      	cmp	r0, #0
 800dd3c:	d1f4      	bne.n	800dd28 <SD_write+0x10>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800dd3e:	4808      	ldr	r0, [pc, #32]	; (800dd60 <SD_write+0x48>)
 800dd40:	f247 5330 	movw	r3, #30000	; 0x7530
 800dd44:	f10d 0106 	add.w	r1, sp, #6
 800dd48:	6800      	ldr	r0, [r0, #0]
 800dd4a:	f002 fcd5 	bl	80106f8 <osMessageQueueGet>
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	d1ea      	bne.n	800dd28 <SD_write+0x10>
 800dd52:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800dd56:	2b02      	cmp	r3, #2
 800dd58:	d1e6      	bne.n	800dd28 <SD_write+0x10>
 800dd5a:	f7ff ff8f 	bl	800dc7c <SD_read.part.1>
 800dd5e:	e7e4      	b.n	800dd2a <SD_write+0x12>
 800dd60:	24001674 	.word	0x24001674

0800dd64 <SD_read>:
{
 800dd64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd66:	460c      	mov	r4, r1
 800dd68:	4615      	mov	r5, r2
 800dd6a:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dd6c:	f7ff ffc0 	bl	800dcf0 <SD_CheckStatusWithTimeout.constprop.4>
 800dd70:	2800      	cmp	r0, #0
 800dd72:	da02      	bge.n	800dd7a <SD_read+0x16>
    return res;
 800dd74:	2001      	movs	r0, #1
}
 800dd76:	b002      	add	sp, #8
 800dd78:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800dd7a:	4632      	mov	r2, r6
 800dd7c:	4629      	mov	r1, r5
 800dd7e:	4620      	mov	r0, r4
 800dd80:	f7ff fee0 	bl	800db44 <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 800dd84:	4602      	mov	r2, r0
 800dd86:	2800      	cmp	r0, #0
 800dd88:	d1f4      	bne.n	800dd74 <SD_read+0x10>
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800dd8a:	4808      	ldr	r0, [pc, #32]	; (800ddac <SD_read+0x48>)
 800dd8c:	f247 5330 	movw	r3, #30000	; 0x7530
 800dd90:	f10d 0106 	add.w	r1, sp, #6
 800dd94:	6800      	ldr	r0, [r0, #0]
 800dd96:	f002 fcaf 	bl	80106f8 <osMessageQueueGet>
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800dd9a:	2800      	cmp	r0, #0
 800dd9c:	d1ea      	bne.n	800dd74 <SD_read+0x10>
 800dd9e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d1e6      	bne.n	800dd74 <SD_read+0x10>
 800dda6:	f7ff ff69 	bl	800dc7c <SD_read.part.1>
 800ddaa:	e7e4      	b.n	800dd76 <SD_read+0x12>
 800ddac:	24001674 	.word	0x24001674

0800ddb0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ddb0:	b507      	push	{r0, r1, r2, lr}
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800ddb2:	2302      	movs	r3, #2
 800ddb4:	a902      	add	r1, sp, #8
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800ddb6:	4805      	ldr	r0, [pc, #20]	; (800ddcc <BSP_SD_WriteCpltCallback+0x1c>)
   const uint16_t msg = WRITE_CPLT_MSG;
 800ddb8:	f821 3d02 	strh.w	r3, [r1, #-2]!
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	6800      	ldr	r0, [r0, #0]
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	f002 fc57 	bl	8010674 <osMessageQueuePut>
#endif
}
 800ddc6:	b003      	add	sp, #12
 800ddc8:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddcc:	24001674 	.word	0x24001674

0800ddd0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ddd0:	b507      	push	{r0, r1, r2, lr}
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	a902      	add	r1, sp, #8
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800ddd6:	4805      	ldr	r0, [pc, #20]	; (800ddec <BSP_SD_ReadCpltCallback+0x1c>)
   const uint16_t msg = READ_CPLT_MSG;
 800ddd8:	f821 3d02 	strh.w	r3, [r1, #-2]!
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800dddc:	2300      	movs	r3, #0
 800ddde:	6800      	ldr	r0, [r0, #0]
 800dde0:	461a      	mov	r2, r3
 800dde2:	f002 fc47 	bl	8010674 <osMessageQueuePut>
#endif
}
 800dde6:	b003      	add	sp, #12
 800dde8:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddec:	24001674 	.word	0x24001674

0800ddf0 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ddf0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
{
 800ddf4:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ddf6:	b16b      	cbz	r3, 800de14 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ddf8:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ddfc:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800de00:	28ff      	cmp	r0, #255	; 0xff
 800de02:	d007      	beq.n	800de14 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800de04:	689b      	ldr	r3, [r3, #8]
 800de06:	4621      	mov	r1, r4
 800de08:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800de0c:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800de0e:	23ff      	movs	r3, #255	; 0xff
 800de10:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 800de14:	2000      	movs	r0, #0
 800de16:	bd10      	pop	{r4, pc}

0800de18 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800de18:	2343      	movs	r3, #67	; 0x43
 800de1a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800de1c:	4800      	ldr	r0, [pc, #0]	; (800de20 <USBD_CDC_GetFSCfgDesc+0x8>)
 800de1e:	4770      	bx	lr
 800de20:	24000064 	.word	0x24000064

0800de24 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800de24:	2343      	movs	r3, #67	; 0x43
 800de26:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800de28:	4800      	ldr	r0, [pc, #0]	; (800de2c <USBD_CDC_GetHSCfgDesc+0x8>)
 800de2a:	4770      	bx	lr
 800de2c:	240000a8 	.word	0x240000a8

0800de30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800de30:	2343      	movs	r3, #67	; 0x43
 800de32:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800de34:	4800      	ldr	r0, [pc, #0]	; (800de38 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800de36:	4770      	bx	lr
 800de38:	240000f8 	.word	0x240000f8

0800de3c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800de3c:	230a      	movs	r3, #10
 800de3e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800de40:	4800      	ldr	r0, [pc, #0]	; (800de44 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800de42:	4770      	bx	lr
 800de44:	240000ec 	.word	0x240000ec

0800de48 <USBD_CDC_DataOut>:
{
 800de48:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de4a:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
{
 800de4e:	4605      	mov	r5, r0
  if (pdev->pClassData == NULL)
 800de50:	b16c      	cbz	r4, 800de6e <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800de52:	f005 fbb7 	bl	80135c4 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800de56:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800de5a:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800de5e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800de68:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800de6a:	2000      	movs	r0, #0
}
 800de6c:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800de6e:	2003      	movs	r0, #3
 800de70:	e7fc      	b.n	800de6c <USBD_CDC_DataOut+0x24>

0800de72 <USBD_CDC_DataIn>:
{
 800de72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 800de74:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 800de78:	4605      	mov	r5, r0
 800de7a:	460a      	mov	r2, r1
  if (pdev->pClassData == NULL)
 800de7c:	b323      	cbz	r3, 800dec8 <USBD_CDC_DataIn+0x56>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800de7e:	2614      	movs	r6, #20
 800de80:	fb06 0601 	mla	r6, r6, r1, r0
 800de84:	69b7      	ldr	r7, [r6, #24]
 800de86:	b19f      	cbz	r7, 800deb0 <USBD_CDC_DataIn+0x3e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800de88:	f04f 0c1c 	mov.w	ip, #28
 800de8c:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800de90:	fb0c 4401 	mla	r4, ip, r1, r4
 800de94:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 800de98:	fbb7 f4fc 	udiv	r4, r7, ip
 800de9c:	fb0c 7414 	mls	r4, ip, r4, r7
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dea0:	b934      	cbnz	r4, 800deb0 <USBD_CDC_DataIn+0x3e>
    pdev->ep_in[epnum].total_length = 0U;
 800dea2:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dea4:	4623      	mov	r3, r4
 800dea6:	4622      	mov	r2, r4
 800dea8:	f005 fb70 	bl	801358c <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800deac:	4620      	mov	r0, r4
}
 800deae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hcdc->TxState = 0U;
 800deb0:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800deb2:	f8d5 12c0 	ldr.w	r1, [r5, #704]	; 0x2c0
 800deb6:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800deba:	690d      	ldr	r5, [r1, #16]
 800debc:	f503 7104 	add.w	r1, r3, #528	; 0x210
    hcdc->TxState = 0U;
 800dec0:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dec4:	47a8      	blx	r5
 800dec6:	e7f1      	b.n	800deac <USBD_CDC_DataIn+0x3a>
    return (uint8_t)USBD_FAIL;
 800dec8:	2003      	movs	r0, #3
 800deca:	e7f0      	b.n	800deae <USBD_CDC_DataIn+0x3c>

0800decc <USBD_CDC_Setup>:
{
 800decc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ded0:	780a      	ldrb	r2, [r1, #0]
  uint8_t ifalt = 0U;
 800ded2:	f04f 0800 	mov.w	r8, #0
{
 800ded6:	4605      	mov	r5, r0
 800ded8:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800deda:	f012 0360 	ands.w	r3, r2, #96	; 0x60
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dede:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800dee2:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800dee6:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800deea:	d025      	beq.n	800df38 <USBD_CDC_Setup+0x6c>
 800deec:	2b20      	cmp	r3, #32
 800deee:	d155      	bne.n	800df9c <USBD_CDC_Setup+0xd0>
    if (req->wLength != 0U)
 800def0:	88cc      	ldrh	r4, [r1, #6]
 800def2:	784b      	ldrb	r3, [r1, #1]
 800def4:	b1cc      	cbz	r4, 800df2a <USBD_CDC_Setup+0x5e>
      if ((req->bmRequest & 0x80U) != 0U)
 800def6:	0612      	lsls	r2, r2, #24
 800def8:	d50d      	bpl.n	800df16 <USBD_CDC_Setup+0x4a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800defa:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800defe:	4639      	mov	r1, r7
 800df00:	4618      	mov	r0, r3
 800df02:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800df06:	4622      	mov	r2, r4
 800df08:	47c8      	blx	r9
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800df0a:	88f2      	ldrh	r2, [r6, #6]
 800df0c:	4639      	mov	r1, r7
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800df0e:	4628      	mov	r0, r5
 800df10:	f000 fc90 	bl	800e834 <USBD_CtlSendData>
 800df14:	e007      	b.n	800df26 <USBD_CDC_Setup+0x5a>
        hcdc->CmdOpCode = req->bRequest;
 800df16:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800df1a:	4622      	mov	r2, r4
        hcdc->CmdLength = (uint8_t)req->wLength;
 800df1c:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800df20:	4639      	mov	r1, r7
 800df22:	f000 fc9c 	bl	800e85e <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800df26:	2000      	movs	r0, #0
 800df28:	e03d      	b.n	800dfa6 <USBD_CDC_Setup+0xda>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800df2a:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800df2e:	4618      	mov	r0, r3
 800df30:	6895      	ldr	r5, [r2, #8]
 800df32:	4622      	mov	r2, r4
 800df34:	47a8      	blx	r5
 800df36:	e7f6      	b.n	800df26 <USBD_CDC_Setup+0x5a>
    switch (req->bRequest)
 800df38:	784b      	ldrb	r3, [r1, #1]
 800df3a:	2b0b      	cmp	r3, #11
 800df3c:	d82e      	bhi.n	800df9c <USBD_CDC_Setup+0xd0>
 800df3e:	a201      	add	r2, pc, #4	; (adr r2, 800df44 <USBD_CDC_Setup+0x78>)
 800df40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df44:	0800df75 	.word	0x0800df75
 800df48:	0800df27 	.word	0x0800df27
 800df4c:	0800df9d 	.word	0x0800df9d
 800df50:	0800df9d 	.word	0x0800df9d
 800df54:	0800df9d 	.word	0x0800df9d
 800df58:	0800df9d 	.word	0x0800df9d
 800df5c:	0800df9d 	.word	0x0800df9d
 800df60:	0800df9d 	.word	0x0800df9d
 800df64:	0800df9d 	.word	0x0800df9d
 800df68:	0800df9d 	.word	0x0800df9d
 800df6c:	0800df85 	.word	0x0800df85
 800df70:	0800df95 	.word	0x0800df95
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df74:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800df78:	2b03      	cmp	r3, #3
 800df7a:	d10f      	bne.n	800df9c <USBD_CDC_Setup+0xd0>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800df7c:	2202      	movs	r2, #2
 800df7e:	f10d 0106 	add.w	r1, sp, #6
 800df82:	e7c4      	b.n	800df0e <USBD_CDC_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df84:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800df88:	2b03      	cmp	r3, #3
 800df8a:	d107      	bne.n	800df9c <USBD_CDC_Setup+0xd0>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800df8c:	2201      	movs	r2, #1
 800df8e:	f10d 0105 	add.w	r1, sp, #5
 800df92:	e7bc      	b.n	800df0e <USBD_CDC_Setup+0x42>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800df94:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800df98:	2b03      	cmp	r3, #3
 800df9a:	d0c4      	beq.n	800df26 <USBD_CDC_Setup+0x5a>
      USBD_CtlError(pdev, req);
 800df9c:	4628      	mov	r0, r5
 800df9e:	4631      	mov	r1, r6
 800dfa0:	f000 fc21 	bl	800e7e6 <USBD_CtlError>
      ret = USBD_FAIL;
 800dfa4:	2003      	movs	r0, #3
}
 800dfa6:	b003      	add	sp, #12
 800dfa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800dfac <USBD_CDC_DeInit>:
{
 800dfac:	b538      	push	{r3, r4, r5, lr}
 800dfae:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800dfb0:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800dfb2:	2181      	movs	r1, #129	; 0x81
 800dfb4:	f005 fa9e 	bl	80134f4 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800dfb8:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800dfba:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f005 fa99 	bl	80134f4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800dfc2:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800dfc6:	2182      	movs	r1, #130	; 0x82
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f005 fa93 	bl	80134f4 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800dfce:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800dfd2:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800dfd4:	b14b      	cbz	r3, 800dfea <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800dfd6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800dfde:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800dfe2:	f005 fb25 	bl	8013630 <free>
    pdev->pClassData = NULL;
 800dfe6:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800dfea:	2000      	movs	r0, #0
 800dfec:	bd38      	pop	{r3, r4, r5, pc}

0800dfee <USBD_CDC_Init>:
{
 800dfee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff2:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dff4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dff8:	f005 fb12 	bl	8013620 <malloc>
  if (hcdc == NULL)
 800dffc:	4606      	mov	r6, r0
    pdev->pClassData = NULL;
 800dffe:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (hcdc == NULL)
 800e002:	b910      	cbnz	r0, 800e00a <USBD_CDC_Init+0x1c>
    return (uint8_t)USBD_EMEM;
 800e004:	2002      	movs	r0, #2
}
 800e006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e00a:	7c23      	ldrb	r3, [r4, #16]
 800e00c:	bbab      	cbnz	r3, 800e07a <USBD_CDC_Init+0x8c>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e00e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e012:	2202      	movs	r2, #2
 800e014:	2181      	movs	r1, #129	; 0x81
 800e016:	4620      	mov	r0, r4
 800e018:	f005 fa5c 	bl	80134d4 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e01c:	2501      	movs	r5, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e01e:	f44f 7300 	mov.w	r3, #512	; 0x200
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e022:	8725      	strh	r5, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e024:	4629      	mov	r1, r5
 800e026:	2202      	movs	r2, #2
 800e028:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e02a:	2701      	movs	r7, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e02c:	f005 fa52 	bl	80134d4 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e030:	2310      	movs	r3, #16
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e032:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e036:	2203      	movs	r2, #3
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e038:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e03c:	2182      	movs	r1, #130	; 0x82
 800e03e:	2308      	movs	r3, #8
 800e040:	4620      	mov	r0, r4
 800e042:	f005 fa47 	bl	80134d4 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e046:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e04a:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  hcdc->TxState = 0U;
 800e04e:	2500      	movs	r5, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e054:	f894 8010 	ldrb.w	r8, [r4, #16]
  hcdc->TxState = 0U;
 800e058:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800e05c:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e060:	f1b8 0f00 	cmp.w	r8, #0
 800e064:	d113      	bne.n	800e08e <USBD_CDC_Init+0xa0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e06a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800e06e:	4639      	mov	r1, r7
 800e070:	4620      	mov	r0, r4
 800e072:	f005 fa99 	bl	80135a8 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800e076:	4640      	mov	r0, r8
 800e078:	e7c5      	b.n	800e006 <USBD_CDC_Init+0x18>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e07a:	2501      	movs	r5, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e07c:	2340      	movs	r3, #64	; 0x40
 800e07e:	2202      	movs	r2, #2
 800e080:	2181      	movs	r1, #129	; 0x81
 800e082:	4620      	mov	r0, r4
 800e084:	f005 fa26 	bl	80134d4 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e088:	8725      	strh	r5, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e08a:	2340      	movs	r3, #64	; 0x40
 800e08c:	e7ca      	b.n	800e024 <USBD_CDC_Init+0x36>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e08e:	2340      	movs	r3, #64	; 0x40
 800e090:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800e094:	4639      	mov	r1, r7
 800e096:	4620      	mov	r0, r4
 800e098:	f005 fa86 	bl	80135a8 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800e09c:	4628      	mov	r0, r5
 800e09e:	e7b2      	b.n	800e006 <USBD_CDC_Init+0x18>

0800e0a0 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800e0a0:	b119      	cbz	r1, 800e0aa <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800e0a2:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800e0aa:	2003      	movs	r0, #3
}
 800e0ac:	4770      	bx	lr

0800e0ae <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e0ae:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 800e0b2:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800e0b4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e0b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800e0bc:	4770      	bx	lr

0800e0be <USBD_CDC_SetRxBuffer>:
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800e0be:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
}
 800e0c2:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800e0c4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800e0c8:	4770      	bx	lr

0800e0ca <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e0ca:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800e0ce:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800e0d0:	b17a      	cbz	r2, 800e0f2 <USBD_CDC_TransmitPacket+0x28>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800e0d2:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	b96c      	cbnz	r4, 800e0f6 <USBD_CDC_TransmitPacket+0x2c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e0da:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e0de:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e0e0:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e0e4:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e0e8:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e0ea:	f005 fa4f 	bl	801358c <USBD_LL_Transmit>

    ret = USBD_OK;
 800e0ee:	4620      	mov	r0, r4
  }

  return (uint8_t)ret;
}
 800e0f0:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800e0f2:	2003      	movs	r0, #3
 800e0f4:	e7fc      	b.n	800e0f0 <USBD_CDC_TransmitPacket+0x26>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	e7fa      	b.n	800e0f0 <USBD_CDC_TransmitPacket+0x26>

0800e0fa <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e0fa:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800e0fe:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800e100:	b162      	cbz	r2, 800e11c <USBD_CDC_ReceivePacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e102:	7c04      	ldrb	r4, [r0, #16]
 800e104:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800e108:	b934      	cbnz	r4, 800e118 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e10a:	f44f 7300 	mov.w	r3, #512	; 0x200
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e10e:	2101      	movs	r1, #1
 800e110:	f005 fa4a 	bl	80135a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e114:	2000      	movs	r0, #0
}
 800e116:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e118:	2340      	movs	r3, #64	; 0x40
 800e11a:	e7f8      	b.n	800e10e <USBD_CDC_ReceivePacket+0x14>
    return (uint8_t)USBD_FAIL;
 800e11c:	2003      	movs	r0, #3
 800e11e:	e7fa      	b.n	800e116 <USBD_CDC_ReceivePacket+0x1c>

0800e120 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e120:	b1a0      	cbz	r0, 800e14c <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e122:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e126:	b113      	cbz	r3, 800e12e <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 800e128:	2300      	movs	r3, #0
 800e12a:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e12e:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 800e132:	b113      	cbz	r3, 800e13a <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 800e134:	2300      	movs	r3, #0
 800e136:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e13a:	b109      	cbz	r1, 800e140 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 800e13c:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e140:	2301      	movs	r3, #1
  pdev->id = id;
 800e142:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e144:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e148:	f005 b986 	b.w	8013458 <USBD_LL_Init>

  return ret;
}
 800e14c:	2003      	movs	r0, #3
 800e14e:	4770      	bx	lr

0800e150 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e150:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t len = 0U;
 800e152:	2400      	movs	r4, #0
{
 800e154:	4605      	mov	r5, r0
  uint16_t len = 0U;
 800e156:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800e15a:	b151      	cbz	r1, 800e172 <USBD_RegisterClass+0x22>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e15c:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e160:	f10d 0006 	add.w	r0, sp, #6
 800e164:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800e166:	4798      	blx	r3
 800e168:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e16c:	4620      	mov	r0, r4
}
 800e16e:	b003      	add	sp, #12
 800e170:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800e172:	2003      	movs	r0, #3
 800e174:	e7fb      	b.n	800e16e <USBD_RegisterClass+0x1e>

0800e176 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e176:	f005 b99f 	b.w	80134b8 <USBD_LL_Start>

0800e17a <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800e17a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e17e:	b10b      	cbz	r3, 800e184 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	4718      	bx	r3
  }

  return ret;
}
 800e184:	2003      	movs	r0, #3
 800e186:	4770      	bx	lr

0800e188 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e188:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e18a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e18e:	b10b      	cbz	r3, 800e194 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	4798      	blx	r3
  }

  return USBD_OK;
}
 800e194:	2000      	movs	r0, #0
 800e196:	bd08      	pop	{r3, pc}

0800e198 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e198:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e19a:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800e19e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	f000 fb0c 	bl	800e7be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e1a6:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800e1a8:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800e1ac:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800e1b0:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800e1b4:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800e1b8:	f001 031f 	and.w	r3, r1, #31
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d00f      	beq.n	800e1e0 <USBD_LL_SetupStage+0x48>
 800e1c0:	d308      	bcc.n	800e1d4 <USBD_LL_SetupStage+0x3c>
 800e1c2:	2b02      	cmp	r3, #2
 800e1c4:	d012      	beq.n	800e1ec <USBD_LL_SetupStage+0x54>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800e1cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e1d0:	f005 b99e 	b.w	8013510 <USBD_LL_StallEP>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e1d4:	4629      	mov	r1, r5
 800e1d6:	4620      	mov	r0, r4
}
 800e1d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e1dc:	f000 b8f4 	b.w	800e3c8 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	4620      	mov	r0, r4
}
 800e1e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e1e8:	f000 ba2e 	b.w	800e648 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e1ec:	4629      	mov	r1, r5
 800e1ee:	4620      	mov	r0, r4
}
 800e1f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e1f4:	f000 ba4f 	b.w	800e696 <USBD_StdEPReq>

0800e1f8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e1f8:	b570      	push	{r4, r5, r6, lr}
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e1fe:	bb09      	cbnz	r1, 800e244 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e200:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800e204:	2b03      	cmp	r3, #3
 800e206:	d10e      	bne.n	800e226 <USBD_LL_DataOutStage+0x2e>
    {
      if (pep->rem_length > pep->maxpacket)
 800e208:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
 800e20c:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800e210:	4293      	cmp	r3, r2
 800e212:	d90a      	bls.n	800e22a <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 800e214:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e216:	4631      	mov	r1, r6
 800e218:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800e21a:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e21e:	bf28      	it	cs
 800e220:	461a      	movcs	r2, r3
 800e222:	f000 fb2b 	bl	800e87c <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800e226:	2000      	movs	r0, #0
}
 800e228:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e22a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e22e:	691b      	ldr	r3, [r3, #16]
 800e230:	b123      	cbz	r3, 800e23c <USBD_LL_DataOutStage+0x44>
 800e232:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e236:	2a03      	cmp	r2, #3
 800e238:	d100      	bne.n	800e23c <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 800e23a:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 800e23c:	4620      	mov	r0, r4
 800e23e:	f000 fb25 	bl	800e88c <USBD_CtlSendStatus>
 800e242:	e7f0      	b.n	800e226 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 800e244:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e248:	699b      	ldr	r3, [r3, #24]
 800e24a:	b133      	cbz	r3, 800e25a <USBD_LL_DataOutStage+0x62>
 800e24c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e250:	2a03      	cmp	r2, #3
 800e252:	d102      	bne.n	800e25a <USBD_LL_DataOutStage+0x62>
}
 800e254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e258:	4718      	bx	r3
    return USBD_FAIL;
 800e25a:	2003      	movs	r0, #3
 800e25c:	e7e4      	b.n	800e228 <USBD_LL_DataOutStage+0x30>

0800e25e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e25e:	b570      	push	{r4, r5, r6, lr}
 800e260:	4604      	mov	r4, r0
 800e262:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e264:	460d      	mov	r5, r1
 800e266:	bbd1      	cbnz	r1, 800e2de <USBD_LL_DataInStage+0x80>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e268:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800e26c:	2b02      	cmp	r3, #2
 800e26e:	d10e      	bne.n	800e28e <USBD_LL_DataInStage+0x30>
    {
      if (pep->rem_length > pep->maxpacket)
 800e270:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
 800e274:	429a      	cmp	r2, r3
 800e276:	d912      	bls.n	800e29e <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 800e278:	1ad2      	subs	r2, r2, r3

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e27a:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 800e27c:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e27e:	f000 fae6 	bl	800e84e <USBD_CtlContinueSendData>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e282:	462b      	mov	r3, r5
 800e284:	462a      	mov	r2, r5
 800e286:	4629      	mov	r1, r5
 800e288:	4620      	mov	r0, r4
 800e28a:	f005 f98d 	bl	80135a8 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e28e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800e292:	2000      	movs	r0, #0
 800e294:	2b01      	cmp	r3, #1
 800e296:	d101      	bne.n	800e29c <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800e298:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800e29c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 800e29e:	d10c      	bne.n	800e2ba <USBD_LL_DataInStage+0x5c>
            (pep->total_length >= pep->maxpacket) &&
 800e2a0:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d809      	bhi.n	800e2ba <USBD_LL_DataInStage+0x5c>
            (pep->total_length >= pep->maxpacket) &&
 800e2a6:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d205      	bcs.n	800e2ba <USBD_LL_DataInStage+0x5c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e2ae:	460a      	mov	r2, r1
 800e2b0:	f000 facd 	bl	800e84e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e2b4:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800e2b8:	e7e3      	b.n	800e282 <USBD_LL_DataInStage+0x24>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e2ba:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	b12b      	cbz	r3, 800e2ce <USBD_LL_DataInStage+0x70>
 800e2c2:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800e2c6:	2a03      	cmp	r2, #3
 800e2c8:	d101      	bne.n	800e2ce <USBD_LL_DataInStage+0x70>
            pdev->pClass->EP0_TxSent(pdev);
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2ce:	2180      	movs	r1, #128	; 0x80
 800e2d0:	4620      	mov	r0, r4
 800e2d2:	f005 f91d 	bl	8013510 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f000 fae3 	bl	800e8a2 <USBD_CtlReceiveStatus>
 800e2dc:	e7d7      	b.n	800e28e <USBD_LL_DataInStage+0x30>
  else if ((pdev->pClass->DataIn != NULL) &&
 800e2de:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e2e2:	695b      	ldr	r3, [r3, #20]
 800e2e4:	b133      	cbz	r3, 800e2f4 <USBD_LL_DataInStage+0x96>
 800e2e6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e2ea:	2a03      	cmp	r2, #3
 800e2ec:	d102      	bne.n	800e2f4 <USBD_LL_DataInStage+0x96>
}
 800e2ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e2f2:	4718      	bx	r3
    return USBD_FAIL;
 800e2f4:	2003      	movs	r0, #3
 800e2f6:	e7d1      	b.n	800e29c <USBD_LL_DataInStage+0x3e>

0800e2f8 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e2f8:	2301      	movs	r3, #1
  pdev->ep0_state = USBD_EP0_IDLE;
 800e2fa:	2100      	movs	r1, #0
{
 800e2fc:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e2fe:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
{
 800e302:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 800e304:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  pdev->ep0_state = USBD_EP0_IDLE;
 800e308:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800e30c:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800e30e:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 800e312:	b11b      	cbz	r3, 800e31c <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e314:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e31c:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e31e:	2540      	movs	r5, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e320:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e322:	2340      	movs	r3, #64	; 0x40
 800e324:	4611      	mov	r1, r2
 800e326:	4620      	mov	r0, r4
 800e328:	f005 f8d4 	bl	80134d4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e32c:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e330:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e334:	462b      	mov	r3, r5
 800e336:	2200      	movs	r2, #0
 800e338:	2180      	movs	r1, #128	; 0x80
 800e33a:	4620      	mov	r0, r4
 800e33c:	f005 f8ca 	bl	80134d4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e340:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e342:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 800e344:	2000      	movs	r0, #0
 800e346:	bd70      	pop	{r4, r5, r6, pc}

0800e348 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800e348:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800e34a:	2000      	movs	r0, #0
 800e34c:	4770      	bx	lr

0800e34e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800e34e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e352:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e356:	2304      	movs	r3, #4
 800e358:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800e35c:	2000      	movs	r0, #0
 800e35e:	4770      	bx	lr

0800e360 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e360:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e364:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800e366:	bf04      	itt	eq
 800e368:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800e36c:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800e370:	2000      	movs	r0, #0
 800e372:	4770      	bx	lr

0800e374 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e374:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e376:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e37a:	2a03      	cmp	r2, #3
 800e37c:	d104      	bne.n	800e388 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800e37e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e382:	69db      	ldr	r3, [r3, #28]
 800e384:	b103      	cbz	r3, 800e388 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800e386:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800e388:	2000      	movs	r0, #0
 800e38a:	bd08      	pop	{r3, pc}

0800e38c <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800e38c:	2000      	movs	r0, #0
 800e38e:	4770      	bx	lr

0800e390 <USBD_LL_IsoOUTIncomplete>:
 800e390:	2000      	movs	r0, #0
 800e392:	4770      	bx	lr

0800e394 <USBD_LL_DevConnected>:
 800e394:	2000      	movs	r0, #0
 800e396:	4770      	bx	lr

0800e398 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e398:	2201      	movs	r2, #1
{
 800e39a:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e39c:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e3a0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800e3a4:	b112      	cbz	r2, 800e3ac <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e3a6:	6852      	ldr	r2, [r2, #4]
 800e3a8:	7901      	ldrb	r1, [r0, #4]
 800e3aa:	4790      	blx	r2
  }

  return USBD_OK;
}
 800e3ac:	2000      	movs	r0, #0
 800e3ae:	bd08      	pop	{r3, pc}

0800e3b0 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800e3b0:	b510      	push	{r4, lr}
 800e3b2:	4604      	mov	r4, r0
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e3b4:	2180      	movs	r1, #128	; 0x80
 800e3b6:	f005 f8ab 	bl	8013510 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e3ba:	2100      	movs	r1, #0
 800e3bc:	4620      	mov	r0, r4
}
 800e3be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800e3c2:	f005 b8a5 	b.w	8013510 <USBD_LL_StallEP>
	...

0800e3c8 <USBD_StdDevReq>:
{
 800e3c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e3ca:	780b      	ldrb	r3, [r1, #0]
{
 800e3cc:	4604      	mov	r4, r0
 800e3ce:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e3d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e3d4:	2b20      	cmp	r3, #32
 800e3d6:	d012      	beq.n	800e3fe <USBD_StdDevReq+0x36>
 800e3d8:	2b40      	cmp	r3, #64	; 0x40
 800e3da:	d010      	beq.n	800e3fe <USBD_StdDevReq+0x36>
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d158      	bne.n	800e492 <USBD_StdDevReq+0xca>
    switch (req->bRequest)
 800e3e0:	784b      	ldrb	r3, [r1, #1]
 800e3e2:	2b09      	cmp	r3, #9
 800e3e4:	d855      	bhi.n	800e492 <USBD_StdDevReq+0xca>
 800e3e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e3ea:	0100      	.short	0x0100
 800e3ec:	0054011e 	.word	0x0054011e
 800e3f0:	00540115 	.word	0x00540115
 800e3f4:	00140081 	.word	0x00140081
 800e3f8:	00e90054 	.word	0x00e90054
 800e3fc:	00a0      	.short	0x00a0
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e3fe:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e402:	4631      	mov	r1, r6
 800e404:	4620      	mov	r0, r4
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	4798      	blx	r3
 800e40a:	4605      	mov	r5, r0
}
 800e40c:	4628      	mov	r0, r5
 800e40e:	b003      	add	sp, #12
 800e410:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t len = 0U;
 800e412:	2300      	movs	r3, #0
 800e414:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800e418:	884b      	ldrh	r3, [r1, #2]
 800e41a:	0a1a      	lsrs	r2, r3, #8
 800e41c:	3a01      	subs	r2, #1
 800e41e:	2a06      	cmp	r2, #6
 800e420:	d837      	bhi.n	800e492 <USBD_StdDevReq+0xca>
 800e422:	e8df f002 	tbb	[pc, r2]
 800e426:	1c04      	.short	0x1c04
 800e428:	4e363629 	.word	0x4e363629
 800e42c:	58          	.byte	0x58
 800e42d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e42e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e432:	681b      	ldr	r3, [r3, #0]
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e434:	f10d 0106 	add.w	r1, sp, #6
 800e438:	7c20      	ldrb	r0, [r4, #16]
 800e43a:	4798      	blx	r3
    if (req->wLength != 0U)
 800e43c:	88f2      	ldrh	r2, [r6, #6]
 800e43e:	2a00      	cmp	r2, #0
 800e440:	f000 80ed 	beq.w	800e61e <USBD_StdDevReq+0x256>
      if (len != 0U)
 800e444:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e448:	b31b      	cbz	r3, 800e492 <USBD_StdDevReq+0xca>
        len = MIN(len, req->wLength);
 800e44a:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800e44c:	4601      	mov	r1, r0
        len = MIN(len, req->wLength);
 800e44e:	bf28      	it	cs
 800e450:	461a      	movcs	r2, r3
 800e452:	f8ad 2006 	strh.w	r2, [sp, #6]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e456:	4620      	mov	r0, r4
 800e458:	f000 f9ec 	bl	800e834 <USBD_CtlSendData>
 800e45c:	e05f      	b.n	800e51e <USBD_StdDevReq+0x156>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e45e:	7c02      	ldrb	r2, [r0, #16]
 800e460:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e464:	b932      	cbnz	r2, 800e474 <USBD_StdDevReq+0xac>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e468:	f10d 0006 	add.w	r0, sp, #6
 800e46c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e46e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e470:	7043      	strb	r3, [r0, #1]
 800e472:	e7e3      	b.n	800e43c <USBD_StdDevReq+0x74>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e476:	e7f7      	b.n	800e468 <USBD_StdDevReq+0xa0>
    switch ((uint8_t)(req->wValue))
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	2b05      	cmp	r3, #5
 800e47c:	d809      	bhi.n	800e492 <USBD_StdDevReq+0xca>
 800e47e:	e8df f003 	tbb	[pc, r3]
 800e482:	0c03      	.short	0x0c03
 800e484:	1c181410 	.word	0x1c181410
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e488:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e48c:	685b      	ldr	r3, [r3, #4]
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d1d0      	bne.n	800e434 <USBD_StdDevReq+0x6c>
      USBD_CtlError(pdev, req);
 800e492:	4620      	mov	r0, r4
 800e494:	f7ff ff8c 	bl	800e3b0 <USBD_CtlError.constprop.1>
 800e498:	e041      	b.n	800e51e <USBD_StdDevReq+0x156>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e49a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	e7f5      	b.n	800e48e <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e4a2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e4a6:	68db      	ldr	r3, [r3, #12]
 800e4a8:	e7f1      	b.n	800e48e <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e4aa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e4ae:	691b      	ldr	r3, [r3, #16]
 800e4b0:	e7ed      	b.n	800e48e <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e4b2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e4b6:	695b      	ldr	r3, [r3, #20]
 800e4b8:	e7e9      	b.n	800e48e <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e4ba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e4be:	699b      	ldr	r3, [r3, #24]
 800e4c0:	e7e5      	b.n	800e48e <USBD_StdDevReq+0xc6>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4c2:	7c03      	ldrb	r3, [r0, #16]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d1e4      	bne.n	800e492 <USBD_StdDevReq+0xca>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e4c8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e4cc:	f10d 0006 	add.w	r0, sp, #6
 800e4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d2:	4798      	blx	r3
 800e4d4:	e7b2      	b.n	800e43c <USBD_StdDevReq+0x74>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4d6:	7c03      	ldrb	r3, [r0, #16]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d1da      	bne.n	800e492 <USBD_StdDevReq+0xca>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e4dc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e4e0:	f10d 0006 	add.w	r0, sp, #6
 800e4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4e6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e4e8:	2307      	movs	r3, #7
 800e4ea:	e7c1      	b.n	800e470 <USBD_StdDevReq+0xa8>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e4ec:	888b      	ldrh	r3, [r1, #4]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d1cf      	bne.n	800e492 <USBD_StdDevReq+0xca>
 800e4f2:	88cf      	ldrh	r7, [r1, #6]
 800e4f4:	2f00      	cmp	r7, #0
 800e4f6:	d1cc      	bne.n	800e492 <USBD_StdDevReq+0xca>
 800e4f8:	884d      	ldrh	r5, [r1, #2]
 800e4fa:	2d7f      	cmp	r5, #127	; 0x7f
 800e4fc:	d8c9      	bhi.n	800e492 <USBD_StdDevReq+0xca>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e502:	2b03      	cmp	r3, #3
 800e504:	d0c5      	beq.n	800e492 <USBD_StdDevReq+0xca>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e506:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800e508:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e50c:	f005 f830 	bl	8013570 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e510:	4620      	mov	r0, r4
 800e512:	f000 f9bb 	bl	800e88c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800e516:	b125      	cbz	r5, 800e522 <USBD_StdDevReq+0x15a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e518:	2302      	movs	r3, #2
 800e51a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
  USBD_StatusTypeDef ret = USBD_OK;
 800e51e:	2500      	movs	r5, #0
 800e520:	e774      	b.n	800e40c <USBD_StdDevReq+0x44>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e522:	2301      	movs	r3, #1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e524:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800e528:	e770      	b.n	800e40c <USBD_StdDevReq+0x44>
  cfgidx = (uint8_t)(req->wValue);
 800e52a:	788d      	ldrb	r5, [r1, #2]
 800e52c:	4e45      	ldr	r6, [pc, #276]	; (800e644 <USBD_StdDevReq+0x27c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e52e:	2d01      	cmp	r5, #1
  cfgidx = (uint8_t)(req->wValue);
 800e530:	7035      	strb	r5, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e532:	d903      	bls.n	800e53c <USBD_StdDevReq+0x174>
    USBD_CtlError(pdev, req);
 800e534:	f7ff ff3c 	bl	800e3b0 <USBD_CtlError.constprop.1>
    ret = USBD_FAIL;
 800e538:	2503      	movs	r5, #3
 800e53a:	e767      	b.n	800e40c <USBD_StdDevReq+0x44>
  switch (pdev->dev_state)
 800e53c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e540:	2b02      	cmp	r3, #2
 800e542:	d008      	beq.n	800e556 <USBD_StdDevReq+0x18e>
 800e544:	2b03      	cmp	r3, #3
 800e546:	d016      	beq.n	800e576 <USBD_StdDevReq+0x1ae>
    USBD_CtlError(pdev, req);
 800e548:	f7ff ff32 	bl	800e3b0 <USBD_CtlError.constprop.1>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e54c:	7831      	ldrb	r1, [r6, #0]
 800e54e:	4620      	mov	r0, r4
 800e550:	f7ff fe1a 	bl	800e188 <USBD_ClrClassConfig>
 800e554:	e7f0      	b.n	800e538 <USBD_StdDevReq+0x170>
    if (cfgidx != 0U)
 800e556:	2d00      	cmp	r5, #0
 800e558:	d061      	beq.n	800e61e <USBD_StdDevReq+0x256>
      pdev->dev_config = cfgidx;
 800e55a:	2101      	movs	r1, #1
 800e55c:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e55e:	f7ff fe0c 	bl	800e17a <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800e562:	4605      	mov	r5, r0
        USBD_CtlError(pdev, req);
 800e564:	4620      	mov	r0, r4
      if (ret != USBD_OK)
 800e566:	b115      	cbz	r5, 800e56e <USBD_StdDevReq+0x1a6>
        USBD_CtlError(pdev, req);
 800e568:	f7ff ff22 	bl	800e3b0 <USBD_CtlError.constprop.1>
 800e56c:	e74e      	b.n	800e40c <USBD_StdDevReq+0x44>
        (void)USBD_CtlSendStatus(pdev);
 800e56e:	f000 f98d 	bl	800e88c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e572:	2303      	movs	r3, #3
 800e574:	e7d6      	b.n	800e524 <USBD_StdDevReq+0x15c>
    if (cfgidx == 0U)
 800e576:	b955      	cbnz	r5, 800e58e <USBD_StdDevReq+0x1c6>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800e578:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 800e57a:	6045      	str	r5, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e57c:	4629      	mov	r1, r5
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800e57e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e582:	f7ff fe01 	bl	800e188 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e586:	4620      	mov	r0, r4
 800e588:	f000 f980 	bl	800e88c <USBD_CtlSendStatus>
 800e58c:	e73e      	b.n	800e40c <USBD_StdDevReq+0x44>
    else if (cfgidx != pdev->dev_config)
 800e58e:	6841      	ldr	r1, [r0, #4]
 800e590:	2901      	cmp	r1, #1
 800e592:	d044      	beq.n	800e61e <USBD_StdDevReq+0x256>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e594:	b2c9      	uxtb	r1, r1
 800e596:	f7ff fdf7 	bl	800e188 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800e59a:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e59c:	4620      	mov	r0, r4
      pdev->dev_config = cfgidx;
 800e59e:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e5a0:	f7ff fdeb 	bl	800e17a <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800e5a4:	4605      	mov	r5, r0
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	d039      	beq.n	800e61e <USBD_StdDevReq+0x256>
        USBD_CtlError(pdev, req);
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	f7ff ff00 	bl	800e3b0 <USBD_CtlError.constprop.1>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e5b0:	7921      	ldrb	r1, [r4, #4]
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	f7ff fde8 	bl	800e188 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e5b8:	2302      	movs	r3, #2
 800e5ba:	e7b3      	b.n	800e524 <USBD_StdDevReq+0x15c>
  if (req->wLength != 1U)
 800e5bc:	88ca      	ldrh	r2, [r1, #6]
 800e5be:	2a01      	cmp	r2, #1
 800e5c0:	f47f af67 	bne.w	800e492 <USBD_StdDevReq+0xca>
    switch (pdev->dev_state)
 800e5c4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	f43f af62 	beq.w	800e492 <USBD_StdDevReq+0xca>
 800e5ce:	2b02      	cmp	r3, #2
 800e5d0:	d904      	bls.n	800e5dc <USBD_StdDevReq+0x214>
 800e5d2:	2b03      	cmp	r3, #3
 800e5d4:	f47f af5d 	bne.w	800e492 <USBD_StdDevReq+0xca>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e5d8:	1d01      	adds	r1, r0, #4
 800e5da:	e73c      	b.n	800e456 <USBD_StdDevReq+0x8e>
      pdev->dev_default_config = 0U;
 800e5dc:	2500      	movs	r5, #0
 800e5de:	4601      	mov	r1, r0
 800e5e0:	f841 5f08 	str.w	r5, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e5e4:	f000 f926 	bl	800e834 <USBD_CtlSendData>
 800e5e8:	e710      	b.n	800e40c <USBD_StdDevReq+0x44>
  switch (pdev->dev_state)
 800e5ea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e5ee:	3b01      	subs	r3, #1
 800e5f0:	2b02      	cmp	r3, #2
 800e5f2:	f63f af4e 	bhi.w	800e492 <USBD_StdDevReq+0xca>
    if (req->wLength != 0x2U)
 800e5f6:	88cb      	ldrh	r3, [r1, #6]
 800e5f8:	2b02      	cmp	r3, #2
 800e5fa:	f47f af4a 	bne.w	800e492 <USBD_StdDevReq+0xca>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e5fe:	2301      	movs	r3, #1
 800e600:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 800e602:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800e606:	b10b      	cbz	r3, 800e60c <USBD_StdDevReq+0x244>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e608:	2303      	movs	r3, #3
 800e60a:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e60c:	2202      	movs	r2, #2
 800e60e:	f104 010c 	add.w	r1, r4, #12
 800e612:	e720      	b.n	800e456 <USBD_StdDevReq+0x8e>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e614:	884b      	ldrh	r3, [r1, #2]
 800e616:	2b01      	cmp	r3, #1
 800e618:	d181      	bne.n	800e51e <USBD_StdDevReq+0x156>
    pdev->dev_remote_wakeup = 1U;
 800e61a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e61e:	4620      	mov	r0, r4
 800e620:	f000 f934 	bl	800e88c <USBD_CtlSendStatus>
 800e624:	e77b      	b.n	800e51e <USBD_StdDevReq+0x156>
  switch (pdev->dev_state)
 800e626:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e62a:	3b01      	subs	r3, #1
 800e62c:	2b02      	cmp	r3, #2
 800e62e:	f63f af30 	bhi.w	800e492 <USBD_StdDevReq+0xca>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e632:	884b      	ldrh	r3, [r1, #2]
 800e634:	2500      	movs	r5, #0
 800e636:	2b01      	cmp	r3, #1
 800e638:	f47f aee8 	bne.w	800e40c <USBD_StdDevReq+0x44>
        pdev->dev_remote_wakeup = 0U;
 800e63c:	f8c0 52a4 	str.w	r5, [r0, #676]	; 0x2a4
 800e640:	e7a1      	b.n	800e586 <USBD_StdDevReq+0x1be>
 800e642:	bf00      	nop
 800e644:	24001678 	.word	0x24001678

0800e648 <USBD_StdItfReq>:
{
 800e648:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e64a:	780b      	ldrb	r3, [r1, #0]
{
 800e64c:	4604      	mov	r4, r0
 800e64e:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e650:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e654:	2b20      	cmp	r3, #32
 800e656:	d002      	beq.n	800e65e <USBD_StdItfReq+0x16>
 800e658:	2b40      	cmp	r3, #64	; 0x40
 800e65a:	d000      	beq.n	800e65e <USBD_StdItfReq+0x16>
 800e65c:	b9b3      	cbnz	r3, 800e68c <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 800e65e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800e662:	3b01      	subs	r3, #1
 800e664:	2b02      	cmp	r3, #2
 800e666:	d811      	bhi.n	800e68c <USBD_StdItfReq+0x44>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e668:	7933      	ldrb	r3, [r6, #4]
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	d80e      	bhi.n	800e68c <USBD_StdItfReq+0x44>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e66e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e672:	4631      	mov	r1, r6
 800e674:	4620      	mov	r0, r4
 800e676:	689b      	ldr	r3, [r3, #8]
 800e678:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e67a:	88f3      	ldrh	r3, [r6, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e67c:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e67e:	b91b      	cbnz	r3, 800e688 <USBD_StdItfReq+0x40>
 800e680:	b910      	cbnz	r0, 800e688 <USBD_StdItfReq+0x40>
          (void)USBD_CtlSendStatus(pdev);
 800e682:	4620      	mov	r0, r4
 800e684:	f000 f902 	bl	800e88c <USBD_CtlSendStatus>
}
 800e688:	4628      	mov	r0, r5
 800e68a:	bd70      	pop	{r4, r5, r6, pc}
      USBD_CtlError(pdev, req);
 800e68c:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800e68e:	2500      	movs	r5, #0
      USBD_CtlError(pdev, req);
 800e690:	f7ff fe8e 	bl	800e3b0 <USBD_CtlError.constprop.1>
      break;
 800e694:	e7f8      	b.n	800e688 <USBD_StdItfReq+0x40>

0800e696 <USBD_StdEPReq>:
{
 800e696:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e698:	780b      	ldrb	r3, [r1, #0]
{
 800e69a:	4604      	mov	r4, r0
 800e69c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e69e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e6a2:	2b20      	cmp	r3, #32
 800e6a4:	d014      	beq.n	800e6d0 <USBD_StdEPReq+0x3a>
 800e6a6:	2b40      	cmp	r3, #64	; 0x40
 800e6a8:	d012      	beq.n	800e6d0 <USBD_StdEPReq+0x3a>
 800e6aa:	b96b      	cbnz	r3, 800e6c8 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 800e6ac:	786a      	ldrb	r2, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 800e6ae:	888b      	ldrh	r3, [r1, #4]
    switch (req->bRequest)
 800e6b0:	2a01      	cmp	r2, #1
  ep_addr = LOBYTE(req->wIndex);
 800e6b2:	b2d9      	uxtb	r1, r3
    switch (req->bRequest)
 800e6b4:	d021      	beq.n	800e6fa <USBD_StdEPReq+0x64>
 800e6b6:	d340      	bcc.n	800e73a <USBD_StdEPReq+0xa4>
 800e6b8:	2a03      	cmp	r2, #3
 800e6ba:	d105      	bne.n	800e6c8 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 800e6bc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e6c0:	2b02      	cmp	r3, #2
 800e6c2:	d031      	beq.n	800e728 <USBD_StdEPReq+0x92>
 800e6c4:	2b03      	cmp	r3, #3
 800e6c6:	d00b      	beq.n	800e6e0 <USBD_StdEPReq+0x4a>
        USBD_CtlError(pdev, req);
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	f7ff fe71 	bl	800e3b0 <USBD_CtlError.constprop.1>
        break;
 800e6ce:	e012      	b.n	800e6f6 <USBD_StdEPReq+0x60>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e6d0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e6d4:	4629      	mov	r1, r5
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	689b      	ldr	r3, [r3, #8]
}
 800e6da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e6de:	4718      	bx	r3
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e6e0:	886b      	ldrh	r3, [r5, #2]
 800e6e2:	b92b      	cbnz	r3, 800e6f0 <USBD_StdEPReq+0x5a>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e6e4:	064a      	lsls	r2, r1, #25
 800e6e6:	d003      	beq.n	800e6f0 <USBD_StdEPReq+0x5a>
 800e6e8:	88eb      	ldrh	r3, [r5, #6]
 800e6ea:	b90b      	cbnz	r3, 800e6f0 <USBD_StdEPReq+0x5a>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800e6ec:	f004 ff10 	bl	8013510 <USBD_LL_StallEP>
        (void)USBD_CtlSendStatus(pdev);
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	f000 f8cb 	bl	800e88c <USBD_CtlSendStatus>
}
 800e6f6:	2000      	movs	r0, #0
 800e6f8:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800e6fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e6fe:	2b02      	cmp	r3, #2
 800e700:	d012      	beq.n	800e728 <USBD_StdEPReq+0x92>
 800e702:	2b03      	cmp	r3, #3
 800e704:	d1e0      	bne.n	800e6c8 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e706:	886b      	ldrh	r3, [r5, #2]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d1f4      	bne.n	800e6f6 <USBD_StdEPReq+0x60>
          if ((ep_addr & 0x7FU) != 0x00U)
 800e70c:	064e      	lsls	r6, r1, #25
 800e70e:	d001      	beq.n	800e714 <USBD_StdEPReq+0x7e>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e710:	f004 ff0c 	bl	801352c <USBD_LL_ClearStallEP>
          (void)USBD_CtlSendStatus(pdev);
 800e714:	4620      	mov	r0, r4
 800e716:	f000 f8b9 	bl	800e88c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e71a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e71e:	4629      	mov	r1, r5
 800e720:	4620      	mov	r0, r4
 800e722:	689b      	ldr	r3, [r3, #8]
 800e724:	4798      	blx	r3
 800e726:	e7e6      	b.n	800e6f6 <USBD_StdEPReq+0x60>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e728:	064b      	lsls	r3, r1, #25
 800e72a:	d0cd      	beq.n	800e6c8 <USBD_StdEPReq+0x32>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e72c:	f004 fef0 	bl	8013510 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e730:	2180      	movs	r1, #128	; 0x80
 800e732:	4620      	mov	r0, r4
 800e734:	f004 feec 	bl	8013510 <USBD_LL_StallEP>
 800e738:	e7dd      	b.n	800e6f6 <USBD_StdEPReq+0x60>
      switch (pdev->dev_state)
 800e73a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e73e:	2a02      	cmp	r2, #2
 800e740:	d019      	beq.n	800e776 <USBD_StdEPReq+0xe0>
 800e742:	2a03      	cmp	r2, #3
 800e744:	d1c0      	bne.n	800e6c8 <USBD_StdEPReq+0x32>
 800e746:	f001 020f 	and.w	r2, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 800e74a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e74e:	f04f 0314 	mov.w	r3, #20
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e752:	fb03 0202 	mla	r2, r3, r2, r0
        if ((ep_addr & 0x80U) == 0x80U)
 800e756:	d01f      	beq.n	800e798 <USBD_StdEPReq+0x102>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e758:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800e75a:	2a00      	cmp	r2, #0
 800e75c:	d0b4      	beq.n	800e6c8 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e75e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800e762:	fb05 3503 	mla	r5, r5, r3, r3
 800e766:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e768:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800e76c:	d11f      	bne.n	800e7ae <USBD_StdEPReq+0x118>
            pep->status = 0x0001U;
 800e76e:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e770:	2202      	movs	r2, #2
 800e772:	4629      	mov	r1, r5
 800e774:	e00c      	b.n	800e790 <USBD_StdEPReq+0xfa>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e776:	064a      	lsls	r2, r1, #25
 800e778:	d1a6      	bne.n	800e6c8 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e77a:	061b      	lsls	r3, r3, #24
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e77c:	f04f 0202 	mov.w	r2, #2
        pep->status = 0x0000U;
 800e780:	f04f 0300 	mov.w	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e784:	bf4c      	ite	mi
 800e786:	f100 0114 	addmi.w	r1, r0, #20
 800e78a:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
        pep->status = 0x0000U;
 800e78e:	600b      	str	r3, [r1, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e790:	4620      	mov	r0, r4
 800e792:	f000 f84f 	bl	800e834 <USBD_CtlSendData>
          break;
 800e796:	e7ae      	b.n	800e6f6 <USBD_StdEPReq+0x60>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e798:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800e79c:	2a00      	cmp	r2, #0
 800e79e:	d093      	beq.n	800e6c8 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e7a0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800e7a4:	fb03 0505 	mla	r5, r3, r5, r0
 800e7a8:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800e7ac:	e7dc      	b.n	800e768 <USBD_StdEPReq+0xd2>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	f004 feca 	bl	8013548 <USBD_LL_IsStallEP>
 800e7b4:	b108      	cbz	r0, 800e7ba <USBD_StdEPReq+0x124>
            pep->status = 0x0001U;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e7d9      	b.n	800e76e <USBD_StdEPReq+0xd8>
            pep->status = 0x0000U;
 800e7ba:	6028      	str	r0, [r5, #0]
 800e7bc:	e7d8      	b.n	800e770 <USBD_StdEPReq+0xda>

0800e7be <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800e7be:	780b      	ldrb	r3, [r1, #0]
 800e7c0:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800e7c2:	784b      	ldrb	r3, [r1, #1]
 800e7c4:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e7c6:	78ca      	ldrb	r2, [r1, #3]
 800e7c8:	788b      	ldrb	r3, [r1, #2]
 800e7ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800e7ce:	8043      	strh	r3, [r0, #2]
 800e7d0:	794a      	ldrb	r2, [r1, #5]
 800e7d2:	790b      	ldrb	r3, [r1, #4]
 800e7d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800e7d8:	8083      	strh	r3, [r0, #4]
 800e7da:	79ca      	ldrb	r2, [r1, #7]
 800e7dc:	798b      	ldrb	r3, [r1, #6]
 800e7de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800e7e2:	80c3      	strh	r3, [r0, #6]
}
 800e7e4:	4770      	bx	lr

0800e7e6 <USBD_CtlError>:
{
 800e7e6:	b510      	push	{r4, lr}
 800e7e8:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7ea:	2180      	movs	r1, #128	; 0x80
 800e7ec:	f004 fe90 	bl	8013510 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e7f0:	2100      	movs	r1, #0
 800e7f2:	4620      	mov	r0, r4
}
 800e7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800e7f8:	f004 be8a 	b.w	8013510 <USBD_LL_StallEP>

0800e7fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e7fc:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800e7fe:	b188      	cbz	r0, 800e824 <USBD_GetString+0x28>
 800e800:	4605      	mov	r5, r0
 800e802:	1a2b      	subs	r3, r5, r0
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800e804:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	2c00      	cmp	r4, #0
 800e80c:	d1f9      	bne.n	800e802 <USBD_GetString+0x6>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e80e:	3301      	adds	r3, #1
 800e810:	3801      	subs	r0, #1
 800e812:	005b      	lsls	r3, r3, #1
 800e814:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800e816:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e818:	2303      	movs	r3, #3
 800e81a:	704b      	strb	r3, [r1, #1]
  idx++;
 800e81c:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800e81e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800e822:	b902      	cbnz	r2, 800e826 <USBD_GetString+0x2a>
}
 800e824:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 800e826:	54ca      	strb	r2, [r1, r3]
    idx++;
 800e828:	1c5a      	adds	r2, r3, #1
    idx++;
 800e82a:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800e82c:	b2d2      	uxtb	r2, r2
    idx++;
 800e82e:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800e830:	548c      	strb	r4, [r1, r2]
 800e832:	e7f4      	b.n	800e81e <USBD_GetString+0x22>

0800e834 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e834:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e836:	2202      	movs	r2, #2
{
 800e838:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e83a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e83e:	460a      	mov	r2, r1
 800e840:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length = len;
 800e842:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e846:	f004 fea1 	bl	801358c <USBD_LL_Transmit>

  return USBD_OK;
}
 800e84a:	2000      	movs	r0, #0
 800e84c:	bd10      	pop	{r4, pc}

0800e84e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e84e:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e850:	4613      	mov	r3, r2
 800e852:	460a      	mov	r2, r1
 800e854:	2100      	movs	r1, #0
 800e856:	f004 fe99 	bl	801358c <USBD_LL_Transmit>

  return USBD_OK;
}
 800e85a:	2000      	movs	r0, #0
 800e85c:	bd08      	pop	{r3, pc}

0800e85e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e85e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e860:	2203      	movs	r2, #3
{
 800e862:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e864:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e868:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 800e86a:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e86e:	2100      	movs	r1, #0
  pdev->ep_out[0].rem_length = len;
 800e870:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e874:	f004 fe98 	bl	80135a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e878:	2000      	movs	r0, #0
 800e87a:	bd10      	pop	{r4, pc}

0800e87c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e87c:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e87e:	4613      	mov	r3, r2
 800e880:	460a      	mov	r2, r1
 800e882:	2100      	movs	r1, #0
 800e884:	f004 fe90 	bl	80135a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e888:	2000      	movs	r0, #0
 800e88a:	bd08      	pop	{r3, pc}

0800e88c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e88c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e88e:	2304      	movs	r3, #4
 800e890:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e894:	2300      	movs	r3, #0
 800e896:	461a      	mov	r2, r3
 800e898:	4619      	mov	r1, r3
 800e89a:	f004 fe77 	bl	801358c <USBD_LL_Transmit>

  return USBD_OK;
}
 800e89e:	2000      	movs	r0, #0
 800e8a0:	bd08      	pop	{r3, pc}

0800e8a2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e8a2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e8a4:	2305      	movs	r3, #5
 800e8a6:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	f004 fe7a 	bl	80135a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	bd08      	pop	{r3, pc}

0800e8b8 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e8b8:	4b03      	ldr	r3, [pc, #12]	; (800e8c8 <disk_status+0x10>)
 800e8ba:	181a      	adds	r2, r3, r0
 800e8bc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	7a10      	ldrb	r0, [r2, #8]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	4718      	bx	r3
 800e8c8:	240016a4 	.word	0x240016a4

0800e8cc <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800e8cc:	4b06      	ldr	r3, [pc, #24]	; (800e8e8 <disk_initialize+0x1c>)
 800e8ce:	5c1a      	ldrb	r2, [r3, r0]
 800e8d0:	b942      	cbnz	r2, 800e8e4 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e8d6:	181a      	adds	r2, r3, r0
 800e8d8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800e8dc:	7a10      	ldrb	r0, [r2, #8]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	4718      	bx	r3
  }
  return stat;
}
 800e8e4:	2000      	movs	r0, #0
 800e8e6:	4770      	bx	lr
 800e8e8:	240016a4 	.word	0x240016a4

0800e8ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e8ec:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e8ee:	4c05      	ldr	r4, [pc, #20]	; (800e904 <disk_read+0x18>)
 800e8f0:	1825      	adds	r5, r4, r0
 800e8f2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800e8f6:	6860      	ldr	r0, [r4, #4]
 800e8f8:	6884      	ldr	r4, [r0, #8]
 800e8fa:	7a28      	ldrb	r0, [r5, #8]
 800e8fc:	46a4      	mov	ip, r4
  return res;
}
 800e8fe:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e900:	4760      	bx	ip
 800e902:	bf00      	nop
 800e904:	240016a4 	.word	0x240016a4

0800e908 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e908:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e90a:	4c05      	ldr	r4, [pc, #20]	; (800e920 <disk_write+0x18>)
 800e90c:	1825      	adds	r5, r4, r0
 800e90e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800e912:	6860      	ldr	r0, [r4, #4]
 800e914:	68c4      	ldr	r4, [r0, #12]
 800e916:	7a28      	ldrb	r0, [r5, #8]
 800e918:	46a4      	mov	ip, r4
  return res;
}
 800e91a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e91c:	4760      	bx	ip
 800e91e:	bf00      	nop
 800e920:	240016a4 	.word	0x240016a4

0800e924 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e924:	4b05      	ldr	r3, [pc, #20]	; (800e93c <disk_ioctl+0x18>)
{
 800e926:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e928:	181c      	adds	r4, r3, r0
 800e92a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	7a20      	ldrb	r0, [r4, #8]
 800e932:	691b      	ldr	r3, [r3, #16]
  return res;
}
 800e934:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e938:	4718      	bx	r3
 800e93a:	bf00      	nop
 800e93c:	240016a4 	.word	0x240016a4

0800e940 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 800e940:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 800e942:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 800e944:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 800e946:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 800e94a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800e94e:	4770      	bx	lr

0800e950 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800e950:	0a0b      	lsrs	r3, r1, #8
 800e952:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e954:	7043      	strb	r3, [r0, #1]
 800e956:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800e958:	0e09      	lsrs	r1, r1, #24
 800e95a:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800e95c:	70c1      	strb	r1, [r0, #3]
}
 800e95e:	4770      	bx	lr

0800e960 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e960:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800e962:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 800e966:	4290      	cmp	r0, r2
 800e968:	d1fb      	bne.n	800e962 <mem_set+0x2>
}
 800e96a:	4770      	bx	lr

0800e96c <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800e96c:	4a1b      	ldr	r2, [pc, #108]	; (800e9dc <chk_lock+0x70>)
 800e96e:	6813      	ldr	r3, [r2, #0]
{
 800e970:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 800e972:	b163      	cbz	r3, 800e98e <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e974:	6804      	ldr	r4, [r0, #0]
 800e976:	429c      	cmp	r4, r3
 800e978:	d107      	bne.n	800e98a <chk_lock+0x1e>
 800e97a:	6854      	ldr	r4, [r2, #4]
 800e97c:	6883      	ldr	r3, [r0, #8]
 800e97e:	429c      	cmp	r4, r3
 800e980:	d103      	bne.n	800e98a <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 800e982:	6894      	ldr	r4, [r2, #8]
 800e984:	6943      	ldr	r3, [r0, #20]
 800e986:	429c      	cmp	r4, r3
 800e988:	d020      	beq.n	800e9cc <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e98a:	2400      	movs	r4, #0
 800e98c:	e000      	b.n	800e990 <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 800e98e:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 800e990:	6913      	ldr	r3, [r2, #16]
 800e992:	b1cb      	cbz	r3, 800e9c8 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e994:	6805      	ldr	r5, [r0, #0]
 800e996:	42ab      	cmp	r3, r5
 800e998:	d107      	bne.n	800e9aa <chk_lock+0x3e>
 800e99a:	6955      	ldr	r5, [r2, #20]
 800e99c:	6883      	ldr	r3, [r0, #8]
 800e99e:	429d      	cmp	r5, r3
 800e9a0:	d103      	bne.n	800e9aa <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 800e9a2:	6995      	ldr	r5, [r2, #24]
 800e9a4:	6943      	ldr	r3, [r0, #20]
 800e9a6:	429d      	cmp	r5, r3
 800e9a8:	d015      	beq.n	800e9d6 <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e9aa:	b96c      	cbnz	r4, 800e9c8 <chk_lock+0x5c>
 800e9ac:	2902      	cmp	r1, #2
 800e9ae:	bf0c      	ite	eq
 800e9b0:	2000      	moveq	r0, #0
 800e9b2:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 800e9b4:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e9b6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800e9ba:	8993      	ldrh	r3, [r2, #12]
 800e9bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9c0:	bf14      	ite	ne
 800e9c2:	2000      	movne	r0, #0
 800e9c4:	2010      	moveq	r0, #16
 800e9c6:	e7f5      	b.n	800e9b4 <chk_lock+0x48>
 800e9c8:	2000      	movs	r0, #0
 800e9ca:	e7f3      	b.n	800e9b4 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e9cc:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e9ce:	2900      	cmp	r1, #0
 800e9d0:	d0f1      	beq.n	800e9b6 <chk_lock+0x4a>
 800e9d2:	2010      	movs	r0, #16
 800e9d4:	e7ee      	b.n	800e9b4 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	e7f9      	b.n	800e9ce <chk_lock+0x62>
 800e9da:	bf00      	nop
 800e9dc:	24001680 	.word	0x24001680

0800e9e0 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800e9e0:	4a1e      	ldr	r2, [pc, #120]	; (800ea5c <inc_lock+0x7c>)
{
 800e9e2:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 800e9e4:	6813      	ldr	r3, [r2, #0]
 800e9e6:	6805      	ldr	r5, [r0, #0]
 800e9e8:	429d      	cmp	r5, r3
 800e9ea:	d107      	bne.n	800e9fc <inc_lock+0x1c>
 800e9ec:	6856      	ldr	r6, [r2, #4]
 800e9ee:	6884      	ldr	r4, [r0, #8]
 800e9f0:	42a6      	cmp	r6, r4
 800e9f2:	d103      	bne.n	800e9fc <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 800e9f4:	6946      	ldr	r6, [r0, #20]
 800e9f6:	6894      	ldr	r4, [r2, #8]
 800e9f8:	42a6      	cmp	r6, r4
 800e9fa:	d021      	beq.n	800ea40 <inc_lock+0x60>
		if (Files[i].fs == dp->obj.fs &&
 800e9fc:	6914      	ldr	r4, [r2, #16]
 800e9fe:	42ac      	cmp	r4, r5
 800ea00:	d107      	bne.n	800ea12 <inc_lock+0x32>
 800ea02:	6957      	ldr	r7, [r2, #20]
 800ea04:	6886      	ldr	r6, [r0, #8]
 800ea06:	42b7      	cmp	r7, r6
 800ea08:	d103      	bne.n	800ea12 <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 800ea0a:	6997      	ldr	r7, [r2, #24]
 800ea0c:	6946      	ldr	r6, [r0, #20]
 800ea0e:	42b7      	cmp	r7, r6
 800ea10:	d020      	beq.n	800ea54 <inc_lock+0x74>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ea12:	b10b      	cbz	r3, 800ea18 <inc_lock+0x38>
 800ea14:	bb04      	cbnz	r4, 800ea58 <inc_lock+0x78>
 800ea16:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 800ea18:	011e      	lsls	r6, r3, #4
 800ea1a:	1994      	adds	r4, r2, r6
 800ea1c:	5195      	str	r5, [r2, r6]
		Files[i].clu = dp->obj.sclust;
 800ea1e:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 800ea20:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 800ea22:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 800ea24:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 800ea26:	2000      	movs	r0, #0
 800ea28:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ea2a:	b981      	cbnz	r1, 800ea4e <inc_lock+0x6e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ea2c:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 800ea30:	8989      	ldrh	r1, [r1, #12]
 800ea32:	3101      	adds	r1, #1
 800ea34:	b289      	uxth	r1, r1
 800ea36:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 800ea3a:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ea3c:	8191      	strh	r1, [r2, #12]
}
 800ea3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ea40:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ea42:	2900      	cmp	r1, #0
 800ea44:	d0f2      	beq.n	800ea2c <inc_lock+0x4c>
 800ea46:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 800ea4a:	8989      	ldrh	r1, [r1, #12]
 800ea4c:	b921      	cbnz	r1, 800ea58 <inc_lock+0x78>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ea4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ea52:	e7f0      	b.n	800ea36 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ea54:	2301      	movs	r3, #1
 800ea56:	e7f4      	b.n	800ea42 <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ea58:	2000      	movs	r0, #0
 800ea5a:	e7f0      	b.n	800ea3e <inc_lock+0x5e>
 800ea5c:	24001680 	.word	0x24001680

0800ea60 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ea60:	3801      	subs	r0, #1
 800ea62:	2801      	cmp	r0, #1
 800ea64:	d814      	bhi.n	800ea90 <dec_lock+0x30>
		n = Files[i].ctr;
 800ea66:	490b      	ldr	r1, [pc, #44]	; (800ea94 <dec_lock+0x34>)
 800ea68:	0102      	lsls	r2, r0, #4
 800ea6a:	1888      	adds	r0, r1, r2
 800ea6c:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ea6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea72:	d104      	bne.n	800ea7e <dec_lock+0x1e>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 800ea74:	2300      	movs	r3, #0
 800ea76:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ea78:	2000      	movs	r0, #0
 800ea7a:	5088      	str	r0, [r1, r2]
 800ea7c:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d0fa      	beq.n	800ea78 <dec_lock+0x18>
 800ea82:	3b01      	subs	r3, #1
 800ea84:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 800ea86:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d0f5      	beq.n	800ea78 <dec_lock+0x18>
		res = FR_OK;
 800ea8c:	2000      	movs	r0, #0
 800ea8e:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ea90:	2002      	movs	r0, #2
	}
	return res;
}
 800ea92:	4770      	bx	lr
 800ea94:	24001680 	.word	0x24001680

0800ea98 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ea98:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 800ea9a:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ea9c:	3b02      	subs	r3, #2
 800ea9e:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 800eaa0:	bf83      	ittte	hi
 800eaa2:	8943      	ldrhhi	r3, [r0, #10]
 800eaa4:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
 800eaa6:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eaaa:	2000      	movls	r0, #0
}
 800eaac:	4770      	bx	lr

0800eaae <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800eaae:	6802      	ldr	r2, [r0, #0]
 800eab0:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800eab2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800eab4:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800eab6:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800eab8:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eabc:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800eabe:	b130      	cbz	r0, 800eace <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 800eac0:	4281      	cmp	r1, r0
 800eac2:	d302      	bcc.n	800eaca <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 800eac4:	1a09      	subs	r1, r1, r0
 800eac6:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eac8:	e7f8      	b.n	800eabc <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 800eaca:	6858      	ldr	r0, [r3, #4]
 800eacc:	4408      	add	r0, r1
}
 800eace:	4770      	bx	lr

0800ead0 <get_achar>:
)
{
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ead0:	6803      	ldr	r3, [r0, #0]
 800ead2:	1c5a      	adds	r2, r3, #1
 800ead4:	6002      	str	r2, [r0, #0]
 800ead6:	781a      	ldrb	r2, [r3, #0]
 800ead8:	b290      	uxth	r0, r2
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800eada:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800eade:	2b19      	cmp	r3, #25
 800eae0:	d802      	bhi.n	800eae8 <get_achar+0x18>
 800eae2:	3820      	subs	r0, #32
 800eae4:	b280      	uxth	r0, r0
 800eae6:	4770      	bx	lr
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800eae8:	287f      	cmp	r0, #127	; 0x7f
 800eaea:	bf82      	ittt	hi
 800eaec:	4b02      	ldrhi	r3, [pc, #8]	; (800eaf8 <get_achar+0x28>)
 800eaee:	189b      	addhi	r3, r3, r2
 800eaf0:	f813 0c80 	ldrbhi.w	r0, [r3, #-128]
#endif
	return chr;
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800eaf4:	4770      	bx	lr
 800eaf6:	bf00      	nop
 800eaf8:	08015ecc 	.word	0x08015ecc

0800eafc <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800eafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eafe:	b085      	sub	sp, #20
 800eb00:	4605      	mov	r5, r0
 800eb02:	461e      	mov	r6, r3
 800eb04:	ac04      	add	r4, sp, #16
 800eb06:	f844 1d0c 	str.w	r1, [r4, #-12]!
 800eb0a:	4611      	mov	r1, r2
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800eb0c:	b929      	cbnz	r1, 800eb1a <pattern_matching+0x1e>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800eb0e:	782b      	ldrb	r3, [r5, #0]
 800eb10:	b95b      	cbnz	r3, 800eb2a <pattern_matching+0x2e>
 800eb12:	b156      	cbz	r6, 800eb2a <pattern_matching+0x2e>
 800eb14:	2001      	movs	r0, #1
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800eb16:	b005      	add	sp, #20
 800eb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	f7ff ffd8 	bl	800ead0 <get_achar>
 800eb20:	3901      	subs	r1, #1
 800eb22:	2800      	cmp	r0, #0
 800eb24:	d1f2      	bne.n	800eb0c <pattern_matching+0x10>
 800eb26:	2000      	movs	r0, #0
 800eb28:	e7f5      	b.n	800eb16 <pattern_matching+0x1a>
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800eb2a:	ac04      	add	r4, sp, #16
 800eb2c:	9b01      	ldr	r3, [sp, #4]
 800eb2e:	9502      	str	r5, [sp, #8]
 800eb30:	f844 3d04 	str.w	r3, [r4, #-4]!
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800eb34:	9b02      	ldr	r3, [sp, #8]
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	2b3f      	cmp	r3, #63	; 0x3f
 800eb3a:	d001      	beq.n	800eb40 <pattern_matching+0x44>
 800eb3c:	2b2a      	cmp	r3, #42	; 0x2a
 800eb3e:	d11d      	bne.n	800eb7c <pattern_matching+0x80>
 800eb40:	2300      	movs	r3, #0
 800eb42:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800eb44:	9902      	ldr	r1, [sp, #8]
 800eb46:	1c48      	adds	r0, r1, #1
 800eb48:	9002      	str	r0, [sp, #8]
 800eb4a:	780c      	ldrb	r4, [r1, #0]
				} while (*pp == '?' || *pp == '*');
 800eb4c:	7849      	ldrb	r1, [r1, #1]
					if (*pp++ == '?') nm++; else nx = 1;
 800eb4e:	2c3f      	cmp	r4, #63	; 0x3f
 800eb50:	bf0c      	ite	eq
 800eb52:	3201      	addeq	r2, #1
 800eb54:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800eb56:	293f      	cmp	r1, #63	; 0x3f
 800eb58:	d0f4      	beq.n	800eb44 <pattern_matching+0x48>
 800eb5a:	292a      	cmp	r1, #42	; 0x2a
 800eb5c:	d0f2      	beq.n	800eb44 <pattern_matching+0x48>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800eb5e:	9903      	ldr	r1, [sp, #12]
 800eb60:	f7ff ffcc 	bl	800eafc <pattern_matching>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d1d5      	bne.n	800eb14 <pattern_matching+0x18>
				nc = *np; break;	/* Branch mismatched */
 800eb68:	9b03      	ldr	r3, [sp, #12]
 800eb6a:	7819      	ldrb	r1, [r3, #0]
		get_achar(&nam);			/* nam++ */
 800eb6c:	a801      	add	r0, sp, #4
 800eb6e:	f7ff ffaf 	bl	800ead0 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800eb72:	2e00      	cmp	r6, #0
 800eb74:	d0d7      	beq.n	800eb26 <pattern_matching+0x2a>
 800eb76:	2900      	cmp	r1, #0
 800eb78:	d1d7      	bne.n	800eb2a <pattern_matching+0x2e>
 800eb7a:	e7d4      	b.n	800eb26 <pattern_matching+0x2a>
			pc = get_achar(&pp);	/* Get a pattern char */
 800eb7c:	a802      	add	r0, sp, #8
 800eb7e:	f7ff ffa7 	bl	800ead0 <get_achar>
 800eb82:	4607      	mov	r7, r0
			nc = get_achar(&np);	/* Get a name char */
 800eb84:	4620      	mov	r0, r4
 800eb86:	f7ff ffa3 	bl	800ead0 <get_achar>
			if (pc != nc) break;	/* Branch mismatched? */
 800eb8a:	4287      	cmp	r7, r0
			nc = get_achar(&np);	/* Get a name char */
 800eb8c:	4601      	mov	r1, r0
			if (pc != nc) break;	/* Branch mismatched? */
 800eb8e:	d1ed      	bne.n	800eb6c <pattern_matching+0x70>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800eb90:	2f00      	cmp	r7, #0
 800eb92:	d1cf      	bne.n	800eb34 <pattern_matching+0x38>
 800eb94:	e7be      	b.n	800eb14 <pattern_matching+0x18>

0800eb96 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800eb96:	6802      	ldr	r2, [r0, #0]
{
 800eb98:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 800eb9a:	b152      	cbz	r2, 800ebb2 <get_ldnumber+0x1c>
 800eb9c:	4611      	mov	r1, r2
 800eb9e:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800eba0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eba4:	2c20      	cmp	r4, #32
 800eba6:	d90c      	bls.n	800ebc2 <get_ldnumber+0x2c>
 800eba8:	2c3a      	cmp	r4, #58	; 0x3a
 800ebaa:	d1f8      	bne.n	800eb9e <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 800ebac:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ebae:	428b      	cmp	r3, r1
 800ebb0:	d002      	beq.n	800ebb8 <get_ldnumber+0x22>
	int vol = -1;
 800ebb2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb6:	e005      	b.n	800ebc4 <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ebb8:	7812      	ldrb	r2, [r2, #0]
 800ebba:	2a30      	cmp	r2, #48	; 0x30
 800ebbc:	d1f9      	bne.n	800ebb2 <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ebc2:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800ebc4:	bd10      	pop	{r4, pc}

0800ebc6 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ebc6:	3801      	subs	r0, #1
 800ebc8:	440a      	add	r2, r1
			*d++ = *s++;
 800ebca:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800ebce:	4291      	cmp	r1, r2
			*d++ = *s++;
 800ebd0:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800ebd4:	d1f9      	bne.n	800ebca <mem_cpy.part.0+0x4>
}
 800ebd6:	4770      	bx	lr

0800ebd8 <ld_clust.isra.1>:
	if (fs->fs_type == FS_FAT32) {
 800ebd8:	2803      	cmp	r0, #3
	rv = rv << 8 | ptr[0];
 800ebda:	7eca      	ldrb	r2, [r1, #27]
 800ebdc:	7e8b      	ldrb	r3, [r1, #26]
 800ebde:	bf08      	it	eq
 800ebe0:	7d48      	ldrbeq	r0, [r1, #21]
	cl = ld_word(dir + DIR_FstClusLO);
 800ebe2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800ebe6:	bf02      	ittt	eq
 800ebe8:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ebea:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 800ebee:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	4770      	bx	lr

0800ebf6 <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 800ebf6:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800ebfa:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800ebfc:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 800ebfe:	7803      	ldrb	r3, [r0, #0]
 800ec00:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ec02:	bf01      	itttt	eq
 800ec04:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800ec06:	750a      	strbeq	r2, [r1, #20]
 800ec08:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800ec0a:	754a      	strbeq	r2, [r1, #21]
}
 800ec0c:	4770      	bx	lr

0800ec0e <get_fileinfo.part.3>:
void get_fileinfo (		/* No return code */
 800ec0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		c = (TCHAR)dp->dir[i++];
 800ec10:	6a04      	ldr	r4, [r0, #32]
	i = j = 0;
 800ec12:	2300      	movs	r3, #0
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800ec14:	262e      	movs	r6, #46	; 0x2e
 800ec16:	1e65      	subs	r5, r4, #1
	i = j = 0;
 800ec18:	4618      	mov	r0, r3
		c = (TCHAR)dp->dir[i++];
 800ec1a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800ec1e:	3001      	adds	r0, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800ec20:	2a20      	cmp	r2, #32
 800ec22:	d00a      	beq.n	800ec3a <get_fileinfo.part.3+0x2c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ec24:	2a05      	cmp	r2, #5
 800ec26:	bf08      	it	eq
 800ec28:	22e5      	moveq	r2, #229	; 0xe5
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800ec2a:	2809      	cmp	r0, #9
 800ec2c:	bf02      	ittt	eq
 800ec2e:	18cf      	addeq	r7, r1, r3
 800ec30:	3301      	addeq	r3, #1
 800ec32:	727e      	strbeq	r6, [r7, #9]
		fno->fname[j++] = c;
 800ec34:	18cf      	adds	r7, r1, r3
 800ec36:	3301      	adds	r3, #1
 800ec38:	727a      	strb	r2, [r7, #9]
	while (i < 11) {		/* Copy name body and extension */
 800ec3a:	280b      	cmp	r0, #11
 800ec3c:	d1ed      	bne.n	800ec1a <get_fileinfo.part.3+0xc>
	fno->fname[j] = 0;
 800ec3e:	440b      	add	r3, r1
 800ec40:	2200      	movs	r2, #0
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ec42:	f104 001c 	add.w	r0, r4, #28
	fno->fname[j] = 0;
 800ec46:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ec48:	7ae3      	ldrb	r3, [r4, #11]
 800ec4a:	720b      	strb	r3, [r1, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ec4c:	f7ff fe78 	bl	800e940 <ld_dword>
 800ec50:	6008      	str	r0, [r1, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ec52:	f104 0016 	add.w	r0, r4, #22
 800ec56:	f7ff fe73 	bl	800e940 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ec5a:	80c8      	strh	r0, [r1, #6]
 800ec5c:	0c00      	lsrs	r0, r0, #16
 800ec5e:	8088      	strh	r0, [r1, #4]
}
 800ec60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ec62 <sync_window.part.5>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800ec62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 800ec64:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ec66:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800ec6a:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	462a      	mov	r2, r5
 800ec70:	4639      	mov	r1, r7
 800ec72:	7840      	ldrb	r0, [r0, #1]
 800ec74:	f7ff fe48 	bl	800e908 <disk_write>
 800ec78:	b9a0      	cbnz	r0, 800eca4 <sync_window.part.5+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ec7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec7c:	69e2      	ldr	r2, [r4, #28]
 800ec7e:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 800ec80:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d301      	bcc.n	800ec8a <sync_window.part.5+0x28>
	FRESULT res = FR_OK;
 800ec86:	2000      	movs	r0, #0
}
 800ec88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ec8a:	78a6      	ldrb	r6, [r4, #2]
 800ec8c:	2e01      	cmp	r6, #1
 800ec8e:	d9fa      	bls.n	800ec86 <sync_window.part.5+0x24>
					wsect += fs->fsize;
 800ec90:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ec92:	4639      	mov	r1, r7
 800ec94:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ec96:	3e01      	subs	r6, #1
					wsect += fs->fsize;
 800ec98:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	462a      	mov	r2, r5
 800ec9e:	f7ff fe33 	bl	800e908 <disk_write>
 800eca2:	e7f3      	b.n	800ec8c <sync_window.part.5+0x2a>
			res = FR_DISK_ERR;
 800eca4:	2001      	movs	r0, #1
 800eca6:	e7ef      	b.n	800ec88 <sync_window.part.5+0x26>

0800eca8 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800eca8:	78c3      	ldrb	r3, [r0, #3]
 800ecaa:	b10b      	cbz	r3, 800ecb0 <sync_window+0x8>
 800ecac:	f7ff bfd9 	b.w	800ec62 <sync_window.part.5>
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	4770      	bx	lr

0800ecb4 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ecb4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ecb6:	428b      	cmp	r3, r1
{
 800ecb8:	b570      	push	{r4, r5, r6, lr}
 800ecba:	4606      	mov	r6, r0
 800ecbc:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ecbe:	d012      	beq.n	800ece6 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 800ecc0:	f7ff fff2 	bl	800eca8 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ecc4:	4604      	mov	r4, r0
 800ecc6:	b960      	cbnz	r0, 800ece2 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ecc8:	462a      	mov	r2, r5
 800ecca:	2301      	movs	r3, #1
 800eccc:	f106 0134 	add.w	r1, r6, #52	; 0x34
 800ecd0:	7870      	ldrb	r0, [r6, #1]
 800ecd2:	f7ff fe0b 	bl	800e8ec <disk_read>
 800ecd6:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 800ecd8:	bf1c      	itt	ne
 800ecda:	f04f 35ff 	movne.w	r5, #4294967295
 800ecde:	2401      	movne	r4, #1
			fs->winsect = sector;
 800ece0:	6335      	str	r5, [r6, #48]	; 0x30
}
 800ece2:	4620      	mov	r0, r4
 800ece4:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 800ece6:	2400      	movs	r4, #0
 800ece8:	e7fb      	b.n	800ece2 <move_window+0x2e>
	...

0800ecec <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ecec:	2300      	movs	r3, #0
{
 800ecee:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ecf0:	70c3      	strb	r3, [r0, #3]
 800ecf2:	f04f 33ff 	mov.w	r3, #4294967295
{
 800ecf6:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ecf8:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ecfa:	f7ff ffdb 	bl	800ecb4 <move_window>
 800ecfe:	bb30      	cbnz	r0, 800ed4e <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 800ed00:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 800ed04:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 800ed08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ed0c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d11e      	bne.n	800ed52 <check_fs+0x66>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ed14:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800ed18:	2be9      	cmp	r3, #233	; 0xe9
 800ed1a:	d005      	beq.n	800ed28 <check_fs+0x3c>
 800ed1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed1e:	4a10      	ldr	r2, [pc, #64]	; (800ed60 <check_fs+0x74>)
 800ed20:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d116      	bne.n	800ed56 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ed28:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 800ed2c:	f7ff fe08 	bl	800e940 <ld_dword>
 800ed30:	4b0c      	ldr	r3, [pc, #48]	; (800ed64 <check_fs+0x78>)
 800ed32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800ed36:	4298      	cmp	r0, r3
 800ed38:	d00f      	beq.n	800ed5a <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ed3a:	f104 0086 	add.w	r0, r4, #134	; 0x86
 800ed3e:	f7ff fdff 	bl	800e940 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ed42:	4b09      	ldr	r3, [pc, #36]	; (800ed68 <check_fs+0x7c>)
 800ed44:	4298      	cmp	r0, r3
 800ed46:	bf14      	ite	ne
 800ed48:	2002      	movne	r0, #2
 800ed4a:	2000      	moveq	r0, #0
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800ed4c:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ed4e:	2004      	movs	r0, #4
 800ed50:	e7fc      	b.n	800ed4c <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ed52:	2003      	movs	r0, #3
 800ed54:	e7fa      	b.n	800ed4c <check_fs+0x60>
	return 2;
 800ed56:	2002      	movs	r0, #2
 800ed58:	e7f8      	b.n	800ed4c <check_fs+0x60>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ed5a:	2000      	movs	r0, #0
 800ed5c:	e7f6      	b.n	800ed4c <check_fs+0x60>
 800ed5e:	bf00      	nop
 800ed60:	009000eb 	.word	0x009000eb
 800ed64:	00544146 	.word	0x00544146
 800ed68:	33544146 	.word	0x33544146

0800ed6c <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ed6c:	2300      	movs	r3, #0
{
 800ed6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 800ed72:	600b      	str	r3, [r1, #0]
{
 800ed74:	b085      	sub	sp, #20
 800ed76:	460f      	mov	r7, r1
 800ed78:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800ed7a:	f7ff ff0c 	bl	800eb96 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800ed7e:	1e06      	subs	r6, r0, #0
 800ed80:	f2c0 813f 	blt.w	800f002 <find_volume+0x296>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ed84:	4ba4      	ldr	r3, [pc, #656]	; (800f018 <find_volume+0x2ac>)
 800ed86:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ed8a:	2c00      	cmp	r4, #0
 800ed8c:	f000 813b 	beq.w	800f006 <find_volume+0x29a>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ed90:	68e0      	ldr	r0, [r4, #12]
 800ed92:	f001 f993 	bl	80100bc <ff_req_grant>
 800ed96:	2800      	cmp	r0, #0
 800ed98:	f000 8137 	beq.w	800f00a <find_volume+0x29e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ed9c:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ed9e:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800eda2:	7823      	ldrb	r3, [r4, #0]
 800eda4:	b173      	cbz	r3, 800edc4 <find_volume+0x58>
		stat = disk_status(fs->drv);
 800eda6:	7860      	ldrb	r0, [r4, #1]
 800eda8:	f7ff fd86 	bl	800e8b8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800edac:	07c1      	lsls	r1, r0, #31
 800edae:	d409      	bmi.n	800edc4 <find_volume+0x58>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800edb0:	2d00      	cmp	r5, #0
 800edb2:	f000 812c 	beq.w	800f00e <find_volume+0x2a2>
 800edb6:	f010 0004 	ands.w	r0, r0, #4
 800edba:	d000      	beq.n	800edbe <find_volume+0x52>
				return FR_WRITE_PROTECTED;
 800edbc:	200a      	movs	r0, #10
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800edbe:	b005      	add	sp, #20
 800edc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800edc4:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800edc6:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800edc8:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800edca:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800edcc:	f7ff fd7e 	bl	800e8cc <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800edd0:	07c2      	lsls	r2, r0, #31
 800edd2:	f100 811e 	bmi.w	800f012 <find_volume+0x2a6>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800edd6:	b10d      	cbz	r5, 800eddc <find_volume+0x70>
 800edd8:	0743      	lsls	r3, r0, #29
 800edda:	d4ef      	bmi.n	800edbc <find_volume+0x50>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800eddc:	2100      	movs	r1, #0
 800edde:	4620      	mov	r0, r4
 800ede0:	f7ff ff84 	bl	800ecec <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ede4:	2802      	cmp	r0, #2
 800ede6:	f040 80f3 	bne.w	800efd0 <find_volume+0x264>
 800edea:	f504 75fd 	add.w	r5, r4, #506	; 0x1fa
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800edee:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800edf0:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 800edf4:	b110      	cbz	r0, 800edfc <find_volume+0x90>
 800edf6:	4628      	mov	r0, r5
 800edf8:	f7ff fda2 	bl	800e940 <ld_dword>
 800edfc:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ee00:	3101      	adds	r1, #1
 800ee02:	3510      	adds	r5, #16
 800ee04:	2904      	cmp	r1, #4
 800ee06:	d1f3      	bne.n	800edf0 <find_volume+0x84>
 800ee08:	2600      	movs	r6, #0
			bsect = br[i];
 800ee0a:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ee0e:	2d00      	cmp	r5, #0
 800ee10:	f000 80d5 	beq.w	800efbe <find_volume+0x252>
 800ee14:	4629      	mov	r1, r5
 800ee16:	4620      	mov	r0, r4
 800ee18:	f7ff ff68 	bl	800ecec <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ee1c:	2801      	cmp	r0, #1
 800ee1e:	f200 80cf 	bhi.w	800efc0 <find_volume+0x254>
	rv = rv << 8 | ptr[0];
 800ee22:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800ee26:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800ee2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ee2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee32:	f040 80d1 	bne.w	800efd8 <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 800ee36:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800ee3a:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ee3e:	ea56 2603 	orrs.w	r6, r6, r3, lsl #8
 800ee42:	d104      	bne.n	800ee4e <find_volume+0xe2>
 800ee44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee48:	f7ff fd7a 	bl	800e940 <ld_dword>
 800ee4c:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ee4e:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
		fs->fsize = fasize;
 800ee52:	61e6      	str	r6, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ee54:	f109 33ff 	add.w	r3, r9, #4294967295
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ee58:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	f200 80bb 	bhi.w	800efd8 <find_volume+0x26c>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ee62:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
 800ee66:	b2bb      	uxth	r3, r7
 800ee68:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	f000 80b4 	beq.w	800efd8 <find_volume+0x26c>
 800ee70:	1e7b      	subs	r3, r7, #1
 800ee72:	423b      	tst	r3, r7
 800ee74:	f040 80b0 	bne.w	800efd8 <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 800ee78:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ee7c:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 800ee80:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ee84:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ee88:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ee8c:	f040 80a4 	bne.w	800efd8 <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 800ee90:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800ee94:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ee98:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 800ee9c:	d103      	bne.n	800eea6 <find_volume+0x13a>
 800ee9e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800eea2:	f7ff fd4d 	bl	800e940 <ld_dword>
	rv = rv << 8 | ptr[0];
 800eea6:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eeaa:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800eeae:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800eeb2:	f000 8091 	beq.w	800efd8 <find_volume+0x26c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800eeb6:	fb06 fc09 	mul.w	ip, r6, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800eeba:	eb03 1218 	add.w	r2, r3, r8, lsr #4
 800eebe:	4462      	add	r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800eec0:	4290      	cmp	r0, r2
 800eec2:	f0c0 8089 	bcc.w	800efd8 <find_volume+0x26c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800eec6:	1a81      	subs	r1, r0, r2
 800eec8:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eecc:	2900      	cmp	r1, #0
 800eece:	f000 8083 	beq.w	800efd8 <find_volume+0x26c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800eed2:	f64f 77f5 	movw	r7, #65525	; 0xfff5
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eed6:	f640 70f5 	movw	r0, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eeda:	442b      	add	r3, r5
		fs->database = bsect + sysect;					/* Data start sector */
 800eedc:	442a      	add	r2, r5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800eede:	42b9      	cmp	r1, r7
 800eee0:	bf8c      	ite	hi
 800eee2:	2703      	movhi	r7, #3
 800eee4:	2702      	movls	r7, #2
		fs->volbase = bsect;							/* Volume start sector */
 800eee6:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eee8:	6263      	str	r3, [r4, #36]	; 0x24
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eeea:	4281      	cmp	r1, r0
 800eeec:	bf98      	it	ls
 800eeee:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800eef0:	3102      	adds	r1, #2
		fs->database = bsect + sysect;					/* Data start sector */
 800eef2:	62e2      	str	r2, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800eef4:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800eef6:	61a1      	str	r1, [r4, #24]
		if (fmt == FS_FAT32) {
 800eef8:	d172      	bne.n	800efe0 <find_volume+0x274>
	rv = rv << 8 | ptr[0];
 800eefa:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 800eefe:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ef02:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800ef06:	d167      	bne.n	800efd8 <find_volume+0x26c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ef08:	f1b8 0f00 	cmp.w	r8, #0
 800ef0c:	d164      	bne.n	800efd8 <find_volume+0x26c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ef0e:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800ef12:	f7ff fd15 	bl	800e940 <ld_dword>
 800ef16:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ef18:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ef1a:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 800ef1e:	ebb6 2f51 	cmp.w	r6, r1, lsr #9
 800ef22:	d359      	bcc.n	800efd8 <find_volume+0x26c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ef24:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ef28:	2f03      	cmp	r7, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ef2a:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800ef2e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ef32:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ef34:	d12f      	bne.n	800ef96 <find_volume+0x22a>
	rv = rv << 8 | ptr[0];
 800ef36:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 800ef3a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800ef3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ef42:	2b01      	cmp	r3, #1
 800ef44:	d127      	bne.n	800ef96 <find_volume+0x22a>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ef46:	1c69      	adds	r1, r5, #1
 800ef48:	4620      	mov	r0, r4
 800ef4a:	f7ff feb3 	bl	800ecb4 <move_window>
 800ef4e:	bb10      	cbnz	r0, 800ef96 <find_volume+0x22a>
	rv = rv << 8 | ptr[0];
 800ef50:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 800ef54:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 800ef58:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 800ef5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ef5e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d117      	bne.n	800ef96 <find_volume+0x22a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ef66:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800ef6a:	f7ff fce9 	bl	800e940 <ld_dword>
 800ef6e:	4b2b      	ldr	r3, [pc, #172]	; (800f01c <find_volume+0x2b0>)
 800ef70:	4298      	cmp	r0, r3
 800ef72:	d110      	bne.n	800ef96 <find_volume+0x22a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ef74:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800ef78:	f7ff fce2 	bl	800e940 <ld_dword>
 800ef7c:	4b28      	ldr	r3, [pc, #160]	; (800f020 <find_volume+0x2b4>)
 800ef7e:	4298      	cmp	r0, r3
 800ef80:	d109      	bne.n	800ef96 <find_volume+0x22a>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ef82:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800ef86:	f7ff fcdb 	bl	800e940 <ld_dword>
 800ef8a:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ef8c:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800ef90:	f7ff fcd6 	bl	800e940 <ld_dword>
 800ef94:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 800ef96:	4a23      	ldr	r2, [pc, #140]	; (800f024 <find_volume+0x2b8>)
 800ef98:	2000      	movs	r0, #0
	fs->fs_type = fmt;		/* FAT sub-type */
 800ef9a:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ef9c:	8813      	ldrh	r3, [r2, #0]
 800ef9e:	3301      	adds	r3, #1
 800efa0:	b29b      	uxth	r3, r3
 800efa2:	8013      	strh	r3, [r2, #0]
 800efa4:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800efa6:	4b20      	ldr	r3, [pc, #128]	; (800f028 <find_volume+0x2bc>)
 800efa8:	681a      	ldr	r2, [r3, #0]
 800efaa:	4294      	cmp	r4, r2
 800efac:	bf04      	itt	eq
 800efae:	2200      	moveq	r2, #0
 800efb0:	601a      	streq	r2, [r3, #0]
 800efb2:	691a      	ldr	r2, [r3, #16]
 800efb4:	4294      	cmp	r4, r2
 800efb6:	f47f af02 	bne.w	800edbe <find_volume+0x52>
 800efba:	6118      	str	r0, [r3, #16]
 800efbc:	e6ff      	b.n	800edbe <find_volume+0x52>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800efbe:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800efc0:	3601      	adds	r6, #1
 800efc2:	2e04      	cmp	r6, #4
 800efc4:	f47f af21 	bne.w	800ee0a <find_volume+0x9e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800efc8:	2804      	cmp	r0, #4
 800efca:	d105      	bne.n	800efd8 <find_volume+0x26c>
 800efcc:	2001      	movs	r0, #1
 800efce:	e6f6      	b.n	800edbe <find_volume+0x52>
 800efd0:	2804      	cmp	r0, #4
 800efd2:	d0fb      	beq.n	800efcc <find_volume+0x260>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800efd4:	2801      	cmp	r0, #1
 800efd6:	d901      	bls.n	800efdc <find_volume+0x270>
 800efd8:	200d      	movs	r0, #13
 800efda:	e6f0      	b.n	800edbe <find_volume+0x52>
	bsect = 0;
 800efdc:	2500      	movs	r5, #0
 800efde:	e720      	b.n	800ee22 <find_volume+0xb6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800efe0:	f1b8 0f00 	cmp.w	r8, #0
 800efe4:	d0f8      	beq.n	800efd8 <find_volume+0x26c>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800efe6:	2f02      	cmp	r7, #2
 800efe8:	ea4f 0041 	mov.w	r0, r1, lsl #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800efec:	4463      	add	r3, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800efee:	bf1c      	itt	ne
 800eff0:	1840      	addne	r0, r0, r1
 800eff2:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800eff6:	62a3      	str	r3, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eff8:	bf0c      	ite	eq
 800effa:	4601      	moveq	r1, r0
 800effc:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 800f000:	e78b      	b.n	800ef1a <find_volume+0x1ae>
	if (vol < 0) return FR_INVALID_DRIVE;
 800f002:	200b      	movs	r0, #11
 800f004:	e6db      	b.n	800edbe <find_volume+0x52>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f006:	200c      	movs	r0, #12
 800f008:	e6d9      	b.n	800edbe <find_volume+0x52>
	ENTER_FF(fs);						/* Lock the volume */
 800f00a:	200f      	movs	r0, #15
 800f00c:	e6d7      	b.n	800edbe <find_volume+0x52>
			return FR_OK;				/* The file system object is valid */
 800f00e:	4628      	mov	r0, r5
 800f010:	e6d5      	b.n	800edbe <find_volume+0x52>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f012:	2003      	movs	r0, #3
 800f014:	e6d3      	b.n	800edbe <find_volume+0x52>
 800f016:	bf00      	nop
 800f018:	2400167c 	.word	0x2400167c
 800f01c:	41615252 	.word	0x41615252
 800f020:	61417272 	.word	0x61417272
 800f024:	240016a0 	.word	0x240016a0
 800f028:	24001680 	.word	0x24001680

0800f02c <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f02c:	2901      	cmp	r1, #1
{
 800f02e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f032:	4605      	mov	r5, r0
 800f034:	460c      	mov	r4, r1
 800f036:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f038:	d973      	bls.n	800f122 <put_fat+0xf6>
 800f03a:	6983      	ldr	r3, [r0, #24]
 800f03c:	428b      	cmp	r3, r1
 800f03e:	d970      	bls.n	800f122 <put_fat+0xf6>
		switch (fs->fs_type) {
 800f040:	7803      	ldrb	r3, [r0, #0]
 800f042:	2b02      	cmp	r3, #2
 800f044:	d040      	beq.n	800f0c8 <put_fat+0x9c>
 800f046:	2b03      	cmp	r3, #3
 800f048:	d051      	beq.n	800f0ee <put_fat+0xc2>
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d169      	bne.n	800f122 <put_fat+0xf6>
			bc = (UINT)clst; bc += bc / 2;
 800f04e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f052:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800f054:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800f058:	f7ff fe2c 	bl	800ecb4 <move_window>
 800f05c:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 800f05e:	bb40      	cbnz	r0, 800f0b2 <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f060:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 800f064:	f105 0934 	add.w	r9, r5, #52	; 0x34
 800f068:	f108 0a01 	add.w	sl, r8, #1
 800f06c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f070:	bf08      	it	eq
 800f072:	b2fb      	uxtbeq	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f074:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f076:	bf1f      	itttt	ne
 800f078:	f819 3008 	ldrbne.w	r3, [r9, r8]
 800f07c:	f003 020f 	andne.w	r2, r3, #15
 800f080:	013b      	lslne	r3, r7, #4
 800f082:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 800f086:	bf18      	it	ne
 800f088:	4313      	orrne	r3, r2
 800f08a:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 800f08e:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f090:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 800f092:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f094:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800f098:	f7ff fe0c 	bl	800ecb4 <move_window>
			if (res != FR_OK) break;
 800f09c:	4606      	mov	r6, r0
 800f09e:	b940      	cbnz	r0, 800f0b2 <put_fat+0x86>
			p = fs->win + bc % SS(fs);
 800f0a0:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f0a4:	b144      	cbz	r4, 800f0b8 <put_fat+0x8c>
 800f0a6:	f3c7 1707 	ubfx	r7, r7, #4, #8
 800f0aa:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	70eb      	strb	r3, [r5, #3]
}
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f0b8:	f819 300a 	ldrb.w	r3, [r9, sl]
 800f0bc:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800f0c0:	f023 030f 	bic.w	r3, r3, #15
 800f0c4:	431f      	orrs	r7, r3
 800f0c6:	e7f0      	b.n	800f0aa <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f0c8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800f0ca:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800f0ce:	f7ff fdf1 	bl	800ecb4 <move_window>
			if (res != FR_OK) break;
 800f0d2:	4606      	mov	r6, r0
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	d1ec      	bne.n	800f0b2 <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f0d8:	0064      	lsls	r4, r4, #1
 800f0da:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800f0de:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800f0e2:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f0e4:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800f0e6:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 800f0ea:	7057      	strb	r7, [r2, #1]
 800f0ec:	e7df      	b.n	800f0ae <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f0ee:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800f0f0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800f0f4:	f7ff fdde 	bl	800ecb4 <move_window>
			if (res != FR_OK) break;
 800f0f8:	4606      	mov	r6, r0
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	d1d9      	bne.n	800f0b2 <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f0fe:	00a4      	lsls	r4, r4, #2
 800f100:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800f104:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 800f108:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800f10c:	441c      	add	r4, r3
 800f10e:	4620      	mov	r0, r4
 800f110:	f7ff fc16 	bl	800e940 <ld_dword>
 800f114:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f118:	4620      	mov	r0, r4
 800f11a:	4339      	orrs	r1, r7
 800f11c:	f7ff fc18 	bl	800e950 <st_dword>
 800f120:	e7c5      	b.n	800f0ae <put_fat+0x82>
	FRESULT res = FR_INT_ERR;
 800f122:	2602      	movs	r6, #2
 800f124:	e7c5      	b.n	800f0b2 <put_fat+0x86>

0800f126 <get_fat.isra.9>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f126:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800f128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f12a:	4605      	mov	r5, r0
 800f12c:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f12e:	d952      	bls.n	800f1d6 <get_fat.isra.9+0xb0>
 800f130:	6983      	ldr	r3, [r0, #24]
 800f132:	4299      	cmp	r1, r3
 800f134:	d24f      	bcs.n	800f1d6 <get_fat.isra.9+0xb0>
		switch (fs->fs_type) {
 800f136:	7803      	ldrb	r3, [r0, #0]
 800f138:	2b02      	cmp	r3, #2
 800f13a:	d029      	beq.n	800f190 <get_fat.isra.9+0x6a>
 800f13c:	2b03      	cmp	r3, #3
 800f13e:	d038      	beq.n	800f1b2 <get_fat.isra.9+0x8c>
 800f140:	2b01      	cmp	r3, #1
 800f142:	d148      	bne.n	800f1d6 <get_fat.isra.9+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 800f144:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f148:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800f14a:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800f14e:	f7ff fdb1 	bl	800ecb4 <move_window>
 800f152:	b110      	cbz	r0, 800f15a <get_fat.isra.9+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f154:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800f15a:	1c77      	adds	r7, r6, #1
 800f15c:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f160:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800f162:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800f164:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f166:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800f16a:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f16e:	f7ff fda1 	bl	800ecb4 <move_window>
 800f172:	2800      	cmp	r0, #0
 800f174:	d1ee      	bne.n	800f154 <get_fat.isra.9+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f176:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f17a:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800f17c:	443d      	add	r5, r7
 800f17e:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800f182:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f186:	bf4c      	ite	mi
 800f188:	0900      	lsrmi	r0, r0, #4
 800f18a:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800f18e:	e7e3      	b.n	800f158 <get_fat.isra.9+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f190:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800f192:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800f196:	f7ff fd8d 	bl	800ecb4 <move_window>
 800f19a:	2800      	cmp	r0, #0
 800f19c:	d1da      	bne.n	800f154 <get_fat.isra.9+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f19e:	0064      	lsls	r4, r4, #1
 800f1a0:	3534      	adds	r5, #52	; 0x34
 800f1a2:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800f1a6:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 800f1a8:	5d28      	ldrb	r0, [r5, r4]
 800f1aa:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f1ac:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800f1b0:	e7d2      	b.n	800f158 <get_fat.isra.9+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f1b2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800f1b4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800f1b8:	f7ff fd7c 	bl	800ecb4 <move_window>
 800f1bc:	2800      	cmp	r0, #0
 800f1be:	d1c9      	bne.n	800f154 <get_fat.isra.9+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f1c0:	00a4      	lsls	r4, r4, #2
 800f1c2:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800f1c6:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800f1ca:	4420      	add	r0, r4
 800f1cc:	f7ff fbb8 	bl	800e940 <ld_dword>
 800f1d0:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800f1d4:	e7c0      	b.n	800f158 <get_fat.isra.9+0x32>
			val = 1;	/* Internal error */
 800f1d6:	2001      	movs	r0, #1
 800f1d8:	e7be      	b.n	800f158 <get_fat.isra.9+0x32>

0800f1da <create_chain>:
{
 800f1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1de:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800f1e0:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800f1e2:	460f      	mov	r7, r1
 800f1e4:	b971      	cbnz	r1, 800f204 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f1e6:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f1e8:	b1f6      	cbz	r6, 800f228 <create_chain+0x4e>
 800f1ea:	69ab      	ldr	r3, [r5, #24]
 800f1ec:	42b3      	cmp	r3, r6
 800f1ee:	bf98      	it	ls
 800f1f0:	2601      	movls	r6, #1
 800f1f2:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800f1f4:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f1f6:	69ab      	ldr	r3, [r5, #24]
 800f1f8:	42a3      	cmp	r3, r4
 800f1fa:	d818      	bhi.n	800f22e <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 800f1fc:	2e01      	cmp	r6, #1
 800f1fe:	d815      	bhi.n	800f22c <create_chain+0x52>
 800f200:	2400      	movs	r4, #0
 800f202:	e009      	b.n	800f218 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f204:	4628      	mov	r0, r5
 800f206:	f7ff ff8e 	bl	800f126 <get_fat.isra.9>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f20a:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f20c:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f20e:	d937      	bls.n	800f280 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f210:	1c43      	adds	r3, r0, #1
 800f212:	d104      	bne.n	800f21e <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f214:	f04f 34ff 	mov.w	r4, #4294967295
}
 800f218:	4620      	mov	r0, r4
 800f21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f21e:	69ab      	ldr	r3, [r5, #24]
 800f220:	4283      	cmp	r3, r0
 800f222:	d8f9      	bhi.n	800f218 <create_chain+0x3e>
 800f224:	463e      	mov	r6, r7
 800f226:	e7e4      	b.n	800f1f2 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f228:	2601      	movs	r6, #1
 800f22a:	e7e2      	b.n	800f1f2 <create_chain+0x18>
				ncl = 2;
 800f22c:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f22e:	4621      	mov	r1, r4
 800f230:	f8d8 0000 	ldr.w	r0, [r8]
 800f234:	f7ff ff77 	bl	800f126 <get_fat.isra.9>
			if (cs == 0) break;				/* Found a free cluster */
 800f238:	b130      	cbz	r0, 800f248 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f23a:	2801      	cmp	r0, #1
 800f23c:	d020      	beq.n	800f280 <create_chain+0xa6>
 800f23e:	3001      	adds	r0, #1
 800f240:	d0e8      	beq.n	800f214 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 800f242:	42b4      	cmp	r4, r6
 800f244:	d1d6      	bne.n	800f1f4 <create_chain+0x1a>
 800f246:	e7db      	b.n	800f200 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f248:	f04f 32ff 	mov.w	r2, #4294967295
 800f24c:	4621      	mov	r1, r4
 800f24e:	4628      	mov	r0, r5
 800f250:	f7ff feec 	bl	800f02c <put_fat>
		if (res == FR_OK && clst != 0) {
 800f254:	b990      	cbnz	r0, 800f27c <create_chain+0xa2>
 800f256:	b957      	cbnz	r7, 800f26e <create_chain+0x94>
		fs->last_clst = ncl;
 800f258:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f25a:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 800f25e:	3a02      	subs	r2, #2
 800f260:	4293      	cmp	r3, r2
 800f262:	d90f      	bls.n	800f284 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 800f264:	792b      	ldrb	r3, [r5, #4]
 800f266:	f043 0301 	orr.w	r3, r3, #1
 800f26a:	712b      	strb	r3, [r5, #4]
 800f26c:	e7d4      	b.n	800f218 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f26e:	4622      	mov	r2, r4
 800f270:	4639      	mov	r1, r7
 800f272:	4628      	mov	r0, r5
 800f274:	f7ff feda 	bl	800f02c <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f278:	2800      	cmp	r0, #0
 800f27a:	d0ed      	beq.n	800f258 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f27c:	2801      	cmp	r0, #1
 800f27e:	d0c9      	beq.n	800f214 <create_chain+0x3a>
 800f280:	2401      	movs	r4, #1
 800f282:	e7c9      	b.n	800f218 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f284:	3b01      	subs	r3, #1
 800f286:	616b      	str	r3, [r5, #20]
 800f288:	e7ec      	b.n	800f264 <create_chain+0x8a>

0800f28a <remove_chain>:
{
 800f28a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f28c:	460d      	mov	r5, r1
 800f28e:	4607      	mov	r7, r0
 800f290:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f292:	2d01      	cmp	r5, #1
 800f294:	d92c      	bls.n	800f2f0 <remove_chain+0x66>
	FATFS *fs = obj->fs;
 800f296:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f298:	69a3      	ldr	r3, [r4, #24]
 800f29a:	42ab      	cmp	r3, r5
 800f29c:	d928      	bls.n	800f2f0 <remove_chain+0x66>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f29e:	b12a      	cbz	r2, 800f2ac <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	f7ff fec1 	bl	800f02c <put_fat>
		if (res != FR_OK) return res;
 800f2aa:	b930      	cbnz	r0, 800f2ba <remove_chain+0x30>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f2ac:	4629      	mov	r1, r5
 800f2ae:	6838      	ldr	r0, [r7, #0]
 800f2b0:	f7ff ff39 	bl	800f126 <get_fat.isra.9>
		if (nxt == 0) break;				/* Empty cluster? */
 800f2b4:	4606      	mov	r6, r0
 800f2b6:	b908      	cbnz	r0, 800f2bc <remove_chain+0x32>
	return FR_OK;
 800f2b8:	2000      	movs	r0, #0
}
 800f2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f2bc:	2801      	cmp	r0, #1
 800f2be:	d017      	beq.n	800f2f0 <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f2c0:	1c43      	adds	r3, r0, #1
 800f2c2:	d017      	beq.n	800f2f4 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	4629      	mov	r1, r5
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f7ff feaf 	bl	800f02c <put_fat>
			if (res != FR_OK) return res;
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	d1f3      	bne.n	800f2ba <remove_chain+0x30>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f2d2:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800f2d6:	1e91      	subs	r1, r2, #2
 800f2d8:	428b      	cmp	r3, r1
 800f2da:	d205      	bcs.n	800f2e8 <remove_chain+0x5e>
			fs->free_clst++;
 800f2dc:	3301      	adds	r3, #1
 800f2de:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 800f2e0:	7923      	ldrb	r3, [r4, #4]
 800f2e2:	f043 0301 	orr.w	r3, r3, #1
 800f2e6:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f2e8:	42b2      	cmp	r2, r6
 800f2ea:	4635      	mov	r5, r6
 800f2ec:	d8de      	bhi.n	800f2ac <remove_chain+0x22>
 800f2ee:	e7e3      	b.n	800f2b8 <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f2f0:	2002      	movs	r0, #2
 800f2f2:	e7e2      	b.n	800f2ba <remove_chain+0x30>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f2f4:	2001      	movs	r0, #1
 800f2f6:	e7e0      	b.n	800f2ba <remove_chain+0x30>

0800f2f8 <unlock_fs>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f2f8:	b140      	cbz	r0, 800f30c <unlock_fs+0x14>
 800f2fa:	f1a1 030b 	sub.w	r3, r1, #11
 800f2fe:	2b01      	cmp	r3, #1
 800f300:	d904      	bls.n	800f30c <unlock_fs+0x14>
 800f302:	290f      	cmp	r1, #15
 800f304:	d002      	beq.n	800f30c <unlock_fs+0x14>
		ff_rel_grant(fs->sobj);
 800f306:	68c0      	ldr	r0, [r0, #12]
 800f308:	f000 bee1 	b.w	80100ce <ff_rel_grant>
}
 800f30c:	4770      	bx	lr

0800f30e <sync_fs>:
{
 800f30e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f310:	4604      	mov	r4, r0
	res = sync_window(fs);
 800f312:	f7ff fcc9 	bl	800eca8 <sync_window>
 800f316:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800f318:	2800      	cmp	r0, #0
 800f31a:	d142      	bne.n	800f3a2 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f31c:	7823      	ldrb	r3, [r4, #0]
 800f31e:	2b03      	cmp	r3, #3
 800f320:	d137      	bne.n	800f392 <sync_fs+0x84>
 800f322:	7927      	ldrb	r7, [r4, #4]
 800f324:	2f01      	cmp	r7, #1
 800f326:	d134      	bne.n	800f392 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 800f328:	f104 0634 	add.w	r6, r4, #52	; 0x34
 800f32c:	4601      	mov	r1, r0
 800f32e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f332:	4630      	mov	r0, r6
 800f334:	f7ff fb14 	bl	800e960 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800f338:	2355      	movs	r3, #85	; 0x55
	*ptr++ = (BYTE)val;
 800f33a:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800f33c:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val; val >>= 8;
 800f33e:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 800f342:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE)val;
 800f344:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f348:	f504 7007 	add.w	r0, r4, #540	; 0x21c
	*ptr++ = (BYTE)val;
 800f34c:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 800f350:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val; val >>= 8;
 800f352:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val; val >>= 8;
 800f356:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800f35a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 800f35e:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 800f360:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 800f364:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 800f368:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 800f36c:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f370:	6961      	ldr	r1, [r4, #20]
 800f372:	f7ff faed 	bl	800e950 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f376:	6921      	ldr	r1, [r4, #16]
 800f378:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800f37c:	f7ff fae8 	bl	800e950 <st_dword>
			fs->winsect = fs->volbase + 1;
 800f380:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f382:	463b      	mov	r3, r7
 800f384:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800f386:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f388:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800f38a:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f38c:	f7ff fabc 	bl	800e908 <disk_write>
			fs->fsi_flag = 0;
 800f390:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f392:	2200      	movs	r2, #0
 800f394:	7860      	ldrb	r0, [r4, #1]
 800f396:	4611      	mov	r1, r2
 800f398:	f7ff fac4 	bl	800e924 <disk_ioctl>
 800f39c:	3000      	adds	r0, #0
 800f39e:	bf18      	it	ne
 800f3a0:	2001      	movne	r0, #1
}
 800f3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f3a4 <dir_sdi.constprop.14>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800f3a4:	b538      	push	{r3, r4, r5, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f3a6:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 800f3a8:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800f3aa:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800f3ac:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800f3ae:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f3b0:	b992      	cbnz	r2, 800f3d8 <dir_sdi.constprop.14+0x34>
 800f3b2:	7823      	ldrb	r3, [r4, #0]
 800f3b4:	2b02      	cmp	r3, #2
 800f3b6:	d901      	bls.n	800f3bc <dir_sdi.constprop.14+0x18>
		clst = fs->dirbase;
 800f3b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f3ba:	b973      	cbnz	r3, 800f3da <dir_sdi.constprop.14+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f3bc:	8923      	ldrh	r3, [r4, #8]
 800f3be:	b90b      	cbnz	r3, 800f3c4 <dir_sdi.constprop.14+0x20>
 800f3c0:	2002      	movs	r0, #2
}
 800f3c2:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 800f3c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f3c6:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 800f3c8:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 800f3ca:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d0f7      	beq.n	800f3c0 <dir_sdi.constprop.14+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f3d0:	3434      	adds	r4, #52	; 0x34
	return FR_OK;
 800f3d2:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f3d4:	622c      	str	r4, [r5, #32]
 800f3d6:	e7f4      	b.n	800f3c2 <dir_sdi.constprop.14+0x1e>
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f3d8:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f3da:	8961      	ldrh	r1, [r4, #10]
 800f3dc:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 800f3de:	b961      	cbnz	r1, 800f3fa <dir_sdi.constprop.14+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f3e0:	4611      	mov	r1, r2
 800f3e2:	6828      	ldr	r0, [r5, #0]
 800f3e4:	f7ff fe9f 	bl	800f126 <get_fat.isra.9>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f3e8:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f3ea:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f3ec:	d00b      	beq.n	800f406 <dir_sdi.constprop.14+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f3ee:	2801      	cmp	r0, #1
 800f3f0:	d9e6      	bls.n	800f3c0 <dir_sdi.constprop.14+0x1c>
 800f3f2:	69a3      	ldr	r3, [r4, #24]
 800f3f4:	4298      	cmp	r0, r3
 800f3f6:	d3f3      	bcc.n	800f3e0 <dir_sdi.constprop.14+0x3c>
 800f3f8:	e7e2      	b.n	800f3c0 <dir_sdi.constprop.14+0x1c>
		dp->sect = clust2sect(fs, clst);
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	f7ff fb4b 	bl	800ea98 <clust2sect>
 800f402:	61e8      	str	r0, [r5, #28]
 800f404:	e7e0      	b.n	800f3c8 <dir_sdi.constprop.14+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f406:	2001      	movs	r0, #1
 800f408:	e7db      	b.n	800f3c2 <dir_sdi.constprop.14+0x1e>

0800f40a <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f40a:	69c3      	ldr	r3, [r0, #28]
{
 800f40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f410:	4605      	mov	r5, r0
 800f412:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f414:	b1ab      	cbz	r3, 800f442 <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f416:	6942      	ldr	r2, [r0, #20]
 800f418:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f41c:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 800f420:	d20f      	bcs.n	800f442 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f422:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 800f426:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f428:	f1b9 0f00 	cmp.w	r9, #0
 800f42c:	d14d      	bne.n	800f4ca <dir_next+0xc0>
		dp->sect++;				/* Next sector */
 800f42e:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800f430:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800f432:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800f434:	b939      	cbnz	r1, 800f446 <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f436:	8923      	ldrh	r3, [r4, #8]
 800f438:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 800f43c:	d845      	bhi.n	800f4ca <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 800f43e:	2300      	movs	r3, #0
 800f440:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f442:	2004      	movs	r0, #4
 800f444:	e00b      	b.n	800f45e <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f446:	8963      	ldrh	r3, [r4, #10]
 800f448:	3b01      	subs	r3, #1
 800f44a:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 800f44e:	d13c      	bne.n	800f4ca <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f450:	4620      	mov	r0, r4
 800f452:	f7ff fe68 	bl	800f126 <get_fat.isra.9>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f456:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f458:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f45a:	d802      	bhi.n	800f462 <dir_next+0x58>
 800f45c:	2002      	movs	r0, #2
}
 800f45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f462:	1c42      	adds	r2, r0, #1
 800f464:	d101      	bne.n	800f46a <dir_next+0x60>
 800f466:	2001      	movs	r0, #1
 800f468:	e7f9      	b.n	800f45e <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f46a:	69a3      	ldr	r3, [r4, #24]
 800f46c:	4283      	cmp	r3, r0
 800f46e:	d826      	bhi.n	800f4be <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 800f470:	2f00      	cmp	r7, #0
 800f472:	d0e4      	beq.n	800f43e <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f474:	69a9      	ldr	r1, [r5, #24]
 800f476:	4628      	mov	r0, r5
 800f478:	f7ff feaf 	bl	800f1da <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f47c:	4606      	mov	r6, r0
 800f47e:	2800      	cmp	r0, #0
 800f480:	d036      	beq.n	800f4f0 <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f482:	2801      	cmp	r0, #1
 800f484:	d0ea      	beq.n	800f45c <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f486:	1c43      	adds	r3, r0, #1
 800f488:	d0ed      	beq.n	800f466 <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f48a:	4620      	mov	r0, r4
 800f48c:	f7ff fc0c 	bl	800eca8 <sync_window>
 800f490:	4607      	mov	r7, r0
 800f492:	2800      	cmp	r0, #0
 800f494:	d1e7      	bne.n	800f466 <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f496:	4601      	mov	r1, r0
 800f498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f49c:	f104 0034 	add.w	r0, r4, #52	; 0x34
						fs->wflag = 1;
 800f4a0:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f4a4:	f7ff fa5c 	bl	800e960 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f4a8:	4631      	mov	r1, r6
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	f7ff faf4 	bl	800ea98 <clust2sect>
 800f4b0:	6320      	str	r0, [r4, #48]	; 0x30
 800f4b2:	8963      	ldrh	r3, [r4, #10]
 800f4b4:	429f      	cmp	r7, r3
 800f4b6:	d30f      	bcc.n	800f4d8 <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 800f4b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f4ba:	1bdf      	subs	r7, r3, r7
 800f4bc:	6327      	str	r7, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 800f4be:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 800f4c0:	4631      	mov	r1, r6
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f7ff fae8 	bl	800ea98 <clust2sect>
 800f4c8:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f4ca:	3434      	adds	r4, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800f4cc:	f8c5 8014 	str.w	r8, [r5, #20]
	return FR_OK;
 800f4d0:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f4d2:	444c      	add	r4, r9
 800f4d4:	622c      	str	r4, [r5, #32]
	return FR_OK;
 800f4d6:	e7c2      	b.n	800f45e <dir_next+0x54>
						fs->wflag = 1;
 800f4d8:	f884 a003 	strb.w	sl, [r4, #3]
 800f4dc:	4620      	mov	r0, r4
 800f4de:	f7ff fbc0 	bl	800ec62 <sync_window.part.5>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f4e2:	2800      	cmp	r0, #0
 800f4e4:	d1bf      	bne.n	800f466 <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f4e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f4e8:	3701      	adds	r7, #1
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	6323      	str	r3, [r4, #48]	; 0x30
 800f4ee:	e7e0      	b.n	800f4b2 <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f4f0:	2007      	movs	r0, #7
 800f4f2:	e7b4      	b.n	800f45e <dir_next+0x54>

0800f4f4 <follow_path>:
{
 800f4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4f8:	4604      	mov	r4, r0
	FATFS *fs = obj->fs;
 800f4fa:	6807      	ldr	r7, [r0, #0]
 800f4fc:	460d      	mov	r5, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f4fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f502:	2b2f      	cmp	r3, #47	; 0x2f
 800f504:	d0fa      	beq.n	800f4fc <follow_path+0x8>
 800f506:	2b5c      	cmp	r3, #92	; 0x5c
 800f508:	d0f8      	beq.n	800f4fc <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 800f50a:	2300      	movs	r3, #0
 800f50c:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f50e:	782b      	ldrb	r3, [r5, #0]
 800f510:	2b1f      	cmp	r3, #31
 800f512:	d95a      	bls.n	800f5ca <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f514:	f8df 814c 	ldr.w	r8, [pc, #332]	; 800f664 <follow_path+0x170>
	p = *path; sfn = dp->fn;
 800f518:	f104 0624 	add.w	r6, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 800f51c:	220b      	movs	r2, #11
 800f51e:	2120      	movs	r1, #32
 800f520:	4630      	mov	r0, r6
 800f522:	f7ff fa1d 	bl	800e960 <mem_set>
	si = i = 0; ni = 8;
 800f526:	2200      	movs	r2, #0
 800f528:	f105 3cff 	add.w	ip, r5, #4294967295
 800f52c:	2008      	movs	r0, #8
 800f52e:	4611      	mov	r1, r2
		c = (BYTE)p[si++];
 800f530:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800f534:	3101      	adds	r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f536:	2b20      	cmp	r3, #32
 800f538:	d90d      	bls.n	800f556 <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f53a:	2b2f      	cmp	r3, #47	; 0x2f
 800f53c:	d001      	beq.n	800f542 <follow_path+0x4e>
 800f53e:	2b5c      	cmp	r3, #92	; 0x5c
 800f540:	d14b      	bne.n	800f5da <follow_path+0xe6>
 800f542:	1868      	adds	r0, r5, r1
 800f544:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f546:	f810 cb01 	ldrb.w	ip, [r0], #1
 800f54a:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800f54e:	d0f9      	beq.n	800f544 <follow_path+0x50>
 800f550:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
 800f554:	d0f6      	beq.n	800f544 <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 800f556:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f558:	2a00      	cmp	r2, #0
 800f55a:	d051      	beq.n	800f600 <follow_path+0x10c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f55c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f560:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800f562:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f566:	2ae5      	cmp	r2, #229	; 0xe5
 800f568:	bf04      	itt	eq
 800f56a:	2205      	moveq	r2, #5
 800f56c:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f570:	2b21      	cmp	r3, #33	; 0x21
 800f572:	bf34      	ite	cc
 800f574:	2304      	movcc	r3, #4
 800f576:	2300      	movcs	r3, #0
 800f578:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f57c:	f7ff ff12 	bl	800f3a4 <dir_sdi.constprop.14>
	if (res != FR_OK) return res;
 800f580:	2800      	cmp	r0, #0
 800f582:	d141      	bne.n	800f608 <follow_path+0x114>
		res = move_window(fs, dp->sect);
 800f584:	69e1      	ldr	r1, [r4, #28]
 800f586:	4648      	mov	r0, r9
 800f588:	f7ff fb94 	bl	800ecb4 <move_window>
		if (res != FR_OK) break;
 800f58c:	2800      	cmp	r0, #0
 800f58e:	d13b      	bne.n	800f608 <follow_path+0x114>
		c = dp->dir[DIR_Name];
 800f590:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f592:	781a      	ldrb	r2, [r3, #0]
 800f594:	2a00      	cmp	r2, #0
 800f596:	d042      	beq.n	800f61e <follow_path+0x12a>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f598:	7ada      	ldrb	r2, [r3, #11]
 800f59a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f59e:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f5a0:	7ada      	ldrb	r2, [r3, #11]
 800f5a2:	0711      	lsls	r1, r2, #28
 800f5a4:	d40c      	bmi.n	800f5c0 <follow_path+0xcc>
 800f5a6:	f103 0c0b 	add.w	ip, r3, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f5aa:	4631      	mov	r1, r6
		r = *d++ - *s++;
 800f5ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5b0:	f811 eb01 	ldrb.w	lr, [r1], #1
	} while (--cnt && r == 0);
 800f5b4:	459c      	cmp	ip, r3
		r = *d++ - *s++;
 800f5b6:	eba2 020e 	sub.w	r2, r2, lr
	} while (--cnt && r == 0);
 800f5ba:	d023      	beq.n	800f604 <follow_path+0x110>
 800f5bc:	2a00      	cmp	r2, #0
 800f5be:	d0f5      	beq.n	800f5ac <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 800f5c0:	2100      	movs	r1, #0
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f7ff ff21 	bl	800f40a <dir_next>
 800f5c8:	e7da      	b.n	800f580 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 800f5ca:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800f5cc:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 800f5ce:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}
 800f5d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 800f5d6:	f7ff bee5 	b.w	800f3a4 <dir_sdi.constprop.14>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f5da:	2b2e      	cmp	r3, #46	; 0x2e
 800f5dc:	d033      	beq.n	800f646 <follow_path+0x152>
 800f5de:	4290      	cmp	r0, r2
 800f5e0:	d90e      	bls.n	800f600 <follow_path+0x10c>
		if (c >= 0x80) {				/* Extended character? */
 800f5e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f5e6:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800f668 <follow_path+0x174>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f5ea:	bf1c      	itt	ne
 800f5ec:	3b80      	subne	r3, #128	; 0x80
 800f5ee:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 800f5f2:	f819 ef01 	ldrb.w	lr, [r9, #1]!
 800f5f6:	f1be 0f00 	cmp.w	lr, #0
 800f5fa:	d029      	beq.n	800f650 <follow_path+0x15c>
 800f5fc:	4573      	cmp	r3, lr
 800f5fe:	d1f8      	bne.n	800f5f2 <follow_path+0xfe>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f600:	2006      	movs	r0, #6
	return res;
 800f602:	e00a      	b.n	800f61a <follow_path+0x126>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f604:	2a00      	cmp	r2, #0
 800f606:	d1db      	bne.n	800f5c0 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 800f608:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800f60c:	b148      	cbz	r0, 800f622 <follow_path+0x12e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f60e:	2804      	cmp	r0, #4
 800f610:	d103      	bne.n	800f61a <follow_path+0x126>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f612:	f013 0f04 	tst.w	r3, #4
 800f616:	bf08      	it	eq
 800f618:	2005      	moveq	r0, #5
}
 800f61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f61e:	2004      	movs	r0, #4
 800f620:	e7f2      	b.n	800f608 <follow_path+0x114>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f622:	075a      	lsls	r2, r3, #29
 800f624:	d4f9      	bmi.n	800f61a <follow_path+0x126>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f626:	79a3      	ldrb	r3, [r4, #6]
 800f628:	06db      	lsls	r3, r3, #27
 800f62a:	d50a      	bpl.n	800f642 <follow_path+0x14e>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f62c:	6963      	ldr	r3, [r4, #20]
 800f62e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800f632:	7838      	ldrb	r0, [r7, #0]
 800f634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f638:	4419      	add	r1, r3
 800f63a:	f7ff facd 	bl	800ebd8 <ld_clust.isra.1>
 800f63e:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f640:	e76a      	b.n	800f518 <follow_path+0x24>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f642:	2005      	movs	r0, #5
 800f644:	e7e9      	b.n	800f61a <follow_path+0x126>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f646:	280b      	cmp	r0, #11
 800f648:	d0da      	beq.n	800f600 <follow_path+0x10c>
			i = 8; ni = 11;				/* Goto extension */
 800f64a:	2208      	movs	r2, #8
 800f64c:	200b      	movs	r0, #11
 800f64e:	e76f      	b.n	800f530 <follow_path+0x3c>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f650:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 800f654:	f1be 0f19 	cmp.w	lr, #25
 800f658:	d801      	bhi.n	800f65e <follow_path+0x16a>
 800f65a:	3b20      	subs	r3, #32
 800f65c:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 800f65e:	54b3      	strb	r3, [r6, r2]
 800f660:	3201      	adds	r2, #1
 800f662:	e765      	b.n	800f530 <follow_path+0x3c>
 800f664:	08015ecc 	.word	0x08015ecc
 800f668:	08015f4b 	.word	0x08015f4b

0800f66c <dir_read.constprop.12>:
FRESULT dir_read (
 800f66c:	b538      	push	{r3, r4, r5, lr}
 800f66e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800f670:	6805      	ldr	r5, [r0, #0]
	FRESULT res = FR_NO_FILE;
 800f672:	2004      	movs	r0, #4
	while (dp->sect) {
 800f674:	69e1      	ldr	r1, [r4, #28]
 800f676:	b909      	cbnz	r1, 800f67c <dir_read.constprop.12+0x10>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f678:	b1a8      	cbz	r0, 800f6a6 <dir_read.constprop.12+0x3a>
 800f67a:	e01c      	b.n	800f6b6 <dir_read.constprop.12+0x4a>
		res = move_window(fs, dp->sect);
 800f67c:	4628      	mov	r0, r5
 800f67e:	f7ff fb19 	bl	800ecb4 <move_window>
		if (res != FR_OK) break;
 800f682:	b9c0      	cbnz	r0, 800f6b6 <dir_read.constprop.12+0x4a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f684:	6a23      	ldr	r3, [r4, #32]
 800f686:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) {
 800f688:	b1c2      	cbz	r2, 800f6bc <dir_read.constprop.12+0x50>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f68a:	7adb      	ldrb	r3, [r3, #11]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f68c:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f68e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f692:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f694:	d009      	beq.n	800f6aa <dir_read.constprop.12+0x3e>
 800f696:	2a2e      	cmp	r2, #46	; 0x2e
 800f698:	d007      	beq.n	800f6aa <dir_read.constprop.12+0x3e>
 800f69a:	2b0f      	cmp	r3, #15
 800f69c:	d005      	beq.n	800f6aa <dir_read.constprop.12+0x3e>
 800f69e:	f023 0320 	bic.w	r3, r3, #32
 800f6a2:	2b08      	cmp	r3, #8
 800f6a4:	d001      	beq.n	800f6aa <dir_read.constprop.12+0x3e>
		res = move_window(fs, dp->sect);
 800f6a6:	2000      	movs	r0, #0
}
 800f6a8:	bd38      	pop	{r3, r4, r5, pc}
		res = dir_next(dp, 0);		/* Next entry */
 800f6aa:	2100      	movs	r1, #0
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	f7ff feac 	bl	800f40a <dir_next>
		if (res != FR_OK) break;
 800f6b2:	2800      	cmp	r0, #0
 800f6b4:	d0de      	beq.n	800f674 <dir_read.constprop.12+0x8>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	61e3      	str	r3, [r4, #28]
 800f6ba:	e7f5      	b.n	800f6a8 <dir_read.constprop.12+0x3c>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f6bc:	2004      	movs	r0, #4
 800f6be:	e7fa      	b.n	800f6b6 <dir_read.constprop.12+0x4a>

0800f6c0 <dir_register>:
{
 800f6c0:	b570      	push	{r4, r5, r6, lr}
 800f6c2:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800f6c4:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800f6c6:	f7ff fe6d 	bl	800f3a4 <dir_sdi.constprop.14>
	if (res == FR_OK) {
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	bb28      	cbnz	r0, 800f71a <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 800f6ce:	69e9      	ldr	r1, [r5, #28]
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	f7ff faef 	bl	800ecb4 <move_window>
			if (res != FR_OK) break;
 800f6d6:	4604      	mov	r4, r0
 800f6d8:	b9f8      	cbnz	r0, 800f71a <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f6da:	6a2b      	ldr	r3, [r5, #32]
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	2be5      	cmp	r3, #229	; 0xe5
 800f6e0:	d114      	bne.n	800f70c <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 800f6e2:	69e9      	ldr	r1, [r5, #28]
 800f6e4:	4630      	mov	r0, r6
 800f6e6:	f7ff fae5 	bl	800ecb4 <move_window>
		if (res == FR_OK) {
 800f6ea:	4604      	mov	r4, r0
 800f6ec:	b960      	cbnz	r0, 800f708 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f6ee:	4601      	mov	r1, r0
 800f6f0:	2220      	movs	r2, #32
 800f6f2:	6a28      	ldr	r0, [r5, #32]
 800f6f4:	f7ff f934 	bl	800e960 <mem_set>
 800f6f8:	220b      	movs	r2, #11
 800f6fa:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800f6fe:	6a28      	ldr	r0, [r5, #32]
 800f700:	f7ff fa61 	bl	800ebc6 <mem_cpy.part.0>
			fs->wflag = 1;
 800f704:	2301      	movs	r3, #1
 800f706:	70f3      	strb	r3, [r6, #3]
}
 800f708:	4620      	mov	r0, r4
 800f70a:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d0e8      	beq.n	800f6e2 <dir_register+0x22>
			res = dir_next(dp, 1);
 800f710:	2101      	movs	r1, #1
 800f712:	4628      	mov	r0, r5
 800f714:	f7ff fe79 	bl	800f40a <dir_next>
 800f718:	e7d7      	b.n	800f6ca <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f71a:	2c04      	cmp	r4, #4
 800f71c:	bf08      	it	eq
 800f71e:	2407      	moveq	r4, #7
 800f720:	e7f2      	b.n	800f708 <dir_register+0x48>

0800f722 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f722:	b538      	push	{r3, r4, r5, lr}
 800f724:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f726:	4604      	mov	r4, r0
 800f728:	b1d0      	cbz	r0, 800f760 <validate+0x3e>
 800f72a:	6803      	ldr	r3, [r0, #0]
 800f72c:	b1db      	cbz	r3, 800f766 <validate+0x44>
 800f72e:	781a      	ldrb	r2, [r3, #0]
 800f730:	b1b2      	cbz	r2, 800f760 <validate+0x3e>
 800f732:	8881      	ldrh	r1, [r0, #4]
 800f734:	88da      	ldrh	r2, [r3, #6]
 800f736:	4291      	cmp	r1, r2
 800f738:	d112      	bne.n	800f760 <validate+0x3e>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f73a:	68d8      	ldr	r0, [r3, #12]
 800f73c:	f000 fcbe 	bl	80100bc <ff_req_grant>
 800f740:	4603      	mov	r3, r0
 800f742:	b190      	cbz	r0, 800f76a <validate+0x48>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f744:	6823      	ldr	r3, [r4, #0]
 800f746:	7858      	ldrb	r0, [r3, #1]
 800f748:	f7ff f8b6 	bl	800e8b8 <disk_status>
 800f74c:	f010 0001 	ands.w	r0, r0, #1
 800f750:	d102      	bne.n	800f758 <validate+0x36>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f752:	6823      	ldr	r3, [r4, #0]
 800f754:	602b      	str	r3, [r5, #0]
	return res;
}
 800f756:	bd38      	pop	{r3, r4, r5, pc}
				unlock_fs(obj->fs, FR_OK);
 800f758:	2100      	movs	r1, #0
 800f75a:	6820      	ldr	r0, [r4, #0]
 800f75c:	f7ff fdcc 	bl	800f2f8 <unlock_fs>
	FRESULT res = FR_INVALID_OBJECT;
 800f760:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f762:	2300      	movs	r3, #0
 800f764:	e7f6      	b.n	800f754 <validate+0x32>
	FRESULT res = FR_INVALID_OBJECT;
 800f766:	2009      	movs	r0, #9
 800f768:	e7f4      	b.n	800f754 <validate+0x32>
			res = FR_TIMEOUT;
 800f76a:	200f      	movs	r0, #15
 800f76c:	e7f2      	b.n	800f754 <validate+0x32>
	...

0800f770 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f772:	b085      	sub	sp, #20
 800f774:	4616      	mov	r6, r2
 800f776:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f77a:	a804      	add	r0, sp, #16
 800f77c:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f780:	f7ff fa09 	bl	800eb96 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800f784:	1e07      	subs	r7, r0, #0
 800f786:	db35      	blt.n	800f7f4 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f788:	4d1c      	ldr	r5, [pc, #112]	; (800f7fc <f_mount+0x8c>)
 800f78a:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]

	if (cfs) {
 800f78e:	b1a4      	cbz	r4, 800f7ba <f_mount+0x4a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f790:	4b1b      	ldr	r3, [pc, #108]	; (800f800 <f_mount+0x90>)
#if _FS_LOCK != 0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f792:	68e0      	ldr	r0, [r4, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	4294      	cmp	r4, r2
 800f798:	bf04      	itt	eq
 800f79a:	2200      	moveq	r2, #0
 800f79c:	601a      	streq	r2, [r3, #0]
 800f79e:	691a      	ldr	r2, [r3, #16]
 800f7a0:	4294      	cmp	r4, r2
 800f7a2:	bf04      	itt	eq
 800f7a4:	2200      	moveq	r2, #0
 800f7a6:	611a      	streq	r2, [r3, #16]
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f7a8:	f000 fc83 	bl	80100b2 <ff_del_syncobj>
 800f7ac:	b918      	cbnz	r0, 800f7b6 <f_mount+0x46>
 800f7ae:	2402      	movs	r4, #2

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	b005      	add	sp, #20
 800f7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cfs->fs_type = 0;				/* Clear old fs object */
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	7023      	strb	r3, [r4, #0]
	if (fs) {
 800f7ba:	9901      	ldr	r1, [sp, #4]
 800f7bc:	b989      	cbnz	r1, 800f7e2 <f_mount+0x72>
	FatFs[vol] = fs;					/* Register new fs object */
 800f7be:	9c01      	ldr	r4, [sp, #4]
 800f7c0:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f7c4:	2c00      	cmp	r4, #0
 800f7c6:	d0f3      	beq.n	800f7b0 <f_mount+0x40>
 800f7c8:	2e01      	cmp	r6, #1
 800f7ca:	d115      	bne.n	800f7f8 <f_mount+0x88>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f7cc:	a901      	add	r1, sp, #4
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	4668      	mov	r0, sp
 800f7d2:	f7ff facb 	bl	800ed6c <find_volume>
 800f7d6:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 800f7d8:	4601      	mov	r1, r0
 800f7da:	9801      	ldr	r0, [sp, #4]
 800f7dc:	f7ff fd8c 	bl	800f2f8 <unlock_fs>
 800f7e0:	e7e6      	b.n	800f7b0 <f_mount+0x40>
		fs->fs_type = 0;				/* Clear new fs object */
 800f7e2:	2300      	movs	r3, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f7e4:	b2f8      	uxtb	r0, r7
		fs->fs_type = 0;				/* Clear new fs object */
 800f7e6:	f801 3b0c 	strb.w	r3, [r1], #12
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f7ea:	f000 fc56 	bl	801009a <ff_cre_syncobj>
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	d1e5      	bne.n	800f7be <f_mount+0x4e>
 800f7f2:	e7dc      	b.n	800f7ae <f_mount+0x3e>
	if (vol < 0) return FR_INVALID_DRIVE;
 800f7f4:	240b      	movs	r4, #11
 800f7f6:	e7db      	b.n	800f7b0 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f7f8:	2400      	movs	r4, #0
 800f7fa:	e7d9      	b.n	800f7b0 <f_mount+0x40>
 800f7fc:	2400167c 	.word	0x2400167c
 800f800:	24001680 	.word	0x24001680

0800f804 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f808:	b090      	sub	sp, #64	; 0x40
 800f80a:	4690      	mov	r8, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f80c:	4604      	mov	r4, r0
{
 800f80e:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 800f810:	2800      	cmp	r0, #0
 800f812:	f000 80bb 	beq.w	800f98c <f_open+0x188>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f816:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800f81a:	a902      	add	r1, sp, #8
 800f81c:	a801      	add	r0, sp, #4
 800f81e:	462a      	mov	r2, r5
 800f820:	f7ff faa4 	bl	800ed6c <find_volume>
	if (res == FR_OK) {
 800f824:	4607      	mov	r7, r0
 800f826:	2800      	cmp	r0, #0
 800f828:	d165      	bne.n	800f8f6 <f_open+0xf2>
		dj.obj.fs = fs;
 800f82a:	ae10      	add	r6, sp, #64	; 0x40
 800f82c:	9b02      	ldr	r3, [sp, #8]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f82e:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800f830:	f846 3d34 	str.w	r3, [r6, #-52]!
		res = follow_path(&dj, path);	/* Follow the file path */
 800f834:	4630      	mov	r0, r6
 800f836:	f7ff fe5d 	bl	800f4f4 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f83a:	b958      	cbnz	r0, 800f854 <f_open+0x50>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f83c:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 800f840:	2b00      	cmp	r3, #0
 800f842:	db63      	blt.n	800f90c <f_open+0x108>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f844:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 800f848:	4630      	mov	r0, r6
 800f84a:	bf14      	ite	ne
 800f84c:	2101      	movne	r1, #1
 800f84e:	2100      	moveq	r1, #0
 800f850:	f7ff f88c 	bl	800e96c <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f854:	f018 0f1c 	tst.w	r8, #28
 800f858:	d064      	beq.n	800f924 <f_open+0x120>
			if (res != FR_OK) {					/* No file, create new */
 800f85a:	2800      	cmp	r0, #0
 800f85c:	d058      	beq.n	800f910 <f_open+0x10c>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f85e:	2804      	cmp	r0, #4
 800f860:	d149      	bne.n	800f8f6 <f_open+0xf2>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f862:	4b6f      	ldr	r3, [pc, #444]	; (800fa20 <f_open+0x21c>)
 800f864:	681a      	ldr	r2, [r3, #0]
 800f866:	b11a      	cbz	r2, 800f870 <f_open+0x6c>
 800f868:	691b      	ldr	r3, [r3, #16]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	f040 8088 	bne.w	800f980 <f_open+0x17c>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f870:	4630      	mov	r0, r6
 800f872:	f7ff ff25 	bl	800f6c0 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f876:	2800      	cmp	r0, #0
 800f878:	d13d      	bne.n	800f8f6 <f_open+0xf2>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f87a:	f045 0508 	orr.w	r5, r5, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f87e:	0728      	lsls	r0, r5, #28
 800f880:	d55b      	bpl.n	800f93a <f_open+0x136>
				dw = GET_FATTIME();
 800f882:	f7fe f95d 	bl	800db40 <get_fattime>
 800f886:	4602      	mov	r2, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f888:	4601      	mov	r1, r0
 800f88a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f88c:	300e      	adds	r0, #14
 800f88e:	f7ff f85f 	bl	800e950 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f892:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f894:	4611      	mov	r1, r2
 800f896:	3016      	adds	r0, #22
 800f898:	f7ff f85a 	bl	800e950 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f89c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f89e:	2220      	movs	r2, #32
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f8a0:	f8dd 9008 	ldr.w	r9, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f8a4:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f8a6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800f8aa:	f899 0000 	ldrb.w	r0, [r9]
 800f8ae:	4651      	mov	r1, sl
 800f8b0:	f7ff f992 	bl	800ebd8 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f8b4:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f8b6:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f8b8:	4648      	mov	r0, r9
 800f8ba:	f7ff f99c 	bl	800ebf6 <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f8be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800f8c0:	2200      	movs	r2, #0
					fs->wflag = 1;
 800f8c2:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800f8c4:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800f8c6:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 800f8c8:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 800f8ca:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 800f8cc:	9b02      	ldr	r3, [sp, #8]
 800f8ce:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f8d0:	f1b8 0f00 	cmp.w	r8, #0
 800f8d4:	d031      	beq.n	800f93a <f_open+0x136>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 800f8d6:	4641      	mov	r1, r8
 800f8d8:	4630      	mov	r0, r6
						dw = fs->winsect;
 800f8da:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800f8de:	f7ff fcd4 	bl	800f28a <remove_chain>
						if (res == FR_OK) {
 800f8e2:	b940      	cbnz	r0, 800f8f6 <f_open+0xf2>
							res = move_window(fs, dw);
 800f8e4:	4649      	mov	r1, r9
 800f8e6:	9802      	ldr	r0, [sp, #8]
 800f8e8:	f7ff f9e4 	bl	800ecb4 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f8ec:	f108 33ff 	add.w	r3, r8, #4294967295
 800f8f0:	9a02      	ldr	r2, [sp, #8]
 800f8f2:	6113      	str	r3, [r2, #16]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 800f8f4:	b308      	cbz	r0, 800f93a <f_open+0x136>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	4607      	mov	r7, r0
 800f8fa:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
 800f8fc:	4639      	mov	r1, r7
 800f8fe:	9802      	ldr	r0, [sp, #8]
 800f900:	f7ff fcfa 	bl	800f2f8 <unlock_fs>
}
 800f904:	4638      	mov	r0, r7
 800f906:	b010      	add	sp, #64	; 0x40
 800f908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 800f90c:	2006      	movs	r0, #6
 800f90e:	e7a1      	b.n	800f854 <f_open+0x50>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f910:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800f914:	f013 0f11 	tst.w	r3, #17
 800f918:	d136      	bne.n	800f988 <f_open+0x184>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f91a:	f018 0f04 	tst.w	r8, #4
 800f91e:	d0ae      	beq.n	800f87e <f_open+0x7a>
 800f920:	2008      	movs	r0, #8
 800f922:	e7e8      	b.n	800f8f6 <f_open+0xf2>
			if (res == FR_OK) {					/* Following succeeded */
 800f924:	2800      	cmp	r0, #0
 800f926:	d1e6      	bne.n	800f8f6 <f_open+0xf2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f928:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800f92c:	06da      	lsls	r2, r3, #27
 800f92e:	d429      	bmi.n	800f984 <f_open+0x180>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f930:	f018 0f02 	tst.w	r8, #2
 800f934:	d001      	beq.n	800f93a <f_open+0x136>
 800f936:	07db      	lsls	r3, r3, #31
 800f938:	d426      	bmi.n	800f988 <f_open+0x184>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f93a:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f93c:	9b02      	ldr	r3, [sp, #8]
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f93e:	4630      	mov	r0, r6
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				mode |= FA_MODIFIED;
 800f942:	bf48      	it	mi
 800f944:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f948:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f94a:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 800f94e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f950:	bf14      	ite	ne
 800f952:	2101      	movne	r1, #1
 800f954:	2100      	moveq	r1, #0
			fp->dir_ptr = dj.dir;
 800f956:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f958:	f7ff f842 	bl	800e9e0 <inc_lock>
 800f95c:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f95e:	b9b8      	cbnz	r0, 800f990 <f_open+0x18c>
 800f960:	2002      	movs	r0, #2
 800f962:	e7c8      	b.n	800f8f6 <f_open+0xf2>
					clst = get_fat(&fp->obj, clst);
 800f964:	6820      	ldr	r0, [r4, #0]
 800f966:	eba5 0508 	sub.w	r5, r5, r8
 800f96a:	f7ff fbdc 	bl	800f126 <get_fat.isra.9>
					if (clst <= 1) res = FR_INT_ERR;
 800f96e:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800f970:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800f972:	d903      	bls.n	800f97c <f_open+0x178>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f974:	1c42      	adds	r2, r0, #1
 800f976:	d134      	bne.n	800f9e2 <f_open+0x1de>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f978:	2001      	movs	r0, #1
 800f97a:	e035      	b.n	800f9e8 <f_open+0x1e4>
					if (clst <= 1) res = FR_INT_ERR;
 800f97c:	2002      	movs	r0, #2
 800f97e:	e033      	b.n	800f9e8 <f_open+0x1e4>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f980:	2012      	movs	r0, #18
 800f982:	e7b8      	b.n	800f8f6 <f_open+0xf2>
					res = FR_NO_FILE;
 800f984:	2004      	movs	r0, #4
 800f986:	e7b6      	b.n	800f8f6 <f_open+0xf2>
					res = FR_DENIED;
 800f988:	2007      	movs	r0, #7
 800f98a:	e7b4      	b.n	800f8f6 <f_open+0xf2>
	if (!fp) return FR_INVALID_OBJECT;
 800f98c:	2709      	movs	r7, #9
 800f98e:	e7b9      	b.n	800f904 <f_open+0x100>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f990:	9e02      	ldr	r6, [sp, #8]
 800f992:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800f996:	7830      	ldrb	r0, [r6, #0]
 800f998:	4641      	mov	r1, r8
 800f99a:	f7ff f91d 	bl	800ebd8 <ld_clust.isra.1>
 800f99e:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f9a0:	f108 001c 	add.w	r0, r8, #28
 800f9a4:	f7fe ffcc 	bl	800e940 <ld_dword>
			fp->obj.id = fs->id;
 800f9a8:	88f3      	ldrh	r3, [r6, #6]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f9aa:	2100      	movs	r1, #0
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f9ac:	6026      	str	r6, [r4, #0]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f9ae:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f9b2:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 800f9b4:	80a3      	strh	r3, [r4, #4]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f9b6:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f9ba:	62e1      	str	r1, [r4, #44]	; 0x2c
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f9bc:	4630      	mov	r0, r6
			fp->flag = mode;		/* Set file access mode */
 800f9be:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 800f9c0:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f9c2:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f9c4:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f9c6:	f7fe ffcb 	bl	800e960 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f9ca:	06ab      	lsls	r3, r5, #26
 800f9cc:	d596      	bpl.n	800f8fc <f_open+0xf8>
 800f9ce:	68e5      	ldr	r5, [r4, #12]
 800f9d0:	2d00      	cmp	r5, #0
 800f9d2:	d093      	beq.n	800f8fc <f_open+0xf8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f9d4:	9b02      	ldr	r3, [sp, #8]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f9d6:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f9d8:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f9dc:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f9de:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f9e2:	45a8      	cmp	r8, r5
 800f9e4:	d3be      	bcc.n	800f964 <f_open+0x160>
 800f9e6:	2000      	movs	r0, #0
				fp->clust = clst;
 800f9e8:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f9ea:	2800      	cmp	r0, #0
 800f9ec:	d183      	bne.n	800f8f6 <f_open+0xf2>
 800f9ee:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d082      	beq.n	800f8fc <f_open+0xf8>
 800f9f6:	f8dd 8008 	ldr.w	r8, [sp, #8]
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f9fa:	4640      	mov	r0, r8
 800f9fc:	f7ff f84c 	bl	800ea98 <clust2sect>
 800fa00:	2800      	cmp	r0, #0
 800fa02:	d0ad      	beq.n	800f960 <f_open+0x15c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fa04:	eb00 2255 	add.w	r2, r0, r5, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fa08:	2301      	movs	r3, #1
 800fa0a:	4631      	mov	r1, r6
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fa0c:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fa0e:	f898 0001 	ldrb.w	r0, [r8, #1]
 800fa12:	f7fe ff6b 	bl	800e8ec <disk_read>
 800fa16:	2800      	cmp	r0, #0
 800fa18:	f43f af70 	beq.w	800f8fc <f_open+0xf8>
 800fa1c:	2001      	movs	r0, #1
 800fa1e:	e76a      	b.n	800f8f6 <f_open+0xf2>
 800fa20:	24001680 	.word	0x24001680

0800fa24 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fa24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa28:	469b      	mov	fp, r3
 800fa2a:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800fa2c:	2300      	movs	r3, #0
{
 800fa2e:	4689      	mov	r9, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fa30:	a903      	add	r1, sp, #12
{
 800fa32:	4604      	mov	r4, r0
	*bw = 0;	/* Clear write byte counter */
 800fa34:	f8cb 3000 	str.w	r3, [fp]
{
 800fa38:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fa3a:	f7ff fe72 	bl	800f722 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fa3e:	4605      	mov	r5, r0
 800fa40:	b908      	cbnz	r0, 800fa46 <f_write+0x22>
 800fa42:	7d65      	ldrb	r5, [r4, #21]
 800fa44:	b10d      	cbz	r5, 800fa4a <f_write+0x26>
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
 800fa46:	4629      	mov	r1, r5
 800fa48:	e01e      	b.n	800fa88 <f_write+0x64>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fa4a:	7d23      	ldrb	r3, [r4, #20]
 800fa4c:	079a      	lsls	r2, r3, #30
 800fa4e:	d408      	bmi.n	800fa62 <f_write+0x3e>
 800fa50:	2507      	movs	r5, #7
 800fa52:	2107      	movs	r1, #7
 800fa54:	9803      	ldr	r0, [sp, #12]
 800fa56:	f7ff fc4f 	bl	800f2f8 <unlock_fs>
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800fa5a:	4628      	mov	r0, r5
 800fa5c:	b005      	add	sp, #20
 800fa5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fa62:	69a3      	ldr	r3, [r4, #24]
 800fa64:	42fb      	cmn	r3, r7
 800fa66:	d300      	bcc.n	800fa6a <f_write+0x46>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fa68:	43df      	mvns	r7, r3
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fa6a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800fa6e:	9300      	str	r3, [sp, #0]
 800fa70:	e070      	b.n	800fb54 <f_write+0x130>
					if (fp->cltbl) {
 800fa72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fa74:	b163      	cbz	r3, 800fa90 <f_write+0x6c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fa76:	4620      	mov	r0, r4
 800fa78:	f7ff f819 	bl	800eaae <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fa7c:	b950      	cbnz	r0, 800fa94 <f_write+0x70>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fa7e:	7d23      	ldrb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800fa80:	2100      	movs	r1, #0
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fa82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa86:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800fa88:	9803      	ldr	r0, [sp, #12]
 800fa8a:	f7ff fc35 	bl	800f2f8 <unlock_fs>
 800fa8e:	e7e4      	b.n	800fa5a <f_write+0x36>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fa90:	69e1      	ldr	r1, [r4, #28]
 800fa92:	e073      	b.n	800fb7c <f_write+0x158>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fa94:	2801      	cmp	r0, #1
 800fa96:	d102      	bne.n	800fa9e <f_write+0x7a>
 800fa98:	2502      	movs	r5, #2
					ABORT(fs, FR_DISK_ERR);
 800fa9a:	7565      	strb	r5, [r4, #21]
 800fa9c:	e7d3      	b.n	800fa46 <f_write+0x22>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fa9e:	1c43      	adds	r3, r0, #1
 800faa0:	d101      	bne.n	800faa6 <f_write+0x82>
					ABORT(fs, FR_DISK_ERR);
 800faa2:	2501      	movs	r5, #1
 800faa4:	e7f9      	b.n	800fa9a <f_write+0x76>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800faa6:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800faa8:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800faaa:	b903      	cbnz	r3, 800faae <f_write+0x8a>
 800faac:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800faae:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	da0c      	bge.n	800fad0 <f_write+0xac>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fab6:	9803      	ldr	r0, [sp, #12]
 800fab8:	2301      	movs	r3, #1
 800faba:	6a22      	ldr	r2, [r4, #32]
 800fabc:	9900      	ldr	r1, [sp, #0]
 800fabe:	7840      	ldrb	r0, [r0, #1]
 800fac0:	f7fe ff22 	bl	800e908 <disk_write>
 800fac4:	2800      	cmp	r0, #0
 800fac6:	d1ec      	bne.n	800faa2 <f_write+0x7e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fac8:	7d23      	ldrb	r3, [r4, #20]
 800faca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800face:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fad0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800fad4:	69e1      	ldr	r1, [r4, #28]
 800fad6:	4650      	mov	r0, sl
 800fad8:	f7fe ffde 	bl	800ea98 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fadc:	b920      	cbnz	r0, 800fae8 <f_write+0xc4>
 800fade:	2502      	movs	r5, #2
 800fae0:	4650      	mov	r0, sl
 800fae2:	7565      	strb	r5, [r4, #21]
 800fae4:	4629      	mov	r1, r5
 800fae6:	e7d0      	b.n	800fa8a <f_write+0x66>
			sect += csect;
 800fae8:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800faea:	0a7e      	lsrs	r6, r7, #9
			sect += csect;
 800faec:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 800faf0:	d048      	beq.n	800fb84 <f_write+0x160>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800faf2:	9a01      	ldr	r2, [sp, #4]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800faf4:	4649      	mov	r1, r9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800faf6:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 800fafa:	4432      	add	r2, r6
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fafc:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fb00:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800fb02:	bf84      	itt	hi
 800fb04:	9a01      	ldrhi	r2, [sp, #4]
 800fb06:	1a9e      	subhi	r6, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fb08:	4642      	mov	r2, r8
 800fb0a:	4633      	mov	r3, r6
 800fb0c:	f7fe fefc 	bl	800e908 <disk_write>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	d1c6      	bne.n	800faa2 <f_write+0x7e>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fb14:	6a21      	ldr	r1, [r4, #32]
 800fb16:	eba1 0108 	sub.w	r1, r1, r8
 800fb1a:	42b1      	cmp	r1, r6
 800fb1c:	d20a      	bcs.n	800fb34 <f_write+0x110>
 800fb1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb22:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 800fb26:	9800      	ldr	r0, [sp, #0]
 800fb28:	f7ff f84d 	bl	800ebc6 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fb2c:	7d23      	ldrb	r3, [r4, #20]
 800fb2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb32:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fb34:	0276      	lsls	r6, r6, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fb36:	69a3      	ldr	r3, [r4, #24]
 800fb38:	44b1      	add	r9, r6
 800fb3a:	68e2      	ldr	r2, [r4, #12]
 800fb3c:	1bbf      	subs	r7, r7, r6
 800fb3e:	4433      	add	r3, r6
 800fb40:	61a3      	str	r3, [r4, #24]
 800fb42:	429a      	cmp	r2, r3
 800fb44:	bf2c      	ite	cs
 800fb46:	60e2      	strcs	r2, [r4, #12]
 800fb48:	60e3      	strcc	r3, [r4, #12]
 800fb4a:	f8db 3000 	ldr.w	r3, [fp]
 800fb4e:	4433      	add	r3, r6
 800fb50:	f8cb 3000 	str.w	r3, [fp]
	for ( ;  btw;							/* Repeat until all data written */
 800fb54:	2f00      	cmp	r7, #0
 800fb56:	d092      	beq.n	800fa7e <f_write+0x5a>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fb58:	69a1      	ldr	r1, [r4, #24]
 800fb5a:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800fb5e:	bb23      	cbnz	r3, 800fbaa <f_write+0x186>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fb60:	9b03      	ldr	r3, [sp, #12]
 800fb62:	895b      	ldrh	r3, [r3, #10]
 800fb64:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800fb66:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 800fb6a:	9301      	str	r3, [sp, #4]
 800fb6c:	d19f      	bne.n	800faae <f_write+0x8a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fb6e:	2900      	cmp	r1, #0
 800fb70:	f47f af7f 	bne.w	800fa72 <f_write+0x4e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fb74:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800fb76:	2800      	cmp	r0, #0
 800fb78:	d18c      	bne.n	800fa94 <f_write+0x70>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fb7a:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	f7ff fb2c 	bl	800f1da <create_chain>
 800fb82:	e77b      	b.n	800fa7c <f_write+0x58>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fb84:	6a23      	ldr	r3, [r4, #32]
 800fb86:	4543      	cmp	r3, r8
 800fb88:	d00d      	beq.n	800fba6 <f_write+0x182>
 800fb8a:	68e2      	ldr	r2, [r4, #12]
 800fb8c:	69a3      	ldr	r3, [r4, #24]
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d909      	bls.n	800fba6 <f_write+0x182>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fb92:	2301      	movs	r3, #1
 800fb94:	4642      	mov	r2, r8
 800fb96:	9900      	ldr	r1, [sp, #0]
 800fb98:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800fb9c:	f7fe fea6 	bl	800e8ec <disk_read>
				fp->fptr < fp->obj.objsize &&
 800fba0:	2800      	cmp	r0, #0
 800fba2:	f47f af7e 	bne.w	800faa2 <f_write+0x7e>
			fp->sect = sect;
 800fba6:	f8c4 8020 	str.w	r8, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fbaa:	69a0      	ldr	r0, [r4, #24]
 800fbac:	4649      	mov	r1, r9
 800fbae:	9b00      	ldr	r3, [sp, #0]
 800fbb0:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800fbb4:	f5c0 7600 	rsb	r6, r0, #512	; 0x200
 800fbb8:	4418      	add	r0, r3
 800fbba:	42be      	cmp	r6, r7
 800fbbc:	bf28      	it	cs
 800fbbe:	463e      	movcs	r6, r7
 800fbc0:	4632      	mov	r2, r6
 800fbc2:	f7ff f800 	bl	800ebc6 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 800fbc6:	7d23      	ldrb	r3, [r4, #20]
 800fbc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fbcc:	7523      	strb	r3, [r4, #20]
 800fbce:	e7b2      	b.n	800fb36 <f_write+0x112>

0800fbd0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fbd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fbd2:	a901      	add	r1, sp, #4
{
 800fbd4:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fbd6:	f7ff fda4 	bl	800f722 <validate>
	if (res == FR_OK) {
 800fbda:	4605      	mov	r5, r0
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	d142      	bne.n	800fc66 <f_sync+0x96>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fbe0:	7d23      	ldrb	r3, [r4, #20]
 800fbe2:	065a      	lsls	r2, r3, #25
 800fbe4:	d53f      	bpl.n	800fc66 <f_sync+0x96>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fbe6:	061b      	lsls	r3, r3, #24
 800fbe8:	d514      	bpl.n	800fc14 <f_sync+0x44>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fbea:	9801      	ldr	r0, [sp, #4]
 800fbec:	2301      	movs	r3, #1
 800fbee:	6a22      	ldr	r2, [r4, #32]
 800fbf0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800fbf4:	7840      	ldrb	r0, [r0, #1]
 800fbf6:	f7fe fe87 	bl	800e908 <disk_write>
 800fbfa:	b138      	cbz	r0, 800fc0c <f_sync+0x3c>
 800fbfc:	2501      	movs	r5, #1
 800fbfe:	2101      	movs	r1, #1
 800fc00:	9801      	ldr	r0, [sp, #4]
 800fc02:	f7ff fb79 	bl	800f2f8 <unlock_fs>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800fc06:	4628      	mov	r0, r5
 800fc08:	b003      	add	sp, #12
 800fc0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				fp->flag &= (BYTE)~FA_DIRTY;
 800fc0c:	7d23      	ldrb	r3, [r4, #20]
 800fc0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc12:	7523      	strb	r3, [r4, #20]
			tm = GET_FATTIME();				/* Modified time */
 800fc14:	f7fd ff94 	bl	800db40 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800fc18:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 800fc1a:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 800fc1c:	9801      	ldr	r0, [sp, #4]
 800fc1e:	f7ff f849 	bl	800ecb4 <move_window>
				if (res == FR_OK) {
 800fc22:	4605      	mov	r5, r0
 800fc24:	b9f8      	cbnz	r0, 800fc66 <f_sync+0x96>
					dir = fp->dir_ptr;
 800fc26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fc28:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fc2a:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fc2c:	f043 0320 	orr.w	r3, r3, #32
 800fc30:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fc32:	68a2      	ldr	r2, [r4, #8]
 800fc34:	6820      	ldr	r0, [r4, #0]
 800fc36:	f7fe ffde 	bl	800ebf6 <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fc3a:	68e1      	ldr	r1, [r4, #12]
 800fc3c:	f106 001c 	add.w	r0, r6, #28
 800fc40:	f7fe fe86 	bl	800e950 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fc44:	4639      	mov	r1, r7
 800fc46:	f106 0016 	add.w	r0, r6, #22
 800fc4a:	f7fe fe81 	bl	800e950 <st_dword>
					fs->wflag = 1;
 800fc4e:	2301      	movs	r3, #1
 800fc50:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800fc52:	74b5      	strb	r5, [r6, #18]
	*ptr++ = (BYTE)val;
 800fc54:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 800fc56:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fc58:	f7ff fb59 	bl	800f30e <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fc5c:	7d23      	ldrb	r3, [r4, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fc5e:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fc60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc64:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, res);
 800fc66:	4629      	mov	r1, r5
 800fc68:	9801      	ldr	r0, [sp, #4]
 800fc6a:	f7ff fb45 	bl	800f2f8 <unlock_fs>
 800fc6e:	e7ca      	b.n	800fc06 <f_sync+0x36>

0800fc70 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fc70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc72:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fc74:	f7ff ffac 	bl	800fbd0 <f_sync>
	if (res == FR_OK)
 800fc78:	4604      	mov	r4, r0
 800fc7a:	b978      	cbnz	r0, 800fc9c <f_close+0x2c>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fc7c:	a901      	add	r1, sp, #4
 800fc7e:	4628      	mov	r0, r5
 800fc80:	f7ff fd4f 	bl	800f722 <validate>
		if (res == FR_OK) {
 800fc84:	4604      	mov	r4, r0
 800fc86:	b948      	cbnz	r0, 800fc9c <f_close+0x2c>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fc88:	6928      	ldr	r0, [r5, #16]
 800fc8a:	f7fe fee9 	bl	800ea60 <dec_lock>
			if (res == FR_OK)
 800fc8e:	4604      	mov	r4, r0
 800fc90:	b900      	cbnz	r0, 800fc94 <f_close+0x24>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fc92:	6028      	str	r0, [r5, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800fc94:	2100      	movs	r1, #0
 800fc96:	9801      	ldr	r0, [sp, #4]
 800fc98:	f7ff fb2e 	bl	800f2f8 <unlock_fs>
#endif
		}
	}
	return res;
}
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	b003      	add	sp, #12
 800fca0:	bd30      	pop	{r4, r5, pc}

0800fca2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fca2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800fca6:	460e      	mov	r6, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fca8:	a901      	add	r1, sp, #4
{
 800fcaa:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fcac:	f7ff fd39 	bl	800f722 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fcb0:	4604      	mov	r4, r0
 800fcb2:	b908      	cbnz	r0, 800fcb8 <f_lseek+0x16>
 800fcb4:	7d6c      	ldrb	r4, [r5, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800fcb6:	b114      	cbz	r4, 800fcbe <f_lseek+0x1c>
#endif
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
 800fcb8:	4621      	mov	r1, r4
 800fcba:	9801      	ldr	r0, [sp, #4]
 800fcbc:	e051      	b.n	800fd62 <f_lseek+0xc0>
	if (fp->cltbl) {	/* Fast seek */
 800fcbe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d07c      	beq.n	800fdbe <f_lseek+0x11c>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800fcc4:	1c72      	adds	r2, r6, #1
 800fcc6:	d134      	bne.n	800fd32 <f_lseek+0x90>
			cl = fp->obj.sclust;		/* Origin of the chain */
 800fcc8:	68af      	ldr	r7, [r5, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fcca:	f103 0904 	add.w	r9, r3, #4
 800fcce:	f8d3 a000 	ldr.w	sl, [r3]
 800fcd2:	2602      	movs	r6, #2
			if (cl) {
 800fcd4:	b327      	cbz	r7, 800fd20 <f_lseek+0x7e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fcd6:	f04f 0800 	mov.w	r8, #0
 800fcda:	eb07 0108 	add.w	r1, r7, r8
						cl = get_fat(&fp->obj, cl);
 800fcde:	6828      	ldr	r0, [r5, #0]
 800fce0:	f7ff fa21 	bl	800f126 <get_fat.isra.9>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fce4:	2801      	cmp	r0, #1
						cl = get_fat(&fp->obj, cl);
 800fce6:	f108 0801 	add.w	r8, r8, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fcea:	d804      	bhi.n	800fcf6 <f_lseek+0x54>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fcec:	2402      	movs	r4, #2
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fcee:	756c      	strb	r4, [r5, #21]
 800fcf0:	e7e2      	b.n	800fcb8 <f_lseek+0x16>
 800fcf2:	4607      	mov	r7, r0
 800fcf4:	e7ef      	b.n	800fcd6 <f_lseek+0x34>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fcf6:	1c43      	adds	r3, r0, #1
 800fcf8:	d101      	bne.n	800fcfe <f_lseek+0x5c>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fcfa:	2401      	movs	r4, #1
 800fcfc:	e7f7      	b.n	800fcee <f_lseek+0x4c>
					} while (cl == pcl + 1);
 800fcfe:	eb07 0308 	add.w	r3, r7, r8
 800fd02:	4283      	cmp	r3, r0
 800fd04:	d0e9      	beq.n	800fcda <f_lseek+0x38>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fd06:	3602      	adds	r6, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800fd08:	45b2      	cmp	sl, r6
						*tbl++ = ncl; *tbl++ = tcl;
 800fd0a:	bf21      	itttt	cs
 800fd0c:	464b      	movcs	r3, r9
 800fd0e:	f843 8b08 	strcs.w	r8, [r3], #8
 800fd12:	f8c9 7004 	strcs.w	r7, [r9, #4]
 800fd16:	4699      	movcs	r9, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800fd18:	9b01      	ldr	r3, [sp, #4]
 800fd1a:	699b      	ldr	r3, [r3, #24]
 800fd1c:	4283      	cmp	r3, r0
 800fd1e:	d8e8      	bhi.n	800fcf2 <f_lseek+0x50>
			*fp->cltbl = ulen;	/* Number of items used */
 800fd20:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			if (ulen <= tlen) {
 800fd22:	4556      	cmp	r6, sl
			*fp->cltbl = ulen;	/* Number of items used */
 800fd24:	601e      	str	r6, [r3, #0]
			if (ulen <= tlen) {
 800fd26:	f200 80e4 	bhi.w	800fef2 <f_lseek+0x250>
				*tbl = 0;		/* Terminate table */
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	f8c9 3000 	str.w	r3, [r9]
 800fd30:	e7c2      	b.n	800fcb8 <f_lseek+0x16>
 800fd32:	68e8      	ldr	r0, [r5, #12]
 800fd34:	4286      	cmp	r6, r0
 800fd36:	bf28      	it	cs
 800fd38:	4606      	movcs	r6, r0
			fp->fptr = ofs;				/* Set file pointer */
 800fd3a:	61ae      	str	r6, [r5, #24]
			if (ofs) {
 800fd3c:	2e00      	cmp	r6, #0
 800fd3e:	d0bb      	beq.n	800fcb8 <f_lseek+0x16>
				fp->clust = clmt_clust(fp, ofs - 1);
 800fd40:	f106 38ff 	add.w	r8, r6, #4294967295
 800fd44:	9f01      	ldr	r7, [sp, #4]
 800fd46:	4628      	mov	r0, r5
 800fd48:	4641      	mov	r1, r8
 800fd4a:	f7fe feb0 	bl	800eaae <clmt_clust>
 800fd4e:	4601      	mov	r1, r0
 800fd50:	61e8      	str	r0, [r5, #28]
				dsc = clust2sect(fs, fp->clust);
 800fd52:	4638      	mov	r0, r7
 800fd54:	f7fe fea0 	bl	800ea98 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800fd58:	b948      	cbnz	r0, 800fd6e <f_lseek+0xcc>
 800fd5a:	2402      	movs	r4, #2
 800fd5c:	4638      	mov	r0, r7
 800fd5e:	4621      	mov	r1, r4
 800fd60:	756c      	strb	r4, [r5, #21]
	LEAVE_FF(fs, res);
 800fd62:	f7ff fac9 	bl	800f2f8 <unlock_fs>
}
 800fd66:	4620      	mov	r0, r4
 800fd68:	b002      	add	sp, #8
 800fd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800fd6e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800fd72:	2e00      	cmp	r6, #0
 800fd74:	d0a0      	beq.n	800fcb8 <f_lseek+0x16>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800fd76:	897e      	ldrh	r6, [r7, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800fd78:	6a2a      	ldr	r2, [r5, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800fd7a:	3e01      	subs	r6, #1
 800fd7c:	ea06 2658 	and.w	r6, r6, r8, lsr #9
 800fd80:	4406      	add	r6, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800fd82:	42b2      	cmp	r2, r6
 800fd84:	d098      	beq.n	800fcb8 <f_lseek+0x16>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fd86:	f995 3014 	ldrsb.w	r3, [r5, #20]
 800fd8a:	f105 0830 	add.w	r8, r5, #48	; 0x30
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	da0a      	bge.n	800fda8 <f_lseek+0x106>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fd92:	2301      	movs	r3, #1
 800fd94:	4641      	mov	r1, r8
 800fd96:	7878      	ldrb	r0, [r7, #1]
 800fd98:	f7fe fdb6 	bl	800e908 <disk_write>
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	d1ac      	bne.n	800fcfa <f_lseek+0x58>
						fp->flag &= (BYTE)~FA_DIRTY;
 800fda0:	7d2b      	ldrb	r3, [r5, #20]
 800fda2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fda6:	752b      	strb	r3, [r5, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800fda8:	9801      	ldr	r0, [sp, #4]
 800fdaa:	2301      	movs	r3, #1
 800fdac:	4632      	mov	r2, r6
 800fdae:	4641      	mov	r1, r8
 800fdb0:	7840      	ldrb	r0, [r0, #1]
 800fdb2:	f7fe fd9b 	bl	800e8ec <disk_read>
 800fdb6:	2800      	cmp	r0, #0
 800fdb8:	d19f      	bne.n	800fcfa <f_lseek+0x58>
					fp->sect = dsc;
 800fdba:	622e      	str	r6, [r5, #32]
 800fdbc:	e77c      	b.n	800fcb8 <f_lseek+0x16>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800fdbe:	68eb      	ldr	r3, [r5, #12]
 800fdc0:	42b3      	cmp	r3, r6
 800fdc2:	d204      	bcs.n	800fdce <f_lseek+0x12c>
 800fdc4:	7d2a      	ldrb	r2, [r5, #20]
 800fdc6:	f012 0f02 	tst.w	r2, #2
 800fdca:	bf08      	it	eq
 800fdcc:	461e      	moveq	r6, r3
		fp->fptr = nsect = 0;
 800fdce:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800fdd0:	69ab      	ldr	r3, [r5, #24]
		fp->fptr = nsect = 0;
 800fdd2:	61aa      	str	r2, [r5, #24]
		if (ofs) {
 800fdd4:	b90e      	cbnz	r6, 800fdda <f_lseek+0x138>
		fp->fptr = nsect = 0;
 800fdd6:	4637      	mov	r7, r6
 800fdd8:	e01d      	b.n	800fe16 <f_lseek+0x174>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800fdda:	9a01      	ldr	r2, [sp, #4]
 800fddc:	8957      	ldrh	r7, [r2, #10]
 800fdde:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d040      	beq.n	800fe66 <f_lseek+0x1c4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800fde4:	3b01      	subs	r3, #1
 800fde6:	1e72      	subs	r2, r6, #1
 800fde8:	fbb3 f1f7 	udiv	r1, r3, r7
 800fdec:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 800fdf0:	428a      	cmp	r2, r1
 800fdf2:	d338      	bcc.n	800fe66 <f_lseek+0x1c4>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800fdf4:	427a      	negs	r2, r7
				clst = fp->clust;
 800fdf6:	69e9      	ldr	r1, [r5, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800fdf8:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 800fdfa:	1af6      	subs	r6, r6, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800fdfc:	61ab      	str	r3, [r5, #24]
			if (clst != 0) {
 800fdfe:	2900      	cmp	r1, #0
 800fe00:	d160      	bne.n	800fec4 <f_lseek+0x222>
		fp->fptr = nsect = 0;
 800fe02:	2700      	movs	r7, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800fe04:	68eb      	ldr	r3, [r5, #12]
 800fe06:	69ae      	ldr	r6, [r5, #24]
 800fe08:	429e      	cmp	r6, r3
			fp->flag |= FA_MODIFIED;
 800fe0a:	bf81      	itttt	hi
 800fe0c:	7d2b      	ldrbhi	r3, [r5, #20]
			fp->obj.objsize = fp->fptr;
 800fe0e:	60ee      	strhi	r6, [r5, #12]
			fp->flag |= FA_MODIFIED;
 800fe10:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 800fe14:	752b      	strbhi	r3, [r5, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800fe16:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800fe1a:	2e00      	cmp	r6, #0
 800fe1c:	f43f af4c 	beq.w	800fcb8 <f_lseek+0x16>
 800fe20:	6a2a      	ldr	r2, [r5, #32]
 800fe22:	4297      	cmp	r7, r2
 800fe24:	f43f af48 	beq.w	800fcb8 <f_lseek+0x16>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800fe28:	f995 3014 	ldrsb.w	r3, [r5, #20]
 800fe2c:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	da0c      	bge.n	800fe4e <f_lseek+0x1ac>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe34:	9801      	ldr	r0, [sp, #4]
 800fe36:	2301      	movs	r3, #1
 800fe38:	4631      	mov	r1, r6
 800fe3a:	7840      	ldrb	r0, [r0, #1]
 800fe3c:	f7fe fd64 	bl	800e908 <disk_write>
 800fe40:	2800      	cmp	r0, #0
 800fe42:	f47f af5a 	bne.w	800fcfa <f_lseek+0x58>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fe46:	7d2b      	ldrb	r3, [r5, #20]
 800fe48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe4c:	752b      	strb	r3, [r5, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fe4e:	9801      	ldr	r0, [sp, #4]
 800fe50:	2301      	movs	r3, #1
 800fe52:	463a      	mov	r2, r7
 800fe54:	4631      	mov	r1, r6
 800fe56:	7840      	ldrb	r0, [r0, #1]
 800fe58:	f7fe fd48 	bl	800e8ec <disk_read>
 800fe5c:	2800      	cmp	r0, #0
 800fe5e:	f47f af4c 	bne.w	800fcfa <f_lseek+0x58>
			fp->sect = nsect;
 800fe62:	622f      	str	r7, [r5, #32]
 800fe64:	e728      	b.n	800fcb8 <f_lseek+0x16>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800fe66:	68a9      	ldr	r1, [r5, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800fe68:	b951      	cbnz	r1, 800fe80 <f_lseek+0x1de>
					clst = create_chain(&fp->obj, 0);
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	f7ff f9b5 	bl	800f1da <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fe70:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 800fe72:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fe74:	f43f af3a 	beq.w	800fcec <f_lseek+0x4a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fe78:	3001      	adds	r0, #1
 800fe7a:	f43f af3e 	beq.w	800fcfa <f_lseek+0x58>
					fp->obj.sclust = clst;
 800fe7e:	60a9      	str	r1, [r5, #8]
				fp->clust = clst;
 800fe80:	61e9      	str	r1, [r5, #28]
 800fe82:	e7bc      	b.n	800fdfe <f_lseek+0x15c>
					ofs -= bcs; fp->fptr += bcs;
 800fe84:	443b      	add	r3, r7
 800fe86:	1bf6      	subs	r6, r6, r7
 800fe88:	61ab      	str	r3, [r5, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800fe8a:	7d2b      	ldrb	r3, [r5, #20]
 800fe8c:	079a      	lsls	r2, r3, #30
 800fe8e:	d506      	bpl.n	800fe9e <f_lseek+0x1fc>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800fe90:	4628      	mov	r0, r5
 800fe92:	f7ff f9a2 	bl	800f1da <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 800fe96:	4601      	mov	r1, r0
 800fe98:	b928      	cbnz	r0, 800fea6 <f_lseek+0x204>
							ofs = 0; break;
 800fe9a:	4606      	mov	r6, r0
 800fe9c:	e015      	b.n	800feca <f_lseek+0x228>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800fe9e:	6828      	ldr	r0, [r5, #0]
 800fea0:	f7ff f941 	bl	800f126 <get_fat.isra.9>
 800fea4:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fea6:	1c4b      	adds	r3, r1, #1
 800fea8:	9801      	ldr	r0, [sp, #4]
 800feaa:	d103      	bne.n	800feb4 <f_lseek+0x212>
 800feac:	2401      	movs	r4, #1
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800feae:	756c      	strb	r4, [r5, #21]
 800feb0:	4621      	mov	r1, r4
 800feb2:	e756      	b.n	800fd62 <f_lseek+0xc0>
 800feb4:	2901      	cmp	r1, #1
 800feb6:	d902      	bls.n	800febe <f_lseek+0x21c>
 800feb8:	6983      	ldr	r3, [r0, #24]
 800feba:	428b      	cmp	r3, r1
 800febc:	d801      	bhi.n	800fec2 <f_lseek+0x220>
 800febe:	2402      	movs	r4, #2
 800fec0:	e7f5      	b.n	800feae <f_lseek+0x20c>
					fp->clust = clst;
 800fec2:	61e9      	str	r1, [r5, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800fec4:	42be      	cmp	r6, r7
 800fec6:	69ab      	ldr	r3, [r5, #24]
 800fec8:	d8dc      	bhi.n	800fe84 <f_lseek+0x1e2>
				fp->fptr += ofs;
 800feca:	69ab      	ldr	r3, [r5, #24]
 800fecc:	4433      	add	r3, r6
 800fece:	61ab      	str	r3, [r5, #24]
				if (ofs % SS(fs)) {
 800fed0:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d094      	beq.n	800fe02 <f_lseek+0x160>
 800fed8:	9a01      	ldr	r2, [sp, #4]
					nsect = clust2sect(fs, clst);	/* Current sector */
 800feda:	4610      	mov	r0, r2
 800fedc:	f7fe fddc 	bl	800ea98 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800fee0:	b920      	cbnz	r0, 800feec <f_lseek+0x24a>
 800fee2:	2402      	movs	r4, #2
 800fee4:	4610      	mov	r0, r2
 800fee6:	756c      	strb	r4, [r5, #21]
 800fee8:	4621      	mov	r1, r4
 800feea:	e73a      	b.n	800fd62 <f_lseek+0xc0>
					nsect += (DWORD)(ofs / SS(fs));
 800feec:	eb00 2756 	add.w	r7, r0, r6, lsr #9
 800fef0:	e788      	b.n	800fe04 <f_lseek+0x162>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800fef2:	2411      	movs	r4, #17
 800fef4:	e6e0      	b.n	800fcb8 <f_lseek+0x16>

0800fef6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800fef6:	b530      	push	{r4, r5, lr}
 800fef8:	b085      	sub	sp, #20
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800fefa:	4604      	mov	r4, r0
{
 800fefc:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 800fefe:	2800      	cmp	r0, #0
 800ff00:	d03c      	beq.n	800ff7c <f_opendir+0x86>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 800ff02:	2200      	movs	r2, #0
 800ff04:	a903      	add	r1, sp, #12
 800ff06:	a801      	add	r0, sp, #4
 800ff08:	f7fe ff30 	bl	800ed6c <find_volume>
	if (res == FR_OK) {
 800ff0c:	4605      	mov	r5, r0
 800ff0e:	b980      	cbnz	r0, 800ff32 <f_opendir+0x3c>
		obj->fs = fs;
 800ff10:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ff12:	4620      	mov	r0, r4
 800ff14:	9901      	ldr	r1, [sp, #4]
		obj->fs = fs;
 800ff16:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ff18:	f7ff faec 	bl	800f4f4 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800ff1c:	4605      	mov	r5, r0
 800ff1e:	bb40      	cbnz	r0, 800ff72 <f_opendir+0x7c>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ff20:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 800ff24:	9d03      	ldr	r5, [sp, #12]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	db0b      	blt.n	800ff42 <f_opendir+0x4c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ff2a:	79a3      	ldrb	r3, [r4, #6]
 800ff2c:	06db      	lsls	r3, r3, #27
 800ff2e:	d403      	bmi.n	800ff38 <f_opendir+0x42>
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800ff30:	2505      	movs	r5, #5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ff32:	2300      	movs	r3, #0
 800ff34:	6023      	str	r3, [r4, #0]
 800ff36:	e013      	b.n	800ff60 <f_opendir+0x6a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ff38:	7828      	ldrb	r0, [r5, #0]
 800ff3a:	6a21      	ldr	r1, [r4, #32]
 800ff3c:	f7fe fe4c 	bl	800ebd8 <ld_clust.isra.1>
 800ff40:	60a0      	str	r0, [r4, #8]
				obj->id = fs->id;
 800ff42:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ff44:	4620      	mov	r0, r4
				obj->id = fs->id;
 800ff46:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ff48:	f7ff fa2c 	bl	800f3a4 <dir_sdi.constprop.14>
				if (res == FR_OK) {
 800ff4c:	4605      	mov	r5, r0
 800ff4e:	b980      	cbnz	r0, 800ff72 <f_opendir+0x7c>
					if (obj->sclust) {
 800ff50:	68a3      	ldr	r3, [r4, #8]
 800ff52:	b163      	cbz	r3, 800ff6e <f_opendir+0x78>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ff54:	4601      	mov	r1, r0
 800ff56:	4620      	mov	r0, r4
 800ff58:	f7fe fd42 	bl	800e9e0 <inc_lock>
 800ff5c:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ff5e:	b158      	cbz	r0, 800ff78 <f_opendir+0x82>

	LEAVE_FF(fs, res);
 800ff60:	4629      	mov	r1, r5
 800ff62:	9803      	ldr	r0, [sp, #12]
 800ff64:	f7ff f9c8 	bl	800f2f8 <unlock_fs>
}
 800ff68:	4628      	mov	r0, r5
 800ff6a:	b005      	add	sp, #20
 800ff6c:	bd30      	pop	{r4, r5, pc}
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ff6e:	6120      	str	r0, [r4, #16]
 800ff70:	e7f6      	b.n	800ff60 <f_opendir+0x6a>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ff72:	2d04      	cmp	r5, #4
 800ff74:	d0dc      	beq.n	800ff30 <f_opendir+0x3a>
 800ff76:	e7dc      	b.n	800ff32 <f_opendir+0x3c>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ff78:	2512      	movs	r5, #18
 800ff7a:	e7da      	b.n	800ff32 <f_opendir+0x3c>
	if (!dp) return FR_INVALID_OBJECT;
 800ff7c:	2509      	movs	r5, #9
 800ff7e:	e7f3      	b.n	800ff68 <f_opendir+0x72>

0800ff80 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ff80:	b537      	push	{r0, r1, r2, r4, r5, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ff82:	a901      	add	r1, sp, #4
{
 800ff84:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ff86:	f7ff fbcc 	bl	800f722 <validate>
	if (res == FR_OK) {
 800ff8a:	b940      	cbnz	r0, 800ff9e <f_closedir+0x1e>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ff8c:	6928      	ldr	r0, [r5, #16]
 800ff8e:	b940      	cbnz	r0, 800ffa2 <f_closedir+0x22>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800ff90:	2400      	movs	r4, #0
 800ff92:	602c      	str	r4, [r5, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ff94:	9801      	ldr	r0, [sp, #4]
 800ff96:	2100      	movs	r1, #0
 800ff98:	f7ff f9ae 	bl	800f2f8 <unlock_fs>
 800ff9c:	4620      	mov	r0, r4
#endif
	}
	return res;
}
 800ff9e:	b003      	add	sp, #12
 800ffa0:	bd30      	pop	{r4, r5, pc}
			res = dec_lock(dp->obj.lockid);
 800ffa2:	f7fe fd5d 	bl	800ea60 <dec_lock>
		if (res == FR_OK)
 800ffa6:	4604      	mov	r4, r0
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	d1f3      	bne.n	800ff94 <f_closedir+0x14>
 800ffac:	e7f0      	b.n	800ff90 <f_closedir+0x10>

0800ffae <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ffae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ffb0:	460e      	mov	r6, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800ffb2:	a901      	add	r1, sp, #4
{
 800ffb4:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800ffb6:	f7ff fbb4 	bl	800f722 <validate>
	if (res == FR_OK) {
 800ffba:	4604      	mov	r4, r0
 800ffbc:	b920      	cbnz	r0, 800ffc8 <f_readdir+0x1a>
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800ffbe:	4628      	mov	r0, r5
		if (!fno) {
 800ffc0:	b94e      	cbnz	r6, 800ffd6 <f_readdir+0x28>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800ffc2:	f7ff f9ef 	bl	800f3a4 <dir_sdi.constprop.14>
 800ffc6:	4604      	mov	r4, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ffc8:	9801      	ldr	r0, [sp, #4]
 800ffca:	4621      	mov	r1, r4
 800ffcc:	f7ff f994 	bl	800f2f8 <unlock_fs>
}
 800ffd0:	4620      	mov	r0, r4
 800ffd2:	b002      	add	sp, #8
 800ffd4:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read(dp, 0);			/* Read an item */
 800ffd6:	f7ff fb49 	bl	800f66c <dir_read.constprop.12>
			if (res == FR_OK) {				/* A valid entry is found */
 800ffda:	f010 03fb 	ands.w	r3, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 800ffde:	4604      	mov	r4, r0
			if (res == FR_OK) {				/* A valid entry is found */
 800ffe0:	d1f2      	bne.n	800ffc8 <f_readdir+0x1a>
	fno->fname[0] = 0;		/* Invaidate file info */
 800ffe2:	7273      	strb	r3, [r6, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ffe4:	69eb      	ldr	r3, [r5, #28]
 800ffe6:	b11b      	cbz	r3, 800fff0 <f_readdir+0x42>
 800ffe8:	4631      	mov	r1, r6
 800ffea:	4628      	mov	r0, r5
 800ffec:	f7fe fe0f 	bl	800ec0e <get_fileinfo.part.3>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fff0:	2100      	movs	r1, #0
 800fff2:	4628      	mov	r0, r5
 800fff4:	f7ff fa09 	bl	800f40a <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800fff8:	2804      	cmp	r0, #4
 800fffa:	bf14      	ite	ne
 800fffc:	4604      	movne	r4, r0
 800fffe:	2400      	moveq	r4, #0
 8010000:	e7e2      	b.n	800ffc8 <f_readdir+0x1a>

08010002 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8010002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010004:	4606      	mov	r6, r0
 8010006:	460d      	mov	r5, r1


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8010008:	f101 0709 	add.w	r7, r1, #9
		res = f_readdir(dp, fno);		/* Get a directory item */
 801000c:	4629      	mov	r1, r5
 801000e:	4630      	mov	r0, r6
 8010010:	f7ff ffcd 	bl	800ffae <f_readdir>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8010014:	4604      	mov	r4, r0
 8010016:	b950      	cbnz	r0, 801002e <f_findnext+0x2c>
 8010018:	b14d      	cbz	r5, 801002e <f_findnext+0x2c>
 801001a:	7a6b      	ldrb	r3, [r5, #9]
 801001c:	b13b      	cbz	r3, 801002e <f_findnext+0x2c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801001e:	4603      	mov	r3, r0
 8010020:	4602      	mov	r2, r0
 8010022:	4639      	mov	r1, r7
 8010024:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8010026:	f7fe fd69 	bl	800eafc <pattern_matching>
 801002a:	2800      	cmp	r0, #0
 801002c:	d0ee      	beq.n	801000c <f_findnext+0xa>
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 801002e:	4620      	mov	r0, r4
 8010030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010032 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8010032:	b538      	push	{r3, r4, r5, lr}
 8010034:	460d      	mov	r5, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8010036:	6303      	str	r3, [r0, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 8010038:	4611      	mov	r1, r2
{
 801003a:	4604      	mov	r4, r0
	res = f_opendir(dp, path);		/* Open the target directory */
 801003c:	f7ff ff5b 	bl	800fef6 <f_opendir>
	if (res == FR_OK) {
 8010040:	b928      	cbnz	r0, 801004e <f_findfirst+0x1c>
		res = f_findnext(dp, fno);	/* Find the first item */
 8010042:	4629      	mov	r1, r5
 8010044:	4620      	mov	r0, r4
	}
	return res;
}
 8010046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 801004a:	f7ff bfda 	b.w	8010002 <f_findnext>
}
 801004e:	bd38      	pop	{r3, r4, r5, pc}

08010050 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8010050:	4b0f      	ldr	r3, [pc, #60]	; (8010090 <FATFS_LinkDriverEx+0x40>)
{
 8010052:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8010054:	7a5d      	ldrb	r5, [r3, #9]
 8010056:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 801005a:	b9b5      	cbnz	r5, 801008a <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 801005c:	7a5d      	ldrb	r5, [r3, #9]
 801005e:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8010060:	7a5d      	ldrb	r5, [r3, #9]
 8010062:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8010066:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8010068:	7a58      	ldrb	r0, [r3, #9]
 801006a:	4418      	add	r0, r3
 801006c:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 801006e:	7a5a      	ldrb	r2, [r3, #9]
 8010070:	b2d2      	uxtb	r2, r2
 8010072:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8010074:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8010076:	b2c0      	uxtb	r0, r0
 8010078:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 801007a:	233a      	movs	r3, #58	; 0x3a
    path[2] = '/';
    path[3] = 0;
 801007c:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 801007e:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8010080:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8010082:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 8010084:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 8010086:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 8010088:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 801008a:	2001      	movs	r0, #1
 801008c:	e7fc      	b.n	8010088 <FATFS_LinkDriverEx+0x38>
 801008e:	bf00      	nop
 8010090:	240016a4 	.word	0x240016a4

08010094 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8010094:	2200      	movs	r2, #0
 8010096:	f7ff bfdb 	b.w	8010050 <FATFS_LinkDriverEx>

0801009a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801009a:	b510      	push	{r4, lr}
 801009c:	460c      	mov	r4, r1

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801009e:	2101      	movs	r1, #1
 80100a0:	2200      	movs	r2, #0
 80100a2:	4608      	mov	r0, r1
 80100a4:	f000 f9b6 	bl	8010414 <osSemaphoreNew>
 80100a8:	6020      	str	r0, [r4, #0]

#endif
    ret = (*sobj != NULL);

    return ret;
}
 80100aa:	3000      	adds	r0, #0
 80100ac:	bf18      	it	ne
 80100ae:	2001      	movne	r0, #1
 80100b0:	bd10      	pop	{r4, pc}

080100b2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80100b2:	b508      	push	{r3, lr}
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80100b4:	f000 fa78 	bl	80105a8 <osSemaphoreDelete>
#endif
    return 1;
}
 80100b8:	2001      	movs	r0, #1
 80100ba:	bd08      	pop	{r3, pc}

080100bc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80100bc:	b508      	push	{r3, lr}
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80100be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80100c2:	f000 f9fd 	bl	80104c0 <osSemaphoreAcquire>
  {
    ret = 1;
  }

  return ret;
}
 80100c6:	fab0 f080 	clz	r0, r0
 80100ca:	0940      	lsrs	r0, r0, #5
 80100cc:	bd08      	pop	{r3, pc}

080100ce <ff_rel_grant>:
)
{
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80100ce:	f000 ba33 	b.w	8010538 <osSemaphoreRelease>
	...

080100d4 <SysTick_Handler>:
extern void xPortSysTickHandler (void);

/*
  SysTick handler implementation that also clears overflow flag.
*/
void SysTick_Handler (void) {
 80100d4:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80100d6:	4b05      	ldr	r3, [pc, #20]	; (80100ec <SysTick_Handler+0x18>)
 80100d8:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80100da:	f002 fa0d 	bl	80124f8 <xTaskGetSchedulerState>
 80100de:	2801      	cmp	r0, #1
 80100e0:	d003      	beq.n	80100ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80100e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80100e6:	f002 be2d 	b.w	8012d44 <xPortSysTickHandler>
}
 80100ea:	bd08      	pop	{r3, pc}
 80100ec:	e000e010 	.word	0xe000e010

080100f0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100f0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80100f4:	b113      	cbz	r3, 80100fc <osKernelInitialize+0xc>
    stat = osErrorISR;
 80100f6:	f06f 0005 	mvn.w	r0, #5
 80100fa:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80100fc:	f3ef 8210 	mrs	r2, PRIMASK
 8010100:	4b07      	ldr	r3, [pc, #28]	; (8010120 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 8010102:	b912      	cbnz	r2, 801010a <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010104:	f3ef 8211 	mrs	r2, BASEPRI
 8010108:	b112      	cbz	r2, 8010110 <osKernelInitialize+0x20>
 801010a:	681a      	ldr	r2, [r3, #0]
 801010c:	2a02      	cmp	r2, #2
 801010e:	d0f2      	beq.n	80100f6 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010110:	6818      	ldr	r0, [r3, #0]
 8010112:	b910      	cbnz	r0, 801011a <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010114:	2201      	movs	r2, #1
 8010116:	601a      	str	r2, [r3, #0]
 8010118:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 801011a:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 801011e:	4770      	bx	lr
 8010120:	24001910 	.word	0x24001910

08010124 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8010124:	b508      	push	{r3, lr}
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8010126:	f002 f9e7 	bl	80124f8 <xTaskGetSchedulerState>
 801012a:	b138      	cbz	r0, 801013c <osKernelGetState+0x18>
 801012c:	2802      	cmp	r0, #2
 801012e:	d006      	beq.n	801013e <osKernelGetState+0x1a>
      state = osKernelLocked;
      break;

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8010130:	4b03      	ldr	r3, [pc, #12]	; (8010140 <osKernelGetState+0x1c>)
 8010132:	6818      	ldr	r0, [r3, #0]
 8010134:	1e43      	subs	r3, r0, #1
 8010136:	4258      	negs	r0, r3
 8010138:	4158      	adcs	r0, r3
 801013a:	e000      	b.n	801013e <osKernelGetState+0x1a>
      state = osKernelLocked;
 801013c:	2003      	movs	r0, #3
      }
      break;
  }

  return (state);
}
 801013e:	bd08      	pop	{r3, pc}
 8010140:	24001910 	.word	0x24001910

08010144 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8010144:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010146:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 801014a:	b113      	cbz	r3, 8010152 <osKernelStart+0xe>
    stat = osErrorISR;
 801014c:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8010150:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010152:	f3ef 8210 	mrs	r2, PRIMASK
 8010156:	4b0a      	ldr	r3, [pc, #40]	; (8010180 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 8010158:	b912      	cbnz	r2, 8010160 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801015a:	f3ef 8211 	mrs	r2, BASEPRI
 801015e:	b112      	cbz	r2, 8010166 <osKernelStart+0x22>
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	2a02      	cmp	r2, #2
 8010164:	d0f2      	beq.n	801014c <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 8010166:	681a      	ldr	r2, [r3, #0]
 8010168:	2a01      	cmp	r2, #1
 801016a:	d105      	bne.n	8010178 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 801016c:	2202      	movs	r2, #2
 801016e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8010170:	f001 fe34 	bl	8011ddc <vTaskStartScheduler>
      stat = osOK;
 8010174:	2000      	movs	r0, #0
 8010176:	e7eb      	b.n	8010150 <osKernelStart+0xc>
      stat = osError;
 8010178:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 801017c:	e7e8      	b.n	8010150 <osKernelStart+0xc>
 801017e:	bf00      	nop
 8010180:	24001910 	.word	0x24001910

08010184 <osKernelGetTickCount>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010184:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8010188:	b10b      	cbz	r3, 801018e <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 801018a:	f001 be95 	b.w	8011eb8 <xTaskGetTickCountFromISR>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801018e:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8010192:	b913      	cbnz	r3, 801019a <osKernelGetTickCount+0x16>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010194:	f3ef 8311 	mrs	r3, BASEPRI
 8010198:	b11b      	cbz	r3, 80101a2 <osKernelGetTickCount+0x1e>
 801019a:	4b03      	ldr	r3, [pc, #12]	; (80101a8 <osKernelGetTickCount+0x24>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	2b02      	cmp	r3, #2
 80101a0:	d0f3      	beq.n	801018a <osKernelGetTickCount+0x6>
  } else {
    ticks = xTaskGetTickCount();
 80101a2:	f001 be83 	b.w	8011eac <xTaskGetTickCount>
 80101a6:	bf00      	nop
 80101a8:	24001910 	.word	0x24001910

080101ac <osKernelGetTickFreq>:
  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}
 80101ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80101b0:	4770      	bx	lr
	...

080101b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80101b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101b6:	4614      	mov	r4, r2
 80101b8:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80101ba:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80101bc:	460b      	mov	r3, r1
  hTask = NULL;
 80101be:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101c0:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80101c4:	bb32      	cbnz	r2, 8010214 <osThreadNew+0x60>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101c6:	f3ef 8210 	mrs	r2, PRIMASK
 80101ca:	b912      	cbnz	r2, 80101d2 <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80101cc:	f3ef 8211 	mrs	r2, BASEPRI
 80101d0:	b11a      	cbz	r2, 80101da <osThreadNew+0x26>
 80101d2:	4a22      	ldr	r2, [pc, #136]	; (801025c <osThreadNew+0xa8>)
 80101d4:	6812      	ldr	r2, [r2, #0]
 80101d6:	2a02      	cmp	r2, #2
 80101d8:	d01c      	beq.n	8010214 <osThreadNew+0x60>
 80101da:	b1d8      	cbz	r0, 8010214 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80101dc:	2c00      	cmp	r4, #0
 80101de:	d036      	beq.n	801024e <osThreadNew+0x9a>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80101e0:	69a5      	ldr	r5, [r4, #24]
      if (attr->name != NULL) {
 80101e2:	6821      	ldr	r1, [r4, #0]
 80101e4:	2d00      	cmp	r5, #0
 80101e6:	bf08      	it	eq
 80101e8:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80101ea:	1e6a      	subs	r2, r5, #1
 80101ec:	462f      	mov	r7, r5
 80101ee:	2a37      	cmp	r2, #55	; 0x37
 80101f0:	d831      	bhi.n	8010256 <osThreadNew+0xa2>
 80101f2:	6862      	ldr	r2, [r4, #4]
 80101f4:	07d2      	lsls	r2, r2, #31
 80101f6:	d42e      	bmi.n	8010256 <osThreadNew+0xa2>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80101f8:	6966      	ldr	r6, [r4, #20]
 80101fa:	b176      	cbz	r6, 801021a <osThreadNew+0x66>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80101fc:	08b2      	lsrs	r2, r6, #2
 80101fe:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010202:	f1bc 0f00 	cmp.w	ip, #0
 8010206:	d00a      	beq.n	801021e <osThreadNew+0x6a>
 8010208:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 801020c:	d902      	bls.n	8010214 <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801020e:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010210:	b104      	cbz	r4, 8010214 <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010212:	b9ae      	cbnz	r6, 8010240 <osThreadNew+0x8c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010214:	9805      	ldr	r0, [sp, #20]
}
 8010216:	b007      	add	sp, #28
 8010218:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 801021a:	2280      	movs	r2, #128	; 0x80
 801021c:	e7ef      	b.n	80101fe <osThreadNew+0x4a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801021e:	f1be 0f00 	cmp.w	lr, #0
 8010222:	d1f7      	bne.n	8010214 <osThreadNew+0x60>
      if (mem == 0) {
 8010224:	6924      	ldr	r4, [r4, #16]
 8010226:	2c00      	cmp	r4, #0
 8010228:	d1f4      	bne.n	8010214 <osThreadNew+0x60>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801022a:	ac05      	add	r4, sp, #20
 801022c:	b292      	uxth	r2, r2
 801022e:	e9cd 7400 	strd	r7, r4, [sp]
 8010232:	f001 fda5 	bl	8011d80 <xTaskCreate>
 8010236:	2801      	cmp	r0, #1
          hTask = NULL;
 8010238:	bf1c      	itt	ne
 801023a:	2300      	movne	r3, #0
 801023c:	9305      	strne	r3, [sp, #20]
 801023e:	e7e9      	b.n	8010214 <osThreadNew+0x60>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010240:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 8010244:	9500      	str	r5, [sp, #0]
 8010246:	f001 fd63 	bl	8011d10 <xTaskCreateStatic>
 801024a:	9005      	str	r0, [sp, #20]
 801024c:	e7e2      	b.n	8010214 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;
 801024e:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 8010250:	2280      	movs	r2, #128	; 0x80
    name = NULL;
 8010252:	4621      	mov	r1, r4
 8010254:	e7e9      	b.n	801022a <osThreadNew+0x76>
        return (NULL);
 8010256:	2000      	movs	r0, #0
 8010258:	e7dd      	b.n	8010216 <osThreadNew+0x62>
 801025a:	bf00      	nop
 801025c:	24001910 	.word	0x24001910

08010260 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8010260:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010262:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8010266:	b113      	cbz	r3, 801026e <osDelay+0xe>
    stat = osErrorISR;
 8010268:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 801026c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801026e:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8010272:	b913      	cbnz	r3, 801027a <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010274:	f3ef 8311 	mrs	r3, BASEPRI
 8010278:	b11b      	cbz	r3, 8010282 <osDelay+0x22>
 801027a:	4b05      	ldr	r3, [pc, #20]	; (8010290 <osDelay+0x30>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	2b02      	cmp	r3, #2
 8010280:	d0f2      	beq.n	8010268 <osDelay+0x8>
    if (ticks != 0U) {
 8010282:	2800      	cmp	r0, #0
 8010284:	d0f2      	beq.n	801026c <osDelay+0xc>
      vTaskDelay(ticks);
 8010286:	f001 ffa7 	bl	80121d8 <vTaskDelay>
    stat = osOK;
 801028a:	2000      	movs	r0, #0
 801028c:	e7ee      	b.n	801026c <osDelay+0xc>
 801028e:	bf00      	nop
 8010290:	24001910 	.word	0x24001910

08010294 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8010294:	b513      	push	{r0, r1, r4, lr}
 8010296:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010298:	f3ef 8305 	mrs	r3, IPSR
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 801029c:	b11b      	cbz	r3, 80102a6 <osDelayUntil+0x12>
    stat = osErrorISR;
 801029e:	f06f 0005 	mvn.w	r0, #5
      stat = osErrorParameter;
    }
  }

  return (stat);
}
 80102a2:	b002      	add	sp, #8
 80102a4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102a6:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80102aa:	b913      	cbnz	r3, 80102b2 <osDelayUntil+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80102ac:	f3ef 8311 	mrs	r3, BASEPRI
 80102b0:	b11b      	cbz	r3, 80102ba <osDelayUntil+0x26>
 80102b2:	4b09      	ldr	r3, [pc, #36]	; (80102d8 <osDelayUntil+0x44>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	2b02      	cmp	r3, #2
 80102b8:	d0f1      	beq.n	801029e <osDelayUntil+0xa>
    tcnt = xTaskGetTickCount();
 80102ba:	f001 fdf7 	bl	8011eac <xTaskGetTickCount>
    delay = (TickType_t)ticks - tcnt;
 80102be:	1a21      	subs	r1, r4, r0
    tcnt = xTaskGetTickCount();
 80102c0:	9001      	str	r0, [sp, #4]
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80102c2:	2900      	cmp	r1, #0
 80102c4:	dd04      	ble.n	80102d0 <osDelayUntil+0x3c>
      vTaskDelayUntil (&tcnt, delay);
 80102c6:	a801      	add	r0, sp, #4
 80102c8:	f001 ff30 	bl	801212c <vTaskDelayUntil>
    stat = osOK;
 80102cc:	2000      	movs	r0, #0
 80102ce:	e7e8      	b.n	80102a2 <osDelayUntil+0xe>
      stat = osErrorParameter;
 80102d0:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80102d4:	e7e5      	b.n	80102a2 <osDelayUntil+0xe>
 80102d6:	bf00      	nop
 80102d8:	24001910 	.word	0x24001910

080102dc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80102dc:	b570      	push	{r4, r5, r6, lr}
 80102de:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102e0:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80102e4:	b113      	cbz	r3, 80102ec <osMutexNew+0x10>
  hMutex = NULL;
 80102e6:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80102e8:	4628      	mov	r0, r5
 80102ea:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102ec:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 80102f0:	b912      	cbnz	r2, 80102f8 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80102f2:	f3ef 8211 	mrs	r2, BASEPRI
 80102f6:	b11a      	cbz	r2, 8010300 <osMutexNew+0x24>
 80102f8:	4a18      	ldr	r2, [pc, #96]	; (801035c <osMutexNew+0x80>)
 80102fa:	6812      	ldr	r2, [r2, #0]
 80102fc:	2a02      	cmp	r2, #2
 80102fe:	d0f2      	beq.n	80102e6 <osMutexNew+0xa>
    if (attr != NULL) {
 8010300:	b104      	cbz	r4, 8010304 <osMutexNew+0x28>
      type = attr->attr_bits;
 8010302:	6863      	ldr	r3, [r4, #4]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010304:	f003 0601 	and.w	r6, r3, #1
    if ((type & osMutexRobust) != osMutexRobust) {
 8010308:	071b      	lsls	r3, r3, #28
 801030a:	d4ec      	bmi.n	80102e6 <osMutexNew+0xa>
      if (attr != NULL) {
 801030c:	b1b4      	cbz	r4, 801033c <osMutexNew+0x60>
 801030e:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010312:	b189      	cbz	r1, 8010338 <osMutexNew+0x5c>
 8010314:	2b4f      	cmp	r3, #79	; 0x4f
 8010316:	d9e6      	bls.n	80102e6 <osMutexNew+0xa>
        if (rmtx != 0U) {
 8010318:	b1de      	cbz	r6, 8010352 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801031a:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801031c:	f000 fdf4 	bl	8010f08 <xQueueCreateMutexStatic>
 8010320:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 8010322:	2800      	cmp	r0, #0
 8010324:	d0df      	beq.n	80102e6 <osMutexNew+0xa>
          name = attr->name;
 8010326:	6821      	ldr	r1, [r4, #0]
        vQueueAddToRegistry (hMutex, name);
 8010328:	4628      	mov	r0, r5
 801032a:	f001 fab9 	bl	80118a0 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 801032e:	2e00      	cmp	r6, #0
 8010330:	d0da      	beq.n	80102e8 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8010332:	f045 0501 	orr.w	r5, r5, #1
  return ((osMutexId_t)hMutex);
 8010336:	e7d7      	b.n	80102e8 <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010338:	2b00      	cmp	r3, #0
 801033a:	d1d4      	bne.n	80102e6 <osMutexNew+0xa>
          if (rmtx != 0U) {
 801033c:	b15e      	cbz	r6, 8010356 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 801033e:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 8010340:	f000 fe15 	bl	8010f6e <xQueueCreateMutex>
 8010344:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 8010346:	2800      	cmp	r0, #0
 8010348:	d0cd      	beq.n	80102e6 <osMutexNew+0xa>
        if (attr != NULL) {
 801034a:	2c00      	cmp	r4, #0
 801034c:	d1eb      	bne.n	8010326 <osMutexNew+0x4a>
          name = NULL;
 801034e:	4621      	mov	r1, r4
 8010350:	e7ea      	b.n	8010328 <osMutexNew+0x4c>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8010352:	2001      	movs	r0, #1
 8010354:	e7e2      	b.n	801031c <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 8010356:	2001      	movs	r0, #1
 8010358:	e7f2      	b.n	8010340 <osMutexNew+0x64>
 801035a:	bf00      	nop
 801035c:	24001910 	.word	0x24001910

08010360 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010360:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010362:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010366:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8010368:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801036c:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801036e:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8010372:	b112      	cbz	r2, 801037a <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8010374:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8010378:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801037a:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 801037e:	b912      	cbnz	r2, 8010386 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010380:	f3ef 8211 	mrs	r2, BASEPRI
 8010384:	b11a      	cbz	r2, 801038e <osMutexAcquire+0x2e>
 8010386:	4a0d      	ldr	r2, [pc, #52]	; (80103bc <osMutexAcquire+0x5c>)
 8010388:	6812      	ldr	r2, [r2, #0]
 801038a:	2a02      	cmp	r2, #2
 801038c:	d0f2      	beq.n	8010374 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 801038e:	b188      	cbz	r0, 80103b4 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8010390:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 8010392:	b163      	cbz	r3, 80103ae <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8010394:	f001 f9d8 	bl	8011748 <xQueueTakeMutexRecursive>
 8010398:	2801      	cmp	r0, #1
 801039a:	d101      	bne.n	80103a0 <osMutexAcquire+0x40>
  stat = osOK;
 801039c:	2000      	movs	r0, #0
 801039e:	e7eb      	b.n	8010378 <osMutexAcquire+0x18>
          stat = osErrorResource;
 80103a0:	2c00      	cmp	r4, #0
 80103a2:	bf14      	ite	ne
 80103a4:	f06f 0001 	mvnne.w	r0, #1
 80103a8:	f06f 0002 	mvneq.w	r0, #2
 80103ac:	e7e4      	b.n	8010378 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80103ae:	f001 f84f 	bl	8011450 <xQueueSemaphoreTake>
 80103b2:	e7f1      	b.n	8010398 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 80103b4:	f06f 0003 	mvn.w	r0, #3
 80103b8:	e7de      	b.n	8010378 <osMutexAcquire+0x18>
 80103ba:	bf00      	nop
 80103bc:	24001910 	.word	0x24001910

080103c0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80103c0:	b508      	push	{r3, lr}
 80103c2:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80103c4:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 80103c8:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103cc:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 80103d0:	b112      	cbz	r2, 80103d8 <osMutexRelease+0x18>
    stat = osErrorISR;
 80103d2:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 80103d6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103d8:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 80103dc:	b912      	cbnz	r2, 80103e4 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80103de:	f3ef 8211 	mrs	r2, BASEPRI
 80103e2:	b11a      	cbz	r2, 80103ec <osMutexRelease+0x2c>
 80103e4:	4a0a      	ldr	r2, [pc, #40]	; (8010410 <osMutexRelease+0x50>)
 80103e6:	6812      	ldr	r2, [r2, #0]
 80103e8:	2a02      	cmp	r2, #2
 80103ea:	d0f2      	beq.n	80103d2 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 80103ec:	b168      	cbz	r0, 801040a <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 80103ee:	b13b      	cbz	r3, 8010400 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80103f0:	f000 fd9f 	bl	8010f32 <xQueueGiveMutexRecursive>
 80103f4:	2801      	cmp	r0, #1
  stat = osOK;
 80103f6:	bf0c      	ite	eq
 80103f8:	2000      	moveq	r0, #0
        stat = osErrorResource;
 80103fa:	f06f 0002 	mvnne.w	r0, #2
 80103fe:	e7ea      	b.n	80103d6 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8010400:	461a      	mov	r2, r3
 8010402:	4619      	mov	r1, r3
 8010404:	f000 fc4a 	bl	8010c9c <xQueueGenericSend>
 8010408:	e7f4      	b.n	80103f4 <osMutexRelease+0x34>
    stat = osErrorParameter;
 801040a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 801040e:	e7e2      	b.n	80103d6 <osMutexRelease+0x16>
 8010410:	24001910 	.word	0x24001910

08010414 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010414:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010416:	460e      	mov	r6, r1
 8010418:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801041a:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801041e:	b11b      	cbz	r3, 8010428 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8010420:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8010422:	4620      	mov	r0, r4
 8010424:	b002      	add	sp, #8
 8010426:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010428:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801042c:	b913      	cbnz	r3, 8010434 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801042e:	f3ef 8311 	mrs	r3, BASEPRI
 8010432:	b11b      	cbz	r3, 801043c <osSemaphoreNew+0x28>
 8010434:	4b21      	ldr	r3, [pc, #132]	; (80104bc <osSemaphoreNew+0xa8>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2b02      	cmp	r3, #2
 801043a:	d0f1      	beq.n	8010420 <osSemaphoreNew+0xc>
 801043c:	2800      	cmp	r0, #0
 801043e:	d0ef      	beq.n	8010420 <osSemaphoreNew+0xc>
 8010440:	42b0      	cmp	r0, r6
 8010442:	d3ed      	bcc.n	8010420 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 8010444:	b1ed      	cbz	r5, 8010482 <osSemaphoreNew+0x6e>
 8010446:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801044a:	b1c3      	cbz	r3, 801047e <osSemaphoreNew+0x6a>
 801044c:	2a4f      	cmp	r2, #79	; 0x4f
 801044e:	d9e7      	bls.n	8010420 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8010450:	2801      	cmp	r0, #1
 8010452:	d126      	bne.n	80104a2 <osSemaphoreNew+0x8e>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010454:	2203      	movs	r2, #3
 8010456:	9200      	str	r2, [sp, #0]
 8010458:	2200      	movs	r2, #0
 801045a:	4611      	mov	r1, r2
 801045c:	f000 faf6 	bl	8010a4c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 8010460:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010462:	2800      	cmp	r0, #0
 8010464:	d0dc      	beq.n	8010420 <osSemaphoreNew+0xc>
 8010466:	b1ce      	cbz	r6, 801049c <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010468:	2300      	movs	r3, #0
 801046a:	461a      	mov	r2, r3
 801046c:	4619      	mov	r1, r3
 801046e:	f000 fc15 	bl	8010c9c <xQueueGenericSend>
 8010472:	2801      	cmp	r0, #1
 8010474:	d012      	beq.n	801049c <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 8010476:	4620      	mov	r0, r4
 8010478:	f001 fa46 	bl	8011908 <vQueueDelete>
 801047c:	e7d0      	b.n	8010420 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801047e:	2a00      	cmp	r2, #0
 8010480:	d1ce      	bne.n	8010420 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8010482:	2801      	cmp	r0, #1
 8010484:	d104      	bne.n	8010490 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 8010486:	2203      	movs	r2, #3
 8010488:	2100      	movs	r1, #0
 801048a:	f000 fb25 	bl	8010ad8 <xQueueGenericCreate>
 801048e:	e7e7      	b.n	8010460 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010490:	4631      	mov	r1, r6
 8010492:	f000 fbbb 	bl	8010c0c <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8010496:	4604      	mov	r4, r0
 8010498:	2800      	cmp	r0, #0
 801049a:	d0c1      	beq.n	8010420 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 801049c:	b945      	cbnz	r5, 80104b0 <osSemaphoreNew+0x9c>
          name = NULL;
 801049e:	4629      	mov	r1, r5
 80104a0:	e007      	b.n	80104b2 <osSemaphoreNew+0x9e>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80104a2:	461a      	mov	r2, r3
 80104a4:	4631      	mov	r1, r6
 80104a6:	f000 fb65 	bl	8010b74 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 80104aa:	4604      	mov	r4, r0
 80104ac:	2800      	cmp	r0, #0
 80104ae:	d0b7      	beq.n	8010420 <osSemaphoreNew+0xc>
          name = attr->name;
 80104b0:	6829      	ldr	r1, [r5, #0]
        vQueueAddToRegistry (hSemaphore, name);
 80104b2:	4620      	mov	r0, r4
 80104b4:	f001 f9f4 	bl	80118a0 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 80104b8:	e7b3      	b.n	8010422 <osSemaphoreNew+0xe>
 80104ba:	bf00      	nop
 80104bc:	24001910 	.word	0x24001910

080104c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80104c0:	b513      	push	{r0, r1, r4, lr}
 80104c2:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80104c4:	b918      	cbnz	r0, 80104ce <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 80104c6:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80104ca:	b002      	add	sp, #8
 80104cc:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104ce:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 80104d2:	b16b      	cbz	r3, 80104f0 <osSemaphoreAcquire+0x30>
    if (timeout != 0U) {
 80104d4:	2c00      	cmp	r4, #0
 80104d6:	d1f6      	bne.n	80104c6 <osSemaphoreAcquire+0x6>
      yield = pdFALSE;
 80104d8:	aa02      	add	r2, sp, #8
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80104da:	4621      	mov	r1, r4
      yield = pdFALSE;
 80104dc:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80104e0:	f001 f954 	bl	801178c <xQueueReceiveFromISR>
 80104e4:	2801      	cmp	r0, #1
 80104e6:	d113      	bne.n	8010510 <osSemaphoreAcquire+0x50>
        portYIELD_FROM_ISR (yield);
 80104e8:	9b01      	ldr	r3, [sp, #4]
 80104ea:	b9a3      	cbnz	r3, 8010516 <osSemaphoreAcquire+0x56>
  stat = osOK;
 80104ec:	2000      	movs	r0, #0
 80104ee:	e7ec      	b.n	80104ca <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104f0:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 80104f4:	b913      	cbnz	r3, 80104fc <osSemaphoreAcquire+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80104f6:	f3ef 8311 	mrs	r3, BASEPRI
 80104fa:	b11b      	cbz	r3, 8010504 <osSemaphoreAcquire+0x44>
 80104fc:	4b0c      	ldr	r3, [pc, #48]	; (8010530 <osSemaphoreAcquire+0x70>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2b02      	cmp	r3, #2
 8010502:	d0e7      	beq.n	80104d4 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010504:	4621      	mov	r1, r4
 8010506:	f000 ffa3 	bl	8011450 <xQueueSemaphoreTake>
 801050a:	2801      	cmp	r0, #1
 801050c:	d0ee      	beq.n	80104ec <osSemaphoreAcquire+0x2c>
      if (timeout != 0U) {
 801050e:	b95c      	cbnz	r4, 8010528 <osSemaphoreAcquire+0x68>
        stat = osErrorResource;
 8010510:	f06f 0002 	mvn.w	r0, #2
 8010514:	e7d9      	b.n	80104ca <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 8010516:	4b07      	ldr	r3, [pc, #28]	; (8010534 <osSemaphoreAcquire+0x74>)
 8010518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801051c:	601a      	str	r2, [r3, #0]
 801051e:	f3bf 8f4f 	dsb	sy
 8010522:	f3bf 8f6f 	isb	sy
 8010526:	e7e1      	b.n	80104ec <osSemaphoreAcquire+0x2c>
        stat = osErrorTimeout;
 8010528:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 801052c:	e7cd      	b.n	80104ca <osSemaphoreAcquire+0xa>
 801052e:	bf00      	nop
 8010530:	24001910 	.word	0x24001910
 8010534:	e000ed04 	.word	0xe000ed04

08010538 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010538:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 801053a:	b368      	cbz	r0, 8010598 <osSemaphoreRelease+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801053c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8010540:	b153      	cbz	r3, 8010558 <osSemaphoreRelease+0x20>
    yield = pdFALSE;
 8010542:	a902      	add	r1, sp, #8
 8010544:	2400      	movs	r4, #0
 8010546:	f841 4d04 	str.w	r4, [r1, #-4]!

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801054a:	f000 fe51 	bl	80111f0 <xQueueGiveFromISR>
 801054e:	2801      	cmp	r0, #1
 8010550:	d014      	beq.n	801057c <osSemaphoreRelease+0x44>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8010552:	f06f 0002 	mvn.w	r0, #2
 8010556:	e014      	b.n	8010582 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010558:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 801055c:	b913      	cbnz	r3, 8010564 <osSemaphoreRelease+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801055e:	f3ef 8311 	mrs	r3, BASEPRI
 8010562:	b11b      	cbz	r3, 801056c <osSemaphoreRelease+0x34>
 8010564:	4b0e      	ldr	r3, [pc, #56]	; (80105a0 <osSemaphoreRelease+0x68>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2b02      	cmp	r3, #2
 801056a:	d0ea      	beq.n	8010542 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801056c:	2300      	movs	r3, #0
 801056e:	461a      	mov	r2, r3
 8010570:	4619      	mov	r1, r3
 8010572:	f000 fb93 	bl	8010c9c <xQueueGenericSend>
 8010576:	2801      	cmp	r0, #1
 8010578:	d002      	beq.n	8010580 <osSemaphoreRelease+0x48>
 801057a:	e7ea      	b.n	8010552 <osSemaphoreRelease+0x1a>
      portYIELD_FROM_ISR (yield);
 801057c:	9b01      	ldr	r3, [sp, #4]
 801057e:	b913      	cbnz	r3, 8010586 <osSemaphoreRelease+0x4e>
  stat = osOK;
 8010580:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8010582:	b002      	add	sp, #8
 8010584:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8010586:	4b07      	ldr	r3, [pc, #28]	; (80105a4 <osSemaphoreRelease+0x6c>)
 8010588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801058c:	601a      	str	r2, [r3, #0]
 801058e:	f3bf 8f4f 	dsb	sy
 8010592:	f3bf 8f6f 	isb	sy
 8010596:	e7f3      	b.n	8010580 <osSemaphoreRelease+0x48>
    stat = osErrorParameter;
 8010598:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 801059c:	e7f1      	b.n	8010582 <osSemaphoreRelease+0x4a>
 801059e:	bf00      	nop
 80105a0:	24001910 	.word	0x24001910
 80105a4:	e000ed04 	.word	0xe000ed04

080105a8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80105a8:	b510      	push	{r4, lr}
 80105aa:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105ac:	f3ef 8305 	mrs	r3, IPSR
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80105b0:	b113      	cbz	r3, 80105b8 <osSemaphoreDelete+0x10>
    stat = osErrorISR;
 80105b2:	f06f 0005 	mvn.w	r0, #5
#else
  stat = osError;
#endif

  return (stat);
}
 80105b6:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105b8:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80105bc:	b913      	cbnz	r3, 80105c4 <osSemaphoreDelete+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80105be:	f3ef 8311 	mrs	r3, BASEPRI
 80105c2:	b11b      	cbz	r3, 80105cc <osSemaphoreDelete+0x24>
 80105c4:	4b07      	ldr	r3, [pc, #28]	; (80105e4 <osSemaphoreDelete+0x3c>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	2b02      	cmp	r3, #2
 80105ca:	d0f2      	beq.n	80105b2 <osSemaphoreDelete+0xa>
  else if (hSemaphore == NULL) {
 80105cc:	b13c      	cbz	r4, 80105de <osSemaphoreDelete+0x36>
    vQueueUnregisterQueue (hSemaphore);
 80105ce:	4620      	mov	r0, r4
 80105d0:	f001 f986 	bl	80118e0 <vQueueUnregisterQueue>
    vSemaphoreDelete (hSemaphore);
 80105d4:	4620      	mov	r0, r4
 80105d6:	f001 f997 	bl	8011908 <vQueueDelete>
    stat = osOK;
 80105da:	2000      	movs	r0, #0
 80105dc:	e7eb      	b.n	80105b6 <osSemaphoreDelete+0xe>
    stat = osErrorParameter;
 80105de:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80105e2:	e7e8      	b.n	80105b6 <osSemaphoreDelete+0xe>
 80105e4:	24001910 	.word	0x24001910

080105e8 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80105e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80105ea:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105ec:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80105f0:	b11b      	cbz	r3, 80105fa <osMessageQueueNew+0x12>
  hQueue = NULL;
 80105f2:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80105f4:	4628      	mov	r0, r5
 80105f6:	b002      	add	sp, #8
 80105f8:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105fa:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80105fe:	b913      	cbnz	r3, 8010606 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010600:	f3ef 8311 	mrs	r3, BASEPRI
 8010604:	b11b      	cbz	r3, 801060e <osMessageQueueNew+0x26>
 8010606:	4b1a      	ldr	r3, [pc, #104]	; (8010670 <osMessageQueueNew+0x88>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	2b02      	cmp	r3, #2
 801060c:	d0f1      	beq.n	80105f2 <osMessageQueueNew+0xa>
 801060e:	2800      	cmp	r0, #0
 8010610:	d0ef      	beq.n	80105f2 <osMessageQueueNew+0xa>
 8010612:	2900      	cmp	r1, #0
 8010614:	d0ed      	beq.n	80105f2 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8010616:	b304      	cbz	r4, 801065a <osMessageQueueNew+0x72>
 8010618:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801061c:	b1ab      	cbz	r3, 801064a <osMessageQueueNew+0x62>
 801061e:	2a4f      	cmp	r2, #79	; 0x4f
 8010620:	d9e7      	bls.n	80105f2 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010622:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010624:	2a00      	cmp	r2, #0
 8010626:	d0e4      	beq.n	80105f2 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010628:	fb01 f500 	mul.w	r5, r1, r0
 801062c:	6966      	ldr	r6, [r4, #20]
 801062e:	42ae      	cmp	r6, r5
 8010630:	d3df      	bcc.n	80105f2 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010632:	2500      	movs	r5, #0
 8010634:	9500      	str	r5, [sp, #0]
 8010636:	f000 fa09 	bl	8010a4c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 801063a:	4605      	mov	r5, r0
 801063c:	2800      	cmp	r0, #0
 801063e:	d0d8      	beq.n	80105f2 <osMessageQueueNew+0xa>
        name = attr->name;
 8010640:	6821      	ldr	r1, [r4, #0]
      vQueueAddToRegistry (hQueue, name);
 8010642:	4628      	mov	r0, r5
 8010644:	f001 f92c 	bl	80118a0 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8010648:	e7d4      	b.n	80105f4 <osMessageQueueNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801064a:	2a00      	cmp	r2, #0
 801064c:	d1d1      	bne.n	80105f2 <osMessageQueueNew+0xa>
 801064e:	6923      	ldr	r3, [r4, #16]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d1ce      	bne.n	80105f2 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010654:	6963      	ldr	r3, [r4, #20]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d1cb      	bne.n	80105f2 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 801065a:	2200      	movs	r2, #0
 801065c:	f000 fa3c 	bl	8010ad8 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8010660:	4605      	mov	r5, r0
 8010662:	2800      	cmp	r0, #0
 8010664:	d0c5      	beq.n	80105f2 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 8010666:	2c00      	cmp	r4, #0
 8010668:	d1ea      	bne.n	8010640 <osMessageQueueNew+0x58>
        name = NULL;
 801066a:	4621      	mov	r1, r4
 801066c:	e7e9      	b.n	8010642 <osMessageQueueNew+0x5a>
 801066e:	bf00      	nop
 8010670:	24001910 	.word	0x24001910

08010674 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010674:	b513      	push	{r0, r1, r4, lr}
 8010676:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010678:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 801067c:	b123      	cbz	r3, 8010688 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801067e:	b9d8      	cbnz	r0, 80106b8 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 8010680:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8010684:	b002      	add	sp, #8
 8010686:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010688:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 801068c:	b913      	cbnz	r3, 8010694 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801068e:	f3ef 8311 	mrs	r3, BASEPRI
 8010692:	b11b      	cbz	r3, 801069c <osMessageQueuePut+0x28>
 8010694:	4b16      	ldr	r3, [pc, #88]	; (80106f0 <osMessageQueuePut+0x7c>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2b02      	cmp	r3, #2
 801069a:	d0f0      	beq.n	801067e <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801069c:	2800      	cmp	r0, #0
 801069e:	d0ef      	beq.n	8010680 <osMessageQueuePut+0xc>
 80106a0:	2900      	cmp	r1, #0
 80106a2:	d0ed      	beq.n	8010680 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80106a4:	2300      	movs	r3, #0
 80106a6:	4622      	mov	r2, r4
 80106a8:	f000 faf8 	bl	8010c9c <xQueueGenericSend>
 80106ac:	2801      	cmp	r0, #1
 80106ae:	d011      	beq.n	80106d4 <osMessageQueuePut+0x60>
        if (timeout != 0U) {
 80106b0:	b9dc      	cbnz	r4, 80106ea <osMessageQueuePut+0x76>
          stat = osErrorResource;
 80106b2:	f06f 0002 	mvn.w	r0, #2
 80106b6:	e7e5      	b.n	8010684 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80106b8:	2900      	cmp	r1, #0
 80106ba:	d0e1      	beq.n	8010680 <osMessageQueuePut+0xc>
 80106bc:	2c00      	cmp	r4, #0
 80106be:	d1df      	bne.n	8010680 <osMessageQueuePut+0xc>
      yield = pdFALSE;
 80106c0:	aa02      	add	r2, sp, #8
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80106c2:	4623      	mov	r3, r4
      yield = pdFALSE;
 80106c4:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80106c8:	f000 fc64 	bl	8010f94 <xQueueGenericSendFromISR>
 80106cc:	2801      	cmp	r0, #1
 80106ce:	d1f0      	bne.n	80106b2 <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 80106d0:	9b01      	ldr	r3, [sp, #4]
 80106d2:	b90b      	cbnz	r3, 80106d8 <osMessageQueuePut+0x64>
  stat = osOK;
 80106d4:	2000      	movs	r0, #0
 80106d6:	e7d5      	b.n	8010684 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 80106d8:	4b06      	ldr	r3, [pc, #24]	; (80106f4 <osMessageQueuePut+0x80>)
 80106da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106de:	601a      	str	r2, [r3, #0]
 80106e0:	f3bf 8f4f 	dsb	sy
 80106e4:	f3bf 8f6f 	isb	sy
 80106e8:	e7f4      	b.n	80106d4 <osMessageQueuePut+0x60>
          stat = osErrorTimeout;
 80106ea:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80106ee:	e7c9      	b.n	8010684 <osMessageQueuePut+0x10>
 80106f0:	24001910 	.word	0x24001910
 80106f4:	e000ed04 	.word	0xe000ed04

080106f8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80106f8:	b513      	push	{r0, r1, r4, lr}
 80106fa:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80106fc:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8010700:	b123      	cbz	r3, 801070c <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010702:	b9d0      	cbnz	r0, 801073a <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 8010704:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8010708:	b002      	add	sp, #8
 801070a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801070c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8010710:	b913      	cbnz	r3, 8010718 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010712:	f3ef 8311 	mrs	r3, BASEPRI
 8010716:	b11b      	cbz	r3, 8010720 <osMessageQueueGet+0x28>
 8010718:	4b15      	ldr	r3, [pc, #84]	; (8010770 <osMessageQueueGet+0x78>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	2b02      	cmp	r3, #2
 801071e:	d0f0      	beq.n	8010702 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010720:	2800      	cmp	r0, #0
 8010722:	d0ef      	beq.n	8010704 <osMessageQueueGet+0xc>
 8010724:	2900      	cmp	r1, #0
 8010726:	d0ed      	beq.n	8010704 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010728:	4622      	mov	r2, r4
 801072a:	f000 fd65 	bl	80111f8 <xQueueReceive>
 801072e:	2801      	cmp	r0, #1
 8010730:	d010      	beq.n	8010754 <osMessageQueueGet+0x5c>
        if (timeout != 0U) {
 8010732:	b9d4      	cbnz	r4, 801076a <osMessageQueueGet+0x72>
          stat = osErrorResource;
 8010734:	f06f 0002 	mvn.w	r0, #2
 8010738:	e7e6      	b.n	8010708 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801073a:	2900      	cmp	r1, #0
 801073c:	d0e2      	beq.n	8010704 <osMessageQueueGet+0xc>
 801073e:	2c00      	cmp	r4, #0
 8010740:	d1e0      	bne.n	8010704 <osMessageQueueGet+0xc>
      yield = pdFALSE;
 8010742:	aa02      	add	r2, sp, #8
 8010744:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010748:	f001 f820 	bl	801178c <xQueueReceiveFromISR>
 801074c:	2801      	cmp	r0, #1
 801074e:	d1f1      	bne.n	8010734 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 8010750:	9b01      	ldr	r3, [sp, #4]
 8010752:	b90b      	cbnz	r3, 8010758 <osMessageQueueGet+0x60>
  stat = osOK;
 8010754:	2000      	movs	r0, #0
 8010756:	e7d7      	b.n	8010708 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8010758:	4b06      	ldr	r3, [pc, #24]	; (8010774 <osMessageQueueGet+0x7c>)
 801075a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801075e:	601a      	str	r2, [r3, #0]
 8010760:	f3bf 8f4f 	dsb	sy
 8010764:	f3bf 8f6f 	isb	sy
 8010768:	e7f4      	b.n	8010754 <osMessageQueueGet+0x5c>
          stat = osErrorTimeout;
 801076a:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 801076e:	e7cb      	b.n	8010708 <osMessageQueueGet+0x10>
 8010770:	24001910 	.word	0x24001910
 8010774:	e000ed04 	.word	0xe000ed04

08010778 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010778:	4b03      	ldr	r3, [pc, #12]	; (8010788 <vApplicationGetIdleTaskMemory+0x10>)
 801077a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801077c:	4b03      	ldr	r3, [pc, #12]	; (801078c <vApplicationGetIdleTaskMemory+0x14>)
 801077e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010780:	2380      	movs	r3, #128	; 0x80
 8010782:	6013      	str	r3, [r2, #0]
}
 8010784:	4770      	bx	lr
 8010786:	bf00      	nop
 8010788:	240018b0 	.word	0x240018b0
 801078c:	240016b0 	.word	0x240016b0

08010790 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010790:	4b03      	ldr	r3, [pc, #12]	; (80107a0 <vApplicationGetTimerTaskMemory+0x10>)
 8010792:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010794:	4b03      	ldr	r3, [pc, #12]	; (80107a4 <vApplicationGetTimerTaskMemory+0x14>)
 8010796:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010798:	f44f 7380 	mov.w	r3, #256	; 0x100
 801079c:	6013      	str	r3, [r2, #0]
}
 801079e:	4770      	bx	lr
 80107a0:	24001d14 	.word	0x24001d14
 80107a4:	24001914 	.word	0x24001914

080107a8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80107a8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80107ac:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80107b0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80107b2:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80107b4:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80107b8:	2300      	movs	r3, #0
 80107ba:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80107bc:	4770      	bx	lr

080107be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80107be:	2300      	movs	r3, #0
 80107c0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80107c2:	4770      	bx	lr

080107c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80107c4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80107c6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80107c8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80107ca:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80107cc:	689a      	ldr	r2, [r3, #8]
 80107ce:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80107d0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80107d2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80107d4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80107d6:	3301      	adds	r3, #1
 80107d8:	6003      	str	r3, [r0, #0]
}
 80107da:	4770      	bx	lr

080107dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80107dc:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80107de:	1c53      	adds	r3, r2, #1
{
 80107e0:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80107e2:	d10a      	bne.n	80107fa <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80107e4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80107e6:	685a      	ldr	r2, [r3, #4]
 80107e8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80107ea:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80107ec:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80107ee:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80107f0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80107f2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80107f4:	3301      	adds	r3, #1
 80107f6:	6003      	str	r3, [r0, #0]
}
 80107f8:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80107fa:	f100 0308 	add.w	r3, r0, #8
 80107fe:	685c      	ldr	r4, [r3, #4]
 8010800:	6825      	ldr	r5, [r4, #0]
 8010802:	4295      	cmp	r5, r2
 8010804:	d8ef      	bhi.n	80107e6 <vListInsert+0xa>
 8010806:	4623      	mov	r3, r4
 8010808:	e7f9      	b.n	80107fe <vListInsert+0x22>

0801080a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801080a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 801080e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010810:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010812:	6882      	ldr	r2, [r0, #8]
 8010814:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010816:	6859      	ldr	r1, [r3, #4]
 8010818:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801081a:	bf08      	it	eq
 801081c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801081e:	2200      	movs	r2, #0
 8010820:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8010822:	681a      	ldr	r2, [r3, #0]
 8010824:	3a01      	subs	r2, #1
 8010826:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010828:	6818      	ldr	r0, [r3, #0]
}
 801082a:	4770      	bx	lr

0801082c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801082c:	b510      	push	{r4, lr}
 801082e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010830:	f002 fa20 	bl	8012c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010834:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8010836:	f002 fa3f 	bl	8012cb8 <vPortExitCritical>

	return xReturn;
}
 801083a:	fab4 f084 	clz	r0, r4
 801083e:	0940      	lsrs	r0, r0, #5
 8010840:	bd10      	pop	{r4, pc}

08010842 <prvCopyDataToQueue>:
{
 8010842:	b570      	push	{r4, r5, r6, lr}
 8010844:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010846:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8010848:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801084a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801084c:	b942      	cbnz	r2, 8010860 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801084e:	6805      	ldr	r5, [r0, #0]
 8010850:	b99d      	cbnz	r5, 801087a <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010852:	6880      	ldr	r0, [r0, #8]
 8010854:	f001 fec8 	bl	80125e8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010858:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801085a:	3601      	adds	r6, #1
 801085c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 801085e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8010860:	b96d      	cbnz	r5, 801087e <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010862:	6840      	ldr	r0, [r0, #4]
 8010864:	f002 feec 	bl	8013640 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010868:	6863      	ldr	r3, [r4, #4]
 801086a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801086c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801086e:	68a2      	ldr	r2, [r4, #8]
 8010870:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010872:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010874:	d301      	bcc.n	801087a <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010876:	6823      	ldr	r3, [r4, #0]
 8010878:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 801087a:	2000      	movs	r0, #0
 801087c:	e7ed      	b.n	801085a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801087e:	68c0      	ldr	r0, [r0, #12]
 8010880:	f002 fede 	bl	8013640 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010884:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010886:	68e2      	ldr	r2, [r4, #12]
 8010888:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801088a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801088c:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801088e:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010890:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010892:	bf3e      	ittt	cc
 8010894:	68a2      	ldrcc	r2, [r4, #8]
 8010896:	189b      	addcc	r3, r3, r2
 8010898:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 801089a:	2d02      	cmp	r5, #2
 801089c:	d1ed      	bne.n	801087a <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801089e:	b10e      	cbz	r6, 80108a4 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80108a0:	3e01      	subs	r6, #1
 80108a2:	e7ea      	b.n	801087a <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80108a4:	4630      	mov	r0, r6
 80108a6:	e7d8      	b.n	801085a <prvCopyDataToQueue+0x18>

080108a8 <prvCopyDataFromQueue>:
{
 80108a8:	4603      	mov	r3, r0
 80108aa:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80108ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80108ae:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80108b0:	b162      	cbz	r2, 80108cc <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80108b2:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80108b4:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80108b6:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80108b8:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80108ba:	60d9      	str	r1, [r3, #12]
}
 80108bc:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80108c0:	bf24      	itt	cs
 80108c2:	6819      	ldrcs	r1, [r3, #0]
 80108c4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80108c6:	68d9      	ldr	r1, [r3, #12]
 80108c8:	f002 beba 	b.w	8013640 <memcpy>
}
 80108cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108d0:	4770      	bx	lr

080108d2 <prvUnlockQueue>:
{
 80108d2:	b570      	push	{r4, r5, r6, lr}
 80108d4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80108d6:	f002 f9cd 	bl	8012c74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80108da:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80108de:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80108e2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80108e4:	2d00      	cmp	r5, #0
 80108e6:	dc14      	bgt.n	8010912 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80108e8:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108ea:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80108ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80108f2:	f002 f9e1 	bl	8012cb8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80108f6:	f002 f9bd 	bl	8012c74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80108fa:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80108fe:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010900:	2d00      	cmp	r5, #0
 8010902:	dc12      	bgt.n	801092a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8010904:	23ff      	movs	r3, #255	; 0xff
 8010906:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 801090a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 801090e:	f002 b9d3 	b.w	8012cb8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010914:	2b00      	cmp	r3, #0
 8010916:	d0e7      	beq.n	80108e8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010918:	4630      	mov	r0, r6
 801091a:	f001 fd35 	bl	8012388 <xTaskRemoveFromEventList>
 801091e:	b108      	cbz	r0, 8010924 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8010920:	f001 fdc8 	bl	80124b4 <vTaskMissedYield>
 8010924:	3d01      	subs	r5, #1
 8010926:	b26d      	sxtb	r5, r5
 8010928:	e7dc      	b.n	80108e4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801092a:	6923      	ldr	r3, [r4, #16]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d0e9      	beq.n	8010904 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010930:	4630      	mov	r0, r6
 8010932:	f001 fd29 	bl	8012388 <xTaskRemoveFromEventList>
 8010936:	b108      	cbz	r0, 801093c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8010938:	f001 fdbc 	bl	80124b4 <vTaskMissedYield>
 801093c:	3d01      	subs	r5, #1
 801093e:	b26d      	sxtb	r5, r5
 8010940:	e7de      	b.n	8010900 <prvUnlockQueue+0x2e>
	...

08010944 <xQueueGenericReset>:
{
 8010944:	b538      	push	{r3, r4, r5, lr}
 8010946:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8010948:	4604      	mov	r4, r0
 801094a:	b940      	cbnz	r0, 801095e <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801094c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010950:	f383 8811 	msr	BASEPRI, r3
 8010954:	f3bf 8f6f 	isb	sy
 8010958:	f3bf 8f4f 	dsb	sy
 801095c:	e7fe      	b.n	801095c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 801095e:	f002 f989 	bl	8012c74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010962:	6822      	ldr	r2, [r4, #0]
 8010964:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010968:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801096a:	4343      	muls	r3, r0
 801096c:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801096e:	1a1b      	subs	r3, r3, r0
 8010970:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010972:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010974:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010976:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010978:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801097a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 801097c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010980:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8010984:	b995      	cbnz	r5, 80109ac <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010986:	6923      	ldr	r3, [r4, #16]
 8010988:	b163      	cbz	r3, 80109a4 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801098a:	f104 0010 	add.w	r0, r4, #16
 801098e:	f001 fcfb 	bl	8012388 <xTaskRemoveFromEventList>
 8010992:	b138      	cbz	r0, 80109a4 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8010994:	4b0a      	ldr	r3, [pc, #40]	; (80109c0 <xQueueGenericReset+0x7c>)
 8010996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801099a:	601a      	str	r2, [r3, #0]
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80109a4:	f002 f988 	bl	8012cb8 <vPortExitCritical>
}
 80109a8:	2001      	movs	r0, #1
 80109aa:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80109ac:	f104 0010 	add.w	r0, r4, #16
 80109b0:	f7ff fefa 	bl	80107a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80109b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80109b8:	f7ff fef6 	bl	80107a8 <vListInitialise>
 80109bc:	e7f2      	b.n	80109a4 <xQueueGenericReset+0x60>
 80109be:	bf00      	nop
 80109c0:	e000ed04 	.word	0xe000ed04

080109c4 <prvInitialiseNewQueue>:
{
 80109c4:	b570      	push	{r4, r5, r6, lr}
 80109c6:	9c04      	ldr	r4, [sp, #16]
 80109c8:	4605      	mov	r5, r0
 80109ca:	461e      	mov	r6, r3
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80109cc:	2900      	cmp	r1, #0
 80109ce:	bf08      	it	eq
 80109d0:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80109d2:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80109d6:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80109d8:	2101      	movs	r1, #1
 80109da:	4620      	mov	r0, r4
 80109dc:	f7ff ffb2 	bl	8010944 <xQueueGenericReset>
	traceQUEUE_CREATE( pxNewQueue );
 80109e0:	4b18      	ldr	r3, [pc, #96]	; (8010a44 <prvInitialiseNewQueue+0x80>)
		pxNewQueue->ucQueueType = ucQueueType;
 80109e2:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
	traceQUEUE_CREATE( pxNewQueue );
 80109e6:	4620      	mov	r0, r4
 80109e8:	8819      	ldrh	r1, [r3, #0]
 80109ea:	4e17      	ldr	r6, [pc, #92]	; (8010a48 <prvInitialiseNewQueue+0x84>)
 80109ec:	f7f4 fbd7 	bl	800519e <prvTraceSetQueueNumberHigh16>
 80109f0:	f7f4 fcf2 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 80109f4:	f7f4 fbbc 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 80109f8:	8833      	ldrh	r3, [r6, #0]
 80109fa:	4218      	tst	r0, r3
 80109fc:	d021      	beq.n	8010a42 <prvInitialiseNewQueue+0x7e>
 80109fe:	4620      	mov	r0, r4
 8010a00:	f7f4 fbc8 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 8010a04:	8833      	ldrh	r3, [r6, #0]
 8010a06:	4218      	tst	r0, r3
 8010a08:	d01b      	beq.n	8010a42 <prvInitialiseNewQueue+0x7e>
 8010a0a:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8010a0e:	2b04      	cmp	r3, #4
 8010a10:	d817      	bhi.n	8010a42 <prvInitialiseNewQueue+0x7e>
 8010a12:	e8df f003 	tbb	[pc, r3]
 8010a16:	1003      	.short	0x1003
 8010a18:	0a16      	.short	0x0a16
 8010a1a:	13          	.byte	0x13
 8010a1b:	00          	.byte	0x00
 8010a1c:	462a      	mov	r2, r5
 8010a1e:	4621      	mov	r1, r4
 8010a20:	2011      	movs	r0, #17
}
 8010a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	traceQUEUE_CREATE( pxNewQueue );
 8010a26:	f7f5 b905 	b.w	8005c34 <prvTraceStoreEvent2>
 8010a2a:	4621      	mov	r1, r4
 8010a2c:	2012      	movs	r0, #18
}
 8010a2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	traceQUEUE_CREATE( pxNewQueue );
 8010a32:	f7f5 b8d3 	b.w	8005bdc <prvTraceStoreEvent1>
 8010a36:	4621      	mov	r1, r4
 8010a38:	2013      	movs	r0, #19
 8010a3a:	e7f8      	b.n	8010a2e <prvInitialiseNewQueue+0x6a>
 8010a3c:	4621      	mov	r1, r4
 8010a3e:	2017      	movs	r0, #23
 8010a40:	e7f5      	b.n	8010a2e <prvInitialiseNewQueue+0x6a>
}
 8010a42:	bd70      	pop	{r4, r5, r6, pc}
 8010a44:	24000008 	.word	0x24000008
 8010a48:	2400000a 	.word	0x2400000a

08010a4c <xQueueGenericCreateStatic>:
	{
 8010a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a4e:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010a50:	b940      	cbnz	r0, 8010a64 <xQueueGenericCreateStatic+0x18>
 8010a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a56:	f383 8811 	msr	BASEPRI, r3
 8010a5a:	f3bf 8f6f 	isb	sy
 8010a5e:	f3bf 8f4f 	dsb	sy
 8010a62:	e7fe      	b.n	8010a62 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8010a64:	b943      	cbnz	r3, 8010a78 <xQueueGenericCreateStatic+0x2c>
 8010a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a6a:	f383 8811 	msr	BASEPRI, r3
 8010a6e:	f3bf 8f6f 	isb	sy
 8010a72:	f3bf 8f4f 	dsb	sy
 8010a76:	e7fe      	b.n	8010a76 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010a78:	b14a      	cbz	r2, 8010a8e <xQueueGenericCreateStatic+0x42>
 8010a7a:	b991      	cbnz	r1, 8010aa2 <xQueueGenericCreateStatic+0x56>
 8010a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a80:	f383 8811 	msr	BASEPRI, r3
 8010a84:	f3bf 8f6f 	isb	sy
 8010a88:	f3bf 8f4f 	dsb	sy
 8010a8c:	e7fe      	b.n	8010a8c <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010a8e:	b141      	cbz	r1, 8010aa2 <xQueueGenericCreateStatic+0x56>
 8010a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a94:	f383 8811 	msr	BASEPRI, r3
 8010a98:	f3bf 8f6f 	isb	sy
 8010a9c:	f3bf 8f4f 	dsb	sy
 8010aa0:	e7fe      	b.n	8010aa0 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010aa2:	2350      	movs	r3, #80	; 0x50
 8010aa4:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010aa6:	9b03      	ldr	r3, [sp, #12]
 8010aa8:	2b50      	cmp	r3, #80	; 0x50
 8010aaa:	d008      	beq.n	8010abe <xQueueGenericCreateStatic+0x72>
 8010aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab0:	f383 8811 	msr	BASEPRI, r3
 8010ab4:	f3bf 8f6f 	isb	sy
 8010ab8:	f3bf 8f4f 	dsb	sy
 8010abc:	e7fe      	b.n	8010abc <xQueueGenericCreateStatic+0x70>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010abe:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010ac0:	2301      	movs	r3, #1
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010ac2:	9400      	str	r4, [sp, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010ac4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010ac8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8010acc:	f7ff ff7a 	bl	80109c4 <prvInitialiseNewQueue>
	}
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	b004      	add	sp, #16
 8010ad4:	bd10      	pop	{r4, pc}
	...

08010ad8 <xQueueGenericCreate>:
	{
 8010ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ada:	460f      	mov	r7, r1
 8010adc:	4616      	mov	r6, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010ade:	4605      	mov	r5, r0
 8010ae0:	b940      	cbnz	r0, 8010af4 <xQueueGenericCreate+0x1c>
 8010ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae6:	f383 8811 	msr	BASEPRI, r3
 8010aea:	f3bf 8f6f 	isb	sy
 8010aee:	f3bf 8f4f 	dsb	sy
 8010af2:	e7fe      	b.n	8010af2 <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010af4:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010af6:	3050      	adds	r0, #80	; 0x50
 8010af8:	f002 fa2a 	bl	8012f50 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8010afc:	4604      	mov	r4, r0
 8010afe:	b168      	cbz	r0, 8010b1c <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010b00:	2300      	movs	r3, #0
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010b02:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8010b06:	4639      	mov	r1, r7
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010b08:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010b0c:	4633      	mov	r3, r6
 8010b0e:	9000      	str	r0, [sp, #0]
 8010b10:	4628      	mov	r0, r5
 8010b12:	f7ff ff57 	bl	80109c4 <prvInitialiseNewQueue>
	}
 8010b16:	4620      	mov	r0, r4
 8010b18:	b003      	add	sp, #12
 8010b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8010b1c:	f7f4 fc5c 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8010b20:	f7f4 fb26 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8010b24:	4b12      	ldr	r3, [pc, #72]	; (8010b70 <xQueueGenericCreate+0x98>)
 8010b26:	881b      	ldrh	r3, [r3, #0]
 8010b28:	4218      	tst	r0, r3
 8010b2a:	d0f4      	beq.n	8010b16 <xQueueGenericCreate+0x3e>
 8010b2c:	2e04      	cmp	r6, #4
 8010b2e:	d8f2      	bhi.n	8010b16 <xQueueGenericCreate+0x3e>
 8010b30:	a301      	add	r3, pc, #4	; (adr r3, 8010b38 <xQueueGenericCreate+0x60>)
 8010b32:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 8010b36:	bf00      	nop
 8010b38:	08010b4d 	.word	0x08010b4d
 8010b3c:	08010b63 	.word	0x08010b63
 8010b40:	08010b17 	.word	0x08010b17
 8010b44:	08010b59 	.word	0x08010b59
 8010b48:	08010b69 	.word	0x08010b69
 8010b4c:	462a      	mov	r2, r5
 8010b4e:	2100      	movs	r1, #0
 8010b50:	2041      	movs	r0, #65	; 0x41
 8010b52:	f7f5 f86f 	bl	8005c34 <prvTraceStoreEvent2>
 8010b56:	e7de      	b.n	8010b16 <xQueueGenericCreate+0x3e>
 8010b58:	2100      	movs	r1, #0
 8010b5a:	2042      	movs	r0, #66	; 0x42
 8010b5c:	f7f5 f83e 	bl	8005bdc <prvTraceStoreEvent1>
		return pxNewQueue;
 8010b60:	e7d9      	b.n	8010b16 <xQueueGenericCreate+0x3e>
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8010b62:	2100      	movs	r1, #0
 8010b64:	2043      	movs	r0, #67	; 0x43
 8010b66:	e7f9      	b.n	8010b5c <xQueueGenericCreate+0x84>
 8010b68:	2100      	movs	r1, #0
 8010b6a:	2047      	movs	r0, #71	; 0x47
 8010b6c:	e7f6      	b.n	8010b5c <xQueueGenericCreate+0x84>
 8010b6e:	bf00      	nop
 8010b70:	2400000a 	.word	0x2400000a

08010b74 <xQueueCreateCountingSemaphoreStatic>:
	{
 8010b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b76:	4613      	mov	r3, r2
 8010b78:	460f      	mov	r7, r1
		configASSERT( uxMaxCount != 0 );
 8010b7a:	4605      	mov	r5, r0
 8010b7c:	b940      	cbnz	r0, 8010b90 <xQueueCreateCountingSemaphoreStatic+0x1c>
 8010b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b82:	f383 8811 	msr	BASEPRI, r3
 8010b86:	f3bf 8f6f 	isb	sy
 8010b8a:	f3bf 8f4f 	dsb	sy
 8010b8e:	e7fe      	b.n	8010b8e <xQueueCreateCountingSemaphoreStatic+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010b90:	4288      	cmp	r0, r1
 8010b92:	d208      	bcs.n	8010ba6 <xQueueCreateCountingSemaphoreStatic+0x32>
 8010b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b98:	f383 8811 	msr	BASEPRI, r3
 8010b9c:	f3bf 8f6f 	isb	sy
 8010ba0:	f3bf 8f4f 	dsb	sy
 8010ba4:	e7fe      	b.n	8010ba4 <xQueueCreateCountingSemaphoreStatic+0x30>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010ba6:	2202      	movs	r2, #2
 8010ba8:	4e16      	ldr	r6, [pc, #88]	; (8010c04 <xQueueCreateCountingSemaphoreStatic+0x90>)
 8010baa:	9200      	str	r2, [sp, #0]
 8010bac:	2200      	movs	r2, #0
 8010bae:	4611      	mov	r1, r2
 8010bb0:	f7ff ff4c 	bl	8010a4c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8010bb4:	4604      	mov	r4, r0
 8010bb6:	b1c8      	cbz	r0, 8010bec <xQueueCreateCountingSemaphoreStatic+0x78>
			traceCREATE_COUNTING_SEMAPHORE();
 8010bb8:	4b13      	ldr	r3, [pc, #76]	; (8010c08 <xQueueCreateCountingSemaphoreStatic+0x94>)
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010bba:	6387      	str	r7, [r0, #56]	; 0x38
			traceCREATE_COUNTING_SEMAPHORE();
 8010bbc:	8819      	ldrh	r1, [r3, #0]
 8010bbe:	f7f4 faee 	bl	800519e <prvTraceSetQueueNumberHigh16>
 8010bc2:	f7f4 fc09 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8010bc6:	f7f4 fad3 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8010bca:	8833      	ldrh	r3, [r6, #0]
 8010bcc:	4218      	tst	r0, r3
 8010bce:	d00a      	beq.n	8010be6 <xQueueCreateCountingSemaphoreStatic+0x72>
 8010bd0:	4620      	mov	r0, r4
 8010bd2:	f7f4 fadf 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 8010bd6:	8833      	ldrh	r3, [r6, #0]
 8010bd8:	4218      	tst	r0, r3
 8010bda:	d004      	beq.n	8010be6 <xQueueCreateCountingSemaphoreStatic+0x72>
 8010bdc:	462a      	mov	r2, r5
 8010bde:	4621      	mov	r1, r4
 8010be0:	2016      	movs	r0, #22
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 8010be2:	f7f5 f827 	bl	8005c34 <prvTraceStoreEvent2>
	}
 8010be6:	4620      	mov	r0, r4
 8010be8:	b003      	add	sp, #12
 8010bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 8010bec:	f7f4 fbf4 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8010bf0:	f7f4 fabe 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8010bf4:	8833      	ldrh	r3, [r6, #0]
 8010bf6:	4218      	tst	r0, r3
 8010bf8:	d0f5      	beq.n	8010be6 <xQueueCreateCountingSemaphoreStatic+0x72>
 8010bfa:	462a      	mov	r2, r5
 8010bfc:	4621      	mov	r1, r4
 8010bfe:	2046      	movs	r0, #70	; 0x46
 8010c00:	e7ef      	b.n	8010be2 <xQueueCreateCountingSemaphoreStatic+0x6e>
 8010c02:	bf00      	nop
 8010c04:	2400000a 	.word	0x2400000a
 8010c08:	24000008 	.word	0x24000008

08010c0c <xQueueCreateCountingSemaphore>:
	{
 8010c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c0e:	460f      	mov	r7, r1
		configASSERT( uxMaxCount != 0 );
 8010c10:	4605      	mov	r5, r0
 8010c12:	b940      	cbnz	r0, 8010c26 <xQueueCreateCountingSemaphore+0x1a>
 8010c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c18:	f383 8811 	msr	BASEPRI, r3
 8010c1c:	f3bf 8f6f 	isb	sy
 8010c20:	f3bf 8f4f 	dsb	sy
 8010c24:	e7fe      	b.n	8010c24 <xQueueCreateCountingSemaphore+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010c26:	4288      	cmp	r0, r1
 8010c28:	d208      	bcs.n	8010c3c <xQueueCreateCountingSemaphore+0x30>
 8010c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c2e:	f383 8811 	msr	BASEPRI, r3
 8010c32:	f3bf 8f6f 	isb	sy
 8010c36:	f3bf 8f4f 	dsb	sy
 8010c3a:	e7fe      	b.n	8010c3a <xQueueCreateCountingSemaphore+0x2e>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010c3c:	2202      	movs	r2, #2
 8010c3e:	2100      	movs	r1, #0
 8010c40:	f7ff ff4a 	bl	8010ad8 <xQueueGenericCreate>
 8010c44:	4e13      	ldr	r6, [pc, #76]	; (8010c94 <xQueueCreateCountingSemaphore+0x88>)
		if( xHandle != NULL )
 8010c46:	4604      	mov	r4, r0
 8010c48:	b1c0      	cbz	r0, 8010c7c <xQueueCreateCountingSemaphore+0x70>
			traceCREATE_COUNTING_SEMAPHORE();
 8010c4a:	4b13      	ldr	r3, [pc, #76]	; (8010c98 <xQueueCreateCountingSemaphore+0x8c>)
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010c4c:	6387      	str	r7, [r0, #56]	; 0x38
			traceCREATE_COUNTING_SEMAPHORE();
 8010c4e:	8819      	ldrh	r1, [r3, #0]
 8010c50:	f7f4 faa5 	bl	800519e <prvTraceSetQueueNumberHigh16>
 8010c54:	f7f4 fbc0 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8010c58:	f7f4 fa8a 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8010c5c:	8833      	ldrh	r3, [r6, #0]
 8010c5e:	4218      	tst	r0, r3
 8010c60:	d00a      	beq.n	8010c78 <xQueueCreateCountingSemaphore+0x6c>
 8010c62:	4620      	mov	r0, r4
 8010c64:	f7f4 fa96 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 8010c68:	8833      	ldrh	r3, [r6, #0]
 8010c6a:	4218      	tst	r0, r3
 8010c6c:	d004      	beq.n	8010c78 <xQueueCreateCountingSemaphore+0x6c>
 8010c6e:	462a      	mov	r2, r5
 8010c70:	4621      	mov	r1, r4
 8010c72:	2016      	movs	r0, #22
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 8010c74:	f7f4 ffde 	bl	8005c34 <prvTraceStoreEvent2>
	}
 8010c78:	4620      	mov	r0, r4
 8010c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 8010c7c:	f7f4 fbac 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8010c80:	f7f4 fa76 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8010c84:	8833      	ldrh	r3, [r6, #0]
 8010c86:	4218      	tst	r0, r3
 8010c88:	d0f6      	beq.n	8010c78 <xQueueCreateCountingSemaphore+0x6c>
 8010c8a:	462a      	mov	r2, r5
 8010c8c:	4621      	mov	r1, r4
 8010c8e:	2046      	movs	r0, #70	; 0x46
 8010c90:	e7f0      	b.n	8010c74 <xQueueCreateCountingSemaphore+0x68>
 8010c92:	bf00      	nop
 8010c94:	2400000a 	.word	0x2400000a
 8010c98:	24000008 	.word	0x24000008

08010c9c <xQueueGenericSend>:
{
 8010c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ca0:	460e      	mov	r6, r1
 8010ca2:	9201      	str	r2, [sp, #4]
 8010ca4:	461d      	mov	r5, r3
	configASSERT( pxQueue );
 8010ca6:	4604      	mov	r4, r0
 8010ca8:	b940      	cbnz	r0, 8010cbc <xQueueGenericSend+0x20>
 8010caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cae:	f383 8811 	msr	BASEPRI, r3
 8010cb2:	f3bf 8f6f 	isb	sy
 8010cb6:	f3bf 8f4f 	dsb	sy
 8010cba:	e7fe      	b.n	8010cba <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010cbc:	b951      	cbnz	r1, 8010cd4 <xQueueGenericSend+0x38>
 8010cbe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010cc0:	b143      	cbz	r3, 8010cd4 <xQueueGenericSend+0x38>
 8010cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc6:	f383 8811 	msr	BASEPRI, r3
 8010cca:	f3bf 8f6f 	isb	sy
 8010cce:	f3bf 8f4f 	dsb	sy
 8010cd2:	e7fe      	b.n	8010cd2 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010cd4:	2d02      	cmp	r5, #2
 8010cd6:	d10b      	bne.n	8010cf0 <xQueueGenericSend+0x54>
 8010cd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	d008      	beq.n	8010cf0 <xQueueGenericSend+0x54>
 8010cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce2:	f383 8811 	msr	BASEPRI, r3
 8010ce6:	f3bf 8f6f 	isb	sy
 8010cea:	f3bf 8f4f 	dsb	sy
 8010cee:	e7fe      	b.n	8010cee <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010cf0:	f001 fc02 	bl	80124f8 <xTaskGetSchedulerState>
 8010cf4:	b348      	cbz	r0, 8010d4a <xQueueGenericSend+0xae>
 8010cf6:	2d00      	cmp	r5, #0
{
 8010cf8:	f04f 0800 	mov.w	r8, #0
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8010cfc:	4f80      	ldr	r7, [pc, #512]	; (8010f00 <xQueueGenericSend+0x264>)
 8010cfe:	bf0c      	ite	eq
 8010d00:	f04f 0a56 	moveq.w	sl, #86	; 0x56
 8010d04:	f04f 0ac2 	movne.w	sl, #194	; 0xc2
					portYIELD_WITHIN_API();
 8010d08:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8010f04 <xQueueGenericSend+0x268>
		taskENTER_CRITICAL();
 8010d0c:	f001 ffb2 	bl	8012c74 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010d10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010d12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010d14:	429a      	cmp	r2, r3
 8010d16:	d301      	bcc.n	8010d1c <xQueueGenericSend+0x80>
 8010d18:	2d02      	cmp	r5, #2
 8010d1a:	d150      	bne.n	8010dbe <xQueueGenericSend+0x122>
				traceQUEUE_SEND( pxQueue );
 8010d1c:	4f78      	ldr	r7, [pc, #480]	; (8010f00 <xQueueGenericSend+0x264>)
 8010d1e:	f7f4 fb5b 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8010d22:	f7f4 fa25 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8010d26:	883b      	ldrh	r3, [r7, #0]
 8010d28:	4218      	tst	r0, r3
 8010d2a:	d024      	beq.n	8010d76 <xQueueGenericSend+0xda>
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f7f4 fa31 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 8010d32:	883b      	ldrh	r3, [r7, #0]
 8010d34:	4218      	tst	r0, r3
 8010d36:	d01e      	beq.n	8010d76 <xQueueGenericSend+0xda>
 8010d38:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8010d3c:	2b04      	cmp	r3, #4
 8010d3e:	d81a      	bhi.n	8010d76 <xQueueGenericSend+0xda>
 8010d40:	e8df f003 	tbb	[pc, r3]
 8010d44:	3333380f 	.word	0x3333380f
 8010d48:	38          	.byte	0x38
 8010d49:	00          	.byte	0x00
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d4a:	9b01      	ldr	r3, [sp, #4]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d0d2      	beq.n	8010cf6 <xQueueGenericSend+0x5a>
 8010d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d54:	f383 8811 	msr	BASEPRI, r3
 8010d58:	f3bf 8f6f 	isb	sy
 8010d5c:	f3bf 8f4f 	dsb	sy
 8010d60:	e7fe      	b.n	8010d60 <xQueueGenericSend+0xc4>
				traceQUEUE_SEND( pxQueue );
 8010d62:	2d00      	cmp	r5, #0
 8010d64:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010d66:	4621      	mov	r1, r4
 8010d68:	f102 0201 	add.w	r2, r2, #1
 8010d6c:	bf14      	ite	ne
 8010d6e:	20c0      	movne	r0, #192	; 0xc0
 8010d70:	2050      	moveq	r0, #80	; 0x50
 8010d72:	f7f4 ff5f 	bl	8005c34 <prvTraceStoreEvent2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010d76:	462a      	mov	r2, r5
 8010d78:	4631      	mov	r1, r6
 8010d7a:	4620      	mov	r0, r4
 8010d7c:	f7ff fd61 	bl	8010842 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d82:	b11b      	cbz	r3, 8010d8c <xQueueGenericSend+0xf0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010d88:	f001 fafe 	bl	8012388 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8010d8c:	b138      	cbz	r0, 8010d9e <xQueueGenericSend+0x102>
						queueYIELD_IF_USING_PREEMPTION();
 8010d8e:	4b5d      	ldr	r3, [pc, #372]	; (8010f04 <xQueueGenericSend+0x268>)
 8010d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d94:	601a      	str	r2, [r3, #0]
 8010d96:	f3bf 8f4f 	dsb	sy
 8010d9a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010d9e:	f001 ff8b 	bl	8012cb8 <vPortExitCritical>
				return pdPASS;
 8010da2:	2001      	movs	r0, #1
}
 8010da4:	b004      	add	sp, #16
 8010da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				traceQUEUE_SEND( pxQueue );
 8010daa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010dac:	4621      	mov	r1, r4
 8010dae:	2051      	movs	r0, #81	; 0x51
 8010db0:	3201      	adds	r2, #1
 8010db2:	e7de      	b.n	8010d72 <xQueueGenericSend+0xd6>
 8010db4:	4621      	mov	r1, r4
 8010db6:	2052      	movs	r0, #82	; 0x52
 8010db8:	f7f4 ff10 	bl	8005bdc <prvTraceStoreEvent1>
 8010dbc:	e7db      	b.n	8010d76 <xQueueGenericSend+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010dbe:	9b01      	ldr	r3, [sp, #4]
 8010dc0:	b9f3      	cbnz	r3, 8010e00 <xQueueGenericSend+0x164>
					taskEXIT_CRITICAL();
 8010dc2:	f001 ff79 	bl	8012cb8 <vPortExitCritical>
			traceQUEUE_SEND_FAILED( pxQueue );
 8010dc6:	4e4e      	ldr	r6, [pc, #312]	; (8010f00 <xQueueGenericSend+0x264>)
 8010dc8:	f7f4 fb06 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8010dcc:	f7f4 f9d0 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8010dd0:	8833      	ldrh	r3, [r6, #0]
 8010dd2:	4218      	tst	r0, r3
 8010dd4:	d012      	beq.n	8010dfc <xQueueGenericSend+0x160>
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	f7f4 f9dc 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 8010ddc:	8833      	ldrh	r3, [r6, #0]
 8010dde:	4218      	tst	r0, r3
 8010de0:	d00c      	beq.n	8010dfc <xQueueGenericSend+0x160>
 8010de2:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8010de6:	2b04      	cmp	r3, #4
 8010de8:	d808      	bhi.n	8010dfc <xQueueGenericSend+0x160>
 8010dea:	e8df f003 	tbb	[pc, r3]
 8010dee:	037c      	.short	0x037c
 8010df0:	8585      	.short	0x8585
 8010df2:	03          	.byte	0x03
 8010df3:	00          	.byte	0x00
					traceQUEUE_SEND_FAILED( pxQueue );
 8010df4:	4621      	mov	r1, r4
 8010df6:	2055      	movs	r0, #85	; 0x55
 8010df8:	f7f4 fef0 	bl	8005bdc <prvTraceStoreEvent1>
			return errQUEUE_FULL;
 8010dfc:	2000      	movs	r0, #0
			traceQUEUE_SEND_FAILED( pxQueue );
 8010dfe:	e7d1      	b.n	8010da4 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
 8010e00:	f1b8 0f00 	cmp.w	r8, #0
 8010e04:	d102      	bne.n	8010e0c <xQueueGenericSend+0x170>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010e06:	a802      	add	r0, sp, #8
 8010e08:	f001 fb0c 	bl	8012424 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010e0c:	f001 ff54 	bl	8012cb8 <vPortExitCritical>
		vTaskSuspendAll();
 8010e10:	f001 f844 	bl	8011e9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e14:	f001 ff2e 	bl	8012c74 <vPortEnterCritical>
 8010e18:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010e1c:	2bff      	cmp	r3, #255	; 0xff
 8010e1e:	d102      	bne.n	8010e26 <xQueueGenericSend+0x18a>
 8010e20:	2300      	movs	r3, #0
 8010e22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010e26:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010e2a:	2bff      	cmp	r3, #255	; 0xff
 8010e2c:	d102      	bne.n	8010e34 <xQueueGenericSend+0x198>
 8010e2e:	2300      	movs	r3, #0
 8010e30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010e34:	f001 ff40 	bl	8012cb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e38:	a901      	add	r1, sp, #4
 8010e3a:	a802      	add	r0, sp, #8
 8010e3c:	f001 fafe 	bl	801243c <xTaskCheckForTimeOut>
 8010e40:	2800      	cmp	r0, #0
 8010e42:	d14a      	bne.n	8010eda <xQueueGenericSend+0x23e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010e44:	f001 ff16 	bl	8012c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010e48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010e4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	d117      	bne.n	8010e80 <xQueueGenericSend+0x1e4>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8010e50:	f001 ff32 	bl	8012cb8 <vPortExitCritical>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8010e54:	f7f4 fac0 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8010e58:	f7f4 f98a 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8010e5c:	883b      	ldrh	r3, [r7, #0]
 8010e5e:	4218      	tst	r0, r3
 8010e60:	d01d      	beq.n	8010e9e <xQueueGenericSend+0x202>
 8010e62:	4620      	mov	r0, r4
 8010e64:	f7f4 f996 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 8010e68:	883b      	ldrh	r3, [r7, #0]
 8010e6a:	4218      	tst	r0, r3
 8010e6c:	d017      	beq.n	8010e9e <xQueueGenericSend+0x202>
 8010e6e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8010e72:	2b04      	cmp	r3, #4
 8010e74:	d813      	bhi.n	8010e9e <xQueueGenericSend+0x202>
 8010e76:	e8df f003 	tbb	[pc, r3]
 8010e7a:	2b0d      	.short	0x2b0d
 8010e7c:	2727      	.short	0x2727
 8010e7e:	2b          	.byte	0x2b
 8010e7f:	00          	.byte	0x00
	taskEXIT_CRITICAL();
 8010e80:	f001 ff1a 	bl	8012cb8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8010e84:	4620      	mov	r0, r4
 8010e86:	f7ff fd24 	bl	80108d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e8a:	f001 f8cd 	bl	8012028 <xTaskResumeAll>
 8010e8e:	f04f 0801 	mov.w	r8, #1
 8010e92:	e73b      	b.n	8010d0c <xQueueGenericSend+0x70>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8010e94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010e96:	4621      	mov	r1, r4
 8010e98:	4650      	mov	r0, sl
 8010e9a:	f7f4 fecb 	bl	8005c34 <prvTraceStoreEvent2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010e9e:	9901      	ldr	r1, [sp, #4]
 8010ea0:	f104 0010 	add.w	r0, r4, #16
 8010ea4:	f001 fa26 	bl	80122f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	f7ff fd12 	bl	80108d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010eae:	f001 f8bb 	bl	8012028 <xTaskResumeAll>
 8010eb2:	2800      	cmp	r0, #0
 8010eb4:	d1eb      	bne.n	8010e8e <xQueueGenericSend+0x1f2>
					portYIELD_WITHIN_API();
 8010eb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010eba:	f8c9 3000 	str.w	r3, [r9]
 8010ebe:	f3bf 8f4f 	dsb	sy
 8010ec2:	f3bf 8f6f 	isb	sy
 8010ec6:	e7e2      	b.n	8010e8e <xQueueGenericSend+0x1f2>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8010ec8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010eca:	4621      	mov	r1, r4
 8010ecc:	2057      	movs	r0, #87	; 0x57
 8010ece:	e7e4      	b.n	8010e9a <xQueueGenericSend+0x1fe>
 8010ed0:	4621      	mov	r1, r4
 8010ed2:	2058      	movs	r0, #88	; 0x58
 8010ed4:	f7f4 fe82 	bl	8005bdc <prvTraceStoreEvent1>
 8010ed8:	e7e1      	b.n	8010e9e <xQueueGenericSend+0x202>
			prvUnlockQueue( pxQueue );
 8010eda:	4620      	mov	r0, r4
 8010edc:	f7ff fcf9 	bl	80108d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ee0:	f001 f8a2 	bl	8012028 <xTaskResumeAll>
 8010ee4:	e76f      	b.n	8010dc6 <xQueueGenericSend+0x12a>
			traceQUEUE_SEND_FAILED( pxQueue );
 8010ee6:	2d00      	cmp	r5, #0
 8010ee8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010eea:	4621      	mov	r1, r4
 8010eec:	bf14      	ite	ne
 8010eee:	20c1      	movne	r0, #193	; 0xc1
 8010ef0:	2053      	moveq	r0, #83	; 0x53
 8010ef2:	f7f4 fe9f 	bl	8005c34 <prvTraceStoreEvent2>
 8010ef6:	e781      	b.n	8010dfc <xQueueGenericSend+0x160>
 8010ef8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010efa:	4621      	mov	r1, r4
 8010efc:	2054      	movs	r0, #84	; 0x54
 8010efe:	e7f8      	b.n	8010ef2 <xQueueGenericSend+0x256>
 8010f00:	2400000a 	.word	0x2400000a
 8010f04:	e000ed04 	.word	0xe000ed04

08010f08 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010f08:	2200      	movs	r2, #0
 8010f0a:	460b      	mov	r3, r1
	{
 8010f0c:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010f0e:	4611      	mov	r1, r2
 8010f10:	9000      	str	r0, [sp, #0]
 8010f12:	2001      	movs	r0, #1
 8010f14:	f7ff fd9a 	bl	8010a4c <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8010f18:	4604      	mov	r4, r0
 8010f1a:	b138      	cbz	r0, 8010f2c <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010f20:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010f22:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010f24:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010f26:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010f28:	f7ff feb8 	bl	8010c9c <xQueueGenericSend>
	}
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	b002      	add	sp, #8
 8010f30:	bd10      	pop	{r4, pc}

08010f32 <xQueueGiveMutexRecursive>:
	{
 8010f32:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8010f34:	4604      	mov	r4, r0
 8010f36:	b940      	cbnz	r0, 8010f4a <xQueueGiveMutexRecursive+0x18>
 8010f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f3c:	f383 8811 	msr	BASEPRI, r3
 8010f40:	f3bf 8f6f 	isb	sy
 8010f44:	f3bf 8f4f 	dsb	sy
 8010f48:	e7fe      	b.n	8010f48 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010f4a:	6885      	ldr	r5, [r0, #8]
 8010f4c:	f001 face 	bl	80124ec <xTaskGetCurrentTaskHandle>
 8010f50:	4285      	cmp	r5, r0
 8010f52:	d10a      	bne.n	8010f6a <xQueueGiveMutexRecursive+0x38>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8010f54:	68e3      	ldr	r3, [r4, #12]
 8010f56:	3b01      	subs	r3, #1
 8010f58:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8010f5a:	b923      	cbnz	r3, 8010f66 <xQueueGiveMutexRecursive+0x34>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	4619      	mov	r1, r3
 8010f60:	4620      	mov	r0, r4
 8010f62:	f7ff fe9b 	bl	8010c9c <xQueueGenericSend>
			xReturn = pdPASS;
 8010f66:	2001      	movs	r0, #1
		return xReturn;
 8010f68:	e000      	b.n	8010f6c <xQueueGiveMutexRecursive+0x3a>
			xReturn = pdFAIL;
 8010f6a:	2000      	movs	r0, #0
	}
 8010f6c:	bd38      	pop	{r3, r4, r5, pc}

08010f6e <xQueueCreateMutex>:
	{
 8010f6e:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010f70:	4602      	mov	r2, r0
 8010f72:	2100      	movs	r1, #0
 8010f74:	2001      	movs	r0, #1
 8010f76:	f7ff fdaf 	bl	8010ad8 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8010f7a:	4604      	mov	r4, r0
 8010f7c:	b138      	cbz	r0, 8010f8e <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010f82:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010f84:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010f86:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010f88:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010f8a:	f7ff fe87 	bl	8010c9c <xQueueGenericSend>
	}
 8010f8e:	4620      	mov	r0, r4
 8010f90:	bd10      	pop	{r4, pc}
	...

08010f94 <xQueueGenericSendFromISR>:
{
 8010f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f98:	4689      	mov	r9, r1
 8010f9a:	4690      	mov	r8, r2
 8010f9c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8010f9e:	4604      	mov	r4, r0
 8010fa0:	b940      	cbnz	r0, 8010fb4 <xQueueGenericSendFromISR+0x20>
 8010fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa6:	f383 8811 	msr	BASEPRI, r3
 8010faa:	f3bf 8f6f 	isb	sy
 8010fae:	f3bf 8f4f 	dsb	sy
 8010fb2:	e7fe      	b.n	8010fb2 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010fb4:	b951      	cbnz	r1, 8010fcc <xQueueGenericSendFromISR+0x38>
 8010fb6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010fb8:	b143      	cbz	r3, 8010fcc <xQueueGenericSendFromISR+0x38>
 8010fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fbe:	f383 8811 	msr	BASEPRI, r3
 8010fc2:	f3bf 8f6f 	isb	sy
 8010fc6:	f3bf 8f4f 	dsb	sy
 8010fca:	e7fe      	b.n	8010fca <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010fcc:	2f02      	cmp	r7, #2
 8010fce:	d10b      	bne.n	8010fe8 <xQueueGenericSendFromISR+0x54>
 8010fd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010fd2:	2b01      	cmp	r3, #1
 8010fd4:	d008      	beq.n	8010fe8 <xQueueGenericSendFromISR+0x54>
 8010fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fda:	f383 8811 	msr	BASEPRI, r3
 8010fde:	f3bf 8f6f 	isb	sy
 8010fe2:	f3bf 8f4f 	dsb	sy
 8010fe6:	e7fe      	b.n	8010fe6 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010fe8:	f001 ff60 	bl	8012eac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010fec:	f3ef 8611 	mrs	r6, BASEPRI
 8010ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff4:	f383 8811 	msr	BASEPRI, r3
 8010ff8:	f3bf 8f6f 	isb	sy
 8010ffc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011000:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011002:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011004:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80110c4 <xQueueGenericSendFromISR+0x130>
 8011008:	429a      	cmp	r2, r3
 801100a:	d301      	bcc.n	8011010 <xQueueGenericSendFromISR+0x7c>
 801100c:	2f02      	cmp	r7, #2
 801100e:	d13e      	bne.n	801108e <xQueueGenericSendFromISR+0xfa>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8011010:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8011012:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8011016:	f7f4 f8bd 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 801101a:	f8ba 3000 	ldrh.w	r3, [sl]
			const int8_t cTxLock = pxQueue->cTxLock;
 801101e:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8011020:	4218      	tst	r0, r3
 8011022:	d014      	beq.n	801104e <xQueueGenericSendFromISR+0xba>
 8011024:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8011028:	b13b      	cbz	r3, 801103a <xQueueGenericSendFromISR+0xa6>
 801102a:	3b02      	subs	r3, #2
 801102c:	2b01      	cmp	r3, #1
 801102e:	d80e      	bhi.n	801104e <xQueueGenericSendFromISR+0xba>
 8011030:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011032:	4621      	mov	r1, r4
 8011034:	205a      	movs	r0, #90	; 0x5a
 8011036:	3201      	adds	r2, #1
 8011038:	e007      	b.n	801104a <xQueueGenericSendFromISR+0xb6>
 801103a:	2f00      	cmp	r7, #0
 801103c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801103e:	4621      	mov	r1, r4
 8011040:	f102 0201 	add.w	r2, r2, #1
 8011044:	bf0c      	ite	eq
 8011046:	2059      	moveq	r0, #89	; 0x59
 8011048:	20c3      	movne	r0, #195	; 0xc3
 801104a:	f7f4 fdf3 	bl	8005c34 <prvTraceStoreEvent2>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801104e:	463a      	mov	r2, r7
 8011050:	4649      	mov	r1, r9
 8011052:	4620      	mov	r0, r4
 8011054:	f7ff fbf5 	bl	8010842 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8011058:	1c6b      	adds	r3, r5, #1
 801105a:	d113      	bne.n	8011084 <xQueueGenericSendFromISR+0xf0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801105c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801105e:	b90b      	cbnz	r3, 8011064 <xQueueGenericSendFromISR+0xd0>
			xReturn = pdPASS;
 8011060:	2001      	movs	r0, #1
 8011062:	e00b      	b.n	801107c <xQueueGenericSendFromISR+0xe8>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011064:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011068:	f001 f98e 	bl	8012388 <xTaskRemoveFromEventList>
 801106c:	2800      	cmp	r0, #0
 801106e:	d0f7      	beq.n	8011060 <xQueueGenericSendFromISR+0xcc>
							if( pxHigherPriorityTaskWoken != NULL )
 8011070:	f1b8 0f00 	cmp.w	r8, #0
 8011074:	d0f4      	beq.n	8011060 <xQueueGenericSendFromISR+0xcc>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011076:	2001      	movs	r0, #1
 8011078:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801107c:	f386 8811 	msr	BASEPRI, r6
}
 8011080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011084:	3501      	adds	r5, #1
 8011086:	b26d      	sxtb	r5, r5
 8011088:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 801108c:	e7e8      	b.n	8011060 <xQueueGenericSendFromISR+0xcc>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 801108e:	4620      	mov	r0, r4
 8011090:	f7f4 f880 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 8011094:	f8ba 3000 	ldrh.w	r3, [sl]
 8011098:	4018      	ands	r0, r3
 801109a:	d0ef      	beq.n	801107c <xQueueGenericSendFromISR+0xe8>
 801109c:	f894 504c 	ldrb.w	r5, [r4, #76]	; 0x4c
 80110a0:	b135      	cbz	r5, 80110b0 <xQueueGenericSendFromISR+0x11c>
 80110a2:	1ea8      	subs	r0, r5, #2
 80110a4:	2801      	cmp	r0, #1
 80110a6:	d80b      	bhi.n	80110c0 <xQueueGenericSendFromISR+0x12c>
 80110a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80110aa:	4621      	mov	r1, r4
 80110ac:	205d      	movs	r0, #93	; 0x5d
 80110ae:	e005      	b.n	80110bc <xQueueGenericSendFromISR+0x128>
 80110b0:	2f00      	cmp	r7, #0
 80110b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80110b4:	4621      	mov	r1, r4
 80110b6:	bf0c      	ite	eq
 80110b8:	205c      	moveq	r0, #92	; 0x5c
 80110ba:	20c4      	movne	r0, #196	; 0xc4
 80110bc:	f7f4 fdba 	bl	8005c34 <prvTraceStoreEvent2>
			xReturn = errQUEUE_FULL;
 80110c0:	2000      	movs	r0, #0
 80110c2:	e7db      	b.n	801107c <xQueueGenericSendFromISR+0xe8>
 80110c4:	2400000a 	.word	0x2400000a

080110c8 <MyWrapper_xQueueGiveFromISR>:
{
 80110c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110cc:	4689      	mov	r9, r1
 80110ce:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80110d0:	4604      	mov	r4, r0
 80110d2:	b940      	cbnz	r0, 80110e6 <MyWrapper_xQueueGiveFromISR+0x1e>
	__asm volatile
 80110d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d8:	f383 8811 	msr	BASEPRI, r3
 80110dc:	f3bf 8f6f 	isb	sy
 80110e0:	f3bf 8f4f 	dsb	sy
 80110e4:	e7fe      	b.n	80110e4 <MyWrapper_xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 80110e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80110e8:	b143      	cbz	r3, 80110fc <MyWrapper_xQueueGiveFromISR+0x34>
 80110ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ee:	f383 8811 	msr	BASEPRI, r3
 80110f2:	f3bf 8f6f 	isb	sy
 80110f6:	f3bf 8f4f 	dsb	sy
 80110fa:	e7fe      	b.n	80110fa <MyWrapper_xQueueGiveFromISR+0x32>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80110fc:	6803      	ldr	r3, [r0, #0]
 80110fe:	b953      	cbnz	r3, 8011116 <MyWrapper_xQueueGiveFromISR+0x4e>
 8011100:	6883      	ldr	r3, [r0, #8]
 8011102:	b143      	cbz	r3, 8011116 <MyWrapper_xQueueGiveFromISR+0x4e>
 8011104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011108:	f383 8811 	msr	BASEPRI, r3
 801110c:	f3bf 8f6f 	isb	sy
 8011110:	f3bf 8f4f 	dsb	sy
 8011114:	e7fe      	b.n	8011114 <MyWrapper_xQueueGiveFromISR+0x4c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011116:	f001 fec9 	bl	8012eac <vPortValidateInterruptPriority>
	__asm volatile
 801111a:	f3ef 8611 	mrs	r6, BASEPRI
 801111e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011122:	f383 8811 	msr	BASEPRI, r3
 8011126:	f3bf 8f6f 	isb	sy
 801112a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801112e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011130:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011132:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80111ec <MyWrapper_xQueueGiveFromISR+0x124>
 8011136:	429f      	cmp	r7, r3
 8011138:	d23c      	bcs.n	80111b4 <MyWrapper_xQueueGiveFromISR+0xec>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 801113a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 801113c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8011140:	f7f4 f828 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 8011144:	f8ba 3000 	ldrh.w	r3, [sl]
			const int8_t cTxLock = pxQueue->cTxLock;
 8011148:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 801114a:	4218      	tst	r0, r3
 801114c:	d015      	beq.n	801117a <MyWrapper_xQueueGiveFromISR+0xb2>
 801114e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8011152:	b13b      	cbz	r3, 8011164 <MyWrapper_xQueueGiveFromISR+0x9c>
 8011154:	3b02      	subs	r3, #2
 8011156:	2b01      	cmp	r3, #1
 8011158:	d80f      	bhi.n	801117a <MyWrapper_xQueueGiveFromISR+0xb2>
 801115a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801115c:	4621      	mov	r1, r4
 801115e:	205a      	movs	r0, #90	; 0x5a
 8011160:	3201      	adds	r2, #1
 8011162:	e008      	b.n	8011176 <MyWrapper_xQueueGiveFromISR+0xae>
 8011164:	f1b8 0f00 	cmp.w	r8, #0
 8011168:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801116a:	4621      	mov	r1, r4
 801116c:	f102 0201 	add.w	r2, r2, #1
 8011170:	bf0c      	ite	eq
 8011172:	2059      	moveq	r0, #89	; 0x59
 8011174:	20c3      	movne	r0, #195	; 0xc3
 8011176:	f7f4 fd5d 	bl	8005c34 <prvTraceStoreEvent2>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801117a:	3701      	adds	r7, #1
			if( cTxLock == queueUNLOCKED )
 801117c:	1c6b      	adds	r3, r5, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801117e:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8011180:	d113      	bne.n	80111aa <MyWrapper_xQueueGiveFromISR+0xe2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011184:	b90b      	cbnz	r3, 801118a <MyWrapper_xQueueGiveFromISR+0xc2>
			xReturn = pdPASS;
 8011186:	2001      	movs	r0, #1
 8011188:	e00b      	b.n	80111a2 <MyWrapper_xQueueGiveFromISR+0xda>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801118a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801118e:	f001 f8fb 	bl	8012388 <xTaskRemoveFromEventList>
 8011192:	2800      	cmp	r0, #0
 8011194:	d0f7      	beq.n	8011186 <MyWrapper_xQueueGiveFromISR+0xbe>
							if( pxHigherPriorityTaskWoken != NULL )
 8011196:	f1b9 0f00 	cmp.w	r9, #0
 801119a:	d0f4      	beq.n	8011186 <MyWrapper_xQueueGiveFromISR+0xbe>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801119c:	2001      	movs	r0, #1
 801119e:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 80111a2:	f386 8811 	msr	BASEPRI, r6
}
 80111a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80111aa:	3501      	adds	r5, #1
 80111ac:	b26d      	sxtb	r5, r5
 80111ae:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80111b2:	e7e8      	b.n	8011186 <MyWrapper_xQueueGiveFromISR+0xbe>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80111b4:	4620      	mov	r0, r4
 80111b6:	f7f3 ffed 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 80111ba:	f8ba 3000 	ldrh.w	r3, [sl]
 80111be:	4018      	ands	r0, r3
 80111c0:	d0ef      	beq.n	80111a2 <MyWrapper_xQueueGiveFromISR+0xda>
 80111c2:	f894 504c 	ldrb.w	r5, [r4, #76]	; 0x4c
 80111c6:	b135      	cbz	r5, 80111d6 <MyWrapper_xQueueGiveFromISR+0x10e>
 80111c8:	1ea8      	subs	r0, r5, #2
 80111ca:	2801      	cmp	r0, #1
 80111cc:	d80c      	bhi.n	80111e8 <MyWrapper_xQueueGiveFromISR+0x120>
 80111ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80111d0:	4621      	mov	r1, r4
 80111d2:	205d      	movs	r0, #93	; 0x5d
 80111d4:	e006      	b.n	80111e4 <MyWrapper_xQueueGiveFromISR+0x11c>
 80111d6:	f1b8 0f00 	cmp.w	r8, #0
 80111da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80111dc:	4621      	mov	r1, r4
 80111de:	bf0c      	ite	eq
 80111e0:	205c      	moveq	r0, #92	; 0x5c
 80111e2:	20c4      	movne	r0, #196	; 0xc4
 80111e4:	f7f4 fd26 	bl	8005c34 <prvTraceStoreEvent2>
			xReturn = errQUEUE_FULL;
 80111e8:	2000      	movs	r0, #0
 80111ea:	e7da      	b.n	80111a2 <MyWrapper_xQueueGiveFromISR+0xda>
 80111ec:	2400000a 	.word	0x2400000a

080111f0 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 80111f0:	2200      	movs	r2, #0
 80111f2:	f7ff bf69 	b.w	80110c8 <MyWrapper_xQueueGiveFromISR>
	...

080111f8 <xQueueReceive>:
{
 80111f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111fc:	b085      	sub	sp, #20
 80111fe:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8011200:	4604      	mov	r4, r0
{
 8011202:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8011204:	b940      	cbnz	r0, 8011218 <xQueueReceive+0x20>
	__asm volatile
 8011206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801120a:	f383 8811 	msr	BASEPRI, r3
 801120e:	f3bf 8f6f 	isb	sy
 8011212:	f3bf 8f4f 	dsb	sy
 8011216:	e7fe      	b.n	8011216 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011218:	b951      	cbnz	r1, 8011230 <xQueueReceive+0x38>
 801121a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801121c:	b143      	cbz	r3, 8011230 <xQueueReceive+0x38>
 801121e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011222:	f383 8811 	msr	BASEPRI, r3
 8011226:	f3bf 8f6f 	isb	sy
 801122a:	f3bf 8f4f 	dsb	sy
 801122e:	e7fe      	b.n	801122e <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011230:	f001 f962 	bl	80124f8 <xTaskGetSchedulerState>
 8011234:	b950      	cbnz	r0, 801124c <xQueueReceive+0x54>
 8011236:	9d01      	ldr	r5, [sp, #4]
 8011238:	b14d      	cbz	r5, 801124e <xQueueReceive+0x56>
 801123a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801123e:	f383 8811 	msr	BASEPRI, r3
 8011242:	f3bf 8f6f 	isb	sy
 8011246:	f3bf 8f4f 	dsb	sy
 801124a:	e7fe      	b.n	801124a <xQueueReceive+0x52>
 801124c:	2500      	movs	r5, #0
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 801124e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 801144c <xQueueReceive+0x254>
					portYIELD_WITHIN_API();
 8011252:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8011448 <xQueueReceive+0x250>
 8011256:	e09e      	b.n	8011396 <xQueueReceive+0x19e>
				traceQUEUE_RECEIVE( pxQueue );
 8011258:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801125a:	4621      	mov	r1, r4
 801125c:	9a01      	ldr	r2, [sp, #4]
 801125e:	2060      	movs	r0, #96	; 0x60
 8011260:	3b01      	subs	r3, #1
 8011262:	f7f4 fd17 	bl	8005c94 <prvTraceStoreEvent3>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011266:	3e01      	subs	r6, #1
 8011268:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801126a:	6923      	ldr	r3, [r4, #16]
 801126c:	b163      	cbz	r3, 8011288 <xQueueReceive+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801126e:	f104 0010 	add.w	r0, r4, #16
 8011272:	f001 f889 	bl	8012388 <xTaskRemoveFromEventList>
 8011276:	b138      	cbz	r0, 8011288 <xQueueReceive+0x90>
						queueYIELD_IF_USING_PREEMPTION();
 8011278:	4b73      	ldr	r3, [pc, #460]	; (8011448 <xQueueReceive+0x250>)
 801127a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801127e:	601a      	str	r2, [r3, #0]
 8011280:	f3bf 8f4f 	dsb	sy
 8011284:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8011288:	f001 fd16 	bl	8012cb8 <vPortExitCritical>
				return pdPASS;
 801128c:	2001      	movs	r0, #1
}
 801128e:	b005      	add	sp, #20
 8011290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				traceQUEUE_RECEIVE( pxQueue );
 8011294:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011296:	4621      	mov	r1, r4
 8011298:	9a01      	ldr	r2, [sp, #4]
 801129a:	2061      	movs	r0, #97	; 0x61
 801129c:	3b01      	subs	r3, #1
 801129e:	e7e0      	b.n	8011262 <xQueueReceive+0x6a>
 80112a0:	9a01      	ldr	r2, [sp, #4]
 80112a2:	4621      	mov	r1, r4
 80112a4:	2062      	movs	r0, #98	; 0x62
 80112a6:	f7f4 fcc5 	bl	8005c34 <prvTraceStoreEvent2>
 80112aa:	e7dc      	b.n	8011266 <xQueueReceive+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 80112ac:	9b01      	ldr	r3, [sp, #4]
 80112ae:	b9db      	cbnz	r3, 80112e8 <xQueueReceive+0xf0>
					taskEXIT_CRITICAL();
 80112b0:	f001 fd02 	bl	8012cb8 <vPortExitCritical>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80112b4:	4d65      	ldr	r5, [pc, #404]	; (801144c <xQueueReceive+0x254>)
 80112b6:	f7f4 f88f 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 80112ba:	f7f3 ff59 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 80112be:	882b      	ldrh	r3, [r5, #0]
 80112c0:	4218      	tst	r0, r3
 80112c2:	f000 80b3 	beq.w	801142c <xQueueReceive+0x234>
 80112c6:	4620      	mov	r0, r4
 80112c8:	f7f3 ff64 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 80112cc:	882b      	ldrh	r3, [r5, #0]
 80112ce:	4218      	tst	r0, r3
 80112d0:	f000 80ac 	beq.w	801142c <xQueueReceive+0x234>
 80112d4:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80112d8:	2b04      	cmp	r3, #4
 80112da:	f200 80a7 	bhi.w	801142c <xQueueReceive+0x234>
 80112de:	e8df f003 	tbb	[pc, r3]
 80112e2:	ac9f      	.short	0xac9f
 80112e4:	a7a7      	.short	0xa7a7
 80112e6:	ac          	.byte	0xac
 80112e7:	00          	.byte	0x00
				else if( xEntryTimeSet == pdFALSE )
 80112e8:	b915      	cbnz	r5, 80112f0 <xQueueReceive+0xf8>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80112ea:	a802      	add	r0, sp, #8
 80112ec:	f001 f89a 	bl	8012424 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80112f0:	f001 fce2 	bl	8012cb8 <vPortExitCritical>
		vTaskSuspendAll();
 80112f4:	f000 fdd2 	bl	8011e9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80112f8:	f001 fcbc 	bl	8012c74 <vPortEnterCritical>
 80112fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011300:	2bff      	cmp	r3, #255	; 0xff
 8011302:	d102      	bne.n	801130a <xQueueReceive+0x112>
 8011304:	2300      	movs	r3, #0
 8011306:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801130a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801130e:	2bff      	cmp	r3, #255	; 0xff
 8011310:	d102      	bne.n	8011318 <xQueueReceive+0x120>
 8011312:	2300      	movs	r3, #0
 8011314:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011318:	f001 fcce 	bl	8012cb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801131c:	a901      	add	r1, sp, #4
 801131e:	a802      	add	r0, sp, #8
 8011320:	f001 f88c 	bl	801243c <xTaskCheckForTimeOut>
 8011324:	2800      	cmp	r0, #0
 8011326:	d170      	bne.n	801140a <xQueueReceive+0x212>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011328:	4620      	mov	r0, r4
 801132a:	f7ff fa7f 	bl	801082c <prvIsQueueEmpty>
 801132e:	2800      	cmp	r0, #0
 8011330:	d065      	beq.n	80113fe <xQueueReceive+0x206>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8011332:	f7f4 f851 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8011336:	f7f3 ff1b 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 801133a:	f8b8 3000 	ldrh.w	r3, [r8]
 801133e:	4218      	tst	r0, r3
 8011340:	d015      	beq.n	801136e <xQueueReceive+0x176>
 8011342:	4620      	mov	r0, r4
 8011344:	f7f3 ff26 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 8011348:	f8b8 3000 	ldrh.w	r3, [r8]
 801134c:	4218      	tst	r0, r3
 801134e:	d00e      	beq.n	801136e <xQueueReceive+0x176>
 8011350:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8011354:	9a01      	ldr	r2, [sp, #4]
 8011356:	2b04      	cmp	r3, #4
 8011358:	d809      	bhi.n	801136e <xQueueReceive+0x176>
 801135a:	e8df f003 	tbb	[pc, r3]
 801135e:	4b03      	.short	0x4b03
 8011360:	4747      	.short	0x4747
 8011362:	4b          	.byte	0x4b
 8011363:	00          	.byte	0x00
 8011364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011366:	4621      	mov	r1, r4
 8011368:	2066      	movs	r0, #102	; 0x66
 801136a:	f7f4 fc93 	bl	8005c94 <prvTraceStoreEvent3>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801136e:	9901      	ldr	r1, [sp, #4]
 8011370:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011374:	f000 ffbe 	bl	80122f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011378:	4620      	mov	r0, r4
 801137a:	f7ff faaa 	bl	80108d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801137e:	f000 fe53 	bl	8012028 <xTaskResumeAll>
 8011382:	b938      	cbnz	r0, 8011394 <xQueueReceive+0x19c>
					portYIELD_WITHIN_API();
 8011384:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011388:	f8c9 3000 	str.w	r3, [r9]
 801138c:	f3bf 8f4f 	dsb	sy
 8011390:	f3bf 8f6f 	isb	sy
 8011394:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8011396:	f001 fc6d 	bl	8012c74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801139a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801139c:	2e00      	cmp	r6, #0
 801139e:	d085      	beq.n	80112ac <xQueueReceive+0xb4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80113a0:	4639      	mov	r1, r7
 80113a2:	4620      	mov	r0, r4
				traceQUEUE_RECEIVE( pxQueue );
 80113a4:	4d29      	ldr	r5, [pc, #164]	; (801144c <xQueueReceive+0x254>)
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80113a6:	f7ff fa7f 	bl	80108a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80113aa:	f7f4 f815 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 80113ae:	f7f3 fedf 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 80113b2:	882b      	ldrh	r3, [r5, #0]
 80113b4:	4218      	tst	r0, r3
 80113b6:	f43f af56 	beq.w	8011266 <xQueueReceive+0x6e>
 80113ba:	4620      	mov	r0, r4
 80113bc:	f7f3 feea 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 80113c0:	882b      	ldrh	r3, [r5, #0]
 80113c2:	4218      	tst	r0, r3
 80113c4:	f43f af4f 	beq.w	8011266 <xQueueReceive+0x6e>
 80113c8:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80113cc:	2b04      	cmp	r3, #4
 80113ce:	f63f af4a 	bhi.w	8011266 <xQueueReceive+0x6e>
 80113d2:	a201      	add	r2, pc, #4	; (adr r2, 80113d8 <xQueueReceive+0x1e0>)
 80113d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113d8:	08011259 	.word	0x08011259
 80113dc:	080112a1 	.word	0x080112a1
 80113e0:	08011295 	.word	0x08011295
 80113e4:	08011295 	.word	0x08011295
 80113e8:	080112a1 	.word	0x080112a1
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80113ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80113ee:	4621      	mov	r1, r4
 80113f0:	2067      	movs	r0, #103	; 0x67
 80113f2:	e7ba      	b.n	801136a <xQueueReceive+0x172>
 80113f4:	4621      	mov	r1, r4
 80113f6:	2068      	movs	r0, #104	; 0x68
 80113f8:	f7f4 fc1c 	bl	8005c34 <prvTraceStoreEvent2>
 80113fc:	e7b7      	b.n	801136e <xQueueReceive+0x176>
				prvUnlockQueue( pxQueue );
 80113fe:	4620      	mov	r0, r4
 8011400:	f7ff fa67 	bl	80108d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011404:	f000 fe10 	bl	8012028 <xTaskResumeAll>
 8011408:	e7c4      	b.n	8011394 <xQueueReceive+0x19c>
			prvUnlockQueue( pxQueue );
 801140a:	4620      	mov	r0, r4
 801140c:	f7ff fa61 	bl	80108d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011410:	f000 fe0a 	bl	8012028 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011414:	4620      	mov	r0, r4
 8011416:	f7ff fa09 	bl	801082c <prvIsQueueEmpty>
 801141a:	2800      	cmp	r0, #0
 801141c:	d0ba      	beq.n	8011394 <xQueueReceive+0x19c>
 801141e:	e749      	b.n	80112b4 <xQueueReceive+0xbc>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8011420:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011422:	4621      	mov	r1, r4
 8011424:	9a01      	ldr	r2, [sp, #4]
 8011426:	2063      	movs	r0, #99	; 0x63
 8011428:	f7f4 fc34 	bl	8005c94 <prvTraceStoreEvent3>
				return errQUEUE_EMPTY;
 801142c:	2000      	movs	r0, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 801142e:	e72e      	b.n	801128e <xQueueReceive+0x96>
 8011430:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011432:	4621      	mov	r1, r4
 8011434:	9a01      	ldr	r2, [sp, #4]
 8011436:	2064      	movs	r0, #100	; 0x64
 8011438:	e7f6      	b.n	8011428 <xQueueReceive+0x230>
 801143a:	9a01      	ldr	r2, [sp, #4]
 801143c:	4621      	mov	r1, r4
 801143e:	2065      	movs	r0, #101	; 0x65
 8011440:	f7f4 fbf8 	bl	8005c34 <prvTraceStoreEvent2>
 8011444:	e7f2      	b.n	801142c <xQueueReceive+0x234>
 8011446:	bf00      	nop
 8011448:	e000ed04 	.word	0xe000ed04
 801144c:	2400000a 	.word	0x2400000a

08011450 <xQueueSemaphoreTake>:
{
 8011450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011454:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8011456:	4604      	mov	r4, r0
{
 8011458:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 801145a:	b940      	cbnz	r0, 801146e <xQueueSemaphoreTake+0x1e>
 801145c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011460:	f383 8811 	msr	BASEPRI, r3
 8011464:	f3bf 8f6f 	isb	sy
 8011468:	f3bf 8f4f 	dsb	sy
 801146c:	e7fe      	b.n	801146c <xQueueSemaphoreTake+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 801146e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8011470:	b145      	cbz	r5, 8011484 <xQueueSemaphoreTake+0x34>
 8011472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011476:	f383 8811 	msr	BASEPRI, r3
 801147a:	f3bf 8f6f 	isb	sy
 801147e:	f3bf 8f4f 	dsb	sy
 8011482:	e7fe      	b.n	8011482 <xQueueSemaphoreTake+0x32>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011484:	f001 f838 	bl	80124f8 <xTaskGetSchedulerState>
 8011488:	b950      	cbnz	r0, 80114a0 <xQueueSemaphoreTake+0x50>
 801148a:	9d01      	ldr	r5, [sp, #4]
 801148c:	b145      	cbz	r5, 80114a0 <xQueueSemaphoreTake+0x50>
 801148e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011492:	f383 8811 	msr	BASEPRI, r3
 8011496:	f3bf 8f6f 	isb	sy
 801149a:	f3bf 8f4f 	dsb	sy
 801149e:	e7fe      	b.n	801149e <xQueueSemaphoreTake+0x4e>
 80114a0:	462f      	mov	r7, r5
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80114a2:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 8011744 <xQueueSemaphoreTake+0x2f4>
					portYIELD_WITHIN_API();
 80114a6:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8011740 <xQueueSemaphoreTake+0x2f0>
 80114aa:	e0ca      	b.n	8011642 <xQueueSemaphoreTake+0x1f2>
				traceQUEUE_RECEIVE( pxQueue );
 80114ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80114ae:	4621      	mov	r1, r4
 80114b0:	9a01      	ldr	r2, [sp, #4]
 80114b2:	2060      	movs	r0, #96	; 0x60
 80114b4:	3b01      	subs	r3, #1
 80114b6:	f7f4 fbed 	bl	8005c94 <prvTraceStoreEvent3>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80114ba:	3e01      	subs	r6, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80114bc:	6823      	ldr	r3, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80114be:	63a6      	str	r6, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80114c0:	b913      	cbnz	r3, 80114c8 <xQueueSemaphoreTake+0x78>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80114c2:	f001 f963 	bl	801278c <pvTaskIncrementMutexHeldCount>
 80114c6:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80114c8:	6923      	ldr	r3, [r4, #16]
 80114ca:	b163      	cbz	r3, 80114e6 <xQueueSemaphoreTake+0x96>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80114cc:	f104 0010 	add.w	r0, r4, #16
 80114d0:	f000 ff5a 	bl	8012388 <xTaskRemoveFromEventList>
 80114d4:	b138      	cbz	r0, 80114e6 <xQueueSemaphoreTake+0x96>
						queueYIELD_IF_USING_PREEMPTION();
 80114d6:	4b9a      	ldr	r3, [pc, #616]	; (8011740 <xQueueSemaphoreTake+0x2f0>)
 80114d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114dc:	601a      	str	r2, [r3, #0]
 80114de:	f3bf 8f4f 	dsb	sy
 80114e2:	f3bf 8f6f 	isb	sy
				return pdPASS;
 80114e6:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 80114e8:	f001 fbe6 	bl	8012cb8 <vPortExitCritical>
}
 80114ec:	4628      	mov	r0, r5
 80114ee:	b005      	add	sp, #20
 80114f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				traceQUEUE_RECEIVE( pxQueue );
 80114f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80114f6:	4621      	mov	r1, r4
 80114f8:	9a01      	ldr	r2, [sp, #4]
 80114fa:	2061      	movs	r0, #97	; 0x61
 80114fc:	3b01      	subs	r3, #1
 80114fe:	e7da      	b.n	80114b6 <xQueueSemaphoreTake+0x66>
 8011500:	9a01      	ldr	r2, [sp, #4]
 8011502:	4621      	mov	r1, r4
 8011504:	2062      	movs	r0, #98	; 0x62
 8011506:	f7f4 fb95 	bl	8005c34 <prvTraceStoreEvent2>
 801150a:	e7d6      	b.n	80114ba <xQueueSemaphoreTake+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
 801150c:	9b01      	ldr	r3, [sp, #4]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d136      	bne.n	8011580 <xQueueSemaphoreTake+0x130>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011512:	b145      	cbz	r5, 8011526 <xQueueSemaphoreTake+0xd6>
 8011514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011518:	f383 8811 	msr	BASEPRI, r3
 801151c:	f3bf 8f6f 	isb	sy
 8011520:	f3bf 8f4f 	dsb	sy
 8011524:	e7fe      	b.n	8011524 <xQueueSemaphoreTake+0xd4>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8011526:	4e87      	ldr	r6, [pc, #540]	; (8011744 <xQueueSemaphoreTake+0x2f4>)
					taskEXIT_CRITICAL();
 8011528:	f001 fbc6 	bl	8012cb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 801152c:	f7f3 ff54 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8011530:	f7f3 fe1e 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8011534:	8833      	ldrh	r3, [r6, #0]
 8011536:	4218      	tst	r0, r3
 8011538:	d101      	bne.n	801153e <xQueueSemaphoreTake+0xee>
				return errQUEUE_EMPTY;
 801153a:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 801153c:	e7d6      	b.n	80114ec <xQueueSemaphoreTake+0x9c>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 801153e:	4620      	mov	r0, r4
 8011540:	f7f3 fe28 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 8011544:	8833      	ldrh	r3, [r6, #0]
 8011546:	4218      	tst	r0, r3
 8011548:	d0f7      	beq.n	801153a <xQueueSemaphoreTake+0xea>
 801154a:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801154e:	2b04      	cmp	r3, #4
 8011550:	d8f3      	bhi.n	801153a <xQueueSemaphoreTake+0xea>
 8011552:	e8df f003 	tbb	[pc, r3]
 8011556:	0f03      	.short	0x0f03
 8011558:	0a0a      	.short	0x0a0a
 801155a:	0f          	.byte	0x0f
 801155b:	00          	.byte	0x00
 801155c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801155e:	4621      	mov	r1, r4
 8011560:	9a01      	ldr	r2, [sp, #4]
 8011562:	2063      	movs	r0, #99	; 0x63
 8011564:	f7f4 fb96 	bl	8005c94 <prvTraceStoreEvent3>
 8011568:	e7c0      	b.n	80114ec <xQueueSemaphoreTake+0x9c>
 801156a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801156c:	4621      	mov	r1, r4
 801156e:	9a01      	ldr	r2, [sp, #4]
 8011570:	2064      	movs	r0, #100	; 0x64
 8011572:	e7f7      	b.n	8011564 <xQueueSemaphoreTake+0x114>
 8011574:	9a01      	ldr	r2, [sp, #4]
 8011576:	4621      	mov	r1, r4
 8011578:	2065      	movs	r0, #101	; 0x65
 801157a:	f7f4 fb5b 	bl	8005c34 <prvTraceStoreEvent2>
 801157e:	e7b5      	b.n	80114ec <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 8011580:	b917      	cbnz	r7, 8011588 <xQueueSemaphoreTake+0x138>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011582:	a802      	add	r0, sp, #8
 8011584:	f000 ff4e 	bl	8012424 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8011588:	f001 fb96 	bl	8012cb8 <vPortExitCritical>
		vTaskSuspendAll();
 801158c:	f000 fc86 	bl	8011e9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011590:	f001 fb70 	bl	8012c74 <vPortEnterCritical>
 8011594:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011598:	2bff      	cmp	r3, #255	; 0xff
 801159a:	d102      	bne.n	80115a2 <xQueueSemaphoreTake+0x152>
 801159c:	2300      	movs	r3, #0
 801159e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80115a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80115a6:	2bff      	cmp	r3, #255	; 0xff
 80115a8:	d102      	bne.n	80115b0 <xQueueSemaphoreTake+0x160>
 80115aa:	2300      	movs	r3, #0
 80115ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80115b0:	f001 fb82 	bl	8012cb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80115b4:	a901      	add	r1, sp, #4
 80115b6:	a802      	add	r0, sp, #8
 80115b8:	f000 ff40 	bl	801243c <xTaskCheckForTimeOut>
 80115bc:	2800      	cmp	r0, #0
 80115be:	d17a      	bne.n	80116b6 <xQueueSemaphoreTake+0x266>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80115c0:	4620      	mov	r0, r4
 80115c2:	f7ff f933 	bl	801082c <prvIsQueueEmpty>
 80115c6:	2800      	cmp	r0, #0
 80115c8:	d06f      	beq.n	80116aa <xQueueSemaphoreTake+0x25a>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80115ca:	f7f3 ff05 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 80115ce:	f7f3 fdcf 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 80115d2:	f8b8 3000 	ldrh.w	r3, [r8]
 80115d6:	4218      	tst	r0, r3
 80115d8:	d015      	beq.n	8011606 <xQueueSemaphoreTake+0x1b6>
 80115da:	4620      	mov	r0, r4
 80115dc:	f7f3 fdda 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 80115e0:	f8b8 3000 	ldrh.w	r3, [r8]
 80115e4:	4218      	tst	r0, r3
 80115e6:	d00e      	beq.n	8011606 <xQueueSemaphoreTake+0x1b6>
 80115e8:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80115ec:	2b04      	cmp	r3, #4
 80115ee:	d80a      	bhi.n	8011606 <xQueueSemaphoreTake+0x1b6>
 80115f0:	e8df f003 	tbb	[pc, r3]
 80115f4:	50505503 	.word	0x50505503
 80115f8:	55          	.byte	0x55
 80115f9:	00          	.byte	0x00
 80115fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80115fc:	4621      	mov	r1, r4
 80115fe:	9a01      	ldr	r2, [sp, #4]
 8011600:	2066      	movs	r0, #102	; 0x66
 8011602:	f7f4 fb47 	bl	8005c94 <prvTraceStoreEvent3>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011606:	6823      	ldr	r3, [r4, #0]
 8011608:	b93b      	cbnz	r3, 801161a <xQueueSemaphoreTake+0x1ca>
						taskENTER_CRITICAL();
 801160a:	f001 fb33 	bl	8012c74 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801160e:	68a0      	ldr	r0, [r4, #8]
 8011610:	f000 ff82 	bl	8012518 <xTaskPriorityInherit>
 8011614:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8011616:	f001 fb4f 	bl	8012cb8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801161a:	9901      	ldr	r1, [sp, #4]
 801161c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011620:	f000 fe68 	bl	80122f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011624:	4620      	mov	r0, r4
 8011626:	f7ff f954 	bl	80108d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801162a:	f000 fcfd 	bl	8012028 <xTaskResumeAll>
 801162e:	b938      	cbnz	r0, 8011640 <xQueueSemaphoreTake+0x1f0>
					portYIELD_WITHIN_API();
 8011630:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011634:	f8c9 3000 	str.w	r3, [r9]
 8011638:	f3bf 8f4f 	dsb	sy
 801163c:	f3bf 8f6f 	isb	sy
 8011640:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 8011642:	f001 fb17 	bl	8012c74 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011646:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011648:	2e00      	cmp	r6, #0
 801164a:	f43f af5f 	beq.w	801150c <xQueueSemaphoreTake+0xbc>
				traceQUEUE_RECEIVE( pxQueue );
 801164e:	4d3d      	ldr	r5, [pc, #244]	; (8011744 <xQueueSemaphoreTake+0x2f4>)
 8011650:	f7f3 fec2 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8011654:	f7f3 fd8c 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8011658:	882b      	ldrh	r3, [r5, #0]
 801165a:	4218      	tst	r0, r3
 801165c:	f43f af2d 	beq.w	80114ba <xQueueSemaphoreTake+0x6a>
 8011660:	4620      	mov	r0, r4
 8011662:	f7f3 fd97 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 8011666:	882b      	ldrh	r3, [r5, #0]
 8011668:	4218      	tst	r0, r3
 801166a:	f43f af26 	beq.w	80114ba <xQueueSemaphoreTake+0x6a>
 801166e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8011672:	2b04      	cmp	r3, #4
 8011674:	f63f af21 	bhi.w	80114ba <xQueueSemaphoreTake+0x6a>
 8011678:	a201      	add	r2, pc, #4	; (adr r2, 8011680 <xQueueSemaphoreTake+0x230>)
 801167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801167e:	bf00      	nop
 8011680:	080114ad 	.word	0x080114ad
 8011684:	08011501 	.word	0x08011501
 8011688:	080114f5 	.word	0x080114f5
 801168c:	080114f5 	.word	0x080114f5
 8011690:	08011501 	.word	0x08011501
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8011694:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011696:	4621      	mov	r1, r4
 8011698:	9a01      	ldr	r2, [sp, #4]
 801169a:	2067      	movs	r0, #103	; 0x67
 801169c:	e7b1      	b.n	8011602 <xQueueSemaphoreTake+0x1b2>
 801169e:	9a01      	ldr	r2, [sp, #4]
 80116a0:	4621      	mov	r1, r4
 80116a2:	2068      	movs	r0, #104	; 0x68
 80116a4:	f7f4 fac6 	bl	8005c34 <prvTraceStoreEvent2>
 80116a8:	e7ad      	b.n	8011606 <xQueueSemaphoreTake+0x1b6>
				prvUnlockQueue( pxQueue );
 80116aa:	4620      	mov	r0, r4
 80116ac:	f7ff f911 	bl	80108d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80116b0:	f000 fcba 	bl	8012028 <xTaskResumeAll>
 80116b4:	e7c4      	b.n	8011640 <xQueueSemaphoreTake+0x1f0>
			prvUnlockQueue( pxQueue );
 80116b6:	4620      	mov	r0, r4
 80116b8:	f7ff f90b 	bl	80108d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80116bc:	f000 fcb4 	bl	8012028 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80116c0:	4620      	mov	r0, r4
 80116c2:	f7ff f8b3 	bl	801082c <prvIsQueueEmpty>
 80116c6:	2800      	cmp	r0, #0
 80116c8:	d0ba      	beq.n	8011640 <xQueueSemaphoreTake+0x1f0>
					if( xInheritanceOccurred != pdFALSE )
 80116ca:	b165      	cbz	r5, 80116e6 <xQueueSemaphoreTake+0x296>
						taskENTER_CRITICAL();
 80116cc:	f001 fad2 	bl	8012c74 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80116d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80116d2:	b119      	cbz	r1, 80116dc <xQueueSemaphoreTake+0x28c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80116d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80116d6:	6819      	ldr	r1, [r3, #0]
 80116d8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80116dc:	68a0      	ldr	r0, [r4, #8]
 80116de:	f000 ffe5 	bl	80126ac <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80116e2:	f001 fae9 	bl	8012cb8 <vPortExitCritical>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80116e6:	4d17      	ldr	r5, [pc, #92]	; (8011744 <xQueueSemaphoreTake+0x2f4>)
 80116e8:	f7f3 fe76 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 80116ec:	f7f3 fd40 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 80116f0:	882b      	ldrh	r3, [r5, #0]
 80116f2:	4218      	tst	r0, r3
 80116f4:	f43f af21 	beq.w	801153a <xQueueSemaphoreTake+0xea>
 80116f8:	4620      	mov	r0, r4
 80116fa:	f7f3 fd4b 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 80116fe:	882b      	ldrh	r3, [r5, #0]
 8011700:	4218      	tst	r0, r3
 8011702:	f43f af1a 	beq.w	801153a <xQueueSemaphoreTake+0xea>
 8011706:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801170a:	2b04      	cmp	r3, #4
 801170c:	f63f af15 	bhi.w	801153a <xQueueSemaphoreTake+0xea>
 8011710:	e8df f003 	tbb	[pc, r3]
 8011714:	0a0a0f03 	.word	0x0a0a0f03
 8011718:	0f          	.byte	0x0f
 8011719:	00          	.byte	0x00
 801171a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801171c:	4621      	mov	r1, r4
 801171e:	9a01      	ldr	r2, [sp, #4]
 8011720:	2063      	movs	r0, #99	; 0x63
 8011722:	f7f4 fab7 	bl	8005c94 <prvTraceStoreEvent3>
 8011726:	e708      	b.n	801153a <xQueueSemaphoreTake+0xea>
 8011728:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801172a:	4621      	mov	r1, r4
 801172c:	9a01      	ldr	r2, [sp, #4]
 801172e:	2064      	movs	r0, #100	; 0x64
 8011730:	e7f7      	b.n	8011722 <xQueueSemaphoreTake+0x2d2>
 8011732:	9a01      	ldr	r2, [sp, #4]
 8011734:	4621      	mov	r1, r4
 8011736:	2065      	movs	r0, #101	; 0x65
 8011738:	f7f4 fa7c 	bl	8005c34 <prvTraceStoreEvent2>
 801173c:	e6fd      	b.n	801153a <xQueueSemaphoreTake+0xea>
 801173e:	bf00      	nop
 8011740:	e000ed04 	.word	0xe000ed04
 8011744:	2400000a 	.word	0x2400000a

08011748 <xQueueTakeMutexRecursive>:
	{
 8011748:	b570      	push	{r4, r5, r6, lr}
 801174a:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 801174c:	4604      	mov	r4, r0
 801174e:	b940      	cbnz	r0, 8011762 <xQueueTakeMutexRecursive+0x1a>
 8011750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011754:	f383 8811 	msr	BASEPRI, r3
 8011758:	f3bf 8f6f 	isb	sy
 801175c:	f3bf 8f4f 	dsb	sy
 8011760:	e7fe      	b.n	8011760 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011762:	6886      	ldr	r6, [r0, #8]
 8011764:	f000 fec2 	bl	80124ec <xTaskGetCurrentTaskHandle>
 8011768:	4286      	cmp	r6, r0
 801176a:	d104      	bne.n	8011776 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801176c:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 801176e:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011770:	3301      	adds	r3, #1
 8011772:	60e3      	str	r3, [r4, #12]
	}
 8011774:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8011776:	4629      	mov	r1, r5
 8011778:	4620      	mov	r0, r4
 801177a:	f7ff fe69 	bl	8011450 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 801177e:	2800      	cmp	r0, #0
 8011780:	d0f8      	beq.n	8011774 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011782:	68e3      	ldr	r3, [r4, #12]
 8011784:	3301      	adds	r3, #1
 8011786:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8011788:	e7f4      	b.n	8011774 <xQueueTakeMutexRecursive+0x2c>
	...

0801178c <xQueueReceiveFromISR>:
{
 801178c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011790:	4689      	mov	r9, r1
 8011792:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8011794:	4604      	mov	r4, r0
 8011796:	b940      	cbnz	r0, 80117aa <xQueueReceiveFromISR+0x1e>
 8011798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801179c:	f383 8811 	msr	BASEPRI, r3
 80117a0:	f3bf 8f6f 	isb	sy
 80117a4:	f3bf 8f4f 	dsb	sy
 80117a8:	e7fe      	b.n	80117a8 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80117aa:	b951      	cbnz	r1, 80117c2 <xQueueReceiveFromISR+0x36>
 80117ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80117ae:	b143      	cbz	r3, 80117c2 <xQueueReceiveFromISR+0x36>
 80117b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b4:	f383 8811 	msr	BASEPRI, r3
 80117b8:	f3bf 8f6f 	isb	sy
 80117bc:	f3bf 8f4f 	dsb	sy
 80117c0:	e7fe      	b.n	80117c0 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80117c2:	f001 fb73 	bl	8012eac <vPortValidateInterruptPriority>
	__asm volatile
 80117c6:	f3ef 8711 	mrs	r7, BASEPRI
 80117ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ce:	f383 8811 	msr	BASEPRI, r3
 80117d2:	f3bf 8f6f 	isb	sy
 80117d6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80117da:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80117dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8011894 <xQueueReceiveFromISR+0x108>
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80117e0:	2d00      	cmp	r5, #0
 80117e2:	d03b      	beq.n	801185c <xQueueReceiveFromISR+0xd0>
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 80117e4:	4620      	mov	r0, r4
			const int8_t cRxLock = pxQueue->cRxLock;
 80117e6:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 80117ea:	f7f3 fcd3 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 80117ee:	f8ba 3000 	ldrh.w	r3, [sl]
			const int8_t cRxLock = pxQueue->cRxLock;
 80117f2:	b276      	sxtb	r6, r6
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 80117f4:	4218      	tst	r0, r3
 80117f6:	d010      	beq.n	801181a <xQueueReceiveFromISR+0x8e>
 80117f8:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80117fc:	b13b      	cbz	r3, 801180e <xQueueReceiveFromISR+0x82>
 80117fe:	3b02      	subs	r3, #2
 8011800:	2b01      	cmp	r3, #1
 8011802:	d80a      	bhi.n	801181a <xQueueReceiveFromISR+0x8e>
 8011804:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011806:	4621      	mov	r1, r4
 8011808:	206a      	movs	r0, #106	; 0x6a
 801180a:	3a01      	subs	r2, #1
 801180c:	e003      	b.n	8011816 <xQueueReceiveFromISR+0x8a>
 801180e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011810:	4621      	mov	r1, r4
 8011812:	2069      	movs	r0, #105	; 0x69
 8011814:	3a01      	subs	r2, #1
 8011816:	f7f4 fa0d 	bl	8005c34 <prvTraceStoreEvent2>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801181a:	4649      	mov	r1, r9
 801181c:	4620      	mov	r0, r4
 801181e:	f7ff f843 	bl	80108a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011822:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8011824:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011826:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8011828:	d113      	bne.n	8011852 <xQueueReceiveFromISR+0xc6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801182a:	6923      	ldr	r3, [r4, #16]
 801182c:	b90b      	cbnz	r3, 8011832 <xQueueReceiveFromISR+0xa6>
			xReturn = pdPASS;
 801182e:	2001      	movs	r0, #1
 8011830:	e00b      	b.n	801184a <xQueueReceiveFromISR+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011832:	f104 0010 	add.w	r0, r4, #16
 8011836:	f000 fda7 	bl	8012388 <xTaskRemoveFromEventList>
 801183a:	2800      	cmp	r0, #0
 801183c:	d0f7      	beq.n	801182e <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 801183e:	f1b8 0f00 	cmp.w	r8, #0
 8011842:	d0f4      	beq.n	801182e <xQueueReceiveFromISR+0xa2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011844:	2001      	movs	r0, #1
 8011846:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 801184a:	f387 8811 	msr	BASEPRI, r7
}
 801184e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011852:	3601      	adds	r6, #1
 8011854:	b276      	sxtb	r6, r6
 8011856:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
 801185a:	e7e8      	b.n	801182e <xQueueReceiveFromISR+0xa2>
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 801185c:	4620      	mov	r0, r4
 801185e:	f7f3 fc99 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 8011862:	f8ba 3000 	ldrh.w	r3, [sl]
 8011866:	4018      	ands	r0, r3
 8011868:	d0ef      	beq.n	801184a <xQueueReceiveFromISR+0xbe>
 801186a:	f894 604c 	ldrb.w	r6, [r4, #76]	; 0x4c
 801186e:	b14e      	cbz	r6, 8011884 <xQueueReceiveFromISR+0xf8>
 8011870:	1eb0      	subs	r0, r6, #2
 8011872:	2801      	cmp	r0, #1
 8011874:	d804      	bhi.n	8011880 <xQueueReceiveFromISR+0xf4>
 8011876:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011878:	4621      	mov	r1, r4
 801187a:	206d      	movs	r0, #109	; 0x6d
 801187c:	f7f4 f9da 	bl	8005c34 <prvTraceStoreEvent2>
			xReturn = pdFAIL;
 8011880:	4628      	mov	r0, r5
 8011882:	e7e2      	b.n	801184a <xQueueReceiveFromISR+0xbe>
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8011884:	206c      	movs	r0, #108	; 0x6c
 8011886:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011888:	4621      	mov	r1, r4
 801188a:	f7f4 f9d3 	bl	8005c34 <prvTraceStoreEvent2>
			xReturn = pdFAIL;
 801188e:	4630      	mov	r0, r6
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8011890:	e7db      	b.n	801184a <xQueueReceiveFromISR+0xbe>
 8011892:	bf00      	nop
 8011894:	2400000a 	.word	0x2400000a

08011898 <uxQueueGetQueueNumber>:
	}
 8011898:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801189a:	4770      	bx	lr

0801189c <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 801189c:	6481      	str	r1, [r0, #72]	; 0x48
	}
 801189e:	4770      	bx	lr

080118a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80118a0:	b570      	push	{r4, r5, r6, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80118a2:	4b0e      	ldr	r3, [pc, #56]	; (80118dc <vQueueAddToRegistry+0x3c>)
	{
 80118a4:	460d      	mov	r5, r1
 80118a6:	4604      	mov	r4, r0
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80118a8:	2100      	movs	r1, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80118aa:	f853 0031 	ldr.w	r0, [r3, r1, lsl #3]
 80118ae:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 80118b2:	b970      	cbnz	r0, 80118d2 <vQueueAddToRegistry+0x32>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80118b4:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80118b8:	4620      	mov	r0, r4
				xQueueRegistry[ ux ].xHandle = xQueue;
 80118ba:	6054      	str	r4, [r2, #4]
				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80118bc:	4629      	mov	r1, r5
 80118be:	f7f3 fdb7 	bl	8005430 <prvTraceSaveObjectSymbol>
 80118c2:	4623      	mov	r3, r4
 80118c4:	462a      	mov	r2, r5
 80118c6:	2103      	movs	r1, #3
 80118c8:	2001      	movs	r0, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80118ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80118ce:	f7f3 bf43 	b.w	8005758 <prvTraceStoreStringEvent>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80118d2:	3101      	adds	r1, #1
 80118d4:	2908      	cmp	r1, #8
 80118d6:	d1e8      	bne.n	80118aa <vQueueAddToRegistry+0xa>
	}
 80118d8:	bd70      	pop	{r4, r5, r6, pc}
 80118da:	bf00      	nop
 80118dc:	24024974 	.word	0x24024974

080118e0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80118e0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80118e2:	4a08      	ldr	r2, [pc, #32]	; (8011904 <vQueueUnregisterQueue+0x24>)
	{
 80118e4:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80118e6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80118ea:	684c      	ldr	r4, [r1, #4]
 80118ec:	4284      	cmp	r4, r0
 80118ee:	d104      	bne.n	80118fa <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80118f0:	2000      	movs	r0, #0
 80118f2:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80118f6:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80118f8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80118fa:	3301      	adds	r3, #1
 80118fc:	2b08      	cmp	r3, #8
 80118fe:	d1f2      	bne.n	80118e6 <vQueueUnregisterQueue+0x6>
 8011900:	e7fa      	b.n	80118f8 <vQueueUnregisterQueue+0x18>
 8011902:	bf00      	nop
 8011904:	24024974 	.word	0x24024974

08011908 <vQueueDelete>:
{
 8011908:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 801190a:	4604      	mov	r4, r0
 801190c:	b940      	cbnz	r0, 8011920 <vQueueDelete+0x18>
	__asm volatile
 801190e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011912:	f383 8811 	msr	BASEPRI, r3
 8011916:	f3bf 8f6f 	isb	sy
 801191a:	f3bf 8f4f 	dsb	sy
 801191e:	e7fe      	b.n	801191e <vQueueDelete+0x16>
	traceQUEUE_DELETE( pxQueue );
 8011920:	4d19      	ldr	r5, [pc, #100]	; (8011988 <vQueueDelete+0x80>)
 8011922:	f7f3 fd59 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8011926:	f7f3 fc23 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 801192a:	882b      	ldrh	r3, [r5, #0]
 801192c:	4218      	tst	r0, r3
 801192e:	d013      	beq.n	8011958 <vQueueDelete+0x50>
 8011930:	4620      	mov	r0, r4
 8011932:	f7f3 fc2f 	bl	8005194 <prvTraceGetQueueNumberHigh16>
 8011936:	882b      	ldrh	r3, [r5, #0]
 8011938:	4218      	tst	r0, r3
 801193a:	d00d      	beq.n	8011958 <vQueueDelete+0x50>
 801193c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8011940:	2b04      	cmp	r3, #4
 8011942:	d809      	bhi.n	8011958 <vQueueDelete+0x50>
 8011944:	e8df f003 	tbb	[pc, r3]
 8011948:	1a1a1603 	.word	0x1a1a1603
 801194c:	16          	.byte	0x16
 801194d:	00          	.byte	0x00
 801194e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011950:	4621      	mov	r1, r4
 8011952:	2021      	movs	r0, #33	; 0x21
 8011954:	f7f4 f96e 	bl	8005c34 <prvTraceStoreEvent2>
 8011958:	4620      	mov	r0, r4
 801195a:	f7f3 fdbd 	bl	80054d8 <prvTraceDeleteSymbol>
		vQueueUnregisterQueue( pxQueue );
 801195e:	4620      	mov	r0, r4
 8011960:	f7ff ffbe 	bl	80118e0 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011964:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011968:	b963      	cbnz	r3, 8011984 <vQueueDelete+0x7c>
			vPortFree( pxQueue );
 801196a:	4620      	mov	r0, r4
}
 801196c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			vPortFree( pxQueue );
 8011970:	f001 bb96 	b.w	80130a0 <vPortFree>
	traceQUEUE_DELETE( pxQueue );
 8011974:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011976:	4621      	mov	r1, r4
 8011978:	2023      	movs	r0, #35	; 0x23
 801197a:	e7eb      	b.n	8011954 <vQueueDelete+0x4c>
 801197c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801197e:	4621      	mov	r1, r4
 8011980:	2022      	movs	r0, #34	; 0x22
 8011982:	e7e7      	b.n	8011954 <vQueueDelete+0x4c>
}
 8011984:	bd38      	pop	{r3, r4, r5, pc}
 8011986:	bf00      	nop
 8011988:	2400000a 	.word	0x2400000a

0801198c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801198c:	b570      	push	{r4, r5, r6, lr}
 801198e:	4604      	mov	r4, r0
 8011990:	460d      	mov	r5, r1
 8011992:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011994:	f001 f96e 	bl	8012c74 <vPortEnterCritical>
 8011998:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801199c:	2bff      	cmp	r3, #255	; 0xff
 801199e:	d102      	bne.n	80119a6 <vQueueWaitForMessageRestricted+0x1a>
 80119a0:	2300      	movs	r3, #0
 80119a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80119a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80119aa:	2bff      	cmp	r3, #255	; 0xff
 80119ac:	d102      	bne.n	80119b4 <vQueueWaitForMessageRestricted+0x28>
 80119ae:	2300      	movs	r3, #0
 80119b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80119b4:	f001 f980 	bl	8012cb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80119b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80119ba:	b92b      	cbnz	r3, 80119c8 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80119bc:	4632      	mov	r2, r6
 80119be:	4629      	mov	r1, r5
 80119c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80119c4:	f000 fcb0 	bl	8012328 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80119c8:	4620      	mov	r0, r4
	}
 80119ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80119ce:	f7fe bf80 	b.w	80108d2 <prvUnlockQueue>
	...

080119d4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80119d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119d8:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80119da:	f001 f94b 	bl	8012c74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80119de:	4b49      	ldr	r3, [pc, #292]	; (8011b04 <prvAddNewTaskToReadyList+0x130>)
		if( pxCurrentTCB == NULL )
 80119e0:	4d49      	ldr	r5, [pc, #292]	; (8011b08 <prvAddNewTaskToReadyList+0x134>)
		uxCurrentNumberOfTasks++;
 80119e2:	681a      	ldr	r2, [r3, #0]
 80119e4:	4f49      	ldr	r7, [pc, #292]	; (8011b0c <prvAddNewTaskToReadyList+0x138>)
 80119e6:	3201      	adds	r2, #1
 80119e8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80119ea:	682e      	ldr	r6, [r5, #0]
 80119ec:	2e00      	cmp	r6, #0
 80119ee:	d17d      	bne.n	8011aec <prvAddNewTaskToReadyList+0x118>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80119f0:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	2b01      	cmp	r3, #1
 80119f6:	d11f      	bne.n	8011a38 <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80119f8:	f04f 0814 	mov.w	r8, #20
 80119fc:	fb08 7006 	mla	r0, r8, r6, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011a00:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011a02:	f7fe fed1 	bl	80107a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011a06:	2e38      	cmp	r6, #56	; 0x38
 8011a08:	d1f8      	bne.n	80119fc <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011a0a:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8011b40 <prvAddNewTaskToReadyList+0x16c>
	vListInitialise( &xDelayedTaskList2 );
 8011a0e:	4e40      	ldr	r6, [pc, #256]	; (8011b10 <prvAddNewTaskToReadyList+0x13c>)
	vListInitialise( &xDelayedTaskList1 );
 8011a10:	4640      	mov	r0, r8
 8011a12:	f7fe fec9 	bl	80107a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011a16:	4630      	mov	r0, r6
 8011a18:	f7fe fec6 	bl	80107a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011a1c:	483d      	ldr	r0, [pc, #244]	; (8011b14 <prvAddNewTaskToReadyList+0x140>)
 8011a1e:	f7fe fec3 	bl	80107a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011a22:	483d      	ldr	r0, [pc, #244]	; (8011b18 <prvAddNewTaskToReadyList+0x144>)
 8011a24:	f7fe fec0 	bl	80107a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011a28:	483c      	ldr	r0, [pc, #240]	; (8011b1c <prvAddNewTaskToReadyList+0x148>)
 8011a2a:	f7fe febd 	bl	80107a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011a2e:	4b3c      	ldr	r3, [pc, #240]	; (8011b20 <prvAddNewTaskToReadyList+0x14c>)
 8011a30:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011a34:	4b3b      	ldr	r3, [pc, #236]	; (8011b24 <prvAddNewTaskToReadyList+0x150>)
 8011a36:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8011a38:	4a3b      	ldr	r2, [pc, #236]	; (8011b28 <prvAddNewTaskToReadyList+0x154>)
		traceTASK_CREATE( pxNewTCB );
 8011a3a:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8011a3e:	4620      	mov	r0, r4
		uxTaskNumber++;
 8011a40:	6813      	ldr	r3, [r2, #0]
 8011a42:	3301      	adds	r3, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011a44:	64a3      	str	r3, [r4, #72]	; 0x48
		uxTaskNumber++;
 8011a46:	6013      	str	r3, [r2, #0]
		traceTASK_CREATE( pxNewTCB );
 8011a48:	f7f3 fbb6 	bl	80051b8 <prvAddTaskToStackMonitor>
 8011a4c:	4631      	mov	r1, r6
 8011a4e:	4620      	mov	r0, r4
 8011a50:	f7f3 fcee 	bl	8005430 <prvTraceSaveObjectSymbol>
 8011a54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011a56:	4620      	mov	r0, r4
 8011a58:	f7f3 fd74 	bl	8005544 <prvTraceSaveObjectData>
 8011a5c:	4632      	mov	r2, r6
 8011a5e:	4623      	mov	r3, r4
 8011a60:	2103      	movs	r1, #3
 8011a62:	2001      	movs	r0, #1
 8011a64:	4e31      	ldr	r6, [pc, #196]	; (8011b2c <prvAddNewTaskToReadyList+0x158>)
 8011a66:	f7f3 fe77 	bl	8005758 <prvTraceStoreStringEvent>
 8011a6a:	4b31      	ldr	r3, [pc, #196]	; (8011b30 <prvAddNewTaskToReadyList+0x15c>)
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	8819      	ldrh	r1, [r3, #0]
 8011a70:	f7f3 fb83 	bl	800517a <prvTraceSetTaskNumberHigh16>
 8011a74:	f7f3 fcb0 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8011a78:	f7f3 fb7a 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8011a7c:	8833      	ldrh	r3, [r6, #0]
 8011a7e:	4218      	tst	r0, r3
 8011a80:	d00a      	beq.n	8011a98 <prvAddNewTaskToReadyList+0xc4>
 8011a82:	4620      	mov	r0, r4
 8011a84:	f7f3 fb74 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8011a88:	8833      	ldrh	r3, [r6, #0]
 8011a8a:	4218      	tst	r0, r3
 8011a8c:	d004      	beq.n	8011a98 <prvAddNewTaskToReadyList+0xc4>
 8011a8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011a90:	4621      	mov	r1, r4
 8011a92:	2010      	movs	r0, #16
 8011a94:	f7f4 f8ce 	bl	8005c34 <prvTraceStoreEvent2>
		prvAddTaskToReadyList( pxNewTCB );
 8011a98:	4620      	mov	r0, r4
 8011a9a:	f7f3 fb69 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8011a9e:	8833      	ldrh	r3, [r6, #0]
 8011aa0:	4218      	tst	r0, r3
 8011aa2:	d003      	beq.n	8011aac <prvAddNewTaskToReadyList+0xd8>
 8011aa4:	4621      	mov	r1, r4
 8011aa6:	2030      	movs	r0, #48	; 0x30
 8011aa8:	f7f4 f898 	bl	8005bdc <prvTraceStoreEvent1>
 8011aac:	4a21      	ldr	r2, [pc, #132]	; (8011b34 <prvAddNewTaskToReadyList+0x160>)
 8011aae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011ab0:	6811      	ldr	r1, [r2, #0]
 8011ab2:	428b      	cmp	r3, r1
 8011ab4:	d900      	bls.n	8011ab8 <prvAddNewTaskToReadyList+0xe4>
 8011ab6:	6013      	str	r3, [r2, #0]
 8011ab8:	2014      	movs	r0, #20
 8011aba:	1d21      	adds	r1, r4, #4
 8011abc:	fb00 7003 	mla	r0, r0, r3, r7
 8011ac0:	f7fe fe80 	bl	80107c4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8011ac4:	f001 f8f8 	bl	8012cb8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8011ac8:	4b1b      	ldr	r3, [pc, #108]	; (8011b38 <prvAddNewTaskToReadyList+0x164>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	b163      	cbz	r3, 8011ae8 <prvAddNewTaskToReadyList+0x114>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011ace:	682b      	ldr	r3, [r5, #0]
 8011ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ad2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	d207      	bcs.n	8011ae8 <prvAddNewTaskToReadyList+0x114>
			taskYIELD_IF_USING_PREEMPTION();
 8011ad8:	4b18      	ldr	r3, [pc, #96]	; (8011b3c <prvAddNewTaskToReadyList+0x168>)
 8011ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ade:	601a      	str	r2, [r3, #0]
 8011ae0:	f3bf 8f4f 	dsb	sy
 8011ae4:	f3bf 8f6f 	isb	sy
}
 8011ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8011aec:	4b12      	ldr	r3, [pc, #72]	; (8011b38 <prvAddNewTaskToReadyList+0x164>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d1a1      	bne.n	8011a38 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011af4:	682b      	ldr	r3, [r5, #0]
 8011af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011af8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d89c      	bhi.n	8011a38 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8011afe:	602c      	str	r4, [r5, #0]
 8011b00:	e79a      	b.n	8011a38 <prvAddNewTaskToReadyList+0x64>
 8011b02:	bf00      	nop
 8011b04:	240021e0 	.word	0x240021e0
 8011b08:	24001d74 	.word	0x24001d74
 8011b0c:	24001d80 	.word	0x24001d80
 8011b10:	2400220c 	.word	0x2400220c
 8011b14:	24002228 	.word	0x24002228
 8011b18:	24002254 	.word	0x24002254
 8011b1c:	24002240 	.word	0x24002240
 8011b20:	24001d78 	.word	0x24001d78
 8011b24:	24001d7c 	.word	0x24001d7c
 8011b28:	240021f0 	.word	0x240021f0
 8011b2c:	2400000a 	.word	0x2400000a
 8011b30:	24000008 	.word	0x24000008
 8011b34:	240021f4 	.word	0x240021f4
 8011b38:	2400223c 	.word	0x2400223c
 8011b3c:	e000ed04 	.word	0xe000ed04
 8011b40:	240021f8 	.word	0x240021f8

08011b44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011b44:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011b46:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 8011b4a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011b4c:	b93b      	cbnz	r3, 8011b5e <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011b4e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011b50:	f001 faa6 	bl	80130a0 <vPortFree>
				vPortFree( pxTCB );
 8011b54:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8011b5a:	f001 baa1 	b.w	80130a0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011b5e:	2b01      	cmp	r3, #1
 8011b60:	d0f9      	beq.n	8011b56 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011b62:	2b02      	cmp	r3, #2
 8011b64:	d008      	beq.n	8011b78 <prvDeleteTCB+0x34>
 8011b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b6a:	f383 8811 	msr	BASEPRI, r3
 8011b6e:	f3bf 8f6f 	isb	sy
 8011b72:	f3bf 8f4f 	dsb	sy
 8011b76:	e7fe      	b.n	8011b76 <prvDeleteTCB+0x32>
	}
 8011b78:	bd10      	pop	{r4, pc}
	...

08011b7c <prvIdleTask>:
{
 8011b7c:	b580      	push	{r7, lr}
				taskYIELD();
 8011b7e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8011bdc <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b82:	4f12      	ldr	r7, [pc, #72]	; (8011bcc <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011b84:	4c12      	ldr	r4, [pc, #72]	; (8011bd0 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8011b86:	4d13      	ldr	r5, [pc, #76]	; (8011bd4 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011b88:	6823      	ldr	r3, [r4, #0]
 8011b8a:	b963      	cbnz	r3, 8011ba6 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011b8c:	4b12      	ldr	r3, [pc, #72]	; (8011bd8 <prvIdleTask+0x5c>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	2b01      	cmp	r3, #1
 8011b92:	d9f8      	bls.n	8011b86 <prvIdleTask+0xa>
				taskYIELD();
 8011b94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011b98:	f8c8 3000 	str.w	r3, [r8]
 8011b9c:	f3bf 8f4f 	dsb	sy
 8011ba0:	f3bf 8f6f 	isb	sy
 8011ba4:	e7ee      	b.n	8011b84 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8011ba6:	f001 f865 	bl	8012c74 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011bae:	1d30      	adds	r0, r6, #4
 8011bb0:	f7fe fe2b 	bl	801080a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011bb4:	682b      	ldr	r3, [r5, #0]
 8011bb6:	3b01      	subs	r3, #1
 8011bb8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011bba:	6823      	ldr	r3, [r4, #0]
 8011bbc:	3b01      	subs	r3, #1
 8011bbe:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8011bc0:	f001 f87a 	bl	8012cb8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8011bc4:	4630      	mov	r0, r6
 8011bc6:	f7ff ffbd 	bl	8011b44 <prvDeleteTCB>
 8011bca:	e7dd      	b.n	8011b88 <prvIdleTask+0xc>
 8011bcc:	24002254 	.word	0x24002254
 8011bd0:	240021e4 	.word	0x240021e4
 8011bd4:	240021e0 	.word	0x240021e0
 8011bd8:	24001d80 	.word	0x24001d80
 8011bdc:	e000ed04 	.word	0xe000ed04

08011be0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011be0:	4a06      	ldr	r2, [pc, #24]	; (8011bfc <prvResetNextTaskUnblockTime+0x1c>)
 8011be2:	6813      	ldr	r3, [r2, #0]
 8011be4:	6819      	ldr	r1, [r3, #0]
 8011be6:	4b06      	ldr	r3, [pc, #24]	; (8011c00 <prvResetNextTaskUnblockTime+0x20>)
 8011be8:	b919      	cbnz	r1, 8011bf2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011bea:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011bee:	601a      	str	r2, [r3, #0]
	}
}
 8011bf0:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bf2:	6812      	ldr	r2, [r2, #0]
 8011bf4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011bf6:	68d2      	ldr	r2, [r2, #12]
 8011bf8:	6852      	ldr	r2, [r2, #4]
 8011bfa:	e7f8      	b.n	8011bee <prvResetNextTaskUnblockTime+0xe>
 8011bfc:	24001d78 	.word	0x24001d78
 8011c00:	24002220 	.word	0x24002220

08011c04 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8011c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011c08:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8011c0c:	4607      	mov	r7, r0
 8011c0e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011c10:	21a5      	movs	r1, #165	; 0xa5
 8011c12:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8011c14:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011c16:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8011c1a:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011c1e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8011c20:	f001 fd19 	bl	8013656 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011c24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011c26:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011c28:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8011c2c:	b395      	cbz	r5, 8011c94 <prvInitialiseNewTask.isra.2+0x90>
 8011c2e:	1e6b      	subs	r3, r5, #1
 8011c30:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8011c34:	3513      	adds	r5, #19
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011c36:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8011c3a:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8011c3e:	7819      	ldrb	r1, [r3, #0]
 8011c40:	b109      	cbz	r1, 8011c46 <prvInitialiseNewTask.isra.2+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011c42:	42ab      	cmp	r3, r5
 8011c44:	d1f7      	bne.n	8011c36 <prvInitialiseNewTask.isra.2+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011c46:	2300      	movs	r3, #0
 8011c48:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 8011c4c:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8011c4e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011c52:	1d20      	adds	r0, r4, #4
 8011c54:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8011c56:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
 8011c5a:	bf28      	it	cs
 8011c5c:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8011c5e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8011c60:	6525      	str	r5, [r4, #80]	; 0x50
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c62:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011c66:	f7fe fdaa 	bl	80107be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011c6a:	f104 0018 	add.w	r0, r4, #24
 8011c6e:	f7fe fda6 	bl	80107be <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8011c72:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011c76:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011c78:	4642      	mov	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c7a:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011c7c:	4639      	mov	r1, r7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011c7e:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011c80:	4648      	mov	r0, r9
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011c82:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011c86:	f000 ffcb 	bl	8012c20 <pxPortInitialiseStack>
 8011c8a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8011c8c:	b106      	cbz	r6, 8011c90 <prvInitialiseNewTask.isra.2+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011c8e:	6034      	str	r4, [r6, #0]
}
 8011c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011c94:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8011c98:	e7d8      	b.n	8011c4c <prvInitialiseNewTask.isra.2+0x48>
	...

08011c9c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011c9e:	4b16      	ldr	r3, [pc, #88]	; (8011cf8 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8011ca0:	4605      	mov	r5, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ca2:	4e16      	ldr	r6, [pc, #88]	; (8011cfc <prvAddCurrentTaskToDelayedList+0x60>)
{
 8011ca4:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8011ca6:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ca8:	6830      	ldr	r0, [r6, #0]
 8011caa:	3004      	adds	r0, #4
 8011cac:	f7fe fdad 	bl	801080a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011cb0:	1c6b      	adds	r3, r5, #1
 8011cb2:	4633      	mov	r3, r6
 8011cb4:	d107      	bne.n	8011cc6 <prvAddCurrentTaskToDelayedList+0x2a>
 8011cb6:	b137      	cbz	r7, 8011cc6 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011cb8:	6831      	ldr	r1, [r6, #0]
 8011cba:	4811      	ldr	r0, [pc, #68]	; (8011d00 <prvAddCurrentTaskToDelayedList+0x64>)
 8011cbc:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011cbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011cc2:	f7fe bd7f 	b.w	80107c4 <vListInsertEnd>
 8011cc6:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011cc8:	681a      	ldr	r2, [r3, #0]
 8011cca:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8011ccc:	d307      	bcc.n	8011cde <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011cce:	4a0d      	ldr	r2, [pc, #52]	; (8011d04 <prvAddCurrentTaskToDelayedList+0x68>)
 8011cd0:	6810      	ldr	r0, [r2, #0]
 8011cd2:	6819      	ldr	r1, [r3, #0]
}
 8011cd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011cd8:	3104      	adds	r1, #4
 8011cda:	f7fe bd7f 	b.w	80107dc <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011cde:	4a0a      	ldr	r2, [pc, #40]	; (8011d08 <prvAddCurrentTaskToDelayedList+0x6c>)
 8011ce0:	6810      	ldr	r0, [r2, #0]
 8011ce2:	6819      	ldr	r1, [r3, #0]
 8011ce4:	3104      	adds	r1, #4
 8011ce6:	f7fe fd79 	bl	80107dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011cea:	4b08      	ldr	r3, [pc, #32]	; (8011d0c <prvAddCurrentTaskToDelayedList+0x70>)
 8011cec:	681a      	ldr	r2, [r3, #0]
 8011cee:	42a2      	cmp	r2, r4
 8011cf0:	d900      	bls.n	8011cf4 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 8011cf2:	601c      	str	r4, [r3, #0]
}
 8011cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	24002268 	.word	0x24002268
 8011cfc:	24001d74 	.word	0x24001d74
 8011d00:	24002240 	.word	0x24002240
 8011d04:	24001d7c 	.word	0x24001d7c
 8011d08:	24001d78 	.word	0x24001d78
 8011d0c:	24002220 	.word	0x24002220

08011d10 <xTaskCreateStatic>:
	{
 8011d10:	b570      	push	{r4, r5, r6, lr}
 8011d12:	b086      	sub	sp, #24
 8011d14:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8011d18:	b945      	cbnz	r5, 8011d2c <xTaskCreateStatic+0x1c>
 8011d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d1e:	f383 8811 	msr	BASEPRI, r3
 8011d22:	f3bf 8f6f 	isb	sy
 8011d26:	f3bf 8f4f 	dsb	sy
 8011d2a:	e7fe      	b.n	8011d2a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8011d2c:	b944      	cbnz	r4, 8011d40 <xTaskCreateStatic+0x30>
 8011d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d32:	f383 8811 	msr	BASEPRI, r3
 8011d36:	f3bf 8f6f 	isb	sy
 8011d3a:	f3bf 8f4f 	dsb	sy
 8011d3e:	e7fe      	b.n	8011d3e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8011d40:	2660      	movs	r6, #96	; 0x60
 8011d42:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011d44:	9e05      	ldr	r6, [sp, #20]
 8011d46:	2e60      	cmp	r6, #96	; 0x60
 8011d48:	d008      	beq.n	8011d5c <xTaskCreateStatic+0x4c>
 8011d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d4e:	f383 8811 	msr	BASEPRI, r3
 8011d52:	f3bf 8f6f 	isb	sy
 8011d56:	f3bf 8f4f 	dsb	sy
 8011d5a:	e7fe      	b.n	8011d5a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011d5c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011d5e:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011d60:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011d62:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011d66:	ad04      	add	r5, sp, #16
 8011d68:	9402      	str	r4, [sp, #8]
 8011d6a:	9501      	str	r5, [sp, #4]
 8011d6c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011d6e:	9500      	str	r5, [sp, #0]
 8011d70:	f7ff ff48 	bl	8011c04 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011d74:	4620      	mov	r0, r4
 8011d76:	f7ff fe2d 	bl	80119d4 <prvAddNewTaskToReadyList>
	}
 8011d7a:	9804      	ldr	r0, [sp, #16]
 8011d7c:	b006      	add	sp, #24
 8011d7e:	bd70      	pop	{r4, r5, r6, pc}

08011d80 <xTaskCreate>:
	{
 8011d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d84:	4607      	mov	r7, r0
 8011d86:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011d88:	0090      	lsls	r0, r2, #2
	{
 8011d8a:	4688      	mov	r8, r1
 8011d8c:	4616      	mov	r6, r2
 8011d8e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011d90:	f001 f8de 	bl	8012f50 <pvPortMalloc>
			if( pxStack != NULL )
 8011d94:	4605      	mov	r5, r0
 8011d96:	b1e8      	cbz	r0, 8011dd4 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011d98:	2060      	movs	r0, #96	; 0x60
 8011d9a:	f001 f8d9 	bl	8012f50 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8011d9e:	4604      	mov	r4, r0
 8011da0:	b1a8      	cbz	r0, 8011dce <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011da2:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8011da4:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011da6:	4632      	mov	r2, r6
 8011da8:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011daa:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011db0:	9002      	str	r0, [sp, #8]
 8011db2:	4638      	mov	r0, r7
 8011db4:	9301      	str	r3, [sp, #4]
 8011db6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011db8:	9300      	str	r3, [sp, #0]
 8011dba:	464b      	mov	r3, r9
 8011dbc:	f7ff ff22 	bl	8011c04 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	f7ff fe07 	bl	80119d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011dc6:	2001      	movs	r0, #1
	}
 8011dc8:	b005      	add	sp, #20
 8011dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8011dce:	4628      	mov	r0, r5
 8011dd0:	f001 f966 	bl	80130a0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011dd4:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8011dd8:	e7f6      	b.n	8011dc8 <xTaskCreate+0x48>
	...

08011ddc <vTaskStartScheduler>:
{
 8011ddc:	b530      	push	{r4, r5, lr}
 8011dde:	b089      	sub	sp, #36	; 0x24
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011de0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011de2:	aa07      	add	r2, sp, #28
 8011de4:	a906      	add	r1, sp, #24
 8011de6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011de8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011dec:	f7fe fcc4 	bl	8010778 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011df0:	9b05      	ldr	r3, [sp, #20]
 8011df2:	9a07      	ldr	r2, [sp, #28]
 8011df4:	9302      	str	r3, [sp, #8]
 8011df6:	9b06      	ldr	r3, [sp, #24]
 8011df8:	4920      	ldr	r1, [pc, #128]	; (8011e7c <vTaskStartScheduler+0xa0>)
 8011dfa:	4821      	ldr	r0, [pc, #132]	; (8011e80 <vTaskStartScheduler+0xa4>)
 8011dfc:	e9cd 4300 	strd	r4, r3, [sp]
 8011e00:	4623      	mov	r3, r4
 8011e02:	f7ff ff85 	bl	8011d10 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8011e06:	b360      	cbz	r0, 8011e62 <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 8011e08:	f000 fd1e 	bl	8012848 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8011e0c:	2801      	cmp	r0, #1
 8011e0e:	d12a      	bne.n	8011e66 <vTaskStartScheduler+0x8a>
 8011e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e14:	f383 8811 	msr	BASEPRI, r3
 8011e18:	f3bf 8f6f 	isb	sy
 8011e1c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8011e20:	f04f 32ff 	mov.w	r2, #4294967295
 8011e24:	4b17      	ldr	r3, [pc, #92]	; (8011e84 <vTaskStartScheduler+0xa8>)
 8011e26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011e28:	4b17      	ldr	r3, [pc, #92]	; (8011e88 <vTaskStartScheduler+0xac>)
 8011e2a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011e2c:	4b17      	ldr	r3, [pc, #92]	; (8011e8c <vTaskStartScheduler+0xb0>)
 8011e2e:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8011e30:	4c17      	ldr	r4, [pc, #92]	; (8011e90 <vTaskStartScheduler+0xb4>)
 8011e32:	6020      	str	r0, [r4, #0]
 8011e34:	f7f3 fad0 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8011e38:	f7f3 f99a 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8011e3c:	4b15      	ldr	r3, [pc, #84]	; (8011e94 <vTaskStartScheduler+0xb8>)
 8011e3e:	881b      	ldrh	r3, [r3, #0]
 8011e40:	4218      	tst	r0, r3
 8011e42:	d00a      	beq.n	8011e5a <vTaskStartScheduler+0x7e>
 8011e44:	4d14      	ldr	r5, [pc, #80]	; (8011e98 <vTaskStartScheduler+0xbc>)
 8011e46:	6828      	ldr	r0, [r5, #0]
 8011e48:	f7f3 fac8 	bl	80053dc <prvIsNewTCB>
 8011e4c:	b128      	cbz	r0, 8011e5a <vTaskStartScheduler+0x7e>
 8011e4e:	6829      	ldr	r1, [r5, #0]
 8011e50:	2037      	movs	r0, #55	; 0x37
 8011e52:	682b      	ldr	r3, [r5, #0]
 8011e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e56:	f7f3 feed 	bl	8005c34 <prvTraceStoreEvent2>
 8011e5a:	2302      	movs	r3, #2
 8011e5c:	6023      	str	r3, [r4, #0]
		if( xPortStartScheduler() != pdFALSE )
 8011e5e:	f000 ffa1 	bl	8012da4 <xPortStartScheduler>
}
 8011e62:	b009      	add	sp, #36	; 0x24
 8011e64:	bd30      	pop	{r4, r5, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011e66:	3001      	adds	r0, #1
 8011e68:	d1fb      	bne.n	8011e62 <vTaskStartScheduler+0x86>
 8011e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e6e:	f383 8811 	msr	BASEPRI, r3
 8011e72:	f3bf 8f6f 	isb	sy
 8011e76:	f3bf 8f4f 	dsb	sy
 8011e7a:	e7fe      	b.n	8011e7a <vTaskStartScheduler+0x9e>
 8011e7c:	08015f5b 	.word	0x08015f5b
 8011e80:	08011b7d 	.word	0x08011b7d
 8011e84:	24002220 	.word	0x24002220
 8011e88:	2400223c 	.word	0x2400223c
 8011e8c:	24002268 	.word	0x24002268
 8011e90:	2400166c 	.word	0x2400166c
 8011e94:	2400000a 	.word	0x2400000a
 8011e98:	24001d74 	.word	0x24001d74

08011e9c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8011e9c:	4a02      	ldr	r2, [pc, #8]	; (8011ea8 <vTaskSuspendAll+0xc>)
 8011e9e:	6813      	ldr	r3, [r2, #0]
 8011ea0:	3301      	adds	r3, #1
 8011ea2:	6013      	str	r3, [r2, #0]
}
 8011ea4:	4770      	bx	lr
 8011ea6:	bf00      	nop
 8011ea8:	240021ec 	.word	0x240021ec

08011eac <xTaskGetTickCount>:
		xTicks = xTickCount;
 8011eac:	4b01      	ldr	r3, [pc, #4]	; (8011eb4 <xTaskGetTickCount+0x8>)
 8011eae:	6818      	ldr	r0, [r3, #0]
}
 8011eb0:	4770      	bx	lr
 8011eb2:	bf00      	nop
 8011eb4:	24002268 	.word	0x24002268

08011eb8 <xTaskGetTickCountFromISR>:
{
 8011eb8:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011eba:	f000 fff7 	bl	8012eac <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8011ebe:	4b01      	ldr	r3, [pc, #4]	; (8011ec4 <xTaskGetTickCountFromISR+0xc>)
 8011ec0:	6818      	ldr	r0, [r3, #0]
}
 8011ec2:	bd08      	pop	{r3, pc}
 8011ec4:	24002268 	.word	0x24002268

08011ec8 <xTaskIncrementTick>:
{
 8011ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	traceTASK_INCREMENT_TICK( xTickCount );
 8011ecc:	4c49      	ldr	r4, [pc, #292]	; (8011ff4 <xTaskIncrementTick+0x12c>)
 8011ece:	6823      	ldr	r3, [r4, #0]
 8011ed0:	2b01      	cmp	r3, #1
 8011ed2:	d002      	beq.n	8011eda <xTaskIncrementTick+0x12>
 8011ed4:	4b48      	ldr	r3, [pc, #288]	; (8011ff8 <xTaskIncrementTick+0x130>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	b91b      	cbnz	r3, 8011ee2 <xTaskIncrementTick+0x1a>
 8011eda:	4a48      	ldr	r2, [pc, #288]	; (8011ffc <xTaskIncrementTick+0x134>)
 8011edc:	6813      	ldr	r3, [r2, #0]
 8011ede:	3301      	adds	r3, #1
 8011ee0:	6013      	str	r3, [r2, #0]
 8011ee2:	6823      	ldr	r3, [r4, #0]
 8011ee4:	b92b      	cbnz	r3, 8011ef2 <xTaskIncrementTick+0x2a>
 8011ee6:	4b46      	ldr	r3, [pc, #280]	; (8012000 <xTaskIncrementTick+0x138>)
 8011ee8:	2031      	movs	r0, #49	; 0x31
 8011eea:	6819      	ldr	r1, [r3, #0]
 8011eec:	3101      	adds	r1, #1
 8011eee:	f7f3 fe75 	bl	8005bdc <prvTraceStoreEvent1>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ef2:	6823      	ldr	r3, [r4, #0]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d176      	bne.n	8011fe6 <xTaskIncrementTick+0x11e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011ef8:	4b41      	ldr	r3, [pc, #260]	; (8012000 <xTaskIncrementTick+0x138>)
 8011efa:	681d      	ldr	r5, [r3, #0]
 8011efc:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8011efe:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011f00:	b9bd      	cbnz	r5, 8011f32 <xTaskIncrementTick+0x6a>
			taskSWITCH_DELAYED_LISTS();
 8011f02:	4b40      	ldr	r3, [pc, #256]	; (8012004 <xTaskIncrementTick+0x13c>)
 8011f04:	681a      	ldr	r2, [r3, #0]
 8011f06:	6812      	ldr	r2, [r2, #0]
 8011f08:	b142      	cbz	r2, 8011f1c <xTaskIncrementTick+0x54>
 8011f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f0e:	f383 8811 	msr	BASEPRI, r3
 8011f12:	f3bf 8f6f 	isb	sy
 8011f16:	f3bf 8f4f 	dsb	sy
 8011f1a:	e7fe      	b.n	8011f1a <xTaskIncrementTick+0x52>
 8011f1c:	4a3a      	ldr	r2, [pc, #232]	; (8012008 <xTaskIncrementTick+0x140>)
 8011f1e:	6819      	ldr	r1, [r3, #0]
 8011f20:	6810      	ldr	r0, [r2, #0]
 8011f22:	6018      	str	r0, [r3, #0]
 8011f24:	6011      	str	r1, [r2, #0]
 8011f26:	4a39      	ldr	r2, [pc, #228]	; (801200c <xTaskIncrementTick+0x144>)
 8011f28:	6813      	ldr	r3, [r2, #0]
 8011f2a:	3301      	adds	r3, #1
 8011f2c:	6013      	str	r3, [r2, #0]
 8011f2e:	f7ff fe57 	bl	8011be0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011f32:	4e37      	ldr	r6, [pc, #220]	; (8012010 <xTaskIncrementTick+0x148>)
BaseType_t xSwitchRequired = pdFALSE;
 8011f34:	2400      	movs	r4, #0
 8011f36:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8012020 <xTaskIncrementTick+0x158>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011f3a:	6833      	ldr	r3, [r6, #0]
 8011f3c:	42ab      	cmp	r3, r5
 8011f3e:	d911      	bls.n	8011f64 <xTaskIncrementTick+0x9c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011f40:	f8d8 3000 	ldr.w	r3, [r8]
 8011f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f46:	2314      	movs	r3, #20
 8011f48:	4353      	muls	r3, r2
 8011f4a:	4a32      	ldr	r2, [pc, #200]	; (8012014 <xTaskIncrementTick+0x14c>)
 8011f4c:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8011f4e:	2b02      	cmp	r3, #2
 8011f50:	bf28      	it	cs
 8011f52:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8011f54:	4b30      	ldr	r3, [pc, #192]	; (8012018 <xTaskIncrementTick+0x150>)
 8011f56:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8011f58:	2b00      	cmp	r3, #0
}
 8011f5a:	bf0c      	ite	eq
 8011f5c:	4620      	moveq	r0, r4
 8011f5e:	2001      	movne	r0, #1
 8011f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f64:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8012004 <xTaskIncrementTick+0x13c>
					prvAddTaskToReadyList( pxTCB );
 8011f68:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8012024 <xTaskIncrementTick+0x15c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f6c:	f8da 3000 	ldr.w	r3, [sl]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	b91b      	cbnz	r3, 8011f7c <xTaskIncrementTick+0xb4>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f74:	f04f 33ff 	mov.w	r3, #4294967295
 8011f78:	6033      	str	r3, [r6, #0]
					break;
 8011f7a:	e7e1      	b.n	8011f40 <xTaskIncrementTick+0x78>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f7c:	f8da 3000 	ldr.w	r3, [sl]
 8011f80:	68db      	ldr	r3, [r3, #12]
 8011f82:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011f84:	687a      	ldr	r2, [r7, #4]
					if( xConstTickCount < xItemValue )
 8011f86:	4295      	cmp	r5, r2
 8011f88:	d201      	bcs.n	8011f8e <xTaskIncrementTick+0xc6>
						xNextTaskUnblockTime = xItemValue;
 8011f8a:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011f8c:	e7d8      	b.n	8011f40 <xTaskIncrementTick+0x78>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f8e:	f107 0904 	add.w	r9, r7, #4
 8011f92:	4648      	mov	r0, r9
 8011f94:	f7fe fc39 	bl	801080a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f9a:	b11a      	cbz	r2, 8011fa4 <xTaskIncrementTick+0xdc>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011f9c:	f107 0018 	add.w	r0, r7, #24
 8011fa0:	f7fe fc33 	bl	801080a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011fa4:	4638      	mov	r0, r7
 8011fa6:	f7f3 f8e3 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8011faa:	4b1c      	ldr	r3, [pc, #112]	; (801201c <xTaskIncrementTick+0x154>)
 8011fac:	881a      	ldrh	r2, [r3, #0]
 8011fae:	4210      	tst	r0, r2
 8011fb0:	d003      	beq.n	8011fba <xTaskIncrementTick+0xf2>
 8011fb2:	4639      	mov	r1, r7
 8011fb4:	2030      	movs	r0, #48	; 0x30
 8011fb6:	f7f3 fe11 	bl	8005bdc <prvTraceStoreEvent1>
 8011fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fbc:	f8db 1000 	ldr.w	r1, [fp]
 8011fc0:	428a      	cmp	r2, r1
 8011fc2:	d901      	bls.n	8011fc8 <xTaskIncrementTick+0x100>
 8011fc4:	f8cb 2000 	str.w	r2, [fp]
 8011fc8:	4b12      	ldr	r3, [pc, #72]	; (8012014 <xTaskIncrementTick+0x14c>)
 8011fca:	2014      	movs	r0, #20
 8011fcc:	4649      	mov	r1, r9
 8011fce:	fb00 3002 	mla	r0, r0, r2, r3
 8011fd2:	f7fe fbf7 	bl	80107c4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011fd6:	f8d8 1000 	ldr.w	r1, [r8]
 8011fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fdc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	bf28      	it	cs
 8011fe2:	2401      	movcs	r4, #1
 8011fe4:	e7c2      	b.n	8011f6c <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
 8011fe6:	4a04      	ldr	r2, [pc, #16]	; (8011ff8 <xTaskIncrementTick+0x130>)
BaseType_t xSwitchRequired = pdFALSE;
 8011fe8:	2400      	movs	r4, #0
		++uxPendedTicks;
 8011fea:	6813      	ldr	r3, [r2, #0]
 8011fec:	3301      	adds	r3, #1
 8011fee:	6013      	str	r3, [r2, #0]
 8011ff0:	e7b0      	b.n	8011f54 <xTaskIncrementTick+0x8c>
 8011ff2:	bf00      	nop
 8011ff4:	240021ec 	.word	0x240021ec
 8011ff8:	240021e8 	.word	0x240021e8
 8011ffc:	24001670 	.word	0x24001670
 8012000:	24002268 	.word	0x24002268
 8012004:	24001d78 	.word	0x24001d78
 8012008:	24001d7c 	.word	0x24001d7c
 801200c:	24002224 	.word	0x24002224
 8012010:	24002220 	.word	0x24002220
 8012014:	24001d80 	.word	0x24001d80
 8012018:	2400226c 	.word	0x2400226c
 801201c:	2400000a 	.word	0x2400000a
 8012020:	24001d74 	.word	0x24001d74
 8012024:	240021f4 	.word	0x240021f4

08012028 <xTaskResumeAll>:
{
 8012028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 801202c:	4c35      	ldr	r4, [pc, #212]	; (8012104 <xTaskResumeAll+0xdc>)
 801202e:	6823      	ldr	r3, [r4, #0]
 8012030:	b943      	cbnz	r3, 8012044 <xTaskResumeAll+0x1c>
 8012032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012036:	f383 8811 	msr	BASEPRI, r3
 801203a:	f3bf 8f6f 	isb	sy
 801203e:	f3bf 8f4f 	dsb	sy
 8012042:	e7fe      	b.n	8012042 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8012044:	f000 fe16 	bl	8012c74 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8012048:	6823      	ldr	r3, [r4, #0]
 801204a:	3b01      	subs	r3, #1
 801204c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801204e:	6824      	ldr	r4, [r4, #0]
 8012050:	b12c      	cbz	r4, 801205e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8012052:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8012054:	f000 fe30 	bl	8012cb8 <vPortExitCritical>
}
 8012058:	4620      	mov	r0, r4
 801205a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801205e:	4b2a      	ldr	r3, [pc, #168]	; (8012108 <xTaskResumeAll+0xe0>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d0f5      	beq.n	8012052 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012066:	4d29      	ldr	r5, [pc, #164]	; (801210c <xTaskResumeAll+0xe4>)
					prvAddTaskToReadyList( pxTCB );
 8012068:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8012128 <xTaskResumeAll+0x100>
 801206c:	4e28      	ldr	r6, [pc, #160]	; (8012110 <xTaskResumeAll+0xe8>)
 801206e:	e029      	b.n	80120c4 <xTaskResumeAll+0x9c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012070:	68eb      	ldr	r3, [r5, #12]
 8012072:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012074:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012076:	f104 0018 	add.w	r0, r4, #24
 801207a:	f7fe fbc6 	bl	801080a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801207e:	4638      	mov	r0, r7
 8012080:	f7fe fbc3 	bl	801080a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012084:	4620      	mov	r0, r4
 8012086:	f7f3 f873 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 801208a:	f8b8 3000 	ldrh.w	r3, [r8]
 801208e:	4218      	tst	r0, r3
 8012090:	d003      	beq.n	801209a <xTaskResumeAll+0x72>
 8012092:	4621      	mov	r1, r4
 8012094:	2030      	movs	r0, #48	; 0x30
 8012096:	f7f3 fda1 	bl	8005bdc <prvTraceStoreEvent1>
 801209a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801209c:	6832      	ldr	r2, [r6, #0]
 801209e:	4293      	cmp	r3, r2
 80120a0:	d900      	bls.n	80120a4 <xTaskResumeAll+0x7c>
 80120a2:	6033      	str	r3, [r6, #0]
 80120a4:	4a1b      	ldr	r2, [pc, #108]	; (8012114 <xTaskResumeAll+0xec>)
 80120a6:	2014      	movs	r0, #20
 80120a8:	4639      	mov	r1, r7
 80120aa:	fb00 2003 	mla	r0, r0, r3, r2
 80120ae:	f7fe fb89 	bl	80107c4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80120b2:	4b19      	ldr	r3, [pc, #100]	; (8012118 <xTaskResumeAll+0xf0>)
 80120b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d302      	bcc.n	80120c4 <xTaskResumeAll+0x9c>
						xYieldPending = pdTRUE;
 80120be:	4b17      	ldr	r3, [pc, #92]	; (801211c <xTaskResumeAll+0xf4>)
 80120c0:	2201      	movs	r2, #1
 80120c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80120c4:	682b      	ldr	r3, [r5, #0]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d1d2      	bne.n	8012070 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80120ca:	b10c      	cbz	r4, 80120d0 <xTaskResumeAll+0xa8>
					prvResetNextTaskUnblockTime();
 80120cc:	f7ff fd88 	bl	8011be0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80120d0:	4d13      	ldr	r5, [pc, #76]	; (8012120 <xTaskResumeAll+0xf8>)
 80120d2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80120d4:	b144      	cbz	r4, 80120e8 <xTaskResumeAll+0xc0>
								xYieldPending = pdTRUE;
 80120d6:	4e11      	ldr	r6, [pc, #68]	; (801211c <xTaskResumeAll+0xf4>)
 80120d8:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80120da:	f7ff fef5 	bl	8011ec8 <xTaskIncrementTick>
 80120de:	b100      	cbz	r0, 80120e2 <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 80120e0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80120e2:	3c01      	subs	r4, #1
 80120e4:	d1f9      	bne.n	80120da <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 80120e6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80120e8:	4b0c      	ldr	r3, [pc, #48]	; (801211c <xTaskResumeAll+0xf4>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d0b0      	beq.n	8012052 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80120f0:	4b0c      	ldr	r3, [pc, #48]	; (8012124 <xTaskResumeAll+0xfc>)
 80120f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120f6:	601a      	str	r2, [r3, #0]
 80120f8:	f3bf 8f4f 	dsb	sy
 80120fc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8012100:	2401      	movs	r4, #1
 8012102:	e7a7      	b.n	8012054 <xTaskResumeAll+0x2c>
 8012104:	240021ec 	.word	0x240021ec
 8012108:	240021e0 	.word	0x240021e0
 801210c:	24002228 	.word	0x24002228
 8012110:	240021f4 	.word	0x240021f4
 8012114:	24001d80 	.word	0x24001d80
 8012118:	24001d74 	.word	0x24001d74
 801211c:	2400226c 	.word	0x2400226c
 8012120:	240021e8 	.word	0x240021e8
 8012124:	e000ed04 	.word	0xe000ed04
 8012128:	2400000a 	.word	0x2400000a

0801212c <vTaskDelayUntil>:
	{
 801212c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 801212e:	b940      	cbnz	r0, 8012142 <vTaskDelayUntil+0x16>
 8012130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012134:	f383 8811 	msr	BASEPRI, r3
 8012138:	f3bf 8f6f 	isb	sy
 801213c:	f3bf 8f4f 	dsb	sy
 8012140:	e7fe      	b.n	8012140 <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 8012142:	b941      	cbnz	r1, 8012156 <vTaskDelayUntil+0x2a>
 8012144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012148:	f383 8811 	msr	BASEPRI, r3
 801214c:	f3bf 8f6f 	isb	sy
 8012150:	f3bf 8f4f 	dsb	sy
 8012154:	e7fe      	b.n	8012154 <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 8012156:	4b1c      	ldr	r3, [pc, #112]	; (80121c8 <vTaskDelayUntil+0x9c>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	b143      	cbz	r3, 801216e <vTaskDelayUntil+0x42>
 801215c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012160:	f383 8811 	msr	BASEPRI, r3
 8012164:	f3bf 8f6f 	isb	sy
 8012168:	f3bf 8f4f 	dsb	sy
 801216c:	e7fe      	b.n	801216c <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 801216e:	f7ff fe95 	bl	8011e9c <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8012172:	4b16      	ldr	r3, [pc, #88]	; (80121cc <vTaskDelayUntil+0xa0>)
 8012174:	681d      	ldr	r5, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8012176:	6803      	ldr	r3, [r0, #0]
 8012178:	185c      	adds	r4, r3, r1
 801217a:	bf2c      	ite	cs
 801217c:	2201      	movcs	r2, #1
 801217e:	2200      	movcc	r2, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8012180:	42ab      	cmp	r3, r5
			*pxPreviousWakeTime = xTimeToWake;
 8012182:	6004      	str	r4, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 8012184:	d90c      	bls.n	80121a0 <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8012186:	b962      	cbnz	r2, 80121a2 <vTaskDelayUntil+0x76>
		xAlreadyYielded = xTaskResumeAll();
 8012188:	f7ff ff4e 	bl	8012028 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 801218c:	b938      	cbnz	r0, 801219e <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
 801218e:	4b10      	ldr	r3, [pc, #64]	; (80121d0 <vTaskDelayUntil+0xa4>)
 8012190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012194:	601a      	str	r2, [r3, #0]
 8012196:	f3bf 8f4f 	dsb	sy
 801219a:	f3bf 8f6f 	isb	sy
	}
 801219e:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80121a0:	b90a      	cbnz	r2, 80121a6 <vTaskDelayUntil+0x7a>
 80121a2:	42a5      	cmp	r5, r4
 80121a4:	d2f0      	bcs.n	8012188 <vTaskDelayUntil+0x5c>
				traceTASK_DELAY_UNTIL( xTimeToWake );
 80121a6:	f7f3 f917 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 80121aa:	f7f2 ffe1 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 80121ae:	4b09      	ldr	r3, [pc, #36]	; (80121d4 <vTaskDelayUntil+0xa8>)
 80121b0:	881b      	ldrh	r3, [r3, #0]
 80121b2:	4218      	tst	r0, r3
 80121b4:	d003      	beq.n	80121be <vTaskDelayUntil+0x92>
 80121b6:	4621      	mov	r1, r4
 80121b8:	2079      	movs	r0, #121	; 0x79
 80121ba:	f7f3 fd0f 	bl	8005bdc <prvTraceStoreEvent1>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80121be:	2100      	movs	r1, #0
 80121c0:	1b60      	subs	r0, r4, r5
 80121c2:	f7ff fd6b 	bl	8011c9c <prvAddCurrentTaskToDelayedList>
 80121c6:	e7df      	b.n	8012188 <vTaskDelayUntil+0x5c>
 80121c8:	240021ec 	.word	0x240021ec
 80121cc:	24002268 	.word	0x24002268
 80121d0:	e000ed04 	.word	0xe000ed04
 80121d4:	2400000a 	.word	0x2400000a

080121d8 <vTaskDelay>:
	{
 80121d8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80121da:	4604      	mov	r4, r0
 80121dc:	b940      	cbnz	r0, 80121f0 <vTaskDelay+0x18>
			portYIELD_WITHIN_API();
 80121de:	4b16      	ldr	r3, [pc, #88]	; (8012238 <vTaskDelay+0x60>)
 80121e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121e4:	601a      	str	r2, [r3, #0]
 80121e6:	f3bf 8f4f 	dsb	sy
 80121ea:	f3bf 8f6f 	isb	sy
	}
 80121ee:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80121f0:	4b12      	ldr	r3, [pc, #72]	; (801223c <vTaskDelay+0x64>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	b143      	cbz	r3, 8012208 <vTaskDelay+0x30>
 80121f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121fa:	f383 8811 	msr	BASEPRI, r3
 80121fe:	f3bf 8f6f 	isb	sy
 8012202:	f3bf 8f4f 	dsb	sy
 8012206:	e7fe      	b.n	8012206 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012208:	f7ff fe48 	bl	8011e9c <vTaskSuspendAll>
				traceTASK_DELAY();
 801220c:	f7f3 f8e4 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8012210:	f7f2 ffae 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8012214:	4b0a      	ldr	r3, [pc, #40]	; (8012240 <vTaskDelay+0x68>)
 8012216:	881b      	ldrh	r3, [r3, #0]
 8012218:	4218      	tst	r0, r3
 801221a:	d003      	beq.n	8012224 <vTaskDelay+0x4c>
 801221c:	4621      	mov	r1, r4
 801221e:	207a      	movs	r0, #122	; 0x7a
 8012220:	f7f3 fcdc 	bl	8005bdc <prvTraceStoreEvent1>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012224:	2100      	movs	r1, #0
 8012226:	4620      	mov	r0, r4
 8012228:	f7ff fd38 	bl	8011c9c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 801222c:	f7ff fefc 	bl	8012028 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8012230:	2800      	cmp	r0, #0
 8012232:	d0d4      	beq.n	80121de <vTaskDelay+0x6>
 8012234:	e7db      	b.n	80121ee <vTaskDelay+0x16>
 8012236:	bf00      	nop
 8012238:	e000ed04 	.word	0xe000ed04
 801223c:	240021ec 	.word	0x240021ec
 8012240:	2400000a 	.word	0x2400000a

08012244 <vTaskSwitchContext>:
{
 8012244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012246:	4b24      	ldr	r3, [pc, #144]	; (80122d8 <vTaskSwitchContext+0x94>)
 8012248:	681a      	ldr	r2, [r3, #0]
 801224a:	4b24      	ldr	r3, [pc, #144]	; (80122dc <vTaskSwitchContext+0x98>)
 801224c:	b112      	cbz	r2, 8012254 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 801224e:	2201      	movs	r2, #1
 8012250:	601a      	str	r2, [r3, #0]
}
 8012252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8012254:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012256:	2714      	movs	r7, #20
 8012258:	4e21      	ldr	r6, [pc, #132]	; (80122e0 <vTaskSwitchContext+0x9c>)
 801225a:	4a22      	ldr	r2, [pc, #136]	; (80122e4 <vTaskSwitchContext+0xa0>)
 801225c:	6833      	ldr	r3, [r6, #0]
 801225e:	4615      	mov	r5, r2
 8012260:	fb07 f103 	mul.w	r1, r7, r3
 8012264:	5854      	ldr	r4, [r2, r1]
 8012266:	1850      	adds	r0, r2, r1
 8012268:	b34c      	cbz	r4, 80122be <vTaskSwitchContext+0x7a>
 801226a:	6844      	ldr	r4, [r0, #4]
 801226c:	3108      	adds	r1, #8
 801226e:	6864      	ldr	r4, [r4, #4]
 8012270:	440a      	add	r2, r1
 8012272:	4294      	cmp	r4, r2
 8012274:	6044      	str	r4, [r0, #4]
 8012276:	bf08      	it	eq
 8012278:	6862      	ldreq	r2, [r4, #4]
		traceTASK_SWITCHED_IN();
 801227a:	4c1b      	ldr	r4, [pc, #108]	; (80122e8 <vTaskSwitchContext+0xa4>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801227c:	bf08      	it	eq
 801227e:	6042      	streq	r2, [r0, #4]
 8012280:	2214      	movs	r2, #20
 8012282:	fb02 5203 	mla	r2, r2, r3, r5
 8012286:	4d19      	ldr	r5, [pc, #100]	; (80122ec <vTaskSwitchContext+0xa8>)
 8012288:	6852      	ldr	r2, [r2, #4]
 801228a:	68d2      	ldr	r2, [r2, #12]
 801228c:	602a      	str	r2, [r5, #0]
 801228e:	6033      	str	r3, [r6, #0]
		traceTASK_SWITCHED_IN();
 8012290:	2301      	movs	r3, #1
 8012292:	6023      	str	r3, [r4, #0]
 8012294:	f7f3 f8a0 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8012298:	f7f2 ff6a 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 801229c:	4b14      	ldr	r3, [pc, #80]	; (80122f0 <vTaskSwitchContext+0xac>)
 801229e:	881b      	ldrh	r3, [r3, #0]
 80122a0:	4218      	tst	r0, r3
 80122a2:	d009      	beq.n	80122b8 <vTaskSwitchContext+0x74>
 80122a4:	6828      	ldr	r0, [r5, #0]
 80122a6:	f7f3 f899 	bl	80053dc <prvIsNewTCB>
 80122aa:	b128      	cbz	r0, 80122b8 <vTaskSwitchContext+0x74>
 80122ac:	6829      	ldr	r1, [r5, #0]
 80122ae:	2037      	movs	r0, #55	; 0x37
 80122b0:	682b      	ldr	r3, [r5, #0]
 80122b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122b4:	f7f3 fcbe 	bl	8005c34 <prvTraceStoreEvent2>
 80122b8:	2302      	movs	r3, #2
 80122ba:	6023      	str	r3, [r4, #0]
}
 80122bc:	e7c9      	b.n	8012252 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122be:	b943      	cbnz	r3, 80122d2 <vTaskSwitchContext+0x8e>
 80122c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c4:	f383 8811 	msr	BASEPRI, r3
 80122c8:	f3bf 8f6f 	isb	sy
 80122cc:	f3bf 8f4f 	dsb	sy
 80122d0:	e7fe      	b.n	80122d0 <vTaskSwitchContext+0x8c>
 80122d2:	3b01      	subs	r3, #1
 80122d4:	e7c4      	b.n	8012260 <vTaskSwitchContext+0x1c>
 80122d6:	bf00      	nop
 80122d8:	240021ec 	.word	0x240021ec
 80122dc:	2400226c 	.word	0x2400226c
 80122e0:	240021f4 	.word	0x240021f4
 80122e4:	24001d80 	.word	0x24001d80
 80122e8:	2400166c 	.word	0x2400166c
 80122ec:	24001d74 	.word	0x24001d74
 80122f0:	2400000a 	.word	0x2400000a

080122f4 <vTaskPlaceOnEventList>:
{
 80122f4:	b510      	push	{r4, lr}
 80122f6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80122f8:	b940      	cbnz	r0, 801230c <vTaskPlaceOnEventList+0x18>
 80122fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122fe:	f383 8811 	msr	BASEPRI, r3
 8012302:	f3bf 8f6f 	isb	sy
 8012306:	f3bf 8f4f 	dsb	sy
 801230a:	e7fe      	b.n	801230a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801230c:	4b05      	ldr	r3, [pc, #20]	; (8012324 <vTaskPlaceOnEventList+0x30>)
 801230e:	6819      	ldr	r1, [r3, #0]
 8012310:	3118      	adds	r1, #24
 8012312:	f7fe fa63 	bl	80107dc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012316:	4620      	mov	r0, r4
 8012318:	2101      	movs	r1, #1
}
 801231a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801231e:	f7ff bcbd 	b.w	8011c9c <prvAddCurrentTaskToDelayedList>
 8012322:	bf00      	nop
 8012324:	24001d74 	.word	0x24001d74

08012328 <vTaskPlaceOnEventListRestricted>:
	{
 8012328:	b538      	push	{r3, r4, r5, lr}
 801232a:	460c      	mov	r4, r1
 801232c:	4615      	mov	r5, r2
		configASSERT( pxEventList );
 801232e:	b940      	cbnz	r0, 8012342 <vTaskPlaceOnEventListRestricted+0x1a>
 8012330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012334:	f383 8811 	msr	BASEPRI, r3
 8012338:	f3bf 8f6f 	isb	sy
 801233c:	f3bf 8f4f 	dsb	sy
 8012340:	e7fe      	b.n	8012340 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012342:	4b0e      	ldr	r3, [pc, #56]	; (801237c <vTaskPlaceOnEventListRestricted+0x54>)
 8012344:	6819      	ldr	r1, [r3, #0]
 8012346:	3118      	adds	r1, #24
 8012348:	f7fe fa3c 	bl	80107c4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 801234c:	2d00      	cmp	r5, #0
 801234e:	bf18      	it	ne
 8012350:	f04f 34ff 	movne.w	r4, #4294967295
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8012354:	f7f3 f840 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8012358:	f7f2 ff0a 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 801235c:	4b08      	ldr	r3, [pc, #32]	; (8012380 <vTaskPlaceOnEventListRestricted+0x58>)
 801235e:	881b      	ldrh	r3, [r3, #0]
 8012360:	4218      	tst	r0, r3
 8012362:	d005      	beq.n	8012370 <vTaskPlaceOnEventListRestricted+0x48>
 8012364:	4b07      	ldr	r3, [pc, #28]	; (8012384 <vTaskPlaceOnEventListRestricted+0x5c>)
 8012366:	2079      	movs	r0, #121	; 0x79
 8012368:	6819      	ldr	r1, [r3, #0]
 801236a:	4421      	add	r1, r4
 801236c:	f7f3 fc36 	bl	8005bdc <prvTraceStoreEvent1>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012370:	4629      	mov	r1, r5
 8012372:	4620      	mov	r0, r4
	}
 8012374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012378:	f7ff bc90 	b.w	8011c9c <prvAddCurrentTaskToDelayedList>
 801237c:	24001d74 	.word	0x24001d74
 8012380:	2400000a 	.word	0x2400000a
 8012384:	24002268 	.word	0x24002268

08012388 <xTaskRemoveFromEventList>:
{
 8012388:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801238a:	68c3      	ldr	r3, [r0, #12]
 801238c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801238e:	b944      	cbnz	r4, 80123a2 <xTaskRemoveFromEventList+0x1a>
 8012390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012394:	f383 8811 	msr	BASEPRI, r3
 8012398:	f3bf 8f6f 	isb	sy
 801239c:	f3bf 8f4f 	dsb	sy
 80123a0:	e7fe      	b.n	80123a0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80123a2:	f104 0518 	add.w	r5, r4, #24
 80123a6:	4628      	mov	r0, r5
 80123a8:	f7fe fa2f 	bl	801080a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80123ac:	4b16      	ldr	r3, [pc, #88]	; (8012408 <xTaskRemoveFromEventList+0x80>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	bb2b      	cbnz	r3, 80123fe <xTaskRemoveFromEventList+0x76>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80123b2:	1d25      	adds	r5, r4, #4
 80123b4:	4628      	mov	r0, r5
 80123b6:	f7fe fa28 	bl	801080a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80123ba:	4620      	mov	r0, r4
 80123bc:	f7f2 fed8 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 80123c0:	4b12      	ldr	r3, [pc, #72]	; (801240c <xTaskRemoveFromEventList+0x84>)
 80123c2:	881b      	ldrh	r3, [r3, #0]
 80123c4:	4218      	tst	r0, r3
 80123c6:	d003      	beq.n	80123d0 <xTaskRemoveFromEventList+0x48>
 80123c8:	4621      	mov	r1, r4
 80123ca:	2030      	movs	r0, #48	; 0x30
 80123cc:	f7f3 fc06 	bl	8005bdc <prvTraceStoreEvent1>
 80123d0:	4a0f      	ldr	r2, [pc, #60]	; (8012410 <xTaskRemoveFromEventList+0x88>)
 80123d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80123d4:	6811      	ldr	r1, [r2, #0]
 80123d6:	428b      	cmp	r3, r1
 80123d8:	d900      	bls.n	80123dc <xTaskRemoveFromEventList+0x54>
 80123da:	6013      	str	r3, [r2, #0]
 80123dc:	4a0d      	ldr	r2, [pc, #52]	; (8012414 <xTaskRemoveFromEventList+0x8c>)
 80123de:	2014      	movs	r0, #20
 80123e0:	4629      	mov	r1, r5
 80123e2:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80123e6:	f7fe f9ed 	bl	80107c4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80123ea:	4b0b      	ldr	r3, [pc, #44]	; (8012418 <xTaskRemoveFromEventList+0x90>)
 80123ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123f2:	429a      	cmp	r2, r3
 80123f4:	d906      	bls.n	8012404 <xTaskRemoveFromEventList+0x7c>
		xYieldPending = pdTRUE;
 80123f6:	2001      	movs	r0, #1
 80123f8:	4b08      	ldr	r3, [pc, #32]	; (801241c <xTaskRemoveFromEventList+0x94>)
 80123fa:	6018      	str	r0, [r3, #0]
}
 80123fc:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80123fe:	4629      	mov	r1, r5
 8012400:	4807      	ldr	r0, [pc, #28]	; (8012420 <xTaskRemoveFromEventList+0x98>)
 8012402:	e7f0      	b.n	80123e6 <xTaskRemoveFromEventList+0x5e>
		xReturn = pdFALSE;
 8012404:	2000      	movs	r0, #0
	return xReturn;
 8012406:	e7f9      	b.n	80123fc <xTaskRemoveFromEventList+0x74>
 8012408:	240021ec 	.word	0x240021ec
 801240c:	2400000a 	.word	0x2400000a
 8012410:	240021f4 	.word	0x240021f4
 8012414:	24001d80 	.word	0x24001d80
 8012418:	24001d74 	.word	0x24001d74
 801241c:	2400226c 	.word	0x2400226c
 8012420:	24002228 	.word	0x24002228

08012424 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012424:	4b03      	ldr	r3, [pc, #12]	; (8012434 <vTaskInternalSetTimeOutState+0x10>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801242a:	4b03      	ldr	r3, [pc, #12]	; (8012438 <vTaskInternalSetTimeOutState+0x14>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	6043      	str	r3, [r0, #4]
}
 8012430:	4770      	bx	lr
 8012432:	bf00      	nop
 8012434:	24002224 	.word	0x24002224
 8012438:	24002268 	.word	0x24002268

0801243c <xTaskCheckForTimeOut>:
{
 801243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801243e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8012440:	4605      	mov	r5, r0
 8012442:	b940      	cbnz	r0, 8012456 <xTaskCheckForTimeOut+0x1a>
 8012444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012448:	f383 8811 	msr	BASEPRI, r3
 801244c:	f3bf 8f6f 	isb	sy
 8012450:	f3bf 8f4f 	dsb	sy
 8012454:	e7fe      	b.n	8012454 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8012456:	b941      	cbnz	r1, 801246a <xTaskCheckForTimeOut+0x2e>
 8012458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801245c:	f383 8811 	msr	BASEPRI, r3
 8012460:	f3bf 8f6f 	isb	sy
 8012464:	f3bf 8f4f 	dsb	sy
 8012468:	e7fe      	b.n	8012468 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 801246a:	f000 fc03 	bl	8012c74 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801246e:	4b0f      	ldr	r3, [pc, #60]	; (80124ac <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012470:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8012472:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8012474:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012476:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8012478:	1c5e      	adds	r6, r3, #1
 801247a:	d00d      	beq.n	8012498 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801247c:	4e0c      	ldr	r6, [pc, #48]	; (80124b0 <xTaskCheckForTimeOut+0x74>)
 801247e:	682f      	ldr	r7, [r5, #0]
 8012480:	6836      	ldr	r6, [r6, #0]
 8012482:	42b7      	cmp	r7, r6
 8012484:	d001      	beq.n	801248a <xTaskCheckForTimeOut+0x4e>
 8012486:	4288      	cmp	r0, r1
 8012488:	d90d      	bls.n	80124a6 <xTaskCheckForTimeOut+0x6a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801248a:	4293      	cmp	r3, r2
 801248c:	d909      	bls.n	80124a2 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 801248e:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012490:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8012492:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012494:	f7ff ffc6 	bl	8012424 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8012498:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801249a:	f000 fc0d 	bl	8012cb8 <vPortExitCritical>
}
 801249e:	4620      	mov	r0, r4
 80124a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 80124a2:	2300      	movs	r3, #0
 80124a4:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80124a6:	2401      	movs	r4, #1
 80124a8:	e7f7      	b.n	801249a <xTaskCheckForTimeOut+0x5e>
 80124aa:	bf00      	nop
 80124ac:	24002268 	.word	0x24002268
 80124b0:	24002224 	.word	0x24002224

080124b4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80124b4:	4b01      	ldr	r3, [pc, #4]	; (80124bc <vTaskMissedYield+0x8>)
 80124b6:	2201      	movs	r2, #1
 80124b8:	601a      	str	r2, [r3, #0]
}
 80124ba:	4770      	bx	lr
 80124bc:	2400226c 	.word	0x2400226c

080124c0 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
 80124c0:	b100      	cbz	r0, 80124c4 <uxTaskGetTaskNumber+0x4>
			uxReturn = pxTCB->uxTaskNumber;
 80124c2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
 80124c4:	4770      	bx	lr

080124c6 <vTaskSetTaskNumber>:
		if( xTask != NULL )
 80124c6:	b100      	cbz	r0, 80124ca <vTaskSetTaskNumber+0x4>
			pxTCB->uxTaskNumber = uxHandle;
 80124c8:	64c1      	str	r1, [r0, #76]	; 0x4c
	}
 80124ca:	4770      	bx	lr

080124cc <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 80124cc:	b908      	cbnz	r0, 80124d2 <uxTaskGetStackHighWaterMark+0x6>
 80124ce:	4b06      	ldr	r3, [pc, #24]	; (80124e8 <uxTaskGetStackHighWaterMark+0x1c>)
 80124d0:	6818      	ldr	r0, [r3, #0]
 80124d2:	6b02      	ldr	r2, [r0, #48]	; 0x30
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80124d4:	4613      	mov	r3, r2
 80124d6:	1a98      	subs	r0, r3, r2
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80124d8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80124dc:	29a5      	cmp	r1, #165	; 0xa5
 80124de:	d0fa      	beq.n	80124d6 <uxTaskGetStackHighWaterMark+0xa>
	}
 80124e0:	f3c0 008f 	ubfx	r0, r0, #2, #16
 80124e4:	4770      	bx	lr
 80124e6:	bf00      	nop
 80124e8:	24001d74 	.word	0x24001d74

080124ec <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80124ec:	4b01      	ldr	r3, [pc, #4]	; (80124f4 <xTaskGetCurrentTaskHandle+0x8>)
 80124ee:	6818      	ldr	r0, [r3, #0]
	}
 80124f0:	4770      	bx	lr
 80124f2:	bf00      	nop
 80124f4:	24001d74 	.word	0x24001d74

080124f8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80124f8:	4b05      	ldr	r3, [pc, #20]	; (8012510 <xTaskGetSchedulerState+0x18>)
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	b133      	cbz	r3, 801250c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80124fe:	4b05      	ldr	r3, [pc, #20]	; (8012514 <xTaskGetSchedulerState+0x1c>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8012504:	bf0c      	ite	eq
 8012506:	2002      	moveq	r0, #2
 8012508:	2000      	movne	r0, #0
 801250a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 801250c:	2001      	movs	r0, #1
	}
 801250e:	4770      	bx	lr
 8012510:	2400223c 	.word	0x2400223c
 8012514:	240021ec 	.word	0x240021ec

08012518 <xTaskPriorityInherit>:
	{
 8012518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 801251c:	4604      	mov	r4, r0
 801251e:	2800      	cmp	r0, #0
 8012520:	d03e      	beq.n	80125a0 <xTaskPriorityInherit+0x88>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012522:	4a2d      	ldr	r2, [pc, #180]	; (80125d8 <xTaskPriorityInherit+0xc0>)
 8012524:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8012526:	6811      	ldr	r1, [r2, #0]
 8012528:	4615      	mov	r5, r2
 801252a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801252c:	428b      	cmp	r3, r1
 801252e:	d24b      	bcs.n	80125c8 <xTaskPriorityInherit+0xb0>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012530:	6982      	ldr	r2, [r0, #24]
 8012532:	2a00      	cmp	r2, #0
 8012534:	db04      	blt.n	8012540 <xTaskPriorityInherit+0x28>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012536:	682a      	ldr	r2, [r5, #0]
 8012538:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801253a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 801253e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012540:	2214      	movs	r2, #20
 8012542:	4f26      	ldr	r7, [pc, #152]	; (80125dc <xTaskPriorityInherit+0xc4>)
 8012544:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80125e4 <xTaskPriorityInherit+0xcc>
 8012548:	fb02 7303 	mla	r3, r2, r3, r7
 801254c:	6962      	ldr	r2, [r4, #20]
 801254e:	429a      	cmp	r2, r3
 8012550:	d128      	bne.n	80125a4 <xTaskPriorityInherit+0x8c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012552:	1d26      	adds	r6, r4, #4
 8012554:	4630      	mov	r0, r6
 8012556:	f7fe f958 	bl	801080a <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801255a:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801255c:	4620      	mov	r0, r4
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012560:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012562:	f7f2 fe05 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8012566:	f8b8 3000 	ldrh.w	r3, [r8]
 801256a:	4218      	tst	r0, r3
 801256c:	d003      	beq.n	8012576 <xTaskPriorityInherit+0x5e>
 801256e:	4621      	mov	r1, r4
 8012570:	2030      	movs	r0, #48	; 0x30
 8012572:	f7f3 fb33 	bl	8005bdc <prvTraceStoreEvent1>
 8012576:	4a1a      	ldr	r2, [pc, #104]	; (80125e0 <xTaskPriorityInherit+0xc8>)
 8012578:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801257a:	6811      	ldr	r1, [r2, #0]
 801257c:	428b      	cmp	r3, r1
 801257e:	d900      	bls.n	8012582 <xTaskPriorityInherit+0x6a>
 8012580:	6013      	str	r3, [r2, #0]
 8012582:	2014      	movs	r0, #20
 8012584:	4631      	mov	r1, r6
 8012586:	fb00 7003 	mla	r0, r0, r3, r7
 801258a:	f7fe f91b 	bl	80107c4 <vListInsertEnd>
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 801258e:	f7f2 ff23 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8012592:	f7f2 fded 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8012596:	f8b8 3000 	ldrh.w	r3, [r8]
 801259a:	4218      	tst	r0, r3
 801259c:	d106      	bne.n	80125ac <xTaskPriorityInherit+0x94>
				xReturn = pdTRUE;
 801259e:	2001      	movs	r0, #1
	}
 80125a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80125a4:	682b      	ldr	r3, [r5, #0]
 80125a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80125aa:	e7f0      	b.n	801258e <xTaskPriorityInherit+0x76>
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80125ac:	4620      	mov	r0, r4
 80125ae:	f7f2 fddf 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 80125b2:	f8b8 3000 	ldrh.w	r3, [r8]
 80125b6:	4218      	tst	r0, r3
 80125b8:	d0f1      	beq.n	801259e <xTaskPriorityInherit+0x86>
 80125ba:	682b      	ldr	r3, [r5, #0]
 80125bc:	4621      	mov	r1, r4
 80125be:	2005      	movs	r0, #5
 80125c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125c2:	f7f3 fb37 	bl	8005c34 <prvTraceStoreEvent2>
 80125c6:	e7ea      	b.n	801259e <xTaskPriorityInherit+0x86>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80125c8:	6813      	ldr	r3, [r2, #0]
 80125ca:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80125cc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80125ce:	42a0      	cmp	r0, r4
 80125d0:	bf2c      	ite	cs
 80125d2:	2000      	movcs	r0, #0
 80125d4:	2001      	movcc	r0, #1
 80125d6:	e7e3      	b.n	80125a0 <xTaskPriorityInherit+0x88>
 80125d8:	24001d74 	.word	0x24001d74
 80125dc:	24001d80 	.word	0x24001d80
 80125e0:	240021f4 	.word	0x240021f4
 80125e4:	2400000a 	.word	0x2400000a

080125e8 <xTaskPriorityDisinherit>:
	{
 80125e8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80125ea:	4604      	mov	r4, r0
 80125ec:	b908      	cbnz	r0, 80125f2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80125ee:	2000      	movs	r0, #0
	}
 80125f0:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80125f2:	4b2a      	ldr	r3, [pc, #168]	; (801269c <xTaskPriorityDisinherit+0xb4>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	4283      	cmp	r3, r0
 80125f8:	d008      	beq.n	801260c <xTaskPriorityDisinherit+0x24>
 80125fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125fe:	f383 8811 	msr	BASEPRI, r3
 8012602:	f3bf 8f6f 	isb	sy
 8012606:	f3bf 8f4f 	dsb	sy
 801260a:	e7fe      	b.n	801260a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 801260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801260e:	b943      	cbnz	r3, 8012622 <xTaskPriorityDisinherit+0x3a>
 8012610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012614:	f383 8811 	msr	BASEPRI, r3
 8012618:	f3bf 8f6f 	isb	sy
 801261c:	f3bf 8f4f 	dsb	sy
 8012620:	e7fe      	b.n	8012620 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012622:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8012624:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012626:	6d02      	ldr	r2, [r0, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 8012628:	6543      	str	r3, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801262a:	4291      	cmp	r1, r2
 801262c:	d0df      	beq.n	80125ee <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801262e:	2b00      	cmp	r3, #0
 8012630:	d1dd      	bne.n	80125ee <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012632:	1d06      	adds	r6, r0, #4
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8012634:	4d1a      	ldr	r5, [pc, #104]	; (80126a0 <xTaskPriorityDisinherit+0xb8>)
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012636:	4630      	mov	r0, r6
 8012638:	f7fe f8e7 	bl	801080a <uxListRemove>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 801263c:	f7f2 fecc 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8012640:	f7f2 fd96 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8012644:	882b      	ldrh	r3, [r5, #0]
 8012646:	4218      	tst	r0, r3
 8012648:	d00a      	beq.n	8012660 <xTaskPriorityDisinherit+0x78>
 801264a:	4620      	mov	r0, r4
 801264c:	f7f2 fd90 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8012650:	882b      	ldrh	r3, [r5, #0]
 8012652:	4218      	tst	r0, r3
 8012654:	d004      	beq.n	8012660 <xTaskPriorityDisinherit+0x78>
 8012656:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8012658:	4621      	mov	r1, r4
 801265a:	2006      	movs	r0, #6
 801265c:	f7f3 faea 	bl	8005c34 <prvTraceStoreEvent2>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012660:	6d23      	ldr	r3, [r4, #80]	; 0x50
					prvAddTaskToReadyList( pxTCB );
 8012662:	4620      	mov	r0, r4
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012664:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012666:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801266a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801266c:	f7f2 fd80 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8012670:	882b      	ldrh	r3, [r5, #0]
 8012672:	4218      	tst	r0, r3
 8012674:	d003      	beq.n	801267e <xTaskPriorityDisinherit+0x96>
 8012676:	4621      	mov	r1, r4
 8012678:	2030      	movs	r0, #48	; 0x30
 801267a:	f7f3 faaf 	bl	8005bdc <prvTraceStoreEvent1>
 801267e:	4a09      	ldr	r2, [pc, #36]	; (80126a4 <xTaskPriorityDisinherit+0xbc>)
 8012680:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012682:	6811      	ldr	r1, [r2, #0]
 8012684:	428b      	cmp	r3, r1
 8012686:	d900      	bls.n	801268a <xTaskPriorityDisinherit+0xa2>
 8012688:	6013      	str	r3, [r2, #0]
 801268a:	4a07      	ldr	r2, [pc, #28]	; (80126a8 <xTaskPriorityDisinherit+0xc0>)
 801268c:	2014      	movs	r0, #20
 801268e:	4631      	mov	r1, r6
 8012690:	fb00 2003 	mla	r0, r0, r3, r2
 8012694:	f7fe f896 	bl	80107c4 <vListInsertEnd>
					xReturn = pdTRUE;
 8012698:	2001      	movs	r0, #1
		return xReturn;
 801269a:	e7a9      	b.n	80125f0 <xTaskPriorityDisinherit+0x8>
 801269c:	24001d74 	.word	0x24001d74
 80126a0:	2400000a 	.word	0x2400000a
 80126a4:	240021f4 	.word	0x240021f4
 80126a8:	24001d80 	.word	0x24001d80

080126ac <vTaskPriorityDisinheritAfterTimeout>:
	{
 80126ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80126ae:	4604      	mov	r4, r0
 80126b0:	2800      	cmp	r0, #0
 80126b2:	d061      	beq.n	8012778 <vTaskPriorityDisinheritAfterTimeout+0xcc>
			configASSERT( pxTCB->uxMutexesHeld );
 80126b4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80126b6:	b943      	cbnz	r3, 80126ca <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80126b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126bc:	f383 8811 	msr	BASEPRI, r3
 80126c0:	f3bf 8f6f 	isb	sy
 80126c4:	f3bf 8f4f 	dsb	sy
 80126c8:	e7fe      	b.n	80126c8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 80126ca:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80126cc:	4291      	cmp	r1, r2
 80126ce:	bf38      	it	cc
 80126d0:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 80126d2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80126d4:	428a      	cmp	r2, r1
 80126d6:	460d      	mov	r5, r1
 80126d8:	d04e      	beq.n	8012778 <vTaskPriorityDisinheritAfterTimeout+0xcc>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80126da:	2b01      	cmp	r3, #1
 80126dc:	d14c      	bne.n	8012778 <vTaskPriorityDisinheritAfterTimeout+0xcc>
					configASSERT( pxTCB != pxCurrentTCB );
 80126de:	4b27      	ldr	r3, [pc, #156]	; (801277c <vTaskPriorityDisinheritAfterTimeout+0xd0>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	4283      	cmp	r3, r0
 80126e4:	d108      	bne.n	80126f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 80126e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ea:	f383 8811 	msr	BASEPRI, r3
 80126ee:	f3bf 8f6f 	isb	sy
 80126f2:	f3bf 8f4f 	dsb	sy
 80126f6:	e7fe      	b.n	80126f6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80126f8:	4e21      	ldr	r6, [pc, #132]	; (8012780 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 80126fa:	f7f2 fe6d 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 80126fe:	f7f2 fd37 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8012702:	8833      	ldrh	r3, [r6, #0]
 8012704:	4218      	tst	r0, r3
 8012706:	d00a      	beq.n	801271e <vTaskPriorityDisinheritAfterTimeout+0x72>
 8012708:	4620      	mov	r0, r4
 801270a:	f7f2 fd31 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 801270e:	8833      	ldrh	r3, [r6, #0]
 8012710:	4218      	tst	r0, r3
 8012712:	d004      	beq.n	801271e <vTaskPriorityDisinheritAfterTimeout+0x72>
 8012714:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8012716:	4621      	mov	r1, r4
 8012718:	2006      	movs	r0, #6
 801271a:	f7f3 fa8b 	bl	8005c34 <prvTraceStoreEvent2>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801271e:	69a2      	ldr	r2, [r4, #24]
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012720:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012722:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012724:	4f17      	ldr	r7, [pc, #92]	; (8012784 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8012726:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 801272a:	62e5      	str	r5, [r4, #44]	; 0x2c
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801272c:	bfa8      	it	ge
 801272e:	f1c5 0538 	rsbge	r5, r5, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012732:	fb02 7303 	mla	r3, r2, r3, r7
 8012736:	6962      	ldr	r2, [r4, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012738:	bfa8      	it	ge
 801273a:	61a5      	strge	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801273c:	429a      	cmp	r2, r3
 801273e:	d11b      	bne.n	8012778 <vTaskPriorityDisinheritAfterTimeout+0xcc>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012740:	1d25      	adds	r5, r4, #4
 8012742:	4628      	mov	r0, r5
 8012744:	f7fe f861 	bl	801080a <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8012748:	4620      	mov	r0, r4
 801274a:	f7f2 fd11 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 801274e:	8833      	ldrh	r3, [r6, #0]
 8012750:	4218      	tst	r0, r3
 8012752:	d003      	beq.n	801275c <vTaskPriorityDisinheritAfterTimeout+0xb0>
 8012754:	4621      	mov	r1, r4
 8012756:	2030      	movs	r0, #48	; 0x30
 8012758:	f7f3 fa40 	bl	8005bdc <prvTraceStoreEvent1>
 801275c:	4a0a      	ldr	r2, [pc, #40]	; (8012788 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 801275e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012760:	6811      	ldr	r1, [r2, #0]
 8012762:	428b      	cmp	r3, r1
 8012764:	d900      	bls.n	8012768 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8012766:	6013      	str	r3, [r2, #0]
 8012768:	2014      	movs	r0, #20
 801276a:	4629      	mov	r1, r5
 801276c:	fb00 7003 	mla	r0, r0, r3, r7
	}
 8012770:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8012774:	f7fe b826 	b.w	80107c4 <vListInsertEnd>
	}
 8012778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801277a:	bf00      	nop
 801277c:	24001d74 	.word	0x24001d74
 8012780:	2400000a 	.word	0x2400000a
 8012784:	24001d80 	.word	0x24001d80
 8012788:	240021f4 	.word	0x240021f4

0801278c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801278c:	4b04      	ldr	r3, [pc, #16]	; (80127a0 <pvTaskIncrementMutexHeldCount+0x14>)
 801278e:	681a      	ldr	r2, [r3, #0]
 8012790:	b11a      	cbz	r2, 801279a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8012792:	6819      	ldr	r1, [r3, #0]
 8012794:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8012796:	3201      	adds	r2, #1
 8012798:	654a      	str	r2, [r1, #84]	; 0x54
		return pxCurrentTCB;
 801279a:	6818      	ldr	r0, [r3, #0]
	}
 801279c:	4770      	bx	lr
 801279e:	bf00      	nop
 80127a0:	24001d74 	.word	0x24001d74

080127a4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80127a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80127a6:	4c11      	ldr	r4, [pc, #68]	; (80127ec <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80127a8:	f000 fa64 	bl	8012c74 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80127ac:	6825      	ldr	r5, [r4, #0]
 80127ae:	b9bd      	cbnz	r5, 80127e0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80127b0:	4f0f      	ldr	r7, [pc, #60]	; (80127f0 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80127b2:	4e10      	ldr	r6, [pc, #64]	; (80127f4 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80127b4:	4638      	mov	r0, r7
 80127b6:	f7fd fff7 	bl	80107a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80127ba:	4630      	mov	r0, r6
 80127bc:	f7fd fff4 	bl	80107a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80127c0:	4b0d      	ldr	r3, [pc, #52]	; (80127f8 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80127c2:	4a0e      	ldr	r2, [pc, #56]	; (80127fc <prvCheckForValidListAndQueue+0x58>)
 80127c4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80127c6:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80127c8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80127ca:	4b0d      	ldr	r3, [pc, #52]	; (8012800 <prvCheckForValidListAndQueue+0x5c>)
 80127cc:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80127ce:	9500      	str	r5, [sp, #0]
 80127d0:	4b0c      	ldr	r3, [pc, #48]	; (8012804 <prvCheckForValidListAndQueue+0x60>)
 80127d2:	f7fe f93b 	bl	8010a4c <xQueueGenericCreateStatic>
 80127d6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80127d8:	b110      	cbz	r0, 80127e0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80127da:	490b      	ldr	r1, [pc, #44]	; (8012808 <prvCheckForValidListAndQueue+0x64>)
 80127dc:	f7ff f860 	bl	80118a0 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80127e0:	b003      	add	sp, #12
 80127e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80127e6:	f000 ba67 	b.w	8012cb8 <vPortExitCritical>
 80127ea:	bf00      	nop
 80127ec:	24002394 	.word	0x24002394
 80127f0:	24002318 	.word	0x24002318
 80127f4:	2400232c 	.word	0x2400232c
 80127f8:	24002270 	.word	0x24002270
 80127fc:	24002278 	.word	0x24002278
 8012800:	24002274 	.word	0x24002274
 8012804:	24002344 	.word	0x24002344
 8012808:	08015f60 	.word	0x08015f60

0801280c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 801280c:	4291      	cmp	r1, r2
{
 801280e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012810:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012812:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8012814:	d80a      	bhi.n	801282c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012816:	1ad2      	subs	r2, r2, r3
 8012818:	6983      	ldr	r3, [r0, #24]
 801281a:	429a      	cmp	r2, r3
 801281c:	d20d      	bcs.n	801283a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801281e:	1d01      	adds	r1, r0, #4
 8012820:	4b07      	ldr	r3, [pc, #28]	; (8012840 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012822:	6818      	ldr	r0, [r3, #0]
 8012824:	f7fd ffda 	bl	80107dc <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8012828:	2000      	movs	r0, #0
}
 801282a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801282c:	429a      	cmp	r2, r3
 801282e:	d201      	bcs.n	8012834 <prvInsertTimerInActiveList+0x28>
 8012830:	4299      	cmp	r1, r3
 8012832:	d202      	bcs.n	801283a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012834:	1d01      	adds	r1, r0, #4
 8012836:	4b03      	ldr	r3, [pc, #12]	; (8012844 <prvInsertTimerInActiveList+0x38>)
 8012838:	e7f3      	b.n	8012822 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 801283a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 801283c:	e7f5      	b.n	801282a <prvInsertTimerInActiveList+0x1e>
 801283e:	bf00      	nop
 8012840:	24002274 	.word	0x24002274
 8012844:	24002270 	.word	0x24002270

08012848 <xTimerCreateTimerTask>:
{
 8012848:	b510      	push	{r4, lr}
 801284a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 801284c:	f7ff ffaa 	bl	80127a4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8012850:	4b12      	ldr	r3, [pc, #72]	; (801289c <xTimerCreateTimerTask+0x54>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	b1b3      	cbz	r3, 8012884 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012856:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012858:	aa07      	add	r2, sp, #28
 801285a:	a906      	add	r1, sp, #24
 801285c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801285e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012862:	f7fd ff95 	bl	8010790 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012866:	9b05      	ldr	r3, [sp, #20]
 8012868:	9a07      	ldr	r2, [sp, #28]
 801286a:	9302      	str	r3, [sp, #8]
 801286c:	9b06      	ldr	r3, [sp, #24]
 801286e:	490c      	ldr	r1, [pc, #48]	; (80128a0 <xTimerCreateTimerTask+0x58>)
 8012870:	9301      	str	r3, [sp, #4]
 8012872:	2302      	movs	r3, #2
 8012874:	480b      	ldr	r0, [pc, #44]	; (80128a4 <xTimerCreateTimerTask+0x5c>)
 8012876:	9300      	str	r3, [sp, #0]
 8012878:	4623      	mov	r3, r4
 801287a:	f7ff fa49 	bl	8011d10 <xTaskCreateStatic>
 801287e:	4b0a      	ldr	r3, [pc, #40]	; (80128a8 <xTimerCreateTimerTask+0x60>)
 8012880:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8012882:	b940      	cbnz	r0, 8012896 <xTimerCreateTimerTask+0x4e>
 8012884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012888:	f383 8811 	msr	BASEPRI, r3
 801288c:	f3bf 8f6f 	isb	sy
 8012890:	f3bf 8f4f 	dsb	sy
 8012894:	e7fe      	b.n	8012894 <xTimerCreateTimerTask+0x4c>
}
 8012896:	2001      	movs	r0, #1
 8012898:	b008      	add	sp, #32
 801289a:	bd10      	pop	{r4, pc}
 801289c:	24002394 	.word	0x24002394
 80128a0:	08015f65 	.word	0x08015f65
 80128a4:	08012985 	.word	0x08012985
 80128a8:	24002398 	.word	0x24002398

080128ac <xTimerGenericCommand>:
{
 80128ac:	b530      	push	{r4, r5, lr}
 80128ae:	4615      	mov	r5, r2
 80128b0:	b085      	sub	sp, #20
 80128b2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80128b4:	4603      	mov	r3, r0
 80128b6:	b940      	cbnz	r0, 80128ca <xTimerGenericCommand+0x1e>
 80128b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128bc:	f383 8811 	msr	BASEPRI, r3
 80128c0:	f3bf 8f6f 	isb	sy
 80128c4:	f3bf 8f4f 	dsb	sy
 80128c8:	e7fe      	b.n	80128c8 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 80128ca:	4c0d      	ldr	r4, [pc, #52]	; (8012900 <xTimerGenericCommand+0x54>)
 80128cc:	6820      	ldr	r0, [r4, #0]
 80128ce:	b178      	cbz	r0, 80128f0 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80128d0:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80128d2:	9302      	str	r3, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80128d4:	e9cd 1500 	strd	r1, r5, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80128d8:	dc0c      	bgt.n	80128f4 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80128da:	f7ff fe0d 	bl	80124f8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80128de:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80128e0:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80128e2:	4669      	mov	r1, sp
 80128e4:	6820      	ldr	r0, [r4, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80128e6:	bf0c      	ite	eq
 80128e8:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80128ea:	461a      	movne	r2, r3
 80128ec:	f7fe f9d6 	bl	8010c9c <xQueueGenericSend>
}
 80128f0:	b005      	add	sp, #20
 80128f2:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80128f4:	2300      	movs	r3, #0
 80128f6:	4669      	mov	r1, sp
 80128f8:	f7fe fb4c 	bl	8010f94 <xQueueGenericSendFromISR>
 80128fc:	e7f8      	b.n	80128f0 <xTimerGenericCommand+0x44>
 80128fe:	bf00      	nop
 8012900:	24002394 	.word	0x24002394

08012904 <prvSwitchTimerLists>:
{
 8012904:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012908:	4d1c      	ldr	r5, [pc, #112]	; (801297c <prvSwitchTimerLists+0x78>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801290a:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801290e:	682b      	ldr	r3, [r5, #0]
 8012910:	681a      	ldr	r2, [r3, #0]
 8012912:	b932      	cbnz	r2, 8012922 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8012914:	4a1a      	ldr	r2, [pc, #104]	; (8012980 <prvSwitchTimerLists+0x7c>)
 8012916:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012918:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 801291a:	6029      	str	r1, [r5, #0]
}
 801291c:	b002      	add	sp, #8
 801291e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012922:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012924:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012926:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012928:	1d27      	adds	r7, r4, #4
 801292a:	4638      	mov	r0, r7
 801292c:	f7fd ff6d 	bl	801080a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012930:	6a23      	ldr	r3, [r4, #32]
 8012932:	4620      	mov	r0, r4
 8012934:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012936:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801293a:	075b      	lsls	r3, r3, #29
 801293c:	d5e7      	bpl.n	801290e <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801293e:	69a3      	ldr	r3, [r4, #24]
 8012940:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8012942:	429e      	cmp	r6, r3
 8012944:	d206      	bcs.n	8012954 <prvSwitchTimerLists+0x50>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012946:	6063      	str	r3, [r4, #4]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012948:	4639      	mov	r1, r7
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801294a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801294c:	6828      	ldr	r0, [r5, #0]
 801294e:	f7fd ff45 	bl	80107dc <vListInsert>
 8012952:	e7dc      	b.n	801290e <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012954:	2300      	movs	r3, #0
 8012956:	f8cd 8000 	str.w	r8, [sp]
 801295a:	4632      	mov	r2, r6
 801295c:	4620      	mov	r0, r4
 801295e:	4619      	mov	r1, r3
 8012960:	f7ff ffa4 	bl	80128ac <xTimerGenericCommand>
				configASSERT( xResult );
 8012964:	2800      	cmp	r0, #0
 8012966:	d1d2      	bne.n	801290e <prvSwitchTimerLists+0xa>
 8012968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801296c:	f383 8811 	msr	BASEPRI, r3
 8012970:	f3bf 8f6f 	isb	sy
 8012974:	f3bf 8f4f 	dsb	sy
 8012978:	e7fe      	b.n	8012978 <prvSwitchTimerLists+0x74>
 801297a:	bf00      	nop
 801297c:	24002270 	.word	0x24002270
 8012980:	24002274 	.word	0x24002274

08012984 <prvTimerTask>:
{
 8012984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012988:	4d81      	ldr	r5, [pc, #516]	; (8012b90 <prvTimerTask+0x20c>)
{
 801298a:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 801298c:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8012b9c <prvTimerTask+0x218>
 8012990:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012992:	682a      	ldr	r2, [r5, #0]
 8012994:	6813      	ldr	r3, [r2, #0]
 8012996:	b353      	cbz	r3, 80129ee <prvTimerTask+0x6a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012998:	68d3      	ldr	r3, [r2, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801299a:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801299c:	f8d3 9000 	ldr.w	r9, [r3]
	if( xTimeNow < xLastTime )
 80129a0:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8012ba0 <prvTimerTask+0x21c>
	vTaskSuspendAll();
 80129a4:	f7ff fa7a 	bl	8011e9c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80129a8:	f7ff fa80 	bl	8011eac <xTaskGetTickCount>
 80129ac:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80129ae:	f8db 3000 	ldr.w	r3, [fp]
 80129b2:	465e      	mov	r6, fp
 80129b4:	4298      	cmp	r0, r3
 80129b6:	d31d      	bcc.n	80129f4 <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 80129b8:	f8cb 0000 	str.w	r0, [fp]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80129bc:	b32c      	cbz	r4, 8012a0a <prvTimerTask+0x86>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80129be:	4b75      	ldr	r3, [pc, #468]	; (8012b94 <prvTimerTask+0x210>)
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	681a      	ldr	r2, [r3, #0]
 80129c4:	fab2 f282 	clz	r2, r2
 80129c8:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80129ca:	4b73      	ldr	r3, [pc, #460]	; (8012b98 <prvTimerTask+0x214>)
 80129cc:	eba9 010a 	sub.w	r1, r9, sl
 80129d0:	6818      	ldr	r0, [r3, #0]
 80129d2:	f7fe ffdb 	bl	801198c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80129d6:	f7ff fb27 	bl	8012028 <xTaskResumeAll>
 80129da:	b988      	cbnz	r0, 8012a00 <prvTimerTask+0x7c>
					portYIELD_WITHIN_API();
 80129dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80129e0:	f8c8 3000 	str.w	r3, [r8]
 80129e4:	f3bf 8f4f 	dsb	sy
 80129e8:	f3bf 8f6f 	isb	sy
 80129ec:	e008      	b.n	8012a00 <prvTimerTask+0x7c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80129ee:	2401      	movs	r4, #1
		xNextExpireTime = ( TickType_t ) 0U;
 80129f0:	4699      	mov	r9, r3
 80129f2:	e7d5      	b.n	80129a0 <prvTimerTask+0x1c>
		prvSwitchTimerLists();
 80129f4:	f7ff ff86 	bl	8012904 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80129f8:	f8cb a000 	str.w	sl, [fp]
			( void ) xTaskResumeAll();
 80129fc:	f7ff fb14 	bl	8012028 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012a00:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8012b98 <prvTimerTask+0x214>
 8012a04:	f04f 0a00 	mov.w	sl, #0
 8012a08:	e07d      	b.n	8012b06 <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012a0a:	4581      	cmp	r9, r0
 8012a0c:	d830      	bhi.n	8012a70 <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 8012a0e:	f7ff fb0b 	bl	8012028 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	68db      	ldr	r3, [r3, #12]
 8012a16:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012a1a:	f10b 0004 	add.w	r0, fp, #4
 8012a1e:	f7fd fef4 	bl	801080a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012a22:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
 8012a26:	0758      	lsls	r0, r3, #29
 8012a28:	d519      	bpl.n	8012a5e <prvTimerTask+0xda>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012a2a:	f8db 1018 	ldr.w	r1, [fp, #24]
 8012a2e:	464b      	mov	r3, r9
 8012a30:	4652      	mov	r2, sl
 8012a32:	4658      	mov	r0, fp
 8012a34:	4449      	add	r1, r9
 8012a36:	f7ff fee9 	bl	801280c <prvInsertTimerInActiveList>
 8012a3a:	b1a0      	cbz	r0, 8012a66 <prvTimerTask+0xe2>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012a3c:	9400      	str	r4, [sp, #0]
 8012a3e:	4623      	mov	r3, r4
 8012a40:	464a      	mov	r2, r9
 8012a42:	4621      	mov	r1, r4
 8012a44:	4658      	mov	r0, fp
 8012a46:	f7ff ff31 	bl	80128ac <xTimerGenericCommand>
			configASSERT( xResult );
 8012a4a:	b960      	cbnz	r0, 8012a66 <prvTimerTask+0xe2>
 8012a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a50:	f383 8811 	msr	BASEPRI, r3
 8012a54:	f3bf 8f6f 	isb	sy
 8012a58:	f3bf 8f4f 	dsb	sy
 8012a5c:	e7fe      	b.n	8012a5c <prvTimerTask+0xd8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012a5e:	f023 0301 	bic.w	r3, r3, #1
 8012a62:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012a66:	f8db 3020 	ldr.w	r3, [fp, #32]
 8012a6a:	4658      	mov	r0, fp
 8012a6c:	4798      	blx	r3
 8012a6e:	e7c7      	b.n	8012a00 <prvTimerTask+0x7c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012a70:	4622      	mov	r2, r4
 8012a72:	e7aa      	b.n	80129ca <prvTimerTask+0x46>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012a74:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012a78:	465a      	mov	r2, fp
 8012a7a:	69a1      	ldr	r1, [r4, #24]
 8012a7c:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012a7e:	f043 0301 	orr.w	r3, r3, #1
 8012a82:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012a86:	9b03      	ldr	r3, [sp, #12]
 8012a88:	4419      	add	r1, r3
 8012a8a:	f7ff febf 	bl	801280c <prvInsertTimerInActiveList>
 8012a8e:	2800      	cmp	r0, #0
 8012a90:	d039      	beq.n	8012b06 <prvTimerTask+0x182>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012a92:	6a23      	ldr	r3, [r4, #32]
 8012a94:	4620      	mov	r0, r4
 8012a96:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012a98:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012a9c:	0759      	lsls	r1, r3, #29
 8012a9e:	d532      	bpl.n	8012b06 <prvTimerTask+0x182>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012aa0:	69a2      	ldr	r2, [r4, #24]
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	9903      	ldr	r1, [sp, #12]
 8012aa6:	4620      	mov	r0, r4
 8012aa8:	f8cd a000 	str.w	sl, [sp]
 8012aac:	440a      	add	r2, r1
 8012aae:	4619      	mov	r1, r3
 8012ab0:	f7ff fefc 	bl	80128ac <xTimerGenericCommand>
							configASSERT( xResult );
 8012ab4:	bb38      	cbnz	r0, 8012b06 <prvTimerTask+0x182>
 8012ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aba:	f383 8811 	msr	BASEPRI, r3
 8012abe:	f3bf 8f6f 	isb	sy
 8012ac2:	f3bf 8f4f 	dsb	sy
 8012ac6:	e7fe      	b.n	8012ac6 <prvTimerTask+0x142>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012ac8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012acc:	f023 0301 	bic.w	r3, r3, #1
 8012ad0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8012ad4:	e017      	b.n	8012b06 <prvTimerTask+0x182>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012ad6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012ada:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012adc:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012ae0:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012ae2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012ae6:	b941      	cbnz	r1, 8012afa <prvTimerTask+0x176>
 8012ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aec:	f383 8811 	msr	BASEPRI, r3
 8012af0:	f3bf 8f6f 	isb	sy
 8012af4:	f3bf 8f4f 	dsb	sy
 8012af8:	e7fe      	b.n	8012af8 <prvTimerTask+0x174>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012afa:	465b      	mov	r3, fp
 8012afc:	465a      	mov	r2, fp
 8012afe:	4459      	add	r1, fp
 8012b00:	4620      	mov	r0, r4
 8012b02:	f7ff fe83 	bl	801280c <prvInsertTimerInActiveList>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012b06:	2200      	movs	r2, #0
 8012b08:	a902      	add	r1, sp, #8
 8012b0a:	f8d9 0000 	ldr.w	r0, [r9]
 8012b0e:	f7fe fb73 	bl	80111f8 <xQueueReceive>
 8012b12:	2800      	cmp	r0, #0
 8012b14:	f43f af3d 	beq.w	8012992 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012b18:	9b02      	ldr	r3, [sp, #8]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	da03      	bge.n	8012b26 <prvTimerTask+0x1a2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012b1e:	9b03      	ldr	r3, [sp, #12]
 8012b20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b24:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012b26:	9b02      	ldr	r3, [sp, #8]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	dbec      	blt.n	8012b06 <prvTimerTask+0x182>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012b2c:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012b2e:	6963      	ldr	r3, [r4, #20]
 8012b30:	b113      	cbz	r3, 8012b38 <prvTimerTask+0x1b4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012b32:	1d20      	adds	r0, r4, #4
 8012b34:	f7fd fe69 	bl	801080a <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8012b38:	f7ff f9b8 	bl	8011eac <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8012b3c:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8012b3e:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8012b40:	4298      	cmp	r0, r3
 8012b42:	d201      	bcs.n	8012b48 <prvTimerTask+0x1c4>
		prvSwitchTimerLists();
 8012b44:	f7ff fede 	bl	8012904 <prvSwitchTimerLists>
			switch( xMessage.xMessageID )
 8012b48:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8012b4a:	f8c6 b000 	str.w	fp, [r6]
			switch( xMessage.xMessageID )
 8012b4e:	2b09      	cmp	r3, #9
 8012b50:	d8d9      	bhi.n	8012b06 <prvTimerTask+0x182>
 8012b52:	a201      	add	r2, pc, #4	; (adr r2, 8012b58 <prvTimerTask+0x1d4>)
 8012b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b58:	08012a75 	.word	0x08012a75
 8012b5c:	08012a75 	.word	0x08012a75
 8012b60:	08012a75 	.word	0x08012a75
 8012b64:	08012ac9 	.word	0x08012ac9
 8012b68:	08012ad7 	.word	0x08012ad7
 8012b6c:	08012b81 	.word	0x08012b81
 8012b70:	08012a75 	.word	0x08012a75
 8012b74:	08012a75 	.word	0x08012a75
 8012b78:	08012ac9 	.word	0x08012ac9
 8012b7c:	08012ad7 	.word	0x08012ad7
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012b80:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012b84:	079a      	lsls	r2, r3, #30
 8012b86:	d4a1      	bmi.n	8012acc <prvTimerTask+0x148>
							vPortFree( pxTimer );
 8012b88:	4620      	mov	r0, r4
 8012b8a:	f000 fa89 	bl	80130a0 <vPortFree>
 8012b8e:	e7ba      	b.n	8012b06 <prvTimerTask+0x182>
 8012b90:	24002270 	.word	0x24002270
 8012b94:	24002274 	.word	0x24002274
 8012b98:	24002394 	.word	0x24002394
 8012b9c:	e000ed04 	.word	0xe000ed04
 8012ba0:	24002340 	.word	0x24002340

08012ba4 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 8012ba4:	2300      	movs	r3, #0
{
 8012ba6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8012ba8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012baa:	4b0d      	ldr	r3, [pc, #52]	; (8012be0 <prvTaskExitError+0x3c>)
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	3301      	adds	r3, #1
 8012bb0:	d008      	beq.n	8012bc4 <prvTaskExitError+0x20>
 8012bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb6:	f383 8811 	msr	BASEPRI, r3
 8012bba:	f3bf 8f6f 	isb	sy
 8012bbe:	f3bf 8f4f 	dsb	sy
 8012bc2:	e7fe      	b.n	8012bc2 <prvTaskExitError+0x1e>
 8012bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bc8:	f383 8811 	msr	BASEPRI, r3
 8012bcc:	f3bf 8f6f 	isb	sy
 8012bd0:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012bd4:	9b01      	ldr	r3, [sp, #4]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d0fc      	beq.n	8012bd4 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012bda:	b002      	add	sp, #8
 8012bdc:	4770      	bx	lr
 8012bde:	bf00      	nop
 8012be0:	2400013c 	.word	0x2400013c

08012be4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012be4:	4808      	ldr	r0, [pc, #32]	; (8012c08 <prvPortStartFirstTask+0x24>)
 8012be6:	6800      	ldr	r0, [r0, #0]
 8012be8:	6800      	ldr	r0, [r0, #0]
 8012bea:	f380 8808 	msr	MSP, r0
 8012bee:	f04f 0000 	mov.w	r0, #0
 8012bf2:	f380 8814 	msr	CONTROL, r0
 8012bf6:	b662      	cpsie	i
 8012bf8:	b661      	cpsie	f
 8012bfa:	f3bf 8f4f 	dsb	sy
 8012bfe:	f3bf 8f6f 	isb	sy
 8012c02:	df00      	svc	0
 8012c04:	bf00      	nop
 8012c06:	0000      	.short	0x0000
 8012c08:	e000ed08 	.word	0xe000ed08

08012c0c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012c0c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012c1c <vPortEnableVFP+0x10>
 8012c10:	6801      	ldr	r1, [r0, #0]
 8012c12:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012c16:	6001      	str	r1, [r0, #0]
 8012c18:	4770      	bx	lr
 8012c1a:	0000      	.short	0x0000
 8012c1c:	e000ed88 	.word	0xe000ed88

08012c20 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012c24:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012c28:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8012c2c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012c2e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012c30:	4b03      	ldr	r3, [pc, #12]	; (8012c40 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012c32:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012c34:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012c36:	f06f 0302 	mvn.w	r3, #2
 8012c3a:	6203      	str	r3, [r0, #32]
}
 8012c3c:	4770      	bx	lr
 8012c3e:	bf00      	nop
 8012c40:	08012ba5 	.word	0x08012ba5
	...

08012c50 <SVC_Handler>:
	__asm volatile (
 8012c50:	4b07      	ldr	r3, [pc, #28]	; (8012c70 <pxCurrentTCBConst2>)
 8012c52:	6819      	ldr	r1, [r3, #0]
 8012c54:	6808      	ldr	r0, [r1, #0]
 8012c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c5a:	f380 8809 	msr	PSP, r0
 8012c5e:	f3bf 8f6f 	isb	sy
 8012c62:	f04f 0000 	mov.w	r0, #0
 8012c66:	f380 8811 	msr	BASEPRI, r0
 8012c6a:	4770      	bx	lr
 8012c6c:	f3af 8000 	nop.w

08012c70 <pxCurrentTCBConst2>:
 8012c70:	24001d74 	.word	0x24001d74

08012c74 <vPortEnterCritical>:
 8012c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c78:	f383 8811 	msr	BASEPRI, r3
 8012c7c:	f3bf 8f6f 	isb	sy
 8012c80:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8012c84:	4a0a      	ldr	r2, [pc, #40]	; (8012cb0 <vPortEnterCritical+0x3c>)
 8012c86:	6813      	ldr	r3, [r2, #0]
 8012c88:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8012c8a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8012c8c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8012c8e:	d10d      	bne.n	8012cac <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012c90:	4b08      	ldr	r3, [pc, #32]	; (8012cb4 <vPortEnterCritical+0x40>)
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012c98:	d008      	beq.n	8012cac <vPortEnterCritical+0x38>
 8012c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c9e:	f383 8811 	msr	BASEPRI, r3
 8012ca2:	f3bf 8f6f 	isb	sy
 8012ca6:	f3bf 8f4f 	dsb	sy
 8012caa:	e7fe      	b.n	8012caa <vPortEnterCritical+0x36>
}
 8012cac:	4770      	bx	lr
 8012cae:	bf00      	nop
 8012cb0:	2400013c 	.word	0x2400013c
 8012cb4:	e000ed04 	.word	0xe000ed04

08012cb8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8012cb8:	4a08      	ldr	r2, [pc, #32]	; (8012cdc <vPortExitCritical+0x24>)
 8012cba:	6813      	ldr	r3, [r2, #0]
 8012cbc:	b943      	cbnz	r3, 8012cd0 <vPortExitCritical+0x18>
 8012cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc2:	f383 8811 	msr	BASEPRI, r3
 8012cc6:	f3bf 8f6f 	isb	sy
 8012cca:	f3bf 8f4f 	dsb	sy
 8012cce:	e7fe      	b.n	8012cce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8012cd0:	3b01      	subs	r3, #1
 8012cd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012cd4:	b90b      	cbnz	r3, 8012cda <vPortExitCritical+0x22>
	__asm volatile
 8012cd6:	f383 8811 	msr	BASEPRI, r3
}
 8012cda:	4770      	bx	lr
 8012cdc:	2400013c 	.word	0x2400013c

08012ce0 <PendSV_Handler>:
	__asm volatile
 8012ce0:	f3ef 8009 	mrs	r0, PSP
 8012ce4:	f3bf 8f6f 	isb	sy
 8012ce8:	4b15      	ldr	r3, [pc, #84]	; (8012d40 <pxCurrentTCBConst>)
 8012cea:	681a      	ldr	r2, [r3, #0]
 8012cec:	f01e 0f10 	tst.w	lr, #16
 8012cf0:	bf08      	it	eq
 8012cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cfa:	6010      	str	r0, [r2, #0]
 8012cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012d00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012d04:	f380 8811 	msr	BASEPRI, r0
 8012d08:	f3bf 8f4f 	dsb	sy
 8012d0c:	f3bf 8f6f 	isb	sy
 8012d10:	f7ff fa98 	bl	8012244 <vTaskSwitchContext>
 8012d14:	f04f 0000 	mov.w	r0, #0
 8012d18:	f380 8811 	msr	BASEPRI, r0
 8012d1c:	bc09      	pop	{r0, r3}
 8012d1e:	6819      	ldr	r1, [r3, #0]
 8012d20:	6808      	ldr	r0, [r1, #0]
 8012d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d26:	f01e 0f10 	tst.w	lr, #16
 8012d2a:	bf08      	it	eq
 8012d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012d30:	f380 8809 	msr	PSP, r0
 8012d34:	f3bf 8f6f 	isb	sy
 8012d38:	4770      	bx	lr
 8012d3a:	bf00      	nop
 8012d3c:	f3af 8000 	nop.w

08012d40 <pxCurrentTCBConst>:
 8012d40:	24001d74 	.word	0x24001d74

08012d44 <xPortSysTickHandler>:
{
 8012d44:	b508      	push	{r3, lr}
	__asm volatile
 8012d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d4a:	f383 8811 	msr	BASEPRI, r3
 8012d4e:	f3bf 8f6f 	isb	sy
 8012d52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8012d56:	f7ff f8b7 	bl	8011ec8 <xTaskIncrementTick>
 8012d5a:	b118      	cbz	r0, 8012d64 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012d5c:	4b03      	ldr	r3, [pc, #12]	; (8012d6c <xPortSysTickHandler+0x28>)
 8012d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d62:	601a      	str	r2, [r3, #0]
	__asm volatile
 8012d64:	2300      	movs	r3, #0
 8012d66:	f383 8811 	msr	BASEPRI, r3
}
 8012d6a:	bd08      	pop	{r3, pc}
 8012d6c:	e000ed04 	.word	0xe000ed04

08012d70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012d70:	2300      	movs	r3, #0
 8012d72:	4a08      	ldr	r2, [pc, #32]	; (8012d94 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012d74:	4908      	ldr	r1, [pc, #32]	; (8012d98 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012d76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012d78:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012d7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012d7e:	4b07      	ldr	r3, [pc, #28]	; (8012d9c <vPortSetupTimerInterrupt+0x2c>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8012d86:	4906      	ldr	r1, [pc, #24]	; (8012da0 <vPortSetupTimerInterrupt+0x30>)
 8012d88:	3b01      	subs	r3, #1
 8012d8a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012d8c:	2307      	movs	r3, #7
 8012d8e:	6013      	str	r3, [r2, #0]
}
 8012d90:	4770      	bx	lr
 8012d92:	bf00      	nop
 8012d94:	e000e010 	.word	0xe000e010
 8012d98:	e000e018 	.word	0xe000e018
 8012d9c:	24000000 	.word	0x24000000
 8012da0:	e000e014 	.word	0xe000e014

08012da4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012da4:	4b38      	ldr	r3, [pc, #224]	; (8012e88 <xPortStartScheduler+0xe4>)
 8012da6:	4a39      	ldr	r2, [pc, #228]	; (8012e8c <xPortStartScheduler+0xe8>)
{
 8012da8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012daa:	6819      	ldr	r1, [r3, #0]
 8012dac:	4291      	cmp	r1, r2
 8012dae:	d108      	bne.n	8012dc2 <xPortStartScheduler+0x1e>
	__asm volatile
 8012db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db4:	f383 8811 	msr	BASEPRI, r3
 8012db8:	f3bf 8f6f 	isb	sy
 8012dbc:	f3bf 8f4f 	dsb	sy
 8012dc0:	e7fe      	b.n	8012dc0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012dc2:	681a      	ldr	r2, [r3, #0]
 8012dc4:	4b32      	ldr	r3, [pc, #200]	; (8012e90 <xPortStartScheduler+0xec>)
 8012dc6:	429a      	cmp	r2, r3
 8012dc8:	d108      	bne.n	8012ddc <xPortStartScheduler+0x38>
 8012dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dce:	f383 8811 	msr	BASEPRI, r3
 8012dd2:	f3bf 8f6f 	isb	sy
 8012dd6:	f3bf 8f4f 	dsb	sy
 8012dda:	e7fe      	b.n	8012dda <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012ddc:	4b2d      	ldr	r3, [pc, #180]	; (8012e94 <xPortStartScheduler+0xf0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012dde:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012de0:	781a      	ldrb	r2, [r3, #0]
 8012de2:	b2d2      	uxtb	r2, r2
 8012de4:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012de6:	22ff      	movs	r2, #255	; 0xff
 8012de8:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012dea:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012dec:	4a2a      	ldr	r2, [pc, #168]	; (8012e98 <xPortStartScheduler+0xf4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012dee:	b2db      	uxtb	r3, r3
 8012df0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012df4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012df8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012dfc:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012dfe:	2207      	movs	r2, #7
 8012e00:	4b26      	ldr	r3, [pc, #152]	; (8012e9c <xPortStartScheduler+0xf8>)
 8012e02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012e04:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012e08:	1e54      	subs	r4, r2, #1
 8012e0a:	0600      	lsls	r0, r0, #24
 8012e0c:	d40d      	bmi.n	8012e2a <xPortStartScheduler+0x86>
 8012e0e:	b101      	cbz	r1, 8012e12 <xPortStartScheduler+0x6e>
 8012e10:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8012e12:	681a      	ldr	r2, [r3, #0]
 8012e14:	2a03      	cmp	r2, #3
 8012e16:	d011      	beq.n	8012e3c <xPortStartScheduler+0x98>
 8012e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e1c:	f383 8811 	msr	BASEPRI, r3
 8012e20:	f3bf 8f6f 	isb	sy
 8012e24:	f3bf 8f4f 	dsb	sy
 8012e28:	e7fe      	b.n	8012e28 <xPortStartScheduler+0x84>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012e2a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012e2e:	2101      	movs	r1, #1
 8012e30:	0052      	lsls	r2, r2, #1
 8012e32:	b2d2      	uxtb	r2, r2
 8012e34:	f88d 2003 	strb.w	r2, [sp, #3]
 8012e38:	4622      	mov	r2, r4
 8012e3a:	e7e3      	b.n	8012e04 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012e3c:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 8012e3e:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012e40:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8012e44:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012e46:	9b01      	ldr	r3, [sp, #4]
 8012e48:	4a12      	ldr	r2, [pc, #72]	; (8012e94 <xPortStartScheduler+0xf0>)
 8012e4a:	b2db      	uxtb	r3, r3
 8012e4c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012e4e:	4b14      	ldr	r3, [pc, #80]	; (8012ea0 <xPortStartScheduler+0xfc>)
 8012e50:	681a      	ldr	r2, [r3, #0]
 8012e52:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8012e56:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012e58:	681a      	ldr	r2, [r3, #0]
 8012e5a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8012e5e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8012e60:	f7ff ff86 	bl	8012d70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8012e64:	4b0f      	ldr	r3, [pc, #60]	; (8012ea4 <xPortStartScheduler+0x100>)
 8012e66:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8012e68:	f7ff fed0 	bl	8012c0c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012e6c:	4a0e      	ldr	r2, [pc, #56]	; (8012ea8 <xPortStartScheduler+0x104>)
 8012e6e:	6813      	ldr	r3, [r2, #0]
 8012e70:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012e74:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8012e76:	f7ff feb5 	bl	8012be4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8012e7a:	f7ff f9e3 	bl	8012244 <vTaskSwitchContext>
	prvTaskExitError();
 8012e7e:	f7ff fe91 	bl	8012ba4 <prvTaskExitError>
}
 8012e82:	4620      	mov	r0, r4
 8012e84:	b002      	add	sp, #8
 8012e86:	bd10      	pop	{r4, pc}
 8012e88:	e000ed00 	.word	0xe000ed00
 8012e8c:	410fc271 	.word	0x410fc271
 8012e90:	410fc270 	.word	0x410fc270
 8012e94:	e000e400 	.word	0xe000e400
 8012e98:	2400239c 	.word	0x2400239c
 8012e9c:	240023a0 	.word	0x240023a0
 8012ea0:	e000ed20 	.word	0xe000ed20
 8012ea4:	2400013c 	.word	0x2400013c
 8012ea8:	e000ef34 	.word	0xe000ef34

08012eac <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012eac:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012eb0:	2b0f      	cmp	r3, #15
 8012eb2:	d90e      	bls.n	8012ed2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012eb4:	4a10      	ldr	r2, [pc, #64]	; (8012ef8 <vPortValidateInterruptPriority+0x4c>)
 8012eb6:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012eb8:	4a10      	ldr	r2, [pc, #64]	; (8012efc <vPortValidateInterruptPriority+0x50>)
 8012eba:	7812      	ldrb	r2, [r2, #0]
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d908      	bls.n	8012ed2 <vPortValidateInterruptPriority+0x26>
 8012ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec4:	f383 8811 	msr	BASEPRI, r3
 8012ec8:	f3bf 8f6f 	isb	sy
 8012ecc:	f3bf 8f4f 	dsb	sy
 8012ed0:	e7fe      	b.n	8012ed0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012ed2:	4b0b      	ldr	r3, [pc, #44]	; (8012f00 <vPortValidateInterruptPriority+0x54>)
 8012ed4:	4a0b      	ldr	r2, [pc, #44]	; (8012f04 <vPortValidateInterruptPriority+0x58>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	6812      	ldr	r2, [r2, #0]
 8012eda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012ede:	4293      	cmp	r3, r2
 8012ee0:	d908      	bls.n	8012ef4 <vPortValidateInterruptPriority+0x48>
 8012ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ee6:	f383 8811 	msr	BASEPRI, r3
 8012eea:	f3bf 8f6f 	isb	sy
 8012eee:	f3bf 8f4f 	dsb	sy
 8012ef2:	e7fe      	b.n	8012ef2 <vPortValidateInterruptPriority+0x46>
	}
 8012ef4:	4770      	bx	lr
 8012ef6:	bf00      	nop
 8012ef8:	e000e3f0 	.word	0xe000e3f0
 8012efc:	2400239c 	.word	0x2400239c
 8012f00:	e000ed0c 	.word	0xe000ed0c
 8012f04:	240023a0 	.word	0x240023a0

08012f08 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012f08:	4b0f      	ldr	r3, [pc, #60]	; (8012f48 <prvInsertBlockIntoFreeList+0x40>)
{
 8012f0a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012f0c:	681a      	ldr	r2, [r3, #0]
 8012f0e:	4282      	cmp	r2, r0
 8012f10:	d318      	bcc.n	8012f44 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012f12:	685c      	ldr	r4, [r3, #4]
 8012f14:	1919      	adds	r1, r3, r4
 8012f16:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012f18:	bf01      	itttt	eq
 8012f1a:	6841      	ldreq	r1, [r0, #4]
 8012f1c:	4618      	moveq	r0, r3
 8012f1e:	1909      	addeq	r1, r1, r4
 8012f20:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012f22:	6844      	ldr	r4, [r0, #4]
 8012f24:	1901      	adds	r1, r0, r4
 8012f26:	428a      	cmp	r2, r1
 8012f28:	d107      	bne.n	8012f3a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012f2a:	4908      	ldr	r1, [pc, #32]	; (8012f4c <prvInsertBlockIntoFreeList+0x44>)
 8012f2c:	6809      	ldr	r1, [r1, #0]
 8012f2e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012f30:	bf1f      	itttt	ne
 8012f32:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012f34:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012f36:	1909      	addne	r1, r1, r4
 8012f38:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012f3a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012f3c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012f3e:	bf18      	it	ne
 8012f40:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012f42:	bd10      	pop	{r4, pc}
 8012f44:	4613      	mov	r3, r2
 8012f46:	e7e1      	b.n	8012f0c <prvInsertBlockIntoFreeList+0x4>
 8012f48:	24009bb4 	.word	0x24009bb4
 8012f4c:	240023a4 	.word	0x240023a4

08012f50 <pvPortMalloc>:
{
 8012f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f54:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8012f56:	f7fe ffa1 	bl	8011e9c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8012f5a:	4949      	ldr	r1, [pc, #292]	; (8013080 <pvPortMalloc+0x130>)
 8012f5c:	4d49      	ldr	r5, [pc, #292]	; (8013084 <pvPortMalloc+0x134>)
 8012f5e:	680b      	ldr	r3, [r1, #0]
 8012f60:	bb03      	cbnz	r3, 8012fa4 <pvPortMalloc+0x54>
	uxAddress = ( size_t ) ucHeap;
 8012f62:	4a49      	ldr	r2, [pc, #292]	; (8013088 <pvPortMalloc+0x138>)
	xStart.xBlockSize = ( size_t ) 0;
 8012f64:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012f66:	0756      	lsls	r6, r2, #29
 8012f68:	f502 43f0 	add.w	r3, r2, #30720	; 0x7800
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012f6c:	4e47      	ldr	r6, [pc, #284]	; (801308c <pvPortMalloc+0x13c>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012f6e:	bf14      	ite	ne
 8012f70:	3207      	addne	r2, #7
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012f72:	f44f 43f0 	moveq.w	r3, #30720	; 0x7800
	xStart.xBlockSize = ( size_t ) 0;
 8012f76:	6070      	str	r0, [r6, #4]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012f78:	bf1c      	itt	ne
 8012f7a:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012f7e:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012f80:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012f82:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8012f84:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012f86:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8012f8a:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012f8e:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8012f90:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012f92:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012f96:	4b3e      	ldr	r3, [pc, #248]	; (8013090 <pvPortMalloc+0x140>)
 8012f98:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012f9a:	4b3e      	ldr	r3, [pc, #248]	; (8013094 <pvPortMalloc+0x144>)
 8012f9c:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012f9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012fa2:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012fa4:	f8d5 8000 	ldr.w	r8, [r5]
 8012fa8:	ea18 0f04 	tst.w	r8, r4
 8012fac:	d160      	bne.n	8013070 <pvPortMalloc+0x120>
			if( xWantedSize > 0 )
 8012fae:	2c00      	cmp	r4, #0
 8012fb0:	d05e      	beq.n	8013070 <pvPortMalloc+0x120>
				xWantedSize += xHeapStructSize;
 8012fb2:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012fb4:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012fb6:	bf1c      	itt	ne
 8012fb8:	f024 0407 	bicne.w	r4, r4, #7
 8012fbc:	3408      	addne	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012fbe:	2c00      	cmp	r4, #0
 8012fc0:	d056      	beq.n	8013070 <pvPortMalloc+0x120>
 8012fc2:	4b34      	ldr	r3, [pc, #208]	; (8013094 <pvPortMalloc+0x144>)
 8012fc4:	681f      	ldr	r7, [r3, #0]
 8012fc6:	4699      	mov	r9, r3
 8012fc8:	42a7      	cmp	r7, r4
 8012fca:	d351      	bcc.n	8013070 <pvPortMalloc+0x120>
				pxBlock = xStart.pxNextFreeBlock;
 8012fcc:	4b2f      	ldr	r3, [pc, #188]	; (801308c <pvPortMalloc+0x13c>)
 8012fce:	681e      	ldr	r6, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012fd0:	6870      	ldr	r0, [r6, #4]
 8012fd2:	42a0      	cmp	r0, r4
 8012fd4:	d201      	bcs.n	8012fda <pvPortMalloc+0x8a>
 8012fd6:	6832      	ldr	r2, [r6, #0]
 8012fd8:	b9a2      	cbnz	r2, 8013004 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 8012fda:	680a      	ldr	r2, [r1, #0]
 8012fdc:	42b2      	cmp	r2, r6
 8012fde:	d047      	beq.n	8013070 <pvPortMalloc+0x120>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012fe0:	6832      	ldr	r2, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012fe2:	681d      	ldr	r5, [r3, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012fe4:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012fe6:	1b03      	subs	r3, r0, r4
 8012fe8:	2b10      	cmp	r3, #16
 8012fea:	d912      	bls.n	8013012 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012fec:	1930      	adds	r0, r6, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012fee:	0742      	lsls	r2, r0, #29
 8012ff0:	d00b      	beq.n	801300a <pvPortMalloc+0xba>
 8012ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff6:	f383 8811 	msr	BASEPRI, r3
 8012ffa:	f3bf 8f6f 	isb	sy
 8012ffe:	f3bf 8f4f 	dsb	sy
 8013002:	e7fe      	b.n	8013002 <pvPortMalloc+0xb2>
 8013004:	4633      	mov	r3, r6
 8013006:	4616      	mov	r6, r2
 8013008:	e7e2      	b.n	8012fd0 <pvPortMalloc+0x80>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801300a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801300c:	6074      	str	r4, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801300e:	f7ff ff7b 	bl	8012f08 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013012:	6872      	ldr	r2, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013014:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013016:	491e      	ldr	r1, [pc, #120]	; (8013090 <pvPortMalloc+0x140>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013018:	1abf      	subs	r7, r7, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801301a:	ea48 0202 	orr.w	r2, r8, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801301e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013020:	f8c9 7000 	str.w	r7, [r9]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013024:	4287      	cmp	r7, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013026:	6072      	str	r2, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013028:	6033      	str	r3, [r6, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801302a:	bf38      	it	cc
 801302c:	600f      	strcc	r7, [r1, #0]
		traceMALLOC( pvReturn, xWantedSize );
 801302e:	3508      	adds	r5, #8
 8013030:	d003      	beq.n	801303a <pvPortMalloc+0xea>
 8013032:	4a19      	ldr	r2, [pc, #100]	; (8013098 <pvPortMalloc+0x148>)
 8013034:	6813      	ldr	r3, [r2, #0]
 8013036:	4423      	add	r3, r4
 8013038:	6013      	str	r3, [r2, #0]
 801303a:	f7f2 f9cd 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 801303e:	f7f2 f897 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8013042:	4b16      	ldr	r3, [pc, #88]	; (801309c <pvPortMalloc+0x14c>)
 8013044:	881b      	ldrh	r3, [r3, #0]
 8013046:	4218      	tst	r0, r3
 8013048:	d005      	beq.n	8013056 <pvPortMalloc+0x106>
 801304a:	4622      	mov	r2, r4
 801304c:	4629      	mov	r1, r5
 801304e:	b18d      	cbz	r5, 8013074 <pvPortMalloc+0x124>
 8013050:	2038      	movs	r0, #56	; 0x38
 8013052:	f7f2 fdef 	bl	8005c34 <prvTraceStoreEvent2>
	( void ) xTaskResumeAll();
 8013056:	f7fe ffe7 	bl	8012028 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801305a:	076b      	lsls	r3, r5, #29
 801305c:	d00c      	beq.n	8013078 <pvPortMalloc+0x128>
 801305e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013062:	f383 8811 	msr	BASEPRI, r3
 8013066:	f3bf 8f6f 	isb	sy
 801306a:	f3bf 8f4f 	dsb	sy
 801306e:	e7fe      	b.n	801306e <pvPortMalloc+0x11e>
void *pvReturn = NULL;
 8013070:	2500      	movs	r5, #0
 8013072:	e7e2      	b.n	801303a <pvPortMalloc+0xea>
		traceMALLOC( pvReturn, xWantedSize );
 8013074:	20e9      	movs	r0, #233	; 0xe9
 8013076:	e7ec      	b.n	8013052 <pvPortMalloc+0x102>
}
 8013078:	4628      	mov	r0, r5
 801307a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801307e:	bf00      	nop
 8013080:	240023a4 	.word	0x240023a4
 8013084:	24009ba8 	.word	0x24009ba8
 8013088:	240023a8 	.word	0x240023a8
 801308c:	24009bb4 	.word	0x24009bb4
 8013090:	24009bb0 	.word	0x24009bb0
 8013094:	24009bac 	.word	0x24009bac
 8013098:	24001668 	.word	0x24001668
 801309c:	2400000a 	.word	0x2400000a

080130a0 <vPortFree>:
{
 80130a0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80130a2:	4604      	mov	r4, r0
 80130a4:	2800      	cmp	r0, #0
 80130a6:	d041      	beq.n	801312c <vPortFree+0x8c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80130a8:	4a21      	ldr	r2, [pc, #132]	; (8013130 <vPortFree+0x90>)
 80130aa:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80130ae:	6812      	ldr	r2, [r2, #0]
 80130b0:	4213      	tst	r3, r2
 80130b2:	d108      	bne.n	80130c6 <vPortFree+0x26>
 80130b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130b8:	f383 8811 	msr	BASEPRI, r3
 80130bc:	f3bf 8f6f 	isb	sy
 80130c0:	f3bf 8f4f 	dsb	sy
 80130c4:	e7fe      	b.n	80130c4 <vPortFree+0x24>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80130c6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80130ca:	b141      	cbz	r1, 80130de <vPortFree+0x3e>
 80130cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130d0:	f383 8811 	msr	BASEPRI, r3
 80130d4:	f3bf 8f6f 	isb	sy
 80130d8:	f3bf 8f4f 	dsb	sy
 80130dc:	e7fe      	b.n	80130dc <vPortFree+0x3c>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80130de:	ea23 0302 	bic.w	r3, r3, r2
 80130e2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80130e6:	f7fe fed9 	bl	8011e9c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80130ea:	4b12      	ldr	r3, [pc, #72]	; (8013134 <vPortFree+0x94>)
 80130ec:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80130f0:	681a      	ldr	r2, [r3, #0]
 80130f2:	440a      	add	r2, r1
 80130f4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
 80130f6:	4a10      	ldr	r2, [pc, #64]	; (8013138 <vPortFree+0x98>)
 80130f8:	6813      	ldr	r3, [r2, #0]
 80130fa:	1a5b      	subs	r3, r3, r1
 80130fc:	6013      	str	r3, [r2, #0]
 80130fe:	f7f2 f96b 	bl	80053d8 <prvTraceGetCurrentTaskHandle>
 8013102:	f7f2 f835 	bl	8005170 <prvTraceGetTaskNumberHigh16>
 8013106:	4b0d      	ldr	r3, [pc, #52]	; (801313c <vPortFree+0x9c>)
 8013108:	881b      	ldrh	r3, [r3, #0]
 801310a:	4218      	tst	r0, r3
 801310c:	d006      	beq.n	801311c <vPortFree+0x7c>
 801310e:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8013112:	4621      	mov	r1, r4
 8013114:	2039      	movs	r0, #57	; 0x39
 8013116:	4252      	negs	r2, r2
 8013118:	f7f2 fd8c 	bl	8005c34 <prvTraceStoreEvent2>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801311c:	f1a4 0008 	sub.w	r0, r4, #8
 8013120:	f7ff fef2 	bl	8012f08 <prvInsertBlockIntoFreeList>
}
 8013124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8013128:	f7fe bf7e 	b.w	8012028 <xTaskResumeAll>
}
 801312c:	bd10      	pop	{r4, pc}
 801312e:	bf00      	nop
 8013130:	24009ba8 	.word	0x24009ba8
 8013134:	24009bac 	.word	0x24009bac
 8013138:	24001668 	.word	0x24001668
 801313c:	2400000a 	.word	0x2400000a

08013140 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013140:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013142:	2200      	movs	r2, #0
 8013144:	490f      	ldr	r1, [pc, #60]	; (8013184 <MX_USB_DEVICE_Init+0x44>)
 8013146:	4810      	ldr	r0, [pc, #64]	; (8013188 <MX_USB_DEVICE_Init+0x48>)
 8013148:	f7fa ffea 	bl	800e120 <USBD_Init>
 801314c:	b108      	cbz	r0, 8013152 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 801314e:	f7f0 f91d 	bl	800338c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013152:	490e      	ldr	r1, [pc, #56]	; (801318c <MX_USB_DEVICE_Init+0x4c>)
 8013154:	480c      	ldr	r0, [pc, #48]	; (8013188 <MX_USB_DEVICE_Init+0x48>)
 8013156:	f7fa fffb 	bl	800e150 <USBD_RegisterClass>
 801315a:	b108      	cbz	r0, 8013160 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 801315c:	f7f0 f916 	bl	800338c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013160:	490b      	ldr	r1, [pc, #44]	; (8013190 <MX_USB_DEVICE_Init+0x50>)
 8013162:	4809      	ldr	r0, [pc, #36]	; (8013188 <MX_USB_DEVICE_Init+0x48>)
 8013164:	f7fa ff9c 	bl	800e0a0 <USBD_CDC_RegisterInterface>
 8013168:	b108      	cbz	r0, 801316e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 801316a:	f7f0 f90f 	bl	800338c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801316e:	4806      	ldr	r0, [pc, #24]	; (8013188 <MX_USB_DEVICE_Init+0x48>)
 8013170:	f7fb f801 	bl	800e176 <USBD_Start>
 8013174:	b108      	cbz	r0, 801317a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8013176:	f7f0 f909 	bl	800338c <Error_Handler>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801317a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 801317e:	f7f5 bc95 	b.w	8008aac <HAL_PWREx_EnableUSBVoltageDetector>
 8013182:	bf00      	nop
 8013184:	24000154 	.word	0x24000154
 8013188:	240249b4 	.word	0x240249b4
 801318c:	2400002c 	.word	0x2400002c
 8013190:	24000140 	.word	0x24000140

08013194 <CDC_DeInit_FS>:
 */
static int8_t CDC_DeInit_FS(void) {
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
	/* USER CODE END 4 */
}
 8013194:	2000      	movs	r0, #0
 8013196:	4770      	bx	lr

08013198 <CDC_Control_FS>:
		break;
	}

	return (USBD_OK);
	/* USER CODE END 5 */
}
 8013198:	2000      	movs	r0, #0
 801319a:	4770      	bx	lr

0801319c <CDC_TransmitCplt_FS>:
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
}
 801319c:	2000      	movs	r0, #0
 801319e:	4770      	bx	lr

080131a0 <CDC_Receive_FS>:
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 80131a0:	b570      	push	{r4, r5, r6, lr}
	for (uint32_t i = 0; i < *Len; i++) {
 80131a2:	4602      	mov	r2, r0
		commandBuffer.data[commandBuffer.idx] = Buf[i];
 80131a4:	4c0a      	ldr	r4, [pc, #40]	; (80131d0 <CDC_Receive_FS+0x30>)
	for (uint32_t i = 0; i < *Len; i++) {
 80131a6:	1a13      	subs	r3, r2, r0
 80131a8:	680d      	ldr	r5, [r1, #0]
 80131aa:	429d      	cmp	r5, r3
 80131ac:	d808      	bhi.n	80131c0 <CDC_Receive_FS+0x20>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80131ae:	4601      	mov	r1, r0
 80131b0:	4808      	ldr	r0, [pc, #32]	; (80131d4 <CDC_Receive_FS+0x34>)
 80131b2:	f7fa ff84 	bl	800e0be <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80131b6:	4807      	ldr	r0, [pc, #28]	; (80131d4 <CDC_Receive_FS+0x34>)
 80131b8:	f7fa ff9f 	bl	800e0fa <USBD_CDC_ReceivePacket>
}
 80131bc:	2000      	movs	r0, #0
 80131be:	bd70      	pop	{r4, r5, r6, pc}
		commandBuffer.data[commandBuffer.idx] = Buf[i];
 80131c0:	6823      	ldr	r3, [r4, #0]
 80131c2:	f812 6b01 	ldrb.w	r6, [r2], #1
 80131c6:	18e5      	adds	r5, r4, r3
		commandBuffer.idx++;
 80131c8:	3301      	adds	r3, #1
		commandBuffer.data[commandBuffer.idx] = Buf[i];
 80131ca:	712e      	strb	r6, [r5, #4]
		commandBuffer.idx++;
 80131cc:	6023      	str	r3, [r4, #0]
 80131ce:	e7ea      	b.n	80131a6 <CDC_Receive_FS+0x6>
 80131d0:	24009bc4 	.word	0x24009bc4
 80131d4:	240249b4 	.word	0x240249b4

080131d8 <CDC_Init_FS>:
static int8_t CDC_Init_FS(void) {
 80131d8:	b510      	push	{r4, lr}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80131da:	4c06      	ldr	r4, [pc, #24]	; (80131f4 <CDC_Init_FS+0x1c>)
 80131dc:	2200      	movs	r2, #0
 80131de:	4906      	ldr	r1, [pc, #24]	; (80131f8 <CDC_Init_FS+0x20>)
 80131e0:	4620      	mov	r0, r4
 80131e2:	f7fa ff64 	bl	800e0ae <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80131e6:	4905      	ldr	r1, [pc, #20]	; (80131fc <CDC_Init_FS+0x24>)
 80131e8:	4620      	mov	r0, r4
 80131ea:	f7fa ff68 	bl	800e0be <USBD_CDC_SetRxBuffer>
}
 80131ee:	2000      	movs	r0, #0
 80131f0:	bd10      	pop	{r4, pc}
 80131f2:	bf00      	nop
 80131f4:	240249b4 	.word	0x240249b4
 80131f8:	24025484 	.word	0x24025484
 80131fc:	24024c84 	.word	0x24024c84

08013200 <CDC_Transmit_FS>:
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len) {
 8013200:	b510      	push	{r4, lr}
	USBD_CDC_HandleTypeDef *hcdc =
 8013202:	4c0b      	ldr	r4, [pc, #44]	; (8013230 <CDC_Transmit_FS+0x30>)
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len) {
 8013204:	460a      	mov	r2, r1
	USBD_CDC_HandleTypeDef *hcdc =
 8013206:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
	if (hcdc->TxState != 0) {
 801320a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801320e:	b963      	cbnz	r3, 801322a <CDC_Transmit_FS+0x2a>
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013210:	4601      	mov	r1, r0
 8013212:	4620      	mov	r0, r4
 8013214:	f7fa ff4b 	bl	800e0ae <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013218:	4620      	mov	r0, r4
 801321a:	f7fa ff56 	bl	800e0ca <USBD_CDC_TransmitPacket>
 801321e:	4604      	mov	r4, r0
	osDelay(2);
 8013220:	2002      	movs	r0, #2
 8013222:	f7fd f81d 	bl	8010260 <osDelay>
}
 8013226:	4620      	mov	r0, r4
 8013228:	bd10      	pop	{r4, pc}
		return USBD_BUSY;
 801322a:	2401      	movs	r4, #1
 801322c:	e7fb      	b.n	8013226 <CDC_Transmit_FS+0x26>
 801322e:	bf00      	nop
 8013230:	240249b4 	.word	0x240249b4

08013234 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013234:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8013236:	4801      	ldr	r0, [pc, #4]	; (801323c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8013238:	800b      	strh	r3, [r1, #0]
}
 801323a:	4770      	bx	lr
 801323c:	24000170 	.word	0x24000170

08013240 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013240:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8013242:	4801      	ldr	r0, [pc, #4]	; (8013248 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8013244:	800b      	strh	r3, [r1, #0]
}
 8013246:	4770      	bx	lr
 8013248:	24000184 	.word	0x24000184

0801324c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801324c:	2300      	movs	r3, #0
 801324e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8013250:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 8013252:	0f05      	lsrs	r5, r0, #28
    value = value << 4;
 8013254:	0100      	lsls	r0, r0, #4
 8013256:	b2ec      	uxtb	r4, r5
    if (((value >> 28)) < 0xA)
 8013258:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 801325a:	bf94      	ite	ls
 801325c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801325e:	3437      	addhi	r4, #55	; 0x37
 8013260:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8013264:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8013268:	3301      	adds	r3, #1
 801326a:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 801326c:	b2dc      	uxtb	r4, r3
 801326e:	42a2      	cmp	r2, r4
 8013270:	d8ef      	bhi.n	8013252 <IntToUnicode+0x6>
  }
}
 8013272:	bd70      	pop	{r4, r5, r6, pc}

08013274 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8013274:	231a      	movs	r3, #26
{
 8013276:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8013278:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801327a:	4b09      	ldr	r3, [pc, #36]	; (80132a0 <USBD_FS_SerialStrDescriptor+0x2c>)
 801327c:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801327e:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8013280:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8013282:	18c0      	adds	r0, r0, r3
 8013284:	d00a      	beq.n	801329c <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013286:	4b07      	ldr	r3, [pc, #28]	; (80132a4 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013288:	2208      	movs	r2, #8
 801328a:	4907      	ldr	r1, [pc, #28]	; (80132a8 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801328c:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801328e:	f7ff ffdd 	bl	801324c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013292:	2204      	movs	r2, #4
 8013294:	4905      	ldr	r1, [pc, #20]	; (80132ac <USBD_FS_SerialStrDescriptor+0x38>)
 8013296:	4620      	mov	r0, r4
 8013298:	f7ff ffd8 	bl	801324c <IntToUnicode>
}
 801329c:	4804      	ldr	r0, [pc, #16]	; (80132b0 <USBD_FS_SerialStrDescriptor+0x3c>)
 801329e:	bd10      	pop	{r4, pc}
 80132a0:	1ff1e800 	.word	0x1ff1e800
 80132a4:	1ff1e804 	.word	0x1ff1e804
 80132a8:	2400018a 	.word	0x2400018a
 80132ac:	2400019a 	.word	0x2400019a
 80132b0:	24000188 	.word	0x24000188

080132b4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80132b4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80132b6:	4c04      	ldr	r4, [pc, #16]	; (80132c8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80132b8:	460a      	mov	r2, r1
 80132ba:	4804      	ldr	r0, [pc, #16]	; (80132cc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80132bc:	4621      	mov	r1, r4
 80132be:	f7fb fa9d 	bl	800e7fc <USBD_GetString>
}
 80132c2:	4620      	mov	r0, r4
 80132c4:	bd10      	pop	{r4, pc}
 80132c6:	bf00      	nop
 80132c8:	24025c84 	.word	0x24025c84
 80132cc:	08015f86 	.word	0x08015f86

080132d0 <USBD_FS_ProductStrDescriptor>:
{
 80132d0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80132d2:	4c04      	ldr	r4, [pc, #16]	; (80132e4 <USBD_FS_ProductStrDescriptor+0x14>)
 80132d4:	460a      	mov	r2, r1
 80132d6:	4804      	ldr	r0, [pc, #16]	; (80132e8 <USBD_FS_ProductStrDescriptor+0x18>)
 80132d8:	4621      	mov	r1, r4
 80132da:	f7fb fa8f 	bl	800e7fc <USBD_GetString>
}
 80132de:	4620      	mov	r0, r4
 80132e0:	bd10      	pop	{r4, pc}
 80132e2:	bf00      	nop
 80132e4:	24025c84 	.word	0x24025c84
 80132e8:	08015f8b 	.word	0x08015f8b

080132ec <USBD_FS_ConfigStrDescriptor>:
{
 80132ec:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80132ee:	4c04      	ldr	r4, [pc, #16]	; (8013300 <USBD_FS_ConfigStrDescriptor+0x14>)
 80132f0:	460a      	mov	r2, r1
 80132f2:	4804      	ldr	r0, [pc, #16]	; (8013304 <USBD_FS_ConfigStrDescriptor+0x18>)
 80132f4:	4621      	mov	r1, r4
 80132f6:	f7fb fa81 	bl	800e7fc <USBD_GetString>
}
 80132fa:	4620      	mov	r0, r4
 80132fc:	bd10      	pop	{r4, pc}
 80132fe:	bf00      	nop
 8013300:	24025c84 	.word	0x24025c84
 8013304:	08015f6d 	.word	0x08015f6d

08013308 <USBD_FS_InterfaceStrDescriptor>:
{
 8013308:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801330a:	4c04      	ldr	r4, [pc, #16]	; (801331c <USBD_FS_InterfaceStrDescriptor+0x14>)
 801330c:	460a      	mov	r2, r1
 801330e:	4804      	ldr	r0, [pc, #16]	; (8013320 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8013310:	4621      	mov	r1, r4
 8013312:	f7fb fa73 	bl	800e7fc <USBD_GetString>
}
 8013316:	4620      	mov	r0, r4
 8013318:	bd10      	pop	{r4, pc}
 801331a:	bf00      	nop
 801331c:	24025c84 	.word	0x24025c84
 8013320:	08015f78 	.word	0x08015f78

08013324 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013324:	b510      	push	{r4, lr}
 8013326:	b088      	sub	sp, #32
 8013328:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801332a:	2214      	movs	r2, #20
 801332c:	2100      	movs	r1, #0
 801332e:	a803      	add	r0, sp, #12
 8013330:	f000 f991 	bl	8013656 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8013334:	6822      	ldr	r2, [r4, #0]
 8013336:	4b18      	ldr	r3, [pc, #96]	; (8013398 <HAL_PCD_MspInit+0x74>)
 8013338:	429a      	cmp	r2, r3
 801333a:	d12b      	bne.n	8013394 <HAL_PCD_MspInit+0x70>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801333c:	4c17      	ldr	r4, [pc, #92]	; (801339c <HAL_PCD_MspInit+0x78>)
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801333e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013342:	a903      	add	r1, sp, #12
 8013344:	4816      	ldr	r0, [pc, #88]	; (80133a0 <HAL_PCD_MspInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013346:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 801334a:	f043 0301 	orr.w	r3, r3, #1
 801334e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8013352:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8013356:	f003 0301 	and.w	r3, r3, #1
 801335a:	9301      	str	r3, [sp, #4]
 801335c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801335e:	2302      	movs	r3, #2
 8013360:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8013364:	230a      	movs	r3, #10
 8013366:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013368:	f7f4 fd8e 	bl	8007e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801336c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013370:	2065      	movs	r0, #101	; 0x65
 8013372:	2200      	movs	r2, #0
 8013374:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013376:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801337a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 801337e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8013382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013386:	9302      	str	r3, [sp, #8]
 8013388:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801338a:	f7f3 fbbb 	bl	8006b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801338e:	2065      	movs	r0, #101	; 0x65
 8013390:	f7f3 fbea 	bl	8006b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013394:	b008      	add	sp, #32
 8013396:	bd10      	pop	{r4, pc}
 8013398:	40080000 	.word	0x40080000
 801339c:	58024400 	.word	0x58024400
 80133a0:	58020000 	.word	0x58020000

080133a4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80133a4:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80133a8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80133ac:	f7fa bef4 	b.w	800e198 <USBD_LL_SetupStage>

080133b0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80133b0:	231c      	movs	r3, #28
 80133b2:	fb03 0301 	mla	r3, r3, r1, r0
 80133b6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80133ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80133be:	f7fa bf1b 	b.w	800e1f8 <USBD_LL_DataOutStage>

080133c2 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80133c2:	231c      	movs	r3, #28
 80133c4:	fb03 0301 	mla	r3, r3, r1, r0
 80133c8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80133cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80133ce:	f7fa bf46 	b.w	800e25e <USBD_LL_DataInStage>

080133d2 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80133d2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80133d6:	f7fa bfcd 	b.w	800e374 <USBD_LL_SOF>

080133da <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80133da:	68c1      	ldr	r1, [r0, #12]
{
 80133dc:	b510      	push	{r4, lr}
 80133de:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80133e0:	b121      	cbz	r1, 80133ec <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80133e2:	2902      	cmp	r1, #2
 80133e4:	d001      	beq.n	80133ea <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 80133e6:	f7ef ffd1 	bl	800338c <Error_Handler>
    speed = USBD_SPEED_FULL;
 80133ea:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80133ec:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80133f0:	f7fa ffaa 	bl	800e348 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80133f4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 80133f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80133fc:	f7fa bf7c 	b.w	800e2f8 <USBD_LL_Reset>

08013400 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013400:	b510      	push	{r4, lr}
 8013402:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013404:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013408:	f7fa ffa1 	bl	800e34e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801340c:	6822      	ldr	r2, [r4, #0]
 801340e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8013412:	f043 0301 	orr.w	r3, r3, #1
 8013416:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801341a:	6a23      	ldr	r3, [r4, #32]
 801341c:	b123      	cbz	r3, 8013428 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801341e:	4a03      	ldr	r2, [pc, #12]	; (801342c <HAL_PCD_SuspendCallback+0x2c>)
 8013420:	6913      	ldr	r3, [r2, #16]
 8013422:	f043 0306 	orr.w	r3, r3, #6
 8013426:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013428:	bd10      	pop	{r4, pc}
 801342a:	bf00      	nop
 801342c:	e000ed00 	.word	0xe000ed00

08013430 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013430:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013434:	f7fa bf94 	b.w	800e360 <USBD_LL_Resume>

08013438 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013438:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801343c:	f7fa bfa8 	b.w	800e390 <USBD_LL_IsoOUTIncomplete>

08013440 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013440:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013444:	f7fa bfa2 	b.w	800e38c <USBD_LL_IsoINIncomplete>

08013448 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013448:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801344c:	f7fa bfa2 	b.w	800e394 <USBD_LL_DevConnected>

08013450 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013450:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013454:	f7fa bfa0 	b.w	800e398 <USBD_LL_DevDisconnected>

08013458 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013458:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801345a:	7802      	ldrb	r2, [r0, #0]
 801345c:	bb32      	cbnz	r2, 80134ac <USBD_LL_Init+0x54>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801345e:	4b14      	ldr	r3, [pc, #80]	; (80134b0 <USBD_LL_Init+0x58>)
  pdev->pData = &hpcd_USB_OTG_FS;

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8013460:	2109      	movs	r1, #9
  hpcd_USB_OTG_FS.pData = pdev;
 8013462:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8013466:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801346a:	4812      	ldr	r0, [pc, #72]	; (80134b4 <USBD_LL_Init+0x5c>)
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801346c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801346e:	e9c3 0100 	strd	r0, r1, [r3]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013472:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013474:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013476:	e9c3 1203 	strd	r1, r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801347a:	e9c3 1206 	strd	r1, r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801347e:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8013482:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013486:	f7f4 fdfb 	bl	8008080 <HAL_PCD_Init>
 801348a:	b108      	cbz	r0, 8013490 <USBD_LL_Init+0x38>
  {
    Error_Handler( );
 801348c:	f7ef ff7e 	bl	800338c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013490:	2180      	movs	r1, #128	; 0x80
 8013492:	4807      	ldr	r0, [pc, #28]	; (80134b0 <USBD_LL_Init+0x58>)
 8013494:	f7f5 facd 	bl	8008a32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013498:	2240      	movs	r2, #64	; 0x40
 801349a:	2100      	movs	r1, #0
 801349c:	4804      	ldr	r0, [pc, #16]	; (80134b0 <USBD_LL_Init+0x58>)
 801349e:	f7f5 faa8 	bl	80089f2 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80134a2:	2280      	movs	r2, #128	; 0x80
 80134a4:	2101      	movs	r1, #1
 80134a6:	4802      	ldr	r0, [pc, #8]	; (80134b0 <USBD_LL_Init+0x58>)
 80134a8:	f7f5 faa3 	bl	80089f2 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 80134ac:	2000      	movs	r0, #0
 80134ae:	bd08      	pop	{r3, pc}
 80134b0:	24025e84 	.word	0x24025e84
 80134b4:	40080000 	.word	0x40080000

080134b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80134b8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80134ba:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80134be:	f7f4 fe6a 	bl	8008196 <HAL_PCD_Start>
 80134c2:	2803      	cmp	r0, #3
 80134c4:	bf96      	itet	ls
 80134c6:	4b02      	ldrls	r3, [pc, #8]	; (80134d0 <USBD_LL_Start+0x18>)
 80134c8:	2003      	movhi	r0, #3
 80134ca:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80134cc:	bd08      	pop	{r3, pc}
 80134ce:	bf00      	nop
 80134d0:	08015f9f 	.word	0x08015f9f

080134d4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80134d4:	b510      	push	{r4, lr}
 80134d6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80134d8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80134dc:	4613      	mov	r3, r2
 80134de:	4622      	mov	r2, r4
 80134e0:	f7f5 f964 	bl	80087ac <HAL_PCD_EP_Open>
 80134e4:	2803      	cmp	r0, #3
 80134e6:	bf96      	itet	ls
 80134e8:	4b01      	ldrls	r3, [pc, #4]	; (80134f0 <USBD_LL_OpenEP+0x1c>)
 80134ea:	2003      	movhi	r0, #3
 80134ec:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80134ee:	bd10      	pop	{r4, pc}
 80134f0:	08015f9f 	.word	0x08015f9f

080134f4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134f4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80134f6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80134fa:	f7f5 f98f 	bl	800881c <HAL_PCD_EP_Close>
 80134fe:	2803      	cmp	r0, #3
 8013500:	bf96      	itet	ls
 8013502:	4b02      	ldrls	r3, [pc, #8]	; (801350c <USBD_LL_CloseEP+0x18>)
 8013504:	2003      	movhi	r0, #3
 8013506:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8013508:	bd08      	pop	{r3, pc}
 801350a:	bf00      	nop
 801350c:	08015f9f 	.word	0x08015f9f

08013510 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013510:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013512:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013516:	f7f5 f9fc 	bl	8008912 <HAL_PCD_EP_SetStall>
 801351a:	2803      	cmp	r0, #3
 801351c:	bf96      	itet	ls
 801351e:	4b02      	ldrls	r3, [pc, #8]	; (8013528 <USBD_LL_StallEP+0x18>)
 8013520:	2003      	movhi	r0, #3
 8013522:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8013524:	bd08      	pop	{r3, pc}
 8013526:	bf00      	nop
 8013528:	08015f9f 	.word	0x08015f9f

0801352c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801352c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801352e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013532:	f7f5 fa28 	bl	8008986 <HAL_PCD_EP_ClrStall>
 8013536:	2803      	cmp	r0, #3
 8013538:	bf96      	itet	ls
 801353a:	4b02      	ldrls	r3, [pc, #8]	; (8013544 <USBD_LL_ClearStallEP+0x18>)
 801353c:	2003      	movhi	r0, #3
 801353e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8013540:	bd08      	pop	{r3, pc}
 8013542:	bf00      	nop
 8013544:	08015f9f 	.word	0x08015f9f

08013548 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 8013548:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801354c:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 8013550:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013554:	bf17      	itett	ne
 8013556:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801355a:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801355e:	fb02 3101 	mlane	r1, r2, r1, r3
 8013562:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013566:	bf08      	it	eq
 8013568:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 801356c:	4770      	bx	lr
	...

08013570 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013570:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013572:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013576:	f7f5 f905 	bl	8008784 <HAL_PCD_SetAddress>
 801357a:	2803      	cmp	r0, #3
 801357c:	bf96      	itet	ls
 801357e:	4b02      	ldrls	r3, [pc, #8]	; (8013588 <USBD_LL_SetUSBAddress+0x18>)
 8013580:	2003      	movhi	r0, #3
 8013582:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8013584:	bd08      	pop	{r3, pc}
 8013586:	bf00      	nop
 8013588:	08015f9f 	.word	0x08015f9f

0801358c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801358c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801358e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013592:	f7f5 f99e 	bl	80088d2 <HAL_PCD_EP_Transmit>
 8013596:	2803      	cmp	r0, #3
 8013598:	bf96      	itet	ls
 801359a:	4b02      	ldrls	r3, [pc, #8]	; (80135a4 <USBD_LL_Transmit+0x18>)
 801359c:	2003      	movhi	r0, #3
 801359e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80135a0:	bd08      	pop	{r3, pc}
 80135a2:	bf00      	nop
 80135a4:	08015f9f 	.word	0x08015f9f

080135a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80135a8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80135aa:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80135ae:	f7f5 f964 	bl	800887a <HAL_PCD_EP_Receive>
 80135b2:	2803      	cmp	r0, #3
 80135b4:	bf96      	itet	ls
 80135b6:	4b02      	ldrls	r3, [pc, #8]	; (80135c0 <USBD_LL_PrepareReceive+0x18>)
 80135b8:	2003      	movhi	r0, #3
 80135ba:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80135bc:	bd08      	pop	{r3, pc}
 80135be:	bf00      	nop
 80135c0:	08015f9f 	.word	0x08015f9f

080135c4 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80135c4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80135c8:	f7f5 b97b 	b.w	80088c2 <HAL_PCD_EP_GetRxCount>

080135cc <__errno>:
 80135cc:	4b01      	ldr	r3, [pc, #4]	; (80135d4 <__errno+0x8>)
 80135ce:	6818      	ldr	r0, [r3, #0]
 80135d0:	4770      	bx	lr
 80135d2:	bf00      	nop
 80135d4:	240001a4 	.word	0x240001a4

080135d8 <__libc_init_array>:
 80135d8:	b570      	push	{r4, r5, r6, lr}
 80135da:	4e0d      	ldr	r6, [pc, #52]	; (8013610 <__libc_init_array+0x38>)
 80135dc:	4c0d      	ldr	r4, [pc, #52]	; (8013614 <__libc_init_array+0x3c>)
 80135de:	1ba4      	subs	r4, r4, r6
 80135e0:	10a4      	asrs	r4, r4, #2
 80135e2:	2500      	movs	r5, #0
 80135e4:	42a5      	cmp	r5, r4
 80135e6:	d109      	bne.n	80135fc <__libc_init_array+0x24>
 80135e8:	4e0b      	ldr	r6, [pc, #44]	; (8013618 <__libc_init_array+0x40>)
 80135ea:	4c0c      	ldr	r4, [pc, #48]	; (801361c <__libc_init_array+0x44>)
 80135ec:	f001 fc86 	bl	8014efc <_init>
 80135f0:	1ba4      	subs	r4, r4, r6
 80135f2:	10a4      	asrs	r4, r4, #2
 80135f4:	2500      	movs	r5, #0
 80135f6:	42a5      	cmp	r5, r4
 80135f8:	d105      	bne.n	8013606 <__libc_init_array+0x2e>
 80135fa:	bd70      	pop	{r4, r5, r6, pc}
 80135fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013600:	4798      	blx	r3
 8013602:	3501      	adds	r5, #1
 8013604:	e7ee      	b.n	80135e4 <__libc_init_array+0xc>
 8013606:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801360a:	4798      	blx	r3
 801360c:	3501      	adds	r5, #1
 801360e:	e7f2      	b.n	80135f6 <__libc_init_array+0x1e>
 8013610:	08016300 	.word	0x08016300
 8013614:	08016300 	.word	0x08016300
 8013618:	08016300 	.word	0x08016300
 801361c:	08016304 	.word	0x08016304

08013620 <malloc>:
 8013620:	4b02      	ldr	r3, [pc, #8]	; (801362c <malloc+0xc>)
 8013622:	4601      	mov	r1, r0
 8013624:	6818      	ldr	r0, [r3, #0]
 8013626:	f000 b86d 	b.w	8013704 <_malloc_r>
 801362a:	bf00      	nop
 801362c:	240001a4 	.word	0x240001a4

08013630 <free>:
 8013630:	4b02      	ldr	r3, [pc, #8]	; (801363c <free+0xc>)
 8013632:	4601      	mov	r1, r0
 8013634:	6818      	ldr	r0, [r3, #0]
 8013636:	f000 b817 	b.w	8013668 <_free_r>
 801363a:	bf00      	nop
 801363c:	240001a4 	.word	0x240001a4

08013640 <memcpy>:
 8013640:	b510      	push	{r4, lr}
 8013642:	1e43      	subs	r3, r0, #1
 8013644:	440a      	add	r2, r1
 8013646:	4291      	cmp	r1, r2
 8013648:	d100      	bne.n	801364c <memcpy+0xc>
 801364a:	bd10      	pop	{r4, pc}
 801364c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013650:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013654:	e7f7      	b.n	8013646 <memcpy+0x6>

08013656 <memset>:
 8013656:	4402      	add	r2, r0
 8013658:	4603      	mov	r3, r0
 801365a:	4293      	cmp	r3, r2
 801365c:	d100      	bne.n	8013660 <memset+0xa>
 801365e:	4770      	bx	lr
 8013660:	f803 1b01 	strb.w	r1, [r3], #1
 8013664:	e7f9      	b.n	801365a <memset+0x4>
	...

08013668 <_free_r>:
 8013668:	b538      	push	{r3, r4, r5, lr}
 801366a:	4605      	mov	r5, r0
 801366c:	2900      	cmp	r1, #0
 801366e:	d045      	beq.n	80136fc <_free_r+0x94>
 8013670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013674:	1f0c      	subs	r4, r1, #4
 8013676:	2b00      	cmp	r3, #0
 8013678:	bfb8      	it	lt
 801367a:	18e4      	addlt	r4, r4, r3
 801367c:	f000 f8e8 	bl	8013850 <__malloc_lock>
 8013680:	4a1f      	ldr	r2, [pc, #124]	; (8013700 <_free_r+0x98>)
 8013682:	6813      	ldr	r3, [r2, #0]
 8013684:	4610      	mov	r0, r2
 8013686:	b933      	cbnz	r3, 8013696 <_free_r+0x2e>
 8013688:	6063      	str	r3, [r4, #4]
 801368a:	6014      	str	r4, [r2, #0]
 801368c:	4628      	mov	r0, r5
 801368e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013692:	f000 b8de 	b.w	8013852 <__malloc_unlock>
 8013696:	42a3      	cmp	r3, r4
 8013698:	d90c      	bls.n	80136b4 <_free_r+0x4c>
 801369a:	6821      	ldr	r1, [r4, #0]
 801369c:	1862      	adds	r2, r4, r1
 801369e:	4293      	cmp	r3, r2
 80136a0:	bf04      	itt	eq
 80136a2:	681a      	ldreq	r2, [r3, #0]
 80136a4:	685b      	ldreq	r3, [r3, #4]
 80136a6:	6063      	str	r3, [r4, #4]
 80136a8:	bf04      	itt	eq
 80136aa:	1852      	addeq	r2, r2, r1
 80136ac:	6022      	streq	r2, [r4, #0]
 80136ae:	6004      	str	r4, [r0, #0]
 80136b0:	e7ec      	b.n	801368c <_free_r+0x24>
 80136b2:	4613      	mov	r3, r2
 80136b4:	685a      	ldr	r2, [r3, #4]
 80136b6:	b10a      	cbz	r2, 80136bc <_free_r+0x54>
 80136b8:	42a2      	cmp	r2, r4
 80136ba:	d9fa      	bls.n	80136b2 <_free_r+0x4a>
 80136bc:	6819      	ldr	r1, [r3, #0]
 80136be:	1858      	adds	r0, r3, r1
 80136c0:	42a0      	cmp	r0, r4
 80136c2:	d10b      	bne.n	80136dc <_free_r+0x74>
 80136c4:	6820      	ldr	r0, [r4, #0]
 80136c6:	4401      	add	r1, r0
 80136c8:	1858      	adds	r0, r3, r1
 80136ca:	4282      	cmp	r2, r0
 80136cc:	6019      	str	r1, [r3, #0]
 80136ce:	d1dd      	bne.n	801368c <_free_r+0x24>
 80136d0:	6810      	ldr	r0, [r2, #0]
 80136d2:	6852      	ldr	r2, [r2, #4]
 80136d4:	605a      	str	r2, [r3, #4]
 80136d6:	4401      	add	r1, r0
 80136d8:	6019      	str	r1, [r3, #0]
 80136da:	e7d7      	b.n	801368c <_free_r+0x24>
 80136dc:	d902      	bls.n	80136e4 <_free_r+0x7c>
 80136de:	230c      	movs	r3, #12
 80136e0:	602b      	str	r3, [r5, #0]
 80136e2:	e7d3      	b.n	801368c <_free_r+0x24>
 80136e4:	6820      	ldr	r0, [r4, #0]
 80136e6:	1821      	adds	r1, r4, r0
 80136e8:	428a      	cmp	r2, r1
 80136ea:	bf04      	itt	eq
 80136ec:	6811      	ldreq	r1, [r2, #0]
 80136ee:	6852      	ldreq	r2, [r2, #4]
 80136f0:	6062      	str	r2, [r4, #4]
 80136f2:	bf04      	itt	eq
 80136f4:	1809      	addeq	r1, r1, r0
 80136f6:	6021      	streq	r1, [r4, #0]
 80136f8:	605c      	str	r4, [r3, #4]
 80136fa:	e7c7      	b.n	801368c <_free_r+0x24>
 80136fc:	bd38      	pop	{r3, r4, r5, pc}
 80136fe:	bf00      	nop
 8013700:	24009bbc 	.word	0x24009bbc

08013704 <_malloc_r>:
 8013704:	b570      	push	{r4, r5, r6, lr}
 8013706:	1ccd      	adds	r5, r1, #3
 8013708:	f025 0503 	bic.w	r5, r5, #3
 801370c:	3508      	adds	r5, #8
 801370e:	2d0c      	cmp	r5, #12
 8013710:	bf38      	it	cc
 8013712:	250c      	movcc	r5, #12
 8013714:	2d00      	cmp	r5, #0
 8013716:	4606      	mov	r6, r0
 8013718:	db01      	blt.n	801371e <_malloc_r+0x1a>
 801371a:	42a9      	cmp	r1, r5
 801371c:	d903      	bls.n	8013726 <_malloc_r+0x22>
 801371e:	230c      	movs	r3, #12
 8013720:	6033      	str	r3, [r6, #0]
 8013722:	2000      	movs	r0, #0
 8013724:	bd70      	pop	{r4, r5, r6, pc}
 8013726:	f000 f893 	bl	8013850 <__malloc_lock>
 801372a:	4a21      	ldr	r2, [pc, #132]	; (80137b0 <_malloc_r+0xac>)
 801372c:	6814      	ldr	r4, [r2, #0]
 801372e:	4621      	mov	r1, r4
 8013730:	b991      	cbnz	r1, 8013758 <_malloc_r+0x54>
 8013732:	4c20      	ldr	r4, [pc, #128]	; (80137b4 <_malloc_r+0xb0>)
 8013734:	6823      	ldr	r3, [r4, #0]
 8013736:	b91b      	cbnz	r3, 8013740 <_malloc_r+0x3c>
 8013738:	4630      	mov	r0, r6
 801373a:	f000 f83d 	bl	80137b8 <_sbrk_r>
 801373e:	6020      	str	r0, [r4, #0]
 8013740:	4629      	mov	r1, r5
 8013742:	4630      	mov	r0, r6
 8013744:	f000 f838 	bl	80137b8 <_sbrk_r>
 8013748:	1c43      	adds	r3, r0, #1
 801374a:	d124      	bne.n	8013796 <_malloc_r+0x92>
 801374c:	230c      	movs	r3, #12
 801374e:	6033      	str	r3, [r6, #0]
 8013750:	4630      	mov	r0, r6
 8013752:	f000 f87e 	bl	8013852 <__malloc_unlock>
 8013756:	e7e4      	b.n	8013722 <_malloc_r+0x1e>
 8013758:	680b      	ldr	r3, [r1, #0]
 801375a:	1b5b      	subs	r3, r3, r5
 801375c:	d418      	bmi.n	8013790 <_malloc_r+0x8c>
 801375e:	2b0b      	cmp	r3, #11
 8013760:	d90f      	bls.n	8013782 <_malloc_r+0x7e>
 8013762:	600b      	str	r3, [r1, #0]
 8013764:	50cd      	str	r5, [r1, r3]
 8013766:	18cc      	adds	r4, r1, r3
 8013768:	4630      	mov	r0, r6
 801376a:	f000 f872 	bl	8013852 <__malloc_unlock>
 801376e:	f104 000b 	add.w	r0, r4, #11
 8013772:	1d23      	adds	r3, r4, #4
 8013774:	f020 0007 	bic.w	r0, r0, #7
 8013778:	1ac3      	subs	r3, r0, r3
 801377a:	d0d3      	beq.n	8013724 <_malloc_r+0x20>
 801377c:	425a      	negs	r2, r3
 801377e:	50e2      	str	r2, [r4, r3]
 8013780:	e7d0      	b.n	8013724 <_malloc_r+0x20>
 8013782:	428c      	cmp	r4, r1
 8013784:	684b      	ldr	r3, [r1, #4]
 8013786:	bf16      	itet	ne
 8013788:	6063      	strne	r3, [r4, #4]
 801378a:	6013      	streq	r3, [r2, #0]
 801378c:	460c      	movne	r4, r1
 801378e:	e7eb      	b.n	8013768 <_malloc_r+0x64>
 8013790:	460c      	mov	r4, r1
 8013792:	6849      	ldr	r1, [r1, #4]
 8013794:	e7cc      	b.n	8013730 <_malloc_r+0x2c>
 8013796:	1cc4      	adds	r4, r0, #3
 8013798:	f024 0403 	bic.w	r4, r4, #3
 801379c:	42a0      	cmp	r0, r4
 801379e:	d005      	beq.n	80137ac <_malloc_r+0xa8>
 80137a0:	1a21      	subs	r1, r4, r0
 80137a2:	4630      	mov	r0, r6
 80137a4:	f000 f808 	bl	80137b8 <_sbrk_r>
 80137a8:	3001      	adds	r0, #1
 80137aa:	d0cf      	beq.n	801374c <_malloc_r+0x48>
 80137ac:	6025      	str	r5, [r4, #0]
 80137ae:	e7db      	b.n	8013768 <_malloc_r+0x64>
 80137b0:	24009bbc 	.word	0x24009bbc
 80137b4:	24009bc0 	.word	0x24009bc0

080137b8 <_sbrk_r>:
 80137b8:	b538      	push	{r3, r4, r5, lr}
 80137ba:	4c06      	ldr	r4, [pc, #24]	; (80137d4 <_sbrk_r+0x1c>)
 80137bc:	2300      	movs	r3, #0
 80137be:	4605      	mov	r5, r0
 80137c0:	4608      	mov	r0, r1
 80137c2:	6023      	str	r3, [r4, #0]
 80137c4:	f7f0 fa3a 	bl	8003c3c <_sbrk>
 80137c8:	1c43      	adds	r3, r0, #1
 80137ca:	d102      	bne.n	80137d2 <_sbrk_r+0x1a>
 80137cc:	6823      	ldr	r3, [r4, #0]
 80137ce:	b103      	cbz	r3, 80137d2 <_sbrk_r+0x1a>
 80137d0:	602b      	str	r3, [r5, #0]
 80137d2:	bd38      	pop	{r3, r4, r5, pc}
 80137d4:	2402628c 	.word	0x2402628c

080137d8 <sniprintf>:
 80137d8:	b40c      	push	{r2, r3}
 80137da:	b530      	push	{r4, r5, lr}
 80137dc:	4b17      	ldr	r3, [pc, #92]	; (801383c <sniprintf+0x64>)
 80137de:	1e0c      	subs	r4, r1, #0
 80137e0:	b09d      	sub	sp, #116	; 0x74
 80137e2:	681d      	ldr	r5, [r3, #0]
 80137e4:	da08      	bge.n	80137f8 <sniprintf+0x20>
 80137e6:	238b      	movs	r3, #139	; 0x8b
 80137e8:	602b      	str	r3, [r5, #0]
 80137ea:	f04f 30ff 	mov.w	r0, #4294967295
 80137ee:	b01d      	add	sp, #116	; 0x74
 80137f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80137f4:	b002      	add	sp, #8
 80137f6:	4770      	bx	lr
 80137f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80137fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013800:	bf14      	ite	ne
 8013802:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013806:	4623      	moveq	r3, r4
 8013808:	9304      	str	r3, [sp, #16]
 801380a:	9307      	str	r3, [sp, #28]
 801380c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013810:	9002      	str	r0, [sp, #8]
 8013812:	9006      	str	r0, [sp, #24]
 8013814:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013818:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801381a:	ab21      	add	r3, sp, #132	; 0x84
 801381c:	a902      	add	r1, sp, #8
 801381e:	4628      	mov	r0, r5
 8013820:	9301      	str	r3, [sp, #4]
 8013822:	f000 f871 	bl	8013908 <_svfiprintf_r>
 8013826:	1c43      	adds	r3, r0, #1
 8013828:	bfbc      	itt	lt
 801382a:	238b      	movlt	r3, #139	; 0x8b
 801382c:	602b      	strlt	r3, [r5, #0]
 801382e:	2c00      	cmp	r4, #0
 8013830:	d0dd      	beq.n	80137ee <sniprintf+0x16>
 8013832:	9b02      	ldr	r3, [sp, #8]
 8013834:	2200      	movs	r2, #0
 8013836:	701a      	strb	r2, [r3, #0]
 8013838:	e7d9      	b.n	80137ee <sniprintf+0x16>
 801383a:	bf00      	nop
 801383c:	240001a4 	.word	0x240001a4

08013840 <strcpy>:
 8013840:	4603      	mov	r3, r0
 8013842:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013846:	f803 2b01 	strb.w	r2, [r3], #1
 801384a:	2a00      	cmp	r2, #0
 801384c:	d1f9      	bne.n	8013842 <strcpy+0x2>
 801384e:	4770      	bx	lr

08013850 <__malloc_lock>:
 8013850:	4770      	bx	lr

08013852 <__malloc_unlock>:
 8013852:	4770      	bx	lr

08013854 <__ssputs_r>:
 8013854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013858:	688e      	ldr	r6, [r1, #8]
 801385a:	429e      	cmp	r6, r3
 801385c:	4682      	mov	sl, r0
 801385e:	460c      	mov	r4, r1
 8013860:	4690      	mov	r8, r2
 8013862:	4699      	mov	r9, r3
 8013864:	d837      	bhi.n	80138d6 <__ssputs_r+0x82>
 8013866:	898a      	ldrh	r2, [r1, #12]
 8013868:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801386c:	d031      	beq.n	80138d2 <__ssputs_r+0x7e>
 801386e:	6825      	ldr	r5, [r4, #0]
 8013870:	6909      	ldr	r1, [r1, #16]
 8013872:	1a6f      	subs	r7, r5, r1
 8013874:	6965      	ldr	r5, [r4, #20]
 8013876:	2302      	movs	r3, #2
 8013878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801387c:	fb95 f5f3 	sdiv	r5, r5, r3
 8013880:	f109 0301 	add.w	r3, r9, #1
 8013884:	443b      	add	r3, r7
 8013886:	429d      	cmp	r5, r3
 8013888:	bf38      	it	cc
 801388a:	461d      	movcc	r5, r3
 801388c:	0553      	lsls	r3, r2, #21
 801388e:	d530      	bpl.n	80138f2 <__ssputs_r+0x9e>
 8013890:	4629      	mov	r1, r5
 8013892:	f7ff ff37 	bl	8013704 <_malloc_r>
 8013896:	4606      	mov	r6, r0
 8013898:	b950      	cbnz	r0, 80138b0 <__ssputs_r+0x5c>
 801389a:	230c      	movs	r3, #12
 801389c:	f8ca 3000 	str.w	r3, [sl]
 80138a0:	89a3      	ldrh	r3, [r4, #12]
 80138a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138a6:	81a3      	strh	r3, [r4, #12]
 80138a8:	f04f 30ff 	mov.w	r0, #4294967295
 80138ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138b0:	463a      	mov	r2, r7
 80138b2:	6921      	ldr	r1, [r4, #16]
 80138b4:	f7ff fec4 	bl	8013640 <memcpy>
 80138b8:	89a3      	ldrh	r3, [r4, #12]
 80138ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80138be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138c2:	81a3      	strh	r3, [r4, #12]
 80138c4:	6126      	str	r6, [r4, #16]
 80138c6:	6165      	str	r5, [r4, #20]
 80138c8:	443e      	add	r6, r7
 80138ca:	1bed      	subs	r5, r5, r7
 80138cc:	6026      	str	r6, [r4, #0]
 80138ce:	60a5      	str	r5, [r4, #8]
 80138d0:	464e      	mov	r6, r9
 80138d2:	454e      	cmp	r6, r9
 80138d4:	d900      	bls.n	80138d8 <__ssputs_r+0x84>
 80138d6:	464e      	mov	r6, r9
 80138d8:	4632      	mov	r2, r6
 80138da:	4641      	mov	r1, r8
 80138dc:	6820      	ldr	r0, [r4, #0]
 80138de:	f000 fa93 	bl	8013e08 <memmove>
 80138e2:	68a3      	ldr	r3, [r4, #8]
 80138e4:	1b9b      	subs	r3, r3, r6
 80138e6:	60a3      	str	r3, [r4, #8]
 80138e8:	6823      	ldr	r3, [r4, #0]
 80138ea:	441e      	add	r6, r3
 80138ec:	6026      	str	r6, [r4, #0]
 80138ee:	2000      	movs	r0, #0
 80138f0:	e7dc      	b.n	80138ac <__ssputs_r+0x58>
 80138f2:	462a      	mov	r2, r5
 80138f4:	f000 faa1 	bl	8013e3a <_realloc_r>
 80138f8:	4606      	mov	r6, r0
 80138fa:	2800      	cmp	r0, #0
 80138fc:	d1e2      	bne.n	80138c4 <__ssputs_r+0x70>
 80138fe:	6921      	ldr	r1, [r4, #16]
 8013900:	4650      	mov	r0, sl
 8013902:	f7ff feb1 	bl	8013668 <_free_r>
 8013906:	e7c8      	b.n	801389a <__ssputs_r+0x46>

08013908 <_svfiprintf_r>:
 8013908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801390c:	461d      	mov	r5, r3
 801390e:	898b      	ldrh	r3, [r1, #12]
 8013910:	061f      	lsls	r7, r3, #24
 8013912:	b09d      	sub	sp, #116	; 0x74
 8013914:	4680      	mov	r8, r0
 8013916:	460c      	mov	r4, r1
 8013918:	4616      	mov	r6, r2
 801391a:	d50f      	bpl.n	801393c <_svfiprintf_r+0x34>
 801391c:	690b      	ldr	r3, [r1, #16]
 801391e:	b96b      	cbnz	r3, 801393c <_svfiprintf_r+0x34>
 8013920:	2140      	movs	r1, #64	; 0x40
 8013922:	f7ff feef 	bl	8013704 <_malloc_r>
 8013926:	6020      	str	r0, [r4, #0]
 8013928:	6120      	str	r0, [r4, #16]
 801392a:	b928      	cbnz	r0, 8013938 <_svfiprintf_r+0x30>
 801392c:	230c      	movs	r3, #12
 801392e:	f8c8 3000 	str.w	r3, [r8]
 8013932:	f04f 30ff 	mov.w	r0, #4294967295
 8013936:	e0c8      	b.n	8013aca <_svfiprintf_r+0x1c2>
 8013938:	2340      	movs	r3, #64	; 0x40
 801393a:	6163      	str	r3, [r4, #20]
 801393c:	2300      	movs	r3, #0
 801393e:	9309      	str	r3, [sp, #36]	; 0x24
 8013940:	2320      	movs	r3, #32
 8013942:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013946:	2330      	movs	r3, #48	; 0x30
 8013948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801394c:	9503      	str	r5, [sp, #12]
 801394e:	f04f 0b01 	mov.w	fp, #1
 8013952:	4637      	mov	r7, r6
 8013954:	463d      	mov	r5, r7
 8013956:	f815 3b01 	ldrb.w	r3, [r5], #1
 801395a:	b10b      	cbz	r3, 8013960 <_svfiprintf_r+0x58>
 801395c:	2b25      	cmp	r3, #37	; 0x25
 801395e:	d13e      	bne.n	80139de <_svfiprintf_r+0xd6>
 8013960:	ebb7 0a06 	subs.w	sl, r7, r6
 8013964:	d00b      	beq.n	801397e <_svfiprintf_r+0x76>
 8013966:	4653      	mov	r3, sl
 8013968:	4632      	mov	r2, r6
 801396a:	4621      	mov	r1, r4
 801396c:	4640      	mov	r0, r8
 801396e:	f7ff ff71 	bl	8013854 <__ssputs_r>
 8013972:	3001      	adds	r0, #1
 8013974:	f000 80a4 	beq.w	8013ac0 <_svfiprintf_r+0x1b8>
 8013978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801397a:	4453      	add	r3, sl
 801397c:	9309      	str	r3, [sp, #36]	; 0x24
 801397e:	783b      	ldrb	r3, [r7, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	f000 809d 	beq.w	8013ac0 <_svfiprintf_r+0x1b8>
 8013986:	2300      	movs	r3, #0
 8013988:	f04f 32ff 	mov.w	r2, #4294967295
 801398c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013990:	9304      	str	r3, [sp, #16]
 8013992:	9307      	str	r3, [sp, #28]
 8013994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013998:	931a      	str	r3, [sp, #104]	; 0x68
 801399a:	462f      	mov	r7, r5
 801399c:	2205      	movs	r2, #5
 801399e:	f817 1b01 	ldrb.w	r1, [r7], #1
 80139a2:	4850      	ldr	r0, [pc, #320]	; (8013ae4 <_svfiprintf_r+0x1dc>)
 80139a4:	f7ec fca4 	bl	80002f0 <memchr>
 80139a8:	9b04      	ldr	r3, [sp, #16]
 80139aa:	b9d0      	cbnz	r0, 80139e2 <_svfiprintf_r+0xda>
 80139ac:	06d9      	lsls	r1, r3, #27
 80139ae:	bf44      	itt	mi
 80139b0:	2220      	movmi	r2, #32
 80139b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80139b6:	071a      	lsls	r2, r3, #28
 80139b8:	bf44      	itt	mi
 80139ba:	222b      	movmi	r2, #43	; 0x2b
 80139bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80139c0:	782a      	ldrb	r2, [r5, #0]
 80139c2:	2a2a      	cmp	r2, #42	; 0x2a
 80139c4:	d015      	beq.n	80139f2 <_svfiprintf_r+0xea>
 80139c6:	9a07      	ldr	r2, [sp, #28]
 80139c8:	462f      	mov	r7, r5
 80139ca:	2000      	movs	r0, #0
 80139cc:	250a      	movs	r5, #10
 80139ce:	4639      	mov	r1, r7
 80139d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139d4:	3b30      	subs	r3, #48	; 0x30
 80139d6:	2b09      	cmp	r3, #9
 80139d8:	d94d      	bls.n	8013a76 <_svfiprintf_r+0x16e>
 80139da:	b1b8      	cbz	r0, 8013a0c <_svfiprintf_r+0x104>
 80139dc:	e00f      	b.n	80139fe <_svfiprintf_r+0xf6>
 80139de:	462f      	mov	r7, r5
 80139e0:	e7b8      	b.n	8013954 <_svfiprintf_r+0x4c>
 80139e2:	4a40      	ldr	r2, [pc, #256]	; (8013ae4 <_svfiprintf_r+0x1dc>)
 80139e4:	1a80      	subs	r0, r0, r2
 80139e6:	fa0b f000 	lsl.w	r0, fp, r0
 80139ea:	4318      	orrs	r0, r3
 80139ec:	9004      	str	r0, [sp, #16]
 80139ee:	463d      	mov	r5, r7
 80139f0:	e7d3      	b.n	801399a <_svfiprintf_r+0x92>
 80139f2:	9a03      	ldr	r2, [sp, #12]
 80139f4:	1d11      	adds	r1, r2, #4
 80139f6:	6812      	ldr	r2, [r2, #0]
 80139f8:	9103      	str	r1, [sp, #12]
 80139fa:	2a00      	cmp	r2, #0
 80139fc:	db01      	blt.n	8013a02 <_svfiprintf_r+0xfa>
 80139fe:	9207      	str	r2, [sp, #28]
 8013a00:	e004      	b.n	8013a0c <_svfiprintf_r+0x104>
 8013a02:	4252      	negs	r2, r2
 8013a04:	f043 0302 	orr.w	r3, r3, #2
 8013a08:	9207      	str	r2, [sp, #28]
 8013a0a:	9304      	str	r3, [sp, #16]
 8013a0c:	783b      	ldrb	r3, [r7, #0]
 8013a0e:	2b2e      	cmp	r3, #46	; 0x2e
 8013a10:	d10c      	bne.n	8013a2c <_svfiprintf_r+0x124>
 8013a12:	787b      	ldrb	r3, [r7, #1]
 8013a14:	2b2a      	cmp	r3, #42	; 0x2a
 8013a16:	d133      	bne.n	8013a80 <_svfiprintf_r+0x178>
 8013a18:	9b03      	ldr	r3, [sp, #12]
 8013a1a:	1d1a      	adds	r2, r3, #4
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	9203      	str	r2, [sp, #12]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	bfb8      	it	lt
 8013a24:	f04f 33ff 	movlt.w	r3, #4294967295
 8013a28:	3702      	adds	r7, #2
 8013a2a:	9305      	str	r3, [sp, #20]
 8013a2c:	4d2e      	ldr	r5, [pc, #184]	; (8013ae8 <_svfiprintf_r+0x1e0>)
 8013a2e:	7839      	ldrb	r1, [r7, #0]
 8013a30:	2203      	movs	r2, #3
 8013a32:	4628      	mov	r0, r5
 8013a34:	f7ec fc5c 	bl	80002f0 <memchr>
 8013a38:	b138      	cbz	r0, 8013a4a <_svfiprintf_r+0x142>
 8013a3a:	2340      	movs	r3, #64	; 0x40
 8013a3c:	1b40      	subs	r0, r0, r5
 8013a3e:	fa03 f000 	lsl.w	r0, r3, r0
 8013a42:	9b04      	ldr	r3, [sp, #16]
 8013a44:	4303      	orrs	r3, r0
 8013a46:	3701      	adds	r7, #1
 8013a48:	9304      	str	r3, [sp, #16]
 8013a4a:	7839      	ldrb	r1, [r7, #0]
 8013a4c:	4827      	ldr	r0, [pc, #156]	; (8013aec <_svfiprintf_r+0x1e4>)
 8013a4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a52:	2206      	movs	r2, #6
 8013a54:	1c7e      	adds	r6, r7, #1
 8013a56:	f7ec fc4b 	bl	80002f0 <memchr>
 8013a5a:	2800      	cmp	r0, #0
 8013a5c:	d038      	beq.n	8013ad0 <_svfiprintf_r+0x1c8>
 8013a5e:	4b24      	ldr	r3, [pc, #144]	; (8013af0 <_svfiprintf_r+0x1e8>)
 8013a60:	bb13      	cbnz	r3, 8013aa8 <_svfiprintf_r+0x1a0>
 8013a62:	9b03      	ldr	r3, [sp, #12]
 8013a64:	3307      	adds	r3, #7
 8013a66:	f023 0307 	bic.w	r3, r3, #7
 8013a6a:	3308      	adds	r3, #8
 8013a6c:	9303      	str	r3, [sp, #12]
 8013a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a70:	444b      	add	r3, r9
 8013a72:	9309      	str	r3, [sp, #36]	; 0x24
 8013a74:	e76d      	b.n	8013952 <_svfiprintf_r+0x4a>
 8013a76:	fb05 3202 	mla	r2, r5, r2, r3
 8013a7a:	2001      	movs	r0, #1
 8013a7c:	460f      	mov	r7, r1
 8013a7e:	e7a6      	b.n	80139ce <_svfiprintf_r+0xc6>
 8013a80:	2300      	movs	r3, #0
 8013a82:	3701      	adds	r7, #1
 8013a84:	9305      	str	r3, [sp, #20]
 8013a86:	4619      	mov	r1, r3
 8013a88:	250a      	movs	r5, #10
 8013a8a:	4638      	mov	r0, r7
 8013a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a90:	3a30      	subs	r2, #48	; 0x30
 8013a92:	2a09      	cmp	r2, #9
 8013a94:	d903      	bls.n	8013a9e <_svfiprintf_r+0x196>
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d0c8      	beq.n	8013a2c <_svfiprintf_r+0x124>
 8013a9a:	9105      	str	r1, [sp, #20]
 8013a9c:	e7c6      	b.n	8013a2c <_svfiprintf_r+0x124>
 8013a9e:	fb05 2101 	mla	r1, r5, r1, r2
 8013aa2:	2301      	movs	r3, #1
 8013aa4:	4607      	mov	r7, r0
 8013aa6:	e7f0      	b.n	8013a8a <_svfiprintf_r+0x182>
 8013aa8:	ab03      	add	r3, sp, #12
 8013aaa:	9300      	str	r3, [sp, #0]
 8013aac:	4622      	mov	r2, r4
 8013aae:	4b11      	ldr	r3, [pc, #68]	; (8013af4 <_svfiprintf_r+0x1ec>)
 8013ab0:	a904      	add	r1, sp, #16
 8013ab2:	4640      	mov	r0, r8
 8013ab4:	f3af 8000 	nop.w
 8013ab8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013abc:	4681      	mov	r9, r0
 8013abe:	d1d6      	bne.n	8013a6e <_svfiprintf_r+0x166>
 8013ac0:	89a3      	ldrh	r3, [r4, #12]
 8013ac2:	065b      	lsls	r3, r3, #25
 8013ac4:	f53f af35 	bmi.w	8013932 <_svfiprintf_r+0x2a>
 8013ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013aca:	b01d      	add	sp, #116	; 0x74
 8013acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ad0:	ab03      	add	r3, sp, #12
 8013ad2:	9300      	str	r3, [sp, #0]
 8013ad4:	4622      	mov	r2, r4
 8013ad6:	4b07      	ldr	r3, [pc, #28]	; (8013af4 <_svfiprintf_r+0x1ec>)
 8013ad8:	a904      	add	r1, sp, #16
 8013ada:	4640      	mov	r0, r8
 8013adc:	f000 f882 	bl	8013be4 <_printf_i>
 8013ae0:	e7ea      	b.n	8013ab8 <_svfiprintf_r+0x1b0>
 8013ae2:	bf00      	nop
 8013ae4:	08015fa3 	.word	0x08015fa3
 8013ae8:	08015fa9 	.word	0x08015fa9
 8013aec:	08015fad 	.word	0x08015fad
 8013af0:	00000000 	.word	0x00000000
 8013af4:	08013855 	.word	0x08013855

08013af8 <_printf_common>:
 8013af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013afc:	4691      	mov	r9, r2
 8013afe:	461f      	mov	r7, r3
 8013b00:	688a      	ldr	r2, [r1, #8]
 8013b02:	690b      	ldr	r3, [r1, #16]
 8013b04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013b08:	4293      	cmp	r3, r2
 8013b0a:	bfb8      	it	lt
 8013b0c:	4613      	movlt	r3, r2
 8013b0e:	f8c9 3000 	str.w	r3, [r9]
 8013b12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013b16:	4606      	mov	r6, r0
 8013b18:	460c      	mov	r4, r1
 8013b1a:	b112      	cbz	r2, 8013b22 <_printf_common+0x2a>
 8013b1c:	3301      	adds	r3, #1
 8013b1e:	f8c9 3000 	str.w	r3, [r9]
 8013b22:	6823      	ldr	r3, [r4, #0]
 8013b24:	0699      	lsls	r1, r3, #26
 8013b26:	bf42      	ittt	mi
 8013b28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013b2c:	3302      	addmi	r3, #2
 8013b2e:	f8c9 3000 	strmi.w	r3, [r9]
 8013b32:	6825      	ldr	r5, [r4, #0]
 8013b34:	f015 0506 	ands.w	r5, r5, #6
 8013b38:	d107      	bne.n	8013b4a <_printf_common+0x52>
 8013b3a:	f104 0a19 	add.w	sl, r4, #25
 8013b3e:	68e3      	ldr	r3, [r4, #12]
 8013b40:	f8d9 2000 	ldr.w	r2, [r9]
 8013b44:	1a9b      	subs	r3, r3, r2
 8013b46:	42ab      	cmp	r3, r5
 8013b48:	dc28      	bgt.n	8013b9c <_printf_common+0xa4>
 8013b4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013b4e:	6822      	ldr	r2, [r4, #0]
 8013b50:	3300      	adds	r3, #0
 8013b52:	bf18      	it	ne
 8013b54:	2301      	movne	r3, #1
 8013b56:	0692      	lsls	r2, r2, #26
 8013b58:	d42d      	bmi.n	8013bb6 <_printf_common+0xbe>
 8013b5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013b5e:	4639      	mov	r1, r7
 8013b60:	4630      	mov	r0, r6
 8013b62:	47c0      	blx	r8
 8013b64:	3001      	adds	r0, #1
 8013b66:	d020      	beq.n	8013baa <_printf_common+0xb2>
 8013b68:	6823      	ldr	r3, [r4, #0]
 8013b6a:	68e5      	ldr	r5, [r4, #12]
 8013b6c:	f8d9 2000 	ldr.w	r2, [r9]
 8013b70:	f003 0306 	and.w	r3, r3, #6
 8013b74:	2b04      	cmp	r3, #4
 8013b76:	bf08      	it	eq
 8013b78:	1aad      	subeq	r5, r5, r2
 8013b7a:	68a3      	ldr	r3, [r4, #8]
 8013b7c:	6922      	ldr	r2, [r4, #16]
 8013b7e:	bf0c      	ite	eq
 8013b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b84:	2500      	movne	r5, #0
 8013b86:	4293      	cmp	r3, r2
 8013b88:	bfc4      	itt	gt
 8013b8a:	1a9b      	subgt	r3, r3, r2
 8013b8c:	18ed      	addgt	r5, r5, r3
 8013b8e:	f04f 0900 	mov.w	r9, #0
 8013b92:	341a      	adds	r4, #26
 8013b94:	454d      	cmp	r5, r9
 8013b96:	d11a      	bne.n	8013bce <_printf_common+0xd6>
 8013b98:	2000      	movs	r0, #0
 8013b9a:	e008      	b.n	8013bae <_printf_common+0xb6>
 8013b9c:	2301      	movs	r3, #1
 8013b9e:	4652      	mov	r2, sl
 8013ba0:	4639      	mov	r1, r7
 8013ba2:	4630      	mov	r0, r6
 8013ba4:	47c0      	blx	r8
 8013ba6:	3001      	adds	r0, #1
 8013ba8:	d103      	bne.n	8013bb2 <_printf_common+0xba>
 8013baa:	f04f 30ff 	mov.w	r0, #4294967295
 8013bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bb2:	3501      	adds	r5, #1
 8013bb4:	e7c3      	b.n	8013b3e <_printf_common+0x46>
 8013bb6:	18e1      	adds	r1, r4, r3
 8013bb8:	1c5a      	adds	r2, r3, #1
 8013bba:	2030      	movs	r0, #48	; 0x30
 8013bbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013bc0:	4422      	add	r2, r4
 8013bc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013bc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013bca:	3302      	adds	r3, #2
 8013bcc:	e7c5      	b.n	8013b5a <_printf_common+0x62>
 8013bce:	2301      	movs	r3, #1
 8013bd0:	4622      	mov	r2, r4
 8013bd2:	4639      	mov	r1, r7
 8013bd4:	4630      	mov	r0, r6
 8013bd6:	47c0      	blx	r8
 8013bd8:	3001      	adds	r0, #1
 8013bda:	d0e6      	beq.n	8013baa <_printf_common+0xb2>
 8013bdc:	f109 0901 	add.w	r9, r9, #1
 8013be0:	e7d8      	b.n	8013b94 <_printf_common+0x9c>
	...

08013be4 <_printf_i>:
 8013be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013be8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013bec:	460c      	mov	r4, r1
 8013bee:	7e09      	ldrb	r1, [r1, #24]
 8013bf0:	b085      	sub	sp, #20
 8013bf2:	296e      	cmp	r1, #110	; 0x6e
 8013bf4:	4617      	mov	r7, r2
 8013bf6:	4606      	mov	r6, r0
 8013bf8:	4698      	mov	r8, r3
 8013bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bfc:	f000 80b3 	beq.w	8013d66 <_printf_i+0x182>
 8013c00:	d822      	bhi.n	8013c48 <_printf_i+0x64>
 8013c02:	2963      	cmp	r1, #99	; 0x63
 8013c04:	d036      	beq.n	8013c74 <_printf_i+0x90>
 8013c06:	d80a      	bhi.n	8013c1e <_printf_i+0x3a>
 8013c08:	2900      	cmp	r1, #0
 8013c0a:	f000 80b9 	beq.w	8013d80 <_printf_i+0x19c>
 8013c0e:	2958      	cmp	r1, #88	; 0x58
 8013c10:	f000 8083 	beq.w	8013d1a <_printf_i+0x136>
 8013c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013c1c:	e032      	b.n	8013c84 <_printf_i+0xa0>
 8013c1e:	2964      	cmp	r1, #100	; 0x64
 8013c20:	d001      	beq.n	8013c26 <_printf_i+0x42>
 8013c22:	2969      	cmp	r1, #105	; 0x69
 8013c24:	d1f6      	bne.n	8013c14 <_printf_i+0x30>
 8013c26:	6820      	ldr	r0, [r4, #0]
 8013c28:	6813      	ldr	r3, [r2, #0]
 8013c2a:	0605      	lsls	r5, r0, #24
 8013c2c:	f103 0104 	add.w	r1, r3, #4
 8013c30:	d52a      	bpl.n	8013c88 <_printf_i+0xa4>
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	6011      	str	r1, [r2, #0]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	da03      	bge.n	8013c42 <_printf_i+0x5e>
 8013c3a:	222d      	movs	r2, #45	; 0x2d
 8013c3c:	425b      	negs	r3, r3
 8013c3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013c42:	486f      	ldr	r0, [pc, #444]	; (8013e00 <_printf_i+0x21c>)
 8013c44:	220a      	movs	r2, #10
 8013c46:	e039      	b.n	8013cbc <_printf_i+0xd8>
 8013c48:	2973      	cmp	r1, #115	; 0x73
 8013c4a:	f000 809d 	beq.w	8013d88 <_printf_i+0x1a4>
 8013c4e:	d808      	bhi.n	8013c62 <_printf_i+0x7e>
 8013c50:	296f      	cmp	r1, #111	; 0x6f
 8013c52:	d020      	beq.n	8013c96 <_printf_i+0xb2>
 8013c54:	2970      	cmp	r1, #112	; 0x70
 8013c56:	d1dd      	bne.n	8013c14 <_printf_i+0x30>
 8013c58:	6823      	ldr	r3, [r4, #0]
 8013c5a:	f043 0320 	orr.w	r3, r3, #32
 8013c5e:	6023      	str	r3, [r4, #0]
 8013c60:	e003      	b.n	8013c6a <_printf_i+0x86>
 8013c62:	2975      	cmp	r1, #117	; 0x75
 8013c64:	d017      	beq.n	8013c96 <_printf_i+0xb2>
 8013c66:	2978      	cmp	r1, #120	; 0x78
 8013c68:	d1d4      	bne.n	8013c14 <_printf_i+0x30>
 8013c6a:	2378      	movs	r3, #120	; 0x78
 8013c6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013c70:	4864      	ldr	r0, [pc, #400]	; (8013e04 <_printf_i+0x220>)
 8013c72:	e055      	b.n	8013d20 <_printf_i+0x13c>
 8013c74:	6813      	ldr	r3, [r2, #0]
 8013c76:	1d19      	adds	r1, r3, #4
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	6011      	str	r1, [r2, #0]
 8013c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013c84:	2301      	movs	r3, #1
 8013c86:	e08c      	b.n	8013da2 <_printf_i+0x1be>
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	6011      	str	r1, [r2, #0]
 8013c8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013c90:	bf18      	it	ne
 8013c92:	b21b      	sxthne	r3, r3
 8013c94:	e7cf      	b.n	8013c36 <_printf_i+0x52>
 8013c96:	6813      	ldr	r3, [r2, #0]
 8013c98:	6825      	ldr	r5, [r4, #0]
 8013c9a:	1d18      	adds	r0, r3, #4
 8013c9c:	6010      	str	r0, [r2, #0]
 8013c9e:	0628      	lsls	r0, r5, #24
 8013ca0:	d501      	bpl.n	8013ca6 <_printf_i+0xc2>
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	e002      	b.n	8013cac <_printf_i+0xc8>
 8013ca6:	0668      	lsls	r0, r5, #25
 8013ca8:	d5fb      	bpl.n	8013ca2 <_printf_i+0xbe>
 8013caa:	881b      	ldrh	r3, [r3, #0]
 8013cac:	4854      	ldr	r0, [pc, #336]	; (8013e00 <_printf_i+0x21c>)
 8013cae:	296f      	cmp	r1, #111	; 0x6f
 8013cb0:	bf14      	ite	ne
 8013cb2:	220a      	movne	r2, #10
 8013cb4:	2208      	moveq	r2, #8
 8013cb6:	2100      	movs	r1, #0
 8013cb8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013cbc:	6865      	ldr	r5, [r4, #4]
 8013cbe:	60a5      	str	r5, [r4, #8]
 8013cc0:	2d00      	cmp	r5, #0
 8013cc2:	f2c0 8095 	blt.w	8013df0 <_printf_i+0x20c>
 8013cc6:	6821      	ldr	r1, [r4, #0]
 8013cc8:	f021 0104 	bic.w	r1, r1, #4
 8013ccc:	6021      	str	r1, [r4, #0]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d13d      	bne.n	8013d4e <_printf_i+0x16a>
 8013cd2:	2d00      	cmp	r5, #0
 8013cd4:	f040 808e 	bne.w	8013df4 <_printf_i+0x210>
 8013cd8:	4665      	mov	r5, ip
 8013cda:	2a08      	cmp	r2, #8
 8013cdc:	d10b      	bne.n	8013cf6 <_printf_i+0x112>
 8013cde:	6823      	ldr	r3, [r4, #0]
 8013ce0:	07db      	lsls	r3, r3, #31
 8013ce2:	d508      	bpl.n	8013cf6 <_printf_i+0x112>
 8013ce4:	6923      	ldr	r3, [r4, #16]
 8013ce6:	6862      	ldr	r2, [r4, #4]
 8013ce8:	429a      	cmp	r2, r3
 8013cea:	bfde      	ittt	le
 8013cec:	2330      	movle	r3, #48	; 0x30
 8013cee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013cf2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013cf6:	ebac 0305 	sub.w	r3, ip, r5
 8013cfa:	6123      	str	r3, [r4, #16]
 8013cfc:	f8cd 8000 	str.w	r8, [sp]
 8013d00:	463b      	mov	r3, r7
 8013d02:	aa03      	add	r2, sp, #12
 8013d04:	4621      	mov	r1, r4
 8013d06:	4630      	mov	r0, r6
 8013d08:	f7ff fef6 	bl	8013af8 <_printf_common>
 8013d0c:	3001      	adds	r0, #1
 8013d0e:	d14d      	bne.n	8013dac <_printf_i+0x1c8>
 8013d10:	f04f 30ff 	mov.w	r0, #4294967295
 8013d14:	b005      	add	sp, #20
 8013d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d1a:	4839      	ldr	r0, [pc, #228]	; (8013e00 <_printf_i+0x21c>)
 8013d1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013d20:	6813      	ldr	r3, [r2, #0]
 8013d22:	6821      	ldr	r1, [r4, #0]
 8013d24:	1d1d      	adds	r5, r3, #4
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	6015      	str	r5, [r2, #0]
 8013d2a:	060a      	lsls	r2, r1, #24
 8013d2c:	d50b      	bpl.n	8013d46 <_printf_i+0x162>
 8013d2e:	07ca      	lsls	r2, r1, #31
 8013d30:	bf44      	itt	mi
 8013d32:	f041 0120 	orrmi.w	r1, r1, #32
 8013d36:	6021      	strmi	r1, [r4, #0]
 8013d38:	b91b      	cbnz	r3, 8013d42 <_printf_i+0x15e>
 8013d3a:	6822      	ldr	r2, [r4, #0]
 8013d3c:	f022 0220 	bic.w	r2, r2, #32
 8013d40:	6022      	str	r2, [r4, #0]
 8013d42:	2210      	movs	r2, #16
 8013d44:	e7b7      	b.n	8013cb6 <_printf_i+0xd2>
 8013d46:	064d      	lsls	r5, r1, #25
 8013d48:	bf48      	it	mi
 8013d4a:	b29b      	uxthmi	r3, r3
 8013d4c:	e7ef      	b.n	8013d2e <_printf_i+0x14a>
 8013d4e:	4665      	mov	r5, ip
 8013d50:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d54:	fb02 3311 	mls	r3, r2, r1, r3
 8013d58:	5cc3      	ldrb	r3, [r0, r3]
 8013d5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013d5e:	460b      	mov	r3, r1
 8013d60:	2900      	cmp	r1, #0
 8013d62:	d1f5      	bne.n	8013d50 <_printf_i+0x16c>
 8013d64:	e7b9      	b.n	8013cda <_printf_i+0xf6>
 8013d66:	6813      	ldr	r3, [r2, #0]
 8013d68:	6825      	ldr	r5, [r4, #0]
 8013d6a:	6961      	ldr	r1, [r4, #20]
 8013d6c:	1d18      	adds	r0, r3, #4
 8013d6e:	6010      	str	r0, [r2, #0]
 8013d70:	0628      	lsls	r0, r5, #24
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	d501      	bpl.n	8013d7a <_printf_i+0x196>
 8013d76:	6019      	str	r1, [r3, #0]
 8013d78:	e002      	b.n	8013d80 <_printf_i+0x19c>
 8013d7a:	066a      	lsls	r2, r5, #25
 8013d7c:	d5fb      	bpl.n	8013d76 <_printf_i+0x192>
 8013d7e:	8019      	strh	r1, [r3, #0]
 8013d80:	2300      	movs	r3, #0
 8013d82:	6123      	str	r3, [r4, #16]
 8013d84:	4665      	mov	r5, ip
 8013d86:	e7b9      	b.n	8013cfc <_printf_i+0x118>
 8013d88:	6813      	ldr	r3, [r2, #0]
 8013d8a:	1d19      	adds	r1, r3, #4
 8013d8c:	6011      	str	r1, [r2, #0]
 8013d8e:	681d      	ldr	r5, [r3, #0]
 8013d90:	6862      	ldr	r2, [r4, #4]
 8013d92:	2100      	movs	r1, #0
 8013d94:	4628      	mov	r0, r5
 8013d96:	f7ec faab 	bl	80002f0 <memchr>
 8013d9a:	b108      	cbz	r0, 8013da0 <_printf_i+0x1bc>
 8013d9c:	1b40      	subs	r0, r0, r5
 8013d9e:	6060      	str	r0, [r4, #4]
 8013da0:	6863      	ldr	r3, [r4, #4]
 8013da2:	6123      	str	r3, [r4, #16]
 8013da4:	2300      	movs	r3, #0
 8013da6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013daa:	e7a7      	b.n	8013cfc <_printf_i+0x118>
 8013dac:	6923      	ldr	r3, [r4, #16]
 8013dae:	462a      	mov	r2, r5
 8013db0:	4639      	mov	r1, r7
 8013db2:	4630      	mov	r0, r6
 8013db4:	47c0      	blx	r8
 8013db6:	3001      	adds	r0, #1
 8013db8:	d0aa      	beq.n	8013d10 <_printf_i+0x12c>
 8013dba:	6823      	ldr	r3, [r4, #0]
 8013dbc:	079b      	lsls	r3, r3, #30
 8013dbe:	d413      	bmi.n	8013de8 <_printf_i+0x204>
 8013dc0:	68e0      	ldr	r0, [r4, #12]
 8013dc2:	9b03      	ldr	r3, [sp, #12]
 8013dc4:	4298      	cmp	r0, r3
 8013dc6:	bfb8      	it	lt
 8013dc8:	4618      	movlt	r0, r3
 8013dca:	e7a3      	b.n	8013d14 <_printf_i+0x130>
 8013dcc:	2301      	movs	r3, #1
 8013dce:	464a      	mov	r2, r9
 8013dd0:	4639      	mov	r1, r7
 8013dd2:	4630      	mov	r0, r6
 8013dd4:	47c0      	blx	r8
 8013dd6:	3001      	adds	r0, #1
 8013dd8:	d09a      	beq.n	8013d10 <_printf_i+0x12c>
 8013dda:	3501      	adds	r5, #1
 8013ddc:	68e3      	ldr	r3, [r4, #12]
 8013dde:	9a03      	ldr	r2, [sp, #12]
 8013de0:	1a9b      	subs	r3, r3, r2
 8013de2:	42ab      	cmp	r3, r5
 8013de4:	dcf2      	bgt.n	8013dcc <_printf_i+0x1e8>
 8013de6:	e7eb      	b.n	8013dc0 <_printf_i+0x1dc>
 8013de8:	2500      	movs	r5, #0
 8013dea:	f104 0919 	add.w	r9, r4, #25
 8013dee:	e7f5      	b.n	8013ddc <_printf_i+0x1f8>
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d1ac      	bne.n	8013d4e <_printf_i+0x16a>
 8013df4:	7803      	ldrb	r3, [r0, #0]
 8013df6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013dfa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013dfe:	e76c      	b.n	8013cda <_printf_i+0xf6>
 8013e00:	08015fb4 	.word	0x08015fb4
 8013e04:	08015fc5 	.word	0x08015fc5

08013e08 <memmove>:
 8013e08:	4288      	cmp	r0, r1
 8013e0a:	b510      	push	{r4, lr}
 8013e0c:	eb01 0302 	add.w	r3, r1, r2
 8013e10:	d807      	bhi.n	8013e22 <memmove+0x1a>
 8013e12:	1e42      	subs	r2, r0, #1
 8013e14:	4299      	cmp	r1, r3
 8013e16:	d00a      	beq.n	8013e2e <memmove+0x26>
 8013e18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e1c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013e20:	e7f8      	b.n	8013e14 <memmove+0xc>
 8013e22:	4283      	cmp	r3, r0
 8013e24:	d9f5      	bls.n	8013e12 <memmove+0xa>
 8013e26:	1881      	adds	r1, r0, r2
 8013e28:	1ad2      	subs	r2, r2, r3
 8013e2a:	42d3      	cmn	r3, r2
 8013e2c:	d100      	bne.n	8013e30 <memmove+0x28>
 8013e2e:	bd10      	pop	{r4, pc}
 8013e30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013e34:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013e38:	e7f7      	b.n	8013e2a <memmove+0x22>

08013e3a <_realloc_r>:
 8013e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e3c:	4607      	mov	r7, r0
 8013e3e:	4614      	mov	r4, r2
 8013e40:	460e      	mov	r6, r1
 8013e42:	b921      	cbnz	r1, 8013e4e <_realloc_r+0x14>
 8013e44:	4611      	mov	r1, r2
 8013e46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013e4a:	f7ff bc5b 	b.w	8013704 <_malloc_r>
 8013e4e:	b922      	cbnz	r2, 8013e5a <_realloc_r+0x20>
 8013e50:	f7ff fc0a 	bl	8013668 <_free_r>
 8013e54:	4625      	mov	r5, r4
 8013e56:	4628      	mov	r0, r5
 8013e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e5a:	f000 f814 	bl	8013e86 <_malloc_usable_size_r>
 8013e5e:	42a0      	cmp	r0, r4
 8013e60:	d20f      	bcs.n	8013e82 <_realloc_r+0x48>
 8013e62:	4621      	mov	r1, r4
 8013e64:	4638      	mov	r0, r7
 8013e66:	f7ff fc4d 	bl	8013704 <_malloc_r>
 8013e6a:	4605      	mov	r5, r0
 8013e6c:	2800      	cmp	r0, #0
 8013e6e:	d0f2      	beq.n	8013e56 <_realloc_r+0x1c>
 8013e70:	4631      	mov	r1, r6
 8013e72:	4622      	mov	r2, r4
 8013e74:	f7ff fbe4 	bl	8013640 <memcpy>
 8013e78:	4631      	mov	r1, r6
 8013e7a:	4638      	mov	r0, r7
 8013e7c:	f7ff fbf4 	bl	8013668 <_free_r>
 8013e80:	e7e9      	b.n	8013e56 <_realloc_r+0x1c>
 8013e82:	4635      	mov	r5, r6
 8013e84:	e7e7      	b.n	8013e56 <_realloc_r+0x1c>

08013e86 <_malloc_usable_size_r>:
 8013e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e8a:	1f18      	subs	r0, r3, #4
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	bfbc      	itt	lt
 8013e90:	580b      	ldrlt	r3, [r1, r0]
 8013e92:	18c0      	addlt	r0, r0, r3
 8013e94:	4770      	bx	lr

08013e96 <checkint>:
 8013e96:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8013e9a:	2b7e      	cmp	r3, #126	; 0x7e
 8013e9c:	dd10      	ble.n	8013ec0 <checkint+0x2a>
 8013e9e:	2b96      	cmp	r3, #150	; 0x96
 8013ea0:	dc0c      	bgt.n	8013ebc <checkint+0x26>
 8013ea2:	2201      	movs	r2, #1
 8013ea4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8013ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8013eac:	1e5a      	subs	r2, r3, #1
 8013eae:	4202      	tst	r2, r0
 8013eb0:	d106      	bne.n	8013ec0 <checkint+0x2a>
 8013eb2:	4203      	tst	r3, r0
 8013eb4:	bf0c      	ite	eq
 8013eb6:	2002      	moveq	r0, #2
 8013eb8:	2001      	movne	r0, #1
 8013eba:	4770      	bx	lr
 8013ebc:	2002      	movs	r0, #2
 8013ebe:	4770      	bx	lr
 8013ec0:	2000      	movs	r0, #0
 8013ec2:	4770      	bx	lr
 8013ec4:	0000      	movs	r0, r0
	...

08013ec8 <powf>:
 8013ec8:	ee10 1a10 	vmov	r1, s0
 8013ecc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8013ed0:	ee10 4a90 	vmov	r4, s1
 8013ed4:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8013ed8:	0062      	lsls	r2, r4, #1
 8013eda:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8013ede:	eef0 4a60 	vmov.f32	s9, s1
 8013ee2:	f102 30ff 	add.w	r0, r2, #4294967295
 8013ee6:	4b92      	ldr	r3, [pc, #584]	; (8014130 <powf+0x268>)
 8013ee8:	d255      	bcs.n	8013f96 <powf+0xce>
 8013eea:	4298      	cmp	r0, r3
 8013eec:	d855      	bhi.n	8013f9a <powf+0xd2>
 8013eee:	2000      	movs	r0, #0
 8013ef0:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8013ef4:	4a8f      	ldr	r2, [pc, #572]	; (8014134 <powf+0x26c>)
 8013ef6:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 8013efa:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8013efe:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8013f02:	0ddb      	lsrs	r3, r3, #23
 8013f04:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8013f08:	05db      	lsls	r3, r3, #23
 8013f0a:	ed94 6b00 	vldr	d6, [r4]
 8013f0e:	1ac9      	subs	r1, r1, r3
 8013f10:	ee07 1a90 	vmov	s15, r1
 8013f14:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8013f18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013f1c:	eea6 2b07 	vfma.f64	d2, d6, d7
 8013f20:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 8013f24:	ee22 6b02 	vmul.f64	d6, d2, d2
 8013f28:	eea2 7b05 	vfma.f64	d7, d2, d5
 8013f2c:	15db      	asrs	r3, r3, #23
 8013f2e:	ed94 5b02 	vldr	d5, [r4, #8]
 8013f32:	ee00 3a10 	vmov	s0, r3
 8013f36:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8013f3a:	ee30 0b05 	vadd.f64	d0, d0, d5
 8013f3e:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 8013f42:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 8013f46:	eea2 0b05 	vfma.f64	d0, d2, d5
 8013f4a:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 8013f4e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8013f52:	eea6 0b05 	vfma.f64	d0, d6, d5
 8013f56:	ee26 6b06 	vmul.f64	d6, d6, d6
 8013f5a:	eea7 0b06 	vfma.f64	d0, d7, d6
 8013f5e:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 8013f62:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013f66:	ee10 3a90 	vmov	r3, s1
 8013f6a:	2500      	movs	r5, #0
 8013f6c:	0bda      	lsrs	r2, r3, #15
 8013f6e:	2300      	movs	r3, #0
 8013f70:	b292      	uxth	r2, r2
 8013f72:	f248 04be 	movw	r4, #32958	; 0x80be
 8013f76:	429d      	cmp	r5, r3
 8013f78:	bf08      	it	eq
 8013f7a:	4294      	cmpeq	r4, r2
 8013f7c:	f080 8094 	bcs.w	80140a8 <powf+0x1e0>
 8013f80:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8014118 <powf+0x250>
 8013f84:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f8c:	dd76      	ble.n	801407c <powf+0x1b4>
 8013f8e:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8013f92:	f000 be57 	b.w	8014c44 <__math_oflowf>
 8013f96:	4298      	cmp	r0, r3
 8013f98:	d92d      	bls.n	8013ff6 <powf+0x12e>
 8013f9a:	b952      	cbnz	r2, 8013fb2 <powf+0xea>
 8013f9c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8013fa0:	005b      	lsls	r3, r3, #1
 8013fa2:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8013fa6:	f240 80ae 	bls.w	8014106 <powf+0x23e>
 8013faa:	ee30 0a24 	vadd.f32	s0, s0, s9
 8013fae:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8013fb2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8013fb6:	d105      	bne.n	8013fc4 <powf+0xfc>
 8013fb8:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8013fbc:	0064      	lsls	r4, r4, #1
 8013fbe:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8013fc2:	e7f0      	b.n	8013fa6 <powf+0xde>
 8013fc4:	004b      	lsls	r3, r1, #1
 8013fc6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8013fca:	d8ee      	bhi.n	8013faa <powf+0xe2>
 8013fcc:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8013fd0:	d1eb      	bne.n	8013faa <powf+0xe2>
 8013fd2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8013fd6:	f000 8096 	beq.w	8014106 <powf+0x23e>
 8013fda:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8013fde:	ea6f 0404 	mvn.w	r4, r4
 8013fe2:	bf34      	ite	cc
 8013fe4:	2300      	movcc	r3, #0
 8013fe6:	2301      	movcs	r3, #1
 8013fe8:	0fe4      	lsrs	r4, r4, #31
 8013fea:	42a3      	cmp	r3, r4
 8013fec:	f040 808e 	bne.w	801410c <powf+0x244>
 8013ff0:	ee24 0aa4 	vmul.f32	s0, s9, s9
 8013ff4:	e7db      	b.n	8013fae <powf+0xe6>
 8013ff6:	004d      	lsls	r5, r1, #1
 8013ff8:	1e6a      	subs	r2, r5, #1
 8013ffa:	429a      	cmp	r2, r3
 8013ffc:	d91b      	bls.n	8014036 <powf+0x16e>
 8013ffe:	2900      	cmp	r1, #0
 8014000:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014004:	da0e      	bge.n	8014024 <powf+0x15c>
 8014006:	ee10 0a90 	vmov	r0, s1
 801400a:	f7ff ff44 	bl	8013e96 <checkint>
 801400e:	2801      	cmp	r0, #1
 8014010:	d108      	bne.n	8014024 <powf+0x15c>
 8014012:	eeb1 0a40 	vneg.f32	s0, s0
 8014016:	b93d      	cbnz	r5, 8014028 <powf+0x160>
 8014018:	2c00      	cmp	r4, #0
 801401a:	dac8      	bge.n	8013fae <powf+0xe6>
 801401c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8014020:	f000 be16 	b.w	8014c50 <__math_divzerof>
 8014024:	2000      	movs	r0, #0
 8014026:	e7f6      	b.n	8014016 <powf+0x14e>
 8014028:	2c00      	cmp	r4, #0
 801402a:	dac0      	bge.n	8013fae <powf+0xe6>
 801402c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014030:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8014034:	e7bb      	b.n	8013fae <powf+0xe6>
 8014036:	2900      	cmp	r1, #0
 8014038:	da1e      	bge.n	8014078 <powf+0x1b0>
 801403a:	ee10 0a90 	vmov	r0, s1
 801403e:	f7ff ff2a 	bl	8013e96 <checkint>
 8014042:	b918      	cbnz	r0, 801404c <powf+0x184>
 8014044:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8014048:	f000 be12 	b.w	8014c70 <__math_invalidf>
 801404c:	2801      	cmp	r0, #1
 801404e:	bf0c      	ite	eq
 8014050:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8014054:	2000      	movne	r0, #0
 8014056:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801405a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801405e:	f4bf af47 	bcs.w	8013ef0 <powf+0x28>
 8014062:	eddf 0a35 	vldr	s1, [pc, #212]	; 8014138 <powf+0x270>
 8014066:	ee20 0a20 	vmul.f32	s0, s0, s1
 801406a:	ee10 3a10 	vmov	r3, s0
 801406e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014072:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8014076:	e73b      	b.n	8013ef0 <powf+0x28>
 8014078:	2000      	movs	r0, #0
 801407a:	e7ee      	b.n	801405a <powf+0x192>
 801407c:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8014120 <powf+0x258>
 8014080:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014088:	d803      	bhi.n	8014092 <powf+0x1ca>
 801408a:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 801408e:	f000 bdcd 	b.w	8014c2c <__math_uflowf>
 8014092:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8014128 <powf+0x260>
 8014096:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801409a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801409e:	d503      	bpl.n	80140a8 <powf+0x1e0>
 80140a0:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80140a4:	f000 bdc8 	b.w	8014c38 <__math_may_uflowf>
 80140a8:	4924      	ldr	r1, [pc, #144]	; (801413c <powf+0x274>)
 80140aa:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 80140ae:	ee30 6b07 	vadd.f64	d6, d0, d7
 80140b2:	ec55 4b16 	vmov	r4, r5, d6
 80140b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80140ba:	f004 021f 	and.w	r2, r4, #31
 80140be:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80140c2:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 80140c6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80140ca:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80140ce:	e9d2 6700 	ldrd	r6, r7, [r2]
 80140d2:	eea0 7b06 	vfma.f64	d7, d0, d6
 80140d6:	1824      	adds	r4, r4, r0
 80140d8:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 80140dc:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 80140e0:	2000      	movs	r0, #0
 80140e2:	1982      	adds	r2, r0, r6
 80140e4:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 80140e8:	eb41 0307 	adc.w	r3, r1, r7
 80140ec:	eea0 6b05 	vfma.f64	d6, d0, d5
 80140f0:	ee20 0b00 	vmul.f64	d0, d0, d0
 80140f4:	eea6 7b00 	vfma.f64	d7, d6, d0
 80140f8:	ec43 2b16 	vmov	d6, r2, r3
 80140fc:	ee27 0b06 	vmul.f64	d0, d7, d6
 8014100:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014104:	e753      	b.n	8013fae <powf+0xe6>
 8014106:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801410a:	e750      	b.n	8013fae <powf+0xe6>
 801410c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8014140 <powf+0x278>
 8014110:	e74d      	b.n	8013fae <powf+0xe6>
 8014112:	bf00      	nop
 8014114:	f3af 8000 	nop.w
 8014118:	ffd1d571 	.word	0xffd1d571
 801411c:	405fffff 	.word	0x405fffff
 8014120:	00000000 	.word	0x00000000
 8014124:	c062c000 	.word	0xc062c000
 8014128:	00000000 	.word	0x00000000
 801412c:	c062a000 	.word	0xc062a000
 8014130:	fefffffe 	.word	0xfefffffe
 8014134:	08016038 	.word	0x08016038
 8014138:	4b000000 	.word	0x4b000000
 801413c:	080161b0 	.word	0x080161b0
	...

08014148 <pow>:
 8014148:	b570      	push	{r4, r5, r6, lr}
 801414a:	ed2d 8b0a 	vpush	{d8-d12}
 801414e:	eeb0 9b40 	vmov.f64	d9, d0
 8014152:	eeb0 8b41 	vmov.f64	d8, d1
 8014156:	4c8c      	ldr	r4, [pc, #560]	; (8014388 <pow+0x240>)
 8014158:	b08a      	sub	sp, #40	; 0x28
 801415a:	f000 f9c1 	bl	80144e0 <__ieee754_pow>
 801415e:	f994 3000 	ldrsb.w	r3, [r4]
 8014162:	eeb0 ab40 	vmov.f64	d10, d0
 8014166:	1c5a      	adds	r2, r3, #1
 8014168:	4626      	mov	r6, r4
 801416a:	d04b      	beq.n	8014204 <pow+0xbc>
 801416c:	eeb4 8b48 	vcmp.f64	d8, d8
 8014170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014174:	d646      	bvs.n	8014204 <pow+0xbc>
 8014176:	eeb4 9b49 	vcmp.f64	d9, d9
 801417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801417e:	d719      	bvc.n	80141b4 <pow+0x6c>
 8014180:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014188:	d13c      	bne.n	8014204 <pow+0xbc>
 801418a:	2201      	movs	r2, #1
 801418c:	9200      	str	r2, [sp, #0]
 801418e:	497f      	ldr	r1, [pc, #508]	; (801438c <pow+0x244>)
 8014190:	4a7f      	ldr	r2, [pc, #508]	; (8014390 <pow+0x248>)
 8014192:	9201      	str	r2, [sp, #4]
 8014194:	2000      	movs	r0, #0
 8014196:	2200      	movs	r2, #0
 8014198:	2b02      	cmp	r3, #2
 801419a:	9208      	str	r2, [sp, #32]
 801419c:	ed8d 9b02 	vstr	d9, [sp, #8]
 80141a0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80141a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80141a8:	d02a      	beq.n	8014200 <pow+0xb8>
 80141aa:	4668      	mov	r0, sp
 80141ac:	f000 fd80 	bl	8014cb0 <matherr>
 80141b0:	bb00      	cbnz	r0, 80141f4 <pow+0xac>
 80141b2:	e04e      	b.n	8014252 <pow+0x10a>
 80141b4:	ed9f bb72 	vldr	d11, [pc, #456]	; 8014380 <pow+0x238>
 80141b8:	eeb4 9b4b 	vcmp.f64	d9, d11
 80141bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141c0:	eeb0 cb4b 	vmov.f64	d12, d11
 80141c4:	d14a      	bne.n	801425c <pow+0x114>
 80141c6:	eeb4 8b4b 	vcmp.f64	d8, d11
 80141ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ce:	d11f      	bne.n	8014210 <pow+0xc8>
 80141d0:	2201      	movs	r2, #1
 80141d2:	9200      	str	r2, [sp, #0]
 80141d4:	4a6e      	ldr	r2, [pc, #440]	; (8014390 <pow+0x248>)
 80141d6:	9201      	str	r2, [sp, #4]
 80141d8:	2200      	movs	r2, #0
 80141da:	9208      	str	r2, [sp, #32]
 80141dc:	ed8d 9b02 	vstr	d9, [sp, #8]
 80141e0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80141e4:	ed8d bb06 	vstr	d11, [sp, #24]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d0de      	beq.n	80141aa <pow+0x62>
 80141ec:	4b67      	ldr	r3, [pc, #412]	; (801438c <pow+0x244>)
 80141ee:	2200      	movs	r2, #0
 80141f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80141f4:	9b08      	ldr	r3, [sp, #32]
 80141f6:	b11b      	cbz	r3, 8014200 <pow+0xb8>
 80141f8:	f7ff f9e8 	bl	80135cc <__errno>
 80141fc:	9b08      	ldr	r3, [sp, #32]
 80141fe:	6003      	str	r3, [r0, #0]
 8014200:	ed9d ab06 	vldr	d10, [sp, #24]
 8014204:	eeb0 0b4a 	vmov.f64	d0, d10
 8014208:	b00a      	add	sp, #40	; 0x28
 801420a:	ecbd 8b0a 	vpop	{d8-d12}
 801420e:	bd70      	pop	{r4, r5, r6, pc}
 8014210:	eeb0 0b48 	vmov.f64	d0, d8
 8014214:	f000 fd44 	bl	8014ca0 <finite>
 8014218:	2800      	cmp	r0, #0
 801421a:	d0f3      	beq.n	8014204 <pow+0xbc>
 801421c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8014220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014224:	d5ee      	bpl.n	8014204 <pow+0xbc>
 8014226:	2301      	movs	r3, #1
 8014228:	9300      	str	r3, [sp, #0]
 801422a:	4b59      	ldr	r3, [pc, #356]	; (8014390 <pow+0x248>)
 801422c:	9301      	str	r3, [sp, #4]
 801422e:	2300      	movs	r3, #0
 8014230:	9308      	str	r3, [sp, #32]
 8014232:	f994 3000 	ldrsb.w	r3, [r4]
 8014236:	ed8d 9b02 	vstr	d9, [sp, #8]
 801423a:	ed8d 8b04 	vstr	d8, [sp, #16]
 801423e:	b913      	cbnz	r3, 8014246 <pow+0xfe>
 8014240:	ed8d bb06 	vstr	d11, [sp, #24]
 8014244:	e7b1      	b.n	80141aa <pow+0x62>
 8014246:	4953      	ldr	r1, [pc, #332]	; (8014394 <pow+0x24c>)
 8014248:	2000      	movs	r0, #0
 801424a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801424e:	2b02      	cmp	r3, #2
 8014250:	d1ab      	bne.n	80141aa <pow+0x62>
 8014252:	f7ff f9bb 	bl	80135cc <__errno>
 8014256:	2321      	movs	r3, #33	; 0x21
 8014258:	6003      	str	r3, [r0, #0]
 801425a:	e7cb      	b.n	80141f4 <pow+0xac>
 801425c:	f000 fd20 	bl	8014ca0 <finite>
 8014260:	4605      	mov	r5, r0
 8014262:	2800      	cmp	r0, #0
 8014264:	d164      	bne.n	8014330 <pow+0x1e8>
 8014266:	eeb0 0b49 	vmov.f64	d0, d9
 801426a:	f000 fd19 	bl	8014ca0 <finite>
 801426e:	2800      	cmp	r0, #0
 8014270:	d05e      	beq.n	8014330 <pow+0x1e8>
 8014272:	eeb0 0b48 	vmov.f64	d0, d8
 8014276:	f000 fd13 	bl	8014ca0 <finite>
 801427a:	2800      	cmp	r0, #0
 801427c:	d058      	beq.n	8014330 <pow+0x1e8>
 801427e:	eeb4 ab4a 	vcmp.f64	d10, d10
 8014282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014286:	f994 3000 	ldrsb.w	r3, [r4]
 801428a:	4a41      	ldr	r2, [pc, #260]	; (8014390 <pow+0x248>)
 801428c:	d70e      	bvc.n	80142ac <pow+0x164>
 801428e:	2101      	movs	r1, #1
 8014290:	e9cd 1200 	strd	r1, r2, [sp]
 8014294:	9508      	str	r5, [sp, #32]
 8014296:	ed8d 9b02 	vstr	d9, [sp, #8]
 801429a:	ed8d 8b04 	vstr	d8, [sp, #16]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d0ce      	beq.n	8014240 <pow+0xf8>
 80142a2:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 80142a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80142aa:	e7d0      	b.n	801424e <pow+0x106>
 80142ac:	2103      	movs	r1, #3
 80142ae:	ed8d 8b04 	vstr	d8, [sp, #16]
 80142b2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80142b6:	ee28 8b07 	vmul.f64	d8, d8, d7
 80142ba:	e9cd 1200 	strd	r1, r2, [sp]
 80142be:	9508      	str	r5, [sp, #32]
 80142c0:	ed8d 9b02 	vstr	d9, [sp, #8]
 80142c4:	b9fb      	cbnz	r3, 8014306 <pow+0x1be>
 80142c6:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 80142ca:	4b33      	ldr	r3, [pc, #204]	; (8014398 <pow+0x250>)
 80142cc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80142d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80142d8:	d54b      	bpl.n	8014372 <pow+0x22a>
 80142da:	eeb0 0b48 	vmov.f64	d0, d8
 80142de:	f000 fcf3 	bl	8014cc8 <rint>
 80142e2:	eeb4 0b48 	vcmp.f64	d0, d8
 80142e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ea:	d004      	beq.n	80142f6 <pow+0x1ae>
 80142ec:	4b2b      	ldr	r3, [pc, #172]	; (801439c <pow+0x254>)
 80142ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80142f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80142f6:	f996 3000 	ldrsb.w	r3, [r6]
 80142fa:	2b02      	cmp	r3, #2
 80142fc:	d139      	bne.n	8014372 <pow+0x22a>
 80142fe:	f7ff f965 	bl	80135cc <__errno>
 8014302:	2322      	movs	r3, #34	; 0x22
 8014304:	e7a8      	b.n	8014258 <pow+0x110>
 8014306:	4b26      	ldr	r3, [pc, #152]	; (80143a0 <pow+0x258>)
 8014308:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 801430c:	2200      	movs	r2, #0
 801430e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014312:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014316:	d5ee      	bpl.n	80142f6 <pow+0x1ae>
 8014318:	eeb0 0b48 	vmov.f64	d0, d8
 801431c:	f000 fcd4 	bl	8014cc8 <rint>
 8014320:	eeb4 0b48 	vcmp.f64	d0, d8
 8014324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014328:	d0e5      	beq.n	80142f6 <pow+0x1ae>
 801432a:	2200      	movs	r2, #0
 801432c:	4b19      	ldr	r3, [pc, #100]	; (8014394 <pow+0x24c>)
 801432e:	e7e0      	b.n	80142f2 <pow+0x1aa>
 8014330:	eeb5 ab40 	vcmp.f64	d10, #0.0
 8014334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014338:	f47f af64 	bne.w	8014204 <pow+0xbc>
 801433c:	eeb0 0b49 	vmov.f64	d0, d9
 8014340:	f000 fcae 	bl	8014ca0 <finite>
 8014344:	2800      	cmp	r0, #0
 8014346:	f43f af5d 	beq.w	8014204 <pow+0xbc>
 801434a:	eeb0 0b48 	vmov.f64	d0, d8
 801434e:	f000 fca7 	bl	8014ca0 <finite>
 8014352:	2800      	cmp	r0, #0
 8014354:	f43f af56 	beq.w	8014204 <pow+0xbc>
 8014358:	2304      	movs	r3, #4
 801435a:	9300      	str	r3, [sp, #0]
 801435c:	4b0c      	ldr	r3, [pc, #48]	; (8014390 <pow+0x248>)
 801435e:	9301      	str	r3, [sp, #4]
 8014360:	2300      	movs	r3, #0
 8014362:	9308      	str	r3, [sp, #32]
 8014364:	ed8d 9b02 	vstr	d9, [sp, #8]
 8014368:	ed8d 8b04 	vstr	d8, [sp, #16]
 801436c:	ed8d cb06 	vstr	d12, [sp, #24]
 8014370:	e7c1      	b.n	80142f6 <pow+0x1ae>
 8014372:	4668      	mov	r0, sp
 8014374:	f000 fc9c 	bl	8014cb0 <matherr>
 8014378:	2800      	cmp	r0, #0
 801437a:	f47f af3b 	bne.w	80141f4 <pow+0xac>
 801437e:	e7be      	b.n	80142fe <pow+0x1b6>
	...
 8014388:	24000208 	.word	0x24000208
 801438c:	3ff00000 	.word	0x3ff00000
 8014390:	08016160 	.word	0x08016160
 8014394:	fff00000 	.word	0xfff00000
 8014398:	47efffff 	.word	0x47efffff
 801439c:	c7efffff 	.word	0xc7efffff
 80143a0:	7ff00000 	.word	0x7ff00000
 80143a4:	00000000 	.word	0x00000000

080143a8 <sqrt>:
 80143a8:	b500      	push	{lr}
 80143aa:	ed2d 8b02 	vpush	{d8}
 80143ae:	eeb0 8b40 	vmov.f64	d8, d0
 80143b2:	b08b      	sub	sp, #44	; 0x2c
 80143b4:	f000 fc1a 	bl	8014bec <__ieee754_sqrt>
 80143b8:	4b1f      	ldr	r3, [pc, #124]	; (8014438 <sqrt+0x90>)
 80143ba:	f993 3000 	ldrsb.w	r3, [r3]
 80143be:	1c5a      	adds	r2, r3, #1
 80143c0:	d024      	beq.n	801440c <sqrt+0x64>
 80143c2:	eeb4 8b48 	vcmp.f64	d8, d8
 80143c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ca:	d61f      	bvs.n	801440c <sqrt+0x64>
 80143cc:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8014430 <sqrt+0x88>
 80143d0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80143d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143d8:	d518      	bpl.n	801440c <sqrt+0x64>
 80143da:	2201      	movs	r2, #1
 80143dc:	9200      	str	r2, [sp, #0]
 80143de:	4a17      	ldr	r2, [pc, #92]	; (801443c <sqrt+0x94>)
 80143e0:	9201      	str	r2, [sp, #4]
 80143e2:	2200      	movs	r2, #0
 80143e4:	9208      	str	r2, [sp, #32]
 80143e6:	ed8d 8b04 	vstr	d8, [sp, #16]
 80143ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80143ee:	b993      	cbnz	r3, 8014416 <sqrt+0x6e>
 80143f0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80143f4:	4668      	mov	r0, sp
 80143f6:	f000 fc5b 	bl	8014cb0 <matherr>
 80143fa:	b190      	cbz	r0, 8014422 <sqrt+0x7a>
 80143fc:	9b08      	ldr	r3, [sp, #32]
 80143fe:	b11b      	cbz	r3, 8014408 <sqrt+0x60>
 8014400:	f7ff f8e4 	bl	80135cc <__errno>
 8014404:	9b08      	ldr	r3, [sp, #32]
 8014406:	6003      	str	r3, [r0, #0]
 8014408:	ed9d 0b06 	vldr	d0, [sp, #24]
 801440c:	b00b      	add	sp, #44	; 0x2c
 801440e:	ecbd 8b02 	vpop	{d8}
 8014412:	f85d fb04 	ldr.w	pc, [sp], #4
 8014416:	2b02      	cmp	r3, #2
 8014418:	ee87 6b07 	vdiv.f64	d6, d7, d7
 801441c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8014420:	d1e8      	bne.n	80143f4 <sqrt+0x4c>
 8014422:	f7ff f8d3 	bl	80135cc <__errno>
 8014426:	2321      	movs	r3, #33	; 0x21
 8014428:	6003      	str	r3, [r0, #0]
 801442a:	e7e7      	b.n	80143fc <sqrt+0x54>
 801442c:	f3af 8000 	nop.w
	...
 8014438:	24000208 	.word	0x24000208
 801443c:	08016164 	.word	0x08016164

08014440 <sqrtf>:
 8014440:	b500      	push	{lr}
 8014442:	ed2d 8b02 	vpush	{d8}
 8014446:	b08b      	sub	sp, #44	; 0x2c
 8014448:	eeb0 8a40 	vmov.f32	s16, s0
 801444c:	f000 fbd1 	bl	8014bf2 <__ieee754_sqrtf>
 8014450:	4b21      	ldr	r3, [pc, #132]	; (80144d8 <sqrtf+0x98>)
 8014452:	f993 3000 	ldrsb.w	r3, [r3]
 8014456:	1c5a      	adds	r2, r3, #1
 8014458:	d028      	beq.n	80144ac <sqrtf+0x6c>
 801445a:	eeb4 8a48 	vcmp.f32	s16, s16
 801445e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014462:	d623      	bvs.n	80144ac <sqrtf+0x6c>
 8014464:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801446c:	d51e      	bpl.n	80144ac <sqrtf+0x6c>
 801446e:	2201      	movs	r2, #1
 8014470:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8014474:	9200      	str	r2, [sp, #0]
 8014476:	4a19      	ldr	r2, [pc, #100]	; (80144dc <sqrtf+0x9c>)
 8014478:	9201      	str	r2, [sp, #4]
 801447a:	2200      	movs	r2, #0
 801447c:	9208      	str	r2, [sp, #32]
 801447e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8014482:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014486:	ed9f 7b12 	vldr	d7, [pc, #72]	; 80144d0 <sqrtf+0x90>
 801448a:	b9a3      	cbnz	r3, 80144b6 <sqrtf+0x76>
 801448c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014490:	4668      	mov	r0, sp
 8014492:	f000 fc0d 	bl	8014cb0 <matherr>
 8014496:	b1a0      	cbz	r0, 80144c2 <sqrtf+0x82>
 8014498:	9b08      	ldr	r3, [sp, #32]
 801449a:	b11b      	cbz	r3, 80144a4 <sqrtf+0x64>
 801449c:	f7ff f896 	bl	80135cc <__errno>
 80144a0:	9b08      	ldr	r3, [sp, #32]
 80144a2:	6003      	str	r3, [r0, #0]
 80144a4:	ed9d 0b06 	vldr	d0, [sp, #24]
 80144a8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80144ac:	b00b      	add	sp, #44	; 0x2c
 80144ae:	ecbd 8b02 	vpop	{d8}
 80144b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80144b6:	2b02      	cmp	r3, #2
 80144b8:	ee87 6b07 	vdiv.f64	d6, d7, d7
 80144bc:	ed8d 6b06 	vstr	d6, [sp, #24]
 80144c0:	d1e6      	bne.n	8014490 <sqrtf+0x50>
 80144c2:	f7ff f883 	bl	80135cc <__errno>
 80144c6:	2321      	movs	r3, #33	; 0x21
 80144c8:	6003      	str	r3, [r0, #0]
 80144ca:	e7e5      	b.n	8014498 <sqrtf+0x58>
 80144cc:	f3af 8000 	nop.w
	...
 80144d8:	24000208 	.word	0x24000208
 80144dc:	08016169 	.word	0x08016169

080144e0 <__ieee754_pow>:
 80144e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144e4:	ec57 6b11 	vmov	r6, r7, d1
 80144e8:	ed2d 8b02 	vpush	{d8}
 80144ec:	eeb0 8b40 	vmov.f64	d8, d0
 80144f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80144f4:	ea58 0306 	orrs.w	r3, r8, r6
 80144f8:	b085      	sub	sp, #20
 80144fa:	46b9      	mov	r9, r7
 80144fc:	ee11 2a10 	vmov	r2, s2
 8014500:	f000 8306 	beq.w	8014b10 <__ieee754_pow+0x630>
 8014504:	ee18 aa90 	vmov	sl, s17
 8014508:	4bb9      	ldr	r3, [pc, #740]	; (80147f0 <__ieee754_pow+0x310>)
 801450a:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 801450e:	429c      	cmp	r4, r3
 8014510:	ee10 ba10 	vmov	fp, s0
 8014514:	dc0b      	bgt.n	801452e <__ieee754_pow+0x4e>
 8014516:	d105      	bne.n	8014524 <__ieee754_pow+0x44>
 8014518:	f1bb 0f00 	cmp.w	fp, #0
 801451c:	d107      	bne.n	801452e <__ieee754_pow+0x4e>
 801451e:	45a0      	cmp	r8, r4
 8014520:	dc0d      	bgt.n	801453e <__ieee754_pow+0x5e>
 8014522:	e001      	b.n	8014528 <__ieee754_pow+0x48>
 8014524:	4598      	cmp	r8, r3
 8014526:	dc02      	bgt.n	801452e <__ieee754_pow+0x4e>
 8014528:	4598      	cmp	r8, r3
 801452a:	d110      	bne.n	801454e <__ieee754_pow+0x6e>
 801452c:	b17a      	cbz	r2, 801454e <__ieee754_pow+0x6e>
 801452e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014532:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014536:	ea54 030b 	orrs.w	r3, r4, fp
 801453a:	f000 82e9 	beq.w	8014b10 <__ieee754_pow+0x630>
 801453e:	48ad      	ldr	r0, [pc, #692]	; (80147f4 <__ieee754_pow+0x314>)
 8014540:	b005      	add	sp, #20
 8014542:	ecbd 8b02 	vpop	{d8}
 8014546:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801454a:	f000 bbb5 	b.w	8014cb8 <nan>
 801454e:	f1ba 0f00 	cmp.w	sl, #0
 8014552:	da4e      	bge.n	80145f2 <__ieee754_pow+0x112>
 8014554:	4ba8      	ldr	r3, [pc, #672]	; (80147f8 <__ieee754_pow+0x318>)
 8014556:	4598      	cmp	r8, r3
 8014558:	dc49      	bgt.n	80145ee <__ieee754_pow+0x10e>
 801455a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801455e:	4598      	cmp	r8, r3
 8014560:	dd47      	ble.n	80145f2 <__ieee754_pow+0x112>
 8014562:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014566:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801456a:	2b14      	cmp	r3, #20
 801456c:	dd24      	ble.n	80145b8 <__ieee754_pow+0xd8>
 801456e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014572:	fa22 f503 	lsr.w	r5, r2, r3
 8014576:	fa05 f303 	lsl.w	r3, r5, r3
 801457a:	4293      	cmp	r3, r2
 801457c:	d139      	bne.n	80145f2 <__ieee754_pow+0x112>
 801457e:	f005 0501 	and.w	r5, r5, #1
 8014582:	f1c5 0502 	rsb	r5, r5, #2
 8014586:	2a00      	cmp	r2, #0
 8014588:	d15a      	bne.n	8014640 <__ieee754_pow+0x160>
 801458a:	4b99      	ldr	r3, [pc, #612]	; (80147f0 <__ieee754_pow+0x310>)
 801458c:	4598      	cmp	r8, r3
 801458e:	d122      	bne.n	80145d6 <__ieee754_pow+0xf6>
 8014590:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014594:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014598:	ea53 030b 	orrs.w	r3, r3, fp
 801459c:	f000 82b8 	beq.w	8014b10 <__ieee754_pow+0x630>
 80145a0:	4b96      	ldr	r3, [pc, #600]	; (80147fc <__ieee754_pow+0x31c>)
 80145a2:	429c      	cmp	r4, r3
 80145a4:	dd27      	ble.n	80145f6 <__ieee754_pow+0x116>
 80145a6:	f1b9 0f00 	cmp.w	r9, #0
 80145aa:	f280 82b4 	bge.w	8014b16 <__ieee754_pow+0x636>
 80145ae:	ed9f 7b84 	vldr	d7, [pc, #528]	; 80147c0 <__ieee754_pow+0x2e0>
 80145b2:	ed8d 7b00 	vstr	d7, [sp]
 80145b6:	e026      	b.n	8014606 <__ieee754_pow+0x126>
 80145b8:	2a00      	cmp	r2, #0
 80145ba:	d140      	bne.n	801463e <__ieee754_pow+0x15e>
 80145bc:	f1c3 0314 	rsb	r3, r3, #20
 80145c0:	fa48 f503 	asr.w	r5, r8, r3
 80145c4:	fa05 f303 	lsl.w	r3, r5, r3
 80145c8:	4543      	cmp	r3, r8
 80145ca:	f040 82aa 	bne.w	8014b22 <__ieee754_pow+0x642>
 80145ce:	f005 0501 	and.w	r5, r5, #1
 80145d2:	f1c5 0502 	rsb	r5, r5, #2
 80145d6:	4b8a      	ldr	r3, [pc, #552]	; (8014800 <__ieee754_pow+0x320>)
 80145d8:	4598      	cmp	r8, r3
 80145da:	d11b      	bne.n	8014614 <__ieee754_pow+0x134>
 80145dc:	f1b9 0f00 	cmp.w	r9, #0
 80145e0:	f280 829c 	bge.w	8014b1c <__ieee754_pow+0x63c>
 80145e4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80145e8:	ee87 7b08 	vdiv.f64	d7, d7, d8
 80145ec:	e7e1      	b.n	80145b2 <__ieee754_pow+0xd2>
 80145ee:	2502      	movs	r5, #2
 80145f0:	e7c9      	b.n	8014586 <__ieee754_pow+0xa6>
 80145f2:	2500      	movs	r5, #0
 80145f4:	e7c7      	b.n	8014586 <__ieee754_pow+0xa6>
 80145f6:	f1b9 0f00 	cmp.w	r9, #0
 80145fa:	dad8      	bge.n	80145ae <__ieee754_pow+0xce>
 80145fc:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 8014600:	4633      	mov	r3, r6
 8014602:	e9cd 3400 	strd	r3, r4, [sp]
 8014606:	ed9d 0b00 	vldr	d0, [sp]
 801460a:	b005      	add	sp, #20
 801460c:	ecbd 8b02 	vpop	{d8}
 8014610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014614:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014618:	d102      	bne.n	8014620 <__ieee754_pow+0x140>
 801461a:	ee28 7b08 	vmul.f64	d7, d8, d8
 801461e:	e7c8      	b.n	80145b2 <__ieee754_pow+0xd2>
 8014620:	4b78      	ldr	r3, [pc, #480]	; (8014804 <__ieee754_pow+0x324>)
 8014622:	4599      	cmp	r9, r3
 8014624:	d10c      	bne.n	8014640 <__ieee754_pow+0x160>
 8014626:	f1ba 0f00 	cmp.w	sl, #0
 801462a:	db09      	blt.n	8014640 <__ieee754_pow+0x160>
 801462c:	eeb0 0b48 	vmov.f64	d0, d8
 8014630:	b005      	add	sp, #20
 8014632:	ecbd 8b02 	vpop	{d8}
 8014636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801463a:	f000 bad7 	b.w	8014bec <__ieee754_sqrt>
 801463e:	2500      	movs	r5, #0
 8014640:	eeb0 0b48 	vmov.f64	d0, d8
 8014644:	f000 fb23 	bl	8014c8e <fabs>
 8014648:	ed8d 0b00 	vstr	d0, [sp]
 801464c:	f1bb 0f00 	cmp.w	fp, #0
 8014650:	d128      	bne.n	80146a4 <__ieee754_pow+0x1c4>
 8014652:	b124      	cbz	r4, 801465e <__ieee754_pow+0x17e>
 8014654:	4b6a      	ldr	r3, [pc, #424]	; (8014800 <__ieee754_pow+0x320>)
 8014656:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 801465a:	429a      	cmp	r2, r3
 801465c:	d122      	bne.n	80146a4 <__ieee754_pow+0x1c4>
 801465e:	f1b9 0f00 	cmp.w	r9, #0
 8014662:	da07      	bge.n	8014674 <__ieee754_pow+0x194>
 8014664:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014668:	ed9d 6b00 	vldr	d6, [sp]
 801466c:	ee87 7b06 	vdiv.f64	d7, d7, d6
 8014670:	ed8d 7b00 	vstr	d7, [sp]
 8014674:	f1ba 0f00 	cmp.w	sl, #0
 8014678:	dac5      	bge.n	8014606 <__ieee754_pow+0x126>
 801467a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801467e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014682:	ea54 0305 	orrs.w	r3, r4, r5
 8014686:	d106      	bne.n	8014696 <__ieee754_pow+0x1b6>
 8014688:	ed9d 7b00 	vldr	d7, [sp]
 801468c:	ee37 7b47 	vsub.f64	d7, d7, d7
 8014690:	ee87 7b07 	vdiv.f64	d7, d7, d7
 8014694:	e78d      	b.n	80145b2 <__ieee754_pow+0xd2>
 8014696:	2d01      	cmp	r5, #1
 8014698:	d1b5      	bne.n	8014606 <__ieee754_pow+0x126>
 801469a:	ed9d 7b00 	vldr	d7, [sp]
 801469e:	eeb1 7b47 	vneg.f64	d7, d7
 80146a2:	e786      	b.n	80145b2 <__ieee754_pow+0xd2>
 80146a4:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 80146a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80146ac:	ea55 030a 	orrs.w	r3, r5, sl
 80146b0:	d104      	bne.n	80146bc <__ieee754_pow+0x1dc>
 80146b2:	ee38 8b48 	vsub.f64	d8, d8, d8
 80146b6:	ee88 7b08 	vdiv.f64	d7, d8, d8
 80146ba:	e77a      	b.n	80145b2 <__ieee754_pow+0xd2>
 80146bc:	4b52      	ldr	r3, [pc, #328]	; (8014808 <__ieee754_pow+0x328>)
 80146be:	4598      	cmp	r8, r3
 80146c0:	f340 80a8 	ble.w	8014814 <__ieee754_pow+0x334>
 80146c4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80146c8:	4598      	cmp	r8, r3
 80146ca:	dd0b      	ble.n	80146e4 <__ieee754_pow+0x204>
 80146cc:	4b4b      	ldr	r3, [pc, #300]	; (80147fc <__ieee754_pow+0x31c>)
 80146ce:	429c      	cmp	r4, r3
 80146d0:	dc0e      	bgt.n	80146f0 <__ieee754_pow+0x210>
 80146d2:	f1b9 0f00 	cmp.w	r9, #0
 80146d6:	f6bf af6a 	bge.w	80145ae <__ieee754_pow+0xce>
 80146da:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 80147c8 <__ieee754_pow+0x2e8>
 80146de:	ee27 7b07 	vmul.f64	d7, d7, d7
 80146e2:	e766      	b.n	80145b2 <__ieee754_pow+0xd2>
 80146e4:	4b49      	ldr	r3, [pc, #292]	; (801480c <__ieee754_pow+0x32c>)
 80146e6:	429c      	cmp	r4, r3
 80146e8:	ddf3      	ble.n	80146d2 <__ieee754_pow+0x1f2>
 80146ea:	4b45      	ldr	r3, [pc, #276]	; (8014800 <__ieee754_pow+0x320>)
 80146ec:	429c      	cmp	r4, r3
 80146ee:	dd03      	ble.n	80146f8 <__ieee754_pow+0x218>
 80146f0:	f1b9 0f00 	cmp.w	r9, #0
 80146f4:	dcf1      	bgt.n	80146da <__ieee754_pow+0x1fa>
 80146f6:	e75a      	b.n	80145ae <__ieee754_pow+0xce>
 80146f8:	ed9d 7b00 	vldr	d7, [sp]
 80146fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014700:	ed9f 5b33 	vldr	d5, [pc, #204]	; 80147d0 <__ieee754_pow+0x2f0>
 8014704:	ee37 6b46 	vsub.f64	d6, d7, d6
 8014708:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 801470c:	eeb1 3b46 	vneg.f64	d3, d6
 8014710:	eea3 5b07 	vfma.f64	d5, d3, d7
 8014714:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014718:	eea5 7b46 	vfms.f64	d7, d5, d6
 801471c:	ee26 5b06 	vmul.f64	d5, d6, d6
 8014720:	ee27 5b05 	vmul.f64	d5, d7, d5
 8014724:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 80147d8 <__ieee754_pow+0x2f8>
 8014728:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801472c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80147e0 <__ieee754_pow+0x300>
 8014730:	eea6 7b05 	vfma.f64	d7, d6, d5
 8014734:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80147e8 <__ieee754_pow+0x308>
 8014738:	eeb0 4b47 	vmov.f64	d4, d7
 801473c:	eea6 4b05 	vfma.f64	d4, d6, d5
 8014740:	ec53 2b14 	vmov	r2, r3, d4
 8014744:	2200      	movs	r2, #0
 8014746:	ec43 2b14 	vmov	d4, r2, r3
 801474a:	eeb0 6b44 	vmov.f64	d6, d4
 801474e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014752:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014756:	3d01      	subs	r5, #1
 8014758:	ea55 030a 	orrs.w	r3, r5, sl
 801475c:	f04f 0200 	mov.w	r2, #0
 8014760:	463b      	mov	r3, r7
 8014762:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8014766:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801476a:	ec47 6b15 	vmov	d5, r6, r7
 801476e:	fe06 8b08 	vseleq.f64	d8, d6, d8
 8014772:	ec47 6b13 	vmov	d3, r6, r7
 8014776:	ec43 2b16 	vmov	d6, r2, r3
 801477a:	ee27 7b03 	vmul.f64	d7, d7, d3
 801477e:	ee35 5b46 	vsub.f64	d5, d5, d6
 8014782:	4b23      	ldr	r3, [pc, #140]	; (8014810 <__ieee754_pow+0x330>)
 8014784:	eea5 7b04 	vfma.f64	d7, d5, d4
 8014788:	ee24 6b06 	vmul.f64	d6, d4, d6
 801478c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8014790:	ee15 1a90 	vmov	r1, s11
 8014794:	4299      	cmp	r1, r3
 8014796:	ee15 2a10 	vmov	r2, s10
 801479a:	f340 819b 	ble.w	8014ad4 <__ieee754_pow+0x5f4>
 801479e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80147a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80147a6:	4313      	orrs	r3, r2
 80147a8:	f000 810a 	beq.w	80149c0 <__ieee754_pow+0x4e0>
 80147ac:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80147c8 <__ieee754_pow+0x2e8>
 80147b0:	ee28 8b07 	vmul.f64	d8, d8, d7
 80147b4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80147b8:	e6fb      	b.n	80145b2 <__ieee754_pow+0xd2>
 80147ba:	bf00      	nop
 80147bc:	f3af 8000 	nop.w
	...
 80147c8:	8800759c 	.word	0x8800759c
 80147cc:	7e37e43c 	.word	0x7e37e43c
 80147d0:	55555555 	.word	0x55555555
 80147d4:	3fd55555 	.word	0x3fd55555
 80147d8:	652b82fe 	.word	0x652b82fe
 80147dc:	3ff71547 	.word	0x3ff71547
 80147e0:	f85ddf44 	.word	0xf85ddf44
 80147e4:	3e54ae0b 	.word	0x3e54ae0b
 80147e8:	60000000 	.word	0x60000000
 80147ec:	3ff71547 	.word	0x3ff71547
 80147f0:	7ff00000 	.word	0x7ff00000
 80147f4:	08015ad3 	.word	0x08015ad3
 80147f8:	433fffff 	.word	0x433fffff
 80147fc:	3fefffff 	.word	0x3fefffff
 8014800:	3ff00000 	.word	0x3ff00000
 8014804:	3fe00000 	.word	0x3fe00000
 8014808:	41e00000 	.word	0x41e00000
 801480c:	3feffffe 	.word	0x3feffffe
 8014810:	408fffff 	.word	0x408fffff
 8014814:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014818:	f280 80ce 	bge.w	80149b8 <__ieee754_pow+0x4d8>
 801481c:	ed9d 6b00 	vldr	d6, [sp]
 8014820:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 8014b28 <__ieee754_pow+0x648>
 8014824:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014828:	ed8d 7b00 	vstr	d7, [sp]
 801482c:	9c01      	ldr	r4, [sp, #4]
 801482e:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8014832:	1521      	asrs	r1, r4, #20
 8014834:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014838:	4419      	add	r1, r3
 801483a:	4be3      	ldr	r3, [pc, #908]	; (8014bc8 <__ieee754_pow+0x6e8>)
 801483c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014840:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 8014844:	429c      	cmp	r4, r3
 8014846:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 801484a:	dd06      	ble.n	801485a <__ieee754_pow+0x37a>
 801484c:	4bdf      	ldr	r3, [pc, #892]	; (8014bcc <__ieee754_pow+0x6ec>)
 801484e:	429c      	cmp	r4, r3
 8014850:	f340 80b4 	ble.w	80149bc <__ieee754_pow+0x4dc>
 8014854:	3101      	adds	r1, #1
 8014856:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801485a:	2400      	movs	r4, #0
 801485c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014860:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8014864:	4603      	mov	r3, r0
 8014866:	ec43 2b17 	vmov	d7, r2, r3
 801486a:	4bd9      	ldr	r3, [pc, #868]	; (8014bd0 <__ieee754_pow+0x6f0>)
 801486c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8014870:	4463      	add	r3, ip
 8014872:	ed93 5b00 	vldr	d5, [r3]
 8014876:	1040      	asrs	r0, r0, #1
 8014878:	ee37 2b45 	vsub.f64	d2, d7, d5
 801487c:	ee35 6b07 	vadd.f64	d6, d5, d7
 8014880:	ee84 1b06 	vdiv.f64	d1, d4, d6
 8014884:	ee22 6b01 	vmul.f64	d6, d2, d1
 8014888:	ed8d 6b00 	vstr	d6, [sp]
 801488c:	e9dd 8900 	ldrd	r8, r9, [sp]
 8014890:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8014894:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 8014898:	f04f 0800 	mov.w	r8, #0
 801489c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 80148a0:	2200      	movs	r2, #0
 80148a2:	ec49 8b14 	vmov	d4, r8, r9
 80148a6:	ec43 2b16 	vmov	d6, r2, r3
 80148aa:	eeb1 3b44 	vneg.f64	d3, d4
 80148ae:	eea3 2b06 	vfma.f64	d2, d3, d6
 80148b2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80148b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80148ba:	eea3 2b07 	vfma.f64	d2, d3, d7
 80148be:	ed9d 7b00 	vldr	d7, [sp]
 80148c2:	ee22 2b01 	vmul.f64	d2, d2, d1
 80148c6:	ee27 5b07 	vmul.f64	d5, d7, d7
 80148ca:	ee37 6b04 	vadd.f64	d6, d7, d4
 80148ce:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8014b30 <__ieee754_pow+0x650>
 80148d2:	ee25 0b05 	vmul.f64	d0, d5, d5
 80148d6:	ee26 6b02 	vmul.f64	d6, d6, d2
 80148da:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8014b38 <__ieee754_pow+0x658>
 80148de:	eea5 7b01 	vfma.f64	d7, d5, d1
 80148e2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8014b40 <__ieee754_pow+0x660>
 80148e6:	eea7 1b05 	vfma.f64	d1, d7, d5
 80148ea:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8014b48 <__ieee754_pow+0x668>
 80148ee:	eea1 7b05 	vfma.f64	d7, d1, d5
 80148f2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8014b50 <__ieee754_pow+0x670>
 80148f6:	eea7 1b05 	vfma.f64	d1, d7, d5
 80148fa:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8014b58 <__ieee754_pow+0x678>
 80148fe:	eea1 7b05 	vfma.f64	d7, d1, d5
 8014902:	eea0 6b07 	vfma.f64	d6, d0, d7
 8014906:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 801490a:	eeb0 5b47 	vmov.f64	d5, d7
 801490e:	eea4 5b04 	vfma.f64	d5, d4, d4
 8014912:	ee35 5b06 	vadd.f64	d5, d5, d6
 8014916:	ed8d 5b02 	vstr	d5, [sp, #8]
 801491a:	f8cd 8008 	str.w	r8, [sp, #8]
 801491e:	ed9d 5b02 	vldr	d5, [sp, #8]
 8014922:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014926:	eea3 7b04 	vfma.f64	d7, d3, d4
 801492a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801492e:	ed9d 6b00 	vldr	d6, [sp]
 8014932:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014936:	eea2 7b05 	vfma.f64	d7, d2, d5
 801493a:	eeb0 6b47 	vmov.f64	d6, d7
 801493e:	eea4 6b05 	vfma.f64	d6, d4, d5
 8014942:	ed8d 6b00 	vstr	d6, [sp]
 8014946:	f8cd 8000 	str.w	r8, [sp]
 801494a:	ed9d 2b00 	vldr	d2, [sp]
 801494e:	eeb0 6b42 	vmov.f64	d6, d2
 8014952:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014956:	ee37 7b46 	vsub.f64	d7, d7, d6
 801495a:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8014b60 <__ieee754_pow+0x680>
 801495e:	4b9d      	ldr	r3, [pc, #628]	; (8014bd4 <__ieee754_pow+0x6f4>)
 8014960:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014964:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8014b68 <__ieee754_pow+0x688>
 8014968:	4463      	add	r3, ip
 801496a:	eea2 7b06 	vfma.f64	d7, d2, d6
 801496e:	ed93 6b00 	vldr	d6, [r3]
 8014972:	4b99      	ldr	r3, [pc, #612]	; (8014bd8 <__ieee754_pow+0x6f8>)
 8014974:	ee37 6b06 	vadd.f64	d6, d7, d6
 8014978:	449c      	add	ip, r3
 801497a:	ed9c 1b00 	vldr	d1, [ip]
 801497e:	eeb0 4b46 	vmov.f64	d4, d6
 8014982:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8014b70 <__ieee754_pow+0x690>
 8014986:	ee07 1a90 	vmov	s15, r1
 801498a:	eea2 4b03 	vfma.f64	d4, d2, d3
 801498e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014992:	ee34 4b01 	vadd.f64	d4, d4, d1
 8014996:	ee34 5b07 	vadd.f64	d5, d4, d7
 801499a:	ed8d 5b00 	vstr	d5, [sp]
 801499e:	f8cd 8000 	str.w	r8, [sp]
 80149a2:	ed9d 4b00 	vldr	d4, [sp]
 80149a6:	ee34 7b47 	vsub.f64	d7, d4, d7
 80149aa:	ee37 7b41 	vsub.f64	d7, d7, d1
 80149ae:	eea2 7b43 	vfms.f64	d7, d2, d3
 80149b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80149b6:	e6ce      	b.n	8014756 <__ieee754_pow+0x276>
 80149b8:	2300      	movs	r3, #0
 80149ba:	e73a      	b.n	8014832 <__ieee754_pow+0x352>
 80149bc:	2401      	movs	r4, #1
 80149be:	e74d      	b.n	801485c <__ieee754_pow+0x37c>
 80149c0:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8014b78 <__ieee754_pow+0x698>
 80149c4:	ee35 5b46 	vsub.f64	d5, d5, d6
 80149c8:	ee37 4b04 	vadd.f64	d4, d7, d4
 80149cc:	eeb4 4bc5 	vcmpe.f64	d4, d5
 80149d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149d4:	f73f aeea 	bgt.w	80147ac <__ieee754_pow+0x2cc>
 80149d8:	4a80      	ldr	r2, [pc, #512]	; (8014bdc <__ieee754_pow+0x6fc>)
 80149da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80149de:	4293      	cmp	r3, r2
 80149e0:	f340 808e 	ble.w	8014b00 <__ieee754_pow+0x620>
 80149e4:	151b      	asrs	r3, r3, #20
 80149e6:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 80149ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80149ee:	4103      	asrs	r3, r0
 80149f0:	440b      	add	r3, r1
 80149f2:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80149f6:	487a      	ldr	r0, [pc, #488]	; (8014be0 <__ieee754_pow+0x700>)
 80149f8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80149fc:	4110      	asrs	r0, r2
 80149fe:	ea23 0500 	bic.w	r5, r3, r0
 8014a02:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8014a06:	2400      	movs	r4, #0
 8014a08:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 8014a0c:	f1c2 0214 	rsb	r2, r2, #20
 8014a10:	ec45 4b15 	vmov	d5, r4, r5
 8014a14:	4110      	asrs	r0, r2
 8014a16:	2900      	cmp	r1, #0
 8014a18:	bfb8      	it	lt
 8014a1a:	4240      	neglt	r0, r0
 8014a1c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014a20:	ee36 5b07 	vadd.f64	d5, d6, d7
 8014a24:	ec53 2b15 	vmov	r2, r3, d5
 8014a28:	2200      	movs	r2, #0
 8014a2a:	ec43 2b15 	vmov	d5, r2, r3
 8014a2e:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8014b80 <__ieee754_pow+0x6a0>
 8014a32:	ee35 6b46 	vsub.f64	d6, d5, d6
 8014a36:	ee37 6b46 	vsub.f64	d6, d7, d6
 8014a3a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8014b88 <__ieee754_pow+0x6a8>
 8014a3e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8014a42:	eea6 7b04 	vfma.f64	d7, d6, d4
 8014a46:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8014b90 <__ieee754_pow+0x6b0>
 8014a4a:	eeb0 4b47 	vmov.f64	d4, d7
 8014a4e:	eea5 4b06 	vfma.f64	d4, d5, d6
 8014a52:	eeb0 3b44 	vmov.f64	d3, d4
 8014a56:	eea5 3b46 	vfms.f64	d3, d5, d6
 8014a5a:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8014b98 <__ieee754_pow+0x6b8>
 8014a5e:	ee37 7b43 	vsub.f64	d7, d7, d3
 8014a62:	ee24 6b04 	vmul.f64	d6, d4, d4
 8014a66:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8014ba0 <__ieee754_pow+0x6c0>
 8014a6a:	eea4 7b07 	vfma.f64	d7, d4, d7
 8014a6e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8014a72:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8014ba8 <__ieee754_pow+0x6c8>
 8014a76:	eea3 5b06 	vfma.f64	d5, d3, d6
 8014a7a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8014bb0 <__ieee754_pow+0x6d0>
 8014a7e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8014a82:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8014bb8 <__ieee754_pow+0x6d8>
 8014a86:	eea3 5b06 	vfma.f64	d5, d3, d6
 8014a8a:	eeb0 3b44 	vmov.f64	d3, d4
 8014a8e:	eea5 3b46 	vfms.f64	d3, d5, d6
 8014a92:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8014a96:	eeb0 6b43 	vmov.f64	d6, d3
 8014a9a:	ee24 3b03 	vmul.f64	d3, d4, d3
 8014a9e:	ee36 5b45 	vsub.f64	d5, d6, d5
 8014aa2:	ee83 6b05 	vdiv.f64	d6, d3, d5
 8014aa6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014aaa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014aae:	ee37 7b44 	vsub.f64	d7, d7, d4
 8014ab2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014ab6:	ed8d 7b00 	vstr	d7, [sp]
 8014aba:	9901      	ldr	r1, [sp, #4]
 8014abc:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 8014ac0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8014ac4:	da1e      	bge.n	8014b04 <__ieee754_pow+0x624>
 8014ac6:	eeb0 0b47 	vmov.f64	d0, d7
 8014aca:	f000 f989 	bl	8014de0 <scalbn>
 8014ace:	ee20 7b08 	vmul.f64	d7, d0, d8
 8014ad2:	e56e      	b.n	80145b2 <__ieee754_pow+0xd2>
 8014ad4:	4b43      	ldr	r3, [pc, #268]	; (8014be4 <__ieee754_pow+0x704>)
 8014ad6:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8014ada:	4298      	cmp	r0, r3
 8014adc:	f77f af7c 	ble.w	80149d8 <__ieee754_pow+0x4f8>
 8014ae0:	4b41      	ldr	r3, [pc, #260]	; (8014be8 <__ieee754_pow+0x708>)
 8014ae2:	440b      	add	r3, r1
 8014ae4:	4313      	orrs	r3, r2
 8014ae6:	d002      	beq.n	8014aee <__ieee754_pow+0x60e>
 8014ae8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8014bc0 <__ieee754_pow+0x6e0>
 8014aec:	e660      	b.n	80147b0 <__ieee754_pow+0x2d0>
 8014aee:	ee35 5b46 	vsub.f64	d5, d5, d6
 8014af2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8014af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014afa:	f6ff af6d 	blt.w	80149d8 <__ieee754_pow+0x4f8>
 8014afe:	e7f3      	b.n	8014ae8 <__ieee754_pow+0x608>
 8014b00:	2000      	movs	r0, #0
 8014b02:	e78d      	b.n	8014a20 <__ieee754_pow+0x540>
 8014b04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014b08:	460b      	mov	r3, r1
 8014b0a:	ec43 2b10 	vmov	d0, r2, r3
 8014b0e:	e7de      	b.n	8014ace <__ieee754_pow+0x5ee>
 8014b10:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014b14:	e54d      	b.n	80145b2 <__ieee754_pow+0xd2>
 8014b16:	e9cd 6700 	strd	r6, r7, [sp]
 8014b1a:	e574      	b.n	8014606 <__ieee754_pow+0x126>
 8014b1c:	ed8d 8b00 	vstr	d8, [sp]
 8014b20:	e571      	b.n	8014606 <__ieee754_pow+0x126>
 8014b22:	4615      	mov	r5, r2
 8014b24:	e557      	b.n	80145d6 <__ieee754_pow+0xf6>
 8014b26:	bf00      	nop
 8014b28:	00000000 	.word	0x00000000
 8014b2c:	43400000 	.word	0x43400000
 8014b30:	4a454eef 	.word	0x4a454eef
 8014b34:	3fca7e28 	.word	0x3fca7e28
 8014b38:	93c9db65 	.word	0x93c9db65
 8014b3c:	3fcd864a 	.word	0x3fcd864a
 8014b40:	a91d4101 	.word	0xa91d4101
 8014b44:	3fd17460 	.word	0x3fd17460
 8014b48:	518f264d 	.word	0x518f264d
 8014b4c:	3fd55555 	.word	0x3fd55555
 8014b50:	db6fabff 	.word	0xdb6fabff
 8014b54:	3fdb6db6 	.word	0x3fdb6db6
 8014b58:	33333303 	.word	0x33333303
 8014b5c:	3fe33333 	.word	0x3fe33333
 8014b60:	dc3a03fd 	.word	0xdc3a03fd
 8014b64:	3feec709 	.word	0x3feec709
 8014b68:	145b01f5 	.word	0x145b01f5
 8014b6c:	be3e2fe0 	.word	0xbe3e2fe0
 8014b70:	e0000000 	.word	0xe0000000
 8014b74:	3feec709 	.word	0x3feec709
 8014b78:	652b82fe 	.word	0x652b82fe
 8014b7c:	3c971547 	.word	0x3c971547
 8014b80:	fefa39ef 	.word	0xfefa39ef
 8014b84:	3fe62e42 	.word	0x3fe62e42
 8014b88:	0ca86c39 	.word	0x0ca86c39
 8014b8c:	be205c61 	.word	0xbe205c61
 8014b90:	00000000 	.word	0x00000000
 8014b94:	3fe62e43 	.word	0x3fe62e43
 8014b98:	72bea4d0 	.word	0x72bea4d0
 8014b9c:	3e663769 	.word	0x3e663769
 8014ba0:	c5d26bf1 	.word	0xc5d26bf1
 8014ba4:	bebbbd41 	.word	0xbebbbd41
 8014ba8:	af25de2c 	.word	0xaf25de2c
 8014bac:	3f11566a 	.word	0x3f11566a
 8014bb0:	16bebd93 	.word	0x16bebd93
 8014bb4:	bf66c16c 	.word	0xbf66c16c
 8014bb8:	5555553e 	.word	0x5555553e
 8014bbc:	3fc55555 	.word	0x3fc55555
 8014bc0:	c2f8f359 	.word	0xc2f8f359
 8014bc4:	01a56e1f 	.word	0x01a56e1f
 8014bc8:	0003988e 	.word	0x0003988e
 8014bcc:	000bb679 	.word	0x000bb679
 8014bd0:	08016170 	.word	0x08016170
 8014bd4:	08016190 	.word	0x08016190
 8014bd8:	08016180 	.word	0x08016180
 8014bdc:	3fe00000 	.word	0x3fe00000
 8014be0:	000fffff 	.word	0x000fffff
 8014be4:	4090cbff 	.word	0x4090cbff
 8014be8:	3f6f3400 	.word	0x3f6f3400

08014bec <__ieee754_sqrt>:
 8014bec:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8014bf0:	4770      	bx	lr

08014bf2 <__ieee754_sqrtf>:
 8014bf2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014bf6:	4770      	bx	lr

08014bf8 <with_errnof>:
 8014bf8:	b510      	push	{r4, lr}
 8014bfa:	ed2d 8b02 	vpush	{d8}
 8014bfe:	eeb0 8a40 	vmov.f32	s16, s0
 8014c02:	4604      	mov	r4, r0
 8014c04:	f7fe fce2 	bl	80135cc <__errno>
 8014c08:	eeb0 0a48 	vmov.f32	s0, s16
 8014c0c:	ecbd 8b02 	vpop	{d8}
 8014c10:	6004      	str	r4, [r0, #0]
 8014c12:	bd10      	pop	{r4, pc}

08014c14 <xflowf>:
 8014c14:	b130      	cbz	r0, 8014c24 <xflowf+0x10>
 8014c16:	eef1 7a40 	vneg.f32	s15, s0
 8014c1a:	2022      	movs	r0, #34	; 0x22
 8014c1c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014c20:	f7ff bfea 	b.w	8014bf8 <with_errnof>
 8014c24:	eef0 7a40 	vmov.f32	s15, s0
 8014c28:	e7f7      	b.n	8014c1a <xflowf+0x6>
	...

08014c2c <__math_uflowf>:
 8014c2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014c34 <__math_uflowf+0x8>
 8014c30:	f7ff bff0 	b.w	8014c14 <xflowf>
 8014c34:	10000000 	.word	0x10000000

08014c38 <__math_may_uflowf>:
 8014c38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014c40 <__math_may_uflowf+0x8>
 8014c3c:	f7ff bfea 	b.w	8014c14 <xflowf>
 8014c40:	1a200000 	.word	0x1a200000

08014c44 <__math_oflowf>:
 8014c44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014c4c <__math_oflowf+0x8>
 8014c48:	f7ff bfe4 	b.w	8014c14 <xflowf>
 8014c4c:	70000000 	.word	0x70000000

08014c50 <__math_divzerof>:
 8014c50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014c54:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8014c58:	2800      	cmp	r0, #0
 8014c5a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8014c5e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014c6c <__math_divzerof+0x1c>
 8014c62:	2022      	movs	r0, #34	; 0x22
 8014c64:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8014c68:	f7ff bfc6 	b.w	8014bf8 <with_errnof>
 8014c6c:	00000000 	.word	0x00000000

08014c70 <__math_invalidf>:
 8014c70:	eef0 7a40 	vmov.f32	s15, s0
 8014c74:	ee30 7a40 	vsub.f32	s14, s0, s0
 8014c78:	eef4 7a67 	vcmp.f32	s15, s15
 8014c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c80:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8014c84:	d602      	bvs.n	8014c8c <__math_invalidf+0x1c>
 8014c86:	2021      	movs	r0, #33	; 0x21
 8014c88:	f7ff bfb6 	b.w	8014bf8 <with_errnof>
 8014c8c:	4770      	bx	lr

08014c8e <fabs>:
 8014c8e:	ec51 0b10 	vmov	r0, r1, d0
 8014c92:	ee10 2a10 	vmov	r2, s0
 8014c96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014c9a:	ec43 2b10 	vmov	d0, r2, r3
 8014c9e:	4770      	bx	lr

08014ca0 <finite>:
 8014ca0:	ee10 3a90 	vmov	r3, s1
 8014ca4:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8014ca8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014cac:	0fc0      	lsrs	r0, r0, #31
 8014cae:	4770      	bx	lr

08014cb0 <matherr>:
 8014cb0:	2000      	movs	r0, #0
 8014cb2:	4770      	bx	lr
 8014cb4:	0000      	movs	r0, r0
	...

08014cb8 <nan>:
 8014cb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014cc0 <nan+0x8>
 8014cbc:	4770      	bx	lr
 8014cbe:	bf00      	nop
 8014cc0:	00000000 	.word	0x00000000
 8014cc4:	7ff80000 	.word	0x7ff80000

08014cc8 <rint>:
 8014cc8:	b530      	push	{r4, r5, lr}
 8014cca:	b085      	sub	sp, #20
 8014ccc:	ed8d 0b00 	vstr	d0, [sp]
 8014cd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014cd4:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8014cd8:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 8014cdc:	2813      	cmp	r0, #19
 8014cde:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8014ce2:	dc5a      	bgt.n	8014d9a <rint+0xd2>
 8014ce4:	2800      	cmp	r0, #0
 8014ce6:	da2f      	bge.n	8014d48 <rint+0x80>
 8014ce8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014cec:	4311      	orrs	r1, r2
 8014cee:	d027      	beq.n	8014d40 <rint+0x78>
 8014cf0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8014cf4:	4315      	orrs	r5, r2
 8014cf6:	426a      	negs	r2, r5
 8014cf8:	432a      	orrs	r2, r5
 8014cfa:	0b12      	lsrs	r2, r2, #12
 8014cfc:	0c5b      	lsrs	r3, r3, #17
 8014cfe:	045b      	lsls	r3, r3, #17
 8014d00:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8014d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d08:	ea42 0103 	orr.w	r1, r2, r3
 8014d0c:	4b31      	ldr	r3, [pc, #196]	; (8014dd4 <rint+0x10c>)
 8014d0e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014d12:	ed93 6b00 	vldr	d6, [r3]
 8014d16:	ec41 0b17 	vmov	d7, r0, r1
 8014d1a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8014d1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014d22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014d26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014d2a:	ed8d 7b00 	vstr	d7, [sp]
 8014d2e:	9b01      	ldr	r3, [sp, #4]
 8014d30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014d38:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 8014d3c:	e9cd 0100 	strd	r0, r1, [sp]
 8014d40:	ed9d 0b00 	vldr	d0, [sp]
 8014d44:	b005      	add	sp, #20
 8014d46:	bd30      	pop	{r4, r5, pc}
 8014d48:	4923      	ldr	r1, [pc, #140]	; (8014dd8 <rint+0x110>)
 8014d4a:	4101      	asrs	r1, r0
 8014d4c:	ea03 0501 	and.w	r5, r3, r1
 8014d50:	4315      	orrs	r5, r2
 8014d52:	d0f5      	beq.n	8014d40 <rint+0x78>
 8014d54:	0849      	lsrs	r1, r1, #1
 8014d56:	ea03 0501 	and.w	r5, r3, r1
 8014d5a:	432a      	orrs	r2, r5
 8014d5c:	d00b      	beq.n	8014d76 <rint+0xae>
 8014d5e:	ea23 0101 	bic.w	r1, r3, r1
 8014d62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014d66:	2813      	cmp	r0, #19
 8014d68:	fa43 f300 	asr.w	r3, r3, r0
 8014d6c:	bf0c      	ite	eq
 8014d6e:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8014d72:	2200      	movne	r2, #0
 8014d74:	430b      	orrs	r3, r1
 8014d76:	4619      	mov	r1, r3
 8014d78:	4b16      	ldr	r3, [pc, #88]	; (8014dd4 <rint+0x10c>)
 8014d7a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8014d7e:	ed94 6b00 	vldr	d6, [r4]
 8014d82:	4610      	mov	r0, r2
 8014d84:	ec41 0b17 	vmov	d7, r0, r1
 8014d88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8014d8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014d90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014d94:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014d98:	e008      	b.n	8014dac <rint+0xe4>
 8014d9a:	2833      	cmp	r0, #51	; 0x33
 8014d9c:	dd09      	ble.n	8014db2 <rint+0xea>
 8014d9e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014da2:	d1cd      	bne.n	8014d40 <rint+0x78>
 8014da4:	ed9d 7b00 	vldr	d7, [sp]
 8014da8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014dac:	ed8d 7b00 	vstr	d7, [sp]
 8014db0:	e7c6      	b.n	8014d40 <rint+0x78>
 8014db2:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 8014db6:	f04f 31ff 	mov.w	r1, #4294967295
 8014dba:	40c1      	lsrs	r1, r0
 8014dbc:	420a      	tst	r2, r1
 8014dbe:	d0bf      	beq.n	8014d40 <rint+0x78>
 8014dc0:	0849      	lsrs	r1, r1, #1
 8014dc2:	420a      	tst	r2, r1
 8014dc4:	bf1f      	itttt	ne
 8014dc6:	ea22 0101 	bicne.w	r1, r2, r1
 8014dca:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8014dce:	4102      	asrne	r2, r0
 8014dd0:	430a      	orrne	r2, r1
 8014dd2:	e7d0      	b.n	8014d76 <rint+0xae>
 8014dd4:	080161a0 	.word	0x080161a0
 8014dd8:	000fffff 	.word	0x000fffff
 8014ddc:	00000000 	.word	0x00000000

08014de0 <scalbn>:
 8014de0:	b500      	push	{lr}
 8014de2:	ed2d 8b02 	vpush	{d8}
 8014de6:	b083      	sub	sp, #12
 8014de8:	ed8d 0b00 	vstr	d0, [sp]
 8014dec:	9b01      	ldr	r3, [sp, #4]
 8014dee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014df2:	b9a2      	cbnz	r2, 8014e1e <scalbn+0x3e>
 8014df4:	9a00      	ldr	r2, [sp, #0]
 8014df6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014dfa:	4313      	orrs	r3, r2
 8014dfc:	d03a      	beq.n	8014e74 <scalbn+0x94>
 8014dfe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014eb8 <scalbn+0xd8>
 8014e02:	4b35      	ldr	r3, [pc, #212]	; (8014ed8 <scalbn+0xf8>)
 8014e04:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014e08:	4298      	cmp	r0, r3
 8014e0a:	ed8d 7b00 	vstr	d7, [sp]
 8014e0e:	da11      	bge.n	8014e34 <scalbn+0x54>
 8014e10:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8014ec0 <scalbn+0xe0>
 8014e14:	ed9d 6b00 	vldr	d6, [sp]
 8014e18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014e1c:	e007      	b.n	8014e2e <scalbn+0x4e>
 8014e1e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014e22:	428a      	cmp	r2, r1
 8014e24:	d10a      	bne.n	8014e3c <scalbn+0x5c>
 8014e26:	ed9d 7b00 	vldr	d7, [sp]
 8014e2a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014e2e:	ed8d 7b00 	vstr	d7, [sp]
 8014e32:	e01f      	b.n	8014e74 <scalbn+0x94>
 8014e34:	9b01      	ldr	r3, [sp, #4]
 8014e36:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014e3a:	3a36      	subs	r2, #54	; 0x36
 8014e3c:	4402      	add	r2, r0
 8014e3e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014e42:	428a      	cmp	r2, r1
 8014e44:	dd0a      	ble.n	8014e5c <scalbn+0x7c>
 8014e46:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8014ec8 <scalbn+0xe8>
 8014e4a:	eeb0 0b48 	vmov.f64	d0, d8
 8014e4e:	ed9d 1b00 	vldr	d1, [sp]
 8014e52:	f000 f843 	bl	8014edc <copysign>
 8014e56:	ee20 7b08 	vmul.f64	d7, d0, d8
 8014e5a:	e7e8      	b.n	8014e2e <scalbn+0x4e>
 8014e5c:	2a00      	cmp	r2, #0
 8014e5e:	dd10      	ble.n	8014e82 <scalbn+0xa2>
 8014e60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014e68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014e6c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014e70:	e9cd 0100 	strd	r0, r1, [sp]
 8014e74:	ed9d 0b00 	vldr	d0, [sp]
 8014e78:	b003      	add	sp, #12
 8014e7a:	ecbd 8b02 	vpop	{d8}
 8014e7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014e82:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014e86:	da06      	bge.n	8014e96 <scalbn+0xb6>
 8014e88:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014e8c:	4298      	cmp	r0, r3
 8014e8e:	dcda      	bgt.n	8014e46 <scalbn+0x66>
 8014e90:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8014ec0 <scalbn+0xe0>
 8014e94:	e7d9      	b.n	8014e4a <scalbn+0x6a>
 8014e96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014e9e:	3236      	adds	r2, #54	; 0x36
 8014ea0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014ea4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014ea8:	ec41 0b17 	vmov	d7, r0, r1
 8014eac:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8014ed0 <scalbn+0xf0>
 8014eb0:	e7b2      	b.n	8014e18 <scalbn+0x38>
 8014eb2:	bf00      	nop
 8014eb4:	f3af 8000 	nop.w
 8014eb8:	00000000 	.word	0x00000000
 8014ebc:	43500000 	.word	0x43500000
 8014ec0:	c2f8f359 	.word	0xc2f8f359
 8014ec4:	01a56e1f 	.word	0x01a56e1f
 8014ec8:	8800759c 	.word	0x8800759c
 8014ecc:	7e37e43c 	.word	0x7e37e43c
 8014ed0:	00000000 	.word	0x00000000
 8014ed4:	3c900000 	.word	0x3c900000
 8014ed8:	ffff3cb0 	.word	0xffff3cb0

08014edc <copysign>:
 8014edc:	ec51 0b10 	vmov	r0, r1, d0
 8014ee0:	ee11 0a90 	vmov	r0, s3
 8014ee4:	ee10 2a10 	vmov	r2, s0
 8014ee8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014eec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014ef0:	ea41 0300 	orr.w	r3, r1, r0
 8014ef4:	ec43 2b10 	vmov	d0, r2, r3
 8014ef8:	4770      	bx	lr
	...

08014efc <_init>:
 8014efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014efe:	bf00      	nop
 8014f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f02:	bc08      	pop	{r3}
 8014f04:	469e      	mov	lr, r3
 8014f06:	4770      	bx	lr

08014f08 <_fini>:
 8014f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f0a:	bf00      	nop
 8014f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f0e:	bc08      	pop	{r3}
 8014f10:	469e      	mov	lr, r3
 8014f12:	4770      	bx	lr
