
main_board_rev2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000151d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020c0  08015478  08015478  00025478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017538  08017538  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08017538  08017538  00027538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017540  08017540  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017540  08017540  00027540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017544  08017544  00027544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  24000000  08017548  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00022578  24000204  0801774c  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00001304  2402277c  0801774c  0003277c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008c323  00000000  00000000  00030232  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000e22d  00000000  00000000  000bc555  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00028001  00000000  00000000  000ca782  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002c20  00000000  00000000  000f2788  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00004130  00000000  00000000  000f53a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0004e30d  00000000  00000000  000f94d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00040f9c  00000000  00000000  001477e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0019f9dc  00000000  00000000  00188781  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0032815d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009000  00000000  00000000  003281d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000204 	.word	0x24000204
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801545c 	.word	0x0801545c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000208 	.word	0x24000208
 80002dc:	0801545c 	.word	0x0801545c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <calculateCRC>:
uint16_t calculateCRC(uint8_t *data, uint8_t len) {
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;

	for (int i = 0; i < len + 2; i += 2) {
 8000690:	2200      	movs	r2, #0
 8000692:	f101 0c01 	add.w	ip, r1, #1
uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8000696:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t crc = 0;
 8000698:	4613      	mov	r3, r2
		}
		do {
			carry = crc & 0x8000;
			crc <<= 1;
			if(c & shifter) crc++;
			if(carry) crc ^= 0x1021;
 800069a:	f241 0e21 	movw	lr, #4129	; 0x1021
	for (int i = 0; i < len + 2; i += 2) {
 800069e:	4594      	cmp	ip, r2
 80006a0:	da01      	bge.n	80006a6 <calculateCRC+0x16>
			shifter >>= 1;
		} while(shifter);
	}
	return crc;
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (i == len) {
 80006a6:	4291      	cmp	r1, r2
			c = 0;
 80006a8:	461f      	mov	r7, r3
 80006aa:	f44f 4600 	mov.w	r6, #32768	; 0x8000
			c = data[i+1] << 8 | data[i];
 80006ae:	bf17      	itett	ne
 80006b0:	1884      	addne	r4, r0, r2
			c = 0;
 80006b2:	2400      	moveq	r4, #0
			c = data[i+1] << 8 | data[i];
 80006b4:	7865      	ldrbne	r5, [r4, #1]
 80006b6:	5c84      	ldrbne	r4, [r0, r2]
 80006b8:	bf18      	it	ne
 80006ba:	ea44 2405 	orrne.w	r4, r4, r5, lsl #8
			c = 0;
 80006be:	2510      	movs	r5, #16
			crc <<= 1;
 80006c0:	005b      	lsls	r3, r3, #1
			if(c & shifter) crc++;
 80006c2:	4226      	tst	r6, r4
			shifter >>= 1;
 80006c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
			crc <<= 1;
 80006c8:	b29b      	uxth	r3, r3
			if(c & shifter) crc++;
 80006ca:	bf1c      	itt	ne
 80006cc:	3301      	addne	r3, #1
 80006ce:	b29b      	uxthne	r3, r3
			if(carry) crc ^= 0x1021;
 80006d0:	043f      	lsls	r7, r7, #16
 80006d2:	bf48      	it	mi
 80006d4:	ea83 030e 	eormi.w	r3, r3, lr
		} while(shifter);
 80006d8:	3d01      	subs	r5, #1
 80006da:	d101      	bne.n	80006e0 <calculateCRC+0x50>
	for (int i = 0; i < len + 2; i += 2) {
 80006dc:	3202      	adds	r2, #2
 80006de:	e7de      	b.n	800069e <calculateCRC+0xe>
 80006e0:	461f      	mov	r7, r3
 80006e2:	e7ed      	b.n	80006c0 <calculateCRC+0x30>

080006e4 <WriteCommand>:
	return status;


}

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer){
 80006e4:	b570      	push	{r4, r5, r6, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	460d      	mov	r5, r1
	osStatus_t status = osError;

	uint8_t byte_stream_write[14] = { 0 };
 80006ea:	2100      	movs	r1, #0
osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer){
 80006ec:	4606      	mov	r6, r0
 80006ee:	4614      	mov	r4, r2

	uint8_t dma_buffer[20] = { 0 };
 80006f0:	a807      	add	r0, sp, #28
 80006f2:	2214      	movs	r2, #20
	uint8_t byte_stream_write[14] = { 0 };
 80006f4:	f8cd 1012 	str.w	r1, [sp, #18]
 80006f8:	f8cd 1016 	str.w	r1, [sp, #22]
	uint8_t dma_buffer[20] = { 0 };
 80006fc:	f013 fa0f 	bl	8013b1e <memset>

	byte_stream_write[0] = 0x90;			// DLE
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <WriteCommand+0xcc>)
	byte_stream_write[10] = data[1];		// Data
	byte_stream_write[11] = data[0];		// Data - high byte

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 8000702:	aa0c      	add	r2, sp, #48	; 0x30
	byte_stream_write[0] = 0x90;			// DLE
 8000704:	9303      	str	r3, [sp, #12]
	byte_stream_write[3] = 0x04;			// Length of Data in Words
 8000706:	2301      	movs	r3, #1
 8000708:	f88d 3010 	strb.w	r3, [sp, #16]
	byte_stream_write[5] = command[1];		// Index Low Byte
 800070c:	7873      	ldrb	r3, [r6, #1]
 800070e:	f88d 3011 	strb.w	r3, [sp, #17]
	byte_stream_write[6] = command[0];		// Index High byte
 8000712:	7833      	ldrb	r3, [r6, #0]

	HAL_UART_DMAResume(&huart4);
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
	osDelay(5);
	HAL_UART_DMAStop(&huart4);
	memcpy(rx_buffer, dma_buffer, 20);
 8000714:	ae0b      	add	r6, sp, #44	; 0x2c
	byte_stream_write[6] = command[0];		// Index High byte
 8000716:	f88d 3012 	strb.w	r3, [sp, #18]
	byte_stream_write[8] = data[3];			// Data - low byte
 800071a:	78eb      	ldrb	r3, [r5, #3]
 800071c:	f88d 3014 	strb.w	r3, [sp, #20]
	byte_stream_write[9] = data[2];			// Data
 8000720:	78ab      	ldrb	r3, [r5, #2]
 8000722:	f88d 3015 	strb.w	r3, [sp, #21]
	byte_stream_write[10] = data[1];		// Data
 8000726:	786b      	ldrb	r3, [r5, #1]
 8000728:	f88d 3016 	strb.w	r3, [sp, #22]
	byte_stream_write[11] = data[0];		// Data - high byte
 800072c:	782b      	ldrb	r3, [r5, #0]
 800072e:	f88d 3017 	strb.w	r3, [sp, #23]
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 8000732:	466b      	mov	r3, sp
 8000734:	f852 0d22 	ldr.w	r0, [r2, #-34]!
 8000738:	6851      	ldr	r1, [r2, #4]
 800073a:	8912      	ldrh	r2, [r2, #8]
 800073c:	c303      	stmia	r3!, {r0, r1}
	crc_calc = calculateCRC(crc_data_array, 10);
 800073e:	210a      	movs	r1, #10
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 8000740:	801a      	strh	r2, [r3, #0]
	crc_calc = calculateCRC(crc_data_array, 10);
 8000742:	4668      	mov	r0, sp
 8000744:	f7ff ffa4 	bl	8000690 <calculateCRC>
	byte_stream_write[12] = crc_calc & 0xFF;;				// CRC low byte
 8000748:	f88d 0018 	strb.w	r0, [sp, #24]
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 800074c:	0a00      	lsrs	r0, r0, #8
	HAL_UART_Transmit(&huart4, byte_stream_write, 14, 20);
 800074e:	2314      	movs	r3, #20
 8000750:	220e      	movs	r2, #14
 8000752:	a903      	add	r1, sp, #12
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8000754:	f88d 0019 	strb.w	r0, [sp, #25]
	HAL_UART_Transmit(&huart4, byte_stream_write, 14, 20);
 8000758:	4816      	ldr	r0, [pc, #88]	; (80007b4 <WriteCommand+0xd0>)
 800075a:	f00c f995 	bl	800ca88 <HAL_UART_Transmit>
	HAL_UART_DMAResume(&huart4);
 800075e:	4815      	ldr	r0, [pc, #84]	; (80007b4 <WriteCommand+0xd0>)
 8000760:	f00b fd7e 	bl	800c260 <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
 8000764:	2214      	movs	r2, #20
 8000766:	a907      	add	r1, sp, #28
 8000768:	4812      	ldr	r0, [pc, #72]	; (80007b4 <WriteCommand+0xd0>)
 800076a:	f00b fcff 	bl	800c16c <HAL_UART_Receive_DMA>
	osDelay(5);
 800076e:	2005      	movs	r0, #5
 8000770:	f00f fed6 	bl	8010520 <osDelay>
	HAL_UART_DMAStop(&huart4);
 8000774:	480f      	ldr	r0, [pc, #60]	; (80007b4 <WriteCommand+0xd0>)
 8000776:	f00b fd9d 	bl	800c2b4 <HAL_UART_DMAStop>
	memcpy(rx_buffer, dma_buffer, 20);
 800077a:	ab07      	add	r3, sp, #28
 800077c:	4622      	mov	r2, r4
 800077e:	461d      	mov	r5, r3
 8000780:	3208      	adds	r2, #8
 8000782:	cd03      	ldmia	r5!, {r0, r1}
 8000784:	42b5      	cmp	r5, r6
 8000786:	f842 0c08 	str.w	r0, [r2, #-8]
 800078a:	f842 1c04 	str.w	r1, [r2, #-4]
 800078e:	462b      	mov	r3, r5
 8000790:	d1f5      	bne.n	800077e <WriteCommand+0x9a>
 8000792:	6828      	ldr	r0, [r5, #0]
 8000794:	6010      	str	r0, [r2, #0]

	/* Check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8000796:	79a2      	ldrb	r2, [r4, #6]
 8000798:	79e3      	ldrb	r3, [r4, #7]
 800079a:	4313      	orrs	r3, r2
 800079c:	7962      	ldrb	r2, [r4, #5]
 800079e:	4313      	orrs	r3, r2
 80007a0:	7922      	ldrb	r2, [r4, #4]
 80007a2:	4313      	orrs	r3, r2
		status = osOK;
	}

	return status;

}
 80007a4:	bf14      	ite	ne
 80007a6:	f04f 30ff 	movne.w	r0, #4294967295
 80007aa:	2000      	moveq	r0, #0
 80007ac:	b00c      	add	sp, #48	; 0x30
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	04680290 	.word	0x04680290
 80007b4:	2401a7a4 	.word	0x2401a7a4

080007b8 <DisableMotor>:
osStatus_t DisableMotor(){
 80007b8:	b500      	push	{lr}
	command[0] = 0x60;
 80007ba:	f244 1360 	movw	r3, #16736	; 0x4160
osStatus_t DisableMotor(){
 80007be:	b089      	sub	sp, #36	; 0x24
	command[0] = 0x60;
 80007c0:	f8ad 3004 	strh.w	r3, [sp, #4]
	status = WriteCommand(command, data, rx_buffer_write);
 80007c4:	aa03      	add	r2, sp, #12
	data[0] = 0x00;
 80007c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	status = WriteCommand(command, data, rx_buffer_write);
 80007ca:	a902      	add	r1, sp, #8
 80007cc:	a801      	add	r0, sp, #4
	data[0] = 0x00;
 80007ce:	9302      	str	r3, [sp, #8]
	status = WriteCommand(command, data, rx_buffer_write);
 80007d0:	f7ff ff88 	bl	80006e4 <WriteCommand>
}
 80007d4:	b009      	add	sp, #36	; 0x24
 80007d6:	f85d fb04 	ldr.w	pc, [sp], #4

080007da <SetPositionMode>:
osStatus_t SetPositionMode(int8_t position_mode){
 80007da:	b500      	push	{lr}
	command[0] = 0x60;
 80007dc:	f246 0360 	movw	r3, #24672	; 0x6060
osStatus_t SetPositionMode(int8_t position_mode){
 80007e0:	b089      	sub	sp, #36	; 0x24
	command[0] = 0x60;
 80007e2:	f8ad 3004 	strh.w	r3, [sp, #4]
	status = WriteCommand(command, data, rx_buffer_write);
 80007e6:	aa03      	add	r2, sp, #12
	data[0] = 0x00;
 80007e8:	2300      	movs	r3, #0
	status = WriteCommand(command, data, rx_buffer_write);
 80007ea:	a902      	add	r1, sp, #8
	data[3] = position_mode;
 80007ec:	f88d 000b 	strb.w	r0, [sp, #11]
	status = WriteCommand(command, data, rx_buffer_write);
 80007f0:	a801      	add	r0, sp, #4
	data[0] = 0x00;
 80007f2:	f8ad 3008 	strh.w	r3, [sp, #8]
	data[1] = 0x00;
 80007f6:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 80007fa:	f7ff ff73 	bl	80006e4 <WriteCommand>
}
 80007fe:	b009      	add	sp, #36	; 0x24
 8000800:	f85d fb04 	ldr.w	pc, [sp], #4

08000804 <MoveToPositionPPM>:
osStatus_t MoveToPositionPPM(int32_t position){
 8000804:	b510      	push	{r4, lr}
	command[0] = 0x60;
 8000806:	f647 2360 	movw	r3, #31328	; 0x7a60
osStatus_t MoveToPositionPPM(int32_t position){
 800080a:	b088      	sub	sp, #32
	command[0] = 0x60;
 800080c:	f244 0460 	movw	r4, #16480	; 0x4060
	command[0] = 0x60;
 8000810:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (position >> 24) & 0xFF;
 8000814:	0e03      	lsrs	r3, r0, #24
	data[3] = position & 0xFF;
 8000816:	f88d 000b 	strb.w	r0, [sp, #11]
	status = WriteCommand(command, data, rx_buffer_write);
 800081a:	aa03      	add	r2, sp, #12
	data[0] = (position >> 24) & 0xFF;
 800081c:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (position >> 16) & 0xFF;
 8000820:	1403      	asrs	r3, r0, #16
	status = WriteCommand(command, data, rx_buffer_write);
 8000822:	a902      	add	r1, sp, #8
	data[1] = (position >> 16) & 0xFF;
 8000824:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (position >> 8) & 0xFF;
 8000828:	1203      	asrs	r3, r0, #8
	status = WriteCommand(command, data, rx_buffer_write);
 800082a:	a801      	add	r0, sp, #4
	data[2] = (position >> 8) & 0xFF;
 800082c:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 8000830:	f7ff ff58 	bl	80006e4 <WriteCommand>
	data[0] = 0x00;
 8000834:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
	status = WriteCommand(command, data, rx_buffer_write);
 8000838:	aa03      	add	r2, sp, #12
 800083a:	a902      	add	r1, sp, #8
 800083c:	a801      	add	r0, sp, #4
	data[0] = 0x00;
 800083e:	9302      	str	r3, [sp, #8]
	command[0] = 0x60;
 8000840:	f8ad 4004 	strh.w	r4, [sp, #4]
	status = WriteCommand(command, data, rx_buffer_write);
 8000844:	f7ff ff4e 	bl	80006e4 <WriteCommand>
	data[0] = 0x00;
 8000848:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
	status = WriteCommand(command, data, rx_buffer_write);
 800084c:	aa03      	add	r2, sp, #12
 800084e:	a902      	add	r1, sp, #8
 8000850:	a801      	add	r0, sp, #4
	command[0] = 0x60;
 8000852:	f8ad 4004 	strh.w	r4, [sp, #4]
	data[0] = 0x00;
 8000856:	9302      	str	r3, [sp, #8]
	status = WriteCommand(command, data, rx_buffer_write);
 8000858:	f7ff ff44 	bl	80006e4 <WriteCommand>
}
 800085c:	b008      	add	sp, #32
 800085e:	bd10      	pop	{r4, pc}

08000860 <ConfigurePPM>:
osStatus_t ConfigurePPM(int32_t velocity, int32_t acceleration, int32_t deceleration){
 8000860:	b530      	push	{r4, r5, lr}
	command[0] = 0x60;
 8000862:	f248 1360 	movw	r3, #33120	; 0x8160
osStatus_t ConfigurePPM(int32_t velocity, int32_t acceleration, int32_t deceleration){
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	460d      	mov	r5, r1
 800086a:	4614      	mov	r4, r2
	command[0] = 0x60;
 800086c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (velocity >> 24) & 0xFF;
 8000870:	0e03      	lsrs	r3, r0, #24
	data[3] = velocity & 0xFF;
 8000872:	f88d 000b 	strb.w	r0, [sp, #11]
	status = WriteCommand(command, data, rx_buffer_write);
 8000876:	aa03      	add	r2, sp, #12
	data[0] = (velocity >> 24) & 0xFF;
 8000878:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (velocity >> 16) & 0xFF;
 800087c:	1403      	asrs	r3, r0, #16
	status = WriteCommand(command, data, rx_buffer_write);
 800087e:	a902      	add	r1, sp, #8
	data[1] = (velocity >> 16) & 0xFF;
 8000880:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (velocity >> 8) & 0xFF;
 8000884:	1203      	asrs	r3, r0, #8
	status = WriteCommand(command, data, rx_buffer_write);
 8000886:	a801      	add	r0, sp, #4
	data[2] = (velocity >> 8) & 0xFF;
 8000888:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 800088c:	f7ff ff2a 	bl	80006e4 <WriteCommand>
	command[0] = 0x60;
 8000890:	f248 3360 	movw	r3, #33632	; 0x8360
	status = WriteCommand(command, data, rx_buffer_write);
 8000894:	aa03      	add	r2, sp, #12
 8000896:	a902      	add	r1, sp, #8
 8000898:	a801      	add	r0, sp, #4
	command[0] = 0x60;
 800089a:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (acceleration >> 24) & 0xFF;
 800089e:	0e2b      	lsrs	r3, r5, #24
	data[3] = acceleration & 0xFF;
 80008a0:	f88d 500b 	strb.w	r5, [sp, #11]
	data[0] = (acceleration >> 24) & 0xFF;
 80008a4:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (acceleration >> 16) & 0xFF;
 80008a8:	142b      	asrs	r3, r5, #16
 80008aa:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (acceleration >> 8) & 0xFF;
 80008ae:	122b      	asrs	r3, r5, #8
 80008b0:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 80008b4:	f7ff ff16 	bl	80006e4 <WriteCommand>
	command[0] = 0x60;
 80008b8:	f248 4360 	movw	r3, #33888	; 0x8460
	status = WriteCommand(command, data, rx_buffer_write);
 80008bc:	aa03      	add	r2, sp, #12
 80008be:	a902      	add	r1, sp, #8
 80008c0:	a801      	add	r0, sp, #4
	command[0] = 0x60;
 80008c2:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (deceleration >> 24) & 0xFF;
 80008c6:	0e23      	lsrs	r3, r4, #24
	data[3] = deceleration & 0xFF;
 80008c8:	f88d 400b 	strb.w	r4, [sp, #11]
	data[0] = (deceleration >> 24) & 0xFF;
 80008cc:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (deceleration >> 16) & 0xFF;
 80008d0:	1423      	asrs	r3, r4, #16
 80008d2:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (deceleration >> 8) & 0xFF;
 80008d6:	1223      	asrs	r3, r4, #8
 80008d8:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 80008dc:	f7ff ff02 	bl	80006e4 <WriteCommand>
}
 80008e0:	b009      	add	sp, #36	; 0x24
 80008e2:	bd30      	pop	{r4, r5, pc}

080008e4 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer){
 80008e4:	b570      	push	{r4, r5, r6, lr}
 80008e6:	b08e      	sub	sp, #56	; 0x38
 80008e8:	4605      	mov	r5, r0
	osStatus_t status = osError;

	uint8_t byte_stream_read[10];

	uint8_t dma_buffer[30] = { 0 };
 80008ea:	221e      	movs	r2, #30
osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer){
 80008ec:	460c      	mov	r4, r1
	uint8_t dma_buffer[30] = { 0 };
 80008ee:	a806      	add	r0, sp, #24
 80008f0:	2100      	movs	r1, #0
 80008f2:	f013 f914 	bl	8013b1e <memset>

	byte_stream_read[0] = 0x90;				// DLE
 80008f6:	4b27      	ldr	r3, [pc, #156]	; (8000994 <ReadCommand+0xb0>)
	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));

	uint16_t crc_calc = 0;
	crc_calc = calculateCRC(crc_data_array, 6);
 80008f8:	2106      	movs	r1, #6

	HAL_UART_DMAResume(&huart4);
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
	osDelay(5);
	HAL_UART_DMAStop(&huart4);
	memcpy(rx_buffer, dma_buffer, 20);
 80008fa:	ae0a      	add	r6, sp, #40	; 0x28
	byte_stream_read[0] = 0x90;				// DLE
 80008fc:	9303      	str	r3, [sp, #12]
	byte_stream_read[3] = 0x02;				// Length of stuff sent
 80008fe:	2301      	movs	r3, #1
 8000900:	f88d 3010 	strb.w	r3, [sp, #16]
	byte_stream_read[5] = command[1];		// Index Low Byte
 8000904:	786b      	ldrb	r3, [r5, #1]
 8000906:	f88d 3011 	strb.w	r3, [sp, #17]
	byte_stream_read[6] = command[0];		// Index High byte
 800090a:	782b      	ldrb	r3, [r5, #0]
 800090c:	f88d 3012 	strb.w	r3, [sp, #18]
	byte_stream_read[7] = 0x00;				// Subindex of object
 8000910:	2300      	movs	r3, #0
 8000912:	f88d 3013 	strb.w	r3, [sp, #19]
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 8000916:	ab0e      	add	r3, sp, #56	; 0x38
 8000918:	f853 0d2a 	ldr.w	r0, [r3, #-42]!
 800091c:	889b      	ldrh	r3, [r3, #4]
 800091e:	9001      	str	r0, [sp, #4]
	crc_calc = calculateCRC(crc_data_array, 6);
 8000920:	a801      	add	r0, sp, #4
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 8000922:	f8ad 3008 	strh.w	r3, [sp, #8]
	crc_calc = calculateCRC(crc_data_array, 6);
 8000926:	f7ff feb3 	bl	8000690 <calculateCRC>
	HAL_UART_Transmit(&huart4, byte_stream_read, 10, 10);
 800092a:	230a      	movs	r3, #10
	byte_stream_read[8] = crc_calc & 0xFF;;				// CRC low byte
 800092c:	f88d 0014 	strb.w	r0, [sp, #20]
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8000930:	0a00      	lsrs	r0, r0, #8
	HAL_UART_Transmit(&huart4, byte_stream_read, 10, 10);
 8000932:	a903      	add	r1, sp, #12
 8000934:	461a      	mov	r2, r3
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8000936:	f88d 0015 	strb.w	r0, [sp, #21]
	HAL_UART_Transmit(&huart4, byte_stream_read, 10, 10);
 800093a:	4817      	ldr	r0, [pc, #92]	; (8000998 <ReadCommand+0xb4>)
 800093c:	f00c f8a4 	bl	800ca88 <HAL_UART_Transmit>
	HAL_UART_DMAResume(&huart4);
 8000940:	4815      	ldr	r0, [pc, #84]	; (8000998 <ReadCommand+0xb4>)
 8000942:	f00b fc8d 	bl	800c260 <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
 8000946:	2214      	movs	r2, #20
 8000948:	a906      	add	r1, sp, #24
 800094a:	4813      	ldr	r0, [pc, #76]	; (8000998 <ReadCommand+0xb4>)
 800094c:	f00b fc0e 	bl	800c16c <HAL_UART_Receive_DMA>
	osDelay(5);
 8000950:	2005      	movs	r0, #5
 8000952:	f00f fde5 	bl	8010520 <osDelay>
	HAL_UART_DMAStop(&huart4);
 8000956:	4810      	ldr	r0, [pc, #64]	; (8000998 <ReadCommand+0xb4>)
 8000958:	f00b fcac 	bl	800c2b4 <HAL_UART_DMAStop>
	memcpy(rx_buffer, dma_buffer, 20);
 800095c:	ab06      	add	r3, sp, #24
 800095e:	4622      	mov	r2, r4
 8000960:	461d      	mov	r5, r3
 8000962:	3208      	adds	r2, #8
 8000964:	cd03      	ldmia	r5!, {r0, r1}
 8000966:	42b5      	cmp	r5, r6
 8000968:	f842 0c08 	str.w	r0, [r2, #-8]
 800096c:	f842 1c04 	str.w	r1, [r2, #-4]
 8000970:	462b      	mov	r3, r5
 8000972:	d1f5      	bne.n	8000960 <ReadCommand+0x7c>
 8000974:	6828      	ldr	r0, [r5, #0]
 8000976:	6010      	str	r0, [r2, #0]


	/* check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8000978:	79a2      	ldrb	r2, [r4, #6]
 800097a:	79e3      	ldrb	r3, [r4, #7]
 800097c:	4313      	orrs	r3, r2
 800097e:	7962      	ldrb	r2, [r4, #5]
 8000980:	4313      	orrs	r3, r2
 8000982:	7922      	ldrb	r2, [r4, #4]
 8000984:	4313      	orrs	r3, r2
		status = osOK;
	}
	return status;

}
 8000986:	bf14      	ite	ne
 8000988:	f04f 30ff 	movne.w	r0, #4294967295
 800098c:	2000      	moveq	r0, #0
 800098e:	b00e      	add	sp, #56	; 0x38
 8000990:	bd70      	pop	{r4, r5, r6, pc}
 8000992:	bf00      	nop
 8000994:	02600290 	.word	0x02600290
 8000998:	2401a7a4 	.word	0x2401a7a4

0800099c <EnableMotor>:
osStatus_t EnableMotor(){
 800099c:	b510      	push	{r4, lr}
 800099e:	b08c      	sub	sp, #48	; 0x30
	data[0] = 0x00;
 80009a0:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
	command[0] = 0x60;
 80009a4:	f244 0460 	movw	r4, #16480	; 0x4060
	status = WriteCommand(command, data, rx_buffer_write);
 80009a8:	aa02      	add	r2, sp, #8
 80009aa:	a901      	add	r1, sp, #4
 80009ac:	4668      	mov	r0, sp
	data[0] = 0x00;
 80009ae:	9301      	str	r3, [sp, #4]
	command[0] = 0x60;
 80009b0:	f8ad 4000 	strh.w	r4, [sp]
	status = WriteCommand(command, data, rx_buffer_write);
 80009b4:	f7ff fe96 	bl	80006e4 <WriteCommand>
	data[0] = 0x00;
 80009b8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
	status = WriteCommand(command, data, rx_buffer_write);
 80009bc:	aa02      	add	r2, sp, #8
 80009be:	a901      	add	r1, sp, #4
 80009c0:	4668      	mov	r0, sp
	data[0] = 0x00;
 80009c2:	9301      	str	r3, [sp, #4]
	command[0] = 0x60;
 80009c4:	f8ad 4000 	strh.w	r4, [sp]
	status = WriteCommand(command, data, rx_buffer_write);
 80009c8:	f7ff fe8c 	bl	80006e4 <WriteCommand>
	command[0] = 0x60;
 80009cc:	f244 1360 	movw	r3, #16736	; 0x4160
	status = ReadCommand(command, rx_buffer_read);
 80009d0:	a907      	add	r1, sp, #28
 80009d2:	4668      	mov	r0, sp
	command[0] = 0x60;
 80009d4:	f8ad 3000 	strh.w	r3, [sp]
	status = ReadCommand(command, rx_buffer_read);
 80009d8:	f7ff ff84 	bl	80008e4 <ReadCommand>
	if(rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04 ){
 80009dc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80009e0:	2b37      	cmp	r3, #55	; 0x37
 80009e2:	d104      	bne.n	80009ee <EnableMotor+0x52>
 80009e4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80009e8:	2b04      	cmp	r3, #4
		status = osOK;
 80009ea:	bf08      	it	eq
 80009ec:	2000      	moveq	r0, #0
}
 80009ee:	b00c      	add	sp, #48	; 0x30
 80009f0:	bd10      	pop	{r4, pc}

080009f2 <GetPosition>:
osStatus_t GetPosition(int32_t *position){
 80009f2:	b510      	push	{r4, lr}
 80009f4:	b086      	sub	sp, #24
	command[0] = 0x60;
 80009f6:	f246 4360 	movw	r3, #25696	; 0x6460
osStatus_t GetPosition(int32_t *position){
 80009fa:	4604      	mov	r4, r0
	status = ReadCommand(command, rx_buffer_read);
 80009fc:	a901      	add	r1, sp, #4
 80009fe:	4668      	mov	r0, sp
	command[0] = 0x60;
 8000a00:	f8ad 3000 	strh.w	r3, [sp]
	status = ReadCommand(command, rx_buffer_read);
 8000a04:	f7ff ff6e 	bl	80008e4 <ReadCommand>
			(rx_buffer_read[9] << 8) +
 8000a08:	f89d 200d 	ldrb.w	r2, [sp, #13]
	*position = rx_buffer_read[8] +
 8000a0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000a10:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			(rx_buffer_read[10] << 16) +
 8000a14:	f89d 200e 	ldrb.w	r2, [sp, #14]
			(rx_buffer_read[9] << 8) +
 8000a18:	eb03 4302 	add.w	r3, r3, r2, lsl #16
			(rx_buffer_read[11] << 24);
 8000a1c:	f89d 200f 	ldrb.w	r2, [sp, #15]
			(rx_buffer_read[10] << 16) +
 8000a20:	eb03 6302 	add.w	r3, r3, r2, lsl #24
	*position = rx_buffer_read[8] +
 8000a24:	6023      	str	r3, [r4, #0]
}
 8000a26:	b006      	add	sp, #24
 8000a28:	bd10      	pop	{r4, pc}

08000a2a <_gps_search_start>:

#include "GPS/gps.h"

const uint8_t ubxgga[HEADER_SIZE] = {'G','G','A'};

uint32_t _gps_search_start(uint8_t *arr){
 8000a2a:	3001      	adds	r0, #1
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	f240 32a2 	movw	r2, #930	; 0x3a2
			{
			  if(arr[i-2] == ubxgga[0] && arr[i-1] == ubxgga[1] && arr[i] == ubxgga[2])
 8000a32:	f810 1b01 	ldrb.w	r1, [r0], #1
 8000a36:	3301      	adds	r3, #1
 8000a38:	2947      	cmp	r1, #71	; 0x47
 8000a3a:	d107      	bne.n	8000a4c <_gps_search_start+0x22>
 8000a3c:	7801      	ldrb	r1, [r0, #0]
 8000a3e:	2947      	cmp	r1, #71	; 0x47
 8000a40:	d104      	bne.n	8000a4c <_gps_search_start+0x22>
 8000a42:	7841      	ldrb	r1, [r0, #1]
 8000a44:	2941      	cmp	r1, #65	; 0x41
 8000a46:	d101      	bne.n	8000a4c <_gps_search_start+0x22>
			    return i+1;
 8000a48:	4618      	mov	r0, r3
 8000a4a:	4770      	bx	lr
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d1f0      	bne.n	8000a32 <_gps_search_start+0x8>
			}
	return 0;
 8000a50:	2000      	movs	r0, #0
}
 8000a52:	4770      	bx	lr
 8000a54:	0000      	movs	r0, r0
	...

08000a58 <_parse_data>:

uint8_t _parse_data (struct gps_device *dev, uint8_t* data){


	if (data[22] == 'N' || data[22] == 'S'){
 8000a58:	7d8b      	ldrb	r3, [r1, #22]
 8000a5a:	2b4e      	cmp	r3, #78	; 0x4e
uint8_t _parse_data (struct gps_device *dev, uint8_t* data){
 8000a5c:	b510      	push	{r4, lr}
 8000a5e:	ed2d 8b0a 	vpush	{d8-d12}
	if (data[22] == 'N' || data[22] == 'S'){
 8000a62:	f040 80dd 	bne.w	8000c20 <_parse_data+0x1c8>
 8000a66:	1e4b      	subs	r3, r1, #1
 8000a68:	f101 0445 	add.w	r4, r1, #69	; 0x45

		// ASCII to decimal conversion
		for(int i = 0; i < DATA_SIZE; i++) data[i] = data[i]-48;
 8000a6c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8000a70:	3a30      	subs	r2, #48	; 0x30
 8000a72:	42a3      	cmp	r3, r4
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	d1f9      	bne.n	8000a6c <_parse_data+0x14>


		dev->data.hour = data[1]*10 + data[2];
 8000a78:	788c      	ldrb	r4, [r1, #2]
 8000a7a:	230a      	movs	r3, #10
 8000a7c:	784a      	ldrb	r2, [r1, #1]
 8000a7e:	fb13 4202 	smlabb	r2, r3, r2, r4
 8000a82:	6082      	str	r2, [r0, #8]
		dev->data.minute = data[3]*10 + data[4];
 8000a84:	790c      	ldrb	r4, [r1, #4]
 8000a86:	78ca      	ldrb	r2, [r1, #3]
 8000a88:	fb13 4202 	smlabb	r2, r3, r2, r4
 8000a8c:	60c2      	str	r2, [r0, #12]
		dev->data.second = data[5]*10 + data[6];
 8000a8e:	798a      	ldrb	r2, [r1, #6]
 8000a90:	794c      	ldrb	r4, [r1, #5]
 8000a92:	fb13 2304 	smlabb	r3, r3, r4, r2
 8000a96:	6103      	str	r3, [r0, #16]

		dev->data.lat_deg = data[11]*10 +data[12];
 8000a98:	7acb      	ldrb	r3, [r1, #11]
 8000a9a:	7b0a      	ldrb	r2, [r1, #12]
 8000a9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000aa0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000aa4:	7543      	strb	r3, [r0, #21]
		dev->data.lat_decimal = (data[13]*1e7 + data[14]*1e6 + data[16]*1e5 + data[17]*1e4 + data[18]*1e3 + data[19]*1e2 + data[20])/6;
 8000aa6:	7ccb      	ldrb	r3, [r1, #19]
 8000aa8:	ee05 3a10 	vmov	s10, r3
 8000aac:	7c8b      	ldrb	r3, [r1, #18]
 8000aae:	ee06 3a10 	vmov	s12, r3
 8000ab2:	7c4b      	ldrb	r3, [r1, #17]
 8000ab4:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 8000ab8:	ee04 3a10 	vmov	s8, r3
 8000abc:	7c0b      	ldrb	r3, [r1, #16]
 8000abe:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8000ac2:	ee03 3a10 	vmov	s6, r3
 8000ac6:	7b4b      	ldrb	r3, [r1, #13]
 8000ac8:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8000acc:	ee02 3a10 	vmov	s4, r3
 8000ad0:	7b8b      	ldrb	r3, [r1, #14]
 8000ad2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8000ad6:	ee07 3a10 	vmov	s14, r3
 8000ada:	eeb8 2bc2 	vcvt.f64.s32	d2, s4
 8000ade:	7d0b      	ldrb	r3, [r1, #20]
 8000ae0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000ae4:	ed9f ab52 	vldr	d10, [pc, #328]	; 8000c30 <_parse_data+0x1d8>
 8000ae8:	ed9f 9b53 	vldr	d9, [pc, #332]	; 8000c38 <_parse_data+0x1e0>
 8000aec:	ed9f 8b54 	vldr	d8, [pc, #336]	; 8000c40 <_parse_data+0x1e8>
 8000af0:	ee27 7b0a 	vmul.f64	d7, d7, d10
 8000af4:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8000c48 <_parse_data+0x1f0>
 8000af8:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8000c50 <_parse_data+0x1f8>
 8000afc:	eea2 7b09 	vfma.f64	d7, d2, d9
 8000b00:	ed9f 2b55 	vldr	d2, [pc, #340]	; 8000c58 <_parse_data+0x200>
 8000b04:	eea3 7b08 	vfma.f64	d7, d3, d8
 8000b08:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 8000b0c:	eea4 7b00 	vfma.f64	d7, d4, d0
 8000b10:	eea6 7b01 	vfma.f64	d7, d6, d1
 8000b14:	eea5 7b02 	vfma.f64	d7, d5, d2
 8000b18:	eeb0 6b47 	vmov.f64	d6, d7
 8000b1c:	ee07 3a10 	vmov	s14, r3
 8000b20:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000b24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b28:	ee87 6b03 	vdiv.f64	d6, d7, d3
 8000b2c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000b30:	ed80 6a06 	vstr	s12, [r0, #24]

		dev->data.lon_deg = data[25]*10 +data[26];
 8000b34:	7e4b      	ldrb	r3, [r1, #25]
 8000b36:	7e8a      	ldrb	r2, [r1, #26]
 8000b38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b3c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000b40:	7703      	strb	r3, [r0, #28]
		dev->data.lon_decimal = (data[27]*1e7 + data[28]*1e6 + data[30]*1e5 + data[31]*1e4 + data[32]*1e3 + data[33]*1e2 + data[34])/6;
 8000b42:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 8000b46:	ee0c 3a10 	vmov	s24, r3
 8000b4a:	f891 3020 	ldrb.w	r3, [r1, #32]
 8000b4e:	ee0b 3a10 	vmov	s22, r3
 8000b52:	7fcb      	ldrb	r3, [r1, #31]
 8000b54:	eeb8 cbcc 	vcvt.f64.s32	d12, s24
 8000b58:	ee06 3a10 	vmov	s12, r3
 8000b5c:	7f8b      	ldrb	r3, [r1, #30]
 8000b5e:	eeb8 bbcb 	vcvt.f64.s32	d11, s22
 8000b62:	ee05 3a10 	vmov	s10, r3
 8000b66:	7ecb      	ldrb	r3, [r1, #27]
 8000b68:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8000b6c:	ee04 3a10 	vmov	s8, r3
 8000b70:	7f0b      	ldrb	r3, [r1, #28]
 8000b72:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 8000b76:	ee07 3a10 	vmov	s14, r3
 8000b7a:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8000b7e:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
 8000b82:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000b86:	ee27 7b0a 	vmul.f64	d7, d7, d10
 8000b8a:	eea4 7b09 	vfma.f64	d7, d4, d9
 8000b8e:	eea5 7b08 	vfma.f64	d7, d5, d8
 8000b92:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000b96:	eeab 7b01 	vfma.f64	d7, d11, d1
 8000b9a:	eeac 7b02 	vfma.f64	d7, d12, d2
 8000b9e:	eeb0 ab47 	vmov.f64	d10, d7
 8000ba2:	ee07 3a10 	vmov	s14, r3
 8000ba6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000baa:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8000bae:	ee87 6b03 	vdiv.f64	d6, d7, d3
 8000bb2:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000bb6:	ed80 6a08 	vstr	s12, [r0, #32]

		dev->data.fix = data[38];
 8000bba:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8000bbe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

		dev->data.satellite = data[40]*10 + data[41];
 8000bc2:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000bc6:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8000bca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bce:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000bd2:	7503      	strb	r3, [r0, #20]

		dev->data.HDOP = data[43]*100+data[45]*10+data[46];
 8000bd4:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8000bd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bdc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000be0:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8000be4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000bee:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
 8000bf2:	4413      	add	r3, r2
 8000bf4:	84c3      	strh	r3, [r0, #38]	; 0x26

		dev->data.altitude= data[48]*100+data[49]*10+data[50];
 8000bf6:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8000bfa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bfe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000c02:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8000c06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000c10:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
 8000c14:	4413      	add	r3, r2
 8000c16:	8503      	strh	r3, [r0, #40]	; 0x28
 8000c18:	2001      	movs	r0, #1
	else {
		dev->data.fix = 0;
		return 0;
	}
	return 1;
}
 8000c1a:	ecbd 8b0a 	vpop	{d8-d12}
 8000c1e:	bd10      	pop	{r4, pc}
	if (data[22] == 'N' || data[22] == 'S'){
 8000c20:	2b53      	cmp	r3, #83	; 0x53
 8000c22:	f43f af20 	beq.w	8000a66 <_parse_data+0xe>
		dev->data.fix = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		return 0;
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	e7f4      	b.n	8000c1a <_parse_data+0x1c2>
 8000c30:	00000000 	.word	0x00000000
 8000c34:	412e8480 	.word	0x412e8480
 8000c38:	00000000 	.word	0x00000000
 8000c3c:	416312d0 	.word	0x416312d0
 8000c40:	00000000 	.word	0x00000000
 8000c44:	40f86a00 	.word	0x40f86a00
 8000c48:	00000000 	.word	0x00000000
 8000c4c:	40c38800 	.word	0x40c38800
 8000c50:	00000000 	.word	0x00000000
 8000c54:	408f4000 	.word	0x408f4000
 8000c58:	00000000 	.word	0x00000000
 8000c5c:	40590000 	.word	0x40590000

08000c60 <gps_dma_init>:


void gps_dma_init(struct gps_device *dev){
 8000c60:	b510      	push	{r4, lr}
 8000c62:	4604      	mov	r4, r0
	HAL_UART_DMAStop(dev->uart_bus);
 8000c64:	6840      	ldr	r0, [r0, #4]
 8000c66:	f00b fb25 	bl	800c2b4 <HAL_UART_DMAStop>

	HAL_UART_Receive_DMA(dev->uart_bus, gps_data[dev->id], BUFFER_SIZE);
 8000c6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c6e:	7821      	ldrb	r1, [r4, #0]
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <gps_dma_init+0x28>)
 8000c72:	6860      	ldr	r0, [r4, #4]
 8000c74:	fb02 3101 	mla	r1, r2, r1, r3
 8000c78:	f00b fa78 	bl	800c16c <HAL_UART_Receive_DMA>

	HAL_UART_DMAResume(dev->uart_bus);
 8000c7c:	6860      	ldr	r0, [r4, #4]
}
 8000c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_DMAResume(dev->uart_bus);
 8000c82:	f00b baed 	b.w	800c260 <HAL_UART_DMAResume>
 8000c86:	bf00      	nop
 8000c88:	2400901e 	.word	0x2400901e

08000c8c <gps_read_sensor>:



uint8_t gps_read_sensor (struct gps_device *dev){
 8000c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8e:	4604      	mov	r4, r0
	HAL_UART_DMAPause(dev->uart_bus);
 8000c90:	6840      	ldr	r0, [r0, #4]
 8000c92:	f00b fab7 	bl	800c204 <HAL_UART_DMAPause>

	uint32_t data_start = _gps_search_start(gps_data[dev->id]);
 8000c96:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000c9a:	490d      	ldr	r1, [pc, #52]	; (8000cd0 <gps_read_sensor+0x44>)
 8000c9c:	7827      	ldrb	r7, [r4, #0]
 8000c9e:	4e0d      	ldr	r6, [pc, #52]	; (8000cd4 <gps_read_sensor+0x48>)
 8000ca0:	fb05 1507 	mla	r5, r5, r7, r1
 8000ca4:	4628      	mov	r0, r5
 8000ca6:	f7ff fec0 	bl	8000a2a <_gps_search_start>
	if (data_start > 0) memcpy(gps_gga[dev->id], gps_data[dev->id] + data_start, DATA_SIZE);
 8000caa:	b128      	cbz	r0, 8000cb8 <gps_read_sensor+0x2c>
 8000cac:	2246      	movs	r2, #70	; 0x46
 8000cae:	1829      	adds	r1, r5, r0
 8000cb0:	fb07 6002 	mla	r0, r7, r2, r6
 8000cb4:	f012 ff28 	bl	8013b08 <memcpy>

	HAL_UART_DMAResume(dev->uart_bus);
 8000cb8:	6860      	ldr	r0, [r4, #4]
 8000cba:	f00b fad1 	bl	800c260 <HAL_UART_DMAResume>

	return _parse_data(dev, gps_gga[dev->id]);
 8000cbe:	7821      	ldrb	r1, [r4, #0]
 8000cc0:	2346      	movs	r3, #70	; 0x46
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	fb01 6103 	mla	r1, r1, r3, r6
}
 8000cc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return _parse_data(dev, gps_gga[dev->id]);
 8000ccc:	f7ff bec4 	b.w	8000a58 <_parse_data>
 8000cd0:	2400901e 	.word	0x2400901e
 8000cd4:	24008e20 	.word	0x24008e20

08000cd8 <gps_reset>:
	dev->data.hour = 0;
	dev->data.minute = 0;
	dev->data.second = 0;

	dev->data.lat_deg = 0;
	dev->data.lat_decimal = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	6183      	str	r3, [r0, #24]

	dev->data.lon_deg = 0;
 8000cdc:	7703      	strb	r3, [r0, #28]
	dev->data.lon_decimal = 0;
 8000cde:	6203      	str	r3, [r0, #32]

	dev->data.fix = 0;
 8000ce0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	dev->data.minute = 0;
 8000ce4:	6103      	str	r3, [r0, #16]
	dev->data.second = 0;
 8000ce6:	8283      	strh	r3, [r0, #20]

	dev->data.satellite = 0;

	dev->data.HDOP = 0;
 8000ce8:	84c3      	strh	r3, [r0, #38]	; 0x26

	dev->data.altitude= 0;
 8000cea:	8503      	strh	r3, [r0, #40]	; 0x28
	dev->data.hour = 0;
 8000cec:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 8000cf0:	4770      	bx	lr
	...

08000cf4 <init_coeff>:

#include "Sim_Con/controller.h"

/* In this file, all the controller related function as the controller itself will be defined */

void init_coeff(control_data_t *control_data){
 8000cf4:	b570      	push	{r4, r5, r6, lr}
    /* The coefficients are sorted in the following way: Gain 1, Gain 2, Gain 3, Optimal Trajectory*/
    const long double coeff0[POLY_DEG+1] = {-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000868001509274695588003190560506144, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000006734144053942240645165763223097866695, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000017943967053724527790526120972453756926449, 0.000000000000000000000000000000000000000000000000000000000000000000000000000011600941491935255106453433215669137342465324, 0.000000000000000000000000000000000000000000000000000000000000000000000000024003842653456406415201075555759650350223677265, -0.000000000000000000000000000000000000000000000000000000000000000000000018111809768284050761098616789038040361039057944148, -0.000000000000000000000000000000000000000000000000000000000000000000048626795322807690622140144022438412562738932905020920, 0.000000000000000000000000000000000000000000000000000000000000000007420489314715460137826453965576002362709190070801883230, 0.000000000000000000000000000000000000000000000000000000000000094912489417915252510561501393729204256289219371483064906746, 0.000000000000000000000000000000000000000000000000000000000052920131301064704984426808487039401202507286820178230977021240, -0.000000000000000000000000000000000000000000000000000000142328584943567111040099678669599125806190931530978604529693922433, -0.000000000000000000000000000000000000000000000000000206637043647508274878826573874873913387740240970744978496233572370358, 0.000000000000000000000000000000000000000000000000130334867334591797705159920212787647558817394492967999556852539610786702, 0.000000000000000000000000000000000000000000000490489866515998216867458404379428187117827265098035412660415750117880703074, 0.000000000000000000000000000000000000000000026867380644656436850000702522289482657478939067887135595991052719132239096434, -0.000000000000000000000000000000000000000958336406527050599461484506529266000580916845814498770483885341489941271723386135, -0.000000000000000000000000000000000000380110572500376264930409844941662974846208384219693874197621108524730596015191124200, 0.000000000000000000000000000000001846228870037127080708718400229324628612006979121258828532160962041221158639206452239598, 0.000000000000000000000000000000701063223175594818444883139638145152049380684396387992241048156796428280836621271983333248, -0.000000000000000000000000003903941552353450564236090389613619312482757597027505055531398063059663437746049652332658297382, 0.000000000000000000000000921341687636553511160316676520504205771478259592850755826738722497823430579444448085268959403038, 0.000000000000000000006947147284172662813389137056975705843499706683819221137788160747028598507313290610909461975097656250, -0.000000000000000011979567065868153518301726372320952852497657147544385392023968961439095437526702880859375000000000000000, 0.000000000000010700672963404348022988568119097284740871703703768424986719765001907944679260253906250000000000000000000000, -0.000000000006235098773362018059773535637897243634301946979547892624395899474620819091796875000000000000000000000000000000, 0.000000002525183589744375369531118971666051875590852660025120712816715240478515625000000000000000000000000000000000000000, -0.000000720864945346716686813465149036295187556788732763379812240600585937500000000000000000000000000000000000000000000000, 0.000142835180023407189121506521978233195113716647028923034667968750000000000000000000000000000000000000000000000000000000, -0.018733383728017274222343857559280877467244863510131835937500000000000000000000000000000000000000000000000000000000000000, 1.463511559528952288289360694761853665113449096679687500000000000000000000000000000000000000000000000000000000000000000000, -51.561961866915225982666015625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000};
 8000cf6:	24f8      	movs	r4, #248	; 0xf8
void init_coeff(control_data_t *control_data){
 8000cf8:	f5ad 7d78 	sub.w	sp, sp, #992	; 0x3e0
    const long double coeff0[POLY_DEG+1] = {};
 8000cfc:	4e1a      	ldr	r6, [pc, #104]	; (8000d68 <init_coeff+0x74>)
void init_coeff(control_data_t *control_data){
 8000cfe:	4605      	mov	r5, r0
    const long double coeff0[POLY_DEG+1] = {-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000868001509274695588003190560506144, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000006734144053942240645165763223097866695, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000017943967053724527790526120972453756926449, 0.000000000000000000000000000000000000000000000000000000000000000000000000000011600941491935255106453433215669137342465324, 0.000000000000000000000000000000000000000000000000000000000000000000000000024003842653456406415201075555759650350223677265, -0.000000000000000000000000000000000000000000000000000000000000000000000018111809768284050761098616789038040361039057944148, -0.000000000000000000000000000000000000000000000000000000000000000000048626795322807690622140144022438412562738932905020920, 0.000000000000000000000000000000000000000000000000000000000000000007420489314715460137826453965576002362709190070801883230, 0.000000000000000000000000000000000000000000000000000000000000094912489417915252510561501393729204256289219371483064906746, 0.000000000000000000000000000000000000000000000000000000000052920131301064704984426808487039401202507286820178230977021240, -0.000000000000000000000000000000000000000000000000000000142328584943567111040099678669599125806190931530978604529693922433, -0.000000000000000000000000000000000000000000000000000206637043647508274878826573874873913387740240970744978496233572370358, 0.000000000000000000000000000000000000000000000000130334867334591797705159920212787647558817394492967999556852539610786702, 0.000000000000000000000000000000000000000000000490489866515998216867458404379428187117827265098035412660415750117880703074, 0.000000000000000000000000000000000000000000026867380644656436850000702522289482657478939067887135595991052719132239096434, -0.000000000000000000000000000000000000000958336406527050599461484506529266000580916845814498770483885341489941271723386135, -0.000000000000000000000000000000000000380110572500376264930409844941662974846208384219693874197621108524730596015191124200, 0.000000000000000000000000000000001846228870037127080708718400229324628612006979121258828532160962041221158639206452239598, 0.000000000000000000000000000000701063223175594818444883139638145152049380684396387992241048156796428280836621271983333248, -0.000000000000000000000000003903941552353450564236090389613619312482757597027505055531398063059663437746049652332658297382, 0.000000000000000000000000921341687636553511160316676520504205771478259592850755826738722497823430579444448085268959403038, 0.000000000000000000006947147284172662813389137056975705843499706683819221137788160747028598507313290610909461975097656250, -0.000000000000000011979567065868153518301726372320952852497657147544385392023968961439095437526702880859375000000000000000, 0.000000000000010700672963404348022988568119097284740871703703768424986719765001907944679260253906250000000000000000000000, -0.000000000006235098773362018059773535637897243634301946979547892624395899474620819091796875000000000000000000000000000000, 0.000000002525183589744375369531118971666051875590852660025120712816715240478515625000000000000000000000000000000000000000, -0.000000720864945346716686813465149036295187556788732763379812240600585937500000000000000000000000000000000000000000000000, 0.000142835180023407189121506521978233195113716647028923034667968750000000000000000000000000000000000000000000000000000000, -0.018733383728017274222343857559280877467244863510131835937500000000000000000000000000000000000000000000000000000000000000, 1.463511559528952288289360694761853665113449096679687500000000000000000000000000000000000000000000000000000000000000000000, -51.561961866915225982666015625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000};
 8000d00:	4622      	mov	r2, r4
 8000d02:	4668      	mov	r0, sp
 8000d04:	4631      	mov	r1, r6
 8000d06:	f012 feff 	bl	8013b08 <memcpy>
    const long double coeff1[POLY_DEG+1] = {};
 8000d0a:	4622      	mov	r2, r4
 8000d0c:	1931      	adds	r1, r6, r4
 8000d0e:	eb0d 0004 	add.w	r0, sp, r4
 8000d12:	f012 fef9 	bl	8013b08 <memcpy>
    const long double coeff2[POLY_DEG+1] = {};
 8000d16:	4622      	mov	r2, r4
 8000d18:	f506 71f8 	add.w	r1, r6, #496	; 0x1f0
 8000d1c:	a87c      	add	r0, sp, #496	; 0x1f0
 8000d1e:	f012 fef3 	bl	8013b08 <memcpy>
    const long double coeff3[POLY_DEG+1] = {};
 8000d22:	4622      	mov	r2, r4
 8000d24:	f506 713a 	add.w	r1, r6, #744	; 0x2e8
 8000d28:	a8ba      	add	r0, sp, #744	; 0x2e8
 8000d2a:	f012 feed 	bl	8013b08 <memcpy>

    memcpy(control_data->poly_coeff[0], coeff0, sizeof(coeff0));
 8000d2e:	4622      	mov	r2, r4
 8000d30:	4669      	mov	r1, sp
 8000d32:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8000d36:	f012 fee7 	bl	8013b08 <memcpy>
    memcpy(control_data->poly_coeff[1], coeff1, sizeof(coeff1));
 8000d3a:	4622      	mov	r2, r4
 8000d3c:	eb0d 0104 	add.w	r1, sp, r4
 8000d40:	f505 709c 	add.w	r0, r5, #312	; 0x138
 8000d44:	f012 fee0 	bl	8013b08 <memcpy>
    memcpy(control_data->poly_coeff[2], coeff2, sizeof(coeff2));
 8000d48:	4622      	mov	r2, r4
 8000d4a:	a97c      	add	r1, sp, #496	; 0x1f0
 8000d4c:	f505 700c 	add.w	r0, r5, #560	; 0x230
 8000d50:	f012 feda 	bl	8013b08 <memcpy>
    memcpy(control_data->poly_coeff[3], coeff3, sizeof(coeff3));
 8000d54:	4622      	mov	r2, r4
 8000d56:	a9ba      	add	r1, sp, #744	; 0x2e8
 8000d58:	f505 704a 	add.w	r0, r5, #808	; 0x328
 8000d5c:	f012 fed4 	bl	8013b08 <memcpy>
}
 8000d60:	f50d 7d78 	add.w	sp, sp, #992	; 0x3e0
 8000d64:	bd70      	pop	{r4, r5, r6, pc}
 8000d66:	bf00      	nop
 8000d68:	08015478 	.word	0x08015478

08000d6c <control_data_init>:
    }
}


void control_data_reset(control_data_t *control_data){
    control_data->control_input = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	6003      	str	r3, [r0, #0]
    control_data->reference_error = 0;
 8000d70:	6043      	str	r3, [r0, #4]
    control_data->integrated_error = 0;
 8000d72:	6083      	str	r3, [r0, #8]
}

void control_data_init(control_data_t *control_data){
    control_data_reset(control_data);

    control_data->lowerboundary_aw = 0;
 8000d74:	6183      	str	r3, [r0, #24]
    control_data->upperboundary_aw = 0;
 8000d76:	61c3      	str	r3, [r0, #28]

    control_data->safety_counter = 0;
 8000d78:	2300      	movs	r3, #0
void control_data_init(control_data_t *control_data){
 8000d7a:	b510      	push	{r4, lr}
    control_data->safety_counter = 0;
 8000d7c:	8403      	strh	r3, [r0, #32]
void control_data_init(control_data_t *control_data){
 8000d7e:	4604      	mov	r4, r0
    control_data->apogee_approach_phase = false;
 8000d80:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22

    init_coeff(control_data);
 8000d84:	f7ff ffb6 	bl	8000cf4 <init_coeff>

    for(int i = 0; i < NUM_GAINS; i++){
        control_data->gains[i] = 0;
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 8000d90:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8000d94:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    }
}
 8000d98:	bd10      	pop	{r4, pc}
 8000d9a:	0000      	movs	r0, r0
 8000d9c:	0000      	movs	r0, r0
	...

08000da0 <evaluate_polyfit>:

/* Does the Polynomial Calculation of the reference velocity */
void evaluate_polyfit(control_data_t *control_data) {
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	ed2d 8b02 	vpush	{d8}
    /* For Speed */
    double x_placeholder = 0;

    /* Reset gains */
    for (int i = 0; i < NUM_GAINS; i++) {
        control_data->gains[i] = 0;
 8000da6:	ed9f 8b1e 	vldr	d8, [pc, #120]	; 8000e20 <evaluate_polyfit+0x80>
void evaluate_polyfit(control_data_t *control_data) {
 8000daa:	4604      	mov	r4, r0
 8000dac:	f100 0540 	add.w	r5, r0, #64	; 0x40
        control_data->gains[i] = 0;
 8000db0:	261e      	movs	r6, #30
 8000db2:	ed80 8b0a 	vstr	d8, [r0, #40]	; 0x28
 8000db6:	ed80 8b0c 	vstr	d8, [r0, #48]	; 0x30
 8000dba:	ed80 8b0e 	vstr	d8, [r0, #56]	; 0x38
    /* Reset ref_velocity_placeholder*/
    double ref_velocity_placeholder = 0;

    /* For loop */
    for (int i = 0; i < POLY_DEG + 1; ++i) {
        x_placeholder = pow(control_data->sf_ref_altitude_AGL, (double)(POLY_DEG - i));
 8000dbe:	ee07 6a90 	vmov	s15, r6
 8000dc2:	ed94 0a03 	vldr	s0, [r4, #12]
 8000dc6:	eeb8 1be7 	vcvt.f64.s32	d1, s15
 8000dca:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8000dce:	f013 fc6b 	bl	80146a8 <pow>
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8000dd2:	f116 36ff 	adds.w	r6, r6, #4294967295
        control_data->gains[0] += control_data->poly_coeff[0][i] * x_placeholder;
 8000dd6:	ecb5 6b02 	vldmia	r5!, {d6}
 8000dda:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
 8000dde:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000de2:	ed84 7b0a 	vstr	d7, [r4, #40]	; 0x28
        control_data->gains[1] += control_data->poly_coeff[1][i] * x_placeholder;
 8000de6:	ed94 7b0c 	vldr	d7, [r4, #48]	; 0x30
 8000dea:	ed95 6b3c 	vldr	d6, [r5, #240]	; 0xf0
 8000dee:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000df2:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
        control_data->gains[2] += control_data->poly_coeff[2][i] * x_placeholder;
 8000df6:	ed94 7b0e 	vldr	d7, [r4, #56]	; 0x38
 8000dfa:	ed95 6b7a 	vldr	d6, [r5, #488]	; 0x1e8
 8000dfe:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000e02:	ed84 7b0e 	vstr	d7, [r4, #56]	; 0x38
        ref_velocity_placeholder += (control_data->poly_coeff[3][i] * x_placeholder);
 8000e06:	ed95 7bb8 	vldr	d7, [r5, #736]	; 0x2e0
 8000e0a:	eea7 8b00 	vfma.f64	d8, d7, d0
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8000e0e:	d2d6      	bcs.n	8000dbe <evaluate_polyfit+0x1e>
    }

    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8000e10:	eef7 7bc8 	vcvt.f32.f64	s15, d8
}
 8000e14:	ecbd 8b02 	vpop	{d8}
    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8000e18:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8000e1c:	bd70      	pop	{r4, r5, r6, pc}
 8000e1e:	bf00      	nop
	...

08000e28 <compute_antiwindup_boundaries>:

void compute_antiwindup_boundaries(control_data_t *control_data) {
    control_data->upperboundary_aw = fmaxf(M_AW *
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8000e28:	ed90 6a03 	vldr	s12, [r0, #12]
 8000e2c:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8000e70 <compute_antiwindup_boundaries+0x48>
 8000e30:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000e34:	ed9f 4b10 	vldr	d4, [pc, #64]	; 8000e78 <compute_antiwindup_boundaries+0x50>
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8000e38:	ee35 7b46 	vsub.f64	d7, d5, d6
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 8000e3c:	eeb4 6bc5 	vcmpe.f64	d6, d5
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000e40:	ee27 7b04 	vmul.f64	d7, d7, d4
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 8000e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000e48:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        control_data->upperboundary_aw = 0;
 8000e4c:	bfc8      	it	gt
 8000e4e:	2300      	movgt	r3, #0
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000e50:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        control_data->upperboundary_aw = 0;
 8000e54:	bfc8      	it	gt
 8000e56:	61c3      	strgt	r3, [r0, #28]
    control_data->upperboundary_aw = fmaxf(M_AW *
 8000e58:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
 8000e5c:	bfd8      	it	le
 8000e5e:	ed80 7a07 	vstrle	s14, [r0, #28]
    }
    control_data->lowerboundary_aw = - control_data->upperboundary_aw;
 8000e62:	edd0 7a07 	vldr	s15, [r0, #28]
 8000e66:	eef1 7a67 	vneg.f32	s15, s15
 8000e6a:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8000e6e:	4770      	bx	lr
 8000e70:	e7f5e611 	.word	0xe7f5e611
 8000e74:	409598a1 	.word	0x409598a1
 8000e78:	47ae147b 	.word	0x47ae147b
 8000e7c:	3f747ae1 	.word	0x3f747ae1

08000e80 <compute_reference_error>:

void compute_reference_error(control_data_t *control_data) {
    if (control_data->ref_velocity < 0) {
 8000e80:	ed90 7a05 	vldr	s14, [r0, #20]
 8000e84:	edd0 7a04 	vldr	s15, [r0, #16]
 8000e88:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        control_data->reference_error = control_data->sf_velocity;
    }
    else{
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
 8000e90:	bf58      	it	pl
 8000e92:	ee77 7ac7 	vsubpl.f32	s15, s15, s14
 8000e96:	edc0 7a01 	vstr	s15, [r0, #4]
    }
}
 8000e9a:	4770      	bx	lr
 8000e9c:	0000      	movs	r0, r0
	...

08000ea0 <check_apogee_approach_phase>:

void check_apogee_approach_phase(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
    /* if n positive samples are counted, the apogee approach phase is entered */
    if (flight_phase_detection->mach_number < CONTROL_DEACTIVATION_MACH_NUMBER) {
 8000ea0:	ed91 7a01 	vldr	s14, [r1, #4]
 8000ea4:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000ed0 <check_apogee_approach_phase+0x30>
 8000ea8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000eac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        control_data->safety_counter += 1;
 8000eb4:	bf42      	ittt	mi
 8000eb6:	8c03      	ldrhmi	r3, [r0, #32]
 8000eb8:	3301      	addmi	r3, #1
 8000eba:	8403      	strhmi	r3, [r0, #32]
    }

    /* Check if the apogee approach phase should be entered*/
    if (control_data->safety_counter >= SAFETY_COUNTER_THRESHOLD) {
 8000ebc:	8c03      	ldrh	r3, [r0, #32]
 8000ebe:	2b04      	cmp	r3, #4
        control_data->apogee_approach_phase = true;
 8000ec0:	bf84      	itt	hi
 8000ec2:	2301      	movhi	r3, #1
 8000ec4:	f880 3022 	strbhi.w	r3, [r0, #34]	; 0x22
    }
}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	f3af 8000 	nop.w
 8000ed0:	9999999a 	.word	0x9999999a
 8000ed4:	3fb99999 	.word	0x3fb99999

08000ed8 <compute_control_input>:
void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8000ed8:	b538      	push	{r3, r4, r5, lr}
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8000eda:	780b      	ldrb	r3, [r1, #0]
void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8000edc:	4604      	mov	r4, r0
 8000ede:	460d      	mov	r5, r1
 8000ee0:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8000ee4:	2b04      	cmp	r3, #4
void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8000ee6:	ed2d 8b02 	vpush	{d8}
 8000eea:	ed9f 8a3d 	vldr	s16, [pc, #244]	; 8000fe0 <compute_control_input+0x108>
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8000eee:	d158      	bne.n	8000fa2 <compute_control_input+0xca>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8000ef0:	784b      	ldrb	r3, [r1, #1]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d854      	bhi.n	8000fa2 <compute_control_input+0xca>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8000ef8:	ed91 7a01 	vldr	s14, [r1, #4]
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8000efc:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8000fd0 <compute_control_input+0xf8>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8000f00:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8000f04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0c:	d549      	bpl.n	8000fa2 <compute_control_input+0xca>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8000f0e:	2a00      	cmp	r2, #0
 8000f10:	d147      	bne.n	8000fa2 <compute_control_input+0xca>
        evaluate_polyfit(control_data);
 8000f12:	f7ff ff45 	bl	8000da0 <evaluate_polyfit>
        compute_reference_error(control_data);
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff ffb2 	bl	8000e80 <compute_reference_error>
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8000f1c:	ed94 7a00 	vldr	s14, [r4]
 8000f20:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
                - control_data->gains[1] * control_data->integrated_error
 8000f24:	ed94 7a02 	vldr	s14, [r4, #8]
 8000f28:	ed94 3b0c 	vldr	d3, [r4, #48]	; 0x30
 8000f2c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8000f30:	ed94 4b0a 	vldr	d4, [r4, #40]	; 0x28
                - control_data->gains[1] * control_data->integrated_error
 8000f34:	ee23 7b47 	vnmul.f64	d7, d3, d7
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8000f38:	ed94 3a01 	vldr	s6, [r4, #4]
 8000f3c:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8000f40:	ed94 5b0e 	vldr	d5, [r4, #56]	; 0x38
                - control_data->gains[1] * control_data->integrated_error
 8000f44:	eea4 7b43 	vfms.f64	d7, d4, d3
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8000f48:	ed9f 4b23 	vldr	d4, [pc, #140]	; 8000fd8 <compute_control_input+0x100>
 8000f4c:	ee36 4b44 	vsub.f64	d4, d6, d4
 8000f50:	eea5 7b44 	vfms.f64	d7, d5, d4
                + control_data->control_input);
 8000f54:	ee37 7b06 	vadd.f64	d7, d7, d6
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8000f58:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        control_data->control_input = fmaxf(0, fminf(control_data->control_input, 1));
 8000f5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000f60:	fe87 7a67 	vminnm.f32	s14, s14, s15
 8000f64:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 8000f68:	ed84 7a00 	vstr	s14, [r4]
        compute_antiwindup_boundaries(control_data);
 8000f6c:	f7ff ff5c 	bl	8000e28 <compute_antiwindup_boundaries>
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8000f70:	edd4 7a02 	vldr	s15, [r4, #8]
 8000f74:	edd4 6a01 	vldr	s13, [r4, #4]
        check_apogee_approach_phase(control_data, flight_phase_detection);
 8000f78:	4629      	mov	r1, r5
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8000f7a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000fe4 <compute_control_input+0x10c>
 8000f7e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8000f82:	ed94 7a07 	vldr	s14, [r4, #28]
}
 8000f86:	ecbd 8b02 	vpop	{d8}
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8000f8a:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 8000f8e:	ed94 7a06 	vldr	s14, [r4, #24]
 8000f92:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8000f96:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8000f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        check_apogee_approach_phase(control_data, flight_phase_detection);
 8000f9e:	f7ff bf7f 	b.w	8000ea0 <check_apogee_approach_phase>
    control_data->control_input = 0;
 8000fa2:	ed84 8a00 	vstr	s16, [r4]
    control_data->reference_error = 0;
 8000fa6:	ed84 8a01 	vstr	s16, [r4, #4]
    control_data->integrated_error = 0;
 8000faa:	ed84 8a02 	vstr	s16, [r4, #8]
        if (control_data->apogee_approach_phase == true) {
 8000fae:	b14a      	cbz	r2, 8000fc4 <compute_control_input+0xec>
            evaluate_polyfit(control_data);
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	f7ff fef5 	bl	8000da0 <evaluate_polyfit>
            compute_reference_error(control_data);
 8000fb6:	4620      	mov	r0, r4
}
 8000fb8:	ecbd 8b02 	vpop	{d8}
 8000fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            compute_reference_error(control_data);
 8000fc0:	f7ff bf5e 	b.w	8000e80 <compute_reference_error>
}
 8000fc4:	ecbd 8b02 	vpop	{d8}
 8000fc8:	bd38      	pop	{r3, r4, r5, pc}
 8000fca:	bf00      	nop
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	9999999a 	.word	0x9999999a
 8000fd4:	3fe19999 	.word	0x3fe19999
 8000fd8:	5fbf87db 	.word	0x5fbf87db
 8000fdc:	3fdfb4e1 	.word	0x3fdfb4e1
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	3c23d70a 	.word	0x3c23d70a

08000fe8 <init_env>:
#include "Sim_Con/env.h"

void init_env(env_t *env) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
 8000ff0:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8000ff4:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001010 <init_env+0x28>
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f80d 	bl	8001018 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 8000ffe:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f82c 	bl	8001060 <update_env>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	47c5e680 	.word	0x47c5e680
 8001014:	00000000 	.word	0x00000000

08001018 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	ed87 0a02 	vstr	s0, [r7, #8]
 8001024:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8001028:	edd7 7a01 	vldr	s15, [r7, #4]
 800102c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001030:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001058 <calibrate_env+0x40>
 8001034:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001038:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	edc3 7a01 	vstr	s15, [r3, #4]
	env->p_g = p_g; //
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	601a      	str	r2, [r3, #0]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	f3af 8000 	nop.w
 8001058:	66666666 	.word	0x66666666
 800105c:	40711266 	.word	0x40711266

08001060 <update_env>:

void update_env(env_t *env, float T) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 800106c:	edd7 7a00 	vldr	s15, [r7]
 8001070:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001074:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80010c0 <update_env+0x60>
 8001078:	ee37 7b06 	vadd.f64	d7, d7, d6
 800107c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	edc3 7a02 	vstr	s15, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a02 	vldr	s15, [r3, #8]
 800108c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001090:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80010c8 <update_env+0x68>
 8001094:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001098:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800109c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80010a0:	eeb0 0a67 	vmov.f32	s0, s15
 80010a4:	f013 f9c0 	bl	8014428 <powf>
 80010a8:	eef0 7a40 	vmov.f32	s15, s0
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	f3af 8000 	nop.w
 80010c0:	66666666 	.word	0x66666666
 80010c4:	40711266 	.word	0x40711266
 80010c8:	8c1557b7 	.word	0x8c1557b7
 80010cc:	40791e2f 	.word	0x40791e2f

080010d0 <mach_number>:

float mach_number(env_t *env, float V_x) {
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 80010dc:	edd7 7a00 	vldr	s15, [r7]
 80010e0:	eef0 6ae7 	vabs.f32	s13, s15
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80010ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ee:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	ee07 3a90 	vmov	s15, r3
}
 80010f8:	eeb0 0a67 	vmov.f32	s0, s15
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001108:	b580      	push	{r7, lr}
 800110a:	ed2d 8b02 	vpush	{d8}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	e034      	b.n	800118a <pressure2altitudeAGL+0x82>
		if (p_active[i]) {
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	4413      	add	r3, r2
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d02b      	beq.n	8001184 <pressure2altitudeAGL+0x7c>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001132:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001136:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80011a0 <pressure2altitudeAGL+0x98>
 800113a:	ee87 8b06 	vdiv.f64	d8, d7, d6
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	ed93 7a00 	vldr	s14, [r3]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001154:	eddf 0a14 	vldr	s1, [pc, #80]	; 80011a8 <pressure2altitudeAGL+0xa0>
 8001158:	eeb0 0a66 	vmov.f32	s0, s13
 800115c:	f013 f964 	bl	8014428 <powf>
 8001160:	eeb0 7a40 	vmov.f32	s14, s0
 8001164:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001168:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800116c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001170:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800117a:	4413      	add	r3, r2
 800117c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001180:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	429a      	cmp	r2, r3
 8001190:	dbc6      	blt.n	8001120 <pressure2altitudeAGL+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	ecbd 8b02 	vpop	{d8}
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	76c8b439 	.word	0x76c8b439
 80011a4:	3f7a9fbe 	.word	0x3f7a9fbe
 80011a8:	3e42c4dc 	.word	0x3e42c4dc
 80011ac:	00000000 	.word	0x00000000

080011b0 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	ed2d 8b02 	vpush	{d8}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	e034      	b.n	8001232 <altitudeAGL2pressure+0x82>
		if (h_active[i]) {
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d02b      	beq.n	800122c <altitudeAGL2pressure+0x7c>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	ed93 8a00 	vldr	s16, [r3]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	edd3 7a00 	vldr	s15, [r3]
 80011e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ea:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8001248 <altitudeAGL2pressure+0x98>
 80011ee:	ee27 5b06 	vmul.f64	d5, d7, d6
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80011f8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80011fc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001200:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001204:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001208:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800120c:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001250 <altitudeAGL2pressure+0xa0>
 8001210:	eeb0 0a67 	vmov.f32	s0, s15
 8001214:	f013 f908 	bl	8014428 <powf>
 8001218:	eef0 7a40 	vmov.f32	s15, s0
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001222:	4413      	add	r3, r2
 8001224:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001228:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3301      	adds	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	429a      	cmp	r2, r3
 8001238:	dbc6      	blt.n	80011c8 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	ecbd 8b02 	vpop	{d8}
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	76c8b439 	.word	0x76c8b439
 800124c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001250:	40a83d87 	.word	0x40a83d87
 8001254:	00000000 	.word	0x00000000

08001258 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 8001258:	b580      	push	{r7, lr}
 800125a:	ed2d 8b02 	vpush	{d8}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	edd3 7a01 	vldr	s15, [r3, #4]
 800126e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001272:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80012d8 <altitude_gradient+0x80>
 8001276:	ee27 6b06 	vmul.f64	d6, d7, d6
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	edd3 7a00 	vldr	s15, [r3]
 8001280:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001284:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80012e0 <altitude_gradient+0x88>
 8001288:	ee27 7b05 	vmul.f64	d7, d7, d5
 800128c:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	edd3 7a00 	vldr	s15, [r3]
 8001296:	ed97 7a00 	vldr	s14, [r7]
 800129a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800129e:	eddf 0a12 	vldr	s1, [pc, #72]	; 80012e8 <altitude_gradient+0x90>
 80012a2:	eeb0 0a66 	vmov.f32	s0, s13
 80012a6:	f013 f8bf 	bl	8014428 <powf>
 80012aa:	eef0 7a40 	vmov.f32	s15, s0
 80012ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012b2:	ee28 7b07 	vmul.f64	d7, d8, d7
 80012b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012ba:	edc7 7a03 	vstr	s15, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	ee07 3a90 	vmov	s15, r3
}
 80012c4:	eeb0 0a67 	vmov.f32	s0, s15
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	ecbd 8b02 	vpop	{d8}
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	f3af 8000 	nop.w
 80012d8:	640f3ea7 	.word	0x640f3ea7
 80012dc:	c071f0fd 	.word	0xc071f0fd
 80012e0:	51eb851f 	.word	0x51eb851f
 80012e4:	40239eb8 	.word	0x40239eb8
 80012e8:	bf4f4ec9 	.word	0xbf4f4ec9
 80012ec:	00000000 	.word	0x00000000

080012f0 <detect_flight_phase>:
void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env_t *env)
{   


    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 80012f0:	7803      	ldrb	r3, [r0, #0]
 80012f2:	eddf 7a43 	vldr	s15, [pc, #268]	; 8001400 <detect_flight_phase+0x110>
 80012f6:	3b01      	subs	r3, #1
{   
 80012f8:	b510      	push	{r4, lr}
 80012fa:	4604      	mov	r4, r0
    switch (flight_phase_detection->flight_phase) {
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d81b      	bhi.n	8001338 <detect_flight_phase+0x48>
 8001300:	e8df f003 	tbb	[pc, r3]
 8001304:	44311a03 	.word	0x44311a03
 8001308:	57          	.byte	0x57
 8001309:	00          	.byte	0x00
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 800130a:	ed91 7a06 	vldr	s14, [r1, #24]
 800130e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001312:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001316:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800131a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001322:	dd09      	ble.n	8001338 <detect_flight_phase+0x48>
                flight_phase_detection->num_samples_positive += 1;
 8001324:	7a23      	ldrb	r3, [r4, #8]
 8001326:	3301      	adds	r3, #1
 8001328:	b25b      	sxtb	r3, r3
                if (flight_phase_detection->num_samples_positive >= 4) {
 800132a:	2b03      	cmp	r3, #3
                flight_phase_detection->num_samples_positive += 1;
 800132c:	7223      	strb	r3, [r4, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 800132e:	dd03      	ble.n	8001338 <detect_flight_phase+0x48>
                    flight_phase_detection->flight_phase = THRUSTING;
 8001330:	2303      	movs	r3, #3

        case DESCENT:
            if (((float)(state_est_data->position_world[2])) / 1000 < 20) {
                flight_phase_detection->num_samples_positive += 1;
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
 8001332:	7023      	strb	r3, [r4, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	7223      	strb	r3, [r4, #8]

        default:
        break;
    }

    flight_phase_detection->mach_number = mach_number(env, ((float) state_est_data->velocity_rocket[0]) / 1000);
 8001338:	ed91 0a03 	vldr	s0, [r1, #12]
 800133c:	4610      	mov	r0, r2
 800133e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001342:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8001346:	f7ff fec3 	bl	80010d0 <mach_number>
 800134a:	ed84 0a01 	vstr	s0, [r4, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 800134e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8001352:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80013f0 <detect_flight_phase+0x100>
 8001356:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135e:	db3d      	blt.n	80013dc <detect_flight_phase+0xec>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8001360:	2303      	movs	r3, #3
    } else if (flight_phase_detection->mach_number >= 0.8)
    {
        flight_phase_detection->mach_regime = TRANSONIC;
    } else
    {
        flight_phase_detection->mach_regime = SUBSONIC;
 8001362:	7063      	strb	r3, [r4, #1]
    }
    
    
}
 8001364:	bd10      	pop	{r4, pc}
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8001366:	ed91 7a06 	vldr	s14, [r1, #24]
 800136a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800136e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001372:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8001376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137a:	d5dd      	bpl.n	8001338 <detect_flight_phase+0x48>
                flight_phase_detection->num_samples_positive += 1;
 800137c:	7a23      	ldrb	r3, [r4, #8]
 800137e:	3301      	adds	r3, #1
 8001380:	b25b      	sxtb	r3, r3
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001382:	2b03      	cmp	r3, #3
                flight_phase_detection->num_samples_positive += 1;
 8001384:	7223      	strb	r3, [r4, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001386:	ddd7      	ble.n	8001338 <detect_flight_phase+0x48>
                    flight_phase_detection->flight_phase = COASTING;
 8001388:	2304      	movs	r3, #4
 800138a:	e7d2      	b.n	8001332 <detect_flight_phase+0x42>
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 800138c:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8001390:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001394:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001398:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a0:	d5ca      	bpl.n	8001338 <detect_flight_phase+0x48>
                flight_phase_detection->num_samples_positive += 1;
 80013a2:	7a23      	ldrb	r3, [r4, #8]
 80013a4:	3301      	adds	r3, #1
 80013a6:	b25b      	sxtb	r3, r3
                if (flight_phase_detection->num_samples_positive >= 4) {
 80013a8:	2b03      	cmp	r3, #3
                flight_phase_detection->num_samples_positive += 1;
 80013aa:	7223      	strb	r3, [r4, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80013ac:	ddc4      	ble.n	8001338 <detect_flight_phase+0x48>
                    flight_phase_detection->flight_phase = DESCENT;
 80013ae:	2305      	movs	r3, #5
 80013b0:	e7bf      	b.n	8001332 <detect_flight_phase+0x42>
            if (((float)(state_est_data->position_world[2])) / 1000 < 20) {
 80013b2:	ed91 7a02 	vldr	s14, [r1, #8]
 80013b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80013ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013be:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80013c2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80013c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ca:	d5b5      	bpl.n	8001338 <detect_flight_phase+0x48>
                flight_phase_detection->num_samples_positive += 1;
 80013cc:	7a23      	ldrb	r3, [r4, #8]
 80013ce:	3301      	adds	r3, #1
 80013d0:	b25b      	sxtb	r3, r3
                if (flight_phase_detection->num_samples_positive >= 4) {
 80013d2:	2b03      	cmp	r3, #3
                flight_phase_detection->num_samples_positive += 1;
 80013d4:	7223      	strb	r3, [r4, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80013d6:	ddaf      	ble.n	8001338 <detect_flight_phase+0x48>
                    flight_phase_detection->flight_phase = RECOVERY;
 80013d8:	2306      	movs	r3, #6
 80013da:	e7aa      	b.n	8001332 <detect_flight_phase+0x42>
    } else if (flight_phase_detection->mach_number >= 0.8)
 80013dc:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80013f8 <detect_flight_phase+0x108>
 80013e0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80013e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        flight_phase_detection->mach_regime = TRANSONIC;
 80013e8:	bfac      	ite	ge
 80013ea:	2302      	movge	r3, #2
        flight_phase_detection->mach_regime = SUBSONIC;
 80013ec:	2301      	movlt	r3, #1
 80013ee:	e7b8      	b.n	8001362 <detect_flight_phase+0x72>
 80013f0:	cccccccd 	.word	0xcccccccd
 80013f4:	3ff4cccc 	.word	0x3ff4cccc
 80013f8:	9999999a 	.word	0x9999999a
 80013fc:	3fe99999 	.word	0x3fe99999
 8001400:	447a0000 	.word	0x447a0000

08001404 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
    flight_phase_detection->flight_phase = IDLE;
 8001404:	2301      	movs	r3, #1
 8001406:	7003      	strb	r3, [r0, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 8001408:	7043      	strb	r3, [r0, #1]
    flight_phase_detection->mach_number = 0.0;
 800140a:	2300      	movs	r3, #0
 800140c:	6043      	str	r3, [r0, #4]
    flight_phase_detection->num_samples_positive = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	7203      	strb	r3, [r0, #8]
}
 8001412:	4770      	bx	lr

08001414 <reset_kf_state>:
#include "Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 8001414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8001418:	4c3d      	ldr	r4, [pc, #244]	; (8001510 <reset_kf_state+0xfc>)
void reset_kf_state(kf_state_t *kf_state){
 800141a:	b090      	sub	sp, #64	; 0x40
 800141c:	4605      	mov	r5, r0
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 800141e:	ae07      	add	r6, sp, #28
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8001420:	af04      	add	r7, sp, #16
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8001422:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8001426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001428:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800142a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800142c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800142e:	f854 3b04 	ldr.w	r3, [r4], #4
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8001432:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8001436:	6033      	str	r3, [r6, #0]
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8001438:	ac07      	add	r4, sp, #28
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 800143a:	ab01      	add	r3, sp, #4
 800143c:	46a6      	mov	lr, r4
 800143e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8001442:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8001446:	462a      	mov	r2, r5
 8001448:	4626      	mov	r6, r4
 800144a:	3208      	adds	r2, #8
 800144c:	ce03      	ldmia	r6!, {r0, r1}
 800144e:	4566      	cmp	r6, ip
 8001450:	f842 0c08 	str.w	r0, [r2, #-8]
 8001454:	f842 1c04 	str.w	r1, [r2, #-4]
 8001458:	4634      	mov	r4, r6
 800145a:	d1f5      	bne.n	8001448 <reset_kf_state+0x34>
 800145c:	6830      	ldr	r0, [r6, #0]
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 800145e:	f105 0854 	add.w	r8, r5, #84	; 0x54
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8001462:	4e2c      	ldr	r6, [pc, #176]	; (8001514 <reset_kf_state+0x100>)
 8001464:	4674      	mov	r4, lr
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8001466:	6010      	str	r0, [r2, #0]
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8001468:	cb03      	ldmia	r3!, {r0, r1}
 800146a:	64a8      	str	r0, [r5, #72]	; 0x48
 800146c:	6818      	ldr	r0, [r3, #0]
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 800146e:	463b      	mov	r3, r7
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8001470:	64e9      	str	r1, [r5, #76]	; 0x4c
 8001472:	6528      	str	r0, [r5, #80]	; 0x50
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8001474:	cb03      	ldmia	r3!, {r0, r1}
 8001476:	6568      	str	r0, [r5, #84]	; 0x54
 8001478:	6818      	ldr	r0, [r3, #0]
	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 800147a:	2300      	movs	r3, #0
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 800147c:	f8c8 1004 	str.w	r1, [r8, #4]
 8001480:	f8c8 0008 	str.w	r0, [r8, #8]
	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8001484:	9304      	str	r3, [sp, #16]
 8001486:	9305      	str	r3, [sp, #20]
 8001488:	9306      	str	r3, [sp, #24]
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 800148a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800148c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800148e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001490:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 8001492:	cf03      	ldmia	r7!, {r0, r1}
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8001494:	6833      	ldr	r3, [r6, #0]
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 8001496:	f505 7288 	add.w	r2, r5, #272	; 0x110
    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 800149a:	f8c5 0104 	str.w	r0, [r5, #260]	; 0x104
 800149e:	2000      	movs	r0, #0
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 80014a0:	6023      	str	r3, [r4, #0]
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80014a2:	4673      	mov	r3, lr
    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 80014a4:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
 80014a8:	f8c5 010c 	str.w	r0, [r5, #268]	; 0x10c
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80014ac:	461c      	mov	r4, r3
 80014ae:	3208      	adds	r2, #8
 80014b0:	cc03      	ldmia	r4!, {r0, r1}
 80014b2:	4564      	cmp	r4, ip
 80014b4:	f842 0c08 	str.w	r0, [r2, #-8]
 80014b8:	f842 1c04 	str.w	r1, [r2, #-4]
 80014bc:	4623      	mov	r3, r4
 80014be:	d1f5      	bne.n	80014ac <reset_kf_state+0x98>
 80014c0:	6820      	ldr	r0, [r4, #0]

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 80014c2:	2400      	movs	r4, #0
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80014c4:	6010      	str	r0, [r2, #0]
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80014c6:	4621      	mov	r1, r4
    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 80014c8:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80014cc:	2224      	movs	r2, #36	; 0x24
 80014ce:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
 80014d2:	f012 fb24 	bl	8013b1e <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
    kf_state->num_z_active = 0;

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 80014d6:	2103      	movs	r1, #3
 80014d8:	f105 0324 	add.w	r3, r5, #36	; 0x24
 80014dc:	462a      	mov	r2, r5
 80014de:	4608      	mov	r0, r1
    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 80014e0:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
 80014e4:	f8c5 418c 	str.w	r4, [r5, #396]	; 0x18c
 80014e8:	f8c5 4190 	str.w	r4, [r5, #400]	; 0x190
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 80014ec:	f8a5 420c 	strh.w	r4, [r5, #524]	; 0x20c
 80014f0:	f885 420e 	strb.w	r4, [r5, #526]	; 0x20e
    kf_state->num_z_active = 0;
 80014f4:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 80014f8:	f000 fb24 	bl	8001b44 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 80014fc:	f105 0360 	add.w	r3, r5, #96	; 0x60
 8001500:	4642      	mov	r2, r8
 8001502:	2101      	movs	r1, #1
 8001504:	2003      	movs	r0, #3
}
 8001506:	b010      	add	sp, #64	; 0x40
 8001508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 800150c:	f000 bb1a 	b.w	8001b44 <transpose>
 8001510:	08015858 	.word	0x08015858
 8001514:	08015888 	.word	0x08015888

08001518 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8001518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 800151c:	2103      	movs	r1, #3
void kf_prediction(kf_state_t *kf_state){
 800151e:	b085      	sub	sp, #20
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8001520:	2501      	movs	r5, #1
 8001522:	f500 769a 	add.w	r6, r0, #308	; 0x134
void kf_prediction(kf_state_t *kf_state){
 8001526:	4604      	mov	r4, r0
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8001528:	f04f 0800 	mov.w	r8, #0
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 800152c:	f500 7382 	add.w	r3, r0, #260	; 0x104
 8001530:	4602      	mov	r2, r0
 8001532:	4608      	mov	r0, r1

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 8001534:	f504 7905 	add.w	r9, r4, #532	; 0x214
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8001538:	f504 77a0 	add.w	r7, r4, #320	; 0x140
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 800153c:	e9cd 6500 	strd	r6, r5, [sp]
 8001540:	f000 fd2a 	bl	8001f98 <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8001544:	f504 7380 	add.w	r3, r4, #256	; 0x100
 8001548:	f104 0248 	add.w	r2, r4, #72	; 0x48
 800154c:	4629      	mov	r1, r5
 800154e:	2003      	movs	r0, #3
 8001550:	e9cd 6800 	strd	r6, r8, [sp]
 8001554:	f000 fd20 	bl	8001f98 <matvecprod>
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 8001558:	2203      	movs	r2, #3
 800155a:	f504 7388 	add.w	r3, r4, #272	; 0x110
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 800155e:	f504 760e 	add.w	r6, r4, #568	; 0x238
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 8001562:	4611      	mov	r1, r2
 8001564:	4610      	mov	r0, r2
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	4623      	mov	r3, r4
 800156a:	e9cd 9501 	strd	r9, r5, [sp, #4]
 800156e:	f000 fc79 	bl	8001e64 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 8001572:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
 8001576:	462a      	mov	r2, r5
 8001578:	4629      	mov	r1, r5
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2003      	movs	r0, #3
 800157e:	f104 0354 	add.w	r3, r4, #84	; 0x54
 8001582:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8001586:	f000 fc6d 	bl	8001e64 <matmul>
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 800158a:	2203      	movs	r2, #3
 800158c:	f104 0324 	add.w	r3, r4, #36	; 0x24
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 8001590:	3460      	adds	r4, #96	; 0x60
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8001592:	4611      	mov	r1, r2
 8001594:	4610      	mov	r0, r2
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	464b      	mov	r3, r9
 800159a:	e9cd 7501 	strd	r7, r5, [sp, #4]
 800159e:	f000 fc61 	bl	8001e64 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 80015a2:	2203      	movs	r2, #3
 80015a4:	4633      	mov	r3, r6
 80015a6:	4629      	mov	r1, r5
 80015a8:	4610      	mov	r0, r2
 80015aa:	9400      	str	r4, [sp, #0]
 80015ac:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80015b0:	f000 fc58 	bl	8001e64 <matmul>
}
 80015b4:	b005      	add	sp, #20
 80015b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080015ba <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 80015ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80015be:	f100 056c 	add.w	r5, r0, #108	; 0x6c
void select_kf_observation_matrices(kf_state_t *kf_state){
 80015c2:	4604      	mov	r4, r0
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80015c4:	2224      	movs	r2, #36	; 0x24
 80015c6:	2100      	movs	r1, #0
 80015c8:	4628      	mov	r0, r5
        if (kf_state->z_active[i]) {
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 80015ca:	2600      	movs	r6, #0
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80015cc:	f012 faa7 	bl	8013b1e <memset>
            kf_state->H[i][0] = 1;
 80015d0:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 80015d4:	f504 7303 	add.w	r3, r4, #524	; 0x20c
 80015d8:	4621      	mov	r1, r4
 80015da:	f204 200f 	addw	r0, r4, #527	; 0x20f
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80015de:	4622      	mov	r2, r4
        if (kf_state->z_active[i]) {
 80015e0:	f813 cb01 	ldrb.w	ip, [r3], #1
 80015e4:	f1bc 0f00 	cmp.w	ip, #0
 80015e8:	d00f      	beq.n	800160a <select_kf_observation_matrices+0x50>
            kf_state->H[i][0] = 1;
 80015ea:	66cf      	str	r7, [r1, #108]	; 0x6c
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80015ec:	4283      	cmp	r3, r0
 80015ee:	f101 010c 	add.w	r1, r1, #12
 80015f2:	f102 0210 	add.w	r2, r2, #16
 80015f6:	d1f3      	bne.n	80015e0 <select_kf_observation_matrices+0x26>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 80015f8:	2103      	movs	r1, #3
 80015fa:	f104 0390 	add.w	r3, r4, #144	; 0x90
 80015fe:	462a      	mov	r2, r5
 8001600:	4608      	mov	r0, r1
}
 8001602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 8001606:	f000 ba9d 	b.w	8001b44 <transpose>
            kf_state->R[i][i] = 0;
 800160a:	f8c2 60b8 	str.w	r6, [r2, #184]	; 0xb8
 800160e:	e7ed      	b.n	80015ec <select_kf_observation_matrices+0x32>

08001610 <kf_update>:

void kf_update(kf_state_t *kf_state) {
 8001610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8001614:	2103      	movs	r1, #3
void kf_update(kf_state_t *kf_state) {
 8001616:	b087      	sub	sp, #28
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8001618:	2501      	movs	r5, #1
 800161a:	f500 76ca 	add.w	r6, r0, #404	; 0x194
 800161e:	f100 096c 	add.w	r9, r0, #108	; 0x6c
 8001622:	f500 7b9a 	add.w	fp, r0, #308	; 0x134
void kf_update(kf_state_t *kf_state) {
 8001626:	4604      	mov	r4, r0
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8001628:	4608      	mov	r0, r1
 800162a:	465b      	mov	r3, fp
 800162c:	464a      	mov	r2, r9
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 800162e:	f504 77a0 	add.w	r7, r4, #320	; 0x140
 8001632:	f504 7a11 	add.w	sl, r4, #580	; 0x244
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 8001636:	f504 78d0 	add.w	r8, r4, #416	; 0x1a0
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 800163a:	e9cd 6500 	strd	r6, r5, [sp]
 800163e:	f000 fcab 	bl	8001f98 <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 8001642:	4633      	mov	r3, r6
 8001644:	4632      	mov	r2, r6
 8001646:	f504 71c4 	add.w	r1, r4, #392	; 0x188
 800164a:	2003      	movs	r0, #3
 800164c:	f000 faf9 	bl	8001c42 <vecsub>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8001650:	2203      	movs	r2, #3
 8001652:	464b      	mov	r3, r9
 8001654:	9700      	str	r7, [sp, #0]
 8001656:	4611      	mov	r1, r2
 8001658:	4610      	mov	r0, r2
 800165a:	e9cd a501 	strd	sl, r5, [sp, #4]
 800165e:	f000 fc01 	bl	8001e64 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 8001662:	f104 0390 	add.w	r3, r4, #144	; 0x90
 8001666:	2203      	movs	r2, #3
 8001668:	9304      	str	r3, [sp, #16]
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	4611      	mov	r1, r2
 800166e:	4653      	mov	r3, sl
 8001670:	4610      	mov	r0, r2
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8001672:	f504 7ae2 	add.w	sl, r4, #452	; 0x1c4
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 8001676:	e9cd 8501 	strd	r8, r5, [sp, #4]
 800167a:	f000 fbf3 	bl	8001e64 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 800167e:	2103      	movs	r1, #3
 8001680:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8001684:	f8cd 8000 	str.w	r8, [sp]
 8001688:	4642      	mov	r2, r8
 800168a:	4608      	mov	r0, r1
 800168c:	f000 fb04 	bl	8001c98 <matadd>
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8001690:	2224      	movs	r2, #36	; 0x24
 8001692:	2100      	movs	r1, #0
 8001694:	4650      	mov	r0, sl
 8001696:	f012 fa42 	bl	8013b1e <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 800169a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800174c <kf_update+0x13c>
 800169e:	4652      	mov	r2, sl
 80016a0:	4641      	mov	r1, r8
 80016a2:	2003      	movs	r0, #3
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80016a4:	f504 78f4 	add.w	r8, r4, #488	; 0x1e8
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 80016a8:	f000 fe28 	bl	80022fc <cholesky_inverse>
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 80016ac:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80016b0:	2203      	movs	r2, #3
 80016b2:	9305      	str	r3, [sp, #20]
 80016b4:	4611      	mov	r1, r2
 80016b6:	4610      	mov	r0, r2
 80016b8:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80016bc:	9b04      	ldr	r3, [sp, #16]
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	463b      	mov	r3, r7
 80016c2:	f000 fbcf 	bl	8001e64 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80016c6:	2203      	movs	r2, #3
 80016c8:	f8cd a000 	str.w	sl, [sp]

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80016cc:	f504 7a82 	add.w	sl, r4, #260	; 0x104
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80016d0:	9b05      	ldr	r3, [sp, #20]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4610      	mov	r0, r2
 80016d6:	e9cd 8501 	strd	r8, r5, [sp, #4]
 80016da:	f000 fbc3 	bl	8001e64 <matmul>
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80016de:	2103      	movs	r1, #3
 80016e0:	4633      	mov	r3, r6
 80016e2:	4642      	mov	r2, r8
 80016e4:	4608      	mov	r0, r1


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 80016e6:	f504 7623 	add.w	r6, r4, #652	; 0x28c
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80016ea:	e9cd a500 	strd	sl, r5, [sp]
 80016ee:	f000 fc53 	bl	8001f98 <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 80016f2:	4653      	mov	r3, sl
 80016f4:	4652      	mov	r2, sl
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 80016f6:	f504 7a2c 	add.w	sl, r4, #688	; 0x2b0
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 80016fa:	4659      	mov	r1, fp
 80016fc:	2003      	movs	r0, #3
 80016fe:	f000 fa75 	bl	8001bec <vecadd>
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8001702:	4651      	mov	r1, sl
 8001704:	2003      	movs	r0, #3
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8001706:	f504 7b35 	add.w	fp, r4, #724	; 0x2d4
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 800170a:	f000 f9cf 	bl	8001aac <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 800170e:	2203      	movs	r2, #3
 8001710:	4643      	mov	r3, r8
 8001712:	f8cd 9000 	str.w	r9, [sp]
 8001716:	4611      	mov	r1, r2
 8001718:	4610      	mov	r0, r2
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 800171a:	f504 7488 	add.w	r4, r4, #272	; 0x110
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 800171e:	e9cd b501 	strd	fp, r5, [sp, #4]
 8001722:	f000 fb9f 	bl	8001e64 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8001726:	2103      	movs	r1, #3
 8001728:	465b      	mov	r3, fp
 800172a:	4652      	mov	r2, sl
 800172c:	4608      	mov	r0, r1
 800172e:	9600      	str	r6, [sp, #0]
 8001730:	f000 fb25 	bl	8001d7e <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8001734:	2203      	movs	r2, #3
 8001736:	4633      	mov	r3, r6
 8001738:	9502      	str	r5, [sp, #8]
 800173a:	4611      	mov	r1, r2
 800173c:	4610      	mov	r0, r2
 800173e:	e9cd 7400 	strd	r7, r4, [sp]
 8001742:	f000 fb8f 	bl	8001e64 <matmul>
}
 8001746:	b007      	add	sp, #28
 8001748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800174c:	38d1b717 	.word	0x38d1b717

08001750 <update_state_est_data>:
#include "Sim_Con\state_est.h"


void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 8001750:	ed91 7a41 	vldr	s14, [r1, #260]	; 0x104
 8001754:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001790 <update_state_est_data+0x40>
 8001758:	ee27 7a26 	vmul.f32	s14, s14, s13
 800175c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001760:	ed80 7a02 	vstr	s14, [r0, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 8001764:	ed91 7a42 	vldr	s14, [r1, #264]	; 0x108
 8001768:	ee27 7a26 	vmul.f32	s14, s14, s13
 800176c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8001770:	edc0 7a03 	vstr	s15, [r0, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 8001774:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 8001778:	edd1 7a40 	vldr	s15, [r1, #256]	; 0x100
 800177c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001784:	edc0 7a06 	vstr	s15, [r0, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 8001788:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	447a0000 	.word	0x447a0000

08001794 <select_noise_models>:
        update_env(env, temp_meas_mean);
    }
} 

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8001794:	b570      	push	{r4, r5, r6, lr}
 8001796:	461e      	mov	r6, r3
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 8001798:	780b      	ldrb	r3, [r1, #0]
                        extrapolation_rolling_memory_t *baro_roll_mem){
 800179a:	4604      	mov	r4, r0
 800179c:	4615      	mov	r5, r2
    switch (flight_phase_detection->flight_phase) {
 800179e:	3b01      	subs	r3, #1
                        extrapolation_rolling_memory_t *baro_roll_mem){
 80017a0:	ed2d 8b02 	vpush	{d8}
 80017a4:	b086      	sub	sp, #24
    switch (flight_phase_detection->flight_phase) {
 80017a6:	2b05      	cmp	r3, #5
 80017a8:	d808      	bhi.n	80017bc <select_noise_models+0x28>
 80017aa:	e8df f003 	tbb	[pc, r3]
 80017ae:	4141      	.short	0x4141
 80017b0:	413c3703 	.word	0x413c3703
            accelerometer_x_stdev = 0.0185409;
            barometer_stdev = 1.869;
        break;
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
            barometer_stdev = 13.000;
 80017b4:	eeb2 8a0a 	vmov.f32	s16, #42	; 0x41500000  13.0
            accelerometer_x_stdev = 1.250775;
 80017b8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800183c <select_noise_models+0xa8>
            barometer_stdev = 3.896;
        break;
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 80017bc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 80017c0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    bool h_active[1] = {true};
 80017c4:	2101      	movs	r1, #1
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80017c6:	aa04      	add	r2, sp, #16
    float h[1] = {kf_state->x_est[0]};
 80017c8:	9305      	str	r3, [sp, #20]
    bool h_active[1] = {true};
 80017ca:	ab06      	add	r3, sp, #24
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 80017cc:	ee27 7b07 	vmul.f64	d7, d7, d7
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80017d0:	4628      	mov	r0, r5
    bool h_active[1] = {true};
 80017d2:	f803 1d0c 	strb.w	r1, [r3, #-12]!
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80017d6:	9200      	str	r2, [sp, #0]
 80017d8:	aa05      	add	r2, sp, #20
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 80017da:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80017de:	ed84 7a2d 	vstr	s14, [r4, #180]	; 0xb4
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80017e2:	f7ff fce5 	bl	80011b0 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 80017e6:	ed9d 0a04 	vldr	s0, [sp, #16]
 80017ea:	4628      	mov	r0, r5
 80017ec:	f7ff fd34 	bl	8001258 <altitude_gradient>
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 80017f0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80017f4:	eeb0 0ac0 	vabs.f32	s0, s0

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 80017f8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80017fc:	ee20 0b00 	vmul.f64	d0, d0, d0
 8001800:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8001804:	ed84 0a2e 	vstr	s0, [r4, #184]	; 0xb8
 8001808:	ed84 0a32 	vstr	s0, [r4, #200]	; 0xc8
 800180c:	ed84 0a36 	vstr	s0, [r4, #216]	; 0xd8
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8001810:	ed86 8a25 	vstr	s16, [r6, #148]	; 0x94
}
 8001814:	b006      	add	sp, #24
 8001816:	ecbd 8b02 	vpop	{d8}
 800181a:	bd70      	pop	{r4, r5, r6, pc}
            barometer_stdev = 7.380;
 800181c:	ed9f 8a08 	vldr	s16, [pc, #32]	; 8001840 <select_noise_models+0xac>
            accelerometer_x_stdev = 0.61803;
 8001820:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001844 <select_noise_models+0xb0>
        break;
 8001824:	e7ca      	b.n	80017bc <select_noise_models+0x28>
            barometer_stdev = 3.896;
 8001826:	ed9f 8a08 	vldr	s16, [pc, #32]	; 8001848 <select_noise_models+0xb4>
            accelerometer_x_stdev = 1.955133;
 800182a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800184c <select_noise_models+0xb8>
        break;
 800182e:	e7c5      	b.n	80017bc <select_noise_models+0x28>
            barometer_stdev = 1.869;
 8001830:	ed9f 8a07 	vldr	s16, [pc, #28]	; 8001850 <select_noise_models+0xbc>
            accelerometer_x_stdev = 0.0185409;
 8001834:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001854 <select_noise_models+0xc0>
 8001838:	e7c0      	b.n	80017bc <select_noise_models+0x28>
 800183a:	bf00      	nop
 800183c:	3fa01965 	.word	0x3fa01965
 8001840:	40ec28f6 	.word	0x40ec28f6
 8001844:	3f1e3737 	.word	0x3f1e3737
 8001848:	40795810 	.word	0x40795810
 800184c:	3ffa41cc 	.word	0x3ffa41cc
 8001850:	3fef3b64 	.word	0x3fef3b64
 8001854:	3c97e316 	.word	0x3c97e316

08001858 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* calculate mean of the sample */
    int num_active = 0;
    float mean = 0;
    for (int i = 0; i < n; i++){
 800185a:	2400      	movs	r4, #0
void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 800185c:	4606      	mov	r6, r0
 800185e:	460f      	mov	r7, r1
 8001860:	4615      	mov	r5, r2
    int num_active = 0;
 8001862:	4623      	mov	r3, r4
void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8001864:	ed2d 8b02 	vpush	{d8}
    float mean = 0;
 8001868:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 800191c <sensor_elimination_by_stdev+0xc4>
    for (int i = 0; i < n; i++){
 800186c:	42b4      	cmp	r4, r6
 800186e:	db1f      	blt.n	80018b0 <sensor_elimination_by_stdev+0x58>
        if (measurement_active[i]) {
            num_active += 1;
            mean += measurements[i];
        }
    }
    if (num_active > 0){
 8001870:	b12b      	cbz	r3, 800187e <sensor_elimination_by_stdev+0x26>
        mean /= num_active;
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187a:	ee88 8a27 	vdiv.f32	s16, s16, s15
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
    for (int i = 0; i < n; ++i) {
 800187e:	2400      	movs	r4, #0
    float stdev = 0;
 8001880:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800191c <sensor_elimination_by_stdev+0xc4>
    for (int i = 0; i < n; ++i) {
 8001884:	42b4      	cmp	r4, r6
 8001886:	db1e      	blt.n	80018c6 <sensor_elimination_by_stdev+0x6e>
        if (measurement_active[i]) {
            stdev += pow(measurements[i] - mean, 2);
        }
    }
    if (num_active > 0){
 8001888:	b15b      	cbz	r3, 80018a2 <sensor_elimination_by_stdev+0x4a>
        stdev = sqrt(stdev / num_active);
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001892:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8001896:	eeb7 0ac7 	vcvt.f64.f32	d0, s14
 800189a:	f013 f835 	bl	8014908 <sqrt>
 800189e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 80018a2:	2300      	movs	r3, #0
        if (measurement_active[i]) {
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
                measurement_active[i] = false;
 80018a4:	461a      	mov	r2, r3
    for (int i = 0; i < n; ++i) {
 80018a6:	42b3      	cmp	r3, r6
 80018a8:	db1f      	blt.n	80018ea <sensor_elimination_by_stdev+0x92>
            }
        }
    }
}
 80018aa:	ecbd 8b02 	vpop	{d8}
 80018ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (measurement_active[i]) {
 80018b0:	5d2a      	ldrb	r2, [r5, r4]
 80018b2:	b132      	cbz	r2, 80018c2 <sensor_elimination_by_stdev+0x6a>
            mean += measurements[i];
 80018b4:	eb07 0284 	add.w	r2, r7, r4, lsl #2
            num_active += 1;
 80018b8:	3301      	adds	r3, #1
            mean += measurements[i];
 80018ba:	edd2 7a00 	vldr	s15, [r2]
 80018be:	ee38 8a27 	vadd.f32	s16, s16, s15
    for (int i = 0; i < n; i++){
 80018c2:	3401      	adds	r4, #1
 80018c4:	e7d2      	b.n	800186c <sensor_elimination_by_stdev+0x14>
        if (measurement_active[i]) {
 80018c6:	5d2a      	ldrb	r2, [r5, r4]
 80018c8:	b16a      	cbz	r2, 80018e6 <sensor_elimination_by_stdev+0x8e>
            stdev += pow(measurements[i] - mean, 2);
 80018ca:	eb07 0284 	add.w	r2, r7, r4, lsl #2
 80018ce:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80018d2:	ed92 7a00 	vldr	s14, [r2]
 80018d6:	ee37 7a48 	vsub.f32	s14, s14, s16
 80018da:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80018de:	eea7 0b07 	vfma.f64	d0, d7, d7
 80018e2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    for (int i = 0; i < n; ++i) {
 80018e6:	3401      	adds	r4, #1
 80018e8:	e7cc      	b.n	8001884 <sensor_elimination_by_stdev+0x2c>
        if (measurement_active[i]) {
 80018ea:	5ce9      	ldrb	r1, [r5, r3]
 80018ec:	b199      	cbz	r1, 8001916 <sensor_elimination_by_stdev+0xbe>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 80018ee:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80018f2:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80018f6:	ed91 7a00 	vldr	s14, [r1]
 80018fa:	ee36 6b06 	vadd.f64	d6, d6, d6
 80018fe:	ee37 7a48 	vsub.f32	s14, s14, s16
 8001902:	eeb0 7ac7 	vabs.f32	s14, s14
 8001906:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800190a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                measurement_active[i] = false;
 8001912:	bfc8      	it	gt
 8001914:	54ea      	strbgt	r2, [r5, r3]
    for (int i = 0; i < n; ++i) {
 8001916:	3301      	adds	r3, #1
 8001918:	e7c5      	b.n	80018a6 <sensor_elimination_by_stdev+0x4e>
 800191a:	bf00      	nop
 800191c:	00000000 	.word	0x00000000

08001920 <process_measurements>:
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8001920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001924:	460d      	mov	r5, r1
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8001926:	2400      	movs	r4, #0
 8001928:	f501 71c4 	add.w	r1, r1, #392	; 0x188
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 800192c:	4694      	mov	ip, r2
 800192e:	f04f 0b0c 	mov.w	fp, #12
            kf_state->z[i] = 0;
 8001932:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8001aa8 <process_measurements+0x188>
 8001936:	460f      	mov	r7, r1
            kf_state->z_active[i] = false;
 8001938:	46a6      	mov	lr, r4
            kf_state->z_active[i] = true;
 800193a:	f04f 0901 	mov.w	r9, #1
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 800193e:	ed2d 8b02 	vpush	{d8}
 8001942:	b08d      	sub	sp, #52	; 0x34
 8001944:	f10d 0810 	add.w	r8, sp, #16
 8001948:	ae05      	add	r6, sp, #20
 800194a:	9303      	str	r3, [sp, #12]
 800194c:	9b03      	ldr	r3, [sp, #12]
 800194e:	fb0b 3a04 	mla	sl, fp, r4, r3
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 8001952:	6893      	ldr	r3, [r2, #8]
 8001954:	f8da 0008 	ldr.w	r0, [sl, #8]
 8001958:	4283      	cmp	r3, r0
 800195a:	eb05 0004 	add.w	r0, r5, r4
 800195e:	f240 8093 	bls.w	8001a88 <process_measurements+0x168>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 8001962:	ed92 7a00 	vldr	s14, [r2]
            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 8001966:	ab06      	add	r3, sp, #24
            temp_meas_active[i] = true;
 8001968:	f808 9004 	strb.w	r9, [r8, r4]
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 800196c:	ed81 7a00 	vstr	s14, [r1]
            kf_state->z_active[i] = true;
 8001970:	f880 920c 	strb.w	r9, [r0, #524]	; 0x20c
            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 8001974:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8001978:	ed92 7a01 	vldr	s14, [r2, #4]
 800197c:	ed80 7a00 	vstr	s14, [r0]
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 8001980:	eb0a 1a04 	add.w	sl, sl, r4, lsl #4
 8001984:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
 8001988:	320c      	adds	r2, #12
 800198a:	f10c 0c1c 	add.w	ip, ip, #28
 800198e:	f8da 003c 	ldr.w	r0, [sl, #60]	; 0x3c
 8001992:	3104      	adds	r1, #4
 8001994:	4283      	cmp	r3, r0
 8001996:	ea4f 0084 	mov.w	r0, r4, lsl #2
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 800199a:	ab09      	add	r3, sp, #36	; 0x24
 800199c:	bf88      	it	hi
 800199e:	f8dc a014 	ldrhi.w	sl, [ip, #20]
 80019a2:	4418      	add	r0, r3
            acc_x_meas_active[i] = true;
 80019a4:	bf8c      	ite	hi
 80019a6:	f806 9004 	strbhi.w	r9, [r6, r4]
            acc_x_meas_active[i] = false;
 80019aa:	f806 e004 	strbls.w	lr, [r6, r4]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 80019ae:	f104 0401 	add.w	r4, r4, #1
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 80019b2:	bf8c      	ite	hi
 80019b4:	f8c0 a000 	strhi.w	sl, [r0]
            acc_x_meas[i] = 0;
 80019b8:	edc0 7a00 	vstrls	s15, [r0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 80019bc:	2c03      	cmp	r4, #3
 80019be:	d1c5      	bne.n	800194c <process_measurements+0x2c>
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 80019c0:	f505 7903 	add.w	r9, r5, #524	; 0x20c
 80019c4:	4620      	mov	r0, r4
 80019c6:	4639      	mov	r1, r7
    float temp_meas_mean = 0;
 80019c8:	ed9f 8a37 	vldr	s16, [pc, #220]	; 8001aa8 <process_measurements+0x188>
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 80019cc:	464a      	mov	r2, r9
 80019ce:	f7ff ff43 	bl	8001858 <sensor_elimination_by_stdev>
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 80019d2:	4642      	mov	r2, r8
 80019d4:	4620      	mov	r0, r4
 80019d6:	a906      	add	r1, sp, #24
 80019d8:	f7ff ff3e 	bl	8001858 <sensor_elimination_by_stdev>
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 80019dc:	4620      	mov	r0, r4
 80019de:	4632      	mov	r2, r6
 80019e0:	a909      	add	r1, sp, #36	; 0x24
 80019e2:	f7ff ff39 	bl	8001858 <sensor_elimination_by_stdev>
    kf_state->num_z_active = 0;
 80019e6:	2100      	movs	r1, #0
    float u = 0;
 80019e8:	eef0 8a48 	vmov.f32	s17, s16
 80019ec:	4648      	mov	r0, r9
 80019ee:	aa06      	add	r2, sp, #24
    int num_temp_meas_active = 0;
 80019f0:	460c      	mov	r4, r1
    int num_acc_x_meas_active = 0;
 80019f2:	4688      	mov	r8, r1
    kf_state->num_z_active = 0;
 80019f4:	f8c5 1210 	str.w	r1, [r5, #528]	; 0x210
        if (kf_state->z_active[i]){
 80019f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80019fc:	b123      	cbz	r3, 8001a08 <process_measurements+0xe8>
            kf_state->num_z_active += 1;
 80019fe:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
 8001a02:	3301      	adds	r3, #1
 8001a04:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
        if (acc_x_meas_active[i]) {
 8001a08:	5c73      	ldrb	r3, [r6, r1]
 8001a0a:	b143      	cbz	r3, 8001a1e <process_measurements+0xfe>
            u += acc_x_meas[i];
 8001a0c:	ab09      	add	r3, sp, #36	; 0x24
            num_acc_x_meas_active += 1;
 8001a0e:	f108 0801 	add.w	r8, r8, #1
            u += acc_x_meas[i];
 8001a12:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ee78 8aa7 	vadd.f32	s17, s17, s15
        if (temp_meas[i]) {
 8001a1e:	ecf2 7a01 	vldmia	r2!, {s15}
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8001a22:	3101      	adds	r1, #1
        if (temp_meas[i]) {
 8001a24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            temp_meas_mean += temp_meas[i];
 8001a2c:	bf1c      	itt	ne
 8001a2e:	ee38 8a27 	vaddne.f32	s16, s16, s15
            num_temp_meas_active += 1;
 8001a32:	3401      	addne	r4, #1
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8001a34:	2903      	cmp	r1, #3
 8001a36:	d1df      	bne.n	80019f8 <process_measurements+0xd8>
    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 8001a38:	9700      	str	r7, [sp, #0]
 8001a3a:	464b      	mov	r3, r9
 8001a3c:	463a      	mov	r2, r7
 8001a3e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001a40:	f7ff fb62 	bl	8001108 <pressure2altitudeAGL>
    if (num_acc_x_meas_active > 0){
 8001a44:	f1b8 0f00 	cmp.w	r8, #0
 8001a48:	d00f      	beq.n	8001a6a <process_measurements+0x14a>
        u /= num_acc_x_meas_active;
 8001a4a:	ee07 8a90 	vmov	s15, r8
 8001a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        kf_state->u[0] = u - GRAVITATION;
 8001a52:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001aa0 <process_measurements+0x180>
        u /= num_acc_x_meas_active;
 8001a56:	ee88 7aa7 	vdiv.f32	s14, s17, s15
        kf_state->u[0] = u - GRAVITATION;
 8001a5a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001a5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a62:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001a66:	ed85 7a40 	vstr	s14, [r5, #256]	; 0x100
    if (num_temp_meas_active > 0){
 8001a6a:	b144      	cbz	r4, 8001a7e <process_measurements+0x15e>
        temp_meas_mean /= num_temp_meas_active;
 8001a6c:	ee07 4a90 	vmov	s15, r4
        update_env(env, temp_meas_mean);
 8001a70:	9818      	ldr	r0, [sp, #96]	; 0x60
        temp_meas_mean /= num_temp_meas_active;
 8001a72:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        update_env(env, temp_meas_mean);
 8001a76:	ee88 0a00 	vdiv.f32	s0, s16, s0
 8001a7a:	f7ff faf1 	bl	8001060 <update_env>
} 
 8001a7e:	b00d      	add	sp, #52	; 0x34
 8001a80:	ecbd 8b02 	vpop	{d8}
 8001a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            temp_meas[i] = 0;
 8001a88:	ab06      	add	r3, sp, #24
            kf_state->z[i] = 0;
 8001a8a:	edc1 7a00 	vstr	s15, [r1]
            kf_state->z_active[i] = false;
 8001a8e:	f880 e20c 	strb.w	lr, [r0, #524]	; 0x20c
            temp_meas[i] = 0;
 8001a92:	eb03 0084 	add.w	r0, r3, r4, lsl #2
            temp_meas_active[i] = false;
 8001a96:	f804 e008 	strb.w	lr, [r4, r8]
            temp_meas[i] = 0;
 8001a9a:	edc0 7a00 	vstr	s15, [r0]
 8001a9e:	e76f      	b.n	8001980 <process_measurements+0x60>
 8001aa0:	51eb851f 	.word	0x51eb851f
 8001aa4:	40239eb8 	.word	0x40239eb8
 8001aa8:	00000000 	.word	0x00000000

08001aac <eye>:
#include "Util/math_utils.h"


void eye(int32_t dim, float A[dim][dim]) {
 8001aac:	b490      	push	{r4, r7}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	1e43      	subs	r3, r0, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	4603      	mov	r3, r0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	f04f 0400 	mov.w	r4, #0
 8001acc:	0154      	lsls	r4, r2, #5
 8001ace:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ad2:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	e02b      	b.n	8001b32 <eye+0x86>
        for(int j = 0; j < dim; j++){
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e021      	b.n	8001b24 <eye+0x78>
            if (i == j){
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d10d      	bne.n	8001b04 <eye+0x58>
				A[i][j] = 1;
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	fb03 f302 	mul.w	r3, r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	441a      	add	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e00c      	b.n	8001b1e <eye+0x72>
			} else {
				A[i][j] = 0;
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	fb03 f302 	mul.w	r3, r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	441a      	add	r2, r3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dbd9      	blt.n	8001ae0 <eye+0x34>
	for(int i = 0; i < dim; i++){
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	dbcf      	blt.n	8001ada <eye+0x2e>
			}
        }
    }
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc90      	pop	{r4, r7}
 8001b42:	4770      	bx	lr

08001b44 <transpose>:

void transpose(int32_t m, int32_t n, float A[m][n], float A_T[n][m]) {
 8001b44:	b4b0      	push	{r4, r5, r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	68b8      	ldr	r0, [r7, #8]
 8001b54:	1e43      	subs	r3, r0, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	f04f 0400 	mov.w	r4, #0
 8001b68:	0154      	lsls	r4, r2, #5
 8001b6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b6e:	014b      	lsls	r3, r1, #5
 8001b70:	68fd      	ldr	r5, [r7, #12]
 8001b72:	1e6b      	subs	r3, r5, #1
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	462b      	mov	r3, r5
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	f04f 0400 	mov.w	r4, #0
 8001b86:	0154      	lsls	r4, r2, #5
 8001b88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b8c:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	e022      	b.n	8001bda <transpose+0x96>
		for(int j = 0; j < n; j++){
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	e018      	b.n	8001bcc <transpose+0x88>
			A_T[j][i] = A[i][j];
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	fb03 f302 	mul.w	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	441a      	add	r2, r3
 8001ba8:	4629      	mov	r1, r5
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fb03 f301 	mul.w	r3, r3, r1
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	6839      	ldr	r1, [r7, #0]
 8001bb4:	4419      	add	r1, r3
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	61fb      	str	r3, [r7, #28]
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	dbe2      	blt.n	8001b9a <transpose+0x56>
	for(int i = 0; i < m; i++){
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	dbd8      	blt.n	8001b94 <transpose+0x50>
		}
	}
}
 8001be2:	bf00      	nop
 8001be4:	3724      	adds	r7, #36	; 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bcb0      	pop	{r4, r5, r7}
 8001bea:	4770      	bx	lr

08001bec <vecadd>:

void vecadd(int32_t n, float a[n], float b[n], float c[n]) {
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e016      	b.n	8001c2e <vecadd+0x42>
		c[i] = a[i] + b[i];
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	4413      	add	r3, r2
 8001c08:	ed93 7a00 	vldr	s14, [r3]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c24:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dbe4      	blt.n	8001c00 <vecadd+0x14>
	}
}
 8001c36:	bf00      	nop
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <vecsub>:

void vecsub(int32_t n, float a[n], float b[n], float c[n]) {
 8001c42:	b480      	push	{r7}
 8001c44:	b087      	sub	sp, #28
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	e016      	b.n	8001c84 <vecsub+0x42>
		c[i] = a[i] - b[i];
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	ed93 7a00 	vldr	s14, [r3]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	4413      	add	r3, r2
 8001c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbe4      	blt.n	8001c56 <vecsub+0x14>
	}
}
 8001c8c:	bf00      	nop
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <matadd>:

void matadd(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8001c98:	b4f0      	push	{r4, r5, r6, r7}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	68b8      	ldr	r0, [r7, #8]
 8001ca8:	1e43      	subs	r3, r0, #1
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cac:	4603      	mov	r3, r0
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	f04f 0400 	mov.w	r4, #0
 8001cbc:	0154      	lsls	r4, r2, #5
 8001cbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cc2:	014b      	lsls	r3, r1, #5
 8001cc4:	68bd      	ldr	r5, [r7, #8]
 8001cc6:	1e6b      	subs	r3, r5, #1
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	462b      	mov	r3, r5
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	f04f 0400 	mov.w	r4, #0
 8001cda:	0154      	lsls	r4, r2, #5
 8001cdc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ce0:	014b      	lsls	r3, r1, #5
 8001ce2:	68be      	ldr	r6, [r7, #8]
 8001ce4:	1e73      	subs	r3, r6, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	4633      	mov	r3, r6
 8001cea:	4619      	mov	r1, r3
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	f04f 0400 	mov.w	r4, #0
 8001cf8:	0154      	lsls	r4, r2, #5
 8001cfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cfe:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	e032      	b.n	8001d6c <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
 8001d0a:	e028      	b.n	8001d5e <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fb03 f302 	mul.w	r3, r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	441a      	add	r2, r3
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	ed93 7a00 	vldr	s14, [r3]
 8001d24:	462a      	mov	r2, r5
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fb03 f302 	mul.w	r3, r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	441a      	add	r2, r3
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	4632      	mov	r2, r6
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fb03 f302 	mul.w	r3, r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d48:	441a      	add	r2, r3
 8001d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	623b      	str	r3, [r7, #32]
 8001d5e:	6a3a      	ldr	r2, [r7, #32]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	dbd2      	blt.n	8001d0c <matadd+0x74>
	for(int i = 0; i < m; i++){
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	dbc8      	blt.n	8001d06 <matadd+0x6e>
        }
    }
}
 8001d74:	bf00      	nop
 8001d76:	3728      	adds	r7, #40	; 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bcf0      	pop	{r4, r5, r6, r7}
 8001d7c:	4770      	bx	lr

08001d7e <matsub>:

void matsub(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8001d7e:	b4f0      	push	{r4, r5, r6, r7}
 8001d80:	b08a      	sub	sp, #40	; 0x28
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	68b8      	ldr	r0, [r7, #8]
 8001d8e:	1e43      	subs	r3, r0, #1
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
 8001d92:	4603      	mov	r3, r0
 8001d94:	4619      	mov	r1, r3
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	f04f 0400 	mov.w	r4, #0
 8001da2:	0154      	lsls	r4, r2, #5
 8001da4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001da8:	014b      	lsls	r3, r1, #5
 8001daa:	68bd      	ldr	r5, [r7, #8]
 8001dac:	1e6b      	subs	r3, r5, #1
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	462b      	mov	r3, r5
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	f04f 0400 	mov.w	r4, #0
 8001dc0:	0154      	lsls	r4, r2, #5
 8001dc2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dc6:	014b      	lsls	r3, r1, #5
 8001dc8:	68be      	ldr	r6, [r7, #8]
 8001dca:	1e73      	subs	r3, r6, #1
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	4633      	mov	r3, r6
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	f04f 0400 	mov.w	r4, #0
 8001dde:	0154      	lsls	r4, r2, #5
 8001de0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001de4:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	e032      	b.n	8001e52 <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8001dec:	2300      	movs	r3, #0
 8001dee:	623b      	str	r3, [r7, #32]
 8001df0:	e028      	b.n	8001e44 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8001df2:	4602      	mov	r2, r0
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	fb03 f302 	mul.w	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	441a      	add	r2, r3
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	ed93 7a00 	vldr	s14, [r3]
 8001e0a:	462a      	mov	r2, r5
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	fb03 f302 	mul.w	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	441a      	add	r2, r3
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	4632      	mov	r2, r6
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	fb03 f302 	mul.w	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e2e:	441a      	add	r2, r3
 8001e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	3301      	adds	r3, #1
 8001e42:	623b      	str	r3, [r7, #32]
 8001e44:	6a3a      	ldr	r2, [r7, #32]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbd2      	blt.n	8001df2 <matsub+0x74>
	for(int i = 0; i < m; i++){
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	dbc8      	blt.n	8001dec <matsub+0x6e>
        }
    }
}
 8001e5a:	bf00      	nop
 8001e5c:	3728      	adds	r7, #40	; 0x28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bcf0      	pop	{r4, r5, r6, r7}
 8001e62:	4770      	bx	lr

08001e64 <matmul>:

void matmul(int32_t m, int32_t n, int32_t o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8001e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e66:	b08d      	sub	sp, #52	; 0x34
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6178      	str	r0, [r7, #20]
 8001e6c:	6139      	str	r1, [r7, #16]
 8001e6e:	60fa      	str	r2, [r7, #12]
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	693e      	ldr	r6, [r7, #16]
 8001e74:	1e73      	subs	r3, r6, #1
 8001e76:	623b      	str	r3, [r7, #32]
 8001e78:	4633      	mov	r3, r6
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	f04f 0400 	mov.w	r4, #0
 8001e88:	0154      	lsls	r4, r2, #5
 8001e8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e8e:	014b      	lsls	r3, r1, #5
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	3b01      	subs	r3, #1
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	f04f 0400 	mov.w	r4, #0
 8001eaa:	0154      	lsls	r4, r2, #5
 8001eac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001eb0:	014b      	lsls	r3, r1, #5
 8001eb2:	68fd      	ldr	r5, [r7, #12]
 8001eb4:	1e6b      	subs	r3, r5, #1
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	462b      	mov	r3, r5
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	f04f 0400 	mov.w	r4, #0
 8001ec8:	0154      	lsls	r4, r2, #5
 8001eca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ece:	014b      	lsls	r3, r1, #5
	if (reset) {
 8001ed0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d009      	beq.n	8001eec <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	fb02 f303 	mul.w	r3, r2, r3
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001ee8:	f011 fe19 	bl	8013b1e <memset>
	}
	for(int i = 0; i < m; i++){
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef0:	e04a      	b.n	8001f88 <matmul+0x124>
        for(int j = 0; j < o; j++){
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ef6:	e040      	b.n	8001f7a <matmul+0x116>
            for(int k = 0; k < n; k++){
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001efc:	e036      	b.n	8001f6c <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8001efe:	4632      	mov	r2, r6
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	fb03 f302 	mul.w	r3, r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	441a      	add	r2, r3
 8001f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	ed93 7a00 	vldr	s14, [r3]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1a:	fb03 f302 	mul.w	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f22:	441a      	add	r2, r3
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	edd3 7a00 	vldr	s15, [r3]
 8001f2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f32:	462a      	mov	r2, r5
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	fb03 f302 	mul.w	r3, r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f3e:	441a      	add	r2, r3
 8001f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	462a      	mov	r2, r5
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	fb03 f302 	mul.w	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f56:	441a      	add	r2, r3
 8001f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 8001f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f68:	3301      	adds	r3, #1
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	dbc4      	blt.n	8001efe <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	3301      	adds	r3, #1
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	dbba      	blt.n	8001ef8 <matmul+0x94>
	for(int i = 0; i < m; i++){
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	3301      	adds	r3, #1
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
 8001f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	dbb0      	blt.n	8001ef2 <matmul+0x8e>
            }
        }
    }
}
 8001f90:	bf00      	nop
 8001f92:	3734      	adds	r7, #52	; 0x34
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f98 <matvecprod>:

void matvecprod(int32_t m, int32_t n, float A[m][n], float b[n], float c[m], bool reset) {
 8001f98:	b5b0      	push	{r4, r5, r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	68bd      	ldr	r5, [r7, #8]
 8001fa8:	1e6b      	subs	r3, r5, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	462b      	mov	r3, r5
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	f04f 0400 	mov.w	r4, #0
 8001fbc:	0154      	lsls	r4, r2, #5
 8001fbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fc2:	014b      	lsls	r3, r1, #5
	if (reset) {
 8001fc4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fd6:	f011 fda2 	bl	8013b1e <memset>
	}
	for(int i = 0; i < m; i++){
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	e02e      	b.n	800203e <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	e024      	b.n	8002030 <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 8001fe6:	462a      	mov	r2, r5
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fb03 f302 	mul.w	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	441a      	add	r2, r3
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	ed93 7a00 	vldr	s14, [r3]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	4413      	add	r3, r2
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002014:	4413      	add	r3, r2
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002020:	4413      	add	r3, r2
 8002022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002026:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3301      	adds	r3, #1
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	429a      	cmp	r2, r3
 8002036:	dbd6      	blt.n	8001fe6 <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	3301      	adds	r3, #1
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	429a      	cmp	r2, r3
 8002044:	dbcc      	blt.n	8001fe0 <matvecprod+0x48>
        }
    }
}
 8002046:	bf00      	nop
 8002048:	3720      	adds	r7, #32
 800204a:	46bd      	mov	sp, r7
 800204c:	bdb0      	pop	{r4, r5, r7, pc}

0800204e <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int32_t lower_triangular_inverse(int32_t n, float *L) {
 800204e:	b480      	push	{r7}
 8002050:	b08b      	sub	sp, #44	; 0x2c
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
   int32_t i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	e01d      	b.n	800209e <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	edd3 7a00 	vldr	s15, [r3]
 8002068:	eef5 7a40 	vcmp.f32	s15, #0.0
 800206c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002070:	d102      	bne.n	8002078 <lower_triangular_inverse+0x2a>
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	e076      	b.n	8002166 <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	ed93 7a00 	vldr	s14, [r3]
 800207e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3301      	adds	r3, #1
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	3301      	adds	r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	dbdd      	blt.n	8002062 <lower_triangular_inverse+0x14>
    }

    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80020a6:	2301      	movs	r3, #1
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	4413      	add	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	e052      	b.n	800215c <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e041      	b.n	8002144 <lower_triangular_inverse+0xf6>
            sum = 0.0;
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	e01b      	b.n	8002108 <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4413      	add	r3, r2
 80020d8:	ed93 7a00 	vldr	s14, [r3]
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80020f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f4:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	3301      	adds	r3, #1
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	429a      	cmp	r2, r3
 800210e:	dbdf      	blt.n	80020d0 <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4413      	add	r3, r2
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	eeb1 7a67 	vneg.f32	s14, s15
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4413      	add	r3, r2
 8002128:	edd7 7a03 	vldr	s15, [r7, #12]
 800212c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002130:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	4413      	add	r3, r2
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	3301      	adds	r3, #1
 8002142:	623b      	str	r3, [r7, #32]
 8002144:	6a3a      	ldr	r2, [r7, #32]
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	429a      	cmp	r2, r3
 800214a:	dbb9      	blt.n	80020c0 <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	3301      	adds	r3, #1
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4413      	add	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	dba8      	blt.n	80020b6 <lower_triangular_inverse+0x68>
        }
    }

    return 0;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	372c      	adds	r7, #44	; 0x2c
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 8002172:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002174:	b08b      	sub	sp, #44	; 0x2c
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	68fe      	ldr	r6, [r7, #12]
 8002180:	1e73      	subs	r3, r6, #1
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	4633      	mov	r3, r6
 8002186:	4619      	mov	r1, r3
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	f04f 0400 	mov.w	r4, #0
 8002194:	0154      	lsls	r4, r2, #5
 8002196:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800219a:	014b      	lsls	r3, r1, #5
 800219c:	68fd      	ldr	r5, [r7, #12]
 800219e:	1e6b      	subs	r3, r5, #1
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	462b      	mov	r3, r5
 80021a4:	4619      	mov	r1, r3
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	f04f 0400 	mov.w	r4, #0
 80021b2:	0154      	lsls	r4, r2, #5
 80021b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021b8:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	461a      	mov	r2, r3
 80021c6:	2100      	movs	r1, #0
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f011 fca8 	bl	8013b1e <memset>
    for (int i = 0; i < n; i++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	e08a      	b.n	80022ea <cholesky+0x178>
        for (int j = 0; j < (i+1); j++) {
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	e07e      	b.n	80022d8 <cholesky+0x166>
            float s = 0;
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
 80021e4:	e022      	b.n	800222c <cholesky+0xba>
                s += L[i][k] * L[j][k];
 80021e6:	462a      	mov	r2, r5
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fb03 f302 	mul.w	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	441a      	add	r2, r3
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	ed93 7a00 	vldr	s14, [r3]
 80021fe:	462a      	mov	r2, r5
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	fb03 f302 	mul.w	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	441a      	add	r2, r3
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221a:	ed97 7a08 	vldr	s14, [r7, #32]
 800221e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002222:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	3301      	adds	r3, #1
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
 800222c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	429a      	cmp	r2, r3
 8002232:	dbd8      	blt.n	80021e6 <cholesky+0x74>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	429a      	cmp	r2, r3
 800223a:	d116      	bne.n	800226a <cholesky+0xf8>
 800223c:	4632      	mov	r2, r6
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	fb03 f302 	mul.w	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	441a      	add	r2, r3
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	ed93 7a00 	vldr	s14, [r3]
 8002254:	edd7 7a08 	vldr	s15, [r7, #32]
 8002258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800225c:	eeb0 0a67 	vmov.f32	s0, s15
 8002260:	f012 fb9e 	bl	80149a0 <sqrtf>
 8002264:	eef0 7a40 	vmov.f32	s15, s0
 8002268:	e027      	b.n	80022ba <cholesky+0x148>
 800226a:	462a      	mov	r2, r5
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	fb03 f302 	mul.w	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	441a      	add	r2, r3
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002286:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800228a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800228e:	4632      	mov	r2, r6
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	fb03 f302 	mul.w	r3, r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	441a      	add	r2, r3
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	ed93 7a00 	vldr	s14, [r3]
 80022a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80022aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80022b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022ba:	462a      	mov	r2, r5
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	fb03 f302 	mul.w	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	441a      	add	r2, r3
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < (i+1); j++) {
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3301      	adds	r3, #1
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	3301      	adds	r3, #1
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	429a      	cmp	r2, r3
 80022e0:	f6ff af7b 	blt.w	80021da <cholesky+0x68>
    for (int i = 0; i < n; i++)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	3301      	adds	r3, #1
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	f6ff af70 	blt.w	80021d4 <cholesky+0x62>
        }
}
 80022f4:	bf00      	nop
 80022f6:	372c      	adds	r7, #44	; 0x2c
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022fc <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 80022fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002300:	b090      	sub	sp, #64	; 0x40
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	ed87 0a00 	vstr	s0, [r7]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1e5a      	subs	r2, r3, #1
 8002312:	63ba      	str	r2, [r7, #56]	; 0x38
 8002314:	4619      	mov	r1, r3
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	f04f 0400 	mov.w	r4, #0
 8002322:	0154      	lsls	r4, r2, #5
 8002324:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002328:	014b      	lsls	r3, r1, #5
 800232a:	68fd      	ldr	r5, [r7, #12]
 800232c:	1e6b      	subs	r3, r5, #1
 800232e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002330:	462b      	mov	r3, r5
 8002332:	4619      	mov	r1, r3
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	f04f 0400 	mov.w	r4, #0
 8002340:	0154      	lsls	r4, r2, #5
 8002342:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002346:	014b      	lsls	r3, r1, #5
 8002348:	466b      	mov	r3, sp
 800234a:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	68fe      	ldr	r6, [r7, #12]
 8002350:	1e43      	subs	r3, r0, #1
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
 8002354:	4603      	mov	r3, r0
 8002356:	4619      	mov	r1, r3
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	f04f 0400 	mov.w	r4, #0
 8002364:	0154      	lsls	r4, r2, #5
 8002366:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800236a:	014b      	lsls	r3, r1, #5
 800236c:	4603      	mov	r3, r0
 800236e:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8002372:	1e73      	subs	r3, r6, #1
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	4603      	mov	r3, r0
 8002378:	4619      	mov	r1, r3
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	4633      	mov	r3, r6
 8002380:	f04f 0400 	mov.w	r4, #0
 8002384:	fb03 fe02 	mul.w	lr, r3, r2
 8002388:	fb01 fc04 	mul.w	ip, r1, r4
 800238c:	44f4      	add	ip, lr
 800238e:	fba1 3403 	umull	r3, r4, r1, r3
 8002392:	eb0c 0204 	add.w	r2, ip, r4
 8002396:	4614      	mov	r4, r2
 8002398:	f04f 0100 	mov.w	r1, #0
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	0162      	lsls	r2, r4, #5
 80023a2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80023a6:	0159      	lsls	r1, r3, #5
 80023a8:	4603      	mov	r3, r0
 80023aa:	4619      	mov	r1, r3
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	4633      	mov	r3, r6
 80023b2:	f04f 0400 	mov.w	r4, #0
 80023b6:	fb03 fe02 	mul.w	lr, r3, r2
 80023ba:	fb01 fc04 	mul.w	ip, r1, r4
 80023be:	44f4      	add	ip, lr
 80023c0:	fba1 3403 	umull	r3, r4, r1, r3
 80023c4:	eb0c 0204 	add.w	r2, ip, r4
 80023c8:	4614      	mov	r4, r2
 80023ca:	f04f 0100 	mov.w	r1, #0
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	0162      	lsls	r2, r4, #5
 80023d4:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80023d8:	0159      	lsls	r1, r3, #5
 80023da:	4603      	mov	r3, r0
 80023dc:	4632      	mov	r2, r6
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	3303      	adds	r3, #3
 80023e6:	3307      	adds	r3, #7
 80023e8:	08db      	lsrs	r3, r3, #3
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	ebad 0d03 	sub.w	sp, sp, r3
 80023f0:	466b      	mov	r3, sp
 80023f2:	3303      	adds	r3, #3
 80023f4:	089b      	lsrs	r3, r3, #2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 80023fa:	69f8      	ldr	r0, [r7, #28]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	461a      	mov	r2, r3
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	f011 fb7d 	bl	8013b08 <memcpy>
    for (int i = 0; i < n; i++) {
 800240e:	2300      	movs	r3, #0
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
 8002412:	e022      	b.n	800245a <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 8002414:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800241c:	fb01 f103 	mul.w	r1, r1, r3
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	440b      	add	r3, r1
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	ed93 7a00 	vldr	s14, [r3]
 800242c:	edd7 6a00 	vldr	s13, [r7]
 8002430:	edd7 7a00 	vldr	s15, [r7]
 8002434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002438:	ea4f 0398 	mov.w	r3, r8, lsr #2
 800243c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002444:	fb01 f103 	mul.w	r1, r1, r3
 8002448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244a:	440b      	add	r3, r1
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002456:	3301      	adds	r3, #1
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
 800245a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	429a      	cmp	r2, r3
 8002460:	dbd8      	blt.n	8002414 <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	68fe      	ldr	r6, [r7, #12]
 8002466:	466b      	mov	r3, sp
 8002468:	469a      	mov	sl, r3
 800246a:	1e43      	subs	r3, r0, #1
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	4603      	mov	r3, r0
 8002470:	4619      	mov	r1, r3
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	f04f 0400 	mov.w	r4, #0
 800247e:	0154      	lsls	r4, r2, #5
 8002480:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002484:	014b      	lsls	r3, r1, #5
 8002486:	4603      	mov	r3, r0
 8002488:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800248c:	1e73      	subs	r3, r6, #1
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	4603      	mov	r3, r0
 8002492:	4619      	mov	r1, r3
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	4633      	mov	r3, r6
 800249a:	f04f 0400 	mov.w	r4, #0
 800249e:	fb03 fe02 	mul.w	lr, r3, r2
 80024a2:	fb01 fc04 	mul.w	ip, r1, r4
 80024a6:	44f4      	add	ip, lr
 80024a8:	fba1 3403 	umull	r3, r4, r1, r3
 80024ac:	eb0c 0204 	add.w	r2, ip, r4
 80024b0:	4614      	mov	r4, r2
 80024b2:	f04f 0100 	mov.w	r1, #0
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	0162      	lsls	r2, r4, #5
 80024bc:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80024c0:	0159      	lsls	r1, r3, #5
 80024c2:	4603      	mov	r3, r0
 80024c4:	4619      	mov	r1, r3
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	4633      	mov	r3, r6
 80024cc:	f04f 0400 	mov.w	r4, #0
 80024d0:	fb03 fe02 	mul.w	lr, r3, r2
 80024d4:	fb01 fc04 	mul.w	ip, r1, r4
 80024d8:	44f4      	add	ip, lr
 80024da:	fba1 3403 	umull	r3, r4, r1, r3
 80024de:	eb0c 0204 	add.w	r2, ip, r4
 80024e2:	4614      	mov	r4, r2
 80024e4:	f04f 0100 	mov.w	r1, #0
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	0162      	lsls	r2, r4, #5
 80024ee:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80024f2:	0159      	lsls	r1, r3, #5
 80024f4:	4603      	mov	r3, r0
 80024f6:	4632      	mov	r2, r6
 80024f8:	fb02 f303 	mul.w	r3, r2, r3
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	3303      	adds	r3, #3
 8002500:	3307      	adds	r3, #7
 8002502:	08db      	lsrs	r3, r3, #3
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	ebad 0d03 	sub.w	sp, sp, r3
 800250a:	466b      	mov	r3, sp
 800250c:	3303      	adds	r3, #3
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4619      	mov	r1, r3
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7ff fe29 	bl	8002172 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4619      	mov	r1, r3
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f7ff fd92 	bl	800204e <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	fb02 f303 	mul.w	r3, r2, r3
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	461a      	mov	r2, r3
 8002536:	2100      	movs	r1, #0
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f011 faf0 	bl	8013b1e <memset>
    for(int i = 0; i < n; i++){
 800253e:	2300      	movs	r3, #0
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002542:	e04e      	b.n	80025e2 <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 8002544:	2300      	movs	r3, #0
 8002546:	633b      	str	r3, [r7, #48]	; 0x30
 8002548:	e044      	b.n	80025d4 <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 800254a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254e:	4293      	cmp	r3, r2
 8002550:	bfb8      	it	lt
 8002552:	4613      	movlt	r3, r2
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
 8002556:	e036      	b.n	80025c6 <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8002558:	462a      	mov	r2, r5
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	fb03 f302 	mul.w	r3, r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	441a      	add	r2, r3
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	ed93 7a00 	vldr	s14, [r3]
 8002570:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002578:	fb01 f103 	mul.w	r1, r1, r3
 800257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257e:	440b      	add	r3, r1
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	edd3 6a00 	vldr	s13, [r3]
 8002588:	ea4f 0398 	mov.w	r3, r8, lsr #2
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002590:	fb01 f103 	mul.w	r1, r1, r3
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	440b      	add	r3, r1
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a4:	462a      	mov	r2, r5
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	fb03 f302 	mul.w	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	441a      	add	r2, r3
 80025b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 80025c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c2:	3301      	adds	r3, #1
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
 80025c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	dbc4      	blt.n	8002558 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 80025ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d0:	3301      	adds	r3, #1
 80025d2:	633b      	str	r3, [r7, #48]	; 0x30
 80025d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	429a      	cmp	r2, r3
 80025da:	dbb6      	blt.n	800254a <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 80025dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025de:	3301      	adds	r3, #1
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	dbac      	blt.n	8002544 <cholesky_inverse+0x248>
 80025ea:	46d5      	mov	sp, sl
 80025ec:	46cd      	mov	sp, r9
            }
        }
    }
}
 80025ee:	bf00      	nop
 80025f0:	3740      	adds	r7, #64	; 0x40
 80025f2:	46bd      	mov	sp, r7
 80025f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080025f8 <AcquireMutex>:
 *  Created on: Jun 19, 2020
 *      Author: Jonas
 */
#include "Util/mutex.h"

osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 80025f8:	b510      	push	{r4, lr}
	osStatus_t status = osOK;
	status = osMutexAcquire(custom_mutex->mutex, 10);
 80025fa:	210a      	movs	r1, #10
osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 80025fc:	4604      	mov	r4, r0
	status = osMutexAcquire(custom_mutex->mutex, 10);
 80025fe:	6800      	ldr	r0, [r0, #0]
 8002600:	f00e f80e 	bl	8010620 <osMutexAcquire>
	if(status == osOK){
 8002604:	b910      	cbnz	r0, 800260c <AcquireMutex+0x14>
		custom_mutex->counter++;
 8002606:	6863      	ldr	r3, [r4, #4]
 8002608:	3301      	adds	r3, #1
 800260a:	6063      	str	r3, [r4, #4]
	}

	return status;
}
 800260c:	bd10      	pop	{r4, pc}

0800260e <ReleaseMutex>:

osStatus_t ReleaseMutex(custom_mutex_t *custom_mutex){
	return osMutexRelease(custom_mutex->mutex);
 800260e:	6800      	ldr	r0, [r0, #0]
 8002610:	f00e b836 	b.w	8010680 <osMutexRelease>

08002614 <ReadMutex>:
}

osStatus_t ReadMutex(custom_mutex_t *custom_mutex,void const* global_data, void* const local_data, int32_t size){
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	b09a      	sub	sp, #104	; 0x68
 8002618:	461c      	mov	r4, r3
 800261a:	460e      	mov	r6, r1
 800261c:	4615      	mov	r5, r2
	uint8_t buffer[100] = { 0 };
 800261e:	2100      	movs	r1, #0
 8002620:	2264      	movs	r2, #100	; 0x64
 8002622:	a801      	add	r0, sp, #4
 8002624:	f011 fa7b 	bl	8013b1e <memset>
	uint32_t counter = custom_mutex->counter;
	osStatus_t status = osError;
	for(int i = 0; i < 5; i++){
		memcpy(&buffer[0], global_data, size);
 8002628:	4622      	mov	r2, r4
 800262a:	4631      	mov	r1, r6
 800262c:	a801      	add	r0, sp, #4
 800262e:	f011 fa6b 	bl	8013b08 <memcpy>
		if(custom_mutex->counter == counter){
			memcpy(local_data, buffer, size);
 8002632:	4622      	mov	r2, r4
 8002634:	a901      	add	r1, sp, #4
 8002636:	4628      	mov	r0, r5
 8002638:	f011 fa66 	bl	8013b08 <memcpy>
			break;
		}
		counter = custom_mutex->counter;
	}
	return status;
}
 800263c:	2000      	movs	r0, #0
 800263e:	b01a      	add	sp, #104	; 0x68
 8002640:	bd70      	pop	{r4, r5, r6, pc}
 8002642:	0000      	movs	r0, r0
 8002644:	0000      	movs	r0, r0
	...

08002648 <ReadMutexStateEst>:
		/* Write in Buffer */
		Placeholder_measurement[0] = (float) (baro->pressure);
		Placeholder_timestamps[0] = baro->ts;
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
		Placeholder_timestamps[1] = imu->ts;
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 8002648:	edd1 7a01 	vldr	s15, [r1, #4]
 800264c:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80026b8 <ReadMutexStateEst+0x70>
 8002650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 8002654:	b570      	push	{r4, r5, r6, lr}
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 8002656:	eec7 6a86 	vdiv.f32	s13, s15, s12
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 800265a:	f9b2 400a 	ldrsh.w	r4, [r2, #10]
		Placeholder_measurement[0] = (float) (baro->pressure);
 800265e:	edd1 7a00 	vldr	s15, [r1]
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 8002662:	ee07 4a10 	vmov	s14, r4
osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 8002666:	9804      	ldr	r0, [sp, #16]
 8002668:	240c      	movs	r4, #12
		Placeholder_timestamps[1] = imu->ts;
 800266a:	68d5      	ldr	r5, [r2, #12]

		/* Check if Mutex was aquired */
		if(custom_mutex->counter == counter){
			state->baro_data[sb_number-1].pressure = Placeholder_measurement[0];
 800266c:	1e42      	subs	r2, r0, #1
		Placeholder_timestamps[0] = baro->ts;
 800266e:	688e      	ldr	r6, [r1, #8]
		Placeholder_measurement[0] = (float) (baro->pressure);
 8002670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002674:	fb04 3000 	mla	r0, r4, r0, r3
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 8002678:	eeba 7acb 	vcvt.f32.s32	s14, s14, #10
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];

			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 800267c:	211c      	movs	r1, #28
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 800267e:	fb04 3402 	mla	r4, r4, r2, r3
		Placeholder_measurement[0] = (float) (baro->pressure);
 8002682:	ed40 7a03 	vstr	s15, [r0, #-12]
			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8002686:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800268a:	fb01 3302 	mla	r3, r1, r2, r3
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
 800268e:	ed40 6a02 	vstr	s13, [r0, #-8]
		counter = custom_mutex->counter;
	}


	return status;
}
 8002692:	2000      	movs	r0, #0
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 8002694:	60a6      	str	r6, [r4, #8]
			state->imu_data[sb_number-1].ts = Placeholder_timestamps[1];
 8002696:	63dd      	str	r5, [r3, #60]	; 0x3c
			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8002698:	ed9f 6b05 	vldr	d6, [pc, #20]	; 80026b0 <ReadMutexStateEst+0x68>
 800269c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80026a0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80026a4:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
}
 80026a8:	bd70      	pop	{r4, r5, r6, pc}
 80026aa:	bf00      	nop
 80026ac:	f3af 8000 	nop.w
 80026b0:	51eb851f 	.word	0x51eb851f
 80026b4:	40239eb8 	.word	0x40239eb8
 80026b8:	42c80000 	.word	0x42c80000

080026bc <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 80026bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026be:	b0b1      	sub	sp, #196	; 0xc4
 80026c0:	4615      	mov	r5, r2
 80026c2:	4606      	mov	r6, r0
 80026c4:	460f      	mov	r7, r1
	log_entry_t log_entry = { 0 };
 80026c6:	2296      	movs	r2, #150	; 0x96
 80026c8:	2100      	movs	r1, #0
 80026ca:	a80a      	add	r0, sp, #40	; 0x28
		sensor_type_e sensor_type, void *sensor_data) {
 80026cc:	461c      	mov	r4, r3
	log_entry_t log_entry = { 0 };
 80026ce:	f011 fa26 	bl	8013b1e <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 80026d2:	2301      	movs	r3, #1
 80026d4:	4a3b      	ldr	r2, [pc, #236]	; (80027c4 <logSensor+0x108>)
 80026d6:	2196      	movs	r1, #150	; 0x96
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	a80a      	add	r0, sp, #40	; 0x28
 80026dc:	4633      	mov	r3, r6
 80026de:	e9cd 7501 	strd	r7, r5, [sp, #4]
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 80026e2:	3d01      	subs	r5, #1
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 80026e4:	f011 fadc 	bl	8013ca0 <sniprintf>
			battery_data->battery, battery_data->consumption,
			battery_data->current, battery_data->supply);
	}
		break;
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 80026e8:	a80a      	add	r0, sp, #40	; 0x28
	switch (sensor_type) {
 80026ea:	2d03      	cmp	r5, #3
 80026ec:	d861      	bhi.n	80027b2 <logSensor+0xf6>
 80026ee:	e8df f005 	tbb	[pc, r5]
 80026f2:	1802      	.short	0x1802
 80026f4:	5034      	.short	0x5034
		snprintf(log_entry.str + strlen(log_entry.str),
 80026f6:	f7fd fdf3 	bl	80002e0 <strlen>
 80026fa:	68a3      	ldr	r3, [r4, #8]
 80026fc:	4a32      	ldr	r2, [pc, #200]	; (80027c8 <logSensor+0x10c>)
 80026fe:	2196      	movs	r1, #150	; 0x96
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	6863      	ldr	r3, [r4, #4]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	6823      	ldr	r3, [r4, #0]
 8002708:	ac0a      	add	r4, sp, #40	; 0x28
 800270a:	4420      	add	r0, r4
 800270c:	f011 fac8 	bl	8013ca0 <sniprintf>
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002710:	2300      	movs	r3, #0
 8002712:	482e      	ldr	r0, [pc, #184]	; (80027cc <logSensor+0x110>)
 8002714:	a90a      	add	r1, sp, #40	; 0x28
 8002716:	461a      	mov	r2, r3
 8002718:	6800      	ldr	r0, [r0, #0]
 800271a:	f00e f90b 	bl	8010934 <osMessageQueuePut>
}
 800271e:	b031      	add	sp, #196	; 0xc4
 8002720:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintf(log_entry.str + strlen(log_entry.str),
 8002722:	f7fd fddd 	bl	80002e0 <strlen>
 8002726:	68e2      	ldr	r2, [r4, #12]
 8002728:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800272c:	2196      	movs	r1, #150	; 0x96
 800272e:	9205      	str	r2, [sp, #20]
 8002730:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8002734:	9204      	str	r2, [sp, #16]
 8002736:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800273a:	9203      	str	r2, [sp, #12]
 800273c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8002740:	9202      	str	r2, [sp, #8]
 8002742:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8002746:	9201      	str	r2, [sp, #4]
 8002748:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800274c:	ac0a      	add	r4, sp, #40	; 0x28
 800274e:	9200      	str	r2, [sp, #0]
 8002750:	4420      	add	r0, r4
 8002752:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <logSensor+0x114>)
 8002754:	f011 faa4 	bl	8013ca0 <sniprintf>
		break;
 8002758:	e7da      	b.n	8002710 <logSensor+0x54>
		snprintf(log_entry.str + strlen(log_entry.str),
 800275a:	f7fd fdc1 	bl	80002e0 <strlen>
 800275e:	8be3      	ldrh	r3, [r4, #30]
 8002760:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <logSensor+0x118>)
 8002762:	2196      	movs	r1, #150	; 0x96
 8002764:	9308      	str	r3, [sp, #32]
 8002766:	8c23      	ldrh	r3, [r4, #32]
 8002768:	9307      	str	r3, [sp, #28]
 800276a:	7b23      	ldrb	r3, [r4, #12]
 800276c:	9306      	str	r3, [sp, #24]
 800276e:	69a3      	ldr	r3, [r4, #24]
 8002770:	9305      	str	r3, [sp, #20]
 8002772:	7d23      	ldrb	r3, [r4, #20]
 8002774:	9304      	str	r3, [sp, #16]
 8002776:	6923      	ldr	r3, [r4, #16]
 8002778:	9303      	str	r3, [sp, #12]
 800277a:	7b63      	ldrb	r3, [r4, #13]
 800277c:	9302      	str	r3, [sp, #8]
 800277e:	68a3      	ldr	r3, [r4, #8]
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	6863      	ldr	r3, [r4, #4]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	ac0a      	add	r4, sp, #40	; 0x28
 800278a:	4420      	add	r0, r4
 800278c:	f011 fa88 	bl	8013ca0 <sniprintf>
		break;
 8002790:	e7be      	b.n	8002710 <logSensor+0x54>
		snprintf(log_entry.str + strlen(log_entry.str),
 8002792:	f7fd fda5 	bl	80002e0 <strlen>
 8002796:	8822      	ldrh	r2, [r4, #0]
 8002798:	8863      	ldrh	r3, [r4, #2]
 800279a:	2196      	movs	r1, #150	; 0x96
 800279c:	9202      	str	r2, [sp, #8]
 800279e:	88a2      	ldrh	r2, [r4, #4]
 80027a0:	9201      	str	r2, [sp, #4]
 80027a2:	88e2      	ldrh	r2, [r4, #6]
 80027a4:	ac0a      	add	r4, sp, #40	; 0x28
 80027a6:	9200      	str	r2, [sp, #0]
 80027a8:	4420      	add	r0, r4
 80027aa:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <logSensor+0x11c>)
 80027ac:	f011 fa78 	bl	8013ca0 <sniprintf>
		break;
 80027b0:	e7ae      	b.n	8002710 <logSensor+0x54>
		snprintf(log_entry.str + strlen(log_entry.str),
 80027b2:	f7fd fd95 	bl	80002e0 <strlen>
 80027b6:	ab0a      	add	r3, sp, #40	; 0x28
 80027b8:	4908      	ldr	r1, [pc, #32]	; (80027dc <logSensor+0x120>)
 80027ba:	4418      	add	r0, r3
 80027bc:	f011 faa4 	bl	8013d08 <strcpy>
		break;
 80027c0:	e7a6      	b.n	8002710 <logSensor+0x54>
 80027c2:	bf00      	nop
 80027c4:	080159cb 	.word	0x080159cb
 80027c8:	080159da 	.word	0x080159da
 80027cc:	2401a8bc 	.word	0x2401a8bc
 80027d0:	080159e7 	.word	0x080159e7
 80027d4:	08015a04 	.word	0x08015a04
 80027d8:	08015a2a 	.word	0x08015a2a
 80027dc:	08015a3b 	.word	0x08015a3b

080027e0 <logRocketState>:

osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 80027e0:	b530      	push	{r4, r5, lr}
 80027e2:	b0ad      	sub	sp, #180	; 0xb4
 80027e4:	4605      	mov	r5, r0
	log_entry_t log_entry = { 0 };
 80027e6:	2496      	movs	r4, #150	; 0x96
osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 80027e8:	a803      	add	r0, sp, #12
 80027ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 80027ee:	4622      	mov	r2, r4
 80027f0:	2100      	movs	r1, #0
 80027f2:	a806      	add	r0, sp, #24
 80027f4:	f011 f993 	bl	8013b1e <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
 80027f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80027fc:	4621      	mov	r1, r4
 80027fe:	4a08      	ldr	r2, [pc, #32]	; (8002820 <logRocketState+0x40>)
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	2302      	movs	r3, #2
 8002804:	a806      	add	r0, sp, #24
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	462b      	mov	r3, r5
 800280a:	f011 fa49 	bl	8013ca0 <sniprintf>
			flight_phase_detection.flight_phase);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 800280e:	2300      	movs	r3, #0
 8002810:	4804      	ldr	r0, [pc, #16]	; (8002824 <logRocketState+0x44>)
 8002812:	a906      	add	r1, sp, #24
 8002814:	461a      	mov	r2, r3
 8002816:	6800      	ldr	r0, [r0, #0]
 8002818:	f00e f88c 	bl	8010934 <osMessageQueuePut>
}
 800281c:	b02d      	add	sp, #180	; 0xb4
 800281e:	bd30      	pop	{r4, r5, pc}
 8002820:	080159c0 	.word	0x080159c0
 8002824:	2401a8bc 	.word	0x2401a8bc

08002828 <logEstimatorVar>:

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8002828:	b084      	sub	sp, #16
 800282a:	b530      	push	{r4, r5, lr}
 800282c:	b0ab      	sub	sp, #172	; 0xac
 800282e:	4605      	mov	r5, r0
	log_entry_t log_entry = { 0 };
 8002830:	2496      	movs	r4, #150	; 0x96
osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8002832:	a82f      	add	r0, sp, #188	; 0xbc
 8002834:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8002838:	4622      	mov	r2, r4
 800283a:	2100      	movs	r1, #0
 800283c:	a804      	add	r0, sp, #16
 800283e:	f011 f96e 	bl	8013b1e <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, ESTIMATOR_VAR,
 8002842:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8002844:	4621      	mov	r1, r4
 8002846:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <logEstimatorVar+0x50>)
 8002848:	9303      	str	r3, [sp, #12]
 800284a:	a804      	add	r0, sp, #16
 800284c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800284e:	9302      	str	r3, [sp, #8]
 8002850:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	2303      	movs	r3, #3
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	462b      	mov	r3, r5
 800285a:	f011 fa21 	bl	8013ca0 <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0], estimator_data.acceleration_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 800285e:	2300      	movs	r3, #0
 8002860:	4806      	ldr	r0, [pc, #24]	; (800287c <logEstimatorVar+0x54>)
 8002862:	a904      	add	r1, sp, #16
 8002864:	461a      	mov	r2, r3
 8002866:	6800      	ldr	r0, [r0, #0]
 8002868:	f00e f864 	bl	8010934 <osMessageQueuePut>
}
 800286c:	b02b      	add	sp, #172	; 0xac
 800286e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002872:	b004      	add	sp, #16
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	0801599c 	.word	0x0801599c
 800287c:	2401a8bc 	.word	0x2401a8bc

08002880 <logControllerOutput>:

osStatus_t logControllerOutput(timestamp_t ts, int32_t controller_output, int32_t reference_error,
		int32_t integrated_error) {
 8002880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_entry_t log_entry = { 0 };
 8002884:	2496      	movs	r4, #150	; 0x96
		int32_t integrated_error) {
 8002886:	b0aa      	sub	sp, #168	; 0xa8
 8002888:	4605      	mov	r5, r0
 800288a:	460e      	mov	r6, r1
 800288c:	4617      	mov	r7, r2
	log_entry_t log_entry = { 0 };
 800288e:	2100      	movs	r1, #0
 8002890:	4622      	mov	r2, r4
 8002892:	a804      	add	r0, sp, #16
		int32_t integrated_error) {
 8002894:	4698      	mov	r8, r3
	log_entry_t log_entry = { 0 };
 8002896:	f011 f942 	bl	8013b1e <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, CONTROLLER_OUTPUT,
 800289a:	2304      	movs	r3, #4
 800289c:	4621      	mov	r1, r4
 800289e:	9601      	str	r6, [sp, #4]
 80028a0:	a804      	add	r0, sp, #16
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	462b      	mov	r3, r5
 80028a6:	4a07      	ldr	r2, [pc, #28]	; (80028c4 <logControllerOutput+0x44>)
 80028a8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80028ac:	f011 f9f8 	bl	8013ca0 <sniprintf>
			controller_output, reference_error, integrated_error);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80028b0:	2300      	movs	r3, #0
 80028b2:	4805      	ldr	r0, [pc, #20]	; (80028c8 <logControllerOutput+0x48>)
 80028b4:	a904      	add	r1, sp, #16
 80028b6:	461a      	mov	r2, r3
 80028b8:	6800      	ldr	r0, [r0, #0]
 80028ba:	f00e f83b 	bl	8010934 <osMessageQueuePut>
}
 80028be:	b02a      	add	sp, #168	; 0xa8
 80028c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028c4:	0801599c 	.word	0x0801599c
 80028c8:	2401a8bc 	.word	0x2401a8bc

080028cc <logMotor>:

osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 80028cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	log_entry_t log_entry = { 0 };
 80028ce:	2496      	movs	r4, #150	; 0x96
osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 80028d0:	b0ab      	sub	sp, #172	; 0xac
 80028d2:	4605      	mov	r5, r0
 80028d4:	460e      	mov	r6, r1
 80028d6:	4617      	mov	r7, r2
	log_entry_t log_entry = { 0 };
 80028d8:	2100      	movs	r1, #0
 80028da:	4622      	mov	r2, r4
 80028dc:	a804      	add	r0, sp, #16
 80028de:	f011 f91e 	bl	8013b1e <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld\n", ts, MOTOR_POSITION,
 80028e2:	2305      	movs	r3, #5
 80028e4:	4621      	mov	r1, r4
 80028e6:	4a08      	ldr	r2, [pc, #32]	; (8002908 <logMotor+0x3c>)
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	a804      	add	r0, sp, #16
 80028ec:	462b      	mov	r3, r5
 80028ee:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80028f2:	f011 f9d5 	bl	8013ca0 <sniprintf>
			desired_position, actual_position);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80028f6:	2300      	movs	r3, #0
 80028f8:	4804      	ldr	r0, [pc, #16]	; (800290c <logMotor+0x40>)
 80028fa:	a904      	add	r1, sp, #16
 80028fc:	461a      	mov	r2, r3
 80028fe:	6800      	ldr	r0, [r0, #0]
 8002900:	f00e f818 	bl	8010934 <osMessageQueuePut>
}
 8002904:	b02b      	add	sp, #172	; 0xac
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	080159b0 	.word	0x080159b0
 800290c:	2401a8bc 	.word	0x2401a8bc

08002910 <UsbPrint>:
}


/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8002910:	b40f      	push	{r0, r1, r2, r3}
 8002912:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t ret = 1;
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 8002914:	4d10      	ldr	r5, [pc, #64]	; (8002958 <UsbPrint+0x48>)
 8002916:	2100      	movs	r1, #0
 8002918:	6828      	ldr	r0, [r5, #0]
 800291a:	f00d fe81 	bl	8010620 <osMutexAcquire>
 800291e:	b9c0      	cbnz	r0, 8002952 <UsbPrint+0x42>
		va_list argptr;
		va_start(argptr, format);
 8002920:	ab07      	add	r3, sp, #28
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8002922:	9a06      	ldr	r2, [sp, #24]
 8002924:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002928:	480c      	ldr	r0, [pc, #48]	; (800295c <UsbPrint+0x4c>)
		va_start(argptr, format);
 800292a:	9301      	str	r3, [sp, #4]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 800292c:	f011 fa32 	bl	8013d94 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8002930:	480a      	ldr	r0, [pc, #40]	; (800295c <UsbPrint+0x4c>)
 8002932:	f7fd fcd5 	bl	80002e0 <strlen>
 8002936:	b281      	uxth	r1, r0
 8002938:	4808      	ldr	r0, [pc, #32]	; (800295c <UsbPrint+0x4c>)
 800293a:	f010 fec9 	bl	80136d0 <CDC_Transmit_FS>
 800293e:	4604      	mov	r4, r0
		osMutexRelease(print_mutex);
 8002940:	6828      	ldr	r0, [r5, #0]
 8002942:	f00d fe9d 	bl	8010680 <osMutexRelease>
	}
#endif
	return ret;
}
 8002946:	4620      	mov	r0, r4
 8002948:	b003      	add	sp, #12
 800294a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800294e:	b004      	add	sp, #16
 8002950:	4770      	bx	lr
	uint8_t ret = 1;
 8002952:	2401      	movs	r4, #1
 8002954:	e7f7      	b.n	8002946 <UsbPrint+0x36>
 8002956:	bf00      	nop
 8002958:	24009bd8 	.word	0x24009bd8
 800295c:	24008ef2 	.word	0x24008ef2

08002960 <StartDefaultTask>:
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		UsbPrint("Asdf");
 8002960:	4c05      	ldr	r4, [pc, #20]	; (8002978 <StartDefaultTask+0x18>)
{
 8002962:	b508      	push	{r3, lr}
  MX_USB_DEVICE_Init();
 8002964:	f010 fe62 	bl	801362c <MX_USB_DEVICE_Init>
		UsbPrint("Asdf");
 8002968:	4620      	mov	r0, r4
 800296a:	f7ff ffd1 	bl	8002910 <UsbPrint>
		osDelay(1000);
 800296e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002972:	f00d fdd5 	bl	8010520 <osDelay>
 8002976:	e7f7      	b.n	8002968 <StartDefaultTask+0x8>
 8002978:	08015a50 	.word	0x08015a50

0800297c <SystemClock_Config>:
{
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002980:	224c      	movs	r2, #76	; 0x4c
 8002982:	2100      	movs	r1, #0
 8002984:	a80a      	add	r0, sp, #40	; 0x28
 8002986:	f011 f8ca 	bl	8013b1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800298a:	2220      	movs	r2, #32
 800298c:	2100      	movs	r1, #0
 800298e:	a802      	add	r0, sp, #8
 8002990:	f011 f8c5 	bl	8013b1e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002994:	22bc      	movs	r2, #188	; 0xbc
 8002996:	2100      	movs	r1, #0
 8002998:	a81d      	add	r0, sp, #116	; 0x74
 800299a:	f011 f8c0 	bl	8013b1e <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800299e:	2002      	movs	r0, #2
 80029a0:	f006 fa8a 	bl	8008eb8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80029a4:	2300      	movs	r3, #0
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	4b31      	ldr	r3, [pc, #196]	; (8002a70 <SystemClock_Config+0xf4>)
 80029aa:	699a      	ldr	r2, [r3, #24]
 80029ac:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80029b0:	619a      	str	r2, [r3, #24]
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80029b8:	9201      	str	r2, [sp, #4]
 80029ba:	4a2e      	ldr	r2, [pc, #184]	; (8002a74 <SystemClock_Config+0xf8>)
 80029bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029be:	f041 0101 	orr.w	r1, r1, #1
 80029c2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80029c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029c6:	f002 0201 	and.w	r2, r2, #1
 80029ca:	9201      	str	r2, [sp, #4]
 80029cc:	9a01      	ldr	r2, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80029ce:	699a      	ldr	r2, [r3, #24]
 80029d0:	0490      	lsls	r0, r2, #18
 80029d2:	d5fc      	bpl.n	80029ce <SystemClock_Config+0x52>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80029d4:	4a28      	ldr	r2, [pc, #160]	; (8002a78 <SystemClock_Config+0xfc>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029d6:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029d8:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80029da:	2400      	movs	r4, #0
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80029dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029de:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80029e0:	f023 0303 	bic.w	r3, r3, #3
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLM = 1;
 80029ee:	9615      	str	r6, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80029f0:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029f2:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 120;
 80029f6:	2378      	movs	r3, #120	; 0x78
  RCC_OscInitStruct.PLL.PLLP = 2;
 80029f8:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80029fc:	2314      	movs	r3, #20
  RCC_OscInitStruct.PLL.PLLR = 2;
 80029fe:	e9cd 3518 	strd	r3, r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002a02:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a04:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002a08:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a0c:	f006 fa80 	bl	8008f10 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a10:	223f      	movs	r2, #63	; 0x3f
 8002a12:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a14:	2104      	movs	r1, #4
 8002a16:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a18:	e9cd 2302 	strd	r2, r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8002a1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002a24:	e9cd 3404 	strd	r3, r4, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002a28:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002a2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002a2e:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a32:	f006 fd9d 	bl	8009570 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <SystemClock_Config+0x100>)
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002a38:	21c0      	movs	r1, #192	; 0xc0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a3a:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002a3c:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002a3e:	9430      	str	r4, [sp, #192]	; 0xc0
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002a40:	9445      	str	r4, [sp, #276]	; 0x114
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002a42:	e9cd 361d 	strd	r3, r6, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8002a46:	2313      	movs	r3, #19
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8002a48:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002a52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002a56:	e9cd 5521 	strd	r5, r5, [sp, #132]	; 0x84
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002a5a:	933e      	str	r3, [sp, #248]	; 0xf8
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002a5c:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002a60:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a64:	f007 f80a 	bl	8009a7c <HAL_RCCEx_PeriphCLKConfig>
  HAL_PWREx_EnableUSBVoltageDetector();
 8002a68:	f006 fa4a 	bl	8008f00 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8002a6c:	b04c      	add	sp, #304	; 0x130
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
 8002a70:	58024800 	.word	0x58024800
 8002a74:	58000400 	.word	0x58000400
 8002a78:	58024400 	.word	0x58024400
 8002a7c:	000d3003 	.word	0x000d3003

08002a80 <main>:
{
 8002a80:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002a84:	b0c1      	sub	sp, #260	; 0x104
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a86:	4de6      	ldr	r5, [pc, #920]	; (8002e20 <main+0x3a0>)
  HAL_Init();
 8002a88:	f003 fbb0 	bl	80061ec <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a8c:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8e:	ae39      	add	r6, sp, #228	; 0xe4
  SystemClock_Config();
 8002a90:	f7ff ff74 	bl	800297c <SystemClock_Config>
	init_env(&global_env);
 8002a94:	48e3      	ldr	r0, [pc, #908]	; (8002e24 <main+0x3a4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a96:	2701      	movs	r7, #1
	init_env(&global_env);
 8002a98:	f7fe faa6 	bl	8000fe8 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 8002a9c:	48e2      	ldr	r0, [pc, #904]	; (8002e28 <main+0x3a8>)
 8002a9e:	f7fe fcb1 	bl	8001404 <reset_flight_phase_detection>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa2:	2214      	movs	r2, #20
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4630      	mov	r0, r6
 8002aa8:	f011 f839 	bl	8013b1e <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aac:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2102      	movs	r1, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ab4:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 8002ab8:	48dc      	ldr	r0, [pc, #880]	; (8002e2c <main+0x3ac>)
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002aba:	f04f 0904 	mov.w	r9, #4
  ADC_MultiModeTypeDef multimode = {0};
 8002abe:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ac6:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aca:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ace:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	9303      	str	r3, [sp, #12]
 8002ad8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ada:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002ae6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	9304      	str	r3, [sp, #16]
 8002af0:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002af2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afa:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002afe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	9305      	str	r3, [sp, #20]
 8002b08:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002b16:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	9306      	str	r3, [sp, #24]
 8002b20:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b22:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002b2e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	9307      	str	r3, [sp, #28]
 8002b38:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b3a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002b3e:	f043 0308 	orr.w	r3, r3, #8
 8002b42:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002b46:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	9308      	str	r3, [sp, #32]
 8002b50:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 8002b52:	f005 fcb3 	bl	80084bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, CAMERA1_Pin|CAMERA2_Pin, GPIO_PIN_RESET);
 8002b56:	2200      	movs	r2, #0
 8002b58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002b5c:	48b4      	ldr	r0, [pc, #720]	; (8002e30 <main+0x3b0>)
 8002b5e:	f005 fcad 	bl	80084bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED4_Pin|BUZZER_Pin|LED1_Pin
 8002b62:	2200      	movs	r2, #0
 8002b64:	f643 0103 	movw	r1, #14339	; 0x3803
 8002b68:	48b2      	ldr	r0, [pc, #712]	; (8002e34 <main+0x3b4>)
 8002b6a:	f005 fca7 	bl	80084bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8002b72:	4631      	mov	r1, r6
 8002b74:	48b0      	ldr	r0, [pc, #704]	; (8002e38 <main+0x3b8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	943b      	str	r4, [sp, #236]	; 0xec
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b78:	e9cd 3439 	strd	r3, r4, [sp, #228]	; 0xe4
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8002b7c:	f005 fbae 	bl	80082dc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b80:	2302      	movs	r3, #2
  HAL_GPIO_Init(PW_HOLD_GPIO_Port, &GPIO_InitStruct);
 8002b82:	4631      	mov	r1, r6
 8002b84:	48a9      	ldr	r0, [pc, #676]	; (8002e2c <main+0x3ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b86:	e9cd 3739 	strd	r3, r7, [sp, #228]	; 0xe4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8a:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
  HAL_GPIO_Init(PW_HOLD_GPIO_Port, &GPIO_InitStruct);
 8002b8e:	f005 fba5 	bl	80082dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CAMERA1_Pin|CAMERA2_Pin;
 8002b92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b96:	4631      	mov	r1, r6
 8002b98:	48a5      	ldr	r0, [pc, #660]	; (8002e30 <main+0x3b0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9a:	e9cd 3739 	strd	r3, r7, [sp, #228]	; 0xe4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ba2:	f005 fb9b 	bl	80082dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|BUZZER_Pin|LED1_Pin
 8002ba6:	f643 0303 	movw	r3, #14339	; 0x3803
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002baa:	4631      	mov	r1, r6
 8002bac:	48a1      	ldr	r0, [pc, #644]	; (8002e34 <main+0x3b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bae:	e9cd 3739 	strd	r3, r7, [sp, #228]	; 0xe4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb2:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bb6:	f005 fb91 	bl	80082dc <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bba:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002bbe:	4622      	mov	r2, r4
 8002bc0:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bc2:	f043 0302 	orr.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002bc6:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bc8:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8002bcc:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bd8:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 8002bdc:	433b      	orrs	r3, r7
 8002bde:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8002be2:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  hadc1.Instance = ADC1;
 8002be6:	4d95      	ldr	r5, [pc, #596]	; (8002e3c <main+0x3bc>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002be8:	403b      	ands	r3, r7
 8002bea:	9302      	str	r3, [sp, #8]
 8002bec:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002bee:	f004 f9b3 	bl	8006f58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002bf2:	200b      	movs	r0, #11
 8002bf4:	f004 f9e2 	bl	8006fbc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002bf8:	4622      	mov	r2, r4
 8002bfa:	2105      	movs	r1, #5
 8002bfc:	200c      	movs	r0, #12
 8002bfe:	f004 f9ab 	bl	8006f58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002c02:	200c      	movs	r0, #12
 8002c04:	f004 f9da 	bl	8006fbc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002c08:	4622      	mov	r2, r4
 8002c0a:	2105      	movs	r1, #5
 8002c0c:	200d      	movs	r0, #13
 8002c0e:	f004 f9a3 	bl	8006f58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002c12:	200d      	movs	r0, #13
 8002c14:	f004 f9d2 	bl	8006fbc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002c18:	4622      	mov	r2, r4
 8002c1a:	2105      	movs	r1, #5
 8002c1c:	200e      	movs	r0, #14
 8002c1e:	f004 f99b 	bl	8006f58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002c22:	200e      	movs	r0, #14
 8002c24:	f004 f9ca 	bl	8006fbc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002c28:	4622      	mov	r2, r4
 8002c2a:	2105      	movs	r1, #5
 8002c2c:	200f      	movs	r0, #15
 8002c2e:	f004 f993 	bl	8006f58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002c32:	200f      	movs	r0, #15
 8002c34:	f004 f9c2 	bl	8006fbc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002c38:	4622      	mov	r2, r4
 8002c3a:	2105      	movs	r1, #5
 8002c3c:	2010      	movs	r0, #16
 8002c3e:	f004 f98b 	bl	8006f58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002c42:	2010      	movs	r0, #16
 8002c44:	f004 f9ba 	bl	8006fbc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002c48:	4622      	mov	r2, r4
 8002c4a:	2105      	movs	r1, #5
 8002c4c:	2011      	movs	r0, #17
 8002c4e:	f004 f983 	bl	8006f58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002c52:	2011      	movs	r0, #17
 8002c54:	f004 f9b2 	bl	8006fbc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002c58:	4622      	mov	r2, r4
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	202f      	movs	r0, #47	; 0x2f
 8002c5e:	f004 f97b 	bl	8006f58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002c62:	202f      	movs	r0, #47	; 0x2f
 8002c64:	f004 f9aa 	bl	8006fbc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002c68:	4622      	mov	r2, r4
 8002c6a:	2105      	movs	r1, #5
 8002c6c:	2038      	movs	r0, #56	; 0x38
 8002c6e:	f004 f973 	bl	8006f58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002c72:	2038      	movs	r0, #56	; 0x38
 8002c74:	f004 f9a2 	bl	8006fbc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002c78:	4622      	mov	r2, r4
 8002c7a:	2105      	movs	r1, #5
 8002c7c:	2039      	movs	r0, #57	; 0x39
 8002c7e:	f004 f96b 	bl	8006f58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002c82:	2039      	movs	r0, #57	; 0x39
 8002c84:	f004 f99a 	bl	8006fbc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8002c88:	4622      	mov	r2, r4
 8002c8a:	2105      	movs	r1, #5
 8002c8c:	203c      	movs	r0, #60	; 0x3c
 8002c8e:	f004 f963 	bl	8006f58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002c92:	203c      	movs	r0, #60	; 0x3c
 8002c94:	f004 f992 	bl	8006fbc <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002c98:	4621      	mov	r1, r4
 8002c9a:	221c      	movs	r2, #28
 8002c9c:	4630      	mov	r0, r6
  ADC_MultiModeTypeDef multimode = {0};
 8002c9e:	9437      	str	r4, [sp, #220]	; 0xdc
 8002ca0:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
  ADC_ChannelConfTypeDef sConfig = {0};
 8002ca4:	f010 ff3b 	bl	8013b1e <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002ca8:	4a65      	ldr	r2, [pc, #404]	; (8002e40 <main+0x3c0>)
 8002caa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cae:	4628      	mov	r0, r5
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cb0:	f8c5 9010 	str.w	r9, [r5, #16]
  hadc1.Init.NbrOfConversion = 4;
 8002cb4:	f8c5 9018 	str.w	r9, [r5, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002cb8:	752c      	strb	r4, [r5, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002cba:	756f      	strb	r7, [r5, #21]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cbc:	772c      	strb	r4, [r5, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002cbe:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002cc0:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002cc4:	e9c5 2300 	strd	r2, r3, [r5]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002cc8:	e9c5 4702 	strd	r4, r7, [r5, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ccc:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002cd0:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cd4:	f003 ff7c 	bl	8006bd0 <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002cd8:	4641      	mov	r1, r8
 8002cda:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002cdc:	9435      	str	r4, [sp, #212]	; 0xd4
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002cde:	f004 f88b 	bl	8006df8 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ce2:	2306      	movs	r3, #6
 8002ce4:	4957      	ldr	r1, [pc, #348]	; (8002e44 <main+0x3c4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ce6:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8002ce8:	933b      	str	r3, [sp, #236]	; 0xec
  sConfig.Offset = 0;
 8002cea:	943e      	str	r4, [sp, #248]	; 0xf8
  sConfig.OffsetSignedSaturation = DISABLE;
 8002cec:	f88d 40fd 	strb.w	r4, [sp, #253]	; 0xfd
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cf0:	e9cd 1339 	strd	r1, r3, [sp, #228]	; 0xe4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002cf4:	f240 73ff 	movw	r3, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cf8:	4631      	mov	r1, r6
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002cfa:	e9cd 393c 	strd	r3, r9, [sp, #240]	; 0xf0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cfe:	f003 fb2f 	bl	8006360 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d02:	f04f 090c 	mov.w	r9, #12
 8002d06:	4b50      	ldr	r3, [pc, #320]	; (8002e48 <main+0x3c8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d08:	4631      	mov	r1, r6
 8002d0a:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d0c:	e9cd 3939 	strd	r3, r9, [sp, #228]	; 0xe4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d10:	f003 fb26 	bl	8006360 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002d14:	2312      	movs	r3, #18
 8002d16:	484d      	ldr	r0, [pc, #308]	; (8002e4c <main+0x3cc>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d18:	4631      	mov	r1, r6
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002d1a:	e9cd 0339 	strd	r0, r3, [sp, #228]	; 0xe4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d1e:	4628      	mov	r0, r5
 8002d20:	f003 fb1e 	bl	8006360 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002d24:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8002e74 <main+0x3f4>
 8002d28:	2318      	movs	r3, #24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d2a:	4631      	mov	r1, r6
 8002d2c:	4628      	mov	r0, r5
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d2e:	2507      	movs	r5, #7
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002d30:	e9cd c339 	strd	ip, r3, [sp, #228]	; 0xe4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d34:	f003 fb14 	bl	8006360 <HAL_ADC_ConfigChannel>
  hsd1.Instance = SDMMC1;
 8002d38:	4b45      	ldr	r3, [pc, #276]	; (8002e50 <main+0x3d0>)
 8002d3a:	4a46      	ldr	r2, [pc, #280]	; (8002e54 <main+0x3d4>)
  hspi1.Instance = SPI1;
 8002d3c:	4846      	ldr	r0, [pc, #280]	; (8002e58 <main+0x3d8>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002d3e:	609c      	str	r4, [r3, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d40:	f8c0 a018 	str.w	sl, [r0, #24]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002d44:	e9c3 2400 	strd	r2, r4, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002d48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8002d4c:	e9c3 4705 	strd	r4, r7, [r3, #20]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d50:	e9c3 2403 	strd	r2, r4, [r3, #12]
  hspi1.Instance = SPI1;
 8002d54:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <main+0x3dc>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d56:	e9c0 b502 	strd	fp, r5, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002d5a:	e9c0 3400 	strd	r3, r4, [r0]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d5e:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d62:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCPolynomial = 0x0;
 8002d66:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002d6a:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002d6e:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002d72:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002d76:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002d7a:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d7e:	f008 fc57 	bl	800b630 <HAL_SPI_Init>
  hspi2.Instance = SPI2;
 8002d82:	4837      	ldr	r0, [pc, #220]	; (8002e60 <main+0x3e0>)
 8002d84:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <main+0x3e4>)
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d86:	f8c0 a018 	str.w	sl, [r0, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d8a:	e9c0 b502 	strd	fp, r5, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002d8e:	e9c0 3400 	strd	r3, r4, [r0]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d92:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d96:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi2.Init.CRCPolynomial = 0x0;
 8002d9a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002d9e:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002da2:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002da6:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002daa:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002dae:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002db2:	f008 fc3d 	bl	800b630 <HAL_SPI_Init>
  hspi3.Instance = SPI3;
 8002db6:	482c      	ldr	r0, [pc, #176]	; (8002e68 <main+0x3e8>)
 8002db8:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <main+0x3ec>)
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002dba:	f8c0 a018 	str.w	sl, [r0, #24]
  huart4.Init.BaudRate = 115200;
 8002dbe:	f44f 3ae1 	mov.w	sl, #115200	; 0x1c200
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dc2:	e9c0 b502 	strd	fp, r5, [r0, #8]
  huart4.Instance = UART4;
 8002dc6:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8002e78 <main+0x3f8>
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8002dca:	e9c0 3400 	strd	r3, r4, [r0]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dce:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dd2:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi3.Init.CRCPolynomial = 0x0;
 8002dd6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002dda:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002dde:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002de2:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002de6:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002dea:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002dee:	f008 fc1f 	bl	800b630 <HAL_SPI_Init>
  huart4.Init.BaudRate = 115200;
 8002df2:	4b1f      	ldr	r3, [pc, #124]	; (8002e70 <main+0x3f0>)
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002df4:	4658      	mov	r0, fp
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002df6:	f8cb 4028 	str.w	r4, [fp, #40]	; 0x28
  huart4.Init.BaudRate = 115200;
 8002dfa:	e9cb 3a00 	strd	r3, sl, [fp]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002dfe:	e9cb 4904 	strd	r4, r9, [fp, #16]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002e02:	e9cb 4402 	strd	r4, r4, [fp, #8]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e06:	e9cb 4406 	strd	r4, r4, [fp, #24]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e0a:	e9cb 4408 	strd	r4, r4, [fp, #32]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e0e:	f009 feca 	bl	800cba6 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e12:	4621      	mov	r1, r4
 8002e14:	4658      	mov	r0, fp
 8002e16:	f009 ff48 	bl	800ccaa <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	4658      	mov	r0, fp
 8002e1e:	e02d      	b.n	8002e7c <main+0x3fc>
 8002e20:	58024400 	.word	0x58024400
 8002e24:	24000224 	.word	0x24000224
 8002e28:	24000234 	.word	0x24000234
 8002e2c:	58020400 	.word	0x58020400
 8002e30:	58021000 	.word	0x58021000
 8002e34:	58020c00 	.word	0x58020c00
 8002e38:	58020800 	.word	0x58020800
 8002e3c:	2400e2b8 	.word	0x2400e2b8
 8002e40:	40022000 	.word	0x40022000
 8002e44:	21800100 	.word	0x21800100
 8002e48:	25b00200 	.word	0x25b00200
 8002e4c:	2a000400 	.word	0x2a000400
 8002e50:	2400c0a8 	.word	0x2400c0a8
 8002e54:	52007000 	.word	0x52007000
 8002e58:	2401a834 	.word	0x2401a834
 8002e5c:	40013000 	.word	0x40013000
 8002e60:	24009cdc 	.word	0x24009cdc
 8002e64:	40003800 	.word	0x40003800
 8002e68:	2400e220 	.word	0x2400e220
 8002e6c:	40003c00 	.word	0x40003c00
 8002e70:	40004c00 	.word	0x40004c00
 8002e74:	2e300800 	.word	0x2e300800
 8002e78:	2401a7a4 	.word	0x2401a7a4
 8002e7c:	f009 ff39 	bl	800ccf2 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002e80:	4658      	mov	r0, fp
  huart7.Instance = UART7;
 8002e82:	f8df b3ec 	ldr.w	fp, [pc, #1004]	; 8003270 <main+0x7f0>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002e86:	f009 fef5 	bl	800cc74 <HAL_UARTEx_DisableFifoMode>
  huart7.Instance = UART7;
 8002e8a:	4bcc      	ldr	r3, [pc, #816]	; (80031bc <main+0x73c>)
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002e8c:	4658      	mov	r0, fp
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e8e:	f8cb 4028 	str.w	r4, [fp, #40]	; 0x28
  huart7.Init.BaudRate = 115200;
 8002e92:	e9cb 3a00 	strd	r3, sl, [fp]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002e96:	e9cb 4904 	strd	r4, r9, [fp, #16]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002e9a:	e9cb 4402 	strd	r4, r4, [fp, #8]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e9e:	e9cb 4406 	strd	r4, r4, [fp, #24]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ea2:	e9cb 4408 	strd	r4, r4, [fp, #32]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002ea6:	f009 fe7e 	bl	800cba6 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eaa:	4621      	mov	r1, r4
 8002eac:	4658      	mov	r0, fp
 8002eae:	f009 fefc 	bl	800ccaa <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	4658      	mov	r0, fp
 8002eb6:	f009 ff1c 	bl	800ccf2 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002eba:	4658      	mov	r0, fp
  huart1.Instance = USART1;
 8002ebc:	f8df b3b4 	ldr.w	fp, [pc, #948]	; 8003274 <main+0x7f4>
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002ec0:	f009 fed8 	bl	800cc74 <HAL_UARTEx_DisableFifoMode>
  huart1.Instance = USART1;
 8002ec4:	4bbe      	ldr	r3, [pc, #760]	; (80031c0 <main+0x740>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ec6:	4658      	mov	r0, fp
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ec8:	f8cb 4028 	str.w	r4, [fp, #40]	; 0x28
  huart1.Init.BaudRate = 115200;
 8002ecc:	e9cb 3a00 	strd	r3, sl, [fp]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ed0:	e9cb 4904 	strd	r4, r9, [fp, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ed4:	e9cb 4402 	strd	r4, r4, [fp, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ed8:	e9cb 4406 	strd	r4, r4, [fp, #24]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002edc:	e9cb 4408 	strd	r4, r4, [fp, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ee0:	f009 fe61 	bl	800cba6 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	4658      	mov	r0, fp
 8002ee8:	f009 fedf 	bl	800ccaa <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eec:	4621      	mov	r1, r4
 8002eee:	4658      	mov	r0, fp
 8002ef0:	f009 feff 	bl	800ccf2 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002ef4:	4658      	mov	r0, fp
  huart2.Instance = USART2;
 8002ef6:	f8df b380 	ldr.w	fp, [pc, #896]	; 8003278 <main+0x7f8>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002efa:	f009 febb 	bl	800cc74 <HAL_UARTEx_DisableFifoMode>
  huart2.Instance = USART2;
 8002efe:	4bb1      	ldr	r3, [pc, #708]	; (80031c4 <main+0x744>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f00:	4658      	mov	r0, fp
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f02:	f8cb 4028 	str.w	r4, [fp, #40]	; 0x28
  huart2.Init.BaudRate = 115200;
 8002f06:	e9cb 3a00 	strd	r3, sl, [fp]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f0a:	e9cb 4904 	strd	r4, r9, [fp, #16]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f0e:	e9cb 4402 	strd	r4, r4, [fp, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f12:	e9cb 4406 	strd	r4, r4, [fp, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f16:	e9cb 4408 	strd	r4, r4, [fp, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f1a:	f009 fe44 	bl	800cba6 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f1e:	4621      	mov	r1, r4
 8002f20:	4658      	mov	r0, fp
 8002f22:	f009 fec2 	bl	800ccaa <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f26:	4621      	mov	r1, r4
 8002f28:	4658      	mov	r0, fp
 8002f2a:	f009 fee2 	bl	800ccf2 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002f2e:	4658      	mov	r0, fp
  huart3.Instance = USART3;
 8002f30:	f8df b348 	ldr.w	fp, [pc, #840]	; 800327c <main+0x7fc>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002f34:	f009 fe9e 	bl	800cc74 <HAL_UARTEx_DisableFifoMode>
  huart3.Instance = USART3;
 8002f38:	4ba3      	ldr	r3, [pc, #652]	; (80031c8 <main+0x748>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f3a:	4658      	mov	r0, fp
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f3c:	f8cb 4028 	str.w	r4, [fp, #40]	; 0x28
  huart3.Init.BaudRate = 115200;
 8002f40:	e9cb 3a00 	strd	r3, sl, [fp]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f44:	e9cb 4904 	strd	r4, r9, [fp, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f48:	e9cb 4402 	strd	r4, r4, [fp, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f4c:	e9cb 4406 	strd	r4, r4, [fp, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f50:	e9cb 4408 	strd	r4, r4, [fp, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f54:	f009 fe27 	bl	800cba6 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f58:	4621      	mov	r1, r4
 8002f5a:	4658      	mov	r0, fp
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002f5c:	f04f 5900 	mov.w	r9, #536870912	; 0x20000000
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f60:	f009 fea3 	bl	800ccaa <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f64:	4621      	mov	r1, r4
 8002f66:	4658      	mov	r0, fp
	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 8002f68:	f8df a314 	ldr.w	sl, [pc, #788]	; 8003280 <main+0x800>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f6c:	f009 fec1 	bl	800ccf2 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002f70:	4658      	mov	r0, fp
 8002f72:	f009 fe7f 	bl	800cc74 <HAL_UARTEx_DisableFifoMode>
	command_mutex_only = osMutexNew(&command_mutex_attr);
 8002f76:	f8df b30c 	ldr.w	fp, [pc, #780]	; 8003284 <main+0x804>
  MX_FATFS_Init();
 8002f7a:	f00a ff33 	bl	800dde4 <MX_FATFS_Init>
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002f7e:	f8df e308 	ldr.w	lr, [pc, #776]	; 8003288 <main+0x808>
  hspi4.Instance = SPI4;
 8002f82:	4892      	ldr	r0, [pc, #584]	; (80031cc <main+0x74c>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002f84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f88:	e9c0 e300 	strd	lr, r3, [r0]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f90:	e9c0 9306 	strd	r9, r3, [r0, #24]
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	battery_mutex_only = osMutexNew(&battery_mutex_attr);
 8002f98:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 800328c <main+0x80c>
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f9c:	e9c0 4502 	strd	r4, r5, [r0, #8]
	const osMutexAttr_t sb1_mutex_attr = { "sb1_mutex_only", // human readable mutex name
 8002fa0:	4d8b      	ldr	r5, [pc, #556]	; (80031d0 <main+0x750>)
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002fa2:	e9c0 340d 	strd	r3, r4, [r0, #52]	; 0x34
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fa6:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002faa:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi4.Init.CRCPolynomial = 0x0;
 8002fae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002fb2:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002fb6:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002fba:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002fbe:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002fc2:	f008 fb35 	bl	800b630 <HAL_SPI_Init>
	MX_USB_DEVICE_Init();
 8002fc6:	f010 fb31 	bl	801362c <MX_USB_DEVICE_Init>
	vTraceEnable(TRC_START);
 8002fca:	4638      	mov	r0, r7
 8002fcc:	f002 f94e 	bl	800526c <vTraceEnable>
  osKernelInitialize();
 8002fd0:	f00d f9ee 	bl	80103b0 <osKernelInitialize>
	const osMutexAttr_t sb1_mutex_attr = { "sb1_mutex_only", // human readable mutex name
 8002fd4:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8002fd8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002fdc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 8002fe0:	4660      	mov	r0, ip
 8002fe2:	f00d fadb 	bl	801059c <osMutexNew>
 8002fe6:	4b7b      	ldr	r3, [pc, #492]	; (80031d4 <main+0x754>)
	const osMutexAttr_t sb2_mutex_attr = { "sb2_mutex_only", // human readable mutex name
 8002fe8:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 8002fec:	6018      	str	r0, [r3, #0]
	const osMutexAttr_t sb2_mutex_attr = { "sb2_mutex_only", // human readable mutex name
 8002fee:	f105 0310 	add.w	r3, r5, #16
 8002ff2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ff4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 8002ff8:	4660      	mov	r0, ip
 8002ffa:	f00d facf 	bl	801059c <osMutexNew>
 8002ffe:	4a76      	ldr	r2, [pc, #472]	; (80031d8 <main+0x758>)
	const osMutexAttr_t sb3_mutex_attr = { "sb3_mutex_only", // human readable mutex name
 8003000:	f105 0320 	add.w	r3, r5, #32
 8003004:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 8003008:	6010      	str	r0, [r2, #0]
	const osMutexAttr_t sb3_mutex_attr = { "sb3_mutex_only", // human readable mutex name
 800300a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800300c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 8003010:	4660      	mov	r0, ip
 8003012:	f00d fac3 	bl	801059c <osMutexNew>
 8003016:	4971      	ldr	r1, [pc, #452]	; (80031dc <main+0x75c>)
	const osMutexAttr_t state_est_mutex_attr = { "state_est_mutex_only", // human readable mutex name
 8003018:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800301c:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 8003020:	6008      	str	r0, [r1, #0]
	const osMutexAttr_t state_est_mutex_attr = { "state_est_mutex_only", // human readable mutex name
 8003022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003024:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 8003028:	4660      	mov	r0, ip
 800302a:	f00d fab7 	bl	801059c <osMutexNew>
 800302e:	4b6c      	ldr	r3, [pc, #432]	; (80031e0 <main+0x760>)
	const osMutexAttr_t controller_mutex_attr = { "controller_mutex_only", // human readable mutex name
 8003030:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 8003034:	6018      	str	r0, [r3, #0]
	const osMutexAttr_t controller_mutex_attr = { "controller_mutex_only", // human readable mutex name
 8003036:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800303a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800303c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 8003040:	4660      	mov	r0, ip
 8003042:	f00d faab 	bl	801059c <osMutexNew>
 8003046:	4a67      	ldr	r2, [pc, #412]	; (80031e4 <main+0x764>)
	const osMutexAttr_t fsm_mutex_attr = { "fsm_mutex_only", // human readable mutex name
 8003048:	f105 0350 	add.w	r3, r5, #80	; 0x50
 800304c:	f10d 0c74 	add.w	ip, sp, #116	; 0x74
	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 8003050:	6010      	str	r0, [r2, #0]
	const osMutexAttr_t fsm_mutex_attr = { "fsm_mutex_only", // human readable mutex name
 8003052:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003054:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 8003058:	4660      	mov	r0, ip
 800305a:	f00d fa9f 	bl	801059c <osMutexNew>
 800305e:	4962      	ldr	r1, [pc, #392]	; (80031e8 <main+0x768>)
	const osMutexAttr_t environment_mutex_attr = { "environment_mutex_only", // human readable mutex name
 8003060:	f105 0360 	add.w	r3, r5, #96	; 0x60
 8003064:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 8003068:	6008      	str	r0, [r1, #0]
	const osMutexAttr_t environment_mutex_attr = { "environment_mutex_only", // human readable mutex name
 800306a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800306c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 8003070:	4660      	mov	r0, ip
 8003072:	f00d fa93 	bl	801059c <osMutexNew>
 8003076:	4b5d      	ldr	r3, [pc, #372]	; (80031ec <main+0x76c>)
	const osMutexAttr_t usb_data_mutex_attr = { "usb_data_mutex_only", // human readable mutex name
 8003078:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 800307c:	6018      	str	r0, [r3, #0]
	const osMutexAttr_t usb_data_mutex_attr = { "usb_data_mutex_only", // human readable mutex name
 800307e:	f105 0370 	add.w	r3, r5, #112	; 0x70
 8003082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003084:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8003088:	4660      	mov	r0, ip
 800308a:	f00d fa87 	bl	801059c <osMutexNew>
 800308e:	4a58      	ldr	r2, [pc, #352]	; (80031f0 <main+0x770>)
	const osMutexAttr_t command_mutex_attr = { "command_mutex_only", // human readable mutex name
 8003090:	f105 0380 	add.w	r3, r5, #128	; 0x80
 8003094:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8003098:	6010      	str	r0, [r2, #0]
	const osMutexAttr_t command_mutex_attr = { "command_mutex_only", // human readable mutex name
 800309a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800309c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	command_mutex_only = osMutexNew(&command_mutex_attr);
 80030a0:	4660      	mov	r0, ip
 80030a2:	f00d fa7b 	bl	801059c <osMutexNew>
	const osMutexAttr_t gps_mutex_attr = { "gps_mutex_only", // human readable mutex name
 80030a6:	f105 0390 	add.w	r3, r5, #144	; 0x90
 80030aa:	f10d 0cb4 	add.w	ip, sp, #180	; 0xb4
	command_mutex_only = osMutexNew(&command_mutex_attr);
 80030ae:	f8cb 0000 	str.w	r0, [fp]
	const osMutexAttr_t gps_mutex_attr = { "gps_mutex_only", // human readable mutex name
 80030b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 80030b8:	4660      	mov	r0, ip
 80030ba:	f00d fa6f 	bl	801059c <osMutexNew>
	const osMutexAttr_t battery_mutex_attr = { "battery_mutex_only", // human readable mutex name
 80030be:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
 80030c2:	f10d 0cc4 	add.w	ip, sp, #196	; 0xc4
	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 80030c6:	f8ca 0000 	str.w	r0, [sl]
	const osMutexAttr_t battery_mutex_attr = { "battery_mutex_only", // human readable mutex name
 80030ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	battery_mutex_only = osMutexNew(&battery_mutex_attr);
 80030d0:	4660      	mov	r0, ip
 80030d2:	f00d fa63 	bl	801059c <osMutexNew>
	const osMutexAttr_t motor_mutex_attr = { "motor_mutex_only", // human readable mutex name
 80030d6:	f105 03b0 	add.w	r3, r5, #176	; 0xb0
	battery_mutex_only = osMutexNew(&battery_mutex_attr);
 80030da:	f8c9 0000 	str.w	r0, [r9]
	const osMutexAttr_t print_mutex_attr = { "print_mutex", // human readable mutex name
 80030de:	35c0      	adds	r5, #192	; 0xc0
	const osMutexAttr_t motor_mutex_attr = { "motor_mutex_only", // human readable mutex name
 80030e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030e2:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
	motor_mutex_only = osMutexNew(&motor_mutex_attr);
 80030e6:	4640      	mov	r0, r8
 80030e8:	f00d fa58 	bl	801059c <osMutexNew>
 80030ec:	4b41      	ldr	r3, [pc, #260]	; (80031f4 <main+0x774>)
	sb3_mutex.mutex = sb3_mutex_only;
 80030ee:	493b      	ldr	r1, [pc, #236]	; (80031dc <main+0x75c>)
	motor_mutex_only = osMutexNew(&motor_mutex_attr);
 80030f0:	6018      	str	r0, [r3, #0]
	sb1_mutex.mutex = sb1_mutex_only;
 80030f2:	4b38      	ldr	r3, [pc, #224]	; (80031d4 <main+0x754>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4b40      	ldr	r3, [pc, #256]	; (80031f8 <main+0x778>)
 80030f8:	601a      	str	r2, [r3, #0]
	sb2_mutex.mutex = sb2_mutex_only;
 80030fa:	4a37      	ldr	r2, [pc, #220]	; (80031d8 <main+0x758>)
 80030fc:	4b3f      	ldr	r3, [pc, #252]	; (80031fc <main+0x77c>)
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	601a      	str	r2, [r3, #0]
	sb3_mutex.mutex = sb3_mutex_only;
 8003102:	680a      	ldr	r2, [r1, #0]
 8003104:	4b3e      	ldr	r3, [pc, #248]	; (8003200 <main+0x780>)
	fsm_mutex.mutex = fsm_mutex_only;
 8003106:	4938      	ldr	r1, [pc, #224]	; (80031e8 <main+0x768>)
	sb3_mutex.mutex = sb3_mutex_only;
 8003108:	601a      	str	r2, [r3, #0]
	env_mutex.mutex = environment_mutex_only;
 800310a:	4b38      	ldr	r3, [pc, #224]	; (80031ec <main+0x76c>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <main+0x784>)
 8003110:	601a      	str	r2, [r3, #0]
	fsm_mutex.mutex = fsm_mutex_only;
 8003112:	680a      	ldr	r2, [r1, #0]
 8003114:	4b3c      	ldr	r3, [pc, #240]	; (8003208 <main+0x788>)
 8003116:	601a      	str	r2, [r3, #0]
	controller_mutex.mutex = controller_mutex_only;
 8003118:	4a32      	ldr	r2, [pc, #200]	; (80031e4 <main+0x764>)
 800311a:	4b3c      	ldr	r3, [pc, #240]	; (800320c <main+0x78c>)
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	601a      	str	r2, [r3, #0]
	state_est_mutex.mutex = state_est_mutex_only;
 8003120:	4b2f      	ldr	r3, [pc, #188]	; (80031e0 <main+0x760>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4b3a      	ldr	r3, [pc, #232]	; (8003210 <main+0x790>)
 8003126:	601a      	str	r2, [r3, #0]
	usb_data_mutex.mutex = usb_data_mutex_only;
 8003128:	4a31      	ldr	r2, [pc, #196]	; (80031f0 <main+0x770>)
 800312a:	4b3a      	ldr	r3, [pc, #232]	; (8003214 <main+0x794>)
 800312c:	6812      	ldr	r2, [r2, #0]
 800312e:	601a      	str	r2, [r3, #0]
	command_mutex.mutex = command_mutex_only;
 8003130:	f8db 2000 	ldr.w	r2, [fp]
 8003134:	4b38      	ldr	r3, [pc, #224]	; (8003218 <main+0x798>)
 8003136:	601a      	str	r2, [r3, #0]
	gps_mutex.mutex = gps_mutex_only;
 8003138:	f8da 2000 	ldr.w	r2, [sl]
 800313c:	4b37      	ldr	r3, [pc, #220]	; (800321c <main+0x79c>)
 800313e:	601a      	str	r2, [r3, #0]
	battery_mutex.mutex = battery_mutex_only;
 8003140:	f8d9 2000 	ldr.w	r2, [r9]
 8003144:	4b36      	ldr	r3, [pc, #216]	; (8003220 <main+0x7a0>)
 8003146:	601a      	str	r2, [r3, #0]
	global_telemetry_command = IDLE_COMMAND;
 8003148:	229b      	movs	r2, #155	; 0x9b
	motor_mutex.mutex = motor_mutex_only;
 800314a:	4b36      	ldr	r3, [pc, #216]	; (8003224 <main+0x7a4>)
 800314c:	6018      	str	r0, [r3, #0]
	global_flight_phase_detection.flight_phase = IDLE;
 800314e:	4b36      	ldr	r3, [pc, #216]	; (8003228 <main+0x7a8>)
 8003150:	701f      	strb	r7, [r3, #0]
	global_flight_phase_detection.mach_regime = SUBSONIC;
 8003152:	705f      	strb	r7, [r3, #1]
	global_telemetry_command = IDLE_COMMAND;
 8003154:	4b35      	ldr	r3, [pc, #212]	; (800322c <main+0x7ac>)
 8003156:	701a      	strb	r2, [r3, #0]
	const osMutexAttr_t print_mutex_attr = { "print_mutex", // human readable mutex name
 8003158:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800315c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	print_mutex = osMutexNew(&print_mutex_attr);
 8003160:	4630      	mov	r0, r6
 8003162:	f00d fa1b 	bl	801059c <osMutexNew>
 8003166:	4b32      	ldr	r3, [pc, #200]	; (8003230 <main+0x7b0>)
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8003168:	4622      	mov	r2, r4
 800316a:	2196      	movs	r1, #150	; 0x96
	print_mutex = osMutexNew(&print_mutex_attr);
 800316c:	6018      	str	r0, [r3, #0]
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 800316e:	2080      	movs	r0, #128	; 0x80
 8003170:	f00d fb9a 	bl	80108a8 <osMessageQueueNew>
 8003174:	4b2f      	ldr	r3, [pc, #188]	; (8003234 <main+0x7b4>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003176:	4a30      	ldr	r2, [pc, #192]	; (8003238 <main+0x7b8>)
 8003178:	4621      	mov	r1, r4
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 800317a:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800317c:	482f      	ldr	r0, [pc, #188]	; (800323c <main+0x7bc>)
 800317e:	f00d f979 	bl	8010474 <osThreadNew>
 8003182:	4b2f      	ldr	r3, [pc, #188]	; (8003240 <main+0x7c0>)
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8003184:	4a2f      	ldr	r2, [pc, #188]	; (8003244 <main+0x7c4>)
 8003186:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003188:	6018      	str	r0, [r3, #0]
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 800318a:	482f      	ldr	r0, [pc, #188]	; (8003248 <main+0x7c8>)
 800318c:	f00d f972 	bl	8010474 <osThreadNew>
 8003190:	4b2e      	ldr	r3, [pc, #184]	; (800324c <main+0x7cc>)
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 8003192:	4a2f      	ldr	r2, [pc, #188]	; (8003250 <main+0x7d0>)
 8003194:	4621      	mov	r1, r4
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8003196:	6018      	str	r0, [r3, #0]
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 8003198:	482e      	ldr	r0, [pc, #184]	; (8003254 <main+0x7d4>)
 800319a:	f00d f96b 	bl	8010474 <osThreadNew>
 800319e:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <main+0x7d8>)
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 80031a0:	4a2e      	ldr	r2, [pc, #184]	; (800325c <main+0x7dc>)
 80031a2:	4621      	mov	r1, r4
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 80031a4:	6018      	str	r0, [r3, #0]
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 80031a6:	482e      	ldr	r0, [pc, #184]	; (8003260 <main+0x7e0>)
 80031a8:	f00d f964 	bl	8010474 <osThreadNew>
 80031ac:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <main+0x7e4>)
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 80031ae:	4a2e      	ldr	r2, [pc, #184]	; (8003268 <main+0x7e8>)
 80031b0:	4621      	mov	r1, r4
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 80031b2:	6018      	str	r0, [r3, #0]
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 80031b4:	482d      	ldr	r0, [pc, #180]	; (800326c <main+0x7ec>)
 80031b6:	f00d f95d 	bl	8010474 <osThreadNew>
 80031ba:	e069      	b.n	8003290 <main+0x810>
 80031bc:	40007800 	.word	0x40007800
 80031c0:	40011000 	.word	0x40011000
 80031c4:	40004400 	.word	0x40004400
 80031c8:	40004800 	.word	0x40004800
 80031cc:	24012598 	.word	0x24012598
 80031d0:	080158ac 	.word	0x080158ac
 80031d4:	2401269c 	.word	0x2401269c
 80031d8:	2401c8c0 	.word	0x2401c8c0
 80031dc:	2400c18c 	.word	0x2400c18c
 80031e0:	24012584 	.word	0x24012584
 80031e4:	2401eaec 	.word	0x2401eaec
 80031e8:	24012698 	.word	0x24012698
 80031ec:	2401258c 	.word	0x2401258c
 80031f0:	2400c128 	.word	0x2400c128
 80031f4:	240146a0 	.word	0x240146a0
 80031f8:	24010414 	.word	0x24010414
 80031fc:	2401eb70 	.word	0x2401eb70
 8003200:	24012590 	.word	0x24012590
 8003204:	2400c214 	.word	0x2400c214
 8003208:	24009cd4 	.word	0x24009cd4
 800320c:	2400e2a8 	.word	0x2400e2a8
 8003210:	240166a8 	.word	0x240166a8
 8003214:	2400bfc8 	.word	0x2400bfc8
 8003218:	2400c20c 	.word	0x2400c20c
 800321c:	2401a73c 	.word	0x2401a73c
 8003220:	24009d64 	.word	0x24009d64
 8003224:	24009e70 	.word	0x24009e70
 8003228:	24000234 	.word	0x24000234
 800322c:	240166d4 	.word	0x240166d4
 8003230:	24009bd8 	.word	0x24009bd8
 8003234:	2401a8bc 	.word	0x2401a8bc
 8003238:	08015a58 	.word	0x08015a58
 800323c:	08002961 	.word	0x08002961
 8003240:	24009c58 	.word	0x24009c58
 8003244:	08015d14 	.word	0x08015d14
 8003248:	08004c11 	.word	0x08004c11
 800324c:	2400e398 	.word	0x2400e398
 8003250:	08015c18 	.word	0x08015c18
 8003254:	08003f4d 	.word	0x08003f4d
 8003258:	2401eb6c 	.word	0x2401eb6c
 800325c:	08015cf0 	.word	0x08015cf0
 8003260:	08004a85 	.word	0x08004a85
 8003264:	2400c21c 	.word	0x2400c21c
 8003268:	08015ccc 	.word	0x08015ccc
 800326c:	080046dd 	.word	0x080046dd
 8003270:	24009d6c 	.word	0x24009d6c
 8003274:	24010480 	.word	0x24010480
 8003278:	2401c924 	.word	0x2401c924
 800327c:	24009e78 	.word	0x24009e78
 8003280:	240166a4 	.word	0x240166a4
 8003284:	2400c208 	.word	0x2400c208
 8003288:	40013400 	.word	0x40013400
 800328c:	24012588 	.word	0x24012588
 8003290:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <main+0x870>)
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 8003292:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <main+0x874>)
 8003294:	4621      	mov	r1, r4
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 8003296:	6018      	str	r0, [r3, #0]
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 8003298:	4817      	ldr	r0, [pc, #92]	; (80032f8 <main+0x878>)
 800329a:	f00d f8eb 	bl	8010474 <osThreadNew>
 800329e:	4b17      	ldr	r3, [pc, #92]	; (80032fc <main+0x87c>)
  task_fsmHandle = osThreadNew(vTaskFsm, NULL, &task_fsm_attributes);
 80032a0:	4a17      	ldr	r2, [pc, #92]	; (8003300 <main+0x880>)
 80032a2:	4621      	mov	r1, r4
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 80032a4:	6018      	str	r0, [r3, #0]
  task_fsmHandle = osThreadNew(vTaskFsm, NULL, &task_fsm_attributes);
 80032a6:	4817      	ldr	r0, [pc, #92]	; (8003304 <main+0x884>)
 80032a8:	f00d f8e4 	bl	8010474 <osThreadNew>
 80032ac:	4b16      	ldr	r3, [pc, #88]	; (8003308 <main+0x888>)
  task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 80032ae:	4a17      	ldr	r2, [pc, #92]	; (800330c <main+0x88c>)
 80032b0:	4621      	mov	r1, r4
  task_fsmHandle = osThreadNew(vTaskFsm, NULL, &task_fsm_attributes);
 80032b2:	6018      	str	r0, [r3, #0]
  task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 80032b4:	4816      	ldr	r0, [pc, #88]	; (8003310 <main+0x890>)
 80032b6:	f00d f8dd 	bl	8010474 <osThreadNew>
 80032ba:	4b16      	ldr	r3, [pc, #88]	; (8003314 <main+0x894>)
  task_batteryHandle = osThreadNew(vTaskBattery, NULL, &task_battery_attributes);
 80032bc:	4a16      	ldr	r2, [pc, #88]	; (8003318 <main+0x898>)
 80032be:	4621      	mov	r1, r4
  task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 80032c0:	6018      	str	r0, [r3, #0]
  task_batteryHandle = osThreadNew(vTaskBattery, NULL, &task_battery_attributes);
 80032c2:	4816      	ldr	r0, [pc, #88]	; (800331c <main+0x89c>)
 80032c4:	f00d f8d6 	bl	8010474 <osThreadNew>
 80032c8:	4b15      	ldr	r3, [pc, #84]	; (8003320 <main+0x8a0>)
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 80032ca:	4a16      	ldr	r2, [pc, #88]	; (8003324 <main+0x8a4>)
 80032cc:	4621      	mov	r1, r4
  task_batteryHandle = osThreadNew(vTaskBattery, NULL, &task_battery_attributes);
 80032ce:	6018      	str	r0, [r3, #0]
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 80032d0:	4815      	ldr	r0, [pc, #84]	; (8003328 <main+0x8a8>)
 80032d2:	f00d f8cf 	bl	8010474 <osThreadNew>
 80032d6:	4b15      	ldr	r3, [pc, #84]	; (800332c <main+0x8ac>)
  task_peripheralsHandle = osThreadNew(vTaskPeripherals, NULL, &task_peripherals_attributes);
 80032d8:	4a15      	ldr	r2, [pc, #84]	; (8003330 <main+0x8b0>)
 80032da:	4621      	mov	r1, r4
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 80032dc:	6018      	str	r0, [r3, #0]
  task_peripheralsHandle = osThreadNew(vTaskPeripherals, NULL, &task_peripherals_attributes);
 80032de:	4815      	ldr	r0, [pc, #84]	; (8003334 <main+0x8b4>)
 80032e0:	f00d f8c8 	bl	8010474 <osThreadNew>
 80032e4:	4b14      	ldr	r3, [pc, #80]	; (8003338 <main+0x8b8>)
 80032e6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80032e8:	f00d f88c 	bl	8010404 <osKernelStart>
 80032ec:	e7fe      	b.n	80032ec <main+0x86c>
 80032ee:	bf00      	nop
 80032f0:	24009f64 	.word	0x24009f64
 80032f4:	08015c84 	.word	0x08015c84
 80032f8:	08004391 	.word	0x08004391
 80032fc:	2400e394 	.word	0x2400e394
 8003300:	08015c3c 	.word	0x08015c3c
 8003304:	08004051 	.word	0x08004051
 8003308:	2401eb68 	.word	0x2401eb68
 800330c:	08015c60 	.word	0x08015c60
 8003310:	08004141 	.word	0x08004141
 8003314:	24009bdc 	.word	0x24009bdc
 8003318:	08015bf4 	.word	0x08015bf4
 800331c:	08003d39 	.word	0x08003d39
 8003320:	2401ea88 	.word	0x2401ea88
 8003324:	08015d38 	.word	0x08015d38
 8003328:	08004f59 	.word	0x08004f59
 800332c:	2401a738 	.word	0x2401a738
 8003330:	08015ca8 	.word	0x08015ca8
 8003334:	0800452d 	.word	0x0800452d
 8003338:	2401041c 	.word	0x2401041c

0800333c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800333c:	6802      	ldr	r2, [r0, #0]
 800333e:	4b03      	ldr	r3, [pc, #12]	; (800334c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003340:	429a      	cmp	r2, r3
 8003342:	d101      	bne.n	8003348 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003344:	f002 bf80 	b.w	8006248 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40010000 	.word	0x40010000

08003350 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003350:	4770      	bx	lr
	...

08003354 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003354:	4b07      	ldr	r3, [pc, #28]	; (8003374 <HAL_MspInit+0x20>)
{
 8003356:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003358:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800335c:	f042 0202 	orr.w	r2, r2, #2
 8003360:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003364:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	9301      	str	r3, [sp, #4]
 800336e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003370:	b002      	add	sp, #8
 8003372:	4770      	bx	lr
 8003374:	58024400 	.word	0x58024400

08003378 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003378:	b570      	push	{r4, r5, r6, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337e:	2214      	movs	r2, #20
 8003380:	2100      	movs	r1, #0
 8003382:	a803      	add	r0, sp, #12
 8003384:	f010 fbcb 	bl	8013b1e <memset>
  if(hadc->Instance==ADC1)
 8003388:	6832      	ldr	r2, [r6, #0]
 800338a:	4b2c      	ldr	r3, [pc, #176]	; (800343c <HAL_ADC_MspInit+0xc4>)
 800338c:	429a      	cmp	r2, r3
 800338e:	d152      	bne.n	8003436 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003390:	4b2b      	ldr	r3, [pc, #172]	; (8003440 <HAL_ADC_MspInit+0xc8>)
    PC1     ------> ADC1_INP11
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = VSENS3V3_Pin|VSENSBAT_Pin|CURRBAT1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003392:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003394:	a903      	add	r1, sp, #12
 8003396:	482b      	ldr	r0, [pc, #172]	; (8003444 <HAL_ADC_MspInit+0xcc>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003398:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8

    GPIO_InitStruct.Pin = CURRBAT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2500      	movs	r5, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 800339e:	f042 0220 	orr.w	r2, r2, #32
 80033a2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80033a6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80033aa:	f002 0220 	and.w	r2, r2, #32
 80033ae:	9200      	str	r2, [sp, #0]
 80033b0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80033b6:	f042 0204 	orr.w	r2, r2, #4
 80033ba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80033be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80033c2:	f002 0204 	and.w	r2, r2, #4
 80033c6:	9201      	str	r2, [sp, #4]
 80033c8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80033ce:	f042 0202 	orr.w	r2, r2, #2
 80033d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80033d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	9302      	str	r3, [sp, #8]
 80033e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033e2:	2323      	movs	r3, #35	; 0x23
 80033e4:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e8:	f004 ff78 	bl	80082dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CURRBAT2_Pin;
 80033ec:	2301      	movs	r3, #1
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 80033ee:	a903      	add	r1, sp, #12
 80033f0:	4815      	ldr	r0, [pc, #84]	; (8003448 <HAL_ADC_MspInit+0xd0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033f4:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 80033f8:	f004 ff70 	bl	80082dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80033fc:	4c13      	ldr	r4, [pc, #76]	; (800344c <HAL_ADC_MspInit+0xd4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80033fe:	2309      	movs	r3, #9
 8003400:	4a13      	ldr	r2, [pc, #76]	; (8003450 <HAL_ADC_MspInit+0xd8>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003402:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003406:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800340a:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800340e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003412:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800341a:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800341e:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003420:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003424:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003428:	f003 ff66 	bl	80072f8 <HAL_DMA_Init>
 800342c:	b108      	cbz	r0, 8003432 <HAL_ADC_MspInit+0xba>
    {
      Error_Handler();
 800342e:	f7ff ff8f 	bl	8003350 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003432:	64f4      	str	r4, [r6, #76]	; 0x4c
 8003434:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003436:	b008      	add	sp, #32
 8003438:	bd70      	pop	{r4, r5, r6, pc}
 800343a:	bf00      	nop
 800343c:	40022000 	.word	0x40022000
 8003440:	58024400 	.word	0x58024400
 8003444:	58020800 	.word	0x58020800
 8003448:	58020400 	.word	0x58020400
 800344c:	24012620 	.word	0x24012620
 8003450:	40020470 	.word	0x40020470

08003454 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345a:	2214      	movs	r2, #20
 800345c:	2100      	movs	r1, #0
 800345e:	a803      	add	r0, sp, #12
 8003460:	f010 fb5d 	bl	8013b1e <memset>
  if(hsd->Instance==SDMMC1)
 8003464:	6822      	ldr	r2, [r4, #0]
 8003466:	4b26      	ldr	r3, [pc, #152]	; (8003500 <HAL_SD_MspInit+0xac>)
 8003468:	429a      	cmp	r2, r3
 800346a:	d146      	bne.n	80034fa <HAL_SD_MspInit+0xa6>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <HAL_SD_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800346e:	250c      	movs	r5, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003470:	2402      	movs	r4, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003472:	2603      	movs	r6, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003474:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003478:	eb0d 0105 	add.w	r1, sp, r5
 800347c:	4822      	ldr	r0, [pc, #136]	; (8003508 <HAL_SD_MspInit+0xb4>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800347e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003482:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003486:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800348a:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800348e:	9200      	str	r2, [sp, #0]
 8003490:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003492:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003496:	f042 0204 	orr.w	r2, r2, #4
 800349a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800349e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034a2:	f002 0204 	and.w	r2, r2, #4
 80034a6:	9201      	str	r2, [sp, #4]
 80034a8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034ae:	f042 0208 	orr.w	r2, r2, #8
 80034b2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80034b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	9302      	str	r3, [sp, #8]
 80034c0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80034c6:	e9cd 6506 	strd	r6, r5, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ca:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ce:	f004 ff05 	bl	80082dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034d2:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034d4:	eb0d 0105 	add.w	r1, sp, r5
 80034d8:	480c      	ldr	r0, [pc, #48]	; (800350c <HAL_SD_MspInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80034da:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034dc:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e2:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034e6:	f004 fef9 	bl	80082dc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80034ea:	2031      	movs	r0, #49	; 0x31
 80034ec:	4622      	mov	r2, r4
 80034ee:	2105      	movs	r1, #5
 80034f0:	f003 fd32 	bl	8006f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80034f4:	2031      	movs	r0, #49	; 0x31
 80034f6:	f003 fd61 	bl	8006fbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80034fa:	b008      	add	sp, #32
 80034fc:	bd70      	pop	{r4, r5, r6, pc}
 80034fe:	bf00      	nop
 8003500:	52007000 	.word	0x52007000
 8003504:	58024400 	.word	0x58024400
 8003508:	58020800 	.word	0x58020800
 800350c:	58020c00 	.word	0x58020c00

08003510 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003514:	b08e      	sub	sp, #56	; 0x38
 8003516:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003518:	2214      	movs	r2, #20
 800351a:	2100      	movs	r1, #0
 800351c:	a809      	add	r0, sp, #36	; 0x24
 800351e:	f010 fafe 	bl	8013b1e <memset>
  if(hspi->Instance==SPI1)
 8003522:	682b      	ldr	r3, [r5, #0]
 8003524:	4abb      	ldr	r2, [pc, #748]	; (8003814 <HAL_SPI_MspInit+0x304>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d155      	bne.n	80035d6 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800352a:	4bbb      	ldr	r3, [pc, #748]	; (8003818 <HAL_SPI_MspInit+0x308>)
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15 (JTDI)     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800352e:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003530:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003532:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003536:	48b9      	ldr	r0, [pc, #740]	; (800381c <HAL_SPI_MspInit+0x30c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003538:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800353c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003540:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003544:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003548:	9200      	str	r2, [sp, #0]
 800354a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800354c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	9301      	str	r3, [sp, #4]
 8003562:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003564:	23a0      	movs	r3, #160	; 0xa0
 8003566:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800356a:	2301      	movs	r3, #1
 800356c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003570:	f004 feb4 	bl	80082dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003574:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003578:	48a8      	ldr	r0, [pc, #672]	; (800381c <HAL_SPI_MspInit+0x30c>)
 800357a:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800357c:	940d      	str	r4, [sp, #52]	; 0x34

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 800357e:	4ca8      	ldr	r4, [pc, #672]	; (8003820 <HAL_SPI_MspInit+0x310>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003580:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003584:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003586:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358a:	f004 fea7 	bl	80082dc <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800358e:	2325      	movs	r3, #37	; 0x25
 8003590:	f8df e2c0 	ldr.w	lr, [pc, #704]	; 8003854 <HAL_SPI_MspInit+0x344>
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003594:	4620      	mov	r0, r4
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003596:	61a6      	str	r6, [r4, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003598:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800359a:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800359e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035a2:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80035a6:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035aa:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035ae:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80035b2:	f003 fea1 	bl	80072f8 <HAL_DMA_Init>
 80035b6:	b108      	cbz	r0, 80035bc <HAL_SPI_MspInit+0xac>
    {
      Error_Handler();
 80035b8:	f7ff feca 	bl	8003350 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80035bc:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80035be:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80035c0:	2200      	movs	r2, #0
 80035c2:	2105      	movs	r1, #5
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80035c4:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80035c6:	f003 fcc7 	bl	8006f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80035ca:	2023      	movs	r0, #35	; 0x23

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80035cc:	f003 fcf6 	bl	8006fbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80035d0:	b00e      	add	sp, #56	; 0x38
 80035d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(hspi->Instance==SPI2)
 80035d6:	4a93      	ldr	r2, [pc, #588]	; (8003824 <HAL_SPI_MspInit+0x314>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d151      	bne.n	8003680 <HAL_SPI_MspInit+0x170>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035dc:	4b8e      	ldr	r3, [pc, #568]	; (8003818 <HAL_SPI_MspInit+0x308>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035de:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035e0:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e2:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035e4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e8:	488f      	ldr	r0, [pc, #572]	; (8003828 <HAL_SPI_MspInit+0x318>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035ee:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80035f2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80035f6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80035fa:	9202      	str	r2, [sp, #8]
 80035fc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003602:	f042 0202 	orr.w	r2, r2, #2
 8003606:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800360a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800360e:	940d      	str	r4, [sp, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	9303      	str	r3, [sp, #12]
 8003616:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800361c:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003620:	f004 fe5c 	bl	80082dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003624:	f44f 4320 	mov.w	r3, #40960	; 0xa000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003628:	487f      	ldr	r0, [pc, #508]	; (8003828 <HAL_SPI_MspInit+0x318>)
 800362a:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800362c:	940d      	str	r4, [sp, #52]	; 0x34
    hdma_spi2_rx.Instance = DMA1_Stream1;
 800362e:	4c7f      	ldr	r4, [pc, #508]	; (800382c <HAL_SPI_MspInit+0x31c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003630:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003634:	2600      	movs	r6, #0
 8003636:	2303      	movs	r3, #3
 8003638:	e9cd 630b 	strd	r6, r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800363c:	f004 fe4e 	bl	80082dc <HAL_GPIO_Init>
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8003640:	2327      	movs	r3, #39	; 0x27
 8003642:	f8df c214 	ldr.w	ip, [pc, #532]	; 8003858 <HAL_SPI_MspInit+0x348>
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003646:	4620      	mov	r0, r4
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003648:	61a6      	str	r6, [r4, #24]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800364a:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800364c:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003650:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003654:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8003658:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800365c:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003660:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003664:	f003 fe48 	bl	80072f8 <HAL_DMA_Init>
 8003668:	b108      	cbz	r0, 800366e <HAL_SPI_MspInit+0x15e>
      Error_Handler();
 800366a:	f7ff fe71 	bl	8003350 <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800366e:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003670:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8003672:	2200      	movs	r2, #0
 8003674:	2105      	movs	r1, #5
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003676:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8003678:	f003 fc6e 	bl	8006f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800367c:	2024      	movs	r0, #36	; 0x24
 800367e:	e7a5      	b.n	80035cc <HAL_SPI_MspInit+0xbc>
  else if(hspi->Instance==SPI3)
 8003680:	4a6b      	ldr	r2, [pc, #428]	; (8003830 <HAL_SPI_MspInit+0x320>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d166      	bne.n	8003754 <HAL_SPI_MspInit+0x244>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003686:	4b64      	ldr	r3, [pc, #400]	; (8003818 <HAL_SPI_MspInit+0x308>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003688:	2402      	movs	r4, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800368a:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368c:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI3_CLK_ENABLE();
 800368e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003692:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003694:	4861      	ldr	r0, [pc, #388]	; (800381c <HAL_SPI_MspInit+0x30c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003696:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_SPI3_CLK_ENABLE();
 800369a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800369e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80036a2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80036a6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80036aa:	9204      	str	r2, [sp, #16]
 80036ac:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80036ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80036be:	f002 0201 	and.w	r2, r2, #1
 80036c2:	9205      	str	r2, [sp, #20]
 80036c4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80036ca:	f042 0202 	orr.w	r2, r2, #2
 80036ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80036d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80036d6:	970d      	str	r7, [sp, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	9306      	str	r3, [sp, #24]
 80036de:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e0:	2310      	movs	r3, #16
 80036e2:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e6:	f004 fdf9 	bl	80082dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036ea:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ec:	a909      	add	r1, sp, #36	; 0x24
 80036ee:	484e      	ldr	r0, [pc, #312]	; (8003828 <HAL_SPI_MspInit+0x318>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80036f4:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80036f6:	e9cd 680b 	strd	r6, r8, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80036fa:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fc:	f004 fdee 	bl	80082dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003700:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003702:	4849      	ldr	r0, [pc, #292]	; (8003828 <HAL_SPI_MspInit+0x318>)
 8003704:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003706:	970d      	str	r7, [sp, #52]	; 0x34
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8003708:	4f4a      	ldr	r7, [pc, #296]	; (8003834 <HAL_SPI_MspInit+0x324>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370a:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800370e:	e9cd 680b 	strd	r6, r8, [sp, #44]	; 0x2c
    hdma_spi3_rx.Instance = DMA1_Stream2;
 8003712:	4c49      	ldr	r4, [pc, #292]	; (8003838 <HAL_SPI_MspInit+0x328>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003714:	f004 fde2 	bl	80082dc <HAL_GPIO_Init>
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8003718:	233d      	movs	r3, #61	; 0x3d
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800371a:	4620      	mov	r0, r4
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800371c:	61a6      	str	r6, [r4, #24]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800371e:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8003720:	e9c4 7300 	strd	r7, r3, [r4]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003724:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003728:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 800372c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003730:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003734:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003738:	f003 fdde 	bl	80072f8 <HAL_DMA_Init>
 800373c:	b108      	cbz	r0, 8003742 <HAL_SPI_MspInit+0x232>
      Error_Handler();
 800373e:	f7ff fe07 	bl	8003350 <Error_Handler>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8003742:	2033      	movs	r0, #51	; 0x33
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8003744:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8003746:	2200      	movs	r2, #0
 8003748:	2105      	movs	r1, #5
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 800374a:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800374c:	f003 fc04 	bl	8006f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003750:	2033      	movs	r0, #51	; 0x33
 8003752:	e73b      	b.n	80035cc <HAL_SPI_MspInit+0xbc>
  else if(hspi->Instance==SPI4)
 8003754:	4a39      	ldr	r2, [pc, #228]	; (800383c <HAL_SPI_MspInit+0x32c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	f47f af3a 	bne.w	80035d0 <HAL_SPI_MspInit+0xc0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800375c:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <HAL_SPI_MspInit+0x308>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375e:	2074      	movs	r0, #116	; 0x74
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003760:	a909      	add	r1, sp, #36	; 0x24
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8003762:	4c37      	ldr	r4, [pc, #220]	; (8003840 <HAL_SPI_MspInit+0x330>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003764:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8003768:	4e36      	ldr	r6, [pc, #216]	; (8003844 <HAL_SPI_MspInit+0x334>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 800376a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800376e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003772:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003776:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800377a:	9207      	str	r2, [sp, #28]
 800377c:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800377e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003782:	f042 0210 	orr.w	r2, r2, #16
 8003786:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800378a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800378e:	f003 0310 	and.w	r3, r3, #16
 8003792:	9308      	str	r3, [sp, #32]
 8003794:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800379c:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800379e:	482a      	ldr	r0, [pc, #168]	; (8003848 <HAL_SPI_MspInit+0x338>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80037a0:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037a2:	f004 fd9b 	bl	80082dc <HAL_GPIO_Init>
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80037a6:	2353      	movs	r3, #83	; 0x53
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80037ac:	4620      	mov	r0, r4
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80037ae:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037b2:	2300      	movs	r3, #0
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037b4:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037b8:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80037bc:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037c0:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80037c4:	f003 fd98 	bl	80072f8 <HAL_DMA_Init>
 80037c8:	b108      	cbz	r0, 80037ce <HAL_SPI_MspInit+0x2be>
      Error_Handler();
 80037ca:	f7ff fdc1 	bl	8003350 <Error_Handler>
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80037ce:	4a1f      	ldr	r2, [pc, #124]	; (800384c <HAL_SPI_MspInit+0x33c>)
 80037d0:	2354      	movs	r3, #84	; 0x54
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 80037d2:	67ec      	str	r4, [r5, #124]	; 0x7c
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037d4:	2140      	movs	r1, #64	; 0x40
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 80037d6:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 80037d8:	4c1d      	ldr	r4, [pc, #116]	; (8003850 <HAL_SPI_MspInit+0x340>)
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80037da:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037de:	2300      	movs	r3, #0
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80037e4:	4620      	mov	r0, r4
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037e6:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037ea:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80037ee:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037f2:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80037f6:	f003 fd7f 	bl	80072f8 <HAL_DMA_Init>
 80037fa:	b108      	cbz	r0, 8003800 <HAL_SPI_MspInit+0x2f0>
      Error_Handler();
 80037fc:	f7ff fda8 	bl	8003350 <Error_Handler>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8003800:	2200      	movs	r2, #0
 8003802:	2054      	movs	r0, #84	; 0x54
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8003804:	67ac      	str	r4, [r5, #120]	; 0x78
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8003806:	4611      	mov	r1, r2
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8003808:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800380a:	f003 fba5 	bl	8006f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800380e:	2054      	movs	r0, #84	; 0x54
 8003810:	e6dc      	b.n	80035cc <HAL_SPI_MspInit+0xbc>
 8003812:	bf00      	nop
 8003814:	40013000 	.word	0x40013000
 8003818:	58024400 	.word	0x58024400
 800381c:	58020000 	.word	0x58020000
 8003820:	2401c9b0 	.word	0x2401c9b0
 8003824:	40003800 	.word	0x40003800
 8003828:	58020400 	.word	0x58020400
 800382c:	2400c030 	.word	0x2400c030
 8003830:	40003c00 	.word	0x40003c00
 8003834:	40020040 	.word	0x40020040
 8003838:	2401eaf0 	.word	0x2401eaf0
 800383c:	40013400 	.word	0x40013400
 8003840:	2400c190 	.word	0x2400c190
 8003844:	40020410 	.word	0x40020410
 8003848:	58021000 	.word	0x58021000
 800384c:	40020428 	.word	0x40020428
 8003850:	2401050c 	.word	0x2401050c
 8003854:	40020010 	.word	0x40020010
 8003858:	40020028 	.word	0x40020028

0800385c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800385c:	b530      	push	{r4, r5, lr}
 800385e:	b091      	sub	sp, #68	; 0x44
 8003860:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003862:	2214      	movs	r2, #20
 8003864:	2100      	movs	r1, #0
 8003866:	a80b      	add	r0, sp, #44	; 0x2c
 8003868:	f010 f959 	bl	8013b1e <memset>
  if(huart->Instance==UART4)
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	4a78      	ldr	r2, [pc, #480]	; (8003a50 <HAL_UART_MspInit+0x1f4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d13d      	bne.n	80038f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003874:	4b77      	ldr	r3, [pc, #476]	; (8003a54 <HAL_UART_MspInit+0x1f8>)
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003876:	f04f 0c03 	mov.w	ip, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387a:	a90b      	add	r1, sp, #44	; 0x2c
 800387c:	4876      	ldr	r0, [pc, #472]	; (8003a58 <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_UART4_CLK_ENABLE();
 800387e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8003882:	4c76      	ldr	r4, [pc, #472]	; (8003a5c <HAL_UART_MspInit+0x200>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8003884:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003888:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800388c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003890:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003894:	9201      	str	r2, [sp, #4]
 8003896:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003898:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80038a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	9302      	str	r3, [sp, #8]
 80038ae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b0:	2302      	movs	r3, #2
 80038b2:	e9cd c30b 	strd	ip, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038b6:	2308      	movs	r3, #8
 80038b8:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ba:	f004 fd0f 	bl	80082dc <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80038be:	4b68      	ldr	r3, [pc, #416]	; (8003a60 <HAL_UART_MspInit+0x204>)
 80038c0:	6023      	str	r3, [r4, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80038c2:	233f      	movs	r3, #63	; 0x3f
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80038c4:	6063      	str	r3, [r4, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038ca:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80038cc:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038ce:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038d2:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80038d6:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038da:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80038de:	f003 fd0b 	bl	80072f8 <HAL_DMA_Init>
 80038e2:	b108      	cbz	r0, 80038e8 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 80038e4:	f7ff fd34 	bl	8003350 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80038e8:	67ac      	str	r4, [r5, #120]	; 0x78
 80038ea:	63a5      	str	r5, [r4, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80038ec:	b011      	add	sp, #68	; 0x44
 80038ee:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==UART7)
 80038f0:	4a5c      	ldr	r2, [pc, #368]	; (8003a64 <HAL_UART_MspInit+0x208>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d128      	bne.n	8003948 <HAL_UART_MspInit+0xec>
    __HAL_RCC_UART7_CLK_ENABLE();
 80038f6:	4b57      	ldr	r3, [pc, #348]	; (8003a54 <HAL_UART_MspInit+0x1f8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f8:	f44f 74c0 	mov.w	r4, #384	; 0x180
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038fc:	a90b      	add	r1, sp, #44	; 0x2c
 80038fe:	485a      	ldr	r0, [pc, #360]	; (8003a68 <HAL_UART_MspInit+0x20c>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8003900:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003904:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003908:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800390c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003910:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003914:	9203      	str	r2, [sp, #12]
 8003916:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003918:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800391c:	f042 0210 	orr.w	r2, r2, #16
 8003920:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	9304      	str	r3, [sp, #16]
 800392e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003930:	2302      	movs	r3, #2
 8003932:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003936:	2307      	movs	r3, #7
    hdma_uart7_rx.Instance = DMA1_Stream4;
 8003938:	4c4c      	ldr	r4, [pc, #304]	; (8003a6c <HAL_UART_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800393a:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800393c:	f004 fcce 	bl	80082dc <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream4;
 8003940:	4b4b      	ldr	r3, [pc, #300]	; (8003a70 <HAL_UART_MspInit+0x214>)
 8003942:	6023      	str	r3, [r4, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8003944:	234f      	movs	r3, #79	; 0x4f
 8003946:	e7bd      	b.n	80038c4 <HAL_UART_MspInit+0x68>
  else if(huart->Instance==USART1)
 8003948:	4a4a      	ldr	r2, [pc, #296]	; (8003a74 <HAL_UART_MspInit+0x218>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d128      	bne.n	80039a0 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART1_CLK_ENABLE();
 800394e:	4b41      	ldr	r3, [pc, #260]	; (8003a54 <HAL_UART_MspInit+0x1f8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003950:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003954:	a90b      	add	r1, sp, #44	; 0x2c
    hdma_usart1_rx.Instance = DMA1_Stream5;
 8003956:	4c48      	ldr	r4, [pc, #288]	; (8003a78 <HAL_UART_MspInit+0x21c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003958:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800395c:	f042 0210 	orr.w	r2, r2, #16
 8003960:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003964:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003968:	f002 0210 	and.w	r2, r2, #16
 800396c:	9205      	str	r2, [sp, #20]
 800396e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003970:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003974:	f042 0201 	orr.w	r2, r2, #1
 8003978:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800397c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	9306      	str	r3, [sp, #24]
 8003986:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	2302      	movs	r3, #2
 800398a:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800398e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003990:	4831      	ldr	r0, [pc, #196]	; (8003a58 <HAL_UART_MspInit+0x1fc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003992:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003994:	f004 fca2 	bl	80082dc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream5;
 8003998:	4b38      	ldr	r3, [pc, #224]	; (8003a7c <HAL_UART_MspInit+0x220>)
 800399a:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800399c:	2329      	movs	r3, #41	; 0x29
 800399e:	e791      	b.n	80038c4 <HAL_UART_MspInit+0x68>
  else if(huart->Instance==USART2)
 80039a0:	4a37      	ldr	r2, [pc, #220]	; (8003a80 <HAL_UART_MspInit+0x224>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d127      	bne.n	80039f6 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039a6:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <HAL_UART_MspInit+0x1f8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a8:	210c      	movs	r1, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039aa:	482b      	ldr	r0, [pc, #172]	; (8003a58 <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80039ac:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart2_rx.Instance = DMA1_Stream6;
 80039b0:	4c34      	ldr	r4, [pc, #208]	; (8003a84 <HAL_UART_MspInit+0x228>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80039b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80039b6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80039ba:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80039be:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80039c2:	9207      	str	r2, [sp, #28]
 80039c4:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80039d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	9308      	str	r3, [sp, #32]
 80039dc:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039de:	2302      	movs	r3, #2
 80039e0:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039e4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e6:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039e8:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ea:	f004 fc77 	bl	80082dc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream6;
 80039ee:	4b26      	ldr	r3, [pc, #152]	; (8003a88 <HAL_UART_MspInit+0x22c>)
 80039f0:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80039f2:	232b      	movs	r3, #43	; 0x2b
 80039f4:	e766      	b.n	80038c4 <HAL_UART_MspInit+0x68>
  else if(huart->Instance==USART3)
 80039f6:	4a25      	ldr	r2, [pc, #148]	; (8003a8c <HAL_UART_MspInit+0x230>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	f47f af77 	bne.w	80038ec <HAL_UART_MspInit+0x90>
    __HAL_RCC_USART3_CLK_ENABLE();
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <HAL_UART_MspInit+0x1f8>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a00:	a90b      	add	r1, sp, #44	; 0x2c
 8003a02:	4823      	ldr	r0, [pc, #140]	; (8003a90 <HAL_UART_MspInit+0x234>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a04:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8003a08:	4c22      	ldr	r4, [pc, #136]	; (8003a94 <HAL_UART_MspInit+0x238>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a0a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a0e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003a12:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003a16:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8003a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a22:	f042 0208 	orr.w	r2, r2, #8
 8003a26:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2a:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	930a      	str	r3, [sp, #40]	; 0x28
 8003a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a40:	2307      	movs	r3, #7
 8003a42:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a44:	f004 fc4a 	bl	80082dc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <HAL_UART_MspInit+0x23c>)
 8003a4a:	6023      	str	r3, [r4, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003a4c:	232d      	movs	r3, #45	; 0x2d
 8003a4e:	e739      	b.n	80038c4 <HAL_UART_MspInit+0x68>
 8003a50:	40004c00 	.word	0x40004c00
 8003a54:	58024400 	.word	0x58024400
 8003a58:	58020000 	.word	0x58020000
 8003a5c:	24009be0 	.word	0x24009be0
 8003a60:	40020058 	.word	0x40020058
 8003a64:	40007800 	.word	0x40007800
 8003a68:	58021000 	.word	0x58021000
 8003a6c:	2400e31c 	.word	0x2400e31c
 8003a70:	40020070 	.word	0x40020070
 8003a74:	40011000 	.word	0x40011000
 8003a78:	2400e39c 	.word	0x2400e39c
 8003a7c:	40020088 	.word	0x40020088
 8003a80:	40004400 	.word	0x40004400
 8003a84:	24009c5c 	.word	0x24009c5c
 8003a88:	400200a0 	.word	0x400200a0
 8003a8c:	40004800 	.word	0x40004800
 8003a90:	58020c00 	.word	0x58020c00
 8003a94:	24009df8 	.word	0x24009df8
 8003a98:	400200b8 	.word	0x400200b8

08003a9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a9c:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8003a9e:	4601      	mov	r1, r0
{
 8003aa0:	b08a      	sub	sp, #40	; 0x28
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2019      	movs	r0, #25
 8003aa6:	f003 fa57 	bl	8006f58 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003aaa:	2019      	movs	r0, #25
 8003aac:	f003 fa86 	bl	8006fbc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003ab0:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <HAL_InitTick+0x70>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ab2:	4669      	mov	r1, sp
 8003ab4:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003ab6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003aba:	4c15      	ldr	r4, [pc, #84]	; (8003b10 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003abc:	f042 0201 	orr.w	r2, r2, #1
 8003ac0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ad0:	f005 feba 	bl	8009848 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003ad4:	f005 fea6 	bl	8009824 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <HAL_InitTick+0x78>)
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003ada:	0040      	lsls	r0, r0, #1
  htim1.Instance = TIM1;
 8003adc:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003ade:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003ae2:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <HAL_InitTick+0x7c>)
 8003ae6:	fbb0 f0f3 	udiv	r0, r0, r3
 8003aea:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8003aec:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 8003aee:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003af0:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8003af2:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003af4:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003af6:	f008 fa7d 	bl	800bff4 <HAL_TIM_Base_Init>
 8003afa:	b920      	cbnz	r0, 8003b06 <HAL_InitTick+0x6a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003afc:	4620      	mov	r0, r4
 8003afe:	f008 f941 	bl	800bd84 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8003b02:	b00a      	add	sp, #40	; 0x28
 8003b04:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8003b06:	2001      	movs	r0, #1
 8003b08:	e7fb      	b.n	8003b02 <HAL_InitTick+0x66>
 8003b0a:	bf00      	nop
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	2401eb78 	.word	0x2401eb78
 8003b14:	40010000 	.word	0x40010000
 8003b18:	000f4240 	.word	0x000f4240

08003b1c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b1c:	4770      	bx	lr

08003b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b1e:	e7fe      	b.n	8003b1e <HardFault_Handler>

08003b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b20:	e7fe      	b.n	8003b20 <MemManage_Handler>

08003b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b22:	e7fe      	b.n	8003b22 <BusFault_Handler>

08003b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b24:	e7fe      	b.n	8003b24 <UsageFault_Handler>

08003b26 <DebugMon_Handler>:
 8003b26:	4770      	bx	lr

08003b28 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003b28:	4801      	ldr	r0, [pc, #4]	; (8003b30 <DMA1_Stream0_IRQHandler+0x8>)
 8003b2a:	f004 b92d 	b.w	8007d88 <HAL_DMA_IRQHandler>
 8003b2e:	bf00      	nop
 8003b30:	2401c9b0 	.word	0x2401c9b0

08003b34 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003b34:	4801      	ldr	r0, [pc, #4]	; (8003b3c <DMA1_Stream1_IRQHandler+0x8>)
 8003b36:	f004 b927 	b.w	8007d88 <HAL_DMA_IRQHandler>
 8003b3a:	bf00      	nop
 8003b3c:	2400c030 	.word	0x2400c030

08003b40 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8003b40:	4801      	ldr	r0, [pc, #4]	; (8003b48 <DMA1_Stream2_IRQHandler+0x8>)
 8003b42:	f004 b921 	b.w	8007d88 <HAL_DMA_IRQHandler>
 8003b46:	bf00      	nop
 8003b48:	2401eaf0 	.word	0x2401eaf0

08003b4c <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003b4c:	4801      	ldr	r0, [pc, #4]	; (8003b54 <DMA1_Stream3_IRQHandler+0x8>)
 8003b4e:	f004 b91b 	b.w	8007d88 <HAL_DMA_IRQHandler>
 8003b52:	bf00      	nop
 8003b54:	24009be0 	.word	0x24009be0

08003b58 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8003b58:	4801      	ldr	r0, [pc, #4]	; (8003b60 <DMA1_Stream4_IRQHandler+0x8>)
 8003b5a:	f004 b915 	b.w	8007d88 <HAL_DMA_IRQHandler>
 8003b5e:	bf00      	nop
 8003b60:	2400e31c 	.word	0x2400e31c

08003b64 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003b64:	4801      	ldr	r0, [pc, #4]	; (8003b6c <DMA1_Stream5_IRQHandler+0x8>)
 8003b66:	f004 b90f 	b.w	8007d88 <HAL_DMA_IRQHandler>
 8003b6a:	bf00      	nop
 8003b6c:	2400e39c 	.word	0x2400e39c

08003b70 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003b70:	4801      	ldr	r0, [pc, #4]	; (8003b78 <DMA1_Stream6_IRQHandler+0x8>)
 8003b72:	f004 b909 	b.w	8007d88 <HAL_DMA_IRQHandler>
 8003b76:	bf00      	nop
 8003b78:	24009c5c 	.word	0x24009c5c

08003b7c <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b7c:	4801      	ldr	r0, [pc, #4]	; (8003b84 <TIM1_UP_IRQHandler+0x8>)
 8003b7e:	f008 b923 	b.w	800bdc8 <HAL_TIM_IRQHandler>
 8003b82:	bf00      	nop
 8003b84:	2401eb78 	.word	0x2401eb78

08003b88 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003b88:	4801      	ldr	r0, [pc, #4]	; (8003b90 <SPI1_IRQHandler+0x8>)
 8003b8a:	f007 bfd1 	b.w	800bb30 <HAL_SPI_IRQHandler>
 8003b8e:	bf00      	nop
 8003b90:	2401a834 	.word	0x2401a834

08003b94 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003b94:	4801      	ldr	r0, [pc, #4]	; (8003b9c <SPI2_IRQHandler+0x8>)
 8003b96:	f007 bfcb 	b.w	800bb30 <HAL_SPI_IRQHandler>
 8003b9a:	bf00      	nop
 8003b9c:	24009cdc 	.word	0x24009cdc

08003ba0 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003ba0:	4801      	ldr	r0, [pc, #4]	; (8003ba8 <DMA1_Stream7_IRQHandler+0x8>)
 8003ba2:	f004 b8f1 	b.w	8007d88 <HAL_DMA_IRQHandler>
 8003ba6:	bf00      	nop
 8003ba8:	24009df8 	.word	0x24009df8

08003bac <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003bac:	4801      	ldr	r0, [pc, #4]	; (8003bb4 <SDMMC1_IRQHandler+0x8>)
 8003bae:	f007 bbc7 	b.w	800b340 <HAL_SD_IRQHandler>
 8003bb2:	bf00      	nop
 8003bb4:	2400c0a8 	.word	0x2400c0a8

08003bb8 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003bb8:	4801      	ldr	r0, [pc, #4]	; (8003bc0 <SPI3_IRQHandler+0x8>)
 8003bba:	f007 bfb9 	b.w	800bb30 <HAL_SPI_IRQHandler>
 8003bbe:	bf00      	nop
 8003bc0:	2400e220 	.word	0x2400e220

08003bc4 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8003bc4:	4801      	ldr	r0, [pc, #4]	; (8003bcc <DMA2_Stream0_IRQHandler+0x8>)
 8003bc6:	f004 b8df 	b.w	8007d88 <HAL_DMA_IRQHandler>
 8003bca:	bf00      	nop
 8003bcc:	2400c190 	.word	0x2400c190

08003bd0 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8003bd0:	4801      	ldr	r0, [pc, #4]	; (8003bd8 <DMA2_Stream1_IRQHandler+0x8>)
 8003bd2:	f004 b8d9 	b.w	8007d88 <HAL_DMA_IRQHandler>
 8003bd6:	bf00      	nop
 8003bd8:	2401050c 	.word	0x2401050c

08003bdc <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003bdc:	4801      	ldr	r0, [pc, #4]	; (8003be4 <DMA2_Stream4_IRQHandler+0x8>)
 8003bde:	f004 b8d3 	b.w	8007d88 <HAL_DMA_IRQHandler>
 8003be2:	bf00      	nop
 8003be4:	24012620 	.word	0x24012620

08003be8 <SPI4_IRQHandler>:
void SPI4_IRQHandler(void)
{
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8003be8:	4801      	ldr	r0, [pc, #4]	; (8003bf0 <SPI4_IRQHandler+0x8>)
 8003bea:	f007 bfa1 	b.w	800bb30 <HAL_SPI_IRQHandler>
 8003bee:	bf00      	nop
 8003bf0:	24012598 	.word	0x24012598

08003bf4 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003bf4:	4801      	ldr	r0, [pc, #4]	; (8003bfc <OTG_FS_IRQHandler+0x8>)
 8003bf6:	f004 bd17 	b.w	8008628 <HAL_PCD_IRQHandler>
 8003bfa:	bf00      	nop
 8003bfc:	24022370 	.word	0x24022370

08003c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c08:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <_sbrk+0x5c>)
 8003c0a:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <_sbrk+0x60>)
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <_sbrk+0x64>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <_sbrk+0x64>)
 8003c1e:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <_sbrk+0x68>)
 8003c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <_sbrk+0x64>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d207      	bcs.n	8003c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c30:	f00f ff30 	bl	8013a94 <__errno>
 8003c34:	4602      	mov	r2, r0
 8003c36:	230c      	movs	r3, #12
 8003c38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3e:	e009      	b.n	8003c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c40:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <_sbrk+0x64>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c46:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <_sbrk+0x64>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4a05      	ldr	r2, [pc, #20]	; (8003c64 <_sbrk+0x64>)
 8003c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c52:	68fb      	ldr	r3, [r7, #12]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	24080000 	.word	0x24080000
 8003c60:	00000f00 	.word	0x00000f00
 8003c64:	240002d0 	.word	0x240002d0
 8003c68:	24022780 	.word	0x24022780

08003c6c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c6c:	4a28      	ldr	r2, [pc, #160]	; (8003d10 <SystemInit+0xa4>)
 8003c6e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c7a:	4a26      	ldr	r2, [pc, #152]	; (8003d14 <SystemInit+0xa8>)
 8003c7c:	6813      	ldr	r3, [r2, #0]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	2b06      	cmp	r3, #6
 8003c84:	d805      	bhi.n	8003c92 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c86:	6813      	ldr	r3, [r2, #0]
 8003c88:	f023 030f 	bic.w	r3, r3, #15
 8003c8c:	f043 0307 	orr.w	r3, r3, #7
 8003c90:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003c92:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <SystemInit+0xac>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003ca0:	4a1e      	ldr	r2, [pc, #120]	; (8003d1c <SystemInit+0xb0>)
 8003ca2:	6819      	ldr	r1, [r3, #0]
 8003ca4:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ca6:	491b      	ldr	r1, [pc, #108]	; (8003d14 <SystemInit+0xa8>)
  RCC->CR &= 0xEAF6ED7FU;
 8003ca8:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003caa:	680a      	ldr	r2, [r1, #0]
 8003cac:	f002 020f 	and.w	r2, r2, #15
 8003cb0:	2a07      	cmp	r2, #7
 8003cb2:	d905      	bls.n	8003cc0 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003cb4:	680a      	ldr	r2, [r1, #0]
 8003cb6:	f022 020f 	bic.w	r2, r2, #15
 8003cba:	f042 0207 	orr.w	r2, r2, #7
 8003cbe:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003cc0:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003cc2:	4917      	ldr	r1, [pc, #92]	; (8003d20 <SystemInit+0xb4>)
  RCC->D1CFGR = 0x00000000;
 8003cc4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8003cc6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8003cc8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8003cca:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003ccc:	4915      	ldr	r1, [pc, #84]	; (8003d24 <SystemInit+0xb8>)
 8003cce:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003cd0:	4915      	ldr	r1, [pc, #84]	; (8003d28 <SystemInit+0xbc>)
 8003cd2:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003cd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003cd6:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003cd8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003cda:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003cdc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003cde:	6819      	ldr	r1, [r3, #0]
 8003ce0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003ce4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003ce6:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003ce8:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <SystemInit+0xc0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	0c1b      	lsrs	r3, r3, #16
 8003cee:	041b      	lsls	r3, r3, #16
 8003cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf4:	d202      	bcs.n	8003cfc <SystemInit+0x90>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <SystemInit+0xc4>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <SystemInit+0xc8>)
 8003cfe:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003d02:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d08:	4b01      	ldr	r3, [pc, #4]	; (8003d10 <SystemInit+0xa4>)
 8003d0a:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	e000ed00 	.word	0xe000ed00
 8003d14:	52002000 	.word	0x52002000
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d20:	02020200 	.word	0x02020200
 8003d24:	01ff0000 	.word	0x01ff0000
 8003d28:	01010280 	.word	0x01010280
 8003d2c:	5c001000 	.word	0x5c001000
 8003d30:	51008108 	.word	0x51008108
 8003d34:	52004000 	.word	0x52004000

08003d38 <vTaskBattery>:
#include "tasks/task_battery.h"

float get_temp (uint16_t adc_value);


void vTaskBattery(void *argument) {
 8003d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d3c:	ed2d 8b10 	vpush	{d8-d15}

	/* Initialise Variables */
	double mah;
	double curr = 0;
	double supp = 0;
	double bat = 0;
 8003d40:	ed9f db6d 	vldr	d13, [pc, #436]	; 8003ef8 <vTaskBattery+0x1c0>
	for (;;) {
		tick_count += tick_update;

		double current2 = ((double)adc_value[0] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR2
		float supply_voltage = adc_value[1] * (2.5/4096) * 2; // 3V3
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 8003d44:	ed9f ab6e 	vldr	d10, [pc, #440]	; 8003f00 <vTaskBattery+0x1c8>
void vTaskBattery(void *argument) {
 8003d48:	b08a      	sub	sp, #40	; 0x28
	battery_data_t battery_data = { 0 };
 8003d4a:	2400      	movs	r4, #0
	tick_update = osKernelGetTickFreq() / BATTERY_SAMPLE_RATE;
 8003d4c:	2732      	movs	r7, #50	; 0x32
	double supp = 0;
 8003d4e:	eeb0 cb4d 	vmov.f64	d12, d13
	battery_data_t battery_data = { 0 };
 8003d52:	f8ad 4010 	strh.w	r4, [sp, #16]
	double curr = 0;
 8003d56:	eeb0 eb4d 	vmov.f64	d14, d13
 8003d5a:	eeb0 8b4a 	vmov.f64	d8, d10
	battery_data_t battery_data = { 0 };
 8003d5e:	e9cd 4402 	strd	r4, r4, [sp, #8]
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 8003d62:	ed9f bb69 	vldr	d11, [pc, #420]	; 8003f08 <vTaskBattery+0x1d0>
	tick_count = osKernelGetTickCount();
 8003d66:	f00c fb6d 	bl	8010444 <osKernelGetTickCount>
 8003d6a:	4606      	mov	r6, r0
	tick_update = osKernelGetTickFreq() / BATTERY_SAMPLE_RATE;
 8003d6c:	f00c fb7e 	bl	801046c <osKernelGetTickFreq>
 8003d70:	fbb0 f7f7 	udiv	r7, r0, r7
	HAL_ADC_Stop_DMA(&hadc1);
 8003d74:	4870      	ldr	r0, [pc, #448]	; (8003f38 <vTaskBattery+0x200>)
 8003d76:	f002 fe54 	bl	8006a22 <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 8003d7a:	2205      	movs	r2, #5
 8003d7c:	a905      	add	r1, sp, #20
 8003d7e:	486e      	ldr	r0, [pc, #440]	; (8003f38 <vTaskBattery+0x200>)
 8003d80:	f002 fd8c 	bl	800689c <HAL_ADC_Start_DMA>
	osDelay(500);
 8003d84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d88:	f00c fbca 	bl	8010520 <osDelay>
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 8003d8c:	eddd 7a07 	vldr	s15, [sp, #28]
		tick_count += tick_update;
 8003d90:	443e      	add	r6, r7
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 8003d92:	eeb8 fb67 	vcvt.f64.u32	d15, s15
		float supply_voltage = adc_value[1] * (2.5/4096) * 2; // 3V3
 8003d96:	e9dd 8505 	ldrd	r8, r5, [sp, #20]
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 8003d9a:	ee2f fb0a 	vmul.f64	d15, d15, d10
		double current1 = ((double)adc_value[3] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR1
		get_temp(adc_value[4]); // temp

		if ((adc_value[0] | adc_value[1]) == 0){
 8003d9e:	ea58 0305 	orrs.w	r3, r8, r5
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 8003da2:	ee2f fb0b 	vmul.f64	d15, d15, d11
 8003da6:	eeb7 fbcf 	vcvt.f32.f64	s30, d15
		double current1 = ((double)adc_value[3] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR1
 8003daa:	eddd fa08 	vldr	s31, [sp, #32]
		if ((adc_value[0] | adc_value[1]) == 0){
 8003dae:	d107      	bne.n	8003dc0 <vTaskBattery+0x88>
			HAL_ADC_Stop_DMA(&hadc1);
 8003db0:	4861      	ldr	r0, [pc, #388]	; (8003f38 <vTaskBattery+0x200>)
 8003db2:	f002 fe36 	bl	8006a22 <HAL_ADC_Stop_DMA>
			HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 8003db6:	2205      	movs	r2, #5
 8003db8:	a905      	add	r1, sp, #20
 8003dba:	485f      	ldr	r0, [pc, #380]	; (8003f38 <vTaskBattery+0x200>)
 8003dbc:	f002 fd6e 	bl	800689c <HAL_ADC_Start_DMA>
		}
		// Filter adc values
		if (counter < 50) {
 8003dc0:	2c31      	cmp	r4, #49	; 0x31
 8003dc2:	dc2e      	bgt.n	8003e22 <vTaskBattery+0xea>
		double current2 = ((double)adc_value[0] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR2
 8003dc4:	ee07 8a90 	vmov	s15, r8
			counter++;
 8003dc8:	3401      	adds	r4, #1
		double current2 = ((double)adc_value[0] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR2
 8003dca:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8003f10 <vTaskBattery+0x1d8>
 8003dce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003dd2:	eeb0 4b46 	vmov.f64	d4, d6
 8003dd6:	ed9f 3b50 	vldr	d3, [pc, #320]	; 8003f18 <vTaskBattery+0x1e0>
 8003dda:	eea7 4b08 	vfma.f64	d4, d7, d8
		float supply_voltage = adc_value[1] * (2.5/4096) * 2; // 3V3
 8003dde:	ee07 5a90 	vmov	s15, r5
 8003de2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003de6:	ee27 7b08 	vmul.f64	d7, d7, d8
		double current2 = ((double)adc_value[0] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR2
 8003dea:	ee84 5b03 	vdiv.f64	d5, d4, d3
		double current1 = ((double)adc_value[3] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR1
 8003dee:	eeb8 4b6f 	vcvt.f64.u32	d4, s31
		float supply_voltage = adc_value[1] * (2.5/4096) * 2; // 3V3
 8003df2:	ee37 7b07 	vadd.f64	d7, d7, d7
			curr += current1 + current2;
			supp += supply_voltage;
			bat += battery_voltage;
 8003df6:	eeb7 facf 	vcvt.f64.f32	d15, s30
		double current1 = ((double)adc_value[3] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR1
 8003dfa:	eea4 6b08 	vfma.f64	d6, d4, d8
		float supply_voltage = adc_value[1] * (2.5/4096) * 2; // 3V3
 8003dfe:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			bat += battery_voltage;
 8003e02:	ee3d db0f 	vadd.f64	d13, d13, d15
			supp += supply_voltage;
 8003e06:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
		double current1 = ((double)adc_value[3] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR1
 8003e0a:	ee86 4b03 	vdiv.f64	d4, d6, d3
			supp += supply_voltage;
 8003e0e:	ee3c cb07 	vadd.f64	d12, d12, d7
			curr += current1 + current2;
 8003e12:	ee35 5b04 	vadd.f64	d5, d5, d4
 8003e16:	ee3e eb05 	vadd.f64	d14, d14, d5
				ReleaseMutex(&battery_mutex);
			}
		}

		/* Sleep */
		osDelayUntil(tick_count);
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	f00c fb9a 	bl	8010554 <osDelayUntil>
	for (;;) {
 8003e20:	e7b4      	b.n	8003d8c <vTaskBattery+0x54>
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 8003e22:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8003f20 <vTaskBattery+0x1e8>
			battery_data.current = (uint16_t)(curr*1000)/50;
 8003e26:	2232      	movs	r2, #50	; 0x32
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 8003e28:	ee8e 7b06 	vdiv.f64	d7, d14, d6
			battery_data.power = (curr*1000)/50 * (battery_voltage/50);
 8003e2c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8003f28 <vTaskBattery+0x1f0>
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 8003e30:	ee39 9b07 	vadd.f64	d9, d9, d7
			battery_data.consumption = (uint16_t)mah;
 8003e34:	eefc 7bc9 	vcvt.u32.f64	s15, d9
 8003e38:	ee17 3a90 	vmov	r3, s15
			battery_data.current = (uint16_t)(curr*1000)/50;
 8003e3c:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8003f30 <vTaskBattery+0x1f8>
			battery_data.consumption = (uint16_t)mah;
 8003e40:	b29c      	uxth	r4, r3
			battery_data.current = (uint16_t)(curr*1000)/50;
 8003e42:	ee2e eb07 	vmul.f64	d14, d14, d7
			battery_data.consumption = (uint16_t)mah;
 8003e46:	f8ad 400e 	strh.w	r4, [sp, #14]
			battery_data.current = (uint16_t)(curr*1000)/50;
 8003e4a:	eefc 7bce 	vcvt.u32.f64	s15, d14
 8003e4e:	ee17 3a90 	vmov	r3, s15
			battery_data.power = (curr*1000)/50 * (battery_voltage/50);
 8003e52:	ee8e 7b06 	vdiv.f64	d7, d14, d6
 8003e56:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003f3c <vTaskBattery+0x204>
			battery_data.current = (uint16_t)(curr*1000)/50;
 8003e5a:	b29b      	uxth	r3, r3
			battery_data.power = (curr*1000)/50 * (battery_voltage/50);
 8003e5c:	ee8f 6a26 	vdiv.f32	s12, s30, s13
			battery_data.current = (uint16_t)(curr*1000)/50;
 8003e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e64:	f8ad 300c 	strh.w	r3, [sp, #12]
			battery_data.power = (curr*1000)/50 * (battery_voltage/50);
 8003e68:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003e6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003e70:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8003e74:	ee17 2a10 	vmov	r2, s14
			battery_data.supply = (uint16_t)(supp * 20);
 8003e78:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
			battery_data.power = (curr*1000)/50 * (battery_voltage/50);
 8003e7c:	b290      	uxth	r0, r2
			battery_data.supply = (uint16_t)(supp * 20);
 8003e7e:	ee2c cb07 	vmul.f64	d12, d12, d7
			battery_data.power = (curr*1000)/50 * (battery_voltage/50);
 8003e82:	f8ad 0010 	strh.w	r0, [sp, #16]
			battery_data.battery = (uint16_t)(bat * 20);
 8003e86:	ee2d db07 	vmul.f64	d13, d13, d7
			battery_data.supply = (uint16_t)(supp * 20);
 8003e8a:	eebc cbcc 	vcvt.u32.f64	s24, d12
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8003e8e:	e9cd 4000 	strd	r4, r0, [sp]
			battery_data.battery = (uint16_t)(bat * 20);
 8003e92:	eebc dbcd 	vcvt.u32.f64	s26, d13
			battery_data.supply = (uint16_t)(supp * 20);
 8003e96:	ee1c 2a10 	vmov	r2, s24
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8003e9a:	4829      	ldr	r0, [pc, #164]	; (8003f40 <vTaskBattery+0x208>)
			battery_data.supply = (uint16_t)(supp * 20);
 8003e9c:	b291      	uxth	r1, r2
			battery_data.battery = (uint16_t)(bat * 20);
 8003e9e:	ee1d 2a10 	vmov	r2, s26
			battery_data.supply = (uint16_t)(supp * 20);
 8003ea2:	f8ad 1008 	strh.w	r1, [sp, #8]
			battery_data.battery = (uint16_t)(bat * 20);
 8003ea6:	b292      	uxth	r2, r2
 8003ea8:	f8ad 200a 	strh.w	r2, [sp, #10]
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8003eac:	f7fe fd30 	bl	8002910 <UsbPrint>
			logSensor(osKernelGetTickCount(), 1, BATTERY, &battery_data);
 8003eb0:	f00c fac8 	bl	8010444 <osKernelGetTickCount>
 8003eb4:	ab02      	add	r3, sp, #8
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	2101      	movs	r1, #1
 8003eba:	f7fe fbff 	bl	80026bc <logSensor>
			if(AcquireMutex(&battery_mutex) == osOK ){
 8003ebe:	4821      	ldr	r0, [pc, #132]	; (8003f44 <vTaskBattery+0x20c>)
 8003ec0:	f7fe fb9a 	bl	80025f8 <AcquireMutex>
 8003ec4:	4604      	mov	r4, r0
 8003ec6:	b998      	cbnz	r0, 8003ef0 <vTaskBattery+0x1b8>
				global_battery_data.battery = battery_data.battery;
 8003ec8:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <vTaskBattery+0x210>)
 8003eca:	f8bd 200a 	ldrh.w	r2, [sp, #10]
				ReleaseMutex(&battery_mutex);
 8003ece:	481d      	ldr	r0, [pc, #116]	; (8003f44 <vTaskBattery+0x20c>)
				global_battery_data.battery = battery_data.battery;
 8003ed0:	801a      	strh	r2, [r3, #0]
				global_battery_data.consumption = battery_data.consumption;
 8003ed2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8003ed6:	809a      	strh	r2, [r3, #4]
				global_battery_data.current = battery_data.current;
 8003ed8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8003edc:	805a      	strh	r2, [r3, #2]
				ReleaseMutex(&battery_mutex);
 8003ede:	f7fe fb96 	bl	800260e <ReleaseMutex>
			bat = 0;
 8003ee2:	ed9f db05 	vldr	d13, [pc, #20]	; 8003ef8 <vTaskBattery+0x1c0>
			supp = 0;
 8003ee6:	eeb0 cb4d 	vmov.f64	d12, d13
			curr = 0;
 8003eea:	eeb0 eb4d 	vmov.f64	d14, d13
 8003eee:	e794      	b.n	8003e1a <vTaskBattery+0xe2>
			counter = 0;
 8003ef0:	2400      	movs	r4, #0
 8003ef2:	e7f6      	b.n	8003ee2 <vTaskBattery+0x1aa>
 8003ef4:	f3af 8000 	nop.w
	...
 8003f04:	3f440000 	.word	0x3f440000
 8003f08:	cccccccd 	.word	0xcccccccd
 8003f0c:	4014cccc 	.word	0x4014cccc
 8003f10:	be0ded28 	.word	0xbe0ded28
 8003f14:	bfd69930 	.word	0xbfd69930
 8003f18:	4189374c 	.word	0x4189374c
 8003f1c:	3fd0e560 	.word	0x3fd0e560
 8003f20:	00000000 	.word	0x00000000
 8003f24:	40668000 	.word	0x40668000
 8003f28:	00000000 	.word	0x00000000
 8003f2c:	40490000 	.word	0x40490000
 8003f30:	00000000 	.word	0x00000000
 8003f34:	408f4000 	.word	0x408f4000
 8003f38:	2400e2b8 	.word	0x2400e2b8
 8003f3c:	42480000 	.word	0x42480000
 8003f40:	08015d6c 	.word	0x08015d6c
 8003f44:	24009d64 	.word	0x24009d64
 8003f48:	2400e2b0 	.word	0x2400e2b0

08003f4c <vTaskController>:
#include "tasks/task_controller.h"

/* Abbreviation 'aw' is used to described everything related to the antiwindup */


void vTaskController(void *argument) {
 8003f4c:	b570      	push	{r4, r5, r6, lr}
 8003f4e:	ed2d 8b02 	vpush	{d8}
 8003f52:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
	/* For periodic update */
	uint32_t tick_count, tick_update;

	state_est_data_t state_est_data_local;
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 8003f56:	2100      	movs	r1, #0

    /* Initialize the control_data struct */
    control_data_t control_data = { 0 };
 8003f58:	f44f 6284 	mov.w	r2, #1056	; 0x420

	osDelay(1100);

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8003f5c:	2564      	movs	r5, #100	; 0x64
    control_data_t control_data = { 0 };
 8003f5e:	a812      	add	r0, sp, #72	; 0x48
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 8003f60:	9102      	str	r1, [sp, #8]
		tick_count += tick_update;

		/* Update Sensor Fusion Variables */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_local, sizeof(state_est_data_local));

		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 8003f62:	ed9f 8a34 	vldr	s16, [pc, #208]	; 8004034 <vTaskController+0xe8>
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_local, sizeof(state_est_data_local));
 8003f66:	4e34      	ldr	r6, [pc, #208]	; (8004038 <vTaskController+0xec>)
 8003f68:	eef0 8a48 	vmov.f32	s17, s16
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 8003f6c:	e9cd 1100 	strd	r1, r1, [sp]
    control_data_t control_data = { 0 };
 8003f70:	f00f fdd5 	bl	8013b1e <memset>
    control_data_init(&control_data);
 8003f74:	a812      	add	r0, sp, #72	; 0x48
 8003f76:	f7fc fef9 	bl	8000d6c <control_data_init>
	osDelay(1100);
 8003f7a:	f240 404c 	movw	r0, #1100	; 0x44c
 8003f7e:	f00c facf 	bl	8010520 <osDelay>
	tick_count = osKernelGetTickCount();
 8003f82:	f00c fa5f 	bl	8010444 <osKernelGetTickCount>
 8003f86:	4604      	mov	r4, r0
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8003f88:	f00c fa70 	bl	801046c <osKernelGetTickFreq>
 8003f8c:	fbb0 f5f5 	udiv	r5, r0, r5
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_local, sizeof(state_est_data_local));
 8003f90:	233c      	movs	r3, #60	; 0x3c
 8003f92:	aa03      	add	r2, sp, #12
 8003f94:	4928      	ldr	r1, [pc, #160]	; (8004038 <vTaskController+0xec>)
		tick_count += tick_update;
 8003f96:	442c      	add	r4, r5
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_local, sizeof(state_est_data_local));
 8003f98:	4828      	ldr	r0, [pc, #160]	; (800403c <vTaskController+0xf0>)
 8003f9a:	f7fe fb3b 	bl	8002614 <ReadMutex>
		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 8003f9e:	edd6 7a02 	vldr	s15, [r6, #8]
		control_data.sf_velocity = ((float)state_est_data_global.velocity_world[2]) / 1000;

		/* Update flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &current_flight_phase_detection, sizeof(state_est_data_local));
 8003fa2:	233c      	movs	r3, #60	; 0x3c
 8003fa4:	466a      	mov	r2, sp
		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 8003fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &current_flight_phase_detection, sizeof(state_est_data_local));
 8003faa:	4925      	ldr	r1, [pc, #148]	; (8004040 <vTaskController+0xf4>)
 8003fac:	4825      	ldr	r0, [pc, #148]	; (8004044 <vTaskController+0xf8>)
		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 8003fae:	ee87 7a88 	vdiv.f32	s14, s15, s16
		control_data.sf_velocity = ((float)state_est_data_global.velocity_world[2]) / 1000;
 8003fb2:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
 8003fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 8003fba:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
		control_data.sf_velocity = ((float)state_est_data_global.velocity_world[2]) / 1000;
 8003fbe:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8003fc2:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &current_flight_phase_detection, sizeof(state_est_data_local));
 8003fc6:	f7fe fb25 	bl	8002614 <ReadMutex>

		/** MAKE SURE THE RIGHT CONTROLLER IS ACTIVE IS ACTIVE!!!!! **/
        if(LQR_ACTIVE) {
            compute_control_input(&control_data, &current_flight_phase_detection);
 8003fca:	a812      	add	r0, sp, #72	; 0x48
 8003fcc:	4669      	mov	r1, sp
 8003fce:	f7fc ff83 	bl	8000ed8 <compute_control_input>
        else {
            compute_test_control_input(&control_data);
        }

		/* Write Control Input into Global Variable */
		if(AcquireMutex(&controller_mutex) == osOK){
 8003fd2:	481d      	ldr	r0, [pc, #116]	; (8004048 <vTaskController+0xfc>)
 8003fd4:	f7fe fb10 	bl	80025f8 <AcquireMutex>
 8003fd8:	b958      	cbnz	r0, 8003ff2 <vTaskController+0xa6>
			controller_output_global = (int32_t)(control_data.control_input * 1000);
 8003fda:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 8003fde:	4b1b      	ldr	r3, [pc, #108]	; (800404c <vTaskController+0x100>)
 8003fe0:	ee67 7a88 	vmul.f32	s15, s15, s16
			ReleaseMutex(&controller_mutex);
 8003fe4:	4818      	ldr	r0, [pc, #96]	; (8004048 <vTaskController+0xfc>)
			controller_output_global = (int32_t)(control_data.control_input * 1000);
 8003fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fea:	edc3 7a00 	vstr	s15, [r3]
			ReleaseMutex(&controller_mutex);
 8003fee:	f7fe fb0e 	bl	800260e <ReleaseMutex>
		}


		/* Log to SD Card */
		logControllerOutput(osKernelGetTickCount(),
 8003ff2:	f00c fa27 	bl	8010444 <osKernelGetTickCount>
				(int32_t)(control_data.control_input * 1000),
				(int32_t)(control_data.reference_error * 1000),
				(int32_t)(control_data.integrated_error * 1000));
 8003ff6:	eddd 6a14 	vldr	s13, [sp, #80]	; 0x50
				(int32_t)(control_data.reference_error * 1000),
 8003ffa:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
				(int32_t)(control_data.control_input * 1000),
 8003ffe:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
				(int32_t)(control_data.integrated_error * 1000));
 8004002:	ee66 6aa8 	vmul.f32	s13, s13, s17
				(int32_t)(control_data.reference_error * 1000),
 8004006:	ee27 7a28 	vmul.f32	s14, s14, s17
				(int32_t)(control_data.control_input * 1000),
 800400a:	ee67 7aa8 	vmul.f32	s15, s15, s17
		logControllerOutput(osKernelGetTickCount(),
 800400e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8004012:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800401a:	ee16 3a90 	vmov	r3, s13
 800401e:	ee17 2a10 	vmov	r2, s14
 8004022:	ee17 1a90 	vmov	r1, s15
 8004026:	f7fe fc2b 	bl	8002880 <logControllerOutput>


		/* Sleep */
		osDelayUntil(tick_count);
 800402a:	4620      	mov	r0, r4
 800402c:	f00c fa92 	bl	8010554 <osDelayUntil>
		tick_count += tick_update;
 8004030:	e7ae      	b.n	8003f90 <vTaskController+0x44>
 8004032:	bf00      	nop
 8004034:	447a0000 	.word	0x447a0000
 8004038:	24000294 	.word	0x24000294
 800403c:	240166a8 	.word	0x240166a8
 8004040:	24000234 	.word	0x24000234
 8004044:	24009cd4 	.word	0x24009cd4
 8004048:	2400e2a8 	.word	0x2400e2a8
 800404c:	24000220 	.word	0x24000220

08004050 <vTaskFsm>:
 */

#include "tasks/task_fsm.h"


void vTaskFsm(void *argument) {
 8004050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004054:	b09d      	sub	sp, #116	; 0x74
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004056:	2500      	movs	r5, #0
	osDelay(1000);


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 8004058:	2664      	movs	r6, #100	; 0x64
	while (1) {
		/* Tick Update */
		tick_count += tick_update;

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 800405a:	4f31      	ldr	r7, [pc, #196]	; (8004120 <vTaskFsm+0xd0>)
	flight_phase_detection_t flight_phase_detection = { 0 };
 800405c:	ac02      	add	r4, sp, #8
 800405e:	9502      	str	r5, [sp, #8]
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8004060:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8004138 <vTaskFsm+0xe8>
	reset_flight_phase_detection(&flight_phase_detection);
 8004064:	4620      	mov	r0, r4
			telemetry_command = IDLE_COMMAND;
		}


		/* Update Local State Estimation Data */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm, sizeof(state_est_data_global));
 8004066:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800413c <vTaskFsm+0xec>
	flight_phase_detection_t flight_phase_detection = { 0 };
 800406a:	e9c4 5501 	strd	r5, r5, [r4, #4]
	reset_flight_phase_detection(&flight_phase_detection);
 800406e:	f7fd f9c9 	bl	8001404 <reset_flight_phase_detection>
	state_est_data_t state_est_data_fsm = { 0 };
 8004072:	4629      	mov	r1, r5
 8004074:	223c      	movs	r2, #60	; 0x3c
 8004076:	a80d      	add	r0, sp, #52	; 0x34
 8004078:	f00f fd51 	bl	8013b1e <memset>
	init_env(&dummy_env);
 800407c:	a809      	add	r0, sp, #36	; 0x24
 800407e:	f7fc ffb3 	bl	8000fe8 <init_env>
	init_env(&environment);
 8004082:	a805      	add	r0, sp, #20
 8004084:	f7fc ffb0 	bl	8000fe8 <init_env>
	command_e telemetry_command = IDLE_COMMAND;
 8004088:	239b      	movs	r3, #155	; 0x9b
	osDelay(1000);
 800408a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	command_e telemetry_command = IDLE_COMMAND;
 800408e:	f88d 3007 	strb.w	r3, [sp, #7]
	osDelay(1000);
 8004092:	f00c fa45 	bl	8010520 <osDelay>
	tick_count = osKernelGetTickCount();
 8004096:	f00c f9d5 	bl	8010444 <osKernelGetTickCount>
 800409a:	4605      	mov	r5, r0
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 800409c:	f00c f9e6 	bl	801046c <osKernelGetTickFreq>
 80040a0:	fbb0 f6f6 	udiv	r6, r0, r6
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 80040a4:	2301      	movs	r3, #1
 80040a6:	f10d 0207 	add.w	r2, sp, #7
 80040aa:	4639      	mov	r1, r7
 80040ac:	4640      	mov	r0, r8
 80040ae:	f7fe fab1 	bl	8002614 <ReadMutex>
		if(telemetry_command == CALIBRATE_SENSORS && flight_phase_detection.flight_phase == IDLE){
 80040b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		tick_count += tick_update;
 80040b6:	4435      	add	r5, r6
		if(telemetry_command == CALIBRATE_SENSORS && flight_phase_detection.flight_phase == IDLE){
 80040b8:	2b49      	cmp	r3, #73	; 0x49
 80040ba:	d109      	bne.n	80040d0 <vTaskFsm+0x80>
 80040bc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d105      	bne.n	80040d0 <vTaskFsm+0x80>
			reset_flight_phase_detection(&flight_phase_detection);
 80040c4:	4620      	mov	r0, r4
 80040c6:	f7fd f99d 	bl	8001404 <reset_flight_phase_detection>
			telemetry_command = IDLE_COMMAND;
 80040ca:	239b      	movs	r3, #155	; 0x9b
 80040cc:	f88d 3007 	strb.w	r3, [sp, #7]
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm, sizeof(state_est_data_global));
 80040d0:	233c      	movs	r3, #60	; 0x3c
 80040d2:	aa0d      	add	r2, sp, #52	; 0x34
 80040d4:	4649      	mov	r1, r9
 80040d6:	4813      	ldr	r0, [pc, #76]	; (8004124 <vTaskFsm+0xd4>)
 80040d8:	f7fe fa9c 	bl	8002614 <ReadMutex>


		/* Update Local Environment Data */
		ReadMutex(&env_mutex, &global_env, &environment, sizeof(global_env));
 80040dc:	2310      	movs	r3, #16
 80040de:	aa05      	add	r2, sp, #20
 80040e0:	4911      	ldr	r1, [pc, #68]	; (8004128 <vTaskFsm+0xd8>)
 80040e2:	4812      	ldr	r0, [pc, #72]	; (800412c <vTaskFsm+0xdc>)
 80040e4:	f7fe fa96 	bl	8002614 <ReadMutex>

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 80040e8:	4620      	mov	r0, r4
 80040ea:	aa05      	add	r2, sp, #20
 80040ec:	a90d      	add	r1, sp, #52	; 0x34
 80040ee:	f7fd f8ff 	bl	80012f0 <detect_flight_phase>


		/* Write updated flight Phase detection */
		if(AcquireMutex(&fsm_mutex) == osOK){
 80040f2:	480f      	ldr	r0, [pc, #60]	; (8004130 <vTaskFsm+0xe0>)
 80040f4:	f7fe fa80 	bl	80025f8 <AcquireMutex>
 80040f8:	b938      	cbnz	r0, 800410a <vTaskFsm+0xba>
			global_flight_phase_detection = flight_phase_detection;
 80040fa:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <vTaskFsm+0xe4>)
 80040fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004100:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			ReleaseMutex(&fsm_mutex);
 8004104:	480a      	ldr	r0, [pc, #40]	; (8004130 <vTaskFsm+0xe0>)
 8004106:	f7fe fa82 	bl	800260e <ReleaseMutex>
		}

		logRocketState(osKernelGetTickCount(), flight_phase_detection);
 800410a:	f00c f99b 	bl	8010444 <osKernelGetTickCount>
 800410e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004112:	f7fe fb65 	bl	80027e0 <logRocketState>

		/* Sleep */
		osDelayUntil(tick_count);
 8004116:	4628      	mov	r0, r5
 8004118:	f00c fa1c 	bl	8010554 <osDelayUntil>
		tick_count += tick_update;
 800411c:	e7c2      	b.n	80040a4 <vTaskFsm+0x54>
 800411e:	bf00      	nop
 8004120:	240166d4 	.word	0x240166d4
 8004124:	240166a8 	.word	0x240166a8
 8004128:	24000224 	.word	0x24000224
 800412c:	2400c214 	.word	0x2400c214
 8004130:	24009cd4 	.word	0x24009cd4
 8004134:	24000234 	.word	0x24000234
 8004138:	2400c20c 	.word	0x2400c20c
 800413c:	24000294 	.word	0x24000294

08004140 <vTaskGps>:
 *      Author: Luca Jost
 */

#include "tasks/task_gps.h"

void vTaskGps(void *argument) {
 8004140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004144:	b0b3      	sub	sp, #204	; 0xcc

	UBLOX GPS1 = { 0, &huart1 };
 8004146:	222c      	movs	r2, #44	; 0x2c
 8004148:	2100      	movs	r1, #0
	UBLOX GPS2 = { 1, &huart2 };
 800414a:	2401      	movs	r4, #1
	UBLOX GPS1 = { 0, &huart1 };
 800414c:	a811      	add	r0, sp, #68	; 0x44
	UBLOX GPS3 = { 2, &huart3 };

	int timeout_counter1 = 0;
	int timeout_counter2 = 0;
	int timeout_counter3 = 0;
 800414e:	2500      	movs	r5, #0
	UBLOX GPS1 = { 0, &huart1 };
 8004150:	f00f fce5 	bl	8013b1e <memset>
 8004154:	4b80      	ldr	r3, [pc, #512]	; (8004358 <vTaskGps+0x218>)
	UBLOX GPS2 = { 1, &huart2 };
 8004156:	222c      	movs	r2, #44	; 0x2c
 8004158:	2100      	movs	r1, #0
 800415a:	a81c      	add	r0, sp, #112	; 0x70
	UBLOX GPS1 = { 0, &huart1 };
 800415c:	9312      	str	r3, [sp, #72]	; 0x48
	UBLOX GPS2 = { 1, &huart2 };
 800415e:	f00f fcde 	bl	8013b1e <memset>
 8004162:	4b7e      	ldr	r3, [pc, #504]	; (800435c <vTaskGps+0x21c>)
	UBLOX GPS3 = { 2, &huart3 };
 8004164:	222c      	movs	r2, #44	; 0x2c
 8004166:	2100      	movs	r1, #0
 8004168:	a827      	add	r0, sp, #156	; 0x9c
	UBLOX GPS2 = { 1, &huart2 };
 800416a:	931d      	str	r3, [sp, #116]	; 0x74
 800416c:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
	UBLOX GPS3 = { 2, &huart3 };
 8004170:	f00f fcd5 	bl	8013b1e <memset>
 8004174:	2302      	movs	r3, #2
	int timeout_counter2 = 0;
 8004176:	462f      	mov	r7, r5
	int timeout_counter1 = 0;
 8004178:	462e      	mov	r6, r5
				gps_reset(&GPS3);
				timeout_counter3 = 0;
			}
		}

		UsbPrint(
 800417a:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 800436c <vTaskGps+0x22c>
	UBLOX GPS3 = { 2, &huart3 };
 800417e:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
 8004182:	4b77      	ldr	r3, [pc, #476]	; (8004360 <vTaskGps+0x220>)
				"[GPS1] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
				GPS1.data.hour, GPS1.data.minute, GPS1.data.second,
				GPS1.data.lat_deg, GPS1.data.lat_decimal, GPS1.data.lon_deg,
				GPS1.data.lon_decimal, GPS1.data.satellite, GPS1.data.altitude);

		UsbPrint(
 8004184:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8004370 <vTaskGps+0x230>
	UBLOX GPS3 = { 2, &huart3 };
 8004188:	9328      	str	r3, [sp, #160]	; 0xa0
	tick_count = osKernelGetTickCount();
 800418a:	f00c f95b 	bl	8010444 <osKernelGetTickCount>
 800418e:	4680      	mov	r8, r0
	tick_update = osKernelGetTickFreq() / GPS_SAMPLE_RATE;
 8004190:	f00c f96c 	bl	801046c <osKernelGetTickFreq>
 8004194:	fa20 f904 	lsr.w	r9, r0, r4
	osDelay(600);
 8004198:	f44f 7016 	mov.w	r0, #600	; 0x258
 800419c:	f00c f9c0 	bl	8010520 <osDelay>
	gps_dma_init(&GPS1);
 80041a0:	a811      	add	r0, sp, #68	; 0x44
 80041a2:	f7fc fd5d 	bl	8000c60 <gps_dma_init>
	gps_dma_init(&GPS2);
 80041a6:	a81c      	add	r0, sp, #112	; 0x70
 80041a8:	f7fc fd5a 	bl	8000c60 <gps_dma_init>
	gps_dma_init(&GPS3);
 80041ac:	a827      	add	r0, sp, #156	; 0x9c
 80041ae:	f7fc fd57 	bl	8000c60 <gps_dma_init>
		if (gps_read_sensor(&GPS1)) {
 80041b2:	a811      	add	r0, sp, #68	; 0x44
		tick_count += tick_update;
 80041b4:	44c8      	add	r8, r9
		if (gps_read_sensor(&GPS1)) {
 80041b6:	f7fc fd69 	bl	8000c8c <gps_read_sensor>
 80041ba:	b930      	cbnz	r0, 80041ca <vTaskGps+0x8a>
			timeout_counter1++;
 80041bc:	3601      	adds	r6, #1
			if (timeout_counter1 == 10) {
 80041be:	2e0a      	cmp	r6, #10
 80041c0:	d104      	bne.n	80041cc <vTaskGps+0x8c>
 80041c2:	9007      	str	r0, [sp, #28]
				gps_reset(&GPS1);
 80041c4:	a811      	add	r0, sp, #68	; 0x44
 80041c6:	f7fc fd87 	bl	8000cd8 <gps_reset>
			timeout_counter1 = 0;
 80041ca:	2600      	movs	r6, #0
		if (gps_read_sensor(&GPS2)) {
 80041cc:	a81c      	add	r0, sp, #112	; 0x70
 80041ce:	f7fc fd5d 	bl	8000c8c <gps_read_sensor>
 80041d2:	b930      	cbnz	r0, 80041e2 <vTaskGps+0xa2>
			timeout_counter2++;
 80041d4:	3701      	adds	r7, #1
			if (timeout_counter2 == 10) {
 80041d6:	2f0a      	cmp	r7, #10
 80041d8:	d104      	bne.n	80041e4 <vTaskGps+0xa4>
 80041da:	9007      	str	r0, [sp, #28]
				gps_reset(&GPS2);
 80041dc:	a81c      	add	r0, sp, #112	; 0x70
 80041de:	f7fc fd7b 	bl	8000cd8 <gps_reset>
			timeout_counter2 = 0;
 80041e2:	2700      	movs	r7, #0
		if (gps_read_sensor(&GPS3)) {
 80041e4:	a827      	add	r0, sp, #156	; 0x9c
 80041e6:	f7fc fd51 	bl	8000c8c <gps_read_sensor>
 80041ea:	b930      	cbnz	r0, 80041fa <vTaskGps+0xba>
			timeout_counter3++;
 80041ec:	3501      	adds	r5, #1
			if (timeout_counter3 == 10) {
 80041ee:	2d0a      	cmp	r5, #10
 80041f0:	d104      	bne.n	80041fc <vTaskGps+0xbc>
 80041f2:	9007      	str	r0, [sp, #28]
				gps_reset(&GPS3);
 80041f4:	a827      	add	r0, sp, #156	; 0x9c
 80041f6:	f7fc fd6f 	bl	8000cd8 <gps_reset>
			timeout_counter3 = 0;
 80041fa:	2500      	movs	r5, #0
		UsbPrint(
 80041fc:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8004200:	4650      	mov	r0, sl
 8004202:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004204:	9305      	str	r3, [sp, #20]
 8004206:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800420a:	9304      	str	r3, [sp, #16]
 800420c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800420e:	9303      	str	r3, [sp, #12]
 8004210:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8004214:	9302      	str	r3, [sp, #8]
 8004216:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004218:	9301      	str	r3, [sp, #4]
 800421a:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004224:	f7fe fb74 	bl	8002910 <UsbPrint>
		UsbPrint(
 8004228:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800422c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800422e:	4658      	mov	r0, fp
 8004230:	9305      	str	r3, [sp, #20]
 8004232:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8004236:	9304      	str	r3, [sp, #16]
 8004238:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800423a:	9303      	str	r3, [sp, #12]
 800423c:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
 8004240:	9302      	str	r3, [sp, #8]
 8004242:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	f89d 3085 	ldrb.w	r3, [sp, #133]	; 0x85
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 8004250:	f7fe fb5e 	bl	8002910 <UsbPrint>
				"[GPS2] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d Alt: %d\n",
				GPS2.data.hour, GPS2.data.minute, GPS2.data.second,
				GPS2.data.lat_deg, GPS2.data.lat_decimal, GPS2.data.lon_deg,
				GPS2.data.lon_decimal, GPS2.data.satellite, GPS2.data.altitude);

		UsbPrint(
 8004254:	f8bd 30c4 	ldrh.w	r3, [sp, #196]	; 0xc4
 8004258:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800425a:	9305      	str	r3, [sp, #20]
 800425c:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8004260:	4840      	ldr	r0, [pc, #256]	; (8004364 <vTaskGps+0x224>)
 8004262:	9304      	str	r3, [sp, #16]
 8004264:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8004266:	9303      	str	r3, [sp, #12]
 8004268:	f89d 30b8 	ldrb.w	r3, [sp, #184]	; 0xb8
 800426c:	9302      	str	r3, [sp, #8]
 800426e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	f89d 30b1 	ldrb.w	r3, [sp, #177]	; 0xb1
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 800427c:	f7fe fb48 	bl	8002910 <UsbPrint>
				GPS3.data.hour, GPS3.data.minute, GPS3.data.second,
				GPS3.data.lat_deg, GPS3.data.lat_decimal, GPS3.data.lon_deg,
				GPS3.data.lon_decimal, GPS3.data.satellite, GPS3.data.altitude);

		/* Write GPS to Log */
		logSensor(osKernelGetTickCount(), 1, GPS, &GPS1.data);
 8004280:	f00c f8e0 	bl	8010444 <osKernelGetTickCount>
 8004284:	ab13      	add	r3, sp, #76	; 0x4c
 8004286:	2203      	movs	r2, #3
 8004288:	2101      	movs	r1, #1
 800428a:	f7fe fa17 	bl	80026bc <logSensor>
		logSensor(osKernelGetTickCount(), 2, GPS, &GPS2.data);
 800428e:	f00c f8d9 	bl	8010444 <osKernelGetTickCount>
 8004292:	ab1e      	add	r3, sp, #120	; 0x78
 8004294:	2203      	movs	r2, #3
 8004296:	2102      	movs	r1, #2
 8004298:	f7fe fa10 	bl	80026bc <logSensor>
		logSensor(osKernelGetTickCount(), 3, GPS, &GPS3.data);
 800429c:	f00c f8d2 	bl	8010444 <osKernelGetTickCount>
 80042a0:	2203      	movs	r2, #3
 80042a2:	ab29      	add	r3, sp, #164	; 0xa4
 80042a4:	4611      	mov	r1, r2
 80042a6:	f7fe fa09 	bl	80026bc <logSensor>

		/* get best possible GPS for Telemetry */

		if (GPS1.data.satellite >= GPS2.data.satellite) {
 80042aa:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 80042ae:	f89d 1084 	ldrb.w	r1, [sp, #132]	; 0x84
 80042b2:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 80042b6:	428a      	cmp	r2, r1
 80042b8:	d30f      	bcc.n	80042da <vTaskGps+0x19a>
			if (GPS1.data.satellite >= GPS3.data.satellite) {
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d913      	bls.n	80042e6 <vTaskGps+0x1a6>
//			gps_telemetry.lat_decimal = GPS2.data.lat_decimal;
//			gps_telemetry.lon_deg = GPS2.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS2.data.lon_decimal;
//			gps_telemetry.satellite = GPS2.data.satellite;
		} else {
			gps_telemetry = GPS3.data;
 80042be:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
 80042c2:	ac08      	add	r4, sp, #32
 80042c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80042c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80042ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042d0:	f8dc 3000 	ldr.w	r3, [ip]
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	2403      	movs	r4, #3
 80042d8:	e012      	b.n	8004300 <vTaskGps+0x1c0>
		} else if (GPS2.data.satellite >= GPS3.data.satellite) {
 80042da:	4299      	cmp	r1, r3
 80042dc:	d22d      	bcs.n	800433a <vTaskGps+0x1fa>
		} else if (GPS3.data.satellite >= GPS1.data.satellite) {
 80042de:	429a      	cmp	r2, r3
 80042e0:	d9ed      	bls.n	80042be <vTaskGps+0x17e>
		if (choose_GPS == 1) {
 80042e2:	2c01      	cmp	r4, #1
 80042e4:	d127      	bne.n	8004336 <vTaskGps+0x1f6>
			gps_telemetry = GPS1.data;
 80042e6:	ac13      	add	r4, sp, #76	; 0x4c
 80042e8:	f10d 0c20 	add.w	ip, sp, #32
 80042ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80042f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	2401      	movs	r4, #1
 80042fc:	f8cc 3000 	str.w	r3, [ip]
//			gps_telemetry.lon_deg = GPS3.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS3.data.lon_decimal;
//			gps_telemetry.satellite = GPS3.data.satellite;
		}

		if (AcquireMutex(&gps_mutex) == osOK) {
 8004300:	4819      	ldr	r0, [pc, #100]	; (8004368 <vTaskGps+0x228>)
 8004302:	f7fe f979 	bl	80025f8 <AcquireMutex>
 8004306:	b990      	cbnz	r0, 800432e <vTaskGps+0x1ee>
			globalGPS = gps_telemetry;
 8004308:	f10d 0e20 	add.w	lr, sp, #32
 800430c:	f8df c064 	ldr.w	ip, [pc, #100]	; 8004374 <vTaskGps+0x234>
 8004310:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004314:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004318:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800431c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004320:	f8de 3000 	ldr.w	r3, [lr]
			ReleaseMutex(&gps_mutex);
 8004324:	4810      	ldr	r0, [pc, #64]	; (8004368 <vTaskGps+0x228>)
			globalGPS = gps_telemetry;
 8004326:	f8cc 3000 	str.w	r3, [ip]
			ReleaseMutex(&gps_mutex);
 800432a:	f7fe f970 	bl	800260e <ReleaseMutex>
		}
		/* Sleep */
		osDelayUntil(tick_count);
 800432e:	4640      	mov	r0, r8
 8004330:	f00c f910 	bl	8010554 <osDelayUntil>
		tick_count += tick_update;
 8004334:	e73d      	b.n	80041b2 <vTaskGps+0x72>
		} else if (choose_GPS == 2) {
 8004336:	2c02      	cmp	r4, #2
 8004338:	d1c1      	bne.n	80042be <vTaskGps+0x17e>
			gps_telemetry = GPS2.data;
 800433a:	ac1e      	add	r4, sp, #120	; 0x78
 800433c:	f10d 0c20 	add.w	ip, sp, #32
 8004340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004342:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004348:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	2402      	movs	r4, #2
 8004350:	f8cc 3000 	str.w	r3, [ip]
 8004354:	e7d4      	b.n	8004300 <vTaskGps+0x1c0>
 8004356:	bf00      	nop
 8004358:	24010480 	.word	0x24010480
 800435c:	2401c924 	.word	0x2401c924
 8004360:	24009e78 	.word	0x24009e78
 8004364:	08015e3d 	.word	0x08015e3d
 8004368:	2401a73c 	.word	0x2401a73c
 800436c:	08015dbc 	.word	0x08015dbc
 8004370:	08015dfd 	.word	0x08015dfd
 8004374:	240166b0 	.word	0x240166b0

08004378 <testairbrakes>:

		osDelayUntil(tick_count);
	}
}

void testairbrakes(int32_t position){
 8004378:	b508      	push	{r3, lr}
	MoveToPositionPPM(position);
 800437a:	f7fc fa43 	bl	8000804 <MoveToPositionPPM>
	osDelay(100);
 800437e:	2064      	movs	r0, #100	; 0x64
 8004380:	f00c f8ce 	bl	8010520 <osDelay>
	MoveToPositionPPM(2);
 8004384:	2002      	movs	r0, #2
}
 8004386:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MoveToPositionPPM(2);
 800438a:	f7fc ba3b 	b.w	8000804 <MoveToPositionPPM>
	...

08004390 <vTaskMotorCont>:
void vTaskMotorCont(void *argument) {
 8004390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	command_e telemetry_command = IDLE_COMMAND;
 8004394:	239b      	movs	r3, #155	; 0x9b
void vTaskMotorCont(void *argument) {
 8004396:	b086      	sub	sp, #24
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004398:	2400      	movs	r4, #0
	osDelay(3000);
 800439a:	f640 30b8 	movw	r0, #3000	; 0xbb8
	command_e telemetry_command = IDLE_COMMAND;
 800439e:	f88d 3003 	strb.w	r3, [sp, #3]
	flight_phase_detection.flight_phase = IDLE;
 80043a2:	2301      	movs	r3, #1
	flight_phase_detection_t flight_phase_detection = { 0 };
 80043a4:	9403      	str	r4, [sp, #12]
	flight_phase_detection.flight_phase = IDLE;
 80043a6:	f88d 300c 	strb.w	r3, [sp, #12]
	flight_phase_detection.mach_number = SUBSONIC;
 80043aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	flight_phase_detection_t flight_phase_detection = { 0 };
 80043ae:	9405      	str	r4, [sp, #20]
	flight_phase_detection.mach_number = SUBSONIC;
 80043b0:	9304      	str	r3, [sp, #16]
	osDelay(3000);
 80043b2:	f00c f8b5 	bl	8010520 <osDelay>
	int32_t measured_motor_position = 0;
 80043b6:	e9cd 4401 	strd	r4, r4, [sp, #4]
	while(EnableMotor() != osOK){
 80043ba:	f7fc faef 	bl	800099c <EnableMotor>
 80043be:	2800      	cmp	r0, #0
 80043c0:	f040 8092 	bne.w	80044e8 <vTaskMotorCont+0x158>
	SetPositionMode(position_mode);
 80043c4:	2001      	movs	r0, #1
 80043c6:	f7fc fa08 	bl	80007da <SetPositionMode>
	while(SetPositionMode(position_mode) != osOK){
 80043ca:	2001      	movs	r0, #1
 80043cc:	f7fc fa05 	bl	80007da <SetPositionMode>
 80043d0:	2800      	cmp	r0, #0
 80043d2:	f040 808e 	bne.w	80044f2 <vTaskMotorCont+0x162>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 80043d6:	4a49      	ldr	r2, [pc, #292]	; (80044fc <vTaskMotorCont+0x16c>)
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 80043d8:	2619      	movs	r6, #25
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 80043da:	f242 7010 	movw	r0, #10000	; 0x2710
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 80043de:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8004520 <vTaskMotorCont+0x190>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 80043e2:	4611      	mov	r1, r2
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 80043e4:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8004524 <vTaskMotorCont+0x194>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 80043e8:	f7fc fa3a 	bl	8000860 <ConfigurePPM>
		UsbPrint("[MOTOR] Read Position:%d\n", measured_motor_position);
 80043ec:	f8df a138 	ldr.w	sl, [pc, #312]	; 8004528 <vTaskMotorCont+0x198>
	tick_count = osKernelGetTickCount();
 80043f0:	f00c f828 	bl	8010444 <osKernelGetTickCount>
 80043f4:	4605      	mov	r5, r0
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 80043f6:	f00c f839 	bl	801046c <osKernelGetTickFreq>
 80043fa:	fbb0 f6f6 	udiv	r6, r0, r6
		motor_status = GetPosition(&measured_motor_position);
 80043fe:	a802      	add	r0, sp, #8
		tick_count += tick_update;
 8004400:	4435      	add	r5, r6
		motor_status = GetPosition(&measured_motor_position);
 8004402:	f7fc faf6 	bl	80009f2 <GetPosition>
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8004406:	2301      	movs	r3, #1
 8004408:	f10d 0203 	add.w	r2, sp, #3
 800440c:	4641      	mov	r1, r8
 800440e:	4648      	mov	r0, r9
 8004410:	f7fe f900 	bl	8002614 <ReadMutex>
		UsbPrint("[MOTOR] Read Position:%d\n", measured_motor_position);
 8004414:	9902      	ldr	r1, [sp, #8]
 8004416:	4650      	mov	r0, sl
 8004418:	f7fe fa7a 	bl	8002910 <UsbPrint>
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(global_flight_phase_detection));
 800441c:	230c      	movs	r3, #12
 800441e:	4938      	ldr	r1, [pc, #224]	; (8004500 <vTaskMotorCont+0x170>)
 8004420:	eb0d 0203 	add.w	r2, sp, r3
 8004424:	4837      	ldr	r0, [pc, #220]	; (8004504 <vTaskMotorCont+0x174>)
 8004426:	f7fe f8f5 	bl	8002614 <ReadMutex>
		ReadMutex(&controller_mutex, &controller_output_global, &controller_actuation, sizeof(controller_actuation));
 800442a:	2304      	movs	r3, #4
 800442c:	4936      	ldr	r1, [pc, #216]	; (8004508 <vTaskMotorCont+0x178>)
 800442e:	eb0d 0203 	add.w	r2, sp, r3
 8004432:	4836      	ldr	r0, [pc, #216]	; (800450c <vTaskMotorCont+0x17c>)
 8004434:	f7fe f8ee 	bl	8002614 <ReadMutex>
		desired_motor_position = (int32_t)(((float)controller_actuation)/1000*(-150));
 8004438:	eddd 7a01 	vldr	s15, [sp, #4]
 800443c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8004510 <vTaskMotorCont+0x180>
 8004440:	f06f 0395 	mvn.w	r3, #149	; 0x95
 8004444:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004448:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800444c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004514 <vTaskMotorCont+0x184>
 8004450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004458:	ee17 1a90 	vmov	r1, s15
 800445c:	4299      	cmp	r1, r3
 800445e:	bfb8      	it	lt
 8004460:	4619      	movlt	r1, r3
		if(flight_phase_detection.flight_phase == COASTING){
 8004462:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004466:	2902      	cmp	r1, #2
 8004468:	bfa8      	it	ge
 800446a:	2102      	movge	r1, #2
 800446c:	2b04      	cmp	r3, #4
			motor_status = MoveToPositionPPM(desired_motor_position);
 800446e:	bf0c      	ite	eq
 8004470:	4608      	moveq	r0, r1
			motor_status = MoveToPositionPPM(2);
 8004472:	2002      	movne	r0, #2
 8004474:	460c      	mov	r4, r1
 8004476:	f7fc f9c5 	bl	8000804 <MoveToPositionPPM>
		if(flight_phase_detection.flight_phase == IDLE && telemetry_command == AIRBRAKE_TEST_COMMAND
 800447a:	f89d 300c 	ldrb.w	r3, [sp, #12]
			motor_status = MoveToPositionPPM(2);
 800447e:	4607      	mov	r7, r0
		if(flight_phase_detection.flight_phase == IDLE && telemetry_command == AIRBRAKE_TEST_COMMAND
 8004480:	2b01      	cmp	r3, #1
 8004482:	d110      	bne.n	80044a6 <vTaskMotorCont+0x116>
 8004484:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004488:	2bd9      	cmp	r3, #217	; 0xd9
 800448a:	d10c      	bne.n	80044a6 <vTaskMotorCont+0x116>
				&& osKernelGetTickCount() < 60000){
 800448c:	f00b ffda 	bl	8010444 <osKernelGetTickCount>
 8004490:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8004494:	4298      	cmp	r0, r3
 8004496:	d806      	bhi.n	80044a6 <vTaskMotorCont+0x116>
			testairbrakes(-140);
 8004498:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 800449c:	f7ff ff6c 	bl	8004378 <testairbrakes>
			telemetry_command = IDLE_COMMAND;
 80044a0:	239b      	movs	r3, #155	; 0x9b
 80044a2:	f88d 3003 	strb.w	r3, [sp, #3]
		logMotor(osKernelGetTickCount(), desired_motor_position, measured_motor_position);
 80044a6:	f00b ffcd 	bl	8010444 <osKernelGetTickCount>
 80044aa:	9a02      	ldr	r2, [sp, #8]
 80044ac:	4621      	mov	r1, r4
 80044ae:	f7fe fa0d 	bl	80028cc <logMotor>
		if(motor_status != osOK && flight_phase_detection.flight_phase == IDLE){
 80044b2:	b15f      	cbz	r7, 80044cc <vTaskMotorCont+0x13c>
 80044b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d107      	bne.n	80044cc <vTaskMotorCont+0x13c>
			DisableMotor();
 80044bc:	f7fc f97c 	bl	80007b8 <DisableMotor>
			osDelay(1000);
 80044c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044c4:	f00c f82c 	bl	8010520 <osDelay>
			EnableMotor();
 80044c8:	f7fc fa68 	bl	800099c <EnableMotor>
		if(AcquireMutex(&motor_mutex) == osOK){
 80044cc:	4812      	ldr	r0, [pc, #72]	; (8004518 <vTaskMotorCont+0x188>)
 80044ce:	f7fe f893 	bl	80025f8 <AcquireMutex>
 80044d2:	b928      	cbnz	r0, 80044e0 <vTaskMotorCont+0x150>
			global_airbrake_extension = measured_motor_position;
 80044d4:	4b11      	ldr	r3, [pc, #68]	; (800451c <vTaskMotorCont+0x18c>)
 80044d6:	9a02      	ldr	r2, [sp, #8]
			ReleaseMutex(&motor_mutex);
 80044d8:	480f      	ldr	r0, [pc, #60]	; (8004518 <vTaskMotorCont+0x188>)
			global_airbrake_extension = measured_motor_position;
 80044da:	601a      	str	r2, [r3, #0]
			ReleaseMutex(&motor_mutex);
 80044dc:	f7fe f897 	bl	800260e <ReleaseMutex>
		osDelayUntil(tick_count);
 80044e0:	4628      	mov	r0, r5
 80044e2:	f00c f837 	bl	8010554 <osDelayUntil>
		tick_count += tick_update;
 80044e6:	e78a      	b.n	80043fe <vTaskMotorCont+0x6e>
		osDelay(1000);
 80044e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044ec:	f00c f818 	bl	8010520 <osDelay>
 80044f0:	e763      	b.n	80043ba <vTaskMotorCont+0x2a>
		osDelay(1000);
 80044f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044f6:	f00c f813 	bl	8010520 <osDelay>
 80044fa:	e766      	b.n	80043ca <vTaskMotorCont+0x3a>
 80044fc:	000186a0 	.word	0x000186a0
 8004500:	24000234 	.word	0x24000234
 8004504:	24009cd4 	.word	0x24009cd4
 8004508:	24000220 	.word	0x24000220
 800450c:	2400e2a8 	.word	0x2400e2a8
 8004510:	447a0000 	.word	0x447a0000
 8004514:	c3160000 	.word	0xc3160000
 8004518:	24009e70 	.word	0x24009e70
 800451c:	2401a830 	.word	0x2401a830
 8004520:	240166d4 	.word	0x240166d4
 8004524:	2400c20c 	.word	0x2400c20c
 8004528:	08015e7e 	.word	0x08015e7e

0800452c <vTaskPeripherals>:
 */

#include "tasks/task_peripherals.h"


void vTaskPeripherals(void *argument) {
 800452c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* For periodic update */
	uint32_t tick_count, tick_update;

	osDelay(1200);
 8004530:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
void vTaskPeripherals(void *argument) {
 8004534:	b087      	sub	sp, #28
	osDelay(1200);
 8004536:	f00b fff3 	bl	8010520 <osDelay>
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 800453a:	2201      	movs	r2, #1
 800453c:	2102      	movs	r1, #2
 800453e:	4860      	ldr	r0, [pc, #384]	; (80046c0 <vTaskPeripherals+0x194>)

	/* Telemetry Command */
	command_e telemetry_command = IDLE_COMMAND;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004540:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 8004542:	f003 ffbb 	bl	80084bc <HAL_GPIO_WritePin>
	command_e telemetry_command = IDLE_COMMAND;
 8004546:	239b      	movs	r3, #155	; 0x9b
	reset_flight_phase_detection(&flight_phase_detection);
 8004548:	a803      	add	r0, sp, #12
	flight_phase_detection_t flight_phase_detection = { 0 };
 800454a:	9405      	str	r4, [sp, #20]
	bool buzzer_on_telemetry = false;
 800454c:	46a2      	mov	sl, r4
	command_e telemetry_command = IDLE_COMMAND;
 800454e:	f88d 300b 	strb.w	r3, [sp, #11]
	bool buzzer_on_fsm = false;
 8004552:	46a1      	mov	r9, r4
	bool camera_ready = false;
 8004554:	4627      	mov	r7, r4
	bool camera_wait = false;
 8004556:	4626      	mov	r6, r4
	uint32_t camera_counter = 0;
 8004558:	4625      	mov	r5, r4
	flight_phase_detection_t flight_phase_detection = { 0 };
 800455a:	e9cd 4403 	strd	r4, r4, [sp, #12]
	reset_flight_phase_detection(&flight_phase_detection);
 800455e:	f7fc ff51 	bl	8001404 <reset_flight_phase_detection>


	/* Infinite loop */

	tick_update = osKernelGetTickFreq() / PERIPHERALS_SAMPLING_FREQ;
 8004562:	f00b ff83 	bl	801046c <osKernelGetTickFreq>
 8004566:	230a      	movs	r3, #10
 8004568:	fbb0 fbf3 	udiv	fp, r0, r3
	tick_count = osKernelGetTickCount();
 800456c:	f00b ff6a 	bl	8010444 <osKernelGetTickCount>
 8004570:	4680      	mov	r8, r0
	bool camera_trigger = false;
 8004572:	9401      	str	r4, [sp, #4]
	bool camera_enabled = false;
 8004574:	9400      	str	r4, [sp, #0]
	while (1) {
		/* Tick Update */
		tick_count += tick_update;

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8004576:	2301      	movs	r3, #1
 8004578:	f10d 020b 	add.w	r2, sp, #11
 800457c:	4951      	ldr	r1, [pc, #324]	; (80046c4 <vTaskPeripherals+0x198>)
		tick_count += tick_update;
 800457e:	44d8      	add	r8, fp
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8004580:	4851      	ldr	r0, [pc, #324]	; (80046c8 <vTaskPeripherals+0x19c>)
 8004582:	f7fe f847 	bl	8002614 <ReadMutex>

		/* Read Flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(global_flight_phase_detection));
 8004586:	230c      	movs	r3, #12
 8004588:	4950      	ldr	r1, [pc, #320]	; (80046cc <vTaskPeripherals+0x1a0>)
 800458a:	eb0d 0203 	add.w	r2, sp, r3
 800458e:	4850      	ldr	r0, [pc, #320]	; (80046d0 <vTaskPeripherals+0x1a4>)
 8004590:	f7fe f840 	bl	8002614 <ReadMutex>

		/* Enable Buzzer trough Telemetry */
		if(telemetry_command == ENABLE_BUZZER){
 8004594:	f89d 300b 	ldrb.w	r3, [sp, #11]
			buzzer_on_telemetry = !buzzer_on_telemetry;
		}

		/* Enable Buzzer Trough FSM */
		if(flight_phase_detection.flight_phase == RECOVERY){
 8004598:	f89d 200c 	ldrb.w	r2, [sp, #12]
		if(telemetry_command == ENABLE_BUZZER){
 800459c:	2b71      	cmp	r3, #113	; 0x71
			buzzer_on_telemetry = !buzzer_on_telemetry;
 800459e:	bf08      	it	eq
 80045a0:	f08a 0a01 	eoreq.w	sl, sl, #1
			buzzer_on_fsm = true;
 80045a4:	2a06      	cmp	r2, #6
 80045a6:	bf08      	it	eq
 80045a8:	f04f 0901 	moveq.w	r9, #1
		}

		/* Enable Self Power Hold */
		if(telemetry_command == TELEMETRY_HIGH_SAMPLING){
 80045ac:	2b0d      	cmp	r3, #13
 80045ae:	d104      	bne.n	80045ba <vTaskPeripherals+0x8e>
			HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 80045b0:	2200      	movs	r2, #0
 80045b2:	2102      	movs	r1, #2
 80045b4:	4842      	ldr	r0, [pc, #264]	; (80046c0 <vTaskPeripherals+0x194>)
 80045b6:	f003 ff81 	bl	80084bc <HAL_GPIO_WritePin>
		}

		/* Disable Self Power Hold */
		if(telemetry_command == DISABLE_SELF_HOLD){
 80045ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80045be:	2bfb      	cmp	r3, #251	; 0xfb
 80045c0:	d104      	bne.n	80045cc <vTaskPeripherals+0xa0>
			HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 80045c2:	2201      	movs	r2, #1
 80045c4:	2102      	movs	r1, #2
 80045c6:	483e      	ldr	r0, [pc, #248]	; (80046c0 <vTaskPeripherals+0x194>)
 80045c8:	f003 ff78 	bl	80084bc <HAL_GPIO_WritePin>
		}

		/* Start Enable Camera Sequence */
		if((telemetry_command == ENABLE_CAMERA) && !camera_enabled){
 80045cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d113      	bne.n	80045fc <vTaskPeripherals+0xd0>
 80045d4:	9b00      	ldr	r3, [sp, #0]
 80045d6:	b98b      	cbnz	r3, 80045fc <vTaskPeripherals+0xd0>
			camera_enabled = true;
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_SET);
 80045d8:	2201      	movs	r2, #1
 80045da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045de:	483d      	ldr	r0, [pc, #244]	; (80046d4 <vTaskPeripherals+0x1a8>)
 80045e0:	f003 ff6c 	bl	80084bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_SET);
 80045e4:	2201      	movs	r2, #1
 80045e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045ea:	483a      	ldr	r0, [pc, #232]	; (80046d4 <vTaskPeripherals+0x1a8>)
 80045ec:	f003 ff66 	bl	80084bc <HAL_GPIO_WritePin>
			camera_counter = osKernelGetTickCount() + CAMERA_ON;
 80045f0:	f00b ff28 	bl	8010444 <osKernelGetTickCount>
			camera_enabled = true;
 80045f4:	2301      	movs	r3, #1
			camera_counter = osKernelGetTickCount() + CAMERA_ON;
 80045f6:	f600 55ac 	addw	r5, r0, #3500	; 0xdac
			camera_enabled = true;
 80045fa:	9300      	str	r3, [sp, #0]
		}

		if((camera_counter > osKernelGetTickCount()) && !camera_wait){
 80045fc:	f00b ff22 	bl	8010444 <osKernelGetTickCount>
 8004600:	42a8      	cmp	r0, r5
 8004602:	d211      	bcs.n	8004628 <vTaskPeripherals+0xfc>
 8004604:	b986      	cbnz	r6, 8004628 <vTaskPeripherals+0xfc>
			camera_wait = true;
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_RESET);
 8004606:	4632      	mov	r2, r6
 8004608:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800460c:	4831      	ldr	r0, [pc, #196]	; (80046d4 <vTaskPeripherals+0x1a8>)
 800460e:	f003 ff55 	bl	80084bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 8004612:	4632      	mov	r2, r6
 8004614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004618:	482e      	ldr	r0, [pc, #184]	; (80046d4 <vTaskPeripherals+0x1a8>)
 800461a:	f003 ff4f 	bl	80084bc <HAL_GPIO_WritePin>
			camera_wait = true;
 800461e:	2601      	movs	r6, #1
			camera_counter = osKernelGetTickCount() + CAMERA_WAIT;
 8004620:	f00b ff10 	bl	8010444 <osKernelGetTickCount>
 8004624:	f500 757a 	add.w	r5, r0, #1000	; 0x3e8
		}

		if((camera_counter > osKernelGetTickCount()) && !camera_trigger){
 8004628:	f00b ff0c 	bl	8010444 <osKernelGetTickCount>
 800462c:	42a8      	cmp	r0, r5
 800462e:	d213      	bcs.n	8004658 <vTaskPeripherals+0x12c>
 8004630:	9b01      	ldr	r3, [sp, #4]
 8004632:	b98b      	cbnz	r3, 8004658 <vTaskPeripherals+0x12c>
			camera_trigger = true;
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_SET);
 8004634:	2201      	movs	r2, #1
 8004636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800463a:	4826      	ldr	r0, [pc, #152]	; (80046d4 <vTaskPeripherals+0x1a8>)
 800463c:	f003 ff3e 	bl	80084bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_SET);
 8004640:	2201      	movs	r2, #1
 8004642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004646:	4823      	ldr	r0, [pc, #140]	; (80046d4 <vTaskPeripherals+0x1a8>)
 8004648:	f003 ff38 	bl	80084bc <HAL_GPIO_WritePin>
			camera_counter = osKernelGetTickCount() + CAMERA_TRIGGER;
 800464c:	f00b fefa 	bl	8010444 <osKernelGetTickCount>
			camera_trigger = true;
 8004650:	2301      	movs	r3, #1
			camera_counter = osKernelGetTickCount() + CAMERA_TRIGGER;
 8004652:	f100 05c8 	add.w	r5, r0, #200	; 0xc8
			camera_trigger = true;
 8004656:	9301      	str	r3, [sp, #4]
		}

		if((camera_counter > osKernelGetTickCount()) && !camera_ready){
 8004658:	f00b fef4 	bl	8010444 <osKernelGetTickCount>
 800465c:	42a8      	cmp	r0, r5
 800465e:	d20d      	bcs.n	800467c <vTaskPeripherals+0x150>
 8004660:	b967      	cbnz	r7, 800467c <vTaskPeripherals+0x150>
			camera_ready = true;
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_RESET);
 8004662:	463a      	mov	r2, r7
 8004664:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004668:	481a      	ldr	r0, [pc, #104]	; (80046d4 <vTaskPeripherals+0x1a8>)
 800466a:	f003 ff27 	bl	80084bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 800466e:	463a      	mov	r2, r7
			camera_ready = true;
 8004670:	2701      	movs	r7, #1
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 8004672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004676:	4817      	ldr	r0, [pc, #92]	; (80046d4 <vTaskPeripherals+0x1a8>)
 8004678:	f003 ff20 	bl	80084bc <HAL_GPIO_WritePin>

		/* Camera first enable for some time, then turn off and finally turn on again */


		/* Enable Buzzer */
		if(buzzer_on_fsm ^ buzzer_on_telemetry){
 800467c:	45d1      	cmp	r9, sl
 800467e:	d011      	beq.n	80046a4 <vTaskPeripherals+0x178>
			if(buzzercounter > (400/tick_update)){
 8004680:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004684:	fbb3 f3fb 	udiv	r3, r3, fp
 8004688:	429c      	cmp	r4, r3
 800468a:	d905      	bls.n	8004698 <vTaskPeripherals+0x16c>
				HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
				buzzercounter = 0;
 800468c:	2400      	movs	r4, #0
				HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 800468e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004692:	4811      	ldr	r0, [pc, #68]	; (80046d8 <vTaskPeripherals+0x1ac>)
 8004694:	f003 ff17 	bl	80084c6 <HAL_GPIO_TogglePin>
		}

		else if(osKernelGetTickCount() > 5000){
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
		}
		buzzercounter++;
 8004698:	3401      	adds	r4, #1


		/* Sleep */
		osDelayUntil(tick_count);
 800469a:	4640      	mov	r0, r8
		buzzercounter++;
 800469c:	b2e4      	uxtb	r4, r4
		osDelayUntil(tick_count);
 800469e:	f00b ff59 	bl	8010554 <osDelayUntil>
		tick_count += tick_update;
 80046a2:	e768      	b.n	8004576 <vTaskPeripherals+0x4a>
		else if(osKernelGetTickCount() > 5000){
 80046a4:	f00b fece 	bl	8010444 <osKernelGetTickCount>
 80046a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80046ac:	4298      	cmp	r0, r3
 80046ae:	d9f3      	bls.n	8004698 <vTaskPeripherals+0x16c>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80046b0:	2200      	movs	r2, #0
 80046b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046b6:	4808      	ldr	r0, [pc, #32]	; (80046d8 <vTaskPeripherals+0x1ac>)
 80046b8:	f003 ff00 	bl	80084bc <HAL_GPIO_WritePin>
 80046bc:	e7ec      	b.n	8004698 <vTaskPeripherals+0x16c>
 80046be:	bf00      	nop
 80046c0:	58020400 	.word	0x58020400
 80046c4:	240166d4 	.word	0x240166d4
 80046c8:	2400c20c 	.word	0x2400c20c
 80046cc:	24000234 	.word	0x24000234
 80046d0:	24009cd4 	.word	0x24009cd4
 80046d4:	58021000 	.word	0x58021000
 80046d8:	58020c00 	.word	0x58020c00

080046dc <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 80046dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Try everything forever;
	for (;;) {
		osDelay(100);
 80046e0:	2064      	movs	r0, #100	; 0x64
void vTaskSdCard(void *argument) {
 80046e2:	b0cd      	sub	sp, #308	; 0x134
		osDelay(100);
 80046e4:	f00b ff1c 	bl	8010520 <osDelay>
		flight_phase_detection_t local_flight_phase;
		FRESULT res;
		char EULER_LOG_FILE_NAME[13] = "";
 80046e8:	2300      	movs	r3, #0
		UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 80046ea:	4890      	ldr	r0, [pc, #576]	; (800492c <vTaskSdCard+0x250>)
		char EULER_LOG_FILE_NAME[13] = "";
 80046ec:	9309      	str	r3, [sp, #36]	; 0x24
 80046ee:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		local_flight_phase.flight_phase = IDLE;
		resetSDCard: //UsbPrint("[STORAGE TASK] Mounting SD card\n");
		do {
			EULER_LOG_FILE_NAME[0] = 0;
			res = f_mount(&EULER_FatFS, "", 1);
 80046f2:	4c8f      	ldr	r4, [pc, #572]	; (8004930 <vTaskSdCard+0x254>)
 80046f4:	4d8f      	ldr	r5, [pc, #572]	; (8004934 <vTaskSdCard+0x258>)
			if (res != FR_OK) {
				UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 80046f6:	4e90      	ldr	r6, [pc, #576]	; (8004938 <vTaskSdCard+0x25c>)
		char EULER_LOG_FILE_NAME[13] = "";
 80046f8:	e9cd 3307 	strd	r3, r3, [sp, #28]
		UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 80046fc:	f7fe f908 	bl	8002910 <UsbPrint>
		local_flight_phase.flight_phase = IDLE;
 8004700:	2301      	movs	r3, #1
 8004702:	f88d 3010 	strb.w	r3, [sp, #16]
			EULER_LOG_FILE_NAME[0] = 0;
 8004706:	2700      	movs	r7, #0
			res = f_mount(&EULER_FatFS, "", 1);
 8004708:	4621      	mov	r1, r4
 800470a:	2201      	movs	r2, #1
 800470c:	4628      	mov	r0, r5
			EULER_LOG_FILE_NAME[0] = 0;
 800470e:	f88d 701c 	strb.w	r7, [sp, #28]
			res = f_mount(&EULER_FatFS, "", 1);
 8004712:	f00b f98d 	bl	800fa30 <f_mount>
			if (res != FR_OK) {
 8004716:	4601      	mov	r1, r0
 8004718:	2800      	cmp	r0, #0
 800471a:	d147      	bne.n	80047ac <vTaskSdCard+0xd0>
				osDelay(10);
			}
		} while (res != FR_OK);

		logToNewFile: if (!EULER_LOG_FILE_NAME[0]) {
			UsbPrint("[STORAGE TASK] Creating file name\n");
 800471c:	4f87      	ldr	r7, [pc, #540]	; (800493c <vTaskSdCard+0x260>)

			unsigned int file_number = 1;

			DIR dj;
			FILINFO fno;
			res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 800471e:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8004988 <vTaskSdCard+0x2ac>
		logToNewFile: if (!EULER_LOG_FILE_NAME[0]) {
 8004722:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d165      	bne.n	80047f6 <vTaskSdCard+0x11a>
			UsbPrint("[STORAGE TASK] Creating file name\n");
 800472a:	4638      	mov	r0, r7
			unsigned int file_number = 1;
 800472c:	f04f 0901 	mov.w	r9, #1
			while (res == FR_OK && fno.fname[0]) {
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8004730:	f04f 0a64 	mov.w	sl, #100	; 0x64
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8004734:	f04f 0b0a 	mov.w	fp, #10
			UsbPrint("[STORAGE TASK] Creating file name\n");
 8004738:	f7fe f8ea 	bl	8002910 <UsbPrint>
			res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 800473c:	4643      	mov	r3, r8
 800473e:	4622      	mov	r2, r4
 8004740:	a90b      	add	r1, sp, #44	; 0x2c
 8004742:	a819      	add	r0, sp, #100	; 0x64
 8004744:	f00b fdd5 	bl	80102f2 <f_findfirst>
			while (res == FR_OK && fno.fname[0]) {
 8004748:	2800      	cmp	r0, #0
 800474a:	f040 80eb 	bne.w	8004924 <vTaskSdCard+0x248>
 800474e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 8004752:	2b00      	cmp	r3, #0
 8004754:	d139      	bne.n	80047ca <vTaskSdCard+0xee>
						"[STORAGE TASK] Failed finding first or next file: %d\n",
						res);
				goto resetSDCard;
			}

			strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8004756:	497a      	ldr	r1, [pc, #488]	; (8004940 <vTaskSdCard+0x264>)
 8004758:	a807      	add	r0, sp, #28
 800475a:	f00f fad5 	bl	8013d08 <strcpy>
			EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 800475e:	230a      	movs	r3, #10
			EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
			EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;

			UsbPrint("[STORAGE TASK] Using file name: %s\n",
 8004760:	4878      	ldr	r0, [pc, #480]	; (8004944 <vTaskSdCard+0x268>)
			EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8004762:	fbb9 f1f3 	udiv	r1, r9, r3
 8004766:	fb03 9211 	mls	r2, r3, r1, r9
 800476a:	3230      	adds	r2, #48	; 0x30
 800476c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
			EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8004770:	fbb1 f2f3 	udiv	r2, r1, r3
 8004774:	fb03 1212 	mls	r2, r3, r2, r1
			UsbPrint("[STORAGE TASK] Using file name: %s\n",
 8004778:	a907      	add	r1, sp, #28
			EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 800477a:	3230      	adds	r2, #48	; 0x30
 800477c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
			EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8004780:	2264      	movs	r2, #100	; 0x64
 8004782:	fbb9 f9f2 	udiv	r9, r9, r2
 8004786:	fbb9 f2f3 	udiv	r2, r9, r3
 800478a:	fb03 9912 	mls	r9, r3, r2, r9
 800478e:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8004792:	f88d 9020 	strb.w	r9, [sp, #32]
			UsbPrint("[STORAGE TASK] Using file name: %s\n",
 8004796:	f7fe f8bb 	bl	8002910 <UsbPrint>
					EULER_LOG_FILE_NAME);

			res = f_closedir(&dj);
 800479a:	a819      	add	r0, sp, #100	; 0x64
 800479c:	f00b fd50 	bl	8010240 <f_closedir>
			if (res != FR_OK) {
 80047a0:	4601      	mov	r1, r0
 80047a2:	b340      	cbz	r0, 80047f6 <vTaskSdCard+0x11a>
				UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 80047a4:	4868      	ldr	r0, [pc, #416]	; (8004948 <vTaskSdCard+0x26c>)

					UsbPrint("[STORAGE TASK] Syncing file..\n");
					HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
					res = f_sync(&EULER_LOG_FILE);
					if (res != FR_OK) {
						UsbPrint("[STORAGE TASK] Failed syncing file: %d\n",
 80047a6:	f7fe f8b3 	bl	8002910 <UsbPrint>
								res);
						goto resetSDCard;
 80047aa:	e7ac      	b.n	8004706 <vTaskSdCard+0x2a>
				UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 80047ac:	4630      	mov	r0, r6
 80047ae:	f7fe f8af 	bl	8002910 <UsbPrint>
				disk.is_initialized[0] = 0;
 80047b2:	4b66      	ldr	r3, [pc, #408]	; (800494c <vTaskSdCard+0x270>)
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80047b4:	2201      	movs	r2, #1
 80047b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047ba:	4865      	ldr	r0, [pc, #404]	; (8004950 <vTaskSdCard+0x274>)
				disk.is_initialized[0] = 0;
 80047bc:	701f      	strb	r7, [r3, #0]
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80047be:	f003 fe7d 	bl	80084bc <HAL_GPIO_WritePin>
				osDelay(10);
 80047c2:	200a      	movs	r0, #10
 80047c4:	f00b feac 	bl	8010520 <osDelay>
 80047c8:	e79d      	b.n	8004706 <vTaskSdCard+0x2a>
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 80047ca:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				res = f_findnext(&dj, &fno);
 80047ce:	a90b      	add	r1, sp, #44	; 0x2c
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 80047d0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
				res = f_findnext(&dj, &fno);
 80047d4:	a819      	add	r0, sp, #100	; 0x64
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 80047d6:	3a30      	subs	r2, #48	; 0x30
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 80047d8:	3b30      	subs	r3, #48	; 0x30
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 80047da:	fb0b f202 	mul.w	r2, fp, r2
 80047de:	fb0a 2303 	mla	r3, sl, r3, r2
 80047e2:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 80047e6:	4413      	add	r3, r2
				if (current_file_number + 1 > file_number) {
 80047e8:	3b2f      	subs	r3, #47	; 0x2f
 80047ea:	4599      	cmp	r9, r3
 80047ec:	bf38      	it	cc
 80047ee:	4699      	movcc	r9, r3
				res = f_findnext(&dj, &fno);
 80047f0:	f00b fd67 	bl	80102c2 <f_findnext>
 80047f4:	e7a8      	b.n	8004748 <vTaskSdCard+0x6c>
		res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 80047f6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800496c <vTaskSdCard+0x290>
		UsbPrint("[STORAGE TASK] Opening log file\n");
 80047fa:	4856      	ldr	r0, [pc, #344]	; (8004954 <vTaskSdCard+0x278>)
 80047fc:	f7fe f888 	bl	8002910 <UsbPrint>
		res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8004800:	a907      	add	r1, sp, #28
 8004802:	2212      	movs	r2, #18
 8004804:	4648      	mov	r0, r9
 8004806:	f00b f95d 	bl	800fac4 <f_open>
		if (res != FR_OK) {
 800480a:	4601      	mov	r1, r0
 800480c:	b108      	cbz	r0, 8004812 <vTaskSdCard+0x136>
			UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 800480e:	4852      	ldr	r0, [pc, #328]	; (8004958 <vTaskSdCard+0x27c>)
 8004810:	e7c9      	b.n	80047a6 <vTaskSdCard+0xca>
		UsbPrint("[STORAGE TASK] Going to end of file\n");
 8004812:	4852      	ldr	r0, [pc, #328]	; (800495c <vTaskSdCard+0x280>)
 8004814:	f7fe f87c 	bl	8002910 <UsbPrint>
		res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 8004818:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800481c:	4648      	mov	r0, r9
 800481e:	f00b fba0 	bl	800ff62 <f_lseek>
		if (res != FR_OK) {
 8004822:	4601      	mov	r1, r0
 8004824:	b108      	cbz	r0, 800482a <vTaskSdCard+0x14e>
			UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8004826:	484e      	ldr	r0, [pc, #312]	; (8004960 <vTaskSdCard+0x284>)
 8004828:	e7bd      	b.n	80047a6 <vTaskSdCard+0xca>
		char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 800482a:	4b4e      	ldr	r3, [pc, #312]	; (8004964 <vTaskSdCard+0x288>)
 800482c:	aa11      	add	r2, sp, #68	; 0x44
		volatile int32_t msgCounter = 0;
 800482e:	9003      	str	r0, [sp, #12]
		char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8004830:	f103 0e18 	add.w	lr, r3, #24
 8004834:	4691      	mov	r9, r2
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	3308      	adds	r3, #8
 800483a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800483e:	4694      	mov	ip, r2
 8004840:	4573      	cmp	r3, lr
 8004842:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8004846:	4662      	mov	r2, ip
 8004848:	d1f5      	bne.n	8004836 <vTaskSdCard+0x15a>
 800484a:	8899      	ldrh	r1, [r3, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	799b      	ldrb	r3, [r3, #6]
 8004850:	f8cc 0000 	str.w	r0, [ip]
		res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8004854:	4648      	mov	r0, r9
		char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8004856:	f88c 3006 	strb.w	r3, [ip, #6]
 800485a:	2300      	movs	r3, #0
 800485c:	f8ac 1004 	strh.w	r1, [ip, #4]
 8004860:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
		res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8004864:	f7fb fd3c 	bl	80002e0 <strlen>
 8004868:	4649      	mov	r1, r9
 800486a:	4602      	mov	r2, r0
 800486c:	4b3e      	ldr	r3, [pc, #248]	; (8004968 <vTaskSdCard+0x28c>)
 800486e:	483f      	ldr	r0, [pc, #252]	; (800496c <vTaskSdCard+0x290>)
 8004870:	f00b fa38 	bl	800fce4 <f_write>
		if (res != FR_OK) {
 8004874:	4681      	mov	r9, r0
 8004876:	b110      	cbz	r0, 800487e <vTaskSdCard+0x1a2>
			UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8004878:	4601      	mov	r1, r0
						UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 800487a:	483d      	ldr	r0, [pc, #244]	; (8004970 <vTaskSdCard+0x294>)
 800487c:	e793      	b.n	80047a6 <vTaskSdCard+0xca>
		log_entry_t log_entry = { 0 };
 800487e:	4601      	mov	r1, r0
 8004880:	2296      	movs	r2, #150	; 0x96
 8004882:	a826      	add	r0, sp, #152	; 0x98
			if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8004884:	f8df a104 	ldr.w	sl, [pc, #260]	; 800498c <vTaskSdCard+0x2b0>
		log_entry_t log_entry = { 0 };
 8004888:	f00f f949 	bl	8013b1e <memset>
					res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 800488c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8004968 <vTaskSdCard+0x28c>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004890:	464a      	mov	r2, r9
					res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8004892:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800496c <vTaskSdCard+0x290>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004896:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800489a:	482d      	ldr	r0, [pc, #180]	; (8004950 <vTaskSdCard+0x274>)
 800489c:	f003 fe0e 	bl	80084bc <HAL_GPIO_WritePin>
			if (osMessageQueueGet(log_queue, &log_entry, NULL,
 80048a0:	f04f 33ff 	mov.w	r3, #4294967295
 80048a4:	2200      	movs	r2, #0
 80048a6:	a926      	add	r1, sp, #152	; 0x98
 80048a8:	f8da 0000 	ldr.w	r0, [sl]
 80048ac:	f00c f884 	bl	80109b8 <osMessageQueueGet>
 80048b0:	2800      	cmp	r0, #0
 80048b2:	d1f5      	bne.n	80048a0 <vTaskSdCard+0x1c4>
				num_bytes = strlen(log_entry.str);
 80048b4:	a826      	add	r0, sp, #152	; 0x98
 80048b6:	f7fb fd13 	bl	80002e0 <strlen>
				if (num_bytes > 0) {
 80048ba:	4602      	mov	r2, r0
 80048bc:	b138      	cbz	r0, 80048ce <vTaskSdCard+0x1f2>
					res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 80048be:	a926      	add	r1, sp, #152	; 0x98
 80048c0:	465b      	mov	r3, fp
 80048c2:	4648      	mov	r0, r9
 80048c4:	f00b fa0e 	bl	800fce4 <f_write>
					if (res != FR_OK) {
 80048c8:	4601      	mov	r1, r0
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d1d5      	bne.n	800487a <vTaskSdCard+0x19e>
				msgCounter++;
 80048ce:	9b03      	ldr	r3, [sp, #12]
 80048d0:	3301      	adds	r3, #1
 80048d2:	9303      	str	r3, [sp, #12]
				if (msgCounter >= SYNC_AFTER_COUNT) {
 80048d4:	9b03      	ldr	r3, [sp, #12]
 80048d6:	2b7f      	cmp	r3, #127	; 0x7f
 80048d8:	dde2      	ble.n	80048a0 <vTaskSdCard+0x1c4>
					msgCounter = 0;
 80048da:	2300      	movs	r3, #0
					UsbPrint("[STORAGE TASK] Syncing file..\n");
 80048dc:	4825      	ldr	r0, [pc, #148]	; (8004974 <vTaskSdCard+0x298>)
					msgCounter = 0;
 80048de:	9303      	str	r3, [sp, #12]
					UsbPrint("[STORAGE TASK] Syncing file..\n");
 80048e0:	f7fe f816 	bl	8002910 <UsbPrint>
					HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80048e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048e8:	4819      	ldr	r0, [pc, #100]	; (8004950 <vTaskSdCard+0x274>)
 80048ea:	f003 fdec 	bl	80084c6 <HAL_GPIO_TogglePin>
					res = f_sync(&EULER_LOG_FILE);
 80048ee:	4648      	mov	r0, r9
 80048f0:	f00b face 	bl	800fe90 <f_sync>
					if (res != FR_OK) {
 80048f4:	4601      	mov	r1, r0
 80048f6:	b108      	cbz	r0, 80048fc <vTaskSdCard+0x220>
						UsbPrint("[STORAGE TASK] Failed syncing file: %d\n",
 80048f8:	481f      	ldr	r0, [pc, #124]	; (8004978 <vTaskSdCard+0x29c>)
 80048fa:	e754      	b.n	80047a6 <vTaskSdCard+0xca>
					}

					;

					// if the rocket landed, create a new file and write to that one
					if (ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 80048fc:	230c      	movs	r3, #12
 80048fe:	aa04      	add	r2, sp, #16
 8004900:	491e      	ldr	r1, [pc, #120]	; (800497c <vTaskSdCard+0x2a0>)
 8004902:	481f      	ldr	r0, [pc, #124]	; (8004980 <vTaskSdCard+0x2a4>)
 8004904:	f7fd fe86 	bl	8002614 <ReadMutex>
 8004908:	2800      	cmp	r0, #0
 800490a:	d1c9      	bne.n	80048a0 <vTaskSdCard+0x1c4>
							&local_flight_phase,
							sizeof(global_flight_phase_detection)) == osOK
							&& local_flight_phase.flight_phase == RECOVERY) {
 800490c:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8004910:	2a06      	cmp	r2, #6
 8004912:	d1c5      	bne.n	80048a0 <vTaskSdCard+0x1c4>
 8004914:	9001      	str	r0, [sp, #4]
						f_close(&EULER_LOG_FILE);
 8004916:	4815      	ldr	r0, [pc, #84]	; (800496c <vTaskSdCard+0x290>)
 8004918:	f00b fb0a 	bl	800ff30 <f_close>
						// "clean" current file name
						EULER_LOG_FILE_NAME[0] = 0;
 800491c:	9b01      	ldr	r3, [sp, #4]
 800491e:	f88d 301c 	strb.w	r3, [sp, #28]
						goto logToNewFile;
 8004922:	e6fe      	b.n	8004722 <vTaskSdCard+0x46>
				UsbPrint(
 8004924:	4601      	mov	r1, r0
 8004926:	4817      	ldr	r0, [pc, #92]	; (8004984 <vTaskSdCard+0x2a8>)
 8004928:	e73d      	b.n	80047a6 <vTaskSdCard+0xca>
 800492a:	bf00      	nop
 800492c:	08015e98 	.word	0x08015e98
 8004930:	08016033 	.word	0x08016033
 8004934:	2401edf4 	.word	0x2401edf4
 8004938:	08015ec0 	.word	0x08015ec0
 800493c:	08015eec 	.word	0x08015eec
 8004940:	08016092 	.word	0x08016092
 8004944:	0801609e 	.word	0x0801609e
 8004948:	08015f1b 	.word	0x08015f1b
 800494c:	24000900 	.word	0x24000900
 8004950:	58020c00 	.word	0x58020c00
 8004954:	08015f48 	.word	0x08015f48
 8004958:	08015f69 	.word	0x08015f69
 800495c:	08015f95 	.word	0x08015f95
 8004960:	08015fba 	.word	0x08015fba
 8004964:	0801597c 	.word	0x0801597c
 8004968:	2401f028 	.word	0x2401f028
 800496c:	2401ebc4 	.word	0x2401ebc4
 8004970:	08015fea 	.word	0x08015fea
 8004974:	08016015 	.word	0x08016015
 8004978:	08016034 	.word	0x08016034
 800497c:	24000234 	.word	0x24000234
 8004980:	24009cd4 	.word	0x24009cd4
 8004984:	0801605c 	.word	0x0801605c
 8004988:	08015f0f 	.word	0x08015f0f
 800498c:	2401a8bc 	.word	0x2401a8bc

08004990 <calculate_checksum_sb>:
	}
}

uint8_t calculate_checksum_sb(sb_data_t *sb_data) {

	return sb_data->baro.pressure + sb_data->baro.temperature
 8004990:	e9d0 3200 	ldrd	r3, r2, [r0]
 8004994:	4413      	add	r3, r2
			+ sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z
 8004996:	7b02      	ldrb	r2, [r0, #12]
 8004998:	4413      	add	r3, r2
 800499a:	7b82      	ldrb	r2, [r0, #14]
 800499c:	4413      	add	r3, r2
 800499e:	7c02      	ldrb	r2, [r0, #16]
 80049a0:	4413      	add	r3, r2
			+ sb_data->imu.acc_x + sb_data->imu.acc_y + sb_data->imu.acc_z;
 80049a2:	7c82      	ldrb	r2, [r0, #18]
 80049a4:	4413      	add	r3, r2
 80049a6:	7d02      	ldrb	r2, [r0, #20]
 80049a8:	7d80      	ldrb	r0, [r0, #22]
 80049aa:	4413      	add	r3, r2
 80049ac:	4418      	add	r0, r3
}
 80049ae:	b2c0      	uxtb	r0, r0
 80049b0:	4770      	bx	lr
	...

080049b4 <ReadDataSB>:
void ReadDataSB(sb_data_t *sb1, sb_data_t *sb2, sb_data_t *sb3) {
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	4606      	mov	r6, r0
 80049b8:	460d      	mov	r5, r1
 80049ba:	4614      	mov	r4, r2
	checksum = calculate_checksum_sb(sb1);
 80049bc:	f7ff ffe8 	bl	8004990 <calculate_checksum_sb>
	if (checksum == sb1->checksum) {
 80049c0:	7f33      	ldrb	r3, [r6, #28]
 80049c2:	4283      	cmp	r3, r0
 80049c4:	d114      	bne.n	80049f0 <ReadDataSB+0x3c>
		if (AcquireMutex(&sb1_mutex) == osOK) {
 80049c6:	4826      	ldr	r0, [pc, #152]	; (8004a60 <ReadDataSB+0xac>)
 80049c8:	f7fd fe16 	bl	80025f8 <AcquireMutex>
 80049cc:	b980      	cbnz	r0, 80049f0 <ReadDataSB+0x3c>
			sb1_baro = sb1->baro;
 80049ce:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <ReadDataSB+0xb0>)
			sb1_imu = sb1->imu;
 80049d0:	4f25      	ldr	r7, [pc, #148]	; (8004a68 <ReadDataSB+0xb4>)
			sb1_baro = sb1->baro;
 80049d2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
			sb1_imu = sb1->imu;
 80049d6:	360c      	adds	r6, #12
			sb1_baro = sb1->baro;
 80049d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb1->imu;
 80049dc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80049e0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
			ReleaseMutex(&sb1_mutex);
 80049e4:	481e      	ldr	r0, [pc, #120]	; (8004a60 <ReadDataSB+0xac>)
 80049e6:	f7fd fe12 	bl	800260e <ReleaseMutex>
			sb1_imu.acc_z = -sb1_imu.acc_z;
 80049ea:	897b      	ldrh	r3, [r7, #10]
 80049ec:	425b      	negs	r3, r3
 80049ee:	817b      	strh	r3, [r7, #10]
	checksum = calculate_checksum_sb(sb2);
 80049f0:	4628      	mov	r0, r5
 80049f2:	f7ff ffcd 	bl	8004990 <calculate_checksum_sb>
	if (checksum == sb2->checksum) {
 80049f6:	7f2b      	ldrb	r3, [r5, #28]
 80049f8:	4283      	cmp	r3, r0
 80049fa:	d114      	bne.n	8004a26 <ReadDataSB+0x72>
		if (AcquireMutex(&sb2_mutex) == osOK) {
 80049fc:	481b      	ldr	r0, [pc, #108]	; (8004a6c <ReadDataSB+0xb8>)
 80049fe:	f7fd fdfb 	bl	80025f8 <AcquireMutex>
 8004a02:	b980      	cbnz	r0, 8004a26 <ReadDataSB+0x72>
			sb2_baro = sb2->baro;
 8004a04:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <ReadDataSB+0xbc>)
			sb2_imu = sb2->imu;
 8004a06:	4e1b      	ldr	r6, [pc, #108]	; (8004a74 <ReadDataSB+0xc0>)
			sb2_baro = sb2->baro;
 8004a08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
			sb2_imu = sb2->imu;
 8004a0c:	350c      	adds	r5, #12
			sb2_baro = sb2->baro;
 8004a0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb2->imu;
 8004a12:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004a16:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			ReleaseMutex(&sb2_mutex);
 8004a1a:	4814      	ldr	r0, [pc, #80]	; (8004a6c <ReadDataSB+0xb8>)
 8004a1c:	f7fd fdf7 	bl	800260e <ReleaseMutex>
			sb2_imu.acc_z = -sb2_imu.acc_z;
 8004a20:	8973      	ldrh	r3, [r6, #10]
 8004a22:	425b      	negs	r3, r3
 8004a24:	8173      	strh	r3, [r6, #10]
	checksum = calculate_checksum_sb(sb3);
 8004a26:	4620      	mov	r0, r4
 8004a28:	f7ff ffb2 	bl	8004990 <calculate_checksum_sb>
	if (checksum == sb3->checksum) {
 8004a2c:	7f23      	ldrb	r3, [r4, #28]
 8004a2e:	4283      	cmp	r3, r0
 8004a30:	d114      	bne.n	8004a5c <ReadDataSB+0xa8>
		if (AcquireMutex(&sb3_mutex) == osOK) {
 8004a32:	4811      	ldr	r0, [pc, #68]	; (8004a78 <ReadDataSB+0xc4>)
 8004a34:	f7fd fde0 	bl	80025f8 <AcquireMutex>
 8004a38:	b980      	cbnz	r0, 8004a5c <ReadDataSB+0xa8>
			sb3_baro = sb3->baro;
 8004a3a:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <ReadDataSB+0xc8>)
			sb3_imu = sb3->imu;
 8004a3c:	4d10      	ldr	r5, [pc, #64]	; (8004a80 <ReadDataSB+0xcc>)
			sb3_baro = sb3->baro;
 8004a3e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
			sb3_imu = sb3->imu;
 8004a42:	340c      	adds	r4, #12
			sb3_baro = sb3->baro;
 8004a44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3->imu;
 8004a48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004a4c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			ReleaseMutex(&sb3_mutex);
 8004a50:	4809      	ldr	r0, [pc, #36]	; (8004a78 <ReadDataSB+0xc4>)
 8004a52:	f7fd fddc 	bl	800260e <ReleaseMutex>
			sb3_imu.acc_z = -sb3_imu.acc_z;
 8004a56:	896b      	ldrh	r3, [r5, #10]
 8004a58:	425b      	negs	r3, r3
 8004a5a:	816b      	strh	r3, [r5, #10]
}
 8004a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	24010414 	.word	0x24010414
 8004a64:	24000240 	.word	0x24000240
 8004a68:	2400024c 	.word	0x2400024c
 8004a6c:	2401eb70 	.word	0x2401eb70
 8004a70:	2400025c 	.word	0x2400025c
 8004a74:	24000268 	.word	0x24000268
 8004a78:	24012590 	.word	0x24012590
 8004a7c:	24000278 	.word	0x24000278
 8004a80:	24000284 	.word	0x24000284

08004a84 <vTaskSensRead>:
void vTaskSensRead(void *argument) {
 8004a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8004a88:	f04f 0864 	mov.w	r8, #100	; 0x64
void vTaskSensRead(void *argument) {
 8004a8c:	b088      	sub	sp, #32
	osDelay(800);
 8004a8e:	f44f 7048 	mov.w	r0, #800	; 0x320
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 8004a92:	4f3f      	ldr	r7, [pc, #252]	; (8004b90 <vTaskSensRead+0x10c>)
	osDelay(800);
 8004a94:	f00b fd44 	bl	8010520 <osDelay>
	tick_count = osKernelGetTickCount();
 8004a98:	f00b fcd4 	bl	8010444 <osKernelGetTickCount>
 8004a9c:	4606      	mov	r6, r0
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8004a9e:	f00b fce5 	bl	801046c <osKernelGetTickFreq>
 8004aa2:	fbb0 f8f8 	udiv	r8, r0, r8
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 8004aa6:	4c3b      	ldr	r4, [pc, #236]	; (8004b94 <vTaskSensRead+0x110>)
 8004aa8:	463a      	mov	r2, r7
 8004aaa:	4d3b      	ldr	r5, [pc, #236]	; (8004b98 <vTaskSensRead+0x114>)
		tick_count += tick_update;
 8004aac:	4446      	add	r6, r8
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 8004aae:	4621      	mov	r1, r4
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f7ff ff7f 	bl	80049b4 <ReadDataSB>
		UsbPrint(
 8004ab6:	69ab      	ldr	r3, [r5, #24]
 8004ab8:	6829      	ldr	r1, [r5, #0]
 8004aba:	9306      	str	r3, [sp, #24]
 8004abc:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8004ac0:	4836      	ldr	r0, [pc, #216]	; (8004b9c <vTaskSensRead+0x118>)
 8004ac2:	9305      	str	r3, [sp, #20]
 8004ac4:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8004ac8:	9304      	str	r3, [sp, #16]
 8004aca:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 8004ace:	9303      	str	r3, [sp, #12]
 8004ad0:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 8004ad4:	9302      	str	r3, [sp, #8]
 8004ad6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ada:	9301      	str	r3, [sp, #4]
 8004adc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8004ae6:	f7fd ff13 	bl	8002910 <UsbPrint>
		UsbPrint(
 8004aea:	69a3      	ldr	r3, [r4, #24]
 8004aec:	6821      	ldr	r1, [r4, #0]
 8004aee:	9306      	str	r3, [sp, #24]
 8004af0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8004af4:	482a      	ldr	r0, [pc, #168]	; (8004ba0 <vTaskSensRead+0x11c>)
 8004af6:	9305      	str	r3, [sp, #20]
 8004af8:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8004afc:	9304      	str	r3, [sp, #16]
 8004afe:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8004b02:	9303      	str	r3, [sp, #12]
 8004b04:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8004b08:	9302      	str	r3, [sp, #8]
 8004b0a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8004b1a:	f7fd fef9 	bl	8002910 <UsbPrint>
		logSensor(tick_count, 1, BARO, &sb1_data.baro);
 8004b1e:	2201      	movs	r2, #1
 8004b20:	462b      	mov	r3, r5
 8004b22:	4630      	mov	r0, r6
 8004b24:	4611      	mov	r1, r2
 8004b26:	f7fd fdc9 	bl	80026bc <logSensor>
		logSensor(tick_count, 1, IMU, &sb1_data.imu);
 8004b2a:	f105 030c 	add.w	r3, r5, #12
 8004b2e:	2202      	movs	r2, #2
 8004b30:	2101      	movs	r1, #1
 8004b32:	4630      	mov	r0, r6
 8004b34:	f7fd fdc2 	bl	80026bc <logSensor>
		logSensor(tick_count, 2, BARO, &sb2_data.baro);
 8004b38:	4623      	mov	r3, r4
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	4630      	mov	r0, r6
 8004b40:	f7fd fdbc 	bl	80026bc <logSensor>
		logSensor(tick_count, 2, IMU, &sb2_data.imu);
 8004b44:	2202      	movs	r2, #2
 8004b46:	f104 030c 	add.w	r3, r4, #12
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	f7fd fdb5 	bl	80026bc <logSensor>
		logSensor(tick_count, 3, BARO, &sb3_data.baro);
 8004b52:	463b      	mov	r3, r7
 8004b54:	2201      	movs	r2, #1
 8004b56:	2103      	movs	r1, #3
 8004b58:	4630      	mov	r0, r6
 8004b5a:	f7fd fdaf 	bl	80026bc <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_data.imu);
 8004b5e:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <vTaskSensRead+0x120>)
 8004b60:	2202      	movs	r2, #2
 8004b62:	2103      	movs	r1, #3
 8004b64:	4630      	mov	r0, r6
 8004b66:	f7fd fda9 	bl	80026bc <logSensor>
		HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) &sb1_data, sizeof(sb1_data));
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	480e      	ldr	r0, [pc, #56]	; (8004ba8 <vTaskSensRead+0x124>)
 8004b70:	f006 fed4 	bl	800b91c <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &sb2_data, sizeof(sb2_data));
 8004b74:	4621      	mov	r1, r4
 8004b76:	2220      	movs	r2, #32
 8004b78:	480c      	ldr	r0, [pc, #48]	; (8004bac <vTaskSensRead+0x128>)
 8004b7a:	f006 fecf 	bl	800b91c <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8004b7e:	2220      	movs	r2, #32
 8004b80:	4639      	mov	r1, r7
 8004b82:	480b      	ldr	r0, [pc, #44]	; (8004bb0 <vTaskSensRead+0x12c>)
 8004b84:	f006 feca 	bl	800b91c <HAL_SPI_Receive_DMA>
		osDelayUntil(tick_count);
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f00b fce3 	bl	8010554 <osDelayUntil>
 8004b8e:	e78a      	b.n	8004aa6 <vTaskSensRead+0x22>
 8004b90:	24000314 	.word	0x24000314
 8004b94:	240002f4 	.word	0x240002f4
 8004b98:	240002d4 	.word	0x240002d4
 8004b9c:	080160c2 	.word	0x080160c2
 8004ba0:	08016118 	.word	0x08016118
 8004ba4:	24000320 	.word	0x24000320
 8004ba8:	2401a834 	.word	0x2401a834
 8004bac:	24009cdc 	.word	0x24009cdc
 8004bb0:	2400e220 	.word	0x2400e220

08004bb4 <resetStateEstimation>:
	}
}


void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory, float pressure, float temperature){
 8004bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb8:	ed2d 8b02 	vpush	{d8}
 8004bbc:	eeb0 8a60 	vmov.f32	s16, s1
 8004bc0:	4614      	mov	r4, r2
 8004bc2:	eef0 8a40 	vmov.f32	s17, s0
 8004bc6:	4605      	mov	r5, r0
	reset_flight_phase_detection(flight_phase_detection);
 8004bc8:	4608      	mov	r0, r1
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory, float pressure, float temperature){
 8004bca:	461f      	mov	r7, r3
 8004bcc:	460e      	mov	r6, r1
	reset_flight_phase_detection(flight_phase_detection);
 8004bce:	f7fc fc19 	bl	8001404 <reset_flight_phase_detection>
	calibrate_env(environment, pressure, temperature);
 8004bd2:	eef0 0a48 	vmov.f32	s1, s16
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	eeb0 0a68 	vmov.f32	s0, s17
 8004bdc:	f7fc fa1c 	bl	8001018 <calibrate_env>
	update_env(environment, temperature);
 8004be0:	eeb0 0a48 	vmov.f32	s0, s16
 8004be4:	4620      	mov	r0, r4
 8004be6:	f7fc fa3b 	bl	8001060 <update_env>
	reset_kf_state(kf_state);
 8004bea:	4628      	mov	r0, r5
 8004bec:	f7fc fc12 	bl	8001414 <reset_kf_state>
	*extrapolation_rolling_memory = EMPTY_MEMORY;
 8004bf0:	22b0      	movs	r2, #176	; 0xb0
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	f00e ff92 	bl	8013b1e <memset>
	select_noise_models(kf_state, flight_phase_detection, environment, extrapolation_rolling_memory);
 8004bfa:	463b      	mov	r3, r7
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4628      	mov	r0, r5
}
 8004c02:	ecbd 8b02 	vpop	{d8}
 8004c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	select_noise_models(kf_state, flight_phase_detection, environment, extrapolation_rolling_memory);
 8004c0a:	f7fc bdc3 	b.w	8001794 <select_noise_models>
	...

08004c10 <vTaskStateEst>:
void vTaskStateEst(void *argument) {
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	ed2d 8b04 	vpush	{d8-d9}
 8004c18:	f2ad 5dac 	subw	sp, sp, #1452	; 0x5ac
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004c1c:	2600      	movs	r6, #0
	float sum_press = 0;
 8004c1e:	ed9f 8a96 	vldr	s16, [pc, #600]	; 8004e78 <vTaskStateEst+0x268>
	init_env(&env);
 8004c22:	ad12      	add	r5, sp, #72	; 0x48
	uint16_t calibrate_count = 0;
 8004c24:	4634      	mov	r4, r6
	float average_press = 0;
 8004c26:	eef0 9a48 	vmov.f32	s19, s16
			update_state_est_data(&state_est_data_global, &kf_state);
 8004c2a:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8004eac <vTaskStateEst+0x29c>
	init_env(&env);
 8004c2e:	4628      	mov	r0, r5
	float sum_temp = 0;
 8004c30:	eef0 8a48 	vmov.f32	s17, s16
	init_env(&env);
 8004c34:	f7fc f9d8 	bl	8000fe8 <init_env>
	state_est_meas_t state_est_meas = { 0 };
 8004c38:	2278      	movs	r2, #120	; 0x78
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	a816      	add	r0, sp, #88	; 0x58
 8004c3e:	f00e ff6e 	bl	8013b1e <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 8004c42:	2278      	movs	r2, #120	; 0x78
 8004c44:	2100      	movs	r1, #0
 8004c46:	a834      	add	r0, sp, #208	; 0xd0
 8004c48:	f00e ff69 	bl	8013b1e <memset>
	reset_kf_state(&kf_state);
 8004c4c:	a87f      	add	r0, sp, #508	; 0x1fc
 8004c4e:	f7fc fbe1 	bl	8001414 <reset_kf_state>
	extrapolation_rolling_memory_t extrapolation_rolling_memory = { 0 };
 8004c52:	22b0      	movs	r2, #176	; 0xb0
 8004c54:	2100      	movs	r1, #0
 8004c56:	a852      	add	r0, sp, #328	; 0x148
 8004c58:	f00e ff61 	bl	8013b1e <memset>
	reset_flight_phase_detection(&flight_phase_detection);
 8004c5c:	a80f      	add	r0, sp, #60	; 0x3c
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004c5e:	9611      	str	r6, [sp, #68]	; 0x44
	float average_temp = 0;
 8004c60:	eeb0 9a48 	vmov.f32	s18, s16
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004c64:	e9cd 660f 	strd	r6, r6, [sp, #60]	; 0x3c
	reset_flight_phase_detection(&flight_phase_detection);
 8004c68:	f7fc fbcc 	bl	8001404 <reset_flight_phase_detection>
	command_e telemetry_command = IDLE_COMMAND;
 8004c6c:	239b      	movs	r3, #155	; 0x9b
	select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8004c6e:	462a      	mov	r2, r5
 8004c70:	a90f      	add	r1, sp, #60	; 0x3c
	command_e telemetry_command = IDLE_COMMAND;
 8004c72:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
	select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8004c76:	a87f      	add	r0, sp, #508	; 0x1fc
 8004c78:	ab52      	add	r3, sp, #328	; 0x148
 8004c7a:	f7fc fd8b 	bl	8001794 <select_noise_models>
	osDelay(900);
 8004c7e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8004c82:	f00b fc4d 	bl	8010520 <osDelay>
	tick_count = osKernelGetTickCount();
 8004c86:	f00b fbdd 	bl	8010444 <osKernelGetTickCount>
 8004c8a:	4607      	mov	r7, r0
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8004c8c:	f00b fbee 	bl	801046c <osKernelGetTickFreq>
 8004c90:	2364      	movs	r3, #100	; 0x64
 8004c92:	fbb0 f3f3 	udiv	r3, r0, r3
	uint32_t reset_counter = 0;
 8004c96:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
		tick_count += tick_update;
 8004c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8004c9c:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
 8004ca0:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8004eb0 <vTaskStateEst+0x2a0>
		tick_count += tick_update;
 8004ca4:	441f      	add	r7, r3
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8004ca6:	4875      	ldr	r0, [pc, #468]	; (8004e7c <vTaskStateEst+0x26c>)
 8004ca8:	2301      	movs	r3, #1
 8004caa:	4649      	mov	r1, r9
 8004cac:	f7fd fcb2 	bl	8002614 <ReadMutex>
		if(flight_phase_detection.flight_phase == IDLE && global_telemetry_command == CALIBRATE_SENSORS){
 8004cb0:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d10d      	bne.n	8004cd4 <vTaskStateEst+0xc4>
 8004cb8:	f899 3000 	ldrb.w	r3, [r9]
 8004cbc:	2b49      	cmp	r3, #73	; 0x49
 8004cbe:	d109      	bne.n	8004cd4 <vTaskStateEst+0xc4>
			resetStateEstimation(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory, average_press, average_temp);
 8004cc0:	eef0 0a49 	vmov.f32	s1, s18
 8004cc4:	ab52      	add	r3, sp, #328	; 0x148
 8004cc6:	eeb0 0a69 	vmov.f32	s0, s19
 8004cca:	462a      	mov	r2, r5
 8004ccc:	a90f      	add	r1, sp, #60	; 0x3c
 8004cce:	a87f      	add	r0, sp, #508	; 0x1fc
 8004cd0:	f7ff ff70 	bl	8004bb4 <resetStateEstimation>
		if(reset_counter > 30*STATE_ESTIMATION_FREQUENCY && !was_reset){
 8004cd4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004cd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d90b      	bls.n	8004cf6 <vTaskStateEst+0xe6>
 8004cde:	b956      	cbnz	r6, 8004cf6 <vTaskStateEst+0xe6>
			was_reset = true;
 8004ce0:	2601      	movs	r6, #1
			resetStateEstimation(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory, average_press, average_temp);
 8004ce2:	eef0 0a49 	vmov.f32	s1, s18
 8004ce6:	eeb0 0a69 	vmov.f32	s0, s19
 8004cea:	ab52      	add	r3, sp, #328	; 0x148
 8004cec:	462a      	mov	r2, r5
 8004cee:	a90f      	add	r1, sp, #60	; 0x3c
 8004cf0:	a87f      	add	r0, sp, #508	; 0x1fc
 8004cf2:	f7ff ff5f 	bl	8004bb4 <resetStateEstimation>
		reset_counter++;
 8004cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 8004cf8:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8004eb4 <vTaskStateEst+0x2a4>
		reset_counter++;
 8004cfc:	3301      	adds	r3, #1
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 8004cfe:	4a60      	ldr	r2, [pc, #384]	; (8004e80 <vTaskStateEst+0x270>)
 8004d00:	4659      	mov	r1, fp
 8004d02:	4860      	ldr	r0, [pc, #384]	; (8004e84 <vTaskStateEst+0x274>)
		reset_counter++;
 8004d04:	930c      	str	r3, [sp, #48]	; 0x30
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 8004d06:	2301      	movs	r3, #1
		ReadMutexStateEst(&sb2_mutex, &sb2_baro, &sb2_imu, &state_est_meas, 2);
 8004d08:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8004eb8 <vTaskStateEst+0x2a8>
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	ab16      	add	r3, sp, #88	; 0x58
 8004d10:	f7fd fc9a 	bl	8002648 <ReadMutexStateEst>
		ReadMutexStateEst(&sb2_mutex, &sb2_baro, &sb2_imu, &state_est_meas, 2);
 8004d14:	2302      	movs	r3, #2
 8004d16:	4a5c      	ldr	r2, [pc, #368]	; (8004e88 <vTaskStateEst+0x278>)
 8004d18:	4651      	mov	r1, sl
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	ab16      	add	r3, sp, #88	; 0x58
 8004d1e:	485b      	ldr	r0, [pc, #364]	; (8004e8c <vTaskStateEst+0x27c>)
 8004d20:	f7fd fc92 	bl	8002648 <ReadMutexStateEst>
		ReadMutexStateEst(&sb3_mutex, &sb3_baro, &sb3_imu, &state_est_meas, 3);
 8004d24:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8004ebc <vTaskStateEst+0x2ac>
 8004d28:	2303      	movs	r3, #3
 8004d2a:	4a59      	ldr	r2, [pc, #356]	; (8004e90 <vTaskStateEst+0x280>)
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	4859      	ldr	r0, [pc, #356]	; (8004e94 <vTaskStateEst+0x284>)
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	ab16      	add	r3, sp, #88	; 0x58
 8004d34:	f7fd fc88 	bl	8002648 <ReadMutexStateEst>
		if(flight_phase_detection.flight_phase == IDLE){
 8004d38:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d130      	bne.n	8004da2 <vTaskStateEst+0x192>
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 8004d40:	f8da 2000 	ldr.w	r2, [sl]
			calibrate_count += 3;
 8004d44:	3403      	adds	r4, #3
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 8004d46:	f8db 3000 	ldr.w	r3, [fp]
			sum_temp += ((float)(sb1_baro.temperature + sb2_baro.temperature + sb3_baro.temperature))/100;
 8004d4a:	eddf 6a53 	vldr	s13, [pc, #332]	; 8004e98 <vTaskStateEst+0x288>
			calibrate_count += 3;
 8004d4e:	b2a4      	uxth	r4, r4
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 8004d50:	4413      	add	r3, r2
 8004d52:	f8d9 2000 	ldr.w	r2, [r9]
			if(calibrate_count > 150){
 8004d56:	2c96      	cmp	r4, #150	; 0x96
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 8004d58:	4413      	add	r3, r2
			sum_temp += ((float)(sb1_baro.temperature + sb2_baro.temperature + sb3_baro.temperature))/100;
 8004d5a:	f8da 2004 	ldr.w	r2, [sl, #4]
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 8004d5e:	ee07 3a90 	vmov	s15, r3
			sum_temp += ((float)(sb1_baro.temperature + sb2_baro.temperature + sb3_baro.temperature))/100;
 8004d62:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004d66:	4413      	add	r3, r2
 8004d68:	f8d9 2004 	ldr.w	r2, [r9, #4]
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 8004d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			sum_temp += ((float)(sb1_baro.temperature + sb2_baro.temperature + sb3_baro.temperature))/100;
 8004d70:	4413      	add	r3, r2
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 8004d72:	ee38 8a27 	vadd.f32	s16, s16, s15
			sum_temp += ((float)(sb1_baro.temperature + sb2_baro.temperature + sb3_baro.temperature))/100;
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d7e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004d82:	ee78 8a87 	vadd.f32	s17, s17, s14
			if(calibrate_count > 150){
 8004d86:	d90c      	bls.n	8004da2 <vTaskStateEst+0x192>
				average_press = sum_press / (float)calibrate_count;
 8004d88:	ee07 4a90 	vmov	s15, r4
				calibrate_count = 0;
 8004d8c:	2400      	movs	r4, #0
				average_press = sum_press / (float)calibrate_count;
 8004d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d92:	eec8 9a27 	vdiv.f32	s19, s16, s15
				sum_press = 0;
 8004d96:	ed9f 8a38 	vldr	s16, [pc, #224]	; 8004e78 <vTaskStateEst+0x268>
				average_temp = sum_temp / (float)calibrate_count;
 8004d9a:	ee88 9aa7 	vdiv.f32	s18, s17, s15
				sum_temp = 0;
 8004d9e:	eef0 8a48 	vmov.f32	s17, s16
		process_measurements(tick_count, &kf_state, &state_est_meas, &state_est_meas_prior, &env, &extrapolation_rolling_memory);
 8004da2:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(flight_phase_detection));
 8004da6:	230c      	movs	r3, #12
 8004da8:	aa0f      	add	r2, sp, #60	; 0x3c
 8004daa:	493c      	ldr	r1, [pc, #240]	; (8004e9c <vTaskStateEst+0x28c>)
 8004dac:	483c      	ldr	r0, [pc, #240]	; (8004ea0 <vTaskStateEst+0x290>)
 8004dae:	f7fd fc31 	bl	8002614 <ReadMutex>
		process_measurements(tick_count, &kf_state, &state_est_meas, &state_est_meas_prior, &env, &extrapolation_rolling_memory);
 8004db2:	ab34      	add	r3, sp, #208	; 0xd0
 8004db4:	aa16      	add	r2, sp, #88	; 0x58
 8004db6:	a97f      	add	r1, sp, #508	; 0x1fc
 8004db8:	4638      	mov	r0, r7
 8004dba:	e9cd 5900 	strd	r5, r9, [sp]
 8004dbe:	f7fc fdaf 	bl	8001920 <process_measurements>
		select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8004dc2:	464b      	mov	r3, r9
 8004dc4:	462a      	mov	r2, r5
 8004dc6:	a90f      	add	r1, sp, #60	; 0x3c
 8004dc8:	a87f      	add	r0, sp, #508	; 0x1fc
 8004dca:	f7fc fce3 	bl	8001794 <select_noise_models>
		kf_prediction(&kf_state);
 8004dce:	a87f      	add	r0, sp, #508	; 0x1fc
 8004dd0:	f7fc fba2 	bl	8001518 <kf_prediction>
		if (kf_state.num_z_active > 0) {
 8004dd4:	f8dd 340c 	ldr.w	r3, [sp, #1036]	; 0x40c
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	dd46      	ble.n	8004e6a <vTaskStateEst+0x25a>
			select_kf_observation_matrices(&kf_state);
 8004ddc:	a87f      	add	r0, sp, #508	; 0x1fc
 8004dde:	f7fc fbec 	bl	80015ba <select_kf_observation_matrices>
			kf_update(&kf_state);
 8004de2:	a87f      	add	r0, sp, #508	; 0x1fc
 8004de4:	f7fc fc14 	bl	8001610 <kf_update>
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 8004de8:	2278      	movs	r2, #120	; 0x78
 8004dea:	a916      	add	r1, sp, #88	; 0x58
 8004dec:	a834      	add	r0, sp, #208	; 0xd0
 8004dee:	f00e fe8b 	bl	8013b08 <memcpy>
		if(AcquireMutex(&state_est_mutex) == osOK){
 8004df2:	482c      	ldr	r0, [pc, #176]	; (8004ea4 <vTaskStateEst+0x294>)
 8004df4:	f7fd fc00 	bl	80025f8 <AcquireMutex>
 8004df8:	b930      	cbnz	r0, 8004e08 <vTaskStateEst+0x1f8>
			update_state_est_data(&state_est_data_global, &kf_state);
 8004dfa:	4640      	mov	r0, r8
 8004dfc:	a97f      	add	r1, sp, #508	; 0x1fc
 8004dfe:	f7fc fca7 	bl	8001750 <update_state_est_data>
			ReleaseMutex(&state_est_mutex);
 8004e02:	4828      	ldr	r0, [pc, #160]	; (8004ea4 <vTaskStateEst+0x294>)
 8004e04:	f7fd fc03 	bl	800260e <ReleaseMutex>
		UsbPrint("[DBG] Height: %d; Velocity: %d; t: %lu\n", state_est_data_global.position_world[2],
 8004e08:	463b      	mov	r3, r7
 8004e0a:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8004e0e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8004e12:	4825      	ldr	r0, [pc, #148]	; (8004ea8 <vTaskStateEst+0x298>)
 8004e14:	f7fd fd7c 	bl	8002910 <UsbPrint>
		if(AcquireMutex(&fsm_mutex) == osOK){
 8004e18:	4821      	ldr	r0, [pc, #132]	; (8004ea0 <vTaskStateEst+0x290>)
 8004e1a:	f7fd fbed 	bl	80025f8 <AcquireMutex>
 8004e1e:	b940      	cbnz	r0, 8004e32 <vTaskStateEst+0x222>
			global_env = env;
 8004e20:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8004ec0 <vTaskStateEst+0x2b0>
 8004e24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004e28:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			ReleaseMutex(&fsm_mutex);
 8004e2c:	481c      	ldr	r0, [pc, #112]	; (8004ea0 <vTaskStateEst+0x290>)
 8004e2e:	f7fd fbee 	bl	800260e <ReleaseMutex>
		logEstimatorVar(osKernelGetTickCount(), state_est_data_global);
 8004e32:	f00b fb07 	bl	8010444 <osKernelGetTickCount>
 8004e36:	f8df e08c 	ldr.w	lr, [pc, #140]	; 8004ec4 <vTaskStateEst+0x2b4>
 8004e3a:	4681      	mov	r9, r0
 8004e3c:	46ec      	mov	ip, sp
 8004e3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004e42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004e46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004e4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004e4e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8004e52:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8004e56:	f1ae 032c 	sub.w	r3, lr, #44	; 0x2c
 8004e5a:	4648      	mov	r0, r9
 8004e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e5e:	f7fd fce3 	bl	8002828 <logEstimatorVar>
		osDelayUntil(tick_count);
 8004e62:	4638      	mov	r0, r7
 8004e64:	f00b fb76 	bl	8010554 <osDelayUntil>
		tick_count += tick_update;
 8004e68:	e717      	b.n	8004c9a <vTaskStateEst+0x8a>
			memcpy(kf_state.x_est, kf_state.x_priori, sizeof(kf_state.x_priori));
 8004e6a:	aacc      	add	r2, sp, #816	; 0x330
 8004e6c:	abc0      	add	r3, sp, #768	; 0x300
 8004e6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004e74:	e7b8      	b.n	8004de8 <vTaskStateEst+0x1d8>
 8004e76:	bf00      	nop
 8004e78:	00000000 	.word	0x00000000
 8004e7c:	2400c20c 	.word	0x2400c20c
 8004e80:	2400024c 	.word	0x2400024c
 8004e84:	24010414 	.word	0x24010414
 8004e88:	24000268 	.word	0x24000268
 8004e8c:	2401eb70 	.word	0x2401eb70
 8004e90:	24000284 	.word	0x24000284
 8004e94:	24012590 	.word	0x24012590
 8004e98:	42c80000 	.word	0x42c80000
 8004e9c:	24000234 	.word	0x24000234
 8004ea0:	24009cd4 	.word	0x24009cd4
 8004ea4:	240166a8 	.word	0x240166a8
 8004ea8:	0801616e 	.word	0x0801616e
 8004eac:	24000294 	.word	0x24000294
 8004eb0:	240166d4 	.word	0x240166d4
 8004eb4:	24000240 	.word	0x24000240
 8004eb8:	2400025c 	.word	0x2400025c
 8004ebc:	24000278 	.word	0x24000278
 8004ec0:	24000224 	.word	0x24000224
 8004ec4:	240002a0 	.word	0x240002a0

08004ec8 <HAL_UART_RxCpltCallback>:
		osDelayUntil(tick_count);
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	if(huart==&huart7){
 8004ec8:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <HAL_UART_RxCpltCallback+0x5c>)
 8004eca:	4283      	cmp	r3, r0
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004ecc:	b430      	push	{r4, r5}
	if(huart==&huart7){
 8004ece:	d126      	bne.n	8004f1e <HAL_UART_RxCpltCallback+0x56>

		static uint8_t buffer [4];
		buffer[uart_counter] = local_command_rx;
 8004ed0:	4915      	ldr	r1, [pc, #84]	; (8004f28 <HAL_UART_RxCpltCallback+0x60>)
 8004ed2:	4a16      	ldr	r2, [pc, #88]	; (8004f2c <HAL_UART_RxCpltCallback+0x64>)
 8004ed4:	680b      	ldr	r3, [r1, #0]
 8004ed6:	7814      	ldrb	r4, [r2, #0]
 8004ed8:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <HAL_UART_RxCpltCallback+0x68>)
 8004eda:	54d4      	strb	r4, [r2, r3]
		uart_counter++;
 8004edc:	3301      	adds	r3, #1
		if(uart_counter == 4){
 8004ede:	2b04      	cmp	r3, #4
		uart_counter++;
 8004ee0:	600b      	str	r3, [r1, #0]
		if(uart_counter == 4){
 8004ee2:	d10e      	bne.n	8004f02 <HAL_UART_RxCpltCallback+0x3a>
			uint8_t succesful = 1;
			for (int i = 1; i < 4; i++) if (buffer[0] != buffer[i]) succesful = 0;
 8004ee4:	7810      	ldrb	r0, [r2, #0]
 8004ee6:	7853      	ldrb	r3, [r2, #1]
 8004ee8:	1a1d      	subs	r5, r3, r0
 8004eea:	426b      	negs	r3, r5
 8004eec:	416b      	adcs	r3, r5
 8004eee:	7895      	ldrb	r5, [r2, #2]
 8004ef0:	78d2      	ldrb	r2, [r2, #3]
 8004ef2:	4285      	cmp	r5, r0
 8004ef4:	bf18      	it	ne
 8004ef6:	2300      	movne	r3, #0
 8004ef8:	4282      	cmp	r2, r0
 8004efa:	f04f 0200 	mov.w	r2, #0
			uart_counter = 0;
 8004efe:	600a      	str	r2, [r1, #0]
			for (int i = 1; i < 4; i++) if (buffer[0] != buffer[i]) succesful = 0;
 8004f00:	d005      	beq.n	8004f0e <HAL_UART_RxCpltCallback+0x46>
				new_command = true;
				local_command = local_command_rx;
			}
		}

		HAL_UART_Receive_IT(huart, (uint8_t*)&local_command_rx, 1);
 8004f02:	2201      	movs	r2, #1
 8004f04:	4909      	ldr	r1, [pc, #36]	; (8004f2c <HAL_UART_RxCpltCallback+0x64>)
 8004f06:	4807      	ldr	r0, [pc, #28]	; (8004f24 <HAL_UART_RxCpltCallback+0x5c>)
	}
}
 8004f08:	bc30      	pop	{r4, r5}
		HAL_UART_Receive_IT(huart, (uint8_t*)&local_command_rx, 1);
 8004f0a:	f007 b8b7 	b.w	800c07c <HAL_UART_Receive_IT>
			if (succesful) {
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f7      	beq.n	8004f02 <HAL_UART_RxCpltCallback+0x3a>
				new_command = true;
 8004f12:	4b08      	ldr	r3, [pc, #32]	; (8004f34 <HAL_UART_RxCpltCallback+0x6c>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	701a      	strb	r2, [r3, #0]
				local_command = local_command_rx;
 8004f18:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <HAL_UART_RxCpltCallback+0x70>)
 8004f1a:	701c      	strb	r4, [r3, #0]
 8004f1c:	e7f1      	b.n	8004f02 <HAL_UART_RxCpltCallback+0x3a>
}
 8004f1e:	bc30      	pop	{r4, r5}
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	24009d6c 	.word	0x24009d6c
 8004f28:	2400033c 	.word	0x2400033c
 8004f2c:	2401f02d 	.word	0x2401f02d
 8004f30:	24000334 	.word	0x24000334
 8004f34:	24000338 	.word	0x24000338
 8004f38:	2401f02c 	.word	0x2401f02c

08004f3c <calculate_checksum>:

uint8_t calculate_checksum(telemetry_t *cnf){
 8004f3c:	f100 025c 	add.w	r2, r0, #92	; 0x5c
	uint8_t cs=0;
 8004f40:	2300      	movs	r3, #0
	uint8_t *data;
	data = (uint8_t*) cnf;
	for(int i=0; i< sizeof(telemetry_t);i++){
 8004f42:	4290      	cmp	r0, r2
 8004f44:	d102      	bne.n	8004f4c <calculate_checksum+0x10>
		cs+=*data++;
	}
	return (255 - cs);
 8004f46:	43d8      	mvns	r0, r3
}
 8004f48:	b2c0      	uxtb	r0, r0
 8004f4a:	4770      	bx	lr
		cs+=*data++;
 8004f4c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004f50:	440b      	add	r3, r1
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	e7f5      	b.n	8004f42 <calculate_checksum+0x6>
	...

08004f58 <vTaskXbee>:
void vTaskXbee(void *argument) {
 8004f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	telemetry_t telemetry_send = { 0 };
 8004f5c:	225c      	movs	r2, #92	; 0x5c
void vTaskXbee(void *argument) {
 8004f5e:	b0af      	sub	sp, #188	; 0xbc
	telemetry_t telemetry_send = { 0 };
 8004f60:	2100      	movs	r1, #0
	local_command_rx = IDLE_COMMAND;
 8004f62:	4f5c      	ldr	r7, [pc, #368]	; (80050d4 <vTaskXbee+0x17c>)
	telemetry_t telemetry_send = { 0 };
 8004f64:	eb0d 0002 	add.w	r0, sp, r2
	local_command = IDLE_COMMAND;
 8004f68:	4c5b      	ldr	r4, [pc, #364]	; (80050d8 <vTaskXbee+0x180>)
	telemetry_t telemetry_send = { 0 };
 8004f6a:	f00e fdd8 	bl	8013b1e <memset>
	telemetry_send.flight_phase = IDLE;
 8004f6e:	2301      	movs	r3, #1
	tick_update_slow = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 8004f70:	f04f 080a 	mov.w	r8, #10
	tick_update_fast = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ_HIGH;
 8004f74:	f04f 0964 	mov.w	r9, #100	; 0x64
	telemetry_send.flight_phase = IDLE;
 8004f78:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
	telemetry_send.startbyte = 0x17;
 8004f7c:	2317      	movs	r3, #23
	osDelay(700);
 8004f7e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
	bool fast_sampling = false;
 8004f82:	2500      	movs	r5, #0
	telemetry_send.startbyte = 0x17;
 8004f84:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	local_command_rx = IDLE_COMMAND;
 8004f88:	239b      	movs	r3, #155	; 0x9b
		HAL_UART_Receive_IT(&huart7, (uint8_t*)&local_command_rx, 1);
 8004f8a:	f8df a194 	ldr.w	sl, [pc, #404]	; 8005120 <vTaskXbee+0x1c8>
	local_command_rx = IDLE_COMMAND;
 8004f8e:	703b      	strb	r3, [r7, #0]
	local_command = IDLE_COMMAND;
 8004f90:	7023      	strb	r3, [r4, #0]
	osDelay(700);
 8004f92:	f00b fac5 	bl	8010520 <osDelay>
		ReadMutex(&sb1_mutex, &sb1_baro, &local_sb_data.baro, sizeof(sb1_baro));
 8004f96:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8005124 <vTaskXbee+0x1cc>
	tick_update_slow = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 8004f9a:	f00b fa67 	bl	801046c <osKernelGetTickFreq>
 8004f9e:	fbb0 f8f8 	udiv	r8, r0, r8
	tick_update_fast = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ_HIGH;
 8004fa2:	f00b fa63 	bl	801046c <osKernelGetTickFreq>
 8004fa6:	fbb0 f9f9 	udiv	r9, r0, r9
	tick_count = osKernelGetTickCount();
 8004faa:	f00b fa4b 	bl	8010444 <osKernelGetTickCount>
 8004fae:	4606      	mov	r6, r0
		if(fast_sampling){
 8004fb0:	2d00      	cmp	r5, #0
 8004fb2:	f000 808a 	beq.w	80050ca <vTaskXbee+0x172>
			tick_count += tick_update_fast;
 8004fb6:	444e      	add	r6, r9
		HAL_UART_Receive_IT(&huart7, (uint8_t*)&local_command_rx, 1);
 8004fb8:	2201      	movs	r2, #1
 8004fba:	4946      	ldr	r1, [pc, #280]	; (80050d4 <vTaskXbee+0x17c>)
 8004fbc:	4650      	mov	r0, sl
 8004fbe:	f007 f85d 	bl	800c07c <HAL_UART_Receive_IT>
		UsbPrint("[Telemetry] ts: %u, Received Commmand: %u, Rx_buffer; %u\n",
 8004fc2:	783b      	ldrb	r3, [r7, #0]
 8004fc4:	7822      	ldrb	r2, [r4, #0]
 8004fc6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8004fc8:	4844      	ldr	r0, [pc, #272]	; (80050dc <vTaskXbee+0x184>)
 8004fca:	f7fd fca1 	bl	8002910 <UsbPrint>
		if(AcquireMutex(&command_mutex) == osOK){
 8004fce:	4844      	ldr	r0, [pc, #272]	; (80050e0 <vTaskXbee+0x188>)
 8004fd0:	f7fd fb12 	bl	80025f8 <AcquireMutex>
 8004fd4:	b928      	cbnz	r0, 8004fe2 <vTaskXbee+0x8a>
			global_telemetry_command = local_command;
 8004fd6:	7822      	ldrb	r2, [r4, #0]
 8004fd8:	4b42      	ldr	r3, [pc, #264]	; (80050e4 <vTaskXbee+0x18c>)
			ReleaseMutex(&command_mutex);
 8004fda:	4841      	ldr	r0, [pc, #260]	; (80050e0 <vTaskXbee+0x188>)
			global_telemetry_command = local_command;
 8004fdc:	701a      	strb	r2, [r3, #0]
			ReleaseMutex(&command_mutex);
 8004fde:	f7fd fb16 	bl	800260e <ReleaseMutex>
		if(local_command == TELEMETRY_HIGH_SAMPLING){
 8004fe2:	7823      	ldrb	r3, [r4, #0]
 8004fe4:	2b0d      	cmp	r3, #13
 8004fe6:	d072      	beq.n	80050ce <vTaskXbee+0x176>
			fast_sampling = false;
 8004fe8:	2bc5      	cmp	r3, #197	; 0xc5
 8004fea:	bf08      	it	eq
 8004fec:	2500      	moveq	r5, #0
		if(telemetry_send.flight_phase == RECOVERY){
 8004fee:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
			fast_sampling = false;
 8004ff2:	2b06      	cmp	r3, #6
		if(new_command){
 8004ff4:	4b3c      	ldr	r3, [pc, #240]	; (80050e8 <vTaskXbee+0x190>)
 8004ff6:	781a      	ldrb	r2, [r3, #0]
			fast_sampling = false;
 8004ff8:	bf08      	it	eq
 8004ffa:	2500      	moveq	r5, #0
		if(new_command){
 8004ffc:	b11a      	cbz	r2, 8005006 <vTaskXbee+0xae>
			local_command = IDLE_COMMAND;
 8004ffe:	229b      	movs	r2, #155	; 0x9b
 8005000:	7022      	strb	r2, [r4, #0]
			new_command = false;
 8005002:	2200      	movs	r2, #0
 8005004:	701a      	strb	r2, [r3, #0]
		ReadMutex(&sb1_mutex, &sb1_baro, &local_sb_data.baro, sizeof(sb1_baro));
 8005006:	466a      	mov	r2, sp
 8005008:	230c      	movs	r3, #12
 800500a:	4938      	ldr	r1, [pc, #224]	; (80050ec <vTaskXbee+0x194>)
 800500c:	4658      	mov	r0, fp
 800500e:	f7fd fb01 	bl	8002614 <ReadMutex>
		ReadMutex(&sb1_mutex, &sb1_imu, &local_sb_data.imu, sizeof(sb1_imu));
 8005012:	aa03      	add	r2, sp, #12
 8005014:	2310      	movs	r3, #16
 8005016:	4936      	ldr	r1, [pc, #216]	; (80050f0 <vTaskXbee+0x198>)
 8005018:	4658      	mov	r0, fp
 800501a:	f7fd fafb 	bl	8002614 <ReadMutex>
		telemetry_send.sb_data.pressure = local_sb_data.baro.pressure;
 800501e:	9b00      	ldr	r3, [sp, #0]
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data, sizeof(state_est_data));
 8005020:	aa08      	add	r2, sp, #32
 8005022:	4934      	ldr	r1, [pc, #208]	; (80050f4 <vTaskXbee+0x19c>)
		telemetry_send.sb_data.pressure = local_sb_data.baro.pressure;
 8005024:	9318      	str	r3, [sp, #96]	; 0x60
		telemetry_send.sb_data.temperature = local_sb_data.baro.temperature;
 8005026:	9b01      	ldr	r3, [sp, #4]
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data, sizeof(state_est_data));
 8005028:	4833      	ldr	r0, [pc, #204]	; (80050f8 <vTaskXbee+0x1a0>)
		telemetry_send.sb_data.temperature = local_sb_data.baro.temperature;
 800502a:	9319      	str	r3, [sp, #100]	; 0x64
		telemetry_send.sb_data.acc_x = local_sb_data.imu.acc_x;
 800502c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8005030:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
		telemetry_send.sb_data.acc_y = local_sb_data.imu.acc_y;
 8005034:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8005038:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		telemetry_send.sb_data.acc_z = local_sb_data.imu.acc_z;
 800503c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8005040:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
		telemetry_send.sb_data.gyro_x = local_sb_data.imu.gyro_x;
 8005044:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005048:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
		telemetry_send.sb_data.gyro_y = local_sb_data.imu.gyro_y;
 800504c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005050:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
		telemetry_send.sb_data.gyro_z = local_sb_data.imu.gyro_z;
 8005054:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8005058:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data, sizeof(state_est_data));
 800505c:	233c      	movs	r3, #60	; 0x3c
 800505e:	f7fd fad9 	bl	8002614 <ReadMutex>
		ReadMutex(&motor_mutex, &global_airbrake_extension, &telemetry_send.airbrake_extension, sizeof(global_airbrake_extension));
 8005062:	aa2a      	add	r2, sp, #168	; 0xa8
 8005064:	2304      	movs	r3, #4
 8005066:	4925      	ldr	r1, [pc, #148]	; (80050fc <vTaskXbee+0x1a4>)
 8005068:	4825      	ldr	r0, [pc, #148]	; (8005100 <vTaskXbee+0x1a8>)
 800506a:	f7fd fad3 	bl	8002614 <ReadMutex>
		ReadMutex(&fsm_mutex, &global_flight_phase_detection.flight_phase, &telemetry_send.flight_phase, sizeof(global_flight_phase_detection.flight_phase));
 800506e:	aa2b      	add	r2, sp, #172	; 0xac
 8005070:	2301      	movs	r3, #1
 8005072:	4924      	ldr	r1, [pc, #144]	; (8005104 <vTaskXbee+0x1ac>)
 8005074:	4824      	ldr	r0, [pc, #144]	; (8005108 <vTaskXbee+0x1b0>)
 8005076:	f7fd facd 	bl	8002614 <ReadMutex>
		ReadMutex(&gps_mutex, &globalGPS, &telemetry_send.gps, sizeof(globalGPS));
 800507a:	aa1f      	add	r2, sp, #124	; 0x7c
 800507c:	2324      	movs	r3, #36	; 0x24
 800507e:	4923      	ldr	r1, [pc, #140]	; (800510c <vTaskXbee+0x1b4>)
 8005080:	4823      	ldr	r0, [pc, #140]	; (8005110 <vTaskXbee+0x1b8>)
 8005082:	f7fd fac7 	bl	8002614 <ReadMutex>
		ReadMutex(&battery_mutex, &global_battery_data, &telemetry_send.battery, sizeof(global_battery_data));
 8005086:	aa1d      	add	r2, sp, #116	; 0x74
 8005088:	4922      	ldr	r1, [pc, #136]	; (8005114 <vTaskXbee+0x1bc>)
 800508a:	2306      	movs	r3, #6
 800508c:	4822      	ldr	r0, [pc, #136]	; (8005118 <vTaskXbee+0x1c0>)
 800508e:	f7fd fac1 	bl	8002614 <ReadMutex>
		telemetry_send.height = state_est_data.position_world[2];
 8005092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005094:	9328      	str	r3, [sp, #160]	; 0xa0
		telemetry_send.velocity = state_est_data.velocity_world[2];
 8005096:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005098:	9329      	str	r3, [sp, #164]	; 0xa4
		telemetry_send.ts = osKernelGetTickCount();
 800509a:	f00b f9d3 	bl	8010444 <osKernelGetTickCount>
 800509e:	902c      	str	r0, [sp, #176]	; 0xb0
		telemetry_send.checksum = calculate_checksum(&telemetry_send);
 80050a0:	a817      	add	r0, sp, #92	; 0x5c
 80050a2:	f7ff ff4b 	bl	8004f3c <calculate_checksum>
		HAL_UART_Transmit(&huart7, (uint8_t*) &telemetry_send, sizeof(telemetry_send), 100);
 80050a6:	225c      	movs	r2, #92	; 0x5c
		telemetry_send.checksum = calculate_checksum(&telemetry_send);
 80050a8:	f88d 00b4 	strb.w	r0, [sp, #180]	; 0xb4
		HAL_UART_Transmit(&huart7, (uint8_t*) &telemetry_send, sizeof(telemetry_send), 100);
 80050ac:	2364      	movs	r3, #100	; 0x64
 80050ae:	eb0d 0102 	add.w	r1, sp, r2
 80050b2:	4650      	mov	r0, sl
 80050b4:	f007 fce8 	bl	800ca88 <HAL_UART_Transmit>
		telemetry_send.checksum = 0;
 80050b8:	2300      	movs	r3, #0
		uart_counter = 0;
 80050ba:	4a18      	ldr	r2, [pc, #96]	; (800511c <vTaskXbee+0x1c4>)
		osDelayUntil(tick_count);
 80050bc:	4630      	mov	r0, r6
		telemetry_send.checksum = 0;
 80050be:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
		uart_counter = 0;
 80050c2:	6013      	str	r3, [r2, #0]
		osDelayUntil(tick_count);
 80050c4:	f00b fa46 	bl	8010554 <osDelayUntil>
		if(fast_sampling){
 80050c8:	e772      	b.n	8004fb0 <vTaskXbee+0x58>
			tick_count += tick_update_slow;
 80050ca:	4446      	add	r6, r8
 80050cc:	e774      	b.n	8004fb8 <vTaskXbee+0x60>
			fast_sampling = true;
 80050ce:	2501      	movs	r5, #1
 80050d0:	e78d      	b.n	8004fee <vTaskXbee+0x96>
 80050d2:	bf00      	nop
 80050d4:	2401f02d 	.word	0x2401f02d
 80050d8:	2401f02c 	.word	0x2401f02c
 80050dc:	08016196 	.word	0x08016196
 80050e0:	2400c20c 	.word	0x2400c20c
 80050e4:	240166d4 	.word	0x240166d4
 80050e8:	24000338 	.word	0x24000338
 80050ec:	24000240 	.word	0x24000240
 80050f0:	2400024c 	.word	0x2400024c
 80050f4:	24000294 	.word	0x24000294
 80050f8:	240166a8 	.word	0x240166a8
 80050fc:	2401a830 	.word	0x2401a830
 8005100:	24009e70 	.word	0x24009e70
 8005104:	24000234 	.word	0x24000234
 8005108:	24009cd4 	.word	0x24009cd4
 800510c:	240166b0 	.word	0x240166b0
 8005110:	2401a73c 	.word	0x2401a73c
 8005114:	2400e2b0 	.word	0x2400e2b0
 8005118:	24009d64 	.word	0x24009d64
 800511c:	2400033c 	.word	0x2400033c
 8005120:	24009d6c 	.word	0x24009d6c
 8005124:	24010414 	.word	0x24010414

08005128 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
 8005128:	f00c bd9c 	b.w	8011c64 <ucQueueGetQueueType>

0800512c <prvTraceGetTaskNumberLow16>:
}

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 800512c:	b508      	push	{r3, lr}
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 800512e:	f00d fc33 	bl	8012998 <uxTaskGetTaskNumber>
}
 8005132:	b280      	uxth	r0, r0
 8005134:	bd08      	pop	{r3, pc}

08005136 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 8005136:	b508      	push	{r3, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 8005138:	f00d fc2e 	bl	8012998 <uxTaskGetTaskNumber>
}
 800513c:	0c00      	lsrs	r0, r0, #16
 800513e:	bd08      	pop	{r3, pc}

08005140 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4604      	mov	r4, r0
 8005144:	460d      	mov	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 8005146:	f00d fc27 	bl	8012998 <uxTaskGetTaskNumber>
 800514a:	0c00      	lsrs	r0, r0, #16
 800514c:	0400      	lsls	r0, r0, #16
 800514e:	ea40 0105 	orr.w	r1, r0, r5
 8005152:	4620      	mov	r0, r4
}
 8005154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 8005158:	f00d bc21 	b.w	801299e <vTaskSetTaskNumber>

0800515c <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 800515c:	b538      	push	{r3, r4, r5, lr}
 800515e:	4604      	mov	r4, r0
 8005160:	460d      	mov	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8005162:	f00d fc19 	bl	8012998 <uxTaskGetTaskNumber>
 8005166:	b280      	uxth	r0, r0
 8005168:	ea40 4105 	orr.w	r1, r0, r5, lsl #16
 800516c:	4620      	mov	r0, r4
}
 800516e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8005172:	f00d bc14 	b.w	801299e <vTaskSetTaskNumber>

08005176 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
 8005176:	b508      	push	{r3, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8005178:	f00c fd70 	bl	8011c5c <uxQueueGetQueueNumber>
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
}
 800517c:	b280      	uxth	r0, r0
 800517e:	bd08      	pop	{r3, pc}

08005180 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 8005180:	b508      	push	{r3, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8005182:	f00c fd6b 	bl	8011c5c <uxQueueGetQueueNumber>
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
}
 8005186:	0c00      	lsrs	r0, r0, #16
 8005188:	bd08      	pop	{r3, pc}

0800518a <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
 800518a:	b538      	push	{r3, r4, r5, lr}
 800518c:	4604      	mov	r4, r0
 800518e:	460d      	mov	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8005190:	f00c fd64 	bl	8011c5c <uxQueueGetQueueNumber>
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 8005194:	0c00      	lsrs	r0, r0, #16
 8005196:	0400      	lsls	r0, r0, #16
 8005198:	ea40 0105 	orr.w	r1, r0, r5
 800519c:	4620      	mov	r0, r4
}
 800519e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 80051a2:	f00c bd5d 	b.w	8011c60 <vQueueSetQueueNumber>

080051a6 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 80051a6:	b538      	push	{r3, r4, r5, lr}
 80051a8:	4604      	mov	r4, r0
 80051aa:	460d      	mov	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
 80051ac:	f00c fd56 	bl	8011c5c <uxQueueGetQueueNumber>
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 80051b0:	b280      	uxth	r0, r0
 80051b2:	ea40 4105 	orr.w	r1, r0, r5, lsl #16
 80051b6:	4620      	mov	r0, r4
}
 80051b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 80051bc:	f00c bd50 	b.w	8011c60 <vQueueSetQueueNumber>

080051c0 <prvAddTaskToStackMonitor>:
{
	int i;
	int foundEmptySlot = 0;

	// find an empty slot
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 80051c0:	2300      	movs	r3, #0
	{
		if (tasksInStackMonitor[i].tcb == NULL)
 80051c2:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <prvAddTaskToStackMonitor+0x2c>)
{
 80051c4:	b510      	push	{r4, lr}
		if (tasksInStackMonitor[i].tcb == NULL)
 80051c6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80051ca:	00d9      	lsls	r1, r3, #3
 80051cc:	b934      	cbnz	r4, 80051dc <prvAddTaskToStackMonitor+0x1c>
		{
			tasksInStackMonitor[i].tcb = task;
 80051ce:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
 80051d2:	440a      	add	r2, r1
 80051d4:	f04f 33ff 	mov.w	r3, #4294967295
 80051d8:	6053      	str	r3, [r2, #4]

	if (foundEmptySlot == 0)
	{
		tasksNotIncluded++;
	}
}
 80051da:	bd10      	pop	{r4, pc}
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 80051dc:	3301      	adds	r3, #1
 80051de:	2b0a      	cmp	r3, #10
 80051e0:	d1f1      	bne.n	80051c6 <prvAddTaskToStackMonitor+0x6>
		tasksNotIncluded++;
 80051e2:	4a03      	ldr	r2, [pc, #12]	; (80051f0 <prvAddTaskToStackMonitor+0x30>)
 80051e4:	6813      	ldr	r3, [r2, #0]
 80051e6:	3301      	adds	r3, #1
 80051e8:	6013      	str	r3, [r2, #0]
}
 80051ea:	e7f6      	b.n	80051da <prvAddTaskToStackMonitor+0x1a>
 80051ec:	24000748 	.word	0x24000748
 80051f0:	24000798 	.word	0x24000798

080051f4 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
 80051f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
 80051f6:	4c15      	ldr	r4, [pc, #84]	; (800524c <prvReportStackUsage+0x58>)
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
 80051f8:	4d15      	ldr	r5, [pc, #84]	; (8005250 <prvReportStackUsage+0x5c>)
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
 80051fa:	6827      	ldr	r7, [r4, #0]
 80051fc:	462e      	mov	r6, r5
		if (tasksInStackMonitor[i].tcb != NULL)
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	f855 0033 	ldr.w	r0, [r5, r3, lsl #3]
 8005204:	b1b0      	cbz	r0, 8005234 <prvReportStackUsage+0x40>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
 8005206:	f00d fbcd 	bl	80129a4 <uxTaskGetStackHighWaterMark>

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8005210:	6851      	ldr	r1, [r2, #4]
 8005212:	4281      	cmp	r1, r0
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
 8005214:	bf88      	it	hi
 8005216:	6050      	strhi	r0, [r2, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 8005218:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
 800521c:	f00d fbbc 	bl	8012998 <uxTaskGetTaskNumber>

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	b2c2      	uxtb	r2, r0
 8005224:	2103      	movs	r1, #3
 8005226:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800522a:	20ea      	movs	r0, #234	; 0xea
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f000 fe67 	bl	8005f00 <prvTraceStoreKernelCallWithParam>
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
 8005232:	2001      	movs	r0, #1
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	210a      	movs	r1, #10
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	fb92 f3f1 	sdiv	r3, r2, r1
 800523e:	fb01 2313 	mls	r3, r1, r3, r2
 8005242:	6023      	str	r3, [r4, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
 8005244:	b908      	cbnz	r0, 800524a <prvReportStackUsage+0x56>
 8005246:	42bb      	cmp	r3, r7
 8005248:	d1d9      	bne.n	80051fe <prvReportStackUsage+0xa>
}
 800524a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800524c:	24000344 	.word	0x24000344
 8005250:	24000748 	.word	0x24000748

08005254 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
 8005254:	b508      	push	{r3, lr}
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
 8005256:	f000 f929 	bl	80054ac <xTraceIsRecordingEnabled>
 800525a:	b108      	cbz	r0, 8005260 <TzCtrl+0xc>
		{
			prvReportStackUsage();
 800525c:	f7ff ffca 	bl	80051f4 <prvReportStackUsage>
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 8005260:	200a      	movs	r0, #10
 8005262:	f00d f9fd 	bl	8012660 <vTaskDelay>
		if (xTraceIsRecordingEnabled())
 8005266:	e7f6      	b.n	8005256 <TzCtrl+0x2>

08005268 <prvTraceGetCurrentTaskHandle>:
	return xTaskGetCurrentTaskHandle();
 8005268:	f00d bbac 	b.w	80129c4 <xTaskGetCurrentTaskHandle>

0800526c <vTraceEnable>:
{
 800526c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800526e:	4604      	mov	r4, r0
	prvTraceInitTraceData();
 8005270:	f000 fc34 	bl	8005adc <prvTraceInitTraceData>
	if (startOption == TRC_START)
 8005274:	2c01      	cmp	r4, #1
 8005276:	d113      	bne.n	80052a0 <vTraceEnable+0x34>
		vTraceStart();
 8005278:	f000 ff8c 	bl	8006194 <vTraceStart>
	if (HandleTzCtrl == NULL)
 800527c:	4c0d      	ldr	r4, [pc, #52]	; (80052b4 <vTraceEnable+0x48>)
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	b963      	cbnz	r3, 800529c <vTraceEnable+0x30>
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
 8005282:	4a0d      	ldr	r2, [pc, #52]	; (80052b8 <vTraceEnable+0x4c>)
 8005284:	490d      	ldr	r1, [pc, #52]	; (80052bc <vTraceEnable+0x50>)
 8005286:	9202      	str	r2, [sp, #8]
 8005288:	4a0d      	ldr	r2, [pc, #52]	; (80052c0 <vTraceEnable+0x54>)
 800528a:	480e      	ldr	r0, [pc, #56]	; (80052c4 <vTraceEnable+0x58>)
 800528c:	9201      	str	r2, [sp, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	9200      	str	r2, [sp, #0]
 8005292:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005296:	f00c ff69 	bl	801216c <xTaskCreateStatic>
 800529a:	6020      	str	r0, [r4, #0]
}
 800529c:	b004      	add	sp, #16
 800529e:	bd10      	pop	{r4, pc}
	else if (startOption == TRC_START_AWAIT_HOST)
 80052a0:	2c02      	cmp	r4, #2
 80052a2:	d103      	bne.n	80052ac <vTraceEnable+0x40>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 80052a4:	4808      	ldr	r0, [pc, #32]	; (80052c8 <vTraceEnable+0x5c>)
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 80052a6:	f000 f909 	bl	80054bc <prvTraceError>
 80052aa:	e7e7      	b.n	800527c <vTraceEnable+0x10>
	else if (startOption != TRC_INIT)
 80052ac:	2c00      	cmp	r4, #0
 80052ae:	d0e5      	beq.n	800527c <vTraceEnable+0x10>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 80052b0:	4806      	ldr	r0, [pc, #24]	; (80052cc <vTraceEnable+0x60>)
 80052b2:	e7f8      	b.n	80052a6 <vTraceEnable+0x3a>
 80052b4:	24000340 	.word	0x24000340
 80052b8:	2400079c 	.word	0x2400079c
 80052bc:	0801655a 	.word	0x0801655a
 80052c0:	24000348 	.word	0x24000348
 80052c4:	08005255 	.word	0x08005255
 80052c8:	080164e6 	.word	0x080164e6
 80052cc:	08016526 	.word	0x08016526

080052d0 <vTraceInitObjectPropertyTable>:
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 80052d0:	4b19      	ldr	r3, [pc, #100]	; (8005338 <vTraceInitObjectPropertyTable+0x68>)
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 80052d2:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 80052d6:	4919      	ldr	r1, [pc, #100]	; (800533c <vTraceInitObjectPropertyTable+0x6c>)
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 80052d8:	f44f 0020 	mov.w	r0, #10485760	; 0xa00000
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f04f 0c09 	mov.w	ip, #9
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 80052e2:	e9c3 221c 	strd	r2, r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 80052e6:	220f      	movs	r2, #15
 80052e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 80052ec:	4a14      	ldr	r2, [pc, #80]	; (8005340 <vTraceInitObjectPropertyTable+0x70>)
 80052ee:	e9c3 121f 	strd	r1, r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 80052f2:	2213      	movs	r2, #19
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 80052f4:	4913      	ldr	r1, [pc, #76]	; (8005344 <vTraceInitObjectPropertyTable+0x74>)
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 80052f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 80052fa:	4a13      	ldr	r2, [pc, #76]	; (8005348 <vTraceInitObjectPropertyTable+0x78>)
 80052fc:	e9c3 0222 	strd	r0, r2, [r3, #136]	; 0x88
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 8005300:	f102 72b9 	add.w	r2, r2, #24248320	; 0x1720000
 8005304:	f202 225d 	addw	r2, r2, #605	; 0x25d
 8005308:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 800530c:	f502 022f 	add.w	r2, r2, #11468800	; 0xaf0000
 8005310:	32a5      	adds	r2, #165	; 0xa5
 8005312:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 8005316:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800531a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 800531e:	f240 525f 	movw	r2, #1375	; 0x55f
 8005322:	e9c3 c217 	strd	ip, r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 8005326:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800532a:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 800532e:	2205      	movs	r2, #5
 8005330:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
}
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	240007fc 	.word	0x240007fc
 800533c:	13101010 	.word	0x13101010
 8005340:	13131011 	.word	0x13131011
 8005344:	0f140a0a 	.word	0x0f140a0a
 8005348:	02800140 	.word	0x02800140

0800534c <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 800534c:	4b17      	ldr	r3, [pc, #92]	; (80053ac <vTraceInitObjectHandleStack+0x60>)
 800534e:	2200      	movs	r2, #0
 8005350:	825a      	strh	r2, [r3, #18]
 8005352:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8005354:	220a      	movs	r2, #10
 8005356:	829a      	strh	r2, [r3, #20]
 8005358:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 800535a:	2214      	movs	r2, #20
 800535c:	82da      	strh	r2, [r3, #22]
 800535e:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8005360:	2228      	movs	r2, #40	; 0x28
 8005362:	831a      	strh	r2, [r3, #24]
 8005364:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8005366:	2237      	movs	r2, #55	; 0x37
 8005368:	835a      	strh	r2, [r3, #26]
 800536a:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 800536c:	223c      	movs	r2, #60	; 0x3c
 800536e:	839a      	strh	r2, [r3, #28]
 8005370:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8005372:	2241      	movs	r2, #65	; 0x41
 8005374:	83da      	strh	r2, [r3, #30]
 8005376:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8005378:	2246      	movs	r2, #70	; 0x46
 800537a:	841a      	strh	r2, [r3, #32]
 800537c:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 800537e:	224b      	movs	r2, #75	; 0x4b
 8005380:	845a      	strh	r2, [r3, #34]	; 0x22
 8005382:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8005384:	2209      	movs	r2, #9
 8005386:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8005388:	2213      	movs	r2, #19
 800538a:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 800538c:	2227      	movs	r2, #39	; 0x27
 800538e:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8005390:	2236      	movs	r2, #54	; 0x36
 8005392:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8005394:	223b      	movs	r2, #59	; 0x3b
 8005396:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8005398:	2240      	movs	r2, #64	; 0x40
 800539a:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 800539c:	2245      	movs	r2, #69	; 0x45
 800539e:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 80053a0:	224a      	movs	r2, #74	; 0x4a
 80053a2:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 80053a4:	224f      	movs	r2, #79	; 0x4f
 80053a6:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	24000818 	.word	0x24000818

080053b0 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 80053b0:	2808      	cmp	r0, #8
 80053b2:	bf9a      	itte	ls
 80053b4:	4b02      	ldrls	r3, [pc, #8]	; (80053c0 <pszTraceGetErrorNotEnoughHandles+0x10>)
 80053b6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80053ba:	4802      	ldrhi	r0, [pc, #8]	; (80053c4 <pszTraceGetErrorNotEnoughHandles+0x14>)
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
	}
}
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	080161d0 	.word	0x080161d0
 80053c4:	080161f4 	.word	0x080161f4

080053c8 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 80053c8:	3901      	subs	r1, #1
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 80053ca:	2300      	movs	r3, #0
{
 80053cc:	b510      	push	{r4, lr}
	for (i = 0; i < maxLength; i++)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d100      	bne.n	80053d4 <prvStrncpy+0xc>
	{
		dst[i] = src[i];
		if (src[i] == 0)
			break;
	}
}
 80053d2:	bd10      	pop	{r4, pc}
		dst[i] = src[i];
 80053d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80053d8:	54c4      	strb	r4, [r0, r3]
		if (src[i] == 0)
 80053da:	780c      	ldrb	r4, [r1, #0]
 80053dc:	2c00      	cmp	r4, #0
 80053de:	d0f8      	beq.n	80053d2 <prvStrncpy+0xa>
	for (i = 0; i < maxLength; i++)
 80053e0:	3301      	adds	r3, #1
 80053e2:	e7f4      	b.n	80053ce <prvStrncpy+0x6>

080053e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1>:
 *
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
 80053e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 80053e8:	2400      	movs	r4, #0
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
 80053ea:	4606      	mov	r6, r0
	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 80053ec:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800545c <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1+0x78>
 80053f0:	4625      	mov	r5, r4
	while (i < nofEntriesToCheck)
 80053f2:	42b4      	cmp	r4, r6
 80053f4:	d301      	bcc.n	80053fa <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1+0x16>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
 80053f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		e = RecorderDataPtr->nextFreeIndex + i;
 80053fa:	f8d8 0000 	ldr.w	r0, [r8]
 80053fe:	69c3      	ldr	r3, [r0, #28]
 8005400:	4423      	add	r3, r4
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8005402:	0099      	lsls	r1, r3, #2
 8005404:	1842      	adds	r2, r0, r1
 8005406:	f892 2a08 	ldrb.w	r2, [r2, #2568]	; 0xa08
 800540a:	f102 0c67 	add.w	ip, r2, #103	; 0x67
 800540e:	fa5f fc8c 	uxtb.w	ip, ip
 8005412:	f1bc 0f0e 	cmp.w	ip, #14
 8005416:	d80f      	bhi.n	8005438 <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1+0x54>
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8005418:	3268      	adds	r2, #104	; 0x68
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 800541a:	6987      	ldr	r7, [r0, #24]
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 800541c:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 800541e:	4413      	add	r3, r2
 8005420:	42bb      	cmp	r3, r7
 8005422:	d207      	bcs.n	8005434 <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1+0x50>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8005424:	f601 2308 	addw	r3, r1, #2568	; 0xa08
 8005428:	3201      	adds	r2, #1
 800542a:	2100      	movs	r1, #0
 800542c:	0092      	lsls	r2, r2, #2
 800542e:	4418      	add	r0, r3
 8005430:	f00e fb75 	bl	8013b1e <memset>
		i++;
 8005434:	3401      	adds	r4, #1
 8005436:	e7dc      	b.n	80053f2 <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1+0xe>
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8005438:	2a01      	cmp	r2, #1
 800543a:	d1fb      	bne.n	8005434 <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1+0x50>
 800543c:	f601 2208 	addw	r2, r1, #2568	; 0xa08
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8005440:	3301      	adds	r3, #1
 8005442:	6981      	ldr	r1, [r0, #24]
 8005444:	eb00 0c02 	add.w	ip, r0, r2
 8005448:	428b      	cmp	r3, r1
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 800544a:	bf35      	itete	cc
 800544c:	5085      	strcc	r5, [r0, r2]
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 800544e:	f8c0 5a08 	strcs.w	r5, [r0, #2568]	; 0xa08
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8005452:	f8cc 5004 	strcc.w	r5, [ip, #4]
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8005456:	5085      	strcs	r5, [r0, r2]
 8005458:	e7ec      	b.n	8005434 <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1+0x50>
 800545a:	bf00      	nop
 800545c:	240007fc 	.word	0x240007fc

08005460 <prvTraceUpdateCounters>:
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
	if (RecorderDataPtr->recorderActive == 0)
 8005460:	4b0a      	ldr	r3, [pc, #40]	; (800548c <prvTraceUpdateCounters+0x2c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005466:	b17a      	cbz	r2, 8005488 <prvTraceUpdateCounters+0x28>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8005468:	695a      	ldr	r2, [r3, #20]
 800546a:	2001      	movs	r0, #1
 800546c:	3201      	adds	r2, #1
 800546e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	3201      	adds	r2, #1

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8005474:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
	RecorderDataPtr->nextFreeIndex++;
 8005478:	61da      	str	r2, [r3, #28]
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
		RecorderDataPtr->nextFreeIndex = 0;
 800547a:	bf22      	ittt	cs
 800547c:	2101      	movcs	r1, #1
 800547e:	2200      	movcs	r2, #0
 8005480:	e9c3 2107 	strdcs	r2, r1, [r3, #28]
 8005484:	f7ff bfae 	b.w	80053e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents.part.1>
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
#endif
}
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	240007fc 	.word	0x240007fc

08005490 <vTraceStop>:
	if (RecorderDataPtr != NULL)
 8005490:	4b04      	ldr	r3, [pc, #16]	; (80054a4 <vTraceStop+0x14>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	b10b      	cbz	r3, 800549a <vTraceStop+0xa>
		RecorderDataPtr->recorderActive = 0;
 8005496:	2200      	movs	r2, #0
 8005498:	631a      	str	r2, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800549a:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <vTraceStop+0x18>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	b103      	cbz	r3, 80054a2 <vTraceStop+0x12>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80054a0:	4718      	bx	r3
}
 80054a2:	4770      	bx	lr
 80054a4:	240007fc 	.word	0x240007fc
 80054a8:	240008cc 	.word	0x240008cc

080054ac <xTraceIsRecordingEnabled>:
	if (RecorderDataPtr != NULL)
 80054ac:	4b02      	ldr	r3, [pc, #8]	; (80054b8 <xTraceIsRecordingEnabled+0xc>)
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	b100      	cbz	r0, 80054b4 <xTraceIsRecordingEnabled+0x8>
		return (int)RecorderDataPtr->recorderActive;
 80054b2:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	240007fc 	.word	0x240007fc

080054bc <prvTraceError>:
{
 80054bc:	b538      	push	{r3, r4, r5, lr}
	if (RecorderDataPtr != NULL)
 80054be:	4c0b      	ldr	r4, [pc, #44]	; (80054ec <prvTraceError+0x30>)
{
 80054c0:	4605      	mov	r5, r0
	if (RecorderDataPtr != NULL)
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	b10b      	cbz	r3, 80054ca <prvTraceError+0xe>
		vTraceStop();
 80054c6:	f7ff ffe3 	bl	8005490 <vTraceStop>
	if (traceErrorMessage == NULL)
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <prvTraceError+0x34>)
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	b962      	cbnz	r2, 80054ea <prvTraceError+0x2e>
		if (RecorderDataPtr != NULL)
 80054d0:	6820      	ldr	r0, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 80054d2:	601d      	str	r5, [r3, #0]
		if (RecorderDataPtr != NULL)
 80054d4:	b148      	cbz	r0, 80054ea <prvTraceError+0x2e>
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80054d6:	2250      	movs	r2, #80	; 0x50
 80054d8:	4629      	mov	r1, r5
 80054da:	f600 10b4 	addw	r0, r0, #2484	; 0x9b4
 80054de:	f7ff ff73 	bl	80053c8 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f8c3 29ac 	str.w	r2, [r3, #2476]	; 0x9ac
}
 80054ea:	bd38      	pop	{r3, r4, r5, pc}
 80054ec:	240007fc 	.word	0x240007fc
 80054f0:	240008bc 	.word	0x240008bc

080054f4 <prvTraceNextFreeEventBufferSlot>:
{
 80054f4:	b508      	push	{r3, lr}
	if (! RecorderDataPtr->recorderActive)
 80054f6:	4b09      	ldr	r3, [pc, #36]	; (800551c <prvTraceNextFreeEventBufferSlot+0x28>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054fc:	b138      	cbz	r0, 800550e <prvTraceNextFreeEventBufferSlot+0x1a>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80054fe:	69d8      	ldr	r0, [r3, #28]
 8005500:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005504:	d304      	bcc.n	8005510 <prvTraceNextFreeEventBufferSlot+0x1c>
		prvTraceError("Attempt to index outside event buffer!");
 8005506:	4806      	ldr	r0, [pc, #24]	; (8005520 <prvTraceNextFreeEventBufferSlot+0x2c>)
 8005508:	f7ff ffd8 	bl	80054bc <prvTraceError>
		return NULL;
 800550c:	2000      	movs	r0, #0
}
 800550e:	bd08      	pop	{r3, pc}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8005510:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005514:	f600 2008 	addw	r0, r0, #2568	; 0xa08
 8005518:	e7f9      	b.n	800550e <prvTraceNextFreeEventBufferSlot+0x1a>
 800551a:	bf00      	nop
 800551c:	240007fc 	.word	0x240007fc
 8005520:	080167ad 	.word	0x080167ad

08005524 <prvTraceGetParam.part.5>:
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4605      	mov	r5, r0
 8005528:	460c      	mov	r4, r1
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 800552a:	f7ff ffe3 	bl	80054f4 <prvTraceNextFreeEventBufferSlot>
		if (xps != NULL)
 800552e:	b148      	cbz	r0, 8005544 <prvTraceGetParam.part.5+0x20>
			xps->type = DIV_XPS;
 8005530:	2301      	movs	r3, #1
 8005532:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8005534:	ea24 0305 	bic.w	r3, r4, r5
 8005538:	0a1a      	lsrs	r2, r3, #8
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 800553a:	0c1b      	lsrs	r3, r3, #16
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 800553c:	7042      	strb	r2, [r0, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 800553e:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
 8005540:	f7ff ff8e 	bl	8005460 <prvTraceUpdateCounters>
}
 8005544:	ea05 0004 	and.w	r0, r5, r4
 8005548:	bd38      	pop	{r3, r4, r5, pc}
	...

0800554c <prvTraceOpenSymbol>:
{
 800554c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005550:	468b      	mov	fp, r1
 8005552:	b087      	sub	sp, #28
	TRACE_ASSERT(name != NULL, "prvTraceOpenSymbol: name == NULL", (traceString)0);
 8005554:	4682      	mov	sl, r0
 8005556:	2800      	cmp	r0, #0
 8005558:	d136      	bne.n	80055c8 <prvTraceOpenSymbol+0x7c>
 800555a:	4654      	mov	r4, sl
 800555c:	484a      	ldr	r0, [pc, #296]	; (8005688 <prvTraceOpenSymbol+0x13c>)
 800555e:	f7ff ffad 	bl	80054bc <prvTraceError>
}
 8005562:	4620      	mov	r0, r4
 8005564:	b007      	add	sp, #28
 8005566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	if (pname != (const char *) 0)
	{
		for (; (c = (unsigned char) *pname++) != '\0';)
		{
			crc += c;
 800556a:	4498      	add	r8, r3
			length++;
 800556c:	3601      	adds	r6, #1
		for (; (c = (unsigned char) *pname++) != '\0';)
 800556e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f9      	bne.n	800556a <prvTraceOpenSymbol+0x1e>
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
	*plength = (uint8_t)length;
 8005576:	b2f6      	uxtb	r6, r6
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005578:	f3ef 8310 	mrs	r3, PRIMASK
 800557c:	9302      	str	r3, [sp, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800557e:	2301      	movs	r3, #1
 8005580:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 8005584:	4b41      	ldr	r3, [pc, #260]	; (800568c <prvTraceOpenSymbol+0x140>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	3201      	adds	r2, #1
 800558c:	601a      	str	r2, [r3, #0]
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceString)0);
 800558e:	b306      	cbz	r6, 80055d2 <prvTraceOpenSymbol+0x86>
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 8005590:	4a3f      	ldr	r2, [pc, #252]	; (8005690 <prvTraceOpenSymbol+0x144>)
 8005592:	f008 083f 	and.w	r8, r8, #63	; 0x3f
 8005596:	4635      	mov	r5, r6
 8005598:	6817      	ldr	r7, [r2, #0]
 800559a:	f208 4394 	addw	r3, r8, #1172	; 0x494
 800559e:	9203      	str	r2, [sp, #12]
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 80055a0:	fa5f f28b 	uxtb.w	r2, fp
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 80055a4:	f837 9013 	ldrh.w	r9, [r7, r3, lsl #1]
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 80055a8:	ea4f 231b 	mov.w	r3, fp, lsr #8
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 80055ac:	9204      	str	r2, [sp, #16]
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 80055ae:	464c      	mov	r4, r9
	while (i != 0)
 80055b0:	b9fc      	cbnz	r4, 80055f2 <prvTraceOpenSymbol+0xa6>
	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= (TRC_CFG_SYMBOL_TABLE_SIZE))
 80055b2:	f8d7 0604 	ldr.w	r0, [r7, #1540]	; 0x604
 80055b6:	1d02      	adds	r2, r0, #4
 80055b8:	442a      	add	r2, r5
 80055ba:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 80055be:	d33c      	bcc.n	800563a <prvTraceOpenSymbol+0xee>
		prvTraceError("Symbol table full. Increase TRC_CFG_SYMBOL_TABLE_SIZE in trcConfig.h");
 80055c0:	4834      	ldr	r0, [pc, #208]	; (8005694 <prvTraceOpenSymbol+0x148>)
 80055c2:	f7ff ff7b 	bl	80054bc <prvTraceError>
 80055c6:	e00b      	b.n	80055e0 <prvTraceOpenSymbol+0x94>
 80055c8:	4602      	mov	r2, r0
	int crc = 0;
 80055ca:	f04f 0800 	mov.w	r8, #0
	int length = 1;		/* Should be 1 to account for '\0' */
 80055ce:	2601      	movs	r6, #1
 80055d0:	e7cd      	b.n	800556e <prvTraceOpenSymbol+0x22>
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceString)0);
 80055d2:	4831      	ldr	r0, [pc, #196]	; (8005698 <prvTraceOpenSymbol+0x14c>)
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);
 80055d4:	4634      	mov	r4, r6
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceString)0);
 80055d6:	f7ff ff71 	bl	80054bc <prvTraceError>
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);
 80055da:	4830      	ldr	r0, [pc, #192]	; (800569c <prvTraceOpenSymbol+0x150>)
 80055dc:	f7ff ff6e 	bl	80054bc <prvTraceError>
	trcCRITICAL_SECTION_END();
 80055e0:	9b01      	ldr	r3, [sp, #4]
 80055e2:	9a01      	ldr	r2, [sp, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	9b02      	ldr	r3, [sp, #8]
 80055ec:	f383 8810 	msr	PRIMASK, r3
	return result;
 80055f0:	e7b7      	b.n	8005562 <prvTraceOpenSymbol+0x16>
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 80055f2:	193a      	adds	r2, r7, r4
 80055f4:	9804      	ldr	r0, [sp, #16]
 80055f6:	f892 160a 	ldrb.w	r1, [r2, #1546]	; 0x60a
 80055fa:	4281      	cmp	r1, r0
 80055fc:	d114      	bne.n	8005628 <prvTraceOpenSymbol+0xdc>
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 80055fe:	f892 260b 	ldrb.w	r2, [r2, #1547]	; 0x60b
 8005602:	429a      	cmp	r2, r3
 8005604:	d110      	bne.n	8005628 <prvTraceOpenSymbol+0xdc>
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
 8005606:	1d22      	adds	r2, r4, #4
 8005608:	443a      	add	r2, r7
 800560a:	442a      	add	r2, r5
 800560c:	f892 2608 	ldrb.w	r2, [r2, #1544]	; 0x608
 8005610:	b952      	cbnz	r2, 8005628 <prvTraceOpenSymbol+0xdc>
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
 8005612:	f204 600c 	addw	r0, r4, #1548	; 0x60c
 8005616:	462a      	mov	r2, r5
 8005618:	4651      	mov	r1, sl
 800561a:	9305      	str	r3, [sp, #20]
 800561c:	4438      	add	r0, r7
 800561e:	f00e fb7b 	bl	8013d18 <strncmp>
 8005622:	9b05      	ldr	r3, [sp, #20]
 8005624:	2800      	cmp	r0, #0
 8005626:	d0db      	beq.n	80055e0 <prvTraceOpenSymbol+0x94>
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
 8005628:	443c      	add	r4, r7
 800562a:	f894 2609 	ldrb.w	r2, [r4, #1545]	; 0x609
 800562e:	f894 4608 	ldrb.w	r4, [r4, #1544]	; 0x608
 8005632:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 8005636:	b2a4      	uxth	r4, r4
 8005638:	e7ba      	b.n	80055b0 <prvTraceOpenSymbol+0x64>
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 800563a:	183a      	adds	r2, r7, r0
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 800563c:	f200 600c 	addw	r0, r0, #1548	; 0x60c
 8005640:	4651      	mov	r1, sl
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8005642:	f208 4894 	addw	r8, r8, #1172	; 0x494
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 8005646:	f882 9608 	strb.w	r9, [r2, #1544]	; 0x608
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 800564a:	ea4f 2919 	mov.w	r9, r9, lsr #8
			(uint8_t)(channel / 0x100);
 800564e:	f882 360b 	strb.w	r3, [r2, #1547]	; 0x60b
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 8005652:	4438      	add	r0, r7
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 8005654:	f882 9609 	strb.w	r9, [r2, #1545]	; 0x609
			(uint8_t)(channel & 0x00FF);
 8005658:	f882 b60a 	strb.w	fp, [r2, #1546]	; 0x60a
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 800565c:	462a      	mov	r2, r5
 800565e:	f7ff feb3 	bl	80053c8 <prvStrncpy>
		RecorderDataPtr->SymbolTable.symbytes
 8005662:	9b03      	ldr	r3, [sp, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 8005666:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 800566a:	4415      	add	r5, r2
 800566c:	1959      	adds	r1, r3, r5
		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 800566e:	3505      	adds	r5, #5
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 8005670:	f881 460c 	strb.w	r4, [r1, #1548]	; 0x60c
		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 8005674:	1d74      	adds	r4, r6, #5
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 8005676:	f823 2018 	strh.w	r2, [r3, r8, lsl #1]
		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 800567a:	b2e4      	uxtb	r4, r4
		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 800567c:	f8c3 5604 	str.w	r5, [r3, #1540]	; 0x604
		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 8005680:	1b2d      	subs	r5, r5, r4
 8005682:	b2ac      	uxth	r4, r5
 8005684:	e7ac      	b.n	80055e0 <prvTraceOpenSymbol+0x94>
 8005686:	bf00      	nop
 8005688:	080167d4 	.word	0x080167d4
 800568c:	240008b4 	.word	0x240008b4
 8005690:	240007fc 	.word	0x240007fc
 8005694:	08016871 	.word	0x08016871
 8005698:	08016803 	.word	0x08016803
 800569c:	0801683a 	.word	0x0801683a

080056a0 <uiIndexOfObject>:
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80056a0:	2908      	cmp	r1, #8
{
 80056a2:	b510      	push	{r4, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80056a4:	d904      	bls.n	80056b0 <uiIndexOfObject+0x10>
 80056a6:	480d      	ldr	r0, [pc, #52]	; (80056dc <uiIndexOfObject+0x3c>)
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 80056a8:	f7ff ff08 	bl	80054bc <prvTraceError>
 80056ac:	2000      	movs	r0, #0
}
 80056ae:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 80056b0:	b130      	cbz	r0, 80056c0 <uiIndexOfObject+0x20>
 80056b2:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <uiIndexOfObject+0x40>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	185a      	adds	r2, r3, r1
 80056b8:	f892 4064 	ldrb.w	r4, [r2, #100]	; 0x64
 80056bc:	4284      	cmp	r4, r0
 80056be:	d201      	bcs.n	80056c4 <uiIndexOfObject+0x24>
 80056c0:	4808      	ldr	r0, [pc, #32]	; (80056e4 <uiIndexOfObject+0x44>)
 80056c2:	e7f1      	b.n	80056a8 <uiIndexOfObject+0x8>
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 80056c4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80056c8:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 80056cc:	3801      	subs	r0, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 80056ce:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80056d2:	fb02 3000 	mla	r0, r2, r0, r3
 80056d6:	b280      	uxth	r0, r0
 80056d8:	e7e9      	b.n	80056ae <uiIndexOfObject+0xe>
 80056da:	bf00      	nop
 80056dc:	08016f5e 	.word	0x08016f5e
 80056e0:	240007fc 	.word	0x240007fc
 80056e4:	08016f9b 	.word	0x08016f9b

080056e8 <prvMarkObjectAsUsed>:
{
 80056e8:	b508      	push	{r3, lr}
 80056ea:	460b      	mov	r3, r1
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 80056ec:	4601      	mov	r1, r0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff ffd6 	bl	80056a0 <uiIndexOfObject>
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 80056f4:	4b03      	ldr	r3, [pc, #12]	; (8005704 <prvMarkObjectAsUsed+0x1c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4418      	add	r0, r3
 80056fa:	2301      	movs	r3, #1
 80056fc:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
}
 8005700:	bd08      	pop	{r3, pc}
 8005702:	bf00      	nop
 8005704:	240007fc 	.word	0x240007fc

08005708 <prvTraceStoreObjectNameOnCloseEvent>:
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8005708:	2a08      	cmp	r2, #8
{
 800570a:	b570      	push	{r4, r5, r6, lr}
 800570c:	4606      	mov	r6, r0
 800570e:	460c      	mov	r4, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8005710:	d904      	bls.n	800571c <prvTraceStoreObjectNameOnCloseEvent+0x14>
 8005712:	4812      	ldr	r0, [pc, #72]	; (800575c <prvTraceStoreObjectNameOnCloseEvent+0x54>)
}
 8005714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8005718:	f7ff bed0 	b.w	80054bc <prvTraceError>
 800571c:	4b10      	ldr	r3, [pc, #64]	; (8005760 <prvTraceStoreObjectNameOnCloseEvent+0x58>)
 800571e:	681d      	ldr	r5, [r3, #0]
 8005720:	18ab      	adds	r3, r5, r2
 8005722:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005726:	428b      	cmp	r3, r1
 8005728:	d201      	bcs.n	800572e <prvTraceStoreObjectNameOnCloseEvent+0x26>
 800572a:	480e      	ldr	r0, [pc, #56]	; (8005764 <prvTraceStoreObjectNameOnCloseEvent+0x5c>)
 800572c:	e7f2      	b.n	8005714 <prvTraceStoreObjectNameOnCloseEvent+0xc>
	if (RecorderDataPtr->recorderActive)
 800572e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005730:	b19b      	cbz	r3, 800575a <prvTraceStoreObjectNameOnCloseEvent+0x52>
		name = TRACE_PROPERTY_NAME_GET(objectclass, handle);
 8005732:	4611      	mov	r1, r2
 8005734:	4620      	mov	r0, r4
 8005736:	f7ff ffb3 	bl	80056a0 <uiIndexOfObject>
 800573a:	309c      	adds	r0, #156	; 0x9c
		idx = prvTraceOpenSymbol(name, 0);
 800573c:	2100      	movs	r1, #0
 800573e:	4428      	add	r0, r5
 8005740:	f7ff ff04 	bl	800554c <prvTraceOpenSymbol>
 8005744:	4605      	mov	r5, r0
		ce = (ObjCloseNameEvent*) prvTraceNextFreeEventBufferSlot();
 8005746:	f7ff fed5 	bl	80054f4 <prvTraceNextFreeEventBufferSlot>
		if (ce != NULL)
 800574a:	b130      	cbz	r0, 800575a <prvTraceStoreObjectNameOnCloseEvent+0x52>
			ce->type = (uint8_t) evtcode;
 800574c:	7006      	strb	r6, [r0, #0]
			ce->objHandle = hnd8;
 800574e:	7044      	strb	r4, [r0, #1]
			ce->symbolIndex = idx;
 8005750:	8045      	strh	r5, [r0, #2]
}
 8005752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			prvTraceUpdateCounters();
 8005756:	f7ff be83 	b.w	8005460 <prvTraceUpdateCounters>
}
 800575a:	bd70      	pop	{r4, r5, r6, pc}
 800575c:	08016d24 	.word	0x08016d24
 8005760:	240007fc 	.word	0x240007fc
 8005764:	08016d75 	.word	0x08016d75

08005768 <prvTraceStoreObjectPropertiesOnCloseEvent>:
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8005768:	2a08      	cmp	r2, #8
{
 800576a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800576e:	4680      	mov	r8, r0
 8005770:	4689      	mov	r9, r1
 8005772:	4615      	mov	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8005774:	d904      	bls.n	8005780 <prvTraceStoreObjectPropertiesOnCloseEvent+0x18>
 8005776:	481b      	ldr	r0, [pc, #108]	; (80057e4 <prvTraceStoreObjectPropertiesOnCloseEvent+0x7c>)
}
 8005778:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 800577c:	f7ff be9e 	b.w	80054bc <prvTraceError>
 8005780:	4f19      	ldr	r7, [pc, #100]	; (80057e8 <prvTraceStoreObjectPropertiesOnCloseEvent+0x80>)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	189a      	adds	r2, r3, r2
 8005786:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 800578a:	428a      	cmp	r2, r1
 800578c:	d201      	bcs.n	8005792 <prvTraceStoreObjectPropertiesOnCloseEvent+0x2a>
 800578e:	4817      	ldr	r0, [pc, #92]	; (80057ec <prvTraceStoreObjectPropertiesOnCloseEvent+0x84>)
 8005790:	e7f2      	b.n	8005778 <prvTraceStoreObjectPropertiesOnCloseEvent+0x10>
	if (RecorderDataPtr->recorderActive)
 8005792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005794:	b31b      	cbz	r3, 80057de <prvTraceStoreObjectPropertiesOnCloseEvent+0x76>
		pe = (ObjClosePropEvent*) prvTraceNextFreeEventBufferSlot();
 8005796:	f7ff fead 	bl	80054f4 <prvTraceNextFreeEventBufferSlot>
		if (pe != NULL)
 800579a:	4606      	mov	r6, r0
 800579c:	b1f8      	cbz	r0, 80057de <prvTraceStoreObjectPropertiesOnCloseEvent+0x76>
			if (objectclass == TRACE_CLASS_TASK)
 800579e:	2d03      	cmp	r5, #3
 80057a0:	683c      	ldr	r4, [r7, #0]
				pe->arg1 = TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, handle);
 80057a2:	4629      	mov	r1, r5
 80057a4:	4648      	mov	r0, r9
			if (objectclass == TRACE_CLASS_TASK)
 80057a6:	d10f      	bne.n	80057c8 <prvTraceStoreObjectPropertiesOnCloseEvent+0x60>
				pe->arg1 = TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, handle);
 80057a8:	f7ff ff7a 	bl	80056a0 <uiIndexOfObject>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	4420      	add	r0, r4
 80057b0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80057b4:	4418      	add	r0, r3
 80057b6:	f890 309d 	ldrb.w	r3, [r0, #157]	; 0x9d
				pe->arg1 = TRACE_PROPERTY_OBJECT_STATE(objectclass, handle);
 80057ba:	7073      	strb	r3, [r6, #1]
			pe->type = evtcode;
 80057bc:	f886 8000 	strb.w	r8, [r6]
}
 80057c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			prvTraceUpdateCounters();
 80057c4:	f7ff be4c 	b.w	8005460 <prvTraceUpdateCounters>
				pe->arg1 = TRACE_PROPERTY_OBJECT_STATE(objectclass, handle);
 80057c8:	f7ff ff6a 	bl	80056a0 <uiIndexOfObject>
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	4420      	add	r0, r4
 80057d0:	4415      	add	r5, r2
 80057d2:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 80057d6:	4418      	add	r0, r3
 80057d8:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 80057dc:	e7ed      	b.n	80057ba <prvTraceStoreObjectPropertiesOnCloseEvent+0x52>
}
 80057de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057e2:	bf00      	nop
 80057e4:	08016dc1 	.word	0x08016dc1
 80057e8:	240007fc 	.word	0x240007fc
 80057ec:	08016e18 	.word	0x08016e18

080057f0 <prvTraceSetPriorityProperty>:
{
 80057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f2:	4605      	mov	r5, r0
 80057f4:	4617      	mov	r7, r2
 80057f6:	4608      	mov	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 80057f8:	2d08      	cmp	r5, #8
 80057fa:	d904      	bls.n	8005806 <prvTraceSetPriorityProperty+0x16>
 80057fc:	480c      	ldr	r0, [pc, #48]	; (8005830 <prvTraceSetPriorityProperty+0x40>)
}
 80057fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8005802:	f7ff be5b 	b.w	80054bc <prvTraceError>
 8005806:	4e0b      	ldr	r6, [pc, #44]	; (8005834 <prvTraceSetPriorityProperty+0x44>)
 8005808:	6834      	ldr	r4, [r6, #0]
 800580a:	1963      	adds	r3, r4, r5
 800580c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005810:	428b      	cmp	r3, r1
 8005812:	d201      	bcs.n	8005818 <prvTraceSetPriorityProperty+0x28>
 8005814:	4808      	ldr	r0, [pc, #32]	; (8005838 <prvTraceSetPriorityProperty+0x48>)
 8005816:	e7f2      	b.n	80057fe <prvTraceSetPriorityProperty+0xe>
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8005818:	4629      	mov	r1, r5
 800581a:	f7ff ff41 	bl	80056a0 <uiIndexOfObject>
 800581e:	6833      	ldr	r3, [r6, #0]
 8005820:	4420      	add	r0, r4
 8005822:	441d      	add	r5, r3
 8005824:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8005828:	4418      	add	r0, r3
 800582a:	f880 709d 	strb.w	r7, [r0, #157]	; 0x9d
}
 800582e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005830:	080169c2 	.word	0x080169c2
 8005834:	240007fc 	.word	0x240007fc
 8005838:	08016a0b 	.word	0x08016a0b

0800583c <prvTraceGetPriorityProperty>:
{
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	4605      	mov	r5, r0
 8005840:	4608      	mov	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8005842:	2d08      	cmp	r5, #8
 8005844:	d904      	bls.n	8005850 <prvTraceGetPriorityProperty+0x14>
 8005846:	480d      	ldr	r0, [pc, #52]	; (800587c <prvTraceGetPriorityProperty+0x40>)
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8005848:	f7ff fe38 	bl	80054bc <prvTraceError>
 800584c:	2000      	movs	r0, #0
}
 800584e:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8005850:	4e0b      	ldr	r6, [pc, #44]	; (8005880 <prvTraceGetPriorityProperty+0x44>)
 8005852:	6834      	ldr	r4, [r6, #0]
 8005854:	1963      	adds	r3, r4, r5
 8005856:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800585a:	428b      	cmp	r3, r1
 800585c:	d201      	bcs.n	8005862 <prvTraceGetPriorityProperty+0x26>
 800585e:	4809      	ldr	r0, [pc, #36]	; (8005884 <prvTraceGetPriorityProperty+0x48>)
 8005860:	e7f2      	b.n	8005848 <prvTraceGetPriorityProperty+0xc>
	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8005862:	4629      	mov	r1, r5
 8005864:	f7ff ff1c 	bl	80056a0 <uiIndexOfObject>
 8005868:	6833      	ldr	r3, [r6, #0]
 800586a:	4420      	add	r0, r4
 800586c:	441d      	add	r5, r3
 800586e:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8005872:	4418      	add	r0, r3
 8005874:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
 8005878:	e7e9      	b.n	800584e <prvTraceGetPriorityProperty+0x12>
 800587a:	bf00      	nop
 800587c:	080166ba 	.word	0x080166ba
 8005880:	240007fc 	.word	0x240007fc
 8005884:	08016703 	.word	0x08016703

08005888 <prvTraceSetObjectState>:
{
 8005888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588a:	4605      	mov	r5, r0
 800588c:	4617      	mov	r7, r2
 800588e:	4608      	mov	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8005890:	2d08      	cmp	r5, #8
 8005892:	d904      	bls.n	800589e <prvTraceSetObjectState+0x16>
 8005894:	480c      	ldr	r0, [pc, #48]	; (80058c8 <prvTraceSetObjectState+0x40>)
}
 8005896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 800589a:	f7ff be0f 	b.w	80054bc <prvTraceError>
 800589e:	4e0b      	ldr	r6, [pc, #44]	; (80058cc <prvTraceSetObjectState+0x44>)
 80058a0:	6834      	ldr	r4, [r6, #0]
 80058a2:	1963      	adds	r3, r4, r5
 80058a4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80058a8:	428b      	cmp	r3, r1
 80058aa:	d201      	bcs.n	80058b0 <prvTraceSetObjectState+0x28>
 80058ac:	4808      	ldr	r0, [pc, #32]	; (80058d0 <prvTraceSetObjectState+0x48>)
 80058ae:	e7f2      	b.n	8005896 <prvTraceSetObjectState+0xe>
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 80058b0:	4629      	mov	r1, r5
 80058b2:	f7ff fef5 	bl	80056a0 <uiIndexOfObject>
 80058b6:	6833      	ldr	r3, [r6, #0]
 80058b8:	4420      	add	r0, r4
 80058ba:	441d      	add	r5, r3
 80058bc:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 80058c0:	4418      	add	r0, r3
 80058c2:	f880 709c 	strb.w	r7, [r0, #156]	; 0x9c
}
 80058c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c8:	08016943 	.word	0x08016943
 80058cc:	240007fc 	.word	0x240007fc
 80058d0:	08016987 	.word	0x08016987

080058d4 <prvTraceSetTaskInstanceFinished>:
{
 80058d4:	b538      	push	{r3, r4, r5, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 80058d6:	4d0b      	ldr	r5, [pc, #44]	; (8005904 <prvTraceSetTaskInstanceFinished+0x30>)
 80058d8:	682c      	ldr	r4, [r5, #0]
 80058da:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80058de:	4283      	cmp	r3, r0
 80058e0:	d204      	bcs.n	80058ec <prvTraceSetTaskInstanceFinished+0x18>
 80058e2:	4809      	ldr	r0, [pc, #36]	; (8005908 <prvTraceSetTaskInstanceFinished+0x34>)
}
 80058e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 80058e8:	f7ff bde8 	b.w	80054bc <prvTraceError>
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 80058ec:	2103      	movs	r1, #3
 80058ee:	f7ff fed7 	bl	80056a0 <uiIndexOfObject>
 80058f2:	682b      	ldr	r3, [r5, #0]
 80058f4:	4420      	add	r0, r4
 80058f6:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80058fa:	4418      	add	r0, r3
 80058fc:	2300      	movs	r3, #0
 80058fe:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
}
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	240007fc 	.word	0x240007fc
 8005908:	08016a4b 	.word	0x08016a4b

0800590c <prvTraceGetObjectHandle>:
{
 800590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 800590e:	4b25      	ldr	r3, [pc, #148]	; (80059a4 <prvTraceGetObjectHandle+0x98>)
 8005910:	681d      	ldr	r5, [r3, #0]
 8005912:	b925      	cbnz	r5, 800591e <prvTraceGetObjectHandle+0x12>
 8005914:	4824      	ldr	r0, [pc, #144]	; (80059a8 <prvTraceGetObjectHandle+0x9c>)
 8005916:	f7ff fdd1 	bl	80054bc <prvTraceError>
}
 800591a:	4628      	mov	r0, r5
 800591c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 800591e:	2808      	cmp	r0, #8
 8005920:	d904      	bls.n	800592c <prvTraceGetObjectHandle+0x20>
 8005922:	4822      	ldr	r0, [pc, #136]	; (80059ac <prvTraceGetObjectHandle+0xa0>)
 8005924:	2500      	movs	r5, #0
 8005926:	f7ff fdc9 	bl	80054bc <prvTraceError>
 800592a:	e7f6      	b.n	800591a <prvTraceGetObjectHandle+0xe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800592c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005930:	2301      	movs	r3, #1
 8005932:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 8005936:	4c1e      	ldr	r4, [pc, #120]	; (80059b0 <prvTraceGetObjectHandle+0xa4>)
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8005938:	4a1e      	ldr	r2, [pc, #120]	; (80059b4 <prvTraceGetObjectHandle+0xa8>)
	trcCRITICAL_SECTION_BEGIN();
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	3301      	adds	r3, #1
 800593e:	6023      	str	r3, [r4, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8005940:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8005944:	18d1      	adds	r1, r2, r3
 8005946:	f891 5048 	ldrb.w	r5, [r1, #72]	; 0x48
 800594a:	b935      	cbnz	r5, 800595a <prvTraceGetObjectHandle+0x4e>
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 800594c:	eb02 0740 	add.w	r7, r2, r0, lsl #1
			(traceHandle)(1 + indexOfHandle -
 8005950:	1c5d      	adds	r5, r3, #1
 8005952:	7cbf      	ldrb	r7, [r7, #18]
 8005954:	1bed      	subs	r5, r5, r7
		objectHandleStacks.objectHandles[indexOfHandle] =
 8005956:	f881 5048 	strb.w	r5, [r1, #72]	; 0x48
		> objectHandleStacks.highestIndexOfClass[objectclass])
 800595a:	eb02 0140 	add.w	r1, r2, r0, lsl #1
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 800595e:	8c89      	ldrh	r1, [r1, #36]	; 0x24
 8005960:	4299      	cmp	r1, r3
 8005962:	d20a      	bcs.n	800597a <prvTraceGetObjectHandle+0x6e>
		handle = 0;
 8005964:	2500      	movs	r5, #0
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8005966:	f7ff fd23 	bl	80053b0 <pszTraceGetErrorNotEnoughHandles>
 800596a:	f7ff fda7 	bl	80054bc <prvTraceError>
	trcCRITICAL_SECTION_END();
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	3b01      	subs	r3, #1
 8005972:	6023      	str	r3, [r4, #0]
 8005974:	f386 8810 	msr	PRIMASK, r6
 8005978:	e7cf      	b.n	800591a <prvTraceGetObjectHandle+0xe>
	handle = objectHandleStacks.objectHandles[indexOfHandle];
 800597a:	18d1      	adds	r1, r2, r3
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 800597c:	3301      	adds	r3, #1
	handle = objectHandleStacks.objectHandles[indexOfHandle];
 800597e:	f891 5048 	ldrb.w	r5, [r1, #72]	; 0x48
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8005982:	eb02 0140 	add.w	r1, r2, r0, lsl #1
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8005986:	b29b      	uxth	r3, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8005988:	8a49      	ldrh	r1, [r1, #18]
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 800598a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 800598e:	1a5b      	subs	r3, r3, r1
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8005990:	f100 0118 	add.w	r1, r0, #24
 8005994:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8005998:	88d1      	ldrh	r1, [r2, #6]
		if (hndCount >
 800599a:	428b      	cmp	r3, r1
				(traceHandle)hndCount;
 800599c:	bfc4      	itt	gt
 800599e:	b2db      	uxtbgt	r3, r3
 80059a0:	80d3      	strhgt	r3, [r2, #6]
 80059a2:	e7e4      	b.n	800596e <prvTraceGetObjectHandle+0x62>
 80059a4:	240007fc 	.word	0x240007fc
 80059a8:	08017059 	.word	0x08017059
 80059ac:	08016675 	.word	0x08016675
 80059b0:	240008b4 	.word	0x240008b4
 80059b4:	24000818 	.word	0x24000818

080059b8 <prvTraceFreeObjectHandle>:
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80059b8:	2808      	cmp	r0, #8
{
 80059ba:	b410      	push	{r4}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80059bc:	d904      	bls.n	80059c8 <prvTraceFreeObjectHandle+0x10>
 80059be:	4811      	ldr	r0, [pc, #68]	; (8005a04 <prvTraceFreeObjectHandle+0x4c>)
}
 80059c0:	f85d 4b04 	ldr.w	r4, [sp], #4
		prvTraceError("Attempt to free more handles than allocated!");
 80059c4:	f7ff bd7a 	b.w	80054bc <prvTraceError>
	TRACE_ASSERT(handle > 0 && handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 80059c8:	b131      	cbz	r1, 80059d8 <prvTraceFreeObjectHandle+0x20>
 80059ca:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <prvTraceFreeObjectHandle+0x50>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4403      	add	r3, r0
 80059d0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80059d4:	428b      	cmp	r3, r1
 80059d6:	d201      	bcs.n	80059dc <prvTraceFreeObjectHandle+0x24>
 80059d8:	480c      	ldr	r0, [pc, #48]	; (8005a0c <prvTraceFreeObjectHandle+0x54>)
 80059da:	e7f1      	b.n	80059c0 <prvTraceFreeObjectHandle+0x8>
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
 80059dc:	4a0c      	ldr	r2, [pc, #48]	; (8005a10 <prvTraceFreeObjectHandle+0x58>)
		objectHandleStacks.lowestIndexOfClass[objectclass])
 80059de:	eb02 0440 	add.w	r4, r2, r0, lsl #1
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
 80059e2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 80059e6:	8a64      	ldrh	r4, [r4, #18]
 80059e8:	429c      	cmp	r4, r3
 80059ea:	d301      	bcc.n	80059f0 <prvTraceFreeObjectHandle+0x38>
		prvTraceError("Attempt to free more handles than allocated!");
 80059ec:	4809      	ldr	r0, [pc, #36]	; (8005a14 <prvTraceFreeObjectHandle+0x5c>)
 80059ee:	e7e7      	b.n	80059c0 <prvTraceFreeObjectHandle+0x8>
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]--;
 80059f0:	3b01      	subs	r3, #1
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
		objectHandleStacks.objectHandles[indexOfHandle] = handle;
 80059f8:	4413      	add	r3, r2
 80059fa:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
}
 80059fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	08016561 	.word	0x08016561
 8005a08:	240007fc 	.word	0x240007fc
 8005a0c:	080165a7 	.word	0x080165a7
 8005a10:	24000818 	.word	0x24000818
 8005a14:	080165e8 	.word	0x080165e8

08005a18 <prvTraceSetObjectName>:
{
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4604      	mov	r4, r0
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
 8005a1e:	4615      	mov	r5, r2
 8005a20:	b922      	cbnz	r2, 8005a2c <prvTraceSetObjectName+0x14>
 8005a22:	4814      	ldr	r0, [pc, #80]	; (8005a74 <prvTraceSetObjectName+0x5c>)
}
 8005a24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8005a28:	f7ff bd48 	b.w	80054bc <prvTraceError>
	if (objectclass >= TRACE_NCLASSES)
 8005a2c:	2808      	cmp	r0, #8
 8005a2e:	d901      	bls.n	8005a34 <prvTraceSetObjectName+0x1c>
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8005a30:	4811      	ldr	r0, [pc, #68]	; (8005a78 <prvTraceSetObjectName+0x60>)
 8005a32:	e7f7      	b.n	8005a24 <prvTraceSetObjectName+0xc>
	if (handle == 0)
 8005a34:	b909      	cbnz	r1, 8005a3a <prvTraceSetObjectName+0x22>
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8005a36:	4811      	ldr	r0, [pc, #68]	; (8005a7c <prvTraceSetObjectName+0x64>)
 8005a38:	e7f4      	b.n	8005a24 <prvTraceSetObjectName+0xc>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 8005a3a:	4e11      	ldr	r6, [pc, #68]	; (8005a80 <prvTraceSetObjectName+0x68>)
 8005a3c:	6832      	ldr	r2, [r6, #0]
 8005a3e:	4402      	add	r2, r0
 8005a40:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 8005a44:	428a      	cmp	r2, r1
 8005a46:	d202      	bcs.n	8005a4e <prvTraceSetObjectName+0x36>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8005a48:	f7ff fcb2 	bl	80053b0 <pszTraceGetErrorNotEnoughHandles>
 8005a4c:	e7ea      	b.n	8005a24 <prvTraceSetObjectName+0xc>
		idx = uiIndexOfObject(handle, objectclass);
 8005a4e:	4601      	mov	r1, r0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff fe25 	bl	80056a0 <uiIndexOfObject>
		if (traceErrorMessage == NULL)
 8005a56:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <prvTraceSetObjectName+0x6c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	b953      	cbnz	r3, 8005a72 <prvTraceSetObjectName+0x5a>
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8005a5c:	6833      	ldr	r3, [r6, #0]
 8005a5e:	309c      	adds	r0, #156	; 0x9c
 8005a60:	4629      	mov	r1, r5
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8005a62:	441c      	add	r4, r3
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8005a64:	4418      	add	r0, r3
 8005a66:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
}
 8005a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8005a6e:	f7ff bcab 	b.w	80053c8 <prvStrncpy>
}
 8005a72:	bd70      	pop	{r4, r5, r6, pc}
 8005a74:	080168b6 	.word	0x080168b6
 8005a78:	080168e8 	.word	0x080168e8
 8005a7c:	08016916 	.word	0x08016916
 8005a80:	240007fc 	.word	0x240007fc
 8005a84:	240008bc 	.word	0x240008bc

08005a88 <prvTraceInitCortexM>:
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void prvTraceInitCortexM()
{
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8005a88:	4b0e      	ldr	r3, [pc, #56]	; (8005ac4 <prvTraceInitCortexM+0x3c>)
 8005a8a:	4a0f      	ldr	r2, [pc, #60]	; (8005ac8 <prvTraceInitCortexM+0x40>)
 8005a8c:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 8005a8e:	f503 434e 	add.w	r3, r3, #52736	; 0xce00
 8005a92:	334c      	adds	r3, #76	; 0x4c
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005a9a:	601a      	str	r2, [r3, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	b913      	cbnz	r3, 8005aa6 <prvTraceInitCortexM+0x1e>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 8005aa0:	480a      	ldr	r0, [pc, #40]	; (8005acc <prvTraceInitCortexM+0x44>)
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 8005aa2:	f7ff bd0b 	b.w	80054bc <prvTraceError>
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 8005aa6:	4a0a      	ldr	r2, [pc, #40]	; (8005ad0 <prvTraceInitCortexM+0x48>)
 8005aa8:	6813      	ldr	r3, [r2, #0]
 8005aaa:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8005aae:	d001      	beq.n	8005ab4 <prvTraceInitCortexM+0x2c>
			prvTraceError("DWT_CYCCNT not available, see code comment.");
 8005ab0:	4808      	ldr	r0, [pc, #32]	; (8005ad4 <prvTraceInitCortexM+0x4c>)
 8005ab2:	e7f6      	b.n	8005aa2 <prvTraceInitCortexM+0x1a>
			break;
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 8005ab4:	4908      	ldr	r1, [pc, #32]	; (8005ad8 <prvTraceInitCortexM+0x50>)
 8005ab6:	600b      	str	r3, [r1, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8005ab8:	6813      	ldr	r3, [r2, #0]
 8005aba:	f043 0301 	orr.w	r3, r3, #1
 8005abe:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	e0001fb0 	.word	0xe0001fb0
 8005ac8:	c5acce55 	.word	0xc5acce55
 8005acc:	08016743 	.word	0x08016743
 8005ad0:	e0001000 	.word	0xe0001000
 8005ad4:	0801676d 	.word	0x0801676d
 8005ad8:	e0001004 	.word	0xe0001004

08005adc <prvTraceInitTraceData>:
{	
 8005adc:	b538      	push	{r3, r4, r5, lr}
	if (RecorderDataPtr == NULL)
 8005ade:	4c3c      	ldr	r4, [pc, #240]	; (8005bd0 <prvTraceInitTraceData+0xf4>)
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d16f      	bne.n	8005bc6 <prvTraceInitTraceData+0xea>
	RecorderDataPtr = &RecorderData;
 8005ae6:	4b3b      	ldr	r3, [pc, #236]	; (8005bd4 <prvTraceInitTraceData+0xf8>)
 8005ae8:	6023      	str	r3, [r4, #0]
	init_hwtc_count = TRC_HWTC_COUNT;
 8005aea:	4b3b      	ldr	r3, [pc, #236]	; (8005bd8 <prvTraceInitTraceData+0xfc>)
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8005aec:	f641 15b8 	movw	r5, #6584	; 0x19b8
 8005af0:	2100      	movs	r1, #0
 8005af2:	6820      	ldr	r0, [r4, #0]
	init_hwtc_count = TRC_HWTC_COUNT;
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b39      	ldr	r3, [pc, #228]	; (8005bdc <prvTraceInitTraceData+0x100>)
 8005af8:	601a      	str	r2, [r3, #0]
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8005afa:	462a      	mov	r2, r5
 8005afc:	f00e f80f 	bl	8013b1e <memset>
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	4a37      	ldr	r2, [pc, #220]	; (8005be0 <prvTraceInitTraceData+0x104>)
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8005b04:	f04f 30f0 	mov.w	r0, #4042322160	; 0xf0f0f0f0
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 8005b08:	e9c3 2503 	strd	r2, r5, [r3, #12]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8005b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8005b10:	2501      	movs	r5, #1
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8005b12:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8005b14:	2200      	movs	r2, #0
 8005b16:	e9c3 0215 	strd	r0, r2, [r3, #84]	; 0x54
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8005b1a:	635a      	str	r2, [r3, #52]	; 0x34
	vTraceInitObjectPropertyTable();
 8005b1c:	f7ff fbd8 	bl	80052d0 <vTraceInitObjectPropertyTable>
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8005b20:	6820      	ldr	r0, [r4, #0]
 8005b22:	f04f 33f1 	mov.w	r3, #4059165169	; 0xf1f1f1f1
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8005b26:	2250      	movs	r2, #80	; 0x50
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8005b28:	f8c0 5604 	str.w	r5, [r0, #1540]	; 0x604
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8005b2c:	f8c0 35fc 	str.w	r3, [r0, #1532]	; 0x5fc
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8005b30:	f44f 7348 	mov.w	r3, #800	; 0x320
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8005b34:	492b      	ldr	r1, [pc, #172]	; (8005be4 <prvTraceInitTraceData+0x108>)
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8005b36:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8005b3a:	f04f 33f2 	mov.w	r3, #4076008178	; 0xf2f2f2f2
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8005b3e:	f600 10b4 	addw	r0, r0, #2484	; 0x9b4
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8005b42:	f840 3c04 	str.w	r3, [r0, #-4]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8005b46:	f7ff fc3f 	bl	80053c8 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
	RecorderDataPtr->endmarker0 = 0x0A;
 8005b50:	4925      	ldr	r1, [pc, #148]	; (8005be8 <prvTraceInitTraceData+0x10c>)
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8005b52:	f8c3 2a04 	str.w	r2, [r3, #2564]	; 0xa04
	RecorderDataPtr->endmarker0 = 0x0A;
 8005b56:	f641 12ac 	movw	r2, #6572	; 0x19ac
 8005b5a:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
 8005b5c:	f641 12b0 	movw	r2, #6576	; 0x19b0
 8005b60:	f101 3167 	add.w	r1, r1, #1734829927	; 0x67676767
 8005b64:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
 8005b66:	f101 3180 	add.w	r1, r1, #2155905152	; 0x80808080
 8005b6a:	f641 12b4 	movw	r2, #6580	; 0x19b4
 8005b6e:	5099      	str	r1, [r3, r2]
	vTraceInitObjectHandleStack();
 8005b70:	f7ff fbec 	bl	800534c <vTraceInitObjectHandleStack>
	RecorderDataPtr->startmarker11 = 0xF4;
 8005b74:	6820      	ldr	r0, [r4, #0]
 8005b76:	23f4      	movs	r3, #244	; 0xf4
 8005b78:	72c3      	strb	r3, [r0, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8005b7a:	23f3      	movs	r3, #243	; 0xf3
 8005b7c:	7283      	strb	r3, [r0, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 8005b7e:	23f2      	movs	r3, #242	; 0xf2
 8005b80:	7243      	strb	r3, [r0, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 8005b82:	23f1      	movs	r3, #241	; 0xf1
 8005b84:	7203      	strb	r3, [r0, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 8005b86:	2374      	movs	r3, #116	; 0x74
 8005b88:	71c3      	strb	r3, [r0, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8005b8a:	2373      	movs	r3, #115	; 0x73
 8005b8c:	7183      	strb	r3, [r0, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 8005b8e:	2372      	movs	r3, #114	; 0x72
 8005b90:	7143      	strb	r3, [r0, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 8005b92:	2371      	movs	r3, #113	; 0x71
 8005b94:	7103      	strb	r3, [r0, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8005b96:	2304      	movs	r3, #4
 8005b98:	70c3      	strb	r3, [r0, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	7083      	strb	r3, [r0, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	7043      	strb	r3, [r0, #1]
	if (traceErrorMessage != NULL)
 8005ba2:	4b12      	ldr	r3, [pc, #72]	; (8005bec <prvTraceInitTraceData+0x110>)
	RecorderDataPtr->startmarker0 = 0x01; 
 8005ba4:	7005      	strb	r5, [r0, #0]
	if (traceErrorMessage != NULL)
 8005ba6:	6819      	ldr	r1, [r3, #0]
 8005ba8:	b149      	cbz	r1, 8005bbe <prvTraceInitTraceData+0xe2>
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005baa:	2250      	movs	r2, #80	; 0x50
 8005bac:	f600 10b4 	addw	r0, r0, #2484	; 0x9b4
 8005bb0:	f7ff fc0a 	bl	80053c8 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	f8c3 59ac 	str.w	r5, [r3, #2476]	; 0x9ac
		vTraceStop();
 8005bba:	f7ff fc69 	bl	8005490 <vTraceStop>
}
 8005bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TRC_PORT_SPECIFIC_INIT();
 8005bc2:	f7ff bf61 	b.w	8005a88 <prvTraceInitCortexM>
		if (RecorderDataPtr->startmarker0 == 1)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d18e      	bne.n	8005aea <prvTraceInitTraceData+0xe>
}
 8005bcc:	bd38      	pop	{r3, r4, r5, pc}
 8005bce:	bf00      	nop
 8005bd0:	240007fc 	.word	0x240007fc
 8005bd4:	2401f034 	.word	0x2401f034
 8005bd8:	e0001004 	.word	0xe0001004
 8005bdc:	240209ec 	.word	0x240209ec
 8005be0:	00051aa1 	.word	0x00051aa1
 8005be4:	08016799 	.word	0x08016799
 8005be8:	0d0c0b0a 	.word	0x0d0c0b0a
 8005bec:	240008bc 	.word	0x240008bc

08005bf0 <prvTracePortGetTimeStamp>:
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8005bf0:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <prvTracePortGetTimeStamp+0x3c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b01      	cmp	r3, #1
{
 8005bf6:	b530      	push	{r4, r5, lr}
	if (trace_disable_timestamp == 1)
 8005bf8:	d104      	bne.n	8005c04 <prvTracePortGetTimeStamp+0x14>
	{
		if (pTimestamp)
 8005bfa:	b110      	cbz	r0, 8005c02 <prvTracePortGetTimeStamp+0x12>
			*pTimestamp = last_timestamp;
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <prvTracePortGetTimeStamp+0x40>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6003      	str	r3, [r0, #0]
	if (pTimestamp)
		*pTimestamp = last_timestamp;

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
}
 8005c02:	bd30      	pop	{r4, r5, pc}
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8005c04:	490b      	ldr	r1, [pc, #44]	; (8005c34 <prvTracePortGetTimeStamp+0x44>)
	hwtc_count = (TRC_HWTC_COUNT);
 8005c06:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <prvTracePortGetTimeStamp+0x48>)
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8005c08:	4a0c      	ldr	r2, [pc, #48]	; (8005c3c <prvTracePortGetTimeStamp+0x4c>)
	hwtc_count = (TRC_HWTC_COUNT);
 8005c0a:	681c      	ldr	r4, [r3, #0]
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8005c0c:	680b      	ldr	r3, [r1, #0]
 8005c0e:	6815      	ldr	r5, [r2, #0]
 8005c10:	4423      	add	r3, r4
 8005c12:	1b5b      	subs	r3, r3, r5
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8005c14:	f003 0503 	and.w	r5, r3, #3
 8005c18:	600d      	str	r5, [r1, #0]
	last_timestamp += diff_scaled;
 8005c1a:	4d05      	ldr	r5, [pc, #20]	; (8005c30 <prvTracePortGetTimeStamp+0x40>)
 8005c1c:	6829      	ldr	r1, [r5, #0]
 8005c1e:	eb01 0393 	add.w	r3, r1, r3, lsr #2
 8005c22:	602b      	str	r3, [r5, #0]
	if (pTimestamp)
 8005c24:	b100      	cbz	r0, 8005c28 <prvTracePortGetTimeStamp+0x38>
		*pTimestamp = last_timestamp;
 8005c26:	6003      	str	r3, [r0, #0]
	last_hwtc_count = hwtc_count;
 8005c28:	6014      	str	r4, [r2, #0]
 8005c2a:	e7ea      	b.n	8005c02 <prvTracePortGetTimeStamp+0x12>
 8005c2c:	240008c0 	.word	0x240008c0
 8005c30:	24000814 	.word	0x24000814
 8005c34:	24000810 	.word	0x24000810
 8005c38:	e0001004 	.word	0xe0001004
 8005c3c:	2400080c 	.word	0x2400080c

08005c40 <prvTraceGetDTS>:
{
 8005c40:	b573      	push	{r0, r1, r4, r5, r6, lr}
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 8005c42:	28ff      	cmp	r0, #255	; 0xff
	uint32_t timestamp = 0;
 8005c44:	f04f 0400 	mov.w	r4, #0
{
 8005c48:	4605      	mov	r5, r0
	uint32_t timestamp = 0;
 8005c4a:	9401      	str	r4, [sp, #4]
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 8005c4c:	d009      	beq.n	8005c62 <prvTraceGetDTS+0x22>
 8005c4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c52:	4298      	cmp	r0, r3
 8005c54:	d005      	beq.n	8005c62 <prvTraceGetDTS+0x22>
 8005c56:	482e      	ldr	r0, [pc, #184]	; (8005d10 <prvTraceGetDTS+0xd0>)
 8005c58:	f7ff fc30 	bl	80054bc <prvTraceError>
 8005c5c:	4620      	mov	r0, r4
}
 8005c5e:	b002      	add	sp, #8
 8005c60:	bd70      	pop	{r4, r5, r6, pc}
	if (RecorderDataPtr->frequency == 0)
 8005c62:	4e2c      	ldr	r6, [pc, #176]	; (8005d14 <prvTraceGetDTS+0xd4>)
 8005c64:	6832      	ldr	r2, [r6, #0]
 8005c66:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8005c68:	b929      	cbnz	r1, 8005c76 <prvTraceGetDTS+0x36>
		if (timestampFrequency != 0)
 8005c6a:	4b2b      	ldr	r3, [pc, #172]	; (8005d18 <prvTraceGetDTS+0xd8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d033      	beq.n	8005cda <prvTraceGetDTS+0x9a>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8005c72:	089b      	lsrs	r3, r3, #2
 8005c74:	6253      	str	r3, [r2, #36]	; 0x24
	prvTracePortGetTimeStamp(&timestamp);	
 8005c76:	a801      	add	r0, sp, #4
 8005c78:	f7ff ffba 	bl	8005bf0 <prvTracePortGetTimeStamp>
	dts = timestamp - old_timestamp;
 8005c7c:	4b27      	ldr	r3, [pc, #156]	; (8005d1c <prvTraceGetDTS+0xdc>)
 8005c7e:	9a01      	ldr	r2, [sp, #4]
 8005c80:	681c      	ldr	r4, [r3, #0]
	old_timestamp = timestamp;
 8005c82:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->frequency > 0)
 8005c84:	6833      	ldr	r3, [r6, #0]
	dts = timestamp - old_timestamp;
 8005c86:	1b14      	subs	r4, r2, r4
	if (RecorderDataPtr->frequency > 0)
 8005c88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005c8a:	2900      	cmp	r1, #0
 8005c8c:	d031      	beq.n	8005cf2 <prvTraceGetDTS+0xb2>
		if (dts > RecorderDataPtr->frequency)
 8005c8e:	42a1      	cmp	r1, r4
 8005c90:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005c92:	d22b      	bcs.n	8005cec <prvTraceGetDTS+0xac>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8005c94:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8005c96:	fbb4 f2f1 	udiv	r2, r4, r1
 8005c9a:	4416      	add	r6, r2
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8005c9c:	fb01 4212 	mls	r2, r1, r2, r4
 8005ca0:	4402      	add	r2, r0
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8005ca2:	62de      	str	r6, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8005ca4:	629a      	str	r2, [r3, #40]	; 0x28
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8005ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ca8:	4291      	cmp	r1, r2
 8005caa:	d804      	bhi.n	8005cb6 <prvTraceGetDTS+0x76>
			RecorderDataPtr->absTimeLastEventSecond++;
 8005cac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8005cae:	1a51      	subs	r1, r2, r1
			RecorderDataPtr->absTimeLastEventSecond++;
 8005cb0:	3001      	adds	r0, #1
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8005cb2:	6299      	str	r1, [r3, #40]	; 0x28
			RecorderDataPtr->absTimeLastEventSecond++;
 8005cb4:	62d8      	str	r0, [r3, #44]	; 0x2c
	if (dts > param_maxDTS)
 8005cb6:	42a5      	cmp	r5, r4
 8005cb8:	d20c      	bcs.n	8005cd4 <prvTraceGetDTS+0x94>
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8005cba:	f7ff fc1b 	bl	80054f4 <prvTraceNextFreeEventBufferSlot>
		if (xts != NULL)
 8005cbe:	b148      	cbz	r0, 8005cd4 <prvTraceGetDTS+0x94>
			if (param_maxDTS == 0xFFFF)
 8005cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cc4:	429d      	cmp	r5, r3
 8005cc6:	d116      	bne.n	8005cf6 <prvTraceGetDTS+0xb6>
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8005cc8:	0c23      	lsrs	r3, r4, #16
 8005cca:	8043      	strh	r3, [r0, #2]
				xts->type = XTS16;
 8005ccc:	23a9      	movs	r3, #169	; 0xa9
 8005cce:	8003      	strh	r3, [r0, #0]
			prvTraceUpdateCounters();
 8005cd0:	f7ff fbc6 	bl	8005460 <prvTraceUpdateCounters>
	return (uint16_t)dts & param_maxDTS;
 8005cd4:	ea05 0004 	and.w	r0, r5, r4
 8005cd8:	e7c1      	b.n	8005c5e <prvTraceGetDTS+0x1e>
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8005cda:	4b11      	ldr	r3, [pc, #68]	; (8005d20 <prvTraceGetDTS+0xe0>)
 8005cdc:	6819      	ldr	r1, [r3, #0]
 8005cde:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <prvTraceGetDTS+0xe4>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4299      	cmp	r1, r3
 8005ce4:	d0c7      	beq.n	8005c76 <prvTraceGetDTS+0x36>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8005ce6:	4b10      	ldr	r3, [pc, #64]	; (8005d28 <prvTraceGetDTS+0xe8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	e7c2      	b.n	8005c72 <prvTraceGetDTS+0x32>
			RecorderDataPtr->absTimeLastEvent += dts;
 8005cec:	4420      	add	r0, r4
 8005cee:	6298      	str	r0, [r3, #40]	; 0x28
 8005cf0:	e7d9      	b.n	8005ca6 <prvTraceGetDTS+0x66>
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8005cf2:	629a      	str	r2, [r3, #40]	; 0x28
 8005cf4:	e7df      	b.n	8005cb6 <prvTraceGetDTS+0x76>
			else if (param_maxDTS == 0xFF)
 8005cf6:	2dff      	cmp	r5, #255	; 0xff
 8005cf8:	d106      	bne.n	8005d08 <prvTraceGetDTS+0xc8>
				xts->type = XTS8;
 8005cfa:	23a8      	movs	r3, #168	; 0xa8
 8005cfc:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8005cfe:	0a23      	lsrs	r3, r4, #8
 8005d00:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 8005d02:	0e23      	lsrs	r3, r4, #24
 8005d04:	7043      	strb	r3, [r0, #1]
 8005d06:	e7e3      	b.n	8005cd0 <prvTraceGetDTS+0x90>
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 8005d08:	4808      	ldr	r0, [pc, #32]	; (8005d2c <prvTraceGetDTS+0xec>)
 8005d0a:	f7ff fbd7 	bl	80054bc <prvTraceError>
 8005d0e:	e7df      	b.n	8005cd0 <prvTraceGetDTS+0x90>
 8005d10:	08016615 	.word	0x08016615
 8005d14:	240007fc 	.word	0x240007fc
 8005d18:	240008b8 	.word	0x240008b8
 8005d1c:	240008b0 	.word	0x240008b0
 8005d20:	e0001004 	.word	0xe0001004
 8005d24:	240209ec 	.word	0x240209ec
 8005d28:	24000000 	.word	0x24000000
 8005d2c:	08016652 	.word	0x08016652

08005d30 <prvTraceStoreTaskReady>:
{
 8005d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle == 0)
 8005d32:	4605      	mov	r5, r0
 8005d34:	b368      	cbz	r0, 8005d92 <prvTraceStoreTaskReady+0x62>
	if (! readyEventsEnabled)
 8005d36:	4b17      	ldr	r3, [pc, #92]	; (8005d94 <prvTraceStoreTaskReady+0x64>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	b353      	cbz	r3, 8005d92 <prvTraceStoreTaskReady+0x62>
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
 8005d3c:	280f      	cmp	r0, #15
 8005d3e:	d904      	bls.n	8005d4a <prvTraceStoreTaskReady+0x1a>
 8005d40:	4815      	ldr	r0, [pc, #84]	; (8005d98 <prvTraceStoreTaskReady+0x68>)
}
 8005d42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 8005d46:	f7ff bbb9 	b.w	80054bc <prvTraceError>
	if (recorder_busy)
 8005d4a:	4c14      	ldr	r4, [pc, #80]	; (8005d9c <prvTraceStoreTaskReady+0x6c>)
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	b10b      	cbz	r3, 8005d54 <prvTraceStoreTaskReady+0x24>
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 8005d50:	4813      	ldr	r0, [pc, #76]	; (8005da0 <prvTraceStoreTaskReady+0x70>)
 8005d52:	e7f6      	b.n	8005d42 <prvTraceStoreTaskReady+0x12>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d54:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	6023      	str	r3, [r4, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 8005d64:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <prvTraceStoreTaskReady+0x74>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6a:	b16b      	cbz	r3, 8005d88 <prvTraceStoreTaskReady+0x58>
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8005d6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005d70:	f7ff ff66 	bl	8005c40 <prvTraceGetDTS>
 8005d74:	4607      	mov	r7, r0
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 8005d76:	f7ff fbbd 	bl	80054f4 <prvTraceNextFreeEventBufferSlot>
		if (tr != NULL)
 8005d7a:	b128      	cbz	r0, 8005d88 <prvTraceStoreTaskReady+0x58>
			tr->type = DIV_TASK_READY;
 8005d7c:	2302      	movs	r3, #2
			tr->dts = dts3;
 8005d7e:	8047      	strh	r7, [r0, #2]
			tr->objHandle = hnd8;
 8005d80:	7045      	strb	r5, [r0, #1]
			tr->type = DIV_TASK_READY;
 8005d82:	7003      	strb	r3, [r0, #0]
			prvTraceUpdateCounters();
 8005d84:	f7ff fb6c 	bl	8005460 <prvTraceUpdateCounters>
	trcCRITICAL_SECTION_END();
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	f386 8810 	msr	PRIMASK, r6
}
 8005d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d94:	24000014 	.word	0x24000014
 8005d98:	08016e6a 	.word	0x08016e6a
 8005d9c:	240008b4 	.word	0x240008b4
 8005da0:	08016ea9 	.word	0x08016ea9
 8005da4:	240007fc 	.word	0x240007fc

08005da8 <vTraceStoreMemMangEvent>:
{
 8005da8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (RecorderDataPtr == NULL)
 8005dac:	4d2a      	ldr	r5, [pc, #168]	; (8005e58 <vTraceStoreMemMangEvent+0xb0>)
{
 8005dae:	4680      	mov	r8, r0
 8005db0:	460f      	mov	r7, r1
	if (RecorderDataPtr == NULL)
 8005db2:	682b      	ldr	r3, [r5, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d04c      	beq.n	8005e52 <vTraceStoreMemMangEvent+0xaa>
		size = (uint32_t)(- signed_size);
 8005db8:	ea82 7ae2 	eor.w	sl, r2, r2, asr #31
 8005dbc:	ebaa 7ae2 	sub.w	sl, sl, r2, asr #31
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc0:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 8005dca:	4c24      	ldr	r4, [pc, #144]	; (8005e5c <vTraceStoreMemMangEvent+0xb4>)
 8005dcc:	6821      	ldr	r1, [r4, #0]
 8005dce:	4419      	add	r1, r3
 8005dd0:	6021      	str	r1, [r4, #0]
	if (address != 0)
 8005dd2:	b11f      	cbz	r7, 8005ddc <vTraceStoreMemMangEvent+0x34>
		heapMemUsage += (uint32_t)signed_size;
 8005dd4:	4922      	ldr	r1, [pc, #136]	; (8005e60 <vTraceStoreMemMangEvent+0xb8>)
 8005dd6:	680b      	ldr	r3, [r1, #0]
 8005dd8:	4413      	add	r3, r2
 8005dda:	600b      	str	r3, [r1, #0]
	if (RecorderDataPtr->recorderActive)
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	b393      	cbz	r3, 8005e48 <vTraceStoreMemMangEvent+0xa0>
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8005de2:	20ff      	movs	r0, #255	; 0xff
 8005de4:	f7ff ff2c 	bl	8005c40 <prvTraceGetDTS>
	if (param <= param_max)
 8005de8:	f5ba 3f80 	cmp.w	sl, #65536	; 0x10000
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8005dec:	4683      	mov	fp, r0
	if (param <= param_max)
 8005dee:	d305      	bcc.n	8005dfc <vTraceStoreMemMangEvent+0x54>
 8005df0:	4651      	mov	r1, sl
 8005df2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005df6:	f7ff fb95 	bl	8005524 <prvTraceGetParam.part.5>
 8005dfa:	4682      	mov	sl, r0
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8005dfc:	f7ff fb7a 	bl	80054f4 <prvTraceNextFreeEventBufferSlot>
		if (ms != NULL)
 8005e00:	4606      	mov	r6, r0
 8005e02:	b308      	cbz	r0, 8005e48 <vTraceStoreMemMangEvent+0xa0>
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8005e04:	2300      	movs	r3, #0
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8005e06:	f880 b001 	strb.w	fp, [r0, #1]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8005e0a:	f8a0 a002 	strh.w	sl, [r0, #2]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8005e0e:	7003      	strb	r3, [r0, #0]
			prvTraceUpdateCounters();
 8005e10:	f7ff fb26 	bl	8005460 <prvTraceUpdateCounters>
	if (param <= param_max)
 8005e14:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 8005e18:	d305      	bcc.n	8005e26 <vTraceStoreMemMangEvent+0x7e>
 8005e1a:	4639      	mov	r1, r7
 8005e1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005e20:	f7ff fb80 	bl	8005524 <prvTraceGetParam.part.5>
 8005e24:	4607      	mov	r7, r0
			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8005e26:	f7ff fb65 	bl	80054f4 <prvTraceNextFreeEventBufferSlot>
			if (ma != NULL)
 8005e2a:	b168      	cbz	r0, 8005e48 <vTraceStoreMemMangEvent+0xa0>
				ma->addr_high = addr_high;
 8005e2c:	2300      	movs	r3, #0
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 8005e2e:	8047      	strh	r7, [r0, #2]
				ma->addr_high = addr_high;
 8005e30:	7043      	strb	r3, [r0, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
 8005e32:	fa5f f388 	uxtb.w	r3, r8
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	7002      	strb	r2, [r0, #0]
				ms->type = (uint8_t) ecode;
 8005e3a:	7033      	strb	r3, [r6, #0]
				prvTraceUpdateCounters();					
 8005e3c:	f7ff fb10 	bl	8005460 <prvTraceUpdateCounters>
				RecorderDataPtr->heapMemUsage = heapMemUsage;
 8005e40:	4a07      	ldr	r2, [pc, #28]	; (8005e60 <vTraceStoreMemMangEvent+0xb8>)
 8005e42:	682b      	ldr	r3, [r5, #0]
 8005e44:	6812      	ldr	r2, [r2, #0]
 8005e46:	651a      	str	r2, [r3, #80]	; 0x50
	trcCRITICAL_SECTION_END();
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	f389 8810 	msr	PRIMASK, r9
}
 8005e52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e56:	bf00      	nop
 8005e58:	240007fc 	.word	0x240007fc
 8005e5c:	240008b4 	.word	0x240008b4
 8005e60:	24000804 	.word	0x24000804

08005e64 <prvTraceStoreKernelCall>:
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 8005e64:	28fe      	cmp	r0, #254	; 0xfe
{
 8005e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e6a:	4605      	mov	r5, r0
 8005e6c:	4617      	mov	r7, r2
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 8005e6e:	d904      	bls.n	8005e7a <prvTraceStoreKernelCall+0x16>
 8005e70:	481c      	ldr	r0, [pc, #112]	; (8005ee4 <prvTraceStoreKernelCall+0x80>)
}
 8005e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8005e76:	f7ff bb21 	b.w	80054bc <prvTraceError>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8005e7a:	2908      	cmp	r1, #8
 8005e7c:	d901      	bls.n	8005e82 <prvTraceStoreKernelCall+0x1e>
 8005e7e:	481a      	ldr	r0, [pc, #104]	; (8005ee8 <prvTraceStoreKernelCall+0x84>)
 8005e80:	e7f7      	b.n	8005e72 <prvTraceStoreKernelCall+0xe>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 8005e82:	481a      	ldr	r0, [pc, #104]	; (8005eec <prvTraceStoreKernelCall+0x88>)
 8005e84:	6803      	ldr	r3, [r0, #0]
 8005e86:	440b      	add	r3, r1
 8005e88:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d201      	bcs.n	8005e94 <prvTraceStoreKernelCall+0x30>
 8005e90:	4817      	ldr	r0, [pc, #92]	; (8005ef0 <prvTraceStoreKernelCall+0x8c>)
 8005e92:	e7ee      	b.n	8005e72 <prvTraceStoreKernelCall+0xe>
	if (recorder_busy)
 8005e94:	4c17      	ldr	r4, [pc, #92]	; (8005ef4 <prvTraceStoreKernelCall+0x90>)
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	b10b      	cbz	r3, 8005e9e <prvTraceStoreKernelCall+0x3a>
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8005e9a:	4817      	ldr	r0, [pc, #92]	; (8005ef8 <prvTraceStoreKernelCall+0x94>)
 8005e9c:	e7e9      	b.n	8005e72 <prvTraceStoreKernelCall+0xe>
	if (handle_of_last_logged_task == 0)
 8005e9e:	4b17      	ldr	r3, [pc, #92]	; (8005efc <prvTraceStoreKernelCall+0x98>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	b1eb      	cbz	r3, 8005ee0 <prvTraceStoreKernelCall+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ea4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	6023      	str	r3, [r4, #0]
	if (RecorderDataPtr->recorderActive)
 8005eb4:	6803      	ldr	r3, [r0, #0]
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb8:	b16b      	cbz	r3, 8005ed6 <prvTraceStoreKernelCall+0x72>
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8005eba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005ebe:	f7ff febf 	bl	8005c40 <prvTraceGetDTS>
 8005ec2:	4680      	mov	r8, r0
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8005ec4:	f7ff fb16 	bl	80054f4 <prvTraceNextFreeEventBufferSlot>
		if (kse != NULL)
 8005ec8:	b128      	cbz	r0, 8005ed6 <prvTraceStoreKernelCall+0x72>
			kse->dts = dts1;
 8005eca:	f8a0 8002 	strh.w	r8, [r0, #2]
			kse->type = (uint8_t)ecode;
 8005ece:	7005      	strb	r5, [r0, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8005ed0:	7047      	strb	r7, [r0, #1]
			prvTraceUpdateCounters();
 8005ed2:	f7ff fac5 	bl	8005460 <prvTraceUpdateCounters>
	trcCRITICAL_SECTION_END();
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	6023      	str	r3, [r4, #0]
 8005edc:	f386 8810 	msr	PRIMASK, r6
}
 8005ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee4:	08016a93 	.word	0x08016a93
 8005ee8:	08016ac8 	.word	0x08016ac8
 8005eec:	240007fc 	.word	0x240007fc
 8005ef0:	08016b0d 	.word	0x08016b0d
 8005ef4:	240008b4 	.word	0x240008b4
 8005ef8:	08016b53 	.word	0x08016b53
 8005efc:	24000800 	.word	0x24000800

08005f00 <prvTraceStoreKernelCallWithParam>:
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 8005f00:	28fe      	cmp	r0, #254	; 0xfe
{
 8005f02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f06:	4680      	mov	r8, r0
 8005f08:	4617      	mov	r7, r2
 8005f0a:	461d      	mov	r5, r3
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 8005f0c:	d904      	bls.n	8005f18 <prvTraceStoreKernelCallWithParam+0x18>
 8005f0e:	4821      	ldr	r0, [pc, #132]	; (8005f94 <prvTraceStoreKernelCallWithParam+0x94>)
}
 8005f10:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8005f14:	f7ff bad2 	b.w	80054bc <prvTraceError>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8005f18:	2908      	cmp	r1, #8
 8005f1a:	d901      	bls.n	8005f20 <prvTraceStoreKernelCallWithParam+0x20>
 8005f1c:	481e      	ldr	r0, [pc, #120]	; (8005f98 <prvTraceStoreKernelCallWithParam+0x98>)
 8005f1e:	e7f7      	b.n	8005f10 <prvTraceStoreKernelCallWithParam+0x10>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
 8005f20:	4a1e      	ldr	r2, [pc, #120]	; (8005f9c <prvTraceStoreKernelCallWithParam+0x9c>)
 8005f22:	6813      	ldr	r3, [r2, #0]
 8005f24:	440b      	add	r3, r1
 8005f26:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005f2a:	42bb      	cmp	r3, r7
 8005f2c:	d201      	bcs.n	8005f32 <prvTraceStoreKernelCallWithParam+0x32>
 8005f2e:	481c      	ldr	r0, [pc, #112]	; (8005fa0 <prvTraceStoreKernelCallWithParam+0xa0>)
 8005f30:	e7ee      	b.n	8005f10 <prvTraceStoreKernelCallWithParam+0x10>
	if (recorder_busy)
 8005f32:	4c1c      	ldr	r4, [pc, #112]	; (8005fa4 <prvTraceStoreKernelCallWithParam+0xa4>)
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	b10b      	cbz	r3, 8005f3c <prvTraceStoreKernelCallWithParam+0x3c>
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8005f38:	481b      	ldr	r0, [pc, #108]	; (8005fa8 <prvTraceStoreKernelCallWithParam+0xa8>)
 8005f3a:	e7e9      	b.n	8005f10 <prvTraceStoreKernelCallWithParam+0x10>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f3c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f40:	2301      	movs	r3, #1
 8005f42:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	6023      	str	r3, [r4, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8005f4c:	6813      	ldr	r3, [r2, #0]
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f50:	b1c3      	cbz	r3, 8005f84 <prvTraceStoreKernelCallWithParam+0x84>
 8005f52:	4b16      	ldr	r3, [pc, #88]	; (8005fac <prvTraceStoreKernelCallWithParam+0xac>)
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	b1ab      	cbz	r3, 8005f84 <prvTraceStoreKernelCallWithParam+0x84>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8005f58:	20ff      	movs	r0, #255	; 0xff
 8005f5a:	f7ff fe71 	bl	8005c40 <prvTraceGetDTS>
	if (param <= param_max)
 8005f5e:	2dff      	cmp	r5, #255	; 0xff
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8005f60:	4681      	mov	r9, r0
	if (param <= param_max)
 8005f62:	d904      	bls.n	8005f6e <prvTraceStoreKernelCallWithParam+0x6e>
 8005f64:	4629      	mov	r1, r5
 8005f66:	20ff      	movs	r0, #255	; 0xff
 8005f68:	f7ff fadc 	bl	8005524 <prvTraceGetParam.part.5>
 8005f6c:	4605      	mov	r5, r0
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8005f6e:	f7ff fac1 	bl	80054f4 <prvTraceNextFreeEventBufferSlot>
		if (kse != NULL)
 8005f72:	b138      	cbz	r0, 8005f84 <prvTraceStoreKernelCallWithParam+0x84>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8005f74:	f880 9003 	strb.w	r9, [r0, #3]
			kse->type = (uint8_t)evtcode;
 8005f78:	f880 8000 	strb.w	r8, [r0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8005f7c:	7047      	strb	r7, [r0, #1]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8005f7e:	7085      	strb	r5, [r0, #2]
			prvTraceUpdateCounters();
 8005f80:	f7ff fa6e 	bl	8005460 <prvTraceUpdateCounters>
	trcCRITICAL_SECTION_END();
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	f386 8810 	msr	PRIMASK, r6
}
 8005f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f92:	bf00      	nop
 8005f94:	08016c12 	.word	0x08016c12
 8005f98:	08016c52 	.word	0x08016c52
 8005f9c:	240007fc 	.word	0x240007fc
 8005fa0:	08016ca0 	.word	0x08016ca0
 8005fa4:	240008b4 	.word	0x240008b4
 8005fa8:	08016cef 	.word	0x08016cef
 8005fac:	24000800 	.word	0x24000800

08005fb0 <prvTraceStoreKernelCallWithNumericParamOnly>:
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 8005fb0:	28fe      	cmp	r0, #254	; 0xfe
{
 8005fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb6:	4607      	mov	r7, r0
 8005fb8:	460d      	mov	r5, r1
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 8005fba:	d904      	bls.n	8005fc6 <prvTraceStoreKernelCallWithNumericParamOnly+0x16>
 8005fbc:	481a      	ldr	r0, [pc, #104]	; (8006028 <prvTraceStoreKernelCallWithNumericParamOnly+0x78>)
}
 8005fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8005fc2:	f7ff ba7b 	b.w	80054bc <prvTraceError>
	if (recorder_busy)
 8005fc6:	4c19      	ldr	r4, [pc, #100]	; (800602c <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	b10b      	cbz	r3, 8005fd0 <prvTraceStoreKernelCallWithNumericParamOnly+0x20>
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8005fcc:	4818      	ldr	r0, [pc, #96]	; (8006030 <prvTraceStoreKernelCallWithNumericParamOnly+0x80>)
 8005fce:	e7f6      	b.n	8005fbe <prvTraceStoreKernelCallWithNumericParamOnly+0xe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fd0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	6023      	str	r3, [r4, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8005fe0:	4b14      	ldr	r3, [pc, #80]	; (8006034 <prvTraceStoreKernelCallWithNumericParamOnly+0x84>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe6:	b1c3      	cbz	r3, 800601a <prvTraceStoreKernelCallWithNumericParamOnly+0x6a>
 8005fe8:	4b13      	ldr	r3, [pc, #76]	; (8006038 <prvTraceStoreKernelCallWithNumericParamOnly+0x88>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	b1ab      	cbz	r3, 800601a <prvTraceStoreKernelCallWithNumericParamOnly+0x6a>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8005fee:	20ff      	movs	r0, #255	; 0xff
 8005ff0:	f7ff fe26 	bl	8005c40 <prvTraceGetDTS>
	if (param <= param_max)
 8005ff4:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8005ff8:	4680      	mov	r8, r0
	if (param <= param_max)
 8005ffa:	d305      	bcc.n	8006008 <prvTraceStoreKernelCallWithNumericParamOnly+0x58>
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006002:	f7ff fa8f 	bl	8005524 <prvTraceGetParam.part.5>
 8006006:	4605      	mov	r5, r0
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8006008:	f7ff fa74 	bl	80054f4 <prvTraceNextFreeEventBufferSlot>
		if (kse != NULL)
 800600c:	b128      	cbz	r0, 800601a <prvTraceStoreKernelCallWithNumericParamOnly+0x6a>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 800600e:	f880 8001 	strb.w	r8, [r0, #1]
			kse->type = (uint8_t)evtcode;
 8006012:	7007      	strb	r7, [r0, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8006014:	8045      	strh	r5, [r0, #2]
			prvTraceUpdateCounters();
 8006016:	f7ff fa23 	bl	8005460 <prvTraceUpdateCounters>
	trcCRITICAL_SECTION_END();
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	3b01      	subs	r3, #1
 800601e:	6023      	str	r3, [r4, #0]
 8006020:	f386 8810 	msr	PRIMASK, r6
}
 8006024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006028:	08016b88 	.word	0x08016b88
 800602c:	240008b4 	.word	0x240008b4
 8006030:	08016bdd 	.word	0x08016bdd
 8006034:	240007fc 	.word	0x240007fc
 8006038:	24000800 	.word	0x24000800

0800603c <prvTraceStoreTaskswitch>:
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 800603c:	280f      	cmp	r0, #15
{
 800603e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006042:	4607      	mov	r7, r0
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 8006044:	d904      	bls.n	8006050 <prvTraceStoreTaskswitch+0x14>
 8006046:	4829      	ldr	r0, [pc, #164]	; (80060ec <prvTraceStoreTaskswitch+0xb0>)
}
 8006048:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 800604c:	f7ff ba36 	b.w	80054bc <prvTraceError>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006050:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006054:	2301      	movs	r3, #1
 8006056:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 800605a:	4c25      	ldr	r4, [pc, #148]	; (80060f0 <prvTraceStoreTaskswitch+0xb4>)
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 800605c:	4d25      	ldr	r5, [pc, #148]	; (80060f4 <prvTraceStoreTaskswitch+0xb8>)
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	3301      	adds	r3, #1
 8006062:	6023      	str	r3, [r4, #0]
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8006064:	782b      	ldrb	r3, [r5, #0]
 8006066:	4283      	cmp	r3, r0
 8006068:	d039      	beq.n	80060de <prvTraceStoreTaskswitch+0xa2>
 800606a:	f8df b094 	ldr.w	fp, [pc, #148]	; 8006100 <prvTraceStoreTaskswitch+0xc4>
 800606e:	f8db 3000 	ldr.w	r3, [fp]
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	b39b      	cbz	r3, 80060de <prvTraceStoreTaskswitch+0xa2>
		isPendingContextSwitch = 0;
 8006076:	4b20      	ldr	r3, [pc, #128]	; (80060f8 <prvTraceStoreTaskswitch+0xbc>)
 8006078:	2200      	movs	r2, #0
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800607a:	f64f 70ff 	movw	r0, #65535	; 0xffff
		isPendingContextSwitch = 0;
 800607e:	601a      	str	r2, [r3, #0]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8006080:	f7ff fdde 	bl	8005c40 <prvTraceGetDTS>
		handle_of_last_logged_task = task_handle;
 8006084:	702f      	strb	r7, [r5, #0]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8006086:	4681      	mov	r9, r0
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8006088:	f7ff fa34 	bl	80054f4 <prvTraceNextFreeEventBufferSlot>
		if (ts != NULL)
 800608c:	4682      	mov	sl, r0
 800608e:	b330      	cbz	r0, 80060de <prvTraceStoreTaskswitch+0xa2>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8006090:	f8db 6000 	ldr.w	r6, [fp]
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8006094:	7828      	ldrb	r0, [r5, #0]
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8006096:	f896 3067 	ldrb.w	r3, [r6, #103]	; 0x67
 800609a:	4283      	cmp	r3, r0
 800609c:	d204      	bcs.n	80060a8 <prvTraceStoreTaskswitch+0x6c>
 800609e:	4817      	ldr	r0, [pc, #92]	; (80060fc <prvTraceStoreTaskswitch+0xc0>)
 80060a0:	f7ff fa0c 	bl	80054bc <prvTraceError>
				ts->type = TS_TASK_BEGIN;
 80060a4:	2306      	movs	r3, #6
 80060a6:	e00d      	b.n	80060c4 <prvTraceStoreTaskswitch+0x88>
	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 80060a8:	2103      	movs	r1, #3
 80060aa:	f7ff faf9 	bl	80056a0 <uiIndexOfObject>
 80060ae:	f8db 3000 	ldr.w	r3, [fp]
 80060b2:	4430      	add	r0, r6
 80060b4:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80060b8:	4418      	add	r0, r3
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 80060ba:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d1f0      	bne.n	80060a4 <prvTraceStoreTaskswitch+0x68>
				ts->type = TS_TASK_RESUME;
 80060c2:	2307      	movs	r3, #7
				ts->type = TS_TASK_BEGIN;
 80060c4:	f88a 3000 	strb.w	r3, [sl]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
 80060c8:	2201      	movs	r2, #1
 80060ca:	7829      	ldrb	r1, [r5, #0]
 80060cc:	2003      	movs	r0, #3
			ts->dts = dts3;
 80060ce:	f8aa 9002 	strh.w	r9, [sl, #2]
			ts->objHandle = hnd8;
 80060d2:	f88a 7001 	strb.w	r7, [sl, #1]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
 80060d6:	f7ff fbd7 	bl	8005888 <prvTraceSetObjectState>
			prvTraceUpdateCounters();
 80060da:	f7ff f9c1 	bl	8005460 <prvTraceUpdateCounters>
	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	6023      	str	r3, [r4, #0]
 80060e4:	f388 8810 	msr	PRIMASK, r8
}
 80060e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ec:	08016ede 	.word	0x08016ede
 80060f0:	240008b4 	.word	0x240008b4
 80060f4:	24000800 	.word	0x24000800
 80060f8:	24000808 	.word	0x24000808
 80060fc:	08016f23 	.word	0x08016f23
 8006100:	240007fc 	.word	0x240007fc

08006104 <uiTraceStart>:
{
 8006104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (RecorderDataPtr == NULL)
 8006108:	4d1d      	ldr	r5, [pc, #116]	; (8006180 <uiTraceStart+0x7c>)
 800610a:	682c      	ldr	r4, [r5, #0]
 800610c:	b92c      	cbnz	r4, 800611a <uiTraceStart+0x16>
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
 800610e:	481d      	ldr	r0, [pc, #116]	; (8006184 <uiTraceStart+0x80>)
 8006110:	f7ff f9d4 	bl	80054bc <prvTraceError>
 8006114:	4620      	mov	r0, r4
}
 8006116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (RecorderDataPtr->recorderActive == 1)
 800611a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800611c:	2801      	cmp	r0, #1
 800611e:	d0fa      	beq.n	8006116 <uiTraceStart+0x12>
	if (traceErrorMessage == NULL)
 8006120:	4b19      	ldr	r3, [pc, #100]	; (8006188 <uiTraceStart+0x84>)
 8006122:	f8d3 8000 	ldr.w	r8, [r3]
 8006126:	f1b8 0f00 	cmp.w	r8, #0
 800612a:	d126      	bne.n	800617a <uiTraceStart+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800612c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006130:	2201      	movs	r2, #1
 8006132:	f382 8810 	msr	PRIMASK, r2
		trcCRITICAL_SECTION_BEGIN();
 8006136:	4c15      	ldr	r4, [pc, #84]	; (800618c <uiTraceStart+0x88>)
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	4413      	add	r3, r2
 800613c:	6023      	str	r3, [r4, #0]
		RecorderDataPtr->recorderActive = 1;
 800613e:	682b      	ldr	r3, [r5, #0]
 8006140:	631a      	str	r2, [r3, #48]	; 0x30
		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8006142:	f7ff f891 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8006146:	f7fe fff1 	bl	800512c <prvTraceGetTaskNumberLow16>
 800614a:	b2c6      	uxtb	r6, r0
		if (handle == 0)
 800614c:	b96e      	cbnz	r6, 800616a <uiTraceStart+0x66>
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 800614e:	2003      	movs	r0, #3
 8006150:	f7ff fbdc 	bl	800590c <prvTraceGetObjectHandle>
 8006154:	4606      	mov	r6, r0
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8006156:	4601      	mov	r1, r0
 8006158:	4a0d      	ldr	r2, [pc, #52]	; (8006190 <uiTraceStart+0x8c>)
 800615a:	2003      	movs	r0, #3
 800615c:	f7ff fc5c 	bl	8005a18 <prvTraceSetObjectName>
			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8006160:	4642      	mov	r2, r8
 8006162:	4631      	mov	r1, r6
 8006164:	2003      	movs	r0, #3
 8006166:	f7ff fb43 	bl	80057f0 <prvTraceSetPriorityProperty>
		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 800616a:	4630      	mov	r0, r6
 800616c:	f7ff ff66 	bl	800603c <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	3b01      	subs	r3, #1
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	f387 8810 	msr	PRIMASK, r7
	return RecorderDataPtr->recorderActive;
 800617a:	682b      	ldr	r3, [r5, #0]
 800617c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800617e:	e7ca      	b.n	8006116 <uiTraceStart+0x12>
 8006180:	240007fc 	.word	0x240007fc
 8006184:	08016fd9 	.word	0x08016fd9
 8006188:	240008bc 	.word	0x240008bc
 800618c:	240008b4 	.word	0x240008b4
 8006190:	0801701d 	.word	0x0801701d

08006194 <vTraceStart>:
	(void)uiTraceStart();
 8006194:	f7ff bfb6 	b.w	8006104 <uiTraceStart>

08006198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80061d0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800619c:	f7fd fd66 	bl	8003c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80061a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80061a2:	e003      	b.n	80061ac <LoopCopyDataInit>

080061a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80061a4:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80061a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80061a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80061aa:	3104      	adds	r1, #4

080061ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80061ac:	480a      	ldr	r0, [pc, #40]	; (80061d8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80061ae:	4b0b      	ldr	r3, [pc, #44]	; (80061dc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80061b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80061b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80061b4:	d3f6      	bcc.n	80061a4 <CopyDataInit>
  ldr  r2, =_sbss
 80061b6:	4a0a      	ldr	r2, [pc, #40]	; (80061e0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80061b8:	e002      	b.n	80061c0 <LoopFillZerobss>

080061ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80061ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80061bc:	f842 3b04 	str.w	r3, [r2], #4

080061c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80061c0:	4b08      	ldr	r3, [pc, #32]	; (80061e4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80061c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80061c4:	d3f9      	bcc.n	80061ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80061c6:	f00d fc6b 	bl	8013aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80061ca:	f7fc fc59 	bl	8002a80 <main>
  bx  lr    
 80061ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80061d0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80061d4:	08017548 	.word	0x08017548
  ldr  r0, =_sdata
 80061d8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80061dc:	24000204 	.word	0x24000204
  ldr  r2, =_sbss
 80061e0:	24000204 	.word	0x24000204
  ldr  r3, = _ebss
 80061e4:	2402277c 	.word	0x2402277c

080061e8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80061e8:	e7fe      	b.n	80061e8 <ADC3_IRQHandler>
	...

080061ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061ec:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061ee:	2003      	movs	r0, #3
 80061f0:	f000 fea0 	bl	8006f34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061f4:	f003 f920 	bl	8009438 <HAL_RCC_GetSysClockFreq>
 80061f8:	490f      	ldr	r1, [pc, #60]	; (8006238 <HAL_Init+0x4c>)
 80061fa:	4a10      	ldr	r2, [pc, #64]	; (800623c <HAL_Init+0x50>)
 80061fc:	698b      	ldr	r3, [r1, #24]
 80061fe:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006202:	5cd3      	ldrb	r3, [r2, r3]
 8006204:	f003 031f 	and.w	r3, r3, #31
 8006208:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800620a:	698b      	ldr	r3, [r1, #24]
 800620c:	f003 030f 	and.w	r3, r3, #15
 8006210:	5cd3      	ldrb	r3, [r2, r3]
 8006212:	4a0b      	ldr	r2, [pc, #44]	; (8006240 <HAL_Init+0x54>)
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	fa20 f303 	lsr.w	r3, r0, r3
 800621c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800621e:	4b09      	ldr	r3, [pc, #36]	; (8006244 <HAL_Init+0x58>)
 8006220:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006222:	2000      	movs	r0, #0
 8006224:	f7fd fc3a 	bl	8003a9c <HAL_InitTick>
 8006228:	4604      	mov	r4, r0
 800622a:	b918      	cbnz	r0, 8006234 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800622c:	f7fd f892 	bl	8003354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006230:	4620      	mov	r0, r4
 8006232:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006234:	2401      	movs	r4, #1
 8006236:	e7fb      	b.n	8006230 <HAL_Init+0x44>
 8006238:	58024400 	.word	0x58024400
 800623c:	08015d5c 	.word	0x08015d5c
 8006240:	24000004 	.word	0x24000004
 8006244:	24000000 	.word	0x24000000

08006248 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006248:	4a03      	ldr	r2, [pc, #12]	; (8006258 <HAL_IncTick+0x10>)
 800624a:	4b04      	ldr	r3, [pc, #16]	; (800625c <HAL_IncTick+0x14>)
 800624c:	6811      	ldr	r1, [r2, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	440b      	add	r3, r1
 8006252:	6013      	str	r3, [r2, #0]
}
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	240209f0 	.word	0x240209f0
 800625c:	24000018 	.word	0x24000018

08006260 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006260:	4b01      	ldr	r3, [pc, #4]	; (8006268 <HAL_GetTick+0x8>)
 8006262:	6818      	ldr	r0, [r3, #0]
}
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	240209f0 	.word	0x240209f0

0800626c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006270:	f7ff fff6 	bl	8006260 <HAL_GetTick>
 8006274:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006276:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006278:	bf1e      	ittt	ne
 800627a:	4b04      	ldrne	r3, [pc, #16]	; (800628c <HAL_Delay+0x20>)
 800627c:	781b      	ldrbne	r3, [r3, #0]
 800627e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006280:	f7ff ffee 	bl	8006260 <HAL_GetTick>
 8006284:	1b40      	subs	r0, r0, r5
 8006286:	42a0      	cmp	r0, r4
 8006288:	d3fa      	bcc.n	8006280 <HAL_Delay+0x14>
  {
  }
}
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	24000018 	.word	0x24000018

08006290 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006290:	4b01      	ldr	r3, [pc, #4]	; (8006298 <HAL_GetREVID+0x8>)
 8006292:	6818      	ldr	r0, [r3, #0]
}
 8006294:	0c00      	lsrs	r0, r0, #16
 8006296:	4770      	bx	lr
 8006298:	5c001000 	.word	0x5c001000

0800629c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800629c:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800629e:	0dcc      	lsrs	r4, r1, #23
 80062a0:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 80062a2:	f3c1 5104 	ubfx	r1, r1, #20, #5
 80062a6:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80062a8:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 80062ac:	408d      	lsls	r5, r1
 80062ae:	fa02 f101 	lsl.w	r1, r2, r1
 80062b2:	5823      	ldr	r3, [r4, r0]
 80062b4:	ea23 0305 	bic.w	r3, r3, r5
 80062b8:	4319      	orrs	r1, r3
 80062ba:	5021      	str	r1, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80062bc:	bd30      	pop	{r4, r5, pc}

080062be <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062be:	6880      	ldr	r0, [r0, #8]
}
 80062c0:	f000 0001 	and.w	r0, r0, #1
 80062c4:	4770      	bx	lr

080062c6 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80062c6:	6880      	ldr	r0, [r0, #8]
}
 80062c8:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80062cc:	4770      	bx	lr

080062ce <HAL_ADC_ConvCpltCallback>:
 80062ce:	4770      	bx	lr

080062d0 <HAL_ADC_ConvHalfCpltCallback>:
 80062d0:	4770      	bx	lr

080062d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80062d2:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80062d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80062d6:	f7ff fffb 	bl	80062d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80062da:	bd08      	pop	{r3, pc}

080062dc <HAL_ADC_ErrorCallback>:
 80062dc:	4770      	bx	lr

080062de <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062de:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80062e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062e2:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80062e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 80062e8:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80062ea:	d121      	bne.n	8006330 <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80062ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062f0:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	6811      	ldr	r1, [r2, #0]
 80062f6:	0708      	lsls	r0, r1, #28
 80062f8:	d516      	bpl.n	8006328 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80062fa:	68d1      	ldr	r1, [r2, #12]
 80062fc:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8006300:	d10e      	bne.n	8006320 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006302:	68d2      	ldr	r2, [r2, #12]
 8006304:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006308:	d10a      	bne.n	8006320 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800630a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800630c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006310:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006312:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006314:	04d1      	lsls	r1, r2, #19
 8006316:	d403      	bmi.n	8006320 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff ffd4 	bl	80062ce <HAL_ADC_ConvCpltCallback>
}
 8006326:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006328:	68d2      	ldr	r2, [r2, #12]
 800632a:	f012 0f03 	tst.w	r2, #3
 800632e:	e7eb      	b.n	8006308 <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006330:	06d2      	lsls	r2, r2, #27
 8006332:	d503      	bpl.n	800633c <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff ffd1 	bl	80062dc <HAL_ADC_ErrorCallback>
 800633a:	e7f4      	b.n	8006326 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800633c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800633e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006344:	4718      	bx	r3

08006346 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006346:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006348:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800634a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800634c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006350:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006352:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006354:	f043 0304 	orr.w	r3, r3, #4
 8006358:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800635a:	f7ff ffbf 	bl	80062dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800635e:	bd08      	pop	{r3, pc}

08006360 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 8006360:	2300      	movs	r3, #0
{
 8006362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8006364:	9301      	str	r3, [sp, #4]
{
 8006366:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8006368:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800636c:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 800636e:	2b01      	cmp	r3, #1
 8006370:	f000 8173 	beq.w	800665a <HAL_ADC_ConfigChannel+0x2fa>
 8006374:	2301      	movs	r3, #1
 8006376:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800637a:	6800      	ldr	r0, [r0, #0]
 800637c:	f7ff ffa3 	bl	80062c6 <LL_ADC_REG_IsConversionOngoing>
 8006380:	2800      	cmp	r0, #0
 8006382:	f040 8164 	bne.w	800664e <HAL_ADC_ConfigChannel+0x2ee>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006386:	680a      	ldr	r2, [r1, #0]
 8006388:	f3c2 0013 	ubfx	r0, r2, #0, #20
 800638c:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8006390:	bb50      	cbnz	r0, 80063e8 <HAL_ADC_ConfigChannel+0x88>
 8006392:	408b      	lsls	r3, r1
 8006394:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(*preg,
 8006396:	271f      	movs	r7, #31
 8006398:	69c2      	ldr	r2, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800639a:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 800639e:	4313      	orrs	r3, r2
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80063a0:	686a      	ldr	r2, [r5, #4]
 80063a2:	0996      	lsrs	r6, r2, #6
  MODIFY_REG(*preg,
 80063a4:	f002 021f 	and.w	r2, r2, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80063a8:	61c3      	str	r3, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80063aa:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 80063ae:	4097      	lsls	r7, r2
 80063b0:	fa01 f202 	lsl.w	r2, r1, r2
 80063b4:	f856 300c 	ldr.w	r3, [r6, ip]
 80063b8:	ea23 0307 	bic.w	r3, r3, r7
 80063bc:	4313      	orrs	r3, r2
 80063be:	f846 300c 	str.w	r3, [r6, ip]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80063c2:	f7ff ff80 	bl	80062c6 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80063c6:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80063c8:	689e      	ldr	r6, [r3, #8]
 80063ca:	f016 0608 	ands.w	r6, r6, #8
 80063ce:	f000 8146 	beq.w	800665e <HAL_ADC_ConfigChannel+0x2fe>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063d2:	6820      	ldr	r0, [r4, #0]
 80063d4:	f7ff ff73 	bl	80062be <LL_ADC_IsEnabled>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d03c      	beq.n	8006456 <HAL_ADC_ConfigChannel+0xf6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063dc:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80063de:	2300      	movs	r3, #0
 80063e0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80063e4:	b003      	add	sp, #12
 80063e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e8:	fa92 f0a2 	rbit	r0, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80063ec:	fab0 f080 	clz	r0, r0
 80063f0:	f000 001f 	and.w	r0, r0, #31
 80063f4:	4083      	lsls	r3, r0
 80063f6:	e7cd      	b.n	8006394 <HAL_ADC_ConfigChannel+0x34>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80063f8:	68d9      	ldr	r1, [r3, #12]
 80063fa:	68d8      	ldr	r0, [r3, #12]
 80063fc:	06c9      	lsls	r1, r1, #27
 80063fe:	f140 8141 	bpl.w	8006684 <HAL_ADC_ConfigChannel+0x324>
 8006402:	0840      	lsrs	r0, r0, #1
 8006404:	f000 0008 	and.w	r0, r0, #8
 8006408:	e13f      	b.n	800668a <HAL_ADC_ConfigChannel+0x32a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800640a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800640c:	0692      	lsls	r2, r2, #26
 800640e:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8006412:	4291      	cmp	r1, r2
 8006414:	d103      	bne.n	800641e <HAL_ADC_ConfigChannel+0xbe>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006416:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8006418:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800641c:	6619      	str	r1, [r3, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800641e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8006420:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8006424:	428a      	cmp	r2, r1
 8006426:	d103      	bne.n	8006430 <HAL_ADC_ConfigChannel+0xd0>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006428:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800642a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800642e:	6659      	str	r1, [r3, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006430:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8006432:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8006436:	428a      	cmp	r2, r1
 8006438:	d103      	bne.n	8006442 <HAL_ADC_ConfigChannel+0xe2>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800643a:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800643c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006440:	6699      	str	r1, [r3, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006442:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8006444:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8006448:	428a      	cmp	r2, r1
 800644a:	d1c2      	bne.n	80063d2 <HAL_ADC_ConfigChannel+0x72>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800644c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800644e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006452:	66da      	str	r2, [r3, #108]	; 0x6c
 8006454:	e7bd      	b.n	80063d2 <HAL_ADC_ConfigChannel+0x72>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006456:	68ee      	ldr	r6, [r5, #12]
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800645c:	f006 0c18 	and.w	ip, r6, #24
 8006460:	4aa3      	ldr	r2, [pc, #652]	; (80066f0 <HAL_ADC_ConfigChannel+0x390>)
 8006462:	f3c3 0713 	ubfx	r7, r3, #0, #20
 8006466:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 800646a:	fa22 f20c 	lsr.w	r2, r2, ip
 800646e:	ea21 0107 	bic.w	r1, r1, r7
 8006472:	401a      	ands	r2, r3
 8006474:	430a      	orrs	r2, r1
 8006476:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800647a:	4a9e      	ldr	r2, [pc, #632]	; (80066f4 <HAL_ADC_ConfigChannel+0x394>)
 800647c:	4296      	cmp	r6, r2
 800647e:	d11d      	bne.n	80064bc <HAL_ADC_ConfigChannel+0x15c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006480:	2f00      	cmp	r7, #0
 8006482:	d161      	bne.n	8006548 <HAL_ADC_ConfigChannel+0x1e8>
 8006484:	0e9a      	lsrs	r2, r3, #26
 8006486:	3201      	adds	r2, #1
 8006488:	f002 061f 	and.w	r6, r2, #31
 800648c:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800648e:	2e09      	cmp	r6, #9
 8006490:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006494:	f04f 0201 	mov.w	r2, #1
 8006498:	fa02 f206 	lsl.w	r2, r2, r6
 800649c:	f200 8085 	bhi.w	80065aa <HAL_ADC_ConfigChannel+0x24a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80064a0:	4311      	orrs	r1, r2
 80064a2:	2f00      	cmp	r7, #0
 80064a4:	d16b      	bne.n	800657e <HAL_ADC_ConfigChannel+0x21e>
 80064a6:	0e9b      	lsrs	r3, r3, #26
 80064a8:	3301      	adds	r3, #1
 80064aa:	f003 031f 	and.w	r3, r3, #31
 80064ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80064b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064b4:	4319      	orrs	r1, r3
 80064b6:	68aa      	ldr	r2, [r5, #8]
 80064b8:	f7ff fef0 	bl	800629c <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	da8c      	bge.n	80063dc <HAL_ADC_ConfigChannel+0x7c>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80064c2:	6822      	ldr	r2, [r4, #0]
 80064c4:	498c      	ldr	r1, [pc, #560]	; (80066f8 <HAL_ADC_ConfigChannel+0x398>)
 80064c6:	428a      	cmp	r2, r1
 80064c8:	f000 8089 	beq.w	80065de <HAL_ADC_ConfigChannel+0x27e>
 80064cc:	4e8b      	ldr	r6, [pc, #556]	; (80066fc <HAL_ADC_ConfigChannel+0x39c>)
 80064ce:	4b8c      	ldr	r3, [pc, #560]	; (8006700 <HAL_ADC_ConfigChannel+0x3a0>)
 80064d0:	488c      	ldr	r0, [pc, #560]	; (8006704 <HAL_ADC_ConfigChannel+0x3a4>)
 80064d2:	42b2      	cmp	r2, r6
 80064d4:	bf08      	it	eq
 80064d6:	4603      	moveq	r3, r0
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064d8:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	d002      	beq.n	80064e4 <HAL_ADC_ConfigChannel+0x184>
 80064de:	4987      	ldr	r1, [pc, #540]	; (80066fc <HAL_ADC_ConfigChannel+0x39c>)
 80064e0:	428a      	cmp	r2, r1
 80064e2:	d17e      	bne.n	80065e2 <HAL_ADC_ConfigChannel+0x282>
 80064e4:	4884      	ldr	r0, [pc, #528]	; (80066f8 <HAL_ADC_ConfigChannel+0x398>)
 80064e6:	f7ff feea 	bl	80062be <LL_ADC_IsEnabled>
 80064ea:	4602      	mov	r2, r0
 80064ec:	4883      	ldr	r0, [pc, #524]	; (80066fc <HAL_ADC_ConfigChannel+0x39c>)
 80064ee:	f7ff fee6 	bl	80062be <LL_ADC_IsEnabled>
 80064f2:	4302      	orrs	r2, r0
 80064f4:	bf0c      	ite	eq
 80064f6:	2001      	moveq	r0, #1
 80064f8:	2000      	movne	r0, #0
 80064fa:	2800      	cmp	r0, #0
 80064fc:	f000 80a1 	beq.w	8006642 <HAL_ADC_ConfigChannel+0x2e2>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006500:	6829      	ldr	r1, [r5, #0]
 8006502:	f003 72e0 	and.w	r2, r3, #29360128	; 0x1c00000
 8006506:	4880      	ldr	r0, [pc, #512]	; (8006708 <HAL_ADC_ConfigChannel+0x3a8>)
 8006508:	4281      	cmp	r1, r0
 800650a:	d171      	bne.n	80065f0 <HAL_ADC_ConfigChannel+0x290>
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	f53f af65 	bmi.w	80063dc <HAL_ADC_ConfigChannel+0x7c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006512:	6821      	ldr	r1, [r4, #0]
 8006514:	4b7d      	ldr	r3, [pc, #500]	; (800670c <HAL_ADC_ConfigChannel+0x3ac>)
 8006516:	4299      	cmp	r1, r3
 8006518:	f47f af60 	bne.w	80063dc <HAL_ADC_ConfigChannel+0x7c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800651c:	4978      	ldr	r1, [pc, #480]	; (8006700 <HAL_ADC_ConfigChannel+0x3a0>)
 800651e:	688b      	ldr	r3, [r1, #8]
 8006520:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8006524:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006528:	4313      	orrs	r3, r2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800652a:	4a79      	ldr	r2, [pc, #484]	; (8006710 <HAL_ADC_ConfigChannel+0x3b0>)
 800652c:	608b      	str	r3, [r1, #8]
 800652e:	4b79      	ldr	r3, [pc, #484]	; (8006714 <HAL_ADC_ConfigChannel+0x3b4>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	fbb3 f3f2 	udiv	r3, r3, r2
 8006536:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 8006538:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 800653a:	9b01      	ldr	r3, [sp, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	f43f af4d 	beq.w	80063dc <HAL_ADC_ConfigChannel+0x7c>
                wait_loop_index--;
 8006542:	9b01      	ldr	r3, [sp, #4]
 8006544:	3b01      	subs	r3, #1
 8006546:	e7f7      	b.n	8006538 <HAL_ADC_ConfigChannel+0x1d8>
 8006548:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800654c:	fab2 f282 	clz	r2, r2
 8006550:	3201      	adds	r2, #1
 8006552:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006556:	2a09      	cmp	r2, #9
 8006558:	d816      	bhi.n	8006588 <HAL_ADC_ConfigChannel+0x228>
 800655a:	fa93 f1a3 	rbit	r1, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800655e:	fab1 f181 	clz	r1, r1
 8006562:	3101      	adds	r1, #1
 8006564:	0689      	lsls	r1, r1, #26
 8006566:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 800656a:	fa93 f2a3 	rbit	r2, r3
 800656e:	fab2 f282 	clz	r2, r2
 8006572:	3201      	adds	r2, #1
 8006574:	f002 061f 	and.w	r6, r2, #31
 8006578:	2201      	movs	r2, #1
 800657a:	40b2      	lsls	r2, r6
 800657c:	e790      	b.n	80064a0 <HAL_ADC_ConfigChannel+0x140>
 800657e:	fa93 f3a3 	rbit	r3, r3
 8006582:	fab3 f383 	clz	r3, r3
 8006586:	e78f      	b.n	80064a8 <HAL_ADC_ConfigChannel+0x148>
 8006588:	fa93 f1a3 	rbit	r1, r3
 800658c:	fab1 f181 	clz	r1, r1
 8006590:	3101      	adds	r1, #1
 8006592:	0689      	lsls	r1, r1, #26
 8006594:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8006598:	fa93 f2a3 	rbit	r2, r3
 800659c:	fab2 f282 	clz	r2, r2
 80065a0:	3201      	adds	r2, #1
 80065a2:	f002 061f 	and.w	r6, r2, #31
 80065a6:	2201      	movs	r2, #1
 80065a8:	40b2      	lsls	r2, r6
 80065aa:	430a      	orrs	r2, r1
 80065ac:	b95f      	cbnz	r7, 80065c6 <HAL_ADC_ConfigChannel+0x266>
 80065ae:	0e9b      	lsrs	r3, r3, #26
 80065b0:	3301      	adds	r3, #1
 80065b2:	f003 031f 	and.w	r3, r3, #31
 80065b6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80065ba:	391e      	subs	r1, #30
 80065bc:	0509      	lsls	r1, r1, #20
 80065be:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065c2:	4311      	orrs	r1, r2
 80065c4:	e777      	b.n	80064b6 <HAL_ADC_ConfigChannel+0x156>
 80065c6:	fa93 f3a3 	rbit	r3, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80065ca:	fab3 f383 	clz	r3, r3
 80065ce:	3301      	adds	r3, #1
 80065d0:	f003 031f 	and.w	r3, r3, #31
 80065d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80065d8:	f1a3 011e 	sub.w	r1, r3, #30
 80065dc:	e7ee      	b.n	80065bc <HAL_ADC_ConfigChannel+0x25c>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065de:	4b49      	ldr	r3, [pc, #292]	; (8006704 <HAL_ADC_ConfigChannel+0x3a4>)
 80065e0:	e77a      	b.n	80064d8 <HAL_ADC_ConfigChannel+0x178>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065e2:	484a      	ldr	r0, [pc, #296]	; (800670c <HAL_ADC_ConfigChannel+0x3ac>)
 80065e4:	f7ff fe6b 	bl	80062be <LL_ADC_IsEnabled>
 80065e8:	fab0 f080 	clz	r0, r0
 80065ec:	0940      	lsrs	r0, r0, #5
 80065ee:	e784      	b.n	80064fa <HAL_ADC_ConfigChannel+0x19a>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80065f0:	4849      	ldr	r0, [pc, #292]	; (8006718 <HAL_ADC_ConfigChannel+0x3b8>)
 80065f2:	4281      	cmp	r1, r0
 80065f4:	d111      	bne.n	800661a <HAL_ADC_ConfigChannel+0x2ba>
 80065f6:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
 80065fa:	f47f aeef 	bne.w	80063dc <HAL_ADC_ConfigChannel+0x7c>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065fe:	6821      	ldr	r1, [r4, #0]
 8006600:	4b42      	ldr	r3, [pc, #264]	; (800670c <HAL_ADC_ConfigChannel+0x3ac>)
 8006602:	4299      	cmp	r1, r3
 8006604:	f47f aeea 	bne.w	80063dc <HAL_ADC_ConfigChannel+0x7c>
 8006608:	493d      	ldr	r1, [pc, #244]	; (8006700 <HAL_ADC_ConfigChannel+0x3a0>)
 800660a:	688b      	ldr	r3, [r1, #8]
 800660c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8006610:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006614:	4313      	orrs	r3, r2
 8006616:	608b      	str	r3, [r1, #8]
 8006618:	e6e1      	b.n	80063de <HAL_ADC_ConfigChannel+0x7e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800661a:	4840      	ldr	r0, [pc, #256]	; (800671c <HAL_ADC_ConfigChannel+0x3bc>)
 800661c:	4281      	cmp	r1, r0
 800661e:	f47f aedd 	bne.w	80063dc <HAL_ADC_ConfigChannel+0x7c>
 8006622:	f413 0080 	ands.w	r0, r3, #4194304	; 0x400000
 8006626:	f47f aed9 	bne.w	80063dc <HAL_ADC_ConfigChannel+0x7c>
            if (ADC_VREFINT_INSTANCE(hadc))
 800662a:	6821      	ldr	r1, [r4, #0]
 800662c:	4b37      	ldr	r3, [pc, #220]	; (800670c <HAL_ADC_ConfigChannel+0x3ac>)
 800662e:	4299      	cmp	r1, r3
 8006630:	f47f aed4 	bne.w	80063dc <HAL_ADC_ConfigChannel+0x7c>
 8006634:	4932      	ldr	r1, [pc, #200]	; (8006700 <HAL_ADC_ConfigChannel+0x3a0>)
 8006636:	688b      	ldr	r3, [r1, #8]
 8006638:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800663c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006640:	e7e8      	b.n	8006614 <HAL_ADC_ConfigChannel+0x2b4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006642:	6d63      	ldr	r3, [r4, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8006644:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006646:	f043 0320 	orr.w	r3, r3, #32
 800664a:	6563      	str	r3, [r4, #84]	; 0x54
 800664c:	e6c7      	b.n	80063de <HAL_ADC_ConfigChannel+0x7e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800664e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006650:	4618      	mov	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006652:	f042 0220 	orr.w	r2, r2, #32
 8006656:	6562      	str	r2, [r4, #84]	; 0x54
 8006658:	e6c1      	b.n	80063de <HAL_ADC_ConfigChannel+0x7e>
  __HAL_LOCK(hadc);
 800665a:	2002      	movs	r0, #2
 800665c:	e6c2      	b.n	80063e4 <HAL_ADC_ConfigChannel+0x84>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800665e:	2800      	cmp	r0, #0
 8006660:	f47f aeb7 	bne.w	80063d2 <HAL_ADC_ConfigChannel+0x72>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006664:	68aa      	ldr	r2, [r5, #8]
 8006666:	4618      	mov	r0, r3
 8006668:	6829      	ldr	r1, [r5, #0]
 800666a:	f7ff fe17 	bl	800629c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800666e:	4b2c      	ldr	r3, [pc, #176]	; (8006720 <HAL_ADC_ConfigChannel+0x3c0>)
 8006670:	696a      	ldr	r2, [r5, #20]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	f47f aebb 	bne.w	80063f8 <HAL_ADC_ConfigChannel+0x98>
 8006682:	68d8      	ldr	r0, [r3, #12]
 8006684:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8006688:	0040      	lsls	r0, r0, #1
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800668a:	f8d5 c010 	ldr.w	ip, [r5, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800668e:	fa02 f000 	lsl.w	r0, r2, r0
 8006692:	682a      	ldr	r2, [r5, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006694:	f1bc 0f04 	cmp.w	ip, #4
 8006698:	f43f aeb7 	beq.w	800640a <HAL_ADC_ConfigChannel+0xaa>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800669c:	f103 0760 	add.w	r7, r3, #96	; 0x60
    MODIFY_REG(*preg,
 80066a0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80066a4:	f857 102c 	ldr.w	r1, [r7, ip, lsl #2]
 80066a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80066ac:	430a      	orrs	r2, r1
 80066ae:	4302      	orrs	r2, r0
 80066b0:	f847 202c 	str.w	r2, [r7, ip, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80066b4:	7e6a      	ldrb	r2, [r5, #25]
 80066b6:	6929      	ldr	r1, [r5, #16]
 80066b8:	2a01      	cmp	r2, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80066ba:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
 80066be:	bf14      	ite	ne
 80066c0:	2000      	movne	r0, #0
 80066c2:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 80066c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80066ca:	4302      	orrs	r2, r0
 80066cc:	f847 2021 	str.w	r2, [r7, r1, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80066d0:	7e29      	ldrb	r1, [r5, #24]
 80066d2:	692a      	ldr	r2, [r5, #16]
 80066d4:	2901      	cmp	r1, #1
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80066d6:	6919      	ldr	r1, [r3, #16]
 80066d8:	f002 021f 	and.w	r2, r2, #31
 80066dc:	bf08      	it	eq
 80066de:	f44f 6600 	moveq.w	r6, #2048	; 0x800
 80066e2:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
 80066e6:	fa06 f202 	lsl.w	r2, r6, r2
 80066ea:	430a      	orrs	r2, r1
 80066ec:	611a      	str	r2, [r3, #16]
 80066ee:	e670      	b.n	80063d2 <HAL_ADC_ConfigChannel+0x72>
 80066f0:	000fffff 	.word	0x000fffff
 80066f4:	47ff0000 	.word	0x47ff0000
 80066f8:	40022000 	.word	0x40022000
 80066fc:	40022100 	.word	0x40022100
 8006700:	58026300 	.word	0x58026300
 8006704:	40022300 	.word	0x40022300
 8006708:	cb840000 	.word	0xcb840000
 800670c:	58026000 	.word	0x58026000
 8006710:	00030d40 	.word	0x00030d40
 8006714:	24000000 	.word	0x24000000
 8006718:	c7520000 	.word	0xc7520000
 800671c:	cfb80000 	.word	0xcfb80000
 8006720:	5c001000 	.word	0x5c001000

08006724 <ADC_ConversionStop>:
{
 8006724:	b570      	push	{r4, r5, r6, lr}
 8006726:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006728:	6800      	ldr	r0, [r0, #0]
 800672a:	f7ff fdcc 	bl	80062c6 <LL_ADC_REG_IsConversionOngoing>
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800672e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	0716      	lsls	r6, r2, #28
 8006734:	d556      	bpl.n	80067e4 <ADC_ConversionStop+0xc0>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	0190      	lsls	r0, r2, #6
 800673a:	d52b      	bpl.n	8006794 <ADC_ConversionStop+0x70>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800673c:	8aa0      	ldrh	r0, [r4, #20]
 800673e:	f240 1201 	movw	r2, #257	; 0x101
 8006742:	4290      	cmp	r0, r2
 8006744:	d126      	bne.n	8006794 <ADC_ConversionStop+0x70>
 8006746:	4a29      	ldr	r2, [pc, #164]	; (80067ec <ADC_ConversionStop+0xc8>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006748:	6819      	ldr	r1, [r3, #0]
 800674a:	0649      	lsls	r1, r1, #25
 800674c:	d516      	bpl.n	800677c <ADC_ConversionStop+0x58>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800674e:	2240      	movs	r2, #64	; 0x40
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006750:	2101      	movs	r1, #1
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006752:	601a      	str	r2, [r3, #0]
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff fdb6 	bl	80062c6 <LL_ADC_REG_IsConversionOngoing>
 800675a:	b158      	cbz	r0, 8006774 <ADC_ConversionStop+0x50>
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800675c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800675e:	6893      	ldr	r3, [r2, #8]
 8006760:	079e      	lsls	r6, r3, #30
 8006762:	d407      	bmi.n	8006774 <ADC_ConversionStop+0x50>
  MODIFY_REG(ADCx->CR,
 8006764:	6893      	ldr	r3, [r2, #8]
 8006766:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800676a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800676e:	f043 0310 	orr.w	r3, r3, #16
 8006772:	6093      	str	r3, [r2, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006774:	2901      	cmp	r1, #1
 8006776:	d10f      	bne.n	8006798 <ADC_ConversionStop+0x74>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006778:	2504      	movs	r5, #4
 800677a:	e022      	b.n	80067c2 <ADC_ConversionStop+0x9e>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800677c:	3a01      	subs	r2, #1
 800677e:	d1e3      	bne.n	8006748 <ADC_ConversionStop+0x24>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006780:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8006782:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006784:	f043 0310 	orr.w	r3, r3, #16
 8006788:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800678a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800678c:	f043 0301 	orr.w	r3, r3, #1
 8006790:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8006792:	bd70      	pop	{r4, r5, r6, pc}
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006794:	2902      	cmp	r1, #2
 8006796:	d1dd      	bne.n	8006754 <ADC_ConversionStop+0x30>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006798:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800679a:	6893      	ldr	r3, [r2, #8]
 800679c:	0718      	lsls	r0, r3, #28
 800679e:	d50a      	bpl.n	80067b6 <ADC_ConversionStop+0x92>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80067a0:	6893      	ldr	r3, [r2, #8]
 80067a2:	079b      	lsls	r3, r3, #30
 80067a4:	d407      	bmi.n	80067b6 <ADC_ConversionStop+0x92>
  MODIFY_REG(ADCx->CR,
 80067a6:	6893      	ldr	r3, [r2, #8]
 80067a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80067b0:	f043 0320 	orr.w	r3, r3, #32
 80067b4:	6093      	str	r3, [r2, #8]
    switch (conversion_group_reassigned)
 80067b6:	2902      	cmp	r1, #2
 80067b8:	d00c      	beq.n	80067d4 <ADC_ConversionStop+0xb0>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80067ba:	2903      	cmp	r1, #3
 80067bc:	bf0c      	ite	eq
 80067be:	250c      	moveq	r5, #12
 80067c0:	2504      	movne	r5, #4
    tickstart = HAL_GetTick();
 80067c2:	f7ff fd4d 	bl	8006260 <HAL_GetTick>
 80067c6:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	422b      	tst	r3, r5
 80067ce:	d103      	bne.n	80067d8 <ADC_ConversionStop+0xb4>
  return HAL_OK;
 80067d0:	2000      	movs	r0, #0
 80067d2:	e7de      	b.n	8006792 <ADC_ConversionStop+0x6e>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80067d4:	2508      	movs	r5, #8
 80067d6:	e7f4      	b.n	80067c2 <ADC_ConversionStop+0x9e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80067d8:	f7ff fd42 	bl	8006260 <HAL_GetTick>
 80067dc:	1b80      	subs	r0, r0, r6
 80067de:	2805      	cmp	r0, #5
 80067e0:	d9f2      	bls.n	80067c8 <ADC_ConversionStop+0xa4>
 80067e2:	e7cd      	b.n	8006780 <ADC_ConversionStop+0x5c>
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d1a6      	bne.n	8006736 <ADC_ConversionStop+0x12>
 80067e8:	e7f2      	b.n	80067d0 <ADC_ConversionStop+0xac>
 80067ea:	bf00      	nop
 80067ec:	000cdc01 	.word	0x000cdc01

080067f0 <ADC_Enable>:
{
 80067f0:	b570      	push	{r4, r5, r6, lr}
 80067f2:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067f4:	6800      	ldr	r0, [r0, #0]
 80067f6:	f7ff fd62 	bl	80062be <LL_ADC_IsEnabled>
 80067fa:	b108      	cbz	r0, 8006800 <ADC_Enable+0x10>
  return HAL_OK;
 80067fc:	2000      	movs	r0, #0
}
 80067fe:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006800:	6822      	ldr	r2, [r4, #0]
 8006802:	4b21      	ldr	r3, [pc, #132]	; (8006888 <ADC_Enable+0x98>)
 8006804:	6891      	ldr	r1, [r2, #8]
 8006806:	4219      	tst	r1, r3
 8006808:	d009      	beq.n	800681e <ADC_Enable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800680a:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 800680c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800680e:	f043 0310 	orr.w	r3, r3, #16
 8006812:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006814:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006816:	f043 0301 	orr.w	r3, r3, #1
 800681a:	65a3      	str	r3, [r4, #88]	; 0x58
 800681c:	e7ef      	b.n	80067fe <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 800681e:	6893      	ldr	r3, [r2, #8]
 8006820:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006824:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006828:	f043 0301 	orr.w	r3, r3, #1
 800682c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800682e:	f7ff fd17 	bl	8006260 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006832:	6822      	ldr	r2, [r4, #0]
 8006834:	4b15      	ldr	r3, [pc, #84]	; (800688c <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8006836:	4605      	mov	r5, r0
 8006838:	4915      	ldr	r1, [pc, #84]	; (8006890 <ADC_Enable+0xa0>)
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800683a:	429a      	cmp	r2, r3
 800683c:	d00e      	beq.n	800685c <ADC_Enable+0x6c>
 800683e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006842:	4814      	ldr	r0, [pc, #80]	; (8006894 <ADC_Enable+0xa4>)
 8006844:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 8006848:	428a      	cmp	r2, r1
 800684a:	bf08      	it	eq
 800684c:	4603      	moveq	r3, r0
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800684e:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	d101      	bne.n	8006858 <ADC_Enable+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006854:	06db      	lsls	r3, r3, #27
 8006856:	d1d1      	bne.n	80067fc <ADC_Enable+0xc>
  MODIFY_REG(ADCx->CR,
 8006858:	4e0f      	ldr	r6, [pc, #60]	; (8006898 <ADC_Enable+0xa8>)
 800685a:	e00f      	b.n	800687c <ADC_Enable+0x8c>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800685c:	4b0d      	ldr	r3, [pc, #52]	; (8006894 <ADC_Enable+0xa4>)
 800685e:	e7f6      	b.n	800684e <ADC_Enable+0x5e>
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006860:	f7ff fd2d 	bl	80062be <LL_ADC_IsEnabled>
 8006864:	b928      	cbnz	r0, 8006872 <ADC_Enable+0x82>
          LL_ADC_Enable(hadc->Instance);
 8006866:	6822      	ldr	r2, [r4, #0]
 8006868:	6893      	ldr	r3, [r2, #8]
 800686a:	4033      	ands	r3, r6
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006872:	f7ff fcf5 	bl	8006260 <HAL_GetTick>
 8006876:	1b40      	subs	r0, r0, r5
 8006878:	2802      	cmp	r0, #2
 800687a:	d8c6      	bhi.n	800680a <ADC_Enable+0x1a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800687c:	6820      	ldr	r0, [r4, #0]
 800687e:	6803      	ldr	r3, [r0, #0]
 8006880:	07da      	lsls	r2, r3, #31
 8006882:	d5ed      	bpl.n	8006860 <ADC_Enable+0x70>
 8006884:	e7ba      	b.n	80067fc <ADC_Enable+0xc>
 8006886:	bf00      	nop
 8006888:	8000003f 	.word	0x8000003f
 800688c:	40022000 	.word	0x40022000
 8006890:	40022100 	.word	0x40022100
 8006894:	40022300 	.word	0x40022300
 8006898:	7fffffc0 	.word	0x7fffffc0

0800689c <HAL_ADC_Start_DMA>:
{
 800689c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068a0:	4b40      	ldr	r3, [pc, #256]	; (80069a4 <HAL_ADC_Start_DMA+0x108>)
{
 80068a2:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068a4:	6800      	ldr	r0, [r0, #0]
{
 80068a6:	460e      	mov	r6, r1
 80068a8:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068aa:	4298      	cmp	r0, r3
 80068ac:	d069      	beq.n	8006982 <HAL_ADC_Start_DMA+0xe6>
 80068ae:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80068b2:	493d      	ldr	r1, [pc, #244]	; (80069a8 <HAL_ADC_Start_DMA+0x10c>)
 80068b4:	4a3d      	ldr	r2, [pc, #244]	; (80069ac <HAL_ADC_Start_DMA+0x110>)
 80068b6:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 80068ba:	4288      	cmp	r0, r1
 80068bc:	bf08      	it	eq
 80068be:	4613      	moveq	r3, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80068c0:	689b      	ldr	r3, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80068c2:	f7ff fd00 	bl	80062c6 <LL_ADC_REG_IsConversionOngoing>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d165      	bne.n	8006996 <HAL_ADC_Start_DMA+0xfa>
    __HAL_LOCK(hadc);
 80068ca:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80068ce:	2a01      	cmp	r2, #1
 80068d0:	d061      	beq.n	8006996 <HAL_ADC_Start_DMA+0xfa>
 80068d2:	f003 081f 	and.w	r8, r3, #31
 80068d6:	2301      	movs	r3, #1
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068d8:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 80068dc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068e0:	d854      	bhi.n	800698c <HAL_ADC_Start_DMA+0xf0>
 80068e2:	f240 2321 	movw	r3, #545	; 0x221
 80068e6:	fa23 f308 	lsr.w	r3, r3, r8
 80068ea:	43db      	mvns	r3, r3
 80068ec:	f013 0501 	ands.w	r5, r3, #1
 80068f0:	d14c      	bne.n	800698c <HAL_ADC_Start_DMA+0xf0>
      tmp_hal_status = ADC_Enable(hadc);
 80068f2:	4620      	mov	r0, r4
 80068f4:	f7ff ff7c 	bl	80067f0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d144      	bne.n	8006986 <HAL_ADC_Start_DMA+0xea>
        ADC_STATE_CLR_SET(hadc->State,
 80068fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068fe:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8006900:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006904:	f023 0301 	bic.w	r3, r3, #1
 8006908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800690c:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800690e:	4b26      	ldr	r3, [pc, #152]	; (80069a8 <HAL_ADC_Start_DMA+0x10c>)
 8006910:	4299      	cmp	r1, r3
 8006912:	d042      	beq.n	800699a <HAL_ADC_Start_DMA+0xfe>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006914:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006916:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800691a:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800691c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800691e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8006922:	d002      	beq.n	800692a <HAL_ADC_Start_DMA+0x8e>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006924:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006926:	f023 0306 	bic.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800692a:	65a3      	str	r3, [r4, #88]	; 0x58
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800692c:	3140      	adds	r1, #64	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800692e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006930:	4b1f      	ldr	r3, [pc, #124]	; (80069b0 <HAL_ADC_Start_DMA+0x114>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8006932:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006934:	63c3      	str	r3, [r0, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006936:	4b1f      	ldr	r3, [pc, #124]	; (80069b4 <HAL_ADC_Start_DMA+0x118>)
 8006938:	6403      	str	r3, [r0, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800693a:	4b1f      	ldr	r3, [pc, #124]	; (80069b8 <HAL_ADC_Start_DMA+0x11c>)
 800693c:	64c3      	str	r3, [r0, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800693e:	231c      	movs	r3, #28
 8006940:	f841 3c40 	str.w	r3, [r1, #-64]
        __HAL_UNLOCK(hadc);
 8006944:	2300      	movs	r3, #0
 8006946:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800694a:	f851 3c3c 	ldr.w	r3, [r1, #-60]
 800694e:	f043 0310 	orr.w	r3, r3, #16
 8006952:	f841 3c3c 	str.w	r3, [r1, #-60]
 8006956:	f851 3c34 	ldr.w	r3, [r1, #-52]
 800695a:	f023 0303 	bic.w	r3, r3, #3
 800695e:	4313      	orrs	r3, r2
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006960:	4632      	mov	r2, r6
 8006962:	f841 3c34 	str.w	r3, [r1, #-52]
 8006966:	463b      	mov	r3, r7
 8006968:	f000 fe8a 	bl	8007680 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800696c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800696e:	6893      	ldr	r3, [r2, #8]
 8006970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006974:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006978:	f043 0304 	orr.w	r3, r3, #4
 800697c:	6093      	str	r3, [r2, #8]
}
 800697e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006982:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <HAL_ADC_Start_DMA+0x110>)
 8006984:	e79c      	b.n	80068c0 <HAL_ADC_Start_DMA+0x24>
        __HAL_UNLOCK(hadc);
 8006986:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800698a:	e7f8      	b.n	800697e <HAL_ADC_Start_DMA+0xe2>
      __HAL_UNLOCK(hadc);
 800698c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
 800698e:	2001      	movs	r0, #1
      __HAL_UNLOCK(hadc);
 8006990:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8006994:	e7f3      	b.n	800697e <HAL_ADC_Start_DMA+0xe2>
    tmp_hal_status = HAL_BUSY;
 8006996:	2002      	movs	r0, #2
 8006998:	e7f1      	b.n	800697e <HAL_ADC_Start_DMA+0xe2>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800699a:	f1b8 0f00 	cmp.w	r8, #0
 800699e:	d0b9      	beq.n	8006914 <HAL_ADC_Start_DMA+0x78>
 80069a0:	e7bc      	b.n	800691c <HAL_ADC_Start_DMA+0x80>
 80069a2:	bf00      	nop
 80069a4:	40022000 	.word	0x40022000
 80069a8:	40022100 	.word	0x40022100
 80069ac:	40022300 	.word	0x40022300
 80069b0:	080062df 	.word	0x080062df
 80069b4:	080062d3 	.word	0x080062d3
 80069b8:	08006347 	.word	0x08006347

080069bc <ADC_Disable>:
{
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4604      	mov	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80069c0:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80069c2:	6883      	ldr	r3, [r0, #8]
 80069c4:	f003 0302 	and.w	r3, r3, #2
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80069c8:	f7ff fc79 	bl	80062be <LL_ADC_IsEnabled>
 80069cc:	b908      	cbnz	r0, 80069d2 <ADC_Disable+0x16>
  return HAL_OK;
 80069ce:	2000      	movs	r0, #0
}
 80069d0:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1fb      	bne.n	80069ce <ADC_Disable+0x12>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80069d6:	6822      	ldr	r2, [r4, #0]
 80069d8:	6893      	ldr	r3, [r2, #8]
 80069da:	f003 030d 	and.w	r3, r3, #13
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d115      	bne.n	8006a0e <ADC_Disable+0x52>
  MODIFY_REG(ADCx->CR,
 80069e2:	6893      	ldr	r3, [r2, #8]
 80069e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80069ec:	f043 0302 	orr.w	r3, r3, #2
 80069f0:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80069f2:	2303      	movs	r3, #3
 80069f4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80069f6:	f7ff fc33 	bl	8006260 <HAL_GetTick>
 80069fa:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	07db      	lsls	r3, r3, #31
 8006a02:	d5e4      	bpl.n	80069ce <ADC_Disable+0x12>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006a04:	f7ff fc2c 	bl	8006260 <HAL_GetTick>
 8006a08:	1b40      	subs	r0, r0, r5
 8006a0a:	2802      	cmp	r0, #2
 8006a0c:	d9f6      	bls.n	80069fc <ADC_Disable+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8006a10:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a12:	f043 0310 	orr.w	r3, r3, #16
 8006a16:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a1a:	f043 0301 	orr.w	r3, r3, #1
 8006a1e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a20:	e7d6      	b.n	80069d0 <ADC_Disable+0x14>

08006a22 <HAL_ADC_Stop_DMA>:
{
 8006a22:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8006a24:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8006a28:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d035      	beq.n	8006a9a <HAL_ADC_Stop_DMA+0x78>
 8006a2e:	2301      	movs	r3, #1
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006a30:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8006a32:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006a36:	f7ff fe75 	bl	8006724 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	b9e0      	cbnz	r0, 8006a78 <HAL_ADC_Stop_DMA+0x56>
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8006a3e:	6822      	ldr	r2, [r4, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006a40:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8006a42:	68d3      	ldr	r3, [r2, #12]
 8006a44:	f023 0303 	bic.w	r3, r3, #3
 8006a48:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006a4a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d107      	bne.n	8006a62 <HAL_ADC_Stop_DMA+0x40>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006a52:	f000 ff33 	bl	80078bc <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8006a56:	4605      	mov	r5, r0
 8006a58:	b118      	cbz	r0, 8006a62 <HAL_ADC_Stop_DMA+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006a5a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a60:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006a62:	6822      	ldr	r2, [r4, #0]
      tmp_hal_status = ADC_Disable(hadc);
 8006a64:	4620      	mov	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006a66:	6853      	ldr	r3, [r2, #4]
 8006a68:	f023 0310 	bic.w	r3, r3, #16
 8006a6c:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8006a6e:	b945      	cbnz	r5, 8006a82 <HAL_ADC_Stop_DMA+0x60>
      tmp_hal_status = ADC_Disable(hadc);
 8006a70:	f7ff ffa4 	bl	80069bc <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8006a74:	4605      	mov	r5, r0
 8006a76:	b138      	cbz	r0, 8006a88 <HAL_ADC_Stop_DMA+0x66>
  __HAL_UNLOCK(hadc);
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006a7e:	4628      	mov	r0, r5
 8006a80:	bd38      	pop	{r3, r4, r5, pc}
      (void)ADC_Disable(hadc);
 8006a82:	f7ff ff9b 	bl	80069bc <ADC_Disable>
 8006a86:	e7f7      	b.n	8006a78 <HAL_ADC_Stop_DMA+0x56>
      ADC_STATE_CLR_SET(hadc->State,
 8006a88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006a8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a8e:	f023 0301 	bic.w	r3, r3, #1
 8006a92:	f043 0301 	orr.w	r3, r3, #1
 8006a96:	6563      	str	r3, [r4, #84]	; 0x54
 8006a98:	e7ee      	b.n	8006a78 <HAL_ADC_Stop_DMA+0x56>
  __HAL_LOCK(hadc);
 8006a9a:	2502      	movs	r5, #2
 8006a9c:	e7ef      	b.n	8006a7e <HAL_ADC_Stop_DMA+0x5c>
	...

08006aa0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006aa0:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006aa2:	4a44      	ldr	r2, [pc, #272]	; (8006bb4 <ADC_ConfigureBoostMode+0x114>)
{
 8006aa4:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006aa6:	6803      	ldr	r3, [r0, #0]
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <ADC_ConfigureBoostMode+0x14>
 8006aac:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d118      	bne.n	8006ae6 <ADC_ConfigureBoostMode+0x46>
 8006ab4:	4b40      	ldr	r3, [pc, #256]	; (8006bb8 <ADC_ConfigureBoostMode+0x118>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8006abc:	bf14      	ite	ne
 8006abe:	2301      	movne	r3, #1
 8006ac0:	2300      	moveq	r3, #0
 8006ac2:	b30b      	cbz	r3, 8006b08 <ADC_ConfigureBoostMode+0x68>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006ac4:	f002 fe7a 	bl	80097bc <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006ac8:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8006aca:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8006acc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ad0:	d005      	beq.n	8006ade <ADC_ConfigureBoostMode+0x3e>
 8006ad2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ad6:	d008      	beq.n	8006aea <ADC_ConfigureBoostMode+0x4a>
 8006ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006adc:	d106      	bne.n	8006aec <ADC_ConfigureBoostMode+0x4c>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006ade:	0c1b      	lsrs	r3, r3, #16
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006ae0:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8006ae4:	e002      	b.n	8006aec <ADC_ConfigureBoostMode+0x4c>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006ae6:	4b35      	ldr	r3, [pc, #212]	; (8006bbc <ADC_ConfigureBoostMode+0x11c>)
 8006ae8:	e7e5      	b.n	8006ab6 <ADC_ConfigureBoostMode+0x16>
        freq /= 4UL;
 8006aea:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006aec:	f7ff fbd0 	bl	8006290 <HAL_GetREVID>
 8006af0:	f241 0303 	movw	r3, #4099	; 0x1003
 8006af4:	4298      	cmp	r0, r3
 8006af6:	682b      	ldr	r3, [r5, #0]
 8006af8:	d841      	bhi.n	8006b7e <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8006afa:	4a31      	ldr	r2, [pc, #196]	; (8006bc0 <ADC_ConfigureBoostMode+0x120>)
 8006afc:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006afe:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 8006b00:	d939      	bls.n	8006b76 <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b06:	e038      	b.n	8006b7a <ADC_ConfigureBoostMode+0xda>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006b08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006b0c:	f003 fe18 	bl	800a740 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006b10:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006b12:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8006b14:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006b18:	d00a      	beq.n	8006b30 <ADC_ConfigureBoostMode+0x90>
 8006b1a:	d812      	bhi.n	8006b42 <ADC_ConfigureBoostMode+0xa2>
 8006b1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b20:	d006      	beq.n	8006b30 <ADC_ConfigureBoostMode+0x90>
 8006b22:	d808      	bhi.n	8006b36 <ADC_ConfigureBoostMode+0x96>
 8006b24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b28:	d002      	beq.n	8006b30 <ADC_ConfigureBoostMode+0x90>
 8006b2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b2e:	d1dd      	bne.n	8006aec <ADC_ConfigureBoostMode+0x4c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006b30:	0c9b      	lsrs	r3, r3, #18
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	e7d4      	b.n	8006ae0 <ADC_ConfigureBoostMode+0x40>
    switch (hadc->Init.ClockPrescaler)
 8006b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b3a:	d0f9      	beq.n	8006b30 <ADC_ConfigureBoostMode+0x90>
 8006b3c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006b40:	e7f5      	b.n	8006b2e <ADC_ConfigureBoostMode+0x8e>
 8006b42:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006b46:	d012      	beq.n	8006b6e <ADC_ConfigureBoostMode+0xce>
 8006b48:	d807      	bhi.n	8006b5a <ADC_ConfigureBoostMode+0xba>
 8006b4a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006b4e:	d00c      	beq.n	8006b6a <ADC_ConfigureBoostMode+0xca>
 8006b50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b54:	d1ca      	bne.n	8006aec <ADC_ConfigureBoostMode+0x4c>
        freq /= 32UL;
 8006b56:	0944      	lsrs	r4, r0, #5
        break;
 8006b58:	e7c8      	b.n	8006aec <ADC_ConfigureBoostMode+0x4c>
    switch (hadc->Init.ClockPrescaler)
 8006b5a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006b5e:	d008      	beq.n	8006b72 <ADC_ConfigureBoostMode+0xd2>
 8006b60:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006b64:	d1c2      	bne.n	8006aec <ADC_ConfigureBoostMode+0x4c>
        freq /= 256UL;
 8006b66:	0a04      	lsrs	r4, r0, #8
        break;
 8006b68:	e7c0      	b.n	8006aec <ADC_ConfigureBoostMode+0x4c>
        freq /= 16UL;
 8006b6a:	0904      	lsrs	r4, r0, #4
        break;
 8006b6c:	e7be      	b.n	8006aec <ADC_ConfigureBoostMode+0x4c>
        freq /= 64UL;
 8006b6e:	0984      	lsrs	r4, r0, #6
        break;
 8006b70:	e7bc      	b.n	8006aec <ADC_ConfigureBoostMode+0x4c>
        freq /= 128UL;
 8006b72:	09c4      	lsrs	r4, r0, #7
        break;
 8006b74:	e7ba      	b.n	8006aec <ADC_ConfigureBoostMode+0x4c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006b76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006b7a:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006b7c:	bd38      	pop	{r3, r4, r5, pc}
    freq /= 2U; /* divider by 2 for Rev.V */
 8006b7e:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8006b80:	4a10      	ldr	r2, [pc, #64]	; (8006bc4 <ADC_ConfigureBoostMode+0x124>)
 8006b82:	4294      	cmp	r4, r2
 8006b84:	d803      	bhi.n	8006b8e <ADC_ConfigureBoostMode+0xee>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b8c:	e7f5      	b.n	8006b7a <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 8006b8e:	4a0e      	ldr	r2, [pc, #56]	; (8006bc8 <ADC_ConfigureBoostMode+0x128>)
 8006b90:	4294      	cmp	r4, r2
 8006b92:	d803      	bhi.n	8006b9c <ADC_ConfigureBoostMode+0xfc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006b94:	689a      	ldr	r2, [r3, #8]
 8006b96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b9a:	e7b2      	b.n	8006b02 <ADC_ConfigureBoostMode+0x62>
    else if (freq <= 25000000UL)
 8006b9c:	4a0b      	ldr	r2, [pc, #44]	; (8006bcc <ADC_ConfigureBoostMode+0x12c>)
 8006b9e:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006ba0:	689a      	ldr	r2, [r3, #8]
 8006ba2:	bf96      	itet	ls
 8006ba4:	f422 7240 	bicls.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006ba8:	f442 7240 	orrhi.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006bac:	f442 7200 	orrls.w	r2, r2, #512	; 0x200
 8006bb0:	e7e3      	b.n	8006b7a <ADC_ConfigureBoostMode+0xda>
 8006bb2:	bf00      	nop
 8006bb4:	40022000 	.word	0x40022000
 8006bb8:	40022300 	.word	0x40022300
 8006bbc:	58026300 	.word	0x58026300
 8006bc0:	01312d00 	.word	0x01312d00
 8006bc4:	005f5e10 	.word	0x005f5e10
 8006bc8:	00bebc20 	.word	0x00bebc20
 8006bcc:	017d7840 	.word	0x017d7840

08006bd0 <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 8006bd0:	2300      	movs	r3, #0
{
 8006bd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (hadc == NULL)
 8006bd4:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8006bd6:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	f000 80c8 	beq.w	8006d6e <HAL_ADC_Init+0x19e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006bde:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8006be0:	b925      	cbnz	r5, 8006bec <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 8006be2:	f7fc fbc9 	bl	8003378 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006be6:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8006be8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006bec:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006bee:	6883      	ldr	r3, [r0, #8]
 8006bf0:	009d      	lsls	r5, r3, #2
 8006bf2:	d505      	bpl.n	8006c00 <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006bf4:	6883      	ldr	r3, [r0, #8]
 8006bf6:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006bfa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006bfe:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006c00:	6883      	ldr	r3, [r0, #8]
 8006c02:	00d9      	lsls	r1, r3, #3
 8006c04:	d504      	bpl.n	8006c10 <HAL_ADC_Init+0x40>
 8006c06:	6883      	ldr	r3, [r0, #8]
 8006c08:	00da      	lsls	r2, r3, #3
 8006c0a:	d515      	bpl.n	8006c38 <HAL_ADC_Init+0x68>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c0c:	2500      	movs	r5, #0
 8006c0e:	e01c      	b.n	8006c4a <HAL_ADC_Init+0x7a>
  MODIFY_REG(ADCx->CR,
 8006c10:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006c12:	4a6d      	ldr	r2, [pc, #436]	; (8006dc8 <HAL_ADC_Init+0x1f8>)
 8006c14:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006c18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c20:	6083      	str	r3, [r0, #8]
 8006c22:	4b6a      	ldr	r3, [pc, #424]	; (8006dcc <HAL_ADC_Init+0x1fc>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8006c2a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006c2c:	9b01      	ldr	r3, [sp, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0e9      	beq.n	8006c06 <HAL_ADC_Init+0x36>
      wait_loop_index--;
 8006c32:	9b01      	ldr	r3, [sp, #4]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	e7f8      	b.n	8006c2a <HAL_ADC_Init+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c38:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006c3a:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c3c:	f043 0310 	orr.w	r3, r3, #16
 8006c40:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c44:	f043 0301 	orr.w	r3, r3, #1
 8006c48:	65a3      	str	r3, [r4, #88]	; 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006c4a:	f7ff fb3c 	bl	80062c6 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006c4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c50:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8006c54:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006c56:	f040 8087 	bne.w	8006d68 <HAL_ADC_Init+0x198>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	f040 8084 	bne.w	8006d68 <HAL_ADC_Init+0x198>
    ADC_STATE_CLR_SET(hadc->State,
 8006c60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c64:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8006c66:	f043 0302 	orr.w	r3, r3, #2
 8006c6a:	6563      	str	r3, [r4, #84]	; 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c6c:	f7ff fb27 	bl	80062be <LL_ADC_IsEnabled>
 8006c70:	bb30      	cbnz	r0, 8006cc0 <HAL_ADC_Init+0xf0>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	4a56      	ldr	r2, [pc, #344]	; (8006dd0 <HAL_ADC_Init+0x200>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d003      	beq.n	8006c82 <HAL_ADC_Init+0xb2>
 8006c7a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d15f      	bne.n	8006d42 <HAL_ADC_Init+0x172>
 8006c82:	4853      	ldr	r0, [pc, #332]	; (8006dd0 <HAL_ADC_Init+0x200>)
 8006c84:	f7ff fb1b 	bl	80062be <LL_ADC_IsEnabled>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	4852      	ldr	r0, [pc, #328]	; (8006dd4 <HAL_ADC_Init+0x204>)
 8006c8c:	f7ff fb17 	bl	80062be <LL_ADC_IsEnabled>
 8006c90:	4303      	orrs	r3, r0
 8006c92:	bf0c      	ite	eq
 8006c94:	2001      	moveq	r0, #1
 8006c96:	2000      	movne	r0, #0
 8006c98:	b190      	cbz	r0, 8006cc0 <HAL_ADC_Init+0xf0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006c9a:	6822      	ldr	r2, [r4, #0]
 8006c9c:	4b4c      	ldr	r3, [pc, #304]	; (8006dd0 <HAL_ADC_Init+0x200>)
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d056      	beq.n	8006d50 <HAL_ADC_Init+0x180>
 8006ca2:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8006ca6:	484b      	ldr	r0, [pc, #300]	; (8006dd4 <HAL_ADC_Init+0x204>)
 8006ca8:	494b      	ldr	r1, [pc, #300]	; (8006dd8 <HAL_ADC_Init+0x208>)
 8006caa:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 8006cae:	4282      	cmp	r2, r0
 8006cb0:	bf08      	it	eq
 8006cb2:	460b      	moveq	r3, r1
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006cb4:	689a      	ldr	r2, [r3, #8]
 8006cb6:	6861      	ldr	r1, [r4, #4]
 8006cb8:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	609a      	str	r2, [r3, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006cc0:	f7ff fae6 	bl	8006290 <HAL_GetREVID>
 8006cc4:	f241 0303 	movw	r3, #4099	; 0x1003
 8006cc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006cca:	4298      	cmp	r0, r3
 8006ccc:	7f21      	ldrb	r1, [r4, #28]
 8006cce:	7d60      	ldrb	r0, [r4, #21]
 8006cd0:	68a3      	ldr	r3, [r4, #8]
 8006cd2:	d93f      	bls.n	8006d54 <HAL_ADC_Init+0x184>
 8006cd4:	2b10      	cmp	r3, #16
 8006cd6:	d13d      	bne.n	8006d54 <HAL_ADC_Init+0x184>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006cd8:	f042 031c 	orr.w	r3, r2, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006cdc:	2901      	cmp	r1, #1
                  hadc->Init.Overrun                                                    |
 8006cde:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006ce2:	bf08      	it	eq
 8006ce4:	6a22      	ldreq	r2, [r4, #32]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006ce6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006cea:	bf04      	itt	eq
 8006cec:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8006cf0:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006cf4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006cf6:	b122      	cbz	r2, 8006d02 <HAL_ADC_Init+0x132>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006cf8:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006cfc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006cfe:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006d00:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006d02:	6820      	ldr	r0, [r4, #0]
 8006d04:	4a35      	ldr	r2, [pc, #212]	; (8006ddc <HAL_ADC_Init+0x20c>)
 8006d06:	68c1      	ldr	r1, [r0, #12]
 8006d08:	400a      	ands	r2, r1
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60c3      	str	r3, [r0, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d0e:	f7ff fada 	bl	80062c6 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006d12:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006d14:	6893      	ldr	r3, [r2, #8]
 8006d16:	071b      	lsls	r3, r3, #28
 8006d18:	d52b      	bpl.n	8006d72 <HAL_ADC_Init+0x1a2>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006d1a:	68e3      	ldr	r3, [r4, #12]
 8006d1c:	6822      	ldr	r2, [r4, #0]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d11e      	bne.n	8006d60 <HAL_ADC_Init+0x190>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006d22:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006d24:	69a3      	ldr	r3, [r4, #24]
 8006d26:	f021 010f 	bic.w	r1, r1, #15
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006d2e:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006d30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006d32:	f023 0303 	bic.w	r3, r3, #3
 8006d36:	f043 0301 	orr.w	r3, r3, #1
 8006d3a:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	b003      	add	sp, #12
 8006d40:	bd30      	pop	{r4, r5, pc}
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d42:	4827      	ldr	r0, [pc, #156]	; (8006de0 <HAL_ADC_Init+0x210>)
 8006d44:	f7ff fabb 	bl	80062be <LL_ADC_IsEnabled>
 8006d48:	fab0 f080 	clz	r0, r0
 8006d4c:	0940      	lsrs	r0, r0, #5
 8006d4e:	e7a3      	b.n	8006c98 <HAL_ADC_Init+0xc8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006d50:	4b21      	ldr	r3, [pc, #132]	; (8006dd8 <HAL_ADC_Init+0x208>)
 8006d52:	e7af      	b.n	8006cb4 <HAL_ADC_Init+0xe4>
                  hadc->Init.Overrun                                                    |
 8006d54:	4313      	orrs	r3, r2
 8006d56:	e7c1      	b.n	8006cdc <HAL_ADC_Init+0x10c>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006d58:	6913      	ldr	r3, [r2, #16]
 8006d5a:	f023 0301 	bic.w	r3, r3, #1
 8006d5e:	e028      	b.n	8006db2 <HAL_ADC_Init+0x1e2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006d60:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006d62:	f023 030f 	bic.w	r3, r3, #15
 8006d66:	e7e2      	b.n	8006d2e <HAL_ADC_Init+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d68:	f043 0310 	orr.w	r3, r3, #16
 8006d6c:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8006d6e:	2501      	movs	r5, #1
 8006d70:	e7e4      	b.n	8006d3c <HAL_ADC_Init+0x16c>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d1d1      	bne.n	8006d1a <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006d76:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006d78:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 8006d86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8006d8c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d1e1      	bne.n	8006d58 <HAL_ADC_Init+0x188>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006d94:	6910      	ldr	r0, [r2, #16]
 8006d96:	e9d4 3110 	ldrd	r3, r1, [r4, #64]	; 0x40
 8006d9a:	430b      	orrs	r3, r1
 8006d9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006d9e:	f043 0301 	orr.w	r3, r3, #1
 8006da2:	430b      	orrs	r3, r1
 8006da4:	490f      	ldr	r1, [pc, #60]	; (8006de4 <HAL_ADC_Init+0x214>)
 8006da6:	4001      	ands	r1, r0
 8006da8:	430b      	orrs	r3, r1
 8006daa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006dac:	3901      	subs	r1, #1
 8006dae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006db2:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8006db4:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006db6:	6913      	ldr	r3, [r2, #16]
 8006db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006dbe:	430b      	orrs	r3, r1
 8006dc0:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8006dc2:	f7ff fe6d 	bl	8006aa0 <ADC_ConfigureBoostMode>
 8006dc6:	e7a8      	b.n	8006d1a <HAL_ADC_Init+0x14a>
 8006dc8:	00030d40 	.word	0x00030d40
 8006dcc:	24000000 	.word	0x24000000
 8006dd0:	40022000 	.word	0x40022000
 8006dd4:	40022100 	.word	0x40022100
 8006dd8:	40022300 	.word	0x40022300
 8006ddc:	fff0c003 	.word	0xfff0c003
 8006de0:	58026000 	.word	0x58026000
 8006de4:	fc00f81e 	.word	0xfc00f81e

08006de8 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006de8:	6880      	ldr	r0, [r0, #8]
}
 8006dea:	f000 0001 	and.w	r0, r0, #1
 8006dee:	4770      	bx	lr

08006df0 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006df0:	6880      	ldr	r0, [r0, #8]
}
 8006df2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8006df6:	4770      	bx	lr

08006df8 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006df8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8006dfc:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8006dfe:	2a01      	cmp	r2, #1
{
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	b09a      	sub	sp, #104	; 0x68
  __HAL_LOCK(hadc);
 8006e04:	f000 808b 	beq.w	8006f1e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006e0e:	4a45      	ldr	r2, [pc, #276]	; (8006f24 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8006e10:	6800      	ldr	r0, [r0, #0]
 8006e12:	4290      	cmp	r0, r2
 8006e14:	bf0c      	ite	eq
 8006e16:	f502 7280 	addeq.w	r2, r2, #256	; 0x100
 8006e1a:	2200      	movne	r2, #0
 8006e1c:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8006e1e:	9801      	ldr	r0, [sp, #4]
 8006e20:	b940      	cbnz	r0, 8006e34 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e22:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006e24:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006e28:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e2a:	f042 0220 	orr.w	r2, r2, #32
 8006e2e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8006e30:	b01a      	add	sp, #104	; 0x68
 8006e32:	bd70      	pop	{r4, r5, r6, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006e34:	f7ff ffdc 	bl	8006df0 <LL_ADC_REG_IsConversionOngoing>
 8006e38:	4602      	mov	r2, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	f7ff ffd8 	bl	8006df0 <LL_ADC_REG_IsConversionOngoing>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d166      	bne.n	8006f12 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006e44:	2a00      	cmp	r2, #0
 8006e46:	d164      	bne.n	8006f12 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	4a36      	ldr	r2, [pc, #216]	; (8006f24 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8006e4c:	4290      	cmp	r0, r2
 8006e4e:	d029      	beq.n	8006ea4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006e50:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8006e54:	4d34      	ldr	r5, [pc, #208]	; (8006f28 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8006e56:	4c35      	ldr	r4, [pc, #212]	; (8006f2c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8006e58:	f502 4286 	add.w	r2, r2, #17152	; 0x4300
 8006e5c:	42a8      	cmp	r0, r5
 8006e5e:	bf08      	it	eq
 8006e60:	4622      	moveq	r2, r4
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006e62:	680c      	ldr	r4, [r1, #0]
 8006e64:	4d2f      	ldr	r5, [pc, #188]	; (8006f24 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8006e66:	2c00      	cmp	r4, #0
 8006e68:	d030      	beq.n	8006ecc <HAL_ADCEx_MultiModeConfigChannel+0xd4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006e6a:	6894      	ldr	r4, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e6c:	42a8      	cmp	r0, r5
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006e6e:	684e      	ldr	r6, [r1, #4]
 8006e70:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
 8006e74:	ea44 0406 	orr.w	r4, r4, r6
 8006e78:	6094      	str	r4, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e7a:	d002      	beq.n	8006e82 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8006e7c:	4c2a      	ldr	r4, [pc, #168]	; (8006f28 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8006e7e:	42a0      	cmp	r0, r4
 8006e80:	d112      	bne.n	8006ea8 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
 8006e82:	4828      	ldr	r0, [pc, #160]	; (8006f24 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8006e84:	f7ff ffb0 	bl	8006de8 <LL_ADC_IsEnabled>
 8006e88:	4604      	mov	r4, r0
 8006e8a:	4827      	ldr	r0, [pc, #156]	; (8006f28 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8006e8c:	f7ff ffac 	bl	8006de8 <LL_ADC_IsEnabled>
 8006e90:	4320      	orrs	r0, r4
 8006e92:	bf0c      	ite	eq
 8006e94:	2001      	moveq	r0, #1
 8006e96:	2000      	movne	r0, #0
 8006e98:	b968      	cbnz	r0, 8006eb6 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e9a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return tmp_hal_status;
 8006ea2:	e7c5      	b.n	8006e30 <HAL_ADCEx_MultiModeConfigChannel+0x38>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006ea4:	4a21      	ldr	r2, [pc, #132]	; (8006f2c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8006ea6:	e7dc      	b.n	8006e62 <HAL_ADCEx_MultiModeConfigChannel+0x6a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ea8:	4821      	ldr	r0, [pc, #132]	; (8006f30 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8006eaa:	f7ff ff9d 	bl	8006de8 <LL_ADC_IsEnabled>
 8006eae:	fab0 f080 	clz	r0, r0
 8006eb2:	0940      	lsrs	r0, r0, #5
 8006eb4:	e7f0      	b.n	8006e98 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
        MODIFY_REG(tmpADC_Common->CCR,
 8006eb6:	6808      	ldr	r0, [r1, #0]
 8006eb8:	6894      	ldr	r4, [r2, #8]
 8006eba:	6889      	ldr	r1, [r1, #8]
 8006ebc:	4301      	orrs	r1, r0
 8006ebe:	f424 6071 	bic.w	r0, r4, #3856	; 0xf10
 8006ec2:	f020 000f 	bic.w	r0, r0, #15
 8006ec6:	4301      	orrs	r1, r0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006ec8:	6091      	str	r1, [r2, #8]
 8006eca:	e7e6      	b.n	8006e9a <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006ecc:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ece:	42a8      	cmp	r0, r5
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006ed0:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8006ed4:	6091      	str	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ed6:	d002      	beq.n	8006ede <HAL_ADCEx_MultiModeConfigChannel+0xe6>
 8006ed8:	4913      	ldr	r1, [pc, #76]	; (8006f28 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8006eda:	4288      	cmp	r0, r1
 8006edc:	d112      	bne.n	8006f04 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
 8006ede:	4811      	ldr	r0, [pc, #68]	; (8006f24 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8006ee0:	f7ff ff82 	bl	8006de8 <LL_ADC_IsEnabled>
 8006ee4:	4601      	mov	r1, r0
 8006ee6:	4810      	ldr	r0, [pc, #64]	; (8006f28 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8006ee8:	f7ff ff7e 	bl	8006de8 <LL_ADC_IsEnabled>
 8006eec:	4301      	orrs	r1, r0
 8006eee:	bf0c      	ite	eq
 8006ef0:	2001      	moveq	r0, #1
 8006ef2:	2000      	movne	r0, #0
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d0d0      	beq.n	8006e9a <HAL_ADCEx_MultiModeConfigChannel+0xa2>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006ef8:	6891      	ldr	r1, [r2, #8]
 8006efa:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8006efe:	f021 010f 	bic.w	r1, r1, #15
 8006f02:	e7e1      	b.n	8006ec8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f04:	480a      	ldr	r0, [pc, #40]	; (8006f30 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8006f06:	f7ff ff6f 	bl	8006de8 <LL_ADC_IsEnabled>
 8006f0a:	fab0 f080 	clz	r0, r0
 8006f0e:	0940      	lsrs	r0, r0, #5
 8006f10:	e7f0      	b.n	8006ef4 <HAL_ADCEx_MultiModeConfigChannel+0xfc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006f14:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f16:	f042 0220 	orr.w	r2, r2, #32
 8006f1a:	655a      	str	r2, [r3, #84]	; 0x54
 8006f1c:	e7be      	b.n	8006e9c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
  __HAL_LOCK(hadc);
 8006f1e:	2002      	movs	r0, #2
 8006f20:	e786      	b.n	8006e30 <HAL_ADCEx_MultiModeConfigChannel+0x38>
 8006f22:	bf00      	nop
 8006f24:	40022000 	.word	0x40022000
 8006f28:	40022100 	.word	0x40022100
 8006f2c:	40022300 	.word	0x40022300
 8006f30:	58026000 	.word	0x58026000

08006f34 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f34:	4a07      	ldr	r2, [pc, #28]	; (8006f54 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f36:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f38:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f3a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006f42:	041b      	lsls	r3, r3, #16
 8006f44:	0c1b      	lsrs	r3, r3, #16
 8006f46:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8006f4e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8006f50:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006f52:	4770      	bx	lr
 8006f54:	e000ed00 	.word	0xe000ed00

08006f58 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f58:	4b16      	ldr	r3, [pc, #88]	; (8006fb4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f5a:	b570      	push	{r4, r5, r6, lr}
 8006f5c:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f5e:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f62:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f66:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f6a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f6c:	2d04      	cmp	r5, #4
 8006f6e:	bf28      	it	cs
 8006f70:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f72:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f74:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f78:	bf8c      	ite	hi
 8006f7a:	3c03      	subhi	r4, #3
 8006f7c:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8006f7e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f80:	ea21 0303 	bic.w	r3, r1, r3
 8006f84:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f88:	fa06 f404 	lsl.w	r4, r6, r4
 8006f8c:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f90:	ea43 0304 	orr.w	r3, r3, r4
 8006f94:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006f98:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8006f9a:	db06      	blt.n	8006faa <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f9c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006fa0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006fa4:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006fa8:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006faa:	f000 000f 	and.w	r0, r0, #15
 8006fae:	4a02      	ldr	r2, [pc, #8]	; (8006fb8 <HAL_NVIC_SetPriority+0x60>)
 8006fb0:	5413      	strb	r3, [r2, r0]
 8006fb2:	e7f9      	b.n	8006fa8 <HAL_NVIC_SetPriority+0x50>
 8006fb4:	e000ed00 	.word	0xe000ed00
 8006fb8:	e000ed14 	.word	0xe000ed14

08006fbc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	db08      	blt.n	8006fd2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fc0:	0942      	lsrs	r2, r0, #5
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	f000 001f 	and.w	r0, r0, #31
 8006fc8:	fa03 f000 	lsl.w	r0, r3, r0
 8006fcc:	4b01      	ldr	r3, [pc, #4]	; (8006fd4 <HAL_NVIC_EnableIRQ+0x18>)
 8006fce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006fd2:	4770      	bx	lr
 8006fd4:	e000e100 	.word	0xe000e100

08006fd8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fda:	4d5c      	ldr	r5, [pc, #368]	; (800714c <DMA_SetConfig+0x174>)
 8006fdc:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fde:	6d87      	ldr	r7, [r0, #88]	; 0x58
 8006fe0:	46ac      	mov	ip, r5
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fe2:	42ac      	cmp	r4, r5
 8006fe4:	d045      	beq.n	8007072 <DMA_SetConfig+0x9a>
 8006fe6:	4e5a      	ldr	r6, [pc, #360]	; (8007150 <DMA_SetConfig+0x178>)
 8006fe8:	42b4      	cmp	r4, r6
 8006fea:	d042      	beq.n	8007072 <DMA_SetConfig+0x9a>
 8006fec:	3618      	adds	r6, #24
 8006fee:	42b4      	cmp	r4, r6
 8006ff0:	d03f      	beq.n	8007072 <DMA_SetConfig+0x9a>
 8006ff2:	3618      	adds	r6, #24
 8006ff4:	42b4      	cmp	r4, r6
 8006ff6:	d03c      	beq.n	8007072 <DMA_SetConfig+0x9a>
 8006ff8:	3618      	adds	r6, #24
 8006ffa:	42b4      	cmp	r4, r6
 8006ffc:	d039      	beq.n	8007072 <DMA_SetConfig+0x9a>
 8006ffe:	3618      	adds	r6, #24
 8007000:	42b4      	cmp	r4, r6
 8007002:	d036      	beq.n	8007072 <DMA_SetConfig+0x9a>
 8007004:	3618      	adds	r6, #24
 8007006:	42b4      	cmp	r4, r6
 8007008:	d033      	beq.n	8007072 <DMA_SetConfig+0x9a>
 800700a:	3618      	adds	r6, #24
 800700c:	42b4      	cmp	r4, r6
 800700e:	d030      	beq.n	8007072 <DMA_SetConfig+0x9a>
 8007010:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8007014:	42b4      	cmp	r4, r6
 8007016:	d02c      	beq.n	8007072 <DMA_SetConfig+0x9a>
 8007018:	3618      	adds	r6, #24
 800701a:	42b4      	cmp	r4, r6
 800701c:	d029      	beq.n	8007072 <DMA_SetConfig+0x9a>
 800701e:	3618      	adds	r6, #24
 8007020:	42b4      	cmp	r4, r6
 8007022:	d026      	beq.n	8007072 <DMA_SetConfig+0x9a>
 8007024:	3618      	adds	r6, #24
 8007026:	42b4      	cmp	r4, r6
 8007028:	d023      	beq.n	8007072 <DMA_SetConfig+0x9a>
 800702a:	3618      	adds	r6, #24
 800702c:	42b4      	cmp	r4, r6
 800702e:	d020      	beq.n	8007072 <DMA_SetConfig+0x9a>
 8007030:	3618      	adds	r6, #24
 8007032:	42b4      	cmp	r4, r6
 8007034:	d01d      	beq.n	8007072 <DMA_SetConfig+0x9a>
 8007036:	3618      	adds	r6, #24
 8007038:	42b4      	cmp	r4, r6
 800703a:	d01a      	beq.n	8007072 <DMA_SetConfig+0x9a>
 800703c:	3618      	adds	r6, #24
 800703e:	42b4      	cmp	r4, r6
 8007040:	d017      	beq.n	8007072 <DMA_SetConfig+0x9a>
 8007042:	4e44      	ldr	r6, [pc, #272]	; (8007154 <DMA_SetConfig+0x17c>)
 8007044:	42b4      	cmp	r4, r6
 8007046:	d014      	beq.n	8007072 <DMA_SetConfig+0x9a>
 8007048:	3614      	adds	r6, #20
 800704a:	42b4      	cmp	r4, r6
 800704c:	d011      	beq.n	8007072 <DMA_SetConfig+0x9a>
 800704e:	3614      	adds	r6, #20
 8007050:	42b4      	cmp	r4, r6
 8007052:	d00e      	beq.n	8007072 <DMA_SetConfig+0x9a>
 8007054:	3614      	adds	r6, #20
 8007056:	42b4      	cmp	r4, r6
 8007058:	d00b      	beq.n	8007072 <DMA_SetConfig+0x9a>
 800705a:	3614      	adds	r6, #20
 800705c:	42b4      	cmp	r4, r6
 800705e:	d008      	beq.n	8007072 <DMA_SetConfig+0x9a>
 8007060:	3614      	adds	r6, #20
 8007062:	42b4      	cmp	r4, r6
 8007064:	d005      	beq.n	8007072 <DMA_SetConfig+0x9a>
 8007066:	3614      	adds	r6, #20
 8007068:	42b4      	cmp	r4, r6
 800706a:	d002      	beq.n	8007072 <DMA_SetConfig+0x9a>
 800706c:	3614      	adds	r6, #20
 800706e:	42b4      	cmp	r4, r6
 8007070:	d167      	bne.n	8007142 <DMA_SetConfig+0x16a>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007072:	e9d0 6519 	ldrd	r6, r5, [r0, #100]	; 0x64
 8007076:	6075      	str	r5, [r6, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007078:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 800707a:	b116      	cbz	r6, 8007082 <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800707c:	e9d0 651c 	ldrd	r6, r5, [r0, #112]	; 0x70
 8007080:	6075      	str	r5, [r6, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007082:	4564      	cmp	r4, ip
 8007084:	d037      	beq.n	80070f6 <DMA_SetConfig+0x11e>
 8007086:	4d32      	ldr	r5, [pc, #200]	; (8007150 <DMA_SetConfig+0x178>)
 8007088:	42ac      	cmp	r4, r5
 800708a:	d034      	beq.n	80070f6 <DMA_SetConfig+0x11e>
 800708c:	3518      	adds	r5, #24
 800708e:	42ac      	cmp	r4, r5
 8007090:	d031      	beq.n	80070f6 <DMA_SetConfig+0x11e>
 8007092:	3518      	adds	r5, #24
 8007094:	42ac      	cmp	r4, r5
 8007096:	d02e      	beq.n	80070f6 <DMA_SetConfig+0x11e>
 8007098:	3518      	adds	r5, #24
 800709a:	42ac      	cmp	r4, r5
 800709c:	d02b      	beq.n	80070f6 <DMA_SetConfig+0x11e>
 800709e:	3518      	adds	r5, #24
 80070a0:	42ac      	cmp	r4, r5
 80070a2:	d028      	beq.n	80070f6 <DMA_SetConfig+0x11e>
 80070a4:	3518      	adds	r5, #24
 80070a6:	42ac      	cmp	r4, r5
 80070a8:	d025      	beq.n	80070f6 <DMA_SetConfig+0x11e>
 80070aa:	3518      	adds	r5, #24
 80070ac:	42ac      	cmp	r4, r5
 80070ae:	d022      	beq.n	80070f6 <DMA_SetConfig+0x11e>
 80070b0:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80070b4:	42ac      	cmp	r4, r5
 80070b6:	d01e      	beq.n	80070f6 <DMA_SetConfig+0x11e>
 80070b8:	3518      	adds	r5, #24
 80070ba:	42ac      	cmp	r4, r5
 80070bc:	d01b      	beq.n	80070f6 <DMA_SetConfig+0x11e>
 80070be:	3518      	adds	r5, #24
 80070c0:	42ac      	cmp	r4, r5
 80070c2:	d018      	beq.n	80070f6 <DMA_SetConfig+0x11e>
 80070c4:	3518      	adds	r5, #24
 80070c6:	42ac      	cmp	r4, r5
 80070c8:	d015      	beq.n	80070f6 <DMA_SetConfig+0x11e>
 80070ca:	3518      	adds	r5, #24
 80070cc:	42ac      	cmp	r4, r5
 80070ce:	d012      	beq.n	80070f6 <DMA_SetConfig+0x11e>
 80070d0:	3518      	adds	r5, #24
 80070d2:	42ac      	cmp	r4, r5
 80070d4:	d00f      	beq.n	80070f6 <DMA_SetConfig+0x11e>
 80070d6:	3518      	adds	r5, #24
 80070d8:	42ac      	cmp	r4, r5
 80070da:	d00c      	beq.n	80070f6 <DMA_SetConfig+0x11e>
 80070dc:	3518      	adds	r5, #24
 80070de:	42ac      	cmp	r4, r5
 80070e0:	d009      	beq.n	80070f6 <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80070e2:	4d1c      	ldr	r5, [pc, #112]	; (8007154 <DMA_SetConfig+0x17c>)
 80070e4:	42ac      	cmp	r4, r5
 80070e6:	d117      	bne.n	8007118 <DMA_SetConfig+0x140>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070e8:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80070ea:	f005 061f 	and.w	r6, r5, #31
 80070ee:	2501      	movs	r5, #1
 80070f0:	40b5      	lsls	r5, r6
 80070f2:	607d      	str	r5, [r7, #4]
 80070f4:	e009      	b.n	800710a <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070f6:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80070f8:	f005 061f 	and.w	r6, r5, #31
 80070fc:	253f      	movs	r5, #63	; 0x3f
 80070fe:	40b5      	lsls	r5, r6
 8007100:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007102:	6825      	ldr	r5, [r4, #0]
 8007104:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8007108:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800710a:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800710c:	6883      	ldr	r3, [r0, #8]
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d118      	bne.n	8007144 <DMA_SetConfig+0x16c>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007112:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007114:	60e1      	str	r1, [r4, #12]
 8007116:	e014      	b.n	8007142 <DMA_SetConfig+0x16a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007118:	4d0f      	ldr	r5, [pc, #60]	; (8007158 <DMA_SetConfig+0x180>)
 800711a:	42ac      	cmp	r4, r5
 800711c:	d0e4      	beq.n	80070e8 <DMA_SetConfig+0x110>
 800711e:	3514      	adds	r5, #20
 8007120:	42ac      	cmp	r4, r5
 8007122:	d0e1      	beq.n	80070e8 <DMA_SetConfig+0x110>
 8007124:	3514      	adds	r5, #20
 8007126:	42ac      	cmp	r4, r5
 8007128:	d0de      	beq.n	80070e8 <DMA_SetConfig+0x110>
 800712a:	3514      	adds	r5, #20
 800712c:	42ac      	cmp	r4, r5
 800712e:	d0db      	beq.n	80070e8 <DMA_SetConfig+0x110>
 8007130:	3514      	adds	r5, #20
 8007132:	42ac      	cmp	r4, r5
 8007134:	d0d8      	beq.n	80070e8 <DMA_SetConfig+0x110>
 8007136:	3514      	adds	r5, #20
 8007138:	42ac      	cmp	r4, r5
 800713a:	d0d5      	beq.n	80070e8 <DMA_SetConfig+0x110>
 800713c:	3514      	adds	r5, #20
 800713e:	42ac      	cmp	r4, r5
 8007140:	d0d2      	beq.n	80070e8 <DMA_SetConfig+0x110>
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007142:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007144:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007146:	60e2      	str	r2, [r4, #12]
}
 8007148:	e7fb      	b.n	8007142 <DMA_SetConfig+0x16a>
 800714a:	bf00      	nop
 800714c:	40020010 	.word	0x40020010
 8007150:	40020028 	.word	0x40020028
 8007154:	58025408 	.word	0x58025408
 8007158:	5802541c 	.word	0x5802541c

0800715c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800715c:	6803      	ldr	r3, [r0, #0]
 800715e:	4a24      	ldr	r2, [pc, #144]	; (80071f0 <DMA_CalcBaseAndBitshift+0x94>)
 8007160:	4293      	cmp	r3, r2
{
 8007162:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007164:	d032      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0x70>
 8007166:	3218      	adds	r2, #24
 8007168:	4293      	cmp	r3, r2
 800716a:	d02f      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0x70>
 800716c:	3218      	adds	r2, #24
 800716e:	4293      	cmp	r3, r2
 8007170:	d02c      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0x70>
 8007172:	3218      	adds	r2, #24
 8007174:	4293      	cmp	r3, r2
 8007176:	d029      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0x70>
 8007178:	3218      	adds	r2, #24
 800717a:	4293      	cmp	r3, r2
 800717c:	d026      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0x70>
 800717e:	3218      	adds	r2, #24
 8007180:	4293      	cmp	r3, r2
 8007182:	d023      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0x70>
 8007184:	3218      	adds	r2, #24
 8007186:	4293      	cmp	r3, r2
 8007188:	d020      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0x70>
 800718a:	3218      	adds	r2, #24
 800718c:	4293      	cmp	r3, r2
 800718e:	d01d      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0x70>
 8007190:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007194:	4293      	cmp	r3, r2
 8007196:	d019      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0x70>
 8007198:	3218      	adds	r2, #24
 800719a:	4293      	cmp	r3, r2
 800719c:	d016      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0x70>
 800719e:	3218      	adds	r2, #24
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d013      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0x70>
 80071a4:	3218      	adds	r2, #24
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d010      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0x70>
 80071aa:	3218      	adds	r2, #24
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00d      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0x70>
 80071b0:	3218      	adds	r2, #24
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00a      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0x70>
 80071b6:	3218      	adds	r2, #24
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d007      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0x70>
 80071bc:	3218      	adds	r2, #24
 80071be:	4293      	cmp	r3, r2
 80071c0:	d004      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80071c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80071c6:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 80071c8:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80071ca:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	2118      	movs	r1, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80071d0:	4c08      	ldr	r4, [pc, #32]	; (80071f4 <DMA_CalcBaseAndBitshift+0x98>)
 80071d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071d6:	3a10      	subs	r2, #16
 80071d8:	f023 0303 	bic.w	r3, r3, #3
 80071dc:	fbb2 f2f1 	udiv	r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80071e0:	f002 0107 	and.w	r1, r2, #7
    if (stream_number > 3U)
 80071e4:	2a03      	cmp	r2, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80071e6:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80071e8:	bf88      	it	hi
 80071ea:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80071ec:	65c1      	str	r1, [r0, #92]	; 0x5c
 80071ee:	e7ea      	b.n	80071c6 <DMA_CalcBaseAndBitshift+0x6a>
 80071f0:	40020010 	.word	0x40020010
 80071f4:	0801709c 	.word	0x0801709c

080071f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80071f8:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071fa:	491f      	ldr	r1, [pc, #124]	; (8007278 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80071fc:	b2d3      	uxtb	r3, r2
 80071fe:	428a      	cmp	r2, r1
 8007200:	d024      	beq.n	800724c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8007202:	3114      	adds	r1, #20
 8007204:	428a      	cmp	r2, r1
 8007206:	d021      	beq.n	800724c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8007208:	3114      	adds	r1, #20
 800720a:	428a      	cmp	r2, r1
 800720c:	d01e      	beq.n	800724c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 800720e:	3114      	adds	r1, #20
 8007210:	428a      	cmp	r2, r1
 8007212:	d01b      	beq.n	800724c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8007214:	3114      	adds	r1, #20
 8007216:	428a      	cmp	r2, r1
 8007218:	d018      	beq.n	800724c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 800721a:	3114      	adds	r1, #20
 800721c:	428a      	cmp	r2, r1
 800721e:	d015      	beq.n	800724c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8007220:	3114      	adds	r1, #20
 8007222:	428a      	cmp	r2, r1
 8007224:	d012      	beq.n	800724c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8007226:	3114      	adds	r1, #20
 8007228:	428a      	cmp	r2, r1
 800722a:	d00f      	beq.n	800724c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800722c:	2118      	movs	r1, #24
 800722e:	3b10      	subs	r3, #16
 8007230:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007234:	4911      	ldr	r1, [pc, #68]	; (800727c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8007236:	4411      	add	r1, r2
 8007238:	29a8      	cmp	r1, #168	; 0xa8
 800723a:	d91a      	bls.n	8007272 <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800723c:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8007240:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
 8007244:	0092      	lsls	r2, r2, #2
 8007246:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007248:	4a0d      	ldr	r2, [pc, #52]	; (8007280 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800724a:	e00a      	b.n	8007262 <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800724c:	2214      	movs	r2, #20
 800724e:	3b08      	subs	r3, #8
 8007250:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007254:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
 8007258:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
 800725c:	0092      	lsls	r2, r2, #2
 800725e:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007260:	4a08      	ldr	r2, [pc, #32]	; (8007284 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007262:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007264:	f003 031f 	and.w	r3, r3, #31
 8007268:	2201      	movs	r2, #1
 800726a:	fa02 f303 	lsl.w	r3, r2, r3
 800726e:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 8007270:	4770      	bx	lr
      stream_number += 8U;
 8007272:	3308      	adds	r3, #8
 8007274:	e7e2      	b.n	800723c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 8007276:	bf00      	nop
 8007278:	58025408 	.word	0x58025408
 800727c:	bffdfbf0 	.word	0xbffdfbf0
 8007280:	40020880 	.word	0x40020880
 8007284:	58025880 	.word	0x58025880

08007288 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007288:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800728a:	1e51      	subs	r1, r2, #1
 800728c:	2907      	cmp	r1, #7
{
 800728e:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007290:	d821      	bhi.n	80072d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007292:	6803      	ldr	r3, [r0, #0]
 8007294:	4c13      	ldr	r4, [pc, #76]	; (80072e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 8007296:	42a3      	cmp	r3, r4
 8007298:	d01e      	beq.n	80072d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 800729a:	3414      	adds	r4, #20
 800729c:	42a3      	cmp	r3, r4
 800729e:	d01b      	beq.n	80072d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80072a0:	3414      	adds	r4, #20
 80072a2:	42a3      	cmp	r3, r4
 80072a4:	d018      	beq.n	80072d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80072a6:	3414      	adds	r4, #20
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	d015      	beq.n	80072d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80072ac:	3414      	adds	r4, #20
 80072ae:	42a3      	cmp	r3, r4
 80072b0:	d012      	beq.n	80072d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80072b2:	3414      	adds	r4, #20
 80072b4:	42a3      	cmp	r3, r4
 80072b6:	d00f      	beq.n	80072d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80072b8:	3414      	adds	r4, #20
 80072ba:	42a3      	cmp	r3, r4
 80072bc:	d00c      	beq.n	80072d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80072be:	3414      	adds	r4, #20
 80072c0:	42a3      	cmp	r3, r4
 80072c2:	d009      	beq.n	80072d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80072c4:	4b08      	ldr	r3, [pc, #32]	; (80072e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80072cc:	4b07      	ldr	r3, [pc, #28]	; (80072ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80072ce:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80072d0:	2301      	movs	r3, #1
 80072d2:	408b      	lsls	r3, r1
 80072d4:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 80072d6:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80072d8:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80072e0:	4b04      	ldr	r3, [pc, #16]	; (80072f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 80072e2:	e7f4      	b.n	80072ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x46>
 80072e4:	58025408 	.word	0x58025408
 80072e8:	1000823f 	.word	0x1000823f
 80072ec:	40020940 	.word	0x40020940
 80072f0:	1600963f 	.word	0x1600963f
 80072f4:	58025940 	.word	0x58025940

080072f8 <HAL_DMA_Init>:
{
 80072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80072fc:	f7fe ffb0 	bl	8006260 <HAL_GetTick>
 8007300:	4606      	mov	r6, r0
  if(hdma == NULL)
 8007302:	2c00      	cmp	r4, #0
 8007304:	f000 8165 	beq.w	80075d2 <HAL_DMA_Init+0x2da>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	4db3      	ldr	r5, [pc, #716]	; (80075d8 <HAL_DMA_Init+0x2e0>)
 800730c:	42ab      	cmp	r3, r5
 800730e:	d06a      	beq.n	80073e6 <HAL_DMA_Init+0xee>
 8007310:	4ab2      	ldr	r2, [pc, #712]	; (80075dc <HAL_DMA_Init+0x2e4>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d067      	beq.n	80073e6 <HAL_DMA_Init+0xee>
 8007316:	3218      	adds	r2, #24
 8007318:	4293      	cmp	r3, r2
 800731a:	d064      	beq.n	80073e6 <HAL_DMA_Init+0xee>
 800731c:	3218      	adds	r2, #24
 800731e:	4293      	cmp	r3, r2
 8007320:	d061      	beq.n	80073e6 <HAL_DMA_Init+0xee>
 8007322:	3218      	adds	r2, #24
 8007324:	4293      	cmp	r3, r2
 8007326:	d05e      	beq.n	80073e6 <HAL_DMA_Init+0xee>
 8007328:	3218      	adds	r2, #24
 800732a:	4293      	cmp	r3, r2
 800732c:	d05b      	beq.n	80073e6 <HAL_DMA_Init+0xee>
 800732e:	3218      	adds	r2, #24
 8007330:	4293      	cmp	r3, r2
 8007332:	d058      	beq.n	80073e6 <HAL_DMA_Init+0xee>
 8007334:	3218      	adds	r2, #24
 8007336:	4293      	cmp	r3, r2
 8007338:	d055      	beq.n	80073e6 <HAL_DMA_Init+0xee>
 800733a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800733e:	4293      	cmp	r3, r2
 8007340:	d051      	beq.n	80073e6 <HAL_DMA_Init+0xee>
 8007342:	3218      	adds	r2, #24
 8007344:	4293      	cmp	r3, r2
 8007346:	d04e      	beq.n	80073e6 <HAL_DMA_Init+0xee>
 8007348:	3218      	adds	r2, #24
 800734a:	4293      	cmp	r3, r2
 800734c:	d04b      	beq.n	80073e6 <HAL_DMA_Init+0xee>
 800734e:	3218      	adds	r2, #24
 8007350:	4293      	cmp	r3, r2
 8007352:	d048      	beq.n	80073e6 <HAL_DMA_Init+0xee>
 8007354:	3218      	adds	r2, #24
 8007356:	4293      	cmp	r3, r2
 8007358:	d045      	beq.n	80073e6 <HAL_DMA_Init+0xee>
 800735a:	3218      	adds	r2, #24
 800735c:	4293      	cmp	r3, r2
 800735e:	d042      	beq.n	80073e6 <HAL_DMA_Init+0xee>
 8007360:	3218      	adds	r2, #24
 8007362:	4293      	cmp	r3, r2
 8007364:	d03f      	beq.n	80073e6 <HAL_DMA_Init+0xee>
 8007366:	3218      	adds	r2, #24
 8007368:	4293      	cmp	r3, r2
 800736a:	d03c      	beq.n	80073e6 <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800736c:	4a9c      	ldr	r2, [pc, #624]	; (80075e0 <HAL_DMA_Init+0x2e8>)
 800736e:	4293      	cmp	r3, r2
 8007370:	f040 8160 	bne.w	8007634 <HAL_DMA_Init+0x33c>
    __HAL_UNLOCK(hdma);
 8007374:	2200      	movs	r2, #0
 8007376:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 800737a:	2202      	movs	r2, #2
 800737c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007380:	68a2      	ldr	r2, [r4, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007382:	6819      	ldr	r1, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007384:	2a40      	cmp	r2, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007386:	f421 31ff 	bic.w	r1, r1, #130560	; 0x1fe00
 800738a:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800738e:	f000 816f 	beq.w	8007670 <HAL_DMA_Init+0x378>
 8007392:	2a80      	cmp	r2, #128	; 0x80
 8007394:	bf14      	ite	ne
 8007396:	2000      	movne	r0, #0
 8007398:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800739c:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 80073a0:	08d2      	lsrs	r2, r2, #3
 80073a2:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80073a6:	6966      	ldr	r6, [r4, #20]
 80073a8:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80073ac:	69a6      	ldr	r6, [r4, #24]
 80073ae:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80073b2:	69e6      	ldr	r6, [r4, #28]
 80073b4:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80073b8:	6a26      	ldr	r6, [r4, #32]
 80073ba:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 80073be:	430a      	orrs	r2, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80073c0:	4302      	orrs	r2, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80073c2:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80073c4:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80073c6:	4a87      	ldr	r2, [pc, #540]	; (80075e4 <HAL_DMA_Init+0x2ec>)
 80073c8:	441a      	add	r2, r3
 80073ca:	2314      	movs	r3, #20
 80073cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80073d0:	0092      	lsls	r2, r2, #2
 80073d2:	65e2      	str	r2, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80073d4:	f7ff fec2 	bl	800715c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80073d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80073da:	f003 021f 	and.w	r2, r3, #31
 80073de:	2301      	movs	r3, #1
 80073e0:	4093      	lsls	r3, r2
 80073e2:	6043      	str	r3, [r0, #4]
 80073e4:	e081      	b.n	80074ea <HAL_DMA_Init+0x1f2>
    __HAL_UNLOCK(hdma);
 80073e6:	2200      	movs	r2, #0
    __HAL_DMA_DISABLE(hdma);
 80073e8:	42ab      	cmp	r3, r5
    __HAL_UNLOCK(hdma);
 80073ea:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 80073ee:	f04f 0202 	mov.w	r2, #2
 80073f2:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80073f6:	d01e      	beq.n	8007436 <HAL_DMA_Init+0x13e>
 80073f8:	4a78      	ldr	r2, [pc, #480]	; (80075dc <HAL_DMA_Init+0x2e4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d01b      	beq.n	8007436 <HAL_DMA_Init+0x13e>
 80073fe:	3218      	adds	r2, #24
 8007400:	4293      	cmp	r3, r2
 8007402:	d018      	beq.n	8007436 <HAL_DMA_Init+0x13e>
 8007404:	3218      	adds	r2, #24
 8007406:	4293      	cmp	r3, r2
 8007408:	d015      	beq.n	8007436 <HAL_DMA_Init+0x13e>
 800740a:	3218      	adds	r2, #24
 800740c:	4293      	cmp	r3, r2
 800740e:	d012      	beq.n	8007436 <HAL_DMA_Init+0x13e>
 8007410:	3218      	adds	r2, #24
 8007412:	4293      	cmp	r3, r2
 8007414:	d00f      	beq.n	8007436 <HAL_DMA_Init+0x13e>
 8007416:	3218      	adds	r2, #24
 8007418:	4293      	cmp	r3, r2
 800741a:	d00c      	beq.n	8007436 <HAL_DMA_Init+0x13e>
 800741c:	3218      	adds	r2, #24
 800741e:	4293      	cmp	r3, r2
 8007420:	d009      	beq.n	8007436 <HAL_DMA_Init+0x13e>
 8007422:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007426:	4293      	cmp	r3, r2
 8007428:	d005      	beq.n	8007436 <HAL_DMA_Init+0x13e>
 800742a:	3218      	adds	r2, #24
 800742c:	4293      	cmp	r3, r2
 800742e:	d002      	beq.n	8007436 <HAL_DMA_Init+0x13e>
 8007430:	3218      	adds	r2, #24
 8007432:	4293      	cmp	r3, r2
 8007434:	d0ff      	beq.n	8007436 <HAL_DMA_Init+0x13e>
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	f022 0201 	bic.w	r2, r2, #1
 800743c:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800743e:	6821      	ldr	r1, [r4, #0]
 8007440:	680b      	ldr	r3, [r1, #0]
 8007442:	07db      	lsls	r3, r3, #31
 8007444:	f100 80ba 	bmi.w	80075bc <HAL_DMA_Init+0x2c4>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007448:	680b      	ldr	r3, [r1, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800744a:	4e67      	ldr	r6, [pc, #412]	; (80075e8 <HAL_DMA_Init+0x2f0>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800744c:	69a0      	ldr	r0, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800744e:	401e      	ands	r6, r3
    registerValue |=  hdma->Init.Direction           |
 8007450:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007454:	4313      	orrs	r3, r2
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007456:	6922      	ldr	r2, [r4, #16]
 8007458:	4313      	orrs	r3, r2
 800745a:	6962      	ldr	r2, [r4, #20]
 800745c:	4313      	orrs	r3, r2
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800745e:	69e2      	ldr	r2, [r4, #28]
 8007460:	4303      	orrs	r3, r0
 8007462:	4313      	orrs	r3, r2
            hdma->Init.Mode                | hdma->Init.Priority;
 8007464:	6a22      	ldr	r2, [r4, #32]
 8007466:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007468:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800746a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800746c:	2e04      	cmp	r6, #4
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800746e:	bf02      	ittt	eq
 8007470:	e9d4 270b 	ldrdeq	r2, r7, [r4, #44]	; 0x2c
 8007474:	433a      	orreq	r2, r7
 8007476:	4313      	orreq	r3, r2
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007478:	4a5c      	ldr	r2, [pc, #368]	; (80075ec <HAL_DMA_Init+0x2f4>)
 800747a:	6812      	ldr	r2, [r2, #0]
 800747c:	0c12      	lsrs	r2, r2, #16
 800747e:	0412      	lsls	r2, r2, #16
 8007480:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8007484:	d30f      	bcc.n	80074a6 <HAL_DMA_Init+0x1ae>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007486:	6862      	ldr	r2, [r4, #4]
 8007488:	f1a2 0c29 	sub.w	ip, r2, #41	; 0x29
 800748c:	f1bc 0f1f 	cmp.w	ip, #31
 8007490:	d804      	bhi.n	800749c <HAL_DMA_Init+0x1a4>
 8007492:	4f57      	ldr	r7, [pc, #348]	; (80075f0 <HAL_DMA_Init+0x2f8>)
 8007494:	fa27 f70c 	lsr.w	r7, r7, ip
 8007498:	07ff      	lsls	r7, r7, #31
 800749a:	d402      	bmi.n	80074a2 <HAL_DMA_Init+0x1aa>
 800749c:	3a4f      	subs	r2, #79	; 0x4f
 800749e:	2a03      	cmp	r2, #3
 80074a0:	d801      	bhi.n	80074a6 <HAL_DMA_Init+0x1ae>
        registerValue |= DMA_SxCR_TRBUFF;
 80074a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80074a6:	600b      	str	r3, [r1, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074a8:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80074aa:	694b      	ldr	r3, [r1, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80074ac:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80074b0:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074b4:	d10f      	bne.n	80074d6 <HAL_DMA_Init+0x1de>
      registerValue |= hdma->Init.FIFOThreshold;
 80074b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80074b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80074ba:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80074bc:	b15e      	cbz	r6, 80074d6 <HAL_DMA_Init+0x1de>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80074be:	2800      	cmp	r0, #0
 80074c0:	f040 8098 	bne.w	80075f4 <HAL_DMA_Init+0x2fc>
    switch (hdma->Init.FIFOThreshold)
 80074c4:	2a01      	cmp	r2, #1
 80074c6:	f000 80a7 	beq.w	8007618 <HAL_DMA_Init+0x320>
 80074ca:	d301      	bcc.n	80074d0 <HAL_DMA_Init+0x1d8>
 80074cc:	2a02      	cmp	r2, #2
    switch (hdma->Init.FIFOThreshold)
 80074ce:	d102      	bne.n	80074d6 <HAL_DMA_Init+0x1de>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074d0:	01f2      	lsls	r2, r6, #7
 80074d2:	f100 80a5 	bmi.w	8007620 <HAL_DMA_Init+0x328>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80074d6:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80074d8:	4620      	mov	r0, r4
 80074da:	f7ff fe3f 	bl	800715c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80074de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80074e0:	f003 021f 	and.w	r2, r3, #31
 80074e4:	233f      	movs	r3, #63	; 0x3f
 80074e6:	4093      	lsls	r3, r2
 80074e8:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	42ab      	cmp	r3, r5
 80074ee:	d045      	beq.n	800757c <HAL_DMA_Init+0x284>
 80074f0:	4a3a      	ldr	r2, [pc, #232]	; (80075dc <HAL_DMA_Init+0x2e4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d042      	beq.n	800757c <HAL_DMA_Init+0x284>
 80074f6:	3218      	adds	r2, #24
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d03f      	beq.n	800757c <HAL_DMA_Init+0x284>
 80074fc:	3218      	adds	r2, #24
 80074fe:	4293      	cmp	r3, r2
 8007500:	d03c      	beq.n	800757c <HAL_DMA_Init+0x284>
 8007502:	3218      	adds	r2, #24
 8007504:	4293      	cmp	r3, r2
 8007506:	d039      	beq.n	800757c <HAL_DMA_Init+0x284>
 8007508:	3218      	adds	r2, #24
 800750a:	4293      	cmp	r3, r2
 800750c:	d036      	beq.n	800757c <HAL_DMA_Init+0x284>
 800750e:	3218      	adds	r2, #24
 8007510:	4293      	cmp	r3, r2
 8007512:	d033      	beq.n	800757c <HAL_DMA_Init+0x284>
 8007514:	3218      	adds	r2, #24
 8007516:	4293      	cmp	r3, r2
 8007518:	d030      	beq.n	800757c <HAL_DMA_Init+0x284>
 800751a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800751e:	4293      	cmp	r3, r2
 8007520:	d02c      	beq.n	800757c <HAL_DMA_Init+0x284>
 8007522:	3218      	adds	r2, #24
 8007524:	4293      	cmp	r3, r2
 8007526:	d029      	beq.n	800757c <HAL_DMA_Init+0x284>
 8007528:	3218      	adds	r2, #24
 800752a:	4293      	cmp	r3, r2
 800752c:	d026      	beq.n	800757c <HAL_DMA_Init+0x284>
 800752e:	3218      	adds	r2, #24
 8007530:	4293      	cmp	r3, r2
 8007532:	d023      	beq.n	800757c <HAL_DMA_Init+0x284>
 8007534:	3218      	adds	r2, #24
 8007536:	4293      	cmp	r3, r2
 8007538:	d020      	beq.n	800757c <HAL_DMA_Init+0x284>
 800753a:	3218      	adds	r2, #24
 800753c:	4293      	cmp	r3, r2
 800753e:	d01d      	beq.n	800757c <HAL_DMA_Init+0x284>
 8007540:	3218      	adds	r2, #24
 8007542:	4293      	cmp	r3, r2
 8007544:	d01a      	beq.n	800757c <HAL_DMA_Init+0x284>
 8007546:	3218      	adds	r2, #24
 8007548:	4293      	cmp	r3, r2
 800754a:	d017      	beq.n	800757c <HAL_DMA_Init+0x284>
 800754c:	4a24      	ldr	r2, [pc, #144]	; (80075e0 <HAL_DMA_Init+0x2e8>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d014      	beq.n	800757c <HAL_DMA_Init+0x284>
 8007552:	3214      	adds	r2, #20
 8007554:	4293      	cmp	r3, r2
 8007556:	d011      	beq.n	800757c <HAL_DMA_Init+0x284>
 8007558:	3214      	adds	r2, #20
 800755a:	4293      	cmp	r3, r2
 800755c:	d00e      	beq.n	800757c <HAL_DMA_Init+0x284>
 800755e:	3214      	adds	r2, #20
 8007560:	4293      	cmp	r3, r2
 8007562:	d00b      	beq.n	800757c <HAL_DMA_Init+0x284>
 8007564:	3214      	adds	r2, #20
 8007566:	4293      	cmp	r3, r2
 8007568:	d008      	beq.n	800757c <HAL_DMA_Init+0x284>
 800756a:	3214      	adds	r2, #20
 800756c:	4293      	cmp	r3, r2
 800756e:	d005      	beq.n	800757c <HAL_DMA_Init+0x284>
 8007570:	3214      	adds	r2, #20
 8007572:	4293      	cmp	r3, r2
 8007574:	d002      	beq.n	800757c <HAL_DMA_Init+0x284>
 8007576:	3214      	adds	r2, #20
 8007578:	4293      	cmp	r3, r2
 800757a:	d119      	bne.n	80075b0 <HAL_DMA_Init+0x2b8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800757c:	4620      	mov	r0, r4
 800757e:	2500      	movs	r5, #0
 8007580:	f7ff fe3a 	bl	80071f8 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007584:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007586:	6e22      	ldr	r2, [r4, #96]	; 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007588:	2b80      	cmp	r3, #128	; 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800758a:	bf04      	itt	eq
 800758c:	2300      	moveq	r3, #0
 800758e:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007590:	6863      	ldr	r3, [r4, #4]
 8007592:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007594:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007596:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007598:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800759a:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
 800759e:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80075a0:	d868      	bhi.n	8007674 <HAL_DMA_Init+0x37c>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80075a2:	f7ff fe71 	bl	8007288 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80075a6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80075a8:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075aa:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 80075ae:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075b0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80075b2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075b4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80075b6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80075ba:	e036      	b.n	800762a <HAL_DMA_Init+0x332>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075bc:	f7fe fe50 	bl	8006260 <HAL_GetTick>
 80075c0:	1b80      	subs	r0, r0, r6
 80075c2:	2805      	cmp	r0, #5
 80075c4:	f67f af3b 	bls.w	800743e <HAL_DMA_Init+0x146>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80075c8:	2320      	movs	r3, #32
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075ca:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80075cc:	2303      	movs	r3, #3
 80075ce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80075d2:	2001      	movs	r0, #1
 80075d4:	e029      	b.n	800762a <HAL_DMA_Init+0x332>
 80075d6:	bf00      	nop
 80075d8:	40020010 	.word	0x40020010
 80075dc:	40020028 	.word	0x40020028
 80075e0:	58025408 	.word	0x58025408
 80075e4:	a7fdabf8 	.word	0xa7fdabf8
 80075e8:	fe10803f 	.word	0xfe10803f
 80075ec:	5c001000 	.word	0x5c001000
 80075f0:	c3c0003f 	.word	0xc3c0003f
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075f4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80075f8:	d118      	bne.n	800762c <HAL_DMA_Init+0x334>
    switch (hdma->Init.FIFOThreshold)
 80075fa:	2a03      	cmp	r2, #3
 80075fc:	f63f af6b 	bhi.w	80074d6 <HAL_DMA_Init+0x1de>
 8007600:	a001      	add	r0, pc, #4	; (adr r0, 8007608 <HAL_DMA_Init+0x310>)
 8007602:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8007606:	bf00      	nop
 8007608:	08007621 	.word	0x08007621
 800760c:	080074d1 	.word	0x080074d1
 8007610:	08007621 	.word	0x08007621
 8007614:	08007619 	.word	0x08007619
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007618:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 800761c:	f47f af5b 	bne.w	80074d6 <HAL_DMA_Init+0x1de>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007620:	2340      	movs	r3, #64	; 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8007622:	2001      	movs	r0, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007624:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8007626:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800762a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 800762c:	2a02      	cmp	r2, #2
 800762e:	d9f7      	bls.n	8007620 <HAL_DMA_Init+0x328>
 8007630:	2a03      	cmp	r2, #3
 8007632:	e74c      	b.n	80074ce <HAL_DMA_Init+0x1d6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007634:	4a11      	ldr	r2, [pc, #68]	; (800767c <HAL_DMA_Init+0x384>)
 8007636:	4293      	cmp	r3, r2
 8007638:	f43f ae9c 	beq.w	8007374 <HAL_DMA_Init+0x7c>
 800763c:	3214      	adds	r2, #20
 800763e:	4293      	cmp	r3, r2
 8007640:	f43f ae98 	beq.w	8007374 <HAL_DMA_Init+0x7c>
 8007644:	3214      	adds	r2, #20
 8007646:	4293      	cmp	r3, r2
 8007648:	f43f ae94 	beq.w	8007374 <HAL_DMA_Init+0x7c>
 800764c:	3214      	adds	r2, #20
 800764e:	4293      	cmp	r3, r2
 8007650:	f43f ae90 	beq.w	8007374 <HAL_DMA_Init+0x7c>
 8007654:	3214      	adds	r2, #20
 8007656:	4293      	cmp	r3, r2
 8007658:	f43f ae8c 	beq.w	8007374 <HAL_DMA_Init+0x7c>
 800765c:	3214      	adds	r2, #20
 800765e:	4293      	cmp	r3, r2
 8007660:	f43f ae88 	beq.w	8007374 <HAL_DMA_Init+0x7c>
 8007664:	3214      	adds	r2, #20
 8007666:	4293      	cmp	r3, r2
 8007668:	f43f ae84 	beq.w	8007374 <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800766c:	2340      	movs	r3, #64	; 0x40
 800766e:	e7ac      	b.n	80075ca <HAL_DMA_Init+0x2d2>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007670:	2010      	movs	r0, #16
 8007672:	e693      	b.n	800739c <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 8007674:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007678:	6765      	str	r5, [r4, #116]	; 0x74
 800767a:	e799      	b.n	80075b0 <HAL_DMA_Init+0x2b8>
 800767c:	5802541c 	.word	0x5802541c

08007680 <HAL_DMA_Start_IT>:
{
 8007680:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 8007682:	4604      	mov	r4, r0
 8007684:	2800      	cmp	r0, #0
 8007686:	f000 810d 	beq.w	80078a4 <HAL_DMA_Start_IT+0x224>
  __HAL_LOCK(hdma);
 800768a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800768e:	2801      	cmp	r0, #1
 8007690:	f000 810a 	beq.w	80078a8 <HAL_DMA_Start_IT+0x228>
 8007694:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8007696:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
 800769a:	4285      	cmp	r5, r0
  __HAL_LOCK(hdma);
 800769c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 80076a0:	f04f 0500 	mov.w	r5, #0
  if(HAL_DMA_STATE_READY == hdma->State)
 80076a4:	f040 80f8 	bne.w	8007898 <HAL_DMA_Start_IT+0x218>
    hdma->State = HAL_DMA_STATE_BUSY;
 80076a8:	2002      	movs	r0, #2
 80076aa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80076ae:	6565      	str	r5, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 80076b0:	6820      	ldr	r0, [r4, #0]
 80076b2:	4d7e      	ldr	r5, [pc, #504]	; (80078ac <HAL_DMA_Start_IT+0x22c>)
 80076b4:	42a8      	cmp	r0, r5
 80076b6:	d01e      	beq.n	80076f6 <HAL_DMA_Start_IT+0x76>
 80076b8:	4e7d      	ldr	r6, [pc, #500]	; (80078b0 <HAL_DMA_Start_IT+0x230>)
 80076ba:	42b0      	cmp	r0, r6
 80076bc:	d01b      	beq.n	80076f6 <HAL_DMA_Start_IT+0x76>
 80076be:	3618      	adds	r6, #24
 80076c0:	42b0      	cmp	r0, r6
 80076c2:	d018      	beq.n	80076f6 <HAL_DMA_Start_IT+0x76>
 80076c4:	3618      	adds	r6, #24
 80076c6:	42b0      	cmp	r0, r6
 80076c8:	d015      	beq.n	80076f6 <HAL_DMA_Start_IT+0x76>
 80076ca:	3618      	adds	r6, #24
 80076cc:	42b0      	cmp	r0, r6
 80076ce:	d012      	beq.n	80076f6 <HAL_DMA_Start_IT+0x76>
 80076d0:	3618      	adds	r6, #24
 80076d2:	42b0      	cmp	r0, r6
 80076d4:	d00f      	beq.n	80076f6 <HAL_DMA_Start_IT+0x76>
 80076d6:	3618      	adds	r6, #24
 80076d8:	42b0      	cmp	r0, r6
 80076da:	d00c      	beq.n	80076f6 <HAL_DMA_Start_IT+0x76>
 80076dc:	3618      	adds	r6, #24
 80076de:	42b0      	cmp	r0, r6
 80076e0:	d009      	beq.n	80076f6 <HAL_DMA_Start_IT+0x76>
 80076e2:	f506 7656 	add.w	r6, r6, #856	; 0x358
 80076e6:	42b0      	cmp	r0, r6
 80076e8:	d005      	beq.n	80076f6 <HAL_DMA_Start_IT+0x76>
 80076ea:	3618      	adds	r6, #24
 80076ec:	42b0      	cmp	r0, r6
 80076ee:	d002      	beq.n	80076f6 <HAL_DMA_Start_IT+0x76>
 80076f0:	3618      	adds	r6, #24
 80076f2:	42b0      	cmp	r0, r6
 80076f4:	d0ff      	beq.n	80076f6 <HAL_DMA_Start_IT+0x76>
 80076f6:	6806      	ldr	r6, [r0, #0]
 80076f8:	f026 0601 	bic.w	r6, r6, #1
 80076fc:	6006      	str	r6, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80076fe:	4620      	mov	r0, r4
 8007700:	f7ff fc6a 	bl	8006fd8 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007708:	42ab      	cmp	r3, r5
 800770a:	d053      	beq.n	80077b4 <HAL_DMA_Start_IT+0x134>
 800770c:	4a68      	ldr	r2, [pc, #416]	; (80078b0 <HAL_DMA_Start_IT+0x230>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d050      	beq.n	80077b4 <HAL_DMA_Start_IT+0x134>
 8007712:	3218      	adds	r2, #24
 8007714:	4293      	cmp	r3, r2
 8007716:	d04d      	beq.n	80077b4 <HAL_DMA_Start_IT+0x134>
 8007718:	3218      	adds	r2, #24
 800771a:	4293      	cmp	r3, r2
 800771c:	d04a      	beq.n	80077b4 <HAL_DMA_Start_IT+0x134>
 800771e:	3218      	adds	r2, #24
 8007720:	4293      	cmp	r3, r2
 8007722:	d047      	beq.n	80077b4 <HAL_DMA_Start_IT+0x134>
 8007724:	3218      	adds	r2, #24
 8007726:	4293      	cmp	r3, r2
 8007728:	d044      	beq.n	80077b4 <HAL_DMA_Start_IT+0x134>
 800772a:	3218      	adds	r2, #24
 800772c:	4293      	cmp	r3, r2
 800772e:	d041      	beq.n	80077b4 <HAL_DMA_Start_IT+0x134>
 8007730:	3218      	adds	r2, #24
 8007732:	4293      	cmp	r3, r2
 8007734:	d03e      	beq.n	80077b4 <HAL_DMA_Start_IT+0x134>
 8007736:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800773a:	4293      	cmp	r3, r2
 800773c:	d03a      	beq.n	80077b4 <HAL_DMA_Start_IT+0x134>
 800773e:	3218      	adds	r2, #24
 8007740:	4293      	cmp	r3, r2
 8007742:	d037      	beq.n	80077b4 <HAL_DMA_Start_IT+0x134>
 8007744:	3218      	adds	r2, #24
 8007746:	4293      	cmp	r3, r2
 8007748:	d034      	beq.n	80077b4 <HAL_DMA_Start_IT+0x134>
 800774a:	3218      	adds	r2, #24
 800774c:	4293      	cmp	r3, r2
 800774e:	d031      	beq.n	80077b4 <HAL_DMA_Start_IT+0x134>
 8007750:	3218      	adds	r2, #24
 8007752:	4293      	cmp	r3, r2
 8007754:	d02e      	beq.n	80077b4 <HAL_DMA_Start_IT+0x134>
 8007756:	3218      	adds	r2, #24
 8007758:	4293      	cmp	r3, r2
 800775a:	d02b      	beq.n	80077b4 <HAL_DMA_Start_IT+0x134>
 800775c:	3218      	adds	r2, #24
 800775e:	4293      	cmp	r3, r2
 8007760:	d028      	beq.n	80077b4 <HAL_DMA_Start_IT+0x134>
 8007762:	3218      	adds	r2, #24
 8007764:	4293      	cmp	r3, r2
 8007766:	d025      	beq.n	80077b4 <HAL_DMA_Start_IT+0x134>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	f022 020e 	bic.w	r2, r2, #14
 800776e:	f042 020a 	orr.w	r2, r2, #10
 8007772:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8007774:	2900      	cmp	r1, #0
 8007776:	d156      	bne.n	8007826 <HAL_DMA_Start_IT+0x1a6>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007778:	4a4e      	ldr	r2, [pc, #312]	; (80078b4 <HAL_DMA_Start_IT+0x234>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d027      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 800777e:	4a4e      	ldr	r2, [pc, #312]	; (80078b8 <HAL_DMA_Start_IT+0x238>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d024      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 8007784:	3214      	adds	r2, #20
 8007786:	4293      	cmp	r3, r2
 8007788:	d021      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 800778a:	3214      	adds	r2, #20
 800778c:	4293      	cmp	r3, r2
 800778e:	d01e      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 8007790:	3214      	adds	r2, #20
 8007792:	4293      	cmp	r3, r2
 8007794:	d01b      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 8007796:	3214      	adds	r2, #20
 8007798:	4293      	cmp	r3, r2
 800779a:	d018      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 800779c:	3214      	adds	r2, #20
 800779e:	4293      	cmp	r3, r2
 80077a0:	d015      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 80077a2:	3214      	adds	r2, #20
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d012      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
    __HAL_DMA_ENABLE(hdma);
 80077a8:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077aa:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80077ac:	f042 0201 	orr.w	r2, r2, #1
 80077b0:	601a      	str	r2, [r3, #0]
}
 80077b2:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	f022 021e 	bic.w	r2, r2, #30
 80077ba:	f042 0216 	orr.w	r2, r2, #22
 80077be:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80077c0:	b119      	cbz	r1, 80077ca <HAL_DMA_Start_IT+0x14a>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	f042 0208 	orr.w	r2, r2, #8
 80077c8:	601a      	str	r2, [r3, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077ca:	42ab      	cmp	r3, r5
 80077cc:	d130      	bne.n	8007830 <HAL_DMA_Start_IT+0x1b0>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80077ce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80077d0:	6811      	ldr	r1, [r2, #0]
 80077d2:	03c9      	lsls	r1, r1, #15
 80077d4:	d45b      	bmi.n	800788e <HAL_DMA_Start_IT+0x20e>
      if(hdma->DMAmuxRequestGen != 0U)
 80077d6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80077d8:	b11a      	cbz	r2, 80077e2 <HAL_DMA_Start_IT+0x162>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80077da:	6811      	ldr	r1, [r2, #0]
 80077dc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80077e0:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80077e2:	42ab      	cmp	r3, r5
 80077e4:	d0e0      	beq.n	80077a8 <HAL_DMA_Start_IT+0x128>
 80077e6:	4a32      	ldr	r2, [pc, #200]	; (80078b0 <HAL_DMA_Start_IT+0x230>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d0dd      	beq.n	80077a8 <HAL_DMA_Start_IT+0x128>
 80077ec:	3218      	adds	r2, #24
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d0da      	beq.n	80077a8 <HAL_DMA_Start_IT+0x128>
 80077f2:	3218      	adds	r2, #24
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d0d7      	beq.n	80077a8 <HAL_DMA_Start_IT+0x128>
 80077f8:	3218      	adds	r2, #24
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d0d4      	beq.n	80077a8 <HAL_DMA_Start_IT+0x128>
 80077fe:	3218      	adds	r2, #24
 8007800:	4293      	cmp	r3, r2
 8007802:	d0d1      	beq.n	80077a8 <HAL_DMA_Start_IT+0x128>
 8007804:	3218      	adds	r2, #24
 8007806:	4293      	cmp	r3, r2
 8007808:	d0ce      	beq.n	80077a8 <HAL_DMA_Start_IT+0x128>
 800780a:	3218      	adds	r2, #24
 800780c:	4293      	cmp	r3, r2
 800780e:	d0cb      	beq.n	80077a8 <HAL_DMA_Start_IT+0x128>
 8007810:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007814:	4293      	cmp	r3, r2
 8007816:	d0c7      	beq.n	80077a8 <HAL_DMA_Start_IT+0x128>
 8007818:	3218      	adds	r2, #24
 800781a:	4293      	cmp	r3, r2
 800781c:	d0c4      	beq.n	80077a8 <HAL_DMA_Start_IT+0x128>
 800781e:	3218      	adds	r2, #24
 8007820:	4293      	cmp	r3, r2
 8007822:	d0c1      	beq.n	80077a8 <HAL_DMA_Start_IT+0x128>
 8007824:	e7c0      	b.n	80077a8 <HAL_DMA_Start_IT+0x128>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	f042 0204 	orr.w	r2, r2, #4
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	e7a3      	b.n	8007778 <HAL_DMA_Start_IT+0xf8>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007830:	4a1f      	ldr	r2, [pc, #124]	; (80078b0 <HAL_DMA_Start_IT+0x230>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d0cb      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 8007836:	3218      	adds	r2, #24
 8007838:	4293      	cmp	r3, r2
 800783a:	d0c8      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 800783c:	3218      	adds	r2, #24
 800783e:	4293      	cmp	r3, r2
 8007840:	d0c5      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 8007842:	3218      	adds	r2, #24
 8007844:	4293      	cmp	r3, r2
 8007846:	d0c2      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 8007848:	3218      	adds	r2, #24
 800784a:	4293      	cmp	r3, r2
 800784c:	d0bf      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 800784e:	3218      	adds	r2, #24
 8007850:	4293      	cmp	r3, r2
 8007852:	d0bc      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 8007854:	3218      	adds	r2, #24
 8007856:	4293      	cmp	r3, r2
 8007858:	d0b9      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 800785a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800785e:	4293      	cmp	r3, r2
 8007860:	d0b5      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 8007862:	3218      	adds	r2, #24
 8007864:	4293      	cmp	r3, r2
 8007866:	d0b2      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 8007868:	3218      	adds	r2, #24
 800786a:	4293      	cmp	r3, r2
 800786c:	d0af      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 800786e:	3218      	adds	r2, #24
 8007870:	4293      	cmp	r3, r2
 8007872:	d0ac      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 8007874:	3218      	adds	r2, #24
 8007876:	4293      	cmp	r3, r2
 8007878:	d0a9      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 800787a:	3218      	adds	r2, #24
 800787c:	4293      	cmp	r3, r2
 800787e:	d0a6      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 8007880:	3218      	adds	r2, #24
 8007882:	4293      	cmp	r3, r2
 8007884:	d0a3      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 8007886:	3218      	adds	r2, #24
 8007888:	4293      	cmp	r3, r2
 800788a:	d0a0      	beq.n	80077ce <HAL_DMA_Start_IT+0x14e>
 800788c:	e774      	b.n	8007778 <HAL_DMA_Start_IT+0xf8>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800788e:	6811      	ldr	r1, [r2, #0]
 8007890:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007894:	6011      	str	r1, [r2, #0]
 8007896:	e79e      	b.n	80077d6 <HAL_DMA_Start_IT+0x156>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007898:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 800789c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80078a0:	6563      	str	r3, [r4, #84]	; 0x54
 80078a2:	e786      	b.n	80077b2 <HAL_DMA_Start_IT+0x132>
    return HAL_ERROR;
 80078a4:	2001      	movs	r0, #1
 80078a6:	e784      	b.n	80077b2 <HAL_DMA_Start_IT+0x132>
  __HAL_LOCK(hdma);
 80078a8:	2002      	movs	r0, #2
 80078aa:	e782      	b.n	80077b2 <HAL_DMA_Start_IT+0x132>
 80078ac:	40020010 	.word	0x40020010
 80078b0:	40020028 	.word	0x40020028
 80078b4:	58025408 	.word	0x58025408
 80078b8:	5802541c 	.word	0x5802541c

080078bc <HAL_DMA_Abort>:
{
 80078bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078be:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80078c0:	f7fe fcce 	bl	8006260 <HAL_GetTick>
 80078c4:	4607      	mov	r7, r0
  if(hdma == NULL)
 80078c6:	b145      	cbz	r5, 80078da <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80078c8:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d006      	beq.n	80078de <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078d0:	2380      	movs	r3, #128	; 0x80
 80078d2:	656b      	str	r3, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80078d4:	2300      	movs	r3, #0
 80078d6:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 80078da:	2001      	movs	r0, #1
 80078dc:	e162      	b.n	8007ba4 <HAL_DMA_Abort+0x2e8>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078de:	682c      	ldr	r4, [r5, #0]
 80078e0:	4ecc      	ldr	r6, [pc, #816]	; (8007c14 <HAL_DMA_Abort+0x358>)
 80078e2:	42b4      	cmp	r4, r6
 80078e4:	f000 80d3 	beq.w	8007a8e <HAL_DMA_Abort+0x1d2>
 80078e8:	4bcb      	ldr	r3, [pc, #812]	; (8007c18 <HAL_DMA_Abort+0x35c>)
 80078ea:	429c      	cmp	r4, r3
 80078ec:	f000 80cf 	beq.w	8007a8e <HAL_DMA_Abort+0x1d2>
 80078f0:	3318      	adds	r3, #24
 80078f2:	429c      	cmp	r4, r3
 80078f4:	f000 80cb 	beq.w	8007a8e <HAL_DMA_Abort+0x1d2>
 80078f8:	3318      	adds	r3, #24
 80078fa:	429c      	cmp	r4, r3
 80078fc:	f000 80c7 	beq.w	8007a8e <HAL_DMA_Abort+0x1d2>
 8007900:	3318      	adds	r3, #24
 8007902:	429c      	cmp	r4, r3
 8007904:	f000 80c3 	beq.w	8007a8e <HAL_DMA_Abort+0x1d2>
 8007908:	3318      	adds	r3, #24
 800790a:	429c      	cmp	r4, r3
 800790c:	f000 80bf 	beq.w	8007a8e <HAL_DMA_Abort+0x1d2>
 8007910:	3318      	adds	r3, #24
 8007912:	429c      	cmp	r4, r3
 8007914:	f000 80bb 	beq.w	8007a8e <HAL_DMA_Abort+0x1d2>
 8007918:	3318      	adds	r3, #24
 800791a:	429c      	cmp	r4, r3
 800791c:	f000 80b7 	beq.w	8007a8e <HAL_DMA_Abort+0x1d2>
 8007920:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007924:	429c      	cmp	r4, r3
 8007926:	f000 80b2 	beq.w	8007a8e <HAL_DMA_Abort+0x1d2>
 800792a:	3318      	adds	r3, #24
 800792c:	429c      	cmp	r4, r3
 800792e:	f000 80ae 	beq.w	8007a8e <HAL_DMA_Abort+0x1d2>
 8007932:	3318      	adds	r3, #24
 8007934:	429c      	cmp	r4, r3
 8007936:	f000 80aa 	beq.w	8007a8e <HAL_DMA_Abort+0x1d2>
 800793a:	3318      	adds	r3, #24
 800793c:	429c      	cmp	r4, r3
 800793e:	f000 80a6 	beq.w	8007a8e <HAL_DMA_Abort+0x1d2>
 8007942:	3318      	adds	r3, #24
 8007944:	429c      	cmp	r4, r3
 8007946:	f000 80a2 	beq.w	8007a8e <HAL_DMA_Abort+0x1d2>
 800794a:	3318      	adds	r3, #24
 800794c:	429c      	cmp	r4, r3
 800794e:	f000 809e 	beq.w	8007a8e <HAL_DMA_Abort+0x1d2>
 8007952:	3318      	adds	r3, #24
 8007954:	429c      	cmp	r4, r3
 8007956:	f000 809a 	beq.w	8007a8e <HAL_DMA_Abort+0x1d2>
 800795a:	3318      	adds	r3, #24
 800795c:	429c      	cmp	r4, r3
 800795e:	f000 8096 	beq.w	8007a8e <HAL_DMA_Abort+0x1d2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	f023 030e 	bic.w	r3, r3, #14
 8007968:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800796a:	4bac      	ldr	r3, [pc, #688]	; (8007c1c <HAL_DMA_Abort+0x360>)
 800796c:	429c      	cmp	r4, r3
 800796e:	f000 80c7 	beq.w	8007b00 <HAL_DMA_Abort+0x244>
 8007972:	3314      	adds	r3, #20
 8007974:	429c      	cmp	r4, r3
 8007976:	f000 80c3 	beq.w	8007b00 <HAL_DMA_Abort+0x244>
 800797a:	3314      	adds	r3, #20
 800797c:	429c      	cmp	r4, r3
 800797e:	f000 80bf 	beq.w	8007b00 <HAL_DMA_Abort+0x244>
 8007982:	3314      	adds	r3, #20
 8007984:	429c      	cmp	r4, r3
 8007986:	f000 80bb 	beq.w	8007b00 <HAL_DMA_Abort+0x244>
 800798a:	3314      	adds	r3, #20
 800798c:	429c      	cmp	r4, r3
 800798e:	f000 80b7 	beq.w	8007b00 <HAL_DMA_Abort+0x244>
 8007992:	3314      	adds	r3, #20
 8007994:	429c      	cmp	r4, r3
 8007996:	f000 80b3 	beq.w	8007b00 <HAL_DMA_Abort+0x244>
 800799a:	3314      	adds	r3, #20
 800799c:	429c      	cmp	r4, r3
 800799e:	f000 80af 	beq.w	8007b00 <HAL_DMA_Abort+0x244>
 80079a2:	3314      	adds	r3, #20
 80079a4:	429c      	cmp	r4, r3
 80079a6:	f000 80ab 	beq.w	8007b00 <HAL_DMA_Abort+0x244>
    __HAL_DMA_DISABLE(hdma);
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	f023 0301 	bic.w	r3, r3, #1
 80079b0:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	07db      	lsls	r3, r3, #31
 80079b6:	f100 80d5 	bmi.w	8007b64 <HAL_DMA_Abort+0x2a8>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079ba:	682b      	ldr	r3, [r5, #0]
 80079bc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80079be:	42b3      	cmp	r3, r6
 80079c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079c2:	f002 021f 	and.w	r2, r2, #31
 80079c6:	f000 80dc 	beq.w	8007b82 <HAL_DMA_Abort+0x2c6>
 80079ca:	4993      	ldr	r1, [pc, #588]	; (8007c18 <HAL_DMA_Abort+0x35c>)
 80079cc:	428b      	cmp	r3, r1
 80079ce:	f000 80d8 	beq.w	8007b82 <HAL_DMA_Abort+0x2c6>
 80079d2:	3118      	adds	r1, #24
 80079d4:	428b      	cmp	r3, r1
 80079d6:	f000 80d4 	beq.w	8007b82 <HAL_DMA_Abort+0x2c6>
 80079da:	3118      	adds	r1, #24
 80079dc:	428b      	cmp	r3, r1
 80079de:	f000 80d0 	beq.w	8007b82 <HAL_DMA_Abort+0x2c6>
 80079e2:	3118      	adds	r1, #24
 80079e4:	428b      	cmp	r3, r1
 80079e6:	f000 80cc 	beq.w	8007b82 <HAL_DMA_Abort+0x2c6>
 80079ea:	3118      	adds	r1, #24
 80079ec:	428b      	cmp	r3, r1
 80079ee:	f000 80c8 	beq.w	8007b82 <HAL_DMA_Abort+0x2c6>
 80079f2:	3118      	adds	r1, #24
 80079f4:	428b      	cmp	r3, r1
 80079f6:	f000 80c4 	beq.w	8007b82 <HAL_DMA_Abort+0x2c6>
 80079fa:	3118      	adds	r1, #24
 80079fc:	428b      	cmp	r3, r1
 80079fe:	f000 80c0 	beq.w	8007b82 <HAL_DMA_Abort+0x2c6>
 8007a02:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007a06:	428b      	cmp	r3, r1
 8007a08:	f000 80bb 	beq.w	8007b82 <HAL_DMA_Abort+0x2c6>
 8007a0c:	3118      	adds	r1, #24
 8007a0e:	428b      	cmp	r3, r1
 8007a10:	f000 80b7 	beq.w	8007b82 <HAL_DMA_Abort+0x2c6>
 8007a14:	3118      	adds	r1, #24
 8007a16:	428b      	cmp	r3, r1
 8007a18:	f000 80b3 	beq.w	8007b82 <HAL_DMA_Abort+0x2c6>
 8007a1c:	3118      	adds	r1, #24
 8007a1e:	428b      	cmp	r3, r1
 8007a20:	f000 80af 	beq.w	8007b82 <HAL_DMA_Abort+0x2c6>
 8007a24:	3118      	adds	r1, #24
 8007a26:	428b      	cmp	r3, r1
 8007a28:	f000 80ab 	beq.w	8007b82 <HAL_DMA_Abort+0x2c6>
 8007a2c:	3118      	adds	r1, #24
 8007a2e:	428b      	cmp	r3, r1
 8007a30:	f000 80a7 	beq.w	8007b82 <HAL_DMA_Abort+0x2c6>
 8007a34:	3118      	adds	r1, #24
 8007a36:	428b      	cmp	r3, r1
 8007a38:	f000 80a3 	beq.w	8007b82 <HAL_DMA_Abort+0x2c6>
 8007a3c:	3118      	adds	r1, #24
 8007a3e:	428b      	cmp	r3, r1
 8007a40:	f000 809f 	beq.w	8007b82 <HAL_DMA_Abort+0x2c6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007a44:	2101      	movs	r1, #1
 8007a46:	fa01 f202 	lsl.w	r2, r1, r2
 8007a4a:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a4c:	4a73      	ldr	r2, [pc, #460]	; (8007c1c <HAL_DMA_Abort+0x360>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	f000 809d 	beq.w	8007b8e <HAL_DMA_Abort+0x2d2>
 8007a54:	3214      	adds	r2, #20
 8007a56:	4293      	cmp	r3, r2
 8007a58:	f000 8099 	beq.w	8007b8e <HAL_DMA_Abort+0x2d2>
 8007a5c:	3214      	adds	r2, #20
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	f000 8095 	beq.w	8007b8e <HAL_DMA_Abort+0x2d2>
 8007a64:	3214      	adds	r2, #20
 8007a66:	4293      	cmp	r3, r2
 8007a68:	f000 8091 	beq.w	8007b8e <HAL_DMA_Abort+0x2d2>
 8007a6c:	3214      	adds	r2, #20
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	f000 808d 	beq.w	8007b8e <HAL_DMA_Abort+0x2d2>
 8007a74:	3214      	adds	r2, #20
 8007a76:	4293      	cmp	r3, r2
 8007a78:	f000 8089 	beq.w	8007b8e <HAL_DMA_Abort+0x2d2>
 8007a7c:	3214      	adds	r2, #20
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	f000 8085 	beq.w	8007b8e <HAL_DMA_Abort+0x2d2>
 8007a84:	3214      	adds	r2, #20
 8007a86:	4293      	cmp	r3, r2
 8007a88:	f040 8086 	bne.w	8007b98 <HAL_DMA_Abort+0x2dc>
 8007a8c:	e07f      	b.n	8007b8e <HAL_DMA_Abort+0x2d2>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007a8e:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a90:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007a92:	f023 031e 	bic.w	r3, r3, #30
 8007a96:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007a98:	6963      	ldr	r3, [r4, #20]
 8007a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a9e:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007aa0:	d02e      	beq.n	8007b00 <HAL_DMA_Abort+0x244>
 8007aa2:	4b5d      	ldr	r3, [pc, #372]	; (8007c18 <HAL_DMA_Abort+0x35c>)
 8007aa4:	429c      	cmp	r4, r3
 8007aa6:	d02b      	beq.n	8007b00 <HAL_DMA_Abort+0x244>
 8007aa8:	3318      	adds	r3, #24
 8007aaa:	429c      	cmp	r4, r3
 8007aac:	d028      	beq.n	8007b00 <HAL_DMA_Abort+0x244>
 8007aae:	3318      	adds	r3, #24
 8007ab0:	429c      	cmp	r4, r3
 8007ab2:	d025      	beq.n	8007b00 <HAL_DMA_Abort+0x244>
 8007ab4:	3318      	adds	r3, #24
 8007ab6:	429c      	cmp	r4, r3
 8007ab8:	d022      	beq.n	8007b00 <HAL_DMA_Abort+0x244>
 8007aba:	3318      	adds	r3, #24
 8007abc:	429c      	cmp	r4, r3
 8007abe:	d01f      	beq.n	8007b00 <HAL_DMA_Abort+0x244>
 8007ac0:	3318      	adds	r3, #24
 8007ac2:	429c      	cmp	r4, r3
 8007ac4:	d01c      	beq.n	8007b00 <HAL_DMA_Abort+0x244>
 8007ac6:	3318      	adds	r3, #24
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	d019      	beq.n	8007b00 <HAL_DMA_Abort+0x244>
 8007acc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007ad0:	429c      	cmp	r4, r3
 8007ad2:	d015      	beq.n	8007b00 <HAL_DMA_Abort+0x244>
 8007ad4:	3318      	adds	r3, #24
 8007ad6:	429c      	cmp	r4, r3
 8007ad8:	d012      	beq.n	8007b00 <HAL_DMA_Abort+0x244>
 8007ada:	3318      	adds	r3, #24
 8007adc:	429c      	cmp	r4, r3
 8007ade:	d00f      	beq.n	8007b00 <HAL_DMA_Abort+0x244>
 8007ae0:	3318      	adds	r3, #24
 8007ae2:	429c      	cmp	r4, r3
 8007ae4:	d00c      	beq.n	8007b00 <HAL_DMA_Abort+0x244>
 8007ae6:	3318      	adds	r3, #24
 8007ae8:	429c      	cmp	r4, r3
 8007aea:	d009      	beq.n	8007b00 <HAL_DMA_Abort+0x244>
 8007aec:	3318      	adds	r3, #24
 8007aee:	429c      	cmp	r4, r3
 8007af0:	d006      	beq.n	8007b00 <HAL_DMA_Abort+0x244>
 8007af2:	3318      	adds	r3, #24
 8007af4:	429c      	cmp	r4, r3
 8007af6:	d003      	beq.n	8007b00 <HAL_DMA_Abort+0x244>
 8007af8:	3318      	adds	r3, #24
 8007afa:	429c      	cmp	r4, r3
 8007afc:	f47f af35 	bne.w	800796a <HAL_DMA_Abort+0xae>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007b00:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    __HAL_DMA_DISABLE(hdma);
 8007b02:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007b04:	6813      	ldr	r3, [r2, #0]
 8007b06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b0a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8007b0c:	f43f af4d 	beq.w	80079aa <HAL_DMA_Abort+0xee>
 8007b10:	4b41      	ldr	r3, [pc, #260]	; (8007c18 <HAL_DMA_Abort+0x35c>)
 8007b12:	429c      	cmp	r4, r3
 8007b14:	f43f af49 	beq.w	80079aa <HAL_DMA_Abort+0xee>
 8007b18:	3318      	adds	r3, #24
 8007b1a:	429c      	cmp	r4, r3
 8007b1c:	f43f af45 	beq.w	80079aa <HAL_DMA_Abort+0xee>
 8007b20:	3318      	adds	r3, #24
 8007b22:	429c      	cmp	r4, r3
 8007b24:	f43f af41 	beq.w	80079aa <HAL_DMA_Abort+0xee>
 8007b28:	3318      	adds	r3, #24
 8007b2a:	429c      	cmp	r4, r3
 8007b2c:	f43f af3d 	beq.w	80079aa <HAL_DMA_Abort+0xee>
 8007b30:	3318      	adds	r3, #24
 8007b32:	429c      	cmp	r4, r3
 8007b34:	f43f af39 	beq.w	80079aa <HAL_DMA_Abort+0xee>
 8007b38:	3318      	adds	r3, #24
 8007b3a:	429c      	cmp	r4, r3
 8007b3c:	f43f af35 	beq.w	80079aa <HAL_DMA_Abort+0xee>
 8007b40:	3318      	adds	r3, #24
 8007b42:	429c      	cmp	r4, r3
 8007b44:	f43f af31 	beq.w	80079aa <HAL_DMA_Abort+0xee>
 8007b48:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007b4c:	429c      	cmp	r4, r3
 8007b4e:	f43f af2c 	beq.w	80079aa <HAL_DMA_Abort+0xee>
 8007b52:	3318      	adds	r3, #24
 8007b54:	429c      	cmp	r4, r3
 8007b56:	f43f af28 	beq.w	80079aa <HAL_DMA_Abort+0xee>
 8007b5a:	3318      	adds	r3, #24
 8007b5c:	429c      	cmp	r4, r3
 8007b5e:	f43f af24 	beq.w	80079aa <HAL_DMA_Abort+0xee>
 8007b62:	e722      	b.n	80079aa <HAL_DMA_Abort+0xee>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b64:	f7fe fb7c 	bl	8006260 <HAL_GetTick>
 8007b68:	1bc0      	subs	r0, r0, r7
 8007b6a:	2805      	cmp	r0, #5
 8007b6c:	f67f af21 	bls.w	80079b2 <HAL_DMA_Abort+0xf6>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b70:	2320      	movs	r3, #32
 8007b72:	656b      	str	r3, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8007b74:	2300      	movs	r3, #0
 8007b76:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 8007b80:	e6ab      	b.n	80078da <HAL_DMA_Abort+0x1e>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b82:	213f      	movs	r1, #63	; 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b84:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b86:	fa01 f202 	lsl.w	r2, r1, r2
 8007b8a:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b8c:	d10b      	bne.n	8007ba6 <HAL_DMA_Abort+0x2ea>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b8e:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	; 0x64
 8007b92:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8007b94:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8007b96:	bbab      	cbnz	r3, 8007c04 <HAL_DMA_Abort+0x348>
    __HAL_UNLOCK(hdma);
 8007b98:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8007b9a:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8007b9c:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8007ba0:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8007ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ba6:	4a1c      	ldr	r2, [pc, #112]	; (8007c18 <HAL_DMA_Abort+0x35c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d0f0      	beq.n	8007b8e <HAL_DMA_Abort+0x2d2>
 8007bac:	3218      	adds	r2, #24
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d0ed      	beq.n	8007b8e <HAL_DMA_Abort+0x2d2>
 8007bb2:	3218      	adds	r2, #24
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d0ea      	beq.n	8007b8e <HAL_DMA_Abort+0x2d2>
 8007bb8:	3218      	adds	r2, #24
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d0e7      	beq.n	8007b8e <HAL_DMA_Abort+0x2d2>
 8007bbe:	3218      	adds	r2, #24
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d0e4      	beq.n	8007b8e <HAL_DMA_Abort+0x2d2>
 8007bc4:	3218      	adds	r2, #24
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d0e1      	beq.n	8007b8e <HAL_DMA_Abort+0x2d2>
 8007bca:	3218      	adds	r2, #24
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d0de      	beq.n	8007b8e <HAL_DMA_Abort+0x2d2>
 8007bd0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d0da      	beq.n	8007b8e <HAL_DMA_Abort+0x2d2>
 8007bd8:	3218      	adds	r2, #24
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d0d7      	beq.n	8007b8e <HAL_DMA_Abort+0x2d2>
 8007bde:	3218      	adds	r2, #24
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d0d4      	beq.n	8007b8e <HAL_DMA_Abort+0x2d2>
 8007be4:	3218      	adds	r2, #24
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d0d1      	beq.n	8007b8e <HAL_DMA_Abort+0x2d2>
 8007bea:	3218      	adds	r2, #24
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d0ce      	beq.n	8007b8e <HAL_DMA_Abort+0x2d2>
 8007bf0:	3218      	adds	r2, #24
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d0cb      	beq.n	8007b8e <HAL_DMA_Abort+0x2d2>
 8007bf6:	3218      	adds	r2, #24
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d0c8      	beq.n	8007b8e <HAL_DMA_Abort+0x2d2>
 8007bfc:	3218      	adds	r2, #24
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d0c5      	beq.n	8007b8e <HAL_DMA_Abort+0x2d2>
 8007c02:	e723      	b.n	8007a4c <HAL_DMA_Abort+0x190>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c0a:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c0c:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 8007c10:	605a      	str	r2, [r3, #4]
 8007c12:	e7c1      	b.n	8007b98 <HAL_DMA_Abort+0x2dc>
 8007c14:	40020010 	.word	0x40020010
 8007c18:	40020028 	.word	0x40020028
 8007c1c:	58025408 	.word	0x58025408

08007c20 <HAL_DMA_Abort_IT>:
{
 8007c20:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8007c22:	b128      	cbz	r0, 8007c30 <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c24:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d003      	beq.n	8007c34 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c2c:	2380      	movs	r3, #128	; 0x80
 8007c2e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8007c30:	2001      	movs	r0, #1
 8007c32:	e07f      	b.n	8007d34 <HAL_DMA_Abort_IT+0x114>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c34:	6803      	ldr	r3, [r0, #0]
 8007c36:	4a50      	ldr	r2, [pc, #320]	; (8007d78 <HAL_DMA_Abort_IT+0x158>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d052      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0xc2>
 8007c3c:	494f      	ldr	r1, [pc, #316]	; (8007d7c <HAL_DMA_Abort_IT+0x15c>)
 8007c3e:	428b      	cmp	r3, r1
 8007c40:	d04f      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0xc2>
 8007c42:	3118      	adds	r1, #24
 8007c44:	428b      	cmp	r3, r1
 8007c46:	d04c      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0xc2>
 8007c48:	3118      	adds	r1, #24
 8007c4a:	428b      	cmp	r3, r1
 8007c4c:	d049      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0xc2>
 8007c4e:	3118      	adds	r1, #24
 8007c50:	428b      	cmp	r3, r1
 8007c52:	d046      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0xc2>
 8007c54:	3118      	adds	r1, #24
 8007c56:	428b      	cmp	r3, r1
 8007c58:	d043      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0xc2>
 8007c5a:	3118      	adds	r1, #24
 8007c5c:	428b      	cmp	r3, r1
 8007c5e:	d040      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0xc2>
 8007c60:	3118      	adds	r1, #24
 8007c62:	428b      	cmp	r3, r1
 8007c64:	d03d      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0xc2>
 8007c66:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007c6a:	428b      	cmp	r3, r1
 8007c6c:	d039      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0xc2>
 8007c6e:	3118      	adds	r1, #24
 8007c70:	428b      	cmp	r3, r1
 8007c72:	d036      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0xc2>
 8007c74:	3118      	adds	r1, #24
 8007c76:	428b      	cmp	r3, r1
 8007c78:	d033      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0xc2>
 8007c7a:	3118      	adds	r1, #24
 8007c7c:	428b      	cmp	r3, r1
 8007c7e:	d030      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0xc2>
 8007c80:	3118      	adds	r1, #24
 8007c82:	428b      	cmp	r3, r1
 8007c84:	d02d      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0xc2>
 8007c86:	3118      	adds	r1, #24
 8007c88:	428b      	cmp	r3, r1
 8007c8a:	d02a      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0xc2>
 8007c8c:	3118      	adds	r1, #24
 8007c8e:	428b      	cmp	r3, r1
 8007c90:	d027      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0xc2>
 8007c92:	3118      	adds	r1, #24
 8007c94:	428b      	cmp	r3, r1
 8007c96:	d024      	beq.n	8007ce2 <HAL_DMA_Abort_IT+0xc2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	f022 020e 	bic.w	r2, r2, #14
 8007c9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	f022 0201 	bic.w	r2, r2, #1
 8007ca6:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ca8:	4a35      	ldr	r2, [pc, #212]	; (8007d80 <HAL_DMA_Abort_IT+0x160>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d143      	bne.n	8007d36 <HAL_DMA_Abort_IT+0x116>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007cae:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8007cb0:	6813      	ldr	r3, [r2, #0]
 8007cb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cb6:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007cb8:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	; 0x58
 8007cbc:	f003 021f 	and.w	r2, r3, #31
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	4093      	lsls	r3, r2
 8007cc4:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007cc6:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
 8007cca:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8007ccc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d046      	beq.n	8007d60 <HAL_DMA_Abort_IT+0x140>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cd8:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007cda:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	; 0x70
 8007cde:	605a      	str	r2, [r3, #4]
 8007ce0:	e03e      	b.n	8007d60 <HAL_DMA_Abort_IT+0x140>
      hdma->State = HAL_DMA_STATE_ABORT;
 8007ce2:	2104      	movs	r1, #4
      __HAL_DMA_DISABLE(hdma);
 8007ce4:	4293      	cmp	r3, r2
      hdma->State = HAL_DMA_STATE_ABORT;
 8007ce6:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8007cea:	d01e      	beq.n	8007d2a <HAL_DMA_Abort_IT+0x10a>
 8007cec:	4a23      	ldr	r2, [pc, #140]	; (8007d7c <HAL_DMA_Abort_IT+0x15c>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d01b      	beq.n	8007d2a <HAL_DMA_Abort_IT+0x10a>
 8007cf2:	3218      	adds	r2, #24
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d018      	beq.n	8007d2a <HAL_DMA_Abort_IT+0x10a>
 8007cf8:	3218      	adds	r2, #24
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d015      	beq.n	8007d2a <HAL_DMA_Abort_IT+0x10a>
 8007cfe:	3218      	adds	r2, #24
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d012      	beq.n	8007d2a <HAL_DMA_Abort_IT+0x10a>
 8007d04:	3218      	adds	r2, #24
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d00f      	beq.n	8007d2a <HAL_DMA_Abort_IT+0x10a>
 8007d0a:	3218      	adds	r2, #24
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d00c      	beq.n	8007d2a <HAL_DMA_Abort_IT+0x10a>
 8007d10:	3218      	adds	r2, #24
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d009      	beq.n	8007d2a <HAL_DMA_Abort_IT+0x10a>
 8007d16:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d005      	beq.n	8007d2a <HAL_DMA_Abort_IT+0x10a>
 8007d1e:	3218      	adds	r2, #24
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d002      	beq.n	8007d2a <HAL_DMA_Abort_IT+0x10a>
 8007d24:	3218      	adds	r2, #24
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d0ff      	beq.n	8007d2a <HAL_DMA_Abort_IT+0x10a>
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	f022 0201 	bic.w	r2, r2, #1
 8007d30:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007d32:	2000      	movs	r0, #0
}
 8007d34:	bd10      	pop	{r4, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d36:	4a13      	ldr	r2, [pc, #76]	; (8007d84 <HAL_DMA_Abort_IT+0x164>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d0b8      	beq.n	8007cae <HAL_DMA_Abort_IT+0x8e>
 8007d3c:	3214      	adds	r2, #20
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d0b5      	beq.n	8007cae <HAL_DMA_Abort_IT+0x8e>
 8007d42:	3214      	adds	r2, #20
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d0b2      	beq.n	8007cae <HAL_DMA_Abort_IT+0x8e>
 8007d48:	3214      	adds	r2, #20
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d0af      	beq.n	8007cae <HAL_DMA_Abort_IT+0x8e>
 8007d4e:	3214      	adds	r2, #20
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d0ac      	beq.n	8007cae <HAL_DMA_Abort_IT+0x8e>
 8007d54:	3214      	adds	r2, #20
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d0a9      	beq.n	8007cae <HAL_DMA_Abort_IT+0x8e>
 8007d5a:	3214      	adds	r2, #20
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d0a6      	beq.n	8007cae <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 8007d60:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8007d62:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8007d64:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8007d68:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8007d6a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8007d6e:	b10b      	cbz	r3, 8007d74 <HAL_DMA_Abort_IT+0x154>
        hdma->XferAbortCallback(hdma);
 8007d70:	4798      	blx	r3
 8007d72:	e7de      	b.n	8007d32 <HAL_DMA_Abort_IT+0x112>
  return HAL_OK;
 8007d74:	4618      	mov	r0, r3
 8007d76:	e7dd      	b.n	8007d34 <HAL_DMA_Abort_IT+0x114>
 8007d78:	40020010 	.word	0x40020010
 8007d7c:	40020028 	.word	0x40020028
 8007d80:	58025408 	.word	0x58025408
 8007d84:	5802541c 	.word	0x5802541c

08007d88 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 8007d88:	2300      	movs	r3, #0
{
 8007d8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8007d8e:	9301      	str	r3, [sp, #4]
{
 8007d90:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d92:	4bb4      	ldr	r3, [pc, #720]	; (8008064 <HAL_DMA_IRQHandler+0x2dc>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007d94:	4eb4      	ldr	r6, [pc, #720]	; (8008068 <HAL_DMA_IRQHandler+0x2e0>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d96:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007d98:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d9a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007d9c:	42b3      	cmp	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 8007d9e:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 8007da2:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007da6:	d047      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xb0>
 8007da8:	4ab0      	ldr	r2, [pc, #704]	; (800806c <HAL_DMA_IRQHandler+0x2e4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d044      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xb0>
 8007dae:	3218      	adds	r2, #24
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d041      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xb0>
 8007db4:	3218      	adds	r2, #24
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d03e      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xb0>
 8007dba:	3218      	adds	r2, #24
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d03b      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xb0>
 8007dc0:	3218      	adds	r2, #24
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d038      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xb0>
 8007dc6:	3218      	adds	r2, #24
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d035      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xb0>
 8007dcc:	3218      	adds	r2, #24
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d032      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xb0>
 8007dd2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d02e      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xb0>
 8007dda:	3218      	adds	r2, #24
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d02b      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xb0>
 8007de0:	3218      	adds	r2, #24
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d028      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xb0>
 8007de6:	3218      	adds	r2, #24
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d025      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xb0>
 8007dec:	3218      	adds	r2, #24
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d022      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xb0>
 8007df2:	3218      	adds	r2, #24
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d01f      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xb0>
 8007df8:	3218      	adds	r2, #24
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d01c      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xb0>
 8007dfe:	3218      	adds	r2, #24
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d019      	beq.n	8007e38 <HAL_DMA_IRQHandler+0xb0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007e04:	4a9a      	ldr	r2, [pc, #616]	; (8008070 <HAL_DMA_IRQHandler+0x2e8>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	f040 820a 	bne.w	8008220 <HAL_DMA_IRQHandler+0x498>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007e0c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007e0e:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007e10:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007e12:	f001 011f 	and.w	r1, r1, #31
 8007e16:	4088      	lsls	r0, r1
 8007e18:	ea10 0f0c 	tst.w	r0, ip
 8007e1c:	f000 8227 	beq.w	800826e <HAL_DMA_IRQHandler+0x4e6>
 8007e20:	0756      	lsls	r6, r2, #29
 8007e22:	f140 8224 	bpl.w	800826e <HAL_DMA_IRQHandler+0x4e6>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e26:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007e28:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e2a:	f140 8218 	bpl.w	800825e <HAL_DMA_IRQHandler+0x4d6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007e2e:	03d3      	lsls	r3, r2, #15
 8007e30:	f100 821b 	bmi.w	800826a <HAL_DMA_IRQHandler+0x4e2>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007e34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007e36:	e17f      	b.n	8008138 <HAL_DMA_IRQHandler+0x3b0>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e38:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007e3a:	2008      	movs	r0, #8
 8007e3c:	f002 021f 	and.w	r2, r2, #31
 8007e40:	4090      	lsls	r0, r2
 8007e42:	ea10 0f08 	tst.w	r0, r8
 8007e46:	d03d      	beq.n	8007ec4 <HAL_DMA_IRQHandler+0x13c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007e48:	42b3      	cmp	r3, r6
 8007e4a:	d02e      	beq.n	8007eaa <HAL_DMA_IRQHandler+0x122>
 8007e4c:	4987      	ldr	r1, [pc, #540]	; (800806c <HAL_DMA_IRQHandler+0x2e4>)
 8007e4e:	428b      	cmp	r3, r1
 8007e50:	d02b      	beq.n	8007eaa <HAL_DMA_IRQHandler+0x122>
 8007e52:	3118      	adds	r1, #24
 8007e54:	428b      	cmp	r3, r1
 8007e56:	d028      	beq.n	8007eaa <HAL_DMA_IRQHandler+0x122>
 8007e58:	3118      	adds	r1, #24
 8007e5a:	428b      	cmp	r3, r1
 8007e5c:	d025      	beq.n	8007eaa <HAL_DMA_IRQHandler+0x122>
 8007e5e:	3118      	adds	r1, #24
 8007e60:	428b      	cmp	r3, r1
 8007e62:	d022      	beq.n	8007eaa <HAL_DMA_IRQHandler+0x122>
 8007e64:	3118      	adds	r1, #24
 8007e66:	428b      	cmp	r3, r1
 8007e68:	d01f      	beq.n	8007eaa <HAL_DMA_IRQHandler+0x122>
 8007e6a:	3118      	adds	r1, #24
 8007e6c:	428b      	cmp	r3, r1
 8007e6e:	d01c      	beq.n	8007eaa <HAL_DMA_IRQHandler+0x122>
 8007e70:	3118      	adds	r1, #24
 8007e72:	428b      	cmp	r3, r1
 8007e74:	d019      	beq.n	8007eaa <HAL_DMA_IRQHandler+0x122>
 8007e76:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007e7a:	428b      	cmp	r3, r1
 8007e7c:	d015      	beq.n	8007eaa <HAL_DMA_IRQHandler+0x122>
 8007e7e:	3118      	adds	r1, #24
 8007e80:	428b      	cmp	r3, r1
 8007e82:	d012      	beq.n	8007eaa <HAL_DMA_IRQHandler+0x122>
 8007e84:	3118      	adds	r1, #24
 8007e86:	428b      	cmp	r3, r1
 8007e88:	d00f      	beq.n	8007eaa <HAL_DMA_IRQHandler+0x122>
 8007e8a:	3118      	adds	r1, #24
 8007e8c:	428b      	cmp	r3, r1
 8007e8e:	d00c      	beq.n	8007eaa <HAL_DMA_IRQHandler+0x122>
 8007e90:	3118      	adds	r1, #24
 8007e92:	428b      	cmp	r3, r1
 8007e94:	d009      	beq.n	8007eaa <HAL_DMA_IRQHandler+0x122>
 8007e96:	3118      	adds	r1, #24
 8007e98:	428b      	cmp	r3, r1
 8007e9a:	d006      	beq.n	8007eaa <HAL_DMA_IRQHandler+0x122>
 8007e9c:	3118      	adds	r1, #24
 8007e9e:	428b      	cmp	r3, r1
 8007ea0:	d003      	beq.n	8007eaa <HAL_DMA_IRQHandler+0x122>
 8007ea2:	3118      	adds	r1, #24
 8007ea4:	428b      	cmp	r3, r1
 8007ea6:	f040 80c3 	bne.w	8008030 <HAL_DMA_IRQHandler+0x2a8>
 8007eaa:	6819      	ldr	r1, [r3, #0]
 8007eac:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8007eb0:	b141      	cbz	r1, 8007ec4 <HAL_DMA_IRQHandler+0x13c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007eb2:	6819      	ldr	r1, [r3, #0]
 8007eb4:	f021 0104 	bic.w	r1, r1, #4
 8007eb8:	6019      	str	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007eba:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007ebc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007ebe:	f041 0101 	orr.w	r1, r1, #1
 8007ec2:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ec4:	fa28 f102 	lsr.w	r1, r8, r2
 8007ec8:	07c8      	lsls	r0, r1, #31
 8007eca:	d534      	bpl.n	8007f36 <HAL_DMA_IRQHandler+0x1ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007ecc:	42b3      	cmp	r3, r6
 8007ece:	d02e      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x1a6>
 8007ed0:	4966      	ldr	r1, [pc, #408]	; (800806c <HAL_DMA_IRQHandler+0x2e4>)
 8007ed2:	428b      	cmp	r3, r1
 8007ed4:	d02b      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x1a6>
 8007ed6:	3118      	adds	r1, #24
 8007ed8:	428b      	cmp	r3, r1
 8007eda:	d028      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x1a6>
 8007edc:	3118      	adds	r1, #24
 8007ede:	428b      	cmp	r3, r1
 8007ee0:	d025      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x1a6>
 8007ee2:	3118      	adds	r1, #24
 8007ee4:	428b      	cmp	r3, r1
 8007ee6:	d022      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x1a6>
 8007ee8:	3118      	adds	r1, #24
 8007eea:	428b      	cmp	r3, r1
 8007eec:	d01f      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x1a6>
 8007eee:	3118      	adds	r1, #24
 8007ef0:	428b      	cmp	r3, r1
 8007ef2:	d01c      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x1a6>
 8007ef4:	3118      	adds	r1, #24
 8007ef6:	428b      	cmp	r3, r1
 8007ef8:	d019      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x1a6>
 8007efa:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007efe:	428b      	cmp	r3, r1
 8007f00:	d015      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x1a6>
 8007f02:	3118      	adds	r1, #24
 8007f04:	428b      	cmp	r3, r1
 8007f06:	d012      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x1a6>
 8007f08:	3118      	adds	r1, #24
 8007f0a:	428b      	cmp	r3, r1
 8007f0c:	d00f      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x1a6>
 8007f0e:	3118      	adds	r1, #24
 8007f10:	428b      	cmp	r3, r1
 8007f12:	d00c      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x1a6>
 8007f14:	3118      	adds	r1, #24
 8007f16:	428b      	cmp	r3, r1
 8007f18:	d009      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x1a6>
 8007f1a:	3118      	adds	r1, #24
 8007f1c:	428b      	cmp	r3, r1
 8007f1e:	d006      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x1a6>
 8007f20:	3118      	adds	r1, #24
 8007f22:	428b      	cmp	r3, r1
 8007f24:	d003      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x1a6>
 8007f26:	3118      	adds	r1, #24
 8007f28:	428b      	cmp	r3, r1
 8007f2a:	f040 8085 	bne.w	8008038 <HAL_DMA_IRQHandler+0x2b0>
 8007f2e:	6959      	ldr	r1, [r3, #20]
 8007f30:	0609      	lsls	r1, r1, #24
 8007f32:	f100 8083 	bmi.w	800803c <HAL_DMA_IRQHandler+0x2b4>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f36:	2104      	movs	r1, #4
 8007f38:	4091      	lsls	r1, r2
 8007f3a:	ea11 0f08 	tst.w	r1, r8
 8007f3e:	d032      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x21e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007f40:	42b3      	cmp	r3, r6
 8007f42:	d02d      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x218>
 8007f44:	4849      	ldr	r0, [pc, #292]	; (800806c <HAL_DMA_IRQHandler+0x2e4>)
 8007f46:	4283      	cmp	r3, r0
 8007f48:	d02a      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x218>
 8007f4a:	3018      	adds	r0, #24
 8007f4c:	4283      	cmp	r3, r0
 8007f4e:	d027      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x218>
 8007f50:	3018      	adds	r0, #24
 8007f52:	4283      	cmp	r3, r0
 8007f54:	d024      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x218>
 8007f56:	3018      	adds	r0, #24
 8007f58:	4283      	cmp	r3, r0
 8007f5a:	d021      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x218>
 8007f5c:	3018      	adds	r0, #24
 8007f5e:	4283      	cmp	r3, r0
 8007f60:	d01e      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x218>
 8007f62:	3018      	adds	r0, #24
 8007f64:	4283      	cmp	r3, r0
 8007f66:	d01b      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x218>
 8007f68:	3018      	adds	r0, #24
 8007f6a:	4283      	cmp	r3, r0
 8007f6c:	d018      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x218>
 8007f6e:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8007f72:	4283      	cmp	r3, r0
 8007f74:	d014      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x218>
 8007f76:	3018      	adds	r0, #24
 8007f78:	4283      	cmp	r3, r0
 8007f7a:	d011      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x218>
 8007f7c:	3018      	adds	r0, #24
 8007f7e:	4283      	cmp	r3, r0
 8007f80:	d00e      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x218>
 8007f82:	3018      	adds	r0, #24
 8007f84:	4283      	cmp	r3, r0
 8007f86:	d00b      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x218>
 8007f88:	3018      	adds	r0, #24
 8007f8a:	4283      	cmp	r3, r0
 8007f8c:	d008      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x218>
 8007f8e:	3018      	adds	r0, #24
 8007f90:	4283      	cmp	r3, r0
 8007f92:	d005      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x218>
 8007f94:	3018      	adds	r0, #24
 8007f96:	4283      	cmp	r3, r0
 8007f98:	d002      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x218>
 8007f9a:	3018      	adds	r0, #24
 8007f9c:	4283      	cmp	r3, r0
 8007f9e:	d155      	bne.n	800804c <HAL_DMA_IRQHandler+0x2c4>
 8007fa0:	6818      	ldr	r0, [r3, #0]
 8007fa2:	0780      	lsls	r0, r0, #30
 8007fa4:	d454      	bmi.n	8008050 <HAL_DMA_IRQHandler+0x2c8>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fa6:	2110      	movs	r1, #16
 8007fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8007fac:	ea12 0f08 	tst.w	r2, r8
 8007fb0:	d064      	beq.n	800807c <HAL_DMA_IRQHandler+0x2f4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007fb2:	42b3      	cmp	r3, r6
 8007fb4:	d02d      	beq.n	8008012 <HAL_DMA_IRQHandler+0x28a>
 8007fb6:	492d      	ldr	r1, [pc, #180]	; (800806c <HAL_DMA_IRQHandler+0x2e4>)
 8007fb8:	428b      	cmp	r3, r1
 8007fba:	d02a      	beq.n	8008012 <HAL_DMA_IRQHandler+0x28a>
 8007fbc:	3118      	adds	r1, #24
 8007fbe:	428b      	cmp	r3, r1
 8007fc0:	d027      	beq.n	8008012 <HAL_DMA_IRQHandler+0x28a>
 8007fc2:	3118      	adds	r1, #24
 8007fc4:	428b      	cmp	r3, r1
 8007fc6:	d024      	beq.n	8008012 <HAL_DMA_IRQHandler+0x28a>
 8007fc8:	3118      	adds	r1, #24
 8007fca:	428b      	cmp	r3, r1
 8007fcc:	d021      	beq.n	8008012 <HAL_DMA_IRQHandler+0x28a>
 8007fce:	3118      	adds	r1, #24
 8007fd0:	428b      	cmp	r3, r1
 8007fd2:	d01e      	beq.n	8008012 <HAL_DMA_IRQHandler+0x28a>
 8007fd4:	3118      	adds	r1, #24
 8007fd6:	428b      	cmp	r3, r1
 8007fd8:	d01b      	beq.n	8008012 <HAL_DMA_IRQHandler+0x28a>
 8007fda:	3118      	adds	r1, #24
 8007fdc:	428b      	cmp	r3, r1
 8007fde:	d018      	beq.n	8008012 <HAL_DMA_IRQHandler+0x28a>
 8007fe0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007fe4:	428b      	cmp	r3, r1
 8007fe6:	d014      	beq.n	8008012 <HAL_DMA_IRQHandler+0x28a>
 8007fe8:	3118      	adds	r1, #24
 8007fea:	428b      	cmp	r3, r1
 8007fec:	d011      	beq.n	8008012 <HAL_DMA_IRQHandler+0x28a>
 8007fee:	3118      	adds	r1, #24
 8007ff0:	428b      	cmp	r3, r1
 8007ff2:	d00e      	beq.n	8008012 <HAL_DMA_IRQHandler+0x28a>
 8007ff4:	3118      	adds	r1, #24
 8007ff6:	428b      	cmp	r3, r1
 8007ff8:	d00b      	beq.n	8008012 <HAL_DMA_IRQHandler+0x28a>
 8007ffa:	3118      	adds	r1, #24
 8007ffc:	428b      	cmp	r3, r1
 8007ffe:	d008      	beq.n	8008012 <HAL_DMA_IRQHandler+0x28a>
 8008000:	3118      	adds	r1, #24
 8008002:	428b      	cmp	r3, r1
 8008004:	d005      	beq.n	8008012 <HAL_DMA_IRQHandler+0x28a>
 8008006:	3118      	adds	r1, #24
 8008008:	428b      	cmp	r3, r1
 800800a:	d002      	beq.n	8008012 <HAL_DMA_IRQHandler+0x28a>
 800800c:	3118      	adds	r1, #24
 800800e:	428b      	cmp	r3, r1
 8008010:	d124      	bne.n	800805c <HAL_DMA_IRQHandler+0x2d4>
 8008012:	6819      	ldr	r1, [r3, #0]
 8008014:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8008018:	2900      	cmp	r1, #0
 800801a:	d02f      	beq.n	800807c <HAL_DMA_IRQHandler+0x2f4>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800801c:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	0350      	lsls	r0, r2, #13
 8008022:	f140 8091 	bpl.w	8008148 <HAL_DMA_IRQHandler+0x3c0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	0319      	lsls	r1, r3, #12
 800802a:	d423      	bmi.n	8008074 <HAL_DMA_IRQHandler+0x2ec>
          if(hdma->XferHalfCpltCallback != NULL)
 800802c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800802e:	e022      	b.n	8008076 <HAL_DMA_IRQHandler+0x2ee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008030:	6819      	ldr	r1, [r3, #0]
 8008032:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8008036:	e73b      	b.n	8007eb0 <HAL_DMA_IRQHandler+0x128>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008038:	6819      	ldr	r1, [r3, #0]
 800803a:	e77c      	b.n	8007f36 <HAL_DMA_IRQHandler+0x1ae>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800803c:	2101      	movs	r1, #1
 800803e:	4091      	lsls	r1, r2
 8008040:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008042:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008044:	f041 0102 	orr.w	r1, r1, #2
 8008048:	6561      	str	r1, [r4, #84]	; 0x54
 800804a:	e774      	b.n	8007f36 <HAL_DMA_IRQHandler+0x1ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800804c:	6819      	ldr	r1, [r3, #0]
 800804e:	e7aa      	b.n	8007fa6 <HAL_DMA_IRQHandler+0x21e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008050:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008052:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008054:	f041 0104 	orr.w	r1, r1, #4
 8008058:	6561      	str	r1, [r4, #84]	; 0x54
 800805a:	e7a4      	b.n	8007fa6 <HAL_DMA_IRQHandler+0x21e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800805c:	6819      	ldr	r1, [r3, #0]
 800805e:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8008062:	e7d9      	b.n	8008018 <HAL_DMA_IRQHandler+0x290>
 8008064:	24000000 	.word	0x24000000
 8008068:	40020010 	.word	0x40020010
 800806c:	40020028 	.word	0x40020028
 8008070:	58025408 	.word	0x58025408
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008074:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8008076:	b10b      	cbz	r3, 800807c <HAL_DMA_IRQHandler+0x2f4>
            hdma->XferHalfCpltCallback(hdma);
 8008078:	4620      	mov	r0, r4
 800807a:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800807c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800807e:	2020      	movs	r0, #32
 8008080:	f001 011f 	and.w	r1, r1, #31
 8008084:	4088      	lsls	r0, r1
 8008086:	ea10 0f08 	tst.w	r0, r8
 800808a:	d073      	beq.n	8008174 <HAL_DMA_IRQHandler+0x3ec>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	42b3      	cmp	r3, r6
 8008090:	d02d      	beq.n	80080ee <HAL_DMA_IRQHandler+0x366>
 8008092:	4a8f      	ldr	r2, [pc, #572]	; (80082d0 <HAL_DMA_IRQHandler+0x548>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d02a      	beq.n	80080ee <HAL_DMA_IRQHandler+0x366>
 8008098:	3218      	adds	r2, #24
 800809a:	4293      	cmp	r3, r2
 800809c:	d027      	beq.n	80080ee <HAL_DMA_IRQHandler+0x366>
 800809e:	3218      	adds	r2, #24
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d024      	beq.n	80080ee <HAL_DMA_IRQHandler+0x366>
 80080a4:	3218      	adds	r2, #24
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d021      	beq.n	80080ee <HAL_DMA_IRQHandler+0x366>
 80080aa:	3218      	adds	r2, #24
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d01e      	beq.n	80080ee <HAL_DMA_IRQHandler+0x366>
 80080b0:	3218      	adds	r2, #24
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d01b      	beq.n	80080ee <HAL_DMA_IRQHandler+0x366>
 80080b6:	3218      	adds	r2, #24
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d018      	beq.n	80080ee <HAL_DMA_IRQHandler+0x366>
 80080bc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d014      	beq.n	80080ee <HAL_DMA_IRQHandler+0x366>
 80080c4:	3218      	adds	r2, #24
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d011      	beq.n	80080ee <HAL_DMA_IRQHandler+0x366>
 80080ca:	3218      	adds	r2, #24
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d00e      	beq.n	80080ee <HAL_DMA_IRQHandler+0x366>
 80080d0:	3218      	adds	r2, #24
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d00b      	beq.n	80080ee <HAL_DMA_IRQHandler+0x366>
 80080d6:	3218      	adds	r2, #24
 80080d8:	4293      	cmp	r3, r2
 80080da:	d008      	beq.n	80080ee <HAL_DMA_IRQHandler+0x366>
 80080dc:	3218      	adds	r2, #24
 80080de:	4293      	cmp	r3, r2
 80080e0:	d005      	beq.n	80080ee <HAL_DMA_IRQHandler+0x366>
 80080e2:	3218      	adds	r2, #24
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d002      	beq.n	80080ee <HAL_DMA_IRQHandler+0x366>
 80080e8:	3218      	adds	r2, #24
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d135      	bne.n	800815a <HAL_DMA_IRQHandler+0x3d2>
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80080f4:	2a00      	cmp	r2, #0
 80080f6:	d03d      	beq.n	8008174 <HAL_DMA_IRQHandler+0x3ec>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80080f8:	60a8      	str	r0, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80080fa:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80080fe:	2a04      	cmp	r2, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008100:	681a      	ldr	r2, [r3, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008102:	d12e      	bne.n	8008162 <HAL_DMA_IRQHandler+0x3da>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008104:	f022 0216 	bic.w	r2, r2, #22
 8008108:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800810a:	695a      	ldr	r2, [r3, #20]
 800810c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008110:	615a      	str	r2, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008112:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008114:	b90a      	cbnz	r2, 800811a <HAL_DMA_IRQHandler+0x392>
 8008116:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008118:	b11a      	cbz	r2, 8008122 <HAL_DMA_IRQHandler+0x39a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	f022 0208 	bic.w	r2, r2, #8
 8008120:	601a      	str	r2, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008122:	233f      	movs	r3, #63	; 0x3f
 8008124:	fa03 f101 	lsl.w	r1, r3, r1
          __HAL_UNLOCK(hdma);
 8008128:	2300      	movs	r3, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800812a:	60a9      	str	r1, [r5, #8]
          __HAL_UNLOCK(hdma);
 800812c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8008130:	2301      	movs	r3, #1
 8008132:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8008136:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (hdma->XferErrorCallback != NULL)
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 808d 	beq.w	8008258 <HAL_DMA_IRQHandler+0x4d0>
        hdma->XferErrorCallback(hdma);
 800813e:	4620      	mov	r0, r4
}
 8008140:	b002      	add	sp, #8
 8008142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8008146:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	05d2      	lsls	r2, r2, #23
 800814c:	f53f af6e 	bmi.w	800802c <HAL_DMA_IRQHandler+0x2a4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	f022 0208 	bic.w	r2, r2, #8
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	e768      	b.n	800802c <HAL_DMA_IRQHandler+0x2a4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8008160:	e7c8      	b.n	80080f4 <HAL_DMA_IRQHandler+0x36c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008162:	0355      	lsls	r5, r2, #13
 8008164:	d54d      	bpl.n	8008202 <HAL_DMA_IRQHandler+0x47a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	0318      	lsls	r0, r3, #12
 800816a:	d457      	bmi.n	800821c <HAL_DMA_IRQHandler+0x494>
            if(hdma->XferM1CpltCallback != NULL)
 800816c:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if(hdma->XferCpltCallback != NULL)
 800816e:	b10b      	cbz	r3, 8008174 <HAL_DMA_IRQHandler+0x3ec>
            hdma->XferCpltCallback(hdma);
 8008170:	4620      	mov	r0, r4
 8008172:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008174:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008176:	2b00      	cmp	r3, #0
 8008178:	d06e      	beq.n	8008258 <HAL_DMA_IRQHandler+0x4d0>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800817a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800817c:	07d9      	lsls	r1, r3, #31
 800817e:	d53e      	bpl.n	80081fe <HAL_DMA_IRQHandler+0x476>
        hdma->State = HAL_DMA_STATE_ABORT;
 8008180:	2304      	movs	r3, #4
 8008182:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	42b3      	cmp	r3, r6
 800818a:	d01e      	beq.n	80081ca <HAL_DMA_IRQHandler+0x442>
 800818c:	4a50      	ldr	r2, [pc, #320]	; (80082d0 <HAL_DMA_IRQHandler+0x548>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d01b      	beq.n	80081ca <HAL_DMA_IRQHandler+0x442>
 8008192:	3218      	adds	r2, #24
 8008194:	4293      	cmp	r3, r2
 8008196:	d018      	beq.n	80081ca <HAL_DMA_IRQHandler+0x442>
 8008198:	3218      	adds	r2, #24
 800819a:	4293      	cmp	r3, r2
 800819c:	d015      	beq.n	80081ca <HAL_DMA_IRQHandler+0x442>
 800819e:	3218      	adds	r2, #24
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d012      	beq.n	80081ca <HAL_DMA_IRQHandler+0x442>
 80081a4:	3218      	adds	r2, #24
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d00f      	beq.n	80081ca <HAL_DMA_IRQHandler+0x442>
 80081aa:	3218      	adds	r2, #24
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d00c      	beq.n	80081ca <HAL_DMA_IRQHandler+0x442>
 80081b0:	3218      	adds	r2, #24
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d009      	beq.n	80081ca <HAL_DMA_IRQHandler+0x442>
 80081b6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d005      	beq.n	80081ca <HAL_DMA_IRQHandler+0x442>
 80081be:	3218      	adds	r2, #24
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d002      	beq.n	80081ca <HAL_DMA_IRQHandler+0x442>
 80081c4:	3218      	adds	r2, #24
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d0ff      	beq.n	80081ca <HAL_DMA_IRQHandler+0x442>
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	f022 0201 	bic.w	r2, r2, #1
 80081d0:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80081d2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80081d6:	fbb7 f7f2 	udiv	r7, r7, r2
          if (++count > timeout)
 80081da:	9a01      	ldr	r2, [sp, #4]
 80081dc:	3201      	adds	r2, #1
 80081de:	42ba      	cmp	r2, r7
 80081e0:	9201      	str	r2, [sp, #4]
 80081e2:	d802      	bhi.n	80081ea <HAL_DMA_IRQHandler+0x462>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	07d2      	lsls	r2, r2, #31
 80081e8:	d4f7      	bmi.n	80081da <HAL_DMA_IRQHandler+0x452>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80081ea:	681b      	ldr	r3, [r3, #0]
        __HAL_UNLOCK(hdma);
 80081ec:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80081ee:	07df      	lsls	r7, r3, #31
        __HAL_UNLOCK(hdma);
 80081f0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 80081f4:	bf4c      	ite	mi
 80081f6:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80081f8:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 80081fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 80081fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008200:	e79a      	b.n	8008138 <HAL_DMA_IRQHandler+0x3b0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8008208:	d108      	bne.n	800821c <HAL_DMA_IRQHandler+0x494>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800820a:	6819      	ldr	r1, [r3, #0]
 800820c:	f021 0110 	bic.w	r1, r1, #16
 8008210:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8008212:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8008214:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8008218:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 800821c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800821e:	e7a6      	b.n	800816e <HAL_DMA_IRQHandler+0x3e6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008220:	4a2c      	ldr	r2, [pc, #176]	; (80082d4 <HAL_DMA_IRQHandler+0x54c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	f43f adf2 	beq.w	8007e0c <HAL_DMA_IRQHandler+0x84>
 8008228:	3214      	adds	r2, #20
 800822a:	4293      	cmp	r3, r2
 800822c:	f43f adee 	beq.w	8007e0c <HAL_DMA_IRQHandler+0x84>
 8008230:	3214      	adds	r2, #20
 8008232:	4293      	cmp	r3, r2
 8008234:	f43f adea 	beq.w	8007e0c <HAL_DMA_IRQHandler+0x84>
 8008238:	3214      	adds	r2, #20
 800823a:	4293      	cmp	r3, r2
 800823c:	f43f ade6 	beq.w	8007e0c <HAL_DMA_IRQHandler+0x84>
 8008240:	3214      	adds	r2, #20
 8008242:	4293      	cmp	r3, r2
 8008244:	f43f ade2 	beq.w	8007e0c <HAL_DMA_IRQHandler+0x84>
 8008248:	3214      	adds	r2, #20
 800824a:	4293      	cmp	r3, r2
 800824c:	f43f adde 	beq.w	8007e0c <HAL_DMA_IRQHandler+0x84>
 8008250:	3214      	adds	r2, #20
 8008252:	4293      	cmp	r3, r2
 8008254:	f43f adda 	beq.w	8007e0c <HAL_DMA_IRQHandler+0x84>
}
 8008258:	b002      	add	sp, #8
 800825a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800825e:	0697      	lsls	r7, r2, #26
 8008260:	d403      	bmi.n	800826a <HAL_DMA_IRQHandler+0x4e2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	f022 0204 	bic.w	r2, r2, #4
 8008268:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800826a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800826c:	e764      	b.n	8008138 <HAL_DMA_IRQHandler+0x3b0>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800826e:	2002      	movs	r0, #2
 8008270:	4088      	lsls	r0, r1
 8008272:	ea10 0f0c 	tst.w	r0, ip
 8008276:	d016      	beq.n	80082a6 <HAL_DMA_IRQHandler+0x51e>
 8008278:	0796      	lsls	r6, r2, #30
 800827a:	d514      	bpl.n	80082a6 <HAL_DMA_IRQHandler+0x51e>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800827c:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800827e:	0410      	lsls	r0, r2, #16
 8008280:	d503      	bpl.n	800828a <HAL_DMA_IRQHandler+0x502>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008282:	03d1      	lsls	r1, r2, #15
 8008284:	d40d      	bmi.n	80082a2 <HAL_DMA_IRQHandler+0x51a>
          if(hdma->XferM1CpltCallback != NULL)
 8008286:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008288:	e756      	b.n	8008138 <HAL_DMA_IRQHandler+0x3b0>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800828a:	f012 0220 	ands.w	r2, r2, #32
 800828e:	d108      	bne.n	80082a2 <HAL_DMA_IRQHandler+0x51a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008290:	6819      	ldr	r1, [r3, #0]
 8008292:	f021 010a 	bic.w	r1, r1, #10
 8008296:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8008298:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800829a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800829e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80082a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80082a4:	e748      	b.n	8008138 <HAL_DMA_IRQHandler+0x3b0>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80082a6:	2008      	movs	r0, #8
 80082a8:	4088      	lsls	r0, r1
 80082aa:	ea10 0f0c 	tst.w	r0, ip
 80082ae:	d0d3      	beq.n	8008258 <HAL_DMA_IRQHandler+0x4d0>
 80082b0:	0712      	lsls	r2, r2, #28
 80082b2:	d5d1      	bpl.n	8008258 <HAL_DMA_IRQHandler+0x4d0>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	f022 020e 	bic.w	r2, r2, #14
 80082ba:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80082bc:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80082be:	2200      	movs	r2, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80082c0:	fa03 f101 	lsl.w	r1, r3, r1
 80082c4:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80082c6:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 80082c8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 80082cc:	e795      	b.n	80081fa <HAL_DMA_IRQHandler+0x472>
 80082ce:	bf00      	nop
 80082d0:	40020028 	.word	0x40020028
 80082d4:	5802541c 	.word	0x5802541c

080082d8 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80082d8:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80082da:	4770      	bx	lr

080082dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80082dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80082e0:	680b      	ldr	r3, [r1, #0]
{
 80082e2:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80084a8 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80082e8:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80082ec:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 80082ee:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 80082f0:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80084ac <HAL_GPIO_Init+0x1d0>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80082f4:	9a01      	ldr	r2, [sp, #4]
 80082f6:	40da      	lsrs	r2, r3
 80082f8:	d102      	bne.n	8008300 <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 80082fa:	b005      	add	sp, #20
 80082fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008300:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 8008302:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008304:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8008306:	ea17 0502 	ands.w	r5, r7, r2
 800830a:	f000 80b6 	beq.w	800847a <HAL_GPIO_Init+0x19e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800830e:	684a      	ldr	r2, [r1, #4]
 8008310:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8008314:	2403      	movs	r4, #3
 8008316:	f022 0a10 	bic.w	sl, r2, #16
 800831a:	fa04 f40e 	lsl.w	r4, r4, lr
 800831e:	f10a 36ff 	add.w	r6, sl, #4294967295
 8008322:	43e4      	mvns	r4, r4
 8008324:	2e01      	cmp	r6, #1
 8008326:	d810      	bhi.n	800834a <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8008328:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800832a:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800832e:	68ce      	ldr	r6, [r1, #12]
 8008330:	fa06 f60e 	lsl.w	r6, r6, lr
 8008334:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8008338:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800833a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800833c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008340:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8008344:	409e      	lsls	r6, r3
 8008346:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8008348:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800834a:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800834c:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008350:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008352:	ea07 0704 	and.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008356:	fa06 f60e 	lsl.w	r6, r6, lr
 800835a:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 800835e:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008360:	d114      	bne.n	800838c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 8008362:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008366:	f003 0b07 	and.w	fp, r3, #7
 800836a:	270f      	movs	r7, #15
 800836c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8008370:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8008374:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008378:	fa07 f70b 	lsl.w	r7, r7, fp
 800837c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008380:	690e      	ldr	r6, [r1, #16]
 8008382:	fa06 f60b 	lsl.w	r6, r6, fp
 8008386:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8008388:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 800838c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800838e:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008390:	f002 0603 	and.w	r6, r2, #3
 8008394:	fa06 fe0e 	lsl.w	lr, r6, lr
 8008398:	ea4e 0404 	orr.w	r4, lr, r4
      GPIOx->MODER = temp;
 800839c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800839e:	00d4      	lsls	r4, r2, #3
 80083a0:	d56b      	bpl.n	800847a <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083a2:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 80083a6:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80083aa:	f003 0703 	and.w	r7, r3, #3
 80083ae:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083b2:	f044 0402 	orr.w	r4, r4, #2
 80083b6:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80083ba:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083bc:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 80083c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80083c4:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 80083c8:	f004 0402 	and.w	r4, r4, #2
 80083cc:	9403      	str	r4, [sp, #12]
 80083ce:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80083d0:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 80083d4:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80083d8:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80083dc:	4c31      	ldr	r4, [pc, #196]	; (80084a4 <HAL_GPIO_Init+0x1c8>)
 80083de:	42a0      	cmp	r0, r4
 80083e0:	d04d      	beq.n	800847e <HAL_GPIO_Init+0x1a2>
 80083e2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80083e6:	42a0      	cmp	r0, r4
 80083e8:	d04b      	beq.n	8008482 <HAL_GPIO_Init+0x1a6>
 80083ea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80083ee:	42a0      	cmp	r0, r4
 80083f0:	d049      	beq.n	8008486 <HAL_GPIO_Init+0x1aa>
 80083f2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80083f6:	42a0      	cmp	r0, r4
 80083f8:	d047      	beq.n	800848a <HAL_GPIO_Init+0x1ae>
 80083fa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80083fe:	42a0      	cmp	r0, r4
 8008400:	d045      	beq.n	800848e <HAL_GPIO_Init+0x1b2>
 8008402:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008406:	42a0      	cmp	r0, r4
 8008408:	d043      	beq.n	8008492 <HAL_GPIO_Init+0x1b6>
 800840a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800840e:	42a0      	cmp	r0, r4
 8008410:	d041      	beq.n	8008496 <HAL_GPIO_Init+0x1ba>
 8008412:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008416:	42a0      	cmp	r0, r4
 8008418:	d03f      	beq.n	800849a <HAL_GPIO_Init+0x1be>
 800841a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800841e:	42a0      	cmp	r0, r4
 8008420:	d03d      	beq.n	800849e <HAL_GPIO_Init+0x1c2>
 8008422:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008426:	42a0      	cmp	r0, r4
 8008428:	bf14      	ite	ne
 800842a:	240a      	movne	r4, #10
 800842c:	2409      	moveq	r4, #9
 800842e:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008430:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008432:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008436:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8008438:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 800843c:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 8008440:	bf54      	ite	pl
 8008442:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8008444:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008446:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8008448:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 800844c:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 8008450:	bf54      	ite	pl
 8008452:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8008454:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008456:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 8008458:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 800845c:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8008460:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8008464:	bf54      	ite	pl
 8008466:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8008468:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800846a:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 800846c:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 800846e:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 8008470:	bf54      	ite	pl
 8008472:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8008474:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 8008476:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 800847a:	3301      	adds	r3, #1
 800847c:	e73a      	b.n	80082f4 <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800847e:	2400      	movs	r4, #0
 8008480:	e7d5      	b.n	800842e <HAL_GPIO_Init+0x152>
 8008482:	2401      	movs	r4, #1
 8008484:	e7d3      	b.n	800842e <HAL_GPIO_Init+0x152>
 8008486:	2402      	movs	r4, #2
 8008488:	e7d1      	b.n	800842e <HAL_GPIO_Init+0x152>
 800848a:	2403      	movs	r4, #3
 800848c:	e7cf      	b.n	800842e <HAL_GPIO_Init+0x152>
 800848e:	2404      	movs	r4, #4
 8008490:	e7cd      	b.n	800842e <HAL_GPIO_Init+0x152>
 8008492:	2405      	movs	r4, #5
 8008494:	e7cb      	b.n	800842e <HAL_GPIO_Init+0x152>
 8008496:	2406      	movs	r4, #6
 8008498:	e7c9      	b.n	800842e <HAL_GPIO_Init+0x152>
 800849a:	2407      	movs	r4, #7
 800849c:	e7c7      	b.n	800842e <HAL_GPIO_Init+0x152>
 800849e:	2408      	movs	r4, #8
 80084a0:	e7c5      	b.n	800842e <HAL_GPIO_Init+0x152>
 80084a2:	bf00      	nop
 80084a4:	58020000 	.word	0x58020000
 80084a8:	58024400 	.word	0x58024400
 80084ac:	58000080 	.word	0x58000080

080084b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80084b0:	6903      	ldr	r3, [r0, #16]
 80084b2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80084b4:	bf14      	ite	ne
 80084b6:	2001      	movne	r0, #1
 80084b8:	2000      	moveq	r0, #0
 80084ba:	4770      	bx	lr

080084bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80084bc:	b10a      	cbz	r2, 80084c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80084be:	6181      	str	r1, [r0, #24]
  }
}
 80084c0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80084c2:	0409      	lsls	r1, r1, #16
 80084c4:	e7fb      	b.n	80084be <HAL_GPIO_WritePin+0x2>

080084c6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80084c6:	6943      	ldr	r3, [r0, #20]
 80084c8:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80084cc:	bf08      	it	eq
 80084ce:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80084d0:	6181      	str	r1, [r0, #24]
  }
}
 80084d2:	4770      	bx	lr

080084d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80084d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80084d6:	4604      	mov	r4, r0
{
 80084d8:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 80084da:	b360      	cbz	r0, 8008536 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80084dc:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 80084e0:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80084e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80084e6:	b91b      	cbnz	r3, 80084f0 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80084e8:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80084ec:	f00b f97e 	bl	80137ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80084f0:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80084f2:	466e      	mov	r6, sp
 80084f4:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80084f6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80084fa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 80084fc:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80084fe:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8008502:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8008506:	bf08      	it	eq
 8008508:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 800850a:	f005 f87b 	bl	800d604 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800850e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008510:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008514:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008516:	e895 0003 	ldmia.w	r5, {r0, r1}
 800851a:	4625      	mov	r5, r4
 800851c:	e886 0003 	stmia.w	r6, {r0, r1}
 8008520:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8008524:	f855 0b10 	ldr.w	r0, [r5], #16
 8008528:	f004 ffb0 	bl	800d48c <USB_CoreInit>
 800852c:	4606      	mov	r6, r0
 800852e:	b120      	cbz	r0, 800853a <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008530:	2302      	movs	r3, #2
 8008532:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8008536:	2501      	movs	r5, #1
 8008538:	e054      	b.n	80085e4 <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800853a:	4601      	mov	r1, r0
 800853c:	6820      	ldr	r0, [r4, #0]
 800853e:	f005 f867 	bl	800d610 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008542:	4630      	mov	r0, r6
 8008544:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008548:	261c      	movs	r6, #28
 800854a:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800854e:	4601      	mov	r1, r0
 8008550:	b2c2      	uxtb	r2, r0
 8008552:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008554:	4594      	cmp	ip, r2
 8008556:	d81b      	bhi.n	8008590 <HAL_PCD_Init+0xbc>
 8008558:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800855a:	261c      	movs	r6, #28
 800855c:	4619      	mov	r1, r3
 800855e:	b2d8      	uxtb	r0, r3
 8008560:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008562:	4584      	cmp	ip, r0
 8008564:	d822      	bhi.n	80085ac <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008566:	466e      	mov	r6, sp
 8008568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800856a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800856c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800856e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008570:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008574:	e886 0003 	stmia.w	r6, {r0, r1}
 8008578:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800857c:	6820      	ldr	r0, [r4, #0]
 800857e:	f005 f889 	bl	800d694 <USB_DevInit>
 8008582:	2301      	movs	r3, #1
 8008584:	4605      	mov	r5, r0
 8008586:	b300      	cbz	r0, 80085ca <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008588:	2202      	movs	r2, #2
 800858a:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 800858e:	e7d2      	b.n	8008536 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8008590:	fb06 4302 	mla	r3, r6, r2, r4
 8008594:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8008598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800859c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80085a0:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 80085a4:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 80085a6:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
 80085aa:	e7d1      	b.n	8008550 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 80085ac:	fb06 4200 	mla	r2, r6, r0, r4
 80085b0:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80085b4:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80085b8:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80085bc:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80085c0:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80085c4:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 80085c8:	e7c9      	b.n	800855e <HAL_PCD_Init+0x8a>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80085ca:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80085ce:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80085d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d102      	bne.n	80085de <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80085d8:	4620      	mov	r0, r4
 80085da:	f000 fc58 	bl	8008e8e <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80085de:	6820      	ldr	r0, [r4, #0]
 80085e0:	f005 fb8a 	bl	800dcf8 <USB_DevDisconnect>

  return HAL_OK;
}
 80085e4:	4628      	mov	r0, r5
 80085e6:	b00b      	add	sp, #44	; 0x2c
 80085e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085ea <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80085ea:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80085ee:	2b01      	cmp	r3, #1
{
 80085f0:	b510      	push	{r4, lr}
 80085f2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80085f4:	d016      	beq.n	8008624 <HAL_PCD_Start+0x3a>
 80085f6:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085f8:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80085fa:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80085fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008600:	2b01      	cmp	r3, #1
 8008602:	d106      	bne.n	8008612 <HAL_PCD_Start+0x28>
 8008604:	69a3      	ldr	r3, [r4, #24]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d003      	beq.n	8008612 <HAL_PCD_Start+0x28>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800860a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800860c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008610:	6383      	str	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008612:	f005 fb65 	bl	800dce0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008616:	6820      	ldr	r0, [r4, #0]
 8008618:	f004 ffee 	bl	800d5f8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800861c:	2000      	movs	r0, #0
 800861e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 8008622:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008624:	2002      	movs	r0, #2
 8008626:	e7fc      	b.n	8008622 <HAL_PCD_Start+0x38>

08008628 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800862c:	6805      	ldr	r5, [r0, #0]
{
 800862e:	b087      	sub	sp, #28
 8008630:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008632:	4628      	mov	r0, r5
 8008634:	f005 fb9b 	bl	800dd6e <USB_GetMode>
 8008638:	9002      	str	r0, [sp, #8]
 800863a:	2800      	cmp	r0, #0
 800863c:	f040 813a 	bne.w	80088b4 <HAL_PCD_IRQHandler+0x28c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008640:	6820      	ldr	r0, [r4, #0]
 8008642:	f005 fb65 	bl	800dd10 <USB_ReadInterrupts>
 8008646:	2800      	cmp	r0, #0
 8008648:	f000 8134 	beq.w	80088b4 <HAL_PCD_IRQHandler+0x28c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800864c:	6820      	ldr	r0, [r4, #0]
 800864e:	f005 fb5f 	bl	800dd10 <USB_ReadInterrupts>
 8008652:	0782      	lsls	r2, r0, #30
 8008654:	d504      	bpl.n	8008660 <HAL_PCD_IRQHandler+0x38>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008656:	6822      	ldr	r2, [r4, #0]
 8008658:	6953      	ldr	r3, [r2, #20]
 800865a:	f003 0302 	and.w	r3, r3, #2
 800865e:	6153      	str	r3, [r2, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008660:	6820      	ldr	r0, [r4, #0]
 8008662:	f005 fb55 	bl	800dd10 <USB_ReadInterrupts>
 8008666:	06c3      	lsls	r3, r0, #27
 8008668:	d52a      	bpl.n	80086c0 <HAL_PCD_IRQHandler+0x98>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800866a:	6822      	ldr	r2, [r4, #0]
 800866c:	6993      	ldr	r3, [r2, #24]
 800866e:	f023 0310 	bic.w	r3, r3, #16
 8008672:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8008674:	6a2e      	ldr	r6, [r5, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008676:	f3c6 4343 	ubfx	r3, r6, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800867a:	f006 080f 	and.w	r8, r6, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800867e:	2b02      	cmp	r3, #2
 8008680:	f040 811b 	bne.w	80088ba <HAL_PCD_IRQHandler+0x292>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008684:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008688:	421e      	tst	r6, r3
 800868a:	d014      	beq.n	80086b6 <HAL_PCD_IRQHandler+0x8e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800868c:	271c      	movs	r7, #28
 800868e:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8008692:	4628      	mov	r0, r5
 8008694:	fb07 4708 	mla	r7, r7, r8, r4
 8008698:	4632      	mov	r2, r6
 800869a:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 800869e:	f005 faad 	bl	800dbfc <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80086a2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80086a6:	4433      	add	r3, r6
 80086a8:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80086ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80086b0:	441e      	add	r6, r3
 80086b2:	f8c7 6214 	str.w	r6, [r7, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80086b6:	6822      	ldr	r2, [r4, #0]
 80086b8:	6993      	ldr	r3, [r2, #24]
 80086ba:	f043 0310 	orr.w	r3, r3, #16
 80086be:	6193      	str	r3, [r2, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80086c0:	6820      	ldr	r0, [r4, #0]
 80086c2:	f005 fb25 	bl	800dd10 <USB_ReadInterrupts>
 80086c6:	0307      	lsls	r7, r0, #12
 80086c8:	f100 8106 	bmi.w	80088d8 <HAL_PCD_IRQHandler+0x2b0>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80086cc:	6820      	ldr	r0, [r4, #0]
 80086ce:	f005 fb1f 	bl	800dd10 <USB_ReadInterrupts>
 80086d2:	0346      	lsls	r6, r0, #13
 80086d4:	d50b      	bpl.n	80086ee <HAL_PCD_IRQHandler+0xc6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80086d6:	6820      	ldr	r0, [r4, #0]
 80086d8:	4626      	mov	r6, r4
 80086da:	f005 fb25 	bl	800dd28 <USB_ReadDevAllInEpInterrupt>

      epnum = 0U;
 80086de:	2700      	movs	r7, #0
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80086e0:	4682      	mov	sl, r0
 80086e2:	f505 6910 	add.w	r9, r5, #2304	; 0x900

      while (ep_intr != 0U)
 80086e6:	f1ba 0f00 	cmp.w	sl, #0
 80086ea:	f040 81a3 	bne.w	8008a34 <HAL_PCD_IRQHandler+0x40c>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80086ee:	6820      	ldr	r0, [r4, #0]
 80086f0:	f005 fb0e 	bl	800dd10 <USB_ReadInterrupts>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	da15      	bge.n	8008724 <HAL_PCD_IRQHandler+0xfc>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80086f8:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 80086fc:	f023 0301 	bic.w	r3, r3, #1
 8008700:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8008704:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8008708:	2b01      	cmp	r3, #1
 800870a:	f040 822e 	bne.w	8008b6a <HAL_PCD_IRQHandler+0x542>
      {
        hpcd->LPM_State = LPM_L0;
 800870e:	2100      	movs	r1, #0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008710:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8008712:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008716:	f000 fbcd 	bl	8008eb4 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800871a:	6822      	ldr	r2, [r4, #0]
 800871c:	6953      	ldr	r3, [r2, #20]
 800871e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008722:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008724:	6820      	ldr	r0, [r4, #0]
 8008726:	f005 faf3 	bl	800dd10 <USB_ReadInterrupts>
 800872a:	0500      	lsls	r0, r0, #20
 800872c:	d50b      	bpl.n	8008746 <HAL_PCD_IRQHandler+0x11e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800872e:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8008732:	07d9      	lsls	r1, r3, #31
 8008734:	d502      	bpl.n	800873c <HAL_PCD_IRQHandler+0x114>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008736:	4620      	mov	r0, r4
 8008738:	f00b f8c6 	bl	80138c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800873c:	6822      	ldr	r2, [r4, #0]
 800873e:	6953      	ldr	r3, [r2, #20]
 8008740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008744:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008746:	6820      	ldr	r0, [r4, #0]
 8008748:	f005 fae2 	bl	800dd10 <USB_ReadInterrupts>
 800874c:	0102      	lsls	r2, r0, #4
 800874e:	d514      	bpl.n	800877a <HAL_PCD_IRQHandler+0x152>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	695a      	ldr	r2, [r3, #20]
 8008754:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008758:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800875a:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 800875e:	2a00      	cmp	r2, #0
 8008760:	f040 8207 	bne.w	8008b72 <HAL_PCD_IRQHandler+0x54a>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8008766:	2101      	movs	r1, #1

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008768:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800876a:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 800876e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008772:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008776:	f000 fb9d 	bl	8008eb4 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800877a:	6820      	ldr	r0, [r4, #0]
 800877c:	f005 fac8 	bl	800dd10 <USB_ReadInterrupts>
 8008780:	04c3      	lsls	r3, r0, #19
 8008782:	d535      	bpl.n	80087f0 <HAL_PCD_IRQHandler+0x1c8>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008784:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 8008788:	6873      	ldr	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800878a:	2110      	movs	r1, #16
 800878c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800878e:	f023 0301 	bic.w	r3, r3, #1
 8008792:	6073      	str	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008794:	f004 ff54 	bl	800d640 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008798:	6860      	ldr	r0, [r4, #4]
 800879a:	f505 6310 	add.w	r3, r5, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800879e:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087a2:	9a02      	ldr	r2, [sp, #8]
 80087a4:	4290      	cmp	r0, r2
 80087a6:	f040 81e8 	bne.w	8008b7a <HAL_PCD_IRQHandler+0x552>
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80087aa:	69f3      	ldr	r3, [r6, #28]
 80087ac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80087b0:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80087b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 8200 	beq.w	8008bba <HAL_PCD_IRQHandler+0x592>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80087ba:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 80087be:	f043 030b 	orr.w	r3, r3, #11
 80087c2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80087c6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80087c8:	f043 030b 	orr.w	r3, r3, #11
 80087cc:	6473      	str	r3, [r6, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80087ce:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80087d2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80087d6:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80087d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80087dc:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80087de:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80087e2:	f005 fad9 	bl	800dd98 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80087e6:	6822      	ldr	r2, [r4, #0]
 80087e8:	6953      	ldr	r3, [r2, #20]
 80087ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087ee:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80087f0:	6820      	ldr	r0, [r4, #0]
 80087f2:	f005 fa8d 	bl	800dd10 <USB_ReadInterrupts>
 80087f6:	0487      	lsls	r7, r0, #18
 80087f8:	d516      	bpl.n	8008828 <HAL_PCD_IRQHandler+0x200>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80087fa:	6820      	ldr	r0, [r4, #0]
 80087fc:	f005 fabb 	bl	800dd76 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008800:	6820      	ldr	r0, [r4, #0]
 8008802:	f004 ffff 	bl	800d804 <USB_GetDevSpeed>

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008806:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008808:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800880a:	f000 ffd7 	bl	80097bc <HAL_RCC_GetHCLKFreq>
 800880e:	7b22      	ldrb	r2, [r4, #12]
 8008810:	4601      	mov	r1, r0
 8008812:	4628      	mov	r0, r5
 8008814:	f004 fe7c 	bl	800d510 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008818:	4620      	mov	r0, r4
 800881a:	f00b f842 	bl	80138a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800881e:	6822      	ldr	r2, [r4, #0]
 8008820:	6953      	ldr	r3, [r2, #20]
 8008822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008826:	6153      	str	r3, [r2, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008828:	6820      	ldr	r0, [r4, #0]
 800882a:	f005 fa71 	bl	800dd10 <USB_ReadInterrupts>
 800882e:	0706      	lsls	r6, r0, #28
 8008830:	d507      	bpl.n	8008842 <HAL_PCD_IRQHandler+0x21a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008832:	4620      	mov	r0, r4
 8008834:	f00b f831 	bl	801389a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008838:	6822      	ldr	r2, [r4, #0]
 800883a:	6953      	ldr	r3, [r2, #20]
 800883c:	f003 0308 	and.w	r3, r3, #8
 8008840:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008842:	6820      	ldr	r0, [r4, #0]
 8008844:	f005 fa64 	bl	800dd10 <USB_ReadInterrupts>
 8008848:	02c5      	lsls	r5, r0, #11
 800884a:	d508      	bpl.n	800885e <HAL_PCD_IRQHandler+0x236>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800884c:	2100      	movs	r1, #0
 800884e:	4620      	mov	r0, r4
 8008850:	f00b f85a 	bl	8013908 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008854:	6822      	ldr	r2, [r4, #0]
 8008856:	6953      	ldr	r3, [r2, #20]
 8008858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800885c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800885e:	6820      	ldr	r0, [r4, #0]
 8008860:	f005 fa56 	bl	800dd10 <USB_ReadInterrupts>
 8008864:	0280      	lsls	r0, r0, #10
 8008866:	d508      	bpl.n	800887a <HAL_PCD_IRQHandler+0x252>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008868:	2100      	movs	r1, #0
 800886a:	4620      	mov	r0, r4
 800886c:	f00b f848 	bl	8013900 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008870:	6822      	ldr	r2, [r4, #0]
 8008872:	6953      	ldr	r3, [r2, #20]
 8008874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008878:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800887a:	6820      	ldr	r0, [r4, #0]
 800887c:	f005 fa48 	bl	800dd10 <USB_ReadInterrupts>
 8008880:	0041      	lsls	r1, r0, #1
 8008882:	d507      	bpl.n	8008894 <HAL_PCD_IRQHandler+0x26c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008884:	4620      	mov	r0, r4
 8008886:	f00b f843 	bl	8013910 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800888a:	6822      	ldr	r2, [r4, #0]
 800888c:	6953      	ldr	r3, [r2, #20]
 800888e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008892:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008894:	6820      	ldr	r0, [r4, #0]
 8008896:	f005 fa3b 	bl	800dd10 <USB_ReadInterrupts>
 800889a:	0742      	lsls	r2, r0, #29
 800889c:	d50a      	bpl.n	80088b4 <HAL_PCD_IRQHandler+0x28c>
    {
      temp = hpcd->Instance->GOTGINT;
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80088a2:	076b      	lsls	r3, r5, #29
 80088a4:	d502      	bpl.n	80088ac <HAL_PCD_IRQHandler+0x284>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80088a6:	4620      	mov	r0, r4
 80088a8:	f00b f836 	bl	8013918 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80088ac:	6822      	ldr	r2, [r4, #0]
 80088ae:	6853      	ldr	r3, [r2, #4]
 80088b0:	432b      	orrs	r3, r5
 80088b2:	6053      	str	r3, [r2, #4]
    }
  }
}
 80088b4:	b007      	add	sp, #28
 80088b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80088ba:	2b06      	cmp	r3, #6
 80088bc:	f47f aefb 	bne.w	80086b6 <HAL_PCD_IRQHandler+0x8e>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80088c0:	271c      	movs	r7, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80088c2:	2208      	movs	r2, #8
 80088c4:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80088c8:	4628      	mov	r0, r5
 80088ca:	f005 f997 	bl	800dbfc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80088ce:	fb07 4708 	mla	r7, r7, r8, r4
 80088d2:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80088d6:	e6e9      	b.n	80086ac <HAL_PCD_IRQHandler+0x84>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80088d8:	6820      	ldr	r0, [r4, #0]
      epnum = 0U;
 80088da:	2600      	movs	r6, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80088dc:	f005 fa1c 	bl	800dd18 <USB_ReadDevAllOutEpInterrupt>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088e0:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 8008bd0 <HAL_PCD_IRQHandler+0x5a8>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80088e4:	4680      	mov	r8, r0
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80088e6:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 8008bd4 <HAL_PCD_IRQHandler+0x5ac>
      while (ep_intr != 0U)
 80088ea:	f1b8 0f00 	cmp.w	r8, #0
 80088ee:	f43f aeed 	beq.w	80086cc <HAL_PCD_IRQHandler+0xa4>
        if ((ep_intr & 0x1U) != 0U)
 80088f2:	f018 0f01 	tst.w	r8, #1
 80088f6:	d061      	beq.n	80089bc <HAL_PCD_IRQHandler+0x394>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80088f8:	fa5f fa86 	uxtb.w	sl, r6
 80088fc:	6820      	ldr	r0, [r4, #0]
 80088fe:	4651      	mov	r1, sl
 8008900:	f005 fa1a 	bl	800dd38 <USB_ReadDevOutEPInterrupt>
 8008904:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008906:	07f8      	lsls	r0, r7, #31
 8008908:	d51c      	bpl.n	8008944 <HAL_PCD_IRQHandler+0x31c>
 800890a:	0173      	lsls	r3, r6, #5
 800890c:	f505 6230 	add.w	r2, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008910:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008912:	6820      	ldr	r0, [r4, #0]
 8008914:	441a      	add	r2, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008916:	6091      	str	r1, [r2, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008918:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 800891c:	6921      	ldr	r1, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800891e:	4413      	add	r3, r2
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008920:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  if (hpcd->Init.dma_enable == 1U)
 8008924:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008926:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8008928:	d16d      	bne.n	8008a06 <HAL_PCD_IRQHandler+0x3de>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800892a:	0711      	lsls	r1, r2, #28
 800892c:	d506      	bpl.n	800893c <HAL_PCD_IRQHandler+0x314>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800892e:	45cc      	cmp	ip, r9
 8008930:	d908      	bls.n	8008944 <HAL_PCD_IRQHandler+0x31c>
 8008932:	0410      	lsls	r0, r2, #16
 8008934:	d506      	bpl.n	8008944 <HAL_PCD_IRQHandler+0x31c>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008936:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800893a:	e002      	b.n	8008942 <HAL_PCD_IRQHandler+0x31a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800893c:	0691      	lsls	r1, r2, #26
 800893e:	d541      	bpl.n	80089c4 <HAL_PCD_IRQHandler+0x39c>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008940:	2220      	movs	r2, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008942:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008944:	0738      	lsls	r0, r7, #28
 8008946:	d520      	bpl.n	800898a <HAL_PCD_IRQHandler+0x362>
 8008948:	0173      	lsls	r3, r6, #5
 800894a:	f505 6230 	add.w	r2, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800894e:	2108      	movs	r1, #8
 8008950:	441a      	add	r2, r3
 8008952:	6091      	str	r1, [r2, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008954:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008956:	f8d2 a040 	ldr.w	sl, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800895a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800895e:	45ca      	cmp	sl, r9
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008960:	4413      	add	r3, r2
 8008962:	689a      	ldr	r2, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008964:	d904      	bls.n	8008970 <HAL_PCD_IRQHandler+0x348>
 8008966:	0411      	lsls	r1, r2, #16
 8008968:	d502      	bpl.n	8008970 <HAL_PCD_IRQHandler+0x348>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800896a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800896e:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008970:	4620      	mov	r0, r4
 8008972:	f00a ff7b 	bl	801386c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008976:	45ca      	cmp	sl, r9
 8008978:	d907      	bls.n	800898a <HAL_PCD_IRQHandler+0x362>
 800897a:	6921      	ldr	r1, [r4, #16]
 800897c:	2901      	cmp	r1, #1
 800897e:	d104      	bne.n	800898a <HAL_PCD_IRQHandler+0x362>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008980:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008984:	6820      	ldr	r0, [r4, #0]
 8008986:	f005 fa07 	bl	800dd98 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800898a:	06fa      	lsls	r2, r7, #27
 800898c:	d505      	bpl.n	800899a <HAL_PCD_IRQHandler+0x372>
 800898e:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008992:	2210      	movs	r2, #16
 8008994:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8008998:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800899a:	06bb      	lsls	r3, r7, #26
 800899c:	d505      	bpl.n	80089aa <HAL_PCD_IRQHandler+0x382>
 800899e:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80089a2:	2220      	movs	r2, #32
 80089a4:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 80089a8:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80089aa:	04bf      	lsls	r7, r7, #18
 80089ac:	d506      	bpl.n	80089bc <HAL_PCD_IRQHandler+0x394>
 80089ae:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80089b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80089b6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 80089ba:	609a      	str	r2, [r3, #8]
        epnum++;
 80089bc:	3601      	adds	r6, #1
        ep_intr >>= 1U;
 80089be:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80089c2:	e792      	b.n	80088ea <HAL_PCD_IRQHandler+0x2c2>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80089c4:	f012 0f28 	tst.w	r2, #40	; 0x28
 80089c8:	d1bc      	bne.n	8008944 <HAL_PCD_IRQHandler+0x31c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80089ca:	45cc      	cmp	ip, r9
 80089cc:	d901      	bls.n	80089d2 <HAL_PCD_IRQHandler+0x3aa>
 80089ce:	0412      	lsls	r2, r2, #16
 80089d0:	d4b1      	bmi.n	8008936 <HAL_PCD_IRQHandler+0x30e>
 80089d2:	221c      	movs	r2, #28
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	fb02 4206 	mla	r2, r2, r6, r4
 80089da:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80089de:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80089e2:	1acb      	subs	r3, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80089e4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80089e8:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 80089ec:	4419      	add	r1, r3
 80089ee:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80089f2:	b986      	cbnz	r6, 8008a16 <HAL_PCD_IRQHandler+0x3ee>
 80089f4:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 80089f8:	b96b      	cbnz	r3, 8008a16 <HAL_PCD_IRQHandler+0x3ee>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80089fa:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80089fe:	2101      	movs	r1, #1
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008a00:	f005 f9ca 	bl	800dd98 <USB_EP0_OutStart>
 8008a04:	e007      	b.n	8008a16 <HAL_PCD_IRQHandler+0x3ee>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008a06:	45dc      	cmp	ip, fp
 8008a08:	d10a      	bne.n	8008a20 <HAL_PCD_IRQHandler+0x3f8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008a0a:	0411      	lsls	r1, r2, #16
 8008a0c:	d493      	bmi.n	8008936 <HAL_PCD_IRQHandler+0x30e>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008a0e:	0692      	lsls	r2, r2, #26
 8008a10:	d501      	bpl.n	8008a16 <HAL_PCD_IRQHandler+0x3ee>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008a12:	2220      	movs	r2, #32
 8008a14:	609a      	str	r2, [r3, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a16:	4651      	mov	r1, sl
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f00a ff2d 	bl	8013878 <HAL_PCD_DataOutStageCallback>
 8008a1e:	e791      	b.n	8008944 <HAL_PCD_IRQHandler+0x31c>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008a20:	2e00      	cmp	r6, #0
 8008a22:	d1f8      	bne.n	8008a16 <HAL_PCD_IRQHandler+0x3ee>
 8008a24:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1f4      	bne.n	8008a16 <HAL_PCD_IRQHandler+0x3ee>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008a2c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008a30:	4631      	mov	r1, r6
 8008a32:	e7e5      	b.n	8008a00 <HAL_PCD_IRQHandler+0x3d8>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008a34:	f01a 0f01 	tst.w	sl, #1
 8008a38:	d074      	beq.n	8008b24 <HAL_PCD_IRQHandler+0x4fc>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008a3a:	fa5f fb87 	uxtb.w	fp, r7
 8008a3e:	6820      	ldr	r0, [r4, #0]
 8008a40:	4659      	mov	r1, fp
 8008a42:	f005 f982 	bl	800dd4a <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008a46:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008a4a:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008a4c:	d020      	beq.n	8008a90 <HAL_PCD_IRQHandler+0x468>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008a4e:	2001      	movs	r0, #1
 8008a50:	f007 020f 	and.w	r2, r7, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008a54:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008a58:	fa00 f202 	lsl.w	r2, r0, r2
            if (hpcd->Init.dma_enable == 1U)
 8008a5c:	6921      	ldr	r1, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008a5e:	ea23 0302 	bic.w	r3, r3, r2
            if (hpcd->Init.dma_enable == 1U)
 8008a62:	4281      	cmp	r1, r0
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008a64:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
 8008a68:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008a6c:	6098      	str	r0, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 8008a6e:	d10b      	bne.n	8008a88 <HAL_PCD_IRQHandler+0x460>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008a70:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 8008a74:	4413      	add	r3, r2
 8008a76:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008a78:	b937      	cbnz	r7, 8008a88 <HAL_PCD_IRQHandler+0x460>
 8008a7a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008a7c:	b923      	cbnz	r3, 8008a88 <HAL_PCD_IRQHandler+0x460>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008a7e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008a82:	6820      	ldr	r0, [r4, #0]
 8008a84:	f005 f988 	bl	800dd98 <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008a88:	4659      	mov	r1, fp
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f00a fefd 	bl	801388a <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008a90:	f018 0f08 	tst.w	r8, #8
 8008a94:	d003      	beq.n	8008a9e <HAL_PCD_IRQHandler+0x476>
 8008a96:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008a9a:	2208      	movs	r2, #8
 8008a9c:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008a9e:	f018 0f10 	tst.w	r8, #16
 8008aa2:	d003      	beq.n	8008aac <HAL_PCD_IRQHandler+0x484>
 8008aa4:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008aa8:	2210      	movs	r2, #16
 8008aaa:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008aac:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008ab0:	d003      	beq.n	8008aba <HAL_PCD_IRQHandler+0x492>
 8008ab2:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008ab6:	2240      	movs	r2, #64	; 0x40
 8008ab8:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008aba:	f018 0f02 	tst.w	r8, #2
 8008abe:	d003      	beq.n	8008ac8 <HAL_PCD_IRQHandler+0x4a0>
 8008ac0:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008ac8:	f018 0f80 	tst.w	r8, #128	; 0x80
 8008acc:	d02a      	beq.n	8008b24 <HAL_PCD_IRQHandler+0x4fc>
  if (ep->xfer_count > ep->xfer_len)
 8008ace:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d826      	bhi.n	8008b24 <HAL_PCD_IRQHandler+0x4fc>
  len = ep->xfer_len - ep->xfer_count;
 8008ad6:	1a9b      	subs	r3, r3, r2
  len32b = (len + 3U) / 4U;
 8008ad8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8008ada:	6821      	ldr	r1, [r4, #0]
 8008adc:	4293      	cmp	r3, r2
 8008ade:	9103      	str	r1, [sp, #12]
 8008ae0:	bf28      	it	cs
 8008ae2:	4613      	movcs	r3, r2
 8008ae4:	3303      	adds	r3, #3
 8008ae6:	089b      	lsrs	r3, r3, #2
 8008ae8:	9304      	str	r3, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008aea:	f501 6310 	add.w	r3, r1, #2304	; 0x900
 8008aee:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 8008af2:	9305      	str	r3, [sp, #20]
 8008af4:	9b05      	ldr	r3, [sp, #20]
 8008af6:	9804      	ldr	r0, [sp, #16]
 8008af8:	6999      	ldr	r1, [r3, #24]
 8008afa:	b289      	uxth	r1, r1
 8008afc:	4281      	cmp	r1, r0
 8008afe:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
 8008b02:	d214      	bcs.n	8008b2e <HAL_PCD_IRQHandler+0x506>
  if (ep->xfer_len <= ep->xfer_count)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d80d      	bhi.n	8008b24 <HAL_PCD_IRQHandler+0x4fc>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008b08:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008b0a:	f007 020f 	and.w	r2, r7, #15
 8008b0e:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008b10:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8008b14:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008b18:	fa01 f202 	lsl.w	r2, r1, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008b1c:	ea23 0302 	bic.w	r3, r3, r2
 8008b20:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
        epnum++;
 8008b24:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 8008b26:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 8008b2a:	361c      	adds	r6, #28
 8008b2c:	e5db      	b.n	80086e6 <HAL_PCD_IRQHandler+0xbe>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d9ea      	bls.n	8008b08 <HAL_PCD_IRQHandler+0x4e0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0e8      	beq.n	8008b08 <HAL_PCD_IRQHandler+0x4e0>
    len = ep->xfer_len - ep->xfer_count;
 8008b36:	eba3 0802 	sub.w	r8, r3, r2
 8008b3a:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008b3c:	465a      	mov	r2, fp
 8008b3e:	9803      	ldr	r0, [sp, #12]
 8008b40:	4598      	cmp	r8, r3
 8008b42:	bf28      	it	cs
 8008b44:	4698      	movcs	r8, r3
    len32b = (len + 3U) / 4U;
 8008b46:	f108 0303 	add.w	r3, r8, #3
 8008b4a:	089b      	lsrs	r3, r3, #2
 8008b4c:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008b4e:	7c23      	ldrb	r3, [r4, #16]
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	fa1f f388 	uxth.w	r3, r8
 8008b56:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8008b58:	f004 ff64 	bl	800da24 <USB_WritePacket>
    ep->xfer_buff  += len;
 8008b5c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8008b5e:	4443      	add	r3, r8
 8008b60:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8008b62:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8008b64:	4443      	add	r3, r8
 8008b66:	6573      	str	r3, [r6, #84]	; 0x54
 8008b68:	e7c4      	b.n	8008af4 <HAL_PCD_IRQHandler+0x4cc>
        HAL_PCD_ResumeCallback(hpcd);
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f00a fec4 	bl	80138f8 <HAL_PCD_ResumeCallback>
 8008b70:	e5d3      	b.n	800871a <HAL_PCD_IRQHandler+0xf2>
        HAL_PCD_SuspendCallback(hpcd);
 8008b72:	4620      	mov	r0, r4
 8008b74:	f00a fea8 	bl	80138c8 <HAL_PCD_SuspendCallback>
 8008b78:	e5ff      	b.n	800877a <HAL_PCD_IRQHandler+0x152>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008b7a:	6099      	str	r1, [r3, #8]
 8008b7c:	3320      	adds	r3, #32
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b7e:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8008b82:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008b86:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008b8a:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8008b8e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8008b92:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008b96:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b9a:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8008b9e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008ba2:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008ba6:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8008baa:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8008bae:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bb2:	9a02      	ldr	r2, [sp, #8]
 8008bb4:	3201      	adds	r2, #1
 8008bb6:	9202      	str	r2, [sp, #8]
 8008bb8:	e5f3      	b.n	80087a2 <HAL_PCD_IRQHandler+0x17a>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008bba:	6973      	ldr	r3, [r6, #20]
 8008bbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008bc0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008bc4:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008bc6:	6933      	ldr	r3, [r6, #16]
 8008bc8:	f043 030b 	orr.w	r3, r3, #11
 8008bcc:	6133      	str	r3, [r6, #16]
 8008bce:	e5fe      	b.n	80087ce <HAL_PCD_IRQHandler+0x1a6>
 8008bd0:	4f54300a 	.word	0x4f54300a
 8008bd4:	4f54310a 	.word	0x4f54310a

08008bd8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8008bd8:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8008bdc:	2a01      	cmp	r2, #1
{
 8008bde:	b510      	push	{r4, lr}
 8008be0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8008be2:	d00b      	beq.n	8008bfc <HAL_PCD_SetAddress+0x24>
 8008be4:	2201      	movs	r2, #1
 8008be6:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008bea:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008bee:	6800      	ldr	r0, [r0, #0]
 8008bf0:	f005 f866 	bl	800dcc0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008bfa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008bfc:	2002      	movs	r0, #2
 8008bfe:	e7fc      	b.n	8008bfa <HAL_PCD_SetAddress+0x22>

08008c00 <HAL_PCD_EP_Open>:
{
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	f001 050f 	and.w	r5, r1, #15
 8008c06:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8008c08:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008c0c:	f04f 061c 	mov.w	r6, #28
 8008c10:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 8008c14:	ea4f 0080 	mov.w	r0, r0, lsl #2
 8008c18:	d01f      	beq.n	8008c5a <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c1a:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 8008c1e:	fb06 4605 	mla	r6, r6, r5, r4
 8008c22:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c24:	4421      	add	r1, r4
    ep->is_in = 1U;
 8008c26:	f886 003d 	strb.w	r0, [r6, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 8008c2a:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8008c2c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c2e:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 8008c30:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8008c32:	b102      	cbz	r2, 8008c36 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8008c34:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8008c36:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8008c38:	bf04      	itt	eq
 8008c3a:	2300      	moveq	r3, #0
 8008c3c:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8008c3e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d012      	beq.n	8008c6c <HAL_PCD_EP_Open+0x6c>
 8008c46:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008c48:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008c4a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008c4e:	f004 fde4 	bl	800d81a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c52:	2000      	movs	r0, #0
 8008c54:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008c58:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c5a:	f500 71fe 	add.w	r1, r0, #508	; 0x1fc
    ep->is_in = 0U;
 8008c5e:	fb06 4605 	mla	r6, r6, r5, r4
 8008c62:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c64:	4421      	add	r1, r4
    ep->is_in = 0U;
 8008c66:	f886 01fd 	strb.w	r0, [r6, #509]	; 0x1fd
 8008c6a:	e7de      	b.n	8008c2a <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8008c6c:	2002      	movs	r0, #2
 8008c6e:	e7f3      	b.n	8008c58 <HAL_PCD_EP_Open+0x58>

08008c70 <HAL_PCD_EP_Close>:
{
 8008c70:	b510      	push	{r4, lr}
 8008c72:	4604      	mov	r4, r0
 8008c74:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8008c78:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008c7c:	f04f 021c 	mov.w	r2, #28
 8008c80:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8008c84:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008c88:	d016      	beq.n	8008cb8 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c8a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8008c8e:	fb02 4200 	mla	r2, r2, r0, r4
 8008c92:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c94:	4421      	add	r1, r4
    ep->is_in = 1U;
 8008c96:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008c9a:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8008c9c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d012      	beq.n	8008cca <HAL_PCD_EP_Close+0x5a>
 8008ca4:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008ca6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008ca8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008cac:	f004 fdf4 	bl	800d898 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008cb6:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cb8:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8008cbc:	fb02 4200 	mla	r2, r2, r0, r4
 8008cc0:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cc2:	4421      	add	r1, r4
    ep->is_in = 0U;
 8008cc4:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 8008cc8:	e7e7      	b.n	8008c9a <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8008cca:	2002      	movs	r0, #2
 8008ccc:	e7f3      	b.n	8008cb6 <HAL_PCD_EP_Close+0x46>

08008cce <HAL_PCD_EP_Receive>:
{
 8008cce:	b538      	push	{r3, r4, r5, lr}
 8008cd0:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cd4:	241c      	movs	r4, #28
 8008cd6:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8008cda:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cde:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8008ce2:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8008ce6:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8008ce8:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8008cec:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8008cf0:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cf4:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8008cf8:	6903      	ldr	r3, [r0, #16]
 8008cfa:	6800      	ldr	r0, [r0, #0]
 8008cfc:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8008cfe:	bf08      	it	eq
 8008d00:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 8008d04:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008d06:	b91d      	cbnz	r5, 8008d10 <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d08:	f004 fe18 	bl	800d93c <USB_EP0StartXfer>
}
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d10:	f004 fe9c 	bl	800da4c <USB_EPStartXfer>
 8008d14:	e7fa      	b.n	8008d0c <HAL_PCD_EP_Receive+0x3e>

08008d16 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008d16:	231c      	movs	r3, #28
 8008d18:	f001 010f 	and.w	r1, r1, #15
 8008d1c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8008d20:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8008d24:	4770      	bx	lr

08008d26 <HAL_PCD_EP_Transmit>:
{
 8008d26:	b538      	push	{r3, r4, r5, lr}
 8008d28:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d2c:	241c      	movs	r4, #28
 8008d2e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8008d32:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d36:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8008d38:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8008d3a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8008d3c:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8008d3e:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8008d40:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d42:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 8008d46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8008d4a:	6903      	ldr	r3, [r0, #16]
 8008d4c:	6800      	ldr	r0, [r0, #0]
 8008d4e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8008d50:	bf08      	it	eq
 8008d52:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8008d54:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008d56:	b91d      	cbnz	r5, 8008d60 <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d58:	f004 fdf0 	bl	800d93c <USB_EP0StartXfer>
}
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d60:	f004 fe74 	bl	800da4c <USB_EPStartXfer>
 8008d64:	e7fa      	b.n	8008d5c <HAL_PCD_EP_Transmit+0x36>

08008d66 <HAL_PCD_EP_SetStall>:
{
 8008d66:	b538      	push	{r3, r4, r5, lr}
 8008d68:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008d6c:	6843      	ldr	r3, [r0, #4]
{
 8008d6e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008d70:	429d      	cmp	r5, r3
 8008d72:	d82e      	bhi.n	8008dd2 <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8008d74:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008d78:	f04f 021c 	mov.w	r2, #28
 8008d7c:	d01f      	beq.n	8008dbe <HAL_PCD_EP_SetStall+0x58>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d7e:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8008d82:	fb02 0105 	mla	r1, r2, r5, r0
 8008d86:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d88:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8008d8a:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 8008d8e:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d90:	701d      	strb	r5, [r3, #0]
  ep->is_stall = 1U;
 8008d92:	709a      	strb	r2, [r3, #2]
  __HAL_LOCK(hpcd);
 8008d94:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8008d98:	4291      	cmp	r1, r2
 8008d9a:	d01c      	beq.n	8008dd6 <HAL_PCD_EP_SetStall+0x70>
 8008d9c:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008da0:	4619      	mov	r1, r3
 8008da2:	6820      	ldr	r0, [r4, #0]
 8008da4:	f004 ff38 	bl	800dc18 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008da8:	b92d      	cbnz	r5, 8008db6 <HAL_PCD_EP_SetStall+0x50>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008daa:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008dae:	7c21      	ldrb	r1, [r4, #16]
 8008db0:	6820      	ldr	r0, [r4, #0]
 8008db2:	f004 fff1 	bl	800dd98 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8008db6:	2000      	movs	r0, #0
 8008db8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008dbc:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8008dbe:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8008dc2:	fb02 0101 	mla	r1, r2, r1, r0
 8008dc6:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8008dc8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8008dcc:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8008dd0:	e7dd      	b.n	8008d8e <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8008dd2:	2001      	movs	r0, #1
 8008dd4:	e7f2      	b.n	8008dbc <HAL_PCD_EP_SetStall+0x56>
  __HAL_LOCK(hpcd);
 8008dd6:	2002      	movs	r0, #2
 8008dd8:	e7f0      	b.n	8008dbc <HAL_PCD_EP_SetStall+0x56>

08008dda <HAL_PCD_EP_ClrStall>:
{
 8008dda:	b538      	push	{r3, r4, r5, lr}
 8008ddc:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008de0:	6843      	ldr	r3, [r0, #4]
{
 8008de2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d82a      	bhi.n	8008e3e <HAL_PCD_EP_ClrStall+0x64>
 8008de8:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8008dec:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008df0:	f04f 001c 	mov.w	r0, #28
 8008df4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008df8:	d018      	beq.n	8008e2c <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008dfa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8008dfe:	fb00 4002 	mla	r0, r0, r2, r4
 8008e02:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e04:	4421      	add	r1, r4
    ep->is_in = 1U;
 8008e06:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 0U;
 8008e0a:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e0c:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8008e0e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8008e10:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d014      	beq.n	8008e42 <HAL_PCD_EP_ClrStall+0x68>
 8008e18:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008e1a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008e1c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008e20:	f004 ff25 	bl	800dc6e <USB_EPClearStall>
  return HAL_OK;
 8008e24:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8008e26:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e2c:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8008e30:	fb00 4002 	mla	r0, r0, r2, r4
 8008e34:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e36:	4421      	add	r1, r4
    ep->is_in = 0U;
 8008e38:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 8008e3c:	e7e5      	b.n	8008e0a <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8008e3e:	2001      	movs	r0, #1
 8008e40:	e7f3      	b.n	8008e2a <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 8008e42:	2002      	movs	r0, #2
 8008e44:	e7f1      	b.n	8008e2a <HAL_PCD_EP_ClrStall+0x50>

08008e46 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008e46:	6800      	ldr	r0, [r0, #0]
 8008e48:	0412      	lsls	r2, r2, #16
{
 8008e4a:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008e4c:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if (fifo == 0U)
 8008e4e:	b919      	cbnz	r1, 8008e58 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008e50:	4322      	orrs	r2, r4
 8008e52:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8008e54:	2000      	movs	r0, #0
 8008e56:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008e58:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8008e5a:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008e5c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8008e60:	2300      	movs	r3, #0
 8008e62:	1c5e      	adds	r6, r3, #1
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	429d      	cmp	r5, r3
 8008e68:	d805      	bhi.n	8008e76 <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008e6a:	313f      	adds	r1, #63	; 0x3f
 8008e6c:	4322      	orrs	r2, r4
 8008e6e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008e72:	6042      	str	r2, [r0, #4]
 8008e74:	e7ee      	b.n	8008e54 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008e76:	3340      	adds	r3, #64	; 0x40
 8008e78:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008e82:	4633      	mov	r3, r6
 8008e84:	e7ed      	b.n	8008e62 <HAL_PCDEx_SetTxFiFo+0x1c>

08008e86 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8008e86:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8008e88:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8008e8a:	6259      	str	r1, [r3, #36]	; 0x24
}
 8008e8c:	4770      	bx	lr

08008e8e <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8008e8e:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e90:	6802      	ldr	r2, [r0, #0]
{
 8008e92:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8008e94:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8008e98:	2000      	movs	r0, #0
 8008e9a:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008e9e:	6993      	ldr	r3, [r2, #24]
 8008ea0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ea4:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008ea6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eac:	f043 0303 	orr.w	r3, r3, #3
 8008eb0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008eb4:	4770      	bx	lr
	...

08008eb8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008eb8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008eba:	4c10      	ldr	r4, [pc, #64]	; (8008efc <HAL_PWREx_ConfigSupply+0x44>)
 8008ebc:	68e3      	ldr	r3, [r4, #12]
 8008ebe:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008ec2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008ec4:	d105      	bne.n	8008ed2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008ec6:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008eca:	1a18      	subs	r0, r3, r0
 8008ecc:	bf18      	it	ne
 8008ece:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008ed0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008ed2:	f023 0307 	bic.w	r3, r3, #7
 8008ed6:	4318      	orrs	r0, r3
 8008ed8:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8008eda:	f7fd f9c1 	bl	8006260 <HAL_GetTick>
 8008ede:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ee0:	6863      	ldr	r3, [r4, #4]
 8008ee2:	049b      	lsls	r3, r3, #18
 8008ee4:	d501      	bpl.n	8008eea <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	e7f2      	b.n	8008ed0 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008eea:	f7fd f9b9 	bl	8006260 <HAL_GetTick>
 8008eee:	1b40      	subs	r0, r0, r5
 8008ef0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008ef4:	d9f4      	bls.n	8008ee0 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8008ef6:	2001      	movs	r0, #1
 8008ef8:	e7ea      	b.n	8008ed0 <HAL_PWREx_ConfigSupply+0x18>
 8008efa:	bf00      	nop
 8008efc:	58024800 	.word	0x58024800

08008f00 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008f00:	4a02      	ldr	r2, [pc, #8]	; (8008f0c <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8008f02:	68d3      	ldr	r3, [r2, #12]
 8008f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f08:	60d3      	str	r3, [r2, #12]
}
 8008f0a:	4770      	bx	lr
 8008f0c:	58024800 	.word	0x58024800

08008f10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f12:	4604      	mov	r4, r0
 8008f14:	b908      	cbnz	r0, 8008f1a <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8008f16:	2001      	movs	r0, #1
 8008f18:	e08c      	b.n	8009034 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f1a:	6803      	ldr	r3, [r0, #0]
 8008f1c:	07d8      	lsls	r0, r3, #31
 8008f1e:	d45e      	bmi.n	8008fde <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	0799      	lsls	r1, r3, #30
 8008f24:	f100 80ac 	bmi.w	8009080 <HAL_RCC_OscConfig+0x170>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008f28:	6823      	ldr	r3, [r4, #0]
 8008f2a:	06da      	lsls	r2, r3, #27
 8008f2c:	d527      	bpl.n	8008f7e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f2e:	4ba8      	ldr	r3, [pc, #672]	; (80091d0 <HAL_RCC_OscConfig+0x2c0>)
 8008f30:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f32:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f34:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008f38:	2a08      	cmp	r2, #8
 8008f3a:	d007      	beq.n	8008f4c <HAL_RCC_OscConfig+0x3c>
 8008f3c:	2a18      	cmp	r2, #24
 8008f3e:	f040 810a 	bne.w	8009156 <HAL_RCC_OscConfig+0x246>
 8008f42:	f001 0203 	and.w	r2, r1, #3
 8008f46:	2a01      	cmp	r2, #1
 8008f48:	f040 8105 	bne.w	8009156 <HAL_RCC_OscConfig+0x246>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	05db      	lsls	r3, r3, #23
 8008f50:	d502      	bpl.n	8008f58 <HAL_RCC_OscConfig+0x48>
 8008f52:	69e3      	ldr	r3, [r4, #28]
 8008f54:	2b80      	cmp	r3, #128	; 0x80
 8008f56:	d1de      	bne.n	8008f16 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f58:	f7fd f99a 	bl	8006290 <HAL_GetREVID>
 8008f5c:	f241 0303 	movw	r3, #4099	; 0x1003
 8008f60:	6a21      	ldr	r1, [r4, #32]
 8008f62:	4298      	cmp	r0, r3
 8008f64:	4b9a      	ldr	r3, [pc, #616]	; (80091d0 <HAL_RCC_OscConfig+0x2c0>)
 8008f66:	f200 80ef 	bhi.w	8009148 <HAL_RCC_OscConfig+0x238>
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	2920      	cmp	r1, #32
 8008f6e:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8008f72:	bf0c      	ite	eq
 8008f74:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8008f78:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8008f7c:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	0719      	lsls	r1, r3, #28
 8008f82:	f100 8129 	bmi.w	80091d8 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	069a      	lsls	r2, r3, #26
 8008f8a:	f100 814a 	bmi.w	8009222 <HAL_RCC_OscConfig+0x312>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	075d      	lsls	r5, r3, #29
 8008f92:	d51e      	bpl.n	8008fd2 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8008f94:	4d8f      	ldr	r5, [pc, #572]	; (80091d4 <HAL_RCC_OscConfig+0x2c4>)
 8008f96:	682b      	ldr	r3, [r5, #0]
 8008f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f9c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8008f9e:	f7fd f95f 	bl	8006260 <HAL_GetTick>
 8008fa2:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008fa4:	682b      	ldr	r3, [r5, #0]
 8008fa6:	05da      	lsls	r2, r3, #23
 8008fa8:	f140 8160 	bpl.w	800926c <HAL_RCC_OscConfig+0x35c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fac:	68a3      	ldr	r3, [r4, #8]
 8008fae:	4d88      	ldr	r5, [pc, #544]	; (80091d0 <HAL_RCC_OscConfig+0x2c0>)
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	f040 8162 	bne.w	800927a <HAL_RCC_OscConfig+0x36a>
 8008fb6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008fb8:	f043 0301 	orr.w	r3, r3, #1
 8008fbc:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fbe:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008fc2:	f7fd f94d 	bl	8006260 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fc6:	4e82      	ldr	r6, [pc, #520]	; (80091d0 <HAL_RCC_OscConfig+0x2c0>)
      tickstart = HAL_GetTick();
 8008fc8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fca:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008fcc:	079b      	lsls	r3, r3, #30
 8008fce:	f140 817a 	bpl.w	80092c6 <HAL_RCC_OscConfig+0x3b6>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008fd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	f040 817d 	bne.w	80092d4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
  }
  return HAL_OK;
 8008fda:	2000      	movs	r0, #0
 8008fdc:	e02a      	b.n	8009034 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fde:	4b7c      	ldr	r3, [pc, #496]	; (80091d0 <HAL_RCC_OscConfig+0x2c0>)
 8008fe0:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008fe2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fe4:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008fe8:	2a10      	cmp	r2, #16
 8008fea:	d005      	beq.n	8008ff8 <HAL_RCC_OscConfig+0xe8>
 8008fec:	2a18      	cmp	r2, #24
 8008fee:	d10a      	bne.n	8009006 <HAL_RCC_OscConfig+0xf6>
 8008ff0:	f001 0203 	and.w	r2, r1, #3
 8008ff4:	2a02      	cmp	r2, #2
 8008ff6:	d106      	bne.n	8009006 <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	039a      	lsls	r2, r3, #14
 8008ffc:	d590      	bpl.n	8008f20 <HAL_RCC_OscConfig+0x10>
 8008ffe:	6863      	ldr	r3, [r4, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d18d      	bne.n	8008f20 <HAL_RCC_OscConfig+0x10>
 8009004:	e787      	b.n	8008f16 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009006:	6863      	ldr	r3, [r4, #4]
 8009008:	4d71      	ldr	r5, [pc, #452]	; (80091d0 <HAL_RCC_OscConfig+0x2c0>)
 800900a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800900e:	d112      	bne.n	8009036 <HAL_RCC_OscConfig+0x126>
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009016:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009018:	f7fd f922 	bl	8006260 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800901c:	4d6c      	ldr	r5, [pc, #432]	; (80091d0 <HAL_RCC_OscConfig+0x2c0>)
        tickstart = HAL_GetTick();
 800901e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	039b      	lsls	r3, r3, #14
 8009024:	f53f af7c 	bmi.w	8008f20 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009028:	f7fd f91a 	bl	8006260 <HAL_GetTick>
 800902c:	1b80      	subs	r0, r0, r6
 800902e:	2864      	cmp	r0, #100	; 0x64
 8009030:	d9f6      	bls.n	8009020 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8009032:	2003      	movs	r0, #3
}
 8009034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009036:	b9a3      	cbnz	r3, 8009062 <HAL_RCC_OscConfig+0x152>
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800903e:	602b      	str	r3, [r5, #0]
 8009040:	682b      	ldr	r3, [r5, #0]
 8009042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009046:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009048:	f7fd f90a 	bl	8006260 <HAL_GetTick>
 800904c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800904e:	682b      	ldr	r3, [r5, #0]
 8009050:	039f      	lsls	r7, r3, #14
 8009052:	f57f af65 	bpl.w	8008f20 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009056:	f7fd f903 	bl	8006260 <HAL_GetTick>
 800905a:	1b80      	subs	r0, r0, r6
 800905c:	2864      	cmp	r0, #100	; 0x64
 800905e:	d9f6      	bls.n	800904e <HAL_RCC_OscConfig+0x13e>
 8009060:	e7e7      	b.n	8009032 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009062:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009066:	682b      	ldr	r3, [r5, #0]
 8009068:	d103      	bne.n	8009072 <HAL_RCC_OscConfig+0x162>
 800906a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800906e:	602b      	str	r3, [r5, #0]
 8009070:	e7ce      	b.n	8009010 <HAL_RCC_OscConfig+0x100>
 8009072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009076:	602b      	str	r3, [r5, #0]
 8009078:	682b      	ldr	r3, [r5, #0]
 800907a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800907e:	e7ca      	b.n	8009016 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009080:	4b53      	ldr	r3, [pc, #332]	; (80091d0 <HAL_RCC_OscConfig+0x2c0>)
 8009082:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009084:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009086:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 800908a:	d003      	beq.n	8009094 <HAL_RCC_OscConfig+0x184>
 800908c:	2a18      	cmp	r2, #24
 800908e:	d120      	bne.n	80090d2 <HAL_RCC_OscConfig+0x1c2>
 8009090:	078e      	lsls	r6, r1, #30
 8009092:	d11e      	bne.n	80090d2 <HAL_RCC_OscConfig+0x1c2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	075d      	lsls	r5, r3, #29
 8009098:	d503      	bpl.n	80090a2 <HAL_RCC_OscConfig+0x192>
 800909a:	68e3      	ldr	r3, [r4, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	f43f af3a 	beq.w	8008f16 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090a2:	f7fd f8f5 	bl	8006290 <HAL_GetREVID>
 80090a6:	f241 0303 	movw	r3, #4099	; 0x1003
 80090aa:	6921      	ldr	r1, [r4, #16]
 80090ac:	4298      	cmp	r0, r3
 80090ae:	4b48      	ldr	r3, [pc, #288]	; (80091d0 <HAL_RCC_OscConfig+0x2c0>)
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	d809      	bhi.n	80090c8 <HAL_RCC_OscConfig+0x1b8>
 80090b4:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80090b8:	2940      	cmp	r1, #64	; 0x40
 80090ba:	bf0c      	ite	eq
 80090bc:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 80090c0:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 80090c4:	605a      	str	r2, [r3, #4]
 80090c6:	e72f      	b.n	8008f28 <HAL_RCC_OscConfig+0x18>
 80090c8:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80090cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80090d0:	e7f8      	b.n	80090c4 <HAL_RCC_OscConfig+0x1b4>
 80090d2:	4d3f      	ldr	r5, [pc, #252]	; (80091d0 <HAL_RCC_OscConfig+0x2c0>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090d4:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80090d6:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090d8:	b332      	cbz	r2, 8009128 <HAL_RCC_OscConfig+0x218>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80090da:	f023 0319 	bic.w	r3, r3, #25
 80090de:	4313      	orrs	r3, r2
 80090e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80090e2:	f7fd f8bd 	bl	8006260 <HAL_GetTick>
 80090e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	0758      	lsls	r0, r3, #29
 80090ec:	d511      	bpl.n	8009112 <HAL_RCC_OscConfig+0x202>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090ee:	f7fd f8cf 	bl	8006290 <HAL_GetREVID>
 80090f2:	f241 0303 	movw	r3, #4099	; 0x1003
 80090f6:	6922      	ldr	r2, [r4, #16]
 80090f8:	4298      	cmp	r0, r3
 80090fa:	686b      	ldr	r3, [r5, #4]
 80090fc:	d80f      	bhi.n	800911e <HAL_RCC_OscConfig+0x20e>
 80090fe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009102:	2a40      	cmp	r2, #64	; 0x40
 8009104:	bf0c      	ite	eq
 8009106:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800910a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800910e:	606b      	str	r3, [r5, #4]
 8009110:	e70a      	b.n	8008f28 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009112:	f7fd f8a5 	bl	8006260 <HAL_GetTick>
 8009116:	1b80      	subs	r0, r0, r6
 8009118:	2802      	cmp	r0, #2
 800911a:	d9e5      	bls.n	80090e8 <HAL_RCC_OscConfig+0x1d8>
 800911c:	e789      	b.n	8009032 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800911e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009122:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009126:	e7f2      	b.n	800910e <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_DISABLE();
 8009128:	f023 0301 	bic.w	r3, r3, #1
 800912c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800912e:	f7fd f897 	bl	8006260 <HAL_GetTick>
 8009132:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	0759      	lsls	r1, r3, #29
 8009138:	f57f aef6 	bpl.w	8008f28 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800913c:	f7fd f890 	bl	8006260 <HAL_GetTick>
 8009140:	1b80      	subs	r0, r0, r6
 8009142:	2802      	cmp	r0, #2
 8009144:	d9f6      	bls.n	8009134 <HAL_RCC_OscConfig+0x224>
 8009146:	e774      	b.n	8009032 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009148:	68da      	ldr	r2, [r3, #12]
 800914a:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 800914e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009152:	60da      	str	r2, [r3, #12]
 8009154:	e713      	b.n	8008f7e <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009156:	69e3      	ldr	r3, [r4, #28]
 8009158:	4d1d      	ldr	r5, [pc, #116]	; (80091d0 <HAL_RCC_OscConfig+0x2c0>)
 800915a:	b343      	cbz	r3, 80091ae <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_CSI_ENABLE();
 800915c:	682b      	ldr	r3, [r5, #0]
 800915e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009162:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009164:	f7fd f87c 	bl	8006260 <HAL_GetTick>
 8009168:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800916a:	682b      	ldr	r3, [r5, #0]
 800916c:	05df      	lsls	r7, r3, #23
 800916e:	d511      	bpl.n	8009194 <HAL_RCC_OscConfig+0x284>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009170:	f7fd f88e 	bl	8006290 <HAL_GetREVID>
 8009174:	f241 0303 	movw	r3, #4099	; 0x1003
 8009178:	6a22      	ldr	r2, [r4, #32]
 800917a:	4298      	cmp	r0, r3
 800917c:	d810      	bhi.n	80091a0 <HAL_RCC_OscConfig+0x290>
 800917e:	686b      	ldr	r3, [r5, #4]
 8009180:	2a20      	cmp	r2, #32
 8009182:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009186:	bf0c      	ite	eq
 8009188:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800918c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8009190:	606b      	str	r3, [r5, #4]
 8009192:	e6f4      	b.n	8008f7e <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009194:	f7fd f864 	bl	8006260 <HAL_GetTick>
 8009198:	1b80      	subs	r0, r0, r6
 800919a:	2802      	cmp	r0, #2
 800919c:	d9e5      	bls.n	800916a <HAL_RCC_OscConfig+0x25a>
 800919e:	e748      	b.n	8009032 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091a0:	68eb      	ldr	r3, [r5, #12]
 80091a2:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80091a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80091aa:	60eb      	str	r3, [r5, #12]
 80091ac:	e6e7      	b.n	8008f7e <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_CSI_DISABLE();
 80091ae:	682b      	ldr	r3, [r5, #0]
 80091b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80091b6:	f7fd f853 	bl	8006260 <HAL_GetTick>
 80091ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091bc:	682b      	ldr	r3, [r5, #0]
 80091be:	05d8      	lsls	r0, r3, #23
 80091c0:	f57f aedd 	bpl.w	8008f7e <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80091c4:	f7fd f84c 	bl	8006260 <HAL_GetTick>
 80091c8:	1b80      	subs	r0, r0, r6
 80091ca:	2802      	cmp	r0, #2
 80091cc:	d9f6      	bls.n	80091bc <HAL_RCC_OscConfig+0x2ac>
 80091ce:	e730      	b.n	8009032 <HAL_RCC_OscConfig+0x122>
 80091d0:	58024400 	.word	0x58024400
 80091d4:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80091d8:	6963      	ldr	r3, [r4, #20]
 80091da:	4d96      	ldr	r5, [pc, #600]	; (8009434 <HAL_RCC_OscConfig+0x524>)
 80091dc:	b183      	cbz	r3, 8009200 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_LSI_ENABLE();
 80091de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80091e0:	f043 0301 	orr.w	r3, r3, #1
 80091e4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80091e6:	f7fd f83b 	bl	8006260 <HAL_GetTick>
 80091ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80091ec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80091ee:	079b      	lsls	r3, r3, #30
 80091f0:	f53f aec9 	bmi.w	8008f86 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091f4:	f7fd f834 	bl	8006260 <HAL_GetTick>
 80091f8:	1b80      	subs	r0, r0, r6
 80091fa:	2802      	cmp	r0, #2
 80091fc:	d9f6      	bls.n	80091ec <HAL_RCC_OscConfig+0x2dc>
 80091fe:	e718      	b.n	8009032 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8009200:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009202:	f023 0301 	bic.w	r3, r3, #1
 8009206:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8009208:	f7fd f82a 	bl	8006260 <HAL_GetTick>
 800920c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800920e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009210:	079f      	lsls	r7, r3, #30
 8009212:	f57f aeb8 	bpl.w	8008f86 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009216:	f7fd f823 	bl	8006260 <HAL_GetTick>
 800921a:	1b80      	subs	r0, r0, r6
 800921c:	2802      	cmp	r0, #2
 800921e:	d9f6      	bls.n	800920e <HAL_RCC_OscConfig+0x2fe>
 8009220:	e707      	b.n	8009032 <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009222:	69a3      	ldr	r3, [r4, #24]
 8009224:	4d83      	ldr	r5, [pc, #524]	; (8009434 <HAL_RCC_OscConfig+0x524>)
 8009226:	b183      	cbz	r3, 800924a <HAL_RCC_OscConfig+0x33a>
      __HAL_RCC_HSI48_ENABLE();
 8009228:	682b      	ldr	r3, [r5, #0]
 800922a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800922e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009230:	f7fd f816 	bl	8006260 <HAL_GetTick>
 8009234:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009236:	682b      	ldr	r3, [r5, #0]
 8009238:	0498      	lsls	r0, r3, #18
 800923a:	f53f aea8 	bmi.w	8008f8e <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800923e:	f7fd f80f 	bl	8006260 <HAL_GetTick>
 8009242:	1b80      	subs	r0, r0, r6
 8009244:	2802      	cmp	r0, #2
 8009246:	d9f6      	bls.n	8009236 <HAL_RCC_OscConfig+0x326>
 8009248:	e6f3      	b.n	8009032 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800924a:	682b      	ldr	r3, [r5, #0]
 800924c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009250:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009252:	f7fd f805 	bl	8006260 <HAL_GetTick>
 8009256:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	0499      	lsls	r1, r3, #18
 800925c:	f57f ae97 	bpl.w	8008f8e <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009260:	f7fc fffe 	bl	8006260 <HAL_GetTick>
 8009264:	1b80      	subs	r0, r0, r6
 8009266:	2802      	cmp	r0, #2
 8009268:	d9f6      	bls.n	8009258 <HAL_RCC_OscConfig+0x348>
 800926a:	e6e2      	b.n	8009032 <HAL_RCC_OscConfig+0x122>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800926c:	f7fc fff8 	bl	8006260 <HAL_GetTick>
 8009270:	1b80      	subs	r0, r0, r6
 8009272:	2864      	cmp	r0, #100	; 0x64
 8009274:	f67f ae96 	bls.w	8008fa4 <HAL_RCC_OscConfig+0x94>
 8009278:	e6db      	b.n	8009032 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800927a:	b9b3      	cbnz	r3, 80092aa <HAL_RCC_OscConfig+0x39a>
 800927c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800927e:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009282:	f023 0301 	bic.w	r3, r3, #1
 8009286:	672b      	str	r3, [r5, #112]	; 0x70
 8009288:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800928a:	f023 0304 	bic.w	r3, r3, #4
 800928e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8009290:	f7fc ffe6 	bl	8006260 <HAL_GetTick>
 8009294:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009296:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009298:	0798      	lsls	r0, r3, #30
 800929a:	f57f ae9a 	bpl.w	8008fd2 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800929e:	f7fc ffdf 	bl	8006260 <HAL_GetTick>
 80092a2:	1b80      	subs	r0, r0, r6
 80092a4:	42b8      	cmp	r0, r7
 80092a6:	d9f6      	bls.n	8009296 <HAL_RCC_OscConfig+0x386>
 80092a8:	e6c3      	b.n	8009032 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092aa:	2b05      	cmp	r3, #5
 80092ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80092ae:	d103      	bne.n	80092b8 <HAL_RCC_OscConfig+0x3a8>
 80092b0:	f043 0304 	orr.w	r3, r3, #4
 80092b4:	672b      	str	r3, [r5, #112]	; 0x70
 80092b6:	e67e      	b.n	8008fb6 <HAL_RCC_OscConfig+0xa6>
 80092b8:	f023 0301 	bic.w	r3, r3, #1
 80092bc:	672b      	str	r3, [r5, #112]	; 0x70
 80092be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80092c0:	f023 0304 	bic.w	r3, r3, #4
 80092c4:	e67a      	b.n	8008fbc <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092c6:	f7fc ffcb 	bl	8006260 <HAL_GetTick>
 80092ca:	1bc0      	subs	r0, r0, r7
 80092cc:	42a8      	cmp	r0, r5
 80092ce:	f67f ae7c 	bls.w	8008fca <HAL_RCC_OscConfig+0xba>
 80092d2:	e6ae      	b.n	8009032 <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80092d4:	4d57      	ldr	r5, [pc, #348]	; (8009434 <HAL_RCC_OscConfig+0x524>)
 80092d6:	692b      	ldr	r3, [r5, #16]
 80092d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092dc:	2b18      	cmp	r3, #24
 80092de:	d07a      	beq.n	80093d6 <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_PLL_DISABLE();
 80092e0:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092e2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80092e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092e8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092ea:	d167      	bne.n	80093bc <HAL_RCC_OscConfig+0x4ac>
        tickstart = HAL_GetTick();
 80092ec:	f7fc ffb8 	bl	8006260 <HAL_GetTick>
 80092f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092f2:	682b      	ldr	r3, [r5, #0]
 80092f4:	0199      	lsls	r1, r3, #6
 80092f6:	d45b      	bmi.n	80093b0 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80092fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80092fc:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8009300:	f023 0303 	bic.w	r3, r3, #3
 8009304:	4313      	orrs	r3, r2
 8009306:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009308:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800930c:	62ab      	str	r3, [r5, #40]	; 0x28
 800930e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009310:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009312:	3b01      	subs	r3, #1
 8009314:	3a01      	subs	r2, #1
 8009316:	025b      	lsls	r3, r3, #9
 8009318:	0412      	lsls	r2, r2, #16
 800931a:	b29b      	uxth	r3, r3
 800931c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009320:	4313      	orrs	r3, r2
 8009322:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009324:	3a01      	subs	r2, #1
 8009326:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800932a:	4313      	orrs	r3, r2
 800932c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800932e:	3a01      	subs	r2, #1
 8009330:	0612      	lsls	r2, r2, #24
 8009332:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009336:	4313      	orrs	r3, r2
 8009338:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800933a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800933c:	f023 0301 	bic.w	r3, r3, #1
 8009340:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009342:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009344:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8009346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800934a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800934e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009352:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009354:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009356:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009358:	f023 030c 	bic.w	r3, r3, #12
 800935c:	4313      	orrs	r3, r2
 800935e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009360:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009362:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009364:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009368:	4c32      	ldr	r4, [pc, #200]	; (8009434 <HAL_RCC_OscConfig+0x524>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800936a:	4313      	orrs	r3, r2
 800936c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800936e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009374:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009376:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800937c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800937e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009384:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8009386:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009388:	f043 0301 	orr.w	r3, r3, #1
 800938c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800938e:	682b      	ldr	r3, [r5, #0]
 8009390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009394:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009396:	f7fc ff63 	bl	8006260 <HAL_GetTick>
 800939a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800939c:	6823      	ldr	r3, [r4, #0]
 800939e:	019a      	lsls	r2, r3, #6
 80093a0:	f53f ae1b 	bmi.w	8008fda <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093a4:	f7fc ff5c 	bl	8006260 <HAL_GetTick>
 80093a8:	1b40      	subs	r0, r0, r5
 80093aa:	2802      	cmp	r0, #2
 80093ac:	d9f6      	bls.n	800939c <HAL_RCC_OscConfig+0x48c>
 80093ae:	e640      	b.n	8009032 <HAL_RCC_OscConfig+0x122>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093b0:	f7fc ff56 	bl	8006260 <HAL_GetTick>
 80093b4:	1b80      	subs	r0, r0, r6
 80093b6:	2802      	cmp	r0, #2
 80093b8:	d99b      	bls.n	80092f2 <HAL_RCC_OscConfig+0x3e2>
 80093ba:	e63a      	b.n	8009032 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 80093bc:	f7fc ff50 	bl	8006260 <HAL_GetTick>
 80093c0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80093c2:	682b      	ldr	r3, [r5, #0]
 80093c4:	019b      	lsls	r3, r3, #6
 80093c6:	f57f ae08 	bpl.w	8008fda <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093ca:	f7fc ff49 	bl	8006260 <HAL_GetTick>
 80093ce:	1b00      	subs	r0, r0, r4
 80093d0:	2802      	cmp	r0, #2
 80093d2:	d9f6      	bls.n	80093c2 <HAL_RCC_OscConfig+0x4b2>
 80093d4:	e62d      	b.n	8009032 <HAL_RCC_OscConfig+0x122>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093d6:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80093d8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80093da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093dc:	f43f ae2a 	beq.w	8009034 <HAL_RCC_OscConfig+0x124>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093e0:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80093e6:	4281      	cmp	r1, r0
 80093e8:	f47f ad95 	bne.w	8008f16 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80093ec:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80093f2:	428a      	cmp	r2, r1
 80093f4:	f47f ad8f 	bne.w	8008f16 <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80093f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80093fa:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80093fe:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009400:	4291      	cmp	r1, r2
 8009402:	f47f ad88 	bne.w	8008f16 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009406:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009408:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800940c:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800940e:	4291      	cmp	r1, r2
 8009410:	f47f ad81 	bne.w	8008f16 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009414:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009416:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800941a:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800941c:	4291      	cmp	r1, r2
 800941e:	f47f ad7a 	bne.w	8008f16 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009422:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009424:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009428:	3801      	subs	r0, #1
    return HAL_ERROR;
 800942a:	1a18      	subs	r0, r3, r0
 800942c:	bf18      	it	ne
 800942e:	2001      	movne	r0, #1
 8009430:	e600      	b.n	8009034 <HAL_RCC_OscConfig+0x124>
 8009432:	bf00      	nop
 8009434:	58024400 	.word	0x58024400

08009438 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009438:	4b46      	ldr	r3, [pc, #280]	; (8009554 <HAL_RCC_GetSysClockFreq+0x11c>)
 800943a:	691a      	ldr	r2, [r3, #16]
 800943c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8009440:	2a10      	cmp	r2, #16
{
 8009442:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009444:	f000 8084 	beq.w	8009550 <HAL_RCC_GetSysClockFreq+0x118>
 8009448:	2a18      	cmp	r2, #24
 800944a:	d00c      	beq.n	8009466 <HAL_RCC_GetSysClockFreq+0x2e>
 800944c:	b10a      	cbz	r2, 8009452 <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800944e:	4842      	ldr	r0, [pc, #264]	; (8009558 <HAL_RCC_GetSysClockFreq+0x120>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8009450:	bd10      	pop	{r4, pc}
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	4841      	ldr	r0, [pc, #260]	; (800955c <HAL_RCC_GetSysClockFreq+0x124>)
 8009456:	f012 0f20 	tst.w	r2, #32
 800945a:	d0f9      	beq.n	8009450 <HAL_RCC_GetSysClockFreq+0x18>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009462:	40d8      	lsrs	r0, r3
 8009464:	e7f4      	b.n	8009450 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009466:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009468:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800946a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800946c:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009470:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 8009472:	2800      	cmp	r0, #0
 8009474:	d0ec      	beq.n	8009450 <HAL_RCC_GetSysClockFreq+0x18>
 8009476:	ee07 0a90 	vmov	s15, r0
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800947a:	f002 0201 	and.w	r2, r2, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800947e:	f3c4 00cc 	ubfx	r0, r4, #3, #13
 8009482:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009486:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800948a:	4342      	muls	r2, r0
 800948c:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009490:	f001 0203 	and.w	r2, r1, #3
      switch (pllsource)
 8009494:	2a01      	cmp	r2, #1
 8009496:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800949a:	d002      	beq.n	80094a2 <HAL_RCC_GetSysClockFreq+0x6a>
 800949c:	d30f      	bcc.n	80094be <HAL_RCC_GetSysClockFreq+0x86>
 800949e:	2a02      	cmp	r2, #2
 80094a0:	d048      	beq.n	8009534 <HAL_RCC_GetSysClockFreq+0xfc>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094a8:	ee07 3a10 	vmov	s14, r3
 80094ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80094b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094b4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80094b8:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8009560 <HAL_RCC_GetSysClockFreq+0x128>
 80094bc:	e037      	b.n	800952e <HAL_RCC_GetSysClockFreq+0xf6>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	0692      	lsls	r2, r2, #26
 80094c2:	d527      	bpl.n	8009514 <HAL_RCC_GetSysClockFreq+0xdc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094c4:	6819      	ldr	r1, [r3, #0]
 80094c6:	4a25      	ldr	r2, [pc, #148]	; (800955c <HAL_RCC_GetSysClockFreq+0x124>)
 80094c8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094ce:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094d4:	ee07 2a10 	vmov	s14, r2
 80094d8:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80094dc:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80094e0:	ee06 3a90 	vmov	s13, r3
 80094e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80094e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ec:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80094f0:	4b18      	ldr	r3, [pc, #96]	; (8009554 <HAL_RCC_GetSysClockFreq+0x11c>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094f2:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80094f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80094fc:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80094fe:	ee07 3a10 	vmov	s14, r3
 8009502:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009506:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800950a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800950e:	ee17 0a90 	vmov	r0, s15
 8009512:	e79d      	b.n	8009450 <HAL_RCC_GetSysClockFreq+0x18>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800951a:	ee07 3a10 	vmov	s14, r3
 800951e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009526:	ee77 7a86 	vadd.f32	s15, s15, s12
 800952a:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8009564 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800952e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009532:	e7dd      	b.n	80094f0 <HAL_RCC_GetSysClockFreq+0xb8>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953a:	ee07 3a10 	vmov	s14, r3
 800953e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009546:	ee77 7a86 	vadd.f32	s15, s15, s12
 800954a:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8009568 <HAL_RCC_GetSysClockFreq+0x130>
 800954e:	e7ee      	b.n	800952e <HAL_RCC_GetSysClockFreq+0xf6>
    sysclockfreq = HSE_VALUE;
 8009550:	4806      	ldr	r0, [pc, #24]	; (800956c <HAL_RCC_GetSysClockFreq+0x134>)
 8009552:	e77d      	b.n	8009450 <HAL_RCC_GetSysClockFreq+0x18>
 8009554:	58024400 	.word	0x58024400
 8009558:	003d0900 	.word	0x003d0900
 800955c:	03d09000 	.word	0x03d09000
 8009560:	4a742400 	.word	0x4a742400
 8009564:	4c742400 	.word	0x4c742400
 8009568:	4af42400 	.word	0x4af42400
 800956c:	007a1200 	.word	0x007a1200

08009570 <HAL_RCC_ClockConfig>:
{
 8009570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009574:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8009576:	4604      	mov	r4, r0
 8009578:	b910      	cbnz	r0, 8009580 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800957a:	2001      	movs	r0, #1
}
 800957c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009580:	4a88      	ldr	r2, [pc, #544]	; (80097a4 <HAL_RCC_ClockConfig+0x234>)
 8009582:	6813      	ldr	r3, [r2, #0]
 8009584:	f003 030f 	and.w	r3, r3, #15
 8009588:	428b      	cmp	r3, r1
 800958a:	f0c0 8093 	bcc.w	80096b4 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	075f      	lsls	r7, r3, #29
 8009592:	f100 809b 	bmi.w	80096cc <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009596:	071e      	lsls	r6, r3, #28
 8009598:	d50b      	bpl.n	80095b2 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800959a:	4983      	ldr	r1, [pc, #524]	; (80097a8 <HAL_RCC_ClockConfig+0x238>)
 800959c:	6966      	ldr	r6, [r4, #20]
 800959e:	69c8      	ldr	r0, [r1, #28]
 80095a0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80095a4:	4286      	cmp	r6, r0
 80095a6:	d904      	bls.n	80095b2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095a8:	69ca      	ldr	r2, [r1, #28]
 80095aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80095ae:	4332      	orrs	r2, r6
 80095b0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095b2:	06d8      	lsls	r0, r3, #27
 80095b4:	d50b      	bpl.n	80095ce <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80095b6:	497c      	ldr	r1, [pc, #496]	; (80097a8 <HAL_RCC_ClockConfig+0x238>)
 80095b8:	69a6      	ldr	r6, [r4, #24]
 80095ba:	69c8      	ldr	r0, [r1, #28]
 80095bc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80095c0:	4286      	cmp	r6, r0
 80095c2:	d904      	bls.n	80095ce <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095c4:	69ca      	ldr	r2, [r1, #28]
 80095c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80095ca:	4332      	orrs	r2, r6
 80095cc:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80095ce:	0699      	lsls	r1, r3, #26
 80095d0:	d50b      	bpl.n	80095ea <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80095d2:	4975      	ldr	r1, [pc, #468]	; (80097a8 <HAL_RCC_ClockConfig+0x238>)
 80095d4:	69e6      	ldr	r6, [r4, #28]
 80095d6:	6a08      	ldr	r0, [r1, #32]
 80095d8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80095dc:	4286      	cmp	r6, r0
 80095de:	d904      	bls.n	80095ea <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80095e0:	6a0a      	ldr	r2, [r1, #32]
 80095e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80095e6:	4332      	orrs	r2, r6
 80095e8:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095ea:	079a      	lsls	r2, r3, #30
 80095ec:	d50b      	bpl.n	8009606 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80095ee:	496e      	ldr	r1, [pc, #440]	; (80097a8 <HAL_RCC_ClockConfig+0x238>)
 80095f0:	68e6      	ldr	r6, [r4, #12]
 80095f2:	6988      	ldr	r0, [r1, #24]
 80095f4:	f000 000f 	and.w	r0, r0, #15
 80095f8:	4286      	cmp	r6, r0
 80095fa:	d904      	bls.n	8009606 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095fc:	698a      	ldr	r2, [r1, #24]
 80095fe:	f022 020f 	bic.w	r2, r2, #15
 8009602:	4332      	orrs	r2, r6
 8009604:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009606:	07df      	lsls	r7, r3, #31
 8009608:	d46e      	bmi.n	80096e8 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	079e      	lsls	r6, r3, #30
 800960e:	f100 80a1 	bmi.w	8009754 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009612:	4964      	ldr	r1, [pc, #400]	; (80097a4 <HAL_RCC_ClockConfig+0x234>)
 8009614:	680a      	ldr	r2, [r1, #0]
 8009616:	f002 020f 	and.w	r2, r2, #15
 800961a:	42aa      	cmp	r2, r5
 800961c:	f200 80a8 	bhi.w	8009770 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009620:	0758      	lsls	r0, r3, #29
 8009622:	f100 80b1 	bmi.w	8009788 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009626:	0719      	lsls	r1, r3, #28
 8009628:	d50b      	bpl.n	8009642 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800962a:	495f      	ldr	r1, [pc, #380]	; (80097a8 <HAL_RCC_ClockConfig+0x238>)
 800962c:	6965      	ldr	r5, [r4, #20]
 800962e:	69c8      	ldr	r0, [r1, #28]
 8009630:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8009634:	4285      	cmp	r5, r0
 8009636:	d204      	bcs.n	8009642 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009638:	69ca      	ldr	r2, [r1, #28]
 800963a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800963e:	432a      	orrs	r2, r5
 8009640:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009642:	06da      	lsls	r2, r3, #27
 8009644:	d50b      	bpl.n	800965e <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009646:	4958      	ldr	r1, [pc, #352]	; (80097a8 <HAL_RCC_ClockConfig+0x238>)
 8009648:	69a5      	ldr	r5, [r4, #24]
 800964a:	69c8      	ldr	r0, [r1, #28]
 800964c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8009650:	4285      	cmp	r5, r0
 8009652:	d204      	bcs.n	800965e <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009654:	69ca      	ldr	r2, [r1, #28]
 8009656:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800965a:	432a      	orrs	r2, r5
 800965c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800965e:	069b      	lsls	r3, r3, #26
 8009660:	d50b      	bpl.n	800967a <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009662:	4a51      	ldr	r2, [pc, #324]	; (80097a8 <HAL_RCC_ClockConfig+0x238>)
 8009664:	69e0      	ldr	r0, [r4, #28]
 8009666:	6a11      	ldr	r1, [r2, #32]
 8009668:	f001 0170 	and.w	r1, r1, #112	; 0x70
 800966c:	4288      	cmp	r0, r1
 800966e:	d204      	bcs.n	800967a <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009670:	6a13      	ldr	r3, [r2, #32]
 8009672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009676:	4303      	orrs	r3, r0
 8009678:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800967a:	f7ff fedd 	bl	8009438 <HAL_RCC_GetSysClockFreq>
 800967e:	494a      	ldr	r1, [pc, #296]	; (80097a8 <HAL_RCC_ClockConfig+0x238>)
 8009680:	4a4a      	ldr	r2, [pc, #296]	; (80097ac <HAL_RCC_ClockConfig+0x23c>)
 8009682:	698b      	ldr	r3, [r1, #24]
 8009684:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009688:	5cd3      	ldrb	r3, [r2, r3]
 800968a:	f003 031f 	and.w	r3, r3, #31
 800968e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009690:	698b      	ldr	r3, [r1, #24]
 8009692:	f003 030f 	and.w	r3, r3, #15
 8009696:	5cd3      	ldrb	r3, [r2, r3]
 8009698:	4a45      	ldr	r2, [pc, #276]	; (80097b0 <HAL_RCC_ClockConfig+0x240>)
 800969a:	f003 031f 	and.w	r3, r3, #31
 800969e:	fa20 f303 	lsr.w	r3, r0, r3
 80096a2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80096a4:	4b43      	ldr	r3, [pc, #268]	; (80097b4 <HAL_RCC_ClockConfig+0x244>)
 80096a6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80096a8:	4b43      	ldr	r3, [pc, #268]	; (80097b8 <HAL_RCC_ClockConfig+0x248>)
}
 80096aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80096ae:	6818      	ldr	r0, [r3, #0]
 80096b0:	f7fa b9f4 	b.w	8003a9c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096b4:	6813      	ldr	r3, [r2, #0]
 80096b6:	f023 030f 	bic.w	r3, r3, #15
 80096ba:	430b      	orrs	r3, r1
 80096bc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096be:	6813      	ldr	r3, [r2, #0]
 80096c0:	f003 030f 	and.w	r3, r3, #15
 80096c4:	428b      	cmp	r3, r1
 80096c6:	f47f af58 	bne.w	800957a <HAL_RCC_ClockConfig+0xa>
 80096ca:	e760      	b.n	800958e <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096cc:	4936      	ldr	r1, [pc, #216]	; (80097a8 <HAL_RCC_ClockConfig+0x238>)
 80096ce:	6926      	ldr	r6, [r4, #16]
 80096d0:	6988      	ldr	r0, [r1, #24]
 80096d2:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80096d6:	4286      	cmp	r6, r0
 80096d8:	f67f af5d 	bls.w	8009596 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096dc:	698a      	ldr	r2, [r1, #24]
 80096de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80096e2:	4332      	orrs	r2, r6
 80096e4:	618a      	str	r2, [r1, #24]
 80096e6:	e756      	b.n	8009596 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80096e8:	4b2f      	ldr	r3, [pc, #188]	; (80097a8 <HAL_RCC_ClockConfig+0x238>)
 80096ea:	68a1      	ldr	r1, [r4, #8]
 80096ec:	699a      	ldr	r2, [r3, #24]
 80096ee:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80096f2:	430a      	orrs	r2, r1
 80096f4:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096f6:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096f8:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096fa:	2902      	cmp	r1, #2
 80096fc:	d11d      	bne.n	800973a <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096fe:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009702:	f43f af3a 	beq.w	800957a <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009706:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009708:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800970c:	4e26      	ldr	r6, [pc, #152]	; (80097a8 <HAL_RCC_ClockConfig+0x238>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800970e:	f022 0207 	bic.w	r2, r2, #7
 8009712:	430a      	orrs	r2, r1
 8009714:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8009716:	f7fc fda3 	bl	8006260 <HAL_GetTick>
 800971a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800971c:	6933      	ldr	r3, [r6, #16]
 800971e:	6862      	ldr	r2, [r4, #4]
 8009720:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009724:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8009728:	f43f af6f 	beq.w	800960a <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800972c:	f7fc fd98 	bl	8006260 <HAL_GetTick>
 8009730:	1bc0      	subs	r0, r0, r7
 8009732:	4540      	cmp	r0, r8
 8009734:	d9f2      	bls.n	800971c <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8009736:	2003      	movs	r0, #3
 8009738:	e720      	b.n	800957c <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800973a:	2903      	cmp	r1, #3
 800973c:	d102      	bne.n	8009744 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800973e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8009742:	e7de      	b.n	8009702 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009744:	2901      	cmp	r1, #1
 8009746:	d102      	bne.n	800974e <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009748:	f412 7f80 	tst.w	r2, #256	; 0x100
 800974c:	e7d9      	b.n	8009702 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800974e:	f012 0f04 	tst.w	r2, #4
 8009752:	e7d6      	b.n	8009702 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009754:	4914      	ldr	r1, [pc, #80]	; (80097a8 <HAL_RCC_ClockConfig+0x238>)
 8009756:	68e6      	ldr	r6, [r4, #12]
 8009758:	6988      	ldr	r0, [r1, #24]
 800975a:	f000 000f 	and.w	r0, r0, #15
 800975e:	4286      	cmp	r6, r0
 8009760:	f4bf af57 	bcs.w	8009612 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009764:	698a      	ldr	r2, [r1, #24]
 8009766:	f022 020f 	bic.w	r2, r2, #15
 800976a:	4332      	orrs	r2, r6
 800976c:	618a      	str	r2, [r1, #24]
 800976e:	e750      	b.n	8009612 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009770:	680a      	ldr	r2, [r1, #0]
 8009772:	f022 020f 	bic.w	r2, r2, #15
 8009776:	432a      	orrs	r2, r5
 8009778:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800977a:	680a      	ldr	r2, [r1, #0]
 800977c:	f002 020f 	and.w	r2, r2, #15
 8009780:	42aa      	cmp	r2, r5
 8009782:	f47f aefa 	bne.w	800957a <HAL_RCC_ClockConfig+0xa>
 8009786:	e74b      	b.n	8009620 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009788:	4907      	ldr	r1, [pc, #28]	; (80097a8 <HAL_RCC_ClockConfig+0x238>)
 800978a:	6925      	ldr	r5, [r4, #16]
 800978c:	6988      	ldr	r0, [r1, #24]
 800978e:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8009792:	4285      	cmp	r5, r0
 8009794:	f4bf af47 	bcs.w	8009626 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009798:	698a      	ldr	r2, [r1, #24]
 800979a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800979e:	432a      	orrs	r2, r5
 80097a0:	618a      	str	r2, [r1, #24]
 80097a2:	e740      	b.n	8009626 <HAL_RCC_ClockConfig+0xb6>
 80097a4:	52002000 	.word	0x52002000
 80097a8:	58024400 	.word	0x58024400
 80097ac:	08015d5c 	.word	0x08015d5c
 80097b0:	24000004 	.word	0x24000004
 80097b4:	24000000 	.word	0x24000000
 80097b8:	2400001c 	.word	0x2400001c

080097bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097bc:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80097be:	f7ff fe3b 	bl	8009438 <HAL_RCC_GetSysClockFreq>
 80097c2:	4a0b      	ldr	r2, [pc, #44]	; (80097f0 <HAL_RCC_GetHCLKFreq+0x34>)
 80097c4:	490b      	ldr	r1, [pc, #44]	; (80097f4 <HAL_RCC_GetHCLKFreq+0x38>)
 80097c6:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80097c8:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80097ca:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80097ce:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80097d2:	5ccb      	ldrb	r3, [r1, r3]
 80097d4:	f003 031f 	and.w	r3, r3, #31
 80097d8:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80097dc:	5c88      	ldrb	r0, [r1, r2]
 80097de:	4a06      	ldr	r2, [pc, #24]	; (80097f8 <HAL_RCC_GetHCLKFreq+0x3c>)
 80097e0:	f000 001f 	and.w	r0, r0, #31
 80097e4:	fa23 f000 	lsr.w	r0, r3, r0
 80097e8:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80097ea:	4a04      	ldr	r2, [pc, #16]	; (80097fc <HAL_RCC_GetHCLKFreq+0x40>)
 80097ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80097ee:	bd08      	pop	{r3, pc}
 80097f0:	58024400 	.word	0x58024400
 80097f4:	08015d5c 	.word	0x08015d5c
 80097f8:	24000004 	.word	0x24000004
 80097fc:	24000000 	.word	0x24000000

08009800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009800:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009802:	f7ff ffdb 	bl	80097bc <HAL_RCC_GetHCLKFreq>
 8009806:	4b05      	ldr	r3, [pc, #20]	; (800981c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009808:	4a05      	ldr	r2, [pc, #20]	; (8009820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800980a:	69db      	ldr	r3, [r3, #28]
 800980c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009810:	5cd3      	ldrb	r3, [r2, r3]
 8009812:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009816:	40d8      	lsrs	r0, r3
 8009818:	bd08      	pop	{r3, pc}
 800981a:	bf00      	nop
 800981c:	58024400 	.word	0x58024400
 8009820:	08015d5c 	.word	0x08015d5c

08009824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009824:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009826:	f7ff ffc9 	bl	80097bc <HAL_RCC_GetHCLKFreq>
 800982a:	4b05      	ldr	r3, [pc, #20]	; (8009840 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800982c:	4a05      	ldr	r2, [pc, #20]	; (8009844 <HAL_RCC_GetPCLK2Freq+0x20>)
 800982e:	69db      	ldr	r3, [r3, #28]
 8009830:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009834:	5cd3      	ldrb	r3, [r2, r3]
 8009836:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800983a:	40d8      	lsrs	r0, r3
 800983c:	bd08      	pop	{r3, pc}
 800983e:	bf00      	nop
 8009840:	58024400 	.word	0x58024400
 8009844:	08015d5c 	.word	0x08015d5c

08009848 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009848:	233f      	movs	r3, #63	; 0x3f
 800984a:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800984c:	4b11      	ldr	r3, [pc, #68]	; (8009894 <HAL_RCC_GetClockConfig+0x4c>)
 800984e:	691a      	ldr	r2, [r3, #16]
 8009850:	f002 0207 	and.w	r2, r2, #7
 8009854:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009856:	699a      	ldr	r2, [r3, #24]
 8009858:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800985c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800985e:	699a      	ldr	r2, [r3, #24]
 8009860:	f002 020f 	and.w	r2, r2, #15
 8009864:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009866:	699a      	ldr	r2, [r3, #24]
 8009868:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800986c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800986e:	69da      	ldr	r2, [r3, #28]
 8009870:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009874:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009876:	69da      	ldr	r2, [r3, #28]
 8009878:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800987c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800987e:	6a1b      	ldr	r3, [r3, #32]
 8009880:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009884:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009886:	4b04      	ldr	r3, [pc, #16]	; (8009898 <HAL_RCC_GetClockConfig+0x50>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 030f 	and.w	r3, r3, #15
 800988e:	600b      	str	r3, [r1, #0]
}
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	58024400 	.word	0x58024400
 8009898:	52002000 	.word	0x52002000

0800989c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800989e:	4c3a      	ldr	r4, [pc, #232]	; (8009988 <RCCEx_PLL2_Config+0xec>)
{
 80098a0:	4606      	mov	r6, r0
 80098a2:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80098a6:	f003 0303 	and.w	r3, r3, #3
 80098aa:	2b03      	cmp	r3, #3
 80098ac:	d069      	beq.n	8009982 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80098b4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098b6:	f7fc fcd3 	bl	8006260 <HAL_GetTick>
 80098ba:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	011a      	lsls	r2, r3, #4
 80098c0:	d44b      	bmi.n	800995a <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80098c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80098c4:	6832      	ldr	r2, [r6, #0]
 80098c6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80098ca:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80098ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80098d0:	68b3      	ldr	r3, [r6, #8]
 80098d2:	68f2      	ldr	r2, [r6, #12]
 80098d4:	3b01      	subs	r3, #1
 80098d6:	3a01      	subs	r2, #1
 80098d8:	025b      	lsls	r3, r3, #9
 80098da:	0412      	lsls	r2, r2, #16
 80098dc:	b29b      	uxth	r3, r3
 80098de:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80098e2:	4313      	orrs	r3, r2
 80098e4:	6872      	ldr	r2, [r6, #4]
 80098e6:	3a01      	subs	r2, #1
 80098e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098ec:	4313      	orrs	r3, r2
 80098ee:	6932      	ldr	r2, [r6, #16]
 80098f0:	3a01      	subs	r2, #1
 80098f2:	0612      	lsls	r2, r2, #24
 80098f4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80098f8:	4313      	orrs	r3, r2
 80098fa:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80098fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80098fe:	6972      	ldr	r2, [r6, #20]
 8009900:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009904:	4313      	orrs	r3, r2
 8009906:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009908:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800990a:	69b2      	ldr	r2, [r6, #24]
 800990c:	f023 0320 	bic.w	r3, r3, #32
 8009910:	4313      	orrs	r3, r2
 8009912:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009914:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009916:	f023 0310 	bic.w	r3, r3, #16
 800991a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800991c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800991e:	69f2      	ldr	r2, [r6, #28]
 8009920:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009924:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009928:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800992c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800992e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009930:	f043 0310 	orr.w	r3, r3, #16
 8009934:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009936:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8009938:	b9b5      	cbnz	r5, 8009968 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800993a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800993e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009940:	4c11      	ldr	r4, [pc, #68]	; (8009988 <RCCEx_PLL2_Config+0xec>)
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009948:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800994a:	f7fc fc89 	bl	8006260 <HAL_GetTick>
 800994e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	011b      	lsls	r3, r3, #4
 8009954:	d50f      	bpl.n	8009976 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8009956:	2000      	movs	r0, #0
 8009958:	e005      	b.n	8009966 <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800995a:	f7fc fc81 	bl	8006260 <HAL_GetTick>
 800995e:	1bc0      	subs	r0, r0, r7
 8009960:	2802      	cmp	r0, #2
 8009962:	d9ab      	bls.n	80098bc <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8009964:	2003      	movs	r0, #3
}
 8009966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8009968:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800996a:	bf0c      	ite	eq
 800996c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009970:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8009974:	e7e3      	b.n	800993e <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009976:	f7fc fc73 	bl	8006260 <HAL_GetTick>
 800997a:	1b40      	subs	r0, r0, r5
 800997c:	2802      	cmp	r0, #2
 800997e:	d9e7      	bls.n	8009950 <RCCEx_PLL2_Config+0xb4>
 8009980:	e7f0      	b.n	8009964 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8009982:	2001      	movs	r0, #1
 8009984:	e7ef      	b.n	8009966 <RCCEx_PLL2_Config+0xca>
 8009986:	bf00      	nop
 8009988:	58024400 	.word	0x58024400

0800998c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800998e:	4c3a      	ldr	r4, [pc, #232]	; (8009a78 <RCCEx_PLL3_Config+0xec>)
{
 8009990:	4606      	mov	r6, r0
 8009992:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009994:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009996:	f003 0303 	and.w	r3, r3, #3
 800999a:	2b03      	cmp	r3, #3
 800999c:	d069      	beq.n	8009a72 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800999e:	6823      	ldr	r3, [r4, #0]
 80099a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099a4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099a6:	f7fc fc5b 	bl	8006260 <HAL_GetTick>
 80099aa:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099ac:	6823      	ldr	r3, [r4, #0]
 80099ae:	009a      	lsls	r2, r3, #2
 80099b0:	d44b      	bmi.n	8009a4a <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80099b4:	6832      	ldr	r2, [r6, #0]
 80099b6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80099ba:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80099be:	62a3      	str	r3, [r4, #40]	; 0x28
 80099c0:	68b3      	ldr	r3, [r6, #8]
 80099c2:	68f2      	ldr	r2, [r6, #12]
 80099c4:	3b01      	subs	r3, #1
 80099c6:	3a01      	subs	r2, #1
 80099c8:	025b      	lsls	r3, r3, #9
 80099ca:	0412      	lsls	r2, r2, #16
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80099d2:	4313      	orrs	r3, r2
 80099d4:	6872      	ldr	r2, [r6, #4]
 80099d6:	3a01      	subs	r2, #1
 80099d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099dc:	4313      	orrs	r3, r2
 80099de:	6932      	ldr	r2, [r6, #16]
 80099e0:	3a01      	subs	r2, #1
 80099e2:	0612      	lsls	r2, r2, #24
 80099e4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80099e8:	4313      	orrs	r3, r2
 80099ea:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80099ee:	6972      	ldr	r2, [r6, #20]
 80099f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80099f4:	4313      	orrs	r3, r2
 80099f6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80099f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80099fa:	69b2      	ldr	r2, [r6, #24]
 80099fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a00:	4313      	orrs	r3, r2
 8009a02:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a0a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009a0e:	69f2      	ldr	r2, [r6, #28]
 8009a10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a14:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009a18:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009a1c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a24:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8009a28:	b9b5      	cbnz	r5, 8009a58 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a2e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a30:	4c11      	ldr	r4, [pc, #68]	; (8009a78 <RCCEx_PLL3_Config+0xec>)
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a38:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a3a:	f7fc fc11 	bl	8006260 <HAL_GetTick>
 8009a3e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	d50f      	bpl.n	8009a66 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8009a46:	2000      	movs	r0, #0
 8009a48:	e005      	b.n	8009a56 <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009a4a:	f7fc fc09 	bl	8006260 <HAL_GetTick>
 8009a4e:	1bc0      	subs	r0, r0, r7
 8009a50:	2802      	cmp	r0, #2
 8009a52:	d9ab      	bls.n	80099ac <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8009a54:	2003      	movs	r0, #3
}
 8009a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8009a58:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a5a:	bf0c      	ite	eq
 8009a5c:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a60:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8009a64:	e7e3      	b.n	8009a2e <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009a66:	f7fc fbfb 	bl	8006260 <HAL_GetTick>
 8009a6a:	1b40      	subs	r0, r0, r5
 8009a6c:	2802      	cmp	r0, #2
 8009a6e:	d9e7      	bls.n	8009a40 <RCCEx_PLL3_Config+0xb4>
 8009a70:	e7f0      	b.n	8009a54 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8009a72:	2001      	movs	r0, #1
 8009a74:	e7ef      	b.n	8009a56 <RCCEx_PLL3_Config+0xca>
 8009a76:	bf00      	nop
 8009a78:	58024400 	.word	0x58024400

08009a7c <HAL_RCCEx_PeriphCLKConfig>:
{
 8009a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a80:	6806      	ldr	r6, [r0, #0]
{
 8009a82:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a84:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8009a88:	d023      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009a8a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8009a8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a90:	d018      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8009a92:	d802      	bhi.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8009a94:	b183      	cbz	r3, 8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8009a96:	2601      	movs	r6, #1
 8009a98:	e01b      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009a9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a9e:	d023      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8009aa0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009aa4:	d1f7      	bne.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009aa6:	4a9f      	ldr	r2, [pc, #636]	; (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009aa8:	2600      	movs	r6, #0
 8009aaa:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009aac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009aae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009ab2:	430b      	orrs	r3, r1
 8009ab4:	6513      	str	r3, [r2, #80]	; 0x50
 8009ab6:	e00c      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ab8:	4a9a      	ldr	r2, [pc, #616]	; (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009aba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ac0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ac2:	e7f0      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ac4:	2102      	movs	r1, #2
 8009ac6:	3004      	adds	r0, #4
 8009ac8:	f7ff fee8 	bl	800989c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009acc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d0e9      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	05dd      	lsls	r5, r3, #23
 8009ad6:	d534      	bpl.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009ad8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009ada:	2b04      	cmp	r3, #4
 8009adc:	d830      	bhi.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8009ade:	e8df f003 	tbb	[pc, r3]
 8009ae2:	0f08      	.short	0x0f08
 8009ae4:	0d29      	.short	0x0d29
 8009ae6:	0d          	.byte	0x0d
 8009ae7:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ae8:	2102      	movs	r1, #2
 8009aea:	3024      	adds	r0, #36	; 0x24
 8009aec:	f7ff ff4e 	bl	800998c <RCCEx_PLL3_Config>
 8009af0:	e7ec      	b.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009af2:	4a8c      	ldr	r2, [pc, #560]	; (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009af4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009afa:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8009afc:	4635      	mov	r5, r6
 8009afe:	e004      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b00:	2100      	movs	r1, #0
 8009b02:	1d20      	adds	r0, r4, #4
 8009b04:	f7ff feca 	bl	800989c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009b08:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009b0a:	b9e5      	cbnz	r5, 8009b46 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009b0c:	4a85      	ldr	r2, [pc, #532]	; (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009b0e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009b10:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009b12:	f023 0307 	bic.w	r3, r3, #7
 8009b16:	430b      	orrs	r3, r1
 8009b18:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	0598      	lsls	r0, r3, #22
 8009b1e:	d521      	bpl.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai23ClockSelection)
 8009b20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b22:	2b80      	cmp	r3, #128	; 0x80
 8009b24:	d03b      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x122>
 8009b26:	d810      	bhi.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xce>
 8009b28:	b36b      	cbz	r3, 8009b86 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8009b2a:	2b40      	cmp	r3, #64	; 0x40
 8009b2c:	d031      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x116>
      ret = HAL_ERROR;
 8009b2e:	2601      	movs	r6, #1
 8009b30:	4635      	mov	r5, r6
 8009b32:	e017      	b.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009b34:	2100      	movs	r1, #0
 8009b36:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009b3a:	f7ff ff27 	bl	800998c <RCCEx_PLL3_Config>
 8009b3e:	e7e3      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = HAL_ERROR;
 8009b40:	2601      	movs	r6, #1
 8009b42:	4635      	mov	r5, r6
 8009b44:	e7e9      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8009b46:	462e      	mov	r6, r5
 8009b48:	e7e7      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 8009b4a:	2bc0      	cmp	r3, #192	; 0xc0
 8009b4c:	d002      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8009b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b52:	d1ec      	bne.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    if(ret == HAL_OK)
 8009b54:	bb4d      	cbnz	r5, 8009baa <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009b56:	4a73      	ldr	r2, [pc, #460]	; (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009b58:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009b5a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009b5c:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8009b60:	430b      	orrs	r3, r1
 8009b62:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009b64:	6823      	ldr	r3, [r4, #0]
 8009b66:	0559      	lsls	r1, r3, #21
 8009b68:	d530      	bpl.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009b6a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8009b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b72:	d047      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8009b74:	d81b      	bhi.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x132>
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d038      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x170>
 8009b7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b7e:	d03b      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = HAL_ERROR;
 8009b80:	2601      	movs	r6, #1
 8009b82:	4635      	mov	r5, r6
 8009b84:	e022      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b86:	4a67      	ldr	r2, [pc, #412]	; (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009b88:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009b90:	e7e0      	b.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b92:	2100      	movs	r1, #0
 8009b94:	1d20      	adds	r0, r4, #4
 8009b96:	f7ff fe81 	bl	800989c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009b9a:	4605      	mov	r5, r0
      break;
 8009b9c:	e7da      	b.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ba4:	f7ff fef2 	bl	800998c <RCCEx_PLL3_Config>
 8009ba8:	e7f7      	b.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8009baa:	462e      	mov	r6, r5
 8009bac:	e7da      	b.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009bae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009bb2:	d002      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8009bb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009bb8:	d1e2      	bne.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(ret == HAL_OK)
 8009bba:	bb4d      	cbnz	r5, 8009c10 <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009bbc:	4a59      	ldr	r2, [pc, #356]	; (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009bbe:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8009bc2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009bc4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8009bc8:	430b      	orrs	r3, r1
 8009bca:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009bcc:	6823      	ldr	r3, [r4, #0]
 8009bce:	051a      	lsls	r2, r3, #20
 8009bd0:	d52f      	bpl.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8009bd2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8009bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bda:	d041      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009bdc:	d81a      	bhi.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8009bde:	b39b      	cbz	r3, 8009c48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009be4:	d036      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      ret = HAL_ERROR;
 8009be6:	2601      	movs	r6, #1
 8009be8:	4635      	mov	r5, r6
 8009bea:	e022      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bec:	4a4d      	ldr	r2, [pc, #308]	; (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009bee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bf4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009bf6:	e7e0      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	1d20      	adds	r0, r4, #4
 8009bfc:	f7ff fe4e 	bl	800989c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009c00:	4605      	mov	r5, r0
      break;
 8009c02:	e7da      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009c04:	2100      	movs	r1, #0
 8009c06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009c0a:	f7ff febf 	bl	800998c <RCCEx_PLL3_Config>
 8009c0e:	e7f7      	b.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8009c10:	462e      	mov	r6, r5
 8009c12:	e7db      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4BClockSelection)
 8009c14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c18:	d002      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009c1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c1e:	d1e2      	bne.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    if(ret == HAL_OK)
 8009c20:	bb25      	cbnz	r5, 8009c6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009c22:	4a40      	ldr	r2, [pc, #256]	; (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009c24:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8009c28:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009c2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009c2e:	430b      	orrs	r3, r1
 8009c30:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	019b      	lsls	r3, r3, #6
 8009c36:	d527      	bpl.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->QspiClockSelection)
 8009c38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009c3a:	2b10      	cmp	r3, #16
 8009c3c:	d033      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009c3e:	d817      	bhi.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8009c40:	b1d3      	cbz	r3, 8009c78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = HAL_ERROR;
 8009c42:	2601      	movs	r6, #1
 8009c44:	4635      	mov	r5, r6
 8009c46:	e01f      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c48:	4a36      	ldr	r2, [pc, #216]	; (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009c4a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c50:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009c52:	e7e5      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c54:	2100      	movs	r1, #0
 8009c56:	1d20      	adds	r0, r4, #4
 8009c58:	f7ff fe20 	bl	800989c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c5c:	4605      	mov	r5, r0
      break;
 8009c5e:	e7df      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c60:	2100      	movs	r1, #0
 8009c62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009c66:	f7ff fe91 	bl	800998c <RCCEx_PLL3_Config>
 8009c6a:	e7f7      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8009c6c:	462e      	mov	r6, r5
 8009c6e:	e7e0      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->QspiClockSelection)
 8009c70:	2b20      	cmp	r3, #32
 8009c72:	d01e      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8009c74:	2b30      	cmp	r3, #48	; 0x30
 8009c76:	d1e4      	bne.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    if(ret == HAL_OK)
 8009c78:	bb0d      	cbnz	r5, 8009cbe <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009c7a:	4a2a      	ldr	r2, [pc, #168]	; (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009c7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009c7e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009c80:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009c84:	430b      	orrs	r3, r1
 8009c86:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009c88:	6823      	ldr	r3, [r4, #0]
 8009c8a:	04df      	lsls	r7, r3, #19
 8009c8c:	d527      	bpl.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0x262>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009c8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c94:	d03e      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009c96:	d814      	bhi.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8009c98:	b383      	cbz	r3, 8009cfc <HAL_RCCEx_PeriphCLKConfig+0x280>
 8009c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c9e:	d033      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = HAL_ERROR;
 8009ca0:	2601      	movs	r6, #1
 8009ca2:	4635      	mov	r5, r6
 8009ca4:	e01b      	b.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ca6:	4a1f      	ldr	r2, [pc, #124]	; (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009ca8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cae:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009cb0:	e7e2      	b.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009cb2:	2102      	movs	r1, #2
 8009cb4:	1d20      	adds	r0, r4, #4
 8009cb6:	f7ff fdf1 	bl	800989c <RCCEx_PLL2_Config>
 8009cba:	4605      	mov	r5, r0
      break;
 8009cbc:	e7dc      	b.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8009cbe:	462e      	mov	r6, r5
 8009cc0:	e7e2      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009cc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cc6:	d002      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x252>
 8009cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ccc:	d1e8      	bne.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 8009cce:	bb3d      	cbnz	r5, 8009d20 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009cd0:	4a14      	ldr	r2, [pc, #80]	; (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009cd2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009cd4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cda:	430b      	orrs	r3, r1
 8009cdc:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	0498      	lsls	r0, r3, #18
 8009ce2:	d532      	bpl.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009ce4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009ce6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cea:	d044      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8009cec:	d81c      	bhi.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8009cee:	b323      	cbz	r3, 8009d3a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8009cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cf4:	d039      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = HAL_ERROR;
 8009cf6:	2601      	movs	r6, #1
 8009cf8:	4635      	mov	r5, r6
 8009cfa:	e026      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cfc:	4a09      	ldr	r2, [pc, #36]	; (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009cfe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d04:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009d06:	e7e2      	b.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d08:	2100      	movs	r1, #0
 8009d0a:	1d20      	adds	r0, r4, #4
 8009d0c:	f7ff fdc6 	bl	800989c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009d10:	4605      	mov	r5, r0
      break;
 8009d12:	e7dc      	b.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009d14:	2100      	movs	r1, #0
 8009d16:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009d1a:	f7ff fe37 	bl	800998c <RCCEx_PLL3_Config>
 8009d1e:	e7f7      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8009d20:	462e      	mov	r6, r5
 8009d22:	e7dc      	b.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009d24:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 8009d28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d2c:	d005      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8009d2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d32:	d002      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8009d34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d38:	d1dd      	bne.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(ret == HAL_OK)
 8009d3a:	bb15      	cbnz	r5, 8009d82 <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009d3c:	4aa0      	ldr	r2, [pc, #640]	; (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009d3e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8009d40:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009d42:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8009d46:	430b      	orrs	r3, r1
 8009d48:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	0459      	lsls	r1, r3, #17
 8009d4e:	d52d      	bpl.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009d50:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8009d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d58:	d04b      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009d5a:	d814      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8009d5c:	b1e3      	cbz	r3, 8009d98 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8009d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d62:	d040      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      ret = HAL_ERROR;
 8009d64:	2601      	movs	r6, #1
 8009d66:	4635      	mov	r5, r6
 8009d68:	e020      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x330>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	1d20      	adds	r0, r4, #4
 8009d6e:	f7ff fd95 	bl	800989c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d72:	4605      	mov	r5, r0
      break;
 8009d74:	e7e1      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d76:	2101      	movs	r1, #1
 8009d78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009d7c:	f7ff fe06 	bl	800998c <RCCEx_PLL3_Config>
 8009d80:	e7f7      	b.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8009d82:	462e      	mov	r6, r5
 8009d84:	e7e1      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d8a:	d005      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8009d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d90:	d002      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8009d92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d96:	d1e5      	bne.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if(ret == HAL_OK)
 8009d98:	2d00      	cmp	r5, #0
 8009d9a:	d130      	bne.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x382>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009d9c:	4a88      	ldr	r2, [pc, #544]	; (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009d9e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8009da2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009da4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009da8:	430b      	orrs	r3, r1
 8009daa:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	041a      	lsls	r2, r3, #16
 8009db0:	d50f      	bpl.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->FdcanClockSelection)
 8009db2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009db4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009db8:	d023      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8009dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dbe:	d026      	beq.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8009dc0:	bb5b      	cbnz	r3, 8009e1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    if(ret == HAL_OK)
 8009dc2:	bb6d      	cbnz	r5, 8009e20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009dc4:	4a7e      	ldr	r2, [pc, #504]	; (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009dc6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8009dc8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009dca:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009dce:	430b      	orrs	r3, r1
 8009dd0:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009dd2:	6823      	ldr	r3, [r4, #0]
 8009dd4:	01db      	lsls	r3, r3, #7
 8009dd6:	d533      	bpl.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch(PeriphClkInit->FmcClockSelection)
 8009dd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009dda:	2b03      	cmp	r3, #3
 8009ddc:	d874      	bhi.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8009dde:	e8df f003 	tbb	[pc, r3]
 8009de2:	2126      	.short	0x2126
 8009de4:	266d      	.short	0x266d
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009de6:	2101      	movs	r1, #1
 8009de8:	1d20      	adds	r0, r4, #4
 8009dea:	f7ff fd57 	bl	800989c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009dee:	4605      	mov	r5, r0
      break;
 8009df0:	e7d2      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009df2:	2101      	movs	r1, #1
 8009df4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009df8:	f7ff fdc8 	bl	800998c <RCCEx_PLL3_Config>
 8009dfc:	e7f7      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009dfe:	462e      	mov	r6, r5
 8009e00:	e7d4      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e02:	4a6f      	ldr	r2, [pc, #444]	; (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009e04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009e0c:	e7d9      	b.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e0e:	2101      	movs	r1, #1
 8009e10:	1d20      	adds	r0, r4, #4
 8009e12:	f7ff fd43 	bl	800989c <RCCEx_PLL2_Config>
 8009e16:	4605      	mov	r5, r0
      break;
 8009e18:	e7d3      	b.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = HAL_ERROR;
 8009e1a:	2601      	movs	r6, #1
 8009e1c:	4635      	mov	r5, r6
 8009e1e:	e7d8      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8009e20:	462e      	mov	r6, r5
 8009e22:	e7d6      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e24:	4a66      	ldr	r2, [pc, #408]	; (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009e26:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009e2e:	2d00      	cmp	r5, #0
 8009e30:	d14d      	bne.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x452>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009e32:	4a63      	ldr	r2, [pc, #396]	; (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009e34:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009e36:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009e38:	f023 0303 	bic.w	r3, r3, #3
 8009e3c:	430b      	orrs	r3, r1
 8009e3e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	025f      	lsls	r7, r3, #9
 8009e44:	d54d      	bpl.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x466>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e46:	4f5f      	ldr	r7, [pc, #380]	; (8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e4e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8009e50:	f7fc fa06 	bl	8006260 <HAL_GetTick>
 8009e54:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	05d8      	lsls	r0, r3, #23
 8009e5a:	d53a      	bpl.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x456>
    if(ret == HAL_OK)
 8009e5c:	2d00      	cmp	r5, #0
 8009e5e:	d161      	bne.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009e60:	4b57      	ldr	r3, [pc, #348]	; (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009e62:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8009e66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e68:	4042      	eors	r2, r0
 8009e6a:	f412 7f40 	tst.w	r2, #768	; 0x300
 8009e6e:	d00b      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x40c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8009e72:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009e74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009e78:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8009e7c:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009e7e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009e80:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009e84:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009e86:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009e88:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8009e8c:	d036      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e8e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009e92:	494b      	ldr	r1, [pc, #300]	; (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009e94:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009e98:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009e9c:	d13e      	bne.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8009e9e:	6908      	ldr	r0, [r1, #16]
 8009ea0:	4a49      	ldr	r2, [pc, #292]	; (8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8009ea2:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8009ea6:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009eaa:	4302      	orrs	r2, r0
 8009eac:	610a      	str	r2, [r1, #16]
 8009eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eb2:	4a43      	ldr	r2, [pc, #268]	; (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009eb4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009eb6:	430b      	orrs	r3, r1
 8009eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8009eba:	e012      	b.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x466>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ebc:	2102      	movs	r1, #2
 8009ebe:	1d20      	adds	r0, r4, #4
 8009ec0:	f7ff fcec 	bl	800989c <RCCEx_PLL2_Config>
 8009ec4:	4605      	mov	r5, r0
      break;
 8009ec6:	e7b2      	b.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = HAL_ERROR;
 8009ec8:	2601      	movs	r6, #1
 8009eca:	4635      	mov	r5, r6
 8009ecc:	e7b8      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8009ece:	462e      	mov	r6, r5
 8009ed0:	e7b6      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ed2:	f7fc f9c5 	bl	8006260 <HAL_GetTick>
 8009ed6:	eba0 0008 	sub.w	r0, r0, r8
 8009eda:	2864      	cmp	r0, #100	; 0x64
 8009edc:	d9bb      	bls.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x3da>
        ret = HAL_TIMEOUT;
 8009ede:	2603      	movs	r6, #3
 8009ee0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	07da      	lsls	r2, r3, #31
 8009ee6:	d52d      	bpl.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009ee8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009eea:	2b10      	cmp	r3, #16
 8009eec:	d03b      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8009eee:	d81b      	bhi.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8009ef0:	b303      	cbz	r3, 8009f34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8009ef2:	2b08      	cmp	r3, #8
 8009ef4:	d031      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = HAL_ERROR;
 8009ef6:	2601      	movs	r6, #1
 8009ef8:	4635      	mov	r5, r6
 8009efa:	e023      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        tickstart = HAL_GetTick();
 8009efc:	f7fc f9b0 	bl	8006260 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f00:	4f2f      	ldr	r7, [pc, #188]	; (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
        tickstart = HAL_GetTick();
 8009f02:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f04:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f0a:	0799      	lsls	r1, r3, #30
 8009f0c:	d4bf      	bmi.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x412>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f0e:	f7fc f9a7 	bl	8006260 <HAL_GetTick>
 8009f12:	eba0 0008 	sub.w	r0, r0, r8
 8009f16:	4548      	cmp	r0, r9
 8009f18:	d9f6      	bls.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009f1a:	e7e0      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x462>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f1c:	690a      	ldr	r2, [r1, #16]
 8009f1e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8009f22:	e7c3      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x430>
 8009f24:	462e      	mov	r6, r5
 8009f26:	e7dc      	b.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x466>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009f28:	2b20      	cmp	r3, #32
 8009f2a:	d003      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8009f2c:	2b28      	cmp	r3, #40	; 0x28
 8009f2e:	d001      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8009f30:	2b18      	cmp	r3, #24
 8009f32:	d1e0      	bne.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    if(ret == HAL_OK)
 8009f34:	b9ed      	cbnz	r5, 8009f72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009f36:	4a22      	ldr	r2, [pc, #136]	; (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009f38:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8009f3a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009f3c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8009f40:	430b      	orrs	r3, r1
 8009f42:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	079b      	lsls	r3, r3, #30
 8009f48:	d522      	bpl.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009f4a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009f4c:	2b05      	cmp	r3, #5
 8009f4e:	d831      	bhi.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8009f50:	e8df f003 	tbb	[pc, r3]
 8009f54:	162a1116 	.word	0x162a1116
 8009f58:	1616      	.short	0x1616
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f5a:	2101      	movs	r1, #1
 8009f5c:	1d20      	adds	r0, r4, #4
 8009f5e:	f7ff fc9d 	bl	800989c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f62:	4605      	mov	r5, r0
      break;
 8009f64:	e7e6      	b.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f66:	2101      	movs	r1, #1
 8009f68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009f6c:	f7ff fd0e 	bl	800998c <RCCEx_PLL3_Config>
 8009f70:	e7f7      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009f72:	462e      	mov	r6, r5
 8009f74:	e7e6      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f76:	2101      	movs	r1, #1
 8009f78:	1d20      	adds	r0, r4, #4
 8009f7a:	f7ff fc8f 	bl	800989c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f7e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009f80:	b9dd      	cbnz	r5, 8009fba <HAL_RCCEx_PeriphCLKConfig+0x53e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f82:	4a0f      	ldr	r2, [pc, #60]	; (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8009f84:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8009f86:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009f88:	f023 0307 	bic.w	r3, r3, #7
 8009f8c:	430b      	orrs	r3, r1
 8009f8e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	075f      	lsls	r7, r3, #29
 8009f94:	d528      	bpl.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009f96:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009f9a:	2b05      	cmp	r3, #5
 8009f9c:	d83a      	bhi.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009f9e:	e8df f003 	tbb	[pc, r3]
 8009fa2:	151a      	.short	0x151a
 8009fa4:	1a1a1a33 	.word	0x1a1a1a33
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fa8:	2101      	movs	r1, #1
 8009faa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009fae:	f7ff fced 	bl	800998c <RCCEx_PLL3_Config>
 8009fb2:	e7e4      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x502>
      ret = HAL_ERROR;
 8009fb4:	2601      	movs	r6, #1
 8009fb6:	4635      	mov	r5, r6
 8009fb8:	e7ea      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009fba:	462e      	mov	r6, r5
 8009fbc:	e7e8      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009fbe:	bf00      	nop
 8009fc0:	58024400 	.word	0x58024400
 8009fc4:	58024800 	.word	0x58024800
 8009fc8:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fcc:	2101      	movs	r1, #1
 8009fce:	1d20      	adds	r0, r4, #4
 8009fd0:	f7ff fc64 	bl	800989c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fd4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009fd6:	bb05      	cbnz	r5, 800a01a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009fd8:	4a98      	ldr	r2, [pc, #608]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009fda:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8009fde:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009fe0:	f023 0307 	bic.w	r3, r3, #7
 8009fe4:	430b      	orrs	r3, r1
 8009fe6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	0698      	lsls	r0, r3, #26
 8009fec:	d529      	bpl.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009fee:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ff6:	d03a      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8009ff8:	d811      	bhi.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009ffa:	b1cb      	cbz	r3, 800a030 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8009ffc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a000:	d02f      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      ret = HAL_ERROR;
 800a002:	2601      	movs	r6, #1
 800a004:	4635      	mov	r5, r6
 800a006:	e01c      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a008:	2101      	movs	r1, #1
 800a00a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a00e:	f7ff fcbd 	bl	800998c <RCCEx_PLL3_Config>
 800a012:	e7df      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x558>
      ret = HAL_ERROR;
 800a014:	2601      	movs	r6, #1
 800a016:	4635      	mov	r5, r6
 800a018:	e7e6      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800a01a:	462e      	mov	r6, r5
 800a01c:	e7e4      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a01e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a022:	d005      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800a024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a028:	d002      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800a02a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a02e:	d1e8      	bne.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x586>
    if(ret == HAL_OK)
 800a030:	bb1d      	cbnz	r5, 800a07a <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a032:	4a82      	ldr	r2, [pc, #520]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800a034:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a038:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a03a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800a03e:	430b      	orrs	r3, r1
 800a040:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	0659      	lsls	r1, r3, #25
 800a046:	d52c      	bpl.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a048:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a04c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a050:	d03f      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x656>
 800a052:	d814      	bhi.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x602>
 800a054:	b1e3      	cbz	r3, 800a090 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800a056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a05a:	d034      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      ret = HAL_ERROR;
 800a05c:	2601      	movs	r6, #1
 800a05e:	4635      	mov	r5, r6
 800a060:	e01f      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x626>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a062:	2100      	movs	r1, #0
 800a064:	1d20      	adds	r0, r4, #4
 800a066:	f7ff fc19 	bl	800989c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a06a:	4605      	mov	r5, r0
      break;
 800a06c:	e7e0      	b.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a06e:	2102      	movs	r1, #2
 800a070:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a074:	f7ff fc8a 	bl	800998c <RCCEx_PLL3_Config>
 800a078:	e7f7      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 800a07a:	462e      	mov	r6, r5
 800a07c:	e7e1      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a07e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a082:	d005      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800a084:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a088:	d002      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800a08a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a08e:	d1e5      	bne.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    if(ret == HAL_OK)
 800a090:	bb2d      	cbnz	r5, 800a0de <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a092:	4a6a      	ldr	r2, [pc, #424]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800a094:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800a098:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a09a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800a09e:	430b      	orrs	r3, r1
 800a0a0:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	061a      	lsls	r2, r3, #24
 800a0a6:	d530      	bpl.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a0a8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a0ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0b0:	f000 80a4 	beq.w	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x780>
 800a0b4:	d815      	bhi.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x666>
 800a0b6:	b1eb      	cbz	r3, 800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a0b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0bc:	f000 8098 	beq.w	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x774>
      ret = HAL_ERROR;
 800a0c0:	2601      	movs	r6, #1
 800a0c2:	4635      	mov	r5, r6
 800a0c4:	e021      	b.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	1d20      	adds	r0, r4, #4
 800a0ca:	f7ff fbe7 	bl	800989c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0ce:	4605      	mov	r5, r0
      break;
 800a0d0:	e7de      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x614>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0d2:	2102      	movs	r1, #2
 800a0d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a0d8:	f7ff fc58 	bl	800998c <RCCEx_PLL3_Config>
 800a0dc:	e7f7      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x652>
 800a0de:	462e      	mov	r6, r5
 800a0e0:	e7df      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a0e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0e6:	d005      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a0e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a0ec:	d002      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a0ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a0f2:	d1e5      	bne.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    if(ret == HAL_OK)
 800a0f4:	2d00      	cmp	r5, #0
 800a0f6:	f040 8087 	bne.w	800a208 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a0fa:	4a50      	ldr	r2, [pc, #320]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800a0fc:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800a100:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a102:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a106:	430b      	orrs	r3, r1
 800a108:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	071b      	lsls	r3, r3, #28
 800a10e:	d514      	bpl.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x6be>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a110:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800a114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a118:	d107      	bne.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a11a:	2102      	movs	r1, #2
 800a11c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a120:	f7ff fc34 	bl	800998c <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 800a124:	2800      	cmp	r0, #0
 800a126:	bf18      	it	ne
 800a128:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a12a:	4a44      	ldr	r2, [pc, #272]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800a12c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800a130:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a132:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a136:	430b      	orrs	r3, r1
 800a138:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	06df      	lsls	r7, r3, #27
 800a13e:	d514      	bpl.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a140:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a148:	d107      	bne.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x6de>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a14a:	2102      	movs	r1, #2
 800a14c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a150:	f7ff fc1c 	bl	800998c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a154:	2800      	cmp	r0, #0
 800a156:	bf18      	it	ne
 800a158:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a15a:	4a38      	ldr	r2, [pc, #224]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800a15c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a160:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a166:	430b      	orrs	r3, r1
 800a168:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	0318      	lsls	r0, r3, #12
 800a16e:	d517      	bpl.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x724>
    switch(PeriphClkInit->AdcClockSelection)
 800a170:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800a174:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a178:	d048      	beq.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x790>
 800a17a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800a17e:	d005      	beq.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x710>
 800a180:	2900      	cmp	r1, #0
 800a182:	d149      	bne.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a184:	1d20      	adds	r0, r4, #4
 800a186:	f7ff fb89 	bl	800989c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a18a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a18c:	2d00      	cmp	r5, #0
 800a18e:	d146      	bne.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a190:	4a2a      	ldr	r2, [pc, #168]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800a192:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800a196:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a198:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800a19c:	430b      	orrs	r3, r1
 800a19e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	0359      	lsls	r1, r3, #13
 800a1a4:	d518      	bpl.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch(PeriphClkInit->UsbClockSelection)
 800a1a6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a1aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1ae:	d038      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 800a1b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1b4:	d007      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800a1b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1ba:	d139      	bne.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1bc:	4a1f      	ldr	r2, [pc, #124]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800a1be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a1c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800a1c6:	bbb5      	cbnz	r5, 800a236 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a1c8:	4a1c      	ldr	r2, [pc, #112]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800a1ca:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800a1ce:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a1d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a1d4:	430b      	orrs	r3, r1
 800a1d6:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	03da      	lsls	r2, r3, #15
 800a1dc:	d53e      	bpl.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->SdmmcClockSelection)
 800a1de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a1e0:	b373      	cbz	r3, 800a240 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 800a1e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1e6:	f000 808c 	beq.w	800a302 <HAL_RCCEx_PeriphCLKConfig+0x886>
      ret = HAL_ERROR;
 800a1ea:	2601      	movs	r6, #1
 800a1ec:	4635      	mov	r5, r6
 800a1ee:	e035      	b.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	1d20      	adds	r0, r4, #4
 800a1f4:	f7ff fb52 	bl	800989c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1f8:	4605      	mov	r5, r0
      break;
 800a1fa:	e77b      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1fc:	2102      	movs	r1, #2
 800a1fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a202:	f7ff fbc3 	bl	800998c <RCCEx_PLL3_Config>
 800a206:	e7f7      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 800a208:	462e      	mov	r6, r5
 800a20a:	e77e      	b.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a20c:	2102      	movs	r1, #2
 800a20e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a212:	f7ff fbbb 	bl	800998c <RCCEx_PLL3_Config>
 800a216:	e7b8      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x70e>
      ret = HAL_ERROR;
 800a218:	2601      	movs	r6, #1
 800a21a:	4635      	mov	r5, r6
 800a21c:	e7c0      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x724>
 800a21e:	462e      	mov	r6, r5
 800a220:	e7be      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x724>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a222:	2101      	movs	r1, #1
 800a224:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a228:	f7ff fbb0 	bl	800998c <RCCEx_PLL3_Config>
 800a22c:	4605      	mov	r5, r0
      break;
 800a22e:	e7ca      	b.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      ret = HAL_ERROR;
 800a230:	2601      	movs	r6, #1
 800a232:	4635      	mov	r5, r6
 800a234:	e7d0      	b.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 800a236:	462e      	mov	r6, r5
 800a238:	e7ce      	b.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 800a23a:	bf00      	nop
 800a23c:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a240:	4a3c      	ldr	r2, [pc, #240]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800a242:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a248:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800a24a:	2d00      	cmp	r5, #0
 800a24c:	d15f      	bne.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x892>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a24e:	4a39      	ldr	r2, [pc, #228]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800a250:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a252:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a258:	430b      	orrs	r3, r1
 800a25a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	d507      	bpl.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a262:	2102      	movs	r1, #2
 800a264:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a268:	f7ff fb90 	bl	800998c <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 800a26c:	2800      	cmp	r0, #0
 800a26e:	bf18      	it	ne
 800a270:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	039f      	lsls	r7, r3, #14
 800a276:	d50e      	bpl.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch(PeriphClkInit->RngClockSelection)
 800a278:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800a27a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a27e:	d050      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800a280:	d847      	bhi.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x896>
 800a282:	2900      	cmp	r1, #0
 800a284:	d14b      	bne.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    if(ret == HAL_OK)
 800a286:	2d00      	cmp	r5, #0
 800a288:	d151      	bne.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a28a:	482a      	ldr	r0, [pc, #168]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800a28c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800a28e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a292:	430a      	orrs	r2, r1
 800a294:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a296:	02dd      	lsls	r5, r3, #11
 800a298:	d506      	bpl.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a29a:	4926      	ldr	r1, [pc, #152]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800a29c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a29e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a2a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800a2a4:	4302      	orrs	r2, r0
 800a2a6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a2a8:	00d8      	lsls	r0, r3, #3
 800a2aa:	d507      	bpl.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x840>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a2ac:	4921      	ldr	r1, [pc, #132]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800a2ae:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 800a2b2:	690a      	ldr	r2, [r1, #16]
 800a2b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a2b8:	4302      	orrs	r2, r0
 800a2ba:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a2bc:	0299      	lsls	r1, r3, #10
 800a2be:	d506      	bpl.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a2c0:	491c      	ldr	r1, [pc, #112]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800a2c2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a2c4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a2c6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a2ca:	4302      	orrs	r2, r0
 800a2cc:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a2ce:	005a      	lsls	r2, r3, #1
 800a2d0:	d509      	bpl.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a2d2:	4a18      	ldr	r2, [pc, #96]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800a2d4:	6911      	ldr	r1, [r2, #16]
 800a2d6:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800a2da:	6111      	str	r1, [r2, #16]
 800a2dc:	6911      	ldr	r1, [r2, #16]
 800a2de:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800a2e2:	4301      	orrs	r1, r0
 800a2e4:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	da06      	bge.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a2ea:	4a12      	ldr	r2, [pc, #72]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800a2ec:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a2ee:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a2f0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800a2f4:	430b      	orrs	r3, r1
 800a2f6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800a2f8:	1c30      	adds	r0, r6, #0
 800a2fa:	bf18      	it	ne
 800a2fc:	2001      	movne	r0, #1
 800a2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a302:	2102      	movs	r1, #2
 800a304:	1d20      	adds	r0, r4, #4
 800a306:	f7ff fac9 	bl	800989c <RCCEx_PLL2_Config>
 800a30a:	4605      	mov	r5, r0
      break;
 800a30c:	e79d      	b.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800a30e:	462e      	mov	r6, r5
 800a310:	e7a4      	b.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->RngClockSelection)
 800a312:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a316:	d0b6      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a318:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800a31c:	d0b3      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      ret = HAL_ERROR;
 800a31e:	2601      	movs	r6, #1
 800a320:	e7b9      	b.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a322:	4804      	ldr	r0, [pc, #16]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800a324:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800a326:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a32a:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 800a32c:	e7ab      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a32e:	462e      	mov	r6, r5
 800a330:	e7b1      	b.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800a332:	bf00      	nop
 800a334:	58024400 	.word	0x58024400

0800a338 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800a338:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a33a:	f7ff fa3f 	bl	80097bc <HAL_RCC_GetHCLKFreq>
 800a33e:	4b05      	ldr	r3, [pc, #20]	; (800a354 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800a340:	4a05      	ldr	r2, [pc, #20]	; (800a358 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800a342:	6a1b      	ldr	r3, [r3, #32]
 800a344:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a348:	5cd3      	ldrb	r3, [r2, r3]
 800a34a:	f003 031f 	and.w	r3, r3, #31
}
 800a34e:	40d8      	lsrs	r0, r3
 800a350:	bd08      	pop	{r3, pc}
 800a352:	bf00      	nop
 800a354:	58024400 	.word	0x58024400
 800a358:	08015d5c 	.word	0x08015d5c

0800a35c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a35c:	494d      	ldr	r1, [pc, #308]	; (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
{
 800a35e:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a360:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a362:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a364:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a366:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a36a:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	f000 808c 	beq.w	800a48a <HAL_RCCEx_GetPLL2ClockFreq+0x12e>
 800a372:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a376:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a37a:	f3c2 1300 	ubfx	r3, r2, #4, #1
 800a37e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a382:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a386:	436b      	muls	r3, r5
 800a388:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a38c:	f004 0303 	and.w	r3, r4, #3
    switch (pllsource)
 800a390:	2b01      	cmp	r3, #1
 800a392:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800a396:	d002      	beq.n	800a39e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 800a398:	d30f      	bcc.n	800a3ba <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	d067      	beq.n	800a46e <HAL_RCCEx_GetPLL2ClockFreq+0x112>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a39e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800a3a0:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800a498 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>
 800a3a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3a8:	ee07 3a10 	vmov	s14, r3
 800a3ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a3b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3b4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a3b8:	e056      	b.n	800a468 <HAL_RCCEx_GetPLL2ClockFreq+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3ba:	680b      	ldr	r3, [r1, #0]
 800a3bc:	069b      	lsls	r3, r3, #26
 800a3be:	d546      	bpl.n	800a44e <HAL_RCCEx_GetPLL2ClockFreq+0xf2>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3c0:	680a      	ldr	r2, [r1, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a3c2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3c4:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800a3c8:	4a34      	ldr	r2, [pc, #208]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3ce:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a3d0:	ee07 2a10 	vmov	s14, r2
 800a3d4:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800a3d8:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800a3dc:	ee06 3a90 	vmov	s13, r3
 800a3e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a3e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3e8:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a3ec:	4a29      	ldr	r2, [pc, #164]	; (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a3ee:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a3f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a3f4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a3f8:	ee07 3a10 	vmov	s14, r3
 800a3fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a400:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a404:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a408:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a40c:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a410:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a412:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a416:	ee07 3a10 	vmov	s14, r3
 800a41a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a41e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a422:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a426:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a42a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a42e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a430:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a434:	ee07 3a10 	vmov	s14, r3
 800a438:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a43c:	ee37 6a06 	vadd.f32	s12, s14, s12
 800a440:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800a444:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a448:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800a44c:	bd30      	pop	{r4, r5, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a44e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800a450:	eddf 5a13 	vldr	s11, [pc, #76]	; 800a4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800a454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a458:	ee07 3a10 	vmov	s14, r3
 800a45c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a460:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a464:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a468:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800a46c:	e7be      	b.n	800a3ec <HAL_RCCEx_GetPLL2ClockFreq+0x90>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a46e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800a470:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800a4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800a474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a478:	ee07 3a10 	vmov	s14, r3
 800a47c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a480:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a484:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a488:	e7ee      	b.n	800a468 <HAL_RCCEx_GetPLL2ClockFreq+0x10c>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a48a:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a48e:	6083      	str	r3, [r0, #8]
}
 800a490:	e7dc      	b.n	800a44c <HAL_RCCEx_GetPLL2ClockFreq+0xf0>
 800a492:	bf00      	nop
 800a494:	58024400 	.word	0x58024400
 800a498:	4a742400 	.word	0x4a742400
 800a49c:	03d09000 	.word	0x03d09000
 800a4a0:	4c742400 	.word	0x4c742400
 800a4a4:	4af42400 	.word	0x4af42400

0800a4a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4a8:	494d      	ldr	r1, [pc, #308]	; (800a5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
{
 800a4aa:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4ac:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a4ae:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a4b0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a4b2:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a4b6:	6c4d      	ldr	r5, [r1, #68]	; 0x44
  if (pll3m != 0U)
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f000 808c 	beq.w	800a5d6 <HAL_RCCEx_GetPLL3ClockFreq+0x12e>
 800a4be:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a4c2:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a4c6:	f3c2 2300 	ubfx	r3, r2, #8, #1
 800a4ca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a4ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a4d2:	436b      	muls	r3, r5
 800a4d4:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4d8:	f004 0303 	and.w	r3, r4, #3
    switch (pllsource)
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800a4e2:	d002      	beq.n	800a4ea <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 800a4e4:	d30f      	bcc.n	800a506 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d067      	beq.n	800a5ba <HAL_RCCEx_GetPLL3ClockFreq+0x112>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4ea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4ec:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800a5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>
 800a4f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4f4:	ee07 3a10 	vmov	s14, r3
 800a4f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a4fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a500:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a504:	e056      	b.n	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a506:	680b      	ldr	r3, [r1, #0]
 800a508:	069b      	lsls	r3, r3, #26
 800a50a:	d546      	bpl.n	800a59a <HAL_RCCEx_GetPLL3ClockFreq+0xf2>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a50c:	680a      	ldr	r2, [r1, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a50e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a510:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800a514:	4a34      	ldr	r2, [pc, #208]	; (800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a516:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a51a:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a51c:	ee07 2a10 	vmov	s14, r2
 800a520:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800a524:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800a528:	ee06 3a90 	vmov	s13, r3
 800a52c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a530:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a534:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a538:	4a29      	ldr	r2, [pc, #164]	; (800a5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a53a:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a53e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a540:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a544:	ee07 3a10 	vmov	s14, r3
 800a548:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a54c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a550:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a554:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a558:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a55c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a55e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a562:	ee07 3a10 	vmov	s14, r3
 800a566:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a56a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a56e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a572:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a576:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a57a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a57c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a580:	ee07 3a10 	vmov	s14, r3
 800a584:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a588:	ee37 6a06 	vadd.f32	s12, s14, s12
 800a58c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800a590:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a594:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800a598:	bd30      	pop	{r4, r5, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a59a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a59c:	eddf 5a13 	vldr	s11, [pc, #76]	; 800a5ec <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800a5a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5a4:	ee07 3a10 	vmov	s14, r3
 800a5a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a5ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5b0:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5b4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800a5b8:	e7be      	b.n	800a538 <HAL_RCCEx_GetPLL3ClockFreq+0x90>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a5bc:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800a5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800a5c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5c4:	ee07 3a10 	vmov	s14, r3
 800a5c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a5cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5d0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a5d4:	e7ee      	b.n	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x10c>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a5d6:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a5da:	6083      	str	r3, [r0, #8]
}
 800a5dc:	e7dc      	b.n	800a598 <HAL_RCCEx_GetPLL3ClockFreq+0xf0>
 800a5de:	bf00      	nop
 800a5e0:	58024400 	.word	0x58024400
 800a5e4:	4a742400 	.word	0x4a742400
 800a5e8:	03d09000 	.word	0x03d09000
 800a5ec:	4c742400 	.word	0x4c742400
 800a5f0:	4af42400 	.word	0x4af42400

0800a5f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5f4:	494d      	ldr	r1, [pc, #308]	; (800a72c <HAL_RCCEx_GetPLL1ClockFreq+0x138>)
{
 800a5f6:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5f8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a5fa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a5fc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a5fe:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a602:	6b4d      	ldr	r5, [r1, #52]	; 0x34
  if (pll1m != 0U)
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 808c 	beq.w	800a722 <HAL_RCCEx_GetPLL1ClockFreq+0x12e>
 800a60a:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a60e:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a612:	f002 0301 	and.w	r3, r2, #1
 800a616:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a61a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a61e:	436b      	muls	r3, r5
 800a620:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a624:	f004 0303 	and.w	r3, r4, #3
    switch (pllsource)
 800a628:	2b01      	cmp	r3, #1
 800a62a:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800a62e:	d002      	beq.n	800a636 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 800a630:	d30f      	bcc.n	800a652 <HAL_RCCEx_GetPLL1ClockFreq+0x5e>
 800a632:	2b02      	cmp	r3, #2
 800a634:	d067      	beq.n	800a706 <HAL_RCCEx_GetPLL1ClockFreq+0x112>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a636:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800a638:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800a730 <HAL_RCCEx_GetPLL1ClockFreq+0x13c>
 800a63c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a640:	ee07 3a10 	vmov	s14, r3
 800a644:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a64c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a650:	e056      	b.n	800a700 <HAL_RCCEx_GetPLL1ClockFreq+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a652:	680b      	ldr	r3, [r1, #0]
 800a654:	069b      	lsls	r3, r3, #26
 800a656:	d546      	bpl.n	800a6e6 <HAL_RCCEx_GetPLL1ClockFreq+0xf2>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a658:	680a      	ldr	r2, [r1, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a65a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a65c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800a660:	4a34      	ldr	r2, [pc, #208]	; (800a734 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a662:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a666:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a668:	ee07 2a10 	vmov	s14, r2
 800a66c:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800a670:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800a674:	ee06 3a90 	vmov	s13, r3
 800a678:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a67c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a680:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a684:	4a29      	ldr	r2, [pc, #164]	; (800a72c <HAL_RCCEx_GetPLL1ClockFreq+0x138>)
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a686:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a68a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a68c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a690:	ee07 3a10 	vmov	s14, r3
 800a694:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a698:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a69c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a6a0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a6a4:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a6a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a6aa:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a6ae:	ee07 3a10 	vmov	s14, r3
 800a6b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a6b6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a6ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a6be:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a6c2:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a6c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a6c8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a6cc:	ee07 3a10 	vmov	s14, r3
 800a6d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a6d4:	ee37 6a06 	vadd.f32	s12, s14, s12
 800a6d8:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800a6dc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a6e0:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800a6e4:	bd30      	pop	{r4, r5, pc}
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a6e6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800a6e8:	eddf 5a13 	vldr	s11, [pc, #76]	; 800a738 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800a6ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f0:	ee07 3a10 	vmov	s14, r3
 800a6f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a6f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6fc:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a700:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800a704:	e7be      	b.n	800a684 <HAL_RCCEx_GetPLL1ClockFreq+0x90>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a706:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800a708:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800a73c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800a70c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a710:	ee07 3a10 	vmov	s14, r3
 800a714:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a71c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a720:	e7ee      	b.n	800a700 <HAL_RCCEx_GetPLL1ClockFreq+0x10c>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a722:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a726:	6083      	str	r3, [r0, #8]
}
 800a728:	e7dc      	b.n	800a6e4 <HAL_RCCEx_GetPLL1ClockFreq+0xf0>
 800a72a:	bf00      	nop
 800a72c:	58024400 	.word	0x58024400
 800a730:	4a742400 	.word	0x4a742400
 800a734:	03d09000 	.word	0x03d09000
 800a738:	4c742400 	.word	0x4c742400
 800a73c:	4af42400 	.word	0x4af42400

0800a740 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a740:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 800a744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a746:	d122      	bne.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a748:	4b6a      	ldr	r3, [pc, #424]	; (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a74a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a74c:	f002 0207 	and.w	r2, r2, #7
      switch (saiclocksource)
 800a750:	2a04      	cmp	r2, #4
 800a752:	d82a      	bhi.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800a754:	e8df f002 	tbb	[pc, r2]
 800a758:	c9088503 	.word	0xc9088503
 800a75c:	0c          	.byte	0x0c
 800a75d:	00          	.byte	0x00
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a75e:	a801      	add	r0, sp, #4
 800a760:	f7ff ff48 	bl	800a5f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a764:	9802      	ldr	r0, [sp, #8]
          break;
 800a766:	e080      	b.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a768:	a801      	add	r0, sp, #4
 800a76a:	f7ff fe9d 	bl	800a4a8 <HAL_RCCEx_GetPLL3ClockFreq>
 800a76e:	e07b      	b.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a772:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800a776:	f000 80ad 	beq.w	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a77a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a77e:	f000 80b6 	beq.w	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            frequency = HSE_VALUE;
 800a782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a786:	485c      	ldr	r0, [pc, #368]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800a788:	bf18      	it	ne
 800a78a:	2000      	movne	r0, #0
 800a78c:	e06d      	b.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a78e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a792:	d114      	bne.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a794:	4a57      	ldr	r2, [pc, #348]	; (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a796:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a798:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800a79c:	2b80      	cmp	r3, #128	; 0x80
 800a79e:	d0e3      	beq.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800a7a0:	d805      	bhi.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d0db      	beq.n	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800a7a6:	2b40      	cmp	r3, #64	; 0x40
      switch (srcclk)
 800a7a8:	d05b      	beq.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          frequency = 0;
 800a7aa:	2000      	movs	r0, #0
  return frequency;
 800a7ac:	e05d      	b.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
      switch (saiclocksource)
 800a7ae:	2bc0      	cmp	r3, #192	; 0xc0
 800a7b0:	f000 809b 	beq.w	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a7b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
      switch (srcclk)
 800a7b8:	d1f7      	bne.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a7ba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a7bc:	e7d9      	b.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x32>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a7be:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a7c2:	d113      	bne.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a7c4:	4a4b      	ldr	r2, [pc, #300]	; (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a7c6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a7c8:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 800a7cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7d0:	d0ca      	beq.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800a7d2:	d804      	bhi.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d0c2      	beq.n	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800a7d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7dc:	e7e4      	b.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800a7de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a7e2:	f000 8082 	beq.w	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a7e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a7ea:	e7e5      	b.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a7ec:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800a7f0:	d112      	bne.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a7f2:	4a40      	ldr	r2, [pc, #256]	; (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a7f4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a7f6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800a7fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7fe:	d0b3      	beq.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800a800:	d804      	bhi.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 800a802:	2b00      	cmp	r3, #0
 800a804:	d0ab      	beq.n	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800a806:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a80a:	e7cd      	b.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800a80c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a810:	d06b      	beq.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a812:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a816:	e7cf      	b.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a818:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800a81c:	d112      	bne.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a81e:	4a35      	ldr	r2, [pc, #212]	; (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a820:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a822:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800a826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a82a:	d09d      	beq.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800a82c:	d804      	bhi.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d095      	beq.n	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800a832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a836:	e7b7      	b.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800a838:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a83c:	d055      	beq.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a83e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a842:	e7b9      	b.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a844:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800a848:	d117      	bne.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a84a:	4a2a      	ldr	r2, [pc, #168]	; (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a84c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a84e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800a852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a856:	d00b      	beq.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800a858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a85c:	d0ad      	beq.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1a3      	bne.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a862:	a801      	add	r0, sp, #4
 800a864:	f7ff fd7a 	bl	800a35c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a868:	9801      	ldr	r0, [sp, #4]
}
 800a86a:	b005      	add	sp, #20
 800a86c:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a870:	a801      	add	r0, sp, #4
 800a872:	f7ff fe19 	bl	800a4a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a876:	9803      	ldr	r0, [sp, #12]
          break;
 800a878:	e7f7      	b.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a87a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800a87e:	d10b      	bne.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a880:	4b1c      	ldr	r3, [pc, #112]	; (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 800a884:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800a888:	f43f af69 	beq.w	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d08c      	beq.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a890:	a801      	add	r0, sp, #4
 800a892:	f7ff fd63 	bl	800a35c <HAL_RCCEx_GetPLL2ClockFreq>
 800a896:	e7ee      	b.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a898:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800a89c:	d185      	bne.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a89e:	4b15      	ldr	r3, [pc, #84]	; (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a8a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800a8a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8aa:	d018      	beq.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a8ac:	d808      	bhi.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 800a8ae:	b19b      	cbz	r3, 800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 800a8b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8b4:	f47f af79 	bne.w	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8b8:	a801      	add	r0, sp, #4
 800a8ba:	f7ff fd4f 	bl	800a35c <HAL_RCCEx_GetPLL2ClockFreq>
 800a8be:	e751      	b.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
      switch (srcclk)
 800a8c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8c4:	d013      	beq.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 800a8c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8ca:	d00c      	beq.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 800a8cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a8d0:	f47f af6b 	bne.w	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
            frequency = HSI_VALUE;
 800a8d4:	4809      	ldr	r0, [pc, #36]	; (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800a8d6:	e7c8      	b.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a8d8:	f7ff fd2e 	bl	800a338 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 800a8dc:	e7c5      	b.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8de:	a801      	add	r0, sp, #4
 800a8e0:	f7ff fde2 	bl	800a4a8 <HAL_RCCEx_GetPLL3ClockFreq>
 800a8e4:	e73e      	b.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          frequency = HSE_VALUE;
 800a8e6:	4804      	ldr	r0, [pc, #16]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
          break;
 800a8e8:	e7bf      	b.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          frequency = EXTERNAL_CLOCK_VALUE;
 800a8ea:	4805      	ldr	r0, [pc, #20]	; (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800a8ec:	e7bd      	b.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            frequency = CSI_VALUE;
 800a8ee:	4805      	ldr	r0, [pc, #20]	; (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800a8f0:	e7bb      	b.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800a8f2:	bf00      	nop
 800a8f4:	58024400 	.word	0x58024400
 800a8f8:	007a1200 	.word	0x007a1200
 800a8fc:	03d09000 	.word	0x03d09000
 800a900:	00bb8000 	.word	0x00bb8000
 800a904:	003d0900 	.word	0x003d0900

0800a908 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90c:	4606      	mov	r6, r0
 800a90e:	b087      	sub	sp, #28
 800a910:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a912:	f7fb fca5 	bl	8006260 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a916:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800a918:	4682      	mov	sl, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a91a:	6830      	ldr	r0, [r6, #0]
 800a91c:	f002 fb44 	bl	800cfa8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a920:	4604      	mov	r4, r0
 800a922:	bb50      	cbnz	r0, 800a97a <SD_FindSCR+0x72>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a924:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800a926:	6830      	ldr	r0, [r6, #0]
 800a928:	0409      	lsls	r1, r1, #16
 800a92a:	f002 fc69 	bl	800d200 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a92e:	4604      	mov	r4, r0
 800a930:	bb18      	cbnz	r0, 800a97a <SD_FindSCR+0x72>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 800a932:	f04f 32ff 	mov.w	r2, #4294967295
 800a936:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a938:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a93a:	9004      	str	r0, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a93c:	6830      	ldr	r0, [r6, #0]
  config.DataLength    = 8U;
 800a93e:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a942:	2302      	movs	r3, #2
 800a944:	e9cd 1302 	strd	r1, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a948:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a94a:	4669      	mov	r1, sp
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a94c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a94e:	f002 fb18 	bl	800cf82 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a952:	6830      	ldr	r0, [r6, #0]
 800a954:	f002 fc9c 	bl	800d290 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a958:	4604      	mov	r4, r0
 800a95a:	b970      	cbnz	r0, 800a97a <SD_FindSCR+0x72>
  uint32_t index = 0U;
 800a95c:	4683      	mov	fp, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a95e:	4605      	mov	r5, r0
 800a960:	4607      	mov	r7, r0
  {
    return errorstate;
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a962:	f240 592a 	movw	r9, #1322	; 0x52a
 800a966:	6830      	ldr	r0, [r6, #0]
 800a968:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a96a:	ea13 0f09 	tst.w	r3, r9
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a96e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a970:	d007      	beq.n	800a982 <SD_FindSCR+0x7a>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a972:	0719      	lsls	r1, r3, #28
 800a974:	d51c      	bpl.n	800a9b0 <SD_FindSCR+0xa8>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a976:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a978:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800a97a:	4620      	mov	r0, r4
 800a97c:	b007      	add	sp, #28
 800a97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a982:	031b      	lsls	r3, r3, #12
 800a984:	d40b      	bmi.n	800a99e <SD_FindSCR+0x96>
 800a986:	f1bb 0f00 	cmp.w	fp, #0
 800a98a:	d108      	bne.n	800a99e <SD_FindSCR+0x96>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a98c:	f002 fad0 	bl	800cf30 <SDMMC_ReadFIFO>
 800a990:	4607      	mov	r7, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a992:	6830      	ldr	r0, [r6, #0]
      index++;
 800a994:	f04f 0b01 	mov.w	fp, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a998:	f002 faca 	bl	800cf30 <SDMMC_ReadFIFO>
 800a99c:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a99e:	f7fb fc5f 	bl	8006260 <HAL_GetTick>
 800a9a2:	eba0 000a 	sub.w	r0, r0, sl
 800a9a6:	3001      	adds	r0, #1
 800a9a8:	d1dd      	bne.n	800a966 <SD_FindSCR+0x5e>
      return HAL_SD_ERROR_TIMEOUT;
 800a9aa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a9ae:	e7e4      	b.n	800a97a <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a9b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a9b2:	079a      	lsls	r2, r3, #30
 800a9b4:	d501      	bpl.n	800a9ba <SD_FindSCR+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a9b6:	2402      	movs	r4, #2
 800a9b8:	e7de      	b.n	800a978 <SD_FindSCR+0x70>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a9ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a9bc:	069b      	lsls	r3, r3, #26
 800a9be:	d501      	bpl.n	800a9c4 <SD_FindSCR+0xbc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a9c0:	2420      	movs	r4, #32
 800a9c2:	e7d9      	b.n	800a978 <SD_FindSCR+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a9c4:	4b04      	ldr	r3, [pc, #16]	; (800a9d8 <SD_FindSCR+0xd0>)
 800a9c6:	ba2d      	rev	r5, r5
 800a9c8:	ba3f      	rev	r7, r7
 800a9ca:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a9cc:	f8c8 5000 	str.w	r5, [r8]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a9d0:	f8c8 7004 	str.w	r7, [r8, #4]
  return HAL_SD_ERROR_NONE;
 800a9d4:	e7d1      	b.n	800a97a <SD_FindSCR+0x72>
 800a9d6:	bf00      	nop
 800a9d8:	18000f3a 	.word	0x18000f3a

0800a9dc <HAL_SD_ReadBlocks_DMA>:
{
 800a9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9de:	4604      	mov	r4, r0
 800a9e0:	b087      	sub	sp, #28
 800a9e2:	4615      	mov	r5, r2
 800a9e4:	461e      	mov	r6, r3
  if(NULL == pData)
 800a9e6:	460f      	mov	r7, r1
 800a9e8:	b931      	cbnz	r1, 800a9f8 <HAL_SD_ReadBlocks_DMA+0x1c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a9ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a9ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a9f0:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800a9f2:	2001      	movs	r0, #1
}
 800a9f4:	b007      	add	sp, #28
 800a9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 800a9f8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800a9fc:	b2c0      	uxtb	r0, r0
 800a9fe:	2801      	cmp	r0, #1
 800aa00:	d14c      	bne.n	800aa9c <HAL_SD_ReadBlocks_DMA+0xc0>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aa02:	18d3      	adds	r3, r2, r3
 800aa04:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa06:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aa08:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa0a:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aa0c:	d904      	bls.n	800aa18 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aa0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aa10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800aa14:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800aa16:	e7ed      	b.n	800a9f4 <HAL_SD_ReadBlocks_DMA+0x18>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aa18:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 800aa1a:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 800aa1c:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aa1e:	2a01      	cmp	r2, #1
    hsd->State = HAL_SD_STATE_BUSY;
 800aa20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aa24:	f04f 32ff 	mov.w	r2, #4294967295
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800aa28:	ea4f 2346 	mov.w	r3, r6, lsl #9
    hsd->Instance->DCTRL = 0U;
 800aa2c:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aa2e:	4669      	mov	r1, sp
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800aa30:	62e3      	str	r3, [r4, #44]	; 0x2c
      add *= 512U;
 800aa32:	bf18      	it	ne
 800aa34:	026d      	lslne	r5, r5, #9
    hsd->pRxBuffPtr = pData;
 800aa36:	62a7      	str	r7, [r4, #40]	; 0x28
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aa38:	e9cd 2300 	strd	r2, r3, [sp]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aa3c:	2290      	movs	r2, #144	; 0x90
 800aa3e:	2302      	movs	r3, #2
 800aa40:	e9cd 2302 	strd	r2, r3, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aa44:	2300      	movs	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800aa46:	e9cd 3304 	strd	r3, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aa4a:	f002 fa9a 	bl	800cf82 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800aa4e:	6820      	ldr	r0, [r4, #0]
 800aa50:	68c3      	ldr	r3, [r0, #12]
 800aa52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa56:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800aa58:	2301      	movs	r3, #1
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800aa5a:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 800aa5c:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800aa5e:	6503      	str	r3, [r0, #80]	; 0x50
    if(NumberOfBlocks > 1U)
 800aa60:	d911      	bls.n	800aa86 <HAL_SD_ReadBlocks_DMA+0xaa>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800aa62:	2382      	movs	r3, #130	; 0x82
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800aa64:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800aa66:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800aa68:	f002 fad0 	bl	800d00c <SDMMC_CmdReadMultiBlock>
 800aa6c:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa6e:	b180      	cbz	r0, 800aa92 <HAL_SD_ReadBlocks_DMA+0xb6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa70:	4a0b      	ldr	r2, [pc, #44]	; (800aaa0 <HAL_SD_ReadBlocks_DMA+0xc4>)
 800aa72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800aa74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aa76:	4318      	orrs	r0, r3
      hsd->Context = SD_CONTEXT_NONE;
 800aa78:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 800aa7a:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa7c:	2001      	movs	r0, #1
 800aa7e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa82:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800aa84:	e7b6      	b.n	800a9f4 <HAL_SD_ReadBlocks_DMA+0x18>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800aa86:	2381      	movs	r3, #129	; 0x81
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800aa88:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800aa8a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800aa8c:	f002 faa5 	bl	800cfda <SDMMC_CmdReadSingleBlock>
 800aa90:	e7ec      	b.n	800aa6c <HAL_SD_ReadBlocks_DMA+0x90>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800aa92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa94:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800aa98:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_OK;
 800aa9a:	e7ab      	b.n	800a9f4 <HAL_SD_ReadBlocks_DMA+0x18>
    return HAL_BUSY;
 800aa9c:	2002      	movs	r0, #2
 800aa9e:	e7a9      	b.n	800a9f4 <HAL_SD_ReadBlocks_DMA+0x18>
 800aaa0:	1fe00fff 	.word	0x1fe00fff

0800aaa4 <HAL_SD_WriteBlocks_DMA>:
{
 800aaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	b086      	sub	sp, #24
 800aaac:	4615      	mov	r5, r2
 800aaae:	461e      	mov	r6, r3
  if(NULL == pData)
 800aab0:	460f      	mov	r7, r1
 800aab2:	b939      	cbnz	r1, 800aac4 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aab4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800aab6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aaba:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800aabc:	2001      	movs	r0, #1
}
 800aabe:	b006      	add	sp, #24
 800aac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 800aac4:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800aac8:	b2c0      	uxtb	r0, r0
 800aaca:	2801      	cmp	r0, #1
 800aacc:	d14c      	bne.n	800ab68 <HAL_SD_WriteBlocks_DMA+0xc4>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aace:	18d3      	adds	r3, r2, r3
 800aad0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aad2:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aad4:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aad6:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aad8:	d904      	bls.n	800aae4 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aada:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aadc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800aae0:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800aae2:	e7ec      	b.n	800aabe <HAL_SD_WriteBlocks_DMA+0x1a>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aae4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 800aae6:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 800aae8:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800aaea:	f04f 0890 	mov.w	r8, #144	; 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aaee:	2a01      	cmp	r2, #1
    hsd->State = HAL_SD_STATE_BUSY;
 800aaf0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aaf4:	f04f 32ff 	mov.w	r2, #4294967295
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800aaf8:	ea4f 2346 	mov.w	r3, r6, lsl #9
    hsd->Instance->DCTRL = 0U;
 800aafc:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aafe:	4669      	mov	r1, sp
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ab00:	6263      	str	r3, [r4, #36]	; 0x24
      add *= 512U;
 800ab02:	bf18      	it	ne
 800ab04:	026d      	lslne	r5, r5, #9
    hsd->pTxBuffPtr = pData;
 800ab06:	6227      	str	r7, [r4, #32]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ab08:	e9cd 2300 	strd	r2, r3, [sp]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	e9cd 8302 	strd	r8, r3, [sp, #8]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ab12:	e9cd 3304 	strd	r3, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ab16:	f002 fa34 	bl	800cf82 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800ab1a:	6820      	ldr	r0, [r4, #0]
 800ab1c:	68c3      	ldr	r3, [r0, #12]
 800ab1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab22:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ab24:	2301      	movs	r3, #1
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ab26:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 800ab28:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ab2a:	6503      	str	r3, [r0, #80]	; 0x50
    if(NumberOfBlocks > 1U)
 800ab2c:	d911      	bls.n	800ab52 <HAL_SD_WriteBlocks_DMA+0xae>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ab2e:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ab30:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ab32:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ab34:	f002 fa9c 	bl	800d070 <SDMMC_CmdWriteMultiBlock>
 800ab38:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab3a:	b180      	cbz	r0, 800ab5e <HAL_SD_WriteBlocks_DMA+0xba>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab3c:	4a0b      	ldr	r2, [pc, #44]	; (800ab6c <HAL_SD_WriteBlocks_DMA+0xc8>)
 800ab3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ab40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ab42:	4318      	orrs	r0, r3
      hsd->Context = SD_CONTEXT_NONE;
 800ab44:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 800ab46:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ab48:	2001      	movs	r0, #1
 800ab4a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ab4e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800ab50:	e7b5      	b.n	800aabe <HAL_SD_WriteBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ab52:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ab56:	4629      	mov	r1, r5
 800ab58:	f002 fa71 	bl	800d03e <SDMMC_CmdWriteSingleBlock>
 800ab5c:	e7ec      	b.n	800ab38 <HAL_SD_WriteBlocks_DMA+0x94>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800ab5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab60:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800ab64:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_OK;
 800ab66:	e7aa      	b.n	800aabe <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 800ab68:	2002      	movs	r0, #2
 800ab6a:	e7a8      	b.n	800aabe <HAL_SD_WriteBlocks_DMA+0x1a>
 800ab6c:	1fe00fff 	.word	0x1fe00fff

0800ab70 <HAL_SD_ErrorCallback>:
 800ab70:	4770      	bx	lr

0800ab72 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 800ab72:	4770      	bx	lr

0800ab74 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ab74:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800ab76:	0f9a      	lsrs	r2, r3, #30
 800ab78:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ab7a:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800ab7e:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ab80:	f3c3 6201 	ubfx	r2, r3, #24, #2
 800ab84:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ab86:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ab8a:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ab8c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ab90:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ab92:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ab94:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ab96:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800ab98:	0d1a      	lsrs	r2, r3, #20
 800ab9a:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ab9c:	f3c3 4203 	ubfx	r2, r3, #16, #4
 800aba0:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800aba2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800aba6:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800aba8:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800abac:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800abae:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800abb2:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800abb4:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800abb8:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800abba:	2200      	movs	r2, #0
 800abbc:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800abbe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 800abc0:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 800abc2:	2a00      	cmp	r2, #0
 800abc4:	d16b      	bne.n	800ac9e <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800abc6:	f640 74fc 	movw	r4, #4092	; 0xffc
 800abca:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800abcc:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 800abd0:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800abd4:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800abd6:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800abda:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800abdc:	f3c2 6302 	ubfx	r3, r2, #24, #3
 800abe0:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800abe2:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800abe6:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800abe8:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800abec:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800abf0:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800abf2:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800abf4:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800abf6:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800abf8:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800abfa:	f002 0207 	and.w	r2, r2, #7
 800abfe:	3202      	adds	r2, #2
 800ac00:	4093      	lsls	r3, r2
 800ac02:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ac04:	7a0a      	ldrb	r2, [r1, #8]
 800ac06:	f002 040f 	and.w	r4, r2, #15
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	40a2      	lsls	r2, r4
 800ac0e:	6502      	str	r2, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ac10:	0a52      	lsrs	r2, r2, #9
 800ac12:	4353      	muls	r3, r2
 800ac14:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800ac16:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ac1a:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ac1c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800ac1e:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800ac22:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ac24:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ac28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ac2c:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ac2e:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ac30:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->Reserved3 = 0;
 800ac32:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ac34:	0fda      	lsrs	r2, r3, #31
 800ac36:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ac38:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800ac3c:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ac3e:	f3c3 6282 	ubfx	r2, r3, #26, #3
 800ac42:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ac44:	f3c3 5283 	ubfx	r2, r3, #22, #4
 800ac48:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ac4a:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800ac4e:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ac52:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 800ac56:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ac5a:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ac5e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800ac62:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ac66:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800ac6a:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ac6e:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800ac72:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ac76:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800ac7a:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ac7e:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800ac82:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ac86:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ac8a:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ac8e:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ac92:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800ac96:	2301      	movs	r3, #1
 800ac98:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 800ac9c:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ac9e:	2a01      	cmp	r2, #1
 800aca0:	d10f      	bne.n	800acc2 <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aca2:	041b      	lsls	r3, r3, #16
 800aca4:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 800aca8:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800acac:	4313      	orrs	r3, r2
 800acae:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800acb0:	690b      	ldr	r3, [r1, #16]
 800acb2:	3301      	adds	r3, #1
 800acb4:	029b      	lsls	r3, r3, #10
 800acb6:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800acb8:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800acba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acbe:	6503      	str	r3, [r0, #80]	; 0x50
 800acc0:	e7ab      	b.n	800ac1a <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800acc2:	6803      	ldr	r3, [r0, #0]
 800acc4:	4a05      	ldr	r2, [pc, #20]	; (800acdc <HAL_SD_GetCardCSD+0x168>)
 800acc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800acc8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800acca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acce:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800acd0:	2301      	movs	r3, #1
 800acd2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800acd6:	4618      	mov	r0, r3
 800acd8:	e7e0      	b.n	800ac9c <HAL_SD_GetCardCSD+0x128>
 800acda:	bf00      	nop
 800acdc:	1fe00fff 	.word	0x1fe00fff

0800ace0 <HAL_SD_InitCard>:
{
 800ace0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ace4:	2300      	movs	r3, #0
{
 800ace6:	b098      	sub	sp, #96	; 0x60
 800ace8:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800acea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800acee:	4da1      	ldr	r5, [pc, #644]	; (800af74 <HAL_SD_InitCard+0x294>)
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800acf0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800acf4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800acf8:	f7ff fd22 	bl	800a740 <HAL_RCCEx_GetPeriphCLKFreq>
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800acfc:	69a3      	ldr	r3, [r4, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800acfe:	4606      	mov	r6, r0
 800ad00:	6827      	ldr	r7, [r4, #0]
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800ad02:	2b02      	cmp	r3, #2
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800ad04:	fbb0 f5f5 	udiv	r5, r0, r5
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800ad08:	d103      	bne.n	800ad12 <HAL_SD_InitCard+0x32>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	f043 0310 	orr.w	r3, r3, #16
 800ad10:	603b      	str	r3, [r7, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 800ad12:	ab0a      	add	r3, sp, #40	; 0x28
 800ad14:	950b      	str	r5, [sp, #44]	; 0x2c
 800ad16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ad1a:	ab07      	add	r3, sp, #28
 800ad1c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ad20:	4638      	mov	r0, r7
 800ad22:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad24:	f002 f8ea 	bl	800cefc <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ad28:	6820      	ldr	r0, [r4, #0]
 800ad2a:	f002 f909 	bl	800cf40 <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800ad2e:	0068      	lsls	r0, r5, #1
 800ad30:	fbb6 f0f0 	udiv	r0, r6, r0
  if(sdmmc_clk != 0U)
 800ad34:	b1f8      	cbz	r0, 800ad76 <HAL_SD_InitCard+0x96>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800ad36:	4d90      	ldr	r5, [pc, #576]	; (800af78 <HAL_SD_InitCard+0x298>)
 800ad38:	fbb5 f0f0 	udiv	r0, r5, r0
 800ad3c:	3001      	adds	r0, #1
    HAL_Delay(2U);
 800ad3e:	f7fb fa95 	bl	800626c <HAL_Delay>
  __IO uint32_t count = 0U;
 800ad42:	2300      	movs	r3, #0
 800ad44:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 800ad46:	f7fb fa8b 	bl	8006260 <HAL_GetTick>
 800ad4a:	4607      	mov	r7, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ad4c:	6820      	ldr	r0, [r4, #0]
 800ad4e:	f002 f9ed 	bl	800d12c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad52:	4605      	mov	r5, r0
 800ad54:	b940      	cbnz	r0, 800ad68 <HAL_SD_InitCard+0x88>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ad56:	6820      	ldr	r0, [r4, #0]
 800ad58:	f002 fa12 	bl	800d180 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad5c:	b168      	cbz	r0, 800ad7a <HAL_SD_InitCard+0x9a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ad5e:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ad60:	6820      	ldr	r0, [r4, #0]
 800ad62:	f002 f9e3 	bl	800d12c <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad66:	b150      	cbz	r0, 800ad7e <HAL_SD_InitCard+0x9e>
    hsd->State = HAL_SD_STATE_READY;
 800ad68:	2501      	movs	r5, #1
 800ad6a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ad6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ad70:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 800ad72:	63a0      	str	r0, [r4, #56]	; 0x38
    return HAL_ERROR;
 800ad74:	e0b0      	b.n	800aed8 <HAL_SD_InitCard+0x1f8>
    HAL_Delay(2U);
 800ad76:	2002      	movs	r0, #2
 800ad78:	e7e1      	b.n	800ad3e <HAL_SD_InitCard+0x5e>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	6423      	str	r3, [r4, #64]	; 0x40
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ad7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d127      	bne.n	800add4 <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ad84:	2100      	movs	r1, #0
 800ad86:	6820      	ldr	r0, [r4, #0]
 800ad88:	f002 fa3a 	bl	800d200 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad8c:	b310      	cbz	r0, 800add4 <HAL_SD_InitCard+0xf4>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad8e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800ad92:	e7e9      	b.n	800ad68 <HAL_SD_InitCard+0x88>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ad94:	4631      	mov	r1, r6
 800ad96:	6820      	ldr	r0, [r4, #0]
 800ad98:	f002 fa32 	bl	800d200 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	d1e3      	bne.n	800ad68 <HAL_SD_InitCard+0x88>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ada0:	4651      	mov	r1, sl
 800ada2:	6820      	ldr	r0, [r4, #0]
 800ada4:	f002 fa45 	bl	800d232 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ada8:	2800      	cmp	r0, #0
 800adaa:	d1f0      	bne.n	800ad8e <HAL_SD_InitCard+0xae>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800adac:	4631      	mov	r1, r6
 800adae:	6820      	ldr	r0, [r4, #0]
 800adb0:	f002 f8e4 	bl	800cf7c <SDMMC_GetResponse>
    count++;
 800adb4:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800adb6:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800adb8:	0fc6      	lsrs	r6, r0, #31
    count++;
 800adba:	3301      	adds	r3, #1
 800adbc:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800adbe:	9b06      	ldr	r3, [sp, #24]
 800adc0:	4543      	cmp	r3, r8
 800adc2:	d801      	bhi.n	800adc8 <HAL_SD_InitCard+0xe8>
 800adc4:	2e00      	cmp	r6, #0
 800adc6:	d0e5      	beq.n	800ad94 <HAL_SD_InitCard+0xb4>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800adc8:	9b06      	ldr	r3, [sp, #24]
 800adca:	454b      	cmp	r3, r9
 800adcc:	d909      	bls.n	800ade2 <HAL_SD_InitCard+0x102>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800adce:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800add2:	e7c9      	b.n	800ad68 <HAL_SD_InitCard+0x88>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800add4:	f64f 78fe 	movw	r8, #65534	; 0xfffe
{
 800add8:	2600      	movs	r6, #0
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800adda:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 800af80 <HAL_SD_InitCard+0x2a0>
 800adde:	46c1      	mov	r9, r8
 800ade0:	e7ed      	b.n	800adbe <HAL_SD_InitCard+0xde>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ade2:	006b      	lsls	r3, r5, #1
 800ade4:	d533      	bpl.n	800ae4e <HAL_SD_InitCard+0x16e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ade6:	2301      	movs	r3, #1
 800ade8:	6820      	ldr	r0, [r4, #0]
 800adea:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800adec:	69a3      	ldr	r3, [r4, #24]
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d12d      	bne.n	800ae4e <HAL_SD_InitCard+0x16e>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800adf2:	01ee      	lsls	r6, r5, #7
 800adf4:	d52b      	bpl.n	800ae4e <HAL_SD_InitCard+0x16e>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800adf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adfa:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800adfc:	6803      	ldr	r3, [r0, #0]
 800adfe:	f043 0308 	orr.w	r3, r3, #8
 800ae02:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800ae04:	f002 fb10 	bl	800d428 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d1ad      	bne.n	800ad68 <HAL_SD_InitCard+0x88>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800ae0c:	6823      	ldr	r3, [r4, #0]
 800ae0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae10:	0155      	lsls	r5, r2, #5
 800ae12:	d565      	bpl.n	800aee0 <HAL_SD_InitCard+0x200>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800ae14:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ae18:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800ae1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae1c:	02d8      	lsls	r0, r3, #11
 800ae1e:	d5b6      	bpl.n	800ad8e <HAL_SD_InitCard+0xae>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800ae20:	2001      	movs	r0, #1
 800ae22:	f7ff fea6 	bl	800ab72 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800ae26:	6822      	ldr	r2, [r4, #0]
 800ae28:	6813      	ldr	r3, [r2, #0]
 800ae2a:	f043 0304 	orr.w	r3, r3, #4
 800ae2e:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800ae30:	6823      	ldr	r3, [r4, #0]
 800ae32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae34:	0191      	lsls	r1, r2, #6
 800ae36:	d55b      	bpl.n	800aef0 <HAL_SD_InitCard+0x210>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800ae38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ae3c:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800ae3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae40:	02d2      	lsls	r2, r2, #11
 800ae42:	d4c4      	bmi.n	800adce <HAL_SD_InitCard+0xee>
          hsd->Instance->POWER = 0x13U;
 800ae44:	2213      	movs	r2, #19
 800ae46:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800ae48:	f04f 32ff 	mov.w	r2, #4294967295
 800ae4c:	639a      	str	r2, [r3, #56]	; 0x38
  uint16_t sd_rca = 1U;
 800ae4e:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ae50:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 800ae52:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ae56:	f002 f879 	bl	800cf4c <SDMMC_GetPowerState>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d07c      	beq.n	800af58 <HAL_SD_InitCard+0x278>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ae60:	2b03      	cmp	r3, #3
 800ae62:	d018      	beq.n	800ae96 <HAL_SD_InitCard+0x1b6>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ae64:	6820      	ldr	r0, [r4, #0]
 800ae66:	f002 fa2c 	bl	800d2c2 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d14d      	bne.n	800af0a <HAL_SD_InitCard+0x22a>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ae6e:	4601      	mov	r1, r0
 800ae70:	6820      	ldr	r0, [r4, #0]
 800ae72:	f002 f883 	bl	800cf7c <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ae76:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ae78:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ae7a:	6820      	ldr	r0, [r4, #0]
 800ae7c:	f002 f87e 	bl	800cf7c <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ae80:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ae82:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ae84:	6820      	ldr	r0, [r4, #0]
 800ae86:	f002 f879 	bl	800cf7c <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ae8a:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ae8c:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ae8e:	6820      	ldr	r0, [r4, #0]
 800ae90:	f002 f874 	bl	800cf7c <SDMMC_GetResponse>
 800ae94:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ae98:	2b03      	cmp	r3, #3
 800ae9a:	d12f      	bne.n	800aefc <HAL_SD_InitCard+0x21c>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ae9e:	2b03      	cmp	r3, #3
 800aea0:	d139      	bne.n	800af16 <HAL_SD_InitCard+0x236>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800aea2:	2104      	movs	r1, #4
 800aea4:	6820      	ldr	r0, [r4, #0]
 800aea6:	f002 f869 	bl	800cf7c <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aeaa:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800aeac:	0d00      	lsrs	r0, r0, #20
 800aeae:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f7ff fe5f 	bl	800ab74 <HAL_SD_GetCardCSD>
 800aeb6:	4605      	mov	r5, r0
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	d14a      	bne.n	800af52 <HAL_SD_InitCard+0x272>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800aebc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800aebe:	4603      	mov	r3, r0
 800aec0:	6820      	ldr	r0, [r4, #0]
 800aec2:	0412      	lsls	r2, r2, #16
 800aec4:	f002 f918 	bl	800d0f8 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800aec8:	b9f8      	cbnz	r0, 800af0a <HAL_SD_InitCard+0x22a>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aeca:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aece:	6820      	ldr	r0, [r4, #0]
 800aed0:	f002 f86a 	bl	800cfa8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d142      	bne.n	800af5e <HAL_SD_InitCard+0x27e>
}
 800aed8:	4628      	mov	r0, r5
 800aeda:	b018      	add	sp, #96	; 0x60
 800aedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aee0:	f7fb f9be 	bl	8006260 <HAL_GetTick>
 800aee4:	1bc0      	subs	r0, r0, r7
 800aee6:	3001      	adds	r0, #1
 800aee8:	d190      	bne.n	800ae0c <HAL_SD_InitCard+0x12c>
            return HAL_SD_ERROR_TIMEOUT;
 800aeea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800aeee:	e73b      	b.n	800ad68 <HAL_SD_InitCard+0x88>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aef0:	f7fb f9b6 	bl	8006260 <HAL_GetTick>
 800aef4:	1bc0      	subs	r0, r0, r7
 800aef6:	3001      	adds	r0, #1
 800aef8:	d19a      	bne.n	800ae30 <HAL_SD_InitCard+0x150>
 800aefa:	e7f6      	b.n	800aeea <HAL_SD_InitCard+0x20a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800aefc:	f10d 0116 	add.w	r1, sp, #22
 800af00:	6820      	ldr	r0, [r4, #0]
 800af02:	f002 fa0b 	bl	800d31c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800af06:	2800      	cmp	r0, #0
 800af08:	d0c8      	beq.n	800ae9c <HAL_SD_InitCard+0x1bc>
    hsd->State = HAL_SD_STATE_READY;
 800af0a:	2501      	movs	r5, #1
 800af0c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800af10:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800af12:	4308      	orrs	r0, r1
 800af14:	e72d      	b.n	800ad72 <HAL_SD_InitCard+0x92>
    hsd->SdCard.RelCardAdd = sd_rca;
 800af16:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af1a:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800af1c:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af1e:	0409      	lsls	r1, r1, #16
 800af20:	f002 f9e5 	bl	800d2ee <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800af24:	2800      	cmp	r0, #0
 800af26:	d1f0      	bne.n	800af0a <HAL_SD_InitCard+0x22a>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af28:	4601      	mov	r1, r0
 800af2a:	6820      	ldr	r0, [r4, #0]
 800af2c:	f002 f826 	bl	800cf7c <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800af30:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af32:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800af34:	6820      	ldr	r0, [r4, #0]
 800af36:	f002 f821 	bl	800cf7c <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800af3a:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800af3c:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800af3e:	6820      	ldr	r0, [r4, #0]
 800af40:	f002 f81c 	bl	800cf7c <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800af44:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800af46:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800af48:	6820      	ldr	r0, [r4, #0]
 800af4a:	f002 f817 	bl	800cf7c <SDMMC_GetResponse>
 800af4e:	66e0      	str	r0, [r4, #108]	; 0x6c
 800af50:	e7a7      	b.n	800aea2 <HAL_SD_InitCard+0x1c2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af52:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800af56:	e7d8      	b.n	800af0a <HAL_SD_InitCard+0x22a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800af58:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800af5c:	e7d5      	b.n	800af0a <HAL_SD_InitCard+0x22a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af5e:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800af60:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af62:	4a06      	ldr	r2, [pc, #24]	; (800af7c <HAL_SD_InitCard+0x29c>)
 800af64:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800af66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800af68:	4318      	orrs	r0, r3
 800af6a:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800af6c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 800af70:	e7b2      	b.n	800aed8 <HAL_SD_InitCard+0x1f8>
 800af72:	bf00      	nop
 800af74:	000c3500 	.word	0x000c3500
 800af78:	00012110 	.word	0x00012110
 800af7c:	1fe00fff 	.word	0x1fe00fff
 800af80:	c1100000 	.word	0xc1100000

0800af84 <HAL_SD_GetCardStatus>:
{
 800af84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af88:	4604      	mov	r4, r0
 800af8a:	b096      	sub	sp, #88	; 0x58
 800af8c:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 800af8e:	f7fb f967 	bl	8006260 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800af92:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800af94:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800af96:	6820      	ldr	r0, [r4, #0]
 800af98:	f001 fff0 	bl	800cf7c <SDMMC_GetResponse>
 800af9c:	0183      	lsls	r3, r0, #6
 800af9e:	d50b      	bpl.n	800afb8 <HAL_SD_GetCardStatus+0x34>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800afa0:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800afa4:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800afa6:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800afa8:	4a53      	ldr	r2, [pc, #332]	; (800b0f8 <HAL_SD_GetCardStatus+0x174>)
 800afaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800afac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800afae:	4318      	orrs	r0, r3
 800afb0:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800afb2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800afb6:	e08a      	b.n	800b0ce <HAL_SD_GetCardStatus+0x14a>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800afb8:	2140      	movs	r1, #64	; 0x40
 800afba:	6820      	ldr	r0, [r4, #0]
 800afbc:	f001 fff4 	bl	800cfa8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800afc0:	b110      	cbz	r0, 800afc8 <HAL_SD_GetCardStatus+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800afc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800afc4:	63a3      	str	r3, [r4, #56]	; 0x38
 800afc6:	e7ed      	b.n	800afa4 <HAL_SD_GetCardStatus+0x20>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800afc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800afca:	6820      	ldr	r0, [r4, #0]
 800afcc:	0409      	lsls	r1, r1, #16
 800afce:	f002 f917 	bl	800d200 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d1f5      	bne.n	800afc2 <HAL_SD_GetCardStatus+0x3e>
  config.DataLength    = 64U;
 800afd6:	2340      	movs	r3, #64	; 0x40
 800afd8:	f04f 35ff 	mov.w	r5, #4294967295
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800afdc:	2760      	movs	r7, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800afde:	9004      	str	r0, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800afe0:	4669      	mov	r1, sp
 800afe2:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 800afe4:	e9cd 5300 	strd	r5, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800afe8:	2302      	movs	r3, #2
 800afea:	e9cd 7302 	strd	r7, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800afee:	2301      	movs	r3, #1
 800aff0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aff2:	f001 ffc6 	bl	800cf82 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800aff6:	6820      	ldr	r0, [r4, #0]
 800aff8:	f002 f9fd 	bl	800d3f6 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800affc:	2800      	cmp	r0, #0
 800affe:	d1e0      	bne.n	800afc2 <HAL_SD_GetCardStatus+0x3e>
  uint32_t *pData = pSDstatus;
 800b000:	af06      	add	r7, sp, #24
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b006:	f412 7f95 	tst.w	r2, #298	; 0x12a
 800b00a:	d00a      	beq.n	800b022 <HAL_SD_GetCardStatus+0x9e>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b00c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b00e:	0711      	lsls	r1, r2, #28
 800b010:	d470      	bmi.n	800b0f4 <HAL_SD_GetCardStatus+0x170>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b014:	0792      	lsls	r2, r2, #30
 800b016:	d46b      	bmi.n	800b0f0 <HAL_SD_GetCardStatus+0x16c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b01a:	069b      	lsls	r3, r3, #26
 800b01c:	d520      	bpl.n	800b060 <HAL_SD_GetCardStatus+0xdc>
    return HAL_SD_ERROR_RX_OVERRUN;
 800b01e:	2020      	movs	r0, #32
 800b020:	e7c0      	b.n	800afa4 <HAL_SD_GetCardStatus+0x20>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b024:	0418      	lsls	r0, r3, #16
 800b026:	d508      	bpl.n	800b03a <HAL_SD_GetCardStatus+0xb6>
 800b028:	f107 0520 	add.w	r5, r7, #32
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b02c:	6820      	ldr	r0, [r4, #0]
 800b02e:	f001 ff7f 	bl	800cf30 <SDMMC_ReadFIFO>
 800b032:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 800b036:	42af      	cmp	r7, r5
 800b038:	d1f8      	bne.n	800b02c <HAL_SD_GetCardStatus+0xa8>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b03a:	f7fb f911 	bl	8006260 <HAL_GetTick>
 800b03e:	eba0 0008 	sub.w	r0, r0, r8
 800b042:	3001      	adds	r0, #1
 800b044:	d1dd      	bne.n	800b002 <HAL_SD_GetCardStatus+0x7e>
      return HAL_SD_ERROR_TIMEOUT;
 800b046:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b04a:	e7ab      	b.n	800afa4 <HAL_SD_GetCardStatus+0x20>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b04c:	f001 ff70 	bl	800cf30 <SDMMC_ReadFIFO>
 800b050:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b054:	f7fb f904 	bl	8006260 <HAL_GetTick>
 800b058:	eba0 0008 	sub.w	r0, r0, r8
 800b05c:	3001      	adds	r0, #1
 800b05e:	d0f2      	beq.n	800b046 <HAL_SD_GetCardStatus+0xc2>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b060:	6820      	ldr	r0, [r4, #0]
 800b062:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800b064:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
 800b068:	d1f0      	bne.n	800b04c <HAL_SD_GetCardStatus+0xc8>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b06a:	9a06      	ldr	r2, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b06c:	4b23      	ldr	r3, [pc, #140]	; (800b0fc <HAL_SD_GetCardStatus+0x178>)
 800b06e:	6383      	str	r3, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b070:	f3c2 1381 	ubfx	r3, r2, #6, #2
 800b074:	7033      	strb	r3, [r6, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b076:	f3c2 1340 	ubfx	r3, r2, #5, #1
 800b07a:	7073      	strb	r3, [r6, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b07c:	0a13      	lsrs	r3, r2, #8
 800b07e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b082:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800b086:	b29b      	uxth	r3, r3
 800b088:	8073      	strh	r3, [r6, #2]
 800b08a:	9b07      	ldr	r3, [sp, #28]
 800b08c:	ba1b      	rev	r3, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b08e:	6073      	str	r3, [r6, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b090:	9b08      	ldr	r3, [sp, #32]
 800b092:	b2da      	uxtb	r2, r3
 800b094:	7232      	strb	r2, [r6, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800b096:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b09a:	7272      	strb	r2, [r6, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b09c:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b0a0:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b0a2:	72b2      	strb	r2, [r6, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b0a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b0aa:	b2d1      	uxtb	r1, r2
 800b0ac:	430b      	orrs	r3, r1
 800b0ae:	81b3      	strh	r3, [r6, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b0b0:	f3c2 2385 	ubfx	r3, r2, #10, #6
 800b0b4:	73b3      	strb	r3, [r6, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800b0b6:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800b0ba:	73f3      	strb	r3, [r6, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b0bc:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b0c0:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b0c4:	7433      	strb	r3, [r6, #16]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b0c6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b0ca:	7472      	strb	r2, [r6, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b0cc:	74b3      	strb	r3, [r6, #18]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b0ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b0d2:	6820      	ldr	r0, [r4, #0]
 800b0d4:	f001 ff68 	bl	800cfa8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0d8:	b130      	cbz	r0, 800b0e8 <HAL_SD_GetCardStatus+0x164>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b0da:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800b0dc:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b0de:	4a06      	ldr	r2, [pc, #24]	; (800b0f8 <HAL_SD_GetCardStatus+0x174>)
 800b0e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800b0e2:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b0e4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
}
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	b016      	add	sp, #88	; 0x58
 800b0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b0f0:	2002      	movs	r0, #2
 800b0f2:	e757      	b.n	800afa4 <HAL_SD_GetCardStatus+0x20>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b0f4:	2008      	movs	r0, #8
 800b0f6:	e755      	b.n	800afa4 <HAL_SD_GetCardStatus+0x20>
 800b0f8:	1fe00fff 	.word	0x1fe00fff
 800b0fc:	18000f3a 	.word	0x18000f3a

0800b100 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b100:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800b102:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b104:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b106:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b108:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b10a:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b10c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b10e:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b110:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b112:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b114:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b116:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b118:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800b11a:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b11c:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 800b11e:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b120:	61cb      	str	r3, [r1, #28]
}
 800b122:	4770      	bx	lr

0800b124 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 800b124:	2303      	movs	r3, #3
{
 800b126:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800b128:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 800b12c:	b08a      	sub	sp, #40	; 0x28
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b12e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 800b130:	4604      	mov	r4, r0
 800b132:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b134:	2b03      	cmp	r3, #3
 800b136:	d002      	beq.n	800b13e <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b138:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800b13c:	d103      	bne.n	800b146 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b13e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b144:	e064      	b.n	800b210 <HAL_SD_ConfigWideBusOperation+0xec>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b146:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800b14a:	6800      	ldr	r0, [r0, #0]
 800b14c:	d13b      	bne.n	800b1c6 <HAL_SD_ConfigWideBusOperation+0xa2>
  uint32_t scr[2U] = {0UL, 0UL};
 800b14e:	2100      	movs	r1, #0
 800b150:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b154:	f001 ff12 	bl	800cf7c <SDMMC_GetResponse>
 800b158:	0180      	lsls	r0, r0, #6
 800b15a:	d42e      	bmi.n	800b1ba <HAL_SD_ConfigWideBusOperation+0x96>
  errorstate = SD_FindSCR(hsd, scr);
 800b15c:	a904      	add	r1, sp, #16
 800b15e:	4620      	mov	r0, r4
 800b160:	f7ff fbd2 	bl	800a908 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b164:	b960      	cbnz	r0, 800b180 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b166:	9b05      	ldr	r3, [sp, #20]
 800b168:	0359      	lsls	r1, r3, #13
 800b16a:	d529      	bpl.n	800b1c0 <HAL_SD_ConfigWideBusOperation+0x9c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b16c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b16e:	6820      	ldr	r0, [r4, #0]
 800b170:	0409      	lsls	r1, r1, #16
 800b172:	f002 f845 	bl	800d200 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b176:	b918      	cbnz	r0, 800b180 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b178:	2102      	movs	r1, #2
 800b17a:	6820      	ldr	r0, [r4, #0]
 800b17c:	f002 f86f 	bl	800d25e <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800b180:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b182:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 800b184:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b186:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b188:	6826      	ldr	r6, [r4, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d042      	beq.n	800b214 <HAL_SD_ConfigWideBusOperation+0xf0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b18e:	4b32      	ldr	r3, [pc, #200]	; (800b258 <HAL_SD_ConfigWideBusOperation+0x134>)
    status = HAL_ERROR;
 800b190:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b192:	63b3      	str	r3, [r6, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b194:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b198:	6820      	ldr	r0, [r4, #0]
 800b19a:	f001 ff05 	bl	800cfa8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b19e:	b130      	cbz	r0, 800b1ae <HAL_SD_ConfigWideBusOperation+0x8a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b1a0:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800b1a2:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b1a4:	4a2c      	ldr	r2, [pc, #176]	; (800b258 <HAL_SD_ConfigWideBusOperation+0x134>)
 800b1a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b1a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b1aa:	4318      	orrs	r0, r3
 800b1ac:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 800b1ae:	2301      	movs	r3, #1
}
 800b1b0:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800b1b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800b1b6:	b00a      	add	sp, #40	; 0x28
 800b1b8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b1ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b1be:	e7df      	b.n	800b180 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b1c0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800b1c4:	e7dc      	b.n	800b180 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b1c6:	bb01      	cbnz	r1, 800b20a <HAL_SD_ConfigWideBusOperation+0xe6>
  uint32_t scr[2U] = {0UL, 0UL};
 800b1c8:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b1cc:	f001 fed6 	bl	800cf7c <SDMMC_GetResponse>
 800b1d0:	0182      	lsls	r2, r0, #6
 800b1d2:	d414      	bmi.n	800b1fe <HAL_SD_ConfigWideBusOperation+0xda>
  errorstate = SD_FindSCR(hsd, scr);
 800b1d4:	a904      	add	r1, sp, #16
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f7ff fb96 	bl	800a908 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1dc:	b960      	cbnz	r0, 800b1f8 <HAL_SD_ConfigWideBusOperation+0xd4>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b1de:	9b05      	ldr	r3, [sp, #20]
 800b1e0:	03db      	lsls	r3, r3, #15
 800b1e2:	d50f      	bpl.n	800b204 <HAL_SD_ConfigWideBusOperation+0xe0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b1e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b1e6:	6820      	ldr	r0, [r4, #0]
 800b1e8:	0409      	lsls	r1, r1, #16
 800b1ea:	f002 f809 	bl	800d200 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1ee:	b918      	cbnz	r0, 800b1f8 <HAL_SD_ConfigWideBusOperation+0xd4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b1f0:	4601      	mov	r1, r0
 800b1f2:	6820      	ldr	r0, [r4, #0]
 800b1f4:	f002 f833 	bl	800d25e <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800b1f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b1fa:	4308      	orrs	r0, r1
 800b1fc:	e7c2      	b.n	800b184 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b1fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b202:	e7f9      	b.n	800b1f8 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b204:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800b208:	e7f6      	b.n	800b1f8 <HAL_SD_ConfigWideBusOperation+0xd4>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b20a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b20c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b210:	63a3      	str	r3, [r4, #56]	; 0x38
 800b212:	e7b8      	b.n	800b186 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b214:	6863      	ldr	r3, [r4, #4]
 800b216:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b218:	68a3      	ldr	r3, [r4, #8]
    Init.BusWide             = WideMode;
 800b21a:	e9cd 3505 	strd	r3, r5, [sp, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b21e:	6923      	ldr	r3, [r4, #16]
 800b220:	9307      	str	r3, [sp, #28]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800b222:	6963      	ldr	r3, [r4, #20]
 800b224:	2b03      	cmp	r3, #3
 800b226:	d90c      	bls.n	800b242 <HAL_SD_ConfigWideBusOperation+0x11e>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800b228:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800b22a:	ab0a      	add	r3, sp, #40	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 800b22c:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 800b22e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800b232:	ab04      	add	r3, sp, #16
 800b234:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b238:	4630      	mov	r0, r6
 800b23a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b23c:	f001 fe5e 	bl	800cefc <SDMMC_Init>
 800b240:	e7a8      	b.n	800b194 <HAL_SD_ConfigWideBusOperation+0x70>
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b242:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b244:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800b248:	d0ee      	beq.n	800b228 <HAL_SD_ConfigWideBusOperation+0x104>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b24a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800b24e:	bf0c      	ite	eq
 800b250:	2302      	moveq	r3, #2
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800b252:	2304      	movne	r3, #4
 800b254:	e7e8      	b.n	800b228 <HAL_SD_ConfigWideBusOperation+0x104>
 800b256:	bf00      	nop
 800b258:	1fe00fff 	.word	0x1fe00fff

0800b25c <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b25c:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 800b25e:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b260:	0409      	lsls	r1, r1, #16
{
 800b262:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b264:	6800      	ldr	r0, [r0, #0]
 800b266:	f002 f8ad 	bl	800d3c4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b26a:	4601      	mov	r1, r0
 800b26c:	b928      	cbnz	r0, 800b27a <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b26e:	6820      	ldr	r0, [r4, #0]
 800b270:	f001 fe84 	bl	800cf7c <SDMMC_GetResponse>
}
 800b274:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800b278:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 800b27a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 800b27c:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 800b27e:	4319      	orrs	r1, r3
 800b280:	63a1      	str	r1, [r4, #56]	; 0x38
 800b282:	e7f7      	b.n	800b274 <HAL_SD_GetCardState+0x18>

0800b284 <HAL_SD_Init>:
{
 800b284:	b570      	push	{r4, r5, r6, lr}
  if(hsd == NULL)
 800b286:	4604      	mov	r4, r0
{
 800b288:	b086      	sub	sp, #24
  if(hsd == NULL)
 800b28a:	b918      	cbnz	r0, 800b294 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 800b28c:	2501      	movs	r5, #1
}
 800b28e:	4628      	mov	r0, r5
 800b290:	b006      	add	sp, #24
 800b292:	bd70      	pop	{r4, r5, r6, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 800b294:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800b298:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b29c:	b93b      	cbnz	r3, 800b2ae <HAL_SD_Init+0x2a>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800b29e:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 800b2a0:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800b2a2:	b90b      	cbnz	r3, 800b2a8 <HAL_SD_Init+0x24>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f7f8 f8d3 	bl	8003454 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800b2ae:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b2b0:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800b2b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b2b6:	f7ff fd13 	bl	800ace0 <HAL_SD_InitCard>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d1e6      	bne.n	800b28c <HAL_SD_Init+0x8>
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b2be:	a901      	add	r1, sp, #4
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	f7ff fe5f 	bl	800af84 <HAL_SD_GetCardStatus>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d1e0      	bne.n	800b28c <HAL_SD_Init+0x8>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b2ca:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 800b2cc:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b2d0:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b2d2:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800b2d6:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b2d8:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b2da:	d11d      	bne.n	800b318 <HAL_SD_Init+0x94>
 800b2dc:	b902      	cbnz	r2, 800b2e0 <HAL_SD_Init+0x5c>
 800b2de:	b1c3      	cbz	r3, 800b312 <HAL_SD_Init+0x8e>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b2e0:	f44f 7300 	mov.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b2e4:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b2e6:	68e1      	ldr	r1, [r4, #12]
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f7ff ff1b 	bl	800b124 <HAL_SD_ConfigWideBusOperation>
 800b2ee:	4605      	mov	r5, r0
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d1cb      	bne.n	800b28c <HAL_SD_Init+0x8>
  tickstart = HAL_GetTick();
 800b2f4:	f7fa ffb4 	bl	8006260 <HAL_GetTick>
 800b2f8:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f7ff ffae 	bl	800b25c <HAL_SD_GetCardState>
 800b300:	2804      	cmp	r0, #4
 800b302:	d10b      	bne.n	800b31c <HAL_SD_Init+0x98>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b304:	2300      	movs	r3, #0
 800b306:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800b308:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800b30a:	2301      	movs	r3, #1
 800b30c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800b310:	e7bd      	b.n	800b28e <HAL_SD_Init+0xa>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b312:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b316:	e7e5      	b.n	800b2e4 <HAL_SD_Init+0x60>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b318:	65e0      	str	r0, [r4, #92]	; 0x5c
 800b31a:	e7e4      	b.n	800b2e6 <HAL_SD_Init+0x62>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800b31c:	f7fa ffa0 	bl	8006260 <HAL_GetTick>
 800b320:	1b80      	subs	r0, r0, r6
 800b322:	3001      	adds	r0, #1
 800b324:	d1e9      	bne.n	800b2fa <HAL_SD_Init+0x76>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b326:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
      return HAL_TIMEOUT;
 800b32a:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b32c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800b32e:	2301      	movs	r3, #1
 800b330:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 800b334:	e7ab      	b.n	800b28e <HAL_SD_Init+0xa>

0800b336 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b336:	4770      	bx	lr

0800b338 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800b338:	4770      	bx	lr

0800b33a <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800b33a:	4770      	bx	lr

0800b33c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 800b33c:	4770      	bx	lr
	...

0800b340 <HAL_SD_IRQHandler>:
{
 800b340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t context = hsd->Context;
 800b342:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 800b344:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b346:	6800      	ldr	r0, [r0, #0]
 800b348:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b34a:	041b      	lsls	r3, r3, #16
 800b34c:	d520      	bpl.n	800b390 <HAL_SD_IRQHandler+0x50>
 800b34e:	072f      	lsls	r7, r5, #28
 800b350:	d51e      	bpl.n	800b390 <HAL_SD_IRQHandler+0x50>
  if (hsd->RxXferSize >= 32U)
 800b352:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b354:	2b1f      	cmp	r3, #31
 800b356:	d919      	bls.n	800b38c <HAL_SD_IRQHandler+0x4c>
  tmp = hsd->pRxBuffPtr;
 800b358:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b35a:	1d35      	adds	r5, r6, #4
 800b35c:	f106 0724 	add.w	r7, r6, #36	; 0x24
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b360:	6820      	ldr	r0, [r4, #0]
 800b362:	3504      	adds	r5, #4
 800b364:	f001 fde4 	bl	800cf30 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800b368:	f805 0c08 	strb.w	r0, [r5, #-8]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b36c:	0a03      	lsrs	r3, r0, #8
 800b36e:	f805 3c07 	strb.w	r3, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b372:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b374:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b376:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b37a:	f805 0c05 	strb.w	r0, [r5, #-5]
    for(count = 0U; count < 8U; count++)
 800b37e:	42bd      	cmp	r5, r7
 800b380:	d1ee      	bne.n	800b360 <HAL_SD_IRQHandler+0x20>
    hsd->RxXferSize -= 32U;
 800b382:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hsd->pRxBuffPtr = tmp;
 800b384:	3620      	adds	r6, #32
    hsd->RxXferSize -= 32U;
 800b386:	3b20      	subs	r3, #32
    hsd->pRxBuffPtr = tmp;
 800b388:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800b38a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800b38c:	b003      	add	sp, #12
 800b38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b390:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b392:	05de      	lsls	r6, r3, #23
 800b394:	d553      	bpl.n	800b43e <HAL_SD_IRQHandler+0xfe>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b39a:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800b39c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800b39e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800b3a2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800b3a6:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b3a8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800b3aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3ae:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b3b0:	68c3      	ldr	r3, [r0, #12]
 800b3b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3b6:	60c3      	str	r3, [r0, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800b3b8:	f015 0308 	ands.w	r3, r5, #8
 800b3bc:	d01f      	beq.n	800b3fe <HAL_SD_IRQHandler+0xbe>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b3be:	f015 0f22 	tst.w	r5, #34	; 0x22
 800b3c2:	d008      	beq.n	800b3d6 <HAL_SD_IRQHandler+0x96>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b3c4:	f001 fe6e 	bl	800d0a4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800b3c8:	b128      	cbz	r0, 800b3d6 <HAL_SD_IRQHandler+0x96>
          hsd->ErrorCode |= errorstate;
 800b3ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b3cc:	4318      	orrs	r0, r3
 800b3ce:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f7ff fbcd 	bl	800ab70 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b3d6:	6823      	ldr	r3, [r4, #0]
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b3d8:	07a9      	lsls	r1, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b3da:	4a69      	ldr	r2, [pc, #420]	; (800b580 <HAL_SD_IRQHandler+0x240>)
 800b3dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b3de:	f04f 0301 	mov.w	r3, #1
 800b3e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b3e6:	f04f 0300 	mov.w	r3, #0
 800b3ea:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b3ec:	d003      	beq.n	800b3f6 <HAL_SD_IRQHandler+0xb6>
        HAL_SD_RxCpltCallback(hsd);
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f002 fd38 	bl	800de64 <HAL_SD_RxCpltCallback>
 800b3f4:	e7ca      	b.n	800b38c <HAL_SD_IRQHandler+0x4c>
        HAL_SD_TxCpltCallback(hsd);
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f002 fd30 	bl	800de5c <HAL_SD_TxCpltCallback>
 800b3fc:	e7c6      	b.n	800b38c <HAL_SD_IRQHandler+0x4c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b3fe:	062a      	lsls	r2, r5, #24
 800b400:	d5c4      	bpl.n	800b38c <HAL_SD_IRQHandler+0x4c>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b402:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800b406:	6283      	str	r3, [r0, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800b408:	62c3      	str	r3, [r0, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b40a:	6503      	str	r3, [r0, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b40c:	d008      	beq.n	800b420 <HAL_SD_IRQHandler+0xe0>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b40e:	f001 fe49 	bl	800d0a4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800b412:	b128      	cbz	r0, 800b420 <HAL_SD_IRQHandler+0xe0>
          hsd->ErrorCode |= errorstate;
 800b414:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b416:	4318      	orrs	r0, r3
 800b418:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b41a:	4620      	mov	r0, r4
 800b41c:	f7ff fba8 	bl	800ab70 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800b420:	2301      	movs	r3, #1
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b422:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800b426:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b42a:	f04f 0300 	mov.w	r3, #0
 800b42e:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b430:	d002      	beq.n	800b438 <HAL_SD_IRQHandler+0xf8>
        HAL_SD_TxCpltCallback(hsd);
 800b432:	4620      	mov	r0, r4
 800b434:	f002 fd12 	bl	800de5c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b438:	07af      	lsls	r7, r5, #30
 800b43a:	d0a7      	beq.n	800b38c <HAL_SD_IRQHandler+0x4c>
 800b43c:	e7d7      	b.n	800b3ee <HAL_SD_IRQHandler+0xae>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b43e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b440:	045e      	lsls	r6, r3, #17
 800b442:	d527      	bpl.n	800b494 <HAL_SD_IRQHandler+0x154>
 800b444:	0729      	lsls	r1, r5, #28
 800b446:	d525      	bpl.n	800b494 <HAL_SD_IRQHandler+0x154>
  if (hsd->TxXferSize >= 32U)
 800b448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b44a:	2b1f      	cmp	r3, #31
 800b44c:	d99e      	bls.n	800b38c <HAL_SD_IRQHandler+0x4c>
  tmp = hsd->pTxBuffPtr;
 800b44e:	6a26      	ldr	r6, [r4, #32]
 800b450:	1d35      	adds	r5, r6, #4
 800b452:	f106 0724 	add.w	r7, r6, #36	; 0x24
      data = (uint32_t)(*tmp);
 800b456:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800b45a:	3504      	adds	r5, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b45c:	a901      	add	r1, sp, #4
 800b45e:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800b460:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800b462:	f815 2c07 	ldrb.w	r2, [r5, #-7]
 800b466:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b46a:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800b46c:	f815 2c06 	ldrb.w	r2, [r5, #-6]
 800b470:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b474:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800b476:	f815 2c05 	ldrb.w	r2, [r5, #-5]
 800b47a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b47e:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b480:	f001 fd59 	bl	800cf36 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b484:	42af      	cmp	r7, r5
 800b486:	d1e6      	bne.n	800b456 <HAL_SD_IRQHandler+0x116>
    hsd->TxXferSize -= 32U;
 800b488:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsd->pTxBuffPtr = tmp;
 800b48a:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800b48c:	3b20      	subs	r3, #32
    hsd->pTxBuffPtr = tmp;
 800b48e:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize -= 32U;
 800b490:	6263      	str	r3, [r4, #36]	; 0x24
 800b492:	e77b      	b.n	800b38c <HAL_SD_IRQHandler+0x4c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b494:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b496:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800b49a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b49c:	d056      	beq.n	800b54c <HAL_SD_IRQHandler+0x20c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800b49e:	079a      	lsls	r2, r3, #30
 800b4a0:	d503      	bpl.n	800b4aa <HAL_SD_IRQHandler+0x16a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b4a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b4a4:	f043 0302 	orr.w	r3, r3, #2
 800b4a8:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800b4aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b4ac:	071b      	lsls	r3, r3, #28
 800b4ae:	d503      	bpl.n	800b4b8 <HAL_SD_IRQHandler+0x178>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b4b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b4b2:	f043 0308 	orr.w	r3, r3, #8
 800b4b6:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800b4b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b4ba:	069f      	lsls	r7, r3, #26
 800b4bc:	d503      	bpl.n	800b4c6 <HAL_SD_IRQHandler+0x186>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b4be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b4c0:	f043 0320 	orr.w	r3, r3, #32
 800b4c4:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800b4c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b4c8:	06de      	lsls	r6, r3, #27
 800b4ca:	d503      	bpl.n	800b4d4 <HAL_SD_IRQHandler+0x194>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b4cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b4ce:	f043 0310 	orr.w	r3, r3, #16
 800b4d2:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b4d4:	4b2a      	ldr	r3, [pc, #168]	; (800b580 <HAL_SD_IRQHandler+0x240>)
 800b4d6:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b4d8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800b4da:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800b4de:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b4e0:	68c3      	ldr	r3, [r0, #12]
 800b4e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4e6:	60c3      	str	r3, [r0, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800b4e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b4ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b4ee:	62c3      	str	r3, [r0, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800b4f0:	68c3      	ldr	r3, [r0, #12]
 800b4f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4f6:	60c3      	str	r3, [r0, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b4f8:	f001 fdd4 	bl	800d0a4 <SDMMC_CmdStopTransfer>
 800b4fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b4fe:	f015 0108 	ands.w	r1, r5, #8
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b502:	ea40 0003 	orr.w	r0, r0, r3
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800b506:	6823      	ldr	r3, [r4, #0]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b508:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800b50a:	68da      	ldr	r2, [r3, #12]
 800b50c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b510:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800b512:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b516:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b518:	d008      	beq.n	800b52c <HAL_SD_IRQHandler+0x1ec>
      hsd->State = HAL_SD_STATE_READY;
 800b51a:	2301      	movs	r3, #1
 800b51c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b520:	2300      	movs	r3, #0
 800b522:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800b524:	4620      	mov	r0, r4
 800b526:	f7ff fb23 	bl	800ab70 <HAL_SD_ErrorCallback>
 800b52a:	e72f      	b.n	800b38c <HAL_SD_IRQHandler+0x4c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b52c:	0628      	lsls	r0, r5, #24
 800b52e:	f57f af2d 	bpl.w	800b38c <HAL_SD_IRQHandler+0x4c>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b532:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b534:	2a00      	cmp	r2, #0
 800b536:	f43f af29 	beq.w	800b38c <HAL_SD_IRQHandler+0x4c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b53a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b53c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b540:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b542:	6519      	str	r1, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800b544:	2301      	movs	r3, #1
 800b546:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800b54a:	e7eb      	b.n	800b524 <HAL_SD_IRQHandler+0x1e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800b54c:	00da      	lsls	r2, r3, #3
 800b54e:	f57f af1d 	bpl.w	800b38c <HAL_SD_IRQHandler+0x4c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800b552:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b556:	f005 0520 	and.w	r5, r5, #32
 800b55a:	6383      	str	r3, [r0, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b55c:	6d03      	ldr	r3, [r0, #80]	; 0x50
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800b55e:	4620      	mov	r0, r4
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b560:	075b      	lsls	r3, r3, #29
 800b562:	d406      	bmi.n	800b572 <HAL_SD_IRQHandler+0x232>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b564:	b115      	cbz	r5, 800b56c <HAL_SD_IRQHandler+0x22c>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800b566:	f7ff fee9 	bl	800b33c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800b56a:	e70f      	b.n	800b38c <HAL_SD_IRQHandler+0x4c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800b56c:	f7ff fee4 	bl	800b338 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800b570:	e70c      	b.n	800b38c <HAL_SD_IRQHandler+0x4c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b572:	b115      	cbz	r5, 800b57a <HAL_SD_IRQHandler+0x23a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800b574:	f7ff fee1 	bl	800b33a <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800b578:	e708      	b.n	800b38c <HAL_SD_IRQHandler+0x4c>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800b57a:	f7ff fedc 	bl	800b336 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800b57e:	e705      	b.n	800b38c <HAL_SD_IRQHandler+0x4c>
 800b580:	18000f3a 	.word	0x18000f3a

0800b584 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800b584:	6803      	ldr	r3, [r0, #0]
 800b586:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b588:	699a      	ldr	r2, [r3, #24]
 800b58a:	f042 0208 	orr.w	r2, r2, #8
 800b58e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b590:	699a      	ldr	r2, [r3, #24]
 800b592:	f042 0210 	orr.w	r2, r2, #16
 800b596:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	f022 0201 	bic.w	r2, r2, #1
 800b59e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b5a0:	691a      	ldr	r2, [r3, #16]
 800b5a2:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
 800b5a6:	f022 0203 	bic.w	r2, r2, #3
 800b5aa:	611a      	str	r2, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b5ac:	689a      	ldr	r2, [r3, #8]
 800b5ae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b5b2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b5b4:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800b5b8:	2a04      	cmp	r2, #4
 800b5ba:	d00b      	beq.n	800b5d4 <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b5bc:	068a      	lsls	r2, r1, #26
 800b5be:	d509      	bpl.n	800b5d4 <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b5c0:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800b5c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b5c8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b5cc:	699a      	ldr	r2, [r3, #24]
 800b5ce:	f042 0220 	orr.w	r2, r2, #32
 800b5d2:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b5d4:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800b5d8:	2a03      	cmp	r2, #3
 800b5da:	d00b      	beq.n	800b5f4 <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b5dc:	064a      	lsls	r2, r1, #25
 800b5de:	d509      	bpl.n	800b5f4 <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b5e0:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800b5e4:	f042 0204 	orr.w	r2, r2, #4
 800b5e8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b5ec:	699a      	ldr	r2, [r3, #24]
 800b5ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b5f4:	058a      	lsls	r2, r1, #22
 800b5f6:	d509      	bpl.n	800b60c <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b5f8:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800b5fc:	f042 0201 	orr.w	r2, r2, #1
 800b600:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b604:	699a      	ldr	r2, [r3, #24]
 800b606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b60a:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b60c:	05ca      	lsls	r2, r1, #23
 800b60e:	d509      	bpl.n	800b624 <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b610:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800b614:	f042 0208 	orr.w	r2, r2, #8
 800b618:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b61c:	699a      	ldr	r2, [r3, #24]
 800b61e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b622:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b624:	2300      	movs	r3, #0
 800b626:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b62a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800b62e:	4770      	bx	lr

0800b630 <HAL_SPI_Init>:
{
 800b630:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800b632:	4604      	mov	r4, r0
 800b634:	b908      	cbnz	r0, 800b63a <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 800b636:	2001      	movs	r0, #1
}
 800b638:	bd70      	pop	{r4, r5, r6, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b63a:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b63c:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b63e:	4940      	ldr	r1, [pc, #256]	; (800b740 <HAL_SPI_Init+0x110>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b640:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b642:	428a      	cmp	r2, r1
 800b644:	68c3      	ldr	r3, [r0, #12]
 800b646:	d009      	beq.n	800b65c <HAL_SPI_Init+0x2c>
 800b648:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 800b64c:	428a      	cmp	r2, r1
 800b64e:	d005      	beq.n	800b65c <HAL_SPI_Init+0x2c>
 800b650:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b654:	428a      	cmp	r2, r1
 800b656:	d001      	beq.n	800b65c <HAL_SPI_Init+0x2c>
 800b658:	2b0f      	cmp	r3, #15
 800b65a:	d8ec      	bhi.n	800b636 <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b65c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b65e:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b660:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800b662:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 800b664:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b668:	4935      	ldr	r1, [pc, #212]	; (800b740 <HAL_SPI_Init+0x110>)
 800b66a:	428a      	cmp	r2, r1
 800b66c:	d066      	beq.n	800b73c <HAL_SPI_Init+0x10c>
 800b66e:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 800b672:	428a      	cmp	r2, r1
 800b674:	d062      	beq.n	800b73c <HAL_SPI_Init+0x10c>
 800b676:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b67a:	428a      	cmp	r2, r1
 800b67c:	d05e      	beq.n	800b73c <HAL_SPI_Init+0x10c>
 800b67e:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b680:	d8d9      	bhi.n	800b636 <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800b682:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800b686:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b68a:	b923      	cbnz	r3, 800b696 <HAL_SPI_Init+0x66>
    hspi->Lock = HAL_UNLOCKED;
 800b68c:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800b690:	4620      	mov	r0, r4
 800b692:	f7f7 ff3d 	bl	8003510 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800b696:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800b698:	6822      	ldr	r2, [r4, #0]
 800b69a:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 800b69c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800b6a0:	6813      	ldr	r3, [r2, #0]
 800b6a2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800b6a4:	f023 0301 	bic.w	r3, r3, #1
 800b6a8:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800b6aa:	69a3      	ldr	r3, [r4, #24]
 800b6ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b6b0:	d107      	bne.n	800b6c2 <HAL_SPI_Init+0x92>
 800b6b2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800b6b6:	d104      	bne.n	800b6c2 <HAL_SPI_Init+0x92>
 800b6b8:	b91d      	cbnz	r5, 800b6c2 <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b6ba:	6810      	ldr	r0, [r2, #0]
 800b6bc:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800b6c0:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b6c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800b6c4:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b6c6:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800b6c8:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b6ca:	4330      	orrs	r0, r6
 800b6cc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800b6ce:	4330      	orrs	r0, r6
 800b6d0:	68e6      	ldr	r6, [r4, #12]
 800b6d2:	4330      	orrs	r0, r6
 800b6d4:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800b6d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b6d8:	4303      	orrs	r3, r0
 800b6da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b6dc:	4303      	orrs	r3, r0
 800b6de:	6920      	ldr	r0, [r4, #16]
 800b6e0:	4303      	orrs	r3, r0
 800b6e2:	6960      	ldr	r0, [r4, #20]
 800b6e4:	4303      	orrs	r3, r0
 800b6e6:	6a20      	ldr	r0, [r4, #32]
 800b6e8:	4303      	orrs	r3, r0
 800b6ea:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b6ec:	4303      	orrs	r3, r0
 800b6ee:	68a0      	ldr	r0, [r4, #8]
 800b6f0:	4303      	orrs	r3, r0
 800b6f2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b6f4:	4303      	orrs	r3, r0
 800b6f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6f8:	4303      	orrs	r3, r0
 800b6fa:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b6fc:	b959      	cbnz	r1, 800b716 <HAL_SPI_Init+0xe6>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b6fe:	6893      	ldr	r3, [r2, #8]
 800b700:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800b704:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b708:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b70a:	6893      	ldr	r3, [r2, #8]
 800b70c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b710:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b714:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b716:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b718:	f023 0301 	bic.w	r3, r3, #1
 800b71c:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b71e:	024b      	lsls	r3, r1, #9
 800b720:	d505      	bpl.n	800b72e <HAL_SPI_Init+0xfe>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b722:	68d3      	ldr	r3, [r2, #12]
 800b724:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b726:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b72a:	430b      	orrs	r3, r1
 800b72c:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b72e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800b730:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b732:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b736:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 800b73a:	e77d      	b.n	800b638 <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b73c:	2b10      	cmp	r3, #16
 800b73e:	e79f      	b.n	800b680 <HAL_SPI_Init+0x50>
 800b740:	40013000 	.word	0x40013000

0800b744 <HAL_SPI_TransmitReceive_DMA>:
{
 800b744:	b570      	push	{r4, r5, r6, lr}
 800b746:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800b748:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 800b74c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d012      	beq.n	800b778 <HAL_SPI_TransmitReceive_DMA+0x34>
 800b752:	2301      	movs	r3, #1
 800b754:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tmp_state   = hspi->State;
 800b758:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 800b75c:	6840      	ldr	r0, [r0, #4]
  tmp_state   = hspi->State;
 800b75e:	b2db      	uxtb	r3, r3
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 800b760:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800b764:	d103      	bne.n	800b76e <HAL_SPI_TransmitReceive_DMA+0x2a>
 800b766:	68a0      	ldr	r0, [r4, #8]
 800b768:	b908      	cbnz	r0, 800b76e <HAL_SPI_TransmitReceive_DMA+0x2a>
 800b76a:	2b04      	cmp	r3, #4
 800b76c:	d006      	beq.n	800b77c <HAL_SPI_TransmitReceive_DMA+0x38>
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d004      	beq.n	800b77c <HAL_SPI_TransmitReceive_DMA+0x38>
    __HAL_UNLOCK(hspi);
 800b772:	2300      	movs	r3, #0
 800b774:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800b778:	2002      	movs	r0, #2
 800b77a:	e004      	b.n	800b786 <HAL_SPI_TransmitReceive_DMA+0x42>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b77c:	b921      	cbnz	r1, 800b788 <HAL_SPI_TransmitReceive_DMA+0x44>
    __HAL_UNLOCK(hspi);
 800b77e:	2300      	movs	r3, #0
    return errorcode;
 800b780:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800b782:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800b786:	bd70      	pop	{r4, r5, r6, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b788:	2a00      	cmp	r2, #0
 800b78a:	d0f8      	beq.n	800b77e <HAL_SPI_TransmitReceive_DMA+0x3a>
 800b78c:	2d00      	cmp	r5, #0
 800b78e:	d0f6      	beq.n	800b77e <HAL_SPI_TransmitReceive_DMA+0x3a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b790:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800b794:	2b04      	cmp	r3, #4
 800b796:	d002      	beq.n	800b79e <HAL_SPI_TransmitReceive_DMA+0x5a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b798:	2305      	movs	r3, #5
 800b79a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b79e:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b7a0:	65e1      	str	r1, [r4, #92]	; 0x5c
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b7a2:	6821      	ldr	r1, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b7a4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b7a8:	68e6      	ldr	r6, [r4, #12]
  hspi->TxXferCount = Size;
 800b7aa:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->RxXferCount = Size;
 800b7ae:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b7b2:	2e0f      	cmp	r6, #15
 800b7b4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  hspi->TxXferSize  = Size;
 800b7b6:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b7ba:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b7bc:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->TxISR       = NULL;
 800b7c0:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b7c4:	688b      	ldr	r3, [r1, #8]
 800b7c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b7ca:	608b      	str	r3, [r1, #8]
 800b7cc:	6983      	ldr	r3, [r0, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b7ce:	d924      	bls.n	800b81a <HAL_SPI_TransmitReceive_DMA+0xd6>
 800b7d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7d4:	d1d3      	bne.n	800b77e <HAL_SPI_TransmitReceive_DMA+0x3a>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b7d6:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800b7da:	3130      	adds	r1, #48	; 0x30
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b7dc:	2b04      	cmp	r3, #4
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b7de:	bf0b      	itete	eq
 800b7e0:	4b48      	ldreq	r3, [pc, #288]	; (800b904 <HAL_SPI_TransmitReceive_DMA+0x1c0>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b7e2:	4b49      	ldrne	r3, [pc, #292]	; (800b908 <HAL_SPI_TransmitReceive_DMA+0x1c4>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b7e4:	6403      	streq	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b7e6:	6403      	strne	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b7e8:	bf0c      	ite	eq
 800b7ea:	4b48      	ldreq	r3, [pc, #288]	; (800b90c <HAL_SPI_TransmitReceive_DMA+0x1c8>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b7ec:	4b48      	ldrne	r3, [pc, #288]	; (800b910 <HAL_SPI_TransmitReceive_DMA+0x1cc>)
 800b7ee:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b7f0:	4b48      	ldr	r3, [pc, #288]	; (800b914 <HAL_SPI_TransmitReceive_DMA+0x1d0>)
 800b7f2:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800b7f8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b7fc:	f7fb ff40 	bl	8007680 <HAL_DMA_Start_IT>
 800b800:	4603      	mov	r3, r0
 800b802:	2800      	cmp	r0, #0
 800b804:	d045      	beq.n	800b892 <HAL_SPI_TransmitReceive_DMA+0x14e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b806:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b80a:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b80c:	f043 0310 	orr.w	r3, r3, #16
 800b810:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b814:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
 800b818:	e7b5      	b.n	800b786 <HAL_SPI_TransmitReceive_DMA+0x42>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b81a:	2e07      	cmp	r6, #7
 800b81c:	d914      	bls.n	800b848 <HAL_SPI_TransmitReceive_DMA+0x104>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b81e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b822:	d002      	beq.n	800b82a <HAL_SPI_TransmitReceive_DMA+0xe6>
 800b824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b828:	d1a9      	bne.n	800b77e <HAL_SPI_TransmitReceive_DMA+0x3a>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b82a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
 800b82c:	69b6      	ldr	r6, [r6, #24]
 800b82e:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 800b832:	d105      	bne.n	800b840 <HAL_SPI_TransmitReceive_DMA+0xfc>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b834:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800b838:	3601      	adds	r6, #1
 800b83a:	0876      	lsrs	r6, r6, #1
 800b83c:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b844:	d1c7      	bne.n	800b7d6 <HAL_SPI_TransmitReceive_DMA+0x92>
 800b846:	e00d      	b.n	800b864 <HAL_SPI_TransmitReceive_DMA+0x120>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b848:	6fa6      	ldr	r6, [r4, #120]	; 0x78
 800b84a:	69b6      	ldr	r6, [r6, #24]
 800b84c:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800b850:	d10d      	bne.n	800b86e <HAL_SPI_TransmitReceive_DMA+0x12a>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b852:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800b856:	3601      	adds	r6, #1
 800b858:	0876      	lsrs	r6, r6, #1
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b85a:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b85e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b862:	d10c      	bne.n	800b87e <HAL_SPI_TransmitReceive_DMA+0x13a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b864:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b868:	3301      	adds	r3, #1
 800b86a:	085b      	lsrs	r3, r3, #1
 800b86c:	e00e      	b.n	800b88c <HAL_SPI_TransmitReceive_DMA+0x148>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b86e:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 800b872:	d1f4      	bne.n	800b85e <HAL_SPI_TransmitReceive_DMA+0x11a>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b874:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800b878:	3603      	adds	r6, #3
 800b87a:	08b6      	lsrs	r6, r6, #2
 800b87c:	e7ed      	b.n	800b85a <HAL_SPI_TransmitReceive_DMA+0x116>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b87e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b882:	d1a8      	bne.n	800b7d6 <HAL_SPI_TransmitReceive_DMA+0x92>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b884:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b888:	3303      	adds	r3, #3
 800b88a:	089b      	lsrs	r3, r3, #2
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b88c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800b890:	e7a1      	b.n	800b7d6 <HAL_SPI_TransmitReceive_DMA+0x92>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b892:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b894:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b896:	6891      	ldr	r1, [r2, #8]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800b898:	3220      	adds	r2, #32
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b89a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800b89e:	f842 1c18 	str.w	r1, [r2, #-24]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800b8a2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b8a4:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b8a8:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800b8ac:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b8b0:	f7fb fee6 	bl	8007680 <HAL_DMA_Start_IT>
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d1a6      	bne.n	800b806 <HAL_SPI_TransmitReceive_DMA+0xc2>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b8b8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b8ba:	6822      	ldr	r2, [r4, #0]
 800b8bc:	69db      	ldr	r3, [r3, #28]
 800b8be:	4916      	ldr	r1, [pc, #88]	; (800b918 <HAL_SPI_TransmitReceive_DMA+0x1d4>)
 800b8c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8c4:	d11a      	bne.n	800b8fc <HAL_SPI_TransmitReceive_DMA+0x1b8>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b8c6:	6855      	ldr	r5, [r2, #4]
 800b8c8:	400d      	ands	r5, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b8ca:	6055      	str	r5, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b8cc:	6893      	ldr	r3, [r2, #8]
 800b8ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8d2:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800b8d4:	6913      	ldr	r3, [r2, #16]
 800b8d6:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800b8da:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800b8dc:	6813      	ldr	r3, [r2, #0]
 800b8de:	f043 0301 	orr.w	r3, r3, #1
 800b8e2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b8e4:	6863      	ldr	r3, [r4, #4]
 800b8e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b8ea:	d103      	bne.n	800b8f4 <HAL_SPI_TransmitReceive_DMA+0x1b0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b8ec:	6813      	ldr	r3, [r2, #0]
 800b8ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b8f2:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 800b8fa:	e744      	b.n	800b786 <HAL_SPI_TransmitReceive_DMA+0x42>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b8fc:	6853      	ldr	r3, [r2, #4]
 800b8fe:	400b      	ands	r3, r1
 800b900:	431d      	orrs	r5, r3
 800b902:	e7e2      	b.n	800b8ca <HAL_SPI_TransmitReceive_DMA+0x186>
 800b904:	0800baed 	.word	0x0800baed
 800b908:	0800baf9 	.word	0x0800baf9
 800b90c:	0800ba99 	.word	0x0800ba99
 800b910:	0800bac3 	.word	0x0800bac3
 800b914:	0800bb05 	.word	0x0800bb05
 800b918:	ffff0000 	.word	0xffff0000

0800b91c <HAL_SPI_Receive_DMA>:
{
 800b91c:	b570      	push	{r4, r5, r6, lr}
 800b91e:	4615      	mov	r5, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b920:	6882      	ldr	r2, [r0, #8]
{
 800b922:	4604      	mov	r4, r0
 800b924:	460e      	mov	r6, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b926:	b962      	cbnz	r2, 800b942 <HAL_SPI_Receive_DMA+0x26>
 800b928:	6843      	ldr	r3, [r0, #4]
 800b92a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b92e:	d108      	bne.n	800b942 <HAL_SPI_Receive_DMA+0x26>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b930:	2304      	movs	r3, #4
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800b932:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b934:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800b938:	462b      	mov	r3, r5
}
 800b93a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800b93e:	f7ff bf01 	b.w	800b744 <HAL_SPI_TransmitReceive_DMA>
  __HAL_LOCK(hspi);
 800b942:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800b946:	2b01      	cmp	r3, #1
 800b948:	d009      	beq.n	800b95e <HAL_SPI_Receive_DMA+0x42>
 800b94a:	2301      	movs	r3, #1
 800b94c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800b950:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800b954:	2b01      	cmp	r3, #1
 800b956:	d004      	beq.n	800b962 <HAL_SPI_Receive_DMA+0x46>
    __HAL_UNLOCK(hspi);
 800b958:	2300      	movs	r3, #0
 800b95a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800b95e:	2002      	movs	r0, #2
 800b960:	e004      	b.n	800b96c <HAL_SPI_Receive_DMA+0x50>
  if ((pData == NULL) || (Size == 0UL))
 800b962:	b926      	cbnz	r6, 800b96e <HAL_SPI_Receive_DMA+0x52>
    __HAL_UNLOCK(hspi);
 800b964:	2300      	movs	r3, #0
    return errorcode;
 800b966:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800b968:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800b96c:	bd70      	pop	{r4, r5, r6, pc}
  if ((pData == NULL) || (Size == 0UL))
 800b96e:	2d00      	cmp	r5, #0
 800b970:	d0f8      	beq.n	800b964 <HAL_SPI_Receive_DMA+0x48>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b972:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b974:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b978:	6666      	str	r6, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b97a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b97e:	f04f 0300 	mov.w	r3, #0
  hspi->RxXferSize  = Size;
 800b982:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b986:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b98a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 800b98e:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b992:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 800b996:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b99a:	d104      	bne.n	800b9a6 <HAL_SPI_Receive_DMA+0x8a>
    SPI_1LINE_RX(hspi);
 800b99c:	6822      	ldr	r2, [r4, #0]
 800b99e:	6813      	ldr	r3, [r2, #0]
 800b9a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9a4:	6013      	str	r3, [r2, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b9a6:	68e3      	ldr	r3, [r4, #12]
 800b9a8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b9aa:	2b0f      	cmp	r3, #15
 800b9ac:	d90b      	bls.n	800b9c6 <HAL_SPI_Receive_DMA+0xaa>
 800b9ae:	6982      	ldr	r2, [r0, #24]
 800b9b0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800b9b4:	d1d6      	bne.n	800b964 <HAL_SPI_Receive_DMA+0x48>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b9b6:	6982      	ldr	r2, [r0, #24]
 800b9b8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b9bc:	d005      	beq.n	800b9ca <HAL_SPI_Receive_DMA+0xae>
 800b9be:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800b9c2:	d1cf      	bne.n	800b964 <HAL_SPI_Receive_DMA+0x48>
 800b9c4:	e001      	b.n	800b9ca <HAL_SPI_Receive_DMA+0xae>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b9c6:	2b07      	cmp	r3, #7
 800b9c8:	d8f5      	bhi.n	800b9b6 <HAL_SPI_Receive_DMA+0x9a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b9ca:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b9cc:	2b07      	cmp	r3, #7
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b9ce:	688a      	ldr	r2, [r1, #8]
 800b9d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b9d4:	608a      	str	r2, [r1, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b9d6:	d812      	bhi.n	800b9fe <HAL_SPI_Receive_DMA+0xe2>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b9d8:	6983      	ldr	r3, [r0, #24]
 800b9da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9de:	d104      	bne.n	800b9ea <HAL_SPI_Receive_DMA+0xce>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b9e0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	085b      	lsrs	r3, r3, #1
 800b9e8:	e006      	b.n	800b9f8 <HAL_SPI_Receive_DMA+0xdc>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b9ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9ee:	d10c      	bne.n	800ba0a <HAL_SPI_Receive_DMA+0xee>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b9f0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b9f4:	3303      	adds	r3, #3
 800b9f6:	089b      	lsrs	r3, r3, #2
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b9f8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800b9fc:	e005      	b.n	800ba0a <HAL_SPI_Receive_DMA+0xee>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b9fe:	2b0f      	cmp	r3, #15
 800ba00:	d803      	bhi.n	800ba0a <HAL_SPI_Receive_DMA+0xee>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ba02:	6983      	ldr	r3, [r0, #24]
 800ba04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba08:	d0ea      	beq.n	800b9e0 <HAL_SPI_Receive_DMA+0xc4>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ba0a:	4b1e      	ldr	r3, [pc, #120]	; (800ba84 <HAL_SPI_Receive_DMA+0x168>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800ba0c:	4632      	mov	r2, r6
 800ba0e:	3130      	adds	r1, #48	; 0x30
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ba10:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800ba12:	4b1d      	ldr	r3, [pc, #116]	; (800ba88 <HAL_SPI_Receive_DMA+0x16c>)
 800ba14:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ba16:	4b1d      	ldr	r3, [pc, #116]	; (800ba8c <HAL_SPI_Receive_DMA+0x170>)
 800ba18:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800ba1e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ba22:	f7fb fe2d 	bl	8007680 <HAL_DMA_Start_IT>
 800ba26:	b148      	cbz	r0, 800ba3c <HAL_SPI_Receive_DMA+0x120>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ba28:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ba2c:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ba2e:	f043 0310 	orr.w	r3, r3, #16
 800ba32:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ba36:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
    return errorcode;
 800ba3a:	e797      	b.n	800b96c <HAL_SPI_Receive_DMA+0x50>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ba3c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ba3e:	6821      	ldr	r1, [r4, #0]
 800ba40:	69db      	ldr	r3, [r3, #28]
 800ba42:	4a13      	ldr	r2, [pc, #76]	; (800ba90 <HAL_SPI_Receive_DMA+0x174>)
 800ba44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ba48:	684b      	ldr	r3, [r1, #4]
 800ba4a:	ea03 0302 	and.w	r3, r3, r2
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ba4e:	bf18      	it	ne
 800ba50:	432b      	orrne	r3, r5
 800ba52:	604b      	str	r3, [r1, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ba54:	688b      	ldr	r3, [r1, #8]
 800ba56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba5a:	608b      	str	r3, [r1, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800ba5c:	690b      	ldr	r3, [r1, #16]
 800ba5e:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800ba62:	610b      	str	r3, [r1, #16]
  __HAL_SPI_ENABLE(hspi);
 800ba64:	680b      	ldr	r3, [r1, #0]
 800ba66:	f043 0301 	orr.w	r3, r3, #1
 800ba6a:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ba6c:	6863      	ldr	r3, [r4, #4]
 800ba6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba72:	d103      	bne.n	800ba7c <HAL_SPI_Receive_DMA+0x160>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ba74:	680b      	ldr	r3, [r1, #0]
 800ba76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ba7a:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(hspi);
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800ba82:	e773      	b.n	800b96c <HAL_SPI_Receive_DMA+0x50>
 800ba84:	0800baed 	.word	0x0800baed
 800ba88:	0800ba99 	.word	0x0800ba99
 800ba8c:	0800bb05 	.word	0x0800bb05
 800ba90:	ffff0000 	.word	0xffff0000

0800ba94 <HAL_SPI_TxCpltCallback>:
 800ba94:	4770      	bx	lr

0800ba96 <HAL_SPI_RxCpltCallback>:
 800ba96:	4770      	bx	lr

0800ba98 <SPI_DMAReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba98:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800ba9a:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ba9c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800baa0:	2b07      	cmp	r3, #7
 800baa2:	d006      	beq.n	800bab2 <SPI_DMAReceiveCplt+0x1a>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800baa4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800baa6:	69db      	ldr	r3, [r3, #28]
 800baa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baac:	d102      	bne.n	800bab4 <SPI_DMAReceiveCplt+0x1c>
      HAL_SPI_RxCpltCallback(hspi);
 800baae:	f7ff fff2 	bl	800ba96 <HAL_SPI_RxCpltCallback>
}
 800bab2:	bd08      	pop	{r3, pc}
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800bab4:	6802      	ldr	r2, [r0, #0]
 800bab6:	6913      	ldr	r3, [r2, #16]
 800bab8:	f043 0308 	orr.w	r3, r3, #8
 800babc:	6113      	str	r3, [r2, #16]
}
 800babe:	e7f8      	b.n	800bab2 <SPI_DMAReceiveCplt+0x1a>

0800bac0 <HAL_SPI_TxRxCpltCallback>:
 800bac0:	4770      	bx	lr

0800bac2 <SPI_DMATransmitReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bac2:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800bac4:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800bac6:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800baca:	2b07      	cmp	r3, #7
 800bacc:	d006      	beq.n	800badc <SPI_DMATransmitReceiveCplt+0x1a>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800bace:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800bad0:	69db      	ldr	r3, [r3, #28]
 800bad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bad6:	d102      	bne.n	800bade <SPI_DMATransmitReceiveCplt+0x1c>
      HAL_SPI_TxRxCpltCallback(hspi);
 800bad8:	f7ff fff2 	bl	800bac0 <HAL_SPI_TxRxCpltCallback>
}
 800badc:	bd08      	pop	{r3, pc}
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800bade:	6802      	ldr	r2, [r0, #0]
 800bae0:	6913      	ldr	r3, [r2, #16]
 800bae2:	f043 0308 	orr.w	r3, r3, #8
 800bae6:	6113      	str	r3, [r2, #16]
}
 800bae8:	e7f8      	b.n	800badc <SPI_DMATransmitReceiveCplt+0x1a>

0800baea <HAL_SPI_RxHalfCpltCallback>:
 800baea:	4770      	bx	lr

0800baec <SPI_DMAHalfReceiveCplt>:
{
 800baec:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800baee:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800baf0:	f7ff fffb 	bl	800baea <HAL_SPI_RxHalfCpltCallback>
}
 800baf4:	bd08      	pop	{r3, pc}

0800baf6 <HAL_SPI_TxRxHalfCpltCallback>:
 800baf6:	4770      	bx	lr

0800baf8 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800baf8:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800bafa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800bafc:	f7ff fffb 	bl	800baf6 <HAL_SPI_TxRxHalfCpltCallback>
}
 800bb00:	bd08      	pop	{r3, pc}

0800bb02 <HAL_SPI_ErrorCallback>:
 800bb02:	4770      	bx	lr

0800bb04 <SPI_DMAError>:
{
 800bb04:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb06:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bb08:	f7fc fbe6 	bl	80082d8 <HAL_DMA_GetError>
 800bb0c:	2802      	cmp	r0, #2
 800bb0e:	d00d      	beq.n	800bb2c <SPI_DMAError+0x28>
    SPI_CloseTransfer(hspi);
 800bb10:	4620      	mov	r0, r4
 800bb12:	f7ff fd37 	bl	800b584 <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bb16:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800bb1a:	f043 0310 	orr.w	r3, r3, #16
 800bb1e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800bb22:	2301      	movs	r3, #1
 800bb24:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800bb28:	f7ff ffeb 	bl	800bb02 <HAL_SPI_ErrorCallback>
}
 800bb2c:	bd10      	pop	{r4, pc}
	...

0800bb30 <HAL_SPI_IRQHandler>:
{
 800bb30:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t itsource = hspi->Instance->IER;
 800bb34:	6807      	ldr	r7, [r0, #0]
{
 800bb36:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800bb38:	f8d7 8010 	ldr.w	r8, [r7, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800bb3c:	f8d7 9014 	ldr.w	r9, [r7, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800bb40:	68be      	ldr	r6, [r7, #8]
  uint32_t trigger  = itsource & itflag;
 800bb42:	ea08 0a09 	and.w	sl, r8, r9
  HAL_SPI_StateTypeDef State = hspi->State;
 800bb46:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800bb4a:	f00a 0364 	and.w	r3, sl, #100	; 0x64
  HAL_SPI_StateTypeDef State = hspi->State;
 800bb4e:	b2ed      	uxtb	r5, r5
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800bb50:	2b04      	cmp	r3, #4
 800bb52:	d118      	bne.n	800bb86 <HAL_SPI_IRQHandler+0x56>
    hspi->TxISR(hspi);
 800bb54:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800bb56:	4798      	blx	r3
    hspi->RxISR(hspi);
 800bb58:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	4798      	blx	r3
    handled = 1UL;
 800bb5e:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800bb60:	f00a 0b45 	and.w	fp, sl, #69	; 0x45
 800bb64:	f1bb 0f01 	cmp.w	fp, #1
 800bb68:	d103      	bne.n	800bb72 <HAL_SPI_IRQHandler+0x42>
    hspi->RxISR(hspi);
 800bb6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	4798      	blx	r3
    handled = 1UL;
 800bb70:	465b      	mov	r3, fp
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800bb72:	f00a 0226 	and.w	r2, sl, #38	; 0x26
 800bb76:	2a02      	cmp	r2, #2
 800bb78:	d107      	bne.n	800bb8a <HAL_SPI_IRQHandler+0x5a>
    hspi->TxISR(hspi);
 800bb7a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800bb7c:	4620      	mov	r0, r4
}
 800bb7e:	b001      	add	sp, #4
 800bb80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    hspi->TxISR(hspi);
 800bb84:	4718      	bx	r3
  uint32_t handled  = 0UL;
 800bb86:	2300      	movs	r3, #0
 800bb88:	e7ea      	b.n	800bb60 <HAL_SPI_IRQHandler+0x30>
  if (handled != 0UL)
 800bb8a:	bb03      	cbnz	r3, 800bbce <HAL_SPI_IRQHandler+0x9e>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800bb8c:	f01a 0f08 	tst.w	sl, #8
 800bb90:	d065      	beq.n	800bc5e <HAL_SPI_IRQHandler+0x12e>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bb92:	6823      	ldr	r3, [r4, #0]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800bb94:	f416 4f40 	tst.w	r6, #49152	; 0xc000
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bb98:	699a      	ldr	r2, [r3, #24]
 800bb9a:	f042 0208 	orr.w	r2, r2, #8
 800bb9e:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bba0:	699a      	ldr	r2, [r3, #24]
 800bba2:	f042 0210 	orr.w	r2, r2, #16
 800bba6:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800bba8:	699a      	ldr	r2, [r3, #24]
 800bbaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbae:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800bbb0:	691a      	ldr	r2, [r3, #16]
 800bbb2:	f022 0208 	bic.w	r2, r2, #8
 800bbb6:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800bbb8:	d00f      	beq.n	800bbda <HAL_SPI_IRQHandler+0xaa>
 800bbba:	2d04      	cmp	r5, #4
 800bbbc:	d00a      	beq.n	800bbd4 <HAL_SPI_IRQHandler+0xa4>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800bbbe:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800bbc0:	69d2      	ldr	r2, [r2, #28]
 800bbc2:	b152      	cbz	r2, 800bbda <HAL_SPI_IRQHandler+0xaa>
 800bbc4:	2d03      	cmp	r5, #3
 800bbc6:	d105      	bne.n	800bbd4 <HAL_SPI_IRQHandler+0xa4>
      HAL_SPI_TxCpltCallback(hspi);
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f7ff ff63 	bl	800ba94 <HAL_SPI_TxCpltCallback>
}
 800bbce:	b001      	add	sp, #4
 800bbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800bbd4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800bbd6:	69d2      	ldr	r2, [r2, #28]
 800bbd8:	bb92      	cbnz	r2, 800bc40 <HAL_SPI_IRQHandler+0x110>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800bbe0:	d01b      	beq.n	800bc1a <HAL_SPI_IRQHandler+0xea>
      SPI_CloseTransfer(hspi);
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f7ff fcce 	bl	800b584 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bbee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800bbf2:	b32b      	cbz	r3, 800bc40 <HAL_SPI_IRQHandler+0x110>
        HAL_SPI_ErrorCallback(hspi);
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f7ff ff84 	bl	800bb02 <HAL_SPI_ErrorCallback>
 800bbfa:	e7e8      	b.n	800bbce <HAL_SPI_IRQHandler+0x9e>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bbfc:	68e2      	ldr	r2, [r4, #12]
 800bbfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc00:	2a0f      	cmp	r2, #15
 800bc02:	d910      	bls.n	800bc26 <HAL_SPI_IRQHandler+0xf6>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bc04:	6822      	ldr	r2, [r4, #0]
 800bc06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bc08:	f843 2b04 	str.w	r2, [r3], #4
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800bc0c:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800bc0e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800bc12:	3b01      	subs	r3, #1
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800bc1a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1eb      	bne.n	800bbfc <HAL_SPI_IRQHandler+0xcc>
 800bc24:	e7dd      	b.n	800bbe2 <HAL_SPI_IRQHandler+0xb2>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc26:	2a07      	cmp	r2, #7
 800bc28:	d903      	bls.n	800bc32 <HAL_SPI_IRQHandler+0x102>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc2a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800bc2c:	f823 2b02 	strh.w	r2, [r3], #2
 800bc30:	e7ec      	b.n	800bc0c <HAL_SPI_IRQHandler+0xdc>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bc32:	6822      	ldr	r2, [r4, #0]
 800bc34:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800bc38:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800bc3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	e7e5      	b.n	800bc0c <HAL_SPI_IRQHandler+0xdc>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800bc40:	2d05      	cmp	r5, #5
 800bc42:	d103      	bne.n	800bc4c <HAL_SPI_IRQHandler+0x11c>
      HAL_SPI_TxRxCpltCallback(hspi);
 800bc44:	4620      	mov	r0, r4
 800bc46:	f7ff ff3b 	bl	800bac0 <HAL_SPI_TxRxCpltCallback>
 800bc4a:	e7c0      	b.n	800bbce <HAL_SPI_IRQHandler+0x9e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800bc4c:	2d04      	cmp	r5, #4
 800bc4e:	d103      	bne.n	800bc58 <HAL_SPI_IRQHandler+0x128>
      HAL_SPI_RxCpltCallback(hspi);
 800bc50:	4620      	mov	r0, r4
 800bc52:	f7ff ff20 	bl	800ba96 <HAL_SPI_RxCpltCallback>
 800bc56:	e7ba      	b.n	800bbce <HAL_SPI_IRQHandler+0x9e>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800bc58:	2d03      	cmp	r5, #3
 800bc5a:	d1b8      	bne.n	800bbce <HAL_SPI_IRQHandler+0x9e>
 800bc5c:	e7b4      	b.n	800bbc8 <HAL_SPI_IRQHandler+0x98>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800bc5e:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800bc62:	d008      	beq.n	800bc76 <HAL_SPI_IRQHandler+0x146>
 800bc64:	f018 0f08 	tst.w	r8, #8
 800bc68:	d005      	beq.n	800bc76 <HAL_SPI_IRQHandler+0x146>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800bc6a:	6822      	ldr	r2, [r4, #0]
 800bc6c:	6993      	ldr	r3, [r2, #24]
 800bc6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bc72:	6193      	str	r3, [r2, #24]
    return;
 800bc74:	e7ab      	b.n	800bbce <HAL_SPI_IRQHandler+0x9e>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800bc76:	f41a 7f58 	tst.w	sl, #864	; 0x360
 800bc7a:	d0a8      	beq.n	800bbce <HAL_SPI_IRQHandler+0x9e>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800bc7c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800bc80:	d00a      	beq.n	800bc98 <HAL_SPI_IRQHandler+0x168>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bc82:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc86:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bc88:	f043 0304 	orr.w	r3, r3, #4
 800bc8c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc90:	6993      	ldr	r3, [r2, #24]
 800bc92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc96:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800bc98:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800bc9c:	d00a      	beq.n	800bcb4 <HAL_SPI_IRQHandler+0x184>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bc9e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bca2:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bca4:	f043 0301 	orr.w	r3, r3, #1
 800bca8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bcac:	6993      	ldr	r3, [r2, #24]
 800bcae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bcb2:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800bcb4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bcb8:	d00a      	beq.n	800bcd0 <HAL_SPI_IRQHandler+0x1a0>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bcba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bcbe:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bcc0:	f043 0308 	orr.w	r3, r3, #8
 800bcc4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bcc8:	6993      	ldr	r3, [r2, #24]
 800bcca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcce:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800bcd0:	f01a 0f20 	tst.w	sl, #32
 800bcd4:	d00a      	beq.n	800bcec <HAL_SPI_IRQHandler+0x1bc>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bcd6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bcda:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bcdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bce0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bce4:	6993      	ldr	r3, [r2, #24]
 800bce6:	f043 0320 	orr.w	r3, r3, #32
 800bcea:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bcec:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f43f af6c 	beq.w	800bbce <HAL_SPI_IRQHandler+0x9e>
      __HAL_SPI_DISABLE(hspi);
 800bcf6:	6823      	ldr	r3, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800bcf8:	f406 4640 	and.w	r6, r6, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800bcfc:	681a      	ldr	r2, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800bcfe:	f5b6 4f40 	cmp.w	r6, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800bd02:	f022 0201 	bic.w	r2, r2, #1
 800bd06:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800bd08:	691a      	ldr	r2, [r3, #16]
 800bd0a:	f422 725a 	bic.w	r2, r2, #872	; 0x368
 800bd0e:	f022 0203 	bic.w	r2, r2, #3
 800bd12:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800bd14:	d122      	bne.n	800bd5c <HAL_SPI_IRQHandler+0x22c>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bd16:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800bd18:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bd1a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bd1e:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800bd20:	b150      	cbz	r0, 800bd38 <HAL_SPI_IRQHandler+0x208>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bd22:	4b10      	ldr	r3, [pc, #64]	; (800bd64 <HAL_SPI_IRQHandler+0x234>)
 800bd24:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bd26:	f7fb ff7b 	bl	8007c20 <HAL_DMA_Abort_IT>
 800bd2a:	b128      	cbz	r0, 800bd38 <HAL_SPI_IRQHandler+0x208>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bd2c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800bd30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd34:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800bd38:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	f43f af47 	beq.w	800bbce <HAL_SPI_IRQHandler+0x9e>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bd40:	4b08      	ldr	r3, [pc, #32]	; (800bd64 <HAL_SPI_IRQHandler+0x234>)
 800bd42:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bd44:	f7fb ff6c 	bl	8007c20 <HAL_DMA_Abort_IT>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	f43f af40 	beq.w	800bbce <HAL_SPI_IRQHandler+0x9e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bd4e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800bd52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd56:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800bd5a:	e738      	b.n	800bbce <HAL_SPI_IRQHandler+0x9e>
        hspi->State = HAL_SPI_STATE_READY;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800bd62:	e747      	b.n	800bbf4 <HAL_SPI_IRQHandler+0xc4>
 800bd64:	0800bd69 	.word	0x0800bd69

0800bd68 <SPI_DMAAbortOnError>:
{
 800bd68:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd6a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800bd72:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800bd76:	2301      	movs	r3, #1
 800bd78:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800bd7c:	f7ff fec1 	bl	800bb02 <HAL_SPI_ErrorCallback>
}
 800bd80:	bd08      	pop	{r3, pc}

0800bd82 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800bd82:	4770      	bx	lr

0800bd84 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd84:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d115      	bne.n	800bdb8 <HAL_TIM_Base_Start_IT+0x34>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd92:	6803      	ldr	r3, [r0, #0]
 800bd94:	68da      	ldr	r2, [r3, #12]
 800bd96:	f042 0201 	orr.w	r2, r2, #1
 800bd9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd9c:	4a07      	ldr	r2, [pc, #28]	; (800bdbc <HAL_TIM_Base_Start_IT+0x38>)
 800bd9e:	6899      	ldr	r1, [r3, #8]
 800bda0:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bda2:	2a06      	cmp	r2, #6
 800bda4:	d006      	beq.n	800bdb4 <HAL_TIM_Base_Start_IT+0x30>
 800bda6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800bdaa:	d003      	beq.n	800bdb4 <HAL_TIM_Base_Start_IT+0x30>
  {
    __HAL_TIM_ENABLE(htim);
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	f042 0201 	orr.w	r2, r2, #1
 800bdb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bdb4:	2000      	movs	r0, #0
}
 800bdb6:	4770      	bx	lr
    return HAL_ERROR;
 800bdb8:	2001      	movs	r0, #1
 800bdba:	4770      	bx	lr
 800bdbc:	00010007 	.word	0x00010007

0800bdc0 <HAL_TIM_OC_DelayElapsedCallback>:
 800bdc0:	4770      	bx	lr

0800bdc2 <HAL_TIM_IC_CaptureCallback>:
 800bdc2:	4770      	bx	lr

0800bdc4 <HAL_TIM_PWM_PulseFinishedCallback>:
 800bdc4:	4770      	bx	lr

0800bdc6 <HAL_TIM_TriggerCallback>:
 800bdc6:	4770      	bx	lr

0800bdc8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bdc8:	6803      	ldr	r3, [r0, #0]
 800bdca:	691a      	ldr	r2, [r3, #16]
 800bdcc:	0791      	lsls	r1, r2, #30
{
 800bdce:	b510      	push	{r4, lr}
 800bdd0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bdd2:	d50f      	bpl.n	800bdf4 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bdd4:	68da      	ldr	r2, [r3, #12]
 800bdd6:	0792      	lsls	r2, r2, #30
 800bdd8:	d50c      	bpl.n	800bdf4 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bdda:	f06f 0202 	mvn.w	r2, #2
 800bdde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bde0:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bde2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bde4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bde6:	0799      	lsls	r1, r3, #30
 800bde8:	f000 8085 	beq.w	800bef6 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bdec:	f7ff ffe9 	bl	800bdc2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bdf4:	6823      	ldr	r3, [r4, #0]
 800bdf6:	691a      	ldr	r2, [r3, #16]
 800bdf8:	0752      	lsls	r2, r2, #29
 800bdfa:	d510      	bpl.n	800be1e <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bdfc:	68da      	ldr	r2, [r3, #12]
 800bdfe:	0750      	lsls	r0, r2, #29
 800be00:	d50d      	bpl.n	800be1e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be02:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be0a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be0c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be0e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be10:	f413 7f40 	tst.w	r3, #768	; 0x300
 800be14:	d075      	beq.n	800bf02 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800be16:	f7ff ffd4 	bl	800bdc2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be1a:	2300      	movs	r3, #0
 800be1c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800be1e:	6823      	ldr	r3, [r4, #0]
 800be20:	691a      	ldr	r2, [r3, #16]
 800be22:	0711      	lsls	r1, r2, #28
 800be24:	d50f      	bpl.n	800be46 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800be26:	68da      	ldr	r2, [r3, #12]
 800be28:	0712      	lsls	r2, r2, #28
 800be2a:	d50c      	bpl.n	800be46 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be2c:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be30:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be34:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be36:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be38:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be3a:	079b      	lsls	r3, r3, #30
 800be3c:	d067      	beq.n	800bf0e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800be3e:	f7ff ffc0 	bl	800bdc2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be42:	2300      	movs	r3, #0
 800be44:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800be46:	6823      	ldr	r3, [r4, #0]
 800be48:	691a      	ldr	r2, [r3, #16]
 800be4a:	06d0      	lsls	r0, r2, #27
 800be4c:	d510      	bpl.n	800be70 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800be4e:	68da      	ldr	r2, [r3, #12]
 800be50:	06d1      	lsls	r1, r2, #27
 800be52:	d50d      	bpl.n	800be70 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800be54:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be58:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800be5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be5c:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be5e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be60:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be62:	f413 7f40 	tst.w	r3, #768	; 0x300
 800be66:	d058      	beq.n	800bf1a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800be68:	f7ff ffab 	bl	800bdc2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be6c:	2300      	movs	r3, #0
 800be6e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be70:	6823      	ldr	r3, [r4, #0]
 800be72:	691a      	ldr	r2, [r3, #16]
 800be74:	07d2      	lsls	r2, r2, #31
 800be76:	d508      	bpl.n	800be8a <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be78:	68da      	ldr	r2, [r3, #12]
 800be7a:	07d0      	lsls	r0, r2, #31
 800be7c:	d505      	bpl.n	800be8a <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be7e:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be82:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be84:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800be86:	f7f7 fa59 	bl	800333c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be8a:	6823      	ldr	r3, [r4, #0]
 800be8c:	691a      	ldr	r2, [r3, #16]
 800be8e:	0611      	lsls	r1, r2, #24
 800be90:	d508      	bpl.n	800bea4 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be92:	68da      	ldr	r2, [r3, #12]
 800be94:	0612      	lsls	r2, r2, #24
 800be96:	d505      	bpl.n	800bea4 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be98:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be9c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be9e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800bea0:	f000 f8d9 	bl	800c056 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bea4:	6823      	ldr	r3, [r4, #0]
 800bea6:	691a      	ldr	r2, [r3, #16]
 800bea8:	05d0      	lsls	r0, r2, #23
 800beaa:	d508      	bpl.n	800bebe <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800beac:	68da      	ldr	r2, [r3, #12]
 800beae:	0611      	lsls	r1, r2, #24
 800beb0:	d505      	bpl.n	800bebe <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800beb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800beb6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800beb8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800beba:	f000 f8cd 	bl	800c058 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	691a      	ldr	r2, [r3, #16]
 800bec2:	0652      	lsls	r2, r2, #25
 800bec4:	d508      	bpl.n	800bed8 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bec6:	68da      	ldr	r2, [r3, #12]
 800bec8:	0650      	lsls	r0, r2, #25
 800beca:	d505      	bpl.n	800bed8 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800becc:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bed0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bed2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800bed4:	f7ff ff77 	bl	800bdc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bed8:	6823      	ldr	r3, [r4, #0]
 800beda:	691a      	ldr	r2, [r3, #16]
 800bedc:	0691      	lsls	r1, r2, #26
 800bede:	d522      	bpl.n	800bf26 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bee0:	68da      	ldr	r2, [r3, #12]
 800bee2:	0692      	lsls	r2, r2, #26
 800bee4:	d51f      	bpl.n	800bf26 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bee6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800beea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800beec:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800beee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800bef2:	f000 b8af 	b.w	800c054 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bef6:	f7ff ff63 	bl	800bdc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800befa:	4620      	mov	r0, r4
 800befc:	f7ff ff62 	bl	800bdc4 <HAL_TIM_PWM_PulseFinishedCallback>
 800bf00:	e776      	b.n	800bdf0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf02:	f7ff ff5d 	bl	800bdc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf06:	4620      	mov	r0, r4
 800bf08:	f7ff ff5c 	bl	800bdc4 <HAL_TIM_PWM_PulseFinishedCallback>
 800bf0c:	e785      	b.n	800be1a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf0e:	f7ff ff57 	bl	800bdc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf12:	4620      	mov	r0, r4
 800bf14:	f7ff ff56 	bl	800bdc4 <HAL_TIM_PWM_PulseFinishedCallback>
 800bf18:	e793      	b.n	800be42 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf1a:	f7ff ff51 	bl	800bdc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f7ff ff50 	bl	800bdc4 <HAL_TIM_PWM_PulseFinishedCallback>
 800bf24:	e7a2      	b.n	800be6c <HAL_TIM_IRQHandler+0xa4>
}
 800bf26:	bd10      	pop	{r4, pc}

0800bf28 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf28:	4a30      	ldr	r2, [pc, #192]	; (800bfec <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800bf2a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf2c:	4290      	cmp	r0, r2
 800bf2e:	d012      	beq.n	800bf56 <TIM_Base_SetConfig+0x2e>
 800bf30:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bf34:	d00f      	beq.n	800bf56 <TIM_Base_SetConfig+0x2e>
 800bf36:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800bf3a:	4290      	cmp	r0, r2
 800bf3c:	d00b      	beq.n	800bf56 <TIM_Base_SetConfig+0x2e>
 800bf3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf42:	4290      	cmp	r0, r2
 800bf44:	d007      	beq.n	800bf56 <TIM_Base_SetConfig+0x2e>
 800bf46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf4a:	4290      	cmp	r0, r2
 800bf4c:	d003      	beq.n	800bf56 <TIM_Base_SetConfig+0x2e>
 800bf4e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800bf52:	4290      	cmp	r0, r2
 800bf54:	d119      	bne.n	800bf8a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800bf56:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800bf5c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf5e:	4a23      	ldr	r2, [pc, #140]	; (800bfec <TIM_Base_SetConfig+0xc4>)
 800bf60:	4290      	cmp	r0, r2
 800bf62:	d01d      	beq.n	800bfa0 <TIM_Base_SetConfig+0x78>
 800bf64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bf68:	d01a      	beq.n	800bfa0 <TIM_Base_SetConfig+0x78>
 800bf6a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800bf6e:	4290      	cmp	r0, r2
 800bf70:	d016      	beq.n	800bfa0 <TIM_Base_SetConfig+0x78>
 800bf72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf76:	4290      	cmp	r0, r2
 800bf78:	d012      	beq.n	800bfa0 <TIM_Base_SetConfig+0x78>
 800bf7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf7e:	4290      	cmp	r0, r2
 800bf80:	d00e      	beq.n	800bfa0 <TIM_Base_SetConfig+0x78>
 800bf82:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800bf86:	4290      	cmp	r0, r2
 800bf88:	d00a      	beq.n	800bfa0 <TIM_Base_SetConfig+0x78>
 800bf8a:	4a19      	ldr	r2, [pc, #100]	; (800bff0 <TIM_Base_SetConfig+0xc8>)
 800bf8c:	4290      	cmp	r0, r2
 800bf8e:	d007      	beq.n	800bfa0 <TIM_Base_SetConfig+0x78>
 800bf90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf94:	4290      	cmp	r0, r2
 800bf96:	d003      	beq.n	800bfa0 <TIM_Base_SetConfig+0x78>
 800bf98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf9c:	4290      	cmp	r0, r2
 800bf9e:	d103      	bne.n	800bfa8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bfa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bfa4:	68ca      	ldr	r2, [r1, #12]
 800bfa6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bfa8:	694a      	ldr	r2, [r1, #20]
 800bfaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfae:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800bfb0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bfb2:	688b      	ldr	r3, [r1, #8]
 800bfb4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bfb6:	680b      	ldr	r3, [r1, #0]
 800bfb8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bfba:	4b0c      	ldr	r3, [pc, #48]	; (800bfec <TIM_Base_SetConfig+0xc4>)
 800bfbc:	4298      	cmp	r0, r3
 800bfbe:	d00f      	beq.n	800bfe0 <TIM_Base_SetConfig+0xb8>
 800bfc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bfc4:	4298      	cmp	r0, r3
 800bfc6:	d00b      	beq.n	800bfe0 <TIM_Base_SetConfig+0xb8>
 800bfc8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bfcc:	4298      	cmp	r0, r3
 800bfce:	d007      	beq.n	800bfe0 <TIM_Base_SetConfig+0xb8>
 800bfd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bfd4:	4298      	cmp	r0, r3
 800bfd6:	d003      	beq.n	800bfe0 <TIM_Base_SetConfig+0xb8>
 800bfd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bfdc:	4298      	cmp	r0, r3
 800bfde:	d101      	bne.n	800bfe4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bfe0:	690b      	ldr	r3, [r1, #16]
 800bfe2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	6143      	str	r3, [r0, #20]
}
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	40010000 	.word	0x40010000
 800bff0:	40014000 	.word	0x40014000

0800bff4 <HAL_TIM_Base_Init>:
{
 800bff4:	b510      	push	{r4, lr}
  if (htim == NULL)
 800bff6:	4604      	mov	r4, r0
 800bff8:	b350      	cbz	r0, 800c050 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bffa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800bffe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c002:	b91b      	cbnz	r3, 800c00c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c004:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c008:	f7ff febb 	bl	800bd82 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c00c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c00e:	6820      	ldr	r0, [r4, #0]
 800c010:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c012:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c016:	f7ff ff87 	bl	800bf28 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c01a:	2301      	movs	r3, #1
  return HAL_OK;
 800c01c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c01e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c022:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c026:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c02a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c02e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800c032:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c03a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c03e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c042:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c046:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c04a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c04e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c050:	2001      	movs	r0, #1
 800c052:	e7fc      	b.n	800c04e <HAL_TIM_Base_Init+0x5a>

0800c054 <HAL_TIMEx_CommutCallback>:
 800c054:	4770      	bx	lr

0800c056 <HAL_TIMEx_BreakCallback>:
 800c056:	4770      	bx	lr

0800c058 <HAL_TIMEx_Break2Callback>:
 800c058:	4770      	bx	lr

0800c05a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c05a:	6802      	ldr	r2, [r0, #0]
 800c05c:	6813      	ldr	r3, [r2, #0]
 800c05e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c062:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c064:	6893      	ldr	r3, [r2, #8]
 800c066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c06a:	f023 0301 	bic.w	r3, r3, #1
 800c06e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c070:	2320      	movs	r3, #32
 800c072:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c076:	2300      	movs	r3, #0
 800c078:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800c07a:	4770      	bx	lr

0800c07c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800c07c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800c080:	2b20      	cmp	r3, #32
{
 800c082:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800c084:	d167      	bne.n	800c156 <HAL_UART_Receive_IT+0xda>
    if ((pData == NULL) || (Size == 0U))
 800c086:	2900      	cmp	r1, #0
 800c088:	d063      	beq.n	800c152 <HAL_UART_Receive_IT+0xd6>
 800c08a:	2a00      	cmp	r2, #0
 800c08c:	d061      	beq.n	800c152 <HAL_UART_Receive_IT+0xd6>
    __HAL_LOCK(huart);
 800c08e:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800c092:	2b01      	cmp	r3, #1
 800c094:	d05f      	beq.n	800c156 <HAL_UART_Receive_IT+0xda>
 800c096:	2301      	movs	r3, #1
    huart->pRxBuffPtr  = pData;
 800c098:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxISR       = NULL;
 800c09a:	2100      	movs	r1, #0
    huart->RxXferSize  = Size;
 800c09c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    __HAL_LOCK(huart);
 800c0a0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    UART_MASK_COMPUTATION(huart);
 800c0a4:	6883      	ldr	r3, [r0, #8]
    huart->RxXferCount = Size;
 800c0a6:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 800c0aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxISR       = NULL;
 800c0ae:	66c1      	str	r1, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 800c0b0:	d12e      	bne.n	800c110 <HAL_UART_Receive_IT+0x94>
 800c0b2:	6901      	ldr	r1, [r0, #16]
 800c0b4:	bb51      	cbnz	r1, 800c10c <HAL_UART_Receive_IT+0x90>
 800c0b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c0ba:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0be:	2100      	movs	r1, #0
 800c0c0:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c0c4:	2122      	movs	r1, #34	; 0x22
 800c0c6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ca:	6801      	ldr	r1, [r0, #0]
 800c0cc:	688c      	ldr	r4, [r1, #8]
 800c0ce:	f044 0401 	orr.w	r4, r4, #1
 800c0d2:	608c      	str	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c0d4:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800c0d6:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 800c0da:	d129      	bne.n	800c130 <HAL_UART_Receive_IT+0xb4>
 800c0dc:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 800c0e0:	4294      	cmp	r4, r2
 800c0e2:	d825      	bhi.n	800c130 <HAL_UART_Receive_IT+0xb4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0e8:	d120      	bne.n	800c12c <HAL_UART_Receive_IT+0xb0>
 800c0ea:	6903      	ldr	r3, [r0, #16]
 800c0ec:	b9f3      	cbnz	r3, 800c12c <HAL_UART_Receive_IT+0xb0>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c0ee:	4b1b      	ldr	r3, [pc, #108]	; (800c15c <HAL_UART_Receive_IT+0xe0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0f0:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c0f2:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 800c0f4:	2300      	movs	r3, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 800c0fa:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0fe:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c100:	688a      	ldr	r2, [r1, #8]
 800c102:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c106:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 800c108:	4618      	mov	r0, r3
}
 800c10a:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 800c10c:	21ff      	movs	r1, #255	; 0xff
 800c10e:	e7d4      	b.n	800c0ba <HAL_UART_Receive_IT+0x3e>
 800c110:	b923      	cbnz	r3, 800c11c <HAL_UART_Receive_IT+0xa0>
 800c112:	6901      	ldr	r1, [r0, #16]
 800c114:	2900      	cmp	r1, #0
 800c116:	d0f9      	beq.n	800c10c <HAL_UART_Receive_IT+0x90>
 800c118:	217f      	movs	r1, #127	; 0x7f
 800c11a:	e7ce      	b.n	800c0ba <HAL_UART_Receive_IT+0x3e>
 800c11c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c120:	d1cb      	bne.n	800c0ba <HAL_UART_Receive_IT+0x3e>
 800c122:	6901      	ldr	r1, [r0, #16]
 800c124:	2900      	cmp	r1, #0
 800c126:	d0f7      	beq.n	800c118 <HAL_UART_Receive_IT+0x9c>
 800c128:	213f      	movs	r1, #63	; 0x3f
 800c12a:	e7c6      	b.n	800c0ba <HAL_UART_Receive_IT+0x3e>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c12c:	4b0c      	ldr	r3, [pc, #48]	; (800c160 <HAL_UART_Receive_IT+0xe4>)
 800c12e:	e7df      	b.n	800c0f0 <HAL_UART_Receive_IT+0x74>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c134:	d10b      	bne.n	800c14e <HAL_UART_Receive_IT+0xd2>
 800c136:	6903      	ldr	r3, [r0, #16]
 800c138:	b94b      	cbnz	r3, 800c14e <HAL_UART_Receive_IT+0xd2>
        huart->RxISR = UART_RxISR_16BIT;
 800c13a:	4b0a      	ldr	r3, [pc, #40]	; (800c164 <HAL_UART_Receive_IT+0xe8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c13c:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT;
 800c13e:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 800c140:	2300      	movs	r3, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c142:	f442 7290 	orr.w	r2, r2, #288	; 0x120
      __HAL_UNLOCK(huart);
 800c146:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c14a:	600a      	str	r2, [r1, #0]
 800c14c:	e7dc      	b.n	800c108 <HAL_UART_Receive_IT+0x8c>
        huart->RxISR = UART_RxISR_8BIT;
 800c14e:	4b06      	ldr	r3, [pc, #24]	; (800c168 <HAL_UART_Receive_IT+0xec>)
 800c150:	e7f4      	b.n	800c13c <HAL_UART_Receive_IT+0xc0>
      return HAL_ERROR;
 800c152:	2001      	movs	r0, #1
 800c154:	e7d9      	b.n	800c10a <HAL_UART_Receive_IT+0x8e>
    return HAL_BUSY;
 800c156:	2002      	movs	r0, #2
 800c158:	e7d7      	b.n	800c10a <HAL_UART_Receive_IT+0x8e>
 800c15a:	bf00      	nop
 800c15c:	0800c499 	.word	0x0800c499
 800c160:	0800c3f5 	.word	0x0800c3f5
 800c164:	0800c39b 	.word	0x0800c39b
 800c168:	0800c33f 	.word	0x0800c33f

0800c16c <HAL_UART_Receive_DMA>:
{
 800c16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800c16e:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
{
 800c172:	4604      	mov	r4, r0
 800c174:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800c176:	2f20      	cmp	r7, #32
 800c178:	d13c      	bne.n	800c1f4 <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 800c17a:	b341      	cbz	r1, 800c1ce <HAL_UART_Receive_DMA+0x62>
 800c17c:	b33a      	cbz	r2, 800c1ce <HAL_UART_Receive_DMA+0x62>
    __HAL_LOCK(huart);
 800c17e:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 800c182:	2a01      	cmp	r2, #1
 800c184:	d036      	beq.n	800c1f4 <HAL_UART_Receive_DMA+0x88>
 800c186:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c188:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c18a:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 800c18c:	6581      	str	r1, [r0, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c18e:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
    __HAL_LOCK(huart);
 800c192:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxXferSize = Size;
 800c196:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c19a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmarx != NULL)
 800c19e:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800c1a0:	b1b8      	cbz	r0, 800c1d2 <HAL_UART_Receive_DMA+0x66>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c1a2:	4a15      	ldr	r2, [pc, #84]	; (800c1f8 <HAL_UART_Receive_DMA+0x8c>)
 800c1a4:	f8d4 c000 	ldr.w	ip, [r4]
 800c1a8:	63c2      	str	r2, [r0, #60]	; 0x3c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c1aa:	4a14      	ldr	r2, [pc, #80]	; (800c1fc <HAL_UART_Receive_DMA+0x90>)
 800c1ac:	6402      	str	r2, [r0, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c1ae:	4a14      	ldr	r2, [pc, #80]	; (800c200 <HAL_UART_Receive_DMA+0x94>)
      huart->hdmarx->XferAbortCallback = NULL;
 800c1b0:	e9c0 2613 	strd	r2, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c1b4:	460a      	mov	r2, r1
 800c1b6:	f10c 0124 	add.w	r1, ip, #36	; 0x24
 800c1ba:	f7fb fa61 	bl	8007680 <HAL_DMA_Start_IT>
 800c1be:	b140      	cbz	r0, 800c1d2 <HAL_UART_Receive_DMA+0x66>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c1c0:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800c1c2:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c1c6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 800c1ca:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
      return HAL_ERROR;
 800c1ce:	2001      	movs	r0, #1
 800c1d0:	e00f      	b.n	800c1f2 <HAL_UART_Receive_DMA+0x86>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1d2:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 800c1d4:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1d6:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800c1d8:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c1e0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1e2:	689a      	ldr	r2, [r3, #8]
 800c1e4:	f042 0201 	orr.w	r2, r2, #1
 800c1e8:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1ea:	689a      	ldr	r2, [r3, #8]
 800c1ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1f0:	609a      	str	r2, [r3, #8]
}
 800c1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800c1f4:	2002      	movs	r0, #2
 800c1f6:	e7fc      	b.n	800c1f2 <HAL_UART_Receive_DMA+0x86>
 800c1f8:	0800c539 	.word	0x0800c539
 800c1fc:	0800c575 	.word	0x0800c575
 800c200:	0800c581 	.word	0x0800c581

0800c204 <HAL_UART_DMAPause>:
  __HAL_LOCK(huart);
 800c204:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c208:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  __HAL_LOCK(huart);
 800c20c:	2b01      	cmp	r3, #1
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c20e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 800c212:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 800c214:	d022      	beq.n	800c25c <HAL_UART_DMAPause+0x58>
 800c216:	2301      	movs	r3, #1
 800c218:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c21c:	6803      	ldr	r3, [r0, #0]
 800c21e:	689c      	ldr	r4, [r3, #8]
 800c220:	0624      	lsls	r4, r4, #24
 800c222:	d505      	bpl.n	800c230 <HAL_UART_DMAPause+0x2c>
 800c224:	2a21      	cmp	r2, #33	; 0x21
 800c226:	d103      	bne.n	800c230 <HAL_UART_DMAPause+0x2c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c228:	689a      	ldr	r2, [r3, #8]
 800c22a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c22e:	609a      	str	r2, [r3, #8]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c230:	689a      	ldr	r2, [r3, #8]
 800c232:	0652      	lsls	r2, r2, #25
 800c234:	d50d      	bpl.n	800c252 <HAL_UART_DMAPause+0x4e>
 800c236:	2922      	cmp	r1, #34	; 0x22
 800c238:	d10b      	bne.n	800c252 <HAL_UART_DMAPause+0x4e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c240:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c242:	689a      	ldr	r2, [r3, #8]
 800c244:	f022 0201 	bic.w	r2, r2, #1
 800c248:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c24a:	689a      	ldr	r2, [r3, #8]
 800c24c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c250:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(huart);
 800c252:	2300      	movs	r3, #0
 800c254:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800c258:	4618      	mov	r0, r3
}
 800c25a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800c25c:	2002      	movs	r0, #2
 800c25e:	e7fc      	b.n	800c25a <HAL_UART_DMAPause+0x56>

0800c260 <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 800c260:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800c264:	2b01      	cmp	r3, #1
 800c266:	d023      	beq.n	800c2b0 <HAL_UART_DMAResume+0x50>
 800c268:	2301      	movs	r3, #1
 800c26a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c26e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800c272:	2b21      	cmp	r3, #33	; 0x21
 800c274:	d104      	bne.n	800c280 <HAL_UART_DMAResume+0x20>
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c276:	6802      	ldr	r2, [r0, #0]
 800c278:	6893      	ldr	r3, [r2, #8]
 800c27a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c27e:	6093      	str	r3, [r2, #8]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c280:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800c284:	2b22      	cmp	r3, #34	; 0x22
 800c286:	d10e      	bne.n	800c2a6 <HAL_UART_DMAResume+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c288:	6803      	ldr	r3, [r0, #0]
 800c28a:	2208      	movs	r2, #8
 800c28c:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c294:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c296:	689a      	ldr	r2, [r3, #8]
 800c298:	f042 0201 	orr.w	r2, r2, #1
 800c29c:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c29e:	689a      	ldr	r2, [r3, #8]
 800c2a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2a4:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(huart);
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c2b0:	2002      	movs	r0, #2
}
 800c2b2:	4770      	bx	lr

0800c2b4 <HAL_UART_DMAStop>:
{
 800c2b4:	b538      	push	{r3, r4, r5, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c2b6:	6803      	ldr	r3, [r0, #0]
{
 800c2b8:	4604      	mov	r4, r0
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c2ba:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c2be:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c2c2:	6899      	ldr	r1, [r3, #8]
 800c2c4:	0609      	lsls	r1, r1, #24
 800c2c6:	d520      	bpl.n	800c30a <HAL_UART_DMAStop+0x56>
 800c2c8:	2a21      	cmp	r2, #33	; 0x21
 800c2ca:	d11e      	bne.n	800c30a <HAL_UART_DMAStop+0x56>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c2cc:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800c2ce:	6f40      	ldr	r0, [r0, #116]	; 0x74
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c2d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c2d4:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800c2d6:	b160      	cbz	r0, 800c2f2 <HAL_UART_DMAStop+0x3e>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c2d8:	f7fb faf0 	bl	80078bc <HAL_DMA_Abort>
 800c2dc:	b148      	cbz	r0, 800c2f2 <HAL_UART_DMAStop+0x3e>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c2de:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c2e0:	f7fb fffa 	bl	80082d8 <HAL_DMA_GetError>
 800c2e4:	2820      	cmp	r0, #32
 800c2e6:	d104      	bne.n	800c2f2 <HAL_UART_DMAStop+0x3e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c2e8:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 800c2ea:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c2ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800c2f0:	bd38      	pop	{r3, r4, r5, pc}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c2f2:	6823      	ldr	r3, [r4, #0]
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c2fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c2fc:	689a      	ldr	r2, [r3, #8]
 800c2fe:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c302:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 800c304:	2320      	movs	r3, #32
 800c306:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c30a:	6823      	ldr	r3, [r4, #0]
 800c30c:	6898      	ldr	r0, [r3, #8]
 800c30e:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800c312:	d0ed      	beq.n	800c2f0 <HAL_UART_DMAStop+0x3c>
 800c314:	2d22      	cmp	r5, #34	; 0x22
 800c316:	d110      	bne.n	800c33a <HAL_UART_DMAStop+0x86>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c318:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800c31a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c31c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c320:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800c322:	b138      	cbz	r0, 800c334 <HAL_UART_DMAStop+0x80>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c324:	f7fb faca 	bl	80078bc <HAL_DMA_Abort>
 800c328:	b120      	cbz	r0, 800c334 <HAL_UART_DMAStop+0x80>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c32a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800c32c:	f7fb ffd4 	bl	80082d8 <HAL_DMA_GetError>
 800c330:	2820      	cmp	r0, #32
 800c332:	d0d9      	beq.n	800c2e8 <HAL_UART_DMAStop+0x34>
    UART_EndRxTransfer(huart);
 800c334:	4620      	mov	r0, r4
 800c336:	f7ff fe90 	bl	800c05a <UART_EndRxTransfer>
  return HAL_OK;
 800c33a:	2000      	movs	r0, #0
 800c33c:	e7d8      	b.n	800c2f0 <HAL_UART_DMAStop+0x3c>

0800c33e <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c33e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800c342:	6802      	ldr	r2, [r0, #0]
 800c344:	2922      	cmp	r1, #34	; 0x22
{
 800c346:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c348:	d122      	bne.n	800c390 <UART_RxISR_8BIT+0x52>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c34a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c34c:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800c350:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800c352:	4022      	ands	r2, r4
 800c354:	700a      	strb	r2, [r1, #0]
    huart->pRxBuffPtr++;
 800c356:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800c358:	3201      	adds	r2, #1
 800c35a:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800c35c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800c360:	3a01      	subs	r2, #1
 800c362:	b292      	uxth	r2, r2
 800c364:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c368:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800c36c:	b292      	uxth	r2, r2
 800c36e:	b972      	cbnz	r2, 800c38e <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c370:	6801      	ldr	r1, [r0, #0]
 800c372:	680c      	ldr	r4, [r1, #0]
 800c374:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800c378:	600c      	str	r4, [r1, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c37a:	688c      	ldr	r4, [r1, #8]
 800c37c:	f024 0401 	bic.w	r4, r4, #1
 800c380:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c382:	2120      	movs	r1, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c384:	66c2      	str	r2, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 800c386:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c38a:	f7f8 fd9d 	bl	8004ec8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c38e:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c390:	6993      	ldr	r3, [r2, #24]
 800c392:	f043 0308 	orr.w	r3, r3, #8
 800c396:	6193      	str	r3, [r2, #24]
}
 800c398:	e7f9      	b.n	800c38e <UART_RxISR_8BIT+0x50>

0800c39a <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c39a:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800c39e:	6802      	ldr	r2, [r0, #0]
 800c3a0:	2922      	cmp	r1, #34	; 0x22
{
 800c3a2:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3a4:	d120      	bne.n	800c3e8 <UART_RxISR_16BIT+0x4e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3a6:	6a54      	ldr	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 800c3a8:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 800c3ac:	400c      	ands	r4, r1
 800c3ae:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800c3b0:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2U;
 800c3b4:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800c3b6:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 800c3ba:	3901      	subs	r1, #1
 800c3bc:	b289      	uxth	r1, r1
 800c3be:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c3c2:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 800c3c6:	b289      	uxth	r1, r1
 800c3c8:	b969      	cbnz	r1, 800c3e6 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3ca:	6814      	ldr	r4, [r2, #0]
 800c3cc:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800c3d0:	6014      	str	r4, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3d2:	6894      	ldr	r4, [r2, #8]
 800c3d4:	f024 0401 	bic.w	r4, r4, #1
 800c3d8:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c3da:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c3dc:	66c1      	str	r1, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 800c3de:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c3e2:	f7f8 fd71 	bl	8004ec8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c3e6:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c3e8:	6993      	ldr	r3, [r2, #24]
 800c3ea:	f043 0308 	orr.w	r3, r3, #8
 800c3ee:	6193      	str	r3, [r2, #24]
}
 800c3f0:	e7f9      	b.n	800c3e6 <UART_RxISR_16BIT+0x4c>
	...

0800c3f4 <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3f4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800c3f8:	2b22      	cmp	r3, #34	; 0x22
{
 800c3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3fe:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c400:	d13f      	bne.n	800c482 <UART_RxISR_8BIT_FIFOEN+0x8e>
  uint16_t  uhMask = huart->Mask;
 800c402:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c406:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c40a:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c40e:	4f20      	ldr	r7, [pc, #128]	; (800c490 <UART_RxISR_8BIT_FIFOEN+0x9c>)
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c410:	b9a5      	cbnz	r5, 800c43c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c412:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c416:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c418:	b173      	cbz	r3, 800c438 <UART_RxISR_8BIT_FIFOEN+0x44>
 800c41a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800c41e:	429a      	cmp	r2, r3
 800c420:	d90a      	bls.n	800c438 <UART_RxISR_8BIT_FIFOEN+0x44>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c422:	6823      	ldr	r3, [r4, #0]
 800c424:	689a      	ldr	r2, [r3, #8]
 800c426:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c42a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c42c:	4a19      	ldr	r2, [pc, #100]	; (800c494 <UART_RxISR_8BIT_FIFOEN+0xa0>)
 800c42e:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	f042 0220 	orr.w	r2, r2, #32
 800c436:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c43c:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c43e:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c442:	4033      	ands	r3, r6
 800c444:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800c446:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c448:	3301      	adds	r3, #1
 800c44a:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800c44c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c450:	3b01      	subs	r3, #1
 800c452:	b29b      	uxth	r3, r3
 800c454:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800c458:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	b96b      	cbnz	r3, 800c47c <UART_RxISR_8BIT_FIFOEN+0x88>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c460:	6822      	ldr	r2, [r4, #0]
        HAL_UART_RxCpltCallback(huart);
 800c462:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c464:	6811      	ldr	r1, [r2, #0]
 800c466:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800c46a:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c46c:	6891      	ldr	r1, [r2, #8]
 800c46e:	4039      	ands	r1, r7
 800c470:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800c472:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 800c476:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800c478:	f7f8 fd26 	bl	8004ec8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c47c:	3d01      	subs	r5, #1
 800c47e:	b2ad      	uxth	r5, r5
 800c480:	e7c6      	b.n	800c410 <UART_RxISR_8BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c482:	6802      	ldr	r2, [r0, #0]
 800c484:	6993      	ldr	r3, [r2, #24]
 800c486:	f043 0308 	orr.w	r3, r3, #8
 800c48a:	6193      	str	r3, [r2, #24]
}
 800c48c:	e7d4      	b.n	800c438 <UART_RxISR_8BIT_FIFOEN+0x44>
 800c48e:	bf00      	nop
 800c490:	effffffe 	.word	0xeffffffe
 800c494:	0800c33f 	.word	0x0800c33f

0800c498 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c498:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800c49c:	2b22      	cmp	r3, #34	; 0x22
{
 800c49e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a2:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4a4:	d13d      	bne.n	800c522 <UART_RxISR_16BIT_FIFOEN+0x8a>
  uint16_t  uhMask = huart->Mask;
 800c4a6:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c4aa:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c4ae:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4b2:	4f1f      	ldr	r7, [pc, #124]	; (800c530 <UART_RxISR_16BIT_FIFOEN+0x98>)
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c4b4:	b9a5      	cbnz	r5, 800c4e0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c4b6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c4ba:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c4bc:	b173      	cbz	r3, 800c4dc <UART_RxISR_16BIT_FIFOEN+0x44>
 800c4be:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d90a      	bls.n	800c4dc <UART_RxISR_16BIT_FIFOEN+0x44>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c4c6:	6823      	ldr	r3, [r4, #0]
 800c4c8:	689a      	ldr	r2, [r3, #8]
 800c4ca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c4ce:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c4d0:	4a18      	ldr	r2, [pc, #96]	; (800c534 <UART_RxISR_16BIT_FIFOEN+0x9c>)
 800c4d2:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	f042 0220 	orr.w	r2, r2, #32
 800c4da:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4e0:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c4e2:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800c4e6:	4031      	ands	r1, r6
 800c4e8:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 800c4ec:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800c4ee:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800c4f2:	3a01      	subs	r2, #1
 800c4f4:	b292      	uxth	r2, r2
 800c4f6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800c4fa:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800c4fe:	b292      	uxth	r2, r2
 800c500:	b962      	cbnz	r2, 800c51c <UART_RxISR_16BIT_FIFOEN+0x84>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c502:	6819      	ldr	r1, [r3, #0]
        HAL_UART_RxCpltCallback(huart);
 800c504:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c506:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800c50a:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c50c:	6899      	ldr	r1, [r3, #8]
 800c50e:	4039      	ands	r1, r7
 800c510:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800c512:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 800c516:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800c518:	f7f8 fcd6 	bl	8004ec8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c51c:	3d01      	subs	r5, #1
 800c51e:	b2ad      	uxth	r5, r5
 800c520:	e7c8      	b.n	800c4b4 <UART_RxISR_16BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c522:	6802      	ldr	r2, [r0, #0]
 800c524:	6993      	ldr	r3, [r2, #24]
 800c526:	f043 0308 	orr.w	r3, r3, #8
 800c52a:	6193      	str	r3, [r2, #24]
}
 800c52c:	e7d6      	b.n	800c4dc <UART_RxISR_16BIT_FIFOEN+0x44>
 800c52e:	bf00      	nop
 800c530:	effffffe 	.word	0xeffffffe
 800c534:	0800c39b 	.word	0x0800c39b

0800c538 <UART_DMAReceiveCplt>:
{
 800c538:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c53a:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c53c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c53e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c542:	d012      	beq.n	800c56a <UART_DMAReceiveCplt+0x32>
    huart->RxXferCount = 0U;
 800c544:	2300      	movs	r3, #0
 800c546:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c54a:	6813      	ldr	r3, [r2, #0]
 800c54c:	6819      	ldr	r1, [r3, #0]
 800c54e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800c552:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c554:	6899      	ldr	r1, [r3, #8]
 800c556:	f021 0101 	bic.w	r1, r1, #1
 800c55a:	6099      	str	r1, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c55c:	6899      	ldr	r1, [r3, #8]
 800c55e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800c562:	6099      	str	r1, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800c564:	2320      	movs	r3, #32
 800c566:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  HAL_UART_RxCpltCallback(huart);
 800c56a:	4610      	mov	r0, r2
 800c56c:	f7f8 fcac 	bl	8004ec8 <HAL_UART_RxCpltCallback>
}
 800c570:	bd08      	pop	{r3, pc}

0800c572 <HAL_UART_RxHalfCpltCallback>:
 800c572:	4770      	bx	lr

0800c574 <UART_DMARxHalfCplt>:
{
 800c574:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800c576:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800c578:	f7ff fffb 	bl	800c572 <HAL_UART_RxHalfCpltCallback>
}
 800c57c:	bd08      	pop	{r3, pc}

0800c57e <HAL_UART_ErrorCallback>:
 800c57e:	4770      	bx	lr

0800c580 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c580:	6b81      	ldr	r1, [r0, #56]	; 0x38
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c582:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c584:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c588:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
{
 800c58c:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c58e:	689c      	ldr	r4, [r3, #8]
 800c590:	0624      	lsls	r4, r4, #24
 800c592:	d50f      	bpl.n	800c5b4 <UART_DMAError+0x34>
 800c594:	2a21      	cmp	r2, #33	; 0x21
 800c596:	d10d      	bne.n	800c5b4 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
 800c598:	2200      	movs	r2, #0
 800c59a:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c5a4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c5a6:	689a      	ldr	r2, [r3, #8]
 800c5a8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c5ac:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 800c5ae:	2220      	movs	r2, #32
 800c5b0:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	065b      	lsls	r3, r3, #25
 800c5b8:	d507      	bpl.n	800c5ca <UART_DMAError+0x4a>
 800c5ba:	2822      	cmp	r0, #34	; 0x22
 800c5bc:	d105      	bne.n	800c5ca <UART_DMAError+0x4a>
    huart->RxXferCount = 0U;
 800c5be:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 800c5c0:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 800c5c2:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c5c6:	f7ff fd48 	bl	800c05a <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c5ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
  HAL_UART_ErrorCallback(huart);
 800c5ce:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c5d0:	f043 0310 	orr.w	r3, r3, #16
 800c5d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  HAL_UART_ErrorCallback(huart);
 800c5d8:	f7ff ffd1 	bl	800c57e <HAL_UART_ErrorCallback>
}
 800c5dc:	bd10      	pop	{r4, pc}
	...

0800c5e0 <UART_SetConfig>:
{
 800c5e0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800c5e4:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800c5e6:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c5e8:	69c0      	ldr	r0, [r0, #28]
{
 800c5ea:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c5ec:	6921      	ldr	r1, [r4, #16]
 800c5ee:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c5f0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	6961      	ldr	r1, [r4, #20]
 800c5f6:	430a      	orrs	r2, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 800c5f8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c5fa:	4302      	orrs	r2, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 800c5fc:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c5fe:	49a8      	ldr	r1, [pc, #672]	; (800c8a0 <UART_SetConfig+0x2c0>)
 800c600:	4029      	ands	r1, r5
 800c602:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c604:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c606:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c608:	685a      	ldr	r2, [r3, #4]
 800c60a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800c60e:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c610:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c612:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c614:	4aa3      	ldr	r2, [pc, #652]	; (800c8a4 <UART_SetConfig+0x2c4>)
 800c616:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800c618:	bf1c      	itt	ne
 800c61a:	6a22      	ldrne	r2, [r4, #32]
 800c61c:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c61e:	689a      	ldr	r2, [r3, #8]
 800c620:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 800c624:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800c628:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c62a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c62c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c630:	f022 020f 	bic.w	r2, r2, #15
 800c634:	430a      	orrs	r2, r1
 800c636:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c638:	4a9b      	ldr	r2, [pc, #620]	; (800c8a8 <UART_SetConfig+0x2c8>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d11c      	bne.n	800c678 <UART_SetConfig+0x98>
 800c63e:	4b9b      	ldr	r3, [pc, #620]	; (800c8ac <UART_SetConfig+0x2cc>)
 800c640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c646:	2b28      	cmp	r3, #40	; 0x28
 800c648:	d86c      	bhi.n	800c724 <UART_SetConfig+0x144>
 800c64a:	4a99      	ldr	r2, [pc, #612]	; (800c8b0 <UART_SetConfig+0x2d0>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c64c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c650:	5cd3      	ldrb	r3, [r2, r3]
 800c652:	f040 8104 	bne.w	800c85e <UART_SetConfig+0x27e>
    switch (clocksource)
 800c656:	2b08      	cmp	r3, #8
 800c658:	f000 80fa 	beq.w	800c850 <UART_SetConfig+0x270>
 800c65c:	f200 80c3 	bhi.w	800c7e6 <UART_SetConfig+0x206>
 800c660:	2b01      	cmp	r3, #1
 800c662:	f000 80f2 	beq.w	800c84a <UART_SetConfig+0x26a>
 800c666:	f0c0 80eb 	bcc.w	800c840 <UART_SetConfig+0x260>
 800c66a:	2b04      	cmp	r3, #4
 800c66c:	d15a      	bne.n	800c724 <UART_SetConfig+0x144>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c66e:	4668      	mov	r0, sp
 800c670:	f7fd fe74 	bl	800a35c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c674:	9801      	ldr	r0, [sp, #4]
        break;
 800c676:	e0e5      	b.n	800c844 <UART_SetConfig+0x264>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c678:	4a8e      	ldr	r2, [pc, #568]	; (800c8b4 <UART_SetConfig+0x2d4>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d107      	bne.n	800c68e <UART_SetConfig+0xae>
 800c67e:	4b8b      	ldr	r3, [pc, #556]	; (800c8ac <UART_SetConfig+0x2cc>)
 800c680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c682:	f003 0307 	and.w	r3, r3, #7
 800c686:	2b05      	cmp	r3, #5
 800c688:	d84c      	bhi.n	800c724 <UART_SetConfig+0x144>
 800c68a:	4a8b      	ldr	r2, [pc, #556]	; (800c8b8 <UART_SetConfig+0x2d8>)
 800c68c:	e7de      	b.n	800c64c <UART_SetConfig+0x6c>
 800c68e:	4a8b      	ldr	r2, [pc, #556]	; (800c8bc <UART_SetConfig+0x2dc>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d107      	bne.n	800c6a4 <UART_SetConfig+0xc4>
 800c694:	4b85      	ldr	r3, [pc, #532]	; (800c8ac <UART_SetConfig+0x2cc>)
 800c696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c698:	f003 0307 	and.w	r3, r3, #7
 800c69c:	2b05      	cmp	r3, #5
 800c69e:	d841      	bhi.n	800c724 <UART_SetConfig+0x144>
 800c6a0:	4a87      	ldr	r2, [pc, #540]	; (800c8c0 <UART_SetConfig+0x2e0>)
 800c6a2:	e7d3      	b.n	800c64c <UART_SetConfig+0x6c>
 800c6a4:	4a87      	ldr	r2, [pc, #540]	; (800c8c4 <UART_SetConfig+0x2e4>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d107      	bne.n	800c6ba <UART_SetConfig+0xda>
 800c6aa:	4b80      	ldr	r3, [pc, #512]	; (800c8ac <UART_SetConfig+0x2cc>)
 800c6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ae:	f003 0307 	and.w	r3, r3, #7
 800c6b2:	2b05      	cmp	r3, #5
 800c6b4:	d836      	bhi.n	800c724 <UART_SetConfig+0x144>
 800c6b6:	4a84      	ldr	r2, [pc, #528]	; (800c8c8 <UART_SetConfig+0x2e8>)
 800c6b8:	e7c8      	b.n	800c64c <UART_SetConfig+0x6c>
 800c6ba:	4a84      	ldr	r2, [pc, #528]	; (800c8cc <UART_SetConfig+0x2ec>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d107      	bne.n	800c6d0 <UART_SetConfig+0xf0>
 800c6c0:	4b7a      	ldr	r3, [pc, #488]	; (800c8ac <UART_SetConfig+0x2cc>)
 800c6c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6c4:	f003 0307 	and.w	r3, r3, #7
 800c6c8:	2b05      	cmp	r3, #5
 800c6ca:	d82b      	bhi.n	800c724 <UART_SetConfig+0x144>
 800c6cc:	4a80      	ldr	r2, [pc, #512]	; (800c8d0 <UART_SetConfig+0x2f0>)
 800c6ce:	e7bd      	b.n	800c64c <UART_SetConfig+0x6c>
 800c6d0:	4a80      	ldr	r2, [pc, #512]	; (800c8d4 <UART_SetConfig+0x2f4>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d107      	bne.n	800c6e6 <UART_SetConfig+0x106>
 800c6d6:	4b75      	ldr	r3, [pc, #468]	; (800c8ac <UART_SetConfig+0x2cc>)
 800c6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c6de:	2b28      	cmp	r3, #40	; 0x28
 800c6e0:	d820      	bhi.n	800c724 <UART_SetConfig+0x144>
 800c6e2:	4a7d      	ldr	r2, [pc, #500]	; (800c8d8 <UART_SetConfig+0x2f8>)
 800c6e4:	e7b2      	b.n	800c64c <UART_SetConfig+0x6c>
 800c6e6:	4a7d      	ldr	r2, [pc, #500]	; (800c8dc <UART_SetConfig+0x2fc>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d107      	bne.n	800c6fc <UART_SetConfig+0x11c>
 800c6ec:	4b6f      	ldr	r3, [pc, #444]	; (800c8ac <UART_SetConfig+0x2cc>)
 800c6ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6f0:	f003 0307 	and.w	r3, r3, #7
 800c6f4:	2b05      	cmp	r3, #5
 800c6f6:	d815      	bhi.n	800c724 <UART_SetConfig+0x144>
 800c6f8:	4a79      	ldr	r2, [pc, #484]	; (800c8e0 <UART_SetConfig+0x300>)
 800c6fa:	e7a7      	b.n	800c64c <UART_SetConfig+0x6c>
 800c6fc:	4a79      	ldr	r2, [pc, #484]	; (800c8e4 <UART_SetConfig+0x304>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d107      	bne.n	800c712 <UART_SetConfig+0x132>
 800c702:	4b6a      	ldr	r3, [pc, #424]	; (800c8ac <UART_SetConfig+0x2cc>)
 800c704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c706:	f003 0307 	and.w	r3, r3, #7
 800c70a:	2b05      	cmp	r3, #5
 800c70c:	d80a      	bhi.n	800c724 <UART_SetConfig+0x144>
 800c70e:	4a76      	ldr	r2, [pc, #472]	; (800c8e8 <UART_SetConfig+0x308>)
 800c710:	e79c      	b.n	800c64c <UART_SetConfig+0x6c>
 800c712:	4a64      	ldr	r2, [pc, #400]	; (800c8a4 <UART_SetConfig+0x2c4>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d105      	bne.n	800c724 <UART_SetConfig+0x144>
 800c718:	4b64      	ldr	r3, [pc, #400]	; (800c8ac <UART_SetConfig+0x2cc>)
 800c71a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c71c:	f003 0307 	and.w	r3, r3, #7
 800c720:	2b05      	cmp	r3, #5
 800c722:	d901      	bls.n	800c728 <UART_SetConfig+0x148>
        ret = HAL_ERROR;
 800c724:	2001      	movs	r0, #1
 800c726:	e04b      	b.n	800c7c0 <UART_SetConfig+0x1e0>
    switch (clocksource)
 800c728:	4a70      	ldr	r2, [pc, #448]	; (800c8ec <UART_SetConfig+0x30c>)
 800c72a:	5cd3      	ldrb	r3, [r2, r3]
 800c72c:	2b08      	cmp	r3, #8
 800c72e:	d050      	beq.n	800c7d2 <UART_SetConfig+0x1f2>
 800c730:	d808      	bhi.n	800c744 <UART_SetConfig+0x164>
 800c732:	2b02      	cmp	r3, #2
 800c734:	d03f      	beq.n	800c7b6 <UART_SetConfig+0x1d6>
 800c736:	2b04      	cmp	r3, #4
 800c738:	d1f4      	bne.n	800c724 <UART_SetConfig+0x144>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c73a:	4668      	mov	r0, sp
 800c73c:	f7fd fe0e 	bl	800a35c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c740:	9801      	ldr	r0, [sp, #4]
        break;
 800c742:	e03a      	b.n	800c7ba <UART_SetConfig+0x1da>
    switch (clocksource)
 800c744:	2b20      	cmp	r3, #32
 800c746:	d04c      	beq.n	800c7e2 <UART_SetConfig+0x202>
 800c748:	2b40      	cmp	r3, #64	; 0x40
 800c74a:	d047      	beq.n	800c7dc <UART_SetConfig+0x1fc>
 800c74c:	2b10      	cmp	r3, #16
 800c74e:	d1e9      	bne.n	800c724 <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c750:	4b56      	ldr	r3, [pc, #344]	; (800c8ac <UART_SetConfig+0x2cc>)
 800c752:	4867      	ldr	r0, [pc, #412]	; (800c8f0 <UART_SetConfig+0x310>)
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	f012 0f20 	tst.w	r2, #32
 800c75a:	d003      	beq.n	800c764 <UART_SetConfig+0x184>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c762:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c764:	4b63      	ldr	r3, [pc, #396]	; (800c8f4 <UART_SetConfig+0x314>)
 800c766:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c768:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c76a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c76e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c772:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c776:	4299      	cmp	r1, r3
 800c778:	d8d4      	bhi.n	800c724 <UART_SetConfig+0x144>
 800c77a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800c77e:	d8d1      	bhi.n	800c724 <UART_SetConfig+0x144>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c780:	2300      	movs	r3, #0
 800c782:	2100      	movs	r1, #0
 800c784:	f7f3 fe04 	bl	8000390 <__aeabi_uldivmod>
 800c788:	462a      	mov	r2, r5
 800c78a:	020f      	lsls	r7, r1, #8
 800c78c:	2300      	movs	r3, #0
 800c78e:	0206      	lsls	r6, r0, #8
 800c790:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800c794:	0868      	lsrs	r0, r5, #1
 800c796:	eb16 0b00 	adds.w	fp, r6, r0
 800c79a:	f147 0c00 	adc.w	ip, r7, #0
 800c79e:	4658      	mov	r0, fp
 800c7a0:	4661      	mov	r1, ip
 800c7a2:	f7f3 fdf5 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c7a6:	4b54      	ldr	r3, [pc, #336]	; (800c8f8 <UART_SetConfig+0x318>)
 800c7a8:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d8b9      	bhi.n	800c724 <UART_SetConfig+0x144>
          huart->Instance->BRR = usartdiv;
 800c7b0:	6823      	ldr	r3, [r4, #0]
 800c7b2:	60d8      	str	r0, [r3, #12]
 800c7b4:	e003      	b.n	800c7be <UART_SetConfig+0x1de>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c7b6:	f7fd fdbf 	bl	800a338 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d1d2      	bne.n	800c764 <UART_SetConfig+0x184>
 800c7be:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800c7c6:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800c7ca:	6723      	str	r3, [r4, #112]	; 0x70
}
 800c7cc:	b006      	add	sp, #24
 800c7ce:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7d2:	a803      	add	r0, sp, #12
 800c7d4:	f7fd fe68 	bl	800a4a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c7d8:	9804      	ldr	r0, [sp, #16]
        break;
 800c7da:	e7ee      	b.n	800c7ba <UART_SetConfig+0x1da>
        pclk = (uint32_t) LSE_VALUE;
 800c7dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c7e0:	e7c0      	b.n	800c764 <UART_SetConfig+0x184>
        pclk = (uint32_t) CSI_VALUE;
 800c7e2:	4846      	ldr	r0, [pc, #280]	; (800c8fc <UART_SetConfig+0x31c>)
 800c7e4:	e7be      	b.n	800c764 <UART_SetConfig+0x184>
    switch (clocksource)
 800c7e6:	2b20      	cmp	r3, #32
 800c7e8:	d037      	beq.n	800c85a <UART_SetConfig+0x27a>
 800c7ea:	2b40      	cmp	r3, #64	; 0x40
 800c7ec:	d00b      	beq.n	800c806 <UART_SetConfig+0x226>
 800c7ee:	2b10      	cmp	r3, #16
 800c7f0:	d198      	bne.n	800c724 <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7f2:	4b2e      	ldr	r3, [pc, #184]	; (800c8ac <UART_SetConfig+0x2cc>)
 800c7f4:	483e      	ldr	r0, [pc, #248]	; (800c8f0 <UART_SetConfig+0x310>)
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	f012 0f20 	tst.w	r2, #32
 800c7fc:	d003      	beq.n	800c806 <UART_SetConfig+0x226>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c804:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c806:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c808:	4b3a      	ldr	r3, [pc, #232]	; (800c8f4 <UART_SetConfig+0x314>)
 800c80a:	6862      	ldr	r2, [r4, #4]
 800c80c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800c810:	fbb0 f0f3 	udiv	r0, r0, r3
 800c814:	0853      	lsrs	r3, r2, #1
 800c816:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800c81a:	fbb0 f0f2 	udiv	r0, r0, r2
 800c81e:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c820:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800c824:	f1a3 0110 	sub.w	r1, r3, #16
 800c828:	4291      	cmp	r1, r2
 800c82a:	f63f af7b 	bhi.w	800c724 <UART_SetConfig+0x144>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c82e:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c832:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800c836:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c838:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 800c83a:	4318      	orrs	r0, r3
 800c83c:	60d0      	str	r0, [r2, #12]
 800c83e:	e7be      	b.n	800c7be <UART_SetConfig+0x1de>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c840:	f7fc ffde 	bl	8009800 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c844:	2800      	cmp	r0, #0
 800c846:	d0ba      	beq.n	800c7be <UART_SetConfig+0x1de>
 800c848:	e7dd      	b.n	800c806 <UART_SetConfig+0x226>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c84a:	f7fc ffeb 	bl	8009824 <HAL_RCC_GetPCLK2Freq>
        break;
 800c84e:	e7f9      	b.n	800c844 <UART_SetConfig+0x264>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c850:	a803      	add	r0, sp, #12
 800c852:	f7fd fe29 	bl	800a4a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c856:	9804      	ldr	r0, [sp, #16]
        break;
 800c858:	e7f4      	b.n	800c844 <UART_SetConfig+0x264>
        pclk = (uint32_t) CSI_VALUE;
 800c85a:	4828      	ldr	r0, [pc, #160]	; (800c8fc <UART_SetConfig+0x31c>)
 800c85c:	e7d3      	b.n	800c806 <UART_SetConfig+0x226>
    switch (clocksource)
 800c85e:	2b08      	cmp	r3, #8
 800c860:	d06a      	beq.n	800c938 <UART_SetConfig+0x358>
 800c862:	d80a      	bhi.n	800c87a <UART_SetConfig+0x29a>
 800c864:	2b01      	cmp	r3, #1
 800c866:	d064      	beq.n	800c932 <UART_SetConfig+0x352>
 800c868:	d35d      	bcc.n	800c926 <UART_SetConfig+0x346>
 800c86a:	2b04      	cmp	r3, #4
 800c86c:	f47f af5a 	bne.w	800c724 <UART_SetConfig+0x144>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c870:	4668      	mov	r0, sp
 800c872:	f7fd fd73 	bl	800a35c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c876:	9801      	ldr	r0, [sp, #4]
        break;
 800c878:	e057      	b.n	800c92a <UART_SetConfig+0x34a>
    switch (clocksource)
 800c87a:	2b20      	cmp	r3, #32
 800c87c:	d061      	beq.n	800c942 <UART_SetConfig+0x362>
 800c87e:	2b40      	cmp	r3, #64	; 0x40
 800c880:	d03e      	beq.n	800c900 <UART_SetConfig+0x320>
 800c882:	2b10      	cmp	r3, #16
 800c884:	f47f af4e 	bne.w	800c724 <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c888:	4b08      	ldr	r3, [pc, #32]	; (800c8ac <UART_SetConfig+0x2cc>)
 800c88a:	4819      	ldr	r0, [pc, #100]	; (800c8f0 <UART_SetConfig+0x310>)
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	f012 0f20 	tst.w	r2, #32
 800c892:	d037      	beq.n	800c904 <UART_SetConfig+0x324>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c89a:	40d8      	lsrs	r0, r3
 800c89c:	e032      	b.n	800c904 <UART_SetConfig+0x324>
 800c89e:	bf00      	nop
 800c8a0:	cfff69f3 	.word	0xcfff69f3
 800c8a4:	58000c00 	.word	0x58000c00
 800c8a8:	40011000 	.word	0x40011000
 800c8ac:	58024400 	.word	0x58024400
 800c8b0:	080170a4 	.word	0x080170a4
 800c8b4:	40004400 	.word	0x40004400
 800c8b8:	080170cd 	.word	0x080170cd
 800c8bc:	40004800 	.word	0x40004800
 800c8c0:	080170cd 	.word	0x080170cd
 800c8c4:	40004c00 	.word	0x40004c00
 800c8c8:	080170cd 	.word	0x080170cd
 800c8cc:	40005000 	.word	0x40005000
 800c8d0:	080170cd 	.word	0x080170cd
 800c8d4:	40011400 	.word	0x40011400
 800c8d8:	080170a4 	.word	0x080170a4
 800c8dc:	40007800 	.word	0x40007800
 800c8e0:	080170cd 	.word	0x080170cd
 800c8e4:	40007c00 	.word	0x40007c00
 800c8e8:	080170cd 	.word	0x080170cd
 800c8ec:	080170d3 	.word	0x080170d3
 800c8f0:	03d09000 	.word	0x03d09000
 800c8f4:	080170da 	.word	0x080170da
 800c8f8:	000ffcff 	.word	0x000ffcff
 800c8fc:	003d0900 	.word	0x003d0900
        pclk = (uint32_t) LSE_VALUE;
 800c900:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c904:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c906:	4a10      	ldr	r2, [pc, #64]	; (800c948 <UART_SetConfig+0x368>)
 800c908:	6863      	ldr	r3, [r4, #4]
 800c90a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800c90e:	fbb0 f0f2 	udiv	r0, r0, r2
 800c912:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c916:	fbb0 f0f3 	udiv	r0, r0, r3
 800c91a:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c91c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800c920:	f1a0 0210 	sub.w	r2, r0, #16
 800c924:	e742      	b.n	800c7ac <UART_SetConfig+0x1cc>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c926:	f7fc ff6b 	bl	8009800 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c92a:	2800      	cmp	r0, #0
 800c92c:	f43f af47 	beq.w	800c7be <UART_SetConfig+0x1de>
 800c930:	e7e8      	b.n	800c904 <UART_SetConfig+0x324>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c932:	f7fc ff77 	bl	8009824 <HAL_RCC_GetPCLK2Freq>
        break;
 800c936:	e7f8      	b.n	800c92a <UART_SetConfig+0x34a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c938:	a803      	add	r0, sp, #12
 800c93a:	f7fd fdb5 	bl	800a4a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c93e:	9804      	ldr	r0, [sp, #16]
        break;
 800c940:	e7f3      	b.n	800c92a <UART_SetConfig+0x34a>
        pclk = (uint32_t) CSI_VALUE;
 800c942:	4802      	ldr	r0, [pc, #8]	; (800c94c <UART_SetConfig+0x36c>)
 800c944:	e7de      	b.n	800c904 <UART_SetConfig+0x324>
 800c946:	bf00      	nop
 800c948:	080170da 	.word	0x080170da
 800c94c:	003d0900 	.word	0x003d0900

0800c950 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c950:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c952:	07da      	lsls	r2, r3, #31
{
 800c954:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c956:	d506      	bpl.n	800c966 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c958:	6801      	ldr	r1, [r0, #0]
 800c95a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800c95c:	684a      	ldr	r2, [r1, #4]
 800c95e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c962:	4322      	orrs	r2, r4
 800c964:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c966:	079c      	lsls	r4, r3, #30
 800c968:	d506      	bpl.n	800c978 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c96a:	6801      	ldr	r1, [r0, #0]
 800c96c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800c96e:	684a      	ldr	r2, [r1, #4]
 800c970:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c974:	4322      	orrs	r2, r4
 800c976:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c978:	0759      	lsls	r1, r3, #29
 800c97a:	d506      	bpl.n	800c98a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c97c:	6801      	ldr	r1, [r0, #0]
 800c97e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c980:	684a      	ldr	r2, [r1, #4]
 800c982:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c986:	4322      	orrs	r2, r4
 800c988:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c98a:	071a      	lsls	r2, r3, #28
 800c98c:	d506      	bpl.n	800c99c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c98e:	6801      	ldr	r1, [r0, #0]
 800c990:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800c992:	684a      	ldr	r2, [r1, #4]
 800c994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c998:	4322      	orrs	r2, r4
 800c99a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c99c:	06dc      	lsls	r4, r3, #27
 800c99e:	d506      	bpl.n	800c9ae <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c9a0:	6801      	ldr	r1, [r0, #0]
 800c9a2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c9a4:	688a      	ldr	r2, [r1, #8]
 800c9a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c9aa:	4322      	orrs	r2, r4
 800c9ac:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c9ae:	0699      	lsls	r1, r3, #26
 800c9b0:	d506      	bpl.n	800c9c0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c9b2:	6801      	ldr	r1, [r0, #0]
 800c9b4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c9b6:	688a      	ldr	r2, [r1, #8]
 800c9b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c9bc:	4322      	orrs	r2, r4
 800c9be:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c9c0:	065a      	lsls	r2, r3, #25
 800c9c2:	d510      	bpl.n	800c9e6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c9c4:	6801      	ldr	r1, [r0, #0]
 800c9c6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800c9c8:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c9ca:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c9ce:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c9d2:	ea42 0204 	orr.w	r2, r2, r4
 800c9d6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c9d8:	d105      	bne.n	800c9e6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c9da:	684a      	ldr	r2, [r1, #4]
 800c9dc:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800c9de:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800c9e2:	4322      	orrs	r2, r4
 800c9e4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c9e6:	061b      	lsls	r3, r3, #24
 800c9e8:	d506      	bpl.n	800c9f8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c9ea:	6802      	ldr	r2, [r0, #0]
 800c9ec:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800c9ee:	6853      	ldr	r3, [r2, #4]
 800c9f0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c9f4:	430b      	orrs	r3, r1
 800c9f6:	6053      	str	r3, [r2, #4]
}
 800c9f8:	bd10      	pop	{r4, pc}

0800c9fa <UART_WaitOnFlagUntilTimeout>:
{
 800c9fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9fe:	9d06      	ldr	r5, [sp, #24]
 800ca00:	4604      	mov	r4, r0
 800ca02:	460f      	mov	r7, r1
 800ca04:	4616      	mov	r6, r2
 800ca06:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca08:	6821      	ldr	r1, [r4, #0]
 800ca0a:	69ca      	ldr	r2, [r1, #28]
 800ca0c:	ea37 0302 	bics.w	r3, r7, r2
 800ca10:	bf0c      	ite	eq
 800ca12:	2201      	moveq	r2, #1
 800ca14:	2200      	movne	r2, #0
 800ca16:	42b2      	cmp	r2, r6
 800ca18:	d001      	beq.n	800ca1e <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800ca1a:	2000      	movs	r0, #0
 800ca1c:	e01a      	b.n	800ca54 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800ca1e:	1c68      	adds	r0, r5, #1
 800ca20:	d0f3      	beq.n	800ca0a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca22:	f7f9 fc1d 	bl	8006260 <HAL_GetTick>
 800ca26:	eba0 0008 	sub.w	r0, r0, r8
 800ca2a:	42a8      	cmp	r0, r5
 800ca2c:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ca2e:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca30:	d800      	bhi.n	800ca34 <UART_WaitOnFlagUntilTimeout+0x3a>
 800ca32:	b98d      	cbnz	r5, 800ca58 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ca34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ca38:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca3a:	6883      	ldr	r3, [r0, #8]
 800ca3c:	f023 0301 	bic.w	r3, r3, #1
 800ca40:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800ca42:	2320      	movs	r3, #32
 800ca44:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800ca48:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800ca4c:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800ca4e:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800ca50:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 800ca54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ca58:	075a      	lsls	r2, r3, #29
 800ca5a:	d5d5      	bpl.n	800ca08 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ca5c:	69c3      	ldr	r3, [r0, #28]
 800ca5e:	051b      	lsls	r3, r3, #20
 800ca60:	d5d2      	bpl.n	800ca08 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca66:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ca68:	6803      	ldr	r3, [r0, #0]
 800ca6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ca6e:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca70:	6883      	ldr	r3, [r0, #8]
 800ca72:	f023 0301 	bic.w	r3, r3, #1
 800ca76:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800ca78:	2320      	movs	r3, #32
 800ca7a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800ca7e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca82:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800ca86:	e7e1      	b.n	800ca4c <UART_WaitOnFlagUntilTimeout+0x52>

0800ca88 <HAL_UART_Transmit>:
{
 800ca88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca8c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800ca8e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 800ca92:	4604      	mov	r4, r0
 800ca94:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800ca96:	2b20      	cmp	r3, #32
{
 800ca98:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800ca9a:	d14f      	bne.n	800cb3c <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 800ca9c:	2900      	cmp	r1, #0
 800ca9e:	d04b      	beq.n	800cb38 <HAL_UART_Transmit+0xb0>
 800caa0:	2a00      	cmp	r2, #0
 800caa2:	d049      	beq.n	800cb38 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 800caa4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d047      	beq.n	800cb3c <HAL_UART_Transmit+0xb4>
 800caac:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caae:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800cab0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cab4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cab6:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800caba:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 800cabe:	f7f9 fbcf 	bl	8006260 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cac2:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800cac4:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800cac6:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800caca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800cace:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cad2:	d103      	bne.n	800cadc <HAL_UART_Transmit+0x54>
 800cad4:	6923      	ldr	r3, [r4, #16]
 800cad6:	b90b      	cbnz	r3, 800cadc <HAL_UART_Transmit+0x54>
 800cad8:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800cada:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 800cadc:	2300      	movs	r3, #0
 800cade:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 800cae2:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cae6:	463b      	mov	r3, r7
 800cae8:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800caec:	b292      	uxth	r2, r2
 800caee:	b942      	cbnz	r2, 800cb02 <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800caf0:	2140      	movs	r1, #64	; 0x40
 800caf2:	4620      	mov	r0, r4
 800caf4:	f7ff ff81 	bl	800c9fa <UART_WaitOnFlagUntilTimeout>
 800caf8:	b948      	cbnz	r0, 800cb0e <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 800cafa:	2320      	movs	r3, #32
 800cafc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 800cb00:	e006      	b.n	800cb10 <HAL_UART_Transmit+0x88>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cb02:	2200      	movs	r2, #0
 800cb04:	2180      	movs	r1, #128	; 0x80
 800cb06:	4620      	mov	r0, r4
 800cb08:	f7ff ff77 	bl	800c9fa <UART_WaitOnFlagUntilTimeout>
 800cb0c:	b118      	cbz	r0, 800cb16 <HAL_UART_Transmit+0x8e>
        return HAL_TIMEOUT;
 800cb0e:	2003      	movs	r0, #3
}
 800cb10:	b003      	add	sp, #12
 800cb12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb16:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800cb18:	b95e      	cbnz	r6, 800cb32 <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cb1a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800cb1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cb22:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800cb24:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800cb28:	3b01      	subs	r3, #1
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800cb30:	e7d7      	b.n	800cae2 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cb32:	f816 3b01 	ldrb.w	r3, [r6], #1
 800cb36:	e7f4      	b.n	800cb22 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 800cb38:	2001      	movs	r0, #1
 800cb3a:	e7e9      	b.n	800cb10 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 800cb3c:	2002      	movs	r0, #2
 800cb3e:	e7e7      	b.n	800cb10 <HAL_UART_Transmit+0x88>

0800cb40 <UART_CheckIdleState>:
{
 800cb40:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb42:	2600      	movs	r6, #0
{
 800cb44:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb46:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 800cb4a:	f7f9 fb89 	bl	8006260 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb4e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800cb50:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	071a      	lsls	r2, r3, #28
 800cb56:	d417      	bmi.n	800cb88 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb58:	6823      	ldr	r3, [r4, #0]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	075b      	lsls	r3, r3, #29
 800cb5e:	d50a      	bpl.n	800cb76 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb64:	2200      	movs	r2, #0
 800cb66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	9300      	str	r3, [sp, #0]
 800cb6e:	462b      	mov	r3, r5
 800cb70:	f7ff ff43 	bl	800c9fa <UART_WaitOnFlagUntilTimeout>
 800cb74:	b9a0      	cbnz	r0, 800cba0 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 800cb76:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800cb78:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800cb7a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800cb7e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800cb82:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 800cb86:	e00c      	b.n	800cba2 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb8c:	4632      	mov	r2, r6
 800cb8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb92:	9300      	str	r3, [sp, #0]
 800cb94:	4603      	mov	r3, r0
 800cb96:	4620      	mov	r0, r4
 800cb98:	f7ff ff2f 	bl	800c9fa <UART_WaitOnFlagUntilTimeout>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d0db      	beq.n	800cb58 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800cba0:	2003      	movs	r0, #3
}
 800cba2:	b002      	add	sp, #8
 800cba4:	bd70      	pop	{r4, r5, r6, pc}

0800cba6 <HAL_UART_Init>:
{
 800cba6:	b510      	push	{r4, lr}
  if (huart == NULL)
 800cba8:	4604      	mov	r4, r0
 800cbaa:	b350      	cbz	r0, 800cc02 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800cbac:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800cbb0:	b91b      	cbnz	r3, 800cbba <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800cbb2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 800cbb6:	f7f6 fe51 	bl	800385c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800cbba:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800cbbc:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cbbe:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800cbc0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 800cbc4:	6813      	ldr	r3, [r2, #0]
 800cbc6:	f023 0301 	bic.w	r3, r3, #1
 800cbca:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cbcc:	f7ff fd08 	bl	800c5e0 <UART_SetConfig>
 800cbd0:	2801      	cmp	r0, #1
 800cbd2:	d016      	beq.n	800cc02 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cbd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cbd6:	b113      	cbz	r3, 800cbde <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f7ff feb9 	bl	800c950 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbde:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800cbe0:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbe2:	685a      	ldr	r2, [r3, #4]
 800cbe4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbe8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbea:	689a      	ldr	r2, [r3, #8]
 800cbec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cbf0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	f042 0201 	orr.w	r2, r2, #1
}
 800cbf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800cbfc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800cbfe:	f7ff bf9f 	b.w	800cb40 <UART_CheckIdleState>
}
 800cc02:	2001      	movs	r0, #1
 800cc04:	bd10      	pop	{r4, pc}
	...

0800cc08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cc08:	b084      	sub	sp, #16
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800cc0a:	f240 1307 	movw	r3, #263	; 0x107
 800cc0e:	4a17      	ldr	r2, [pc, #92]	; (800cc6c <UARTEx_SetNbDataToProcess+0x64>)
 800cc10:	e9cd 2300 	strd	r2, r3, [sp]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800cc14:	4b16      	ldr	r3, [pc, #88]	; (800cc70 <UARTEx_SetNbDataToProcess+0x68>)
 800cc16:	9302      	str	r3, [sp, #8]
 800cc18:	f1a3 2303 	sub.w	r3, r3, #50332416	; 0x3000300
 800cc1c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800cc20:	9303      	str	r3, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cc22:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800cc24:	b923      	cbnz	r3, 800cc30 <UARTEx_SetNbDataToProcess+0x28>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 800cc26:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800cc2a:	6683      	str	r3, [r0, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc2c:	b004      	add	sp, #16
 800cc2e:	4770      	bx	lr
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc30:	6802      	ldr	r2, [r0, #0]
 800cc32:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc34:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800cc36:	aa04      	add	r2, sp, #16
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800cc38:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800cc3c:	eb02 7151 	add.w	r1, r2, r1, lsr #29
 800cc40:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800cc44:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 800cc48:	0112      	lsls	r2, r2, #4
 800cc4a:	fb92 f2f1 	sdiv	r2, r2, r1
 800cc4e:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800cc52:	aa04      	add	r2, sp, #16
 800cc54:	4413      	add	r3, r2
 800cc56:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800cc5a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800cc5e:	0112      	lsls	r2, r2, #4
 800cc60:	fb92 f3f3 	sdiv	r3, r2, r3
 800cc64:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 800cc68:	e7e0      	b.n	800cc2c <UARTEx_SetNbDataToProcess+0x24>
 800cc6a:	bf00      	nop
 800cc6c:	03010101 	.word	0x03010101
 800cc70:	04020408 	.word	0x04020408

0800cc74 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800cc74:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d014      	beq.n	800cca6 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc7c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800cc7e:	2324      	movs	r3, #36	; 0x24
 800cc80:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc84:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800cc86:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc88:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800cc8c:	f023 0301 	bic.w	r3, r3, #1
 800cc90:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc92:	2300      	movs	r3, #0
 800cc94:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc96:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800cc98:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800cc9a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_READY;
 800cc9e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return HAL_OK;
 800cca2:	4618      	mov	r0, r3
 800cca4:	4770      	bx	lr
  __HAL_LOCK(huart);
 800cca6:	2002      	movs	r0, #2
}
 800cca8:	4770      	bx	lr

0800ccaa <HAL_UARTEx_SetTxFifoThreshold>:
{
 800ccaa:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800ccac:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 800ccb0:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d01b      	beq.n	800ccee <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800ccbc:	2324      	movs	r3, #36	; 0x24
 800ccbe:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccc2:	6803      	ldr	r3, [r0, #0]
 800ccc4:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	f022 0201 	bic.w	r2, r2, #1
 800cccc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ccce:	689a      	ldr	r2, [r3, #8]
 800ccd0:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800ccd4:	4311      	orrs	r1, r2
 800ccd6:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800ccd8:	f7ff ff96 	bl	800cc08 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccdc:	6803      	ldr	r3, [r0, #0]
 800ccde:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800cce0:	2320      	movs	r3, #32
 800cce2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800cce6:	2000      	movs	r0, #0
 800cce8:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800ccec:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800ccee:	2002      	movs	r0, #2
 800ccf0:	e7fc      	b.n	800ccec <HAL_UARTEx_SetTxFifoThreshold+0x42>

0800ccf2 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800ccf2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800ccf4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 800ccf8:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d01b      	beq.n	800cd36 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800ccfe:	2301      	movs	r3, #1
 800cd00:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800cd04:	2324      	movs	r3, #36	; 0x24
 800cd06:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd0a:	6803      	ldr	r3, [r0, #0]
 800cd0c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	f022 0201 	bic.w	r2, r2, #1
 800cd14:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cd16:	689a      	ldr	r2, [r3, #8]
 800cd18:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800cd1c:	4311      	orrs	r1, r2
 800cd1e:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800cd20:	f7ff ff72 	bl	800cc08 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd24:	6803      	ldr	r3, [r0, #0]
 800cd26:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800cd28:	2320      	movs	r3, #32
 800cd2a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800cd2e:	2000      	movs	r0, #0
 800cd30:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800cd34:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800cd36:	2002      	movs	r0, #2
 800cd38:	e7fc      	b.n	800cd34 <HAL_UARTEx_SetRxFifoThreshold+0x42>
	...

0800cd3c <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd3c:	4b12      	ldr	r3, [pc, #72]	; (800cd88 <SDMMC_GetCmdResp2+0x4c>)
 800cd3e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd48:	f241 3388 	movw	r3, #5000	; 0x1388
 800cd4c:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800cd4e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800cd52:	d315      	bcc.n	800cd80 <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800cd54:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cd56:	f012 0f45 	tst.w	r2, #69	; 0x45
 800cd5a:	d0f8      	beq.n	800cd4e <SDMMC_GetCmdResp2+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd5c:	0492      	lsls	r2, r2, #18
 800cd5e:	d4f6      	bmi.n	800cd4e <SDMMC_GetCmdResp2+0x12>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cd60:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cd62:	075b      	lsls	r3, r3, #29
 800cd64:	d503      	bpl.n	800cd6e <SDMMC_GetCmdResp2+0x32>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cd66:	2304      	movs	r3, #4

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cd68:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cd6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cd70:	f013 0301 	ands.w	r3, r3, #1
 800cd74:	d001      	beq.n	800cd7a <SDMMC_GetCmdResp2+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cd76:	2301      	movs	r3, #1
 800cd78:	e7f6      	b.n	800cd68 <SDMMC_GetCmdResp2+0x2c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cd7a:	4a04      	ldr	r2, [pc, #16]	; (800cd8c <SDMMC_GetCmdResp2+0x50>)
 800cd7c:	6382      	str	r2, [r0, #56]	; 0x38
 800cd7e:	e7f4      	b.n	800cd6a <SDMMC_GetCmdResp2+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800cd80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd84:	e7f1      	b.n	800cd6a <SDMMC_GetCmdResp2+0x2e>
 800cd86:	bf00      	nop
 800cd88:	24000000 	.word	0x24000000
 800cd8c:	002000c5 	.word	0x002000c5

0800cd90 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd90:	4b0f      	ldr	r3, [pc, #60]	; (800cdd0 <SDMMC_GetCmdResp3+0x40>)
 800cd92:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd9c:	f241 3388 	movw	r3, #5000	; 0x1388
 800cda0:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800cda2:	f113 33ff 	adds.w	r3, r3, #4294967295
 800cda6:	d310      	bcc.n	800cdca <SDMMC_GetCmdResp3+0x3a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800cda8:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cdaa:	f012 0f45 	tst.w	r2, #69	; 0x45
 800cdae:	d0f8      	beq.n	800cda2 <SDMMC_GetCmdResp3+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cdb0:	0492      	lsls	r2, r2, #18
 800cdb2:	d4f6      	bmi.n	800cda2 <SDMMC_GetCmdResp3+0x12>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cdb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cdb6:	f013 0304 	ands.w	r3, r3, #4
 800cdba:	d003      	beq.n	800cdc4 <SDMMC_GetCmdResp3+0x34>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cdbc:	2304      	movs	r3, #4
 800cdbe:	6383      	str	r3, [r0, #56]	; 0x38
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cdc4:	4a03      	ldr	r2, [pc, #12]	; (800cdd4 <SDMMC_GetCmdResp3+0x44>)
 800cdc6:	6382      	str	r2, [r0, #56]	; 0x38
 800cdc8:	e7fa      	b.n	800cdc0 <SDMMC_GetCmdResp3+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800cdca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800cdce:	4770      	bx	lr
 800cdd0:	24000000 	.word	0x24000000
 800cdd4:	002000c5 	.word	0x002000c5

0800cdd8 <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cdd8:	4b44      	ldr	r3, [pc, #272]	; (800ceec <SDMMC_GetCmdResp1+0x114>)
{
 800cdda:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 800cde2:	fbb3 f3f4 	udiv	r3, r3, r4
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800cde6:	4c42      	ldr	r4, [pc, #264]	; (800cef0 <SDMMC_GetCmdResp1+0x118>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cde8:	435a      	muls	r2, r3
    if (count-- == 0U)
 800cdea:	2a00      	cmp	r2, #0
 800cdec:	d049      	beq.n	800ce82 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 800cdee:	6b43      	ldr	r3, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cdf0:	4223      	tst	r3, r4
 800cdf2:	d008      	beq.n	800ce06 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800cdf4:	049b      	lsls	r3, r3, #18
 800cdf6:	d406      	bmi.n	800ce06 <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cdf8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cdfa:	075b      	lsls	r3, r3, #29
 800cdfc:	d505      	bpl.n	800ce0a <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cdfe:	2304      	movs	r3, #4
 800ce00:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce02:	4618      	mov	r0, r3
}
 800ce04:	bd10      	pop	{r4, pc}
 800ce06:	3a01      	subs	r2, #1
 800ce08:	e7ef      	b.n	800cdea <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ce0c:	07dc      	lsls	r4, r3, #31
 800ce0e:	d503      	bpl.n	800ce18 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ce10:	2301      	movs	r3, #1
 800ce12:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce14:	2001      	movs	r0, #1
 800ce16:	e7f5      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce18:	4b36      	ldr	r3, [pc, #216]	; (800cef4 <SDMMC_GetCmdResp1+0x11c>)
 800ce1a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ce1c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	4299      	cmp	r1, r3
 800ce22:	d1f7      	bne.n	800ce14 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 800ce24:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ce26:	4834      	ldr	r0, [pc, #208]	; (800cef8 <SDMMC_GetCmdResp1+0x120>)
 800ce28:	4018      	ands	r0, r3
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	d0ea      	beq.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	db2a      	blt.n	800ce88 <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ce32:	005a      	lsls	r2, r3, #1
 800ce34:	d42b      	bmi.n	800ce8e <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ce36:	009c      	lsls	r4, r3, #2
 800ce38:	d42b      	bmi.n	800ce92 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ce3a:	00d9      	lsls	r1, r3, #3
 800ce3c:	d42b      	bmi.n	800ce96 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ce3e:	011a      	lsls	r2, r3, #4
 800ce40:	d42c      	bmi.n	800ce9c <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ce42:	015c      	lsls	r4, r3, #5
 800ce44:	d42d      	bmi.n	800cea2 <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ce46:	01d9      	lsls	r1, r3, #7
 800ce48:	d42e      	bmi.n	800cea8 <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ce4a:	021a      	lsls	r2, r3, #8
 800ce4c:	d42f      	bmi.n	800ceae <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ce4e:	025c      	lsls	r4, r3, #9
 800ce50:	d430      	bmi.n	800ceb4 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ce52:	0299      	lsls	r1, r3, #10
 800ce54:	d431      	bmi.n	800ceba <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ce56:	02da      	lsls	r2, r3, #11
 800ce58:	d432      	bmi.n	800cec0 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ce5a:	035c      	lsls	r4, r3, #13
 800ce5c:	d433      	bmi.n	800cec6 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ce5e:	0399      	lsls	r1, r3, #14
 800ce60:	d434      	bmi.n	800cecc <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ce62:	03da      	lsls	r2, r3, #15
 800ce64:	d435      	bmi.n	800ced2 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ce66:	041c      	lsls	r4, r3, #16
 800ce68:	d436      	bmi.n	800ced8 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ce6a:	0459      	lsls	r1, r3, #17
 800ce6c:	d437      	bmi.n	800cede <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ce6e:	049a      	lsls	r2, r3, #18
 800ce70:	d438      	bmi.n	800cee4 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ce72:	f013 0f08 	tst.w	r3, #8
 800ce76:	bf0c      	ite	eq
 800ce78:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800ce7c:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800ce80:	e7c0      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800ce82:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800ce86:	e7bd      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ce88:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800ce8c:	e7ba      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ce8e:	2040      	movs	r0, #64	; 0x40
 800ce90:	e7b8      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ce92:	2080      	movs	r0, #128	; 0x80
 800ce94:	e7b6      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ce96:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ce9a:	e7b3      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ce9c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cea0:	e7b0      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cea2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800cea6:	e7ad      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cea8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ceac:	e7aa      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ceae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ceb2:	e7a7      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ceb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ceb8:	e7a4      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ceba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800cebe:	e7a1      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 800cec0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800cec4:	e79e      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cec6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ceca:	e79b      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cecc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ced0:	e798      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ced2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ced6:	e795      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ced8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cedc:	e792      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cede:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800cee2:	e78f      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 800cee4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800cee8:	e78c      	b.n	800ce04 <SDMMC_GetCmdResp1+0x2c>
 800ceea:	bf00      	nop
 800ceec:	24000000 	.word	0x24000000
 800cef0:	00200045 	.word	0x00200045
 800cef4:	002000c5 	.word	0x002000c5
 800cef8:	fdffe008 	.word	0xfdffe008

0800cefc <SDMMC_Init>:
{
 800cefc:	b084      	sub	sp, #16
 800cefe:	b510      	push	{r4, lr}
 800cf00:	ac03      	add	r4, sp, #12
 800cf02:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800cf06:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cf0a:	6841      	ldr	r1, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 800cf0c:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 800cf0e:	9a05      	ldr	r2, [sp, #20]
 800cf10:	4313      	orrs	r3, r2
             Init.BusWide             |\
 800cf12:	9a06      	ldr	r2, [sp, #24]
 800cf14:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 800cf16:	9a07      	ldr	r2, [sp, #28]
 800cf18:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cf1a:	4a04      	ldr	r2, [pc, #16]	; (800cf2c <SDMMC_Init+0x30>)
 800cf1c:	400a      	ands	r2, r1
}
 800cf1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cf22:	4313      	orrs	r3, r2
}
 800cf24:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cf26:	6043      	str	r3, [r0, #4]
}
 800cf28:	2000      	movs	r0, #0
 800cf2a:	4770      	bx	lr
 800cf2c:	ffc02c00 	.word	0xffc02c00

0800cf30 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800cf30:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800cf34:	4770      	bx	lr

0800cf36 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800cf36:	680b      	ldr	r3, [r1, #0]
 800cf38:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800cf3c:	2000      	movs	r0, #0
 800cf3e:	4770      	bx	lr

0800cf40 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800cf40:	6803      	ldr	r3, [r0, #0]
 800cf42:	f043 0303 	orr.w	r3, r3, #3
 800cf46:	6003      	str	r3, [r0, #0]
}
 800cf48:	2000      	movs	r0, #0
 800cf4a:	4770      	bx	lr

0800cf4c <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800cf4c:	6800      	ldr	r0, [r0, #0]
}
 800cf4e:	f000 0003 	and.w	r0, r0, #3
 800cf52:	4770      	bx	lr

0800cf54 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800cf54:	680b      	ldr	r3, [r1, #0]
{
 800cf56:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 800cf58:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cf5a:	68c4      	ldr	r4, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cf5c:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 800cf60:	4313      	orrs	r3, r2
                       Command->Response         |\
 800cf62:	68ca      	ldr	r2, [r1, #12]
 800cf64:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800cf66:	690a      	ldr	r2, [r1, #16]
 800cf68:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cf6a:	4a03      	ldr	r2, [pc, #12]	; (800cf78 <SDMMC_SendCommand+0x24>)
 800cf6c:	4022      	ands	r2, r4
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	60c3      	str	r3, [r0, #12]
}
 800cf72:	2000      	movs	r0, #0
 800cf74:	bd10      	pop	{r4, pc}
 800cf76:	bf00      	nop
 800cf78:	fffee0c0 	.word	0xfffee0c0

0800cf7c <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cf7c:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800cf7e:	5840      	ldr	r0, [r0, r1]
}
 800cf80:	4770      	bx	lr

0800cf82 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cf82:	680b      	ldr	r3, [r1, #0]
{
 800cf84:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cf86:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800cf88:	684b      	ldr	r3, [r1, #4]
 800cf8a:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cf8c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf8e:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cf92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf96:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 800cf98:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 800cf9a:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 800cf9c:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800cf9e:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	bd10      	pop	{r4, pc}

0800cfa8 <SDMMC_CmdBlockLength>:
{
 800cfa8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfaa:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800cfae:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfb0:	2410      	movs	r4, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfb2:	2200      	movs	r2, #0
{
 800cfb4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cfb6:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfb8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfba:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfc6:	f7ff ffc5 	bl	800cf54 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cfca:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfce:	4621      	mov	r1, r4
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	f7ff ff01 	bl	800cdd8 <SDMMC_GetCmdResp1>
}
 800cfd6:	b007      	add	sp, #28
 800cfd8:	bd30      	pop	{r4, r5, pc}

0800cfda <SDMMC_CmdReadSingleBlock>:
{
 800cfda:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfdc:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800cfe0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfe2:	2411      	movs	r4, #17
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfe4:	2200      	movs	r2, #0
{
 800cfe6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cfe8:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfea:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfec:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cff4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cff8:	f7ff ffac 	bl	800cf54 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cffc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d000:	4621      	mov	r1, r4
 800d002:	4628      	mov	r0, r5
 800d004:	f7ff fee8 	bl	800cdd8 <SDMMC_GetCmdResp1>
}
 800d008:	b007      	add	sp, #28
 800d00a:	bd30      	pop	{r4, r5, pc}

0800d00c <SDMMC_CmdReadMultiBlock>:
{
 800d00c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d00e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800d012:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d014:	2412      	movs	r4, #18
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d016:	2200      	movs	r2, #0
{
 800d018:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d01a:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d01c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d01e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d026:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d02a:	f7ff ff93 	bl	800cf54 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d02e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d032:	4621      	mov	r1, r4
 800d034:	4628      	mov	r0, r5
 800d036:	f7ff fecf 	bl	800cdd8 <SDMMC_GetCmdResp1>
}
 800d03a:	b007      	add	sp, #28
 800d03c:	bd30      	pop	{r4, r5, pc}

0800d03e <SDMMC_CmdWriteSingleBlock>:
{
 800d03e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d040:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800d044:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d046:	2418      	movs	r4, #24
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d048:	2200      	movs	r2, #0
{
 800d04a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d04c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d04e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d050:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d058:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d05c:	f7ff ff7a 	bl	800cf54 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d060:	f241 3288 	movw	r2, #5000	; 0x1388
 800d064:	4621      	mov	r1, r4
 800d066:	4628      	mov	r0, r5
 800d068:	f7ff feb6 	bl	800cdd8 <SDMMC_GetCmdResp1>
}
 800d06c:	b007      	add	sp, #28
 800d06e:	bd30      	pop	{r4, r5, pc}

0800d070 <SDMMC_CmdWriteMultiBlock>:
{
 800d070:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d072:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800d076:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d078:	2419      	movs	r4, #25
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d07a:	2200      	movs	r2, #0
{
 800d07c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d07e:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d080:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d082:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d08a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d08e:	f7ff ff61 	bl	800cf54 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d092:	f241 3288 	movw	r2, #5000	; 0x1388
 800d096:	4621      	mov	r1, r4
 800d098:	4628      	mov	r0, r5
 800d09a:	f7ff fe9d 	bl	800cdd8 <SDMMC_GetCmdResp1>
}
 800d09e:	b007      	add	sp, #28
 800d0a0:	bd30      	pop	{r4, r5, pc}
	...

0800d0a4 <SDMMC_CmdStopTransfer>:
{
 800d0a4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d0a6:	2300      	movs	r3, #0
{
 800d0a8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d0aa:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0ac:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800d0b0:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0b2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0b4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d0b8:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0c0:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d0c2:	68c3      	ldr	r3, [r0, #12]
 800d0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0c8:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d0ca:	68c3      	ldr	r3, [r0, #12]
 800d0cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0d0:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0d2:	f7ff ff3f 	bl	800cf54 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d0d6:	4a07      	ldr	r2, [pc, #28]	; (800d0f4 <SDMMC_CmdStopTransfer+0x50>)
 800d0d8:	4629      	mov	r1, r5
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f7ff fe7c 	bl	800cdd8 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0e0:	68e3      	ldr	r3, [r4, #12]
}
 800d0e2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800d0e6:	bf08      	it	eq
 800d0e8:	2000      	moveq	r0, #0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0ee:	60e3      	str	r3, [r4, #12]
}
 800d0f0:	b007      	add	sp, #28
 800d0f2:	bd30      	pop	{r4, r5, pc}
 800d0f4:	05f5e100 	.word	0x05f5e100

0800d0f8 <SDMMC_CmdSelDesel>:
{
 800d0f8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0fa:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800d0fe:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d100:	2407      	movs	r4, #7
{
 800d102:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d104:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d106:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d108:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d10a:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d10e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d112:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d116:	f7ff ff1d 	bl	800cf54 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d11a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d11e:	4621      	mov	r1, r4
 800d120:	4628      	mov	r0, r5
 800d122:	f7ff fe59 	bl	800cdd8 <SDMMC_GetCmdResp1>
}
 800d126:	b007      	add	sp, #28
 800d128:	bd30      	pop	{r4, r5, pc}
	...

0800d12c <SDMMC_CmdGoIdleState>:
{
 800d12c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 800d12e:	2300      	movs	r3, #0
{
 800d130:	b086      	sub	sp, #24
 800d132:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d134:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d136:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d13a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d13e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d142:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d144:	f7ff ff06 	bl	800cf54 <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d148:	4b0b      	ldr	r3, [pc, #44]	; (800d178 <SDMMC_CmdGoIdleState+0x4c>)
 800d14a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	fbb3 f2f2 	udiv	r2, r3, r2
 800d154:	f241 3388 	movw	r3, #5000	; 0x1388
 800d158:	4353      	muls	r3, r2
    if (count-- == 0U)
 800d15a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800d15e:	d307      	bcc.n	800d170 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d160:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d162:	0612      	lsls	r2, r2, #24
 800d164:	d5f9      	bpl.n	800d15a <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d166:	4b05      	ldr	r3, [pc, #20]	; (800d17c <SDMMC_CmdGoIdleState+0x50>)
  return SDMMC_ERROR_NONE;
 800d168:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d16a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800d16c:	b006      	add	sp, #24
 800d16e:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800d170:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800d174:	e7fa      	b.n	800d16c <SDMMC_CmdGoIdleState+0x40>
 800d176:	bf00      	nop
 800d178:	24000000 	.word	0x24000000
 800d17c:	002000c5 	.word	0x002000c5

0800d180 <SDMMC_CmdOperCond>:
{
 800d180:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d182:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
{
 800d186:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d188:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d18a:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 800d18e:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d190:	e9cd 1301 	strd	r1, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d194:	2300      	movs	r3, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d196:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d198:	e9cd c303 	strd	ip, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d19c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1a0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1a2:	f7ff fed7 	bl	800cf54 <SDMMC_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d1a6:	4b15      	ldr	r3, [pc, #84]	; (800d1fc <SDMMC_CmdOperCond+0x7c>)
 800d1a8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	fbb3 f2f2 	udiv	r2, r3, r2
 800d1b2:	f241 3388 	movw	r3, #5000	; 0x1388
 800d1b6:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800d1b8:	f113 33ff 	adds.w	r3, r3, #4294967295
 800d1bc:	d31a      	bcc.n	800d1f4 <SDMMC_CmdOperCond+0x74>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800d1be:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d1c0:	f012 0f45 	tst.w	r2, #69	; 0x45
 800d1c4:	d0f8      	beq.n	800d1b8 <SDMMC_CmdOperCond+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d1c6:	0492      	lsls	r2, r2, #18
 800d1c8:	d4f6      	bmi.n	800d1b8 <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d1ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1cc:	075b      	lsls	r3, r3, #29
 800d1ce:	d503      	bpl.n	800d1d8 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d1d0:	2004      	movs	r0, #4
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d1d2:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800d1d4:	b006      	add	sp, #24
 800d1d6:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d1d8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d1da:	f012 0201 	ands.w	r2, r2, #1
 800d1de:	d001      	beq.n	800d1e4 <SDMMC_CmdOperCond+0x64>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d1e0:	2001      	movs	r0, #1
 800d1e2:	e7f6      	b.n	800d1d2 <SDMMC_CmdOperCond+0x52>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d1e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800d1e6:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800d1ea:	d0f3      	beq.n	800d1d4 <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d1ec:	2340      	movs	r3, #64	; 0x40
  }

  return SDMMC_ERROR_NONE;
 800d1ee:	4610      	mov	r0, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d1f0:	63a3      	str	r3, [r4, #56]	; 0x38
 800d1f2:	e7ef      	b.n	800d1d4 <SDMMC_CmdOperCond+0x54>
      return SDMMC_ERROR_TIMEOUT;
 800d1f4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800d1f8:	e7ec      	b.n	800d1d4 <SDMMC_CmdOperCond+0x54>
 800d1fa:	bf00      	nop
 800d1fc:	24000000 	.word	0x24000000

0800d200 <SDMMC_CmdAppCommand>:
{
 800d200:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d202:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800d206:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d208:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d20a:	2200      	movs	r2, #0
{
 800d20c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d20e:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d210:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d212:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d21a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d21e:	f7ff fe99 	bl	800cf54 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d222:	f241 3288 	movw	r2, #5000	; 0x1388
 800d226:	4621      	mov	r1, r4
 800d228:	4628      	mov	r0, r5
 800d22a:	f7ff fdd5 	bl	800cdd8 <SDMMC_GetCmdResp1>
}
 800d22e:	b007      	add	sp, #28
 800d230:	bd30      	pop	{r4, r5, pc}

0800d232 <SDMMC_CmdAppOperCommand>:
{
 800d232:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d234:	2229      	movs	r2, #41	; 0x29
{
 800d236:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d238:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800d23c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800d23e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d240:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d242:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d24a:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d24e:	a901      	add	r1, sp, #4
 800d250:	f7ff fe80 	bl	800cf54 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d254:	4620      	mov	r0, r4
 800d256:	f7ff fd9b 	bl	800cd90 <SDMMC_GetCmdResp3>
}
 800d25a:	b006      	add	sp, #24
 800d25c:	bd10      	pop	{r4, pc}

0800d25e <SDMMC_CmdBusWidth>:
{
 800d25e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d260:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800d264:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d266:	2406      	movs	r4, #6
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d268:	2200      	movs	r2, #0
{
 800d26a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d26c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d26e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d270:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d278:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d27c:	f7ff fe6a 	bl	800cf54 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d280:	f241 3288 	movw	r2, #5000	; 0x1388
 800d284:	4621      	mov	r1, r4
 800d286:	4628      	mov	r0, r5
 800d288:	f7ff fda6 	bl	800cdd8 <SDMMC_GetCmdResp1>
}
 800d28c:	b007      	add	sp, #28
 800d28e:	bd30      	pop	{r4, r5, pc}

0800d290 <SDMMC_CmdSendSCR>:
{
 800d290:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d292:	2300      	movs	r3, #0
{
 800d294:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d296:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d298:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800d29c:	4605      	mov	r5, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d29e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2a0:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d2a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2ac:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2ae:	f7ff fe51 	bl	800cf54 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d2b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2b6:	4621      	mov	r1, r4
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	f7ff fd8d 	bl	800cdd8 <SDMMC_GetCmdResp1>
}
 800d2be:	b007      	add	sp, #28
 800d2c0:	bd30      	pop	{r4, r5, pc}

0800d2c2 <SDMMC_CmdSendCID>:
{
 800d2c2:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d2c4:	2300      	movs	r3, #0
{
 800d2c6:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d2c8:	2202      	movs	r2, #2
{
 800d2ca:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2cc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d2ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d2d2:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2d6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2de:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2e0:	f7ff fe38 	bl	800cf54 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d2e4:	4620      	mov	r0, r4
 800d2e6:	f7ff fd29 	bl	800cd3c <SDMMC_GetCmdResp2>
}
 800d2ea:	b006      	add	sp, #24
 800d2ec:	bd10      	pop	{r4, pc}

0800d2ee <SDMMC_CmdSendCSD>:
{
 800d2ee:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d2f0:	2209      	movs	r2, #9
{
 800d2f2:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d2f4:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 800d2f8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800d2fa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2fc:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d2fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d306:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d30a:	a901      	add	r1, sp, #4
 800d30c:	f7ff fe22 	bl	800cf54 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d310:	4620      	mov	r0, r4
 800d312:	f7ff fd13 	bl	800cd3c <SDMMC_GetCmdResp2>
}
 800d316:	b006      	add	sp, #24
 800d318:	bd10      	pop	{r4, pc}
	...

0800d31c <SDMMC_CmdSetRelAdd>:
{
 800d31c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d31e:	2300      	movs	r3, #0
{
 800d320:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d322:	2203      	movs	r2, #3
{
 800d324:	460d      	mov	r5, r1
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d326:	a901      	add	r1, sp, #4
{
 800d328:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d32a:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d32e:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d332:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d33a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d33c:	f7ff fe0a 	bl	800cf54 <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d340:	4b1e      	ldr	r3, [pc, #120]	; (800d3bc <SDMMC_CmdSetRelAdd+0xa0>)
 800d342:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	fbb3 f2f2 	udiv	r2, r3, r2
 800d34c:	f241 3388 	movw	r3, #5000	; 0x1388
 800d350:	4353      	muls	r3, r2
    if (count-- == 0U)
 800d352:	f113 33ff 	adds.w	r3, r3, #4294967295
 800d356:	d328      	bcc.n	800d3aa <SDMMC_CmdSetRelAdd+0x8e>
    sta_reg = SDMMCx->STA;
 800d358:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d35a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800d35e:	d0f8      	beq.n	800d352 <SDMMC_CmdSetRelAdd+0x36>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d360:	0492      	lsls	r2, r2, #18
 800d362:	d4f6      	bmi.n	800d352 <SDMMC_CmdSetRelAdd+0x36>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d364:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d366:	0758      	lsls	r0, r3, #29
 800d368:	d503      	bpl.n	800d372 <SDMMC_CmdSetRelAdd+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d36a:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d36c:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800d36e:	b007      	add	sp, #28
 800d370:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d372:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d374:	07d9      	lsls	r1, r3, #31
 800d376:	d501      	bpl.n	800d37c <SDMMC_CmdSetRelAdd+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d378:	2001      	movs	r0, #1
 800d37a:	e7f7      	b.n	800d36c <SDMMC_CmdSetRelAdd+0x50>
  return (uint8_t)(SDMMCx->RESPCMD);
 800d37c:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	2b03      	cmp	r3, #3
 800d382:	d115      	bne.n	800d3b0 <SDMMC_CmdSetRelAdd+0x94>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d384:	4b0e      	ldr	r3, [pc, #56]	; (800d3c0 <SDMMC_CmdSetRelAdd+0xa4>)
 800d386:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800d388:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d38a:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800d38e:	d102      	bne.n	800d396 <SDMMC_CmdSetRelAdd+0x7a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d390:	0c1b      	lsrs	r3, r3, #16
 800d392:	802b      	strh	r3, [r5, #0]
 800d394:	e7eb      	b.n	800d36e <SDMMC_CmdSetRelAdd+0x52>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d396:	045a      	lsls	r2, r3, #17
 800d398:	d40c      	bmi.n	800d3b4 <SDMMC_CmdSetRelAdd+0x98>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d39a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800d39e:	bf0c      	ite	eq
 800d3a0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800d3a4:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800d3a8:	e7e1      	b.n	800d36e <SDMMC_CmdSetRelAdd+0x52>
      return SDMMC_ERROR_TIMEOUT;
 800d3aa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800d3ae:	e7de      	b.n	800d36e <SDMMC_CmdSetRelAdd+0x52>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3b0:	2001      	movs	r0, #1
 800d3b2:	e7dc      	b.n	800d36e <SDMMC_CmdSetRelAdd+0x52>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d3b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d3b8:	e7d9      	b.n	800d36e <SDMMC_CmdSetRelAdd+0x52>
 800d3ba:	bf00      	nop
 800d3bc:	24000000 	.word	0x24000000
 800d3c0:	002000c5 	.word	0x002000c5

0800d3c4 <SDMMC_CmdSendStatus>:
{
 800d3c4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3c6:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800d3ca:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3cc:	240d      	movs	r4, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3ce:	2200      	movs	r2, #0
{
 800d3d0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 800d3d2:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3d4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3d6:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3de:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3e2:	f7ff fdb7 	bl	800cf54 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d3e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3ea:	4621      	mov	r1, r4
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	f7ff fcf3 	bl	800cdd8 <SDMMC_GetCmdResp1>
}
 800d3f2:	b007      	add	sp, #28
 800d3f4:	bd30      	pop	{r4, r5, pc}

0800d3f6 <SDMMC_CmdStatusRegister>:
{
 800d3f6:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d3f8:	2300      	movs	r3, #0
{
 800d3fa:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d3fc:	240d      	movs	r4, #13
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3fe:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800d402:	4605      	mov	r5, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d404:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d406:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d40a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d40e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d412:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d414:	f7ff fd9e 	bl	800cf54 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d418:	f241 3288 	movw	r2, #5000	; 0x1388
 800d41c:	4621      	mov	r1, r4
 800d41e:	4628      	mov	r0, r5
 800d420:	f7ff fcda 	bl	800cdd8 <SDMMC_GetCmdResp1>
}
 800d424:	b007      	add	sp, #28
 800d426:	bd30      	pop	{r4, r5, pc}

0800d428 <SDMMC_CmdVoltageSwitch>:
{
 800d428:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d42a:	2300      	movs	r3, #0
{
 800d42c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d42e:	240b      	movs	r4, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d430:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800d434:	4605      	mov	r5, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d436:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d438:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d43c:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d444:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d446:	f7ff fd85 	bl	800cf54 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800d44a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d44e:	4621      	mov	r1, r4
 800d450:	4628      	mov	r0, r5
 800d452:	f7ff fcc1 	bl	800cdd8 <SDMMC_GetCmdResp1>
}
 800d456:	b007      	add	sp, #28
 800d458:	bd30      	pop	{r4, r5, pc}
	...

0800d45c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d45c:	4b0a      	ldr	r3, [pc, #40]	; (800d488 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d45e:	3b01      	subs	r3, #1
 800d460:	d00f      	beq.n	800d482 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d462:	6902      	ldr	r2, [r0, #16]
 800d464:	2a00      	cmp	r2, #0
 800d466:	dafa      	bge.n	800d45e <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d468:	6903      	ldr	r3, [r0, #16]
 800d46a:	4a07      	ldr	r2, [pc, #28]	; (800d488 <USB_CoreReset+0x2c>)
 800d46c:	f043 0301 	orr.w	r3, r3, #1
 800d470:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800d472:	3a01      	subs	r2, #1
 800d474:	d005      	beq.n	800d482 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d476:	6903      	ldr	r3, [r0, #16]
 800d478:	f013 0301 	ands.w	r3, r3, #1
 800d47c:	d1f9      	bne.n	800d472 <USB_CoreReset+0x16>

  return HAL_OK;
 800d47e:	4618      	mov	r0, r3
 800d480:	4770      	bx	lr
      return HAL_TIMEOUT;
 800d482:	2003      	movs	r0, #3
}
 800d484:	4770      	bx	lr
 800d486:	bf00      	nop
 800d488:	00030d41 	.word	0x00030d41

0800d48c <USB_CoreInit>:
{
 800d48c:	b084      	sub	sp, #16
 800d48e:	b538      	push	{r3, r4, r5, lr}
 800d490:	ad05      	add	r5, sp, #20
 800d492:	4604      	mov	r4, r0
 800d494:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d126      	bne.n	800d4ec <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d49e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d4a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d4a4:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d4a6:	68c3      	ldr	r3, [r0, #12]
 800d4a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d4ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4b0:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d4b2:	68c3      	ldr	r3, [r0, #12]
 800d4b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d4b8:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800d4ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d103      	bne.n	800d4c8 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d4c0:	68c3      	ldr	r3, [r0, #12]
 800d4c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4c6:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f7ff ffc7 	bl	800d45c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800d4ce:	9b08      	ldr	r3, [sp, #32]
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d107      	bne.n	800d4e4 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d4d4:	68a3      	ldr	r3, [r4, #8]
 800d4d6:	f043 0306 	orr.w	r3, r3, #6
 800d4da:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d4dc:	68a3      	ldr	r3, [r4, #8]
 800d4de:	f043 0320 	orr.w	r3, r3, #32
 800d4e2:	60a3      	str	r3, [r4, #8]
}
 800d4e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4e8:	b004      	add	sp, #16
 800d4ea:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d4ec:	68c3      	ldr	r3, [r0, #12]
 800d4ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4f2:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800d4f4:	f7ff ffb2 	bl	800d45c <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800d4f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4fa:	b923      	cbnz	r3, 800d506 <USB_CoreInit+0x7a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d4fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d4fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d502:	63a3      	str	r3, [r4, #56]	; 0x38
 800d504:	e7e3      	b.n	800d4ce <USB_CoreInit+0x42>
 800d506:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d50c:	e7f9      	b.n	800d502 <USB_CoreInit+0x76>
	...

0800d510 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800d510:	2a02      	cmp	r2, #2
 800d512:	d158      	bne.n	800d5c6 <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d514:	4b2e      	ldr	r3, [pc, #184]	; (800d5d0 <USB_SetTurnaroundTime+0xc0>)
 800d516:	4a2f      	ldr	r2, [pc, #188]	; (800d5d4 <USB_SetTurnaroundTime+0xc4>)
 800d518:	440b      	add	r3, r1
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d947      	bls.n	800d5ae <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d51e:	4b2e      	ldr	r3, [pc, #184]	; (800d5d8 <USB_SetTurnaroundTime+0xc8>)
 800d520:	4a2e      	ldr	r2, [pc, #184]	; (800d5dc <USB_SetTurnaroundTime+0xcc>)
 800d522:	440b      	add	r3, r1
 800d524:	4293      	cmp	r3, r2
 800d526:	d944      	bls.n	800d5b2 <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d528:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800d52c:	4a2c      	ldr	r2, [pc, #176]	; (800d5e0 <USB_SetTurnaroundTime+0xd0>)
 800d52e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800d532:	4293      	cmp	r3, r2
 800d534:	d93f      	bls.n	800d5b6 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d536:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800d53a:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 800d53e:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800d542:	32a0      	adds	r2, #160	; 0xa0
 800d544:	4293      	cmp	r3, r2
 800d546:	d938      	bls.n	800d5ba <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d548:	4b26      	ldr	r3, [pc, #152]	; (800d5e4 <USB_SetTurnaroundTime+0xd4>)
 800d54a:	4a27      	ldr	r2, [pc, #156]	; (800d5e8 <USB_SetTurnaroundTime+0xd8>)
 800d54c:	440b      	add	r3, r1
 800d54e:	4293      	cmp	r3, r2
 800d550:	d935      	bls.n	800d5be <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d552:	4b26      	ldr	r3, [pc, #152]	; (800d5ec <USB_SetTurnaroundTime+0xdc>)
 800d554:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 800d558:	440b      	add	r3, r1
 800d55a:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800d55e:	4293      	cmp	r3, r2
 800d560:	d92f      	bls.n	800d5c2 <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d562:	4b23      	ldr	r3, [pc, #140]	; (800d5f0 <USB_SetTurnaroundTime+0xe0>)
 800d564:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 800d568:	440b      	add	r3, r1
 800d56a:	f502 7220 	add.w	r2, r2, #640	; 0x280
 800d56e:	4293      	cmp	r3, r2
 800d570:	d929      	bls.n	800d5c6 <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d572:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800d576:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 800d57a:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 800d57e:	f502 7258 	add.w	r2, r2, #864	; 0x360
 800d582:	4293      	cmp	r3, r2
 800d584:	d921      	bls.n	800d5ca <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d586:	4b1b      	ldr	r3, [pc, #108]	; (800d5f4 <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 800d588:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d58c:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 800d58e:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 800d592:	4293      	cmp	r3, r2
 800d594:	bf94      	ite	ls
 800d596:	2307      	movls	r3, #7
 800d598:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d59a:	68c2      	ldr	r2, [r0, #12]
 800d59c:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800d5a0:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d5a2:	68c2      	ldr	r2, [r0, #12]
 800d5a4:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 800d5a8:	60c3      	str	r3, [r0, #12]
}
 800d5aa:	2000      	movs	r0, #0
 800d5ac:	4770      	bx	lr
      UsbTrd = 0xFU;
 800d5ae:	230f      	movs	r3, #15
 800d5b0:	e7f3      	b.n	800d59a <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 800d5b2:	230e      	movs	r3, #14
 800d5b4:	e7f1      	b.n	800d59a <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 800d5b6:	230d      	movs	r3, #13
 800d5b8:	e7ef      	b.n	800d59a <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 800d5ba:	230c      	movs	r3, #12
 800d5bc:	e7ed      	b.n	800d59a <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 800d5be:	230b      	movs	r3, #11
 800d5c0:	e7eb      	b.n	800d59a <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 800d5c2:	230a      	movs	r3, #10
 800d5c4:	e7e9      	b.n	800d59a <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d5c6:	2309      	movs	r3, #9
 800d5c8:	e7e7      	b.n	800d59a <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 800d5ca:	2308      	movs	r3, #8
 800d5cc:	e7e5      	b.n	800d59a <USB_SetTurnaroundTime+0x8a>
 800d5ce:	bf00      	nop
 800d5d0:	ff275340 	.word	0xff275340
 800d5d4:	000c34ff 	.word	0x000c34ff
 800d5d8:	ff1b1e40 	.word	0xff1b1e40
 800d5dc:	000f423f 	.word	0x000f423f
 800d5e0:	00124f7f 	.word	0x00124f7f
 800d5e4:	fee5b660 	.word	0xfee5b660
 800d5e8:	0016e35f 	.word	0x0016e35f
 800d5ec:	feced300 	.word	0xfeced300
 800d5f0:	feb35bc0 	.word	0xfeb35bc0
 800d5f4:	fe5954e0 	.word	0xfe5954e0

0800d5f8 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d5f8:	6883      	ldr	r3, [r0, #8]
 800d5fa:	f043 0301 	orr.w	r3, r3, #1
 800d5fe:	6083      	str	r3, [r0, #8]
}
 800d600:	2000      	movs	r0, #0
 800d602:	4770      	bx	lr

0800d604 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d604:	6883      	ldr	r3, [r0, #8]
 800d606:	f023 0301 	bic.w	r3, r3, #1
 800d60a:	6083      	str	r3, [r0, #8]
}
 800d60c:	2000      	movs	r0, #0
 800d60e:	4770      	bx	lr

0800d610 <USB_SetCurrentMode>:
{
 800d610:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d612:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800d614:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d616:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d61a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800d61c:	d108      	bne.n	800d630 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d61e:	68c3      	ldr	r3, [r0, #12]
 800d620:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d624:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800d626:	2032      	movs	r0, #50	; 0x32
 800d628:	f7f8 fe20 	bl	800626c <HAL_Delay>
  return HAL_OK;
 800d62c:	2000      	movs	r0, #0
}
 800d62e:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800d630:	b919      	cbnz	r1, 800d63a <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d632:	68c3      	ldr	r3, [r0, #12]
 800d634:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d638:	e7f4      	b.n	800d624 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800d63a:	2001      	movs	r0, #1
 800d63c:	e7f7      	b.n	800d62e <USB_SetCurrentMode+0x1e>
	...

0800d640 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d640:	0189      	lsls	r1, r1, #6
 800d642:	4a07      	ldr	r2, [pc, #28]	; (800d660 <USB_FlushTxFifo+0x20>)
 800d644:	f041 0120 	orr.w	r1, r1, #32
 800d648:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800d64a:	3a01      	subs	r2, #1
 800d64c:	d005      	beq.n	800d65a <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d64e:	6903      	ldr	r3, [r0, #16]
 800d650:	f013 0320 	ands.w	r3, r3, #32
 800d654:	d1f9      	bne.n	800d64a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800d656:	4618      	mov	r0, r3
 800d658:	4770      	bx	lr
      return HAL_TIMEOUT;
 800d65a:	2003      	movs	r0, #3
}
 800d65c:	4770      	bx	lr
 800d65e:	bf00      	nop
 800d660:	00030d41 	.word	0x00030d41

0800d664 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d664:	2310      	movs	r3, #16
 800d666:	4a06      	ldr	r2, [pc, #24]	; (800d680 <USB_FlushRxFifo+0x1c>)
 800d668:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800d66a:	3a01      	subs	r2, #1
 800d66c:	d005      	beq.n	800d67a <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d66e:	6903      	ldr	r3, [r0, #16]
 800d670:	f013 0310 	ands.w	r3, r3, #16
 800d674:	d1f9      	bne.n	800d66a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800d676:	4618      	mov	r0, r3
 800d678:	4770      	bx	lr
      return HAL_TIMEOUT;
 800d67a:	2003      	movs	r0, #3
}
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	00030d41 	.word	0x00030d41

0800d684 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800d684:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800d688:	4319      	orrs	r1, r3
 800d68a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800d68e:	2000      	movs	r0, #0
 800d690:	4770      	bx	lr
	...

0800d694 <USB_DevInit>:
{
 800d694:	b084      	sub	sp, #16
 800d696:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d69a:	4604      	mov	r4, r0
 800d69c:	a809      	add	r0, sp, #36	; 0x24
 800d69e:	460f      	mov	r7, r1
 800d6a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 800d6ae:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 800d6b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800d6b4:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800d6b6:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800d6b8:	d1f7      	bne.n	800d6aa <USB_DevInit+0x16>
 800d6ba:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 800d6be:	2d00      	cmp	r5, #0
 800d6c0:	d16c      	bne.n	800d79c <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d6c2:	6873      	ldr	r3, [r6, #4]
 800d6c4:	f043 0302 	orr.w	r3, r3, #2
 800d6c8:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d6ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d6cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d6d0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d6d2:	6823      	ldr	r3, [r4, #0]
 800d6d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6d8:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d6da:	6823      	ldr	r3, [r4, #0]
 800d6dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6e0:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d6e8:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800d6ec:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d6f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d159      	bne.n	800d7aa <USB_DevInit+0x116>
    if (cfg.speed == USBD_HS_SPEED)
 800d6f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6f8:	2900      	cmp	r1, #0
 800d6fa:	d154      	bne.n	800d7a6 <USB_DevInit+0x112>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	f7ff ffc1 	bl	800d684 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d702:	2110      	movs	r1, #16
 800d704:	4620      	mov	r0, r4
 800d706:	f7ff ff9b 	bl	800d640 <USB_FlushTxFifo>
 800d70a:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d70c:	4620      	mov	r0, r4
 800d70e:	f7ff ffa9 	bl	800d664 <USB_FlushRxFifo>
 800d712:	2800      	cmp	r0, #0
 800d714:	d14b      	bne.n	800d7ae <USB_DevInit+0x11a>
  HAL_StatusTypeDef ret = HAL_OK;
 800d716:	1c08      	adds	r0, r1, #0
 800d718:	bf18      	it	ne
 800d71a:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800d71c:	2300      	movs	r3, #0
 800d71e:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d722:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d726:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800d72a:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d72c:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 800d730:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d732:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d734:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d736:	42bb      	cmp	r3, r7
 800d738:	d13b      	bne.n	800d7b2 <USB_DevInit+0x11e>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d73a:	2100      	movs	r1, #0
 800d73c:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d740:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d744:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d748:	460f      	mov	r7, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d74a:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d74e:	428b      	cmp	r3, r1
 800d750:	d142      	bne.n	800d7d8 <USB_DevInit+0x144>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d752:	6933      	ldr	r3, [r6, #16]
 800d754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d758:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800d75a:	2300      	movs	r3, #0
 800d75c:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d75e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800d762:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800d764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d766:	b91b      	cbnz	r3, 800d770 <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d768:	69a3      	ldr	r3, [r4, #24]
 800d76a:	f043 0310 	orr.w	r3, r3, #16
 800d76e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d770:	69a2      	ldr	r2, [r4, #24]
 800d772:	4b23      	ldr	r3, [pc, #140]	; (800d800 <USB_DevInit+0x16c>)
 800d774:	4313      	orrs	r3, r2
 800d776:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800d778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d77a:	b11b      	cbz	r3, 800d784 <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d77c:	69a3      	ldr	r3, [r4, #24]
 800d77e:	f043 0308 	orr.w	r3, r3, #8
 800d782:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800d784:	2d01      	cmp	r5, #1
 800d786:	d105      	bne.n	800d794 <USB_DevInit+0x100>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d788:	69a3      	ldr	r3, [r4, #24]
 800d78a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d78e:	f043 0304 	orr.w	r3, r3, #4
 800d792:	61a3      	str	r3, [r4, #24]
}
 800d794:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d798:	b004      	add	sp, #16
 800d79a:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d79c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d79e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d7a2:	63a3      	str	r3, [r4, #56]	; 0x38
 800d7a4:	e79d      	b.n	800d6e2 <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	e7a8      	b.n	800d6fc <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d7aa:	2103      	movs	r1, #3
 800d7ac:	e7a6      	b.n	800d6fc <USB_DevInit+0x68>
    ret = HAL_ERROR;
 800d7ae:	2001      	movs	r0, #1
 800d7b0:	e7b4      	b.n	800d71c <USB_DevInit+0x88>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d7b2:	f8d2 9000 	ldr.w	r9, [r2]
 800d7b6:	f1b9 0f00 	cmp.w	r9, #0
 800d7ba:	da0b      	bge.n	800d7d4 <USB_DevInit+0x140>
      if (i == 0U)
 800d7bc:	b93b      	cbnz	r3, 800d7ce <USB_DevInit+0x13a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d7be:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d7c2:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d7c4:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d7c6:	f8c2 8008 	str.w	r8, [r2, #8]
 800d7ca:	3220      	adds	r2, #32
 800d7cc:	e7b3      	b.n	800d736 <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d7ce:	f8c2 c000 	str.w	ip, [r2]
 800d7d2:	e7f6      	b.n	800d7c2 <USB_DevInit+0x12e>
      USBx_INEP(i)->DIEPCTL = 0U;
 800d7d4:	6011      	str	r1, [r2, #0]
 800d7d6:	e7f4      	b.n	800d7c2 <USB_DevInit+0x12e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d7d8:	f8d2 9000 	ldr.w	r9, [r2]
 800d7dc:	f1b9 0f00 	cmp.w	r9, #0
 800d7e0:	da0b      	bge.n	800d7fa <USB_DevInit+0x166>
      if (i == 0U)
 800d7e2:	b939      	cbnz	r1, 800d7f4 <USB_DevInit+0x160>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d7e4:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d7e8:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d7ea:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d7ec:	f8c2 8008 	str.w	r8, [r2, #8]
 800d7f0:	3220      	adds	r2, #32
 800d7f2:	e7ac      	b.n	800d74e <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d7f4:	f8c2 c000 	str.w	ip, [r2]
 800d7f8:	e7f6      	b.n	800d7e8 <USB_DevInit+0x154>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d7fa:	6017      	str	r7, [r2, #0]
 800d7fc:	e7f4      	b.n	800d7e8 <USB_DevInit+0x154>
 800d7fe:	bf00      	nop
 800d800:	803c3800 	.word	0x803c3800

0800d804 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d804:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d808:	f013 0006 	ands.w	r0, r3, #6
 800d80c:	d004      	beq.n	800d818 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d80e:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 800d812:	bf14      	ite	ne
 800d814:	2002      	movne	r0, #2
 800d816:	200f      	moveq	r0, #15
}
 800d818:	4770      	bx	lr

0800d81a <USB_ActivateEndpoint>:
{
 800d81a:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800d81c:	780d      	ldrb	r5, [r1, #0]
 800d81e:	2401      	movs	r4, #1
 800d820:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800d824:	f005 030f 	and.w	r3, r5, #15
 800d828:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 800d82c:	409c      	lsls	r4, r3
  if (ep->is_in == 1U)
 800d82e:	784b      	ldrb	r3, [r1, #1]
 800d830:	2b01      	cmp	r3, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d832:	69d3      	ldr	r3, [r2, #28]
  if (ep->is_in == 1U)
 800d834:	d118      	bne.n	800d868 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d836:	431c      	orrs	r4, r3
 800d838:	61d4      	str	r4, [r2, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d83a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d83e:	041a      	lsls	r2, r3, #16
 800d840:	d410      	bmi.n	800d864 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d842:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d844:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d84a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800d84e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d856:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800d85a:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 800d85e:	4313      	orrs	r3, r2
 800d860:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d864:	2000      	movs	r0, #0
 800d866:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d868:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800d86c:	61d4      	str	r4, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d86e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d872:	041b      	lsls	r3, r3, #16
 800d874:	d4f6      	bmi.n	800d864 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d876:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 800d878:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d87a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d87e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800d882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d88a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800d88e:	4313      	orrs	r3, r2
 800d890:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800d894:	e7e6      	b.n	800d864 <USB_ActivateEndpoint+0x4a>
	...

0800d898 <USB_DeactivateEndpoint>:
{
 800d898:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800d89a:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800d89c:	7849      	ldrb	r1, [r1, #1]
 800d89e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 800d8a2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800d8a6:	2901      	cmp	r1, #1
 800d8a8:	f002 010f 	and.w	r1, r2, #15
 800d8ac:	d120      	bne.n	800d8f0 <USB_DeactivateEndpoint+0x58>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d8ae:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800d8b2:	2a00      	cmp	r2, #0
 800d8b4:	da0b      	bge.n	800d8ce <USB_DeactivateEndpoint+0x36>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d8b6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800d8ba:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800d8be:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d8c2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800d8c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d8ca:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800d8d2:	408a      	lsls	r2, r1
 800d8d4:	43d2      	mvns	r2, r2
 800d8d6:	4014      	ands	r4, r2
 800d8d8:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d8da:	69c1      	ldr	r1, [r0, #28]
 800d8dc:	400a      	ands	r2, r1
 800d8de:	61c2      	str	r2, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d8e0:	4a14      	ldr	r2, [pc, #80]	; (800d934 <USB_DeactivateEndpoint+0x9c>)
 800d8e2:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800d8e6:	400a      	ands	r2, r1
 800d8e8:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	bd10      	pop	{r4, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d8f0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800d8f4:	2a00      	cmp	r2, #0
 800d8f6:	da0b      	bge.n	800d910 <USB_DeactivateEndpoint+0x78>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d8f8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800d8fc:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800d900:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d904:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800d908:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d90c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d910:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d914:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800d916:	408a      	lsls	r2, r1
 800d918:	43d2      	mvns	r2, r2
 800d91a:	4014      	ands	r4, r2
 800d91c:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d91e:	69c1      	ldr	r1, [r0, #28]
 800d920:	400a      	ands	r2, r1
 800d922:	61c2      	str	r2, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d924:	4a04      	ldr	r2, [pc, #16]	; (800d938 <USB_DeactivateEndpoint+0xa0>)
 800d926:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800d92a:	400a      	ands	r2, r1
 800d92c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800d930:	e7dc      	b.n	800d8ec <USB_DeactivateEndpoint+0x54>
 800d932:	bf00      	nop
 800d934:	ec337800 	.word	0xec337800
 800d938:	eff37800 	.word	0xeff37800

0800d93c <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 800d93c:	784b      	ldrb	r3, [r1, #1]
{
 800d93e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800d940:	2b01      	cmp	r3, #1
 800d942:	780c      	ldrb	r4, [r1, #0]
 800d944:	694d      	ldr	r5, [r1, #20]
 800d946:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800d94a:	4e34      	ldr	r6, [pc, #208]	; (800da1c <USB_EP0StartXfer+0xe0>)
 800d94c:	4f34      	ldr	r7, [pc, #208]	; (800da20 <USB_EP0StartXfer+0xe4>)
 800d94e:	d144      	bne.n	800d9da <USB_EP0StartXfer+0x9e>
 800d950:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800d954:	b9b5      	cbnz	r5, 800d984 <USB_EP0StartXfer+0x48>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d956:	691d      	ldr	r5, [r3, #16]
 800d958:	402e      	ands	r6, r5
 800d95a:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d95c:	691d      	ldr	r5, [r3, #16]
 800d95e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800d962:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d964:	691d      	ldr	r5, [r3, #16]
 800d966:	402f      	ands	r7, r5
 800d968:	611f      	str	r7, [r3, #16]
    if (dma == 1U)
 800d96a:	2a01      	cmp	r2, #1
 800d96c:	d121      	bne.n	800d9b2 <USB_EP0StartXfer+0x76>
      if ((uint32_t)ep->dma_addr != 0U)
 800d96e:	690a      	ldr	r2, [r1, #16]
 800d970:	b102      	cbz	r2, 800d974 <USB_EP0StartXfer+0x38>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d972:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d974:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800d978:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d97c:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800d980:	2000      	movs	r0, #0
 800d982:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d984:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800d988:	ea0c 0707 	and.w	r7, ip, r7
 800d98c:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d98e:	691f      	ldr	r7, [r3, #16]
 800d990:	403e      	ands	r6, r7
 800d992:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800d994:	688e      	ldr	r6, [r1, #8]
 800d996:	42ae      	cmp	r6, r5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d998:	691d      	ldr	r5, [r3, #16]
 800d99a:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 800d99e:	bf38      	it	cc
 800d9a0:	614e      	strcc	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d9a2:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d9a4:	694d      	ldr	r5, [r1, #20]
 800d9a6:	691e      	ldr	r6, [r3, #16]
 800d9a8:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800d9ac:	4335      	orrs	r5, r6
 800d9ae:	611d      	str	r5, [r3, #16]
 800d9b0:	e7db      	b.n	800d96a <USB_EP0StartXfer+0x2e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d9b2:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800d9b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d9ba:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800d9be:	694b      	ldr	r3, [r1, #20]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d0dd      	beq.n	800d980 <USB_EP0StartXfer+0x44>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d9c4:	780b      	ldrb	r3, [r1, #0]
 800d9c6:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800d9ca:	f003 020f 	and.w	r2, r3, #15
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	4093      	lsls	r3, r2
 800d9d2:	4323      	orrs	r3, r4
 800d9d4:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800d9d8:	e7d2      	b.n	800d980 <USB_EP0StartXfer+0x44>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d9da:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800d9de:	6918      	ldr	r0, [r3, #16]
 800d9e0:	4038      	ands	r0, r7
 800d9e2:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d9e4:	6918      	ldr	r0, [r3, #16]
 800d9e6:	4030      	ands	r0, r6
 800d9e8:	6118      	str	r0, [r3, #16]
 800d9ea:	6888      	ldr	r0, [r1, #8]
    if (ep->xfer_len > 0U)
 800d9ec:	b105      	cbz	r5, 800d9f0 <USB_EP0StartXfer+0xb4>
      ep->xfer_len = ep->maxpacket;
 800d9ee:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d9f0:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d9f2:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 800d9f6:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d9f8:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800d9fc:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d9fe:	691d      	ldr	r5, [r3, #16]
 800da00:	ea40 0005 	orr.w	r0, r0, r5
 800da04:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800da06:	d102      	bne.n	800da0e <USB_EP0StartXfer+0xd2>
      if ((uint32_t)ep->xfer_buff != 0U)
 800da08:	68ca      	ldr	r2, [r1, #12]
 800da0a:	b102      	cbz	r2, 800da0e <USB_EP0StartXfer+0xd2>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800da0c:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800da0e:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800da12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da16:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800da1a:	e7b1      	b.n	800d980 <USB_EP0StartXfer+0x44>
 800da1c:	e007ffff 	.word	0xe007ffff
 800da20:	fff80000 	.word	0xfff80000

0800da24 <USB_WritePacket>:
{
 800da24:	b510      	push	{r4, lr}
 800da26:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800da2a:	b94c      	cbnz	r4, 800da40 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 800da2c:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800da2e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    count32b = ((uint32_t)len + 3U) / 4U;
 800da32:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800da34:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800da38:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 800da3c:	4299      	cmp	r1, r3
 800da3e:	d101      	bne.n	800da44 <USB_WritePacket+0x20>
}
 800da40:	2000      	movs	r0, #0
 800da42:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800da44:	f851 2b04 	ldr.w	r2, [r1], #4
 800da48:	6002      	str	r2, [r0, #0]
 800da4a:	e7f7      	b.n	800da3c <USB_WritePacket+0x18>

0800da4c <USB_EPStartXfer>:
{
 800da4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800da4e:	784d      	ldrb	r5, [r1, #1]
 800da50:	780c      	ldrb	r4, [r1, #0]
 800da52:	2d01      	cmp	r5, #1
 800da54:	694b      	ldr	r3, [r1, #20]
 800da56:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800da5a:	78ce      	ldrb	r6, [r1, #3]
 800da5c:	f8df c194 	ldr.w	ip, [pc, #404]	; 800dbf4 <USB_EPStartXfer+0x1a8>
 800da60:	f8df e194 	ldr.w	lr, [pc, #404]	; 800dbf8 <USB_EPStartXfer+0x1ac>
 800da64:	d17d      	bne.n	800db62 <USB_EPStartXfer+0x116>
 800da66:	f504 6510 	add.w	r5, r4, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800da6a:	692f      	ldr	r7, [r5, #16]
    if (ep->xfer_len == 0U)
 800da6c:	bb3b      	cbnz	r3, 800dabe <USB_EPStartXfer+0x72>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800da6e:	ea07 070c 	and.w	r7, r7, ip
 800da72:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800da74:	692f      	ldr	r7, [r5, #16]
 800da76:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800da7a:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800da7c:	692f      	ldr	r7, [r5, #16]
 800da7e:	ea07 070e 	and.w	r7, r7, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800da82:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 800da84:	2a01      	cmp	r2, #1
 800da86:	d142      	bne.n	800db0e <USB_EPStartXfer+0xc2>
      if ((uint32_t)ep->dma_addr != 0U)
 800da88:	690b      	ldr	r3, [r1, #16]
 800da8a:	b103      	cbz	r3, 800da8e <USB_EPStartXfer+0x42>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800da8c:	616b      	str	r3, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 800da8e:	2e01      	cmp	r6, #1
 800da90:	d10c      	bne.n	800daac <USB_EPStartXfer+0x60>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800da92:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800da96:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800da9a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800da9e:	bf0c      	ite	eq
 800daa0:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800daa4:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800daa8:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800daac:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800dab0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dab4:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800dab8:	2000      	movs	r0, #0
 800daba:	b003      	add	sp, #12
 800dabc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dabe:	ea07 070e 	and.w	r7, r7, lr
      if (ep->type == EP_TYPE_ISOC)
 800dac2:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dac4:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dac6:	692f      	ldr	r7, [r5, #16]
 800dac8:	ea07 070c 	and.w	r7, r7, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800dacc:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dad0:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800dad2:	eb0c 0703 	add.w	r7, ip, r3
 800dad6:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800dada:	f107 37ff 	add.w	r7, r7, #4294967295
 800dade:	fbb7 fcfc 	udiv	ip, r7, ip
 800dae2:	4f43      	ldr	r7, [pc, #268]	; (800dbf0 <USB_EPStartXfer+0x1a4>)
 800dae4:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 800dae8:	ea47 070e 	orr.w	r7, r7, lr
 800daec:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800daee:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800daf2:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800daf6:	ea47 070c 	orr.w	r7, r7, ip
 800dafa:	612f      	str	r7, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800dafc:	d1c2      	bne.n	800da84 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800dafe:	692f      	ldr	r7, [r5, #16]
 800db00:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 800db04:	612f      	str	r7, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800db06:	692f      	ldr	r7, [r5, #16]
 800db08:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800db0c:	e7b9      	b.n	800da82 <USB_EPStartXfer+0x36>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800db0e:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800db12:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800db14:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800db18:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800db1c:	d00c      	beq.n	800db38 <USB_EPStartXfer+0xec>
        if (ep->xfer_len > 0U)
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d0ca      	beq.n	800dab8 <USB_EPStartXfer+0x6c>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800db22:	780b      	ldrb	r3, [r1, #0]
 800db24:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800db28:	f003 020f 	and.w	r2, r3, #15
 800db2c:	2301      	movs	r3, #1
 800db2e:	4093      	lsls	r3, r2
 800db30:	4323      	orrs	r3, r4
 800db32:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800db36:	e7bf      	b.n	800dab8 <USB_EPStartXfer+0x6c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800db38:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800db3c:	b29b      	uxth	r3, r3
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800db3e:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800db42:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 800db46:	bf0c      	ite	eq
 800db48:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800db4c:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 800db50:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800db54:	780c      	ldrb	r4, [r1, #0]
 800db56:	9200      	str	r2, [sp, #0]
 800db58:	4622      	mov	r2, r4
 800db5a:	68c9      	ldr	r1, [r1, #12]
 800db5c:	f7ff ff62 	bl	800da24 <USB_WritePacket>
 800db60:	e7aa      	b.n	800dab8 <USB_EPStartXfer+0x6c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800db62:	f504 6730 	add.w	r7, r4, #2816	; 0xb00
 800db66:	693d      	ldr	r5, [r7, #16]
 800db68:	ea05 050e 	and.w	r5, r5, lr
 800db6c:	613d      	str	r5, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800db6e:	693d      	ldr	r5, [r7, #16]
 800db70:	ea05 050c 	and.w	r5, r5, ip
 800db74:	613d      	str	r5, [r7, #16]
 800db76:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 800db78:	bb1b      	cbnz	r3, 800dbc2 <USB_EPStartXfer+0x176>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800db80:	431d      	orrs	r5, r3
 800db82:	613d      	str	r5, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (dma == 1U)
 800db8a:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800db8c:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 800db8e:	d102      	bne.n	800db96 <USB_EPStartXfer+0x14a>
      if ((uint32_t)ep->xfer_buff != 0U)
 800db90:	68cb      	ldr	r3, [r1, #12]
 800db92:	b103      	cbz	r3, 800db96 <USB_EPStartXfer+0x14a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800db94:	617b      	str	r3, [r7, #20]
    if (ep->type == EP_TYPE_ISOC)
 800db96:	2e01      	cmp	r6, #1
 800db98:	d10c      	bne.n	800dbb4 <USB_EPStartXfer+0x168>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800db9a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800db9e:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800dba2:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800dba6:	bf0c      	ite	eq
 800dba8:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800dbac:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800dbb0:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dbb4:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800dbb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dbbc:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800dbc0:	e77a      	b.n	800dab8 <USB_EPStartXfer+0x6c>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800dbc2:	442b      	add	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800dbc4:	f8df c028 	ldr.w	ip, [pc, #40]	; 800dbf0 <USB_EPStartXfer+0x1a4>
 800dbc8:	f8d7 e010 	ldr.w	lr, [r7, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800dbd2:	ea0c 4cc3 	and.w	ip, ip, r3, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800dbd6:	b29b      	uxth	r3, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800dbd8:	ea4c 0c0e 	orr.w	ip, ip, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800dbdc:	436b      	muls	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800dbde:	f8c7 c010 	str.w	ip, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800dbe2:	f8d7 c010 	ldr.w	ip, [r7, #16]
 800dbe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dbea:	ea43 030c 	orr.w	r3, r3, ip
 800dbee:	e7cc      	b.n	800db8a <USB_EPStartXfer+0x13e>
 800dbf0:	1ff80000 	.word	0x1ff80000
 800dbf4:	e007ffff 	.word	0xe007ffff
 800dbf8:	fff80000 	.word	0xfff80000

0800dbfc <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800dbfc:	3203      	adds	r2, #3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dbfe:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800dc02:	0892      	lsrs	r2, r2, #2
 800dc04:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
 800dc08:	4291      	cmp	r1, r2
 800dc0a:	d101      	bne.n	800dc10 <USB_ReadPacket+0x14>
}
 800dc0c:	4608      	mov	r0, r1
 800dc0e:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dc10:	6803      	ldr	r3, [r0, #0]
 800dc12:	f841 3b04 	str.w	r3, [r1], #4
 800dc16:	e7f7      	b.n	800dc08 <USB_ReadPacket+0xc>

0800dc18 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800dc18:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800dc1a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800dc1c:	2a01      	cmp	r2, #1
 800dc1e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800dc22:	d112      	bne.n	800dc4a <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dc24:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800dc28:	2a00      	cmp	r2, #0
 800dc2a:	db06      	blt.n	800dc3a <USB_EPSetStall+0x22>
 800dc2c:	b12b      	cbz	r3, 800dc3a <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800dc2e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800dc32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dc36:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dc3a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800dc3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dc42:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800dc46:	2000      	movs	r0, #0
 800dc48:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dc4a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800dc4e:	2a00      	cmp	r2, #0
 800dc50:	db06      	blt.n	800dc60 <USB_EPSetStall+0x48>
 800dc52:	b12b      	cbz	r3, 800dc60 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800dc54:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800dc58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dc5c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800dc60:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800dc64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dc68:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800dc6c:	e7eb      	b.n	800dc46 <USB_EPSetStall+0x2e>

0800dc6e <USB_EPClearStall>:
{
 800dc6e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800dc70:	784a      	ldrb	r2, [r1, #1]
 800dc72:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800dc76:	78cb      	ldrb	r3, [r1, #3]
 800dc78:	2a01      	cmp	r2, #1
 800dc7a:	f1a3 0302 	sub.w	r3, r3, #2
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	d10f      	bne.n	800dca2 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800dc82:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dc86:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800dc88:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800dc8c:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dc90:	d805      	bhi.n	800dc9e <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dc92:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800dc96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc9a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800dc9e:	2000      	movs	r0, #0
 800dca0:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dca2:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dca6:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dca8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800dcac:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dcb0:	d8f5      	bhi.n	800dc9e <USB_EPClearStall+0x30>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dcb2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800dcb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dcba:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800dcbe:	e7ee      	b.n	800dc9e <USB_EPClearStall+0x30>

0800dcc0 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dcc0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800dcc4:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dcc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800dcca:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dcce:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800dcd2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800dcd6:	4319      	orrs	r1, r3
 800dcd8:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800dcdc:	2000      	movs	r0, #0
 800dcde:	4770      	bx	lr

0800dce0 <USB_DevConnect>:
{
 800dce0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800dce2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800dce6:	f023 0302 	bic.w	r3, r3, #2
 800dcea:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800dcee:	2003      	movs	r0, #3
 800dcf0:	f7f8 fabc 	bl	800626c <HAL_Delay>
}
 800dcf4:	2000      	movs	r0, #0
 800dcf6:	bd08      	pop	{r3, pc}

0800dcf8 <USB_DevDisconnect>:
{
 800dcf8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dcfa:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800dcfe:	f043 0302 	orr.w	r3, r3, #2
 800dd02:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800dd06:	2003      	movs	r0, #3
 800dd08:	f7f8 fab0 	bl	800626c <HAL_Delay>
}
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	bd08      	pop	{r3, pc}

0800dd10 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800dd10:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800dd12:	6980      	ldr	r0, [r0, #24]
}
 800dd14:	4010      	ands	r0, r2
 800dd16:	4770      	bx	lr

0800dd18 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800dd18:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800dd1c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dd20:	69c0      	ldr	r0, [r0, #28]
 800dd22:	4018      	ands	r0, r3
}
 800dd24:	0c00      	lsrs	r0, r0, #16
 800dd26:	4770      	bx	lr

0800dd28 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800dd28:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800dd2c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dd30:	69c0      	ldr	r0, [r0, #28]
 800dd32:	4018      	ands	r0, r3
}
 800dd34:	b280      	uxth	r0, r0
 800dd36:	4770      	bx	lr

0800dd38 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dd38:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dd3c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dd40:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dd44:	6940      	ldr	r0, [r0, #20]
}
 800dd46:	4010      	ands	r0, r2
 800dd48:	4770      	bx	lr

0800dd4a <USB_ReadDevInEPInterrupt>:
{
 800dd4a:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 800dd4c:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dd50:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dd54:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dd58:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dd5c:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dd60:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dd62:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dd64:	01db      	lsls	r3, r3, #7
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	4323      	orrs	r3, r4
}
 800dd6a:	4018      	ands	r0, r3
 800dd6c:	bd10      	pop	{r4, pc}

0800dd6e <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800dd6e:	6940      	ldr	r0, [r0, #20]
}
 800dd70:	f000 0001 	and.w	r0, r0, #1
 800dd74:	4770      	bx	lr

0800dd76 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dd76:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800dd7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dd7e:	f023 0307 	bic.w	r3, r3, #7
 800dd82:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dd86:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800dd8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd8e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800dd92:	2000      	movs	r0, #0
 800dd94:	4770      	bx	lr
	...

0800dd98 <USB_EP0_OutStart>:
{
 800dd98:	b530      	push	{r4, r5, lr}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dd9a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800dd9c:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dda0:	4c0f      	ldr	r4, [pc, #60]	; (800dde0 <USB_EP0_OutStart+0x48>)
 800dda2:	42a5      	cmp	r5, r4
 800dda4:	d903      	bls.n	800ddae <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dda6:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800ddaa:	2c00      	cmp	r4, #0
 800ddac:	db16      	blt.n	800dddc <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ddae:	2400      	movs	r4, #0
  if (dma == 1U)
 800ddb0:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ddb2:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ddb4:	691c      	ldr	r4, [r3, #16]
 800ddb6:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800ddba:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ddbc:	691c      	ldr	r4, [r3, #16]
 800ddbe:	f044 0418 	orr.w	r4, r4, #24
 800ddc2:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ddc4:	691c      	ldr	r4, [r3, #16]
 800ddc6:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800ddca:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 800ddcc:	d106      	bne.n	800dddc <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ddce:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ddd0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ddd4:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ddd8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800dddc:	2000      	movs	r0, #0
 800ddde:	bd30      	pop	{r4, r5, pc}
 800dde0:	4f54300a 	.word	0x4f54300a

0800dde4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dde4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dde6:	4903      	ldr	r1, [pc, #12]	; (800ddf4 <MX_FATFS_Init+0x10>)
 800dde8:	4803      	ldr	r0, [pc, #12]	; (800ddf8 <MX_FATFS_Init+0x14>)
 800ddea:	f002 fab3 	bl	8010354 <FATFS_LinkDriver>
 800ddee:	4b03      	ldr	r3, [pc, #12]	; (800ddfc <MX_FATFS_Init+0x18>)
 800ddf0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ddf2:	bd08      	pop	{r3, pc}
 800ddf4:	240209f5 	.word	0x240209f5
 800ddf8:	080170f4 	.word	0x080170f4
 800ddfc:	240209f4 	.word	0x240209f4

0800de00 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800de00:	2000      	movs	r0, #0
 800de02:	4770      	bx	lr

0800de04 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800de04:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800de06:	4613      	mov	r3, r2
 800de08:	460a      	mov	r2, r1
 800de0a:	4601      	mov	r1, r0
 800de0c:	4803      	ldr	r0, [pc, #12]	; (800de1c <BSP_SD_ReadBlocks_DMA+0x18>)
 800de0e:	f7fc fde5 	bl	800a9dc <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800de12:	3000      	adds	r0, #0
 800de14:	bf18      	it	ne
 800de16:	2001      	movne	r0, #1
 800de18:	bd08      	pop	{r3, pc}
 800de1a:	bf00      	nop
 800de1c:	2400c0a8 	.word	0x2400c0a8

0800de20 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800de20:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800de22:	4613      	mov	r3, r2
 800de24:	460a      	mov	r2, r1
 800de26:	4601      	mov	r1, r0
 800de28:	4803      	ldr	r0, [pc, #12]	; (800de38 <BSP_SD_WriteBlocks_DMA+0x18>)
 800de2a:	f7fc fe3b 	bl	800aaa4 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800de2e:	3000      	adds	r0, #0
 800de30:	bf18      	it	ne
 800de32:	2001      	movne	r0, #1
 800de34:	bd08      	pop	{r3, pc}
 800de36:	bf00      	nop
 800de38:	2400c0a8 	.word	0x2400c0a8

0800de3c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800de3c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800de3e:	4803      	ldr	r0, [pc, #12]	; (800de4c <BSP_SD_GetCardState+0x10>)
 800de40:	f7fd fa0c 	bl	800b25c <HAL_SD_GetCardState>
}
 800de44:	3804      	subs	r0, #4
 800de46:	bf18      	it	ne
 800de48:	2001      	movne	r0, #1
 800de4a:	bd08      	pop	{r3, pc}
 800de4c:	2400c0a8 	.word	0x2400c0a8

0800de50 <BSP_SD_GetCardInfo>:
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800de50:	4601      	mov	r1, r0
 800de52:	4801      	ldr	r0, [pc, #4]	; (800de58 <BSP_SD_GetCardInfo+0x8>)
 800de54:	f7fd b954 	b.w	800b100 <HAL_SD_GetCardInfo>
 800de58:	2400c0a8 	.word	0x2400c0a8

0800de5c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800de5c:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800de5e:	f000 f907 	bl	800e070 <BSP_SD_WriteCpltCallback>
}
 800de62:	bd08      	pop	{r3, pc}

0800de64 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800de64:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800de66:	f000 f913 	bl	800e090 <BSP_SD_ReadCpltCallback>
}
 800de6a:	bd08      	pop	{r3, pc}

0800de6c <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 800de6c:	2301      	movs	r3, #1
{
 800de6e:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 800de70:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800de74:	f000 f81e 	bl	800deb4 <BSP_PlatformIsDetected>
 800de78:	b908      	cbnz	r0, 800de7e <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 800de7a:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800de7e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800de82:	b003      	add	sp, #12
 800de84:	f85d fb04 	ldr.w	pc, [sp], #4

0800de88 <BSP_SD_Init>:
{
 800de88:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800de8a:	f7ff ffef 	bl	800de6c <BSP_SD_IsDetected>
 800de8e:	2801      	cmp	r0, #1
 800de90:	d10c      	bne.n	800deac <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd1);
 800de92:	4807      	ldr	r0, [pc, #28]	; (800deb0 <BSP_SD_Init+0x28>)
 800de94:	f7fd f9f6 	bl	800b284 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800de98:	b938      	cbnz	r0, 800deaa <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800de9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800de9e:	4804      	ldr	r0, [pc, #16]	; (800deb0 <BSP_SD_Init+0x28>)
 800dea0:	f7fd f940 	bl	800b124 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800dea4:	3000      	adds	r0, #0
 800dea6:	bf18      	it	ne
 800dea8:	2001      	movne	r0, #1
}
 800deaa:	bd08      	pop	{r3, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 800deac:	2002      	movs	r0, #2
 800deae:	e7fc      	b.n	800deaa <BSP_SD_Init+0x22>
 800deb0:	2400c0a8 	.word	0x2400c0a8

0800deb4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800deb4:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800deb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800deba:	4803      	ldr	r0, [pc, #12]	; (800dec8 <BSP_PlatformIsDetected+0x14>)
 800debc:	f7fa faf8 	bl	80084b0 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800dec0:	fab0 f080 	clz	r0, r0
 800dec4:	0940      	lsrs	r0, r0, #5
 800dec6:	bd08      	pop	{r3, pc}
 800dec8:	58020800 	.word	0x58020800

0800decc <SD_CheckStatus.isra.0>:
  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
  Stat = STA_NOINIT;
 800decc:	2301      	movs	r3, #1
static DSTATUS SD_CheckStatus(BYTE lun)
 800dece:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800ded0:	4c05      	ldr	r4, [pc, #20]	; (800dee8 <SD_CheckStatus.isra.0+0x1c>)
 800ded2:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ded4:	f7ff ffb2 	bl	800de3c <BSP_SD_GetCardState>
 800ded8:	4623      	mov	r3, r4
 800deda:	b918      	cbnz	r0, 800dee4 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 800dedc:	7822      	ldrb	r2, [r4, #0]
 800dede:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800dee2:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 800dee4:	7818      	ldrb	r0, [r3, #0]
}
 800dee6:	bd10      	pop	{r4, pc}
 800dee8:	24000020 	.word	0x24000020

0800deec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800deec:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800deee:	2301      	movs	r3, #1
 800def0:	4c0f      	ldr	r4, [pc, #60]	; (800df30 <SD_initialize+0x44>)
 800def2:	7023      	strb	r3, [r4, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800def4:	f002 fa76 	bl	80103e4 <osKernelGetState>
 800def8:	2802      	cmp	r0, #2
 800defa:	d116      	bne.n	800df2a <SD_initialize+0x3e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800defc:	f7ff ffc4 	bl	800de88 <BSP_SD_Init>
 800df00:	b910      	cbnz	r0, 800df08 <SD_initialize+0x1c>
    {
      Stat = SD_CheckStatus(lun);
 800df02:	f7ff ffe3 	bl	800decc <SD_CheckStatus.isra.0>
 800df06:	7020      	strb	r0, [r4, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800df08:	7823      	ldrb	r3, [r4, #0]
 800df0a:	2b01      	cmp	r3, #1
 800df0c:	d00d      	beq.n	800df2a <SD_initialize+0x3e>
    {
      if (SDQueueID == NULL)
 800df0e:	4d09      	ldr	r5, [pc, #36]	; (800df34 <SD_initialize+0x48>)
 800df10:	682a      	ldr	r2, [r5, #0]
 800df12:	b922      	cbnz	r2, 800df1e <SD_initialize+0x32>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800df14:	2102      	movs	r1, #2
 800df16:	200a      	movs	r0, #10
 800df18:	f002 fcc6 	bl	80108a8 <osMessageQueueNew>
 800df1c:	6028      	str	r0, [r5, #0]
#endif
      }

      if (SDQueueID == NULL)
 800df1e:	682b      	ldr	r3, [r5, #0]
 800df20:	b91b      	cbnz	r3, 800df2a <SD_initialize+0x3e>
      {
        Stat |= STA_NOINIT;
 800df22:	7823      	ldrb	r3, [r4, #0]
 800df24:	f043 0301 	orr.w	r3, r3, #1
 800df28:	7023      	strb	r3, [r4, #0]
      }
    }
  }

  return Stat;
 800df2a:	7820      	ldrb	r0, [r4, #0]
}
 800df2c:	bd38      	pop	{r3, r4, r5, pc}
 800df2e:	bf00      	nop
 800df30:	24000020 	.word	0x24000020
 800df34:	240008d0 	.word	0x240008d0

0800df38 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 800df38:	f7ff bfc8 	b.w	800decc <SD_CheckStatus.isra.0>

0800df3c <SD_read.part.1>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
 800df3c:	b538      	push	{r3, r4, r5, lr}
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
          if ((status == osOK) && (event == READ_CPLT_MSG))
          {
            timer = osKernelGetTickCount();
 800df3e:	f002 fa81 	bl	8010444 <osKernelGetTickCount>
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800df42:	f247 542f 	movw	r4, #29999	; 0x752f
            timer = osKernelGetTickCount();
 800df46:	4605      	mov	r5, r0
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800df48:	f002 fa7c 	bl	8010444 <osKernelGetTickCount>
 800df4c:	1b40      	subs	r0, r0, r5
 800df4e:	42a0      	cmp	r0, r4
 800df50:	d901      	bls.n	800df56 <SD_read.part.1+0x1a>
  DRESULT res = RES_ERROR;
 800df52:	2001      	movs	r0, #1
 800df54:	e003      	b.n	800df5e <SD_read.part.1+0x22>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800df56:	f7ff ff71 	bl	800de3c <BSP_SD_GetCardState>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	d1f4      	bne.n	800df48 <SD_read.part.1+0xc>
      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
}
 800df5e:	bd38      	pop	{r3, r4, r5, pc}

0800df60 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800df60:	4b12      	ldr	r3, [pc, #72]	; (800dfac <SD_ioctl+0x4c>)
{
 800df62:	b510      	push	{r4, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800df64:	781b      	ldrb	r3, [r3, #0]
{
 800df66:	b08a      	sub	sp, #40	; 0x28
 800df68:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800df6a:	07db      	lsls	r3, r3, #31
 800df6c:	d41b      	bmi.n	800dfa6 <SD_ioctl+0x46>

  switch (cmd)
 800df6e:	2903      	cmp	r1, #3
 800df70:	d803      	bhi.n	800df7a <SD_ioctl+0x1a>
 800df72:	e8df f001 	tbb	[pc, r1]
 800df76:	0510      	.short	0x0510
 800df78:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 800df7a:	2004      	movs	r0, #4
  }

  return res;
}
 800df7c:	b00a      	add	sp, #40	; 0x28
 800df7e:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800df80:	a801      	add	r0, sp, #4
 800df82:	f7ff ff65 	bl	800de50 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800df86:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800df88:	6023      	str	r3, [r4, #0]
 800df8a:	e004      	b.n	800df96 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 800df8c:	a801      	add	r0, sp, #4
 800df8e:	f7ff ff5f 	bl	800de50 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800df92:	9b08      	ldr	r3, [sp, #32]
 800df94:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800df96:	2000      	movs	r0, #0
 800df98:	e7f0      	b.n	800df7c <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 800df9a:	a801      	add	r0, sp, #4
 800df9c:	f7ff ff58 	bl	800de50 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dfa0:	9b08      	ldr	r3, [sp, #32]
 800dfa2:	0a5b      	lsrs	r3, r3, #9
 800dfa4:	e7f0      	b.n	800df88 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dfa6:	2003      	movs	r0, #3
 800dfa8:	e7e8      	b.n	800df7c <SD_ioctl+0x1c>
 800dfaa:	bf00      	nop
 800dfac:	24000020 	.word	0x24000020

0800dfb0 <SD_CheckStatusWithTimeout.constprop.4>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 800dfb0:	b538      	push	{r3, r4, r5, lr}
  timer = osKernelGetTickCount();
 800dfb2:	f002 fa47 	bl	8010444 <osKernelGetTickCount>
  while( osKernelGetTickCount() - timer < timeout)
 800dfb6:	f247 542f 	movw	r4, #29999	; 0x752f
  timer = osKernelGetTickCount();
 800dfba:	4605      	mov	r5, r0
  while( osKernelGetTickCount() - timer < timeout)
 800dfbc:	f002 fa42 	bl	8010444 <osKernelGetTickCount>
 800dfc0:	1b40      	subs	r0, r0, r5
 800dfc2:	42a0      	cmp	r0, r4
 800dfc4:	d902      	bls.n	800dfcc <SD_CheckStatusWithTimeout.constprop.4+0x1c>
  return -1;
 800dfc6:	f04f 30ff 	mov.w	r0, #4294967295
 800dfca:	e003      	b.n	800dfd4 <SD_CheckStatusWithTimeout.constprop.4+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dfcc:	f7ff ff36 	bl	800de3c <BSP_SD_GetCardState>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d1f3      	bne.n	800dfbc <SD_CheckStatusWithTimeout.constprop.4+0xc>
}
 800dfd4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800dfd8 <SD_write>:
{
 800dfd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dfda:	460c      	mov	r4, r1
 800dfdc:	4615      	mov	r5, r2
 800dfde:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dfe0:	f7ff ffe6 	bl	800dfb0 <SD_CheckStatusWithTimeout.constprop.4>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	da02      	bge.n	800dfee <SD_write+0x16>
    return res;
 800dfe8:	2001      	movs	r0, #1
}
 800dfea:	b002      	add	sp, #8
 800dfec:	bd70      	pop	{r4, r5, r6, pc}
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dfee:	4632      	mov	r2, r6
 800dff0:	4629      	mov	r1, r5
 800dff2:	4620      	mov	r0, r4
 800dff4:	f7ff ff14 	bl	800de20 <BSP_SD_WriteBlocks_DMA>
 800dff8:	4602      	mov	r2, r0
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d1f4      	bne.n	800dfe8 <SD_write+0x10>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800dffe:	4808      	ldr	r0, [pc, #32]	; (800e020 <SD_write+0x48>)
 800e000:	f247 5330 	movw	r3, #30000	; 0x7530
 800e004:	f10d 0106 	add.w	r1, sp, #6
 800e008:	6800      	ldr	r0, [r0, #0]
 800e00a:	f002 fcd5 	bl	80109b8 <osMessageQueueGet>
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800e00e:	2800      	cmp	r0, #0
 800e010:	d1ea      	bne.n	800dfe8 <SD_write+0x10>
 800e012:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e016:	2b02      	cmp	r3, #2
 800e018:	d1e6      	bne.n	800dfe8 <SD_write+0x10>
 800e01a:	f7ff ff8f 	bl	800df3c <SD_read.part.1>
 800e01e:	e7e4      	b.n	800dfea <SD_write+0x12>
 800e020:	240008d0 	.word	0x240008d0

0800e024 <SD_read>:
{
 800e024:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e026:	460c      	mov	r4, r1
 800e028:	4615      	mov	r5, r2
 800e02a:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e02c:	f7ff ffc0 	bl	800dfb0 <SD_CheckStatusWithTimeout.constprop.4>
 800e030:	2800      	cmp	r0, #0
 800e032:	da02      	bge.n	800e03a <SD_read+0x16>
    return res;
 800e034:	2001      	movs	r0, #1
}
 800e036:	b002      	add	sp, #8
 800e038:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e03a:	4632      	mov	r2, r6
 800e03c:	4629      	mov	r1, r5
 800e03e:	4620      	mov	r0, r4
 800e040:	f7ff fee0 	bl	800de04 <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 800e044:	4602      	mov	r2, r0
 800e046:	2800      	cmp	r0, #0
 800e048:	d1f4      	bne.n	800e034 <SD_read+0x10>
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800e04a:	4808      	ldr	r0, [pc, #32]	; (800e06c <SD_read+0x48>)
 800e04c:	f247 5330 	movw	r3, #30000	; 0x7530
 800e050:	f10d 0106 	add.w	r1, sp, #6
 800e054:	6800      	ldr	r0, [r0, #0]
 800e056:	f002 fcaf 	bl	80109b8 <osMessageQueueGet>
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800e05a:	2800      	cmp	r0, #0
 800e05c:	d1ea      	bne.n	800e034 <SD_read+0x10>
 800e05e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e062:	2b01      	cmp	r3, #1
 800e064:	d1e6      	bne.n	800e034 <SD_read+0x10>
 800e066:	f7ff ff69 	bl	800df3c <SD_read.part.1>
 800e06a:	e7e4      	b.n	800e036 <SD_read+0x12>
 800e06c:	240008d0 	.word	0x240008d0

0800e070 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e070:	b507      	push	{r0, r1, r2, lr}
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800e072:	2302      	movs	r3, #2
 800e074:	a902      	add	r1, sp, #8
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800e076:	4805      	ldr	r0, [pc, #20]	; (800e08c <BSP_SD_WriteCpltCallback+0x1c>)
   const uint16_t msg = WRITE_CPLT_MSG;
 800e078:	f821 3d02 	strh.w	r3, [r1, #-2]!
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800e07c:	2300      	movs	r3, #0
 800e07e:	6800      	ldr	r0, [r0, #0]
 800e080:	461a      	mov	r2, r3
 800e082:	f002 fc57 	bl	8010934 <osMessageQueuePut>
#endif
}
 800e086:	b003      	add	sp, #12
 800e088:	f85d fb04 	ldr.w	pc, [sp], #4
 800e08c:	240008d0 	.word	0x240008d0

0800e090 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e090:	b507      	push	{r0, r1, r2, lr}
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800e092:	2301      	movs	r3, #1
 800e094:	a902      	add	r1, sp, #8
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800e096:	4805      	ldr	r0, [pc, #20]	; (800e0ac <BSP_SD_ReadCpltCallback+0x1c>)
   const uint16_t msg = READ_CPLT_MSG;
 800e098:	f821 3d02 	strh.w	r3, [r1, #-2]!
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800e09c:	2300      	movs	r3, #0
 800e09e:	6800      	ldr	r0, [r0, #0]
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	f002 fc47 	bl	8010934 <osMessageQueuePut>
#endif
}
 800e0a6:	b003      	add	sp, #12
 800e0a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800e0ac:	240008d0 	.word	0x240008d0

0800e0b0 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e0b0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
{
 800e0b4:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e0b6:	b16b      	cbz	r3, 800e0d4 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e0b8:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e0bc:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800e0c0:	28ff      	cmp	r0, #255	; 0xff
 800e0c2:	d007      	beq.n	800e0d4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	4621      	mov	r1, r4
 800e0c8:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800e0cc:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800e0ce:	23ff      	movs	r3, #255	; 0xff
 800e0d0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 800e0d4:	2000      	movs	r0, #0
 800e0d6:	bd10      	pop	{r4, pc}

0800e0d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e0d8:	2343      	movs	r3, #67	; 0x43
 800e0da:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800e0dc:	4800      	ldr	r0, [pc, #0]	; (800e0e0 <USBD_CDC_GetFSCfgDesc+0x8>)
 800e0de:	4770      	bx	lr
 800e0e0:	2400005c 	.word	0x2400005c

0800e0e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e0e4:	2343      	movs	r3, #67	; 0x43
 800e0e6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800e0e8:	4800      	ldr	r0, [pc, #0]	; (800e0ec <USBD_CDC_GetHSCfgDesc+0x8>)
 800e0ea:	4770      	bx	lr
 800e0ec:	240000a0 	.word	0x240000a0

0800e0f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e0f0:	2343      	movs	r3, #67	; 0x43
 800e0f2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800e0f4:	4800      	ldr	r0, [pc, #0]	; (800e0f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800e0f6:	4770      	bx	lr
 800e0f8:	240000f0 	.word	0x240000f0

0800e0fc <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e0fc:	230a      	movs	r3, #10
 800e0fe:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800e100:	4800      	ldr	r0, [pc, #0]	; (800e104 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800e102:	4770      	bx	lr
 800e104:	240000e4 	.word	0x240000e4

0800e108 <USBD_CDC_DataOut>:
{
 800e108:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e10a:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
{
 800e10e:	4605      	mov	r5, r0
  if (pdev->pClassData == NULL)
 800e110:	b16c      	cbz	r4, 800e12e <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e112:	f005 fcbb 	bl	8013a8c <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e116:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e11a:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e11e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800e128:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800e12a:	2000      	movs	r0, #0
}
 800e12c:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800e12e:	2003      	movs	r0, #3
 800e130:	e7fc      	b.n	800e12c <USBD_CDC_DataOut+0x24>

0800e132 <USBD_CDC_DataIn>:
{
 800e132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 800e134:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 800e138:	4605      	mov	r5, r0
 800e13a:	460a      	mov	r2, r1
  if (pdev->pClassData == NULL)
 800e13c:	b323      	cbz	r3, 800e188 <USBD_CDC_DataIn+0x56>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e13e:	2614      	movs	r6, #20
 800e140:	fb06 0601 	mla	r6, r6, r1, r0
 800e144:	69b7      	ldr	r7, [r6, #24]
 800e146:	b19f      	cbz	r7, 800e170 <USBD_CDC_DataIn+0x3e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e148:	f04f 0c1c 	mov.w	ip, #28
 800e14c:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800e150:	fb0c 4401 	mla	r4, ip, r1, r4
 800e154:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 800e158:	fbb7 f4fc 	udiv	r4, r7, ip
 800e15c:	fb0c 7414 	mls	r4, ip, r4, r7
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e160:	b934      	cbnz	r4, 800e170 <USBD_CDC_DataIn+0x3e>
    pdev->ep_in[epnum].total_length = 0U;
 800e162:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e164:	4623      	mov	r3, r4
 800e166:	4622      	mov	r2, r4
 800e168:	f005 fc74 	bl	8013a54 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800e16c:	4620      	mov	r0, r4
}
 800e16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hcdc->TxState = 0U;
 800e170:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e172:	f8d5 12c0 	ldr.w	r1, [r5, #704]	; 0x2c0
 800e176:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800e17a:	690d      	ldr	r5, [r1, #16]
 800e17c:	f503 7104 	add.w	r1, r3, #528	; 0x210
    hcdc->TxState = 0U;
 800e180:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e184:	47a8      	blx	r5
 800e186:	e7f1      	b.n	800e16c <USBD_CDC_DataIn+0x3a>
    return (uint8_t)USBD_FAIL;
 800e188:	2003      	movs	r0, #3
 800e18a:	e7f0      	b.n	800e16e <USBD_CDC_DataIn+0x3c>

0800e18c <USBD_CDC_Setup>:
{
 800e18c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e190:	780a      	ldrb	r2, [r1, #0]
  uint8_t ifalt = 0U;
 800e192:	f04f 0800 	mov.w	r8, #0
{
 800e196:	4605      	mov	r5, r0
 800e198:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e19a:	f012 0360 	ands.w	r3, r2, #96	; 0x60
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e19e:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800e1a2:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800e1a6:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1aa:	d025      	beq.n	800e1f8 <USBD_CDC_Setup+0x6c>
 800e1ac:	2b20      	cmp	r3, #32
 800e1ae:	d155      	bne.n	800e25c <USBD_CDC_Setup+0xd0>
    if (req->wLength != 0U)
 800e1b0:	88cc      	ldrh	r4, [r1, #6]
 800e1b2:	784b      	ldrb	r3, [r1, #1]
 800e1b4:	b1cc      	cbz	r4, 800e1ea <USBD_CDC_Setup+0x5e>
      if ((req->bmRequest & 0x80U) != 0U)
 800e1b6:	0612      	lsls	r2, r2, #24
 800e1b8:	d50d      	bpl.n	800e1d6 <USBD_CDC_Setup+0x4a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1ba:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800e1be:	4639      	mov	r1, r7
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800e1c6:	4622      	mov	r2, r4
 800e1c8:	47c8      	blx	r9
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e1ca:	88f2      	ldrh	r2, [r6, #6]
 800e1cc:	4639      	mov	r1, r7
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	f000 fc90 	bl	800eaf4 <USBD_CtlSendData>
 800e1d4:	e007      	b.n	800e1e6 <USBD_CDC_Setup+0x5a>
        hcdc->CmdOpCode = req->bRequest;
 800e1d6:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e1da:	4622      	mov	r2, r4
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e1dc:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e1e0:	4639      	mov	r1, r7
 800e1e2:	f000 fc9c 	bl	800eb1e <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800e1e6:	2000      	movs	r0, #0
 800e1e8:	e03d      	b.n	800e266 <USBD_CDC_Setup+0xda>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1ea:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	6895      	ldr	r5, [r2, #8]
 800e1f2:	4622      	mov	r2, r4
 800e1f4:	47a8      	blx	r5
 800e1f6:	e7f6      	b.n	800e1e6 <USBD_CDC_Setup+0x5a>
    switch (req->bRequest)
 800e1f8:	784b      	ldrb	r3, [r1, #1]
 800e1fa:	2b0b      	cmp	r3, #11
 800e1fc:	d82e      	bhi.n	800e25c <USBD_CDC_Setup+0xd0>
 800e1fe:	a201      	add	r2, pc, #4	; (adr r2, 800e204 <USBD_CDC_Setup+0x78>)
 800e200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e204:	0800e235 	.word	0x0800e235
 800e208:	0800e1e7 	.word	0x0800e1e7
 800e20c:	0800e25d 	.word	0x0800e25d
 800e210:	0800e25d 	.word	0x0800e25d
 800e214:	0800e25d 	.word	0x0800e25d
 800e218:	0800e25d 	.word	0x0800e25d
 800e21c:	0800e25d 	.word	0x0800e25d
 800e220:	0800e25d 	.word	0x0800e25d
 800e224:	0800e25d 	.word	0x0800e25d
 800e228:	0800e25d 	.word	0x0800e25d
 800e22c:	0800e245 	.word	0x0800e245
 800e230:	0800e255 	.word	0x0800e255
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e234:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e238:	2b03      	cmp	r3, #3
 800e23a:	d10f      	bne.n	800e25c <USBD_CDC_Setup+0xd0>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e23c:	2202      	movs	r2, #2
 800e23e:	f10d 0106 	add.w	r1, sp, #6
 800e242:	e7c4      	b.n	800e1ce <USBD_CDC_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e244:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e248:	2b03      	cmp	r3, #3
 800e24a:	d107      	bne.n	800e25c <USBD_CDC_Setup+0xd0>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e24c:	2201      	movs	r2, #1
 800e24e:	f10d 0105 	add.w	r1, sp, #5
 800e252:	e7bc      	b.n	800e1ce <USBD_CDC_Setup+0x42>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e254:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e258:	2b03      	cmp	r3, #3
 800e25a:	d0c4      	beq.n	800e1e6 <USBD_CDC_Setup+0x5a>
      USBD_CtlError(pdev, req);
 800e25c:	4628      	mov	r0, r5
 800e25e:	4631      	mov	r1, r6
 800e260:	f000 fc21 	bl	800eaa6 <USBD_CtlError>
      ret = USBD_FAIL;
 800e264:	2003      	movs	r0, #3
}
 800e266:	b003      	add	sp, #12
 800e268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e26c <USBD_CDC_DeInit>:
{
 800e26c:	b538      	push	{r3, r4, r5, lr}
 800e26e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e270:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e272:	2181      	movs	r1, #129	; 0x81
 800e274:	f005 fba2 	bl	80139bc <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e278:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e27a:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e27c:	4620      	mov	r0, r4
 800e27e:	f005 fb9d 	bl	80139bc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e282:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e286:	2182      	movs	r1, #130	; 0x82
 800e288:	4620      	mov	r0, r4
 800e28a:	f005 fb97 	bl	80139bc <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800e28e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e292:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800e294:	b14b      	cbz	r3, 800e2aa <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e296:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e29e:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800e2a2:	f005 fc29 	bl	8013af8 <free>
    pdev->pClassData = NULL;
 800e2a6:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800e2aa:	2000      	movs	r0, #0
 800e2ac:	bd38      	pop	{r3, r4, r5, pc}

0800e2ae <USBD_CDC_Init>:
{
 800e2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b2:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e2b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e2b8:	f005 fc16 	bl	8013ae8 <malloc>
  if (hcdc == NULL)
 800e2bc:	4606      	mov	r6, r0
    pdev->pClassData = NULL;
 800e2be:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (hcdc == NULL)
 800e2c2:	b910      	cbnz	r0, 800e2ca <USBD_CDC_Init+0x1c>
    return (uint8_t)USBD_EMEM;
 800e2c4:	2002      	movs	r0, #2
}
 800e2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2ca:	7c23      	ldrb	r3, [r4, #16]
 800e2cc:	bbab      	cbnz	r3, 800e33a <USBD_CDC_Init+0x8c>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e2ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2d2:	2202      	movs	r2, #2
 800e2d4:	2181      	movs	r1, #129	; 0x81
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f005 fb60 	bl	801399c <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e2dc:	2501      	movs	r5, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e2de:	f44f 7300 	mov.w	r3, #512	; 0x200
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e2e2:	8725      	strh	r5, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e2e4:	4629      	mov	r1, r5
 800e2e6:	2202      	movs	r2, #2
 800e2e8:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e2ea:	2701      	movs	r7, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e2ec:	f005 fb56 	bl	801399c <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e2f0:	2310      	movs	r3, #16
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e2f2:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e2f6:	2203      	movs	r2, #3
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e2f8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e2fc:	2182      	movs	r1, #130	; 0x82
 800e2fe:	2308      	movs	r3, #8
 800e300:	4620      	mov	r0, r4
 800e302:	f005 fb4b 	bl	801399c <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e306:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e30a:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  hcdc->TxState = 0U;
 800e30e:	2500      	movs	r5, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e314:	f894 8010 	ldrb.w	r8, [r4, #16]
  hcdc->TxState = 0U;
 800e318:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800e31c:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e320:	f1b8 0f00 	cmp.w	r8, #0
 800e324:	d113      	bne.n	800e34e <USBD_CDC_Init+0xa0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e32a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800e32e:	4639      	mov	r1, r7
 800e330:	4620      	mov	r0, r4
 800e332:	f005 fb9d 	bl	8013a70 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800e336:	4640      	mov	r0, r8
 800e338:	e7c5      	b.n	800e2c6 <USBD_CDC_Init+0x18>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e33a:	2501      	movs	r5, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e33c:	2340      	movs	r3, #64	; 0x40
 800e33e:	2202      	movs	r2, #2
 800e340:	2181      	movs	r1, #129	; 0x81
 800e342:	4620      	mov	r0, r4
 800e344:	f005 fb2a 	bl	801399c <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e348:	8725      	strh	r5, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e34a:	2340      	movs	r3, #64	; 0x40
 800e34c:	e7ca      	b.n	800e2e4 <USBD_CDC_Init+0x36>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e34e:	2340      	movs	r3, #64	; 0x40
 800e350:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800e354:	4639      	mov	r1, r7
 800e356:	4620      	mov	r0, r4
 800e358:	f005 fb8a 	bl	8013a70 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800e35c:	4628      	mov	r0, r5
 800e35e:	e7b2      	b.n	800e2c6 <USBD_CDC_Init+0x18>

0800e360 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800e360:	b119      	cbz	r1, 800e36a <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800e362:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e366:	2000      	movs	r0, #0
 800e368:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800e36a:	2003      	movs	r0, #3
}
 800e36c:	4770      	bx	lr

0800e36e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e36e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 800e372:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800e374:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e378:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800e37c:	4770      	bx	lr

0800e37e <USBD_CDC_SetRxBuffer>:
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800e37e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
}
 800e382:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800e384:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800e388:	4770      	bx	lr

0800e38a <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e38a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800e38e:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800e390:	b17a      	cbz	r2, 800e3b2 <USBD_CDC_TransmitPacket+0x28>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800e392:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800e396:	2301      	movs	r3, #1
 800e398:	b96c      	cbnz	r4, 800e3b6 <USBD_CDC_TransmitPacket+0x2c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e39a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e39e:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e3a0:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e3a4:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e3a8:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e3aa:	f005 fb53 	bl	8013a54 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e3ae:	4620      	mov	r0, r4
  }

  return (uint8_t)ret;
}
 800e3b0:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800e3b2:	2003      	movs	r0, #3
 800e3b4:	e7fc      	b.n	800e3b0 <USBD_CDC_TransmitPacket+0x26>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	e7fa      	b.n	800e3b0 <USBD_CDC_TransmitPacket+0x26>

0800e3ba <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3ba:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800e3be:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800e3c0:	b162      	cbz	r2, 800e3dc <USBD_CDC_ReceivePacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3c2:	7c04      	ldrb	r4, [r0, #16]
 800e3c4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800e3c8:	b934      	cbnz	r4, 800e3d8 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3ca:	f44f 7300 	mov.w	r3, #512	; 0x200
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3ce:	2101      	movs	r1, #1
 800e3d0:	f005 fb4e 	bl	8013a70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e3d4:	2000      	movs	r0, #0
}
 800e3d6:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3d8:	2340      	movs	r3, #64	; 0x40
 800e3da:	e7f8      	b.n	800e3ce <USBD_CDC_ReceivePacket+0x14>
    return (uint8_t)USBD_FAIL;
 800e3dc:	2003      	movs	r0, #3
 800e3de:	e7fa      	b.n	800e3d6 <USBD_CDC_ReceivePacket+0x1c>

0800e3e0 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e3e0:	b1a0      	cbz	r0, 800e40c <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e3e2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e3e6:	b113      	cbz	r3, 800e3ee <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e3ee:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 800e3f2:	b113      	cbz	r3, 800e3fa <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e3fa:	b109      	cbz	r1, 800e400 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 800e3fc:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e400:	2301      	movs	r3, #1
  pdev->id = id;
 800e402:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e404:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e408:	f005 ba8a 	b.w	8013920 <USBD_LL_Init>

  return ret;
}
 800e40c:	2003      	movs	r0, #3
 800e40e:	4770      	bx	lr

0800e410 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e410:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t len = 0U;
 800e412:	2400      	movs	r4, #0
{
 800e414:	4605      	mov	r5, r0
  uint16_t len = 0U;
 800e416:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800e41a:	b151      	cbz	r1, 800e432 <USBD_RegisterClass+0x22>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e41c:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e420:	f10d 0006 	add.w	r0, sp, #6
 800e424:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800e426:	4798      	blx	r3
 800e428:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e42c:	4620      	mov	r0, r4
}
 800e42e:	b003      	add	sp, #12
 800e430:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800e432:	2003      	movs	r0, #3
 800e434:	e7fb      	b.n	800e42e <USBD_RegisterClass+0x1e>

0800e436 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e436:	f005 baa3 	b.w	8013980 <USBD_LL_Start>

0800e43a <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800e43a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e43e:	b10b      	cbz	r3, 800e444 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	4718      	bx	r3
  }

  return ret;
}
 800e444:	2003      	movs	r0, #3
 800e446:	4770      	bx	lr

0800e448 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e448:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e44a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e44e:	b10b      	cbz	r3, 800e454 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	4798      	blx	r3
  }

  return USBD_OK;
}
 800e454:	2000      	movs	r0, #0
 800e456:	bd08      	pop	{r3, pc}

0800e458 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e458:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e45a:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800e45e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e460:	4628      	mov	r0, r5
 800e462:	f000 fb0c 	bl	800ea7e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e466:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800e468:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800e46c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800e470:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800e474:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800e478:	f001 031f 	and.w	r3, r1, #31
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d00f      	beq.n	800e4a0 <USBD_LL_SetupStage+0x48>
 800e480:	d308      	bcc.n	800e494 <USBD_LL_SetupStage+0x3c>
 800e482:	2b02      	cmp	r3, #2
 800e484:	d012      	beq.n	800e4ac <USBD_LL_SetupStage+0x54>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e486:	4620      	mov	r0, r4
 800e488:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800e48c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e490:	f005 baa2 	b.w	80139d8 <USBD_LL_StallEP>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e494:	4629      	mov	r1, r5
 800e496:	4620      	mov	r0, r4
}
 800e498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e49c:	f000 b8f4 	b.w	800e688 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e4a0:	4629      	mov	r1, r5
 800e4a2:	4620      	mov	r0, r4
}
 800e4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e4a8:	f000 ba2e 	b.w	800e908 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e4ac:	4629      	mov	r1, r5
 800e4ae:	4620      	mov	r0, r4
}
 800e4b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e4b4:	f000 ba4f 	b.w	800e956 <USBD_StdEPReq>

0800e4b8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e4b8:	b570      	push	{r4, r5, r6, lr}
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e4be:	bb09      	cbnz	r1, 800e504 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e4c0:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800e4c4:	2b03      	cmp	r3, #3
 800e4c6:	d10e      	bne.n	800e4e6 <USBD_LL_DataOutStage+0x2e>
    {
      if (pep->rem_length > pep->maxpacket)
 800e4c8:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
 800e4cc:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	d90a      	bls.n	800e4ea <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 800e4d4:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e4d6:	4631      	mov	r1, r6
 800e4d8:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800e4da:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e4de:	bf28      	it	cs
 800e4e0:	461a      	movcs	r2, r3
 800e4e2:	f000 fb2b 	bl	800eb3c <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800e4e6:	2000      	movs	r0, #0
}
 800e4e8:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e4ea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e4ee:	691b      	ldr	r3, [r3, #16]
 800e4f0:	b123      	cbz	r3, 800e4fc <USBD_LL_DataOutStage+0x44>
 800e4f2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e4f6:	2a03      	cmp	r2, #3
 800e4f8:	d100      	bne.n	800e4fc <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 800e4fa:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f000 fb25 	bl	800eb4c <USBD_CtlSendStatus>
 800e502:	e7f0      	b.n	800e4e6 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 800e504:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e508:	699b      	ldr	r3, [r3, #24]
 800e50a:	b133      	cbz	r3, 800e51a <USBD_LL_DataOutStage+0x62>
 800e50c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e510:	2a03      	cmp	r2, #3
 800e512:	d102      	bne.n	800e51a <USBD_LL_DataOutStage+0x62>
}
 800e514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e518:	4718      	bx	r3
    return USBD_FAIL;
 800e51a:	2003      	movs	r0, #3
 800e51c:	e7e4      	b.n	800e4e8 <USBD_LL_DataOutStage+0x30>

0800e51e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e51e:	b570      	push	{r4, r5, r6, lr}
 800e520:	4604      	mov	r4, r0
 800e522:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e524:	460d      	mov	r5, r1
 800e526:	bbd1      	cbnz	r1, 800e59e <USBD_LL_DataInStage+0x80>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e528:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800e52c:	2b02      	cmp	r3, #2
 800e52e:	d10e      	bne.n	800e54e <USBD_LL_DataInStage+0x30>
    {
      if (pep->rem_length > pep->maxpacket)
 800e530:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
 800e534:	429a      	cmp	r2, r3
 800e536:	d912      	bls.n	800e55e <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 800e538:	1ad2      	subs	r2, r2, r3

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e53a:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 800e53c:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e53e:	f000 fae6 	bl	800eb0e <USBD_CtlContinueSendData>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e542:	462b      	mov	r3, r5
 800e544:	462a      	mov	r2, r5
 800e546:	4629      	mov	r1, r5
 800e548:	4620      	mov	r0, r4
 800e54a:	f005 fa91 	bl	8013a70 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e54e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800e552:	2000      	movs	r0, #0
 800e554:	2b01      	cmp	r3, #1
 800e556:	d101      	bne.n	800e55c <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800e558:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800e55c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 800e55e:	d10c      	bne.n	800e57a <USBD_LL_DataInStage+0x5c>
            (pep->total_length >= pep->maxpacket) &&
 800e560:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800e562:	429a      	cmp	r2, r3
 800e564:	d809      	bhi.n	800e57a <USBD_LL_DataInStage+0x5c>
            (pep->total_length >= pep->maxpacket) &&
 800e566:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d205      	bcs.n	800e57a <USBD_LL_DataInStage+0x5c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e56e:	460a      	mov	r2, r1
 800e570:	f000 facd 	bl	800eb0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e574:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800e578:	e7e3      	b.n	800e542 <USBD_LL_DataInStage+0x24>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e57a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	b12b      	cbz	r3, 800e58e <USBD_LL_DataInStage+0x70>
 800e582:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800e586:	2a03      	cmp	r2, #3
 800e588:	d101      	bne.n	800e58e <USBD_LL_DataInStage+0x70>
            pdev->pClass->EP0_TxSent(pdev);
 800e58a:	4620      	mov	r0, r4
 800e58c:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e58e:	2180      	movs	r1, #128	; 0x80
 800e590:	4620      	mov	r0, r4
 800e592:	f005 fa21 	bl	80139d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e596:	4620      	mov	r0, r4
 800e598:	f000 fae3 	bl	800eb62 <USBD_CtlReceiveStatus>
 800e59c:	e7d7      	b.n	800e54e <USBD_LL_DataInStage+0x30>
  else if ((pdev->pClass->DataIn != NULL) &&
 800e59e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e5a2:	695b      	ldr	r3, [r3, #20]
 800e5a4:	b133      	cbz	r3, 800e5b4 <USBD_LL_DataInStage+0x96>
 800e5a6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e5aa:	2a03      	cmp	r2, #3
 800e5ac:	d102      	bne.n	800e5b4 <USBD_LL_DataInStage+0x96>
}
 800e5ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e5b2:	4718      	bx	r3
    return USBD_FAIL;
 800e5b4:	2003      	movs	r0, #3
 800e5b6:	e7d1      	b.n	800e55c <USBD_LL_DataInStage+0x3e>

0800e5b8 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e5b8:	2301      	movs	r3, #1
  pdev->ep0_state = USBD_EP0_IDLE;
 800e5ba:	2100      	movs	r1, #0
{
 800e5bc:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e5be:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
{
 800e5c2:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 800e5c4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  pdev->ep0_state = USBD_EP0_IDLE;
 800e5c8:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800e5cc:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800e5ce:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 800e5d2:	b11b      	cbz	r3, 800e5dc <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e5d4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e5dc:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e5de:	2540      	movs	r5, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e5e0:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e5e2:	2340      	movs	r3, #64	; 0x40
 800e5e4:	4611      	mov	r1, r2
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	f005 f9d8 	bl	801399c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e5ec:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e5f0:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e5f4:	462b      	mov	r3, r5
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	2180      	movs	r1, #128	; 0x80
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	f005 f9ce 	bl	801399c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e600:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e602:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 800e604:	2000      	movs	r0, #0
 800e606:	bd70      	pop	{r4, r5, r6, pc}

0800e608 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800e608:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800e60a:	2000      	movs	r0, #0
 800e60c:	4770      	bx	lr

0800e60e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800e60e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e612:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e616:	2304      	movs	r3, #4
 800e618:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800e61c:	2000      	movs	r0, #0
 800e61e:	4770      	bx	lr

0800e620 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e620:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e624:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800e626:	bf04      	itt	eq
 800e628:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800e62c:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800e630:	2000      	movs	r0, #0
 800e632:	4770      	bx	lr

0800e634 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e634:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e636:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e63a:	2a03      	cmp	r2, #3
 800e63c:	d104      	bne.n	800e648 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800e63e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e642:	69db      	ldr	r3, [r3, #28]
 800e644:	b103      	cbz	r3, 800e648 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800e646:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800e648:	2000      	movs	r0, #0
 800e64a:	bd08      	pop	{r3, pc}

0800e64c <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800e64c:	2000      	movs	r0, #0
 800e64e:	4770      	bx	lr

0800e650 <USBD_LL_IsoOUTIncomplete>:
 800e650:	2000      	movs	r0, #0
 800e652:	4770      	bx	lr

0800e654 <USBD_LL_DevConnected>:
 800e654:	2000      	movs	r0, #0
 800e656:	4770      	bx	lr

0800e658 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e658:	2201      	movs	r2, #1
{
 800e65a:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e65c:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e660:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800e664:	b112      	cbz	r2, 800e66c <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e666:	6852      	ldr	r2, [r2, #4]
 800e668:	7901      	ldrb	r1, [r0, #4]
 800e66a:	4790      	blx	r2
  }

  return USBD_OK;
}
 800e66c:	2000      	movs	r0, #0
 800e66e:	bd08      	pop	{r3, pc}

0800e670 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800e670:	b510      	push	{r4, lr}
 800e672:	4604      	mov	r4, r0
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e674:	2180      	movs	r1, #128	; 0x80
 800e676:	f005 f9af 	bl	80139d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e67a:	2100      	movs	r1, #0
 800e67c:	4620      	mov	r0, r4
}
 800e67e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800e682:	f005 b9a9 	b.w	80139d8 <USBD_LL_StallEP>
	...

0800e688 <USBD_StdDevReq>:
{
 800e688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e68a:	780b      	ldrb	r3, [r1, #0]
{
 800e68c:	4604      	mov	r4, r0
 800e68e:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e690:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e694:	2b20      	cmp	r3, #32
 800e696:	d012      	beq.n	800e6be <USBD_StdDevReq+0x36>
 800e698:	2b40      	cmp	r3, #64	; 0x40
 800e69a:	d010      	beq.n	800e6be <USBD_StdDevReq+0x36>
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d158      	bne.n	800e752 <USBD_StdDevReq+0xca>
    switch (req->bRequest)
 800e6a0:	784b      	ldrb	r3, [r1, #1]
 800e6a2:	2b09      	cmp	r3, #9
 800e6a4:	d855      	bhi.n	800e752 <USBD_StdDevReq+0xca>
 800e6a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e6aa:	0100      	.short	0x0100
 800e6ac:	0054011e 	.word	0x0054011e
 800e6b0:	00540115 	.word	0x00540115
 800e6b4:	00140081 	.word	0x00140081
 800e6b8:	00e90054 	.word	0x00e90054
 800e6bc:	00a0      	.short	0x00a0
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e6be:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e6c2:	4631      	mov	r1, r6
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	689b      	ldr	r3, [r3, #8]
 800e6c8:	4798      	blx	r3
 800e6ca:	4605      	mov	r5, r0
}
 800e6cc:	4628      	mov	r0, r5
 800e6ce:	b003      	add	sp, #12
 800e6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t len = 0U;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800e6d8:	884b      	ldrh	r3, [r1, #2]
 800e6da:	0a1a      	lsrs	r2, r3, #8
 800e6dc:	3a01      	subs	r2, #1
 800e6de:	2a06      	cmp	r2, #6
 800e6e0:	d837      	bhi.n	800e752 <USBD_StdDevReq+0xca>
 800e6e2:	e8df f002 	tbb	[pc, r2]
 800e6e6:	1c04      	.short	0x1c04
 800e6e8:	4e363629 	.word	0x4e363629
 800e6ec:	58          	.byte	0x58
 800e6ed:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e6ee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e6f2:	681b      	ldr	r3, [r3, #0]
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e6f4:	f10d 0106 	add.w	r1, sp, #6
 800e6f8:	7c20      	ldrb	r0, [r4, #16]
 800e6fa:	4798      	blx	r3
    if (req->wLength != 0U)
 800e6fc:	88f2      	ldrh	r2, [r6, #6]
 800e6fe:	2a00      	cmp	r2, #0
 800e700:	f000 80ed 	beq.w	800e8de <USBD_StdDevReq+0x256>
      if (len != 0U)
 800e704:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e708:	b31b      	cbz	r3, 800e752 <USBD_StdDevReq+0xca>
        len = MIN(len, req->wLength);
 800e70a:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800e70c:	4601      	mov	r1, r0
        len = MIN(len, req->wLength);
 800e70e:	bf28      	it	cs
 800e710:	461a      	movcs	r2, r3
 800e712:	f8ad 2006 	strh.w	r2, [sp, #6]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e716:	4620      	mov	r0, r4
 800e718:	f000 f9ec 	bl	800eaf4 <USBD_CtlSendData>
 800e71c:	e05f      	b.n	800e7de <USBD_StdDevReq+0x156>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e71e:	7c02      	ldrb	r2, [r0, #16]
 800e720:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e724:	b932      	cbnz	r2, 800e734 <USBD_StdDevReq+0xac>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e728:	f10d 0006 	add.w	r0, sp, #6
 800e72c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e72e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e730:	7043      	strb	r3, [r0, #1]
 800e732:	e7e3      	b.n	800e6fc <USBD_StdDevReq+0x74>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e736:	e7f7      	b.n	800e728 <USBD_StdDevReq+0xa0>
    switch ((uint8_t)(req->wValue))
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	2b05      	cmp	r3, #5
 800e73c:	d809      	bhi.n	800e752 <USBD_StdDevReq+0xca>
 800e73e:	e8df f003 	tbb	[pc, r3]
 800e742:	0c03      	.short	0x0c03
 800e744:	1c181410 	.word	0x1c181410
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e748:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e74c:	685b      	ldr	r3, [r3, #4]
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d1d0      	bne.n	800e6f4 <USBD_StdDevReq+0x6c>
      USBD_CtlError(pdev, req);
 800e752:	4620      	mov	r0, r4
 800e754:	f7ff ff8c 	bl	800e670 <USBD_CtlError.constprop.1>
 800e758:	e041      	b.n	800e7de <USBD_StdDevReq+0x156>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e75a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	e7f5      	b.n	800e74e <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e762:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e766:	68db      	ldr	r3, [r3, #12]
 800e768:	e7f1      	b.n	800e74e <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e76a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e76e:	691b      	ldr	r3, [r3, #16]
 800e770:	e7ed      	b.n	800e74e <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e772:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e776:	695b      	ldr	r3, [r3, #20]
 800e778:	e7e9      	b.n	800e74e <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e77a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e77e:	699b      	ldr	r3, [r3, #24]
 800e780:	e7e5      	b.n	800e74e <USBD_StdDevReq+0xc6>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e782:	7c03      	ldrb	r3, [r0, #16]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d1e4      	bne.n	800e752 <USBD_StdDevReq+0xca>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e788:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e78c:	f10d 0006 	add.w	r0, sp, #6
 800e790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e792:	4798      	blx	r3
 800e794:	e7b2      	b.n	800e6fc <USBD_StdDevReq+0x74>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e796:	7c03      	ldrb	r3, [r0, #16]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d1da      	bne.n	800e752 <USBD_StdDevReq+0xca>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e79c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e7a0:	f10d 0006 	add.w	r0, sp, #6
 800e7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e7a8:	2307      	movs	r3, #7
 800e7aa:	e7c1      	b.n	800e730 <USBD_StdDevReq+0xa8>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e7ac:	888b      	ldrh	r3, [r1, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d1cf      	bne.n	800e752 <USBD_StdDevReq+0xca>
 800e7b2:	88cf      	ldrh	r7, [r1, #6]
 800e7b4:	2f00      	cmp	r7, #0
 800e7b6:	d1cc      	bne.n	800e752 <USBD_StdDevReq+0xca>
 800e7b8:	884d      	ldrh	r5, [r1, #2]
 800e7ba:	2d7f      	cmp	r5, #127	; 0x7f
 800e7bc:	d8c9      	bhi.n	800e752 <USBD_StdDevReq+0xca>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e7c2:	2b03      	cmp	r3, #3
 800e7c4:	d0c5      	beq.n	800e752 <USBD_StdDevReq+0xca>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e7c6:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800e7c8:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e7cc:	f005 f934 	bl	8013a38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	f000 f9bb 	bl	800eb4c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800e7d6:	b125      	cbz	r5, 800e7e2 <USBD_StdDevReq+0x15a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7d8:	2302      	movs	r3, #2
 800e7da:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
  USBD_StatusTypeDef ret = USBD_OK;
 800e7de:	2500      	movs	r5, #0
 800e7e0:	e774      	b.n	800e6cc <USBD_StdDevReq+0x44>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e7e2:	2301      	movs	r3, #1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7e4:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800e7e8:	e770      	b.n	800e6cc <USBD_StdDevReq+0x44>
  cfgidx = (uint8_t)(req->wValue);
 800e7ea:	788d      	ldrb	r5, [r1, #2]
 800e7ec:	4e45      	ldr	r6, [pc, #276]	; (800e904 <USBD_StdDevReq+0x27c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e7ee:	2d01      	cmp	r5, #1
  cfgidx = (uint8_t)(req->wValue);
 800e7f0:	7035      	strb	r5, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e7f2:	d903      	bls.n	800e7fc <USBD_StdDevReq+0x174>
    USBD_CtlError(pdev, req);
 800e7f4:	f7ff ff3c 	bl	800e670 <USBD_CtlError.constprop.1>
    ret = USBD_FAIL;
 800e7f8:	2503      	movs	r5, #3
 800e7fa:	e767      	b.n	800e6cc <USBD_StdDevReq+0x44>
  switch (pdev->dev_state)
 800e7fc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e800:	2b02      	cmp	r3, #2
 800e802:	d008      	beq.n	800e816 <USBD_StdDevReq+0x18e>
 800e804:	2b03      	cmp	r3, #3
 800e806:	d016      	beq.n	800e836 <USBD_StdDevReq+0x1ae>
    USBD_CtlError(pdev, req);
 800e808:	f7ff ff32 	bl	800e670 <USBD_CtlError.constprop.1>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e80c:	7831      	ldrb	r1, [r6, #0]
 800e80e:	4620      	mov	r0, r4
 800e810:	f7ff fe1a 	bl	800e448 <USBD_ClrClassConfig>
 800e814:	e7f0      	b.n	800e7f8 <USBD_StdDevReq+0x170>
    if (cfgidx != 0U)
 800e816:	2d00      	cmp	r5, #0
 800e818:	d061      	beq.n	800e8de <USBD_StdDevReq+0x256>
      pdev->dev_config = cfgidx;
 800e81a:	2101      	movs	r1, #1
 800e81c:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e81e:	f7ff fe0c 	bl	800e43a <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800e822:	4605      	mov	r5, r0
        USBD_CtlError(pdev, req);
 800e824:	4620      	mov	r0, r4
      if (ret != USBD_OK)
 800e826:	b115      	cbz	r5, 800e82e <USBD_StdDevReq+0x1a6>
        USBD_CtlError(pdev, req);
 800e828:	f7ff ff22 	bl	800e670 <USBD_CtlError.constprop.1>
 800e82c:	e74e      	b.n	800e6cc <USBD_StdDevReq+0x44>
        (void)USBD_CtlSendStatus(pdev);
 800e82e:	f000 f98d 	bl	800eb4c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e832:	2303      	movs	r3, #3
 800e834:	e7d6      	b.n	800e7e4 <USBD_StdDevReq+0x15c>
    if (cfgidx == 0U)
 800e836:	b955      	cbnz	r5, 800e84e <USBD_StdDevReq+0x1c6>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800e838:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 800e83a:	6045      	str	r5, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e83c:	4629      	mov	r1, r5
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800e83e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e842:	f7ff fe01 	bl	800e448 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e846:	4620      	mov	r0, r4
 800e848:	f000 f980 	bl	800eb4c <USBD_CtlSendStatus>
 800e84c:	e73e      	b.n	800e6cc <USBD_StdDevReq+0x44>
    else if (cfgidx != pdev->dev_config)
 800e84e:	6841      	ldr	r1, [r0, #4]
 800e850:	2901      	cmp	r1, #1
 800e852:	d044      	beq.n	800e8de <USBD_StdDevReq+0x256>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e854:	b2c9      	uxtb	r1, r1
 800e856:	f7ff fdf7 	bl	800e448 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800e85a:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e85c:	4620      	mov	r0, r4
      pdev->dev_config = cfgidx;
 800e85e:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e860:	f7ff fdeb 	bl	800e43a <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800e864:	4605      	mov	r5, r0
 800e866:	2800      	cmp	r0, #0
 800e868:	d039      	beq.n	800e8de <USBD_StdDevReq+0x256>
        USBD_CtlError(pdev, req);
 800e86a:	4620      	mov	r0, r4
 800e86c:	f7ff ff00 	bl	800e670 <USBD_CtlError.constprop.1>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e870:	7921      	ldrb	r1, [r4, #4]
 800e872:	4620      	mov	r0, r4
 800e874:	f7ff fde8 	bl	800e448 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e878:	2302      	movs	r3, #2
 800e87a:	e7b3      	b.n	800e7e4 <USBD_StdDevReq+0x15c>
  if (req->wLength != 1U)
 800e87c:	88ca      	ldrh	r2, [r1, #6]
 800e87e:	2a01      	cmp	r2, #1
 800e880:	f47f af67 	bne.w	800e752 <USBD_StdDevReq+0xca>
    switch (pdev->dev_state)
 800e884:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e888:	2b00      	cmp	r3, #0
 800e88a:	f43f af62 	beq.w	800e752 <USBD_StdDevReq+0xca>
 800e88e:	2b02      	cmp	r3, #2
 800e890:	d904      	bls.n	800e89c <USBD_StdDevReq+0x214>
 800e892:	2b03      	cmp	r3, #3
 800e894:	f47f af5d 	bne.w	800e752 <USBD_StdDevReq+0xca>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e898:	1d01      	adds	r1, r0, #4
 800e89a:	e73c      	b.n	800e716 <USBD_StdDevReq+0x8e>
      pdev->dev_default_config = 0U;
 800e89c:	2500      	movs	r5, #0
 800e89e:	4601      	mov	r1, r0
 800e8a0:	f841 5f08 	str.w	r5, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e8a4:	f000 f926 	bl	800eaf4 <USBD_CtlSendData>
 800e8a8:	e710      	b.n	800e6cc <USBD_StdDevReq+0x44>
  switch (pdev->dev_state)
 800e8aa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e8ae:	3b01      	subs	r3, #1
 800e8b0:	2b02      	cmp	r3, #2
 800e8b2:	f63f af4e 	bhi.w	800e752 <USBD_StdDevReq+0xca>
    if (req->wLength != 0x2U)
 800e8b6:	88cb      	ldrh	r3, [r1, #6]
 800e8b8:	2b02      	cmp	r3, #2
 800e8ba:	f47f af4a 	bne.w	800e752 <USBD_StdDevReq+0xca>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 800e8c2:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800e8c6:	b10b      	cbz	r3, 800e8cc <USBD_StdDevReq+0x244>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e8c8:	2303      	movs	r3, #3
 800e8ca:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e8cc:	2202      	movs	r2, #2
 800e8ce:	f104 010c 	add.w	r1, r4, #12
 800e8d2:	e720      	b.n	800e716 <USBD_StdDevReq+0x8e>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e8d4:	884b      	ldrh	r3, [r1, #2]
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d181      	bne.n	800e7de <USBD_StdDevReq+0x156>
    pdev->dev_remote_wakeup = 1U;
 800e8da:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f000 f934 	bl	800eb4c <USBD_CtlSendStatus>
 800e8e4:	e77b      	b.n	800e7de <USBD_StdDevReq+0x156>
  switch (pdev->dev_state)
 800e8e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	2b02      	cmp	r3, #2
 800e8ee:	f63f af30 	bhi.w	800e752 <USBD_StdDevReq+0xca>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e8f2:	884b      	ldrh	r3, [r1, #2]
 800e8f4:	2500      	movs	r5, #0
 800e8f6:	2b01      	cmp	r3, #1
 800e8f8:	f47f aee8 	bne.w	800e6cc <USBD_StdDevReq+0x44>
        pdev->dev_remote_wakeup = 0U;
 800e8fc:	f8c0 52a4 	str.w	r5, [r0, #676]	; 0x2a4
 800e900:	e7a1      	b.n	800e846 <USBD_StdDevReq+0x1be>
 800e902:	bf00      	nop
 800e904:	240008d4 	.word	0x240008d4

0800e908 <USBD_StdItfReq>:
{
 800e908:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e90a:	780b      	ldrb	r3, [r1, #0]
{
 800e90c:	4604      	mov	r4, r0
 800e90e:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e910:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e914:	2b20      	cmp	r3, #32
 800e916:	d002      	beq.n	800e91e <USBD_StdItfReq+0x16>
 800e918:	2b40      	cmp	r3, #64	; 0x40
 800e91a:	d000      	beq.n	800e91e <USBD_StdItfReq+0x16>
 800e91c:	b9b3      	cbnz	r3, 800e94c <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 800e91e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800e922:	3b01      	subs	r3, #1
 800e924:	2b02      	cmp	r3, #2
 800e926:	d811      	bhi.n	800e94c <USBD_StdItfReq+0x44>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e928:	7933      	ldrb	r3, [r6, #4]
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d80e      	bhi.n	800e94c <USBD_StdItfReq+0x44>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e92e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e932:	4631      	mov	r1, r6
 800e934:	4620      	mov	r0, r4
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e93a:	88f3      	ldrh	r3, [r6, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e93c:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e93e:	b91b      	cbnz	r3, 800e948 <USBD_StdItfReq+0x40>
 800e940:	b910      	cbnz	r0, 800e948 <USBD_StdItfReq+0x40>
          (void)USBD_CtlSendStatus(pdev);
 800e942:	4620      	mov	r0, r4
 800e944:	f000 f902 	bl	800eb4c <USBD_CtlSendStatus>
}
 800e948:	4628      	mov	r0, r5
 800e94a:	bd70      	pop	{r4, r5, r6, pc}
      USBD_CtlError(pdev, req);
 800e94c:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800e94e:	2500      	movs	r5, #0
      USBD_CtlError(pdev, req);
 800e950:	f7ff fe8e 	bl	800e670 <USBD_CtlError.constprop.1>
      break;
 800e954:	e7f8      	b.n	800e948 <USBD_StdItfReq+0x40>

0800e956 <USBD_StdEPReq>:
{
 800e956:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e958:	780b      	ldrb	r3, [r1, #0]
{
 800e95a:	4604      	mov	r4, r0
 800e95c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e95e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e962:	2b20      	cmp	r3, #32
 800e964:	d014      	beq.n	800e990 <USBD_StdEPReq+0x3a>
 800e966:	2b40      	cmp	r3, #64	; 0x40
 800e968:	d012      	beq.n	800e990 <USBD_StdEPReq+0x3a>
 800e96a:	b96b      	cbnz	r3, 800e988 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 800e96c:	786a      	ldrb	r2, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 800e96e:	888b      	ldrh	r3, [r1, #4]
    switch (req->bRequest)
 800e970:	2a01      	cmp	r2, #1
  ep_addr = LOBYTE(req->wIndex);
 800e972:	b2d9      	uxtb	r1, r3
    switch (req->bRequest)
 800e974:	d021      	beq.n	800e9ba <USBD_StdEPReq+0x64>
 800e976:	d340      	bcc.n	800e9fa <USBD_StdEPReq+0xa4>
 800e978:	2a03      	cmp	r2, #3
 800e97a:	d105      	bne.n	800e988 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 800e97c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e980:	2b02      	cmp	r3, #2
 800e982:	d031      	beq.n	800e9e8 <USBD_StdEPReq+0x92>
 800e984:	2b03      	cmp	r3, #3
 800e986:	d00b      	beq.n	800e9a0 <USBD_StdEPReq+0x4a>
        USBD_CtlError(pdev, req);
 800e988:	4620      	mov	r0, r4
 800e98a:	f7ff fe71 	bl	800e670 <USBD_CtlError.constprop.1>
        break;
 800e98e:	e012      	b.n	800e9b6 <USBD_StdEPReq+0x60>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e990:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e994:	4629      	mov	r1, r5
 800e996:	4620      	mov	r0, r4
 800e998:	689b      	ldr	r3, [r3, #8]
}
 800e99a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e99e:	4718      	bx	r3
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e9a0:	886b      	ldrh	r3, [r5, #2]
 800e9a2:	b92b      	cbnz	r3, 800e9b0 <USBD_StdEPReq+0x5a>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e9a4:	064a      	lsls	r2, r1, #25
 800e9a6:	d003      	beq.n	800e9b0 <USBD_StdEPReq+0x5a>
 800e9a8:	88eb      	ldrh	r3, [r5, #6]
 800e9aa:	b90b      	cbnz	r3, 800e9b0 <USBD_StdEPReq+0x5a>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800e9ac:	f005 f814 	bl	80139d8 <USBD_LL_StallEP>
        (void)USBD_CtlSendStatus(pdev);
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	f000 f8cb 	bl	800eb4c <USBD_CtlSendStatus>
}
 800e9b6:	2000      	movs	r0, #0
 800e9b8:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800e9ba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e9be:	2b02      	cmp	r3, #2
 800e9c0:	d012      	beq.n	800e9e8 <USBD_StdEPReq+0x92>
 800e9c2:	2b03      	cmp	r3, #3
 800e9c4:	d1e0      	bne.n	800e988 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e9c6:	886b      	ldrh	r3, [r5, #2]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d1f4      	bne.n	800e9b6 <USBD_StdEPReq+0x60>
          if ((ep_addr & 0x7FU) != 0x00U)
 800e9cc:	064e      	lsls	r6, r1, #25
 800e9ce:	d001      	beq.n	800e9d4 <USBD_StdEPReq+0x7e>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e9d0:	f005 f810 	bl	80139f4 <USBD_LL_ClearStallEP>
          (void)USBD_CtlSendStatus(pdev);
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	f000 f8b9 	bl	800eb4c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e9da:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e9de:	4629      	mov	r1, r5
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	689b      	ldr	r3, [r3, #8]
 800e9e4:	4798      	blx	r3
 800e9e6:	e7e6      	b.n	800e9b6 <USBD_StdEPReq+0x60>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e9e8:	064b      	lsls	r3, r1, #25
 800e9ea:	d0cd      	beq.n	800e988 <USBD_StdEPReq+0x32>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e9ec:	f004 fff4 	bl	80139d8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9f0:	2180      	movs	r1, #128	; 0x80
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	f004 fff0 	bl	80139d8 <USBD_LL_StallEP>
 800e9f8:	e7dd      	b.n	800e9b6 <USBD_StdEPReq+0x60>
      switch (pdev->dev_state)
 800e9fa:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e9fe:	2a02      	cmp	r2, #2
 800ea00:	d019      	beq.n	800ea36 <USBD_StdEPReq+0xe0>
 800ea02:	2a03      	cmp	r2, #3
 800ea04:	d1c0      	bne.n	800e988 <USBD_StdEPReq+0x32>
 800ea06:	f001 020f 	and.w	r2, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 800ea0a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ea0e:	f04f 0314 	mov.w	r3, #20
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ea12:	fb03 0202 	mla	r2, r3, r2, r0
        if ((ep_addr & 0x80U) == 0x80U)
 800ea16:	d01f      	beq.n	800ea58 <USBD_StdEPReq+0x102>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ea18:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800ea1a:	2a00      	cmp	r2, #0
 800ea1c:	d0b4      	beq.n	800e988 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ea1e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800ea22:	fb05 3503 	mla	r5, r5, r3, r3
 800ea26:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ea28:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800ea2c:	d11f      	bne.n	800ea6e <USBD_StdEPReq+0x118>
            pep->status = 0x0001U;
 800ea2e:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ea30:	2202      	movs	r2, #2
 800ea32:	4629      	mov	r1, r5
 800ea34:	e00c      	b.n	800ea50 <USBD_StdEPReq+0xfa>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ea36:	064a      	lsls	r2, r1, #25
 800ea38:	d1a6      	bne.n	800e988 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ea3a:	061b      	lsls	r3, r3, #24
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ea3c:	f04f 0202 	mov.w	r2, #2
        pep->status = 0x0000U;
 800ea40:	f04f 0300 	mov.w	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ea44:	bf4c      	ite	mi
 800ea46:	f100 0114 	addmi.w	r1, r0, #20
 800ea4a:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
        pep->status = 0x0000U;
 800ea4e:	600b      	str	r3, [r1, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ea50:	4620      	mov	r0, r4
 800ea52:	f000 f84f 	bl	800eaf4 <USBD_CtlSendData>
          break;
 800ea56:	e7ae      	b.n	800e9b6 <USBD_StdEPReq+0x60>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ea58:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800ea5c:	2a00      	cmp	r2, #0
 800ea5e:	d093      	beq.n	800e988 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ea60:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800ea64:	fb03 0505 	mla	r5, r3, r5, r0
 800ea68:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800ea6c:	e7dc      	b.n	800ea28 <USBD_StdEPReq+0xd2>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ea6e:	4620      	mov	r0, r4
 800ea70:	f004 ffce 	bl	8013a10 <USBD_LL_IsStallEP>
 800ea74:	b108      	cbz	r0, 800ea7a <USBD_StdEPReq+0x124>
            pep->status = 0x0001U;
 800ea76:	2301      	movs	r3, #1
 800ea78:	e7d9      	b.n	800ea2e <USBD_StdEPReq+0xd8>
            pep->status = 0x0000U;
 800ea7a:	6028      	str	r0, [r5, #0]
 800ea7c:	e7d8      	b.n	800ea30 <USBD_StdEPReq+0xda>

0800ea7e <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800ea7e:	780b      	ldrb	r3, [r1, #0]
 800ea80:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800ea82:	784b      	ldrb	r3, [r1, #1]
 800ea84:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ea86:	78ca      	ldrb	r2, [r1, #3]
 800ea88:	788b      	ldrb	r3, [r1, #2]
 800ea8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800ea8e:	8043      	strh	r3, [r0, #2]
 800ea90:	794a      	ldrb	r2, [r1, #5]
 800ea92:	790b      	ldrb	r3, [r1, #4]
 800ea94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800ea98:	8083      	strh	r3, [r0, #4]
 800ea9a:	79ca      	ldrb	r2, [r1, #7]
 800ea9c:	798b      	ldrb	r3, [r1, #6]
 800ea9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800eaa2:	80c3      	strh	r3, [r0, #6]
}
 800eaa4:	4770      	bx	lr

0800eaa6 <USBD_CtlError>:
{
 800eaa6:	b510      	push	{r4, lr}
 800eaa8:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eaaa:	2180      	movs	r1, #128	; 0x80
 800eaac:	f004 ff94 	bl	80139d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eab0:	2100      	movs	r1, #0
 800eab2:	4620      	mov	r0, r4
}
 800eab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800eab8:	f004 bf8e 	b.w	80139d8 <USBD_LL_StallEP>

0800eabc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eabc:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800eabe:	b188      	cbz	r0, 800eae4 <USBD_GetString+0x28>
 800eac0:	4605      	mov	r5, r0
 800eac2:	1a2b      	subs	r3, r5, r0
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800eac4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	2c00      	cmp	r4, #0
 800eacc:	d1f9      	bne.n	800eac2 <USBD_GetString+0x6>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eace:	3301      	adds	r3, #1
 800ead0:	3801      	subs	r0, #1
 800ead2:	005b      	lsls	r3, r3, #1
 800ead4:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800ead6:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ead8:	2303      	movs	r3, #3
 800eada:	704b      	strb	r3, [r1, #1]
  idx++;
 800eadc:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800eade:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800eae2:	b902      	cbnz	r2, 800eae6 <USBD_GetString+0x2a>
}
 800eae4:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 800eae6:	54ca      	strb	r2, [r1, r3]
    idx++;
 800eae8:	1c5a      	adds	r2, r3, #1
    idx++;
 800eaea:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800eaec:	b2d2      	uxtb	r2, r2
    idx++;
 800eaee:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800eaf0:	548c      	strb	r4, [r1, r2]
 800eaf2:	e7f4      	b.n	800eade <USBD_GetString+0x22>

0800eaf4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eaf4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eaf6:	2202      	movs	r2, #2
{
 800eaf8:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eafa:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eafe:	460a      	mov	r2, r1
 800eb00:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length = len;
 800eb02:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb06:	f004 ffa5 	bl	8013a54 <USBD_LL_Transmit>

  return USBD_OK;
}
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	bd10      	pop	{r4, pc}

0800eb0e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eb0e:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb10:	4613      	mov	r3, r2
 800eb12:	460a      	mov	r2, r1
 800eb14:	2100      	movs	r1, #0
 800eb16:	f004 ff9d 	bl	8013a54 <USBD_LL_Transmit>

  return USBD_OK;
}
 800eb1a:	2000      	movs	r0, #0
 800eb1c:	bd08      	pop	{r3, pc}

0800eb1e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eb1e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eb20:	2203      	movs	r2, #3
{
 800eb22:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eb24:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb28:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 800eb2a:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb2e:	2100      	movs	r1, #0
  pdev->ep_out[0].rem_length = len;
 800eb30:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb34:	f004 ff9c 	bl	8013a70 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800eb38:	2000      	movs	r0, #0
 800eb3a:	bd10      	pop	{r4, pc}

0800eb3c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800eb3c:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb3e:	4613      	mov	r3, r2
 800eb40:	460a      	mov	r2, r1
 800eb42:	2100      	movs	r1, #0
 800eb44:	f004 ff94 	bl	8013a70 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800eb48:	2000      	movs	r0, #0
 800eb4a:	bd08      	pop	{r3, pc}

0800eb4c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800eb4c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800eb4e:	2304      	movs	r3, #4
 800eb50:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800eb54:	2300      	movs	r3, #0
 800eb56:	461a      	mov	r2, r3
 800eb58:	4619      	mov	r1, r3
 800eb5a:	f004 ff7b 	bl	8013a54 <USBD_LL_Transmit>

  return USBD_OK;
}
 800eb5e:	2000      	movs	r0, #0
 800eb60:	bd08      	pop	{r3, pc}

0800eb62 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eb62:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800eb64:	2305      	movs	r3, #5
 800eb66:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	4619      	mov	r1, r3
 800eb70:	f004 ff7e 	bl	8013a70 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800eb74:	2000      	movs	r0, #0
 800eb76:	bd08      	pop	{r3, pc}

0800eb78 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800eb78:	4b03      	ldr	r3, [pc, #12]	; (800eb88 <disk_status+0x10>)
 800eb7a:	181a      	adds	r2, r3, r0
 800eb7c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	7a10      	ldrb	r0, [r2, #8]
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	4718      	bx	r3
 800eb88:	24000900 	.word	0x24000900

0800eb8c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800eb8c:	4b06      	ldr	r3, [pc, #24]	; (800eba8 <disk_initialize+0x1c>)
 800eb8e:	5c1a      	ldrb	r2, [r3, r0]
 800eb90:	b942      	cbnz	r2, 800eba4 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 800eb92:	2201      	movs	r2, #1
 800eb94:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800eb96:	181a      	adds	r2, r3, r0
 800eb98:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800eb9c:	7a10      	ldrb	r0, [r2, #8]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	4718      	bx	r3
  }
  return stat;
}
 800eba4:	2000      	movs	r0, #0
 800eba6:	4770      	bx	lr
 800eba8:	24000900 	.word	0x24000900

0800ebac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ebac:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ebae:	4c05      	ldr	r4, [pc, #20]	; (800ebc4 <disk_read+0x18>)
 800ebb0:	1825      	adds	r5, r4, r0
 800ebb2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800ebb6:	6860      	ldr	r0, [r4, #4]
 800ebb8:	6884      	ldr	r4, [r0, #8]
 800ebba:	7a28      	ldrb	r0, [r5, #8]
 800ebbc:	46a4      	mov	ip, r4
  return res;
}
 800ebbe:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ebc0:	4760      	bx	ip
 800ebc2:	bf00      	nop
 800ebc4:	24000900 	.word	0x24000900

0800ebc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ebc8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ebca:	4c05      	ldr	r4, [pc, #20]	; (800ebe0 <disk_write+0x18>)
 800ebcc:	1825      	adds	r5, r4, r0
 800ebce:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800ebd2:	6860      	ldr	r0, [r4, #4]
 800ebd4:	68c4      	ldr	r4, [r0, #12]
 800ebd6:	7a28      	ldrb	r0, [r5, #8]
 800ebd8:	46a4      	mov	ip, r4
  return res;
}
 800ebda:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ebdc:	4760      	bx	ip
 800ebde:	bf00      	nop
 800ebe0:	24000900 	.word	0x24000900

0800ebe4 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ebe4:	4b05      	ldr	r3, [pc, #20]	; (800ebfc <disk_ioctl+0x18>)
{
 800ebe6:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ebe8:	181c      	adds	r4, r3, r0
 800ebea:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	7a20      	ldrb	r0, [r4, #8]
 800ebf2:	691b      	ldr	r3, [r3, #16]
  return res;
}
 800ebf4:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ebf8:	4718      	bx	r3
 800ebfa:	bf00      	nop
 800ebfc:	24000900 	.word	0x24000900

0800ec00 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 800ec00:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 800ec02:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 800ec04:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 800ec06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 800ec0a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800ec0e:	4770      	bx	lr

0800ec10 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800ec10:	0a0b      	lsrs	r3, r1, #8
 800ec12:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec14:	7043      	strb	r3, [r0, #1]
 800ec16:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800ec18:	0e09      	lsrs	r1, r1, #24
 800ec1a:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800ec1c:	70c1      	strb	r1, [r0, #3]
}
 800ec1e:	4770      	bx	lr

0800ec20 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ec20:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800ec22:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 800ec26:	4290      	cmp	r0, r2
 800ec28:	d1fb      	bne.n	800ec22 <mem_set+0x2>
}
 800ec2a:	4770      	bx	lr

0800ec2c <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800ec2c:	4a1b      	ldr	r2, [pc, #108]	; (800ec9c <chk_lock+0x70>)
 800ec2e:	6813      	ldr	r3, [r2, #0]
{
 800ec30:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 800ec32:	b163      	cbz	r3, 800ec4e <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ec34:	6804      	ldr	r4, [r0, #0]
 800ec36:	429c      	cmp	r4, r3
 800ec38:	d107      	bne.n	800ec4a <chk_lock+0x1e>
 800ec3a:	6854      	ldr	r4, [r2, #4]
 800ec3c:	6883      	ldr	r3, [r0, #8]
 800ec3e:	429c      	cmp	r4, r3
 800ec40:	d103      	bne.n	800ec4a <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 800ec42:	6894      	ldr	r4, [r2, #8]
 800ec44:	6943      	ldr	r3, [r0, #20]
 800ec46:	429c      	cmp	r4, r3
 800ec48:	d020      	beq.n	800ec8c <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ec4a:	2400      	movs	r4, #0
 800ec4c:	e000      	b.n	800ec50 <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 800ec4e:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 800ec50:	6913      	ldr	r3, [r2, #16]
 800ec52:	b1cb      	cbz	r3, 800ec88 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ec54:	6805      	ldr	r5, [r0, #0]
 800ec56:	42ab      	cmp	r3, r5
 800ec58:	d107      	bne.n	800ec6a <chk_lock+0x3e>
 800ec5a:	6955      	ldr	r5, [r2, #20]
 800ec5c:	6883      	ldr	r3, [r0, #8]
 800ec5e:	429d      	cmp	r5, r3
 800ec60:	d103      	bne.n	800ec6a <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 800ec62:	6995      	ldr	r5, [r2, #24]
 800ec64:	6943      	ldr	r3, [r0, #20]
 800ec66:	429d      	cmp	r5, r3
 800ec68:	d015      	beq.n	800ec96 <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ec6a:	b96c      	cbnz	r4, 800ec88 <chk_lock+0x5c>
 800ec6c:	2902      	cmp	r1, #2
 800ec6e:	bf0c      	ite	eq
 800ec70:	2000      	moveq	r0, #0
 800ec72:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 800ec74:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ec76:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800ec7a:	8993      	ldrh	r3, [r2, #12]
 800ec7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec80:	bf14      	ite	ne
 800ec82:	2000      	movne	r0, #0
 800ec84:	2010      	moveq	r0, #16
 800ec86:	e7f5      	b.n	800ec74 <chk_lock+0x48>
 800ec88:	2000      	movs	r0, #0
 800ec8a:	e7f3      	b.n	800ec74 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ec8c:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ec8e:	2900      	cmp	r1, #0
 800ec90:	d0f1      	beq.n	800ec76 <chk_lock+0x4a>
 800ec92:	2010      	movs	r0, #16
 800ec94:	e7ee      	b.n	800ec74 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ec96:	2301      	movs	r3, #1
 800ec98:	e7f9      	b.n	800ec8e <chk_lock+0x62>
 800ec9a:	bf00      	nop
 800ec9c:	240008dc 	.word	0x240008dc

0800eca0 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800eca0:	4a1e      	ldr	r2, [pc, #120]	; (800ed1c <inc_lock+0x7c>)
{
 800eca2:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 800eca4:	6813      	ldr	r3, [r2, #0]
 800eca6:	6805      	ldr	r5, [r0, #0]
 800eca8:	429d      	cmp	r5, r3
 800ecaa:	d107      	bne.n	800ecbc <inc_lock+0x1c>
 800ecac:	6856      	ldr	r6, [r2, #4]
 800ecae:	6884      	ldr	r4, [r0, #8]
 800ecb0:	42a6      	cmp	r6, r4
 800ecb2:	d103      	bne.n	800ecbc <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 800ecb4:	6946      	ldr	r6, [r0, #20]
 800ecb6:	6894      	ldr	r4, [r2, #8]
 800ecb8:	42a6      	cmp	r6, r4
 800ecba:	d021      	beq.n	800ed00 <inc_lock+0x60>
		if (Files[i].fs == dp->obj.fs &&
 800ecbc:	6914      	ldr	r4, [r2, #16]
 800ecbe:	42ac      	cmp	r4, r5
 800ecc0:	d107      	bne.n	800ecd2 <inc_lock+0x32>
 800ecc2:	6957      	ldr	r7, [r2, #20]
 800ecc4:	6886      	ldr	r6, [r0, #8]
 800ecc6:	42b7      	cmp	r7, r6
 800ecc8:	d103      	bne.n	800ecd2 <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 800ecca:	6997      	ldr	r7, [r2, #24]
 800eccc:	6946      	ldr	r6, [r0, #20]
 800ecce:	42b7      	cmp	r7, r6
 800ecd0:	d020      	beq.n	800ed14 <inc_lock+0x74>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ecd2:	b10b      	cbz	r3, 800ecd8 <inc_lock+0x38>
 800ecd4:	bb04      	cbnz	r4, 800ed18 <inc_lock+0x78>
 800ecd6:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 800ecd8:	011e      	lsls	r6, r3, #4
 800ecda:	1994      	adds	r4, r2, r6
 800ecdc:	5195      	str	r5, [r2, r6]
		Files[i].clu = dp->obj.sclust;
 800ecde:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 800ece0:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 800ece2:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 800ece4:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 800ece6:	2000      	movs	r0, #0
 800ece8:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ecea:	b981      	cbnz	r1, 800ed0e <inc_lock+0x6e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ecec:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 800ecf0:	8989      	ldrh	r1, [r1, #12]
 800ecf2:	3101      	adds	r1, #1
 800ecf4:	b289      	uxth	r1, r1
 800ecf6:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 800ecfa:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ecfc:	8191      	strh	r1, [r2, #12]
}
 800ecfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ed00:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ed02:	2900      	cmp	r1, #0
 800ed04:	d0f2      	beq.n	800ecec <inc_lock+0x4c>
 800ed06:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 800ed0a:	8989      	ldrh	r1, [r1, #12]
 800ed0c:	b921      	cbnz	r1, 800ed18 <inc_lock+0x78>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ed0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ed12:	e7f0      	b.n	800ecf6 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ed14:	2301      	movs	r3, #1
 800ed16:	e7f4      	b.n	800ed02 <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ed18:	2000      	movs	r0, #0
 800ed1a:	e7f0      	b.n	800ecfe <inc_lock+0x5e>
 800ed1c:	240008dc 	.word	0x240008dc

0800ed20 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ed20:	3801      	subs	r0, #1
 800ed22:	2801      	cmp	r0, #1
 800ed24:	d814      	bhi.n	800ed50 <dec_lock+0x30>
		n = Files[i].ctr;
 800ed26:	490b      	ldr	r1, [pc, #44]	; (800ed54 <dec_lock+0x34>)
 800ed28:	0102      	lsls	r2, r0, #4
 800ed2a:	1888      	adds	r0, r1, r2
 800ed2c:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ed2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed32:	d104      	bne.n	800ed3e <dec_lock+0x1e>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 800ed34:	2300      	movs	r3, #0
 800ed36:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ed38:	2000      	movs	r0, #0
 800ed3a:	5088      	str	r0, [r1, r2]
 800ed3c:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d0fa      	beq.n	800ed38 <dec_lock+0x18>
 800ed42:	3b01      	subs	r3, #1
 800ed44:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 800ed46:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d0f5      	beq.n	800ed38 <dec_lock+0x18>
		res = FR_OK;
 800ed4c:	2000      	movs	r0, #0
 800ed4e:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ed50:	2002      	movs	r0, #2
	}
	return res;
}
 800ed52:	4770      	bx	lr
 800ed54:	240008dc 	.word	0x240008dc

0800ed58 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ed58:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 800ed5a:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ed5c:	3b02      	subs	r3, #2
 800ed5e:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 800ed60:	bf83      	ittte	hi
 800ed62:	8943      	ldrhhi	r3, [r0, #10]
 800ed64:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
 800ed66:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ed6a:	2000      	movls	r0, #0
}
 800ed6c:	4770      	bx	lr

0800ed6e <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ed6e:	6802      	ldr	r2, [r0, #0]
 800ed70:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ed72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ed74:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ed76:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ed78:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ed7c:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ed7e:	b130      	cbz	r0, 800ed8e <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 800ed80:	4281      	cmp	r1, r0
 800ed82:	d302      	bcc.n	800ed8a <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 800ed84:	1a09      	subs	r1, r1, r0
 800ed86:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ed88:	e7f8      	b.n	800ed7c <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 800ed8a:	6858      	ldr	r0, [r3, #4]
 800ed8c:	4408      	add	r0, r1
}
 800ed8e:	4770      	bx	lr

0800ed90 <get_achar>:
)
{
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ed90:	6803      	ldr	r3, [r0, #0]
 800ed92:	1c5a      	adds	r2, r3, #1
 800ed94:	6002      	str	r2, [r0, #0]
 800ed96:	781a      	ldrb	r2, [r3, #0]
 800ed98:	b290      	uxth	r0, r2
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ed9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ed9e:	2b19      	cmp	r3, #25
 800eda0:	d802      	bhi.n	800eda8 <get_achar+0x18>
 800eda2:	3820      	subs	r0, #32
 800eda4:	b280      	uxth	r0, r0
 800eda6:	4770      	bx	lr
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800eda8:	287f      	cmp	r0, #127	; 0x7f
 800edaa:	bf82      	ittt	hi
 800edac:	4b02      	ldrhi	r3, [pc, #8]	; (800edb8 <get_achar+0x28>)
 800edae:	189b      	addhi	r3, r3, r2
 800edb0:	f813 0c80 	ldrbhi.w	r0, [r3, #-128]
#endif
	return chr;
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	08017108 	.word	0x08017108

0800edbc <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800edbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edbe:	b085      	sub	sp, #20
 800edc0:	4605      	mov	r5, r0
 800edc2:	461e      	mov	r6, r3
 800edc4:	ac04      	add	r4, sp, #16
 800edc6:	f844 1d0c 	str.w	r1, [r4, #-12]!
 800edca:	4611      	mov	r1, r2
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800edcc:	b929      	cbnz	r1, 800edda <pattern_matching+0x1e>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800edce:	782b      	ldrb	r3, [r5, #0]
 800edd0:	b95b      	cbnz	r3, 800edea <pattern_matching+0x2e>
 800edd2:	b156      	cbz	r6, 800edea <pattern_matching+0x2e>
 800edd4:	2001      	movs	r0, #1
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800edd6:	b005      	add	sp, #20
 800edd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800edda:	4620      	mov	r0, r4
 800eddc:	f7ff ffd8 	bl	800ed90 <get_achar>
 800ede0:	3901      	subs	r1, #1
 800ede2:	2800      	cmp	r0, #0
 800ede4:	d1f2      	bne.n	800edcc <pattern_matching+0x10>
 800ede6:	2000      	movs	r0, #0
 800ede8:	e7f5      	b.n	800edd6 <pattern_matching+0x1a>
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800edea:	ac04      	add	r4, sp, #16
 800edec:	9b01      	ldr	r3, [sp, #4]
 800edee:	9502      	str	r5, [sp, #8]
 800edf0:	f844 3d04 	str.w	r3, [r4, #-4]!
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800edf4:	9b02      	ldr	r3, [sp, #8]
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	2b3f      	cmp	r3, #63	; 0x3f
 800edfa:	d001      	beq.n	800ee00 <pattern_matching+0x44>
 800edfc:	2b2a      	cmp	r3, #42	; 0x2a
 800edfe:	d11d      	bne.n	800ee3c <pattern_matching+0x80>
 800ee00:	2300      	movs	r3, #0
 800ee02:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800ee04:	9902      	ldr	r1, [sp, #8]
 800ee06:	1c48      	adds	r0, r1, #1
 800ee08:	9002      	str	r0, [sp, #8]
 800ee0a:	780c      	ldrb	r4, [r1, #0]
				} while (*pp == '?' || *pp == '*');
 800ee0c:	7849      	ldrb	r1, [r1, #1]
					if (*pp++ == '?') nm++; else nx = 1;
 800ee0e:	2c3f      	cmp	r4, #63	; 0x3f
 800ee10:	bf0c      	ite	eq
 800ee12:	3201      	addeq	r2, #1
 800ee14:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800ee16:	293f      	cmp	r1, #63	; 0x3f
 800ee18:	d0f4      	beq.n	800ee04 <pattern_matching+0x48>
 800ee1a:	292a      	cmp	r1, #42	; 0x2a
 800ee1c:	d0f2      	beq.n	800ee04 <pattern_matching+0x48>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800ee1e:	9903      	ldr	r1, [sp, #12]
 800ee20:	f7ff ffcc 	bl	800edbc <pattern_matching>
 800ee24:	2800      	cmp	r0, #0
 800ee26:	d1d5      	bne.n	800edd4 <pattern_matching+0x18>
				nc = *np; break;	/* Branch mismatched */
 800ee28:	9b03      	ldr	r3, [sp, #12]
 800ee2a:	7819      	ldrb	r1, [r3, #0]
		get_achar(&nam);			/* nam++ */
 800ee2c:	a801      	add	r0, sp, #4
 800ee2e:	f7ff ffaf 	bl	800ed90 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800ee32:	2e00      	cmp	r6, #0
 800ee34:	d0d7      	beq.n	800ede6 <pattern_matching+0x2a>
 800ee36:	2900      	cmp	r1, #0
 800ee38:	d1d7      	bne.n	800edea <pattern_matching+0x2e>
 800ee3a:	e7d4      	b.n	800ede6 <pattern_matching+0x2a>
			pc = get_achar(&pp);	/* Get a pattern char */
 800ee3c:	a802      	add	r0, sp, #8
 800ee3e:	f7ff ffa7 	bl	800ed90 <get_achar>
 800ee42:	4607      	mov	r7, r0
			nc = get_achar(&np);	/* Get a name char */
 800ee44:	4620      	mov	r0, r4
 800ee46:	f7ff ffa3 	bl	800ed90 <get_achar>
			if (pc != nc) break;	/* Branch mismatched? */
 800ee4a:	4287      	cmp	r7, r0
			nc = get_achar(&np);	/* Get a name char */
 800ee4c:	4601      	mov	r1, r0
			if (pc != nc) break;	/* Branch mismatched? */
 800ee4e:	d1ed      	bne.n	800ee2c <pattern_matching+0x70>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800ee50:	2f00      	cmp	r7, #0
 800ee52:	d1cf      	bne.n	800edf4 <pattern_matching+0x38>
 800ee54:	e7be      	b.n	800edd4 <pattern_matching+0x18>

0800ee56 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ee56:	6802      	ldr	r2, [r0, #0]
{
 800ee58:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 800ee5a:	b152      	cbz	r2, 800ee72 <get_ldnumber+0x1c>
 800ee5c:	4611      	mov	r1, r2
 800ee5e:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ee60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee64:	2c20      	cmp	r4, #32
 800ee66:	d90c      	bls.n	800ee82 <get_ldnumber+0x2c>
 800ee68:	2c3a      	cmp	r4, #58	; 0x3a
 800ee6a:	d1f8      	bne.n	800ee5e <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 800ee6c:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ee6e:	428b      	cmp	r3, r1
 800ee70:	d002      	beq.n	800ee78 <get_ldnumber+0x22>
	int vol = -1;
 800ee72:	f04f 30ff 	mov.w	r0, #4294967295
 800ee76:	e005      	b.n	800ee84 <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ee78:	7812      	ldrb	r2, [r2, #0]
 800ee7a:	2a30      	cmp	r2, #48	; 0x30
 800ee7c:	d1f9      	bne.n	800ee72 <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 800ee7e:	3301      	adds	r3, #1
 800ee80:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ee82:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800ee84:	bd10      	pop	{r4, pc}

0800ee86 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ee86:	3801      	subs	r0, #1
 800ee88:	440a      	add	r2, r1
			*d++ = *s++;
 800ee8a:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800ee8e:	4291      	cmp	r1, r2
			*d++ = *s++;
 800ee90:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800ee94:	d1f9      	bne.n	800ee8a <mem_cpy.part.0+0x4>
}
 800ee96:	4770      	bx	lr

0800ee98 <ld_clust.isra.1>:
	if (fs->fs_type == FS_FAT32) {
 800ee98:	2803      	cmp	r0, #3
	rv = rv << 8 | ptr[0];
 800ee9a:	7eca      	ldrb	r2, [r1, #27]
 800ee9c:	7e8b      	ldrb	r3, [r1, #26]
 800ee9e:	bf08      	it	eq
 800eea0:	7d48      	ldrbeq	r0, [r1, #21]
	cl = ld_word(dir + DIR_FstClusLO);
 800eea2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800eea6:	bf02      	ittt	eq
 800eea8:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800eeaa:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 800eeae:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	4770      	bx	lr

0800eeb6 <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 800eeb6:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800eeba:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800eebc:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 800eebe:	7803      	ldrb	r3, [r0, #0]
 800eec0:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800eec2:	bf01      	itttt	eq
 800eec4:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800eec6:	750a      	strbeq	r2, [r1, #20]
 800eec8:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800eeca:	754a      	strbeq	r2, [r1, #21]
}
 800eecc:	4770      	bx	lr

0800eece <get_fileinfo.part.3>:
void get_fileinfo (		/* No return code */
 800eece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		c = (TCHAR)dp->dir[i++];
 800eed0:	6a04      	ldr	r4, [r0, #32]
	i = j = 0;
 800eed2:	2300      	movs	r3, #0
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800eed4:	262e      	movs	r6, #46	; 0x2e
 800eed6:	1e65      	subs	r5, r4, #1
	i = j = 0;
 800eed8:	4618      	mov	r0, r3
		c = (TCHAR)dp->dir[i++];
 800eeda:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800eede:	3001      	adds	r0, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800eee0:	2a20      	cmp	r2, #32
 800eee2:	d00a      	beq.n	800eefa <get_fileinfo.part.3+0x2c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800eee4:	2a05      	cmp	r2, #5
 800eee6:	bf08      	it	eq
 800eee8:	22e5      	moveq	r2, #229	; 0xe5
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800eeea:	2809      	cmp	r0, #9
 800eeec:	bf02      	ittt	eq
 800eeee:	18cf      	addeq	r7, r1, r3
 800eef0:	3301      	addeq	r3, #1
 800eef2:	727e      	strbeq	r6, [r7, #9]
		fno->fname[j++] = c;
 800eef4:	18cf      	adds	r7, r1, r3
 800eef6:	3301      	adds	r3, #1
 800eef8:	727a      	strb	r2, [r7, #9]
	while (i < 11) {		/* Copy name body and extension */
 800eefa:	280b      	cmp	r0, #11
 800eefc:	d1ed      	bne.n	800eeda <get_fileinfo.part.3+0xc>
	fno->fname[j] = 0;
 800eefe:	440b      	add	r3, r1
 800ef00:	2200      	movs	r2, #0
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ef02:	f104 001c 	add.w	r0, r4, #28
	fno->fname[j] = 0;
 800ef06:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ef08:	7ae3      	ldrb	r3, [r4, #11]
 800ef0a:	720b      	strb	r3, [r1, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ef0c:	f7ff fe78 	bl	800ec00 <ld_dword>
 800ef10:	6008      	str	r0, [r1, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ef12:	f104 0016 	add.w	r0, r4, #22
 800ef16:	f7ff fe73 	bl	800ec00 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ef1a:	80c8      	strh	r0, [r1, #6]
 800ef1c:	0c00      	lsrs	r0, r0, #16
 800ef1e:	8088      	strh	r0, [r1, #4]
}
 800ef20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ef22 <sync_window.part.5>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800ef22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 800ef24:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ef26:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800ef2a:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	462a      	mov	r2, r5
 800ef30:	4639      	mov	r1, r7
 800ef32:	7840      	ldrb	r0, [r0, #1]
 800ef34:	f7ff fe48 	bl	800ebc8 <disk_write>
 800ef38:	b9a0      	cbnz	r0, 800ef64 <sync_window.part.5+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ef3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef3c:	69e2      	ldr	r2, [r4, #28]
 800ef3e:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 800ef40:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d301      	bcc.n	800ef4a <sync_window.part.5+0x28>
	FRESULT res = FR_OK;
 800ef46:	2000      	movs	r0, #0
}
 800ef48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef4a:	78a6      	ldrb	r6, [r4, #2]
 800ef4c:	2e01      	cmp	r6, #1
 800ef4e:	d9fa      	bls.n	800ef46 <sync_window.part.5+0x24>
					wsect += fs->fsize;
 800ef50:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ef52:	4639      	mov	r1, r7
 800ef54:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef56:	3e01      	subs	r6, #1
					wsect += fs->fsize;
 800ef58:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	462a      	mov	r2, r5
 800ef5e:	f7ff fe33 	bl	800ebc8 <disk_write>
 800ef62:	e7f3      	b.n	800ef4c <sync_window.part.5+0x2a>
			res = FR_DISK_ERR;
 800ef64:	2001      	movs	r0, #1
 800ef66:	e7ef      	b.n	800ef48 <sync_window.part.5+0x26>

0800ef68 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ef68:	78c3      	ldrb	r3, [r0, #3]
 800ef6a:	b10b      	cbz	r3, 800ef70 <sync_window+0x8>
 800ef6c:	f7ff bfd9 	b.w	800ef22 <sync_window.part.5>
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	4770      	bx	lr

0800ef74 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ef74:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ef76:	428b      	cmp	r3, r1
{
 800ef78:	b570      	push	{r4, r5, r6, lr}
 800ef7a:	4606      	mov	r6, r0
 800ef7c:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ef7e:	d012      	beq.n	800efa6 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 800ef80:	f7ff fff2 	bl	800ef68 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ef84:	4604      	mov	r4, r0
 800ef86:	b960      	cbnz	r0, 800efa2 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ef88:	462a      	mov	r2, r5
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	f106 0134 	add.w	r1, r6, #52	; 0x34
 800ef90:	7870      	ldrb	r0, [r6, #1]
 800ef92:	f7ff fe0b 	bl	800ebac <disk_read>
 800ef96:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 800ef98:	bf1c      	itt	ne
 800ef9a:	f04f 35ff 	movne.w	r5, #4294967295
 800ef9e:	2401      	movne	r4, #1
			fs->winsect = sector;
 800efa0:	6335      	str	r5, [r6, #48]	; 0x30
}
 800efa2:	4620      	mov	r0, r4
 800efa4:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 800efa6:	2400      	movs	r4, #0
 800efa8:	e7fb      	b.n	800efa2 <move_window+0x2e>
	...

0800efac <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800efac:	2300      	movs	r3, #0
{
 800efae:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800efb0:	70c3      	strb	r3, [r0, #3]
 800efb2:	f04f 33ff 	mov.w	r3, #4294967295
{
 800efb6:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800efb8:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800efba:	f7ff ffdb 	bl	800ef74 <move_window>
 800efbe:	bb30      	cbnz	r0, 800f00e <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 800efc0:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 800efc4:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 800efc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800efcc:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d11e      	bne.n	800f012 <check_fs+0x66>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800efd4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800efd8:	2be9      	cmp	r3, #233	; 0xe9
 800efda:	d005      	beq.n	800efe8 <check_fs+0x3c>
 800efdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800efde:	4a10      	ldr	r2, [pc, #64]	; (800f020 <check_fs+0x74>)
 800efe0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d116      	bne.n	800f016 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800efe8:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 800efec:	f7ff fe08 	bl	800ec00 <ld_dword>
 800eff0:	4b0c      	ldr	r3, [pc, #48]	; (800f024 <check_fs+0x78>)
 800eff2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800eff6:	4298      	cmp	r0, r3
 800eff8:	d00f      	beq.n	800f01a <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800effa:	f104 0086 	add.w	r0, r4, #134	; 0x86
 800effe:	f7ff fdff 	bl	800ec00 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f002:	4b09      	ldr	r3, [pc, #36]	; (800f028 <check_fs+0x7c>)
 800f004:	4298      	cmp	r0, r3
 800f006:	bf14      	ite	ne
 800f008:	2002      	movne	r0, #2
 800f00a:	2000      	moveq	r0, #0
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800f00c:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f00e:	2004      	movs	r0, #4
 800f010:	e7fc      	b.n	800f00c <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f012:	2003      	movs	r0, #3
 800f014:	e7fa      	b.n	800f00c <check_fs+0x60>
	return 2;
 800f016:	2002      	movs	r0, #2
 800f018:	e7f8      	b.n	800f00c <check_fs+0x60>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f01a:	2000      	movs	r0, #0
 800f01c:	e7f6      	b.n	800f00c <check_fs+0x60>
 800f01e:	bf00      	nop
 800f020:	009000eb 	.word	0x009000eb
 800f024:	00544146 	.word	0x00544146
 800f028:	33544146 	.word	0x33544146

0800f02c <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f02c:	2300      	movs	r3, #0
{
 800f02e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 800f032:	600b      	str	r3, [r1, #0]
{
 800f034:	b085      	sub	sp, #20
 800f036:	460f      	mov	r7, r1
 800f038:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800f03a:	f7ff ff0c 	bl	800ee56 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800f03e:	1e06      	subs	r6, r0, #0
 800f040:	f2c0 813f 	blt.w	800f2c2 <find_volume+0x296>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f044:	4ba4      	ldr	r3, [pc, #656]	; (800f2d8 <find_volume+0x2ac>)
 800f046:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f04a:	2c00      	cmp	r4, #0
 800f04c:	f000 813b 	beq.w	800f2c6 <find_volume+0x29a>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f050:	68e0      	ldr	r0, [r4, #12]
 800f052:	f001 f993 	bl	801037c <ff_req_grant>
 800f056:	2800      	cmp	r0, #0
 800f058:	f000 8137 	beq.w	800f2ca <find_volume+0x29e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f05c:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f05e:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f062:	7823      	ldrb	r3, [r4, #0]
 800f064:	b173      	cbz	r3, 800f084 <find_volume+0x58>
		stat = disk_status(fs->drv);
 800f066:	7860      	ldrb	r0, [r4, #1]
 800f068:	f7ff fd86 	bl	800eb78 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f06c:	07c1      	lsls	r1, r0, #31
 800f06e:	d409      	bmi.n	800f084 <find_volume+0x58>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f070:	2d00      	cmp	r5, #0
 800f072:	f000 812c 	beq.w	800f2ce <find_volume+0x2a2>
 800f076:	f010 0004 	ands.w	r0, r0, #4
 800f07a:	d000      	beq.n	800f07e <find_volume+0x52>
				return FR_WRITE_PROTECTED;
 800f07c:	200a      	movs	r0, #10
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800f07e:	b005      	add	sp, #20
 800f080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800f084:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f086:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800f088:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f08a:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f08c:	f7ff fd7e 	bl	800eb8c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f090:	07c2      	lsls	r2, r0, #31
 800f092:	f100 811e 	bmi.w	800f2d2 <find_volume+0x2a6>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f096:	b10d      	cbz	r5, 800f09c <find_volume+0x70>
 800f098:	0743      	lsls	r3, r0, #29
 800f09a:	d4ef      	bmi.n	800f07c <find_volume+0x50>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f09c:	2100      	movs	r1, #0
 800f09e:	4620      	mov	r0, r4
 800f0a0:	f7ff ff84 	bl	800efac <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f0a4:	2802      	cmp	r0, #2
 800f0a6:	f040 80f3 	bne.w	800f290 <find_volume+0x264>
 800f0aa:	f504 75fd 	add.w	r5, r4, #506	; 0x1fa
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f0ae:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f0b0:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 800f0b4:	b110      	cbz	r0, 800f0bc <find_volume+0x90>
 800f0b6:	4628      	mov	r0, r5
 800f0b8:	f7ff fda2 	bl	800ec00 <ld_dword>
 800f0bc:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f0c0:	3101      	adds	r1, #1
 800f0c2:	3510      	adds	r5, #16
 800f0c4:	2904      	cmp	r1, #4
 800f0c6:	d1f3      	bne.n	800f0b0 <find_volume+0x84>
 800f0c8:	2600      	movs	r6, #0
			bsect = br[i];
 800f0ca:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f0ce:	2d00      	cmp	r5, #0
 800f0d0:	f000 80d5 	beq.w	800f27e <find_volume+0x252>
 800f0d4:	4629      	mov	r1, r5
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f7ff ff68 	bl	800efac <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f0dc:	2801      	cmp	r0, #1
 800f0de:	f200 80cf 	bhi.w	800f280 <find_volume+0x254>
	rv = rv << 8 | ptr[0];
 800f0e2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800f0e6:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800f0ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f0ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0f2:	f040 80d1 	bne.w	800f298 <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 800f0f6:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800f0fa:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f0fe:	ea56 2603 	orrs.w	r6, r6, r3, lsl #8
 800f102:	d104      	bne.n	800f10e <find_volume+0xe2>
 800f104:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f108:	f7ff fd7a 	bl	800ec00 <ld_dword>
 800f10c:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f10e:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
		fs->fsize = fasize;
 800f112:	61e6      	str	r6, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f114:	f109 33ff 	add.w	r3, r9, #4294967295
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f118:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	f200 80bb 	bhi.w	800f298 <find_volume+0x26c>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f122:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
 800f126:	b2bb      	uxth	r3, r7
 800f128:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	f000 80b4 	beq.w	800f298 <find_volume+0x26c>
 800f130:	1e7b      	subs	r3, r7, #1
 800f132:	423b      	tst	r3, r7
 800f134:	f040 80b0 	bne.w	800f298 <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 800f138:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800f13c:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 800f140:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f144:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f148:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f14c:	f040 80a4 	bne.w	800f298 <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 800f150:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800f154:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f158:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 800f15c:	d103      	bne.n	800f166 <find_volume+0x13a>
 800f15e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800f162:	f7ff fd4d 	bl	800ec00 <ld_dword>
	rv = rv << 8 | ptr[0];
 800f166:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f16a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f16e:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800f172:	f000 8091 	beq.w	800f298 <find_volume+0x26c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f176:	fb06 fc09 	mul.w	ip, r6, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f17a:	eb03 1218 	add.w	r2, r3, r8, lsr #4
 800f17e:	4462      	add	r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f180:	4290      	cmp	r0, r2
 800f182:	f0c0 8089 	bcc.w	800f298 <find_volume+0x26c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f186:	1a81      	subs	r1, r0, r2
 800f188:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f18c:	2900      	cmp	r1, #0
 800f18e:	f000 8083 	beq.w	800f298 <find_volume+0x26c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f192:	f64f 77f5 	movw	r7, #65525	; 0xfff5
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f196:	f640 70f5 	movw	r0, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f19a:	442b      	add	r3, r5
		fs->database = bsect + sysect;					/* Data start sector */
 800f19c:	442a      	add	r2, r5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f19e:	42b9      	cmp	r1, r7
 800f1a0:	bf8c      	ite	hi
 800f1a2:	2703      	movhi	r7, #3
 800f1a4:	2702      	movls	r7, #2
		fs->volbase = bsect;							/* Volume start sector */
 800f1a6:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f1a8:	6263      	str	r3, [r4, #36]	; 0x24
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f1aa:	4281      	cmp	r1, r0
 800f1ac:	bf98      	it	ls
 800f1ae:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f1b0:	3102      	adds	r1, #2
		fs->database = bsect + sysect;					/* Data start sector */
 800f1b2:	62e2      	str	r2, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f1b4:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f1b6:	61a1      	str	r1, [r4, #24]
		if (fmt == FS_FAT32) {
 800f1b8:	d172      	bne.n	800f2a0 <find_volume+0x274>
	rv = rv << 8 | ptr[0];
 800f1ba:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 800f1be:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f1c2:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800f1c6:	d167      	bne.n	800f298 <find_volume+0x26c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f1c8:	f1b8 0f00 	cmp.w	r8, #0
 800f1cc:	d164      	bne.n	800f298 <find_volume+0x26c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f1ce:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800f1d2:	f7ff fd15 	bl	800ec00 <ld_dword>
 800f1d6:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f1d8:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f1da:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 800f1de:	ebb6 2f51 	cmp.w	r6, r1, lsr #9
 800f1e2:	d359      	bcc.n	800f298 <find_volume+0x26c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f1e4:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f1e8:	2f03      	cmp	r7, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f1ea:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800f1ee:	f04f 0380 	mov.w	r3, #128	; 0x80
 800f1f2:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f1f4:	d12f      	bne.n	800f256 <find_volume+0x22a>
	rv = rv << 8 | ptr[0];
 800f1f6:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 800f1fa:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800f1fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f202:	2b01      	cmp	r3, #1
 800f204:	d127      	bne.n	800f256 <find_volume+0x22a>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f206:	1c69      	adds	r1, r5, #1
 800f208:	4620      	mov	r0, r4
 800f20a:	f7ff feb3 	bl	800ef74 <move_window>
 800f20e:	bb10      	cbnz	r0, 800f256 <find_volume+0x22a>
	rv = rv << 8 | ptr[0];
 800f210:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 800f214:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 800f218:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 800f21a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f21e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800f222:	4293      	cmp	r3, r2
 800f224:	d117      	bne.n	800f256 <find_volume+0x22a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f226:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800f22a:	f7ff fce9 	bl	800ec00 <ld_dword>
 800f22e:	4b2b      	ldr	r3, [pc, #172]	; (800f2dc <find_volume+0x2b0>)
 800f230:	4298      	cmp	r0, r3
 800f232:	d110      	bne.n	800f256 <find_volume+0x22a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f234:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800f238:	f7ff fce2 	bl	800ec00 <ld_dword>
 800f23c:	4b28      	ldr	r3, [pc, #160]	; (800f2e0 <find_volume+0x2b4>)
 800f23e:	4298      	cmp	r0, r3
 800f240:	d109      	bne.n	800f256 <find_volume+0x22a>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f242:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800f246:	f7ff fcdb 	bl	800ec00 <ld_dword>
 800f24a:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f24c:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800f250:	f7ff fcd6 	bl	800ec00 <ld_dword>
 800f254:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 800f256:	4a23      	ldr	r2, [pc, #140]	; (800f2e4 <find_volume+0x2b8>)
 800f258:	2000      	movs	r0, #0
	fs->fs_type = fmt;		/* FAT sub-type */
 800f25a:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f25c:	8813      	ldrh	r3, [r2, #0]
 800f25e:	3301      	adds	r3, #1
 800f260:	b29b      	uxth	r3, r3
 800f262:	8013      	strh	r3, [r2, #0]
 800f264:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f266:	4b20      	ldr	r3, [pc, #128]	; (800f2e8 <find_volume+0x2bc>)
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	4294      	cmp	r4, r2
 800f26c:	bf04      	itt	eq
 800f26e:	2200      	moveq	r2, #0
 800f270:	601a      	streq	r2, [r3, #0]
 800f272:	691a      	ldr	r2, [r3, #16]
 800f274:	4294      	cmp	r4, r2
 800f276:	f47f af02 	bne.w	800f07e <find_volume+0x52>
 800f27a:	6118      	str	r0, [r3, #16]
 800f27c:	e6ff      	b.n	800f07e <find_volume+0x52>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f27e:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f280:	3601      	adds	r6, #1
 800f282:	2e04      	cmp	r6, #4
 800f284:	f47f af21 	bne.w	800f0ca <find_volume+0x9e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f288:	2804      	cmp	r0, #4
 800f28a:	d105      	bne.n	800f298 <find_volume+0x26c>
 800f28c:	2001      	movs	r0, #1
 800f28e:	e6f6      	b.n	800f07e <find_volume+0x52>
 800f290:	2804      	cmp	r0, #4
 800f292:	d0fb      	beq.n	800f28c <find_volume+0x260>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f294:	2801      	cmp	r0, #1
 800f296:	d901      	bls.n	800f29c <find_volume+0x270>
 800f298:	200d      	movs	r0, #13
 800f29a:	e6f0      	b.n	800f07e <find_volume+0x52>
	bsect = 0;
 800f29c:	2500      	movs	r5, #0
 800f29e:	e720      	b.n	800f0e2 <find_volume+0xb6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f2a0:	f1b8 0f00 	cmp.w	r8, #0
 800f2a4:	d0f8      	beq.n	800f298 <find_volume+0x26c>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f2a6:	2f02      	cmp	r7, #2
 800f2a8:	ea4f 0041 	mov.w	r0, r1, lsl #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f2ac:	4463      	add	r3, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f2ae:	bf1c      	itt	ne
 800f2b0:	1840      	addne	r0, r0, r1
 800f2b2:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f2b6:	62a3      	str	r3, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f2b8:	bf0c      	ite	eq
 800f2ba:	4601      	moveq	r1, r0
 800f2bc:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 800f2c0:	e78b      	b.n	800f1da <find_volume+0x1ae>
	if (vol < 0) return FR_INVALID_DRIVE;
 800f2c2:	200b      	movs	r0, #11
 800f2c4:	e6db      	b.n	800f07e <find_volume+0x52>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f2c6:	200c      	movs	r0, #12
 800f2c8:	e6d9      	b.n	800f07e <find_volume+0x52>
	ENTER_FF(fs);						/* Lock the volume */
 800f2ca:	200f      	movs	r0, #15
 800f2cc:	e6d7      	b.n	800f07e <find_volume+0x52>
			return FR_OK;				/* The file system object is valid */
 800f2ce:	4628      	mov	r0, r5
 800f2d0:	e6d5      	b.n	800f07e <find_volume+0x52>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f2d2:	2003      	movs	r0, #3
 800f2d4:	e6d3      	b.n	800f07e <find_volume+0x52>
 800f2d6:	bf00      	nop
 800f2d8:	240008d8 	.word	0x240008d8
 800f2dc:	41615252 	.word	0x41615252
 800f2e0:	61417272 	.word	0x61417272
 800f2e4:	240008fc 	.word	0x240008fc
 800f2e8:	240008dc 	.word	0x240008dc

0800f2ec <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f2ec:	2901      	cmp	r1, #1
{
 800f2ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	460c      	mov	r4, r1
 800f2f6:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f2f8:	d973      	bls.n	800f3e2 <put_fat+0xf6>
 800f2fa:	6983      	ldr	r3, [r0, #24]
 800f2fc:	428b      	cmp	r3, r1
 800f2fe:	d970      	bls.n	800f3e2 <put_fat+0xf6>
		switch (fs->fs_type) {
 800f300:	7803      	ldrb	r3, [r0, #0]
 800f302:	2b02      	cmp	r3, #2
 800f304:	d040      	beq.n	800f388 <put_fat+0x9c>
 800f306:	2b03      	cmp	r3, #3
 800f308:	d051      	beq.n	800f3ae <put_fat+0xc2>
 800f30a:	2b01      	cmp	r3, #1
 800f30c:	d169      	bne.n	800f3e2 <put_fat+0xf6>
			bc = (UINT)clst; bc += bc / 2;
 800f30e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f312:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800f314:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800f318:	f7ff fe2c 	bl	800ef74 <move_window>
 800f31c:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 800f31e:	bb40      	cbnz	r0, 800f372 <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f320:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 800f324:	f105 0934 	add.w	r9, r5, #52	; 0x34
 800f328:	f108 0a01 	add.w	sl, r8, #1
 800f32c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f330:	bf08      	it	eq
 800f332:	b2fb      	uxtbeq	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f334:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f336:	bf1f      	itttt	ne
 800f338:	f819 3008 	ldrbne.w	r3, [r9, r8]
 800f33c:	f003 020f 	andne.w	r2, r3, #15
 800f340:	013b      	lslne	r3, r7, #4
 800f342:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 800f346:	bf18      	it	ne
 800f348:	4313      	orrne	r3, r2
 800f34a:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 800f34e:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f350:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 800f352:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f354:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800f358:	f7ff fe0c 	bl	800ef74 <move_window>
			if (res != FR_OK) break;
 800f35c:	4606      	mov	r6, r0
 800f35e:	b940      	cbnz	r0, 800f372 <put_fat+0x86>
			p = fs->win + bc % SS(fs);
 800f360:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f364:	b144      	cbz	r4, 800f378 <put_fat+0x8c>
 800f366:	f3c7 1707 	ubfx	r7, r7, #4, #8
 800f36a:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 800f36e:	2301      	movs	r3, #1
 800f370:	70eb      	strb	r3, [r5, #3]
}
 800f372:	4630      	mov	r0, r6
 800f374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f378:	f819 300a 	ldrb.w	r3, [r9, sl]
 800f37c:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800f380:	f023 030f 	bic.w	r3, r3, #15
 800f384:	431f      	orrs	r7, r3
 800f386:	e7f0      	b.n	800f36a <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f388:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800f38a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800f38e:	f7ff fdf1 	bl	800ef74 <move_window>
			if (res != FR_OK) break;
 800f392:	4606      	mov	r6, r0
 800f394:	2800      	cmp	r0, #0
 800f396:	d1ec      	bne.n	800f372 <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f398:	0064      	lsls	r4, r4, #1
 800f39a:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800f39e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800f3a2:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f3a4:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800f3a6:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 800f3aa:	7057      	strb	r7, [r2, #1]
 800f3ac:	e7df      	b.n	800f36e <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f3ae:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800f3b0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800f3b4:	f7ff fdde 	bl	800ef74 <move_window>
			if (res != FR_OK) break;
 800f3b8:	4606      	mov	r6, r0
 800f3ba:	2800      	cmp	r0, #0
 800f3bc:	d1d9      	bne.n	800f372 <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f3be:	00a4      	lsls	r4, r4, #2
 800f3c0:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800f3c4:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 800f3c8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800f3cc:	441c      	add	r4, r3
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	f7ff fc16 	bl	800ec00 <ld_dword>
 800f3d4:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f3d8:	4620      	mov	r0, r4
 800f3da:	4339      	orrs	r1, r7
 800f3dc:	f7ff fc18 	bl	800ec10 <st_dword>
 800f3e0:	e7c5      	b.n	800f36e <put_fat+0x82>
	FRESULT res = FR_INT_ERR;
 800f3e2:	2602      	movs	r6, #2
 800f3e4:	e7c5      	b.n	800f372 <put_fat+0x86>

0800f3e6 <get_fat.isra.9>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f3e6:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800f3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ea:	4605      	mov	r5, r0
 800f3ec:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f3ee:	d952      	bls.n	800f496 <get_fat.isra.9+0xb0>
 800f3f0:	6983      	ldr	r3, [r0, #24]
 800f3f2:	4299      	cmp	r1, r3
 800f3f4:	d24f      	bcs.n	800f496 <get_fat.isra.9+0xb0>
		switch (fs->fs_type) {
 800f3f6:	7803      	ldrb	r3, [r0, #0]
 800f3f8:	2b02      	cmp	r3, #2
 800f3fa:	d029      	beq.n	800f450 <get_fat.isra.9+0x6a>
 800f3fc:	2b03      	cmp	r3, #3
 800f3fe:	d038      	beq.n	800f472 <get_fat.isra.9+0x8c>
 800f400:	2b01      	cmp	r3, #1
 800f402:	d148      	bne.n	800f496 <get_fat.isra.9+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 800f404:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f408:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800f40a:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800f40e:	f7ff fdb1 	bl	800ef74 <move_window>
 800f412:	b110      	cbz	r0, 800f41a <get_fat.isra.9+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f414:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800f41a:	1c77      	adds	r7, r6, #1
 800f41c:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f420:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800f422:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800f424:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f426:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800f42a:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f42e:	f7ff fda1 	bl	800ef74 <move_window>
 800f432:	2800      	cmp	r0, #0
 800f434:	d1ee      	bne.n	800f414 <get_fat.isra.9+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f436:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f43a:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800f43c:	443d      	add	r5, r7
 800f43e:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800f442:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f446:	bf4c      	ite	mi
 800f448:	0900      	lsrmi	r0, r0, #4
 800f44a:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800f44e:	e7e3      	b.n	800f418 <get_fat.isra.9+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f450:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800f452:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800f456:	f7ff fd8d 	bl	800ef74 <move_window>
 800f45a:	2800      	cmp	r0, #0
 800f45c:	d1da      	bne.n	800f414 <get_fat.isra.9+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f45e:	0064      	lsls	r4, r4, #1
 800f460:	3534      	adds	r5, #52	; 0x34
 800f462:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800f466:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 800f468:	5d28      	ldrb	r0, [r5, r4]
 800f46a:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f46c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800f470:	e7d2      	b.n	800f418 <get_fat.isra.9+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f472:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800f474:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800f478:	f7ff fd7c 	bl	800ef74 <move_window>
 800f47c:	2800      	cmp	r0, #0
 800f47e:	d1c9      	bne.n	800f414 <get_fat.isra.9+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f480:	00a4      	lsls	r4, r4, #2
 800f482:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800f486:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800f48a:	4420      	add	r0, r4
 800f48c:	f7ff fbb8 	bl	800ec00 <ld_dword>
 800f490:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800f494:	e7c0      	b.n	800f418 <get_fat.isra.9+0x32>
			val = 1;	/* Internal error */
 800f496:	2001      	movs	r0, #1
 800f498:	e7be      	b.n	800f418 <get_fat.isra.9+0x32>

0800f49a <create_chain>:
{
 800f49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f49e:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800f4a0:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800f4a2:	460f      	mov	r7, r1
 800f4a4:	b971      	cbnz	r1, 800f4c4 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f4a6:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f4a8:	b1f6      	cbz	r6, 800f4e8 <create_chain+0x4e>
 800f4aa:	69ab      	ldr	r3, [r5, #24]
 800f4ac:	42b3      	cmp	r3, r6
 800f4ae:	bf98      	it	ls
 800f4b0:	2601      	movls	r6, #1
 800f4b2:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800f4b4:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f4b6:	69ab      	ldr	r3, [r5, #24]
 800f4b8:	42a3      	cmp	r3, r4
 800f4ba:	d818      	bhi.n	800f4ee <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 800f4bc:	2e01      	cmp	r6, #1
 800f4be:	d815      	bhi.n	800f4ec <create_chain+0x52>
 800f4c0:	2400      	movs	r4, #0
 800f4c2:	e009      	b.n	800f4d8 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	f7ff ff8e 	bl	800f3e6 <get_fat.isra.9>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f4ca:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f4cc:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f4ce:	d937      	bls.n	800f540 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f4d0:	1c43      	adds	r3, r0, #1
 800f4d2:	d104      	bne.n	800f4de <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f4d4:	f04f 34ff 	mov.w	r4, #4294967295
}
 800f4d8:	4620      	mov	r0, r4
 800f4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f4de:	69ab      	ldr	r3, [r5, #24]
 800f4e0:	4283      	cmp	r3, r0
 800f4e2:	d8f9      	bhi.n	800f4d8 <create_chain+0x3e>
 800f4e4:	463e      	mov	r6, r7
 800f4e6:	e7e4      	b.n	800f4b2 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f4e8:	2601      	movs	r6, #1
 800f4ea:	e7e2      	b.n	800f4b2 <create_chain+0x18>
				ncl = 2;
 800f4ec:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f4ee:	4621      	mov	r1, r4
 800f4f0:	f8d8 0000 	ldr.w	r0, [r8]
 800f4f4:	f7ff ff77 	bl	800f3e6 <get_fat.isra.9>
			if (cs == 0) break;				/* Found a free cluster */
 800f4f8:	b130      	cbz	r0, 800f508 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f4fa:	2801      	cmp	r0, #1
 800f4fc:	d020      	beq.n	800f540 <create_chain+0xa6>
 800f4fe:	3001      	adds	r0, #1
 800f500:	d0e8      	beq.n	800f4d4 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 800f502:	42b4      	cmp	r4, r6
 800f504:	d1d6      	bne.n	800f4b4 <create_chain+0x1a>
 800f506:	e7db      	b.n	800f4c0 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f508:	f04f 32ff 	mov.w	r2, #4294967295
 800f50c:	4621      	mov	r1, r4
 800f50e:	4628      	mov	r0, r5
 800f510:	f7ff feec 	bl	800f2ec <put_fat>
		if (res == FR_OK && clst != 0) {
 800f514:	b990      	cbnz	r0, 800f53c <create_chain+0xa2>
 800f516:	b957      	cbnz	r7, 800f52e <create_chain+0x94>
		fs->last_clst = ncl;
 800f518:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f51a:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 800f51e:	3a02      	subs	r2, #2
 800f520:	4293      	cmp	r3, r2
 800f522:	d90f      	bls.n	800f544 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 800f524:	792b      	ldrb	r3, [r5, #4]
 800f526:	f043 0301 	orr.w	r3, r3, #1
 800f52a:	712b      	strb	r3, [r5, #4]
 800f52c:	e7d4      	b.n	800f4d8 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f52e:	4622      	mov	r2, r4
 800f530:	4639      	mov	r1, r7
 800f532:	4628      	mov	r0, r5
 800f534:	f7ff feda 	bl	800f2ec <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f538:	2800      	cmp	r0, #0
 800f53a:	d0ed      	beq.n	800f518 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f53c:	2801      	cmp	r0, #1
 800f53e:	d0c9      	beq.n	800f4d4 <create_chain+0x3a>
 800f540:	2401      	movs	r4, #1
 800f542:	e7c9      	b.n	800f4d8 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f544:	3b01      	subs	r3, #1
 800f546:	616b      	str	r3, [r5, #20]
 800f548:	e7ec      	b.n	800f524 <create_chain+0x8a>

0800f54a <remove_chain>:
{
 800f54a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f54c:	460d      	mov	r5, r1
 800f54e:	4607      	mov	r7, r0
 800f550:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f552:	2d01      	cmp	r5, #1
 800f554:	d92c      	bls.n	800f5b0 <remove_chain+0x66>
	FATFS *fs = obj->fs;
 800f556:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f558:	69a3      	ldr	r3, [r4, #24]
 800f55a:	42ab      	cmp	r3, r5
 800f55c:	d928      	bls.n	800f5b0 <remove_chain+0x66>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f55e:	b12a      	cbz	r2, 800f56c <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f560:	f04f 32ff 	mov.w	r2, #4294967295
 800f564:	4620      	mov	r0, r4
 800f566:	f7ff fec1 	bl	800f2ec <put_fat>
		if (res != FR_OK) return res;
 800f56a:	b930      	cbnz	r0, 800f57a <remove_chain+0x30>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f56c:	4629      	mov	r1, r5
 800f56e:	6838      	ldr	r0, [r7, #0]
 800f570:	f7ff ff39 	bl	800f3e6 <get_fat.isra.9>
		if (nxt == 0) break;				/* Empty cluster? */
 800f574:	4606      	mov	r6, r0
 800f576:	b908      	cbnz	r0, 800f57c <remove_chain+0x32>
	return FR_OK;
 800f578:	2000      	movs	r0, #0
}
 800f57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f57c:	2801      	cmp	r0, #1
 800f57e:	d017      	beq.n	800f5b0 <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f580:	1c43      	adds	r3, r0, #1
 800f582:	d017      	beq.n	800f5b4 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f584:	2200      	movs	r2, #0
 800f586:	4629      	mov	r1, r5
 800f588:	4620      	mov	r0, r4
 800f58a:	f7ff feaf 	bl	800f2ec <put_fat>
			if (res != FR_OK) return res;
 800f58e:	2800      	cmp	r0, #0
 800f590:	d1f3      	bne.n	800f57a <remove_chain+0x30>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f592:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800f596:	1e91      	subs	r1, r2, #2
 800f598:	428b      	cmp	r3, r1
 800f59a:	d205      	bcs.n	800f5a8 <remove_chain+0x5e>
			fs->free_clst++;
 800f59c:	3301      	adds	r3, #1
 800f59e:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 800f5a0:	7923      	ldrb	r3, [r4, #4]
 800f5a2:	f043 0301 	orr.w	r3, r3, #1
 800f5a6:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f5a8:	42b2      	cmp	r2, r6
 800f5aa:	4635      	mov	r5, r6
 800f5ac:	d8de      	bhi.n	800f56c <remove_chain+0x22>
 800f5ae:	e7e3      	b.n	800f578 <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f5b0:	2002      	movs	r0, #2
 800f5b2:	e7e2      	b.n	800f57a <remove_chain+0x30>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f5b4:	2001      	movs	r0, #1
 800f5b6:	e7e0      	b.n	800f57a <remove_chain+0x30>

0800f5b8 <unlock_fs>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f5b8:	b140      	cbz	r0, 800f5cc <unlock_fs+0x14>
 800f5ba:	f1a1 030b 	sub.w	r3, r1, #11
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d904      	bls.n	800f5cc <unlock_fs+0x14>
 800f5c2:	290f      	cmp	r1, #15
 800f5c4:	d002      	beq.n	800f5cc <unlock_fs+0x14>
		ff_rel_grant(fs->sobj);
 800f5c6:	68c0      	ldr	r0, [r0, #12]
 800f5c8:	f000 bee1 	b.w	801038e <ff_rel_grant>
}
 800f5cc:	4770      	bx	lr

0800f5ce <sync_fs>:
{
 800f5ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5d0:	4604      	mov	r4, r0
	res = sync_window(fs);
 800f5d2:	f7ff fcc9 	bl	800ef68 <sync_window>
 800f5d6:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800f5d8:	2800      	cmp	r0, #0
 800f5da:	d142      	bne.n	800f662 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f5dc:	7823      	ldrb	r3, [r4, #0]
 800f5de:	2b03      	cmp	r3, #3
 800f5e0:	d137      	bne.n	800f652 <sync_fs+0x84>
 800f5e2:	7927      	ldrb	r7, [r4, #4]
 800f5e4:	2f01      	cmp	r7, #1
 800f5e6:	d134      	bne.n	800f652 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 800f5e8:	f104 0634 	add.w	r6, r4, #52	; 0x34
 800f5ec:	4601      	mov	r1, r0
 800f5ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	f7ff fb14 	bl	800ec20 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800f5f8:	2355      	movs	r3, #85	; 0x55
	*ptr++ = (BYTE)val;
 800f5fa:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800f5fc:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val; val >>= 8;
 800f5fe:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 800f602:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE)val;
 800f604:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f608:	f504 7007 	add.w	r0, r4, #540	; 0x21c
	*ptr++ = (BYTE)val;
 800f60c:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 800f610:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val; val >>= 8;
 800f612:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val; val >>= 8;
 800f616:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800f61a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 800f61e:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 800f620:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 800f624:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 800f628:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 800f62c:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f630:	6961      	ldr	r1, [r4, #20]
 800f632:	f7ff faed 	bl	800ec10 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f636:	6921      	ldr	r1, [r4, #16]
 800f638:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800f63c:	f7ff fae8 	bl	800ec10 <st_dword>
			fs->winsect = fs->volbase + 1;
 800f640:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f642:	463b      	mov	r3, r7
 800f644:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800f646:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f648:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800f64a:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f64c:	f7ff fabc 	bl	800ebc8 <disk_write>
			fs->fsi_flag = 0;
 800f650:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f652:	2200      	movs	r2, #0
 800f654:	7860      	ldrb	r0, [r4, #1]
 800f656:	4611      	mov	r1, r2
 800f658:	f7ff fac4 	bl	800ebe4 <disk_ioctl>
 800f65c:	3000      	adds	r0, #0
 800f65e:	bf18      	it	ne
 800f660:	2001      	movne	r0, #1
}
 800f662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f664 <dir_sdi.constprop.14>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800f664:	b538      	push	{r3, r4, r5, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f666:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 800f668:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800f66a:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800f66c:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800f66e:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f670:	b992      	cbnz	r2, 800f698 <dir_sdi.constprop.14+0x34>
 800f672:	7823      	ldrb	r3, [r4, #0]
 800f674:	2b02      	cmp	r3, #2
 800f676:	d901      	bls.n	800f67c <dir_sdi.constprop.14+0x18>
		clst = fs->dirbase;
 800f678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f67a:	b973      	cbnz	r3, 800f69a <dir_sdi.constprop.14+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f67c:	8923      	ldrh	r3, [r4, #8]
 800f67e:	b90b      	cbnz	r3, 800f684 <dir_sdi.constprop.14+0x20>
 800f680:	2002      	movs	r0, #2
}
 800f682:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 800f684:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f686:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 800f688:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 800f68a:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d0f7      	beq.n	800f680 <dir_sdi.constprop.14+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f690:	3434      	adds	r4, #52	; 0x34
	return FR_OK;
 800f692:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f694:	622c      	str	r4, [r5, #32]
 800f696:	e7f4      	b.n	800f682 <dir_sdi.constprop.14+0x1e>
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f698:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f69a:	8961      	ldrh	r1, [r4, #10]
 800f69c:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 800f69e:	b961      	cbnz	r1, 800f6ba <dir_sdi.constprop.14+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f6a0:	4611      	mov	r1, r2
 800f6a2:	6828      	ldr	r0, [r5, #0]
 800f6a4:	f7ff fe9f 	bl	800f3e6 <get_fat.isra.9>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f6a8:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f6aa:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f6ac:	d00b      	beq.n	800f6c6 <dir_sdi.constprop.14+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f6ae:	2801      	cmp	r0, #1
 800f6b0:	d9e6      	bls.n	800f680 <dir_sdi.constprop.14+0x1c>
 800f6b2:	69a3      	ldr	r3, [r4, #24]
 800f6b4:	4298      	cmp	r0, r3
 800f6b6:	d3f3      	bcc.n	800f6a0 <dir_sdi.constprop.14+0x3c>
 800f6b8:	e7e2      	b.n	800f680 <dir_sdi.constprop.14+0x1c>
		dp->sect = clust2sect(fs, clst);
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	4620      	mov	r0, r4
 800f6be:	f7ff fb4b 	bl	800ed58 <clust2sect>
 800f6c2:	61e8      	str	r0, [r5, #28]
 800f6c4:	e7e0      	b.n	800f688 <dir_sdi.constprop.14+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f6c6:	2001      	movs	r0, #1
 800f6c8:	e7db      	b.n	800f682 <dir_sdi.constprop.14+0x1e>

0800f6ca <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f6ca:	69c3      	ldr	r3, [r0, #28]
{
 800f6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6d0:	4605      	mov	r5, r0
 800f6d2:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f6d4:	b1ab      	cbz	r3, 800f702 <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f6d6:	6942      	ldr	r2, [r0, #20]
 800f6d8:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f6dc:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 800f6e0:	d20f      	bcs.n	800f702 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f6e2:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 800f6e6:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f6e8:	f1b9 0f00 	cmp.w	r9, #0
 800f6ec:	d14d      	bne.n	800f78a <dir_next+0xc0>
		dp->sect++;				/* Next sector */
 800f6ee:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800f6f0:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800f6f2:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800f6f4:	b939      	cbnz	r1, 800f706 <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f6f6:	8923      	ldrh	r3, [r4, #8]
 800f6f8:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 800f6fc:	d845      	bhi.n	800f78a <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 800f6fe:	2300      	movs	r3, #0
 800f700:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f702:	2004      	movs	r0, #4
 800f704:	e00b      	b.n	800f71e <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f706:	8963      	ldrh	r3, [r4, #10]
 800f708:	3b01      	subs	r3, #1
 800f70a:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 800f70e:	d13c      	bne.n	800f78a <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f710:	4620      	mov	r0, r4
 800f712:	f7ff fe68 	bl	800f3e6 <get_fat.isra.9>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f716:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f718:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f71a:	d802      	bhi.n	800f722 <dir_next+0x58>
 800f71c:	2002      	movs	r0, #2
}
 800f71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f722:	1c42      	adds	r2, r0, #1
 800f724:	d101      	bne.n	800f72a <dir_next+0x60>
 800f726:	2001      	movs	r0, #1
 800f728:	e7f9      	b.n	800f71e <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f72a:	69a3      	ldr	r3, [r4, #24]
 800f72c:	4283      	cmp	r3, r0
 800f72e:	d826      	bhi.n	800f77e <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 800f730:	2f00      	cmp	r7, #0
 800f732:	d0e4      	beq.n	800f6fe <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f734:	69a9      	ldr	r1, [r5, #24]
 800f736:	4628      	mov	r0, r5
 800f738:	f7ff feaf 	bl	800f49a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f73c:	4606      	mov	r6, r0
 800f73e:	2800      	cmp	r0, #0
 800f740:	d036      	beq.n	800f7b0 <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f742:	2801      	cmp	r0, #1
 800f744:	d0ea      	beq.n	800f71c <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f746:	1c43      	adds	r3, r0, #1
 800f748:	d0ed      	beq.n	800f726 <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f74a:	4620      	mov	r0, r4
 800f74c:	f7ff fc0c 	bl	800ef68 <sync_window>
 800f750:	4607      	mov	r7, r0
 800f752:	2800      	cmp	r0, #0
 800f754:	d1e7      	bne.n	800f726 <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f756:	4601      	mov	r1, r0
 800f758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f75c:	f104 0034 	add.w	r0, r4, #52	; 0x34
						fs->wflag = 1;
 800f760:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f764:	f7ff fa5c 	bl	800ec20 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f768:	4631      	mov	r1, r6
 800f76a:	4620      	mov	r0, r4
 800f76c:	f7ff faf4 	bl	800ed58 <clust2sect>
 800f770:	6320      	str	r0, [r4, #48]	; 0x30
 800f772:	8963      	ldrh	r3, [r4, #10]
 800f774:	429f      	cmp	r7, r3
 800f776:	d30f      	bcc.n	800f798 <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 800f778:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f77a:	1bdf      	subs	r7, r3, r7
 800f77c:	6327      	str	r7, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 800f77e:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 800f780:	4631      	mov	r1, r6
 800f782:	4620      	mov	r0, r4
 800f784:	f7ff fae8 	bl	800ed58 <clust2sect>
 800f788:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f78a:	3434      	adds	r4, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800f78c:	f8c5 8014 	str.w	r8, [r5, #20]
	return FR_OK;
 800f790:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f792:	444c      	add	r4, r9
 800f794:	622c      	str	r4, [r5, #32]
	return FR_OK;
 800f796:	e7c2      	b.n	800f71e <dir_next+0x54>
						fs->wflag = 1;
 800f798:	f884 a003 	strb.w	sl, [r4, #3]
 800f79c:	4620      	mov	r0, r4
 800f79e:	f7ff fbc0 	bl	800ef22 <sync_window.part.5>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f7a2:	2800      	cmp	r0, #0
 800f7a4:	d1bf      	bne.n	800f726 <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f7a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f7a8:	3701      	adds	r7, #1
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	6323      	str	r3, [r4, #48]	; 0x30
 800f7ae:	e7e0      	b.n	800f772 <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f7b0:	2007      	movs	r0, #7
 800f7b2:	e7b4      	b.n	800f71e <dir_next+0x54>

0800f7b4 <follow_path>:
{
 800f7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7b8:	4604      	mov	r4, r0
	FATFS *fs = obj->fs;
 800f7ba:	6807      	ldr	r7, [r0, #0]
 800f7bc:	460d      	mov	r5, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f7be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7c2:	2b2f      	cmp	r3, #47	; 0x2f
 800f7c4:	d0fa      	beq.n	800f7bc <follow_path+0x8>
 800f7c6:	2b5c      	cmp	r3, #92	; 0x5c
 800f7c8:	d0f8      	beq.n	800f7bc <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f7ce:	782b      	ldrb	r3, [r5, #0]
 800f7d0:	2b1f      	cmp	r3, #31
 800f7d2:	d95a      	bls.n	800f88a <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f7d4:	f8df 814c 	ldr.w	r8, [pc, #332]	; 800f924 <follow_path+0x170>
	p = *path; sfn = dp->fn;
 800f7d8:	f104 0624 	add.w	r6, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 800f7dc:	220b      	movs	r2, #11
 800f7de:	2120      	movs	r1, #32
 800f7e0:	4630      	mov	r0, r6
 800f7e2:	f7ff fa1d 	bl	800ec20 <mem_set>
	si = i = 0; ni = 8;
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	f105 3cff 	add.w	ip, r5, #4294967295
 800f7ec:	2008      	movs	r0, #8
 800f7ee:	4611      	mov	r1, r2
		c = (BYTE)p[si++];
 800f7f0:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800f7f4:	3101      	adds	r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f7f6:	2b20      	cmp	r3, #32
 800f7f8:	d90d      	bls.n	800f816 <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f7fa:	2b2f      	cmp	r3, #47	; 0x2f
 800f7fc:	d001      	beq.n	800f802 <follow_path+0x4e>
 800f7fe:	2b5c      	cmp	r3, #92	; 0x5c
 800f800:	d14b      	bne.n	800f89a <follow_path+0xe6>
 800f802:	1868      	adds	r0, r5, r1
 800f804:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f806:	f810 cb01 	ldrb.w	ip, [r0], #1
 800f80a:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800f80e:	d0f9      	beq.n	800f804 <follow_path+0x50>
 800f810:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
 800f814:	d0f6      	beq.n	800f804 <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 800f816:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f818:	2a00      	cmp	r2, #0
 800f81a:	d051      	beq.n	800f8c0 <follow_path+0x10c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f81c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f820:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800f822:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f826:	2ae5      	cmp	r2, #229	; 0xe5
 800f828:	bf04      	itt	eq
 800f82a:	2205      	moveq	r2, #5
 800f82c:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f830:	2b21      	cmp	r3, #33	; 0x21
 800f832:	bf34      	ite	cc
 800f834:	2304      	movcc	r3, #4
 800f836:	2300      	movcs	r3, #0
 800f838:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f83c:	f7ff ff12 	bl	800f664 <dir_sdi.constprop.14>
	if (res != FR_OK) return res;
 800f840:	2800      	cmp	r0, #0
 800f842:	d141      	bne.n	800f8c8 <follow_path+0x114>
		res = move_window(fs, dp->sect);
 800f844:	69e1      	ldr	r1, [r4, #28]
 800f846:	4648      	mov	r0, r9
 800f848:	f7ff fb94 	bl	800ef74 <move_window>
		if (res != FR_OK) break;
 800f84c:	2800      	cmp	r0, #0
 800f84e:	d13b      	bne.n	800f8c8 <follow_path+0x114>
		c = dp->dir[DIR_Name];
 800f850:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f852:	781a      	ldrb	r2, [r3, #0]
 800f854:	2a00      	cmp	r2, #0
 800f856:	d042      	beq.n	800f8de <follow_path+0x12a>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f858:	7ada      	ldrb	r2, [r3, #11]
 800f85a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f85e:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f860:	7ada      	ldrb	r2, [r3, #11]
 800f862:	0711      	lsls	r1, r2, #28
 800f864:	d40c      	bmi.n	800f880 <follow_path+0xcc>
 800f866:	f103 0c0b 	add.w	ip, r3, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f86a:	4631      	mov	r1, r6
		r = *d++ - *s++;
 800f86c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f870:	f811 eb01 	ldrb.w	lr, [r1], #1
	} while (--cnt && r == 0);
 800f874:	459c      	cmp	ip, r3
		r = *d++ - *s++;
 800f876:	eba2 020e 	sub.w	r2, r2, lr
	} while (--cnt && r == 0);
 800f87a:	d023      	beq.n	800f8c4 <follow_path+0x110>
 800f87c:	2a00      	cmp	r2, #0
 800f87e:	d0f5      	beq.n	800f86c <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 800f880:	2100      	movs	r1, #0
 800f882:	4620      	mov	r0, r4
 800f884:	f7ff ff21 	bl	800f6ca <dir_next>
 800f888:	e7da      	b.n	800f840 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 800f88a:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800f88c:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 800f88e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}
 800f892:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 800f896:	f7ff bee5 	b.w	800f664 <dir_sdi.constprop.14>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f89a:	2b2e      	cmp	r3, #46	; 0x2e
 800f89c:	d033      	beq.n	800f906 <follow_path+0x152>
 800f89e:	4290      	cmp	r0, r2
 800f8a0:	d90e      	bls.n	800f8c0 <follow_path+0x10c>
		if (c >= 0x80) {				/* Extended character? */
 800f8a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f8a6:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800f928 <follow_path+0x174>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f8aa:	bf1c      	itt	ne
 800f8ac:	3b80      	subne	r3, #128	; 0x80
 800f8ae:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 800f8b2:	f819 ef01 	ldrb.w	lr, [r9, #1]!
 800f8b6:	f1be 0f00 	cmp.w	lr, #0
 800f8ba:	d029      	beq.n	800f910 <follow_path+0x15c>
 800f8bc:	4573      	cmp	r3, lr
 800f8be:	d1f8      	bne.n	800f8b2 <follow_path+0xfe>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f8c0:	2006      	movs	r0, #6
	return res;
 800f8c2:	e00a      	b.n	800f8da <follow_path+0x126>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f8c4:	2a00      	cmp	r2, #0
 800f8c6:	d1db      	bne.n	800f880 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 800f8c8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800f8cc:	b148      	cbz	r0, 800f8e2 <follow_path+0x12e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f8ce:	2804      	cmp	r0, #4
 800f8d0:	d103      	bne.n	800f8da <follow_path+0x126>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f8d2:	f013 0f04 	tst.w	r3, #4
 800f8d6:	bf08      	it	eq
 800f8d8:	2005      	moveq	r0, #5
}
 800f8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f8de:	2004      	movs	r0, #4
 800f8e0:	e7f2      	b.n	800f8c8 <follow_path+0x114>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f8e2:	075a      	lsls	r2, r3, #29
 800f8e4:	d4f9      	bmi.n	800f8da <follow_path+0x126>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f8e6:	79a3      	ldrb	r3, [r4, #6]
 800f8e8:	06db      	lsls	r3, r3, #27
 800f8ea:	d50a      	bpl.n	800f902 <follow_path+0x14e>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f8ec:	6963      	ldr	r3, [r4, #20]
 800f8ee:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800f8f2:	7838      	ldrb	r0, [r7, #0]
 800f8f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8f8:	4419      	add	r1, r3
 800f8fa:	f7ff facd 	bl	800ee98 <ld_clust.isra.1>
 800f8fe:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f900:	e76a      	b.n	800f7d8 <follow_path+0x24>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f902:	2005      	movs	r0, #5
 800f904:	e7e9      	b.n	800f8da <follow_path+0x126>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f906:	280b      	cmp	r0, #11
 800f908:	d0da      	beq.n	800f8c0 <follow_path+0x10c>
			i = 8; ni = 11;				/* Goto extension */
 800f90a:	2208      	movs	r2, #8
 800f90c:	200b      	movs	r0, #11
 800f90e:	e76f      	b.n	800f7f0 <follow_path+0x3c>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f910:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 800f914:	f1be 0f19 	cmp.w	lr, #25
 800f918:	d801      	bhi.n	800f91e <follow_path+0x16a>
 800f91a:	3b20      	subs	r3, #32
 800f91c:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 800f91e:	54b3      	strb	r3, [r6, r2]
 800f920:	3201      	adds	r2, #1
 800f922:	e765      	b.n	800f7f0 <follow_path+0x3c>
 800f924:	08017108 	.word	0x08017108
 800f928:	08017187 	.word	0x08017187

0800f92c <dir_read.constprop.12>:
FRESULT dir_read (
 800f92c:	b538      	push	{r3, r4, r5, lr}
 800f92e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800f930:	6805      	ldr	r5, [r0, #0]
	FRESULT res = FR_NO_FILE;
 800f932:	2004      	movs	r0, #4
	while (dp->sect) {
 800f934:	69e1      	ldr	r1, [r4, #28]
 800f936:	b909      	cbnz	r1, 800f93c <dir_read.constprop.12+0x10>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f938:	b1a8      	cbz	r0, 800f966 <dir_read.constprop.12+0x3a>
 800f93a:	e01c      	b.n	800f976 <dir_read.constprop.12+0x4a>
		res = move_window(fs, dp->sect);
 800f93c:	4628      	mov	r0, r5
 800f93e:	f7ff fb19 	bl	800ef74 <move_window>
		if (res != FR_OK) break;
 800f942:	b9c0      	cbnz	r0, 800f976 <dir_read.constprop.12+0x4a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f944:	6a23      	ldr	r3, [r4, #32]
 800f946:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) {
 800f948:	b1c2      	cbz	r2, 800f97c <dir_read.constprop.12+0x50>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f94a:	7adb      	ldrb	r3, [r3, #11]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f94c:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f94e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f952:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f954:	d009      	beq.n	800f96a <dir_read.constprop.12+0x3e>
 800f956:	2a2e      	cmp	r2, #46	; 0x2e
 800f958:	d007      	beq.n	800f96a <dir_read.constprop.12+0x3e>
 800f95a:	2b0f      	cmp	r3, #15
 800f95c:	d005      	beq.n	800f96a <dir_read.constprop.12+0x3e>
 800f95e:	f023 0320 	bic.w	r3, r3, #32
 800f962:	2b08      	cmp	r3, #8
 800f964:	d001      	beq.n	800f96a <dir_read.constprop.12+0x3e>
		res = move_window(fs, dp->sect);
 800f966:	2000      	movs	r0, #0
}
 800f968:	bd38      	pop	{r3, r4, r5, pc}
		res = dir_next(dp, 0);		/* Next entry */
 800f96a:	2100      	movs	r1, #0
 800f96c:	4620      	mov	r0, r4
 800f96e:	f7ff feac 	bl	800f6ca <dir_next>
		if (res != FR_OK) break;
 800f972:	2800      	cmp	r0, #0
 800f974:	d0de      	beq.n	800f934 <dir_read.constprop.12+0x8>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f976:	2300      	movs	r3, #0
 800f978:	61e3      	str	r3, [r4, #28]
 800f97a:	e7f5      	b.n	800f968 <dir_read.constprop.12+0x3c>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f97c:	2004      	movs	r0, #4
 800f97e:	e7fa      	b.n	800f976 <dir_read.constprop.12+0x4a>

0800f980 <dir_register>:
{
 800f980:	b570      	push	{r4, r5, r6, lr}
 800f982:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800f984:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800f986:	f7ff fe6d 	bl	800f664 <dir_sdi.constprop.14>
	if (res == FR_OK) {
 800f98a:	4604      	mov	r4, r0
 800f98c:	bb28      	cbnz	r0, 800f9da <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 800f98e:	69e9      	ldr	r1, [r5, #28]
 800f990:	4630      	mov	r0, r6
 800f992:	f7ff faef 	bl	800ef74 <move_window>
			if (res != FR_OK) break;
 800f996:	4604      	mov	r4, r0
 800f998:	b9f8      	cbnz	r0, 800f9da <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f99a:	6a2b      	ldr	r3, [r5, #32]
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	2be5      	cmp	r3, #229	; 0xe5
 800f9a0:	d114      	bne.n	800f9cc <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 800f9a2:	69e9      	ldr	r1, [r5, #28]
 800f9a4:	4630      	mov	r0, r6
 800f9a6:	f7ff fae5 	bl	800ef74 <move_window>
		if (res == FR_OK) {
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	b960      	cbnz	r0, 800f9c8 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f9ae:	4601      	mov	r1, r0
 800f9b0:	2220      	movs	r2, #32
 800f9b2:	6a28      	ldr	r0, [r5, #32]
 800f9b4:	f7ff f934 	bl	800ec20 <mem_set>
 800f9b8:	220b      	movs	r2, #11
 800f9ba:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800f9be:	6a28      	ldr	r0, [r5, #32]
 800f9c0:	f7ff fa61 	bl	800ee86 <mem_cpy.part.0>
			fs->wflag = 1;
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	70f3      	strb	r3, [r6, #3]
}
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d0e8      	beq.n	800f9a2 <dir_register+0x22>
			res = dir_next(dp, 1);
 800f9d0:	2101      	movs	r1, #1
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	f7ff fe79 	bl	800f6ca <dir_next>
 800f9d8:	e7d7      	b.n	800f98a <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f9da:	2c04      	cmp	r4, #4
 800f9dc:	bf08      	it	eq
 800f9de:	2407      	moveq	r4, #7
 800f9e0:	e7f2      	b.n	800f9c8 <dir_register+0x48>

0800f9e2 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f9e2:	b538      	push	{r3, r4, r5, lr}
 800f9e4:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f9e6:	4604      	mov	r4, r0
 800f9e8:	b1d0      	cbz	r0, 800fa20 <validate+0x3e>
 800f9ea:	6803      	ldr	r3, [r0, #0]
 800f9ec:	b1db      	cbz	r3, 800fa26 <validate+0x44>
 800f9ee:	781a      	ldrb	r2, [r3, #0]
 800f9f0:	b1b2      	cbz	r2, 800fa20 <validate+0x3e>
 800f9f2:	8881      	ldrh	r1, [r0, #4]
 800f9f4:	88da      	ldrh	r2, [r3, #6]
 800f9f6:	4291      	cmp	r1, r2
 800f9f8:	d112      	bne.n	800fa20 <validate+0x3e>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f9fa:	68d8      	ldr	r0, [r3, #12]
 800f9fc:	f000 fcbe 	bl	801037c <ff_req_grant>
 800fa00:	4603      	mov	r3, r0
 800fa02:	b190      	cbz	r0, 800fa2a <validate+0x48>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fa04:	6823      	ldr	r3, [r4, #0]
 800fa06:	7858      	ldrb	r0, [r3, #1]
 800fa08:	f7ff f8b6 	bl	800eb78 <disk_status>
 800fa0c:	f010 0001 	ands.w	r0, r0, #1
 800fa10:	d102      	bne.n	800fa18 <validate+0x36>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fa12:	6823      	ldr	r3, [r4, #0]
 800fa14:	602b      	str	r3, [r5, #0]
	return res;
}
 800fa16:	bd38      	pop	{r3, r4, r5, pc}
				unlock_fs(obj->fs, FR_OK);
 800fa18:	2100      	movs	r1, #0
 800fa1a:	6820      	ldr	r0, [r4, #0]
 800fa1c:	f7ff fdcc 	bl	800f5b8 <unlock_fs>
	FRESULT res = FR_INVALID_OBJECT;
 800fa20:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fa22:	2300      	movs	r3, #0
 800fa24:	e7f6      	b.n	800fa14 <validate+0x32>
	FRESULT res = FR_INVALID_OBJECT;
 800fa26:	2009      	movs	r0, #9
 800fa28:	e7f4      	b.n	800fa14 <validate+0x32>
			res = FR_TIMEOUT;
 800fa2a:	200f      	movs	r0, #15
 800fa2c:	e7f2      	b.n	800fa14 <validate+0x32>
	...

0800fa30 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fa30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa32:	b085      	sub	sp, #20
 800fa34:	4616      	mov	r6, r2
 800fa36:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fa3a:	a804      	add	r0, sp, #16
 800fa3c:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fa40:	f7ff fa09 	bl	800ee56 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800fa44:	1e07      	subs	r7, r0, #0
 800fa46:	db35      	blt.n	800fab4 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fa48:	4d1c      	ldr	r5, [pc, #112]	; (800fabc <f_mount+0x8c>)
 800fa4a:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]

	if (cfs) {
 800fa4e:	b1a4      	cbz	r4, 800fa7a <f_mount+0x4a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fa50:	4b1b      	ldr	r3, [pc, #108]	; (800fac0 <f_mount+0x90>)
#if _FS_LOCK != 0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800fa52:	68e0      	ldr	r0, [r4, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fa54:	681a      	ldr	r2, [r3, #0]
 800fa56:	4294      	cmp	r4, r2
 800fa58:	bf04      	itt	eq
 800fa5a:	2200      	moveq	r2, #0
 800fa5c:	601a      	streq	r2, [r3, #0]
 800fa5e:	691a      	ldr	r2, [r3, #16]
 800fa60:	4294      	cmp	r4, r2
 800fa62:	bf04      	itt	eq
 800fa64:	2200      	moveq	r2, #0
 800fa66:	611a      	streq	r2, [r3, #16]
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800fa68:	f000 fc83 	bl	8010372 <ff_del_syncobj>
 800fa6c:	b918      	cbnz	r0, 800fa76 <f_mount+0x46>
 800fa6e:	2402      	movs	r4, #2

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800fa70:	4620      	mov	r0, r4
 800fa72:	b005      	add	sp, #20
 800fa74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cfs->fs_type = 0;				/* Clear old fs object */
 800fa76:	2300      	movs	r3, #0
 800fa78:	7023      	strb	r3, [r4, #0]
	if (fs) {
 800fa7a:	9901      	ldr	r1, [sp, #4]
 800fa7c:	b989      	cbnz	r1, 800faa2 <f_mount+0x72>
	FatFs[vol] = fs;					/* Register new fs object */
 800fa7e:	9c01      	ldr	r4, [sp, #4]
 800fa80:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fa84:	2c00      	cmp	r4, #0
 800fa86:	d0f3      	beq.n	800fa70 <f_mount+0x40>
 800fa88:	2e01      	cmp	r6, #1
 800fa8a:	d115      	bne.n	800fab8 <f_mount+0x88>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fa8c:	a901      	add	r1, sp, #4
 800fa8e:	2200      	movs	r2, #0
 800fa90:	4668      	mov	r0, sp
 800fa92:	f7ff facb 	bl	800f02c <find_volume>
 800fa96:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 800fa98:	4601      	mov	r1, r0
 800fa9a:	9801      	ldr	r0, [sp, #4]
 800fa9c:	f7ff fd8c 	bl	800f5b8 <unlock_fs>
 800faa0:	e7e6      	b.n	800fa70 <f_mount+0x40>
		fs->fs_type = 0;				/* Clear new fs object */
 800faa2:	2300      	movs	r3, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800faa4:	b2f8      	uxtb	r0, r7
		fs->fs_type = 0;				/* Clear new fs object */
 800faa6:	f801 3b0c 	strb.w	r3, [r1], #12
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800faaa:	f000 fc56 	bl	801035a <ff_cre_syncobj>
 800faae:	2800      	cmp	r0, #0
 800fab0:	d1e5      	bne.n	800fa7e <f_mount+0x4e>
 800fab2:	e7dc      	b.n	800fa6e <f_mount+0x3e>
	if (vol < 0) return FR_INVALID_DRIVE;
 800fab4:	240b      	movs	r4, #11
 800fab6:	e7db      	b.n	800fa70 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fab8:	2400      	movs	r4, #0
 800faba:	e7d9      	b.n	800fa70 <f_mount+0x40>
 800fabc:	240008d8 	.word	0x240008d8
 800fac0:	240008dc 	.word	0x240008dc

0800fac4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fac8:	b090      	sub	sp, #64	; 0x40
 800faca:	4690      	mov	r8, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800facc:	4604      	mov	r4, r0
{
 800face:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 800fad0:	2800      	cmp	r0, #0
 800fad2:	f000 80bb 	beq.w	800fc4c <f_open+0x188>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fad6:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800fada:	a902      	add	r1, sp, #8
 800fadc:	a801      	add	r0, sp, #4
 800fade:	462a      	mov	r2, r5
 800fae0:	f7ff faa4 	bl	800f02c <find_volume>
	if (res == FR_OK) {
 800fae4:	4607      	mov	r7, r0
 800fae6:	2800      	cmp	r0, #0
 800fae8:	d165      	bne.n	800fbb6 <f_open+0xf2>
		dj.obj.fs = fs;
 800faea:	ae10      	add	r6, sp, #64	; 0x40
 800faec:	9b02      	ldr	r3, [sp, #8]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800faee:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800faf0:	f846 3d34 	str.w	r3, [r6, #-52]!
		res = follow_path(&dj, path);	/* Follow the file path */
 800faf4:	4630      	mov	r0, r6
 800faf6:	f7ff fe5d 	bl	800f7b4 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fafa:	b958      	cbnz	r0, 800fb14 <f_open+0x50>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fafc:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	db63      	blt.n	800fbcc <f_open+0x108>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fb04:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 800fb08:	4630      	mov	r0, r6
 800fb0a:	bf14      	ite	ne
 800fb0c:	2101      	movne	r1, #1
 800fb0e:	2100      	moveq	r1, #0
 800fb10:	f7ff f88c 	bl	800ec2c <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fb14:	f018 0f1c 	tst.w	r8, #28
 800fb18:	d064      	beq.n	800fbe4 <f_open+0x120>
			if (res != FR_OK) {					/* No file, create new */
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	d058      	beq.n	800fbd0 <f_open+0x10c>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fb1e:	2804      	cmp	r0, #4
 800fb20:	d149      	bne.n	800fbb6 <f_open+0xf2>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fb22:	4b6f      	ldr	r3, [pc, #444]	; (800fce0 <f_open+0x21c>)
 800fb24:	681a      	ldr	r2, [r3, #0]
 800fb26:	b11a      	cbz	r2, 800fb30 <f_open+0x6c>
 800fb28:	691b      	ldr	r3, [r3, #16]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	f040 8088 	bne.w	800fc40 <f_open+0x17c>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fb30:	4630      	mov	r0, r6
 800fb32:	f7ff ff25 	bl	800f980 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fb36:	2800      	cmp	r0, #0
 800fb38:	d13d      	bne.n	800fbb6 <f_open+0xf2>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fb3a:	f045 0508 	orr.w	r5, r5, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fb3e:	0728      	lsls	r0, r5, #28
 800fb40:	d55b      	bpl.n	800fbfa <f_open+0x136>
				dw = GET_FATTIME();
 800fb42:	f7fe f95d 	bl	800de00 <get_fattime>
 800fb46:	4602      	mov	r2, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fb48:	4601      	mov	r1, r0
 800fb4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800fb4c:	300e      	adds	r0, #14
 800fb4e:	f7ff f85f 	bl	800ec10 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fb52:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800fb54:	4611      	mov	r1, r2
 800fb56:	3016      	adds	r0, #22
 800fb58:	f7ff f85a 	bl	800ec10 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fb5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb5e:	2220      	movs	r2, #32
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fb60:	f8dd 9008 	ldr.w	r9, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fb64:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fb66:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800fb6a:	f899 0000 	ldrb.w	r0, [r9]
 800fb6e:	4651      	mov	r1, sl
 800fb70:	f7ff f992 	bl	800ee98 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fb74:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fb76:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fb78:	4648      	mov	r0, r9
 800fb7a:	f7ff f99c 	bl	800eeb6 <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fb7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800fb80:	2200      	movs	r2, #0
					fs->wflag = 1;
 800fb82:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800fb84:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb86:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb88:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 800fb8a:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 800fb8c:	9b02      	ldr	r3, [sp, #8]
 800fb8e:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fb90:	f1b8 0f00 	cmp.w	r8, #0
 800fb94:	d031      	beq.n	800fbfa <f_open+0x136>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 800fb96:	4641      	mov	r1, r8
 800fb98:	4630      	mov	r0, r6
						dw = fs->winsect;
 800fb9a:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800fb9e:	f7ff fcd4 	bl	800f54a <remove_chain>
						if (res == FR_OK) {
 800fba2:	b940      	cbnz	r0, 800fbb6 <f_open+0xf2>
							res = move_window(fs, dw);
 800fba4:	4649      	mov	r1, r9
 800fba6:	9802      	ldr	r0, [sp, #8]
 800fba8:	f7ff f9e4 	bl	800ef74 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fbac:	f108 33ff 	add.w	r3, r8, #4294967295
 800fbb0:	9a02      	ldr	r2, [sp, #8]
 800fbb2:	6113      	str	r3, [r2, #16]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 800fbb4:	b308      	cbz	r0, 800fbfa <f_open+0x136>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	4607      	mov	r7, r0
 800fbba:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
 800fbbc:	4639      	mov	r1, r7
 800fbbe:	9802      	ldr	r0, [sp, #8]
 800fbc0:	f7ff fcfa 	bl	800f5b8 <unlock_fs>
}
 800fbc4:	4638      	mov	r0, r7
 800fbc6:	b010      	add	sp, #64	; 0x40
 800fbc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 800fbcc:	2006      	movs	r0, #6
 800fbce:	e7a1      	b.n	800fb14 <f_open+0x50>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fbd0:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800fbd4:	f013 0f11 	tst.w	r3, #17
 800fbd8:	d136      	bne.n	800fc48 <f_open+0x184>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fbda:	f018 0f04 	tst.w	r8, #4
 800fbde:	d0ae      	beq.n	800fb3e <f_open+0x7a>
 800fbe0:	2008      	movs	r0, #8
 800fbe2:	e7e8      	b.n	800fbb6 <f_open+0xf2>
			if (res == FR_OK) {					/* Following succeeded */
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	d1e6      	bne.n	800fbb6 <f_open+0xf2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fbe8:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800fbec:	06da      	lsls	r2, r3, #27
 800fbee:	d429      	bmi.n	800fc44 <f_open+0x180>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fbf0:	f018 0f02 	tst.w	r8, #2
 800fbf4:	d001      	beq.n	800fbfa <f_open+0x136>
 800fbf6:	07db      	lsls	r3, r3, #31
 800fbf8:	d426      	bmi.n	800fc48 <f_open+0x184>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fbfa:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fbfc:	9b02      	ldr	r3, [sp, #8]
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fbfe:	4630      	mov	r0, r6
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fc00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				mode |= FA_MODIFIED;
 800fc02:	bf48      	it	mi
 800fc04:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fc08:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc0a:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 800fc0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc10:	bf14      	ite	ne
 800fc12:	2101      	movne	r1, #1
 800fc14:	2100      	moveq	r1, #0
			fp->dir_ptr = dj.dir;
 800fc16:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc18:	f7ff f842 	bl	800eca0 <inc_lock>
 800fc1c:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fc1e:	b9b8      	cbnz	r0, 800fc50 <f_open+0x18c>
 800fc20:	2002      	movs	r0, #2
 800fc22:	e7c8      	b.n	800fbb6 <f_open+0xf2>
					clst = get_fat(&fp->obj, clst);
 800fc24:	6820      	ldr	r0, [r4, #0]
 800fc26:	eba5 0508 	sub.w	r5, r5, r8
 800fc2a:	f7ff fbdc 	bl	800f3e6 <get_fat.isra.9>
					if (clst <= 1) res = FR_INT_ERR;
 800fc2e:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800fc30:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800fc32:	d903      	bls.n	800fc3c <f_open+0x178>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fc34:	1c42      	adds	r2, r0, #1
 800fc36:	d134      	bne.n	800fca2 <f_open+0x1de>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fc38:	2001      	movs	r0, #1
 800fc3a:	e035      	b.n	800fca8 <f_open+0x1e4>
					if (clst <= 1) res = FR_INT_ERR;
 800fc3c:	2002      	movs	r0, #2
 800fc3e:	e033      	b.n	800fca8 <f_open+0x1e4>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fc40:	2012      	movs	r0, #18
 800fc42:	e7b8      	b.n	800fbb6 <f_open+0xf2>
					res = FR_NO_FILE;
 800fc44:	2004      	movs	r0, #4
 800fc46:	e7b6      	b.n	800fbb6 <f_open+0xf2>
					res = FR_DENIED;
 800fc48:	2007      	movs	r0, #7
 800fc4a:	e7b4      	b.n	800fbb6 <f_open+0xf2>
	if (!fp) return FR_INVALID_OBJECT;
 800fc4c:	2709      	movs	r7, #9
 800fc4e:	e7b9      	b.n	800fbc4 <f_open+0x100>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fc50:	9e02      	ldr	r6, [sp, #8]
 800fc52:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800fc56:	7830      	ldrb	r0, [r6, #0]
 800fc58:	4641      	mov	r1, r8
 800fc5a:	f7ff f91d 	bl	800ee98 <ld_clust.isra.1>
 800fc5e:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fc60:	f108 001c 	add.w	r0, r8, #28
 800fc64:	f7fe ffcc 	bl	800ec00 <ld_dword>
			fp->obj.id = fs->id;
 800fc68:	88f3      	ldrh	r3, [r6, #6]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fc6a:	2100      	movs	r1, #0
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fc6c:	6026      	str	r6, [r4, #0]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fc6e:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fc72:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 800fc74:	80a3      	strh	r3, [r4, #4]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fc76:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fc7a:	62e1      	str	r1, [r4, #44]	; 0x2c
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fc7c:	4630      	mov	r0, r6
			fp->flag = mode;		/* Set file access mode */
 800fc7e:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 800fc80:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fc82:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fc84:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fc86:	f7fe ffcb 	bl	800ec20 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fc8a:	06ab      	lsls	r3, r5, #26
 800fc8c:	d596      	bpl.n	800fbbc <f_open+0xf8>
 800fc8e:	68e5      	ldr	r5, [r4, #12]
 800fc90:	2d00      	cmp	r5, #0
 800fc92:	d093      	beq.n	800fbbc <f_open+0xf8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fc94:	9b02      	ldr	r3, [sp, #8]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fc96:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fc98:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fc9c:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fc9e:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fca2:	45a8      	cmp	r8, r5
 800fca4:	d3be      	bcc.n	800fc24 <f_open+0x160>
 800fca6:	2000      	movs	r0, #0
				fp->clust = clst;
 800fca8:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	d183      	bne.n	800fbb6 <f_open+0xf2>
 800fcae:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d082      	beq.n	800fbbc <f_open+0xf8>
 800fcb6:	f8dd 8008 	ldr.w	r8, [sp, #8]
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fcba:	4640      	mov	r0, r8
 800fcbc:	f7ff f84c 	bl	800ed58 <clust2sect>
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	d0ad      	beq.n	800fc20 <f_open+0x15c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fcc4:	eb00 2255 	add.w	r2, r0, r5, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fcc8:	2301      	movs	r3, #1
 800fcca:	4631      	mov	r1, r6
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fccc:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fcce:	f898 0001 	ldrb.w	r0, [r8, #1]
 800fcd2:	f7fe ff6b 	bl	800ebac <disk_read>
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	f43f af70 	beq.w	800fbbc <f_open+0xf8>
 800fcdc:	2001      	movs	r0, #1
 800fcde:	e76a      	b.n	800fbb6 <f_open+0xf2>
 800fce0:	240008dc 	.word	0x240008dc

0800fce4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce8:	469b      	mov	fp, r3
 800fcea:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800fcec:	2300      	movs	r3, #0
{
 800fcee:	4689      	mov	r9, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fcf0:	a903      	add	r1, sp, #12
{
 800fcf2:	4604      	mov	r4, r0
	*bw = 0;	/* Clear write byte counter */
 800fcf4:	f8cb 3000 	str.w	r3, [fp]
{
 800fcf8:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fcfa:	f7ff fe72 	bl	800f9e2 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fcfe:	4605      	mov	r5, r0
 800fd00:	b908      	cbnz	r0, 800fd06 <f_write+0x22>
 800fd02:	7d65      	ldrb	r5, [r4, #21]
 800fd04:	b10d      	cbz	r5, 800fd0a <f_write+0x26>
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
 800fd06:	4629      	mov	r1, r5
 800fd08:	e01e      	b.n	800fd48 <f_write+0x64>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fd0a:	7d23      	ldrb	r3, [r4, #20]
 800fd0c:	079a      	lsls	r2, r3, #30
 800fd0e:	d408      	bmi.n	800fd22 <f_write+0x3e>
 800fd10:	2507      	movs	r5, #7
 800fd12:	2107      	movs	r1, #7
 800fd14:	9803      	ldr	r0, [sp, #12]
 800fd16:	f7ff fc4f 	bl	800f5b8 <unlock_fs>
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	b005      	add	sp, #20
 800fd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fd22:	69a3      	ldr	r3, [r4, #24]
 800fd24:	42fb      	cmn	r3, r7
 800fd26:	d300      	bcc.n	800fd2a <f_write+0x46>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fd28:	43df      	mvns	r7, r3
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fd2a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800fd2e:	9300      	str	r3, [sp, #0]
 800fd30:	e070      	b.n	800fe14 <f_write+0x130>
					if (fp->cltbl) {
 800fd32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fd34:	b163      	cbz	r3, 800fd50 <f_write+0x6c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fd36:	4620      	mov	r0, r4
 800fd38:	f7ff f819 	bl	800ed6e <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fd3c:	b950      	cbnz	r0, 800fd54 <f_write+0x70>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fd3e:	7d23      	ldrb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800fd40:	2100      	movs	r1, #0
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fd42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd46:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800fd48:	9803      	ldr	r0, [sp, #12]
 800fd4a:	f7ff fc35 	bl	800f5b8 <unlock_fs>
 800fd4e:	e7e4      	b.n	800fd1a <f_write+0x36>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fd50:	69e1      	ldr	r1, [r4, #28]
 800fd52:	e073      	b.n	800fe3c <f_write+0x158>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fd54:	2801      	cmp	r0, #1
 800fd56:	d102      	bne.n	800fd5e <f_write+0x7a>
 800fd58:	2502      	movs	r5, #2
					ABORT(fs, FR_DISK_ERR);
 800fd5a:	7565      	strb	r5, [r4, #21]
 800fd5c:	e7d3      	b.n	800fd06 <f_write+0x22>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fd5e:	1c43      	adds	r3, r0, #1
 800fd60:	d101      	bne.n	800fd66 <f_write+0x82>
					ABORT(fs, FR_DISK_ERR);
 800fd62:	2501      	movs	r5, #1
 800fd64:	e7f9      	b.n	800fd5a <f_write+0x76>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fd66:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800fd68:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fd6a:	b903      	cbnz	r3, 800fd6e <f_write+0x8a>
 800fd6c:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fd6e:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	da0c      	bge.n	800fd90 <f_write+0xac>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fd76:	9803      	ldr	r0, [sp, #12]
 800fd78:	2301      	movs	r3, #1
 800fd7a:	6a22      	ldr	r2, [r4, #32]
 800fd7c:	9900      	ldr	r1, [sp, #0]
 800fd7e:	7840      	ldrb	r0, [r0, #1]
 800fd80:	f7fe ff22 	bl	800ebc8 <disk_write>
 800fd84:	2800      	cmp	r0, #0
 800fd86:	d1ec      	bne.n	800fd62 <f_write+0x7e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fd88:	7d23      	ldrb	r3, [r4, #20]
 800fd8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd8e:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fd90:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800fd94:	69e1      	ldr	r1, [r4, #28]
 800fd96:	4650      	mov	r0, sl
 800fd98:	f7fe ffde 	bl	800ed58 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fd9c:	b920      	cbnz	r0, 800fda8 <f_write+0xc4>
 800fd9e:	2502      	movs	r5, #2
 800fda0:	4650      	mov	r0, sl
 800fda2:	7565      	strb	r5, [r4, #21]
 800fda4:	4629      	mov	r1, r5
 800fda6:	e7d0      	b.n	800fd4a <f_write+0x66>
			sect += csect;
 800fda8:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fdaa:	0a7e      	lsrs	r6, r7, #9
			sect += csect;
 800fdac:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fdb0:	d048      	beq.n	800fe44 <f_write+0x160>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fdb2:	9a01      	ldr	r2, [sp, #4]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fdb4:	4649      	mov	r1, r9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fdb6:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 800fdba:	4432      	add	r2, r6
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fdbc:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fdc0:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800fdc2:	bf84      	itt	hi
 800fdc4:	9a01      	ldrhi	r2, [sp, #4]
 800fdc6:	1a9e      	subhi	r6, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fdc8:	4642      	mov	r2, r8
 800fdca:	4633      	mov	r3, r6
 800fdcc:	f7fe fefc 	bl	800ebc8 <disk_write>
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	d1c6      	bne.n	800fd62 <f_write+0x7e>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fdd4:	6a21      	ldr	r1, [r4, #32]
 800fdd6:	eba1 0108 	sub.w	r1, r1, r8
 800fdda:	42b1      	cmp	r1, r6
 800fddc:	d20a      	bcs.n	800fdf4 <f_write+0x110>
 800fdde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fde2:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 800fde6:	9800      	ldr	r0, [sp, #0]
 800fde8:	f7ff f84d 	bl	800ee86 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fdec:	7d23      	ldrb	r3, [r4, #20]
 800fdee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdf2:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fdf4:	0276      	lsls	r6, r6, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fdf6:	69a3      	ldr	r3, [r4, #24]
 800fdf8:	44b1      	add	r9, r6
 800fdfa:	68e2      	ldr	r2, [r4, #12]
 800fdfc:	1bbf      	subs	r7, r7, r6
 800fdfe:	4433      	add	r3, r6
 800fe00:	61a3      	str	r3, [r4, #24]
 800fe02:	429a      	cmp	r2, r3
 800fe04:	bf2c      	ite	cs
 800fe06:	60e2      	strcs	r2, [r4, #12]
 800fe08:	60e3      	strcc	r3, [r4, #12]
 800fe0a:	f8db 3000 	ldr.w	r3, [fp]
 800fe0e:	4433      	add	r3, r6
 800fe10:	f8cb 3000 	str.w	r3, [fp]
	for ( ;  btw;							/* Repeat until all data written */
 800fe14:	2f00      	cmp	r7, #0
 800fe16:	d092      	beq.n	800fd3e <f_write+0x5a>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fe18:	69a1      	ldr	r1, [r4, #24]
 800fe1a:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800fe1e:	bb23      	cbnz	r3, 800fe6a <f_write+0x186>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fe20:	9b03      	ldr	r3, [sp, #12]
 800fe22:	895b      	ldrh	r3, [r3, #10]
 800fe24:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800fe26:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 800fe2a:	9301      	str	r3, [sp, #4]
 800fe2c:	d19f      	bne.n	800fd6e <f_write+0x8a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fe2e:	2900      	cmp	r1, #0
 800fe30:	f47f af7f 	bne.w	800fd32 <f_write+0x4e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fe34:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800fe36:	2800      	cmp	r0, #0
 800fe38:	d18c      	bne.n	800fd54 <f_write+0x70>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fe3a:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	f7ff fb2c 	bl	800f49a <create_chain>
 800fe42:	e77b      	b.n	800fd3c <f_write+0x58>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fe44:	6a23      	ldr	r3, [r4, #32]
 800fe46:	4543      	cmp	r3, r8
 800fe48:	d00d      	beq.n	800fe66 <f_write+0x182>
 800fe4a:	68e2      	ldr	r2, [r4, #12]
 800fe4c:	69a3      	ldr	r3, [r4, #24]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d909      	bls.n	800fe66 <f_write+0x182>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fe52:	2301      	movs	r3, #1
 800fe54:	4642      	mov	r2, r8
 800fe56:	9900      	ldr	r1, [sp, #0]
 800fe58:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800fe5c:	f7fe fea6 	bl	800ebac <disk_read>
				fp->fptr < fp->obj.objsize &&
 800fe60:	2800      	cmp	r0, #0
 800fe62:	f47f af7e 	bne.w	800fd62 <f_write+0x7e>
			fp->sect = sect;
 800fe66:	f8c4 8020 	str.w	r8, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fe6a:	69a0      	ldr	r0, [r4, #24]
 800fe6c:	4649      	mov	r1, r9
 800fe6e:	9b00      	ldr	r3, [sp, #0]
 800fe70:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800fe74:	f5c0 7600 	rsb	r6, r0, #512	; 0x200
 800fe78:	4418      	add	r0, r3
 800fe7a:	42be      	cmp	r6, r7
 800fe7c:	bf28      	it	cs
 800fe7e:	463e      	movcs	r6, r7
 800fe80:	4632      	mov	r2, r6
 800fe82:	f7ff f800 	bl	800ee86 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 800fe86:	7d23      	ldrb	r3, [r4, #20]
 800fe88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fe8c:	7523      	strb	r3, [r4, #20]
 800fe8e:	e7b2      	b.n	800fdf6 <f_write+0x112>

0800fe90 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fe90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fe92:	a901      	add	r1, sp, #4
{
 800fe94:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fe96:	f7ff fda4 	bl	800f9e2 <validate>
	if (res == FR_OK) {
 800fe9a:	4605      	mov	r5, r0
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	d142      	bne.n	800ff26 <f_sync+0x96>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fea0:	7d23      	ldrb	r3, [r4, #20]
 800fea2:	065a      	lsls	r2, r3, #25
 800fea4:	d53f      	bpl.n	800ff26 <f_sync+0x96>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fea6:	061b      	lsls	r3, r3, #24
 800fea8:	d514      	bpl.n	800fed4 <f_sync+0x44>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800feaa:	9801      	ldr	r0, [sp, #4]
 800feac:	2301      	movs	r3, #1
 800feae:	6a22      	ldr	r2, [r4, #32]
 800feb0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800feb4:	7840      	ldrb	r0, [r0, #1]
 800feb6:	f7fe fe87 	bl	800ebc8 <disk_write>
 800feba:	b138      	cbz	r0, 800fecc <f_sync+0x3c>
 800febc:	2501      	movs	r5, #1
 800febe:	2101      	movs	r1, #1
 800fec0:	9801      	ldr	r0, [sp, #4]
 800fec2:	f7ff fb79 	bl	800f5b8 <unlock_fs>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800fec6:	4628      	mov	r0, r5
 800fec8:	b003      	add	sp, #12
 800feca:	bdf0      	pop	{r4, r5, r6, r7, pc}
				fp->flag &= (BYTE)~FA_DIRTY;
 800fecc:	7d23      	ldrb	r3, [r4, #20]
 800fece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fed2:	7523      	strb	r3, [r4, #20]
			tm = GET_FATTIME();				/* Modified time */
 800fed4:	f7fd ff94 	bl	800de00 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800fed8:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 800feda:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 800fedc:	9801      	ldr	r0, [sp, #4]
 800fede:	f7ff f849 	bl	800ef74 <move_window>
				if (res == FR_OK) {
 800fee2:	4605      	mov	r5, r0
 800fee4:	b9f8      	cbnz	r0, 800ff26 <f_sync+0x96>
					dir = fp->dir_ptr;
 800fee6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fee8:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800feea:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800feec:	f043 0320 	orr.w	r3, r3, #32
 800fef0:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fef2:	68a2      	ldr	r2, [r4, #8]
 800fef4:	6820      	ldr	r0, [r4, #0]
 800fef6:	f7fe ffde 	bl	800eeb6 <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fefa:	68e1      	ldr	r1, [r4, #12]
 800fefc:	f106 001c 	add.w	r0, r6, #28
 800ff00:	f7fe fe86 	bl	800ec10 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ff04:	4639      	mov	r1, r7
 800ff06:	f106 0016 	add.w	r0, r6, #22
 800ff0a:	f7fe fe81 	bl	800ec10 <st_dword>
					fs->wflag = 1;
 800ff0e:	2301      	movs	r3, #1
 800ff10:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff12:	74b5      	strb	r5, [r6, #18]
	*ptr++ = (BYTE)val;
 800ff14:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 800ff16:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ff18:	f7ff fb59 	bl	800f5ce <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ff1c:	7d23      	ldrb	r3, [r4, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ff1e:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ff20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff24:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, res);
 800ff26:	4629      	mov	r1, r5
 800ff28:	9801      	ldr	r0, [sp, #4]
 800ff2a:	f7ff fb45 	bl	800f5b8 <unlock_fs>
 800ff2e:	e7ca      	b.n	800fec6 <f_sync+0x36>

0800ff30 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ff30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff32:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ff34:	f7ff ffac 	bl	800fe90 <f_sync>
	if (res == FR_OK)
 800ff38:	4604      	mov	r4, r0
 800ff3a:	b978      	cbnz	r0, 800ff5c <f_close+0x2c>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ff3c:	a901      	add	r1, sp, #4
 800ff3e:	4628      	mov	r0, r5
 800ff40:	f7ff fd4f 	bl	800f9e2 <validate>
		if (res == FR_OK) {
 800ff44:	4604      	mov	r4, r0
 800ff46:	b948      	cbnz	r0, 800ff5c <f_close+0x2c>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ff48:	6928      	ldr	r0, [r5, #16]
 800ff4a:	f7fe fee9 	bl	800ed20 <dec_lock>
			if (res == FR_OK)
 800ff4e:	4604      	mov	r4, r0
 800ff50:	b900      	cbnz	r0, 800ff54 <f_close+0x24>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ff52:	6028      	str	r0, [r5, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ff54:	2100      	movs	r1, #0
 800ff56:	9801      	ldr	r0, [sp, #4]
 800ff58:	f7ff fb2e 	bl	800f5b8 <unlock_fs>
#endif
		}
	}
	return res;
}
 800ff5c:	4620      	mov	r0, r4
 800ff5e:	b003      	add	sp, #12
 800ff60:	bd30      	pop	{r4, r5, pc}

0800ff62 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ff62:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff66:	460e      	mov	r6, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ff68:	a901      	add	r1, sp, #4
{
 800ff6a:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ff6c:	f7ff fd39 	bl	800f9e2 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ff70:	4604      	mov	r4, r0
 800ff72:	b908      	cbnz	r0, 800ff78 <f_lseek+0x16>
 800ff74:	7d6c      	ldrb	r4, [r5, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ff76:	b114      	cbz	r4, 800ff7e <f_lseek+0x1c>
#endif
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
 800ff78:	4621      	mov	r1, r4
 800ff7a:	9801      	ldr	r0, [sp, #4]
 800ff7c:	e051      	b.n	8010022 <f_lseek+0xc0>
	if (fp->cltbl) {	/* Fast seek */
 800ff7e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d07c      	beq.n	801007e <f_lseek+0x11c>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ff84:	1c72      	adds	r2, r6, #1
 800ff86:	d134      	bne.n	800fff2 <f_lseek+0x90>
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ff88:	68af      	ldr	r7, [r5, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ff8a:	f103 0904 	add.w	r9, r3, #4
 800ff8e:	f8d3 a000 	ldr.w	sl, [r3]
 800ff92:	2602      	movs	r6, #2
			if (cl) {
 800ff94:	b327      	cbz	r7, 800ffe0 <f_lseek+0x7e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ff96:	f04f 0800 	mov.w	r8, #0
 800ff9a:	eb07 0108 	add.w	r1, r7, r8
						cl = get_fat(&fp->obj, cl);
 800ff9e:	6828      	ldr	r0, [r5, #0]
 800ffa0:	f7ff fa21 	bl	800f3e6 <get_fat.isra.9>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ffa4:	2801      	cmp	r0, #1
						cl = get_fat(&fp->obj, cl);
 800ffa6:	f108 0801 	add.w	r8, r8, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ffaa:	d804      	bhi.n	800ffb6 <f_lseek+0x54>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ffac:	2402      	movs	r4, #2
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ffae:	756c      	strb	r4, [r5, #21]
 800ffb0:	e7e2      	b.n	800ff78 <f_lseek+0x16>
 800ffb2:	4607      	mov	r7, r0
 800ffb4:	e7ef      	b.n	800ff96 <f_lseek+0x34>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ffb6:	1c43      	adds	r3, r0, #1
 800ffb8:	d101      	bne.n	800ffbe <f_lseek+0x5c>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ffba:	2401      	movs	r4, #1
 800ffbc:	e7f7      	b.n	800ffae <f_lseek+0x4c>
					} while (cl == pcl + 1);
 800ffbe:	eb07 0308 	add.w	r3, r7, r8
 800ffc2:	4283      	cmp	r3, r0
 800ffc4:	d0e9      	beq.n	800ff9a <f_lseek+0x38>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ffc6:	3602      	adds	r6, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ffc8:	45b2      	cmp	sl, r6
						*tbl++ = ncl; *tbl++ = tcl;
 800ffca:	bf21      	itttt	cs
 800ffcc:	464b      	movcs	r3, r9
 800ffce:	f843 8b08 	strcs.w	r8, [r3], #8
 800ffd2:	f8c9 7004 	strcs.w	r7, [r9, #4]
 800ffd6:	4699      	movcs	r9, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ffd8:	9b01      	ldr	r3, [sp, #4]
 800ffda:	699b      	ldr	r3, [r3, #24]
 800ffdc:	4283      	cmp	r3, r0
 800ffde:	d8e8      	bhi.n	800ffb2 <f_lseek+0x50>
			*fp->cltbl = ulen;	/* Number of items used */
 800ffe0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			if (ulen <= tlen) {
 800ffe2:	4556      	cmp	r6, sl
			*fp->cltbl = ulen;	/* Number of items used */
 800ffe4:	601e      	str	r6, [r3, #0]
			if (ulen <= tlen) {
 800ffe6:	f200 80e4 	bhi.w	80101b2 <f_lseek+0x250>
				*tbl = 0;		/* Terminate table */
 800ffea:	2300      	movs	r3, #0
 800ffec:	f8c9 3000 	str.w	r3, [r9]
 800fff0:	e7c2      	b.n	800ff78 <f_lseek+0x16>
 800fff2:	68e8      	ldr	r0, [r5, #12]
 800fff4:	4286      	cmp	r6, r0
 800fff6:	bf28      	it	cs
 800fff8:	4606      	movcs	r6, r0
			fp->fptr = ofs;				/* Set file pointer */
 800fffa:	61ae      	str	r6, [r5, #24]
			if (ofs) {
 800fffc:	2e00      	cmp	r6, #0
 800fffe:	d0bb      	beq.n	800ff78 <f_lseek+0x16>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010000:	f106 38ff 	add.w	r8, r6, #4294967295
 8010004:	9f01      	ldr	r7, [sp, #4]
 8010006:	4628      	mov	r0, r5
 8010008:	4641      	mov	r1, r8
 801000a:	f7fe feb0 	bl	800ed6e <clmt_clust>
 801000e:	4601      	mov	r1, r0
 8010010:	61e8      	str	r0, [r5, #28]
				dsc = clust2sect(fs, fp->clust);
 8010012:	4638      	mov	r0, r7
 8010014:	f7fe fea0 	bl	800ed58 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010018:	b948      	cbnz	r0, 801002e <f_lseek+0xcc>
 801001a:	2402      	movs	r4, #2
 801001c:	4638      	mov	r0, r7
 801001e:	4621      	mov	r1, r4
 8010020:	756c      	strb	r4, [r5, #21]
	LEAVE_FF(fs, res);
 8010022:	f7ff fac9 	bl	800f5b8 <unlock_fs>
}
 8010026:	4620      	mov	r0, r4
 8010028:	b002      	add	sp, #8
 801002a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801002e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8010032:	2e00      	cmp	r6, #0
 8010034:	d0a0      	beq.n	800ff78 <f_lseek+0x16>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010036:	897e      	ldrh	r6, [r7, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010038:	6a2a      	ldr	r2, [r5, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801003a:	3e01      	subs	r6, #1
 801003c:	ea06 2658 	and.w	r6, r6, r8, lsr #9
 8010040:	4406      	add	r6, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010042:	42b2      	cmp	r2, r6
 8010044:	d098      	beq.n	800ff78 <f_lseek+0x16>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010046:	f995 3014 	ldrsb.w	r3, [r5, #20]
 801004a:	f105 0830 	add.w	r8, r5, #48	; 0x30
 801004e:	2b00      	cmp	r3, #0
 8010050:	da0a      	bge.n	8010068 <f_lseek+0x106>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010052:	2301      	movs	r3, #1
 8010054:	4641      	mov	r1, r8
 8010056:	7878      	ldrb	r0, [r7, #1]
 8010058:	f7fe fdb6 	bl	800ebc8 <disk_write>
 801005c:	2800      	cmp	r0, #0
 801005e:	d1ac      	bne.n	800ffba <f_lseek+0x58>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010060:	7d2b      	ldrb	r3, [r5, #20]
 8010062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010066:	752b      	strb	r3, [r5, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010068:	9801      	ldr	r0, [sp, #4]
 801006a:	2301      	movs	r3, #1
 801006c:	4632      	mov	r2, r6
 801006e:	4641      	mov	r1, r8
 8010070:	7840      	ldrb	r0, [r0, #1]
 8010072:	f7fe fd9b 	bl	800ebac <disk_read>
 8010076:	2800      	cmp	r0, #0
 8010078:	d19f      	bne.n	800ffba <f_lseek+0x58>
					fp->sect = dsc;
 801007a:	622e      	str	r6, [r5, #32]
 801007c:	e77c      	b.n	800ff78 <f_lseek+0x16>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801007e:	68eb      	ldr	r3, [r5, #12]
 8010080:	42b3      	cmp	r3, r6
 8010082:	d204      	bcs.n	801008e <f_lseek+0x12c>
 8010084:	7d2a      	ldrb	r2, [r5, #20]
 8010086:	f012 0f02 	tst.w	r2, #2
 801008a:	bf08      	it	eq
 801008c:	461e      	moveq	r6, r3
		fp->fptr = nsect = 0;
 801008e:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8010090:	69ab      	ldr	r3, [r5, #24]
		fp->fptr = nsect = 0;
 8010092:	61aa      	str	r2, [r5, #24]
		if (ofs) {
 8010094:	b90e      	cbnz	r6, 801009a <f_lseek+0x138>
		fp->fptr = nsect = 0;
 8010096:	4637      	mov	r7, r6
 8010098:	e01d      	b.n	80100d6 <f_lseek+0x174>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801009a:	9a01      	ldr	r2, [sp, #4]
 801009c:	8957      	ldrh	r7, [r2, #10]
 801009e:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d040      	beq.n	8010126 <f_lseek+0x1c4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80100a4:	3b01      	subs	r3, #1
 80100a6:	1e72      	subs	r2, r6, #1
 80100a8:	fbb3 f1f7 	udiv	r1, r3, r7
 80100ac:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 80100b0:	428a      	cmp	r2, r1
 80100b2:	d338      	bcc.n	8010126 <f_lseek+0x1c4>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80100b4:	427a      	negs	r2, r7
				clst = fp->clust;
 80100b6:	69e9      	ldr	r1, [r5, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80100b8:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 80100ba:	1af6      	subs	r6, r6, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80100bc:	61ab      	str	r3, [r5, #24]
			if (clst != 0) {
 80100be:	2900      	cmp	r1, #0
 80100c0:	d160      	bne.n	8010184 <f_lseek+0x222>
		fp->fptr = nsect = 0;
 80100c2:	2700      	movs	r7, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80100c4:	68eb      	ldr	r3, [r5, #12]
 80100c6:	69ae      	ldr	r6, [r5, #24]
 80100c8:	429e      	cmp	r6, r3
			fp->flag |= FA_MODIFIED;
 80100ca:	bf81      	itttt	hi
 80100cc:	7d2b      	ldrbhi	r3, [r5, #20]
			fp->obj.objsize = fp->fptr;
 80100ce:	60ee      	strhi	r6, [r5, #12]
			fp->flag |= FA_MODIFIED;
 80100d0:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 80100d4:	752b      	strbhi	r3, [r5, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80100d6:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80100da:	2e00      	cmp	r6, #0
 80100dc:	f43f af4c 	beq.w	800ff78 <f_lseek+0x16>
 80100e0:	6a2a      	ldr	r2, [r5, #32]
 80100e2:	4297      	cmp	r7, r2
 80100e4:	f43f af48 	beq.w	800ff78 <f_lseek+0x16>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80100e8:	f995 3014 	ldrsb.w	r3, [r5, #20]
 80100ec:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	da0c      	bge.n	801010e <f_lseek+0x1ac>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80100f4:	9801      	ldr	r0, [sp, #4]
 80100f6:	2301      	movs	r3, #1
 80100f8:	4631      	mov	r1, r6
 80100fa:	7840      	ldrb	r0, [r0, #1]
 80100fc:	f7fe fd64 	bl	800ebc8 <disk_write>
 8010100:	2800      	cmp	r0, #0
 8010102:	f47f af5a 	bne.w	800ffba <f_lseek+0x58>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010106:	7d2b      	ldrb	r3, [r5, #20]
 8010108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801010c:	752b      	strb	r3, [r5, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801010e:	9801      	ldr	r0, [sp, #4]
 8010110:	2301      	movs	r3, #1
 8010112:	463a      	mov	r2, r7
 8010114:	4631      	mov	r1, r6
 8010116:	7840      	ldrb	r0, [r0, #1]
 8010118:	f7fe fd48 	bl	800ebac <disk_read>
 801011c:	2800      	cmp	r0, #0
 801011e:	f47f af4c 	bne.w	800ffba <f_lseek+0x58>
			fp->sect = nsect;
 8010122:	622f      	str	r7, [r5, #32]
 8010124:	e728      	b.n	800ff78 <f_lseek+0x16>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010126:	68a9      	ldr	r1, [r5, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010128:	b951      	cbnz	r1, 8010140 <f_lseek+0x1de>
					clst = create_chain(&fp->obj, 0);
 801012a:	4628      	mov	r0, r5
 801012c:	f7ff f9b5 	bl	800f49a <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010130:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 8010132:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010134:	f43f af3a 	beq.w	800ffac <f_lseek+0x4a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010138:	3001      	adds	r0, #1
 801013a:	f43f af3e 	beq.w	800ffba <f_lseek+0x58>
					fp->obj.sclust = clst;
 801013e:	60a9      	str	r1, [r5, #8]
				fp->clust = clst;
 8010140:	61e9      	str	r1, [r5, #28]
 8010142:	e7bc      	b.n	80100be <f_lseek+0x15c>
					ofs -= bcs; fp->fptr += bcs;
 8010144:	443b      	add	r3, r7
 8010146:	1bf6      	subs	r6, r6, r7
 8010148:	61ab      	str	r3, [r5, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801014a:	7d2b      	ldrb	r3, [r5, #20]
 801014c:	079a      	lsls	r2, r3, #30
 801014e:	d506      	bpl.n	801015e <f_lseek+0x1fc>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010150:	4628      	mov	r0, r5
 8010152:	f7ff f9a2 	bl	800f49a <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010156:	4601      	mov	r1, r0
 8010158:	b928      	cbnz	r0, 8010166 <f_lseek+0x204>
							ofs = 0; break;
 801015a:	4606      	mov	r6, r0
 801015c:	e015      	b.n	801018a <f_lseek+0x228>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801015e:	6828      	ldr	r0, [r5, #0]
 8010160:	f7ff f941 	bl	800f3e6 <get_fat.isra.9>
 8010164:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010166:	1c4b      	adds	r3, r1, #1
 8010168:	9801      	ldr	r0, [sp, #4]
 801016a:	d103      	bne.n	8010174 <f_lseek+0x212>
 801016c:	2401      	movs	r4, #1
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801016e:	756c      	strb	r4, [r5, #21]
 8010170:	4621      	mov	r1, r4
 8010172:	e756      	b.n	8010022 <f_lseek+0xc0>
 8010174:	2901      	cmp	r1, #1
 8010176:	d902      	bls.n	801017e <f_lseek+0x21c>
 8010178:	6983      	ldr	r3, [r0, #24]
 801017a:	428b      	cmp	r3, r1
 801017c:	d801      	bhi.n	8010182 <f_lseek+0x220>
 801017e:	2402      	movs	r4, #2
 8010180:	e7f5      	b.n	801016e <f_lseek+0x20c>
					fp->clust = clst;
 8010182:	61e9      	str	r1, [r5, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010184:	42be      	cmp	r6, r7
 8010186:	69ab      	ldr	r3, [r5, #24]
 8010188:	d8dc      	bhi.n	8010144 <f_lseek+0x1e2>
				fp->fptr += ofs;
 801018a:	69ab      	ldr	r3, [r5, #24]
 801018c:	4433      	add	r3, r6
 801018e:	61ab      	str	r3, [r5, #24]
				if (ofs % SS(fs)) {
 8010190:	f3c6 0308 	ubfx	r3, r6, #0, #9
 8010194:	2b00      	cmp	r3, #0
 8010196:	d094      	beq.n	80100c2 <f_lseek+0x160>
 8010198:	9a01      	ldr	r2, [sp, #4]
					nsect = clust2sect(fs, clst);	/* Current sector */
 801019a:	4610      	mov	r0, r2
 801019c:	f7fe fddc 	bl	800ed58 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80101a0:	b920      	cbnz	r0, 80101ac <f_lseek+0x24a>
 80101a2:	2402      	movs	r4, #2
 80101a4:	4610      	mov	r0, r2
 80101a6:	756c      	strb	r4, [r5, #21]
 80101a8:	4621      	mov	r1, r4
 80101aa:	e73a      	b.n	8010022 <f_lseek+0xc0>
					nsect += (DWORD)(ofs / SS(fs));
 80101ac:	eb00 2756 	add.w	r7, r0, r6, lsr #9
 80101b0:	e788      	b.n	80100c4 <f_lseek+0x162>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80101b2:	2411      	movs	r4, #17
 80101b4:	e6e0      	b.n	800ff78 <f_lseek+0x16>

080101b6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80101b6:	b530      	push	{r4, r5, lr}
 80101b8:	b085      	sub	sp, #20
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80101ba:	4604      	mov	r4, r0
{
 80101bc:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 80101be:	2800      	cmp	r0, #0
 80101c0:	d03c      	beq.n	801023c <f_opendir+0x86>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 80101c2:	2200      	movs	r2, #0
 80101c4:	a903      	add	r1, sp, #12
 80101c6:	a801      	add	r0, sp, #4
 80101c8:	f7fe ff30 	bl	800f02c <find_volume>
	if (res == FR_OK) {
 80101cc:	4605      	mov	r5, r0
 80101ce:	b980      	cbnz	r0, 80101f2 <f_opendir+0x3c>
		obj->fs = fs;
 80101d0:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80101d2:	4620      	mov	r0, r4
 80101d4:	9901      	ldr	r1, [sp, #4]
		obj->fs = fs;
 80101d6:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80101d8:	f7ff faec 	bl	800f7b4 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 80101dc:	4605      	mov	r5, r0
 80101de:	bb40      	cbnz	r0, 8010232 <f_opendir+0x7c>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80101e0:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 80101e4:	9d03      	ldr	r5, [sp, #12]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	db0b      	blt.n	8010202 <f_opendir+0x4c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80101ea:	79a3      	ldrb	r3, [r4, #6]
 80101ec:	06db      	lsls	r3, r3, #27
 80101ee:	d403      	bmi.n	80101f8 <f_opendir+0x42>
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80101f0:	2505      	movs	r5, #5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80101f2:	2300      	movs	r3, #0
 80101f4:	6023      	str	r3, [r4, #0]
 80101f6:	e013      	b.n	8010220 <f_opendir+0x6a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80101f8:	7828      	ldrb	r0, [r5, #0]
 80101fa:	6a21      	ldr	r1, [r4, #32]
 80101fc:	f7fe fe4c 	bl	800ee98 <ld_clust.isra.1>
 8010200:	60a0      	str	r0, [r4, #8]
				obj->id = fs->id;
 8010202:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010204:	4620      	mov	r0, r4
				obj->id = fs->id;
 8010206:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010208:	f7ff fa2c 	bl	800f664 <dir_sdi.constprop.14>
				if (res == FR_OK) {
 801020c:	4605      	mov	r5, r0
 801020e:	b980      	cbnz	r0, 8010232 <f_opendir+0x7c>
					if (obj->sclust) {
 8010210:	68a3      	ldr	r3, [r4, #8]
 8010212:	b163      	cbz	r3, 801022e <f_opendir+0x78>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010214:	4601      	mov	r1, r0
 8010216:	4620      	mov	r0, r4
 8010218:	f7fe fd42 	bl	800eca0 <inc_lock>
 801021c:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801021e:	b158      	cbz	r0, 8010238 <f_opendir+0x82>

	LEAVE_FF(fs, res);
 8010220:	4629      	mov	r1, r5
 8010222:	9803      	ldr	r0, [sp, #12]
 8010224:	f7ff f9c8 	bl	800f5b8 <unlock_fs>
}
 8010228:	4628      	mov	r0, r5
 801022a:	b005      	add	sp, #20
 801022c:	bd30      	pop	{r4, r5, pc}
						obj->lockid = 0;	/* Root directory need not to be locked */
 801022e:	6120      	str	r0, [r4, #16]
 8010230:	e7f6      	b.n	8010220 <f_opendir+0x6a>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010232:	2d04      	cmp	r5, #4
 8010234:	d0dc      	beq.n	80101f0 <f_opendir+0x3a>
 8010236:	e7dc      	b.n	80101f2 <f_opendir+0x3c>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010238:	2512      	movs	r5, #18
 801023a:	e7da      	b.n	80101f2 <f_opendir+0x3c>
	if (!dp) return FR_INVALID_OBJECT;
 801023c:	2509      	movs	r5, #9
 801023e:	e7f3      	b.n	8010228 <f_opendir+0x72>

08010240 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8010240:	b537      	push	{r0, r1, r2, r4, r5, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8010242:	a901      	add	r1, sp, #4
{
 8010244:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8010246:	f7ff fbcc 	bl	800f9e2 <validate>
	if (res == FR_OK) {
 801024a:	b940      	cbnz	r0, 801025e <f_closedir+0x1e>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801024c:	6928      	ldr	r0, [r5, #16]
 801024e:	b940      	cbnz	r0, 8010262 <f_closedir+0x22>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010250:	2400      	movs	r4, #0
 8010252:	602c      	str	r4, [r5, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8010254:	9801      	ldr	r0, [sp, #4]
 8010256:	2100      	movs	r1, #0
 8010258:	f7ff f9ae 	bl	800f5b8 <unlock_fs>
 801025c:	4620      	mov	r0, r4
#endif
	}
	return res;
}
 801025e:	b003      	add	sp, #12
 8010260:	bd30      	pop	{r4, r5, pc}
			res = dec_lock(dp->obj.lockid);
 8010262:	f7fe fd5d 	bl	800ed20 <dec_lock>
		if (res == FR_OK)
 8010266:	4604      	mov	r4, r0
 8010268:	2800      	cmp	r0, #0
 801026a:	d1f3      	bne.n	8010254 <f_closedir+0x14>
 801026c:	e7f0      	b.n	8010250 <f_closedir+0x10>

0801026e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801026e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010270:	460e      	mov	r6, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010272:	a901      	add	r1, sp, #4
{
 8010274:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010276:	f7ff fbb4 	bl	800f9e2 <validate>
	if (res == FR_OK) {
 801027a:	4604      	mov	r4, r0
 801027c:	b920      	cbnz	r0, 8010288 <f_readdir+0x1a>
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801027e:	4628      	mov	r0, r5
		if (!fno) {
 8010280:	b94e      	cbnz	r6, 8010296 <f_readdir+0x28>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010282:	f7ff f9ef 	bl	800f664 <dir_sdi.constprop.14>
 8010286:	4604      	mov	r4, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010288:	9801      	ldr	r0, [sp, #4]
 801028a:	4621      	mov	r1, r4
 801028c:	f7ff f994 	bl	800f5b8 <unlock_fs>
}
 8010290:	4620      	mov	r0, r4
 8010292:	b002      	add	sp, #8
 8010294:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read(dp, 0);			/* Read an item */
 8010296:	f7ff fb49 	bl	800f92c <dir_read.constprop.12>
			if (res == FR_OK) {				/* A valid entry is found */
 801029a:	f010 03fb 	ands.w	r3, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 801029e:	4604      	mov	r4, r0
			if (res == FR_OK) {				/* A valid entry is found */
 80102a0:	d1f2      	bne.n	8010288 <f_readdir+0x1a>
	fno->fname[0] = 0;		/* Invaidate file info */
 80102a2:	7273      	strb	r3, [r6, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80102a4:	69eb      	ldr	r3, [r5, #28]
 80102a6:	b11b      	cbz	r3, 80102b0 <f_readdir+0x42>
 80102a8:	4631      	mov	r1, r6
 80102aa:	4628      	mov	r0, r5
 80102ac:	f7fe fe0f 	bl	800eece <get_fileinfo.part.3>
				res = dir_next(dp, 0);		/* Increment index for next */
 80102b0:	2100      	movs	r1, #0
 80102b2:	4628      	mov	r0, r5
 80102b4:	f7ff fa09 	bl	800f6ca <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80102b8:	2804      	cmp	r0, #4
 80102ba:	bf14      	ite	ne
 80102bc:	4604      	movne	r4, r0
 80102be:	2400      	moveq	r4, #0
 80102c0:	e7e2      	b.n	8010288 <f_readdir+0x1a>

080102c2 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 80102c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102c4:	4606      	mov	r6, r0
 80102c6:	460d      	mov	r5, r1


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80102c8:	f101 0709 	add.w	r7, r1, #9
		res = f_readdir(dp, fno);		/* Get a directory item */
 80102cc:	4629      	mov	r1, r5
 80102ce:	4630      	mov	r0, r6
 80102d0:	f7ff ffcd 	bl	801026e <f_readdir>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 80102d4:	4604      	mov	r4, r0
 80102d6:	b950      	cbnz	r0, 80102ee <f_findnext+0x2c>
 80102d8:	b14d      	cbz	r5, 80102ee <f_findnext+0x2c>
 80102da:	7a6b      	ldrb	r3, [r5, #9]
 80102dc:	b13b      	cbz	r3, 80102ee <f_findnext+0x2c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80102de:	4603      	mov	r3, r0
 80102e0:	4602      	mov	r2, r0
 80102e2:	4639      	mov	r1, r7
 80102e4:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80102e6:	f7fe fd69 	bl	800edbc <pattern_matching>
 80102ea:	2800      	cmp	r0, #0
 80102ec:	d0ee      	beq.n	80102cc <f_findnext+0xa>
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 80102ee:	4620      	mov	r0, r4
 80102f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080102f2 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 80102f2:	b538      	push	{r3, r4, r5, lr}
 80102f4:	460d      	mov	r5, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 80102f6:	6303      	str	r3, [r0, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 80102f8:	4611      	mov	r1, r2
{
 80102fa:	4604      	mov	r4, r0
	res = f_opendir(dp, path);		/* Open the target directory */
 80102fc:	f7ff ff5b 	bl	80101b6 <f_opendir>
	if (res == FR_OK) {
 8010300:	b928      	cbnz	r0, 801030e <f_findfirst+0x1c>
		res = f_findnext(dp, fno);	/* Find the first item */
 8010302:	4629      	mov	r1, r5
 8010304:	4620      	mov	r0, r4
	}
	return res;
}
 8010306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 801030a:	f7ff bfda 	b.w	80102c2 <f_findnext>
}
 801030e:	bd38      	pop	{r3, r4, r5, pc}

08010310 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8010310:	4b0f      	ldr	r3, [pc, #60]	; (8010350 <FATFS_LinkDriverEx+0x40>)
{
 8010312:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8010314:	7a5d      	ldrb	r5, [r3, #9]
 8010316:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 801031a:	b9b5      	cbnz	r5, 801034a <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 801031c:	7a5d      	ldrb	r5, [r3, #9]
 801031e:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8010320:	7a5d      	ldrb	r5, [r3, #9]
 8010322:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8010326:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8010328:	7a58      	ldrb	r0, [r3, #9]
 801032a:	4418      	add	r0, r3
 801032c:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 801032e:	7a5a      	ldrb	r2, [r3, #9]
 8010330:	b2d2      	uxtb	r2, r2
 8010332:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8010334:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8010336:	b2c0      	uxtb	r0, r0
 8010338:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 801033a:	233a      	movs	r3, #58	; 0x3a
    path[2] = '/';
    path[3] = 0;
 801033c:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 801033e:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8010340:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8010342:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 8010344:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 8010346:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 8010348:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 801034a:	2001      	movs	r0, #1
 801034c:	e7fc      	b.n	8010348 <FATFS_LinkDriverEx+0x38>
 801034e:	bf00      	nop
 8010350:	24000900 	.word	0x24000900

08010354 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8010354:	2200      	movs	r2, #0
 8010356:	f7ff bfdb 	b.w	8010310 <FATFS_LinkDriverEx>

0801035a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801035a:	b510      	push	{r4, lr}
 801035c:	460c      	mov	r4, r1

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801035e:	2101      	movs	r1, #1
 8010360:	2200      	movs	r2, #0
 8010362:	4608      	mov	r0, r1
 8010364:	f000 f9b6 	bl	80106d4 <osSemaphoreNew>
 8010368:	6020      	str	r0, [r4, #0]

#endif
    ret = (*sobj != NULL);

    return ret;
}
 801036a:	3000      	adds	r0, #0
 801036c:	bf18      	it	ne
 801036e:	2001      	movne	r0, #1
 8010370:	bd10      	pop	{r4, pc}

08010372 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8010372:	b508      	push	{r3, lr}
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8010374:	f000 fa78 	bl	8010868 <osSemaphoreDelete>
#endif
    return 1;
}
 8010378:	2001      	movs	r0, #1
 801037a:	bd08      	pop	{r3, pc}

0801037c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801037c:	b508      	push	{r3, lr}
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 801037e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010382:	f000 f9fd 	bl	8010780 <osSemaphoreAcquire>
  {
    ret = 1;
  }

  return ret;
}
 8010386:	fab0 f080 	clz	r0, r0
 801038a:	0940      	lsrs	r0, r0, #5
 801038c:	bd08      	pop	{r3, pc}

0801038e <ff_rel_grant>:
)
{
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801038e:	f000 ba33 	b.w	80107f8 <osSemaphoreRelease>
	...

08010394 <SysTick_Handler>:
extern void xPortSysTickHandler (void);

/*
  SysTick handler implementation that also clears overflow flag.
*/
void SysTick_Handler (void) {
 8010394:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8010396:	4b05      	ldr	r3, [pc, #20]	; (80103ac <SysTick_Handler+0x18>)
 8010398:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801039a:	f002 fb19 	bl	80129d0 <xTaskGetSchedulerState>
 801039e:	2801      	cmp	r0, #1
 80103a0:	d003      	beq.n	80103aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80103a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80103a6:	f002 bf65 	b.w	8013274 <xPortSysTickHandler>
}
 80103aa:	bd08      	pop	{r3, pc}
 80103ac:	e000e010 	.word	0xe000e010

080103b0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103b0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80103b4:	b113      	cbz	r3, 80103bc <osKernelInitialize+0xc>
    stat = osErrorISR;
 80103b6:	f06f 0005 	mvn.w	r0, #5
 80103ba:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103bc:	f3ef 8210 	mrs	r2, PRIMASK
 80103c0:	4b07      	ldr	r3, [pc, #28]	; (80103e0 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 80103c2:	b912      	cbnz	r2, 80103ca <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80103c4:	f3ef 8211 	mrs	r2, BASEPRI
 80103c8:	b112      	cbz	r2, 80103d0 <osKernelInitialize+0x20>
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	2a02      	cmp	r2, #2
 80103ce:	d0f2      	beq.n	80103b6 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 80103d0:	6818      	ldr	r0, [r3, #0]
 80103d2:	b910      	cbnz	r0, 80103da <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80103d4:	2201      	movs	r2, #1
 80103d6:	601a      	str	r2, [r3, #0]
 80103d8:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 80103da:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80103de:	4770      	bx	lr
 80103e0:	24000b6c 	.word	0x24000b6c

080103e4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80103e4:	b508      	push	{r3, lr}
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80103e6:	f002 faf3 	bl	80129d0 <xTaskGetSchedulerState>
 80103ea:	b138      	cbz	r0, 80103fc <osKernelGetState+0x18>
 80103ec:	2802      	cmp	r0, #2
 80103ee:	d006      	beq.n	80103fe <osKernelGetState+0x1a>
      state = osKernelLocked;
      break;

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80103f0:	4b03      	ldr	r3, [pc, #12]	; (8010400 <osKernelGetState+0x1c>)
 80103f2:	6818      	ldr	r0, [r3, #0]
 80103f4:	1e43      	subs	r3, r0, #1
 80103f6:	4258      	negs	r0, r3
 80103f8:	4158      	adcs	r0, r3
 80103fa:	e000      	b.n	80103fe <osKernelGetState+0x1a>
      state = osKernelLocked;
 80103fc:	2003      	movs	r0, #3
      }
      break;
  }

  return (state);
}
 80103fe:	bd08      	pop	{r3, pc}
 8010400:	24000b6c 	.word	0x24000b6c

08010404 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8010404:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010406:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 801040a:	b113      	cbz	r3, 8010412 <osKernelStart+0xe>
    stat = osErrorISR;
 801040c:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8010410:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010412:	f3ef 8210 	mrs	r2, PRIMASK
 8010416:	4b0a      	ldr	r3, [pc, #40]	; (8010440 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 8010418:	b912      	cbnz	r2, 8010420 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801041a:	f3ef 8211 	mrs	r2, BASEPRI
 801041e:	b112      	cbz	r2, 8010426 <osKernelStart+0x22>
 8010420:	681a      	ldr	r2, [r3, #0]
 8010422:	2a02      	cmp	r2, #2
 8010424:	d0f2      	beq.n	801040c <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 8010426:	681a      	ldr	r2, [r3, #0]
 8010428:	2a01      	cmp	r2, #1
 801042a:	d105      	bne.n	8010438 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 801042c:	2202      	movs	r2, #2
 801042e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8010430:	f001 ff02 	bl	8012238 <vTaskStartScheduler>
      stat = osOK;
 8010434:	2000      	movs	r0, #0
 8010436:	e7eb      	b.n	8010410 <osKernelStart+0xc>
      stat = osError;
 8010438:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 801043c:	e7e8      	b.n	8010410 <osKernelStart+0xc>
 801043e:	bf00      	nop
 8010440:	24000b6c 	.word	0x24000b6c

08010444 <osKernelGetTickCount>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010444:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8010448:	b10b      	cbz	r3, 801044e <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 801044a:	f001 bf5d 	b.w	8012308 <xTaskGetTickCountFromISR>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801044e:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8010452:	b913      	cbnz	r3, 801045a <osKernelGetTickCount+0x16>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010454:	f3ef 8311 	mrs	r3, BASEPRI
 8010458:	b11b      	cbz	r3, 8010462 <osKernelGetTickCount+0x1e>
 801045a:	4b03      	ldr	r3, [pc, #12]	; (8010468 <osKernelGetTickCount+0x24>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	2b02      	cmp	r3, #2
 8010460:	d0f3      	beq.n	801044a <osKernelGetTickCount+0x6>
  } else {
    ticks = xTaskGetTickCount();
 8010462:	f001 bf4b 	b.w	80122fc <xTaskGetTickCount>
 8010466:	bf00      	nop
 8010468:	24000b6c 	.word	0x24000b6c

0801046c <osKernelGetTickFreq>:
  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}
 801046c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010470:	4770      	bx	lr
	...

08010474 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010476:	4614      	mov	r4, r2
 8010478:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801047a:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801047c:	460b      	mov	r3, r1
  hTask = NULL;
 801047e:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010480:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8010484:	bb32      	cbnz	r2, 80104d4 <osThreadNew+0x60>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010486:	f3ef 8210 	mrs	r2, PRIMASK
 801048a:	b912      	cbnz	r2, 8010492 <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801048c:	f3ef 8211 	mrs	r2, BASEPRI
 8010490:	b11a      	cbz	r2, 801049a <osThreadNew+0x26>
 8010492:	4a22      	ldr	r2, [pc, #136]	; (801051c <osThreadNew+0xa8>)
 8010494:	6812      	ldr	r2, [r2, #0]
 8010496:	2a02      	cmp	r2, #2
 8010498:	d01c      	beq.n	80104d4 <osThreadNew+0x60>
 801049a:	b1d8      	cbz	r0, 80104d4 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 801049c:	2c00      	cmp	r4, #0
 801049e:	d036      	beq.n	801050e <osThreadNew+0x9a>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80104a0:	69a5      	ldr	r5, [r4, #24]
      if (attr->name != NULL) {
 80104a2:	6821      	ldr	r1, [r4, #0]
 80104a4:	2d00      	cmp	r5, #0
 80104a6:	bf08      	it	eq
 80104a8:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80104aa:	1e6a      	subs	r2, r5, #1
 80104ac:	462f      	mov	r7, r5
 80104ae:	2a37      	cmp	r2, #55	; 0x37
 80104b0:	d831      	bhi.n	8010516 <osThreadNew+0xa2>
 80104b2:	6862      	ldr	r2, [r4, #4]
 80104b4:	07d2      	lsls	r2, r2, #31
 80104b6:	d42e      	bmi.n	8010516 <osThreadNew+0xa2>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80104b8:	6966      	ldr	r6, [r4, #20]
 80104ba:	b176      	cbz	r6, 80104da <osThreadNew+0x66>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80104bc:	08b2      	lsrs	r2, r6, #2
 80104be:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80104c2:	f1bc 0f00 	cmp.w	ip, #0
 80104c6:	d00a      	beq.n	80104de <osThreadNew+0x6a>
 80104c8:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80104cc:	d902      	bls.n	80104d4 <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80104ce:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80104d0:	b104      	cbz	r4, 80104d4 <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80104d2:	b9ae      	cbnz	r6, 8010500 <osThreadNew+0x8c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80104d4:	9805      	ldr	r0, [sp, #20]
}
 80104d6:	b007      	add	sp, #28
 80104d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80104da:	2280      	movs	r2, #128	; 0x80
 80104dc:	e7ef      	b.n	80104be <osThreadNew+0x4a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80104de:	f1be 0f00 	cmp.w	lr, #0
 80104e2:	d1f7      	bne.n	80104d4 <osThreadNew+0x60>
      if (mem == 0) {
 80104e4:	6924      	ldr	r4, [r4, #16]
 80104e6:	2c00      	cmp	r4, #0
 80104e8:	d1f4      	bne.n	80104d4 <osThreadNew+0x60>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80104ea:	ac05      	add	r4, sp, #20
 80104ec:	b292      	uxth	r2, r2
 80104ee:	e9cd 7400 	strd	r7, r4, [sp]
 80104f2:	f001 fe73 	bl	80121dc <xTaskCreate>
 80104f6:	2801      	cmp	r0, #1
          hTask = NULL;
 80104f8:	bf1c      	itt	ne
 80104fa:	2300      	movne	r3, #0
 80104fc:	9305      	strne	r3, [sp, #20]
 80104fe:	e7e9      	b.n	80104d4 <osThreadNew+0x60>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010500:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 8010504:	9500      	str	r5, [sp, #0]
 8010506:	f001 fe31 	bl	801216c <xTaskCreateStatic>
 801050a:	9005      	str	r0, [sp, #20]
 801050c:	e7e2      	b.n	80104d4 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;
 801050e:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 8010510:	2280      	movs	r2, #128	; 0x80
    name = NULL;
 8010512:	4621      	mov	r1, r4
 8010514:	e7e9      	b.n	80104ea <osThreadNew+0x76>
        return (NULL);
 8010516:	2000      	movs	r0, #0
 8010518:	e7dd      	b.n	80104d6 <osThreadNew+0x62>
 801051a:	bf00      	nop
 801051c:	24000b6c 	.word	0x24000b6c

08010520 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8010520:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010522:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8010526:	b113      	cbz	r3, 801052e <osDelay+0xe>
    stat = osErrorISR;
 8010528:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 801052c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801052e:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8010532:	b913      	cbnz	r3, 801053a <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010534:	f3ef 8311 	mrs	r3, BASEPRI
 8010538:	b11b      	cbz	r3, 8010542 <osDelay+0x22>
 801053a:	4b05      	ldr	r3, [pc, #20]	; (8010550 <osDelay+0x30>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	2b02      	cmp	r3, #2
 8010540:	d0f2      	beq.n	8010528 <osDelay+0x8>
    if (ticks != 0U) {
 8010542:	2800      	cmp	r0, #0
 8010544:	d0f2      	beq.n	801052c <osDelay+0xc>
      vTaskDelay(ticks);
 8010546:	f002 f88b 	bl	8012660 <vTaskDelay>
    stat = osOK;
 801054a:	2000      	movs	r0, #0
 801054c:	e7ee      	b.n	801052c <osDelay+0xc>
 801054e:	bf00      	nop
 8010550:	24000b6c 	.word	0x24000b6c

08010554 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8010554:	b513      	push	{r0, r1, r4, lr}
 8010556:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010558:	f3ef 8305 	mrs	r3, IPSR
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 801055c:	b11b      	cbz	r3, 8010566 <osDelayUntil+0x12>
    stat = osErrorISR;
 801055e:	f06f 0005 	mvn.w	r0, #5
      stat = osErrorParameter;
    }
  }

  return (stat);
}
 8010562:	b002      	add	sp, #8
 8010564:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010566:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 801056a:	b913      	cbnz	r3, 8010572 <osDelayUntil+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801056c:	f3ef 8311 	mrs	r3, BASEPRI
 8010570:	b11b      	cbz	r3, 801057a <osDelayUntil+0x26>
 8010572:	4b09      	ldr	r3, [pc, #36]	; (8010598 <osDelayUntil+0x44>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	2b02      	cmp	r3, #2
 8010578:	d0f1      	beq.n	801055e <osDelayUntil+0xa>
    tcnt = xTaskGetTickCount();
 801057a:	f001 febf 	bl	80122fc <xTaskGetTickCount>
    delay = (TickType_t)ticks - tcnt;
 801057e:	1a21      	subs	r1, r4, r0
    tcnt = xTaskGetTickCount();
 8010580:	9001      	str	r0, [sp, #4]
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8010582:	2900      	cmp	r1, #0
 8010584:	dd04      	ble.n	8010590 <osDelayUntil+0x3c>
      vTaskDelayUntil (&tcnt, delay);
 8010586:	a801      	add	r0, sp, #4
 8010588:	f001 fffe 	bl	8012588 <vTaskDelayUntil>
    stat = osOK;
 801058c:	2000      	movs	r0, #0
 801058e:	e7e8      	b.n	8010562 <osDelayUntil+0xe>
      stat = osErrorParameter;
 8010590:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8010594:	e7e5      	b.n	8010562 <osDelayUntil+0xe>
 8010596:	bf00      	nop
 8010598:	24000b6c 	.word	0x24000b6c

0801059c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801059c:	b570      	push	{r4, r5, r6, lr}
 801059e:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105a0:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80105a4:	b113      	cbz	r3, 80105ac <osMutexNew+0x10>
  hMutex = NULL;
 80105a6:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80105a8:	4628      	mov	r0, r5
 80105aa:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105ac:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 80105b0:	b912      	cbnz	r2, 80105b8 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80105b2:	f3ef 8211 	mrs	r2, BASEPRI
 80105b6:	b11a      	cbz	r2, 80105c0 <osMutexNew+0x24>
 80105b8:	4a18      	ldr	r2, [pc, #96]	; (801061c <osMutexNew+0x80>)
 80105ba:	6812      	ldr	r2, [r2, #0]
 80105bc:	2a02      	cmp	r2, #2
 80105be:	d0f2      	beq.n	80105a6 <osMutexNew+0xa>
    if (attr != NULL) {
 80105c0:	b104      	cbz	r4, 80105c4 <osMutexNew+0x28>
      type = attr->attr_bits;
 80105c2:	6863      	ldr	r3, [r4, #4]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80105c4:	f003 0601 	and.w	r6, r3, #1
    if ((type & osMutexRobust) != osMutexRobust) {
 80105c8:	071b      	lsls	r3, r3, #28
 80105ca:	d4ec      	bmi.n	80105a6 <osMutexNew+0xa>
      if (attr != NULL) {
 80105cc:	b1b4      	cbz	r4, 80105fc <osMutexNew+0x60>
 80105ce:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80105d2:	b189      	cbz	r1, 80105f8 <osMutexNew+0x5c>
 80105d4:	2b4f      	cmp	r3, #79	; 0x4f
 80105d6:	d9e6      	bls.n	80105a6 <osMutexNew+0xa>
        if (rmtx != 0U) {
 80105d8:	b1de      	cbz	r6, 8010612 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80105da:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80105dc:	f000 fdba 	bl	8011154 <xQueueCreateMutexStatic>
 80105e0:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 80105e2:	2800      	cmp	r0, #0
 80105e4:	d0df      	beq.n	80105a6 <osMutexNew+0xa>
          name = attr->name;
 80105e6:	6821      	ldr	r1, [r4, #0]
        vQueueAddToRegistry (hMutex, name);
 80105e8:	4628      	mov	r0, r5
 80105ea:	f001 fb3f 	bl	8011c6c <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 80105ee:	2e00      	cmp	r6, #0
 80105f0:	d0da      	beq.n	80105a8 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80105f2:	f045 0501 	orr.w	r5, r5, #1
  return ((osMutexId_t)hMutex);
 80105f6:	e7d7      	b.n	80105a8 <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d1d4      	bne.n	80105a6 <osMutexNew+0xa>
          if (rmtx != 0U) {
 80105fc:	b15e      	cbz	r6, 8010616 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80105fe:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 8010600:	f000 fe02 	bl	8011208 <xQueueCreateMutex>
 8010604:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 8010606:	2800      	cmp	r0, #0
 8010608:	d0cd      	beq.n	80105a6 <osMutexNew+0xa>
        if (attr != NULL) {
 801060a:	2c00      	cmp	r4, #0
 801060c:	d1eb      	bne.n	80105e6 <osMutexNew+0x4a>
          name = NULL;
 801060e:	4621      	mov	r1, r4
 8010610:	e7ea      	b.n	80105e8 <osMutexNew+0x4c>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8010612:	2001      	movs	r0, #1
 8010614:	e7e2      	b.n	80105dc <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 8010616:	2001      	movs	r0, #1
 8010618:	e7f2      	b.n	8010600 <osMutexNew+0x64>
 801061a:	bf00      	nop
 801061c:	24000b6c 	.word	0x24000b6c

08010620 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010620:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010622:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010626:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8010628:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801062c:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801062e:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8010632:	b112      	cbz	r2, 801063a <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8010634:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8010638:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801063a:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 801063e:	b912      	cbnz	r2, 8010646 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010640:	f3ef 8211 	mrs	r2, BASEPRI
 8010644:	b11a      	cbz	r2, 801064e <osMutexAcquire+0x2e>
 8010646:	4a0d      	ldr	r2, [pc, #52]	; (801067c <osMutexAcquire+0x5c>)
 8010648:	6812      	ldr	r2, [r2, #0]
 801064a:	2a02      	cmp	r2, #2
 801064c:	d0f2      	beq.n	8010634 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 801064e:	b188      	cbz	r0, 8010674 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8010650:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 8010652:	b163      	cbz	r3, 801066e <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8010654:	f001 fa3c 	bl	8011ad0 <xQueueTakeMutexRecursive>
 8010658:	2801      	cmp	r0, #1
 801065a:	d101      	bne.n	8010660 <osMutexAcquire+0x40>
  stat = osOK;
 801065c:	2000      	movs	r0, #0
 801065e:	e7eb      	b.n	8010638 <osMutexAcquire+0x18>
          stat = osErrorResource;
 8010660:	2c00      	cmp	r4, #0
 8010662:	bf14      	ite	ne
 8010664:	f06f 0001 	mvnne.w	r0, #1
 8010668:	f06f 0002 	mvneq.w	r0, #2
 801066c:	e7e4      	b.n	8010638 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801066e:	f001 f8a7 	bl	80117c0 <xQueueSemaphoreTake>
 8010672:	e7f1      	b.n	8010658 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 8010674:	f06f 0003 	mvn.w	r0, #3
 8010678:	e7de      	b.n	8010638 <osMutexAcquire+0x18>
 801067a:	bf00      	nop
 801067c:	24000b6c 	.word	0x24000b6c

08010680 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010680:	b508      	push	{r3, lr}
 8010682:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010684:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8010688:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801068c:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8010690:	b112      	cbz	r2, 8010698 <osMutexRelease+0x18>
    stat = osErrorISR;
 8010692:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8010696:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010698:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 801069c:	b912      	cbnz	r2, 80106a4 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801069e:	f3ef 8211 	mrs	r2, BASEPRI
 80106a2:	b11a      	cbz	r2, 80106ac <osMutexRelease+0x2c>
 80106a4:	4a0a      	ldr	r2, [pc, #40]	; (80106d0 <osMutexRelease+0x50>)
 80106a6:	6812      	ldr	r2, [r2, #0]
 80106a8:	2a02      	cmp	r2, #2
 80106aa:	d0f2      	beq.n	8010692 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 80106ac:	b168      	cbz	r0, 80106ca <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 80106ae:	b13b      	cbz	r3, 80106c0 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80106b0:	f000 fd66 	bl	8011180 <xQueueGiveMutexRecursive>
 80106b4:	2801      	cmp	r0, #1
  stat = osOK;
 80106b6:	bf0c      	ite	eq
 80106b8:	2000      	moveq	r0, #0
        stat = osErrorResource;
 80106ba:	f06f 0002 	mvnne.w	r0, #2
 80106be:	e7ea      	b.n	8010696 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80106c0:	461a      	mov	r2, r3
 80106c2:	4619      	mov	r1, r3
 80106c4:	f000 fbf8 	bl	8010eb8 <xQueueGenericSend>
 80106c8:	e7f4      	b.n	80106b4 <osMutexRelease+0x34>
    stat = osErrorParameter;
 80106ca:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80106ce:	e7e2      	b.n	8010696 <osMutexRelease+0x16>
 80106d0:	24000b6c 	.word	0x24000b6c

080106d4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80106d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80106d6:	460e      	mov	r6, r1
 80106d8:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80106da:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80106de:	b11b      	cbz	r3, 80106e8 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 80106e0:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80106e2:	4620      	mov	r0, r4
 80106e4:	b002      	add	sp, #8
 80106e6:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106e8:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80106ec:	b913      	cbnz	r3, 80106f4 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80106ee:	f3ef 8311 	mrs	r3, BASEPRI
 80106f2:	b11b      	cbz	r3, 80106fc <osSemaphoreNew+0x28>
 80106f4:	4b21      	ldr	r3, [pc, #132]	; (801077c <osSemaphoreNew+0xa8>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2b02      	cmp	r3, #2
 80106fa:	d0f1      	beq.n	80106e0 <osSemaphoreNew+0xc>
 80106fc:	2800      	cmp	r0, #0
 80106fe:	d0ef      	beq.n	80106e0 <osSemaphoreNew+0xc>
 8010700:	42b0      	cmp	r0, r6
 8010702:	d3ed      	bcc.n	80106e0 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 8010704:	b1ed      	cbz	r5, 8010742 <osSemaphoreNew+0x6e>
 8010706:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801070a:	b1c3      	cbz	r3, 801073e <osSemaphoreNew+0x6a>
 801070c:	2a4f      	cmp	r2, #79	; 0x4f
 801070e:	d9e7      	bls.n	80106e0 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8010710:	2801      	cmp	r0, #1
 8010712:	d126      	bne.n	8010762 <osSemaphoreNew+0x8e>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010714:	2203      	movs	r2, #3
 8010716:	9200      	str	r2, [sp, #0]
 8010718:	2200      	movs	r2, #0
 801071a:	4611      	mov	r1, r2
 801071c:	f000 fb10 	bl	8010d40 <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 8010720:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010722:	2800      	cmp	r0, #0
 8010724:	d0dc      	beq.n	80106e0 <osSemaphoreNew+0xc>
 8010726:	b1ce      	cbz	r6, 801075c <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010728:	2300      	movs	r3, #0
 801072a:	461a      	mov	r2, r3
 801072c:	4619      	mov	r1, r3
 801072e:	f000 fbc3 	bl	8010eb8 <xQueueGenericSend>
 8010732:	2801      	cmp	r0, #1
 8010734:	d012      	beq.n	801075c <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 8010736:	4620      	mov	r0, r4
 8010738:	f001 fad0 	bl	8011cdc <vQueueDelete>
 801073c:	e7d0      	b.n	80106e0 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801073e:	2a00      	cmp	r2, #0
 8010740:	d1ce      	bne.n	80106e0 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8010742:	2801      	cmp	r0, #1
 8010744:	d104      	bne.n	8010750 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 8010746:	2203      	movs	r2, #3
 8010748:	2100      	movs	r1, #0
 801074a:	f000 fb3f 	bl	8010dcc <xQueueGenericCreate>
 801074e:	e7e7      	b.n	8010720 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010750:	4631      	mov	r1, r6
 8010752:	f000 fb93 	bl	8010e7c <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8010756:	4604      	mov	r4, r0
 8010758:	2800      	cmp	r0, #0
 801075a:	d0c1      	beq.n	80106e0 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 801075c:	b945      	cbnz	r5, 8010770 <osSemaphoreNew+0x9c>
          name = NULL;
 801075e:	4629      	mov	r1, r5
 8010760:	e007      	b.n	8010772 <osSemaphoreNew+0x9e>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010762:	461a      	mov	r2, r3
 8010764:	4631      	mov	r1, r6
 8010766:	f000 fb67 	bl	8010e38 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 801076a:	4604      	mov	r4, r0
 801076c:	2800      	cmp	r0, #0
 801076e:	d0b7      	beq.n	80106e0 <osSemaphoreNew+0xc>
          name = attr->name;
 8010770:	6829      	ldr	r1, [r5, #0]
        vQueueAddToRegistry (hSemaphore, name);
 8010772:	4620      	mov	r0, r4
 8010774:	f001 fa7a 	bl	8011c6c <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8010778:	e7b3      	b.n	80106e2 <osSemaphoreNew+0xe>
 801077a:	bf00      	nop
 801077c:	24000b6c 	.word	0x24000b6c

08010780 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010780:	b513      	push	{r0, r1, r4, lr}
 8010782:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8010784:	b918      	cbnz	r0, 801078e <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 8010786:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 801078a:	b002      	add	sp, #8
 801078c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801078e:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 8010792:	b16b      	cbz	r3, 80107b0 <osSemaphoreAcquire+0x30>
    if (timeout != 0U) {
 8010794:	2c00      	cmp	r4, #0
 8010796:	d1f6      	bne.n	8010786 <osSemaphoreAcquire+0x6>
      yield = pdFALSE;
 8010798:	aa02      	add	r2, sp, #8
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801079a:	4621      	mov	r1, r4
      yield = pdFALSE;
 801079c:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80107a0:	f001 f9b8 	bl	8011b14 <xQueueReceiveFromISR>
 80107a4:	2801      	cmp	r0, #1
 80107a6:	d113      	bne.n	80107d0 <osSemaphoreAcquire+0x50>
        portYIELD_FROM_ISR (yield);
 80107a8:	9b01      	ldr	r3, [sp, #4]
 80107aa:	b9a3      	cbnz	r3, 80107d6 <osSemaphoreAcquire+0x56>
  stat = osOK;
 80107ac:	2000      	movs	r0, #0
 80107ae:	e7ec      	b.n	801078a <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107b0:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 80107b4:	b913      	cbnz	r3, 80107bc <osSemaphoreAcquire+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80107b6:	f3ef 8311 	mrs	r3, BASEPRI
 80107ba:	b11b      	cbz	r3, 80107c4 <osSemaphoreAcquire+0x44>
 80107bc:	4b0c      	ldr	r3, [pc, #48]	; (80107f0 <osSemaphoreAcquire+0x70>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	2b02      	cmp	r3, #2
 80107c2:	d0e7      	beq.n	8010794 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80107c4:	4621      	mov	r1, r4
 80107c6:	f000 fffb 	bl	80117c0 <xQueueSemaphoreTake>
 80107ca:	2801      	cmp	r0, #1
 80107cc:	d0ee      	beq.n	80107ac <osSemaphoreAcquire+0x2c>
      if (timeout != 0U) {
 80107ce:	b95c      	cbnz	r4, 80107e8 <osSemaphoreAcquire+0x68>
        stat = osErrorResource;
 80107d0:	f06f 0002 	mvn.w	r0, #2
 80107d4:	e7d9      	b.n	801078a <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 80107d6:	4b07      	ldr	r3, [pc, #28]	; (80107f4 <osSemaphoreAcquire+0x74>)
 80107d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107dc:	601a      	str	r2, [r3, #0]
 80107de:	f3bf 8f4f 	dsb	sy
 80107e2:	f3bf 8f6f 	isb	sy
 80107e6:	e7e1      	b.n	80107ac <osSemaphoreAcquire+0x2c>
        stat = osErrorTimeout;
 80107e8:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80107ec:	e7cd      	b.n	801078a <osSemaphoreAcquire+0xa>
 80107ee:	bf00      	nop
 80107f0:	24000b6c 	.word	0x24000b6c
 80107f4:	e000ed04 	.word	0xe000ed04

080107f8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80107f8:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80107fa:	b368      	cbz	r0, 8010858 <osSemaphoreRelease+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107fc:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8010800:	b153      	cbz	r3, 8010818 <osSemaphoreRelease+0x20>
    yield = pdFALSE;
 8010802:	a902      	add	r1, sp, #8
 8010804:	2400      	movs	r4, #0
 8010806:	f841 4d04 	str.w	r4, [r1, #-4]!

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801080a:	f000 fe77 	bl	80114fc <xQueueGiveFromISR>
 801080e:	2801      	cmp	r0, #1
 8010810:	d014      	beq.n	801083c <osSemaphoreRelease+0x44>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8010812:	f06f 0002 	mvn.w	r0, #2
 8010816:	e014      	b.n	8010842 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010818:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 801081c:	b913      	cbnz	r3, 8010824 <osSemaphoreRelease+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801081e:	f3ef 8311 	mrs	r3, BASEPRI
 8010822:	b11b      	cbz	r3, 801082c <osSemaphoreRelease+0x34>
 8010824:	4b0e      	ldr	r3, [pc, #56]	; (8010860 <osSemaphoreRelease+0x68>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	2b02      	cmp	r3, #2
 801082a:	d0ea      	beq.n	8010802 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801082c:	2300      	movs	r3, #0
 801082e:	461a      	mov	r2, r3
 8010830:	4619      	mov	r1, r3
 8010832:	f000 fb41 	bl	8010eb8 <xQueueGenericSend>
 8010836:	2801      	cmp	r0, #1
 8010838:	d002      	beq.n	8010840 <osSemaphoreRelease+0x48>
 801083a:	e7ea      	b.n	8010812 <osSemaphoreRelease+0x1a>
      portYIELD_FROM_ISR (yield);
 801083c:	9b01      	ldr	r3, [sp, #4]
 801083e:	b913      	cbnz	r3, 8010846 <osSemaphoreRelease+0x4e>
  stat = osOK;
 8010840:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8010842:	b002      	add	sp, #8
 8010844:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8010846:	4b07      	ldr	r3, [pc, #28]	; (8010864 <osSemaphoreRelease+0x6c>)
 8010848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801084c:	601a      	str	r2, [r3, #0]
 801084e:	f3bf 8f4f 	dsb	sy
 8010852:	f3bf 8f6f 	isb	sy
 8010856:	e7f3      	b.n	8010840 <osSemaphoreRelease+0x48>
    stat = osErrorParameter;
 8010858:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 801085c:	e7f1      	b.n	8010842 <osSemaphoreRelease+0x4a>
 801085e:	bf00      	nop
 8010860:	24000b6c 	.word	0x24000b6c
 8010864:	e000ed04 	.word	0xe000ed04

08010868 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8010868:	b510      	push	{r4, lr}
 801086a:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801086c:	f3ef 8305 	mrs	r3, IPSR
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8010870:	b113      	cbz	r3, 8010878 <osSemaphoreDelete+0x10>
    stat = osErrorISR;
 8010872:	f06f 0005 	mvn.w	r0, #5
#else
  stat = osError;
#endif

  return (stat);
}
 8010876:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010878:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 801087c:	b913      	cbnz	r3, 8010884 <osSemaphoreDelete+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801087e:	f3ef 8311 	mrs	r3, BASEPRI
 8010882:	b11b      	cbz	r3, 801088c <osSemaphoreDelete+0x24>
 8010884:	4b07      	ldr	r3, [pc, #28]	; (80108a4 <osSemaphoreDelete+0x3c>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	2b02      	cmp	r3, #2
 801088a:	d0f2      	beq.n	8010872 <osSemaphoreDelete+0xa>
  else if (hSemaphore == NULL) {
 801088c:	b13c      	cbz	r4, 801089e <osSemaphoreDelete+0x36>
    vQueueUnregisterQueue (hSemaphore);
 801088e:	4620      	mov	r0, r4
 8010890:	f001 fa10 	bl	8011cb4 <vQueueUnregisterQueue>
    vSemaphoreDelete (hSemaphore);
 8010894:	4620      	mov	r0, r4
 8010896:	f001 fa21 	bl	8011cdc <vQueueDelete>
    stat = osOK;
 801089a:	2000      	movs	r0, #0
 801089c:	e7eb      	b.n	8010876 <osSemaphoreDelete+0xe>
    stat = osErrorParameter;
 801089e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80108a2:	e7e8      	b.n	8010876 <osSemaphoreDelete+0xe>
 80108a4:	24000b6c 	.word	0x24000b6c

080108a8 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80108a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80108aa:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108ac:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80108b0:	b11b      	cbz	r3, 80108ba <osMessageQueueNew+0x12>
  hQueue = NULL;
 80108b2:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80108b4:	4628      	mov	r0, r5
 80108b6:	b002      	add	sp, #8
 80108b8:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108ba:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80108be:	b913      	cbnz	r3, 80108c6 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80108c0:	f3ef 8311 	mrs	r3, BASEPRI
 80108c4:	b11b      	cbz	r3, 80108ce <osMessageQueueNew+0x26>
 80108c6:	4b1a      	ldr	r3, [pc, #104]	; (8010930 <osMessageQueueNew+0x88>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	2b02      	cmp	r3, #2
 80108cc:	d0f1      	beq.n	80108b2 <osMessageQueueNew+0xa>
 80108ce:	2800      	cmp	r0, #0
 80108d0:	d0ef      	beq.n	80108b2 <osMessageQueueNew+0xa>
 80108d2:	2900      	cmp	r1, #0
 80108d4:	d0ed      	beq.n	80108b2 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 80108d6:	b304      	cbz	r4, 801091a <osMessageQueueNew+0x72>
 80108d8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80108dc:	b1ab      	cbz	r3, 801090a <osMessageQueueNew+0x62>
 80108de:	2a4f      	cmp	r2, #79	; 0x4f
 80108e0:	d9e7      	bls.n	80108b2 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80108e2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80108e4:	2a00      	cmp	r2, #0
 80108e6:	d0e4      	beq.n	80108b2 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80108e8:	fb01 f500 	mul.w	r5, r1, r0
 80108ec:	6966      	ldr	r6, [r4, #20]
 80108ee:	42ae      	cmp	r6, r5
 80108f0:	d3df      	bcc.n	80108b2 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80108f2:	2500      	movs	r5, #0
 80108f4:	9500      	str	r5, [sp, #0]
 80108f6:	f000 fa23 	bl	8010d40 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80108fa:	4605      	mov	r5, r0
 80108fc:	2800      	cmp	r0, #0
 80108fe:	d0d8      	beq.n	80108b2 <osMessageQueueNew+0xa>
        name = attr->name;
 8010900:	6821      	ldr	r1, [r4, #0]
      vQueueAddToRegistry (hQueue, name);
 8010902:	4628      	mov	r0, r5
 8010904:	f001 f9b2 	bl	8011c6c <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8010908:	e7d4      	b.n	80108b4 <osMessageQueueNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801090a:	2a00      	cmp	r2, #0
 801090c:	d1d1      	bne.n	80108b2 <osMessageQueueNew+0xa>
 801090e:	6923      	ldr	r3, [r4, #16]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d1ce      	bne.n	80108b2 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010914:	6963      	ldr	r3, [r4, #20]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d1cb      	bne.n	80108b2 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 801091a:	2200      	movs	r2, #0
 801091c:	f000 fa56 	bl	8010dcc <xQueueGenericCreate>
    if (hQueue != NULL) {
 8010920:	4605      	mov	r5, r0
 8010922:	2800      	cmp	r0, #0
 8010924:	d0c5      	beq.n	80108b2 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 8010926:	2c00      	cmp	r4, #0
 8010928:	d1ea      	bne.n	8010900 <osMessageQueueNew+0x58>
        name = NULL;
 801092a:	4621      	mov	r1, r4
 801092c:	e7e9      	b.n	8010902 <osMessageQueueNew+0x5a>
 801092e:	bf00      	nop
 8010930:	24000b6c 	.word	0x24000b6c

08010934 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010934:	b513      	push	{r0, r1, r4, lr}
 8010936:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010938:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 801093c:	b123      	cbz	r3, 8010948 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801093e:	b9d8      	cbnz	r0, 8010978 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 8010940:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8010944:	b002      	add	sp, #8
 8010946:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010948:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 801094c:	b913      	cbnz	r3, 8010954 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801094e:	f3ef 8311 	mrs	r3, BASEPRI
 8010952:	b11b      	cbz	r3, 801095c <osMessageQueuePut+0x28>
 8010954:	4b16      	ldr	r3, [pc, #88]	; (80109b0 <osMessageQueuePut+0x7c>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	2b02      	cmp	r3, #2
 801095a:	d0f0      	beq.n	801093e <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801095c:	2800      	cmp	r0, #0
 801095e:	d0ef      	beq.n	8010940 <osMessageQueuePut+0xc>
 8010960:	2900      	cmp	r1, #0
 8010962:	d0ed      	beq.n	8010940 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010964:	2300      	movs	r3, #0
 8010966:	4622      	mov	r2, r4
 8010968:	f000 faa6 	bl	8010eb8 <xQueueGenericSend>
 801096c:	2801      	cmp	r0, #1
 801096e:	d011      	beq.n	8010994 <osMessageQueuePut+0x60>
        if (timeout != 0U) {
 8010970:	b9dc      	cbnz	r4, 80109aa <osMessageQueuePut+0x76>
          stat = osErrorResource;
 8010972:	f06f 0002 	mvn.w	r0, #2
 8010976:	e7e5      	b.n	8010944 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010978:	2900      	cmp	r1, #0
 801097a:	d0e1      	beq.n	8010940 <osMessageQueuePut+0xc>
 801097c:	2c00      	cmp	r4, #0
 801097e:	d1df      	bne.n	8010940 <osMessageQueuePut+0xc>
      yield = pdFALSE;
 8010980:	aa02      	add	r2, sp, #8
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010982:	4623      	mov	r3, r4
      yield = pdFALSE;
 8010984:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010988:	f000 fc50 	bl	801122c <xQueueGenericSendFromISR>
 801098c:	2801      	cmp	r0, #1
 801098e:	d1f0      	bne.n	8010972 <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 8010990:	9b01      	ldr	r3, [sp, #4]
 8010992:	b90b      	cbnz	r3, 8010998 <osMessageQueuePut+0x64>
  stat = osOK;
 8010994:	2000      	movs	r0, #0
 8010996:	e7d5      	b.n	8010944 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8010998:	4b06      	ldr	r3, [pc, #24]	; (80109b4 <osMessageQueuePut+0x80>)
 801099a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801099e:	601a      	str	r2, [r3, #0]
 80109a0:	f3bf 8f4f 	dsb	sy
 80109a4:	f3bf 8f6f 	isb	sy
 80109a8:	e7f4      	b.n	8010994 <osMessageQueuePut+0x60>
          stat = osErrorTimeout;
 80109aa:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80109ae:	e7c9      	b.n	8010944 <osMessageQueuePut+0x10>
 80109b0:	24000b6c 	.word	0x24000b6c
 80109b4:	e000ed04 	.word	0xe000ed04

080109b8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80109b8:	b513      	push	{r0, r1, r4, lr}
 80109ba:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80109bc:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80109c0:	b123      	cbz	r3, 80109cc <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80109c2:	b9d0      	cbnz	r0, 80109fa <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 80109c4:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80109c8:	b002      	add	sp, #8
 80109ca:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109cc:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80109d0:	b913      	cbnz	r3, 80109d8 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80109d2:	f3ef 8311 	mrs	r3, BASEPRI
 80109d6:	b11b      	cbz	r3, 80109e0 <osMessageQueueGet+0x28>
 80109d8:	4b15      	ldr	r3, [pc, #84]	; (8010a30 <osMessageQueueGet+0x78>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	2b02      	cmp	r3, #2
 80109de:	d0f0      	beq.n	80109c2 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80109e0:	2800      	cmp	r0, #0
 80109e2:	d0ef      	beq.n	80109c4 <osMessageQueueGet+0xc>
 80109e4:	2900      	cmp	r1, #0
 80109e6:	d0ed      	beq.n	80109c4 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80109e8:	4622      	mov	r2, r4
 80109ea:	f000 fd8b 	bl	8011504 <xQueueReceive>
 80109ee:	2801      	cmp	r0, #1
 80109f0:	d010      	beq.n	8010a14 <osMessageQueueGet+0x5c>
        if (timeout != 0U) {
 80109f2:	b9d4      	cbnz	r4, 8010a2a <osMessageQueueGet+0x72>
          stat = osErrorResource;
 80109f4:	f06f 0002 	mvn.w	r0, #2
 80109f8:	e7e6      	b.n	80109c8 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80109fa:	2900      	cmp	r1, #0
 80109fc:	d0e2      	beq.n	80109c4 <osMessageQueueGet+0xc>
 80109fe:	2c00      	cmp	r4, #0
 8010a00:	d1e0      	bne.n	80109c4 <osMessageQueueGet+0xc>
      yield = pdFALSE;
 8010a02:	aa02      	add	r2, sp, #8
 8010a04:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010a08:	f001 f884 	bl	8011b14 <xQueueReceiveFromISR>
 8010a0c:	2801      	cmp	r0, #1
 8010a0e:	d1f1      	bne.n	80109f4 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 8010a10:	9b01      	ldr	r3, [sp, #4]
 8010a12:	b90b      	cbnz	r3, 8010a18 <osMessageQueueGet+0x60>
  stat = osOK;
 8010a14:	2000      	movs	r0, #0
 8010a16:	e7d7      	b.n	80109c8 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8010a18:	4b06      	ldr	r3, [pc, #24]	; (8010a34 <osMessageQueueGet+0x7c>)
 8010a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a1e:	601a      	str	r2, [r3, #0]
 8010a20:	f3bf 8f4f 	dsb	sy
 8010a24:	f3bf 8f6f 	isb	sy
 8010a28:	e7f4      	b.n	8010a14 <osMessageQueueGet+0x5c>
          stat = osErrorTimeout;
 8010a2a:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8010a2e:	e7cb      	b.n	80109c8 <osMessageQueueGet+0x10>
 8010a30:	24000b6c 	.word	0x24000b6c
 8010a34:	e000ed04 	.word	0xe000ed04

08010a38 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010a38:	4b03      	ldr	r3, [pc, #12]	; (8010a48 <vApplicationGetIdleTaskMemory+0x10>)
 8010a3a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010a3c:	4b03      	ldr	r3, [pc, #12]	; (8010a4c <vApplicationGetIdleTaskMemory+0x14>)
 8010a3e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010a40:	2380      	movs	r3, #128	; 0x80
 8010a42:	6013      	str	r3, [r2, #0]
}
 8010a44:	4770      	bx	lr
 8010a46:	bf00      	nop
 8010a48:	24000b0c 	.word	0x24000b0c
 8010a4c:	2400090c 	.word	0x2400090c

08010a50 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010a50:	4b03      	ldr	r3, [pc, #12]	; (8010a60 <vApplicationGetTimerTaskMemory+0x10>)
 8010a52:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010a54:	4b03      	ldr	r3, [pc, #12]	; (8010a64 <vApplicationGetTimerTaskMemory+0x14>)
 8010a56:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a5c:	6013      	str	r3, [r2, #0]
}
 8010a5e:	4770      	bx	lr
 8010a60:	24000f70 	.word	0x24000f70
 8010a64:	24000b70 	.word	0x24000b70

08010a68 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a68:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010a6c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a70:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a72:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a74:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010a7c:	4770      	bx	lr

08010a7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010a82:	4770      	bx	lr

08010a84 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8010a84:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010a86:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8010a88:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010a8a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010a8c:	689a      	ldr	r2, [r3, #8]
 8010a8e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010a90:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8010a92:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8010a94:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8010a96:	3301      	adds	r3, #1
 8010a98:	6003      	str	r3, [r0, #0]
}
 8010a9a:	4770      	bx	lr

08010a9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010a9c:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010a9e:	1c53      	adds	r3, r2, #1
{
 8010aa0:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8010aa2:	d10a      	bne.n	8010aba <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010aa4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010aa6:	685a      	ldr	r2, [r3, #4]
 8010aa8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010aaa:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010aac:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8010aae:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8010ab0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8010ab2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8010ab4:	3301      	adds	r3, #1
 8010ab6:	6003      	str	r3, [r0, #0]
}
 8010ab8:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010aba:	f100 0308 	add.w	r3, r0, #8
 8010abe:	685c      	ldr	r4, [r3, #4]
 8010ac0:	6825      	ldr	r5, [r4, #0]
 8010ac2:	4295      	cmp	r5, r2
 8010ac4:	d8ef      	bhi.n	8010aa6 <vListInsert+0xa>
 8010ac6:	4623      	mov	r3, r4
 8010ac8:	e7f9      	b.n	8010abe <vListInsert+0x22>

08010aca <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010aca:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8010ace:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010ad0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010ad2:	6882      	ldr	r2, [r0, #8]
 8010ad4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010ad6:	6859      	ldr	r1, [r3, #4]
 8010ad8:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010ada:	bf08      	it	eq
 8010adc:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010ade:	2200      	movs	r2, #0
 8010ae0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8010ae2:	681a      	ldr	r2, [r3, #0]
 8010ae4:	3a01      	subs	r2, #1
 8010ae6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010ae8:	6818      	ldr	r0, [r3, #0]
}
 8010aea:	4770      	bx	lr

08010aec <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010aec:	b510      	push	{r4, lr}
 8010aee:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010af0:	f002 fb58 	bl	80131a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010af4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8010af6:	f002 fb77 	bl	80131e8 <vPortExitCritical>

	return xReturn;
}
 8010afa:	fab4 f084 	clz	r0, r4
 8010afe:	0940      	lsrs	r0, r0, #5
 8010b00:	bd10      	pop	{r4, pc}

08010b02 <prvCopyDataToQueue>:
{
 8010b02:	b570      	push	{r4, r5, r6, lr}
 8010b04:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010b06:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8010b08:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b0a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010b0c:	b942      	cbnz	r2, 8010b20 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b0e:	6805      	ldr	r5, [r0, #0]
 8010b10:	b99d      	cbnz	r5, 8010b3a <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010b12:	6880      	ldr	r0, [r0, #8]
 8010b14:	f001 ffe2 	bl	8012adc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010b18:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010b1a:	3601      	adds	r6, #1
 8010b1c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8010b1e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8010b20:	b96d      	cbnz	r5, 8010b3e <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010b22:	6840      	ldr	r0, [r0, #4]
 8010b24:	f002 fff0 	bl	8013b08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b28:	6863      	ldr	r3, [r4, #4]
 8010b2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010b2c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b2e:	68a2      	ldr	r2, [r4, #8]
 8010b30:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b32:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b34:	d301      	bcc.n	8010b3a <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010b36:	6823      	ldr	r3, [r4, #0]
 8010b38:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8010b3a:	2000      	movs	r0, #0
 8010b3c:	e7ed      	b.n	8010b1a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010b3e:	68c0      	ldr	r0, [r0, #12]
 8010b40:	f002 ffe2 	bl	8013b08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010b44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010b46:	68e2      	ldr	r2, [r4, #12]
 8010b48:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b4a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010b4c:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b4e:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010b50:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010b52:	bf3e      	ittt	cc
 8010b54:	68a2      	ldrcc	r2, [r4, #8]
 8010b56:	189b      	addcc	r3, r3, r2
 8010b58:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8010b5a:	2d02      	cmp	r5, #2
 8010b5c:	d1ed      	bne.n	8010b3a <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b5e:	b10e      	cbz	r6, 8010b64 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8010b60:	3e01      	subs	r6, #1
 8010b62:	e7ea      	b.n	8010b3a <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8010b64:	4630      	mov	r0, r6
 8010b66:	e7d8      	b.n	8010b1a <prvCopyDataToQueue+0x18>

08010b68 <prvCopyDataFromQueue>:
{
 8010b68:	4603      	mov	r3, r0
 8010b6a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8010b6e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010b70:	b162      	cbz	r2, 8010b8c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b72:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010b74:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b76:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010b78:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b7a:	60d9      	str	r1, [r3, #12]
}
 8010b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010b80:	bf24      	itt	cs
 8010b82:	6819      	ldrcs	r1, [r3, #0]
 8010b84:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010b86:	68d9      	ldr	r1, [r3, #12]
 8010b88:	f002 bfbe 	b.w	8013b08 <memcpy>
}
 8010b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b90:	4770      	bx	lr

08010b92 <prvUnlockQueue>:
{
 8010b92:	b570      	push	{r4, r5, r6, lr}
 8010b94:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8010b96:	f002 fb05 	bl	80131a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010b9a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b9e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8010ba2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ba4:	2d00      	cmp	r5, #0
 8010ba6:	dc14      	bgt.n	8010bd2 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8010ba8:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010baa:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8010bae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8010bb2:	f002 fb19 	bl	80131e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010bb6:	f002 faf5 	bl	80131a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010bba:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8010bbe:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010bc0:	2d00      	cmp	r5, #0
 8010bc2:	dc12      	bgt.n	8010bea <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8010bc4:	23ff      	movs	r3, #255	; 0xff
 8010bc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8010bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8010bce:	f002 bb0b 	b.w	80131e8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d0e7      	beq.n	8010ba8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010bd8:	4630      	mov	r0, r6
 8010bda:	f001 fe3f 	bl	801285c <xTaskRemoveFromEventList>
 8010bde:	b108      	cbz	r0, 8010be4 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8010be0:	f001 fed4 	bl	801298c <vTaskMissedYield>
 8010be4:	3d01      	subs	r5, #1
 8010be6:	b26d      	sxtb	r5, r5
 8010be8:	e7dc      	b.n	8010ba4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010bea:	6923      	ldr	r3, [r4, #16]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d0e9      	beq.n	8010bc4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010bf0:	4630      	mov	r0, r6
 8010bf2:	f001 fe33 	bl	801285c <xTaskRemoveFromEventList>
 8010bf6:	b108      	cbz	r0, 8010bfc <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8010bf8:	f001 fec8 	bl	801298c <vTaskMissedYield>
 8010bfc:	3d01      	subs	r5, #1
 8010bfe:	b26d      	sxtb	r5, r5
 8010c00:	e7de      	b.n	8010bc0 <prvUnlockQueue+0x2e>
	...

08010c04 <xQueueGenericReset>:
{
 8010c04:	b538      	push	{r3, r4, r5, lr}
 8010c06:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8010c08:	4604      	mov	r4, r0
 8010c0a:	b940      	cbnz	r0, 8010c1e <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c10:	f383 8811 	msr	BASEPRI, r3
 8010c14:	f3bf 8f6f 	isb	sy
 8010c18:	f3bf 8f4f 	dsb	sy
 8010c1c:	e7fe      	b.n	8010c1c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8010c1e:	f002 fac1 	bl	80131a4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c22:	6822      	ldr	r2, [r4, #0]
 8010c24:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010c28:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c2a:	4343      	muls	r3, r0
 8010c2c:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c2e:	1a1b      	subs	r3, r3, r0
 8010c30:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c32:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010c34:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c36:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010c38:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010c3a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8010c3c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010c40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8010c44:	b995      	cbnz	r5, 8010c6c <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c46:	6923      	ldr	r3, [r4, #16]
 8010c48:	b163      	cbz	r3, 8010c64 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c4a:	f104 0010 	add.w	r0, r4, #16
 8010c4e:	f001 fe05 	bl	801285c <xTaskRemoveFromEventList>
 8010c52:	b138      	cbz	r0, 8010c64 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8010c54:	4b0a      	ldr	r3, [pc, #40]	; (8010c80 <xQueueGenericReset+0x7c>)
 8010c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c5a:	601a      	str	r2, [r3, #0]
 8010c5c:	f3bf 8f4f 	dsb	sy
 8010c60:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8010c64:	f002 fac0 	bl	80131e8 <vPortExitCritical>
}
 8010c68:	2001      	movs	r0, #1
 8010c6a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010c6c:	f104 0010 	add.w	r0, r4, #16
 8010c70:	f7ff fefa 	bl	8010a68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010c74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010c78:	f7ff fef6 	bl	8010a68 <vListInitialise>
 8010c7c:	e7f2      	b.n	8010c64 <xQueueGenericReset+0x60>
 8010c7e:	bf00      	nop
 8010c80:	e000ed04 	.word	0xe000ed04

08010c84 <prvInitialiseNewQueue>:
{
 8010c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c86:	9c06      	ldr	r4, [sp, #24]
 8010c88:	461d      	mov	r5, r3
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010c8a:	2900      	cmp	r1, #0
 8010c8c:	bf08      	it	eq
 8010c8e:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8010c90:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010c94:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010c96:	2101      	movs	r1, #1
 8010c98:	4620      	mov	r0, r4
 8010c9a:	f7ff ffb3 	bl	8010c04 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8010c9e:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
	traceQUEUE_CREATE( pxNewQueue );
 8010ca2:	4d24      	ldr	r5, [pc, #144]	; (8010d34 <prvInitialiseNewQueue+0xb0>)
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f7f4 fa3f 	bl	8005128 <prvTraceGetQueueType>
 8010caa:	5c28      	ldrb	r0, [r5, r0]
 8010cac:	f7f4 fe2e 	bl	800590c <prvTraceGetObjectHandle>
 8010cb0:	b281      	uxth	r1, r0
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	f7f4 fa69 	bl	800518a <prvTraceSetQueueNumberLow16>
 8010cb8:	4b1f      	ldr	r3, [pc, #124]	; (8010d38 <prvInitialiseNewQueue+0xb4>)
 8010cba:	4620      	mov	r0, r4
 8010cbc:	8819      	ldrh	r1, [r3, #0]
 8010cbe:	f7f4 fa72 	bl	80051a6 <prvTraceSetQueueNumberHigh16>
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	f7f4 fa30 	bl	8005128 <prvTraceGetQueueType>
 8010cc8:	5c2e      	ldrb	r6, [r5, r0]
 8010cca:	4620      	mov	r0, r4
 8010ccc:	f7f4 fa53 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8010cd0:	b2c1      	uxtb	r1, r0
 8010cd2:	4630      	mov	r0, r6
 8010cd4:	4e19      	ldr	r6, [pc, #100]	; (8010d3c <prvInitialiseNewQueue+0xb8>)
 8010cd6:	f7f4 fd07 	bl	80056e8 <prvMarkObjectAsUsed>
 8010cda:	f7f4 fac5 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8010cde:	f7f4 fa2a 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8010ce2:	8833      	ldrh	r3, [r6, #0]
 8010ce4:	4218      	tst	r0, r3
 8010ce6:	d017      	beq.n	8010d18 <prvInitialiseNewQueue+0x94>
 8010ce8:	4620      	mov	r0, r4
 8010cea:	f7f4 fa49 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 8010cee:	8833      	ldrh	r3, [r6, #0]
 8010cf0:	4218      	tst	r0, r3
 8010cf2:	d011      	beq.n	8010d18 <prvInitialiseNewQueue+0x94>
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	f7f4 fa17 	bl	8005128 <prvTraceGetQueueType>
 8010cfa:	5c2e      	ldrb	r6, [r5, r0]
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	3618      	adds	r6, #24
 8010d00:	f7f4 fa12 	bl	8005128 <prvTraceGetQueueType>
 8010d04:	5c2f      	ldrb	r7, [r5, r0]
 8010d06:	4620      	mov	r0, r4
 8010d08:	b2f6      	uxtb	r6, r6
 8010d0a:	f7f4 fa34 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8010d0e:	4639      	mov	r1, r7
 8010d10:	b2c2      	uxtb	r2, r0
 8010d12:	4630      	mov	r0, r6
 8010d14:	f7f5 f8a6 	bl	8005e64 <prvTraceStoreKernelCall>
 8010d18:	4620      	mov	r0, r4
 8010d1a:	f7f4 fa05 	bl	8005128 <prvTraceGetQueueType>
 8010d1e:	5c2d      	ldrb	r5, [r5, r0]
 8010d20:	4620      	mov	r0, r4
 8010d22:	f7f4 fa28 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8010d26:	2200      	movs	r2, #0
 8010d28:	b2c1      	uxtb	r1, r0
 8010d2a:	4628      	mov	r0, r5
}
 8010d2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	traceQUEUE_CREATE( pxNewQueue );
 8010d30:	f7f4 bdaa 	b.w	8005888 <prvTraceSetObjectState>
 8010d34:	24000008 	.word	0x24000008
 8010d38:	2400000e 	.word	0x2400000e
 8010d3c:	24000010 	.word	0x24000010

08010d40 <xQueueGenericCreateStatic>:
	{
 8010d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d42:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010d44:	b940      	cbnz	r0, 8010d58 <xQueueGenericCreateStatic+0x18>
 8010d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d4a:	f383 8811 	msr	BASEPRI, r3
 8010d4e:	f3bf 8f6f 	isb	sy
 8010d52:	f3bf 8f4f 	dsb	sy
 8010d56:	e7fe      	b.n	8010d56 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8010d58:	b943      	cbnz	r3, 8010d6c <xQueueGenericCreateStatic+0x2c>
 8010d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d5e:	f383 8811 	msr	BASEPRI, r3
 8010d62:	f3bf 8f6f 	isb	sy
 8010d66:	f3bf 8f4f 	dsb	sy
 8010d6a:	e7fe      	b.n	8010d6a <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010d6c:	b14a      	cbz	r2, 8010d82 <xQueueGenericCreateStatic+0x42>
 8010d6e:	b991      	cbnz	r1, 8010d96 <xQueueGenericCreateStatic+0x56>
 8010d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d74:	f383 8811 	msr	BASEPRI, r3
 8010d78:	f3bf 8f6f 	isb	sy
 8010d7c:	f3bf 8f4f 	dsb	sy
 8010d80:	e7fe      	b.n	8010d80 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010d82:	b141      	cbz	r1, 8010d96 <xQueueGenericCreateStatic+0x56>
 8010d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d88:	f383 8811 	msr	BASEPRI, r3
 8010d8c:	f3bf 8f6f 	isb	sy
 8010d90:	f3bf 8f4f 	dsb	sy
 8010d94:	e7fe      	b.n	8010d94 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010d96:	2350      	movs	r3, #80	; 0x50
 8010d98:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010d9a:	9b03      	ldr	r3, [sp, #12]
 8010d9c:	2b50      	cmp	r3, #80	; 0x50
 8010d9e:	d008      	beq.n	8010db2 <xQueueGenericCreateStatic+0x72>
 8010da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da4:	f383 8811 	msr	BASEPRI, r3
 8010da8:	f3bf 8f6f 	isb	sy
 8010dac:	f3bf 8f4f 	dsb	sy
 8010db0:	e7fe      	b.n	8010db0 <xQueueGenericCreateStatic+0x70>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010db2:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010db4:	2301      	movs	r3, #1
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010db6:	9400      	str	r4, [sp, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010db8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010dbc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8010dc0:	f7ff ff60 	bl	8010c84 <prvInitialiseNewQueue>
	}
 8010dc4:	4620      	mov	r0, r4
 8010dc6:	b004      	add	sp, #16
 8010dc8:	bd10      	pop	{r4, pc}
	...

08010dcc <xQueueGenericCreate>:
	{
 8010dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010dce:	460f      	mov	r7, r1
 8010dd0:	4616      	mov	r6, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010dd2:	4605      	mov	r5, r0
 8010dd4:	b940      	cbnz	r0, 8010de8 <xQueueGenericCreate+0x1c>
 8010dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dda:	f383 8811 	msr	BASEPRI, r3
 8010dde:	f3bf 8f6f 	isb	sy
 8010de2:	f3bf 8f4f 	dsb	sy
 8010de6:	e7fe      	b.n	8010de6 <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010de8:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010dea:	3050      	adds	r0, #80	; 0x50
 8010dec:	f002 fb48 	bl	8013480 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8010df0:	4604      	mov	r4, r0
 8010df2:	b168      	cbz	r0, 8010e10 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010df4:	2300      	movs	r3, #0
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010df6:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8010dfa:	4639      	mov	r1, r7
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010dfc:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010e00:	4633      	mov	r3, r6
 8010e02:	9000      	str	r0, [sp, #0]
 8010e04:	4628      	mov	r0, r5
 8010e06:	f7ff ff3d 	bl	8010c84 <prvInitialiseNewQueue>
	}
 8010e0a:	4620      	mov	r0, r4
 8010e0c:	b003      	add	sp, #12
 8010e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8010e10:	f7f4 fa2a 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8010e14:	f7f4 f98f 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8010e18:	4b05      	ldr	r3, [pc, #20]	; (8010e30 <xQueueGenericCreate+0x64>)
 8010e1a:	881b      	ldrh	r3, [r3, #0]
 8010e1c:	4218      	tst	r0, r3
 8010e1e:	d0f4      	beq.n	8010e0a <xQueueGenericCreate+0x3e>
 8010e20:	4b04      	ldr	r3, [pc, #16]	; (8010e34 <xQueueGenericCreate+0x68>)
 8010e22:	4621      	mov	r1, r4
 8010e24:	5d98      	ldrb	r0, [r3, r6]
 8010e26:	3040      	adds	r0, #64	; 0x40
 8010e28:	b2c0      	uxtb	r0, r0
 8010e2a:	f7f5 f8c1 	bl	8005fb0 <prvTraceStoreKernelCallWithNumericParamOnly>
		return pxNewQueue;
 8010e2e:	e7ec      	b.n	8010e0a <xQueueGenericCreate+0x3e>
 8010e30:	24000010 	.word	0x24000010
 8010e34:	24000008 	.word	0x24000008

08010e38 <xQueueCreateCountingSemaphoreStatic>:
	{
 8010e38:	b513      	push	{r0, r1, r4, lr}
 8010e3a:	4613      	mov	r3, r2
 8010e3c:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8010e3e:	b940      	cbnz	r0, 8010e52 <xQueueCreateCountingSemaphoreStatic+0x1a>
 8010e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e44:	f383 8811 	msr	BASEPRI, r3
 8010e48:	f3bf 8f6f 	isb	sy
 8010e4c:	f3bf 8f4f 	dsb	sy
 8010e50:	e7fe      	b.n	8010e50 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010e52:	4288      	cmp	r0, r1
 8010e54:	d208      	bcs.n	8010e68 <xQueueCreateCountingSemaphoreStatic+0x30>
 8010e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e5a:	f383 8811 	msr	BASEPRI, r3
 8010e5e:	f3bf 8f6f 	isb	sy
 8010e62:	f3bf 8f4f 	dsb	sy
 8010e66:	e7fe      	b.n	8010e66 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010e68:	2202      	movs	r2, #2
 8010e6a:	9200      	str	r2, [sp, #0]
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	4611      	mov	r1, r2
 8010e70:	f7ff ff66 	bl	8010d40 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8010e74:	b100      	cbz	r0, 8010e78 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010e76:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8010e78:	b002      	add	sp, #8
 8010e7a:	bd10      	pop	{r4, pc}

08010e7c <xQueueCreateCountingSemaphore>:
	{
 8010e7c:	b510      	push	{r4, lr}
 8010e7e:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8010e80:	b940      	cbnz	r0, 8010e94 <xQueueCreateCountingSemaphore+0x18>
 8010e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e86:	f383 8811 	msr	BASEPRI, r3
 8010e8a:	f3bf 8f6f 	isb	sy
 8010e8e:	f3bf 8f4f 	dsb	sy
 8010e92:	e7fe      	b.n	8010e92 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010e94:	4288      	cmp	r0, r1
 8010e96:	d208      	bcs.n	8010eaa <xQueueCreateCountingSemaphore+0x2e>
 8010e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e9c:	f383 8811 	msr	BASEPRI, r3
 8010ea0:	f3bf 8f6f 	isb	sy
 8010ea4:	f3bf 8f4f 	dsb	sy
 8010ea8:	e7fe      	b.n	8010ea8 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010eaa:	2202      	movs	r2, #2
 8010eac:	2100      	movs	r1, #0
 8010eae:	f7ff ff8d 	bl	8010dcc <xQueueGenericCreate>
		if( xHandle != NULL )
 8010eb2:	b100      	cbz	r0, 8010eb6 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010eb4:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8010eb6:	bd10      	pop	{r4, pc}

08010eb8 <xQueueGenericSend>:
{
 8010eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ebc:	b085      	sub	sp, #20
 8010ebe:	460f      	mov	r7, r1
 8010ec0:	461d      	mov	r5, r3
	configASSERT( pxQueue );
 8010ec2:	4604      	mov	r4, r0
{
 8010ec4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8010ec6:	b940      	cbnz	r0, 8010eda <xQueueGenericSend+0x22>
 8010ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ecc:	f383 8811 	msr	BASEPRI, r3
 8010ed0:	f3bf 8f6f 	isb	sy
 8010ed4:	f3bf 8f4f 	dsb	sy
 8010ed8:	e7fe      	b.n	8010ed8 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010eda:	b951      	cbnz	r1, 8010ef2 <xQueueGenericSend+0x3a>
 8010edc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010ede:	b143      	cbz	r3, 8010ef2 <xQueueGenericSend+0x3a>
 8010ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ee4:	f383 8811 	msr	BASEPRI, r3
 8010ee8:	f3bf 8f6f 	isb	sy
 8010eec:	f3bf 8f4f 	dsb	sy
 8010ef0:	e7fe      	b.n	8010ef0 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010ef2:	2d02      	cmp	r5, #2
 8010ef4:	d10b      	bne.n	8010f0e <xQueueGenericSend+0x56>
 8010ef6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010ef8:	2b01      	cmp	r3, #1
 8010efa:	d008      	beq.n	8010f0e <xQueueGenericSend+0x56>
 8010efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f00:	f383 8811 	msr	BASEPRI, r3
 8010f04:	f3bf 8f6f 	isb	sy
 8010f08:	f3bf 8f4f 	dsb	sy
 8010f0c:	e7fe      	b.n	8010f0c <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f0e:	f001 fd5f 	bl	80129d0 <xTaskGetSchedulerState>
 8010f12:	b950      	cbnz	r0, 8010f2a <xQueueGenericSend+0x72>
 8010f14:	9e01      	ldr	r6, [sp, #4]
 8010f16:	b14e      	cbz	r6, 8010f2c <xQueueGenericSend+0x74>
 8010f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f1c:	f383 8811 	msr	BASEPRI, r3
 8010f20:	f3bf 8f6f 	isb	sy
 8010f24:	f3bf 8f4f 	dsb	sy
 8010f28:	e7fe      	b.n	8010f28 <xQueueGenericSend+0x70>
 8010f2a:	2600      	movs	r6, #0
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8010f2c:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8011148 <xQueueGenericSend+0x290>
					portYIELD_WITHIN_API();
 8010f30:	f8df a21c 	ldr.w	sl, [pc, #540]	; 8011150 <xQueueGenericSend+0x298>
 8010f34:	f8df 9214 	ldr.w	r9, [pc, #532]	; 801114c <xQueueGenericSend+0x294>
 8010f38:	e098      	b.n	801106c <xQueueGenericSend+0x1b4>
				traceQUEUE_SEND( pxQueue );
 8010f3a:	2625      	movs	r6, #37	; 0x25
 8010f3c:	e0b9      	b.n	80110b2 <xQueueGenericSend+0x1fa>
 8010f3e:	2200      	movs	r2, #0
 8010f40:	e0d9      	b.n	80110f6 <xQueueGenericSend+0x23e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010f42:	9b01      	ldr	r3, [sp, #4]
 8010f44:	bb3b      	cbnz	r3, 8010f96 <xQueueGenericSend+0xde>
					taskEXIT_CRITICAL();
 8010f46:	f002 f94f 	bl	80131e8 <vPortExitCritical>
			traceQUEUE_SEND_FAILED( pxQueue );
 8010f4a:	4e7f      	ldr	r6, [pc, #508]	; (8011148 <xQueueGenericSend+0x290>)
 8010f4c:	f7f4 f98c 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8010f50:	f7f4 f8f1 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8010f54:	8833      	ldrh	r3, [r6, #0]
 8010f56:	4218      	tst	r0, r3
 8010f58:	d01b      	beq.n	8010f92 <xQueueGenericSend+0xda>
 8010f5a:	4620      	mov	r0, r4
 8010f5c:	f7f4 f910 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 8010f60:	8833      	ldrh	r3, [r6, #0]
 8010f62:	4218      	tst	r0, r3
 8010f64:	d015      	beq.n	8010f92 <xQueueGenericSend+0xda>
 8010f66:	4e79      	ldr	r6, [pc, #484]	; (801114c <xQueueGenericSend+0x294>)
 8010f68:	2d00      	cmp	r5, #0
 8010f6a:	f040 80ea 	bne.w	8011142 <xQueueGenericSend+0x28a>
 8010f6e:	4620      	mov	r0, r4
 8010f70:	f7f4 f8da 	bl	8005128 <prvTraceGetQueueType>
 8010f74:	5c35      	ldrb	r5, [r6, r0]
 8010f76:	3548      	adds	r5, #72	; 0x48
 8010f78:	b2ed      	uxtb	r5, r5
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	f7f4 f8d4 	bl	8005128 <prvTraceGetQueueType>
 8010f80:	5c36      	ldrb	r6, [r6, r0]
 8010f82:	4620      	mov	r0, r4
 8010f84:	f7f4 f8f7 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8010f88:	4631      	mov	r1, r6
 8010f8a:	b2c2      	uxtb	r2, r0
 8010f8c:	4628      	mov	r0, r5
 8010f8e:	f7f4 ff69 	bl	8005e64 <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 8010f92:	2000      	movs	r0, #0
 8010f94:	e0ca      	b.n	801112c <xQueueGenericSend+0x274>
				else if( xEntryTimeSet == pdFALSE )
 8010f96:	b916      	cbnz	r6, 8010f9e <xQueueGenericSend+0xe6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010f98:	a802      	add	r0, sp, #8
 8010f9a:	f001 fcaf 	bl	80128fc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010f9e:	f002 f923 	bl	80131e8 <vPortExitCritical>
		vTaskSuspendAll();
 8010fa2:	f001 f9a3 	bl	80122ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010fa6:	f002 f8fd 	bl	80131a4 <vPortEnterCritical>
 8010faa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010fae:	2bff      	cmp	r3, #255	; 0xff
 8010fb0:	d102      	bne.n	8010fb8 <xQueueGenericSend+0x100>
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010fb8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010fbc:	2bff      	cmp	r3, #255	; 0xff
 8010fbe:	d102      	bne.n	8010fc6 <xQueueGenericSend+0x10e>
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010fc6:	f002 f90f 	bl	80131e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010fca:	a901      	add	r1, sp, #4
 8010fcc:	a802      	add	r0, sp, #8
 8010fce:	f001 fca1 	bl	8012914 <xTaskCheckForTimeOut>
 8010fd2:	2800      	cmp	r0, #0
 8010fd4:	f040 80af 	bne.w	8011136 <xQueueGenericSend+0x27e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010fd8:	f002 f8e4 	bl	80131a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010fdc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010fde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d13b      	bne.n	801105c <xQueueGenericSend+0x1a4>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8010fe4:	f002 f900 	bl	80131e8 <vPortExitCritical>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8010fe8:	f7f4 f93e 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8010fec:	f7f4 f8a3 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8010ff0:	f8b8 3000 	ldrh.w	r3, [r8]
 8010ff4:	4218      	tst	r0, r3
 8010ff6:	d01d      	beq.n	8011034 <xQueueGenericSend+0x17c>
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	f7f4 f8c1 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 8010ffe:	f8b8 3000 	ldrh.w	r3, [r8]
 8011002:	4218      	tst	r0, r3
 8011004:	d016      	beq.n	8011034 <xQueueGenericSend+0x17c>
 8011006:	2d00      	cmp	r5, #0
 8011008:	f040 8093 	bne.w	8011132 <xQueueGenericSend+0x27a>
 801100c:	4620      	mov	r0, r4
 801100e:	f7f4 f88b 	bl	8005128 <prvTraceGetQueueType>
 8011012:	f819 6000 	ldrb.w	r6, [r9, r0]
 8011016:	3670      	adds	r6, #112	; 0x70
 8011018:	b2f6      	uxtb	r6, r6
 801101a:	4620      	mov	r0, r4
 801101c:	f7f4 f884 	bl	8005128 <prvTraceGetQueueType>
 8011020:	f819 b000 	ldrb.w	fp, [r9, r0]
 8011024:	4620      	mov	r0, r4
 8011026:	f7f4 f8a6 	bl	8005176 <prvTraceGetQueueNumberLow16>
 801102a:	4659      	mov	r1, fp
 801102c:	b2c2      	uxtb	r2, r0
 801102e:	4630      	mov	r0, r6
 8011030:	f7f4 ff18 	bl	8005e64 <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011034:	9901      	ldr	r1, [sp, #4]
 8011036:	f104 0010 	add.w	r0, r4, #16
 801103a:	f001 fbb1 	bl	80127a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801103e:	4620      	mov	r0, r4
 8011040:	f7ff fda7 	bl	8010b92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011044:	f001 fa1c 	bl	8012480 <xTaskResumeAll>
 8011048:	b978      	cbnz	r0, 801106a <xQueueGenericSend+0x1b2>
					portYIELD_WITHIN_API();
 801104a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801104e:	f8ca 3000 	str.w	r3, [sl]
 8011052:	f3bf 8f4f 	dsb	sy
 8011056:	f3bf 8f6f 	isb	sy
 801105a:	e006      	b.n	801106a <xQueueGenericSend+0x1b2>
	taskEXIT_CRITICAL();
 801105c:	f002 f8c4 	bl	80131e8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8011060:	4620      	mov	r0, r4
 8011062:	f7ff fd96 	bl	8010b92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011066:	f001 fa0b 	bl	8012480 <xTaskResumeAll>
 801106a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 801106c:	f002 f89a 	bl	80131a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011070:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011072:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011074:	429a      	cmp	r2, r3
 8011076:	d302      	bcc.n	801107e <xQueueGenericSend+0x1c6>
 8011078:	2d02      	cmp	r5, #2
 801107a:	f47f af62 	bne.w	8010f42 <xQueueGenericSend+0x8a>
				traceQUEUE_SEND( pxQueue );
 801107e:	4e32      	ldr	r6, [pc, #200]	; (8011148 <xQueueGenericSend+0x290>)
 8011080:	f7f4 f8f2 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8011084:	f7f4 f857 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8011088:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801114c <xQueueGenericSend+0x294>
 801108c:	8833      	ldrh	r3, [r6, #0]
 801108e:	4218      	tst	r0, r3
 8011090:	d01c      	beq.n	80110cc <xQueueGenericSend+0x214>
 8011092:	4620      	mov	r0, r4
 8011094:	f7f4 f874 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 8011098:	8833      	ldrh	r3, [r6, #0]
 801109a:	4218      	tst	r0, r3
 801109c:	d016      	beq.n	80110cc <xQueueGenericSend+0x214>
 801109e:	2d00      	cmp	r5, #0
 80110a0:	f47f af4b 	bne.w	8010f3a <xQueueGenericSend+0x82>
 80110a4:	4620      	mov	r0, r4
 80110a6:	f7f4 f83f 	bl	8005128 <prvTraceGetQueueType>
 80110aa:	f818 6000 	ldrb.w	r6, [r8, r0]
 80110ae:	3620      	adds	r6, #32
 80110b0:	b2f6      	uxtb	r6, r6
 80110b2:	4620      	mov	r0, r4
 80110b4:	f7f4 f838 	bl	8005128 <prvTraceGetQueueType>
 80110b8:	f818 9000 	ldrb.w	r9, [r8, r0]
 80110bc:	4620      	mov	r0, r4
 80110be:	f7f4 f85a 	bl	8005176 <prvTraceGetQueueNumberLow16>
 80110c2:	4649      	mov	r1, r9
 80110c4:	b2c2      	uxtb	r2, r0
 80110c6:	4630      	mov	r0, r6
 80110c8:	f7f4 fecc 	bl	8005e64 <prvTraceStoreKernelCall>
 80110cc:	4620      	mov	r0, r4
 80110ce:	f7f4 f82b 	bl	8005128 <prvTraceGetQueueType>
 80110d2:	f818 6000 	ldrb.w	r6, [r8, r0]
 80110d6:	4620      	mov	r0, r4
 80110d8:	f7f4 f84d 	bl	8005176 <prvTraceGetQueueNumberLow16>
 80110dc:	fa5f f980 	uxtb.w	r9, r0
 80110e0:	4620      	mov	r0, r4
 80110e2:	f7f4 f821 	bl	8005128 <prvTraceGetQueueType>
 80110e6:	f818 3000 	ldrb.w	r3, [r8, r0]
 80110ea:	2b02      	cmp	r3, #2
 80110ec:	f43f af27 	beq.w	8010f3e <xQueueGenericSend+0x86>
 80110f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80110f2:	3201      	adds	r2, #1
 80110f4:	b2d2      	uxtb	r2, r2
 80110f6:	4649      	mov	r1, r9
 80110f8:	4630      	mov	r0, r6
 80110fa:	f7f4 fbc5 	bl	8005888 <prvTraceSetObjectState>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80110fe:	462a      	mov	r2, r5
 8011100:	4639      	mov	r1, r7
 8011102:	4620      	mov	r0, r4
 8011104:	f7ff fcfd 	bl	8010b02 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801110a:	b11b      	cbz	r3, 8011114 <xQueueGenericSend+0x25c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801110c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011110:	f001 fba4 	bl	801285c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8011114:	b138      	cbz	r0, 8011126 <xQueueGenericSend+0x26e>
						queueYIELD_IF_USING_PREEMPTION();
 8011116:	4b0e      	ldr	r3, [pc, #56]	; (8011150 <xQueueGenericSend+0x298>)
 8011118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801111c:	601a      	str	r2, [r3, #0]
 801111e:	f3bf 8f4f 	dsb	sy
 8011122:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8011126:	f002 f85f 	bl	80131e8 <vPortExitCritical>
				return pdPASS;
 801112a:	2001      	movs	r0, #1
}
 801112c:	b005      	add	sp, #20
 801112e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8011132:	2675      	movs	r6, #117	; 0x75
 8011134:	e771      	b.n	801101a <xQueueGenericSend+0x162>
			prvUnlockQueue( pxQueue );
 8011136:	4620      	mov	r0, r4
 8011138:	f7ff fd2b 	bl	8010b92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801113c:	f001 f9a0 	bl	8012480 <xTaskResumeAll>
 8011140:	e703      	b.n	8010f4a <xQueueGenericSend+0x92>
			traceQUEUE_SEND_FAILED( pxQueue );
 8011142:	254d      	movs	r5, #77	; 0x4d
 8011144:	e719      	b.n	8010f7a <xQueueGenericSend+0xc2>
 8011146:	bf00      	nop
 8011148:	24000010 	.word	0x24000010
 801114c:	24000008 	.word	0x24000008
 8011150:	e000ed04 	.word	0xe000ed04

08011154 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011154:	2200      	movs	r2, #0
 8011156:	460b      	mov	r3, r1
	{
 8011158:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801115a:	4611      	mov	r1, r2
 801115c:	9000      	str	r0, [sp, #0]
 801115e:	2001      	movs	r0, #1
 8011160:	f7ff fdee 	bl	8010d40 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8011164:	4604      	mov	r4, r0
 8011166:	b138      	cbz	r0, 8011178 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011168:	2300      	movs	r3, #0
 801116a:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801116c:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801116e:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011170:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011172:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011174:	f7ff fea0 	bl	8010eb8 <xQueueGenericSend>
	}
 8011178:	4620      	mov	r0, r4
 801117a:	b002      	add	sp, #8
 801117c:	bd10      	pop	{r4, pc}
	...

08011180 <xQueueGiveMutexRecursive>:
	{
 8011180:	b570      	push	{r4, r5, r6, lr}
		configASSERT( pxMutex );
 8011182:	4604      	mov	r4, r0
 8011184:	b940      	cbnz	r0, 8011198 <xQueueGiveMutexRecursive+0x18>
 8011186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801118a:	f383 8811 	msr	BASEPRI, r3
 801118e:	f3bf 8f6f 	isb	sy
 8011192:	f3bf 8f4f 	dsb	sy
 8011196:	e7fe      	b.n	8011196 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011198:	6885      	ldr	r5, [r0, #8]
 801119a:	f001 fc13 	bl	80129c4 <xTaskGetCurrentTaskHandle>
 801119e:	4285      	cmp	r5, r0
 80111a0:	d10a      	bne.n	80111b8 <xQueueGiveMutexRecursive+0x38>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80111a2:	68e3      	ldr	r3, [r4, #12]
 80111a4:	3b01      	subs	r3, #1
 80111a6:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80111a8:	b923      	cbnz	r3, 80111b4 <xQueueGiveMutexRecursive+0x34>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80111aa:	461a      	mov	r2, r3
 80111ac:	4619      	mov	r1, r3
 80111ae:	4620      	mov	r0, r4
 80111b0:	f7ff fe82 	bl	8010eb8 <xQueueGenericSend>
			xReturn = pdPASS;
 80111b4:	2001      	movs	r0, #1
		return xReturn;
 80111b6:	e008      	b.n	80111ca <xQueueGiveMutexRecursive+0x4a>
			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 80111b8:	4d11      	ldr	r5, [pc, #68]	; (8011200 <xQueueGiveMutexRecursive+0x80>)
 80111ba:	f7f4 f855 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 80111be:	f7f3 ffba 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 80111c2:	882b      	ldrh	r3, [r5, #0]
 80111c4:	4218      	tst	r0, r3
 80111c6:	d101      	bne.n	80111cc <xQueueGiveMutexRecursive+0x4c>
			xReturn = pdFAIL;
 80111c8:	2000      	movs	r0, #0
	}
 80111ca:	bd70      	pop	{r4, r5, r6, pc}
			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 80111cc:	4620      	mov	r0, r4
 80111ce:	f7f3 ffd7 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 80111d2:	882b      	ldrh	r3, [r5, #0]
 80111d4:	4218      	tst	r0, r3
 80111d6:	d0f7      	beq.n	80111c8 <xQueueGiveMutexRecursive+0x48>
 80111d8:	4e0a      	ldr	r6, [pc, #40]	; (8011204 <xQueueGiveMutexRecursive+0x84>)
 80111da:	4620      	mov	r0, r4
 80111dc:	f7f3 ffa4 	bl	8005128 <prvTraceGetQueueType>
 80111e0:	5c35      	ldrb	r5, [r6, r0]
 80111e2:	4620      	mov	r0, r4
 80111e4:	f7f3 ffa0 	bl	8005128 <prvTraceGetQueueType>
 80111e8:	5c36      	ldrb	r6, [r6, r0]
 80111ea:	3548      	adds	r5, #72	; 0x48
 80111ec:	4620      	mov	r0, r4
 80111ee:	f7f3 ffc2 	bl	8005176 <prvTraceGetQueueNumberLow16>
 80111f2:	4631      	mov	r1, r6
 80111f4:	b2ed      	uxtb	r5, r5
 80111f6:	b2c2      	uxtb	r2, r0
 80111f8:	4628      	mov	r0, r5
 80111fa:	f7f4 fe33 	bl	8005e64 <prvTraceStoreKernelCall>
 80111fe:	e7e3      	b.n	80111c8 <xQueueGiveMutexRecursive+0x48>
 8011200:	24000010 	.word	0x24000010
 8011204:	24000008 	.word	0x24000008

08011208 <xQueueCreateMutex>:
	{
 8011208:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801120a:	4602      	mov	r2, r0
 801120c:	2100      	movs	r1, #0
 801120e:	2001      	movs	r0, #1
 8011210:	f7ff fddc 	bl	8010dcc <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8011214:	4604      	mov	r4, r0
 8011216:	b138      	cbz	r0, 8011228 <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011218:	2300      	movs	r3, #0
 801121a:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801121c:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801121e:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011220:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011222:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011224:	f7ff fe48 	bl	8010eb8 <xQueueGenericSend>
	}
 8011228:	4620      	mov	r0, r4
 801122a:	bd10      	pop	{r4, pc}

0801122c <xQueueGenericSendFromISR>:
{
 801122c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011230:	468b      	mov	fp, r1
 8011232:	4692      	mov	sl, r2
 8011234:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 8011236:	4604      	mov	r4, r0
 8011238:	b940      	cbnz	r0, 801124c <xQueueGenericSendFromISR+0x20>
 801123a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801123e:	f383 8811 	msr	BASEPRI, r3
 8011242:	f3bf 8f6f 	isb	sy
 8011246:	f3bf 8f4f 	dsb	sy
 801124a:	e7fe      	b.n	801124a <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801124c:	b951      	cbnz	r1, 8011264 <xQueueGenericSendFromISR+0x38>
 801124e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8011250:	b143      	cbz	r3, 8011264 <xQueueGenericSendFromISR+0x38>
 8011252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011256:	f383 8811 	msr	BASEPRI, r3
 801125a:	f3bf 8f6f 	isb	sy
 801125e:	f3bf 8f4f 	dsb	sy
 8011262:	e7fe      	b.n	8011262 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011264:	f1b8 0f02 	cmp.w	r8, #2
 8011268:	d10b      	bne.n	8011282 <xQueueGenericSendFromISR+0x56>
 801126a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801126c:	2b01      	cmp	r3, #1
 801126e:	d008      	beq.n	8011282 <xQueueGenericSendFromISR+0x56>
 8011270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011274:	f383 8811 	msr	BASEPRI, r3
 8011278:	f3bf 8f6f 	isb	sy
 801127c:	f3bf 8f4f 	dsb	sy
 8011280:	e7fe      	b.n	8011280 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011282:	f002 f8ab 	bl	80133dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011286:	f3ef 8611 	mrs	r6, BASEPRI
 801128a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801128e:	f383 8811 	msr	BASEPRI, r3
 8011292:	f3bf 8f6f 	isb	sy
 8011296:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801129a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801129c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801129e:	4f3d      	ldr	r7, [pc, #244]	; (8011394 <xQueueGenericSendFromISR+0x168>)
 80112a0:	429a      	cmp	r2, r3
 80112a2:	d302      	bcc.n	80112aa <xQueueGenericSendFromISR+0x7e>
 80112a4:	f1b8 0f02 	cmp.w	r8, #2
 80112a8:	d154      	bne.n	8011354 <xQueueGenericSendFromISR+0x128>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80112aa:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80112ac:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80112b0:	f7f3 ff66 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 80112b4:	883b      	ldrh	r3, [r7, #0]
			const int8_t cTxLock = pxQueue->cTxLock;
 80112b6:	b26d      	sxtb	r5, r5
 80112b8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8011398 <xQueueGenericSendFromISR+0x16c>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80112bc:	4218      	tst	r0, r3
 80112be:	d017      	beq.n	80112f0 <xQueueGenericSendFromISR+0xc4>
 80112c0:	f1b8 0f00 	cmp.w	r8, #0
 80112c4:	d12e      	bne.n	8011324 <xQueueGenericSendFromISR+0xf8>
 80112c6:	4620      	mov	r0, r4
 80112c8:	f7f3 ff2e 	bl	8005128 <prvTraceGetQueueType>
 80112cc:	f819 7000 	ldrb.w	r7, [r9, r0]
 80112d0:	3730      	adds	r7, #48	; 0x30
 80112d2:	b2ff      	uxtb	r7, r7
 80112d4:	4620      	mov	r0, r4
 80112d6:	f7f3 ff27 	bl	8005128 <prvTraceGetQueueType>
 80112da:	f819 1000 	ldrb.w	r1, [r9, r0]
 80112de:	4620      	mov	r0, r4
 80112e0:	9101      	str	r1, [sp, #4]
 80112e2:	f7f3 ff48 	bl	8005176 <prvTraceGetQueueNumberLow16>
 80112e6:	9901      	ldr	r1, [sp, #4]
 80112e8:	b2c2      	uxtb	r2, r0
 80112ea:	4638      	mov	r0, r7
 80112ec:	f7f4 fdba 	bl	8005e64 <prvTraceStoreKernelCall>
 80112f0:	4620      	mov	r0, r4
 80112f2:	f7f3 ff19 	bl	8005128 <prvTraceGetQueueType>
 80112f6:	f819 7000 	ldrb.w	r7, [r9, r0]
 80112fa:	4620      	mov	r0, r4
 80112fc:	f7f3 ff3b 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8011300:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011302:	b2c1      	uxtb	r1, r0
 8011304:	4638      	mov	r0, r7
 8011306:	3201      	adds	r2, #1
 8011308:	b2d2      	uxtb	r2, r2
 801130a:	f7f4 fabd 	bl	8005888 <prvTraceSetObjectState>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801130e:	4642      	mov	r2, r8
 8011310:	4659      	mov	r1, fp
 8011312:	4620      	mov	r0, r4
 8011314:	f7ff fbf5 	bl	8010b02 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8011318:	1c6b      	adds	r3, r5, #1
 801131a:	d116      	bne.n	801134a <xQueueGenericSendFromISR+0x11e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801131c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801131e:	b91b      	cbnz	r3, 8011328 <xQueueGenericSendFromISR+0xfc>
			xReturn = pdPASS;
 8011320:	2001      	movs	r0, #1
 8011322:	e00d      	b.n	8011340 <xQueueGenericSendFromISR+0x114>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8011324:	2735      	movs	r7, #53	; 0x35
 8011326:	e7d5      	b.n	80112d4 <xQueueGenericSendFromISR+0xa8>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011328:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801132c:	f001 fa96 	bl	801285c <xTaskRemoveFromEventList>
 8011330:	2800      	cmp	r0, #0
 8011332:	d0f5      	beq.n	8011320 <xQueueGenericSendFromISR+0xf4>
							if( pxHigherPriorityTaskWoken != NULL )
 8011334:	f1ba 0f00 	cmp.w	sl, #0
 8011338:	d0f2      	beq.n	8011320 <xQueueGenericSendFromISR+0xf4>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801133a:	2001      	movs	r0, #1
 801133c:	f8ca 0000 	str.w	r0, [sl]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011340:	f386 8811 	msr	BASEPRI, r6
}
 8011344:	b003      	add	sp, #12
 8011346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801134a:	3501      	adds	r5, #1
 801134c:	b26d      	sxtb	r5, r5
 801134e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8011352:	e7e5      	b.n	8011320 <xQueueGenericSendFromISR+0xf4>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8011354:	4620      	mov	r0, r4
 8011356:	f7f3 ff13 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 801135a:	883b      	ldrh	r3, [r7, #0]
 801135c:	4018      	ands	r0, r3
 801135e:	d0ef      	beq.n	8011340 <xQueueGenericSendFromISR+0x114>
 8011360:	4f0d      	ldr	r7, [pc, #52]	; (8011398 <xQueueGenericSendFromISR+0x16c>)
 8011362:	f1b8 0f00 	cmp.w	r8, #0
 8011366:	d113      	bne.n	8011390 <xQueueGenericSendFromISR+0x164>
 8011368:	4620      	mov	r0, r4
 801136a:	f7f3 fedd 	bl	8005128 <prvTraceGetQueueType>
 801136e:	5c3d      	ldrb	r5, [r7, r0]
 8011370:	3558      	adds	r5, #88	; 0x58
 8011372:	b2ed      	uxtb	r5, r5
 8011374:	4620      	mov	r0, r4
 8011376:	f7f3 fed7 	bl	8005128 <prvTraceGetQueueType>
 801137a:	5c3f      	ldrb	r7, [r7, r0]
 801137c:	4620      	mov	r0, r4
 801137e:	f7f3 fefa 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8011382:	4639      	mov	r1, r7
 8011384:	b2c2      	uxtb	r2, r0
 8011386:	4628      	mov	r0, r5
 8011388:	f7f4 fd6c 	bl	8005e64 <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 801138c:	2000      	movs	r0, #0
 801138e:	e7d7      	b.n	8011340 <xQueueGenericSendFromISR+0x114>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8011390:	255d      	movs	r5, #93	; 0x5d
 8011392:	e7ef      	b.n	8011374 <xQueueGenericSendFromISR+0x148>
 8011394:	24000010 	.word	0x24000010
 8011398:	24000008 	.word	0x24000008

0801139c <MyWrapper_xQueueGiveFromISR>:
{
 801139c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a0:	4689      	mov	r9, r1
 80113a2:	4617      	mov	r7, r2
	configASSERT( pxQueue );
 80113a4:	4604      	mov	r4, r0
 80113a6:	b940      	cbnz	r0, 80113ba <MyWrapper_xQueueGiveFromISR+0x1e>
	__asm volatile
 80113a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ac:	f383 8811 	msr	BASEPRI, r3
 80113b0:	f3bf 8f6f 	isb	sy
 80113b4:	f3bf 8f4f 	dsb	sy
 80113b8:	e7fe      	b.n	80113b8 <MyWrapper_xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 80113ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80113bc:	b143      	cbz	r3, 80113d0 <MyWrapper_xQueueGiveFromISR+0x34>
 80113be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c2:	f383 8811 	msr	BASEPRI, r3
 80113c6:	f3bf 8f6f 	isb	sy
 80113ca:	f3bf 8f4f 	dsb	sy
 80113ce:	e7fe      	b.n	80113ce <MyWrapper_xQueueGiveFromISR+0x32>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80113d0:	6803      	ldr	r3, [r0, #0]
 80113d2:	b953      	cbnz	r3, 80113ea <MyWrapper_xQueueGiveFromISR+0x4e>
 80113d4:	6883      	ldr	r3, [r0, #8]
 80113d6:	b143      	cbz	r3, 80113ea <MyWrapper_xQueueGiveFromISR+0x4e>
 80113d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113dc:	f383 8811 	msr	BASEPRI, r3
 80113e0:	f3bf 8f6f 	isb	sy
 80113e4:	f3bf 8f4f 	dsb	sy
 80113e8:	e7fe      	b.n	80113e8 <MyWrapper_xQueueGiveFromISR+0x4c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80113ea:	f001 fff7 	bl	80133dc <vPortValidateInterruptPriority>
	__asm volatile
 80113ee:	f3ef 8611 	mrs	r6, BASEPRI
 80113f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f6:	f383 8811 	msr	BASEPRI, r3
 80113fa:	f3bf 8f6f 	isb	sy
 80113fe:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011402:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011406:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011408:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80114f4 <MyWrapper_xQueueGiveFromISR+0x158>
 801140c:	4598      	cmp	r8, r3
 801140e:	d24f      	bcs.n	80114b0 <MyWrapper_xQueueGiveFromISR+0x114>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8011410:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8011412:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8011416:	f7f3 feb3 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 801141a:	f8ba 3000 	ldrh.w	r3, [sl]
			const int8_t cTxLock = pxQueue->cTxLock;
 801141e:	b26d      	sxtb	r5, r5
 8011420:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80114f8 <MyWrapper_xQueueGiveFromISR+0x15c>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8011424:	4218      	tst	r0, r3
 8011426:	d014      	beq.n	8011452 <MyWrapper_xQueueGiveFromISR+0xb6>
 8011428:	bb5f      	cbnz	r7, 8011482 <MyWrapper_xQueueGiveFromISR+0xe6>
 801142a:	4620      	mov	r0, r4
 801142c:	f7f3 fe7c 	bl	8005128 <prvTraceGetQueueType>
 8011430:	f81a 7000 	ldrb.w	r7, [sl, r0]
 8011434:	3730      	adds	r7, #48	; 0x30
 8011436:	b2ff      	uxtb	r7, r7
 8011438:	4620      	mov	r0, r4
 801143a:	f7f3 fe75 	bl	8005128 <prvTraceGetQueueType>
 801143e:	f81a b000 	ldrb.w	fp, [sl, r0]
 8011442:	4620      	mov	r0, r4
 8011444:	f7f3 fe97 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8011448:	4659      	mov	r1, fp
 801144a:	b2c2      	uxtb	r2, r0
 801144c:	4638      	mov	r0, r7
 801144e:	f7f4 fd09 	bl	8005e64 <prvTraceStoreKernelCall>
 8011452:	4620      	mov	r0, r4
 8011454:	f7f3 fe68 	bl	8005128 <prvTraceGetQueueType>
 8011458:	f81a 7000 	ldrb.w	r7, [sl, r0]
 801145c:	4620      	mov	r0, r4
 801145e:	f7f3 fe8a 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8011462:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011464:	b2c1      	uxtb	r1, r0
 8011466:	4638      	mov	r0, r7
 8011468:	3201      	adds	r2, #1
 801146a:	b2d2      	uxtb	r2, r2
 801146c:	f7f4 fa0c 	bl	8005888 <prvTraceSetObjectState>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011470:	f108 0301 	add.w	r3, r8, #1
 8011474:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8011476:	1c6b      	adds	r3, r5, #1
 8011478:	d115      	bne.n	80114a6 <MyWrapper_xQueueGiveFromISR+0x10a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801147a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801147c:	b91b      	cbnz	r3, 8011486 <MyWrapper_xQueueGiveFromISR+0xea>
			xReturn = pdPASS;
 801147e:	2001      	movs	r0, #1
 8011480:	e00d      	b.n	801149e <MyWrapper_xQueueGiveFromISR+0x102>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8011482:	2735      	movs	r7, #53	; 0x35
 8011484:	e7d8      	b.n	8011438 <MyWrapper_xQueueGiveFromISR+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011486:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801148a:	f001 f9e7 	bl	801285c <xTaskRemoveFromEventList>
 801148e:	2800      	cmp	r0, #0
 8011490:	d0f5      	beq.n	801147e <MyWrapper_xQueueGiveFromISR+0xe2>
							if( pxHigherPriorityTaskWoken != NULL )
 8011492:	f1b9 0f00 	cmp.w	r9, #0
 8011496:	d0f2      	beq.n	801147e <MyWrapper_xQueueGiveFromISR+0xe2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011498:	2001      	movs	r0, #1
 801149a:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 801149e:	f386 8811 	msr	BASEPRI, r6
}
 80114a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80114a6:	3501      	adds	r5, #1
 80114a8:	b26d      	sxtb	r5, r5
 80114aa:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80114ae:	e7e6      	b.n	801147e <MyWrapper_xQueueGiveFromISR+0xe2>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80114b0:	4620      	mov	r0, r4
 80114b2:	f7f3 fe65 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 80114b6:	f8ba 3000 	ldrh.w	r3, [sl]
 80114ba:	4018      	ands	r0, r3
 80114bc:	d0ef      	beq.n	801149e <MyWrapper_xQueueGiveFromISR+0x102>
 80114be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80114f8 <MyWrapper_xQueueGiveFromISR+0x15c>
 80114c2:	b9af      	cbnz	r7, 80114f0 <MyWrapper_xQueueGiveFromISR+0x154>
 80114c4:	4620      	mov	r0, r4
 80114c6:	f7f3 fe2f 	bl	8005128 <prvTraceGetQueueType>
 80114ca:	f818 5000 	ldrb.w	r5, [r8, r0]
 80114ce:	3558      	adds	r5, #88	; 0x58
 80114d0:	b2ed      	uxtb	r5, r5
 80114d2:	4620      	mov	r0, r4
 80114d4:	f7f3 fe28 	bl	8005128 <prvTraceGetQueueType>
 80114d8:	f818 7000 	ldrb.w	r7, [r8, r0]
 80114dc:	4620      	mov	r0, r4
 80114de:	f7f3 fe4a 	bl	8005176 <prvTraceGetQueueNumberLow16>
 80114e2:	4639      	mov	r1, r7
 80114e4:	b2c2      	uxtb	r2, r0
 80114e6:	4628      	mov	r0, r5
 80114e8:	f7f4 fcbc 	bl	8005e64 <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 80114ec:	2000      	movs	r0, #0
 80114ee:	e7d6      	b.n	801149e <MyWrapper_xQueueGiveFromISR+0x102>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80114f0:	255d      	movs	r5, #93	; 0x5d
 80114f2:	e7ee      	b.n	80114d2 <MyWrapper_xQueueGiveFromISR+0x136>
 80114f4:	24000010 	.word	0x24000010
 80114f8:	24000008 	.word	0x24000008

080114fc <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 80114fc:	2200      	movs	r2, #0
 80114fe:	f7ff bf4d 	b.w	801139c <MyWrapper_xQueueGiveFromISR>
	...

08011504 <xQueueReceive>:
{
 8011504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011508:	4688      	mov	r8, r1
 801150a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 801150c:	4604      	mov	r4, r0
 801150e:	b940      	cbnz	r0, 8011522 <xQueueReceive+0x1e>
	__asm volatile
 8011510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011514:	f383 8811 	msr	BASEPRI, r3
 8011518:	f3bf 8f6f 	isb	sy
 801151c:	f3bf 8f4f 	dsb	sy
 8011520:	e7fe      	b.n	8011520 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011522:	b951      	cbnz	r1, 801153a <xQueueReceive+0x36>
 8011524:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8011526:	b143      	cbz	r3, 801153a <xQueueReceive+0x36>
 8011528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801152c:	f383 8811 	msr	BASEPRI, r3
 8011530:	f3bf 8f6f 	isb	sy
 8011534:	f3bf 8f4f 	dsb	sy
 8011538:	e7fe      	b.n	8011538 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801153a:	f001 fa49 	bl	80129d0 <xTaskGetSchedulerState>
 801153e:	b950      	cbnz	r0, 8011556 <xQueueReceive+0x52>
 8011540:	9e01      	ldr	r6, [sp, #4]
 8011542:	b14e      	cbz	r6, 8011558 <xQueueReceive+0x54>
 8011544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011548:	f383 8811 	msr	BASEPRI, r3
 801154c:	f3bf 8f6f 	isb	sy
 8011550:	f3bf 8f4f 	dsb	sy
 8011554:	e7fe      	b.n	8011554 <xQueueReceive+0x50>
 8011556:	2600      	movs	r6, #0
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8011558:	4f96      	ldr	r7, [pc, #600]	; (80117b4 <xQueueReceive+0x2b0>)
					portYIELD_WITHIN_API();
 801155a:	f8df 9260 	ldr.w	r9, [pc, #608]	; 80117bc <xQueueReceive+0x2b8>
 801155e:	e09b      	b.n	8011698 <xQueueReceive+0x194>
				traceQUEUE_RECEIVE( pxQueue );
 8011560:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011562:	3a01      	subs	r2, #1
 8011564:	b2d2      	uxtb	r2, r2
 8011566:	e0d8      	b.n	801171a <xQueueReceive+0x216>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011568:	9d01      	ldr	r5, [sp, #4]
 801156a:	bb2d      	cbnz	r5, 80115b8 <xQueueReceive+0xb4>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 801156c:	4e91      	ldr	r6, [pc, #580]	; (80117b4 <xQueueReceive+0x2b0>)
					taskEXIT_CRITICAL();
 801156e:	f001 fe3b 	bl	80131e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8011572:	f7f3 fe79 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8011576:	f7f3 fdde 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 801157a:	8833      	ldrh	r3, [r6, #0]
 801157c:	4218      	tst	r0, r3
 801157e:	d101      	bne.n	8011584 <xQueueReceive+0x80>
				return errQUEUE_EMPTY;
 8011580:	2000      	movs	r0, #0
 8011582:	e0e2      	b.n	801174a <xQueueReceive+0x246>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8011584:	4620      	mov	r0, r4
 8011586:	f7f3 fdfb 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 801158a:	8833      	ldrh	r3, [r6, #0]
 801158c:	4218      	tst	r0, r3
 801158e:	d0f7      	beq.n	8011580 <xQueueReceive+0x7c>
 8011590:	4f89      	ldr	r7, [pc, #548]	; (80117b8 <xQueueReceive+0x2b4>)
 8011592:	4620      	mov	r0, r4
 8011594:	f7f3 fdc8 	bl	8005128 <prvTraceGetQueueType>
 8011598:	5c3e      	ldrb	r6, [r7, r0]
 801159a:	4620      	mov	r0, r4
 801159c:	f7f3 fdc4 	bl	8005128 <prvTraceGetQueueType>
 80115a0:	5c3f      	ldrb	r7, [r7, r0]
 80115a2:	3650      	adds	r6, #80	; 0x50
 80115a4:	4620      	mov	r0, r4
 80115a6:	f7f3 fde6 	bl	8005176 <prvTraceGetQueueNumberLow16>
 80115aa:	4639      	mov	r1, r7
 80115ac:	b2f6      	uxtb	r6, r6
 80115ae:	b2c2      	uxtb	r2, r0
 80115b0:	4630      	mov	r0, r6
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80115b2:	f7f4 fc57 	bl	8005e64 <prvTraceStoreKernelCall>
 80115b6:	e7e3      	b.n	8011580 <xQueueReceive+0x7c>
				else if( xEntryTimeSet == pdFALSE )
 80115b8:	b916      	cbnz	r6, 80115c0 <xQueueReceive+0xbc>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80115ba:	a802      	add	r0, sp, #8
 80115bc:	f001 f99e 	bl	80128fc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80115c0:	f001 fe12 	bl	80131e8 <vPortExitCritical>
		vTaskSuspendAll();
 80115c4:	f000 fe92 	bl	80122ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80115c8:	f001 fdec 	bl	80131a4 <vPortEnterCritical>
 80115cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80115d0:	2bff      	cmp	r3, #255	; 0xff
 80115d2:	d102      	bne.n	80115da <xQueueReceive+0xd6>
 80115d4:	2300      	movs	r3, #0
 80115d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80115da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80115de:	2bff      	cmp	r3, #255	; 0xff
 80115e0:	d102      	bne.n	80115e8 <xQueueReceive+0xe4>
 80115e2:	2300      	movs	r3, #0
 80115e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80115e8:	f001 fdfe 	bl	80131e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80115ec:	a901      	add	r1, sp, #4
 80115ee:	a802      	add	r0, sp, #8
 80115f0:	f001 f990 	bl	8012914 <xTaskCheckForTimeOut>
 80115f4:	2800      	cmp	r0, #0
 80115f6:	f040 80b1 	bne.w	801175c <xQueueReceive+0x258>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80115fa:	4620      	mov	r0, r4
 80115fc:	f7ff fa76 	bl	8010aec <prvIsQueueEmpty>
 8011600:	2800      	cmp	r0, #0
 8011602:	f000 80a5 	beq.w	8011750 <xQueueReceive+0x24c>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8011606:	f7f3 fe2f 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 801160a:	4e6b      	ldr	r6, [pc, #428]	; (80117b8 <xQueueReceive+0x2b4>)
 801160c:	f7f3 fd93 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8011610:	883b      	ldrh	r3, [r7, #0]
 8011612:	4218      	tst	r0, r3
 8011614:	d018      	beq.n	8011648 <xQueueReceive+0x144>
 8011616:	4620      	mov	r0, r4
 8011618:	f7f3 fdb2 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 801161c:	883b      	ldrh	r3, [r7, #0]
 801161e:	4218      	tst	r0, r3
 8011620:	d012      	beq.n	8011648 <xQueueReceive+0x144>
 8011622:	4620      	mov	r0, r4
 8011624:	f7f3 fd80 	bl	8005128 <prvTraceGetQueueType>
 8011628:	5c35      	ldrb	r5, [r6, r0]
 801162a:	4620      	mov	r0, r4
 801162c:	3568      	adds	r5, #104	; 0x68
 801162e:	f7f3 fd7b 	bl	8005128 <prvTraceGetQueueType>
 8011632:	f816 a000 	ldrb.w	sl, [r6, r0]
 8011636:	4620      	mov	r0, r4
 8011638:	b2ed      	uxtb	r5, r5
 801163a:	f7f3 fd9c 	bl	8005176 <prvTraceGetQueueNumberLow16>
 801163e:	4651      	mov	r1, sl
 8011640:	b2c2      	uxtb	r2, r0
 8011642:	4628      	mov	r0, r5
 8011644:	f7f4 fc0e 	bl	8005e64 <prvTraceStoreKernelCall>
 8011648:	4620      	mov	r0, r4
 801164a:	f7f3 fd6d 	bl	8005128 <prvTraceGetQueueType>
 801164e:	5c33      	ldrb	r3, [r6, r0]
 8011650:	2b02      	cmp	r3, #2
 8011652:	d00d      	beq.n	8011670 <xQueueReceive+0x16c>
 8011654:	f7f3 fe08 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8011658:	f7f3 fd6d 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 801165c:	883b      	ldrh	r3, [r7, #0]
 801165e:	4218      	tst	r0, r3
 8011660:	d006      	beq.n	8011670 <xQueueReceive+0x16c>
 8011662:	f7f3 fe01 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8011666:	f7f3 fd61 	bl	800512c <prvTraceGetTaskNumberLow16>
 801166a:	b2c0      	uxtb	r0, r0
 801166c:	f7f4 f932 	bl	80058d4 <prvTraceSetTaskInstanceFinished>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011670:	9901      	ldr	r1, [sp, #4]
 8011672:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011676:	f001 f893 	bl	80127a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801167a:	4620      	mov	r0, r4
 801167c:	f7ff fa89 	bl	8010b92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011680:	f000 fefe 	bl	8012480 <xTaskResumeAll>
 8011684:	b938      	cbnz	r0, 8011696 <xQueueReceive+0x192>
					portYIELD_WITHIN_API();
 8011686:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801168a:	f8c9 3000 	str.w	r3, [r9]
 801168e:	f3bf 8f4f 	dsb	sy
 8011692:	f3bf 8f6f 	isb	sy
 8011696:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8011698:	f001 fd84 	bl	80131a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801169c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801169e:	2d00      	cmp	r5, #0
 80116a0:	f43f af62 	beq.w	8011568 <xQueueReceive+0x64>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80116a4:	4641      	mov	r1, r8
 80116a6:	4620      	mov	r0, r4
				traceQUEUE_RECEIVE( pxQueue );
 80116a8:	4e42      	ldr	r6, [pc, #264]	; (80117b4 <xQueueReceive+0x2b0>)
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80116aa:	f7ff fa5d 	bl	8010b68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80116ae:	f7f3 fddb 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 80116b2:	4f41      	ldr	r7, [pc, #260]	; (80117b8 <xQueueReceive+0x2b4>)
 80116b4:	f7f3 fd3f 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 80116b8:	8833      	ldrh	r3, [r6, #0]
 80116ba:	4218      	tst	r0, r3
 80116bc:	d018      	beq.n	80116f0 <xQueueReceive+0x1ec>
 80116be:	4620      	mov	r0, r4
 80116c0:	f7f3 fd5e 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 80116c4:	8833      	ldrh	r3, [r6, #0]
 80116c6:	4218      	tst	r0, r3
 80116c8:	d012      	beq.n	80116f0 <xQueueReceive+0x1ec>
 80116ca:	4620      	mov	r0, r4
 80116cc:	f7f3 fd2c 	bl	8005128 <prvTraceGetQueueType>
 80116d0:	5c3e      	ldrb	r6, [r7, r0]
 80116d2:	4620      	mov	r0, r4
 80116d4:	3628      	adds	r6, #40	; 0x28
 80116d6:	f7f3 fd27 	bl	8005128 <prvTraceGetQueueType>
 80116da:	f817 8000 	ldrb.w	r8, [r7, r0]
 80116de:	4620      	mov	r0, r4
 80116e0:	b2f6      	uxtb	r6, r6
 80116e2:	f7f3 fd48 	bl	8005176 <prvTraceGetQueueNumberLow16>
 80116e6:	4641      	mov	r1, r8
 80116e8:	b2c2      	uxtb	r2, r0
 80116ea:	4630      	mov	r0, r6
 80116ec:	f7f4 fbba 	bl	8005e64 <prvTraceStoreKernelCall>
 80116f0:	4620      	mov	r0, r4
 80116f2:	f7f3 fd19 	bl	8005128 <prvTraceGetQueueType>
 80116f6:	5c3e      	ldrb	r6, [r7, r0]
 80116f8:	4620      	mov	r0, r4
 80116fa:	f7f3 fd3c 	bl	8005176 <prvTraceGetQueueNumberLow16>
 80116fe:	fa5f f880 	uxtb.w	r8, r0
 8011702:	4620      	mov	r0, r4
 8011704:	f7f3 fd10 	bl	8005128 <prvTraceGetQueueType>
 8011708:	5c3b      	ldrb	r3, [r7, r0]
 801170a:	2b02      	cmp	r3, #2
 801170c:	f47f af28 	bne.w	8011560 <xQueueReceive+0x5c>
 8011710:	f7f3 fdaa 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8011714:	f7f3 fd0a 	bl	800512c <prvTraceGetTaskNumberLow16>
 8011718:	b2c2      	uxtb	r2, r0
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801171a:	3d01      	subs	r5, #1
				traceQUEUE_RECEIVE( pxQueue );
 801171c:	4641      	mov	r1, r8
 801171e:	4630      	mov	r0, r6
 8011720:	f7f4 f8b2 	bl	8005888 <prvTraceSetObjectState>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011724:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011726:	6923      	ldr	r3, [r4, #16]
 8011728:	b163      	cbz	r3, 8011744 <xQueueReceive+0x240>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801172a:	f104 0010 	add.w	r0, r4, #16
 801172e:	f001 f895 	bl	801285c <xTaskRemoveFromEventList>
 8011732:	b138      	cbz	r0, 8011744 <xQueueReceive+0x240>
						queueYIELD_IF_USING_PREEMPTION();
 8011734:	4b21      	ldr	r3, [pc, #132]	; (80117bc <xQueueReceive+0x2b8>)
 8011736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801173a:	601a      	str	r2, [r3, #0]
 801173c:	f3bf 8f4f 	dsb	sy
 8011740:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8011744:	f001 fd50 	bl	80131e8 <vPortExitCritical>
				return pdPASS;
 8011748:	2001      	movs	r0, #1
}
 801174a:	b004      	add	sp, #16
 801174c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8011750:	4620      	mov	r0, r4
 8011752:	f7ff fa1e 	bl	8010b92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011756:	f000 fe93 	bl	8012480 <xTaskResumeAll>
 801175a:	e79c      	b.n	8011696 <xQueueReceive+0x192>
			prvUnlockQueue( pxQueue );
 801175c:	4620      	mov	r0, r4
 801175e:	f7ff fa18 	bl	8010b92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011762:	f000 fe8d 	bl	8012480 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011766:	4620      	mov	r0, r4
 8011768:	f7ff f9c0 	bl	8010aec <prvIsQueueEmpty>
 801176c:	2800      	cmp	r0, #0
 801176e:	d092      	beq.n	8011696 <xQueueReceive+0x192>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8011770:	4d10      	ldr	r5, [pc, #64]	; (80117b4 <xQueueReceive+0x2b0>)
 8011772:	f7f3 fd79 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8011776:	f7f3 fcde 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 801177a:	882b      	ldrh	r3, [r5, #0]
 801177c:	4218      	tst	r0, r3
 801177e:	f43f aeff 	beq.w	8011580 <xQueueReceive+0x7c>
 8011782:	4620      	mov	r0, r4
 8011784:	f7f3 fcfc 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 8011788:	882b      	ldrh	r3, [r5, #0]
 801178a:	4218      	tst	r0, r3
 801178c:	f43f aef8 	beq.w	8011580 <xQueueReceive+0x7c>
 8011790:	4e09      	ldr	r6, [pc, #36]	; (80117b8 <xQueueReceive+0x2b4>)
 8011792:	4620      	mov	r0, r4
 8011794:	f7f3 fcc8 	bl	8005128 <prvTraceGetQueueType>
 8011798:	5c35      	ldrb	r5, [r6, r0]
 801179a:	4620      	mov	r0, r4
 801179c:	f7f3 fcc4 	bl	8005128 <prvTraceGetQueueType>
 80117a0:	5c36      	ldrb	r6, [r6, r0]
 80117a2:	3550      	adds	r5, #80	; 0x50
 80117a4:	4620      	mov	r0, r4
 80117a6:	f7f3 fce6 	bl	8005176 <prvTraceGetQueueNumberLow16>
 80117aa:	4631      	mov	r1, r6
 80117ac:	b2ed      	uxtb	r5, r5
 80117ae:	b2c2      	uxtb	r2, r0
 80117b0:	4628      	mov	r0, r5
 80117b2:	e6fe      	b.n	80115b2 <xQueueReceive+0xae>
 80117b4:	24000010 	.word	0x24000010
 80117b8:	24000008 	.word	0x24000008
 80117bc:	e000ed04 	.word	0xe000ed04

080117c0 <xQueueSemaphoreTake>:
{
 80117c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	configASSERT( ( pxQueue ) );
 80117c4:	4604      	mov	r4, r0
{
 80117c6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80117c8:	b940      	cbnz	r0, 80117dc <xQueueSemaphoreTake+0x1c>
 80117ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ce:	f383 8811 	msr	BASEPRI, r3
 80117d2:	f3bf 8f6f 	isb	sy
 80117d6:	f3bf 8f4f 	dsb	sy
 80117da:	e7fe      	b.n	80117da <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 80117dc:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80117de:	b145      	cbz	r5, 80117f2 <xQueueSemaphoreTake+0x32>
 80117e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117e4:	f383 8811 	msr	BASEPRI, r3
 80117e8:	f3bf 8f6f 	isb	sy
 80117ec:	f3bf 8f4f 	dsb	sy
 80117f0:	e7fe      	b.n	80117f0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80117f2:	f001 f8ed 	bl	80129d0 <xTaskGetSchedulerState>
 80117f6:	b950      	cbnz	r0, 801180e <xQueueSemaphoreTake+0x4e>
 80117f8:	9d01      	ldr	r5, [sp, #4]
 80117fa:	b145      	cbz	r5, 801180e <xQueueSemaphoreTake+0x4e>
 80117fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011800:	f383 8811 	msr	BASEPRI, r3
 8011804:	f3bf 8f6f 	isb	sy
 8011808:	f3bf 8f4f 	dsb	sy
 801180c:	e7fe      	b.n	801180c <xQueueSemaphoreTake+0x4c>
 801180e:	46a9      	mov	r9, r5
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8011810:	4fac      	ldr	r7, [pc, #688]	; (8011ac4 <xQueueSemaphoreTake+0x304>)
					portYIELD_WITHIN_API();
 8011812:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8011acc <xQueueSemaphoreTake+0x30c>
 8011816:	e0b5      	b.n	8011984 <xQueueSemaphoreTake+0x1c4>
				traceQUEUE_RECEIVE( pxQueue );
 8011818:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801181a:	3a01      	subs	r2, #1
 801181c:	b2d2      	uxtb	r2, r2
 801181e:	e0ee      	b.n	80119fe <xQueueSemaphoreTake+0x23e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011820:	9b01      	ldr	r3, [sp, #4]
 8011822:	bb7b      	cbnz	r3, 8011884 <xQueueSemaphoreTake+0xc4>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011824:	b145      	cbz	r5, 8011838 <xQueueSemaphoreTake+0x78>
 8011826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801182a:	f383 8811 	msr	BASEPRI, r3
 801182e:	f3bf 8f6f 	isb	sy
 8011832:	f3bf 8f4f 	dsb	sy
 8011836:	e7fe      	b.n	8011836 <xQueueSemaphoreTake+0x76>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8011838:	4ea2      	ldr	r6, [pc, #648]	; (8011ac4 <xQueueSemaphoreTake+0x304>)
					taskEXIT_CRITICAL();
 801183a:	f001 fcd5 	bl	80131e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 801183e:	f7f3 fd13 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8011842:	f7f3 fc78 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8011846:	8833      	ldrh	r3, [r6, #0]
 8011848:	4218      	tst	r0, r3
 801184a:	d101      	bne.n	8011850 <xQueueSemaphoreTake+0x90>
				return errQUEUE_EMPTY;
 801184c:	2500      	movs	r5, #0
 801184e:	e0f3      	b.n	8011a38 <xQueueSemaphoreTake+0x278>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8011850:	4620      	mov	r0, r4
 8011852:	f7f3 fc95 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 8011856:	8833      	ldrh	r3, [r6, #0]
 8011858:	4218      	tst	r0, r3
 801185a:	d0f7      	beq.n	801184c <xQueueSemaphoreTake+0x8c>
 801185c:	4f9a      	ldr	r7, [pc, #616]	; (8011ac8 <xQueueSemaphoreTake+0x308>)
 801185e:	4620      	mov	r0, r4
 8011860:	f7f3 fc62 	bl	8005128 <prvTraceGetQueueType>
 8011864:	5c3e      	ldrb	r6, [r7, r0]
 8011866:	4620      	mov	r0, r4
 8011868:	f7f3 fc5e 	bl	8005128 <prvTraceGetQueueType>
 801186c:	5c3f      	ldrb	r7, [r7, r0]
 801186e:	3650      	adds	r6, #80	; 0x50
 8011870:	4620      	mov	r0, r4
 8011872:	f7f3 fc80 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8011876:	4639      	mov	r1, r7
 8011878:	b2f6      	uxtb	r6, r6
 801187a:	b2c2      	uxtb	r2, r0
 801187c:	4630      	mov	r0, r6
 801187e:	f7f4 faf1 	bl	8005e64 <prvTraceStoreKernelCall>
 8011882:	e0d9      	b.n	8011a38 <xQueueSemaphoreTake+0x278>
				else if( xEntryTimeSet == pdFALSE )
 8011884:	f1b9 0f00 	cmp.w	r9, #0
 8011888:	d102      	bne.n	8011890 <xQueueSemaphoreTake+0xd0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801188a:	a802      	add	r0, sp, #8
 801188c:	f001 f836 	bl	80128fc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8011890:	f001 fcaa 	bl	80131e8 <vPortExitCritical>
		vTaskSuspendAll();
 8011894:	f000 fd2a 	bl	80122ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011898:	f001 fc84 	bl	80131a4 <vPortEnterCritical>
 801189c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80118a0:	2bff      	cmp	r3, #255	; 0xff
 80118a2:	d102      	bne.n	80118aa <xQueueSemaphoreTake+0xea>
 80118a4:	2300      	movs	r3, #0
 80118a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80118aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80118ae:	2bff      	cmp	r3, #255	; 0xff
 80118b0:	d102      	bne.n	80118b8 <xQueueSemaphoreTake+0xf8>
 80118b2:	2300      	movs	r3, #0
 80118b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80118b8:	f001 fc96 	bl	80131e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80118bc:	a901      	add	r1, sp, #4
 80118be:	a802      	add	r0, sp, #8
 80118c0:	f001 f828 	bl	8012914 <xTaskCheckForTimeOut>
 80118c4:	2800      	cmp	r0, #0
 80118c6:	f040 80c1 	bne.w	8011a4c <xQueueSemaphoreTake+0x28c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80118ca:	4620      	mov	r0, r4
 80118cc:	f7ff f90e 	bl	8010aec <prvIsQueueEmpty>
 80118d0:	2800      	cmp	r0, #0
 80118d2:	f000 80b5 	beq.w	8011a40 <xQueueSemaphoreTake+0x280>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80118d6:	f7f3 fcc7 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 80118da:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8011ac8 <xQueueSemaphoreTake+0x308>
 80118de:	f7f3 fc2a 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 80118e2:	883b      	ldrh	r3, [r7, #0]
 80118e4:	4218      	tst	r0, r3
 80118e6:	d019      	beq.n	801191c <xQueueSemaphoreTake+0x15c>
 80118e8:	4620      	mov	r0, r4
 80118ea:	f7f3 fc49 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 80118ee:	883b      	ldrh	r3, [r7, #0]
 80118f0:	4218      	tst	r0, r3
 80118f2:	d013      	beq.n	801191c <xQueueSemaphoreTake+0x15c>
 80118f4:	4620      	mov	r0, r4
 80118f6:	f7f3 fc17 	bl	8005128 <prvTraceGetQueueType>
 80118fa:	f819 6000 	ldrb.w	r6, [r9, r0]
 80118fe:	4620      	mov	r0, r4
 8011900:	3668      	adds	r6, #104	; 0x68
 8011902:	f7f3 fc11 	bl	8005128 <prvTraceGetQueueType>
 8011906:	f819 a000 	ldrb.w	sl, [r9, r0]
 801190a:	4620      	mov	r0, r4
 801190c:	b2f6      	uxtb	r6, r6
 801190e:	f7f3 fc32 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8011912:	4651      	mov	r1, sl
 8011914:	b2c2      	uxtb	r2, r0
 8011916:	4630      	mov	r0, r6
 8011918:	f7f4 faa4 	bl	8005e64 <prvTraceStoreKernelCall>
 801191c:	4620      	mov	r0, r4
 801191e:	f7f3 fc03 	bl	8005128 <prvTraceGetQueueType>
 8011922:	f819 3000 	ldrb.w	r3, [r9, r0]
 8011926:	2b02      	cmp	r3, #2
 8011928:	d00d      	beq.n	8011946 <xQueueSemaphoreTake+0x186>
 801192a:	f7f3 fc9d 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 801192e:	f7f3 fc02 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8011932:	883b      	ldrh	r3, [r7, #0]
 8011934:	4218      	tst	r0, r3
 8011936:	d006      	beq.n	8011946 <xQueueSemaphoreTake+0x186>
 8011938:	f7f3 fc96 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 801193c:	f7f3 fbf6 	bl	800512c <prvTraceGetTaskNumberLow16>
 8011940:	b2c0      	uxtb	r0, r0
 8011942:	f7f3 ffc7 	bl	80058d4 <prvTraceSetTaskInstanceFinished>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011946:	6823      	ldr	r3, [r4, #0]
 8011948:	b93b      	cbnz	r3, 801195a <xQueueSemaphoreTake+0x19a>
						taskENTER_CRITICAL();
 801194a:	f001 fc2b 	bl	80131a4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801194e:	68a0      	ldr	r0, [r4, #8]
 8011950:	f001 f84e 	bl	80129f0 <xTaskPriorityInherit>
 8011954:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8011956:	f001 fc47 	bl	80131e8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801195a:	9901      	ldr	r1, [sp, #4]
 801195c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011960:	f000 ff1e 	bl	80127a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011964:	4620      	mov	r0, r4
 8011966:	f7ff f914 	bl	8010b92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801196a:	f000 fd89 	bl	8012480 <xTaskResumeAll>
 801196e:	b938      	cbnz	r0, 8011980 <xQueueSemaphoreTake+0x1c0>
					portYIELD_WITHIN_API();
 8011970:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011974:	f8c8 3000 	str.w	r3, [r8]
 8011978:	f3bf 8f4f 	dsb	sy
 801197c:	f3bf 8f6f 	isb	sy
 8011980:	f04f 0901 	mov.w	r9, #1
		taskENTER_CRITICAL();
 8011984:	f001 fc0e 	bl	80131a4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011988:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801198a:	2e00      	cmp	r6, #0
 801198c:	f43f af48 	beq.w	8011820 <xQueueSemaphoreTake+0x60>
				traceQUEUE_RECEIVE( pxQueue );
 8011990:	4d4c      	ldr	r5, [pc, #304]	; (8011ac4 <xQueueSemaphoreTake+0x304>)
 8011992:	f7f3 fc69 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8011996:	f7f3 fbce 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 801199a:	4f4b      	ldr	r7, [pc, #300]	; (8011ac8 <xQueueSemaphoreTake+0x308>)
 801199c:	882b      	ldrh	r3, [r5, #0]
 801199e:	4218      	tst	r0, r3
 80119a0:	d018      	beq.n	80119d4 <xQueueSemaphoreTake+0x214>
 80119a2:	4620      	mov	r0, r4
 80119a4:	f7f3 fbec 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 80119a8:	882b      	ldrh	r3, [r5, #0]
 80119aa:	4218      	tst	r0, r3
 80119ac:	d012      	beq.n	80119d4 <xQueueSemaphoreTake+0x214>
 80119ae:	4620      	mov	r0, r4
 80119b0:	f7f3 fbba 	bl	8005128 <prvTraceGetQueueType>
 80119b4:	5c3d      	ldrb	r5, [r7, r0]
 80119b6:	4620      	mov	r0, r4
 80119b8:	3528      	adds	r5, #40	; 0x28
 80119ba:	f7f3 fbb5 	bl	8005128 <prvTraceGetQueueType>
 80119be:	f817 8000 	ldrb.w	r8, [r7, r0]
 80119c2:	4620      	mov	r0, r4
 80119c4:	b2ed      	uxtb	r5, r5
 80119c6:	f7f3 fbd6 	bl	8005176 <prvTraceGetQueueNumberLow16>
 80119ca:	4641      	mov	r1, r8
 80119cc:	b2c2      	uxtb	r2, r0
 80119ce:	4628      	mov	r0, r5
 80119d0:	f7f4 fa48 	bl	8005e64 <prvTraceStoreKernelCall>
 80119d4:	4620      	mov	r0, r4
 80119d6:	f7f3 fba7 	bl	8005128 <prvTraceGetQueueType>
 80119da:	5c3d      	ldrb	r5, [r7, r0]
 80119dc:	4620      	mov	r0, r4
 80119de:	f7f3 fbca 	bl	8005176 <prvTraceGetQueueNumberLow16>
 80119e2:	fa5f f880 	uxtb.w	r8, r0
 80119e6:	4620      	mov	r0, r4
 80119e8:	f7f3 fb9e 	bl	8005128 <prvTraceGetQueueType>
 80119ec:	5c3b      	ldrb	r3, [r7, r0]
 80119ee:	2b02      	cmp	r3, #2
 80119f0:	f47f af12 	bne.w	8011818 <xQueueSemaphoreTake+0x58>
 80119f4:	f7f3 fc38 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 80119f8:	f7f3 fb98 	bl	800512c <prvTraceGetTaskNumberLow16>
 80119fc:	b2c2      	uxtb	r2, r0
 80119fe:	4641      	mov	r1, r8
 8011a00:	4628      	mov	r0, r5
 8011a02:	f7f3 ff41 	bl	8005888 <prvTraceSetObjectState>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011a06:	3e01      	subs	r6, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011a08:	6823      	ldr	r3, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011a0a:	63a6      	str	r6, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011a0c:	b913      	cbnz	r3, 8011a14 <xQueueSemaphoreTake+0x254>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011a0e:	f001 f955 	bl	8012cbc <pvTaskIncrementMutexHeldCount>
 8011a12:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a14:	6923      	ldr	r3, [r4, #16]
 8011a16:	b163      	cbz	r3, 8011a32 <xQueueSemaphoreTake+0x272>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a18:	f104 0010 	add.w	r0, r4, #16
 8011a1c:	f000 ff1e 	bl	801285c <xTaskRemoveFromEventList>
 8011a20:	b138      	cbz	r0, 8011a32 <xQueueSemaphoreTake+0x272>
						queueYIELD_IF_USING_PREEMPTION();
 8011a22:	4b2a      	ldr	r3, [pc, #168]	; (8011acc <xQueueSemaphoreTake+0x30c>)
 8011a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a28:	601a      	str	r2, [r3, #0]
 8011a2a:	f3bf 8f4f 	dsb	sy
 8011a2e:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8011a32:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8011a34:	f001 fbd8 	bl	80131e8 <vPortExitCritical>
}
 8011a38:	4628      	mov	r0, r5
 8011a3a:	b004      	add	sp, #16
 8011a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8011a40:	4620      	mov	r0, r4
 8011a42:	f7ff f8a6 	bl	8010b92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011a46:	f000 fd1b 	bl	8012480 <xTaskResumeAll>
 8011a4a:	e799      	b.n	8011980 <xQueueSemaphoreTake+0x1c0>
			prvUnlockQueue( pxQueue );
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	f7ff f8a0 	bl	8010b92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011a52:	f000 fd15 	bl	8012480 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011a56:	4620      	mov	r0, r4
 8011a58:	f7ff f848 	bl	8010aec <prvIsQueueEmpty>
 8011a5c:	2800      	cmp	r0, #0
 8011a5e:	d08f      	beq.n	8011980 <xQueueSemaphoreTake+0x1c0>
					if( xInheritanceOccurred != pdFALSE )
 8011a60:	b165      	cbz	r5, 8011a7c <xQueueSemaphoreTake+0x2bc>
						taskENTER_CRITICAL();
 8011a62:	f001 fb9f 	bl	80131a4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011a66:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011a68:	b119      	cbz	r1, 8011a72 <xQueueSemaphoreTake+0x2b2>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011a6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011a6c:	6819      	ldr	r1, [r3, #0]
 8011a6e:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011a72:	68a0      	ldr	r0, [r4, #8]
 8011a74:	f001 f8a4 	bl	8012bc0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8011a78:	f001 fbb6 	bl	80131e8 <vPortExitCritical>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8011a7c:	4d11      	ldr	r5, [pc, #68]	; (8011ac4 <xQueueSemaphoreTake+0x304>)
 8011a7e:	f7f3 fbf3 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8011a82:	f7f3 fb58 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8011a86:	882b      	ldrh	r3, [r5, #0]
 8011a88:	4218      	tst	r0, r3
 8011a8a:	f43f aedf 	beq.w	801184c <xQueueSemaphoreTake+0x8c>
 8011a8e:	4620      	mov	r0, r4
 8011a90:	f7f3 fb76 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 8011a94:	882b      	ldrh	r3, [r5, #0]
 8011a96:	4218      	tst	r0, r3
 8011a98:	f43f aed8 	beq.w	801184c <xQueueSemaphoreTake+0x8c>
 8011a9c:	4e0a      	ldr	r6, [pc, #40]	; (8011ac8 <xQueueSemaphoreTake+0x308>)
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	f7f3 fb42 	bl	8005128 <prvTraceGetQueueType>
 8011aa4:	5c35      	ldrb	r5, [r6, r0]
 8011aa6:	4620      	mov	r0, r4
 8011aa8:	f7f3 fb3e 	bl	8005128 <prvTraceGetQueueType>
 8011aac:	5c36      	ldrb	r6, [r6, r0]
 8011aae:	3550      	adds	r5, #80	; 0x50
 8011ab0:	4620      	mov	r0, r4
 8011ab2:	f7f3 fb60 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8011ab6:	4631      	mov	r1, r6
 8011ab8:	b2ed      	uxtb	r5, r5
 8011aba:	b2c2      	uxtb	r2, r0
 8011abc:	4628      	mov	r0, r5
 8011abe:	f7f4 f9d1 	bl	8005e64 <prvTraceStoreKernelCall>
 8011ac2:	e6c3      	b.n	801184c <xQueueSemaphoreTake+0x8c>
 8011ac4:	24000010 	.word	0x24000010
 8011ac8:	24000008 	.word	0x24000008
 8011acc:	e000ed04 	.word	0xe000ed04

08011ad0 <xQueueTakeMutexRecursive>:
	{
 8011ad0:	b570      	push	{r4, r5, r6, lr}
 8011ad2:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 8011ad4:	4604      	mov	r4, r0
 8011ad6:	b940      	cbnz	r0, 8011aea <xQueueTakeMutexRecursive+0x1a>
 8011ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011adc:	f383 8811 	msr	BASEPRI, r3
 8011ae0:	f3bf 8f6f 	isb	sy
 8011ae4:	f3bf 8f4f 	dsb	sy
 8011ae8:	e7fe      	b.n	8011ae8 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011aea:	6886      	ldr	r6, [r0, #8]
 8011aec:	f000 ff6a 	bl	80129c4 <xTaskGetCurrentTaskHandle>
 8011af0:	4286      	cmp	r6, r0
 8011af2:	d104      	bne.n	8011afe <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011af4:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8011af6:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011af8:	3301      	adds	r3, #1
 8011afa:	60e3      	str	r3, [r4, #12]
	}
 8011afc:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8011afe:	4629      	mov	r1, r5
 8011b00:	4620      	mov	r0, r4
 8011b02:	f7ff fe5d 	bl	80117c0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8011b06:	2800      	cmp	r0, #0
 8011b08:	d0f8      	beq.n	8011afc <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011b0a:	68e3      	ldr	r3, [r4, #12]
 8011b0c:	3301      	adds	r3, #1
 8011b0e:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8011b10:	e7f4      	b.n	8011afc <xQueueTakeMutexRecursive+0x2c>
	...

08011b14 <xQueueReceiveFromISR>:
{
 8011b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b18:	468b      	mov	fp, r1
 8011b1a:	4692      	mov	sl, r2
	configASSERT( pxQueue );
 8011b1c:	4604      	mov	r4, r0
 8011b1e:	b940      	cbnz	r0, 8011b32 <xQueueReceiveFromISR+0x1e>
 8011b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b24:	f383 8811 	msr	BASEPRI, r3
 8011b28:	f3bf 8f6f 	isb	sy
 8011b2c:	f3bf 8f4f 	dsb	sy
 8011b30:	e7fe      	b.n	8011b30 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011b32:	b951      	cbnz	r1, 8011b4a <xQueueReceiveFromISR+0x36>
 8011b34:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8011b36:	b143      	cbz	r3, 8011b4a <xQueueReceiveFromISR+0x36>
 8011b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b3c:	f383 8811 	msr	BASEPRI, r3
 8011b40:	f3bf 8f6f 	isb	sy
 8011b44:	f3bf 8f4f 	dsb	sy
 8011b48:	e7fe      	b.n	8011b48 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011b4a:	f001 fc47 	bl	80133dc <vPortValidateInterruptPriority>
	__asm volatile
 8011b4e:	f3ef 8611 	mrs	r6, BASEPRI
 8011b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b56:	f383 8811 	msr	BASEPRI, r3
 8011b5a:	f3bf 8f6f 	isb	sy
 8011b5e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b62:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8011b64:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8011c54 <xQueueReceiveFromISR+0x140>
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011b68:	2f00      	cmp	r7, #0
 8011b6a:	d053      	beq.n	8011c14 <xQueueReceiveFromISR+0x100>
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8011b6c:	4620      	mov	r0, r4
			const int8_t cRxLock = pxQueue->cRxLock;
 8011b6e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8011b72:	f7f3 fb05 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 8011b76:	f8b8 3000 	ldrh.w	r3, [r8]
			const int8_t cRxLock = pxQueue->cRxLock;
 8011b7a:	b26d      	sxtb	r5, r5
 8011b7c:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8011c58 <xQueueReceiveFromISR+0x144>
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8011b80:	4218      	tst	r0, r3
 8011b82:	d016      	beq.n	8011bb2 <xQueueReceiveFromISR+0x9e>
 8011b84:	4620      	mov	r0, r4
 8011b86:	f7f3 facf 	bl	8005128 <prvTraceGetQueueType>
 8011b8a:	f819 8000 	ldrb.w	r8, [r9, r0]
 8011b8e:	4620      	mov	r0, r4
 8011b90:	f108 0838 	add.w	r8, r8, #56	; 0x38
 8011b94:	f7f3 fac8 	bl	8005128 <prvTraceGetQueueType>
 8011b98:	f819 1000 	ldrb.w	r1, [r9, r0]
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	fa5f f888 	uxtb.w	r8, r8
 8011ba2:	9101      	str	r1, [sp, #4]
 8011ba4:	f7f3 fae7 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8011ba8:	9901      	ldr	r1, [sp, #4]
 8011baa:	b2c2      	uxtb	r2, r0
 8011bac:	4640      	mov	r0, r8
 8011bae:	f7f4 f959 	bl	8005e64 <prvTraceStoreKernelCall>
 8011bb2:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011bb4:	3f01      	subs	r7, #1
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8011bb6:	f7f3 fab7 	bl	8005128 <prvTraceGetQueueType>
 8011bba:	f819 8000 	ldrb.w	r8, [r9, r0]
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	f7f3 fad9 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8011bc4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011bc6:	b2c1      	uxtb	r1, r0
 8011bc8:	4640      	mov	r0, r8
 8011bca:	3a01      	subs	r2, #1
 8011bcc:	b2d2      	uxtb	r2, r2
 8011bce:	f7f3 fe5b 	bl	8005888 <prvTraceSetObjectState>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011bd2:	4659      	mov	r1, fp
 8011bd4:	4620      	mov	r0, r4
 8011bd6:	f7fe ffc7 	bl	8010b68 <prvCopyDataFromQueue>
			if( cRxLock == queueUNLOCKED )
 8011bda:	1c6b      	adds	r3, r5, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011bdc:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8011bde:	d114      	bne.n	8011c0a <xQueueReceiveFromISR+0xf6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011be0:	6923      	ldr	r3, [r4, #16]
 8011be2:	b90b      	cbnz	r3, 8011be8 <xQueueReceiveFromISR+0xd4>
			xReturn = pdPASS;
 8011be4:	2001      	movs	r0, #1
 8011be6:	e00b      	b.n	8011c00 <xQueueReceiveFromISR+0xec>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011be8:	f104 0010 	add.w	r0, r4, #16
 8011bec:	f000 fe36 	bl	801285c <xTaskRemoveFromEventList>
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	d0f7      	beq.n	8011be4 <xQueueReceiveFromISR+0xd0>
						if( pxHigherPriorityTaskWoken != NULL )
 8011bf4:	f1ba 0f00 	cmp.w	sl, #0
 8011bf8:	d0f4      	beq.n	8011be4 <xQueueReceiveFromISR+0xd0>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011bfa:	2001      	movs	r0, #1
 8011bfc:	f8ca 0000 	str.w	r0, [sl]
	__asm volatile
 8011c00:	f386 8811 	msr	BASEPRI, r6
}
 8011c04:	b003      	add	sp, #12
 8011c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011c0a:	3501      	adds	r5, #1
 8011c0c:	b26d      	sxtb	r5, r5
 8011c0e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
 8011c12:	e7e7      	b.n	8011be4 <xQueueReceiveFromISR+0xd0>
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8011c14:	4620      	mov	r0, r4
 8011c16:	f7f3 fab3 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 8011c1a:	f8b8 3000 	ldrh.w	r3, [r8]
 8011c1e:	4018      	ands	r0, r3
 8011c20:	d0ee      	beq.n	8011c00 <xQueueReceiveFromISR+0xec>
 8011c22:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8011c58 <xQueueReceiveFromISR+0x144>
 8011c26:	4620      	mov	r0, r4
 8011c28:	f7f3 fa7e 	bl	8005128 <prvTraceGetQueueType>
 8011c2c:	f818 5000 	ldrb.w	r5, [r8, r0]
 8011c30:	4620      	mov	r0, r4
 8011c32:	f7f3 fa79 	bl	8005128 <prvTraceGetQueueType>
 8011c36:	f818 8000 	ldrb.w	r8, [r8, r0]
 8011c3a:	3560      	adds	r5, #96	; 0x60
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	f7f3 fa9a 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8011c42:	4641      	mov	r1, r8
 8011c44:	b2ed      	uxtb	r5, r5
 8011c46:	b2c2      	uxtb	r2, r0
 8011c48:	4628      	mov	r0, r5
 8011c4a:	f7f4 f90b 	bl	8005e64 <prvTraceStoreKernelCall>
			xReturn = pdFAIL;
 8011c4e:	4638      	mov	r0, r7
 8011c50:	e7d6      	b.n	8011c00 <xQueueReceiveFromISR+0xec>
 8011c52:	bf00      	nop
 8011c54:	24000010 	.word	0x24000010
 8011c58:	24000008 	.word	0x24000008

08011c5c <uxQueueGetQueueNumber>:
	}
 8011c5c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8011c5e:	4770      	bx	lr

08011c60 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8011c60:	6481      	str	r1, [r0, #72]	; 0x48
	}
 8011c62:	4770      	bx	lr

08011c64 <ucQueueGetQueueType>:
	}
 8011c64:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
 8011c68:	4770      	bx	lr
	...

08011c6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011c6c:	b570      	push	{r4, r5, r6, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011c6e:	2300      	movs	r3, #0
	{
 8011c70:	4604      	mov	r4, r0
 8011c72:	460d      	mov	r5, r1
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011c74:	480d      	ldr	r0, [pc, #52]	; (8011cac <vQueueAddToRegistry+0x40>)
 8011c76:	f850 1033 	ldr.w	r1, [r0, r3, lsl #3]
 8011c7a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8011c7e:	b989      	cbnz	r1, 8011ca4 <vQueueAddToRegistry+0x38>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011c80:	f840 5033 	str.w	r5, [r0, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8011c84:	4620      	mov	r0, r4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011c86:	6054      	str	r4, [r2, #4]
				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8011c88:	f7f3 fa4e 	bl	8005128 <prvTraceGetQueueType>
 8011c8c:	4b08      	ldr	r3, [pc, #32]	; (8011cb0 <vQueueAddToRegistry+0x44>)
 8011c8e:	5c1e      	ldrb	r6, [r3, r0]
 8011c90:	4620      	mov	r0, r4
 8011c92:	f7f3 fa70 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8011c96:	462a      	mov	r2, r5
 8011c98:	b2c1      	uxtb	r1, r0
 8011c9a:	4630      	mov	r0, r6
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8011ca0:	f7f3 beba 	b.w	8005a18 <prvTraceSetObjectName>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	2b08      	cmp	r3, #8
 8011ca8:	d1e5      	bne.n	8011c76 <vQueueAddToRegistry+0xa>
	}
 8011caa:	bd70      	pop	{r4, r5, r6, pc}
 8011cac:	24020e60 	.word	0x24020e60
 8011cb0:	24000008 	.word	0x24000008

08011cb4 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011cb4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011cb6:	4a08      	ldr	r2, [pc, #32]	; (8011cd8 <vQueueUnregisterQueue+0x24>)
	{
 8011cb8:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011cba:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011cbe:	684c      	ldr	r4, [r1, #4]
 8011cc0:	4284      	cmp	r4, r0
 8011cc2:	d104      	bne.n	8011cce <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011cc4:	2000      	movs	r0, #0
 8011cc6:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011cca:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011ccc:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011cce:	3301      	adds	r3, #1
 8011cd0:	2b08      	cmp	r3, #8
 8011cd2:	d1f2      	bne.n	8011cba <vQueueUnregisterQueue+0x6>
 8011cd4:	e7fa      	b.n	8011ccc <vQueueUnregisterQueue+0x18>
 8011cd6:	bf00      	nop
 8011cd8:	24020e60 	.word	0x24020e60

08011cdc <vQueueDelete>:
{
 8011cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( pxQueue );
 8011ce0:	4604      	mov	r4, r0
 8011ce2:	b940      	cbnz	r0, 8011cf6 <vQueueDelete+0x1a>
	__asm volatile
 8011ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ce8:	f383 8811 	msr	BASEPRI, r3
 8011cec:	f3bf 8f6f 	isb	sy
 8011cf0:	f3bf 8f4f 	dsb	sy
 8011cf4:	e7fe      	b.n	8011cf4 <vQueueDelete+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011cf6:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011cfa:	2301      	movs	r3, #1
 8011cfc:	f383 8810 	msr	PRIMASK, r3
	traceQUEUE_DELETE( pxQueue );
 8011d00:	4e30      	ldr	r6, [pc, #192]	; (8011dc4 <vQueueDelete+0xe8>)
 8011d02:	f7f3 fab1 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8011d06:	f7f3 fa16 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8011d0a:	4d2f      	ldr	r5, [pc, #188]	; (8011dc8 <vQueueDelete+0xec>)
 8011d0c:	8833      	ldrh	r3, [r6, #0]
 8011d0e:	4218      	tst	r0, r3
 8011d10:	d018      	beq.n	8011d44 <vQueueDelete+0x68>
 8011d12:	4620      	mov	r0, r4
 8011d14:	f7f3 fa34 	bl	8005180 <prvTraceGetQueueNumberHigh16>
 8011d18:	8833      	ldrh	r3, [r6, #0]
 8011d1a:	4218      	tst	r0, r3
 8011d1c:	d012      	beq.n	8011d44 <vQueueDelete+0x68>
 8011d1e:	4620      	mov	r0, r4
 8011d20:	f7f3 fa02 	bl	8005128 <prvTraceGetQueueType>
 8011d24:	5c2e      	ldrb	r6, [r5, r0]
 8011d26:	4620      	mov	r0, r4
 8011d28:	f7f3 f9fe 	bl	8005128 <prvTraceGetQueueType>
 8011d2c:	f086 0680 	eor.w	r6, r6, #128	; 0x80
 8011d30:	f815 8000 	ldrb.w	r8, [r5, r0]
 8011d34:	4620      	mov	r0, r4
 8011d36:	f7f3 fa1e 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8011d3a:	4641      	mov	r1, r8
 8011d3c:	b2c2      	uxtb	r2, r0
 8011d3e:	4630      	mov	r0, r6
 8011d40:	f7f4 f890 	bl	8005e64 <prvTraceStoreKernelCall>
 8011d44:	4620      	mov	r0, r4
 8011d46:	f7f3 f9ef 	bl	8005128 <prvTraceGetQueueType>
 8011d4a:	5c2e      	ldrb	r6, [r5, r0]
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	3608      	adds	r6, #8
 8011d50:	f7f3 fa11 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8011d54:	4680      	mov	r8, r0
 8011d56:	4620      	mov	r0, r4
 8011d58:	b2f6      	uxtb	r6, r6
 8011d5a:	f7f3 f9e5 	bl	8005128 <prvTraceGetQueueType>
 8011d5e:	5c2a      	ldrb	r2, [r5, r0]
 8011d60:	fa5f f188 	uxtb.w	r1, r8
 8011d64:	4630      	mov	r0, r6
 8011d66:	f7f3 fccf 	bl	8005708 <prvTraceStoreObjectNameOnCloseEvent>
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f7f3 f9dc 	bl	8005128 <prvTraceGetQueueType>
 8011d70:	5c2e      	ldrb	r6, [r5, r0]
 8011d72:	4620      	mov	r0, r4
 8011d74:	3610      	adds	r6, #16
 8011d76:	f7f3 f9fe 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8011d7a:	4680      	mov	r8, r0
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	b2f6      	uxtb	r6, r6
 8011d80:	f7f3 f9d2 	bl	8005128 <prvTraceGetQueueType>
 8011d84:	5c2a      	ldrb	r2, [r5, r0]
 8011d86:	fa5f f188 	uxtb.w	r1, r8
 8011d8a:	4630      	mov	r0, r6
 8011d8c:	f7f3 fcec 	bl	8005768 <prvTraceStoreObjectPropertiesOnCloseEvent>
 8011d90:	4620      	mov	r0, r4
 8011d92:	f7f3 f9c9 	bl	8005128 <prvTraceGetQueueType>
 8011d96:	5c2d      	ldrb	r5, [r5, r0]
 8011d98:	4620      	mov	r0, r4
 8011d9a:	f7f3 f9ec 	bl	8005176 <prvTraceGetQueueNumberLow16>
 8011d9e:	b2c1      	uxtb	r1, r0
 8011da0:	4628      	mov	r0, r5
 8011da2:	f7f3 fe09 	bl	80059b8 <prvTraceFreeObjectHandle>
 8011da6:	f387 8810 	msr	PRIMASK, r7
		vQueueUnregisterQueue( pxQueue );
 8011daa:	4620      	mov	r0, r4
 8011dac:	f7ff ff82 	bl	8011cb4 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011db0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011db4:	b923      	cbnz	r3, 8011dc0 <vQueueDelete+0xe4>
			vPortFree( pxQueue );
 8011db6:	4620      	mov	r0, r4
}
 8011db8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			vPortFree( pxQueue );
 8011dbc:	f001 bbfa 	b.w	80135b4 <vPortFree>
}
 8011dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dc4:	24000010 	.word	0x24000010
 8011dc8:	24000008 	.word	0x24000008

08011dcc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011dcc:	b570      	push	{r4, r5, r6, lr}
 8011dce:	4604      	mov	r4, r0
 8011dd0:	460d      	mov	r5, r1
 8011dd2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011dd4:	f001 f9e6 	bl	80131a4 <vPortEnterCritical>
 8011dd8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011ddc:	2bff      	cmp	r3, #255	; 0xff
 8011dde:	d102      	bne.n	8011de6 <vQueueWaitForMessageRestricted+0x1a>
 8011de0:	2300      	movs	r3, #0
 8011de2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011de6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011dea:	2bff      	cmp	r3, #255	; 0xff
 8011dec:	d102      	bne.n	8011df4 <vQueueWaitForMessageRestricted+0x28>
 8011dee:	2300      	movs	r3, #0
 8011df0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011df4:	f001 f9f8 	bl	80131e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011df8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011dfa:	b92b      	cbnz	r3, 8011e08 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011dfc:	4632      	mov	r2, r6
 8011dfe:	4629      	mov	r1, r5
 8011e00:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011e04:	f000 fce6 	bl	80127d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011e08:	4620      	mov	r0, r4
	}
 8011e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8011e0e:	f7fe bec0 	b.w	8010b92 <prvUnlockQueue>
	...

08011e14 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e18:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011e1a:	f001 f9c3 	bl	80131a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011e1e:	4b50      	ldr	r3, [pc, #320]	; (8011f60 <prvAddNewTaskToReadyList+0x14c>)
		if( pxCurrentTCB == NULL )
 8011e20:	4d50      	ldr	r5, [pc, #320]	; (8011f64 <prvAddNewTaskToReadyList+0x150>)
		uxCurrentNumberOfTasks++;
 8011e22:	681a      	ldr	r2, [r3, #0]
 8011e24:	4f50      	ldr	r7, [pc, #320]	; (8011f68 <prvAddNewTaskToReadyList+0x154>)
 8011e26:	3201      	adds	r2, #1
 8011e28:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8011e2a:	682e      	ldr	r6, [r5, #0]
 8011e2c:	2e00      	cmp	r6, #0
 8011e2e:	f040 808c 	bne.w	8011f4a <prvAddNewTaskToReadyList+0x136>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011e32:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	d11f      	bne.n	8011e7a <prvAddNewTaskToReadyList+0x66>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011e3a:	f04f 0814 	mov.w	r8, #20
 8011e3e:	fb08 7006 	mla	r0, r8, r6, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e42:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011e44:	f7fe fe10 	bl	8010a68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e48:	2e38      	cmp	r6, #56	; 0x38
 8011e4a:	d1f8      	bne.n	8011e3e <prvAddNewTaskToReadyList+0x2a>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011e4c:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8011f9c <prvAddNewTaskToReadyList+0x188>
	vListInitialise( &xDelayedTaskList2 );
 8011e50:	4e46      	ldr	r6, [pc, #280]	; (8011f6c <prvAddNewTaskToReadyList+0x158>)
	vListInitialise( &xDelayedTaskList1 );
 8011e52:	4640      	mov	r0, r8
 8011e54:	f7fe fe08 	bl	8010a68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011e58:	4630      	mov	r0, r6
 8011e5a:	f7fe fe05 	bl	8010a68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011e5e:	4844      	ldr	r0, [pc, #272]	; (8011f70 <prvAddNewTaskToReadyList+0x15c>)
 8011e60:	f7fe fe02 	bl	8010a68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011e64:	4843      	ldr	r0, [pc, #268]	; (8011f74 <prvAddNewTaskToReadyList+0x160>)
 8011e66:	f7fe fdff 	bl	8010a68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011e6a:	4843      	ldr	r0, [pc, #268]	; (8011f78 <prvAddNewTaskToReadyList+0x164>)
 8011e6c:	f7fe fdfc 	bl	8010a68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011e70:	4b42      	ldr	r3, [pc, #264]	; (8011f7c <prvAddNewTaskToReadyList+0x168>)
 8011e72:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011e76:	4b42      	ldr	r3, [pc, #264]	; (8011f80 <prvAddNewTaskToReadyList+0x16c>)
 8011e78:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8011e7a:	4a42      	ldr	r2, [pc, #264]	; (8011f84 <prvAddNewTaskToReadyList+0x170>)
		traceTASK_CREATE( pxNewTCB );
 8011e7c:	2003      	movs	r0, #3
 8011e7e:	4e42      	ldr	r6, [pc, #264]	; (8011f88 <prvAddNewTaskToReadyList+0x174>)
		uxTaskNumber++;
 8011e80:	6813      	ldr	r3, [r2, #0]
 8011e82:	3301      	adds	r3, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011e84:	64a3      	str	r3, [r4, #72]	; 0x48
		uxTaskNumber++;
 8011e86:	6013      	str	r3, [r2, #0]
		traceTASK_CREATE( pxNewTCB );
 8011e88:	f7f3 fd40 	bl	800590c <prvTraceGetObjectHandle>
 8011e8c:	b281      	uxth	r1, r0
 8011e8e:	4620      	mov	r0, r4
 8011e90:	f7f3 f956 	bl	8005140 <prvTraceSetTaskNumberLow16>
 8011e94:	4b3d      	ldr	r3, [pc, #244]	; (8011f8c <prvAddNewTaskToReadyList+0x178>)
 8011e96:	4620      	mov	r0, r4
 8011e98:	8819      	ldrh	r1, [r3, #0]
 8011e9a:	f7f3 f95f 	bl	800515c <prvTraceSetTaskNumberHigh16>
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	f7f3 f944 	bl	800512c <prvTraceGetTaskNumberLow16>
 8011ea4:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8011ea8:	b2c1      	uxtb	r1, r0
 8011eaa:	2003      	movs	r0, #3
 8011eac:	f7f3 fdb4 	bl	8005a18 <prvTraceSetObjectName>
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	f7f3 f93b 	bl	800512c <prvTraceGetTaskNumberLow16>
 8011eb6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8011eba:	b2c1      	uxtb	r1, r0
 8011ebc:	2003      	movs	r0, #3
 8011ebe:	f7f3 fc97 	bl	80057f0 <prvTraceSetPriorityProperty>
 8011ec2:	f7f3 f9d1 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8011ec6:	f7f3 f936 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8011eca:	8833      	ldrh	r3, [r6, #0]
 8011ecc:	4218      	tst	r0, r3
 8011ece:	d00d      	beq.n	8011eec <prvAddNewTaskToReadyList+0xd8>
 8011ed0:	4620      	mov	r0, r4
 8011ed2:	f7f3 f930 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8011ed6:	8833      	ldrh	r3, [r6, #0]
 8011ed8:	4218      	tst	r0, r3
 8011eda:	d007      	beq.n	8011eec <prvAddNewTaskToReadyList+0xd8>
 8011edc:	4620      	mov	r0, r4
 8011ede:	f7f3 f925 	bl	800512c <prvTraceGetTaskNumberLow16>
 8011ee2:	2103      	movs	r1, #3
 8011ee4:	b2c2      	uxtb	r2, r0
 8011ee6:	201b      	movs	r0, #27
 8011ee8:	f7f3 ffbc 	bl	8005e64 <prvTraceStoreKernelCall>
 8011eec:	4620      	mov	r0, r4
 8011eee:	f7f3 f967 	bl	80051c0 <prvAddTaskToStackMonitor>
		prvAddTaskToReadyList( pxNewTCB );
 8011ef2:	4620      	mov	r0, r4
 8011ef4:	f7f3 f91f 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8011ef8:	8833      	ldrh	r3, [r6, #0]
 8011efa:	4218      	tst	r0, r3
 8011efc:	d005      	beq.n	8011f0a <prvAddNewTaskToReadyList+0xf6>
 8011efe:	4620      	mov	r0, r4
 8011f00:	f7f3 f914 	bl	800512c <prvTraceGetTaskNumberLow16>
 8011f04:	b2c0      	uxtb	r0, r0
 8011f06:	f7f3 ff13 	bl	8005d30 <prvTraceStoreTaskReady>
 8011f0a:	4a21      	ldr	r2, [pc, #132]	; (8011f90 <prvAddNewTaskToReadyList+0x17c>)
 8011f0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011f0e:	6811      	ldr	r1, [r2, #0]
 8011f10:	428b      	cmp	r3, r1
 8011f12:	d900      	bls.n	8011f16 <prvAddNewTaskToReadyList+0x102>
 8011f14:	6013      	str	r3, [r2, #0]
 8011f16:	2014      	movs	r0, #20
 8011f18:	1d21      	adds	r1, r4, #4
 8011f1a:	fb00 7003 	mla	r0, r0, r3, r7
 8011f1e:	f7fe fdb1 	bl	8010a84 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8011f22:	f001 f961 	bl	80131e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8011f26:	4b1b      	ldr	r3, [pc, #108]	; (8011f94 <prvAddNewTaskToReadyList+0x180>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	b163      	cbz	r3, 8011f46 <prvAddNewTaskToReadyList+0x132>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011f2c:	682b      	ldr	r3, [r5, #0]
 8011f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d207      	bcs.n	8011f46 <prvAddNewTaskToReadyList+0x132>
			taskYIELD_IF_USING_PREEMPTION();
 8011f36:	4b18      	ldr	r3, [pc, #96]	; (8011f98 <prvAddNewTaskToReadyList+0x184>)
 8011f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f3c:	601a      	str	r2, [r3, #0]
 8011f3e:	f3bf 8f4f 	dsb	sy
 8011f42:	f3bf 8f6f 	isb	sy
}
 8011f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8011f4a:	4b12      	ldr	r3, [pc, #72]	; (8011f94 <prvAddNewTaskToReadyList+0x180>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d193      	bne.n	8011e7a <prvAddNewTaskToReadyList+0x66>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011f52:	682b      	ldr	r3, [r5, #0]
 8011f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	d88e      	bhi.n	8011e7a <prvAddNewTaskToReadyList+0x66>
					pxCurrentTCB = pxNewTCB;
 8011f5c:	602c      	str	r4, [r5, #0]
 8011f5e:	e78c      	b.n	8011e7a <prvAddNewTaskToReadyList+0x66>
 8011f60:	2400143c 	.word	0x2400143c
 8011f64:	24000fd0 	.word	0x24000fd0
 8011f68:	24000fdc 	.word	0x24000fdc
 8011f6c:	24001468 	.word	0x24001468
 8011f70:	24001484 	.word	0x24001484
 8011f74:	240014b0 	.word	0x240014b0
 8011f78:	2400149c 	.word	0x2400149c
 8011f7c:	24000fd4 	.word	0x24000fd4
 8011f80:	24000fd8 	.word	0x24000fd8
 8011f84:	2400144c 	.word	0x2400144c
 8011f88:	24000010 	.word	0x24000010
 8011f8c:	2400000e 	.word	0x2400000e
 8011f90:	24001450 	.word	0x24001450
 8011f94:	24001498 	.word	0x24001498
 8011f98:	e000ed04 	.word	0xe000ed04
 8011f9c:	24001454 	.word	0x24001454

08011fa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011fa0:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011fa2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 8011fa6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011fa8:	b93b      	cbnz	r3, 8011fba <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011faa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011fac:	f001 fb02 	bl	80135b4 <vPortFree>
				vPortFree( pxTCB );
 8011fb0:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8011fb6:	f001 bafd 	b.w	80135b4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011fba:	2b01      	cmp	r3, #1
 8011fbc:	d0f9      	beq.n	8011fb2 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011fbe:	2b02      	cmp	r3, #2
 8011fc0:	d008      	beq.n	8011fd4 <prvDeleteTCB+0x34>
 8011fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fc6:	f383 8811 	msr	BASEPRI, r3
 8011fca:	f3bf 8f6f 	isb	sy
 8011fce:	f3bf 8f4f 	dsb	sy
 8011fd2:	e7fe      	b.n	8011fd2 <prvDeleteTCB+0x32>
	}
 8011fd4:	bd10      	pop	{r4, pc}
	...

08011fd8 <prvIdleTask>:
{
 8011fd8:	b580      	push	{r7, lr}
				taskYIELD();
 8011fda:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8012038 <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fde:	4f12      	ldr	r7, [pc, #72]	; (8012028 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011fe0:	4c12      	ldr	r4, [pc, #72]	; (801202c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8011fe2:	4d13      	ldr	r5, [pc, #76]	; (8012030 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011fe4:	6823      	ldr	r3, [r4, #0]
 8011fe6:	b963      	cbnz	r3, 8012002 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011fe8:	4b12      	ldr	r3, [pc, #72]	; (8012034 <prvIdleTask+0x5c>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	2b01      	cmp	r3, #1
 8011fee:	d9f8      	bls.n	8011fe2 <prvIdleTask+0xa>
				taskYIELD();
 8011ff0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011ff4:	f8c8 3000 	str.w	r3, [r8]
 8011ff8:	f3bf 8f4f 	dsb	sy
 8011ffc:	f3bf 8f6f 	isb	sy
 8012000:	e7ee      	b.n	8011fe0 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8012002:	f001 f8cf 	bl	80131a4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801200a:	1d30      	adds	r0, r6, #4
 801200c:	f7fe fd5d 	bl	8010aca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012010:	682b      	ldr	r3, [r5, #0]
 8012012:	3b01      	subs	r3, #1
 8012014:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012016:	6823      	ldr	r3, [r4, #0]
 8012018:	3b01      	subs	r3, #1
 801201a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 801201c:	f001 f8e4 	bl	80131e8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8012020:	4630      	mov	r0, r6
 8012022:	f7ff ffbd 	bl	8011fa0 <prvDeleteTCB>
 8012026:	e7dd      	b.n	8011fe4 <prvIdleTask+0xc>
 8012028:	240014b0 	.word	0x240014b0
 801202c:	24001440 	.word	0x24001440
 8012030:	2400143c 	.word	0x2400143c
 8012034:	24000fdc 	.word	0x24000fdc
 8012038:	e000ed04 	.word	0xe000ed04

0801203c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801203c:	4a06      	ldr	r2, [pc, #24]	; (8012058 <prvResetNextTaskUnblockTime+0x1c>)
 801203e:	6813      	ldr	r3, [r2, #0]
 8012040:	6819      	ldr	r1, [r3, #0]
 8012042:	4b06      	ldr	r3, [pc, #24]	; (801205c <prvResetNextTaskUnblockTime+0x20>)
 8012044:	b919      	cbnz	r1, 801204e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012046:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801204a:	601a      	str	r2, [r3, #0]
	}
}
 801204c:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801204e:	6812      	ldr	r2, [r2, #0]
 8012050:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012052:	68d2      	ldr	r2, [r2, #12]
 8012054:	6852      	ldr	r2, [r2, #4]
 8012056:	e7f8      	b.n	801204a <prvResetNextTaskUnblockTime+0xe>
 8012058:	24000fd4 	.word	0x24000fd4
 801205c:	2400147c 	.word	0x2400147c

08012060 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8012060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012064:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8012068:	4607      	mov	r7, r0
 801206a:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801206c:	21a5      	movs	r1, #165	; 0xa5
 801206e:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8012070:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012072:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8012076:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801207a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801207c:	f001 fd4f 	bl	8013b1e <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012080:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012082:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012084:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8012088:	b395      	cbz	r5, 80120f0 <prvInitialiseNewTask.isra.2+0x90>
 801208a:	1e6b      	subs	r3, r5, #1
 801208c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8012090:	3513      	adds	r5, #19
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012092:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8012096:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 801209a:	7819      	ldrb	r1, [r3, #0]
 801209c:	b109      	cbz	r1, 80120a2 <prvInitialiseNewTask.isra.2+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801209e:	42ab      	cmp	r3, r5
 80120a0:	d1f7      	bne.n	8012092 <prvInitialiseNewTask.isra.2+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80120a2:	2300      	movs	r3, #0
 80120a4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 80120a8:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80120aa:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80120ae:	1d20      	adds	r0, r4, #4
 80120b0:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80120b2:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
 80120b6:	bf28      	it	cs
 80120b8:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 80120ba:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80120bc:	6525      	str	r5, [r4, #80]	; 0x50
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120be:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80120c2:	f7fe fcdc 	bl	8010a7e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80120c6:	f104 0018 	add.w	r0, r4, #24
 80120ca:	f7fe fcd8 	bl	8010a7e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80120ce:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80120d2:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80120d4:	4642      	mov	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120d6:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80120d8:	4639      	mov	r1, r7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80120da:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80120dc:	4648      	mov	r0, r9
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80120de:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80120e2:	f001 f835 	bl	8013150 <pxPortInitialiseStack>
 80120e6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80120e8:	b106      	cbz	r6, 80120ec <prvInitialiseNewTask.isra.2+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80120ea:	6034      	str	r4, [r6, #0]
}
 80120ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80120f0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80120f4:	e7d8      	b.n	80120a8 <prvInitialiseNewTask.isra.2+0x48>
	...

080120f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80120f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80120fa:	4b16      	ldr	r3, [pc, #88]	; (8012154 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 80120fc:	4605      	mov	r5, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80120fe:	4e16      	ldr	r6, [pc, #88]	; (8012158 <prvAddCurrentTaskToDelayedList+0x60>)
{
 8012100:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8012102:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012104:	6830      	ldr	r0, [r6, #0]
 8012106:	3004      	adds	r0, #4
 8012108:	f7fe fcdf 	bl	8010aca <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801210c:	1c6b      	adds	r3, r5, #1
 801210e:	4633      	mov	r3, r6
 8012110:	d107      	bne.n	8012122 <prvAddCurrentTaskToDelayedList+0x2a>
 8012112:	b137      	cbz	r7, 8012122 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012114:	6831      	ldr	r1, [r6, #0]
 8012116:	4811      	ldr	r0, [pc, #68]	; (801215c <prvAddCurrentTaskToDelayedList+0x64>)
 8012118:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801211a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801211e:	f7fe bcb1 	b.w	8010a84 <vListInsertEnd>
 8012122:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012124:	681a      	ldr	r2, [r3, #0]
 8012126:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8012128:	d307      	bcc.n	801213a <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801212a:	4a0d      	ldr	r2, [pc, #52]	; (8012160 <prvAddCurrentTaskToDelayedList+0x68>)
 801212c:	6810      	ldr	r0, [r2, #0]
 801212e:	6819      	ldr	r1, [r3, #0]
}
 8012130:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012134:	3104      	adds	r1, #4
 8012136:	f7fe bcb1 	b.w	8010a9c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801213a:	4a0a      	ldr	r2, [pc, #40]	; (8012164 <prvAddCurrentTaskToDelayedList+0x6c>)
 801213c:	6810      	ldr	r0, [r2, #0]
 801213e:	6819      	ldr	r1, [r3, #0]
 8012140:	3104      	adds	r1, #4
 8012142:	f7fe fcab 	bl	8010a9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012146:	4b08      	ldr	r3, [pc, #32]	; (8012168 <prvAddCurrentTaskToDelayedList+0x70>)
 8012148:	681a      	ldr	r2, [r3, #0]
 801214a:	42a2      	cmp	r2, r4
 801214c:	d900      	bls.n	8012150 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 801214e:	601c      	str	r4, [r3, #0]
}
 8012150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012152:	bf00      	nop
 8012154:	240014c4 	.word	0x240014c4
 8012158:	24000fd0 	.word	0x24000fd0
 801215c:	2400149c 	.word	0x2400149c
 8012160:	24000fd8 	.word	0x24000fd8
 8012164:	24000fd4 	.word	0x24000fd4
 8012168:	2400147c 	.word	0x2400147c

0801216c <xTaskCreateStatic>:
	{
 801216c:	b570      	push	{r4, r5, r6, lr}
 801216e:	b086      	sub	sp, #24
 8012170:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8012174:	b945      	cbnz	r5, 8012188 <xTaskCreateStatic+0x1c>
 8012176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801217a:	f383 8811 	msr	BASEPRI, r3
 801217e:	f3bf 8f6f 	isb	sy
 8012182:	f3bf 8f4f 	dsb	sy
 8012186:	e7fe      	b.n	8012186 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8012188:	b944      	cbnz	r4, 801219c <xTaskCreateStatic+0x30>
 801218a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801218e:	f383 8811 	msr	BASEPRI, r3
 8012192:	f3bf 8f6f 	isb	sy
 8012196:	f3bf 8f4f 	dsb	sy
 801219a:	e7fe      	b.n	801219a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 801219c:	2660      	movs	r6, #96	; 0x60
 801219e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80121a0:	9e05      	ldr	r6, [sp, #20]
 80121a2:	2e60      	cmp	r6, #96	; 0x60
 80121a4:	d008      	beq.n	80121b8 <xTaskCreateStatic+0x4c>
 80121a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121aa:	f383 8811 	msr	BASEPRI, r3
 80121ae:	f3bf 8f6f 	isb	sy
 80121b2:	f3bf 8f4f 	dsb	sy
 80121b6:	e7fe      	b.n	80121b6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80121b8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80121ba:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80121bc:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80121be:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80121c2:	ad04      	add	r5, sp, #16
 80121c4:	9402      	str	r4, [sp, #8]
 80121c6:	9501      	str	r5, [sp, #4]
 80121c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80121ca:	9500      	str	r5, [sp, #0]
 80121cc:	f7ff ff48 	bl	8012060 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80121d0:	4620      	mov	r0, r4
 80121d2:	f7ff fe1f 	bl	8011e14 <prvAddNewTaskToReadyList>
	}
 80121d6:	9804      	ldr	r0, [sp, #16]
 80121d8:	b006      	add	sp, #24
 80121da:	bd70      	pop	{r4, r5, r6, pc}

080121dc <xTaskCreate>:
	{
 80121dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121e0:	4607      	mov	r7, r0
 80121e2:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80121e4:	0090      	lsls	r0, r2, #2
	{
 80121e6:	4688      	mov	r8, r1
 80121e8:	4616      	mov	r6, r2
 80121ea:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80121ec:	f001 f948 	bl	8013480 <pvPortMalloc>
			if( pxStack != NULL )
 80121f0:	4605      	mov	r5, r0
 80121f2:	b1e8      	cbz	r0, 8012230 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80121f4:	2060      	movs	r0, #96	; 0x60
 80121f6:	f001 f943 	bl	8013480 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80121fa:	4604      	mov	r4, r0
 80121fc:	b1a8      	cbz	r0, 801222a <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80121fe:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8012200:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012202:	4632      	mov	r2, r6
 8012204:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012206:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801220a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801220c:	9002      	str	r0, [sp, #8]
 801220e:	4638      	mov	r0, r7
 8012210:	9301      	str	r3, [sp, #4]
 8012212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012214:	9300      	str	r3, [sp, #0]
 8012216:	464b      	mov	r3, r9
 8012218:	f7ff ff22 	bl	8012060 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 801221c:	4620      	mov	r0, r4
 801221e:	f7ff fdf9 	bl	8011e14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012222:	2001      	movs	r0, #1
	}
 8012224:	b005      	add	sp, #20
 8012226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 801222a:	4628      	mov	r0, r5
 801222c:	f001 f9c2 	bl	80135b4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012230:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8012234:	e7f6      	b.n	8012224 <xTaskCreate+0x48>
	...

08012238 <vTaskStartScheduler>:
{
 8012238:	b510      	push	{r4, lr}
 801223a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801223c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801223e:	aa07      	add	r2, sp, #28
 8012240:	a906      	add	r1, sp, #24
 8012242:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012244:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012248:	f7fe fbf6 	bl	8010a38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801224c:	9b05      	ldr	r3, [sp, #20]
 801224e:	9a07      	ldr	r2, [sp, #28]
 8012250:	9302      	str	r3, [sp, #8]
 8012252:	9b06      	ldr	r3, [sp, #24]
 8012254:	491e      	ldr	r1, [pc, #120]	; (80122d0 <vTaskStartScheduler+0x98>)
 8012256:	481f      	ldr	r0, [pc, #124]	; (80122d4 <vTaskStartScheduler+0x9c>)
 8012258:	e9cd 4300 	strd	r4, r3, [sp]
 801225c:	4623      	mov	r3, r4
 801225e:	f7ff ff85 	bl	801216c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8012262:	b340      	cbz	r0, 80122b6 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8012264:	f000 fd88 	bl	8012d78 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8012268:	2801      	cmp	r0, #1
 801226a:	d126      	bne.n	80122ba <vTaskStartScheduler+0x82>
 801226c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012270:	f383 8811 	msr	BASEPRI, r3
 8012274:	f3bf 8f6f 	isb	sy
 8012278:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 801227c:	f04f 32ff 	mov.w	r2, #4294967295
 8012280:	4b15      	ldr	r3, [pc, #84]	; (80122d8 <vTaskStartScheduler+0xa0>)
 8012282:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012284:	4b15      	ldr	r3, [pc, #84]	; (80122dc <vTaskStartScheduler+0xa4>)
 8012286:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012288:	4b15      	ldr	r3, [pc, #84]	; (80122e0 <vTaskStartScheduler+0xa8>)
 801228a:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 801228c:	4c15      	ldr	r4, [pc, #84]	; (80122e4 <vTaskStartScheduler+0xac>)
 801228e:	6020      	str	r0, [r4, #0]
 8012290:	f7f2 ffea 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8012294:	f7f2 ff4f 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8012298:	4b13      	ldr	r3, [pc, #76]	; (80122e8 <vTaskStartScheduler+0xb0>)
 801229a:	881b      	ldrh	r3, [r3, #0]
 801229c:	4218      	tst	r0, r3
 801229e:	d006      	beq.n	80122ae <vTaskStartScheduler+0x76>
 80122a0:	f7f2 ffe2 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 80122a4:	f7f2 ff42 	bl	800512c <prvTraceGetTaskNumberLow16>
 80122a8:	b2c0      	uxtb	r0, r0
 80122aa:	f7f3 fec7 	bl	800603c <prvTraceStoreTaskswitch>
 80122ae:	2302      	movs	r3, #2
 80122b0:	6023      	str	r3, [r4, #0]
		if( xPortStartScheduler() != pdFALSE )
 80122b2:	f001 f80f 	bl	80132d4 <xPortStartScheduler>
}
 80122b6:	b008      	add	sp, #32
 80122b8:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80122ba:	3001      	adds	r0, #1
 80122bc:	d1fb      	bne.n	80122b6 <vTaskStartScheduler+0x7e>
 80122be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c2:	f383 8811 	msr	BASEPRI, r3
 80122c6:	f3bf 8f6f 	isb	sy
 80122ca:	f3bf 8f4f 	dsb	sy
 80122ce:	e7fe      	b.n	80122ce <vTaskStartScheduler+0x96>
 80122d0:	08017197 	.word	0x08017197
 80122d4:	08011fd9 	.word	0x08011fd9
 80122d8:	2400147c 	.word	0x2400147c
 80122dc:	24001498 	.word	0x24001498
 80122e0:	240014c4 	.word	0x240014c4
 80122e4:	240008c4 	.word	0x240008c4
 80122e8:	24000010 	.word	0x24000010

080122ec <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80122ec:	4a02      	ldr	r2, [pc, #8]	; (80122f8 <vTaskSuspendAll+0xc>)
 80122ee:	6813      	ldr	r3, [r2, #0]
 80122f0:	3301      	adds	r3, #1
 80122f2:	6013      	str	r3, [r2, #0]
}
 80122f4:	4770      	bx	lr
 80122f6:	bf00      	nop
 80122f8:	24001448 	.word	0x24001448

080122fc <xTaskGetTickCount>:
		xTicks = xTickCount;
 80122fc:	4b01      	ldr	r3, [pc, #4]	; (8012304 <xTaskGetTickCount+0x8>)
 80122fe:	6818      	ldr	r0, [r3, #0]
}
 8012300:	4770      	bx	lr
 8012302:	bf00      	nop
 8012304:	240014c4 	.word	0x240014c4

08012308 <xTaskGetTickCountFromISR>:
{
 8012308:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801230a:	f001 f867 	bl	80133dc <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 801230e:	4b01      	ldr	r3, [pc, #4]	; (8012314 <xTaskGetTickCountFromISR+0xc>)
 8012310:	6818      	ldr	r0, [r3, #0]
}
 8012312:	bd08      	pop	{r3, pc}
 8012314:	240014c4 	.word	0x240014c4

08012318 <xTaskIncrementTick>:
{
 8012318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	traceTASK_INCREMENT_TICK( xTickCount );
 801231c:	4c4b      	ldr	r4, [pc, #300]	; (801244c <xTaskIncrementTick+0x134>)
 801231e:	6823      	ldr	r3, [r4, #0]
 8012320:	2b01      	cmp	r3, #1
 8012322:	d002      	beq.n	801232a <xTaskIncrementTick+0x12>
 8012324:	4b4a      	ldr	r3, [pc, #296]	; (8012450 <xTaskIncrementTick+0x138>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	b933      	cbnz	r3, 8012338 <xTaskIncrementTick+0x20>
 801232a:	4a4a      	ldr	r2, [pc, #296]	; (8012454 <xTaskIncrementTick+0x13c>)
 801232c:	2000      	movs	r0, #0
 801232e:	6813      	ldr	r3, [r2, #0]
 8012330:	3301      	adds	r3, #1
 8012332:	6013      	str	r3, [r2, #0]
 8012334:	f7f3 fc5c 	bl	8005bf0 <prvTracePortGetTimeStamp>
 8012338:	6823      	ldr	r3, [r4, #0]
 801233a:	b92b      	cbnz	r3, 8012348 <xTaskIncrementTick+0x30>
 801233c:	4b46      	ldr	r3, [pc, #280]	; (8012458 <xTaskIncrementTick+0x140>)
 801233e:	2003      	movs	r0, #3
 8012340:	6819      	ldr	r1, [r3, #0]
 8012342:	3101      	adds	r1, #1
 8012344:	f7f3 fe34 	bl	8005fb0 <prvTraceStoreKernelCallWithNumericParamOnly>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012348:	6823      	ldr	r3, [r4, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d178      	bne.n	8012440 <xTaskIncrementTick+0x128>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801234e:	4b42      	ldr	r3, [pc, #264]	; (8012458 <xTaskIncrementTick+0x140>)
 8012350:	681d      	ldr	r5, [r3, #0]
 8012352:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8012354:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012356:	b9bd      	cbnz	r5, 8012388 <xTaskIncrementTick+0x70>
			taskSWITCH_DELAYED_LISTS();
 8012358:	4b40      	ldr	r3, [pc, #256]	; (801245c <xTaskIncrementTick+0x144>)
 801235a:	681a      	ldr	r2, [r3, #0]
 801235c:	6812      	ldr	r2, [r2, #0]
 801235e:	b142      	cbz	r2, 8012372 <xTaskIncrementTick+0x5a>
 8012360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012364:	f383 8811 	msr	BASEPRI, r3
 8012368:	f3bf 8f6f 	isb	sy
 801236c:	f3bf 8f4f 	dsb	sy
 8012370:	e7fe      	b.n	8012370 <xTaskIncrementTick+0x58>
 8012372:	4a3b      	ldr	r2, [pc, #236]	; (8012460 <xTaskIncrementTick+0x148>)
 8012374:	6819      	ldr	r1, [r3, #0]
 8012376:	6810      	ldr	r0, [r2, #0]
 8012378:	6018      	str	r0, [r3, #0]
 801237a:	6011      	str	r1, [r2, #0]
 801237c:	4a39      	ldr	r2, [pc, #228]	; (8012464 <xTaskIncrementTick+0x14c>)
 801237e:	6813      	ldr	r3, [r2, #0]
 8012380:	3301      	adds	r3, #1
 8012382:	6013      	str	r3, [r2, #0]
 8012384:	f7ff fe5a 	bl	801203c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012388:	4e37      	ldr	r6, [pc, #220]	; (8012468 <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 801238a:	2400      	movs	r4, #0
 801238c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8012478 <xTaskIncrementTick+0x160>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012390:	6833      	ldr	r3, [r6, #0]
 8012392:	42ab      	cmp	r3, r5
 8012394:	d911      	bls.n	80123ba <xTaskIncrementTick+0xa2>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012396:	f8d8 3000 	ldr.w	r3, [r8]
 801239a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801239c:	2314      	movs	r3, #20
 801239e:	4353      	muls	r3, r2
 80123a0:	4a32      	ldr	r2, [pc, #200]	; (801246c <xTaskIncrementTick+0x154>)
 80123a2:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 80123a4:	2b02      	cmp	r3, #2
 80123a6:	bf28      	it	cs
 80123a8:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 80123aa:	4b31      	ldr	r3, [pc, #196]	; (8012470 <xTaskIncrementTick+0x158>)
 80123ac:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80123ae:	2b00      	cmp	r3, #0
}
 80123b0:	bf0c      	ite	eq
 80123b2:	4620      	moveq	r0, r4
 80123b4:	2001      	movne	r0, #1
 80123b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123ba:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 801245c <xTaskIncrementTick+0x144>
					prvAddTaskToReadyList( pxTCB );
 80123be:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 801247c <xTaskIncrementTick+0x164>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123c2:	f8da 3000 	ldr.w	r3, [sl]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	b91b      	cbnz	r3, 80123d2 <xTaskIncrementTick+0xba>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123ca:	f04f 33ff 	mov.w	r3, #4294967295
 80123ce:	6033      	str	r3, [r6, #0]
					break;
 80123d0:	e7e1      	b.n	8012396 <xTaskIncrementTick+0x7e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123d2:	f8da 3000 	ldr.w	r3, [sl]
 80123d6:	68db      	ldr	r3, [r3, #12]
 80123d8:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80123da:	687a      	ldr	r2, [r7, #4]
					if( xConstTickCount < xItemValue )
 80123dc:	4295      	cmp	r5, r2
 80123de:	d201      	bcs.n	80123e4 <xTaskIncrementTick+0xcc>
						xNextTaskUnblockTime = xItemValue;
 80123e0:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80123e2:	e7d8      	b.n	8012396 <xTaskIncrementTick+0x7e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80123e4:	f107 0904 	add.w	r9, r7, #4
 80123e8:	4648      	mov	r0, r9
 80123ea:	f7fe fb6e 	bl	8010aca <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80123ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123f0:	b11a      	cbz	r2, 80123fa <xTaskIncrementTick+0xe2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80123f2:	f107 0018 	add.w	r0, r7, #24
 80123f6:	f7fe fb68 	bl	8010aca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80123fa:	4638      	mov	r0, r7
 80123fc:	f7f2 fe9b 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8012400:	4b1c      	ldr	r3, [pc, #112]	; (8012474 <xTaskIncrementTick+0x15c>)
 8012402:	881a      	ldrh	r2, [r3, #0]
 8012404:	4210      	tst	r0, r2
 8012406:	d005      	beq.n	8012414 <xTaskIncrementTick+0xfc>
 8012408:	4638      	mov	r0, r7
 801240a:	f7f2 fe8f 	bl	800512c <prvTraceGetTaskNumberLow16>
 801240e:	b2c0      	uxtb	r0, r0
 8012410:	f7f3 fc8e 	bl	8005d30 <prvTraceStoreTaskReady>
 8012414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012416:	f8db 1000 	ldr.w	r1, [fp]
 801241a:	428a      	cmp	r2, r1
 801241c:	d901      	bls.n	8012422 <xTaskIncrementTick+0x10a>
 801241e:	f8cb 2000 	str.w	r2, [fp]
 8012422:	4b12      	ldr	r3, [pc, #72]	; (801246c <xTaskIncrementTick+0x154>)
 8012424:	2014      	movs	r0, #20
 8012426:	4649      	mov	r1, r9
 8012428:	fb00 3002 	mla	r0, r0, r2, r3
 801242c:	f7fe fb2a 	bl	8010a84 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012430:	f8d8 1000 	ldr.w	r1, [r8]
 8012434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012436:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8012438:	429a      	cmp	r2, r3
 801243a:	bf28      	it	cs
 801243c:	2401      	movcs	r4, #1
 801243e:	e7c0      	b.n	80123c2 <xTaskIncrementTick+0xaa>
		++uxPendedTicks;
 8012440:	4a03      	ldr	r2, [pc, #12]	; (8012450 <xTaskIncrementTick+0x138>)
BaseType_t xSwitchRequired = pdFALSE;
 8012442:	2400      	movs	r4, #0
		++uxPendedTicks;
 8012444:	6813      	ldr	r3, [r2, #0]
 8012446:	3301      	adds	r3, #1
 8012448:	6013      	str	r3, [r2, #0]
 801244a:	e7ae      	b.n	80123aa <xTaskIncrementTick+0x92>
 801244c:	24001448 	.word	0x24001448
 8012450:	24001444 	.word	0x24001444
 8012454:	240008c8 	.word	0x240008c8
 8012458:	240014c4 	.word	0x240014c4
 801245c:	24000fd4 	.word	0x24000fd4
 8012460:	24000fd8 	.word	0x24000fd8
 8012464:	24001480 	.word	0x24001480
 8012468:	2400147c 	.word	0x2400147c
 801246c:	24000fdc 	.word	0x24000fdc
 8012470:	240014c8 	.word	0x240014c8
 8012474:	24000010 	.word	0x24000010
 8012478:	24000fd0 	.word	0x24000fd0
 801247c:	24001450 	.word	0x24001450

08012480 <xTaskResumeAll>:
{
 8012480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8012484:	4c36      	ldr	r4, [pc, #216]	; (8012560 <xTaskResumeAll+0xe0>)
 8012486:	6823      	ldr	r3, [r4, #0]
 8012488:	b943      	cbnz	r3, 801249c <xTaskResumeAll+0x1c>
 801248a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801248e:	f383 8811 	msr	BASEPRI, r3
 8012492:	f3bf 8f6f 	isb	sy
 8012496:	f3bf 8f4f 	dsb	sy
 801249a:	e7fe      	b.n	801249a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 801249c:	f000 fe82 	bl	80131a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80124a0:	6823      	ldr	r3, [r4, #0]
 80124a2:	3b01      	subs	r3, #1
 80124a4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80124a6:	6824      	ldr	r4, [r4, #0]
 80124a8:	b12c      	cbz	r4, 80124b6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80124aa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80124ac:	f000 fe9c 	bl	80131e8 <vPortExitCritical>
}
 80124b0:	4620      	mov	r0, r4
 80124b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80124b6:	4b2b      	ldr	r3, [pc, #172]	; (8012564 <xTaskResumeAll+0xe4>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d0f5      	beq.n	80124aa <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80124be:	4d2a      	ldr	r5, [pc, #168]	; (8012568 <xTaskResumeAll+0xe8>)
					prvAddTaskToReadyList( pxTCB );
 80124c0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8012584 <xTaskResumeAll+0x104>
 80124c4:	4e29      	ldr	r6, [pc, #164]	; (801256c <xTaskResumeAll+0xec>)
 80124c6:	e02b      	b.n	8012520 <xTaskResumeAll+0xa0>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124c8:	68eb      	ldr	r3, [r5, #12]
 80124ca:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80124cc:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80124ce:	f104 0018 	add.w	r0, r4, #24
 80124d2:	f7fe fafa 	bl	8010aca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80124d6:	4638      	mov	r0, r7
 80124d8:	f7fe faf7 	bl	8010aca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80124dc:	4620      	mov	r0, r4
 80124de:	f7f2 fe2a 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 80124e2:	f8b8 3000 	ldrh.w	r3, [r8]
 80124e6:	4218      	tst	r0, r3
 80124e8:	d005      	beq.n	80124f6 <xTaskResumeAll+0x76>
 80124ea:	4620      	mov	r0, r4
 80124ec:	f7f2 fe1e 	bl	800512c <prvTraceGetTaskNumberLow16>
 80124f0:	b2c0      	uxtb	r0, r0
 80124f2:	f7f3 fc1d 	bl	8005d30 <prvTraceStoreTaskReady>
 80124f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80124f8:	6832      	ldr	r2, [r6, #0]
 80124fa:	4293      	cmp	r3, r2
 80124fc:	d900      	bls.n	8012500 <xTaskResumeAll+0x80>
 80124fe:	6033      	str	r3, [r6, #0]
 8012500:	4a1b      	ldr	r2, [pc, #108]	; (8012570 <xTaskResumeAll+0xf0>)
 8012502:	2014      	movs	r0, #20
 8012504:	4639      	mov	r1, r7
 8012506:	fb00 2003 	mla	r0, r0, r3, r2
 801250a:	f7fe fabb 	bl	8010a84 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801250e:	4b19      	ldr	r3, [pc, #100]	; (8012574 <xTaskResumeAll+0xf4>)
 8012510:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012516:	429a      	cmp	r2, r3
 8012518:	d302      	bcc.n	8012520 <xTaskResumeAll+0xa0>
						xYieldPending = pdTRUE;
 801251a:	4b17      	ldr	r3, [pc, #92]	; (8012578 <xTaskResumeAll+0xf8>)
 801251c:	2201      	movs	r2, #1
 801251e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012520:	682b      	ldr	r3, [r5, #0]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d1d0      	bne.n	80124c8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8012526:	b10c      	cbz	r4, 801252c <xTaskResumeAll+0xac>
					prvResetNextTaskUnblockTime();
 8012528:	f7ff fd88 	bl	801203c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801252c:	4d13      	ldr	r5, [pc, #76]	; (801257c <xTaskResumeAll+0xfc>)
 801252e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012530:	b144      	cbz	r4, 8012544 <xTaskResumeAll+0xc4>
								xYieldPending = pdTRUE;
 8012532:	4e11      	ldr	r6, [pc, #68]	; (8012578 <xTaskResumeAll+0xf8>)
 8012534:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8012536:	f7ff feef 	bl	8012318 <xTaskIncrementTick>
 801253a:	b100      	cbz	r0, 801253e <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
 801253c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801253e:	3c01      	subs	r4, #1
 8012540:	d1f9      	bne.n	8012536 <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
 8012542:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8012544:	4b0c      	ldr	r3, [pc, #48]	; (8012578 <xTaskResumeAll+0xf8>)
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d0ae      	beq.n	80124aa <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 801254c:	4b0c      	ldr	r3, [pc, #48]	; (8012580 <xTaskResumeAll+0x100>)
 801254e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012552:	601a      	str	r2, [r3, #0]
 8012554:	f3bf 8f4f 	dsb	sy
 8012558:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801255c:	2401      	movs	r4, #1
 801255e:	e7a5      	b.n	80124ac <xTaskResumeAll+0x2c>
 8012560:	24001448 	.word	0x24001448
 8012564:	2400143c 	.word	0x2400143c
 8012568:	24001484 	.word	0x24001484
 801256c:	24001450 	.word	0x24001450
 8012570:	24000fdc 	.word	0x24000fdc
 8012574:	24000fd0 	.word	0x24000fd0
 8012578:	240014c8 	.word	0x240014c8
 801257c:	24001444 	.word	0x24001444
 8012580:	e000ed04 	.word	0xe000ed04
 8012584:	24000010 	.word	0x24000010

08012588 <vTaskDelayUntil>:
	{
 8012588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxPreviousWakeTime );
 801258a:	b940      	cbnz	r0, 801259e <vTaskDelayUntil+0x16>
 801258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012590:	f383 8811 	msr	BASEPRI, r3
 8012594:	f3bf 8f6f 	isb	sy
 8012598:	f3bf 8f4f 	dsb	sy
 801259c:	e7fe      	b.n	801259c <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 801259e:	b941      	cbnz	r1, 80125b2 <vTaskDelayUntil+0x2a>
 80125a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a4:	f383 8811 	msr	BASEPRI, r3
 80125a8:	f3bf 8f6f 	isb	sy
 80125ac:	f3bf 8f4f 	dsb	sy
 80125b0:	e7fe      	b.n	80125b0 <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 80125b2:	4b26      	ldr	r3, [pc, #152]	; (801264c <vTaskDelayUntil+0xc4>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	b143      	cbz	r3, 80125ca <vTaskDelayUntil+0x42>
 80125b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125bc:	f383 8811 	msr	BASEPRI, r3
 80125c0:	f3bf 8f6f 	isb	sy
 80125c4:	f3bf 8f4f 	dsb	sy
 80125c8:	e7fe      	b.n	80125c8 <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 80125ca:	f7ff fe8f 	bl	80122ec <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 80125ce:	4b20      	ldr	r3, [pc, #128]	; (8012650 <vTaskDelayUntil+0xc8>)
 80125d0:	681e      	ldr	r6, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80125d2:	6803      	ldr	r3, [r0, #0]
 80125d4:	185c      	adds	r4, r3, r1
 80125d6:	bf2c      	ite	cs
 80125d8:	2201      	movcs	r2, #1
 80125da:	2200      	movcc	r2, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 80125dc:	42b3      	cmp	r3, r6
			*pxPreviousWakeTime = xTimeToWake;
 80125de:	6004      	str	r4, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 80125e0:	d90c      	bls.n	80125fc <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80125e2:	b962      	cbnz	r2, 80125fe <vTaskDelayUntil+0x76>
		xAlreadyYielded = xTaskResumeAll();
 80125e4:	f7ff ff4c 	bl	8012480 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80125e8:	b938      	cbnz	r0, 80125fa <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
 80125ea:	4b1a      	ldr	r3, [pc, #104]	; (8012654 <vTaskDelayUntil+0xcc>)
 80125ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125f0:	601a      	str	r2, [r3, #0]
 80125f2:	f3bf 8f4f 	dsb	sy
 80125f6:	f3bf 8f6f 	isb	sy
	}
 80125fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80125fc:	b90a      	cbnz	r2, 8012602 <vTaskDelayUntil+0x7a>
 80125fe:	42a6      	cmp	r6, r4
 8012600:	d2f0      	bcs.n	80125e4 <vTaskDelayUntil+0x5c>
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8012602:	4f15      	ldr	r7, [pc, #84]	; (8012658 <vTaskDelayUntil+0xd0>)
 8012604:	4d15      	ldr	r5, [pc, #84]	; (801265c <vTaskDelayUntil+0xd4>)
 8012606:	6838      	ldr	r0, [r7, #0]
 8012608:	f7f2 fd95 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 801260c:	882a      	ldrh	r2, [r5, #0]
 801260e:	4210      	tst	r0, r2
 8012610:	d009      	beq.n	8012626 <vTaskDelayUntil+0x9e>
 8012612:	4621      	mov	r1, r4
 8012614:	2088      	movs	r0, #136	; 0x88
 8012616:	f7f3 fccb 	bl	8005fb0 <prvTraceStoreKernelCallWithNumericParamOnly>
 801261a:	6838      	ldr	r0, [r7, #0]
 801261c:	f7f2 fd86 	bl	800512c <prvTraceGetTaskNumberLow16>
 8012620:	b2c0      	uxtb	r0, r0
 8012622:	f7f3 f957 	bl	80058d4 <prvTraceSetTaskInstanceFinished>
 8012626:	f7f2 fe1f 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 801262a:	f7f2 fd84 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 801262e:	882b      	ldrh	r3, [r5, #0]
 8012630:	4218      	tst	r0, r3
 8012632:	d006      	beq.n	8012642 <vTaskDelayUntil+0xba>
 8012634:	f7f2 fe18 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8012638:	f7f2 fd78 	bl	800512c <prvTraceGetTaskNumberLow16>
 801263c:	b2c0      	uxtb	r0, r0
 801263e:	f7f3 f949 	bl	80058d4 <prvTraceSetTaskInstanceFinished>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8012642:	2100      	movs	r1, #0
 8012644:	1ba0      	subs	r0, r4, r6
 8012646:	f7ff fd57 	bl	80120f8 <prvAddCurrentTaskToDelayedList>
 801264a:	e7cb      	b.n	80125e4 <vTaskDelayUntil+0x5c>
 801264c:	24001448 	.word	0x24001448
 8012650:	240014c4 	.word	0x240014c4
 8012654:	e000ed04 	.word	0xe000ed04
 8012658:	24000fd0 	.word	0x24000fd0
 801265c:	24000010 	.word	0x24000010

08012660 <vTaskDelay>:
	{
 8012660:	b570      	push	{r4, r5, r6, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012662:	4605      	mov	r5, r0
 8012664:	b940      	cbnz	r0, 8012678 <vTaskDelay+0x18>
			portYIELD_WITHIN_API();
 8012666:	4b20      	ldr	r3, [pc, #128]	; (80126e8 <vTaskDelay+0x88>)
 8012668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801266c:	601a      	str	r2, [r3, #0]
 801266e:	f3bf 8f4f 	dsb	sy
 8012672:	f3bf 8f6f 	isb	sy
	}
 8012676:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8012678:	4b1c      	ldr	r3, [pc, #112]	; (80126ec <vTaskDelay+0x8c>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	b143      	cbz	r3, 8012690 <vTaskDelay+0x30>
 801267e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012682:	f383 8811 	msr	BASEPRI, r3
 8012686:	f3bf 8f6f 	isb	sy
 801268a:	f3bf 8f4f 	dsb	sy
 801268e:	e7fe      	b.n	801268e <vTaskDelay+0x2e>
				traceTASK_DELAY();
 8012690:	4e17      	ldr	r6, [pc, #92]	; (80126f0 <vTaskDelay+0x90>)
			vTaskSuspendAll();
 8012692:	f7ff fe2b 	bl	80122ec <vTaskSuspendAll>
				traceTASK_DELAY();
 8012696:	4c17      	ldr	r4, [pc, #92]	; (80126f4 <vTaskDelay+0x94>)
 8012698:	6830      	ldr	r0, [r6, #0]
 801269a:	f7f2 fd4c 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 801269e:	8822      	ldrh	r2, [r4, #0]
 80126a0:	4210      	tst	r0, r2
 80126a2:	d009      	beq.n	80126b8 <vTaskDelay+0x58>
 80126a4:	4629      	mov	r1, r5
 80126a6:	2089      	movs	r0, #137	; 0x89
 80126a8:	f7f3 fc82 	bl	8005fb0 <prvTraceStoreKernelCallWithNumericParamOnly>
 80126ac:	6830      	ldr	r0, [r6, #0]
 80126ae:	f7f2 fd3d 	bl	800512c <prvTraceGetTaskNumberLow16>
 80126b2:	b2c0      	uxtb	r0, r0
 80126b4:	f7f3 f90e 	bl	80058d4 <prvTraceSetTaskInstanceFinished>
 80126b8:	f7f2 fdd6 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 80126bc:	f7f2 fd3b 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 80126c0:	8823      	ldrh	r3, [r4, #0]
 80126c2:	4218      	tst	r0, r3
 80126c4:	d006      	beq.n	80126d4 <vTaskDelay+0x74>
 80126c6:	f7f2 fdcf 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 80126ca:	f7f2 fd2f 	bl	800512c <prvTraceGetTaskNumberLow16>
 80126ce:	b2c0      	uxtb	r0, r0
 80126d0:	f7f3 f900 	bl	80058d4 <prvTraceSetTaskInstanceFinished>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80126d4:	2100      	movs	r1, #0
 80126d6:	4628      	mov	r0, r5
 80126d8:	f7ff fd0e 	bl	80120f8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80126dc:	f7ff fed0 	bl	8012480 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80126e0:	2800      	cmp	r0, #0
 80126e2:	d0c0      	beq.n	8012666 <vTaskDelay+0x6>
 80126e4:	e7c7      	b.n	8012676 <vTaskDelay+0x16>
 80126e6:	bf00      	nop
 80126e8:	e000ed04 	.word	0xe000ed04
 80126ec:	24001448 	.word	0x24001448
 80126f0:	24000fd0 	.word	0x24000fd0
 80126f4:	24000010 	.word	0x24000010

080126f8 <vTaskSwitchContext>:
{
 80126f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80126fa:	4b22      	ldr	r3, [pc, #136]	; (8012784 <vTaskSwitchContext+0x8c>)
 80126fc:	681a      	ldr	r2, [r3, #0]
 80126fe:	4b22      	ldr	r3, [pc, #136]	; (8012788 <vTaskSwitchContext+0x90>)
 8012700:	b112      	cbz	r2, 8012708 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8012702:	2201      	movs	r2, #1
 8012704:	601a      	str	r2, [r3, #0]
}
 8012706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8012708:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801270a:	2714      	movs	r7, #20
 801270c:	4d1f      	ldr	r5, [pc, #124]	; (801278c <vTaskSwitchContext+0x94>)
 801270e:	4a20      	ldr	r2, [pc, #128]	; (8012790 <vTaskSwitchContext+0x98>)
 8012710:	682b      	ldr	r3, [r5, #0]
 8012712:	4616      	mov	r6, r2
 8012714:	fb07 f103 	mul.w	r1, r7, r3
 8012718:	5854      	ldr	r4, [r2, r1]
 801271a:	1850      	adds	r0, r2, r1
 801271c:	b334      	cbz	r4, 801276c <vTaskSwitchContext+0x74>
 801271e:	6844      	ldr	r4, [r0, #4]
 8012720:	3108      	adds	r1, #8
 8012722:	6864      	ldr	r4, [r4, #4]
 8012724:	440a      	add	r2, r1
 8012726:	4294      	cmp	r4, r2
 8012728:	6044      	str	r4, [r0, #4]
 801272a:	bf08      	it	eq
 801272c:	6862      	ldreq	r2, [r4, #4]
		traceTASK_SWITCHED_IN();
 801272e:	4c19      	ldr	r4, [pc, #100]	; (8012794 <vTaskSwitchContext+0x9c>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012730:	bf08      	it	eq
 8012732:	6042      	streq	r2, [r0, #4]
 8012734:	2214      	movs	r2, #20
 8012736:	fb02 6203 	mla	r2, r2, r3, r6
 801273a:	6852      	ldr	r2, [r2, #4]
 801273c:	68d1      	ldr	r1, [r2, #12]
 801273e:	4a16      	ldr	r2, [pc, #88]	; (8012798 <vTaskSwitchContext+0xa0>)
 8012740:	6011      	str	r1, [r2, #0]
 8012742:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
 8012744:	2301      	movs	r3, #1
 8012746:	6023      	str	r3, [r4, #0]
 8012748:	f7f2 fd8e 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 801274c:	f7f2 fcf3 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8012750:	4b12      	ldr	r3, [pc, #72]	; (801279c <vTaskSwitchContext+0xa4>)
 8012752:	881b      	ldrh	r3, [r3, #0]
 8012754:	4218      	tst	r0, r3
 8012756:	d006      	beq.n	8012766 <vTaskSwitchContext+0x6e>
 8012758:	f7f2 fd86 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 801275c:	f7f2 fce6 	bl	800512c <prvTraceGetTaskNumberLow16>
 8012760:	b2c0      	uxtb	r0, r0
 8012762:	f7f3 fc6b 	bl	800603c <prvTraceStoreTaskswitch>
 8012766:	2302      	movs	r3, #2
 8012768:	6023      	str	r3, [r4, #0]
}
 801276a:	e7cc      	b.n	8012706 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801276c:	b943      	cbnz	r3, 8012780 <vTaskSwitchContext+0x88>
 801276e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012772:	f383 8811 	msr	BASEPRI, r3
 8012776:	f3bf 8f6f 	isb	sy
 801277a:	f3bf 8f4f 	dsb	sy
 801277e:	e7fe      	b.n	801277e <vTaskSwitchContext+0x86>
 8012780:	3b01      	subs	r3, #1
 8012782:	e7c7      	b.n	8012714 <vTaskSwitchContext+0x1c>
 8012784:	24001448 	.word	0x24001448
 8012788:	240014c8 	.word	0x240014c8
 801278c:	24001450 	.word	0x24001450
 8012790:	24000fdc 	.word	0x24000fdc
 8012794:	240008c4 	.word	0x240008c4
 8012798:	24000fd0 	.word	0x24000fd0
 801279c:	24000010 	.word	0x24000010

080127a0 <vTaskPlaceOnEventList>:
{
 80127a0:	b510      	push	{r4, lr}
 80127a2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80127a4:	b940      	cbnz	r0, 80127b8 <vTaskPlaceOnEventList+0x18>
 80127a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127aa:	f383 8811 	msr	BASEPRI, r3
 80127ae:	f3bf 8f6f 	isb	sy
 80127b2:	f3bf 8f4f 	dsb	sy
 80127b6:	e7fe      	b.n	80127b6 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80127b8:	4b05      	ldr	r3, [pc, #20]	; (80127d0 <vTaskPlaceOnEventList+0x30>)
 80127ba:	6819      	ldr	r1, [r3, #0]
 80127bc:	3118      	adds	r1, #24
 80127be:	f7fe f96d 	bl	8010a9c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80127c2:	4620      	mov	r0, r4
 80127c4:	2101      	movs	r1, #1
}
 80127c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80127ca:	f7ff bc95 	b.w	80120f8 <prvAddCurrentTaskToDelayedList>
 80127ce:	bf00      	nop
 80127d0:	24000fd0 	.word	0x24000fd0

080127d4 <vTaskPlaceOnEventListRestricted>:
	{
 80127d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127d6:	460c      	mov	r4, r1
 80127d8:	4617      	mov	r7, r2
		configASSERT( pxEventList );
 80127da:	b940      	cbnz	r0, 80127ee <vTaskPlaceOnEventListRestricted+0x1a>
 80127dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127e0:	f383 8811 	msr	BASEPRI, r3
 80127e4:	f3bf 8f6f 	isb	sy
 80127e8:	f3bf 8f4f 	dsb	sy
 80127ec:	e7fe      	b.n	80127ec <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80127ee:	4e18      	ldr	r6, [pc, #96]	; (8012850 <vTaskPlaceOnEventListRestricted+0x7c>)
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80127f0:	4d18      	ldr	r5, [pc, #96]	; (8012854 <vTaskPlaceOnEventListRestricted+0x80>)
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80127f2:	6831      	ldr	r1, [r6, #0]
 80127f4:	3118      	adds	r1, #24
 80127f6:	f7fe f945 	bl	8010a84 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80127fa:	2f00      	cmp	r7, #0
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80127fc:	6830      	ldr	r0, [r6, #0]
			xTicksToWait = portMAX_DELAY;
 80127fe:	bf18      	it	ne
 8012800:	f04f 34ff 	movne.w	r4, #4294967295
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8012804:	f7f2 fc97 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8012808:	882a      	ldrh	r2, [r5, #0]
 801280a:	4210      	tst	r0, r2
 801280c:	d00b      	beq.n	8012826 <vTaskPlaceOnEventListRestricted+0x52>
 801280e:	4b12      	ldr	r3, [pc, #72]	; (8012858 <vTaskPlaceOnEventListRestricted+0x84>)
 8012810:	2088      	movs	r0, #136	; 0x88
 8012812:	6819      	ldr	r1, [r3, #0]
 8012814:	4421      	add	r1, r4
 8012816:	f7f3 fbcb 	bl	8005fb0 <prvTraceStoreKernelCallWithNumericParamOnly>
 801281a:	6830      	ldr	r0, [r6, #0]
 801281c:	f7f2 fc86 	bl	800512c <prvTraceGetTaskNumberLow16>
 8012820:	b2c0      	uxtb	r0, r0
 8012822:	f7f3 f857 	bl	80058d4 <prvTraceSetTaskInstanceFinished>
 8012826:	f7f2 fd1f 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 801282a:	f7f2 fc84 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 801282e:	882b      	ldrh	r3, [r5, #0]
 8012830:	4218      	tst	r0, r3
 8012832:	d006      	beq.n	8012842 <vTaskPlaceOnEventListRestricted+0x6e>
 8012834:	f7f2 fd18 	bl	8005268 <prvTraceGetCurrentTaskHandle>
 8012838:	f7f2 fc78 	bl	800512c <prvTraceGetTaskNumberLow16>
 801283c:	b2c0      	uxtb	r0, r0
 801283e:	f7f3 f849 	bl	80058d4 <prvTraceSetTaskInstanceFinished>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012842:	4639      	mov	r1, r7
 8012844:	4620      	mov	r0, r4
	}
 8012846:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801284a:	f7ff bc55 	b.w	80120f8 <prvAddCurrentTaskToDelayedList>
 801284e:	bf00      	nop
 8012850:	24000fd0 	.word	0x24000fd0
 8012854:	24000010 	.word	0x24000010
 8012858:	240014c4 	.word	0x240014c4

0801285c <xTaskRemoveFromEventList>:
{
 801285c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801285e:	68c3      	ldr	r3, [r0, #12]
 8012860:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8012862:	b944      	cbnz	r4, 8012876 <xTaskRemoveFromEventList+0x1a>
 8012864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012868:	f383 8811 	msr	BASEPRI, r3
 801286c:	f3bf 8f6f 	isb	sy
 8012870:	f3bf 8f4f 	dsb	sy
 8012874:	e7fe      	b.n	8012874 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012876:	f104 0518 	add.w	r5, r4, #24
 801287a:	4628      	mov	r0, r5
 801287c:	f7fe f925 	bl	8010aca <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012880:	4b17      	ldr	r3, [pc, #92]	; (80128e0 <xTaskRemoveFromEventList+0x84>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	bb3b      	cbnz	r3, 80128d6 <xTaskRemoveFromEventList+0x7a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012886:	1d25      	adds	r5, r4, #4
 8012888:	4628      	mov	r0, r5
 801288a:	f7fe f91e 	bl	8010aca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801288e:	4620      	mov	r0, r4
 8012890:	f7f2 fc51 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8012894:	4b13      	ldr	r3, [pc, #76]	; (80128e4 <xTaskRemoveFromEventList+0x88>)
 8012896:	881b      	ldrh	r3, [r3, #0]
 8012898:	4218      	tst	r0, r3
 801289a:	d005      	beq.n	80128a8 <xTaskRemoveFromEventList+0x4c>
 801289c:	4620      	mov	r0, r4
 801289e:	f7f2 fc45 	bl	800512c <prvTraceGetTaskNumberLow16>
 80128a2:	b2c0      	uxtb	r0, r0
 80128a4:	f7f3 fa44 	bl	8005d30 <prvTraceStoreTaskReady>
 80128a8:	4a0f      	ldr	r2, [pc, #60]	; (80128e8 <xTaskRemoveFromEventList+0x8c>)
 80128aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80128ac:	6811      	ldr	r1, [r2, #0]
 80128ae:	428b      	cmp	r3, r1
 80128b0:	d900      	bls.n	80128b4 <xTaskRemoveFromEventList+0x58>
 80128b2:	6013      	str	r3, [r2, #0]
 80128b4:	4a0d      	ldr	r2, [pc, #52]	; (80128ec <xTaskRemoveFromEventList+0x90>)
 80128b6:	2014      	movs	r0, #20
 80128b8:	4629      	mov	r1, r5
 80128ba:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80128be:	f7fe f8e1 	bl	8010a84 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80128c2:	4b0b      	ldr	r3, [pc, #44]	; (80128f0 <xTaskRemoveFromEventList+0x94>)
 80128c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ca:	429a      	cmp	r2, r3
 80128cc:	d906      	bls.n	80128dc <xTaskRemoveFromEventList+0x80>
		xYieldPending = pdTRUE;
 80128ce:	2001      	movs	r0, #1
 80128d0:	4b08      	ldr	r3, [pc, #32]	; (80128f4 <xTaskRemoveFromEventList+0x98>)
 80128d2:	6018      	str	r0, [r3, #0]
}
 80128d4:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80128d6:	4629      	mov	r1, r5
 80128d8:	4807      	ldr	r0, [pc, #28]	; (80128f8 <xTaskRemoveFromEventList+0x9c>)
 80128da:	e7f0      	b.n	80128be <xTaskRemoveFromEventList+0x62>
		xReturn = pdFALSE;
 80128dc:	2000      	movs	r0, #0
	return xReturn;
 80128de:	e7f9      	b.n	80128d4 <xTaskRemoveFromEventList+0x78>
 80128e0:	24001448 	.word	0x24001448
 80128e4:	24000010 	.word	0x24000010
 80128e8:	24001450 	.word	0x24001450
 80128ec:	24000fdc 	.word	0x24000fdc
 80128f0:	24000fd0 	.word	0x24000fd0
 80128f4:	240014c8 	.word	0x240014c8
 80128f8:	24001484 	.word	0x24001484

080128fc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80128fc:	4b03      	ldr	r3, [pc, #12]	; (801290c <vTaskInternalSetTimeOutState+0x10>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012902:	4b03      	ldr	r3, [pc, #12]	; (8012910 <vTaskInternalSetTimeOutState+0x14>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	6043      	str	r3, [r0, #4]
}
 8012908:	4770      	bx	lr
 801290a:	bf00      	nop
 801290c:	24001480 	.word	0x24001480
 8012910:	240014c4 	.word	0x240014c4

08012914 <xTaskCheckForTimeOut>:
{
 8012914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012916:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8012918:	4605      	mov	r5, r0
 801291a:	b940      	cbnz	r0, 801292e <xTaskCheckForTimeOut+0x1a>
 801291c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012920:	f383 8811 	msr	BASEPRI, r3
 8012924:	f3bf 8f6f 	isb	sy
 8012928:	f3bf 8f4f 	dsb	sy
 801292c:	e7fe      	b.n	801292c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 801292e:	b941      	cbnz	r1, 8012942 <xTaskCheckForTimeOut+0x2e>
 8012930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012934:	f383 8811 	msr	BASEPRI, r3
 8012938:	f3bf 8f6f 	isb	sy
 801293c:	f3bf 8f4f 	dsb	sy
 8012940:	e7fe      	b.n	8012940 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8012942:	f000 fc2f 	bl	80131a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8012946:	4b0f      	ldr	r3, [pc, #60]	; (8012984 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012948:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 801294a:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 801294c:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801294e:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8012950:	1c5e      	adds	r6, r3, #1
 8012952:	d00d      	beq.n	8012970 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012954:	4e0c      	ldr	r6, [pc, #48]	; (8012988 <xTaskCheckForTimeOut+0x74>)
 8012956:	682f      	ldr	r7, [r5, #0]
 8012958:	6836      	ldr	r6, [r6, #0]
 801295a:	42b7      	cmp	r7, r6
 801295c:	d001      	beq.n	8012962 <xTaskCheckForTimeOut+0x4e>
 801295e:	4288      	cmp	r0, r1
 8012960:	d90d      	bls.n	801297e <xTaskCheckForTimeOut+0x6a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012962:	4293      	cmp	r3, r2
 8012964:	d909      	bls.n	801297a <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8012966:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012968:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 801296a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801296c:	f7ff ffc6 	bl	80128fc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8012970:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8012972:	f000 fc39 	bl	80131e8 <vPortExitCritical>
}
 8012976:	4620      	mov	r0, r4
 8012978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 801297a:	2300      	movs	r3, #0
 801297c:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 801297e:	2401      	movs	r4, #1
 8012980:	e7f7      	b.n	8012972 <xTaskCheckForTimeOut+0x5e>
 8012982:	bf00      	nop
 8012984:	240014c4 	.word	0x240014c4
 8012988:	24001480 	.word	0x24001480

0801298c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801298c:	4b01      	ldr	r3, [pc, #4]	; (8012994 <vTaskMissedYield+0x8>)
 801298e:	2201      	movs	r2, #1
 8012990:	601a      	str	r2, [r3, #0]
}
 8012992:	4770      	bx	lr
 8012994:	240014c8 	.word	0x240014c8

08012998 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
 8012998:	b100      	cbz	r0, 801299c <uxTaskGetTaskNumber+0x4>
			uxReturn = pxTCB->uxTaskNumber;
 801299a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
 801299c:	4770      	bx	lr

0801299e <vTaskSetTaskNumber>:
		if( xTask != NULL )
 801299e:	b100      	cbz	r0, 80129a2 <vTaskSetTaskNumber+0x4>
			pxTCB->uxTaskNumber = uxHandle;
 80129a0:	64c1      	str	r1, [r0, #76]	; 0x4c
	}
 80129a2:	4770      	bx	lr

080129a4 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 80129a4:	b908      	cbnz	r0, 80129aa <uxTaskGetStackHighWaterMark+0x6>
 80129a6:	4b06      	ldr	r3, [pc, #24]	; (80129c0 <uxTaskGetStackHighWaterMark+0x1c>)
 80129a8:	6818      	ldr	r0, [r3, #0]
 80129aa:	6b02      	ldr	r2, [r0, #48]	; 0x30
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80129ac:	4613      	mov	r3, r2
 80129ae:	1a98      	subs	r0, r3, r2
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80129b0:	f813 1b01 	ldrb.w	r1, [r3], #1
 80129b4:	29a5      	cmp	r1, #165	; 0xa5
 80129b6:	d0fa      	beq.n	80129ae <uxTaskGetStackHighWaterMark+0xa>
	}
 80129b8:	f3c0 008f 	ubfx	r0, r0, #2, #16
 80129bc:	4770      	bx	lr
 80129be:	bf00      	nop
 80129c0:	24000fd0 	.word	0x24000fd0

080129c4 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80129c4:	4b01      	ldr	r3, [pc, #4]	; (80129cc <xTaskGetCurrentTaskHandle+0x8>)
 80129c6:	6818      	ldr	r0, [r3, #0]
	}
 80129c8:	4770      	bx	lr
 80129ca:	bf00      	nop
 80129cc:	24000fd0 	.word	0x24000fd0

080129d0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80129d0:	4b05      	ldr	r3, [pc, #20]	; (80129e8 <xTaskGetSchedulerState+0x18>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	b133      	cbz	r3, 80129e4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80129d6:	4b05      	ldr	r3, [pc, #20]	; (80129ec <xTaskGetSchedulerState+0x1c>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80129dc:	bf0c      	ite	eq
 80129de:	2002      	moveq	r0, #2
 80129e0:	2000      	movne	r0, #0
 80129e2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80129e4:	2001      	movs	r0, #1
	}
 80129e6:	4770      	bx	lr
 80129e8:	24001498 	.word	0x24001498
 80129ec:	24001448 	.word	0x24001448

080129f0 <xTaskPriorityInherit>:
	{
 80129f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80129f4:	4604      	mov	r4, r0
 80129f6:	2800      	cmp	r0, #0
 80129f8:	d066      	beq.n	8012ac8 <xTaskPriorityInherit+0xd8>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80129fa:	4a34      	ldr	r2, [pc, #208]	; (8012acc <xTaskPriorityInherit+0xdc>)
 80129fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80129fe:	6811      	ldr	r1, [r2, #0]
 8012a00:	4615      	mov	r5, r2
 8012a02:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8012a04:	428b      	cmp	r3, r1
 8012a06:	d258      	bcs.n	8012aba <xTaskPriorityInherit+0xca>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012a08:	6982      	ldr	r2, [r0, #24]
 8012a0a:	2a00      	cmp	r2, #0
 8012a0c:	db04      	blt.n	8012a18 <xTaskPriorityInherit+0x28>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a0e:	682a      	ldr	r2, [r5, #0]
 8012a10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8012a12:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8012a16:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012a18:	2214      	movs	r2, #20
 8012a1a:	4f2d      	ldr	r7, [pc, #180]	; (8012ad0 <xTaskPriorityInherit+0xe0>)
 8012a1c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8012ad8 <xTaskPriorityInherit+0xe8>
 8012a20:	fb02 7303 	mla	r3, r2, r3, r7
 8012a24:	6962      	ldr	r2, [r4, #20]
 8012a26:	429a      	cmp	r2, r3
 8012a28:	d143      	bne.n	8012ab2 <xTaskPriorityInherit+0xc2>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a2a:	1d26      	adds	r6, r4, #4
 8012a2c:	4630      	mov	r0, r6
 8012a2e:	f7fe f84c 	bl	8010aca <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012a32:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012a34:	4620      	mov	r0, r4
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a38:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012a3a:	f7f2 fb7c 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8012a3e:	f8b8 3000 	ldrh.w	r3, [r8]
 8012a42:	4218      	tst	r0, r3
 8012a44:	d005      	beq.n	8012a52 <xTaskPriorityInherit+0x62>
 8012a46:	4620      	mov	r0, r4
 8012a48:	f7f2 fb70 	bl	800512c <prvTraceGetTaskNumberLow16>
 8012a4c:	b2c0      	uxtb	r0, r0
 8012a4e:	f7f3 f96f 	bl	8005d30 <prvTraceStoreTaskReady>
 8012a52:	4a20      	ldr	r2, [pc, #128]	; (8012ad4 <xTaskPriorityInherit+0xe4>)
 8012a54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012a56:	6811      	ldr	r1, [r2, #0]
 8012a58:	428b      	cmp	r3, r1
 8012a5a:	d900      	bls.n	8012a5e <xTaskPriorityInherit+0x6e>
 8012a5c:	6013      	str	r3, [r2, #0]
 8012a5e:	2014      	movs	r0, #20
 8012a60:	4631      	mov	r1, r6
 8012a62:	fb00 7003 	mla	r0, r0, r3, r7
 8012a66:	f7fe f80d 	bl	8010a84 <vListInsertEnd>
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8012a6a:	4620      	mov	r0, r4
 8012a6c:	f7f2 fb63 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8012a70:	f8b8 3000 	ldrh.w	r3, [r8]
 8012a74:	4218      	tst	r0, r3
 8012a76:	d01a      	beq.n	8012aae <xTaskPriorityInherit+0xbe>
 8012a78:	4620      	mov	r0, r4
 8012a7a:	f7f2 fb57 	bl	800512c <prvTraceGetTaskNumberLow16>
 8012a7e:	4606      	mov	r6, r0
 8012a80:	4620      	mov	r0, r4
 8012a82:	f7f2 fb53 	bl	800512c <prvTraceGetTaskNumberLow16>
 8012a86:	b2c1      	uxtb	r1, r0
 8012a88:	2003      	movs	r0, #3
 8012a8a:	f7f2 fed7 	bl	800583c <prvTraceGetPriorityProperty>
 8012a8e:	2103      	movs	r1, #3
 8012a90:	4603      	mov	r3, r0
 8012a92:	b2f2      	uxtb	r2, r6
 8012a94:	208e      	movs	r0, #142	; 0x8e
 8012a96:	f7f3 fa33 	bl	8005f00 <prvTraceStoreKernelCallWithParam>
 8012a9a:	4620      	mov	r0, r4
 8012a9c:	f7f2 fb46 	bl	800512c <prvTraceGetTaskNumberLow16>
 8012aa0:	682b      	ldr	r3, [r5, #0]
 8012aa2:	b2c1      	uxtb	r1, r0
 8012aa4:	2003      	movs	r0, #3
 8012aa6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8012aaa:	f7f2 fea1 	bl	80057f0 <prvTraceSetPriorityProperty>
				xReturn = pdTRUE;
 8012aae:	2001      	movs	r0, #1
		return xReturn;
 8012ab0:	e00a      	b.n	8012ac8 <xTaskPriorityInherit+0xd8>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012ab2:	682b      	ldr	r3, [r5, #0]
 8012ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ab6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012ab8:	e7d7      	b.n	8012a6a <xTaskPriorityInherit+0x7a>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012aba:	6813      	ldr	r3, [r2, #0]
 8012abc:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8012abe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012ac0:	42a0      	cmp	r0, r4
 8012ac2:	bf2c      	ite	cs
 8012ac4:	2000      	movcs	r0, #0
 8012ac6:	2001      	movcc	r0, #1
	}
 8012ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012acc:	24000fd0 	.word	0x24000fd0
 8012ad0:	24000fdc 	.word	0x24000fdc
 8012ad4:	24001450 	.word	0x24001450
 8012ad8:	24000010 	.word	0x24000010

08012adc <xTaskPriorityDisinherit>:
	{
 8012adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8012ade:	4604      	mov	r4, r0
 8012ae0:	b908      	cbnz	r0, 8012ae6 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8012ae2:	2000      	movs	r0, #0
	}
 8012ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8012ae6:	4b32      	ldr	r3, [pc, #200]	; (8012bb0 <xTaskPriorityDisinherit+0xd4>)
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	4283      	cmp	r3, r0
 8012aec:	d008      	beq.n	8012b00 <xTaskPriorityDisinherit+0x24>
 8012aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af2:	f383 8811 	msr	BASEPRI, r3
 8012af6:	f3bf 8f6f 	isb	sy
 8012afa:	f3bf 8f4f 	dsb	sy
 8012afe:	e7fe      	b.n	8012afe <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8012b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b02:	b943      	cbnz	r3, 8012b16 <xTaskPriorityDisinherit+0x3a>
 8012b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b08:	f383 8811 	msr	BASEPRI, r3
 8012b0c:	f3bf 8f6f 	isb	sy
 8012b10:	f3bf 8f4f 	dsb	sy
 8012b14:	e7fe      	b.n	8012b14 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012b16:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8012b18:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012b1a:	6d02      	ldr	r2, [r0, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 8012b1c:	6543      	str	r3, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012b1e:	4291      	cmp	r1, r2
 8012b20:	d0df      	beq.n	8012ae2 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d1dd      	bne.n	8012ae2 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b26:	1d06      	adds	r6, r0, #4
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8012b28:	4d22      	ldr	r5, [pc, #136]	; (8012bb4 <xTaskPriorityDisinherit+0xd8>)
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b2a:	4630      	mov	r0, r6
 8012b2c:	f7fd ffcd 	bl	8010aca <uxListRemove>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8012b30:	4620      	mov	r0, r4
 8012b32:	f7f2 fb00 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8012b36:	882a      	ldrh	r2, [r5, #0]
 8012b38:	4210      	tst	r0, r2
 8012b3a:	d019      	beq.n	8012b70 <xTaskPriorityDisinherit+0x94>
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	f7f2 faf5 	bl	800512c <prvTraceGetTaskNumberLow16>
 8012b42:	4607      	mov	r7, r0
 8012b44:	4620      	mov	r0, r4
 8012b46:	f7f2 faf1 	bl	800512c <prvTraceGetTaskNumberLow16>
 8012b4a:	b2c1      	uxtb	r1, r0
 8012b4c:	2003      	movs	r0, #3
 8012b4e:	f7f2 fe75 	bl	800583c <prvTraceGetPriorityProperty>
 8012b52:	2103      	movs	r1, #3
 8012b54:	4603      	mov	r3, r0
 8012b56:	b2fa      	uxtb	r2, r7
 8012b58:	208f      	movs	r0, #143	; 0x8f
 8012b5a:	f7f3 f9d1 	bl	8005f00 <prvTraceStoreKernelCallWithParam>
 8012b5e:	4620      	mov	r0, r4
 8012b60:	f7f2 fae4 	bl	800512c <prvTraceGetTaskNumberLow16>
 8012b64:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8012b68:	b2c1      	uxtb	r1, r0
 8012b6a:	2003      	movs	r0, #3
 8012b6c:	f7f2 fe40 	bl	80057f0 <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012b70:	6d23      	ldr	r3, [r4, #80]	; 0x50
					prvAddTaskToReadyList( pxTCB );
 8012b72:	4620      	mov	r0, r4
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012b74:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b76:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012b7a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8012b7c:	f7f2 fadb 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8012b80:	882b      	ldrh	r3, [r5, #0]
 8012b82:	4218      	tst	r0, r3
 8012b84:	d005      	beq.n	8012b92 <xTaskPriorityDisinherit+0xb6>
 8012b86:	4620      	mov	r0, r4
 8012b88:	f7f2 fad0 	bl	800512c <prvTraceGetTaskNumberLow16>
 8012b8c:	b2c0      	uxtb	r0, r0
 8012b8e:	f7f3 f8cf 	bl	8005d30 <prvTraceStoreTaskReady>
 8012b92:	4a09      	ldr	r2, [pc, #36]	; (8012bb8 <xTaskPriorityDisinherit+0xdc>)
 8012b94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012b96:	6811      	ldr	r1, [r2, #0]
 8012b98:	428b      	cmp	r3, r1
 8012b9a:	d900      	bls.n	8012b9e <xTaskPriorityDisinherit+0xc2>
 8012b9c:	6013      	str	r3, [r2, #0]
 8012b9e:	4a07      	ldr	r2, [pc, #28]	; (8012bbc <xTaskPriorityDisinherit+0xe0>)
 8012ba0:	2014      	movs	r0, #20
 8012ba2:	4631      	mov	r1, r6
 8012ba4:	fb00 2003 	mla	r0, r0, r3, r2
 8012ba8:	f7fd ff6c 	bl	8010a84 <vListInsertEnd>
					xReturn = pdTRUE;
 8012bac:	2001      	movs	r0, #1
		return xReturn;
 8012bae:	e799      	b.n	8012ae4 <xTaskPriorityDisinherit+0x8>
 8012bb0:	24000fd0 	.word	0x24000fd0
 8012bb4:	24000010 	.word	0x24000010
 8012bb8:	24001450 	.word	0x24001450
 8012bbc:	24000fdc 	.word	0x24000fdc

08012bc0 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8012bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8012bc2:	4604      	mov	r4, r0
 8012bc4:	2800      	cmp	r0, #0
 8012bc6:	d070      	beq.n	8012caa <vTaskPriorityDisinheritAfterTimeout+0xea>
			configASSERT( pxTCB->uxMutexesHeld );
 8012bc8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8012bca:	b943      	cbnz	r3, 8012bde <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8012bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd0:	f383 8811 	msr	BASEPRI, r3
 8012bd4:	f3bf 8f6f 	isb	sy
 8012bd8:	f3bf 8f4f 	dsb	sy
 8012bdc:	e7fe      	b.n	8012bdc <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8012bde:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8012be0:	4291      	cmp	r1, r2
 8012be2:	bf38      	it	cc
 8012be4:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012be6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8012be8:	428a      	cmp	r2, r1
 8012bea:	460d      	mov	r5, r1
 8012bec:	d05d      	beq.n	8012caa <vTaskPriorityDisinheritAfterTimeout+0xea>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012bee:	2b01      	cmp	r3, #1
 8012bf0:	d15b      	bne.n	8012caa <vTaskPriorityDisinheritAfterTimeout+0xea>
					configASSERT( pxTCB != pxCurrentTCB );
 8012bf2:	4b2e      	ldr	r3, [pc, #184]	; (8012cac <vTaskPriorityDisinheritAfterTimeout+0xec>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	4283      	cmp	r3, r0
 8012bf8:	d108      	bne.n	8012c0c <vTaskPriorityDisinheritAfterTimeout+0x4c>
 8012bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bfe:	f383 8811 	msr	BASEPRI, r3
 8012c02:	f3bf 8f6f 	isb	sy
 8012c06:	f3bf 8f4f 	dsb	sy
 8012c0a:	e7fe      	b.n	8012c0a <vTaskPriorityDisinheritAfterTimeout+0x4a>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8012c0c:	4e28      	ldr	r6, [pc, #160]	; (8012cb0 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
 8012c0e:	f7f2 fa92 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8012c12:	8833      	ldrh	r3, [r6, #0]
 8012c14:	4218      	tst	r0, r3
 8012c16:	d019      	beq.n	8012c4c <vTaskPriorityDisinheritAfterTimeout+0x8c>
 8012c18:	4620      	mov	r0, r4
 8012c1a:	f7f2 fa87 	bl	800512c <prvTraceGetTaskNumberLow16>
 8012c1e:	4607      	mov	r7, r0
 8012c20:	4620      	mov	r0, r4
 8012c22:	f7f2 fa83 	bl	800512c <prvTraceGetTaskNumberLow16>
 8012c26:	b2c1      	uxtb	r1, r0
 8012c28:	2003      	movs	r0, #3
 8012c2a:	f7f2 fe07 	bl	800583c <prvTraceGetPriorityProperty>
 8012c2e:	2103      	movs	r1, #3
 8012c30:	4603      	mov	r3, r0
 8012c32:	b2fa      	uxtb	r2, r7
 8012c34:	208f      	movs	r0, #143	; 0x8f
 8012c36:	f7f3 f963 	bl	8005f00 <prvTraceStoreKernelCallWithParam>
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	f7f2 fa76 	bl	800512c <prvTraceGetTaskNumberLow16>
 8012c40:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8012c44:	b2c1      	uxtb	r1, r0
 8012c46:	2003      	movs	r0, #3
 8012c48:	f7f2 fdd2 	bl	80057f0 <prvTraceSetPriorityProperty>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012c4c:	69a2      	ldr	r2, [r4, #24]
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012c4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012c50:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012c52:	4f18      	ldr	r7, [pc, #96]	; (8012cb4 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8012c54:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8012c58:	62e5      	str	r5, [r4, #44]	; 0x2c
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c5a:	bfa8      	it	ge
 8012c5c:	f1c5 0538 	rsbge	r5, r5, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012c60:	fb02 7303 	mla	r3, r2, r3, r7
 8012c64:	6962      	ldr	r2, [r4, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c66:	bfa8      	it	ge
 8012c68:	61a5      	strge	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d11d      	bne.n	8012caa <vTaskPriorityDisinheritAfterTimeout+0xea>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c6e:	1d25      	adds	r5, r4, #4
 8012c70:	4628      	mov	r0, r5
 8012c72:	f7fd ff2a 	bl	8010aca <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8012c76:	4620      	mov	r0, r4
 8012c78:	f7f2 fa5d 	bl	8005136 <prvTraceGetTaskNumberHigh16>
 8012c7c:	8833      	ldrh	r3, [r6, #0]
 8012c7e:	4218      	tst	r0, r3
 8012c80:	d005      	beq.n	8012c8e <vTaskPriorityDisinheritAfterTimeout+0xce>
 8012c82:	4620      	mov	r0, r4
 8012c84:	f7f2 fa52 	bl	800512c <prvTraceGetTaskNumberLow16>
 8012c88:	b2c0      	uxtb	r0, r0
 8012c8a:	f7f3 f851 	bl	8005d30 <prvTraceStoreTaskReady>
 8012c8e:	4a0a      	ldr	r2, [pc, #40]	; (8012cb8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012c90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012c92:	6811      	ldr	r1, [r2, #0]
 8012c94:	428b      	cmp	r3, r1
 8012c96:	d900      	bls.n	8012c9a <vTaskPriorityDisinheritAfterTimeout+0xda>
 8012c98:	6013      	str	r3, [r2, #0]
 8012c9a:	2014      	movs	r0, #20
 8012c9c:	4629      	mov	r1, r5
 8012c9e:	fb00 7003 	mla	r0, r0, r3, r7
	}
 8012ca2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8012ca6:	f7fd beed 	b.w	8010a84 <vListInsertEnd>
	}
 8012caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cac:	24000fd0 	.word	0x24000fd0
 8012cb0:	24000010 	.word	0x24000010
 8012cb4:	24000fdc 	.word	0x24000fdc
 8012cb8:	24001450 	.word	0x24001450

08012cbc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8012cbc:	4b04      	ldr	r3, [pc, #16]	; (8012cd0 <pvTaskIncrementMutexHeldCount+0x14>)
 8012cbe:	681a      	ldr	r2, [r3, #0]
 8012cc0:	b11a      	cbz	r2, 8012cca <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8012cc2:	6819      	ldr	r1, [r3, #0]
 8012cc4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8012cc6:	3201      	adds	r2, #1
 8012cc8:	654a      	str	r2, [r1, #84]	; 0x54
		return pxCurrentTCB;
 8012cca:	6818      	ldr	r0, [r3, #0]
	}
 8012ccc:	4770      	bx	lr
 8012cce:	bf00      	nop
 8012cd0:	24000fd0 	.word	0x24000fd0

08012cd4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8012cd6:	4c11      	ldr	r4, [pc, #68]	; (8012d1c <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8012cd8:	f000 fa64 	bl	80131a4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8012cdc:	6825      	ldr	r5, [r4, #0]
 8012cde:	b9bd      	cbnz	r5, 8012d10 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8012ce0:	4f0f      	ldr	r7, [pc, #60]	; (8012d20 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8012ce2:	4e10      	ldr	r6, [pc, #64]	; (8012d24 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8012ce4:	4638      	mov	r0, r7
 8012ce6:	f7fd febf 	bl	8010a68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012cea:	4630      	mov	r0, r6
 8012cec:	f7fd febc 	bl	8010a68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012cf0:	4b0d      	ldr	r3, [pc, #52]	; (8012d28 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012cf2:	4a0e      	ldr	r2, [pc, #56]	; (8012d2c <prvCheckForValidListAndQueue+0x58>)
 8012cf4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8012cf6:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012cf8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8012cfa:	4b0d      	ldr	r3, [pc, #52]	; (8012d30 <prvCheckForValidListAndQueue+0x5c>)
 8012cfc:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012cfe:	9500      	str	r5, [sp, #0]
 8012d00:	4b0c      	ldr	r3, [pc, #48]	; (8012d34 <prvCheckForValidListAndQueue+0x60>)
 8012d02:	f7fe f81d 	bl	8010d40 <xQueueGenericCreateStatic>
 8012d06:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012d08:	b110      	cbz	r0, 8012d10 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012d0a:	490b      	ldr	r1, [pc, #44]	; (8012d38 <prvCheckForValidListAndQueue+0x64>)
 8012d0c:	f7fe ffae 	bl	8011c6c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8012d10:	b003      	add	sp, #12
 8012d12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8012d16:	f000 ba67 	b.w	80131e8 <vPortExitCritical>
 8012d1a:	bf00      	nop
 8012d1c:	240015f0 	.word	0x240015f0
 8012d20:	24001574 	.word	0x24001574
 8012d24:	24001588 	.word	0x24001588
 8012d28:	240014cc 	.word	0x240014cc
 8012d2c:	240014d4 	.word	0x240014d4
 8012d30:	240014d0 	.word	0x240014d0
 8012d34:	240015a0 	.word	0x240015a0
 8012d38:	0801719c 	.word	0x0801719c

08012d3c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8012d3c:	4291      	cmp	r1, r2
{
 8012d3e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012d40:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012d42:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8012d44:	d80a      	bhi.n	8012d5c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d46:	1ad2      	subs	r2, r2, r3
 8012d48:	6983      	ldr	r3, [r0, #24]
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	d20d      	bcs.n	8012d6a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012d4e:	1d01      	adds	r1, r0, #4
 8012d50:	4b07      	ldr	r3, [pc, #28]	; (8012d70 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012d52:	6818      	ldr	r0, [r3, #0]
 8012d54:	f7fd fea2 	bl	8010a9c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8012d58:	2000      	movs	r0, #0
}
 8012d5a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012d5c:	429a      	cmp	r2, r3
 8012d5e:	d201      	bcs.n	8012d64 <prvInsertTimerInActiveList+0x28>
 8012d60:	4299      	cmp	r1, r3
 8012d62:	d202      	bcs.n	8012d6a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012d64:	1d01      	adds	r1, r0, #4
 8012d66:	4b03      	ldr	r3, [pc, #12]	; (8012d74 <prvInsertTimerInActiveList+0x38>)
 8012d68:	e7f3      	b.n	8012d52 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8012d6a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8012d6c:	e7f5      	b.n	8012d5a <prvInsertTimerInActiveList+0x1e>
 8012d6e:	bf00      	nop
 8012d70:	240014d0 	.word	0x240014d0
 8012d74:	240014cc 	.word	0x240014cc

08012d78 <xTimerCreateTimerTask>:
{
 8012d78:	b510      	push	{r4, lr}
 8012d7a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8012d7c:	f7ff ffaa 	bl	8012cd4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8012d80:	4b12      	ldr	r3, [pc, #72]	; (8012dcc <xTimerCreateTimerTask+0x54>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	b1b3      	cbz	r3, 8012db4 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012d86:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012d88:	aa07      	add	r2, sp, #28
 8012d8a:	a906      	add	r1, sp, #24
 8012d8c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012d8e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012d92:	f7fd fe5d 	bl	8010a50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012d96:	9b05      	ldr	r3, [sp, #20]
 8012d98:	9a07      	ldr	r2, [sp, #28]
 8012d9a:	9302      	str	r3, [sp, #8]
 8012d9c:	9b06      	ldr	r3, [sp, #24]
 8012d9e:	490c      	ldr	r1, [pc, #48]	; (8012dd0 <xTimerCreateTimerTask+0x58>)
 8012da0:	9301      	str	r3, [sp, #4]
 8012da2:	2302      	movs	r3, #2
 8012da4:	480b      	ldr	r0, [pc, #44]	; (8012dd4 <xTimerCreateTimerTask+0x5c>)
 8012da6:	9300      	str	r3, [sp, #0]
 8012da8:	4623      	mov	r3, r4
 8012daa:	f7ff f9df 	bl	801216c <xTaskCreateStatic>
 8012dae:	4b0a      	ldr	r3, [pc, #40]	; (8012dd8 <xTimerCreateTimerTask+0x60>)
 8012db0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8012db2:	b940      	cbnz	r0, 8012dc6 <xTimerCreateTimerTask+0x4e>
 8012db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db8:	f383 8811 	msr	BASEPRI, r3
 8012dbc:	f3bf 8f6f 	isb	sy
 8012dc0:	f3bf 8f4f 	dsb	sy
 8012dc4:	e7fe      	b.n	8012dc4 <xTimerCreateTimerTask+0x4c>
}
 8012dc6:	2001      	movs	r0, #1
 8012dc8:	b008      	add	sp, #32
 8012dca:	bd10      	pop	{r4, pc}
 8012dcc:	240015f0 	.word	0x240015f0
 8012dd0:	080171a1 	.word	0x080171a1
 8012dd4:	08012eb5 	.word	0x08012eb5
 8012dd8:	240015f4 	.word	0x240015f4

08012ddc <xTimerGenericCommand>:
{
 8012ddc:	b530      	push	{r4, r5, lr}
 8012dde:	4615      	mov	r5, r2
 8012de0:	b085      	sub	sp, #20
 8012de2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8012de4:	4603      	mov	r3, r0
 8012de6:	b940      	cbnz	r0, 8012dfa <xTimerGenericCommand+0x1e>
 8012de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dec:	f383 8811 	msr	BASEPRI, r3
 8012df0:	f3bf 8f6f 	isb	sy
 8012df4:	f3bf 8f4f 	dsb	sy
 8012df8:	e7fe      	b.n	8012df8 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8012dfa:	4c0d      	ldr	r4, [pc, #52]	; (8012e30 <xTimerGenericCommand+0x54>)
 8012dfc:	6820      	ldr	r0, [r4, #0]
 8012dfe:	b178      	cbz	r0, 8012e20 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012e00:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012e02:	9302      	str	r3, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012e04:	e9cd 1500 	strd	r1, r5, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012e08:	dc0c      	bgt.n	8012e24 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012e0a:	f7ff fde1 	bl	80129d0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012e0e:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012e10:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012e12:	4669      	mov	r1, sp
 8012e14:	6820      	ldr	r0, [r4, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012e16:	bf0c      	ite	eq
 8012e18:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012e1a:	461a      	movne	r2, r3
 8012e1c:	f7fe f84c 	bl	8010eb8 <xQueueGenericSend>
}
 8012e20:	b005      	add	sp, #20
 8012e22:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012e24:	2300      	movs	r3, #0
 8012e26:	4669      	mov	r1, sp
 8012e28:	f7fe fa00 	bl	801122c <xQueueGenericSendFromISR>
 8012e2c:	e7f8      	b.n	8012e20 <xTimerGenericCommand+0x44>
 8012e2e:	bf00      	nop
 8012e30:	240015f0 	.word	0x240015f0

08012e34 <prvSwitchTimerLists>:
{
 8012e34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012e38:	4d1c      	ldr	r5, [pc, #112]	; (8012eac <prvSwitchTimerLists+0x78>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012e3a:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012e3e:	682b      	ldr	r3, [r5, #0]
 8012e40:	681a      	ldr	r2, [r3, #0]
 8012e42:	b932      	cbnz	r2, 8012e52 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8012e44:	4a1a      	ldr	r2, [pc, #104]	; (8012eb0 <prvSwitchTimerLists+0x7c>)
 8012e46:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012e48:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8012e4a:	6029      	str	r1, [r5, #0]
}
 8012e4c:	b002      	add	sp, #8
 8012e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012e52:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e54:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012e56:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012e58:	1d27      	adds	r7, r4, #4
 8012e5a:	4638      	mov	r0, r7
 8012e5c:	f7fd fe35 	bl	8010aca <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e60:	6a23      	ldr	r3, [r4, #32]
 8012e62:	4620      	mov	r0, r4
 8012e64:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012e66:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012e6a:	075b      	lsls	r3, r3, #29
 8012e6c:	d5e7      	bpl.n	8012e3e <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012e6e:	69a3      	ldr	r3, [r4, #24]
 8012e70:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8012e72:	429e      	cmp	r6, r3
 8012e74:	d206      	bcs.n	8012e84 <prvSwitchTimerLists+0x50>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012e76:	6063      	str	r3, [r4, #4]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012e78:	4639      	mov	r1, r7
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012e7a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012e7c:	6828      	ldr	r0, [r5, #0]
 8012e7e:	f7fd fe0d 	bl	8010a9c <vListInsert>
 8012e82:	e7dc      	b.n	8012e3e <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012e84:	2300      	movs	r3, #0
 8012e86:	f8cd 8000 	str.w	r8, [sp]
 8012e8a:	4632      	mov	r2, r6
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	4619      	mov	r1, r3
 8012e90:	f7ff ffa4 	bl	8012ddc <xTimerGenericCommand>
				configASSERT( xResult );
 8012e94:	2800      	cmp	r0, #0
 8012e96:	d1d2      	bne.n	8012e3e <prvSwitchTimerLists+0xa>
 8012e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e9c:	f383 8811 	msr	BASEPRI, r3
 8012ea0:	f3bf 8f6f 	isb	sy
 8012ea4:	f3bf 8f4f 	dsb	sy
 8012ea8:	e7fe      	b.n	8012ea8 <prvSwitchTimerLists+0x74>
 8012eaa:	bf00      	nop
 8012eac:	240014cc 	.word	0x240014cc
 8012eb0:	240014d0 	.word	0x240014d0

08012eb4 <prvTimerTask>:
{
 8012eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012eb8:	4d81      	ldr	r5, [pc, #516]	; (80130c0 <prvTimerTask+0x20c>)
{
 8012eba:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 8012ebc:	f8df 820c 	ldr.w	r8, [pc, #524]	; 80130cc <prvTimerTask+0x218>
 8012ec0:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012ec2:	682a      	ldr	r2, [r5, #0]
 8012ec4:	6813      	ldr	r3, [r2, #0]
 8012ec6:	b353      	cbz	r3, 8012f1e <prvTimerTask+0x6a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012ec8:	68d3      	ldr	r3, [r2, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012eca:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012ecc:	f8d3 9000 	ldr.w	r9, [r3]
	if( xTimeNow < xLastTime )
 8012ed0:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80130d0 <prvTimerTask+0x21c>
	vTaskSuspendAll();
 8012ed4:	f7ff fa0a 	bl	80122ec <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8012ed8:	f7ff fa10 	bl	80122fc <xTaskGetTickCount>
 8012edc:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8012ede:	f8db 3000 	ldr.w	r3, [fp]
 8012ee2:	465e      	mov	r6, fp
 8012ee4:	4298      	cmp	r0, r3
 8012ee6:	d31d      	bcc.n	8012f24 <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 8012ee8:	f8cb 0000 	str.w	r0, [fp]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012eec:	b32c      	cbz	r4, 8012f3a <prvTimerTask+0x86>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012eee:	4b75      	ldr	r3, [pc, #468]	; (80130c4 <prvTimerTask+0x210>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	681a      	ldr	r2, [r3, #0]
 8012ef4:	fab2 f282 	clz	r2, r2
 8012ef8:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012efa:	4b73      	ldr	r3, [pc, #460]	; (80130c8 <prvTimerTask+0x214>)
 8012efc:	eba9 010a 	sub.w	r1, r9, sl
 8012f00:	6818      	ldr	r0, [r3, #0]
 8012f02:	f7fe ff63 	bl	8011dcc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012f06:	f7ff fabb 	bl	8012480 <xTaskResumeAll>
 8012f0a:	b988      	cbnz	r0, 8012f30 <prvTimerTask+0x7c>
					portYIELD_WITHIN_API();
 8012f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012f10:	f8c8 3000 	str.w	r3, [r8]
 8012f14:	f3bf 8f4f 	dsb	sy
 8012f18:	f3bf 8f6f 	isb	sy
 8012f1c:	e008      	b.n	8012f30 <prvTimerTask+0x7c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012f1e:	2401      	movs	r4, #1
		xNextExpireTime = ( TickType_t ) 0U;
 8012f20:	4699      	mov	r9, r3
 8012f22:	e7d5      	b.n	8012ed0 <prvTimerTask+0x1c>
		prvSwitchTimerLists();
 8012f24:	f7ff ff86 	bl	8012e34 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8012f28:	f8cb a000 	str.w	sl, [fp]
			( void ) xTaskResumeAll();
 8012f2c:	f7ff faa8 	bl	8012480 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012f30:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80130c8 <prvTimerTask+0x214>
 8012f34:	f04f 0a00 	mov.w	sl, #0
 8012f38:	e07d      	b.n	8013036 <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012f3a:	4581      	cmp	r9, r0
 8012f3c:	d830      	bhi.n	8012fa0 <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 8012f3e:	f7ff fa9f 	bl	8012480 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	68db      	ldr	r3, [r3, #12]
 8012f46:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012f4a:	f10b 0004 	add.w	r0, fp, #4
 8012f4e:	f7fd fdbc 	bl	8010aca <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012f52:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
 8012f56:	0758      	lsls	r0, r3, #29
 8012f58:	d519      	bpl.n	8012f8e <prvTimerTask+0xda>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012f5a:	f8db 1018 	ldr.w	r1, [fp, #24]
 8012f5e:	464b      	mov	r3, r9
 8012f60:	4652      	mov	r2, sl
 8012f62:	4658      	mov	r0, fp
 8012f64:	4449      	add	r1, r9
 8012f66:	f7ff fee9 	bl	8012d3c <prvInsertTimerInActiveList>
 8012f6a:	b1a0      	cbz	r0, 8012f96 <prvTimerTask+0xe2>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012f6c:	9400      	str	r4, [sp, #0]
 8012f6e:	4623      	mov	r3, r4
 8012f70:	464a      	mov	r2, r9
 8012f72:	4621      	mov	r1, r4
 8012f74:	4658      	mov	r0, fp
 8012f76:	f7ff ff31 	bl	8012ddc <xTimerGenericCommand>
			configASSERT( xResult );
 8012f7a:	b960      	cbnz	r0, 8012f96 <prvTimerTask+0xe2>
 8012f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f80:	f383 8811 	msr	BASEPRI, r3
 8012f84:	f3bf 8f6f 	isb	sy
 8012f88:	f3bf 8f4f 	dsb	sy
 8012f8c:	e7fe      	b.n	8012f8c <prvTimerTask+0xd8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012f8e:	f023 0301 	bic.w	r3, r3, #1
 8012f92:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012f96:	f8db 3020 	ldr.w	r3, [fp, #32]
 8012f9a:	4658      	mov	r0, fp
 8012f9c:	4798      	blx	r3
 8012f9e:	e7c7      	b.n	8012f30 <prvTimerTask+0x7c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012fa0:	4622      	mov	r2, r4
 8012fa2:	e7aa      	b.n	8012efa <prvTimerTask+0x46>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012fa4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012fa8:	465a      	mov	r2, fp
 8012faa:	69a1      	ldr	r1, [r4, #24]
 8012fac:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012fae:	f043 0301 	orr.w	r3, r3, #1
 8012fb2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012fb6:	9b03      	ldr	r3, [sp, #12]
 8012fb8:	4419      	add	r1, r3
 8012fba:	f7ff febf 	bl	8012d3c <prvInsertTimerInActiveList>
 8012fbe:	2800      	cmp	r0, #0
 8012fc0:	d039      	beq.n	8013036 <prvTimerTask+0x182>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012fc2:	6a23      	ldr	r3, [r4, #32]
 8012fc4:	4620      	mov	r0, r4
 8012fc6:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012fc8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012fcc:	0759      	lsls	r1, r3, #29
 8012fce:	d532      	bpl.n	8013036 <prvTimerTask+0x182>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012fd0:	69a2      	ldr	r2, [r4, #24]
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	9903      	ldr	r1, [sp, #12]
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	f8cd a000 	str.w	sl, [sp]
 8012fdc:	440a      	add	r2, r1
 8012fde:	4619      	mov	r1, r3
 8012fe0:	f7ff fefc 	bl	8012ddc <xTimerGenericCommand>
							configASSERT( xResult );
 8012fe4:	bb38      	cbnz	r0, 8013036 <prvTimerTask+0x182>
 8012fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fea:	f383 8811 	msr	BASEPRI, r3
 8012fee:	f3bf 8f6f 	isb	sy
 8012ff2:	f3bf 8f4f 	dsb	sy
 8012ff6:	e7fe      	b.n	8012ff6 <prvTimerTask+0x142>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012ff8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012ffc:	f023 0301 	bic.w	r3, r3, #1
 8013000:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8013004:	e017      	b.n	8013036 <prvTimerTask+0x182>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013006:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801300a:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801300c:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013010:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013012:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013016:	b941      	cbnz	r1, 801302a <prvTimerTask+0x176>
 8013018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801301c:	f383 8811 	msr	BASEPRI, r3
 8013020:	f3bf 8f6f 	isb	sy
 8013024:	f3bf 8f4f 	dsb	sy
 8013028:	e7fe      	b.n	8013028 <prvTimerTask+0x174>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801302a:	465b      	mov	r3, fp
 801302c:	465a      	mov	r2, fp
 801302e:	4459      	add	r1, fp
 8013030:	4620      	mov	r0, r4
 8013032:	f7ff fe83 	bl	8012d3c <prvInsertTimerInActiveList>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013036:	2200      	movs	r2, #0
 8013038:	a902      	add	r1, sp, #8
 801303a:	f8d9 0000 	ldr.w	r0, [r9]
 801303e:	f7fe fa61 	bl	8011504 <xQueueReceive>
 8013042:	2800      	cmp	r0, #0
 8013044:	f43f af3d 	beq.w	8012ec2 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013048:	9b02      	ldr	r3, [sp, #8]
 801304a:	2b00      	cmp	r3, #0
 801304c:	da03      	bge.n	8013056 <prvTimerTask+0x1a2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801304e:	9b03      	ldr	r3, [sp, #12]
 8013050:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013054:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013056:	9b02      	ldr	r3, [sp, #8]
 8013058:	2b00      	cmp	r3, #0
 801305a:	dbec      	blt.n	8013036 <prvTimerTask+0x182>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801305c:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801305e:	6963      	ldr	r3, [r4, #20]
 8013060:	b113      	cbz	r3, 8013068 <prvTimerTask+0x1b4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013062:	1d20      	adds	r0, r4, #4
 8013064:	f7fd fd31 	bl	8010aca <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8013068:	f7ff f948 	bl	80122fc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 801306c:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 801306e:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8013070:	4298      	cmp	r0, r3
 8013072:	d201      	bcs.n	8013078 <prvTimerTask+0x1c4>
		prvSwitchTimerLists();
 8013074:	f7ff fede 	bl	8012e34 <prvSwitchTimerLists>
			switch( xMessage.xMessageID )
 8013078:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 801307a:	f8c6 b000 	str.w	fp, [r6]
			switch( xMessage.xMessageID )
 801307e:	2b09      	cmp	r3, #9
 8013080:	d8d9      	bhi.n	8013036 <prvTimerTask+0x182>
 8013082:	a201      	add	r2, pc, #4	; (adr r2, 8013088 <prvTimerTask+0x1d4>)
 8013084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013088:	08012fa5 	.word	0x08012fa5
 801308c:	08012fa5 	.word	0x08012fa5
 8013090:	08012fa5 	.word	0x08012fa5
 8013094:	08012ff9 	.word	0x08012ff9
 8013098:	08013007 	.word	0x08013007
 801309c:	080130b1 	.word	0x080130b1
 80130a0:	08012fa5 	.word	0x08012fa5
 80130a4:	08012fa5 	.word	0x08012fa5
 80130a8:	08012ff9 	.word	0x08012ff9
 80130ac:	08013007 	.word	0x08013007
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80130b0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80130b4:	079a      	lsls	r2, r3, #30
 80130b6:	d4a1      	bmi.n	8012ffc <prvTimerTask+0x148>
							vPortFree( pxTimer );
 80130b8:	4620      	mov	r0, r4
 80130ba:	f000 fa7b 	bl	80135b4 <vPortFree>
 80130be:	e7ba      	b.n	8013036 <prvTimerTask+0x182>
 80130c0:	240014cc 	.word	0x240014cc
 80130c4:	240014d0 	.word	0x240014d0
 80130c8:	240015f0 	.word	0x240015f0
 80130cc:	e000ed04 	.word	0xe000ed04
 80130d0:	2400159c 	.word	0x2400159c

080130d4 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 80130d4:	2300      	movs	r3, #0
{
 80130d6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80130d8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80130da:	4b0d      	ldr	r3, [pc, #52]	; (8013110 <prvTaskExitError+0x3c>)
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	3301      	adds	r3, #1
 80130e0:	d008      	beq.n	80130f4 <prvTaskExitError+0x20>
 80130e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e6:	f383 8811 	msr	BASEPRI, r3
 80130ea:	f3bf 8f6f 	isb	sy
 80130ee:	f3bf 8f4f 	dsb	sy
 80130f2:	e7fe      	b.n	80130f2 <prvTaskExitError+0x1e>
 80130f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f8:	f383 8811 	msr	BASEPRI, r3
 80130fc:	f3bf 8f6f 	isb	sy
 8013100:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013104:	9b01      	ldr	r3, [sp, #4]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d0fc      	beq.n	8013104 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801310a:	b002      	add	sp, #8
 801310c:	4770      	bx	lr
 801310e:	bf00      	nop
 8013110:	24000134 	.word	0x24000134

08013114 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013114:	4808      	ldr	r0, [pc, #32]	; (8013138 <prvPortStartFirstTask+0x24>)
 8013116:	6800      	ldr	r0, [r0, #0]
 8013118:	6800      	ldr	r0, [r0, #0]
 801311a:	f380 8808 	msr	MSP, r0
 801311e:	f04f 0000 	mov.w	r0, #0
 8013122:	f380 8814 	msr	CONTROL, r0
 8013126:	b662      	cpsie	i
 8013128:	b661      	cpsie	f
 801312a:	f3bf 8f4f 	dsb	sy
 801312e:	f3bf 8f6f 	isb	sy
 8013132:	df00      	svc	0
 8013134:	bf00      	nop
 8013136:	0000      	.short	0x0000
 8013138:	e000ed08 	.word	0xe000ed08

0801313c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801313c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801314c <vPortEnableVFP+0x10>
 8013140:	6801      	ldr	r1, [r0, #0]
 8013142:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013146:	6001      	str	r1, [r0, #0]
 8013148:	4770      	bx	lr
 801314a:	0000      	.short	0x0000
 801314c:	e000ed88 	.word	0xe000ed88

08013150 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013154:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013158:	f840 2c20 	str.w	r2, [r0, #-32]
}
 801315c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801315e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013160:	4b03      	ldr	r3, [pc, #12]	; (8013170 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013162:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013164:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013166:	f06f 0302 	mvn.w	r3, #2
 801316a:	6203      	str	r3, [r0, #32]
}
 801316c:	4770      	bx	lr
 801316e:	bf00      	nop
 8013170:	080130d5 	.word	0x080130d5
	...

08013180 <SVC_Handler>:
	__asm volatile (
 8013180:	4b07      	ldr	r3, [pc, #28]	; (80131a0 <pxCurrentTCBConst2>)
 8013182:	6819      	ldr	r1, [r3, #0]
 8013184:	6808      	ldr	r0, [r1, #0]
 8013186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801318a:	f380 8809 	msr	PSP, r0
 801318e:	f3bf 8f6f 	isb	sy
 8013192:	f04f 0000 	mov.w	r0, #0
 8013196:	f380 8811 	msr	BASEPRI, r0
 801319a:	4770      	bx	lr
 801319c:	f3af 8000 	nop.w

080131a0 <pxCurrentTCBConst2>:
 80131a0:	24000fd0 	.word	0x24000fd0

080131a4 <vPortEnterCritical>:
 80131a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a8:	f383 8811 	msr	BASEPRI, r3
 80131ac:	f3bf 8f6f 	isb	sy
 80131b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80131b4:	4a0a      	ldr	r2, [pc, #40]	; (80131e0 <vPortEnterCritical+0x3c>)
 80131b6:	6813      	ldr	r3, [r2, #0]
 80131b8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80131ba:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80131bc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80131be:	d10d      	bne.n	80131dc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80131c0:	4b08      	ldr	r3, [pc, #32]	; (80131e4 <vPortEnterCritical+0x40>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80131c8:	d008      	beq.n	80131dc <vPortEnterCritical+0x38>
 80131ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ce:	f383 8811 	msr	BASEPRI, r3
 80131d2:	f3bf 8f6f 	isb	sy
 80131d6:	f3bf 8f4f 	dsb	sy
 80131da:	e7fe      	b.n	80131da <vPortEnterCritical+0x36>
}
 80131dc:	4770      	bx	lr
 80131de:	bf00      	nop
 80131e0:	24000134 	.word	0x24000134
 80131e4:	e000ed04 	.word	0xe000ed04

080131e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80131e8:	4a08      	ldr	r2, [pc, #32]	; (801320c <vPortExitCritical+0x24>)
 80131ea:	6813      	ldr	r3, [r2, #0]
 80131ec:	b943      	cbnz	r3, 8013200 <vPortExitCritical+0x18>
 80131ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131f2:	f383 8811 	msr	BASEPRI, r3
 80131f6:	f3bf 8f6f 	isb	sy
 80131fa:	f3bf 8f4f 	dsb	sy
 80131fe:	e7fe      	b.n	80131fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8013200:	3b01      	subs	r3, #1
 8013202:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013204:	b90b      	cbnz	r3, 801320a <vPortExitCritical+0x22>
	__asm volatile
 8013206:	f383 8811 	msr	BASEPRI, r3
}
 801320a:	4770      	bx	lr
 801320c:	24000134 	.word	0x24000134

08013210 <PendSV_Handler>:
	__asm volatile
 8013210:	f3ef 8009 	mrs	r0, PSP
 8013214:	f3bf 8f6f 	isb	sy
 8013218:	4b15      	ldr	r3, [pc, #84]	; (8013270 <pxCurrentTCBConst>)
 801321a:	681a      	ldr	r2, [r3, #0]
 801321c:	f01e 0f10 	tst.w	lr, #16
 8013220:	bf08      	it	eq
 8013222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801322a:	6010      	str	r0, [r2, #0]
 801322c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013234:	f380 8811 	msr	BASEPRI, r0
 8013238:	f3bf 8f4f 	dsb	sy
 801323c:	f3bf 8f6f 	isb	sy
 8013240:	f7ff fa5a 	bl	80126f8 <vTaskSwitchContext>
 8013244:	f04f 0000 	mov.w	r0, #0
 8013248:	f380 8811 	msr	BASEPRI, r0
 801324c:	bc09      	pop	{r0, r3}
 801324e:	6819      	ldr	r1, [r3, #0]
 8013250:	6808      	ldr	r0, [r1, #0]
 8013252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013256:	f01e 0f10 	tst.w	lr, #16
 801325a:	bf08      	it	eq
 801325c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013260:	f380 8809 	msr	PSP, r0
 8013264:	f3bf 8f6f 	isb	sy
 8013268:	4770      	bx	lr
 801326a:	bf00      	nop
 801326c:	f3af 8000 	nop.w

08013270 <pxCurrentTCBConst>:
 8013270:	24000fd0 	.word	0x24000fd0

08013274 <xPortSysTickHandler>:
{
 8013274:	b508      	push	{r3, lr}
	__asm volatile
 8013276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801327a:	f383 8811 	msr	BASEPRI, r3
 801327e:	f3bf 8f6f 	isb	sy
 8013282:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8013286:	f7ff f847 	bl	8012318 <xTaskIncrementTick>
 801328a:	b118      	cbz	r0, 8013294 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801328c:	4b03      	ldr	r3, [pc, #12]	; (801329c <xPortSysTickHandler+0x28>)
 801328e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013292:	601a      	str	r2, [r3, #0]
	__asm volatile
 8013294:	2300      	movs	r3, #0
 8013296:	f383 8811 	msr	BASEPRI, r3
}
 801329a:	bd08      	pop	{r3, pc}
 801329c:	e000ed04 	.word	0xe000ed04

080132a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80132a0:	2300      	movs	r3, #0
 80132a2:	4a08      	ldr	r2, [pc, #32]	; (80132c4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80132a4:	4908      	ldr	r1, [pc, #32]	; (80132c8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80132a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80132a8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80132aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80132ae:	4b07      	ldr	r3, [pc, #28]	; (80132cc <vPortSetupTimerInterrupt+0x2c>)
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80132b6:	4906      	ldr	r1, [pc, #24]	; (80132d0 <vPortSetupTimerInterrupt+0x30>)
 80132b8:	3b01      	subs	r3, #1
 80132ba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80132bc:	2307      	movs	r3, #7
 80132be:	6013      	str	r3, [r2, #0]
}
 80132c0:	4770      	bx	lr
 80132c2:	bf00      	nop
 80132c4:	e000e010 	.word	0xe000e010
 80132c8:	e000e018 	.word	0xe000e018
 80132cc:	24000000 	.word	0x24000000
 80132d0:	e000e014 	.word	0xe000e014

080132d4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80132d4:	4b38      	ldr	r3, [pc, #224]	; (80133b8 <xPortStartScheduler+0xe4>)
 80132d6:	4a39      	ldr	r2, [pc, #228]	; (80133bc <xPortStartScheduler+0xe8>)
{
 80132d8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80132da:	6819      	ldr	r1, [r3, #0]
 80132dc:	4291      	cmp	r1, r2
 80132de:	d108      	bne.n	80132f2 <xPortStartScheduler+0x1e>
	__asm volatile
 80132e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132e4:	f383 8811 	msr	BASEPRI, r3
 80132e8:	f3bf 8f6f 	isb	sy
 80132ec:	f3bf 8f4f 	dsb	sy
 80132f0:	e7fe      	b.n	80132f0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80132f2:	681a      	ldr	r2, [r3, #0]
 80132f4:	4b32      	ldr	r3, [pc, #200]	; (80133c0 <xPortStartScheduler+0xec>)
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d108      	bne.n	801330c <xPortStartScheduler+0x38>
 80132fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132fe:	f383 8811 	msr	BASEPRI, r3
 8013302:	f3bf 8f6f 	isb	sy
 8013306:	f3bf 8f4f 	dsb	sy
 801330a:	e7fe      	b.n	801330a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801330c:	4b2d      	ldr	r3, [pc, #180]	; (80133c4 <xPortStartScheduler+0xf0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801330e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013310:	781a      	ldrb	r2, [r3, #0]
 8013312:	b2d2      	uxtb	r2, r2
 8013314:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013316:	22ff      	movs	r2, #255	; 0xff
 8013318:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801331a:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801331c:	4a2a      	ldr	r2, [pc, #168]	; (80133c8 <xPortStartScheduler+0xf4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801331e:	b2db      	uxtb	r3, r3
 8013320:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013324:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013328:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801332c:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801332e:	2207      	movs	r2, #7
 8013330:	4b26      	ldr	r3, [pc, #152]	; (80133cc <xPortStartScheduler+0xf8>)
 8013332:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013334:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013338:	1e54      	subs	r4, r2, #1
 801333a:	0600      	lsls	r0, r0, #24
 801333c:	d40d      	bmi.n	801335a <xPortStartScheduler+0x86>
 801333e:	b101      	cbz	r1, 8013342 <xPortStartScheduler+0x6e>
 8013340:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8013342:	681a      	ldr	r2, [r3, #0]
 8013344:	2a03      	cmp	r2, #3
 8013346:	d011      	beq.n	801336c <xPortStartScheduler+0x98>
 8013348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801334c:	f383 8811 	msr	BASEPRI, r3
 8013350:	f3bf 8f6f 	isb	sy
 8013354:	f3bf 8f4f 	dsb	sy
 8013358:	e7fe      	b.n	8013358 <xPortStartScheduler+0x84>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801335a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801335e:	2101      	movs	r1, #1
 8013360:	0052      	lsls	r2, r2, #1
 8013362:	b2d2      	uxtb	r2, r2
 8013364:	f88d 2003 	strb.w	r2, [sp, #3]
 8013368:	4622      	mov	r2, r4
 801336a:	e7e3      	b.n	8013334 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801336c:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 801336e:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013370:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8013374:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013376:	9b01      	ldr	r3, [sp, #4]
 8013378:	4a12      	ldr	r2, [pc, #72]	; (80133c4 <xPortStartScheduler+0xf0>)
 801337a:	b2db      	uxtb	r3, r3
 801337c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801337e:	4b14      	ldr	r3, [pc, #80]	; (80133d0 <xPortStartScheduler+0xfc>)
 8013380:	681a      	ldr	r2, [r3, #0]
 8013382:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8013386:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013388:	681a      	ldr	r2, [r3, #0]
 801338a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 801338e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8013390:	f7ff ff86 	bl	80132a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8013394:	4b0f      	ldr	r3, [pc, #60]	; (80133d4 <xPortStartScheduler+0x100>)
 8013396:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8013398:	f7ff fed0 	bl	801313c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801339c:	4a0e      	ldr	r2, [pc, #56]	; (80133d8 <xPortStartScheduler+0x104>)
 801339e:	6813      	ldr	r3, [r2, #0]
 80133a0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80133a4:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80133a6:	f7ff feb5 	bl	8013114 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80133aa:	f7ff f9a5 	bl	80126f8 <vTaskSwitchContext>
	prvTaskExitError();
 80133ae:	f7ff fe91 	bl	80130d4 <prvTaskExitError>
}
 80133b2:	4620      	mov	r0, r4
 80133b4:	b002      	add	sp, #8
 80133b6:	bd10      	pop	{r4, pc}
 80133b8:	e000ed00 	.word	0xe000ed00
 80133bc:	410fc271 	.word	0x410fc271
 80133c0:	410fc270 	.word	0x410fc270
 80133c4:	e000e400 	.word	0xe000e400
 80133c8:	240015f8 	.word	0x240015f8
 80133cc:	240015fc 	.word	0x240015fc
 80133d0:	e000ed20 	.word	0xe000ed20
 80133d4:	24000134 	.word	0x24000134
 80133d8:	e000ef34 	.word	0xe000ef34

080133dc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80133dc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80133e0:	2b0f      	cmp	r3, #15
 80133e2:	d90e      	bls.n	8013402 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80133e4:	4a10      	ldr	r2, [pc, #64]	; (8013428 <vPortValidateInterruptPriority+0x4c>)
 80133e6:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80133e8:	4a10      	ldr	r2, [pc, #64]	; (801342c <vPortValidateInterruptPriority+0x50>)
 80133ea:	7812      	ldrb	r2, [r2, #0]
 80133ec:	429a      	cmp	r2, r3
 80133ee:	d908      	bls.n	8013402 <vPortValidateInterruptPriority+0x26>
 80133f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133f4:	f383 8811 	msr	BASEPRI, r3
 80133f8:	f3bf 8f6f 	isb	sy
 80133fc:	f3bf 8f4f 	dsb	sy
 8013400:	e7fe      	b.n	8013400 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013402:	4b0b      	ldr	r3, [pc, #44]	; (8013430 <vPortValidateInterruptPriority+0x54>)
 8013404:	4a0b      	ldr	r2, [pc, #44]	; (8013434 <vPortValidateInterruptPriority+0x58>)
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	6812      	ldr	r2, [r2, #0]
 801340a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801340e:	4293      	cmp	r3, r2
 8013410:	d908      	bls.n	8013424 <vPortValidateInterruptPriority+0x48>
 8013412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013416:	f383 8811 	msr	BASEPRI, r3
 801341a:	f3bf 8f6f 	isb	sy
 801341e:	f3bf 8f4f 	dsb	sy
 8013422:	e7fe      	b.n	8013422 <vPortValidateInterruptPriority+0x46>
	}
 8013424:	4770      	bx	lr
 8013426:	bf00      	nop
 8013428:	e000e3f0 	.word	0xe000e3f0
 801342c:	240015f8 	.word	0x240015f8
 8013430:	e000ed0c 	.word	0xe000ed0c
 8013434:	240015fc 	.word	0x240015fc

08013438 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013438:	4b0f      	ldr	r3, [pc, #60]	; (8013478 <prvInsertBlockIntoFreeList+0x40>)
{
 801343a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801343c:	681a      	ldr	r2, [r3, #0]
 801343e:	4282      	cmp	r2, r0
 8013440:	d318      	bcc.n	8013474 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013442:	685c      	ldr	r4, [r3, #4]
 8013444:	1919      	adds	r1, r3, r4
 8013446:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013448:	bf01      	itttt	eq
 801344a:	6841      	ldreq	r1, [r0, #4]
 801344c:	4618      	moveq	r0, r3
 801344e:	1909      	addeq	r1, r1, r4
 8013450:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013452:	6844      	ldr	r4, [r0, #4]
 8013454:	1901      	adds	r1, r0, r4
 8013456:	428a      	cmp	r2, r1
 8013458:	d107      	bne.n	801346a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801345a:	4908      	ldr	r1, [pc, #32]	; (801347c <prvInsertBlockIntoFreeList+0x44>)
 801345c:	6809      	ldr	r1, [r1, #0]
 801345e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013460:	bf1f      	itttt	ne
 8013462:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013464:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013466:	1909      	addne	r1, r1, r4
 8013468:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801346a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801346c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801346e:	bf18      	it	ne
 8013470:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013472:	bd10      	pop	{r4, pc}
 8013474:	4613      	mov	r3, r2
 8013476:	e7e1      	b.n	801343c <prvInsertBlockIntoFreeList+0x4>
 8013478:	24008e10 	.word	0x24008e10
 801347c:	24001600 	.word	0x24001600

08013480 <pvPortMalloc>:
{
 8013480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013484:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8013486:	f7fe ff31 	bl	80122ec <vTaskSuspendAll>
		if( pxEnd == NULL )
 801348a:	4944      	ldr	r1, [pc, #272]	; (801359c <pvPortMalloc+0x11c>)
 801348c:	4d44      	ldr	r5, [pc, #272]	; (80135a0 <pvPortMalloc+0x120>)
 801348e:	680b      	ldr	r3, [r1, #0]
 8013490:	bb03      	cbnz	r3, 80134d4 <pvPortMalloc+0x54>
	uxAddress = ( size_t ) ucHeap;
 8013492:	4a44      	ldr	r2, [pc, #272]	; (80135a4 <pvPortMalloc+0x124>)
	xStart.xBlockSize = ( size_t ) 0;
 8013494:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013496:	0756      	lsls	r6, r2, #29
 8013498:	f502 43f0 	add.w	r3, r2, #30720	; 0x7800
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801349c:	4e42      	ldr	r6, [pc, #264]	; (80135a8 <pvPortMalloc+0x128>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801349e:	bf14      	ite	ne
 80134a0:	3207      	addne	r2, #7
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80134a2:	f44f 43f0 	moveq.w	r3, #30720	; 0x7800
	xStart.xBlockSize = ( size_t ) 0;
 80134a6:	6070      	str	r0, [r6, #4]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80134a8:	bf1c      	itt	ne
 80134aa:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80134ae:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80134b0:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80134b2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80134b4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80134b6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 80134ba:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80134be:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 80134c0:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80134c2:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80134c6:	4b39      	ldr	r3, [pc, #228]	; (80135ac <pvPortMalloc+0x12c>)
 80134c8:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80134ca:	4b39      	ldr	r3, [pc, #228]	; (80135b0 <pvPortMalloc+0x130>)
 80134cc:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80134ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80134d2:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80134d4:	f8d5 8000 	ldr.w	r8, [r5]
 80134d8:	ea18 0f04 	tst.w	r8, r4
 80134dc:	d153      	bne.n	8013586 <pvPortMalloc+0x106>
			if( xWantedSize > 0 )
 80134de:	2c00      	cmp	r4, #0
 80134e0:	d051      	beq.n	8013586 <pvPortMalloc+0x106>
				xWantedSize += xHeapStructSize;
 80134e2:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80134e4:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80134e6:	bf1c      	itt	ne
 80134e8:	f024 0407 	bicne.w	r4, r4, #7
 80134ec:	3408      	addne	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80134ee:	2c00      	cmp	r4, #0
 80134f0:	d049      	beq.n	8013586 <pvPortMalloc+0x106>
 80134f2:	4b2f      	ldr	r3, [pc, #188]	; (80135b0 <pvPortMalloc+0x130>)
 80134f4:	681f      	ldr	r7, [r3, #0]
 80134f6:	4699      	mov	r9, r3
 80134f8:	42a7      	cmp	r7, r4
 80134fa:	d344      	bcc.n	8013586 <pvPortMalloc+0x106>
				pxBlock = xStart.pxNextFreeBlock;
 80134fc:	4b2a      	ldr	r3, [pc, #168]	; (80135a8 <pvPortMalloc+0x128>)
 80134fe:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013500:	6868      	ldr	r0, [r5, #4]
 8013502:	42a0      	cmp	r0, r4
 8013504:	d201      	bcs.n	801350a <pvPortMalloc+0x8a>
 8013506:	682a      	ldr	r2, [r5, #0]
 8013508:	b9aa      	cbnz	r2, 8013536 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 801350a:	680a      	ldr	r2, [r1, #0]
 801350c:	42aa      	cmp	r2, r5
 801350e:	d03a      	beq.n	8013586 <pvPortMalloc+0x106>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013510:	682a      	ldr	r2, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013512:	681e      	ldr	r6, [r3, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013514:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013516:	1b03      	subs	r3, r0, r4
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013518:	3608      	adds	r6, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801351a:	2b10      	cmp	r3, #16
 801351c:	d912      	bls.n	8013544 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801351e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013520:	0742      	lsls	r2, r0, #29
 8013522:	d00b      	beq.n	801353c <pvPortMalloc+0xbc>
 8013524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013528:	f383 8811 	msr	BASEPRI, r3
 801352c:	f3bf 8f6f 	isb	sy
 8013530:	f3bf 8f4f 	dsb	sy
 8013534:	e7fe      	b.n	8013534 <pvPortMalloc+0xb4>
 8013536:	462b      	mov	r3, r5
 8013538:	4615      	mov	r5, r2
 801353a:	e7e1      	b.n	8013500 <pvPortMalloc+0x80>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801353c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801353e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013540:	f7ff ff7a 	bl	8013438 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013544:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013546:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013548:	4918      	ldr	r1, [pc, #96]	; (80135ac <pvPortMalloc+0x12c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801354a:	1abf      	subs	r7, r7, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801354c:	ea48 0202 	orr.w	r2, r8, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013550:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013552:	f8c9 7000 	str.w	r7, [r9]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013556:	4287      	cmp	r7, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013558:	606a      	str	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801355a:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801355c:	bf38      	it	cc
 801355e:	600f      	strcc	r7, [r1, #0]
		traceMALLOC( pvReturn, xWantedSize );
 8013560:	b18e      	cbz	r6, 8013586 <pvPortMalloc+0x106>
 8013562:	4622      	mov	r2, r4
 8013564:	4631      	mov	r1, r6
 8013566:	2094      	movs	r0, #148	; 0x94
 8013568:	f7f2 fc1e 	bl	8005da8 <vTraceStoreMemMangEvent>
	( void ) xTaskResumeAll();
 801356c:	f7fe ff88 	bl	8012480 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013570:	0773      	lsls	r3, r6, #29
 8013572:	d00f      	beq.n	8013594 <pvPortMalloc+0x114>
 8013574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013578:	f383 8811 	msr	BASEPRI, r3
 801357c:	f3bf 8f6f 	isb	sy
 8013580:	f3bf 8f4f 	dsb	sy
 8013584:	e7fe      	b.n	8013584 <pvPortMalloc+0x104>
		traceMALLOC( pvReturn, xWantedSize );
 8013586:	4622      	mov	r2, r4
 8013588:	2100      	movs	r1, #0
 801358a:	20e8      	movs	r0, #232	; 0xe8
 801358c:	2600      	movs	r6, #0
 801358e:	f7f2 fc0b 	bl	8005da8 <vTraceStoreMemMangEvent>
 8013592:	e7eb      	b.n	801356c <pvPortMalloc+0xec>
}
 8013594:	4630      	mov	r0, r6
 8013596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801359a:	bf00      	nop
 801359c:	24001600 	.word	0x24001600
 80135a0:	24008e04 	.word	0x24008e04
 80135a4:	24001604 	.word	0x24001604
 80135a8:	24008e10 	.word	0x24008e10
 80135ac:	24008e0c 	.word	0x24008e0c
 80135b0:	24008e08 	.word	0x24008e08

080135b4 <vPortFree>:
{
 80135b4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80135b6:	4604      	mov	r4, r0
 80135b8:	b398      	cbz	r0, 8013622 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80135ba:	4a1a      	ldr	r2, [pc, #104]	; (8013624 <vPortFree+0x70>)
 80135bc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80135c0:	6812      	ldr	r2, [r2, #0]
 80135c2:	4213      	tst	r3, r2
 80135c4:	d108      	bne.n	80135d8 <vPortFree+0x24>
 80135c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ca:	f383 8811 	msr	BASEPRI, r3
 80135ce:	f3bf 8f6f 	isb	sy
 80135d2:	f3bf 8f4f 	dsb	sy
 80135d6:	e7fe      	b.n	80135d6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80135d8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80135dc:	b141      	cbz	r1, 80135f0 <vPortFree+0x3c>
 80135de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e2:	f383 8811 	msr	BASEPRI, r3
 80135e6:	f3bf 8f6f 	isb	sy
 80135ea:	f3bf 8f4f 	dsb	sy
 80135ee:	e7fe      	b.n	80135ee <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80135f0:	ea23 0302 	bic.w	r3, r3, r2
 80135f4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80135f8:	f7fe fe78 	bl	80122ec <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80135fc:	490a      	ldr	r1, [pc, #40]	; (8013628 <vPortFree+0x74>)
 80135fe:	f854 2c04 	ldr.w	r2, [r4, #-4]
					traceFREE( pv, pxLink->xBlockSize );
 8013602:	2096      	movs	r0, #150	; 0x96
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013604:	680b      	ldr	r3, [r1, #0]
 8013606:	4413      	add	r3, r2
					traceFREE( pv, pxLink->xBlockSize );
 8013608:	4252      	negs	r2, r2
					xFreeBytesRemaining += pxLink->xBlockSize;
 801360a:	600b      	str	r3, [r1, #0]
					traceFREE( pv, pxLink->xBlockSize );
 801360c:	4621      	mov	r1, r4
 801360e:	f7f2 fbcb 	bl	8005da8 <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013612:	f1a4 0008 	sub.w	r0, r4, #8
 8013616:	f7ff ff0f 	bl	8013438 <prvInsertBlockIntoFreeList>
}
 801361a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 801361e:	f7fe bf2f 	b.w	8012480 <xTaskResumeAll>
}
 8013622:	bd10      	pop	{r4, pc}
 8013624:	24008e04 	.word	0x24008e04
 8013628:	24008e08 	.word	0x24008e08

0801362c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801362c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801362e:	2200      	movs	r2, #0
 8013630:	490f      	ldr	r1, [pc, #60]	; (8013670 <MX_USB_DEVICE_Init+0x44>)
 8013632:	4810      	ldr	r0, [pc, #64]	; (8013674 <MX_USB_DEVICE_Init+0x48>)
 8013634:	f7fa fed4 	bl	800e3e0 <USBD_Init>
 8013638:	b108      	cbz	r0, 801363e <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 801363a:	f7ef fe89 	bl	8003350 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801363e:	490e      	ldr	r1, [pc, #56]	; (8013678 <MX_USB_DEVICE_Init+0x4c>)
 8013640:	480c      	ldr	r0, [pc, #48]	; (8013674 <MX_USB_DEVICE_Init+0x48>)
 8013642:	f7fa fee5 	bl	800e410 <USBD_RegisterClass>
 8013646:	b108      	cbz	r0, 801364c <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8013648:	f7ef fe82 	bl	8003350 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801364c:	490b      	ldr	r1, [pc, #44]	; (801367c <MX_USB_DEVICE_Init+0x50>)
 801364e:	4809      	ldr	r0, [pc, #36]	; (8013674 <MX_USB_DEVICE_Init+0x48>)
 8013650:	f7fa fe86 	bl	800e360 <USBD_CDC_RegisterInterface>
 8013654:	b108      	cbz	r0, 801365a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8013656:	f7ef fe7b 	bl	8003350 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801365a:	4806      	ldr	r0, [pc, #24]	; (8013674 <MX_USB_DEVICE_Init+0x48>)
 801365c:	f7fa feeb 	bl	800e436 <USBD_Start>
 8013660:	b108      	cbz	r0, 8013666 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8013662:	f7ef fe75 	bl	8003350 <Error_Handler>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 801366a:	f7f5 bc49 	b.w	8008f00 <HAL_PWREx_EnableUSBVoltageDetector>
 801366e:	bf00      	nop
 8013670:	2400014c 	.word	0x2400014c
 8013674:	24020ea0 	.word	0x24020ea0
 8013678:	24000024 	.word	0x24000024
 801367c:	24000138 	.word	0x24000138

08013680 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8013680:	2000      	movs	r0, #0
 8013682:	4770      	bx	lr

08013684 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8013684:	2000      	movs	r0, #0
 8013686:	4770      	bx	lr

08013688 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8013688:	2000      	movs	r0, #0
 801368a:	4770      	bx	lr

0801368c <CDC_Receive_FS>:
{
 801368c:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801368e:	4c05      	ldr	r4, [pc, #20]	; (80136a4 <CDC_Receive_FS+0x18>)
 8013690:	4601      	mov	r1, r0
 8013692:	4620      	mov	r0, r4
 8013694:	f7fa fe73 	bl	800e37e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013698:	4620      	mov	r0, r4
 801369a:	f7fa fe8e 	bl	800e3ba <USBD_CDC_ReceivePacket>
}
 801369e:	2000      	movs	r0, #0
 80136a0:	bd10      	pop	{r4, pc}
 80136a2:	bf00      	nop
 80136a4:	24020ea0 	.word	0x24020ea0

080136a8 <CDC_Init_FS>:
{
 80136a8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80136aa:	4c06      	ldr	r4, [pc, #24]	; (80136c4 <CDC_Init_FS+0x1c>)
 80136ac:	2200      	movs	r2, #0
 80136ae:	4906      	ldr	r1, [pc, #24]	; (80136c8 <CDC_Init_FS+0x20>)
 80136b0:	4620      	mov	r0, r4
 80136b2:	f7fa fe5c 	bl	800e36e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80136b6:	4905      	ldr	r1, [pc, #20]	; (80136cc <CDC_Init_FS+0x24>)
 80136b8:	4620      	mov	r0, r4
 80136ba:	f7fa fe60 	bl	800e37e <USBD_CDC_SetRxBuffer>
}
 80136be:	2000      	movs	r0, #0
 80136c0:	bd10      	pop	{r4, pc}
 80136c2:	bf00      	nop
 80136c4:	24020ea0 	.word	0x24020ea0
 80136c8:	24021970 	.word	0x24021970
 80136cc:	24021170 	.word	0x24021170

080136d0 <CDC_Transmit_FS>:
{
 80136d0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80136d2:	4c09      	ldr	r4, [pc, #36]	; (80136f8 <CDC_Transmit_FS+0x28>)
{
 80136d4:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80136d6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 80136da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80136de:	b943      	cbnz	r3, 80136f2 <CDC_Transmit_FS+0x22>
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80136e0:	4601      	mov	r1, r0
 80136e2:	4620      	mov	r0, r4
 80136e4:	f7fa fe43 	bl	800e36e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80136e8:	4620      	mov	r0, r4
}
 80136ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80136ee:	f7fa be4c 	b.w	800e38a <USBD_CDC_TransmitPacket>
}
 80136f2:	2001      	movs	r0, #1
 80136f4:	bd10      	pop	{r4, pc}
 80136f6:	bf00      	nop
 80136f8:	24020ea0 	.word	0x24020ea0

080136fc <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80136fc:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80136fe:	4801      	ldr	r0, [pc, #4]	; (8013704 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8013700:	800b      	strh	r3, [r1, #0]
}
 8013702:	4770      	bx	lr
 8013704:	24000168 	.word	0x24000168

08013708 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013708:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 801370a:	4801      	ldr	r0, [pc, #4]	; (8013710 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 801370c:	800b      	strh	r3, [r1, #0]
}
 801370e:	4770      	bx	lr
 8013710:	2400017c 	.word	0x2400017c

08013714 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013714:	2300      	movs	r3, #0
 8013716:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8013718:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 801371a:	0f05      	lsrs	r5, r0, #28
    value = value << 4;
 801371c:	0100      	lsls	r0, r0, #4
 801371e:	b2ec      	uxtb	r4, r5
    if (((value >> 28)) < 0xA)
 8013720:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8013722:	bf94      	ite	ls
 8013724:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013726:	3437      	addhi	r4, #55	; 0x37
 8013728:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 801372c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8013730:	3301      	adds	r3, #1
 8013732:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 8013734:	b2dc      	uxtb	r4, r3
 8013736:	42a2      	cmp	r2, r4
 8013738:	d8ef      	bhi.n	801371a <IntToUnicode+0x6>
  }
}
 801373a:	bd70      	pop	{r4, r5, r6, pc}

0801373c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 801373c:	231a      	movs	r3, #26
{
 801373e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8013740:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013742:	4b09      	ldr	r3, [pc, #36]	; (8013768 <USBD_FS_SerialStrDescriptor+0x2c>)
 8013744:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013746:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8013748:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 801374a:	18c0      	adds	r0, r0, r3
 801374c:	d00a      	beq.n	8013764 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801374e:	4b07      	ldr	r3, [pc, #28]	; (801376c <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013750:	2208      	movs	r2, #8
 8013752:	4907      	ldr	r1, [pc, #28]	; (8013770 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013754:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013756:	f7ff ffdd 	bl	8013714 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801375a:	2204      	movs	r2, #4
 801375c:	4905      	ldr	r1, [pc, #20]	; (8013774 <USBD_FS_SerialStrDescriptor+0x38>)
 801375e:	4620      	mov	r0, r4
 8013760:	f7ff ffd8 	bl	8013714 <IntToUnicode>
}
 8013764:	4804      	ldr	r0, [pc, #16]	; (8013778 <USBD_FS_SerialStrDescriptor+0x3c>)
 8013766:	bd10      	pop	{r4, pc}
 8013768:	1ff1e800 	.word	0x1ff1e800
 801376c:	1ff1e804 	.word	0x1ff1e804
 8013770:	24000182 	.word	0x24000182
 8013774:	24000192 	.word	0x24000192
 8013778:	24000180 	.word	0x24000180

0801377c <USBD_FS_ManufacturerStrDescriptor>:
{
 801377c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801377e:	4c04      	ldr	r4, [pc, #16]	; (8013790 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8013780:	460a      	mov	r2, r1
 8013782:	4804      	ldr	r0, [pc, #16]	; (8013794 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8013784:	4621      	mov	r1, r4
 8013786:	f7fb f999 	bl	800eabc <USBD_GetString>
}
 801378a:	4620      	mov	r0, r4
 801378c:	bd10      	pop	{r4, pc}
 801378e:	bf00      	nop
 8013790:	24022170 	.word	0x24022170
 8013794:	080171c2 	.word	0x080171c2

08013798 <USBD_FS_ProductStrDescriptor>:
{
 8013798:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801379a:	4c04      	ldr	r4, [pc, #16]	; (80137ac <USBD_FS_ProductStrDescriptor+0x14>)
 801379c:	460a      	mov	r2, r1
 801379e:	4804      	ldr	r0, [pc, #16]	; (80137b0 <USBD_FS_ProductStrDescriptor+0x18>)
 80137a0:	4621      	mov	r1, r4
 80137a2:	f7fb f98b 	bl	800eabc <USBD_GetString>
}
 80137a6:	4620      	mov	r0, r4
 80137a8:	bd10      	pop	{r4, pc}
 80137aa:	bf00      	nop
 80137ac:	24022170 	.word	0x24022170
 80137b0:	080171c7 	.word	0x080171c7

080137b4 <USBD_FS_ConfigStrDescriptor>:
{
 80137b4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80137b6:	4c04      	ldr	r4, [pc, #16]	; (80137c8 <USBD_FS_ConfigStrDescriptor+0x14>)
 80137b8:	460a      	mov	r2, r1
 80137ba:	4804      	ldr	r0, [pc, #16]	; (80137cc <USBD_FS_ConfigStrDescriptor+0x18>)
 80137bc:	4621      	mov	r1, r4
 80137be:	f7fb f97d 	bl	800eabc <USBD_GetString>
}
 80137c2:	4620      	mov	r0, r4
 80137c4:	bd10      	pop	{r4, pc}
 80137c6:	bf00      	nop
 80137c8:	24022170 	.word	0x24022170
 80137cc:	080171a9 	.word	0x080171a9

080137d0 <USBD_FS_InterfaceStrDescriptor>:
{
 80137d0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80137d2:	4c04      	ldr	r4, [pc, #16]	; (80137e4 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80137d4:	460a      	mov	r2, r1
 80137d6:	4804      	ldr	r0, [pc, #16]	; (80137e8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80137d8:	4621      	mov	r1, r4
 80137da:	f7fb f96f 	bl	800eabc <USBD_GetString>
}
 80137de:	4620      	mov	r0, r4
 80137e0:	bd10      	pop	{r4, pc}
 80137e2:	bf00      	nop
 80137e4:	24022170 	.word	0x24022170
 80137e8:	080171b4 	.word	0x080171b4

080137ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80137ec:	b510      	push	{r4, lr}
 80137ee:	b088      	sub	sp, #32
 80137f0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80137f2:	2214      	movs	r2, #20
 80137f4:	2100      	movs	r1, #0
 80137f6:	a803      	add	r0, sp, #12
 80137f8:	f000 f991 	bl	8013b1e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80137fc:	6822      	ldr	r2, [r4, #0]
 80137fe:	4b18      	ldr	r3, [pc, #96]	; (8013860 <HAL_PCD_MspInit+0x74>)
 8013800:	429a      	cmp	r2, r3
 8013802:	d12b      	bne.n	801385c <HAL_PCD_MspInit+0x70>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013804:	4c17      	ldr	r4, [pc, #92]	; (8013864 <HAL_PCD_MspInit+0x78>)
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013806:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801380a:	a903      	add	r1, sp, #12
 801380c:	4816      	ldr	r0, [pc, #88]	; (8013868 <HAL_PCD_MspInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801380e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8013812:	f043 0301 	orr.w	r3, r3, #1
 8013816:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 801381a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 801381e:	f003 0301 	and.w	r3, r3, #1
 8013822:	9301      	str	r3, [sp, #4]
 8013824:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013826:	2302      	movs	r3, #2
 8013828:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801382c:	230a      	movs	r3, #10
 801382e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013830:	f7f4 fd54 	bl	80082dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013834:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013838:	2065      	movs	r0, #101	; 0x65
 801383a:	2200      	movs	r2, #0
 801383c:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801383e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013842:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8013846:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 801384a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801384e:	9302      	str	r3, [sp, #8]
 8013850:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013852:	f7f3 fb81 	bl	8006f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013856:	2065      	movs	r0, #101	; 0x65
 8013858:	f7f3 fbb0 	bl	8006fbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801385c:	b008      	add	sp, #32
 801385e:	bd10      	pop	{r4, pc}
 8013860:	40080000 	.word	0x40080000
 8013864:	58024400 	.word	0x58024400
 8013868:	58020000 	.word	0x58020000

0801386c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801386c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8013870:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013874:	f7fa bdf0 	b.w	800e458 <USBD_LL_SetupStage>

08013878 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013878:	231c      	movs	r3, #28
 801387a:	fb03 0301 	mla	r3, r3, r1, r0
 801387e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013882:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013886:	f7fa be17 	b.w	800e4b8 <USBD_LL_DataOutStage>

0801388a <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801388a:	231c      	movs	r3, #28
 801388c:	fb03 0301 	mla	r3, r3, r1, r0
 8013890:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013894:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013896:	f7fa be42 	b.w	800e51e <USBD_LL_DataInStage>

0801389a <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801389a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801389e:	f7fa bec9 	b.w	800e634 <USBD_LL_SOF>

080138a2 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80138a2:	68c1      	ldr	r1, [r0, #12]
{
 80138a4:	b510      	push	{r4, lr}
 80138a6:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80138a8:	b121      	cbz	r1, 80138b4 <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80138aa:	2902      	cmp	r1, #2
 80138ac:	d001      	beq.n	80138b2 <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 80138ae:	f7ef fd4f 	bl	8003350 <Error_Handler>
    speed = USBD_SPEED_FULL;
 80138b2:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80138b4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80138b8:	f7fa fea6 	bl	800e608 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80138bc:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 80138c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80138c4:	f7fa be78 	b.w	800e5b8 <USBD_LL_Reset>

080138c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138c8:	b510      	push	{r4, lr}
 80138ca:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80138cc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80138d0:	f7fa fe9d 	bl	800e60e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80138d4:	6822      	ldr	r2, [r4, #0]
 80138d6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80138da:	f043 0301 	orr.w	r3, r3, #1
 80138de:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80138e2:	6a23      	ldr	r3, [r4, #32]
 80138e4:	b123      	cbz	r3, 80138f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80138e6:	4a03      	ldr	r2, [pc, #12]	; (80138f4 <HAL_PCD_SuspendCallback+0x2c>)
 80138e8:	6913      	ldr	r3, [r2, #16]
 80138ea:	f043 0306 	orr.w	r3, r3, #6
 80138ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80138f0:	bd10      	pop	{r4, pc}
 80138f2:	bf00      	nop
 80138f4:	e000ed00 	.word	0xe000ed00

080138f8 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80138f8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80138fc:	f7fa be90 	b.w	800e620 <USBD_LL_Resume>

08013900 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013900:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013904:	f7fa bea4 	b.w	800e650 <USBD_LL_IsoOUTIncomplete>

08013908 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013908:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801390c:	f7fa be9e 	b.w	800e64c <USBD_LL_IsoINIncomplete>

08013910 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013910:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8013914:	f7fa be9e 	b.w	800e654 <USBD_LL_DevConnected>

08013918 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013918:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801391c:	f7fa be9c 	b.w	800e658 <USBD_LL_DevDisconnected>

08013920 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013920:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013922:	7802      	ldrb	r2, [r0, #0]
 8013924:	bb32      	cbnz	r2, 8013974 <USBD_LL_Init+0x54>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013926:	4b14      	ldr	r3, [pc, #80]	; (8013978 <USBD_LL_Init+0x58>)
  pdev->pData = &hpcd_USB_OTG_FS;

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8013928:	2109      	movs	r1, #9
  hpcd_USB_OTG_FS.pData = pdev;
 801392a:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801392e:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8013932:	4812      	ldr	r0, [pc, #72]	; (801397c <USBD_LL_Init+0x5c>)
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013934:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8013936:	e9c3 0100 	strd	r0, r1, [r3]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801393a:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801393c:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801393e:	e9c3 1203 	strd	r1, r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013942:	e9c3 1206 	strd	r1, r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013946:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801394a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801394e:	f7f4 fdc1 	bl	80084d4 <HAL_PCD_Init>
 8013952:	b108      	cbz	r0, 8013958 <USBD_LL_Init+0x38>
  {
    Error_Handler( );
 8013954:	f7ef fcfc 	bl	8003350 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013958:	2180      	movs	r1, #128	; 0x80
 801395a:	4807      	ldr	r0, [pc, #28]	; (8013978 <USBD_LL_Init+0x58>)
 801395c:	f7f5 fa93 	bl	8008e86 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013960:	2240      	movs	r2, #64	; 0x40
 8013962:	2100      	movs	r1, #0
 8013964:	4804      	ldr	r0, [pc, #16]	; (8013978 <USBD_LL_Init+0x58>)
 8013966:	f7f5 fa6e 	bl	8008e46 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801396a:	2280      	movs	r2, #128	; 0x80
 801396c:	2101      	movs	r1, #1
 801396e:	4802      	ldr	r0, [pc, #8]	; (8013978 <USBD_LL_Init+0x58>)
 8013970:	f7f5 fa69 	bl	8008e46 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8013974:	2000      	movs	r0, #0
 8013976:	bd08      	pop	{r3, pc}
 8013978:	24022370 	.word	0x24022370
 801397c:	40080000 	.word	0x40080000

08013980 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013980:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8013982:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013986:	f7f4 fe30 	bl	80085ea <HAL_PCD_Start>
 801398a:	2803      	cmp	r0, #3
 801398c:	bf96      	itet	ls
 801398e:	4b02      	ldrls	r3, [pc, #8]	; (8013998 <USBD_LL_Start+0x18>)
 8013990:	2003      	movhi	r0, #3
 8013992:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8013994:	bd08      	pop	{r3, pc}
 8013996:	bf00      	nop
 8013998:	080171db 	.word	0x080171db

0801399c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801399c:	b510      	push	{r4, lr}
 801399e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80139a0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80139a4:	4613      	mov	r3, r2
 80139a6:	4622      	mov	r2, r4
 80139a8:	f7f5 f92a 	bl	8008c00 <HAL_PCD_EP_Open>
 80139ac:	2803      	cmp	r0, #3
 80139ae:	bf96      	itet	ls
 80139b0:	4b01      	ldrls	r3, [pc, #4]	; (80139b8 <USBD_LL_OpenEP+0x1c>)
 80139b2:	2003      	movhi	r0, #3
 80139b4:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80139b6:	bd10      	pop	{r4, pc}
 80139b8:	080171db 	.word	0x080171db

080139bc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80139bc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80139be:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80139c2:	f7f5 f955 	bl	8008c70 <HAL_PCD_EP_Close>
 80139c6:	2803      	cmp	r0, #3
 80139c8:	bf96      	itet	ls
 80139ca:	4b02      	ldrls	r3, [pc, #8]	; (80139d4 <USBD_LL_CloseEP+0x18>)
 80139cc:	2003      	movhi	r0, #3
 80139ce:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80139d0:	bd08      	pop	{r3, pc}
 80139d2:	bf00      	nop
 80139d4:	080171db 	.word	0x080171db

080139d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80139d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80139da:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80139de:	f7f5 f9c2 	bl	8008d66 <HAL_PCD_EP_SetStall>
 80139e2:	2803      	cmp	r0, #3
 80139e4:	bf96      	itet	ls
 80139e6:	4b02      	ldrls	r3, [pc, #8]	; (80139f0 <USBD_LL_StallEP+0x18>)
 80139e8:	2003      	movhi	r0, #3
 80139ea:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80139ec:	bd08      	pop	{r3, pc}
 80139ee:	bf00      	nop
 80139f0:	080171db 	.word	0x080171db

080139f4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80139f4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80139f6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80139fa:	f7f5 f9ee 	bl	8008dda <HAL_PCD_EP_ClrStall>
 80139fe:	2803      	cmp	r0, #3
 8013a00:	bf96      	itet	ls
 8013a02:	4b02      	ldrls	r3, [pc, #8]	; (8013a0c <USBD_LL_ClearStallEP+0x18>)
 8013a04:	2003      	movhi	r0, #3
 8013a06:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8013a08:	bd08      	pop	{r3, pc}
 8013a0a:	bf00      	nop
 8013a0c:	080171db 	.word	0x080171db

08013a10 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 8013a10:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013a14:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 8013a18:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013a1c:	bf17      	itett	ne
 8013a1e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013a22:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013a26:	fb02 3101 	mlane	r1, r2, r1, r3
 8013a2a:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013a2e:	bf08      	it	eq
 8013a30:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 8013a34:	4770      	bx	lr
	...

08013a38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013a38:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013a3a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013a3e:	f7f5 f8cb 	bl	8008bd8 <HAL_PCD_SetAddress>
 8013a42:	2803      	cmp	r0, #3
 8013a44:	bf96      	itet	ls
 8013a46:	4b02      	ldrls	r3, [pc, #8]	; (8013a50 <USBD_LL_SetUSBAddress+0x18>)
 8013a48:	2003      	movhi	r0, #3
 8013a4a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8013a4c:	bd08      	pop	{r3, pc}
 8013a4e:	bf00      	nop
 8013a50:	080171db 	.word	0x080171db

08013a54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013a54:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013a56:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013a5a:	f7f5 f964 	bl	8008d26 <HAL_PCD_EP_Transmit>
 8013a5e:	2803      	cmp	r0, #3
 8013a60:	bf96      	itet	ls
 8013a62:	4b02      	ldrls	r3, [pc, #8]	; (8013a6c <USBD_LL_Transmit+0x18>)
 8013a64:	2003      	movhi	r0, #3
 8013a66:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8013a68:	bd08      	pop	{r3, pc}
 8013a6a:	bf00      	nop
 8013a6c:	080171db 	.word	0x080171db

08013a70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013a70:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013a72:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013a76:	f7f5 f92a 	bl	8008cce <HAL_PCD_EP_Receive>
 8013a7a:	2803      	cmp	r0, #3
 8013a7c:	bf96      	itet	ls
 8013a7e:	4b02      	ldrls	r3, [pc, #8]	; (8013a88 <USBD_LL_PrepareReceive+0x18>)
 8013a80:	2003      	movhi	r0, #3
 8013a82:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8013a84:	bd08      	pop	{r3, pc}
 8013a86:	bf00      	nop
 8013a88:	080171db 	.word	0x080171db

08013a8c <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013a8c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013a90:	f7f5 b941 	b.w	8008d16 <HAL_PCD_EP_GetRxCount>

08013a94 <__errno>:
 8013a94:	4b01      	ldr	r3, [pc, #4]	; (8013a9c <__errno+0x8>)
 8013a96:	6818      	ldr	r0, [r3, #0]
 8013a98:	4770      	bx	lr
 8013a9a:	bf00      	nop
 8013a9c:	2400019c 	.word	0x2400019c

08013aa0 <__libc_init_array>:
 8013aa0:	b570      	push	{r4, r5, r6, lr}
 8013aa2:	4e0d      	ldr	r6, [pc, #52]	; (8013ad8 <__libc_init_array+0x38>)
 8013aa4:	4c0d      	ldr	r4, [pc, #52]	; (8013adc <__libc_init_array+0x3c>)
 8013aa6:	1ba4      	subs	r4, r4, r6
 8013aa8:	10a4      	asrs	r4, r4, #2
 8013aaa:	2500      	movs	r5, #0
 8013aac:	42a5      	cmp	r5, r4
 8013aae:	d109      	bne.n	8013ac4 <__libc_init_array+0x24>
 8013ab0:	4e0b      	ldr	r6, [pc, #44]	; (8013ae0 <__libc_init_array+0x40>)
 8013ab2:	4c0c      	ldr	r4, [pc, #48]	; (8013ae4 <__libc_init_array+0x44>)
 8013ab4:	f001 fcd2 	bl	801545c <_init>
 8013ab8:	1ba4      	subs	r4, r4, r6
 8013aba:	10a4      	asrs	r4, r4, #2
 8013abc:	2500      	movs	r5, #0
 8013abe:	42a5      	cmp	r5, r4
 8013ac0:	d105      	bne.n	8013ace <__libc_init_array+0x2e>
 8013ac2:	bd70      	pop	{r4, r5, r6, pc}
 8013ac4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013ac8:	4798      	blx	r3
 8013aca:	3501      	adds	r5, #1
 8013acc:	e7ee      	b.n	8013aac <__libc_init_array+0xc>
 8013ace:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013ad2:	4798      	blx	r3
 8013ad4:	3501      	adds	r5, #1
 8013ad6:	e7f2      	b.n	8013abe <__libc_init_array+0x1e>
 8013ad8:	08017540 	.word	0x08017540
 8013adc:	08017540 	.word	0x08017540
 8013ae0:	08017540 	.word	0x08017540
 8013ae4:	08017544 	.word	0x08017544

08013ae8 <malloc>:
 8013ae8:	4b02      	ldr	r3, [pc, #8]	; (8013af4 <malloc+0xc>)
 8013aea:	4601      	mov	r1, r0
 8013aec:	6818      	ldr	r0, [r3, #0]
 8013aee:	f000 b86d 	b.w	8013bcc <_malloc_r>
 8013af2:	bf00      	nop
 8013af4:	2400019c 	.word	0x2400019c

08013af8 <free>:
 8013af8:	4b02      	ldr	r3, [pc, #8]	; (8013b04 <free+0xc>)
 8013afa:	4601      	mov	r1, r0
 8013afc:	6818      	ldr	r0, [r3, #0]
 8013afe:	f000 b817 	b.w	8013b30 <_free_r>
 8013b02:	bf00      	nop
 8013b04:	2400019c 	.word	0x2400019c

08013b08 <memcpy>:
 8013b08:	b510      	push	{r4, lr}
 8013b0a:	1e43      	subs	r3, r0, #1
 8013b0c:	440a      	add	r2, r1
 8013b0e:	4291      	cmp	r1, r2
 8013b10:	d100      	bne.n	8013b14 <memcpy+0xc>
 8013b12:	bd10      	pop	{r4, pc}
 8013b14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b1c:	e7f7      	b.n	8013b0e <memcpy+0x6>

08013b1e <memset>:
 8013b1e:	4402      	add	r2, r0
 8013b20:	4603      	mov	r3, r0
 8013b22:	4293      	cmp	r3, r2
 8013b24:	d100      	bne.n	8013b28 <memset+0xa>
 8013b26:	4770      	bx	lr
 8013b28:	f803 1b01 	strb.w	r1, [r3], #1
 8013b2c:	e7f9      	b.n	8013b22 <memset+0x4>
	...

08013b30 <_free_r>:
 8013b30:	b538      	push	{r3, r4, r5, lr}
 8013b32:	4605      	mov	r5, r0
 8013b34:	2900      	cmp	r1, #0
 8013b36:	d045      	beq.n	8013bc4 <_free_r+0x94>
 8013b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b3c:	1f0c      	subs	r4, r1, #4
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	bfb8      	it	lt
 8013b42:	18e4      	addlt	r4, r4, r3
 8013b44:	f000 f934 	bl	8013db0 <__malloc_lock>
 8013b48:	4a1f      	ldr	r2, [pc, #124]	; (8013bc8 <_free_r+0x98>)
 8013b4a:	6813      	ldr	r3, [r2, #0]
 8013b4c:	4610      	mov	r0, r2
 8013b4e:	b933      	cbnz	r3, 8013b5e <_free_r+0x2e>
 8013b50:	6063      	str	r3, [r4, #4]
 8013b52:	6014      	str	r4, [r2, #0]
 8013b54:	4628      	mov	r0, r5
 8013b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b5a:	f000 b92a 	b.w	8013db2 <__malloc_unlock>
 8013b5e:	42a3      	cmp	r3, r4
 8013b60:	d90c      	bls.n	8013b7c <_free_r+0x4c>
 8013b62:	6821      	ldr	r1, [r4, #0]
 8013b64:	1862      	adds	r2, r4, r1
 8013b66:	4293      	cmp	r3, r2
 8013b68:	bf04      	itt	eq
 8013b6a:	681a      	ldreq	r2, [r3, #0]
 8013b6c:	685b      	ldreq	r3, [r3, #4]
 8013b6e:	6063      	str	r3, [r4, #4]
 8013b70:	bf04      	itt	eq
 8013b72:	1852      	addeq	r2, r2, r1
 8013b74:	6022      	streq	r2, [r4, #0]
 8013b76:	6004      	str	r4, [r0, #0]
 8013b78:	e7ec      	b.n	8013b54 <_free_r+0x24>
 8013b7a:	4613      	mov	r3, r2
 8013b7c:	685a      	ldr	r2, [r3, #4]
 8013b7e:	b10a      	cbz	r2, 8013b84 <_free_r+0x54>
 8013b80:	42a2      	cmp	r2, r4
 8013b82:	d9fa      	bls.n	8013b7a <_free_r+0x4a>
 8013b84:	6819      	ldr	r1, [r3, #0]
 8013b86:	1858      	adds	r0, r3, r1
 8013b88:	42a0      	cmp	r0, r4
 8013b8a:	d10b      	bne.n	8013ba4 <_free_r+0x74>
 8013b8c:	6820      	ldr	r0, [r4, #0]
 8013b8e:	4401      	add	r1, r0
 8013b90:	1858      	adds	r0, r3, r1
 8013b92:	4282      	cmp	r2, r0
 8013b94:	6019      	str	r1, [r3, #0]
 8013b96:	d1dd      	bne.n	8013b54 <_free_r+0x24>
 8013b98:	6810      	ldr	r0, [r2, #0]
 8013b9a:	6852      	ldr	r2, [r2, #4]
 8013b9c:	605a      	str	r2, [r3, #4]
 8013b9e:	4401      	add	r1, r0
 8013ba0:	6019      	str	r1, [r3, #0]
 8013ba2:	e7d7      	b.n	8013b54 <_free_r+0x24>
 8013ba4:	d902      	bls.n	8013bac <_free_r+0x7c>
 8013ba6:	230c      	movs	r3, #12
 8013ba8:	602b      	str	r3, [r5, #0]
 8013baa:	e7d3      	b.n	8013b54 <_free_r+0x24>
 8013bac:	6820      	ldr	r0, [r4, #0]
 8013bae:	1821      	adds	r1, r4, r0
 8013bb0:	428a      	cmp	r2, r1
 8013bb2:	bf04      	itt	eq
 8013bb4:	6811      	ldreq	r1, [r2, #0]
 8013bb6:	6852      	ldreq	r2, [r2, #4]
 8013bb8:	6062      	str	r2, [r4, #4]
 8013bba:	bf04      	itt	eq
 8013bbc:	1809      	addeq	r1, r1, r0
 8013bbe:	6021      	streq	r1, [r4, #0]
 8013bc0:	605c      	str	r4, [r3, #4]
 8013bc2:	e7c7      	b.n	8013b54 <_free_r+0x24>
 8013bc4:	bd38      	pop	{r3, r4, r5, pc}
 8013bc6:	bf00      	nop
 8013bc8:	24008e18 	.word	0x24008e18

08013bcc <_malloc_r>:
 8013bcc:	b570      	push	{r4, r5, r6, lr}
 8013bce:	1ccd      	adds	r5, r1, #3
 8013bd0:	f025 0503 	bic.w	r5, r5, #3
 8013bd4:	3508      	adds	r5, #8
 8013bd6:	2d0c      	cmp	r5, #12
 8013bd8:	bf38      	it	cc
 8013bda:	250c      	movcc	r5, #12
 8013bdc:	2d00      	cmp	r5, #0
 8013bde:	4606      	mov	r6, r0
 8013be0:	db01      	blt.n	8013be6 <_malloc_r+0x1a>
 8013be2:	42a9      	cmp	r1, r5
 8013be4:	d903      	bls.n	8013bee <_malloc_r+0x22>
 8013be6:	230c      	movs	r3, #12
 8013be8:	6033      	str	r3, [r6, #0]
 8013bea:	2000      	movs	r0, #0
 8013bec:	bd70      	pop	{r4, r5, r6, pc}
 8013bee:	f000 f8df 	bl	8013db0 <__malloc_lock>
 8013bf2:	4a21      	ldr	r2, [pc, #132]	; (8013c78 <_malloc_r+0xac>)
 8013bf4:	6814      	ldr	r4, [r2, #0]
 8013bf6:	4621      	mov	r1, r4
 8013bf8:	b991      	cbnz	r1, 8013c20 <_malloc_r+0x54>
 8013bfa:	4c20      	ldr	r4, [pc, #128]	; (8013c7c <_malloc_r+0xb0>)
 8013bfc:	6823      	ldr	r3, [r4, #0]
 8013bfe:	b91b      	cbnz	r3, 8013c08 <_malloc_r+0x3c>
 8013c00:	4630      	mov	r0, r6
 8013c02:	f000 f83d 	bl	8013c80 <_sbrk_r>
 8013c06:	6020      	str	r0, [r4, #0]
 8013c08:	4629      	mov	r1, r5
 8013c0a:	4630      	mov	r0, r6
 8013c0c:	f000 f838 	bl	8013c80 <_sbrk_r>
 8013c10:	1c43      	adds	r3, r0, #1
 8013c12:	d124      	bne.n	8013c5e <_malloc_r+0x92>
 8013c14:	230c      	movs	r3, #12
 8013c16:	6033      	str	r3, [r6, #0]
 8013c18:	4630      	mov	r0, r6
 8013c1a:	f000 f8ca 	bl	8013db2 <__malloc_unlock>
 8013c1e:	e7e4      	b.n	8013bea <_malloc_r+0x1e>
 8013c20:	680b      	ldr	r3, [r1, #0]
 8013c22:	1b5b      	subs	r3, r3, r5
 8013c24:	d418      	bmi.n	8013c58 <_malloc_r+0x8c>
 8013c26:	2b0b      	cmp	r3, #11
 8013c28:	d90f      	bls.n	8013c4a <_malloc_r+0x7e>
 8013c2a:	600b      	str	r3, [r1, #0]
 8013c2c:	50cd      	str	r5, [r1, r3]
 8013c2e:	18cc      	adds	r4, r1, r3
 8013c30:	4630      	mov	r0, r6
 8013c32:	f000 f8be 	bl	8013db2 <__malloc_unlock>
 8013c36:	f104 000b 	add.w	r0, r4, #11
 8013c3a:	1d23      	adds	r3, r4, #4
 8013c3c:	f020 0007 	bic.w	r0, r0, #7
 8013c40:	1ac3      	subs	r3, r0, r3
 8013c42:	d0d3      	beq.n	8013bec <_malloc_r+0x20>
 8013c44:	425a      	negs	r2, r3
 8013c46:	50e2      	str	r2, [r4, r3]
 8013c48:	e7d0      	b.n	8013bec <_malloc_r+0x20>
 8013c4a:	428c      	cmp	r4, r1
 8013c4c:	684b      	ldr	r3, [r1, #4]
 8013c4e:	bf16      	itet	ne
 8013c50:	6063      	strne	r3, [r4, #4]
 8013c52:	6013      	streq	r3, [r2, #0]
 8013c54:	460c      	movne	r4, r1
 8013c56:	e7eb      	b.n	8013c30 <_malloc_r+0x64>
 8013c58:	460c      	mov	r4, r1
 8013c5a:	6849      	ldr	r1, [r1, #4]
 8013c5c:	e7cc      	b.n	8013bf8 <_malloc_r+0x2c>
 8013c5e:	1cc4      	adds	r4, r0, #3
 8013c60:	f024 0403 	bic.w	r4, r4, #3
 8013c64:	42a0      	cmp	r0, r4
 8013c66:	d005      	beq.n	8013c74 <_malloc_r+0xa8>
 8013c68:	1a21      	subs	r1, r4, r0
 8013c6a:	4630      	mov	r0, r6
 8013c6c:	f000 f808 	bl	8013c80 <_sbrk_r>
 8013c70:	3001      	adds	r0, #1
 8013c72:	d0cf      	beq.n	8013c14 <_malloc_r+0x48>
 8013c74:	6025      	str	r5, [r4, #0]
 8013c76:	e7db      	b.n	8013c30 <_malloc_r+0x64>
 8013c78:	24008e18 	.word	0x24008e18
 8013c7c:	24008e1c 	.word	0x24008e1c

08013c80 <_sbrk_r>:
 8013c80:	b538      	push	{r3, r4, r5, lr}
 8013c82:	4c06      	ldr	r4, [pc, #24]	; (8013c9c <_sbrk_r+0x1c>)
 8013c84:	2300      	movs	r3, #0
 8013c86:	4605      	mov	r5, r0
 8013c88:	4608      	mov	r0, r1
 8013c8a:	6023      	str	r3, [r4, #0]
 8013c8c:	f7ef ffb8 	bl	8003c00 <_sbrk>
 8013c90:	1c43      	adds	r3, r0, #1
 8013c92:	d102      	bne.n	8013c9a <_sbrk_r+0x1a>
 8013c94:	6823      	ldr	r3, [r4, #0]
 8013c96:	b103      	cbz	r3, 8013c9a <_sbrk_r+0x1a>
 8013c98:	602b      	str	r3, [r5, #0]
 8013c9a:	bd38      	pop	{r3, r4, r5, pc}
 8013c9c:	24022778 	.word	0x24022778

08013ca0 <sniprintf>:
 8013ca0:	b40c      	push	{r2, r3}
 8013ca2:	b530      	push	{r4, r5, lr}
 8013ca4:	4b17      	ldr	r3, [pc, #92]	; (8013d04 <sniprintf+0x64>)
 8013ca6:	1e0c      	subs	r4, r1, #0
 8013ca8:	b09d      	sub	sp, #116	; 0x74
 8013caa:	681d      	ldr	r5, [r3, #0]
 8013cac:	da08      	bge.n	8013cc0 <sniprintf+0x20>
 8013cae:	238b      	movs	r3, #139	; 0x8b
 8013cb0:	602b      	str	r3, [r5, #0]
 8013cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8013cb6:	b01d      	add	sp, #116	; 0x74
 8013cb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013cbc:	b002      	add	sp, #8
 8013cbe:	4770      	bx	lr
 8013cc0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013cc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013cc8:	bf14      	ite	ne
 8013cca:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013cce:	4623      	moveq	r3, r4
 8013cd0:	9304      	str	r3, [sp, #16]
 8013cd2:	9307      	str	r3, [sp, #28]
 8013cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013cd8:	9002      	str	r0, [sp, #8]
 8013cda:	9006      	str	r0, [sp, #24]
 8013cdc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013ce0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013ce2:	ab21      	add	r3, sp, #132	; 0x84
 8013ce4:	a902      	add	r1, sp, #8
 8013ce6:	4628      	mov	r0, r5
 8013ce8:	9301      	str	r3, [sp, #4]
 8013cea:	f000 f8bd 	bl	8013e68 <_svfiprintf_r>
 8013cee:	1c43      	adds	r3, r0, #1
 8013cf0:	bfbc      	itt	lt
 8013cf2:	238b      	movlt	r3, #139	; 0x8b
 8013cf4:	602b      	strlt	r3, [r5, #0]
 8013cf6:	2c00      	cmp	r4, #0
 8013cf8:	d0dd      	beq.n	8013cb6 <sniprintf+0x16>
 8013cfa:	9b02      	ldr	r3, [sp, #8]
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	701a      	strb	r2, [r3, #0]
 8013d00:	e7d9      	b.n	8013cb6 <sniprintf+0x16>
 8013d02:	bf00      	nop
 8013d04:	2400019c 	.word	0x2400019c

08013d08 <strcpy>:
 8013d08:	4603      	mov	r3, r0
 8013d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d0e:	f803 2b01 	strb.w	r2, [r3], #1
 8013d12:	2a00      	cmp	r2, #0
 8013d14:	d1f9      	bne.n	8013d0a <strcpy+0x2>
 8013d16:	4770      	bx	lr

08013d18 <strncmp>:
 8013d18:	b510      	push	{r4, lr}
 8013d1a:	b16a      	cbz	r2, 8013d38 <strncmp+0x20>
 8013d1c:	3901      	subs	r1, #1
 8013d1e:	1884      	adds	r4, r0, r2
 8013d20:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013d24:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013d28:	4293      	cmp	r3, r2
 8013d2a:	d103      	bne.n	8013d34 <strncmp+0x1c>
 8013d2c:	42a0      	cmp	r0, r4
 8013d2e:	d001      	beq.n	8013d34 <strncmp+0x1c>
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d1f5      	bne.n	8013d20 <strncmp+0x8>
 8013d34:	1a98      	subs	r0, r3, r2
 8013d36:	bd10      	pop	{r4, pc}
 8013d38:	4610      	mov	r0, r2
 8013d3a:	e7fc      	b.n	8013d36 <strncmp+0x1e>

08013d3c <_vsniprintf_r>:
 8013d3c:	b530      	push	{r4, r5, lr}
 8013d3e:	1e14      	subs	r4, r2, #0
 8013d40:	4605      	mov	r5, r0
 8013d42:	b09b      	sub	sp, #108	; 0x6c
 8013d44:	4618      	mov	r0, r3
 8013d46:	da05      	bge.n	8013d54 <_vsniprintf_r+0x18>
 8013d48:	238b      	movs	r3, #139	; 0x8b
 8013d4a:	602b      	str	r3, [r5, #0]
 8013d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d50:	b01b      	add	sp, #108	; 0x6c
 8013d52:	bd30      	pop	{r4, r5, pc}
 8013d54:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013d58:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013d5c:	bf14      	ite	ne
 8013d5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013d62:	4623      	moveq	r3, r4
 8013d64:	9302      	str	r3, [sp, #8]
 8013d66:	9305      	str	r3, [sp, #20]
 8013d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013d6c:	9100      	str	r1, [sp, #0]
 8013d6e:	9104      	str	r1, [sp, #16]
 8013d70:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013d74:	4602      	mov	r2, r0
 8013d76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013d78:	4669      	mov	r1, sp
 8013d7a:	4628      	mov	r0, r5
 8013d7c:	f000 f874 	bl	8013e68 <_svfiprintf_r>
 8013d80:	1c43      	adds	r3, r0, #1
 8013d82:	bfbc      	itt	lt
 8013d84:	238b      	movlt	r3, #139	; 0x8b
 8013d86:	602b      	strlt	r3, [r5, #0]
 8013d88:	2c00      	cmp	r4, #0
 8013d8a:	d0e1      	beq.n	8013d50 <_vsniprintf_r+0x14>
 8013d8c:	9b00      	ldr	r3, [sp, #0]
 8013d8e:	2200      	movs	r2, #0
 8013d90:	701a      	strb	r2, [r3, #0]
 8013d92:	e7dd      	b.n	8013d50 <_vsniprintf_r+0x14>

08013d94 <vsniprintf>:
 8013d94:	b507      	push	{r0, r1, r2, lr}
 8013d96:	9300      	str	r3, [sp, #0]
 8013d98:	4613      	mov	r3, r2
 8013d9a:	460a      	mov	r2, r1
 8013d9c:	4601      	mov	r1, r0
 8013d9e:	4803      	ldr	r0, [pc, #12]	; (8013dac <vsniprintf+0x18>)
 8013da0:	6800      	ldr	r0, [r0, #0]
 8013da2:	f7ff ffcb 	bl	8013d3c <_vsniprintf_r>
 8013da6:	b003      	add	sp, #12
 8013da8:	f85d fb04 	ldr.w	pc, [sp], #4
 8013dac:	2400019c 	.word	0x2400019c

08013db0 <__malloc_lock>:
 8013db0:	4770      	bx	lr

08013db2 <__malloc_unlock>:
 8013db2:	4770      	bx	lr

08013db4 <__ssputs_r>:
 8013db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013db8:	688e      	ldr	r6, [r1, #8]
 8013dba:	429e      	cmp	r6, r3
 8013dbc:	4682      	mov	sl, r0
 8013dbe:	460c      	mov	r4, r1
 8013dc0:	4690      	mov	r8, r2
 8013dc2:	4699      	mov	r9, r3
 8013dc4:	d837      	bhi.n	8013e36 <__ssputs_r+0x82>
 8013dc6:	898a      	ldrh	r2, [r1, #12]
 8013dc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013dcc:	d031      	beq.n	8013e32 <__ssputs_r+0x7e>
 8013dce:	6825      	ldr	r5, [r4, #0]
 8013dd0:	6909      	ldr	r1, [r1, #16]
 8013dd2:	1a6f      	subs	r7, r5, r1
 8013dd4:	6965      	ldr	r5, [r4, #20]
 8013dd6:	2302      	movs	r3, #2
 8013dd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ddc:	fb95 f5f3 	sdiv	r5, r5, r3
 8013de0:	f109 0301 	add.w	r3, r9, #1
 8013de4:	443b      	add	r3, r7
 8013de6:	429d      	cmp	r5, r3
 8013de8:	bf38      	it	cc
 8013dea:	461d      	movcc	r5, r3
 8013dec:	0553      	lsls	r3, r2, #21
 8013dee:	d530      	bpl.n	8013e52 <__ssputs_r+0x9e>
 8013df0:	4629      	mov	r1, r5
 8013df2:	f7ff feeb 	bl	8013bcc <_malloc_r>
 8013df6:	4606      	mov	r6, r0
 8013df8:	b950      	cbnz	r0, 8013e10 <__ssputs_r+0x5c>
 8013dfa:	230c      	movs	r3, #12
 8013dfc:	f8ca 3000 	str.w	r3, [sl]
 8013e00:	89a3      	ldrh	r3, [r4, #12]
 8013e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e06:	81a3      	strh	r3, [r4, #12]
 8013e08:	f04f 30ff 	mov.w	r0, #4294967295
 8013e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e10:	463a      	mov	r2, r7
 8013e12:	6921      	ldr	r1, [r4, #16]
 8013e14:	f7ff fe78 	bl	8013b08 <memcpy>
 8013e18:	89a3      	ldrh	r3, [r4, #12]
 8013e1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e22:	81a3      	strh	r3, [r4, #12]
 8013e24:	6126      	str	r6, [r4, #16]
 8013e26:	6165      	str	r5, [r4, #20]
 8013e28:	443e      	add	r6, r7
 8013e2a:	1bed      	subs	r5, r5, r7
 8013e2c:	6026      	str	r6, [r4, #0]
 8013e2e:	60a5      	str	r5, [r4, #8]
 8013e30:	464e      	mov	r6, r9
 8013e32:	454e      	cmp	r6, r9
 8013e34:	d900      	bls.n	8013e38 <__ssputs_r+0x84>
 8013e36:	464e      	mov	r6, r9
 8013e38:	4632      	mov	r2, r6
 8013e3a:	4641      	mov	r1, r8
 8013e3c:	6820      	ldr	r0, [r4, #0]
 8013e3e:	f000 fa93 	bl	8014368 <memmove>
 8013e42:	68a3      	ldr	r3, [r4, #8]
 8013e44:	1b9b      	subs	r3, r3, r6
 8013e46:	60a3      	str	r3, [r4, #8]
 8013e48:	6823      	ldr	r3, [r4, #0]
 8013e4a:	441e      	add	r6, r3
 8013e4c:	6026      	str	r6, [r4, #0]
 8013e4e:	2000      	movs	r0, #0
 8013e50:	e7dc      	b.n	8013e0c <__ssputs_r+0x58>
 8013e52:	462a      	mov	r2, r5
 8013e54:	f000 faa1 	bl	801439a <_realloc_r>
 8013e58:	4606      	mov	r6, r0
 8013e5a:	2800      	cmp	r0, #0
 8013e5c:	d1e2      	bne.n	8013e24 <__ssputs_r+0x70>
 8013e5e:	6921      	ldr	r1, [r4, #16]
 8013e60:	4650      	mov	r0, sl
 8013e62:	f7ff fe65 	bl	8013b30 <_free_r>
 8013e66:	e7c8      	b.n	8013dfa <__ssputs_r+0x46>

08013e68 <_svfiprintf_r>:
 8013e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e6c:	461d      	mov	r5, r3
 8013e6e:	898b      	ldrh	r3, [r1, #12]
 8013e70:	061f      	lsls	r7, r3, #24
 8013e72:	b09d      	sub	sp, #116	; 0x74
 8013e74:	4680      	mov	r8, r0
 8013e76:	460c      	mov	r4, r1
 8013e78:	4616      	mov	r6, r2
 8013e7a:	d50f      	bpl.n	8013e9c <_svfiprintf_r+0x34>
 8013e7c:	690b      	ldr	r3, [r1, #16]
 8013e7e:	b96b      	cbnz	r3, 8013e9c <_svfiprintf_r+0x34>
 8013e80:	2140      	movs	r1, #64	; 0x40
 8013e82:	f7ff fea3 	bl	8013bcc <_malloc_r>
 8013e86:	6020      	str	r0, [r4, #0]
 8013e88:	6120      	str	r0, [r4, #16]
 8013e8a:	b928      	cbnz	r0, 8013e98 <_svfiprintf_r+0x30>
 8013e8c:	230c      	movs	r3, #12
 8013e8e:	f8c8 3000 	str.w	r3, [r8]
 8013e92:	f04f 30ff 	mov.w	r0, #4294967295
 8013e96:	e0c8      	b.n	801402a <_svfiprintf_r+0x1c2>
 8013e98:	2340      	movs	r3, #64	; 0x40
 8013e9a:	6163      	str	r3, [r4, #20]
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8013ea0:	2320      	movs	r3, #32
 8013ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ea6:	2330      	movs	r3, #48	; 0x30
 8013ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013eac:	9503      	str	r5, [sp, #12]
 8013eae:	f04f 0b01 	mov.w	fp, #1
 8013eb2:	4637      	mov	r7, r6
 8013eb4:	463d      	mov	r5, r7
 8013eb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013eba:	b10b      	cbz	r3, 8013ec0 <_svfiprintf_r+0x58>
 8013ebc:	2b25      	cmp	r3, #37	; 0x25
 8013ebe:	d13e      	bne.n	8013f3e <_svfiprintf_r+0xd6>
 8013ec0:	ebb7 0a06 	subs.w	sl, r7, r6
 8013ec4:	d00b      	beq.n	8013ede <_svfiprintf_r+0x76>
 8013ec6:	4653      	mov	r3, sl
 8013ec8:	4632      	mov	r2, r6
 8013eca:	4621      	mov	r1, r4
 8013ecc:	4640      	mov	r0, r8
 8013ece:	f7ff ff71 	bl	8013db4 <__ssputs_r>
 8013ed2:	3001      	adds	r0, #1
 8013ed4:	f000 80a4 	beq.w	8014020 <_svfiprintf_r+0x1b8>
 8013ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eda:	4453      	add	r3, sl
 8013edc:	9309      	str	r3, [sp, #36]	; 0x24
 8013ede:	783b      	ldrb	r3, [r7, #0]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	f000 809d 	beq.w	8014020 <_svfiprintf_r+0x1b8>
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8013eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ef0:	9304      	str	r3, [sp, #16]
 8013ef2:	9307      	str	r3, [sp, #28]
 8013ef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ef8:	931a      	str	r3, [sp, #104]	; 0x68
 8013efa:	462f      	mov	r7, r5
 8013efc:	2205      	movs	r2, #5
 8013efe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013f02:	4850      	ldr	r0, [pc, #320]	; (8014044 <_svfiprintf_r+0x1dc>)
 8013f04:	f7ec f9f4 	bl	80002f0 <memchr>
 8013f08:	9b04      	ldr	r3, [sp, #16]
 8013f0a:	b9d0      	cbnz	r0, 8013f42 <_svfiprintf_r+0xda>
 8013f0c:	06d9      	lsls	r1, r3, #27
 8013f0e:	bf44      	itt	mi
 8013f10:	2220      	movmi	r2, #32
 8013f12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013f16:	071a      	lsls	r2, r3, #28
 8013f18:	bf44      	itt	mi
 8013f1a:	222b      	movmi	r2, #43	; 0x2b
 8013f1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013f20:	782a      	ldrb	r2, [r5, #0]
 8013f22:	2a2a      	cmp	r2, #42	; 0x2a
 8013f24:	d015      	beq.n	8013f52 <_svfiprintf_r+0xea>
 8013f26:	9a07      	ldr	r2, [sp, #28]
 8013f28:	462f      	mov	r7, r5
 8013f2a:	2000      	movs	r0, #0
 8013f2c:	250a      	movs	r5, #10
 8013f2e:	4639      	mov	r1, r7
 8013f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f34:	3b30      	subs	r3, #48	; 0x30
 8013f36:	2b09      	cmp	r3, #9
 8013f38:	d94d      	bls.n	8013fd6 <_svfiprintf_r+0x16e>
 8013f3a:	b1b8      	cbz	r0, 8013f6c <_svfiprintf_r+0x104>
 8013f3c:	e00f      	b.n	8013f5e <_svfiprintf_r+0xf6>
 8013f3e:	462f      	mov	r7, r5
 8013f40:	e7b8      	b.n	8013eb4 <_svfiprintf_r+0x4c>
 8013f42:	4a40      	ldr	r2, [pc, #256]	; (8014044 <_svfiprintf_r+0x1dc>)
 8013f44:	1a80      	subs	r0, r0, r2
 8013f46:	fa0b f000 	lsl.w	r0, fp, r0
 8013f4a:	4318      	orrs	r0, r3
 8013f4c:	9004      	str	r0, [sp, #16]
 8013f4e:	463d      	mov	r5, r7
 8013f50:	e7d3      	b.n	8013efa <_svfiprintf_r+0x92>
 8013f52:	9a03      	ldr	r2, [sp, #12]
 8013f54:	1d11      	adds	r1, r2, #4
 8013f56:	6812      	ldr	r2, [r2, #0]
 8013f58:	9103      	str	r1, [sp, #12]
 8013f5a:	2a00      	cmp	r2, #0
 8013f5c:	db01      	blt.n	8013f62 <_svfiprintf_r+0xfa>
 8013f5e:	9207      	str	r2, [sp, #28]
 8013f60:	e004      	b.n	8013f6c <_svfiprintf_r+0x104>
 8013f62:	4252      	negs	r2, r2
 8013f64:	f043 0302 	orr.w	r3, r3, #2
 8013f68:	9207      	str	r2, [sp, #28]
 8013f6a:	9304      	str	r3, [sp, #16]
 8013f6c:	783b      	ldrb	r3, [r7, #0]
 8013f6e:	2b2e      	cmp	r3, #46	; 0x2e
 8013f70:	d10c      	bne.n	8013f8c <_svfiprintf_r+0x124>
 8013f72:	787b      	ldrb	r3, [r7, #1]
 8013f74:	2b2a      	cmp	r3, #42	; 0x2a
 8013f76:	d133      	bne.n	8013fe0 <_svfiprintf_r+0x178>
 8013f78:	9b03      	ldr	r3, [sp, #12]
 8013f7a:	1d1a      	adds	r2, r3, #4
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	9203      	str	r2, [sp, #12]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	bfb8      	it	lt
 8013f84:	f04f 33ff 	movlt.w	r3, #4294967295
 8013f88:	3702      	adds	r7, #2
 8013f8a:	9305      	str	r3, [sp, #20]
 8013f8c:	4d2e      	ldr	r5, [pc, #184]	; (8014048 <_svfiprintf_r+0x1e0>)
 8013f8e:	7839      	ldrb	r1, [r7, #0]
 8013f90:	2203      	movs	r2, #3
 8013f92:	4628      	mov	r0, r5
 8013f94:	f7ec f9ac 	bl	80002f0 <memchr>
 8013f98:	b138      	cbz	r0, 8013faa <_svfiprintf_r+0x142>
 8013f9a:	2340      	movs	r3, #64	; 0x40
 8013f9c:	1b40      	subs	r0, r0, r5
 8013f9e:	fa03 f000 	lsl.w	r0, r3, r0
 8013fa2:	9b04      	ldr	r3, [sp, #16]
 8013fa4:	4303      	orrs	r3, r0
 8013fa6:	3701      	adds	r7, #1
 8013fa8:	9304      	str	r3, [sp, #16]
 8013faa:	7839      	ldrb	r1, [r7, #0]
 8013fac:	4827      	ldr	r0, [pc, #156]	; (801404c <_svfiprintf_r+0x1e4>)
 8013fae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013fb2:	2206      	movs	r2, #6
 8013fb4:	1c7e      	adds	r6, r7, #1
 8013fb6:	f7ec f99b 	bl	80002f0 <memchr>
 8013fba:	2800      	cmp	r0, #0
 8013fbc:	d038      	beq.n	8014030 <_svfiprintf_r+0x1c8>
 8013fbe:	4b24      	ldr	r3, [pc, #144]	; (8014050 <_svfiprintf_r+0x1e8>)
 8013fc0:	bb13      	cbnz	r3, 8014008 <_svfiprintf_r+0x1a0>
 8013fc2:	9b03      	ldr	r3, [sp, #12]
 8013fc4:	3307      	adds	r3, #7
 8013fc6:	f023 0307 	bic.w	r3, r3, #7
 8013fca:	3308      	adds	r3, #8
 8013fcc:	9303      	str	r3, [sp, #12]
 8013fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fd0:	444b      	add	r3, r9
 8013fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8013fd4:	e76d      	b.n	8013eb2 <_svfiprintf_r+0x4a>
 8013fd6:	fb05 3202 	mla	r2, r5, r2, r3
 8013fda:	2001      	movs	r0, #1
 8013fdc:	460f      	mov	r7, r1
 8013fde:	e7a6      	b.n	8013f2e <_svfiprintf_r+0xc6>
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	3701      	adds	r7, #1
 8013fe4:	9305      	str	r3, [sp, #20]
 8013fe6:	4619      	mov	r1, r3
 8013fe8:	250a      	movs	r5, #10
 8013fea:	4638      	mov	r0, r7
 8013fec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ff0:	3a30      	subs	r2, #48	; 0x30
 8013ff2:	2a09      	cmp	r2, #9
 8013ff4:	d903      	bls.n	8013ffe <_svfiprintf_r+0x196>
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d0c8      	beq.n	8013f8c <_svfiprintf_r+0x124>
 8013ffa:	9105      	str	r1, [sp, #20]
 8013ffc:	e7c6      	b.n	8013f8c <_svfiprintf_r+0x124>
 8013ffe:	fb05 2101 	mla	r1, r5, r1, r2
 8014002:	2301      	movs	r3, #1
 8014004:	4607      	mov	r7, r0
 8014006:	e7f0      	b.n	8013fea <_svfiprintf_r+0x182>
 8014008:	ab03      	add	r3, sp, #12
 801400a:	9300      	str	r3, [sp, #0]
 801400c:	4622      	mov	r2, r4
 801400e:	4b11      	ldr	r3, [pc, #68]	; (8014054 <_svfiprintf_r+0x1ec>)
 8014010:	a904      	add	r1, sp, #16
 8014012:	4640      	mov	r0, r8
 8014014:	f3af 8000 	nop.w
 8014018:	f1b0 3fff 	cmp.w	r0, #4294967295
 801401c:	4681      	mov	r9, r0
 801401e:	d1d6      	bne.n	8013fce <_svfiprintf_r+0x166>
 8014020:	89a3      	ldrh	r3, [r4, #12]
 8014022:	065b      	lsls	r3, r3, #25
 8014024:	f53f af35 	bmi.w	8013e92 <_svfiprintf_r+0x2a>
 8014028:	9809      	ldr	r0, [sp, #36]	; 0x24
 801402a:	b01d      	add	sp, #116	; 0x74
 801402c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014030:	ab03      	add	r3, sp, #12
 8014032:	9300      	str	r3, [sp, #0]
 8014034:	4622      	mov	r2, r4
 8014036:	4b07      	ldr	r3, [pc, #28]	; (8014054 <_svfiprintf_r+0x1ec>)
 8014038:	a904      	add	r1, sp, #16
 801403a:	4640      	mov	r0, r8
 801403c:	f000 f882 	bl	8014144 <_printf_i>
 8014040:	e7ea      	b.n	8014018 <_svfiprintf_r+0x1b0>
 8014042:	bf00      	nop
 8014044:	080171df 	.word	0x080171df
 8014048:	080171e5 	.word	0x080171e5
 801404c:	080171e9 	.word	0x080171e9
 8014050:	00000000 	.word	0x00000000
 8014054:	08013db5 	.word	0x08013db5

08014058 <_printf_common>:
 8014058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801405c:	4691      	mov	r9, r2
 801405e:	461f      	mov	r7, r3
 8014060:	688a      	ldr	r2, [r1, #8]
 8014062:	690b      	ldr	r3, [r1, #16]
 8014064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014068:	4293      	cmp	r3, r2
 801406a:	bfb8      	it	lt
 801406c:	4613      	movlt	r3, r2
 801406e:	f8c9 3000 	str.w	r3, [r9]
 8014072:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014076:	4606      	mov	r6, r0
 8014078:	460c      	mov	r4, r1
 801407a:	b112      	cbz	r2, 8014082 <_printf_common+0x2a>
 801407c:	3301      	adds	r3, #1
 801407e:	f8c9 3000 	str.w	r3, [r9]
 8014082:	6823      	ldr	r3, [r4, #0]
 8014084:	0699      	lsls	r1, r3, #26
 8014086:	bf42      	ittt	mi
 8014088:	f8d9 3000 	ldrmi.w	r3, [r9]
 801408c:	3302      	addmi	r3, #2
 801408e:	f8c9 3000 	strmi.w	r3, [r9]
 8014092:	6825      	ldr	r5, [r4, #0]
 8014094:	f015 0506 	ands.w	r5, r5, #6
 8014098:	d107      	bne.n	80140aa <_printf_common+0x52>
 801409a:	f104 0a19 	add.w	sl, r4, #25
 801409e:	68e3      	ldr	r3, [r4, #12]
 80140a0:	f8d9 2000 	ldr.w	r2, [r9]
 80140a4:	1a9b      	subs	r3, r3, r2
 80140a6:	42ab      	cmp	r3, r5
 80140a8:	dc28      	bgt.n	80140fc <_printf_common+0xa4>
 80140aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80140ae:	6822      	ldr	r2, [r4, #0]
 80140b0:	3300      	adds	r3, #0
 80140b2:	bf18      	it	ne
 80140b4:	2301      	movne	r3, #1
 80140b6:	0692      	lsls	r2, r2, #26
 80140b8:	d42d      	bmi.n	8014116 <_printf_common+0xbe>
 80140ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80140be:	4639      	mov	r1, r7
 80140c0:	4630      	mov	r0, r6
 80140c2:	47c0      	blx	r8
 80140c4:	3001      	adds	r0, #1
 80140c6:	d020      	beq.n	801410a <_printf_common+0xb2>
 80140c8:	6823      	ldr	r3, [r4, #0]
 80140ca:	68e5      	ldr	r5, [r4, #12]
 80140cc:	f8d9 2000 	ldr.w	r2, [r9]
 80140d0:	f003 0306 	and.w	r3, r3, #6
 80140d4:	2b04      	cmp	r3, #4
 80140d6:	bf08      	it	eq
 80140d8:	1aad      	subeq	r5, r5, r2
 80140da:	68a3      	ldr	r3, [r4, #8]
 80140dc:	6922      	ldr	r2, [r4, #16]
 80140de:	bf0c      	ite	eq
 80140e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80140e4:	2500      	movne	r5, #0
 80140e6:	4293      	cmp	r3, r2
 80140e8:	bfc4      	itt	gt
 80140ea:	1a9b      	subgt	r3, r3, r2
 80140ec:	18ed      	addgt	r5, r5, r3
 80140ee:	f04f 0900 	mov.w	r9, #0
 80140f2:	341a      	adds	r4, #26
 80140f4:	454d      	cmp	r5, r9
 80140f6:	d11a      	bne.n	801412e <_printf_common+0xd6>
 80140f8:	2000      	movs	r0, #0
 80140fa:	e008      	b.n	801410e <_printf_common+0xb6>
 80140fc:	2301      	movs	r3, #1
 80140fe:	4652      	mov	r2, sl
 8014100:	4639      	mov	r1, r7
 8014102:	4630      	mov	r0, r6
 8014104:	47c0      	blx	r8
 8014106:	3001      	adds	r0, #1
 8014108:	d103      	bne.n	8014112 <_printf_common+0xba>
 801410a:	f04f 30ff 	mov.w	r0, #4294967295
 801410e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014112:	3501      	adds	r5, #1
 8014114:	e7c3      	b.n	801409e <_printf_common+0x46>
 8014116:	18e1      	adds	r1, r4, r3
 8014118:	1c5a      	adds	r2, r3, #1
 801411a:	2030      	movs	r0, #48	; 0x30
 801411c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014120:	4422      	add	r2, r4
 8014122:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014126:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801412a:	3302      	adds	r3, #2
 801412c:	e7c5      	b.n	80140ba <_printf_common+0x62>
 801412e:	2301      	movs	r3, #1
 8014130:	4622      	mov	r2, r4
 8014132:	4639      	mov	r1, r7
 8014134:	4630      	mov	r0, r6
 8014136:	47c0      	blx	r8
 8014138:	3001      	adds	r0, #1
 801413a:	d0e6      	beq.n	801410a <_printf_common+0xb2>
 801413c:	f109 0901 	add.w	r9, r9, #1
 8014140:	e7d8      	b.n	80140f4 <_printf_common+0x9c>
	...

08014144 <_printf_i>:
 8014144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014148:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801414c:	460c      	mov	r4, r1
 801414e:	7e09      	ldrb	r1, [r1, #24]
 8014150:	b085      	sub	sp, #20
 8014152:	296e      	cmp	r1, #110	; 0x6e
 8014154:	4617      	mov	r7, r2
 8014156:	4606      	mov	r6, r0
 8014158:	4698      	mov	r8, r3
 801415a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801415c:	f000 80b3 	beq.w	80142c6 <_printf_i+0x182>
 8014160:	d822      	bhi.n	80141a8 <_printf_i+0x64>
 8014162:	2963      	cmp	r1, #99	; 0x63
 8014164:	d036      	beq.n	80141d4 <_printf_i+0x90>
 8014166:	d80a      	bhi.n	801417e <_printf_i+0x3a>
 8014168:	2900      	cmp	r1, #0
 801416a:	f000 80b9 	beq.w	80142e0 <_printf_i+0x19c>
 801416e:	2958      	cmp	r1, #88	; 0x58
 8014170:	f000 8083 	beq.w	801427a <_printf_i+0x136>
 8014174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014178:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801417c:	e032      	b.n	80141e4 <_printf_i+0xa0>
 801417e:	2964      	cmp	r1, #100	; 0x64
 8014180:	d001      	beq.n	8014186 <_printf_i+0x42>
 8014182:	2969      	cmp	r1, #105	; 0x69
 8014184:	d1f6      	bne.n	8014174 <_printf_i+0x30>
 8014186:	6820      	ldr	r0, [r4, #0]
 8014188:	6813      	ldr	r3, [r2, #0]
 801418a:	0605      	lsls	r5, r0, #24
 801418c:	f103 0104 	add.w	r1, r3, #4
 8014190:	d52a      	bpl.n	80141e8 <_printf_i+0xa4>
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	6011      	str	r1, [r2, #0]
 8014196:	2b00      	cmp	r3, #0
 8014198:	da03      	bge.n	80141a2 <_printf_i+0x5e>
 801419a:	222d      	movs	r2, #45	; 0x2d
 801419c:	425b      	negs	r3, r3
 801419e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80141a2:	486f      	ldr	r0, [pc, #444]	; (8014360 <_printf_i+0x21c>)
 80141a4:	220a      	movs	r2, #10
 80141a6:	e039      	b.n	801421c <_printf_i+0xd8>
 80141a8:	2973      	cmp	r1, #115	; 0x73
 80141aa:	f000 809d 	beq.w	80142e8 <_printf_i+0x1a4>
 80141ae:	d808      	bhi.n	80141c2 <_printf_i+0x7e>
 80141b0:	296f      	cmp	r1, #111	; 0x6f
 80141b2:	d020      	beq.n	80141f6 <_printf_i+0xb2>
 80141b4:	2970      	cmp	r1, #112	; 0x70
 80141b6:	d1dd      	bne.n	8014174 <_printf_i+0x30>
 80141b8:	6823      	ldr	r3, [r4, #0]
 80141ba:	f043 0320 	orr.w	r3, r3, #32
 80141be:	6023      	str	r3, [r4, #0]
 80141c0:	e003      	b.n	80141ca <_printf_i+0x86>
 80141c2:	2975      	cmp	r1, #117	; 0x75
 80141c4:	d017      	beq.n	80141f6 <_printf_i+0xb2>
 80141c6:	2978      	cmp	r1, #120	; 0x78
 80141c8:	d1d4      	bne.n	8014174 <_printf_i+0x30>
 80141ca:	2378      	movs	r3, #120	; 0x78
 80141cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80141d0:	4864      	ldr	r0, [pc, #400]	; (8014364 <_printf_i+0x220>)
 80141d2:	e055      	b.n	8014280 <_printf_i+0x13c>
 80141d4:	6813      	ldr	r3, [r2, #0]
 80141d6:	1d19      	adds	r1, r3, #4
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	6011      	str	r1, [r2, #0]
 80141dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80141e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80141e4:	2301      	movs	r3, #1
 80141e6:	e08c      	b.n	8014302 <_printf_i+0x1be>
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	6011      	str	r1, [r2, #0]
 80141ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80141f0:	bf18      	it	ne
 80141f2:	b21b      	sxthne	r3, r3
 80141f4:	e7cf      	b.n	8014196 <_printf_i+0x52>
 80141f6:	6813      	ldr	r3, [r2, #0]
 80141f8:	6825      	ldr	r5, [r4, #0]
 80141fa:	1d18      	adds	r0, r3, #4
 80141fc:	6010      	str	r0, [r2, #0]
 80141fe:	0628      	lsls	r0, r5, #24
 8014200:	d501      	bpl.n	8014206 <_printf_i+0xc2>
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	e002      	b.n	801420c <_printf_i+0xc8>
 8014206:	0668      	lsls	r0, r5, #25
 8014208:	d5fb      	bpl.n	8014202 <_printf_i+0xbe>
 801420a:	881b      	ldrh	r3, [r3, #0]
 801420c:	4854      	ldr	r0, [pc, #336]	; (8014360 <_printf_i+0x21c>)
 801420e:	296f      	cmp	r1, #111	; 0x6f
 8014210:	bf14      	ite	ne
 8014212:	220a      	movne	r2, #10
 8014214:	2208      	moveq	r2, #8
 8014216:	2100      	movs	r1, #0
 8014218:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801421c:	6865      	ldr	r5, [r4, #4]
 801421e:	60a5      	str	r5, [r4, #8]
 8014220:	2d00      	cmp	r5, #0
 8014222:	f2c0 8095 	blt.w	8014350 <_printf_i+0x20c>
 8014226:	6821      	ldr	r1, [r4, #0]
 8014228:	f021 0104 	bic.w	r1, r1, #4
 801422c:	6021      	str	r1, [r4, #0]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d13d      	bne.n	80142ae <_printf_i+0x16a>
 8014232:	2d00      	cmp	r5, #0
 8014234:	f040 808e 	bne.w	8014354 <_printf_i+0x210>
 8014238:	4665      	mov	r5, ip
 801423a:	2a08      	cmp	r2, #8
 801423c:	d10b      	bne.n	8014256 <_printf_i+0x112>
 801423e:	6823      	ldr	r3, [r4, #0]
 8014240:	07db      	lsls	r3, r3, #31
 8014242:	d508      	bpl.n	8014256 <_printf_i+0x112>
 8014244:	6923      	ldr	r3, [r4, #16]
 8014246:	6862      	ldr	r2, [r4, #4]
 8014248:	429a      	cmp	r2, r3
 801424a:	bfde      	ittt	le
 801424c:	2330      	movle	r3, #48	; 0x30
 801424e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014252:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014256:	ebac 0305 	sub.w	r3, ip, r5
 801425a:	6123      	str	r3, [r4, #16]
 801425c:	f8cd 8000 	str.w	r8, [sp]
 8014260:	463b      	mov	r3, r7
 8014262:	aa03      	add	r2, sp, #12
 8014264:	4621      	mov	r1, r4
 8014266:	4630      	mov	r0, r6
 8014268:	f7ff fef6 	bl	8014058 <_printf_common>
 801426c:	3001      	adds	r0, #1
 801426e:	d14d      	bne.n	801430c <_printf_i+0x1c8>
 8014270:	f04f 30ff 	mov.w	r0, #4294967295
 8014274:	b005      	add	sp, #20
 8014276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801427a:	4839      	ldr	r0, [pc, #228]	; (8014360 <_printf_i+0x21c>)
 801427c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014280:	6813      	ldr	r3, [r2, #0]
 8014282:	6821      	ldr	r1, [r4, #0]
 8014284:	1d1d      	adds	r5, r3, #4
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	6015      	str	r5, [r2, #0]
 801428a:	060a      	lsls	r2, r1, #24
 801428c:	d50b      	bpl.n	80142a6 <_printf_i+0x162>
 801428e:	07ca      	lsls	r2, r1, #31
 8014290:	bf44      	itt	mi
 8014292:	f041 0120 	orrmi.w	r1, r1, #32
 8014296:	6021      	strmi	r1, [r4, #0]
 8014298:	b91b      	cbnz	r3, 80142a2 <_printf_i+0x15e>
 801429a:	6822      	ldr	r2, [r4, #0]
 801429c:	f022 0220 	bic.w	r2, r2, #32
 80142a0:	6022      	str	r2, [r4, #0]
 80142a2:	2210      	movs	r2, #16
 80142a4:	e7b7      	b.n	8014216 <_printf_i+0xd2>
 80142a6:	064d      	lsls	r5, r1, #25
 80142a8:	bf48      	it	mi
 80142aa:	b29b      	uxthmi	r3, r3
 80142ac:	e7ef      	b.n	801428e <_printf_i+0x14a>
 80142ae:	4665      	mov	r5, ip
 80142b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80142b4:	fb02 3311 	mls	r3, r2, r1, r3
 80142b8:	5cc3      	ldrb	r3, [r0, r3]
 80142ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80142be:	460b      	mov	r3, r1
 80142c0:	2900      	cmp	r1, #0
 80142c2:	d1f5      	bne.n	80142b0 <_printf_i+0x16c>
 80142c4:	e7b9      	b.n	801423a <_printf_i+0xf6>
 80142c6:	6813      	ldr	r3, [r2, #0]
 80142c8:	6825      	ldr	r5, [r4, #0]
 80142ca:	6961      	ldr	r1, [r4, #20]
 80142cc:	1d18      	adds	r0, r3, #4
 80142ce:	6010      	str	r0, [r2, #0]
 80142d0:	0628      	lsls	r0, r5, #24
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	d501      	bpl.n	80142da <_printf_i+0x196>
 80142d6:	6019      	str	r1, [r3, #0]
 80142d8:	e002      	b.n	80142e0 <_printf_i+0x19c>
 80142da:	066a      	lsls	r2, r5, #25
 80142dc:	d5fb      	bpl.n	80142d6 <_printf_i+0x192>
 80142de:	8019      	strh	r1, [r3, #0]
 80142e0:	2300      	movs	r3, #0
 80142e2:	6123      	str	r3, [r4, #16]
 80142e4:	4665      	mov	r5, ip
 80142e6:	e7b9      	b.n	801425c <_printf_i+0x118>
 80142e8:	6813      	ldr	r3, [r2, #0]
 80142ea:	1d19      	adds	r1, r3, #4
 80142ec:	6011      	str	r1, [r2, #0]
 80142ee:	681d      	ldr	r5, [r3, #0]
 80142f0:	6862      	ldr	r2, [r4, #4]
 80142f2:	2100      	movs	r1, #0
 80142f4:	4628      	mov	r0, r5
 80142f6:	f7eb fffb 	bl	80002f0 <memchr>
 80142fa:	b108      	cbz	r0, 8014300 <_printf_i+0x1bc>
 80142fc:	1b40      	subs	r0, r0, r5
 80142fe:	6060      	str	r0, [r4, #4]
 8014300:	6863      	ldr	r3, [r4, #4]
 8014302:	6123      	str	r3, [r4, #16]
 8014304:	2300      	movs	r3, #0
 8014306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801430a:	e7a7      	b.n	801425c <_printf_i+0x118>
 801430c:	6923      	ldr	r3, [r4, #16]
 801430e:	462a      	mov	r2, r5
 8014310:	4639      	mov	r1, r7
 8014312:	4630      	mov	r0, r6
 8014314:	47c0      	blx	r8
 8014316:	3001      	adds	r0, #1
 8014318:	d0aa      	beq.n	8014270 <_printf_i+0x12c>
 801431a:	6823      	ldr	r3, [r4, #0]
 801431c:	079b      	lsls	r3, r3, #30
 801431e:	d413      	bmi.n	8014348 <_printf_i+0x204>
 8014320:	68e0      	ldr	r0, [r4, #12]
 8014322:	9b03      	ldr	r3, [sp, #12]
 8014324:	4298      	cmp	r0, r3
 8014326:	bfb8      	it	lt
 8014328:	4618      	movlt	r0, r3
 801432a:	e7a3      	b.n	8014274 <_printf_i+0x130>
 801432c:	2301      	movs	r3, #1
 801432e:	464a      	mov	r2, r9
 8014330:	4639      	mov	r1, r7
 8014332:	4630      	mov	r0, r6
 8014334:	47c0      	blx	r8
 8014336:	3001      	adds	r0, #1
 8014338:	d09a      	beq.n	8014270 <_printf_i+0x12c>
 801433a:	3501      	adds	r5, #1
 801433c:	68e3      	ldr	r3, [r4, #12]
 801433e:	9a03      	ldr	r2, [sp, #12]
 8014340:	1a9b      	subs	r3, r3, r2
 8014342:	42ab      	cmp	r3, r5
 8014344:	dcf2      	bgt.n	801432c <_printf_i+0x1e8>
 8014346:	e7eb      	b.n	8014320 <_printf_i+0x1dc>
 8014348:	2500      	movs	r5, #0
 801434a:	f104 0919 	add.w	r9, r4, #25
 801434e:	e7f5      	b.n	801433c <_printf_i+0x1f8>
 8014350:	2b00      	cmp	r3, #0
 8014352:	d1ac      	bne.n	80142ae <_printf_i+0x16a>
 8014354:	7803      	ldrb	r3, [r0, #0]
 8014356:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801435a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801435e:	e76c      	b.n	801423a <_printf_i+0xf6>
 8014360:	080171f0 	.word	0x080171f0
 8014364:	08017201 	.word	0x08017201

08014368 <memmove>:
 8014368:	4288      	cmp	r0, r1
 801436a:	b510      	push	{r4, lr}
 801436c:	eb01 0302 	add.w	r3, r1, r2
 8014370:	d807      	bhi.n	8014382 <memmove+0x1a>
 8014372:	1e42      	subs	r2, r0, #1
 8014374:	4299      	cmp	r1, r3
 8014376:	d00a      	beq.n	801438e <memmove+0x26>
 8014378:	f811 4b01 	ldrb.w	r4, [r1], #1
 801437c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014380:	e7f8      	b.n	8014374 <memmove+0xc>
 8014382:	4283      	cmp	r3, r0
 8014384:	d9f5      	bls.n	8014372 <memmove+0xa>
 8014386:	1881      	adds	r1, r0, r2
 8014388:	1ad2      	subs	r2, r2, r3
 801438a:	42d3      	cmn	r3, r2
 801438c:	d100      	bne.n	8014390 <memmove+0x28>
 801438e:	bd10      	pop	{r4, pc}
 8014390:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014394:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014398:	e7f7      	b.n	801438a <memmove+0x22>

0801439a <_realloc_r>:
 801439a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801439c:	4607      	mov	r7, r0
 801439e:	4614      	mov	r4, r2
 80143a0:	460e      	mov	r6, r1
 80143a2:	b921      	cbnz	r1, 80143ae <_realloc_r+0x14>
 80143a4:	4611      	mov	r1, r2
 80143a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80143aa:	f7ff bc0f 	b.w	8013bcc <_malloc_r>
 80143ae:	b922      	cbnz	r2, 80143ba <_realloc_r+0x20>
 80143b0:	f7ff fbbe 	bl	8013b30 <_free_r>
 80143b4:	4625      	mov	r5, r4
 80143b6:	4628      	mov	r0, r5
 80143b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143ba:	f000 f814 	bl	80143e6 <_malloc_usable_size_r>
 80143be:	42a0      	cmp	r0, r4
 80143c0:	d20f      	bcs.n	80143e2 <_realloc_r+0x48>
 80143c2:	4621      	mov	r1, r4
 80143c4:	4638      	mov	r0, r7
 80143c6:	f7ff fc01 	bl	8013bcc <_malloc_r>
 80143ca:	4605      	mov	r5, r0
 80143cc:	2800      	cmp	r0, #0
 80143ce:	d0f2      	beq.n	80143b6 <_realloc_r+0x1c>
 80143d0:	4631      	mov	r1, r6
 80143d2:	4622      	mov	r2, r4
 80143d4:	f7ff fb98 	bl	8013b08 <memcpy>
 80143d8:	4631      	mov	r1, r6
 80143da:	4638      	mov	r0, r7
 80143dc:	f7ff fba8 	bl	8013b30 <_free_r>
 80143e0:	e7e9      	b.n	80143b6 <_realloc_r+0x1c>
 80143e2:	4635      	mov	r5, r6
 80143e4:	e7e7      	b.n	80143b6 <_realloc_r+0x1c>

080143e6 <_malloc_usable_size_r>:
 80143e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143ea:	1f18      	subs	r0, r3, #4
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	bfbc      	itt	lt
 80143f0:	580b      	ldrlt	r3, [r1, r0]
 80143f2:	18c0      	addlt	r0, r0, r3
 80143f4:	4770      	bx	lr

080143f6 <checkint>:
 80143f6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80143fa:	2b7e      	cmp	r3, #126	; 0x7e
 80143fc:	dd10      	ble.n	8014420 <checkint+0x2a>
 80143fe:	2b96      	cmp	r3, #150	; 0x96
 8014400:	dc0c      	bgt.n	801441c <checkint+0x26>
 8014402:	2201      	movs	r2, #1
 8014404:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8014408:	fa02 f303 	lsl.w	r3, r2, r3
 801440c:	1e5a      	subs	r2, r3, #1
 801440e:	4202      	tst	r2, r0
 8014410:	d106      	bne.n	8014420 <checkint+0x2a>
 8014412:	4203      	tst	r3, r0
 8014414:	bf0c      	ite	eq
 8014416:	2002      	moveq	r0, #2
 8014418:	2001      	movne	r0, #1
 801441a:	4770      	bx	lr
 801441c:	2002      	movs	r0, #2
 801441e:	4770      	bx	lr
 8014420:	2000      	movs	r0, #0
 8014422:	4770      	bx	lr
 8014424:	0000      	movs	r0, r0
	...

08014428 <powf>:
 8014428:	ee10 1a10 	vmov	r1, s0
 801442c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8014430:	ee10 4a90 	vmov	r4, s1
 8014434:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8014438:	0062      	lsls	r2, r4, #1
 801443a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801443e:	eef0 4a60 	vmov.f32	s9, s1
 8014442:	f102 30ff 	add.w	r0, r2, #4294967295
 8014446:	4b92      	ldr	r3, [pc, #584]	; (8014690 <powf+0x268>)
 8014448:	d255      	bcs.n	80144f6 <powf+0xce>
 801444a:	4298      	cmp	r0, r3
 801444c:	d855      	bhi.n	80144fa <powf+0xd2>
 801444e:	2000      	movs	r0, #0
 8014450:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8014454:	4a8f      	ldr	r2, [pc, #572]	; (8014694 <powf+0x26c>)
 8014456:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 801445a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 801445e:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8014462:	0ddb      	lsrs	r3, r3, #23
 8014464:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8014468:	05db      	lsls	r3, r3, #23
 801446a:	ed94 6b00 	vldr	d6, [r4]
 801446e:	1ac9      	subs	r1, r1, r3
 8014470:	ee07 1a90 	vmov	s15, r1
 8014474:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8014478:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801447c:	eea6 2b07 	vfma.f64	d2, d6, d7
 8014480:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 8014484:	ee22 6b02 	vmul.f64	d6, d2, d2
 8014488:	eea2 7b05 	vfma.f64	d7, d2, d5
 801448c:	15db      	asrs	r3, r3, #23
 801448e:	ed94 5b02 	vldr	d5, [r4, #8]
 8014492:	ee00 3a10 	vmov	s0, r3
 8014496:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 801449a:	ee30 0b05 	vadd.f64	d0, d0, d5
 801449e:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 80144a2:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 80144a6:	eea2 0b05 	vfma.f64	d0, d2, d5
 80144aa:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 80144ae:	eea2 5b03 	vfma.f64	d5, d2, d3
 80144b2:	eea6 0b05 	vfma.f64	d0, d6, d5
 80144b6:	ee26 6b06 	vmul.f64	d6, d6, d6
 80144ba:	eea7 0b06 	vfma.f64	d0, d7, d6
 80144be:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 80144c2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80144c6:	ee10 3a90 	vmov	r3, s1
 80144ca:	2500      	movs	r5, #0
 80144cc:	0bda      	lsrs	r2, r3, #15
 80144ce:	2300      	movs	r3, #0
 80144d0:	b292      	uxth	r2, r2
 80144d2:	f248 04be 	movw	r4, #32958	; 0x80be
 80144d6:	429d      	cmp	r5, r3
 80144d8:	bf08      	it	eq
 80144da:	4294      	cmpeq	r4, r2
 80144dc:	f080 8094 	bcs.w	8014608 <powf+0x1e0>
 80144e0:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8014678 <powf+0x250>
 80144e4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80144e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144ec:	dd76      	ble.n	80145dc <powf+0x1b4>
 80144ee:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80144f2:	f000 be57 	b.w	80151a4 <__math_oflowf>
 80144f6:	4298      	cmp	r0, r3
 80144f8:	d92d      	bls.n	8014556 <powf+0x12e>
 80144fa:	b952      	cbnz	r2, 8014512 <powf+0xea>
 80144fc:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8014500:	005b      	lsls	r3, r3, #1
 8014502:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8014506:	f240 80ae 	bls.w	8014666 <powf+0x23e>
 801450a:	ee30 0a24 	vadd.f32	s0, s0, s9
 801450e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8014512:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8014516:	d105      	bne.n	8014524 <powf+0xfc>
 8014518:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801451c:	0064      	lsls	r4, r4, #1
 801451e:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8014522:	e7f0      	b.n	8014506 <powf+0xde>
 8014524:	004b      	lsls	r3, r1, #1
 8014526:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801452a:	d8ee      	bhi.n	801450a <powf+0xe2>
 801452c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8014530:	d1eb      	bne.n	801450a <powf+0xe2>
 8014532:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8014536:	f000 8096 	beq.w	8014666 <powf+0x23e>
 801453a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801453e:	ea6f 0404 	mvn.w	r4, r4
 8014542:	bf34      	ite	cc
 8014544:	2300      	movcc	r3, #0
 8014546:	2301      	movcs	r3, #1
 8014548:	0fe4      	lsrs	r4, r4, #31
 801454a:	42a3      	cmp	r3, r4
 801454c:	f040 808e 	bne.w	801466c <powf+0x244>
 8014550:	ee24 0aa4 	vmul.f32	s0, s9, s9
 8014554:	e7db      	b.n	801450e <powf+0xe6>
 8014556:	004d      	lsls	r5, r1, #1
 8014558:	1e6a      	subs	r2, r5, #1
 801455a:	429a      	cmp	r2, r3
 801455c:	d91b      	bls.n	8014596 <powf+0x16e>
 801455e:	2900      	cmp	r1, #0
 8014560:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014564:	da0e      	bge.n	8014584 <powf+0x15c>
 8014566:	ee10 0a90 	vmov	r0, s1
 801456a:	f7ff ff44 	bl	80143f6 <checkint>
 801456e:	2801      	cmp	r0, #1
 8014570:	d108      	bne.n	8014584 <powf+0x15c>
 8014572:	eeb1 0a40 	vneg.f32	s0, s0
 8014576:	b93d      	cbnz	r5, 8014588 <powf+0x160>
 8014578:	2c00      	cmp	r4, #0
 801457a:	dac8      	bge.n	801450e <powf+0xe6>
 801457c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8014580:	f000 be16 	b.w	80151b0 <__math_divzerof>
 8014584:	2000      	movs	r0, #0
 8014586:	e7f6      	b.n	8014576 <powf+0x14e>
 8014588:	2c00      	cmp	r4, #0
 801458a:	dac0      	bge.n	801450e <powf+0xe6>
 801458c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014590:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8014594:	e7bb      	b.n	801450e <powf+0xe6>
 8014596:	2900      	cmp	r1, #0
 8014598:	da1e      	bge.n	80145d8 <powf+0x1b0>
 801459a:	ee10 0a90 	vmov	r0, s1
 801459e:	f7ff ff2a 	bl	80143f6 <checkint>
 80145a2:	b918      	cbnz	r0, 80145ac <powf+0x184>
 80145a4:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80145a8:	f000 be12 	b.w	80151d0 <__math_invalidf>
 80145ac:	2801      	cmp	r0, #1
 80145ae:	bf0c      	ite	eq
 80145b0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80145b4:	2000      	movne	r0, #0
 80145b6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80145ba:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80145be:	f4bf af47 	bcs.w	8014450 <powf+0x28>
 80145c2:	eddf 0a35 	vldr	s1, [pc, #212]	; 8014698 <powf+0x270>
 80145c6:	ee20 0a20 	vmul.f32	s0, s0, s1
 80145ca:	ee10 3a10 	vmov	r3, s0
 80145ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80145d2:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80145d6:	e73b      	b.n	8014450 <powf+0x28>
 80145d8:	2000      	movs	r0, #0
 80145da:	e7ee      	b.n	80145ba <powf+0x192>
 80145dc:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8014680 <powf+0x258>
 80145e0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80145e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145e8:	d803      	bhi.n	80145f2 <powf+0x1ca>
 80145ea:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80145ee:	f000 bdcd 	b.w	801518c <__math_uflowf>
 80145f2:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8014688 <powf+0x260>
 80145f6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80145fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145fe:	d503      	bpl.n	8014608 <powf+0x1e0>
 8014600:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8014604:	f000 bdc8 	b.w	8015198 <__math_may_uflowf>
 8014608:	4924      	ldr	r1, [pc, #144]	; (801469c <powf+0x274>)
 801460a:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 801460e:	ee30 6b07 	vadd.f64	d6, d0, d7
 8014612:	ec55 4b16 	vmov	r4, r5, d6
 8014616:	ee36 7b47 	vsub.f64	d7, d6, d7
 801461a:	f004 021f 	and.w	r2, r4, #31
 801461e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8014622:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 8014626:	ee30 0b47 	vsub.f64	d0, d0, d7
 801462a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801462e:	e9d2 6700 	ldrd	r6, r7, [r2]
 8014632:	eea0 7b06 	vfma.f64	d7, d0, d6
 8014636:	1824      	adds	r4, r4, r0
 8014638:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 801463c:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8014640:	2000      	movs	r0, #0
 8014642:	1982      	adds	r2, r0, r6
 8014644:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 8014648:	eb41 0307 	adc.w	r3, r1, r7
 801464c:	eea0 6b05 	vfma.f64	d6, d0, d5
 8014650:	ee20 0b00 	vmul.f64	d0, d0, d0
 8014654:	eea6 7b00 	vfma.f64	d7, d6, d0
 8014658:	ec43 2b16 	vmov	d6, r2, r3
 801465c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8014660:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014664:	e753      	b.n	801450e <powf+0xe6>
 8014666:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801466a:	e750      	b.n	801450e <powf+0xe6>
 801466c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80146a0 <powf+0x278>
 8014670:	e74d      	b.n	801450e <powf+0xe6>
 8014672:	bf00      	nop
 8014674:	f3af 8000 	nop.w
 8014678:	ffd1d571 	.word	0xffd1d571
 801467c:	405fffff 	.word	0x405fffff
 8014680:	00000000 	.word	0x00000000
 8014684:	c062c000 	.word	0xc062c000
 8014688:	00000000 	.word	0x00000000
 801468c:	c062a000 	.word	0xc062a000
 8014690:	fefffffe 	.word	0xfefffffe
 8014694:	08017278 	.word	0x08017278
 8014698:	4b000000 	.word	0x4b000000
 801469c:	080173f0 	.word	0x080173f0
	...

080146a8 <pow>:
 80146a8:	b570      	push	{r4, r5, r6, lr}
 80146aa:	ed2d 8b0a 	vpush	{d8-d12}
 80146ae:	eeb0 9b40 	vmov.f64	d9, d0
 80146b2:	eeb0 8b41 	vmov.f64	d8, d1
 80146b6:	4c8c      	ldr	r4, [pc, #560]	; (80148e8 <pow+0x240>)
 80146b8:	b08a      	sub	sp, #40	; 0x28
 80146ba:	f000 f9c1 	bl	8014a40 <__ieee754_pow>
 80146be:	f994 3000 	ldrsb.w	r3, [r4]
 80146c2:	eeb0 ab40 	vmov.f64	d10, d0
 80146c6:	1c5a      	adds	r2, r3, #1
 80146c8:	4626      	mov	r6, r4
 80146ca:	d04b      	beq.n	8014764 <pow+0xbc>
 80146cc:	eeb4 8b48 	vcmp.f64	d8, d8
 80146d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146d4:	d646      	bvs.n	8014764 <pow+0xbc>
 80146d6:	eeb4 9b49 	vcmp.f64	d9, d9
 80146da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146de:	d719      	bvc.n	8014714 <pow+0x6c>
 80146e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80146e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146e8:	d13c      	bne.n	8014764 <pow+0xbc>
 80146ea:	2201      	movs	r2, #1
 80146ec:	9200      	str	r2, [sp, #0]
 80146ee:	497f      	ldr	r1, [pc, #508]	; (80148ec <pow+0x244>)
 80146f0:	4a7f      	ldr	r2, [pc, #508]	; (80148f0 <pow+0x248>)
 80146f2:	9201      	str	r2, [sp, #4]
 80146f4:	2000      	movs	r0, #0
 80146f6:	2200      	movs	r2, #0
 80146f8:	2b02      	cmp	r3, #2
 80146fa:	9208      	str	r2, [sp, #32]
 80146fc:	ed8d 9b02 	vstr	d9, [sp, #8]
 8014700:	ed8d 8b04 	vstr	d8, [sp, #16]
 8014704:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014708:	d02a      	beq.n	8014760 <pow+0xb8>
 801470a:	4668      	mov	r0, sp
 801470c:	f000 fd80 	bl	8015210 <matherr>
 8014710:	bb00      	cbnz	r0, 8014754 <pow+0xac>
 8014712:	e04e      	b.n	80147b2 <pow+0x10a>
 8014714:	ed9f bb72 	vldr	d11, [pc, #456]	; 80148e0 <pow+0x238>
 8014718:	eeb4 9b4b 	vcmp.f64	d9, d11
 801471c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014720:	eeb0 cb4b 	vmov.f64	d12, d11
 8014724:	d14a      	bne.n	80147bc <pow+0x114>
 8014726:	eeb4 8b4b 	vcmp.f64	d8, d11
 801472a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801472e:	d11f      	bne.n	8014770 <pow+0xc8>
 8014730:	2201      	movs	r2, #1
 8014732:	9200      	str	r2, [sp, #0]
 8014734:	4a6e      	ldr	r2, [pc, #440]	; (80148f0 <pow+0x248>)
 8014736:	9201      	str	r2, [sp, #4]
 8014738:	2200      	movs	r2, #0
 801473a:	9208      	str	r2, [sp, #32]
 801473c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8014740:	ed8d 8b04 	vstr	d8, [sp, #16]
 8014744:	ed8d bb06 	vstr	d11, [sp, #24]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d0de      	beq.n	801470a <pow+0x62>
 801474c:	4b67      	ldr	r3, [pc, #412]	; (80148ec <pow+0x244>)
 801474e:	2200      	movs	r2, #0
 8014750:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014754:	9b08      	ldr	r3, [sp, #32]
 8014756:	b11b      	cbz	r3, 8014760 <pow+0xb8>
 8014758:	f7ff f99c 	bl	8013a94 <__errno>
 801475c:	9b08      	ldr	r3, [sp, #32]
 801475e:	6003      	str	r3, [r0, #0]
 8014760:	ed9d ab06 	vldr	d10, [sp, #24]
 8014764:	eeb0 0b4a 	vmov.f64	d0, d10
 8014768:	b00a      	add	sp, #40	; 0x28
 801476a:	ecbd 8b0a 	vpop	{d8-d12}
 801476e:	bd70      	pop	{r4, r5, r6, pc}
 8014770:	eeb0 0b48 	vmov.f64	d0, d8
 8014774:	f000 fd44 	bl	8015200 <finite>
 8014778:	2800      	cmp	r0, #0
 801477a:	d0f3      	beq.n	8014764 <pow+0xbc>
 801477c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8014780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014784:	d5ee      	bpl.n	8014764 <pow+0xbc>
 8014786:	2301      	movs	r3, #1
 8014788:	9300      	str	r3, [sp, #0]
 801478a:	4b59      	ldr	r3, [pc, #356]	; (80148f0 <pow+0x248>)
 801478c:	9301      	str	r3, [sp, #4]
 801478e:	2300      	movs	r3, #0
 8014790:	9308      	str	r3, [sp, #32]
 8014792:	f994 3000 	ldrsb.w	r3, [r4]
 8014796:	ed8d 9b02 	vstr	d9, [sp, #8]
 801479a:	ed8d 8b04 	vstr	d8, [sp, #16]
 801479e:	b913      	cbnz	r3, 80147a6 <pow+0xfe>
 80147a0:	ed8d bb06 	vstr	d11, [sp, #24]
 80147a4:	e7b1      	b.n	801470a <pow+0x62>
 80147a6:	4953      	ldr	r1, [pc, #332]	; (80148f4 <pow+0x24c>)
 80147a8:	2000      	movs	r0, #0
 80147aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80147ae:	2b02      	cmp	r3, #2
 80147b0:	d1ab      	bne.n	801470a <pow+0x62>
 80147b2:	f7ff f96f 	bl	8013a94 <__errno>
 80147b6:	2321      	movs	r3, #33	; 0x21
 80147b8:	6003      	str	r3, [r0, #0]
 80147ba:	e7cb      	b.n	8014754 <pow+0xac>
 80147bc:	f000 fd20 	bl	8015200 <finite>
 80147c0:	4605      	mov	r5, r0
 80147c2:	2800      	cmp	r0, #0
 80147c4:	d164      	bne.n	8014890 <pow+0x1e8>
 80147c6:	eeb0 0b49 	vmov.f64	d0, d9
 80147ca:	f000 fd19 	bl	8015200 <finite>
 80147ce:	2800      	cmp	r0, #0
 80147d0:	d05e      	beq.n	8014890 <pow+0x1e8>
 80147d2:	eeb0 0b48 	vmov.f64	d0, d8
 80147d6:	f000 fd13 	bl	8015200 <finite>
 80147da:	2800      	cmp	r0, #0
 80147dc:	d058      	beq.n	8014890 <pow+0x1e8>
 80147de:	eeb4 ab4a 	vcmp.f64	d10, d10
 80147e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147e6:	f994 3000 	ldrsb.w	r3, [r4]
 80147ea:	4a41      	ldr	r2, [pc, #260]	; (80148f0 <pow+0x248>)
 80147ec:	d70e      	bvc.n	801480c <pow+0x164>
 80147ee:	2101      	movs	r1, #1
 80147f0:	e9cd 1200 	strd	r1, r2, [sp]
 80147f4:	9508      	str	r5, [sp, #32]
 80147f6:	ed8d 9b02 	vstr	d9, [sp, #8]
 80147fa:	ed8d 8b04 	vstr	d8, [sp, #16]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d0ce      	beq.n	80147a0 <pow+0xf8>
 8014802:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 8014806:	ed8d 7b06 	vstr	d7, [sp, #24]
 801480a:	e7d0      	b.n	80147ae <pow+0x106>
 801480c:	2103      	movs	r1, #3
 801480e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8014812:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014816:	ee28 8b07 	vmul.f64	d8, d8, d7
 801481a:	e9cd 1200 	strd	r1, r2, [sp]
 801481e:	9508      	str	r5, [sp, #32]
 8014820:	ed8d 9b02 	vstr	d9, [sp, #8]
 8014824:	b9fb      	cbnz	r3, 8014866 <pow+0x1be>
 8014826:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 801482a:	4b33      	ldr	r3, [pc, #204]	; (80148f8 <pow+0x250>)
 801482c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014834:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014838:	d54b      	bpl.n	80148d2 <pow+0x22a>
 801483a:	eeb0 0b48 	vmov.f64	d0, d8
 801483e:	f000 fcf3 	bl	8015228 <rint>
 8014842:	eeb4 0b48 	vcmp.f64	d0, d8
 8014846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801484a:	d004      	beq.n	8014856 <pow+0x1ae>
 801484c:	4b2b      	ldr	r3, [pc, #172]	; (80148fc <pow+0x254>)
 801484e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014852:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014856:	f996 3000 	ldrsb.w	r3, [r6]
 801485a:	2b02      	cmp	r3, #2
 801485c:	d139      	bne.n	80148d2 <pow+0x22a>
 801485e:	f7ff f919 	bl	8013a94 <__errno>
 8014862:	2322      	movs	r3, #34	; 0x22
 8014864:	e7a8      	b.n	80147b8 <pow+0x110>
 8014866:	4b26      	ldr	r3, [pc, #152]	; (8014900 <pow+0x258>)
 8014868:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 801486c:	2200      	movs	r2, #0
 801486e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014872:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014876:	d5ee      	bpl.n	8014856 <pow+0x1ae>
 8014878:	eeb0 0b48 	vmov.f64	d0, d8
 801487c:	f000 fcd4 	bl	8015228 <rint>
 8014880:	eeb4 0b48 	vcmp.f64	d0, d8
 8014884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014888:	d0e5      	beq.n	8014856 <pow+0x1ae>
 801488a:	2200      	movs	r2, #0
 801488c:	4b19      	ldr	r3, [pc, #100]	; (80148f4 <pow+0x24c>)
 801488e:	e7e0      	b.n	8014852 <pow+0x1aa>
 8014890:	eeb5 ab40 	vcmp.f64	d10, #0.0
 8014894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014898:	f47f af64 	bne.w	8014764 <pow+0xbc>
 801489c:	eeb0 0b49 	vmov.f64	d0, d9
 80148a0:	f000 fcae 	bl	8015200 <finite>
 80148a4:	2800      	cmp	r0, #0
 80148a6:	f43f af5d 	beq.w	8014764 <pow+0xbc>
 80148aa:	eeb0 0b48 	vmov.f64	d0, d8
 80148ae:	f000 fca7 	bl	8015200 <finite>
 80148b2:	2800      	cmp	r0, #0
 80148b4:	f43f af56 	beq.w	8014764 <pow+0xbc>
 80148b8:	2304      	movs	r3, #4
 80148ba:	9300      	str	r3, [sp, #0]
 80148bc:	4b0c      	ldr	r3, [pc, #48]	; (80148f0 <pow+0x248>)
 80148be:	9301      	str	r3, [sp, #4]
 80148c0:	2300      	movs	r3, #0
 80148c2:	9308      	str	r3, [sp, #32]
 80148c4:	ed8d 9b02 	vstr	d9, [sp, #8]
 80148c8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80148cc:	ed8d cb06 	vstr	d12, [sp, #24]
 80148d0:	e7c1      	b.n	8014856 <pow+0x1ae>
 80148d2:	4668      	mov	r0, sp
 80148d4:	f000 fc9c 	bl	8015210 <matherr>
 80148d8:	2800      	cmp	r0, #0
 80148da:	f47f af3b 	bne.w	8014754 <pow+0xac>
 80148de:	e7be      	b.n	801485e <pow+0x1b6>
	...
 80148e8:	24000200 	.word	0x24000200
 80148ec:	3ff00000 	.word	0x3ff00000
 80148f0:	080173a0 	.word	0x080173a0
 80148f4:	fff00000 	.word	0xfff00000
 80148f8:	47efffff 	.word	0x47efffff
 80148fc:	c7efffff 	.word	0xc7efffff
 8014900:	7ff00000 	.word	0x7ff00000
 8014904:	00000000 	.word	0x00000000

08014908 <sqrt>:
 8014908:	b500      	push	{lr}
 801490a:	ed2d 8b02 	vpush	{d8}
 801490e:	eeb0 8b40 	vmov.f64	d8, d0
 8014912:	b08b      	sub	sp, #44	; 0x2c
 8014914:	f000 fc1a 	bl	801514c <__ieee754_sqrt>
 8014918:	4b1f      	ldr	r3, [pc, #124]	; (8014998 <sqrt+0x90>)
 801491a:	f993 3000 	ldrsb.w	r3, [r3]
 801491e:	1c5a      	adds	r2, r3, #1
 8014920:	d024      	beq.n	801496c <sqrt+0x64>
 8014922:	eeb4 8b48 	vcmp.f64	d8, d8
 8014926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801492a:	d61f      	bvs.n	801496c <sqrt+0x64>
 801492c:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8014990 <sqrt+0x88>
 8014930:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014938:	d518      	bpl.n	801496c <sqrt+0x64>
 801493a:	2201      	movs	r2, #1
 801493c:	9200      	str	r2, [sp, #0]
 801493e:	4a17      	ldr	r2, [pc, #92]	; (801499c <sqrt+0x94>)
 8014940:	9201      	str	r2, [sp, #4]
 8014942:	2200      	movs	r2, #0
 8014944:	9208      	str	r2, [sp, #32]
 8014946:	ed8d 8b04 	vstr	d8, [sp, #16]
 801494a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801494e:	b993      	cbnz	r3, 8014976 <sqrt+0x6e>
 8014950:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014954:	4668      	mov	r0, sp
 8014956:	f000 fc5b 	bl	8015210 <matherr>
 801495a:	b190      	cbz	r0, 8014982 <sqrt+0x7a>
 801495c:	9b08      	ldr	r3, [sp, #32]
 801495e:	b11b      	cbz	r3, 8014968 <sqrt+0x60>
 8014960:	f7ff f898 	bl	8013a94 <__errno>
 8014964:	9b08      	ldr	r3, [sp, #32]
 8014966:	6003      	str	r3, [r0, #0]
 8014968:	ed9d 0b06 	vldr	d0, [sp, #24]
 801496c:	b00b      	add	sp, #44	; 0x2c
 801496e:	ecbd 8b02 	vpop	{d8}
 8014972:	f85d fb04 	ldr.w	pc, [sp], #4
 8014976:	2b02      	cmp	r3, #2
 8014978:	ee87 6b07 	vdiv.f64	d6, d7, d7
 801497c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8014980:	d1e8      	bne.n	8014954 <sqrt+0x4c>
 8014982:	f7ff f887 	bl	8013a94 <__errno>
 8014986:	2321      	movs	r3, #33	; 0x21
 8014988:	6003      	str	r3, [r0, #0]
 801498a:	e7e7      	b.n	801495c <sqrt+0x54>
 801498c:	f3af 8000 	nop.w
	...
 8014998:	24000200 	.word	0x24000200
 801499c:	080173a4 	.word	0x080173a4

080149a0 <sqrtf>:
 80149a0:	b500      	push	{lr}
 80149a2:	ed2d 8b02 	vpush	{d8}
 80149a6:	b08b      	sub	sp, #44	; 0x2c
 80149a8:	eeb0 8a40 	vmov.f32	s16, s0
 80149ac:	f000 fbd1 	bl	8015152 <__ieee754_sqrtf>
 80149b0:	4b21      	ldr	r3, [pc, #132]	; (8014a38 <sqrtf+0x98>)
 80149b2:	f993 3000 	ldrsb.w	r3, [r3]
 80149b6:	1c5a      	adds	r2, r3, #1
 80149b8:	d028      	beq.n	8014a0c <sqrtf+0x6c>
 80149ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80149be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149c2:	d623      	bvs.n	8014a0c <sqrtf+0x6c>
 80149c4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80149c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149cc:	d51e      	bpl.n	8014a0c <sqrtf+0x6c>
 80149ce:	2201      	movs	r2, #1
 80149d0:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 80149d4:	9200      	str	r2, [sp, #0]
 80149d6:	4a19      	ldr	r2, [pc, #100]	; (8014a3c <sqrtf+0x9c>)
 80149d8:	9201      	str	r2, [sp, #4]
 80149da:	2200      	movs	r2, #0
 80149dc:	9208      	str	r2, [sp, #32]
 80149de:	ed8d 8b04 	vstr	d8, [sp, #16]
 80149e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80149e6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8014a30 <sqrtf+0x90>
 80149ea:	b9a3      	cbnz	r3, 8014a16 <sqrtf+0x76>
 80149ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80149f0:	4668      	mov	r0, sp
 80149f2:	f000 fc0d 	bl	8015210 <matherr>
 80149f6:	b1a0      	cbz	r0, 8014a22 <sqrtf+0x82>
 80149f8:	9b08      	ldr	r3, [sp, #32]
 80149fa:	b11b      	cbz	r3, 8014a04 <sqrtf+0x64>
 80149fc:	f7ff f84a 	bl	8013a94 <__errno>
 8014a00:	9b08      	ldr	r3, [sp, #32]
 8014a02:	6003      	str	r3, [r0, #0]
 8014a04:	ed9d 0b06 	vldr	d0, [sp, #24]
 8014a08:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014a0c:	b00b      	add	sp, #44	; 0x2c
 8014a0e:	ecbd 8b02 	vpop	{d8}
 8014a12:	f85d fb04 	ldr.w	pc, [sp], #4
 8014a16:	2b02      	cmp	r3, #2
 8014a18:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8014a1c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8014a20:	d1e6      	bne.n	80149f0 <sqrtf+0x50>
 8014a22:	f7ff f837 	bl	8013a94 <__errno>
 8014a26:	2321      	movs	r3, #33	; 0x21
 8014a28:	6003      	str	r3, [r0, #0]
 8014a2a:	e7e5      	b.n	80149f8 <sqrtf+0x58>
 8014a2c:	f3af 8000 	nop.w
	...
 8014a38:	24000200 	.word	0x24000200
 8014a3c:	080173a9 	.word	0x080173a9

08014a40 <__ieee754_pow>:
 8014a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a44:	ec57 6b11 	vmov	r6, r7, d1
 8014a48:	ed2d 8b02 	vpush	{d8}
 8014a4c:	eeb0 8b40 	vmov.f64	d8, d0
 8014a50:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014a54:	ea58 0306 	orrs.w	r3, r8, r6
 8014a58:	b085      	sub	sp, #20
 8014a5a:	46b9      	mov	r9, r7
 8014a5c:	ee11 2a10 	vmov	r2, s2
 8014a60:	f000 8306 	beq.w	8015070 <__ieee754_pow+0x630>
 8014a64:	ee18 aa90 	vmov	sl, s17
 8014a68:	4bb9      	ldr	r3, [pc, #740]	; (8014d50 <__ieee754_pow+0x310>)
 8014a6a:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 8014a6e:	429c      	cmp	r4, r3
 8014a70:	ee10 ba10 	vmov	fp, s0
 8014a74:	dc0b      	bgt.n	8014a8e <__ieee754_pow+0x4e>
 8014a76:	d105      	bne.n	8014a84 <__ieee754_pow+0x44>
 8014a78:	f1bb 0f00 	cmp.w	fp, #0
 8014a7c:	d107      	bne.n	8014a8e <__ieee754_pow+0x4e>
 8014a7e:	45a0      	cmp	r8, r4
 8014a80:	dc0d      	bgt.n	8014a9e <__ieee754_pow+0x5e>
 8014a82:	e001      	b.n	8014a88 <__ieee754_pow+0x48>
 8014a84:	4598      	cmp	r8, r3
 8014a86:	dc02      	bgt.n	8014a8e <__ieee754_pow+0x4e>
 8014a88:	4598      	cmp	r8, r3
 8014a8a:	d110      	bne.n	8014aae <__ieee754_pow+0x6e>
 8014a8c:	b17a      	cbz	r2, 8014aae <__ieee754_pow+0x6e>
 8014a8e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014a92:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014a96:	ea54 030b 	orrs.w	r3, r4, fp
 8014a9a:	f000 82e9 	beq.w	8015070 <__ieee754_pow+0x630>
 8014a9e:	48ad      	ldr	r0, [pc, #692]	; (8014d54 <__ieee754_pow+0x314>)
 8014aa0:	b005      	add	sp, #20
 8014aa2:	ecbd 8b02 	vpop	{d8}
 8014aa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aaa:	f000 bbb5 	b.w	8015218 <nan>
 8014aae:	f1ba 0f00 	cmp.w	sl, #0
 8014ab2:	da4e      	bge.n	8014b52 <__ieee754_pow+0x112>
 8014ab4:	4ba8      	ldr	r3, [pc, #672]	; (8014d58 <__ieee754_pow+0x318>)
 8014ab6:	4598      	cmp	r8, r3
 8014ab8:	dc49      	bgt.n	8014b4e <__ieee754_pow+0x10e>
 8014aba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8014abe:	4598      	cmp	r8, r3
 8014ac0:	dd47      	ble.n	8014b52 <__ieee754_pow+0x112>
 8014ac2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014ac6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014aca:	2b14      	cmp	r3, #20
 8014acc:	dd24      	ble.n	8014b18 <__ieee754_pow+0xd8>
 8014ace:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014ad2:	fa22 f503 	lsr.w	r5, r2, r3
 8014ad6:	fa05 f303 	lsl.w	r3, r5, r3
 8014ada:	4293      	cmp	r3, r2
 8014adc:	d139      	bne.n	8014b52 <__ieee754_pow+0x112>
 8014ade:	f005 0501 	and.w	r5, r5, #1
 8014ae2:	f1c5 0502 	rsb	r5, r5, #2
 8014ae6:	2a00      	cmp	r2, #0
 8014ae8:	d15a      	bne.n	8014ba0 <__ieee754_pow+0x160>
 8014aea:	4b99      	ldr	r3, [pc, #612]	; (8014d50 <__ieee754_pow+0x310>)
 8014aec:	4598      	cmp	r8, r3
 8014aee:	d122      	bne.n	8014b36 <__ieee754_pow+0xf6>
 8014af0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014af4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014af8:	ea53 030b 	orrs.w	r3, r3, fp
 8014afc:	f000 82b8 	beq.w	8015070 <__ieee754_pow+0x630>
 8014b00:	4b96      	ldr	r3, [pc, #600]	; (8014d5c <__ieee754_pow+0x31c>)
 8014b02:	429c      	cmp	r4, r3
 8014b04:	dd27      	ble.n	8014b56 <__ieee754_pow+0x116>
 8014b06:	f1b9 0f00 	cmp.w	r9, #0
 8014b0a:	f280 82b4 	bge.w	8015076 <__ieee754_pow+0x636>
 8014b0e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8014d20 <__ieee754_pow+0x2e0>
 8014b12:	ed8d 7b00 	vstr	d7, [sp]
 8014b16:	e026      	b.n	8014b66 <__ieee754_pow+0x126>
 8014b18:	2a00      	cmp	r2, #0
 8014b1a:	d140      	bne.n	8014b9e <__ieee754_pow+0x15e>
 8014b1c:	f1c3 0314 	rsb	r3, r3, #20
 8014b20:	fa48 f503 	asr.w	r5, r8, r3
 8014b24:	fa05 f303 	lsl.w	r3, r5, r3
 8014b28:	4543      	cmp	r3, r8
 8014b2a:	f040 82aa 	bne.w	8015082 <__ieee754_pow+0x642>
 8014b2e:	f005 0501 	and.w	r5, r5, #1
 8014b32:	f1c5 0502 	rsb	r5, r5, #2
 8014b36:	4b8a      	ldr	r3, [pc, #552]	; (8014d60 <__ieee754_pow+0x320>)
 8014b38:	4598      	cmp	r8, r3
 8014b3a:	d11b      	bne.n	8014b74 <__ieee754_pow+0x134>
 8014b3c:	f1b9 0f00 	cmp.w	r9, #0
 8014b40:	f280 829c 	bge.w	801507c <__ieee754_pow+0x63c>
 8014b44:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014b48:	ee87 7b08 	vdiv.f64	d7, d7, d8
 8014b4c:	e7e1      	b.n	8014b12 <__ieee754_pow+0xd2>
 8014b4e:	2502      	movs	r5, #2
 8014b50:	e7c9      	b.n	8014ae6 <__ieee754_pow+0xa6>
 8014b52:	2500      	movs	r5, #0
 8014b54:	e7c7      	b.n	8014ae6 <__ieee754_pow+0xa6>
 8014b56:	f1b9 0f00 	cmp.w	r9, #0
 8014b5a:	dad8      	bge.n	8014b0e <__ieee754_pow+0xce>
 8014b5c:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 8014b60:	4633      	mov	r3, r6
 8014b62:	e9cd 3400 	strd	r3, r4, [sp]
 8014b66:	ed9d 0b00 	vldr	d0, [sp]
 8014b6a:	b005      	add	sp, #20
 8014b6c:	ecbd 8b02 	vpop	{d8}
 8014b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b74:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014b78:	d102      	bne.n	8014b80 <__ieee754_pow+0x140>
 8014b7a:	ee28 7b08 	vmul.f64	d7, d8, d8
 8014b7e:	e7c8      	b.n	8014b12 <__ieee754_pow+0xd2>
 8014b80:	4b78      	ldr	r3, [pc, #480]	; (8014d64 <__ieee754_pow+0x324>)
 8014b82:	4599      	cmp	r9, r3
 8014b84:	d10c      	bne.n	8014ba0 <__ieee754_pow+0x160>
 8014b86:	f1ba 0f00 	cmp.w	sl, #0
 8014b8a:	db09      	blt.n	8014ba0 <__ieee754_pow+0x160>
 8014b8c:	eeb0 0b48 	vmov.f64	d0, d8
 8014b90:	b005      	add	sp, #20
 8014b92:	ecbd 8b02 	vpop	{d8}
 8014b96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b9a:	f000 bad7 	b.w	801514c <__ieee754_sqrt>
 8014b9e:	2500      	movs	r5, #0
 8014ba0:	eeb0 0b48 	vmov.f64	d0, d8
 8014ba4:	f000 fb23 	bl	80151ee <fabs>
 8014ba8:	ed8d 0b00 	vstr	d0, [sp]
 8014bac:	f1bb 0f00 	cmp.w	fp, #0
 8014bb0:	d128      	bne.n	8014c04 <__ieee754_pow+0x1c4>
 8014bb2:	b124      	cbz	r4, 8014bbe <__ieee754_pow+0x17e>
 8014bb4:	4b6a      	ldr	r3, [pc, #424]	; (8014d60 <__ieee754_pow+0x320>)
 8014bb6:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 8014bba:	429a      	cmp	r2, r3
 8014bbc:	d122      	bne.n	8014c04 <__ieee754_pow+0x1c4>
 8014bbe:	f1b9 0f00 	cmp.w	r9, #0
 8014bc2:	da07      	bge.n	8014bd4 <__ieee754_pow+0x194>
 8014bc4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014bc8:	ed9d 6b00 	vldr	d6, [sp]
 8014bcc:	ee87 7b06 	vdiv.f64	d7, d7, d6
 8014bd0:	ed8d 7b00 	vstr	d7, [sp]
 8014bd4:	f1ba 0f00 	cmp.w	sl, #0
 8014bd8:	dac5      	bge.n	8014b66 <__ieee754_pow+0x126>
 8014bda:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014bde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014be2:	ea54 0305 	orrs.w	r3, r4, r5
 8014be6:	d106      	bne.n	8014bf6 <__ieee754_pow+0x1b6>
 8014be8:	ed9d 7b00 	vldr	d7, [sp]
 8014bec:	ee37 7b47 	vsub.f64	d7, d7, d7
 8014bf0:	ee87 7b07 	vdiv.f64	d7, d7, d7
 8014bf4:	e78d      	b.n	8014b12 <__ieee754_pow+0xd2>
 8014bf6:	2d01      	cmp	r5, #1
 8014bf8:	d1b5      	bne.n	8014b66 <__ieee754_pow+0x126>
 8014bfa:	ed9d 7b00 	vldr	d7, [sp]
 8014bfe:	eeb1 7b47 	vneg.f64	d7, d7
 8014c02:	e786      	b.n	8014b12 <__ieee754_pow+0xd2>
 8014c04:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8014c08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014c0c:	ea55 030a 	orrs.w	r3, r5, sl
 8014c10:	d104      	bne.n	8014c1c <__ieee754_pow+0x1dc>
 8014c12:	ee38 8b48 	vsub.f64	d8, d8, d8
 8014c16:	ee88 7b08 	vdiv.f64	d7, d8, d8
 8014c1a:	e77a      	b.n	8014b12 <__ieee754_pow+0xd2>
 8014c1c:	4b52      	ldr	r3, [pc, #328]	; (8014d68 <__ieee754_pow+0x328>)
 8014c1e:	4598      	cmp	r8, r3
 8014c20:	f340 80a8 	ble.w	8014d74 <__ieee754_pow+0x334>
 8014c24:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014c28:	4598      	cmp	r8, r3
 8014c2a:	dd0b      	ble.n	8014c44 <__ieee754_pow+0x204>
 8014c2c:	4b4b      	ldr	r3, [pc, #300]	; (8014d5c <__ieee754_pow+0x31c>)
 8014c2e:	429c      	cmp	r4, r3
 8014c30:	dc0e      	bgt.n	8014c50 <__ieee754_pow+0x210>
 8014c32:	f1b9 0f00 	cmp.w	r9, #0
 8014c36:	f6bf af6a 	bge.w	8014b0e <__ieee754_pow+0xce>
 8014c3a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8014d28 <__ieee754_pow+0x2e8>
 8014c3e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8014c42:	e766      	b.n	8014b12 <__ieee754_pow+0xd2>
 8014c44:	4b49      	ldr	r3, [pc, #292]	; (8014d6c <__ieee754_pow+0x32c>)
 8014c46:	429c      	cmp	r4, r3
 8014c48:	ddf3      	ble.n	8014c32 <__ieee754_pow+0x1f2>
 8014c4a:	4b45      	ldr	r3, [pc, #276]	; (8014d60 <__ieee754_pow+0x320>)
 8014c4c:	429c      	cmp	r4, r3
 8014c4e:	dd03      	ble.n	8014c58 <__ieee754_pow+0x218>
 8014c50:	f1b9 0f00 	cmp.w	r9, #0
 8014c54:	dcf1      	bgt.n	8014c3a <__ieee754_pow+0x1fa>
 8014c56:	e75a      	b.n	8014b0e <__ieee754_pow+0xce>
 8014c58:	ed9d 7b00 	vldr	d7, [sp]
 8014c5c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014c60:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8014d30 <__ieee754_pow+0x2f0>
 8014c64:	ee37 6b46 	vsub.f64	d6, d7, d6
 8014c68:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 8014c6c:	eeb1 3b46 	vneg.f64	d3, d6
 8014c70:	eea3 5b07 	vfma.f64	d5, d3, d7
 8014c74:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014c78:	eea5 7b46 	vfms.f64	d7, d5, d6
 8014c7c:	ee26 5b06 	vmul.f64	d5, d6, d6
 8014c80:	ee27 5b05 	vmul.f64	d5, d7, d5
 8014c84:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8014d38 <__ieee754_pow+0x2f8>
 8014c88:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8014c8c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8014d40 <__ieee754_pow+0x300>
 8014c90:	eea6 7b05 	vfma.f64	d7, d6, d5
 8014c94:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8014d48 <__ieee754_pow+0x308>
 8014c98:	eeb0 4b47 	vmov.f64	d4, d7
 8014c9c:	eea6 4b05 	vfma.f64	d4, d6, d5
 8014ca0:	ec53 2b14 	vmov	r2, r3, d4
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	ec43 2b14 	vmov	d4, r2, r3
 8014caa:	eeb0 6b44 	vmov.f64	d6, d4
 8014cae:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014cb2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014cb6:	3d01      	subs	r5, #1
 8014cb8:	ea55 030a 	orrs.w	r3, r5, sl
 8014cbc:	f04f 0200 	mov.w	r2, #0
 8014cc0:	463b      	mov	r3, r7
 8014cc2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8014cc6:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8014cca:	ec47 6b15 	vmov	d5, r6, r7
 8014cce:	fe06 8b08 	vseleq.f64	d8, d6, d8
 8014cd2:	ec47 6b13 	vmov	d3, r6, r7
 8014cd6:	ec43 2b16 	vmov	d6, r2, r3
 8014cda:	ee27 7b03 	vmul.f64	d7, d7, d3
 8014cde:	ee35 5b46 	vsub.f64	d5, d5, d6
 8014ce2:	4b23      	ldr	r3, [pc, #140]	; (8014d70 <__ieee754_pow+0x330>)
 8014ce4:	eea5 7b04 	vfma.f64	d7, d5, d4
 8014ce8:	ee24 6b06 	vmul.f64	d6, d4, d6
 8014cec:	ee37 5b06 	vadd.f64	d5, d7, d6
 8014cf0:	ee15 1a90 	vmov	r1, s11
 8014cf4:	4299      	cmp	r1, r3
 8014cf6:	ee15 2a10 	vmov	r2, s10
 8014cfa:	f340 819b 	ble.w	8015034 <__ieee754_pow+0x5f4>
 8014cfe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014d02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014d06:	4313      	orrs	r3, r2
 8014d08:	f000 810a 	beq.w	8014f20 <__ieee754_pow+0x4e0>
 8014d0c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8014d28 <__ieee754_pow+0x2e8>
 8014d10:	ee28 8b07 	vmul.f64	d8, d8, d7
 8014d14:	ee28 7b07 	vmul.f64	d7, d8, d7
 8014d18:	e6fb      	b.n	8014b12 <__ieee754_pow+0xd2>
 8014d1a:	bf00      	nop
 8014d1c:	f3af 8000 	nop.w
	...
 8014d28:	8800759c 	.word	0x8800759c
 8014d2c:	7e37e43c 	.word	0x7e37e43c
 8014d30:	55555555 	.word	0x55555555
 8014d34:	3fd55555 	.word	0x3fd55555
 8014d38:	652b82fe 	.word	0x652b82fe
 8014d3c:	3ff71547 	.word	0x3ff71547
 8014d40:	f85ddf44 	.word	0xf85ddf44
 8014d44:	3e54ae0b 	.word	0x3e54ae0b
 8014d48:	60000000 	.word	0x60000000
 8014d4c:	3ff71547 	.word	0x3ff71547
 8014d50:	7ff00000 	.word	0x7ff00000
 8014d54:	08016033 	.word	0x08016033
 8014d58:	433fffff 	.word	0x433fffff
 8014d5c:	3fefffff 	.word	0x3fefffff
 8014d60:	3ff00000 	.word	0x3ff00000
 8014d64:	3fe00000 	.word	0x3fe00000
 8014d68:	41e00000 	.word	0x41e00000
 8014d6c:	3feffffe 	.word	0x3feffffe
 8014d70:	408fffff 	.word	0x408fffff
 8014d74:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014d78:	f280 80ce 	bge.w	8014f18 <__ieee754_pow+0x4d8>
 8014d7c:	ed9d 6b00 	vldr	d6, [sp]
 8014d80:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 8015088 <__ieee754_pow+0x648>
 8014d84:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014d88:	ed8d 7b00 	vstr	d7, [sp]
 8014d8c:	9c01      	ldr	r4, [sp, #4]
 8014d8e:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8014d92:	1521      	asrs	r1, r4, #20
 8014d94:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014d98:	4419      	add	r1, r3
 8014d9a:	4be3      	ldr	r3, [pc, #908]	; (8015128 <__ieee754_pow+0x6e8>)
 8014d9c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014da0:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 8014da4:	429c      	cmp	r4, r3
 8014da6:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 8014daa:	dd06      	ble.n	8014dba <__ieee754_pow+0x37a>
 8014dac:	4bdf      	ldr	r3, [pc, #892]	; (801512c <__ieee754_pow+0x6ec>)
 8014dae:	429c      	cmp	r4, r3
 8014db0:	f340 80b4 	ble.w	8014f1c <__ieee754_pow+0x4dc>
 8014db4:	3101      	adds	r1, #1
 8014db6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8014dba:	2400      	movs	r4, #0
 8014dbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014dc0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	ec43 2b17 	vmov	d7, r2, r3
 8014dca:	4bd9      	ldr	r3, [pc, #868]	; (8015130 <__ieee754_pow+0x6f0>)
 8014dcc:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8014dd0:	4463      	add	r3, ip
 8014dd2:	ed93 5b00 	vldr	d5, [r3]
 8014dd6:	1040      	asrs	r0, r0, #1
 8014dd8:	ee37 2b45 	vsub.f64	d2, d7, d5
 8014ddc:	ee35 6b07 	vadd.f64	d6, d5, d7
 8014de0:	ee84 1b06 	vdiv.f64	d1, d4, d6
 8014de4:	ee22 6b01 	vmul.f64	d6, d2, d1
 8014de8:	ed8d 6b00 	vstr	d6, [sp]
 8014dec:	e9dd 8900 	ldrd	r8, r9, [sp]
 8014df0:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8014df4:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 8014df8:	f04f 0800 	mov.w	r8, #0
 8014dfc:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 8014e00:	2200      	movs	r2, #0
 8014e02:	ec49 8b14 	vmov	d4, r8, r9
 8014e06:	ec43 2b16 	vmov	d6, r2, r3
 8014e0a:	eeb1 3b44 	vneg.f64	d3, d4
 8014e0e:	eea3 2b06 	vfma.f64	d2, d3, d6
 8014e12:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014e16:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014e1a:	eea3 2b07 	vfma.f64	d2, d3, d7
 8014e1e:	ed9d 7b00 	vldr	d7, [sp]
 8014e22:	ee22 2b01 	vmul.f64	d2, d2, d1
 8014e26:	ee27 5b07 	vmul.f64	d5, d7, d7
 8014e2a:	ee37 6b04 	vadd.f64	d6, d7, d4
 8014e2e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8015090 <__ieee754_pow+0x650>
 8014e32:	ee25 0b05 	vmul.f64	d0, d5, d5
 8014e36:	ee26 6b02 	vmul.f64	d6, d6, d2
 8014e3a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8015098 <__ieee754_pow+0x658>
 8014e3e:	eea5 7b01 	vfma.f64	d7, d5, d1
 8014e42:	ed9f 1b97 	vldr	d1, [pc, #604]	; 80150a0 <__ieee754_pow+0x660>
 8014e46:	eea7 1b05 	vfma.f64	d1, d7, d5
 8014e4a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 80150a8 <__ieee754_pow+0x668>
 8014e4e:	eea1 7b05 	vfma.f64	d7, d1, d5
 8014e52:	ed9f 1b97 	vldr	d1, [pc, #604]	; 80150b0 <__ieee754_pow+0x670>
 8014e56:	eea7 1b05 	vfma.f64	d1, d7, d5
 8014e5a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 80150b8 <__ieee754_pow+0x678>
 8014e5e:	eea1 7b05 	vfma.f64	d7, d1, d5
 8014e62:	eea0 6b07 	vfma.f64	d6, d0, d7
 8014e66:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 8014e6a:	eeb0 5b47 	vmov.f64	d5, d7
 8014e6e:	eea4 5b04 	vfma.f64	d5, d4, d4
 8014e72:	ee35 5b06 	vadd.f64	d5, d5, d6
 8014e76:	ed8d 5b02 	vstr	d5, [sp, #8]
 8014e7a:	f8cd 8008 	str.w	r8, [sp, #8]
 8014e7e:	ed9d 5b02 	vldr	d5, [sp, #8]
 8014e82:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014e86:	eea3 7b04 	vfma.f64	d7, d3, d4
 8014e8a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014e8e:	ed9d 6b00 	vldr	d6, [sp]
 8014e92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014e96:	eea2 7b05 	vfma.f64	d7, d2, d5
 8014e9a:	eeb0 6b47 	vmov.f64	d6, d7
 8014e9e:	eea4 6b05 	vfma.f64	d6, d4, d5
 8014ea2:	ed8d 6b00 	vstr	d6, [sp]
 8014ea6:	f8cd 8000 	str.w	r8, [sp]
 8014eaa:	ed9d 2b00 	vldr	d2, [sp]
 8014eae:	eeb0 6b42 	vmov.f64	d6, d2
 8014eb2:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014eb6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014eba:	ed9f 6b81 	vldr	d6, [pc, #516]	; 80150c0 <__ieee754_pow+0x680>
 8014ebe:	4b9d      	ldr	r3, [pc, #628]	; (8015134 <__ieee754_pow+0x6f4>)
 8014ec0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014ec4:	ed9f 6b80 	vldr	d6, [pc, #512]	; 80150c8 <__ieee754_pow+0x688>
 8014ec8:	4463      	add	r3, ip
 8014eca:	eea2 7b06 	vfma.f64	d7, d2, d6
 8014ece:	ed93 6b00 	vldr	d6, [r3]
 8014ed2:	4b99      	ldr	r3, [pc, #612]	; (8015138 <__ieee754_pow+0x6f8>)
 8014ed4:	ee37 6b06 	vadd.f64	d6, d7, d6
 8014ed8:	449c      	add	ip, r3
 8014eda:	ed9c 1b00 	vldr	d1, [ip]
 8014ede:	eeb0 4b46 	vmov.f64	d4, d6
 8014ee2:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 80150d0 <__ieee754_pow+0x690>
 8014ee6:	ee07 1a90 	vmov	s15, r1
 8014eea:	eea2 4b03 	vfma.f64	d4, d2, d3
 8014eee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014ef2:	ee34 4b01 	vadd.f64	d4, d4, d1
 8014ef6:	ee34 5b07 	vadd.f64	d5, d4, d7
 8014efa:	ed8d 5b00 	vstr	d5, [sp]
 8014efe:	f8cd 8000 	str.w	r8, [sp]
 8014f02:	ed9d 4b00 	vldr	d4, [sp]
 8014f06:	ee34 7b47 	vsub.f64	d7, d4, d7
 8014f0a:	ee37 7b41 	vsub.f64	d7, d7, d1
 8014f0e:	eea2 7b43 	vfms.f64	d7, d2, d3
 8014f12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014f16:	e6ce      	b.n	8014cb6 <__ieee754_pow+0x276>
 8014f18:	2300      	movs	r3, #0
 8014f1a:	e73a      	b.n	8014d92 <__ieee754_pow+0x352>
 8014f1c:	2401      	movs	r4, #1
 8014f1e:	e74d      	b.n	8014dbc <__ieee754_pow+0x37c>
 8014f20:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 80150d8 <__ieee754_pow+0x698>
 8014f24:	ee35 5b46 	vsub.f64	d5, d5, d6
 8014f28:	ee37 4b04 	vadd.f64	d4, d7, d4
 8014f2c:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8014f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f34:	f73f aeea 	bgt.w	8014d0c <__ieee754_pow+0x2cc>
 8014f38:	4a80      	ldr	r2, [pc, #512]	; (801513c <__ieee754_pow+0x6fc>)
 8014f3a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014f3e:	4293      	cmp	r3, r2
 8014f40:	f340 808e 	ble.w	8015060 <__ieee754_pow+0x620>
 8014f44:	151b      	asrs	r3, r3, #20
 8014f46:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 8014f4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014f4e:	4103      	asrs	r3, r0
 8014f50:	440b      	add	r3, r1
 8014f52:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014f56:	487a      	ldr	r0, [pc, #488]	; (8015140 <__ieee754_pow+0x700>)
 8014f58:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8014f5c:	4110      	asrs	r0, r2
 8014f5e:	ea23 0500 	bic.w	r5, r3, r0
 8014f62:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8014f66:	2400      	movs	r4, #0
 8014f68:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 8014f6c:	f1c2 0214 	rsb	r2, r2, #20
 8014f70:	ec45 4b15 	vmov	d5, r4, r5
 8014f74:	4110      	asrs	r0, r2
 8014f76:	2900      	cmp	r1, #0
 8014f78:	bfb8      	it	lt
 8014f7a:	4240      	neglt	r0, r0
 8014f7c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014f80:	ee36 5b07 	vadd.f64	d5, d6, d7
 8014f84:	ec53 2b15 	vmov	r2, r3, d5
 8014f88:	2200      	movs	r2, #0
 8014f8a:	ec43 2b15 	vmov	d5, r2, r3
 8014f8e:	ed9f 4b54 	vldr	d4, [pc, #336]	; 80150e0 <__ieee754_pow+0x6a0>
 8014f92:	ee35 6b46 	vsub.f64	d6, d5, d6
 8014f96:	ee37 6b46 	vsub.f64	d6, d7, d6
 8014f9a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 80150e8 <__ieee754_pow+0x6a8>
 8014f9e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8014fa2:	eea6 7b04 	vfma.f64	d7, d6, d4
 8014fa6:	ed9f 6b52 	vldr	d6, [pc, #328]	; 80150f0 <__ieee754_pow+0x6b0>
 8014faa:	eeb0 4b47 	vmov.f64	d4, d7
 8014fae:	eea5 4b06 	vfma.f64	d4, d5, d6
 8014fb2:	eeb0 3b44 	vmov.f64	d3, d4
 8014fb6:	eea5 3b46 	vfms.f64	d3, d5, d6
 8014fba:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 80150f8 <__ieee754_pow+0x6b8>
 8014fbe:	ee37 7b43 	vsub.f64	d7, d7, d3
 8014fc2:	ee24 6b04 	vmul.f64	d6, d4, d4
 8014fc6:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8015100 <__ieee754_pow+0x6c0>
 8014fca:	eea4 7b07 	vfma.f64	d7, d4, d7
 8014fce:	eea6 3b05 	vfma.f64	d3, d6, d5
 8014fd2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8015108 <__ieee754_pow+0x6c8>
 8014fd6:	eea3 5b06 	vfma.f64	d5, d3, d6
 8014fda:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8015110 <__ieee754_pow+0x6d0>
 8014fde:	eea5 3b06 	vfma.f64	d3, d5, d6
 8014fe2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8015118 <__ieee754_pow+0x6d8>
 8014fe6:	eea3 5b06 	vfma.f64	d5, d3, d6
 8014fea:	eeb0 3b44 	vmov.f64	d3, d4
 8014fee:	eea5 3b46 	vfms.f64	d3, d5, d6
 8014ff2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8014ff6:	eeb0 6b43 	vmov.f64	d6, d3
 8014ffa:	ee24 3b03 	vmul.f64	d3, d4, d3
 8014ffe:	ee36 5b45 	vsub.f64	d5, d6, d5
 8015002:	ee83 6b05 	vdiv.f64	d6, d3, d5
 8015006:	ee36 7b47 	vsub.f64	d7, d6, d7
 801500a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801500e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8015012:	ee36 7b47 	vsub.f64	d7, d6, d7
 8015016:	ed8d 7b00 	vstr	d7, [sp]
 801501a:	9901      	ldr	r1, [sp, #4]
 801501c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 8015020:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8015024:	da1e      	bge.n	8015064 <__ieee754_pow+0x624>
 8015026:	eeb0 0b47 	vmov.f64	d0, d7
 801502a:	f000 f989 	bl	8015340 <scalbn>
 801502e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8015032:	e56e      	b.n	8014b12 <__ieee754_pow+0xd2>
 8015034:	4b43      	ldr	r3, [pc, #268]	; (8015144 <__ieee754_pow+0x704>)
 8015036:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 801503a:	4298      	cmp	r0, r3
 801503c:	f77f af7c 	ble.w	8014f38 <__ieee754_pow+0x4f8>
 8015040:	4b41      	ldr	r3, [pc, #260]	; (8015148 <__ieee754_pow+0x708>)
 8015042:	440b      	add	r3, r1
 8015044:	4313      	orrs	r3, r2
 8015046:	d002      	beq.n	801504e <__ieee754_pow+0x60e>
 8015048:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8015120 <__ieee754_pow+0x6e0>
 801504c:	e660      	b.n	8014d10 <__ieee754_pow+0x2d0>
 801504e:	ee35 5b46 	vsub.f64	d5, d5, d6
 8015052:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801505a:	f6ff af6d 	blt.w	8014f38 <__ieee754_pow+0x4f8>
 801505e:	e7f3      	b.n	8015048 <__ieee754_pow+0x608>
 8015060:	2000      	movs	r0, #0
 8015062:	e78d      	b.n	8014f80 <__ieee754_pow+0x540>
 8015064:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015068:	460b      	mov	r3, r1
 801506a:	ec43 2b10 	vmov	d0, r2, r3
 801506e:	e7de      	b.n	801502e <__ieee754_pow+0x5ee>
 8015070:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8015074:	e54d      	b.n	8014b12 <__ieee754_pow+0xd2>
 8015076:	e9cd 6700 	strd	r6, r7, [sp]
 801507a:	e574      	b.n	8014b66 <__ieee754_pow+0x126>
 801507c:	ed8d 8b00 	vstr	d8, [sp]
 8015080:	e571      	b.n	8014b66 <__ieee754_pow+0x126>
 8015082:	4615      	mov	r5, r2
 8015084:	e557      	b.n	8014b36 <__ieee754_pow+0xf6>
 8015086:	bf00      	nop
 8015088:	00000000 	.word	0x00000000
 801508c:	43400000 	.word	0x43400000
 8015090:	4a454eef 	.word	0x4a454eef
 8015094:	3fca7e28 	.word	0x3fca7e28
 8015098:	93c9db65 	.word	0x93c9db65
 801509c:	3fcd864a 	.word	0x3fcd864a
 80150a0:	a91d4101 	.word	0xa91d4101
 80150a4:	3fd17460 	.word	0x3fd17460
 80150a8:	518f264d 	.word	0x518f264d
 80150ac:	3fd55555 	.word	0x3fd55555
 80150b0:	db6fabff 	.word	0xdb6fabff
 80150b4:	3fdb6db6 	.word	0x3fdb6db6
 80150b8:	33333303 	.word	0x33333303
 80150bc:	3fe33333 	.word	0x3fe33333
 80150c0:	dc3a03fd 	.word	0xdc3a03fd
 80150c4:	3feec709 	.word	0x3feec709
 80150c8:	145b01f5 	.word	0x145b01f5
 80150cc:	be3e2fe0 	.word	0xbe3e2fe0
 80150d0:	e0000000 	.word	0xe0000000
 80150d4:	3feec709 	.word	0x3feec709
 80150d8:	652b82fe 	.word	0x652b82fe
 80150dc:	3c971547 	.word	0x3c971547
 80150e0:	fefa39ef 	.word	0xfefa39ef
 80150e4:	3fe62e42 	.word	0x3fe62e42
 80150e8:	0ca86c39 	.word	0x0ca86c39
 80150ec:	be205c61 	.word	0xbe205c61
 80150f0:	00000000 	.word	0x00000000
 80150f4:	3fe62e43 	.word	0x3fe62e43
 80150f8:	72bea4d0 	.word	0x72bea4d0
 80150fc:	3e663769 	.word	0x3e663769
 8015100:	c5d26bf1 	.word	0xc5d26bf1
 8015104:	bebbbd41 	.word	0xbebbbd41
 8015108:	af25de2c 	.word	0xaf25de2c
 801510c:	3f11566a 	.word	0x3f11566a
 8015110:	16bebd93 	.word	0x16bebd93
 8015114:	bf66c16c 	.word	0xbf66c16c
 8015118:	5555553e 	.word	0x5555553e
 801511c:	3fc55555 	.word	0x3fc55555
 8015120:	c2f8f359 	.word	0xc2f8f359
 8015124:	01a56e1f 	.word	0x01a56e1f
 8015128:	0003988e 	.word	0x0003988e
 801512c:	000bb679 	.word	0x000bb679
 8015130:	080173b0 	.word	0x080173b0
 8015134:	080173d0 	.word	0x080173d0
 8015138:	080173c0 	.word	0x080173c0
 801513c:	3fe00000 	.word	0x3fe00000
 8015140:	000fffff 	.word	0x000fffff
 8015144:	4090cbff 	.word	0x4090cbff
 8015148:	3f6f3400 	.word	0x3f6f3400

0801514c <__ieee754_sqrt>:
 801514c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8015150:	4770      	bx	lr

08015152 <__ieee754_sqrtf>:
 8015152:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015156:	4770      	bx	lr

08015158 <with_errnof>:
 8015158:	b510      	push	{r4, lr}
 801515a:	ed2d 8b02 	vpush	{d8}
 801515e:	eeb0 8a40 	vmov.f32	s16, s0
 8015162:	4604      	mov	r4, r0
 8015164:	f7fe fc96 	bl	8013a94 <__errno>
 8015168:	eeb0 0a48 	vmov.f32	s0, s16
 801516c:	ecbd 8b02 	vpop	{d8}
 8015170:	6004      	str	r4, [r0, #0]
 8015172:	bd10      	pop	{r4, pc}

08015174 <xflowf>:
 8015174:	b130      	cbz	r0, 8015184 <xflowf+0x10>
 8015176:	eef1 7a40 	vneg.f32	s15, s0
 801517a:	2022      	movs	r0, #34	; 0x22
 801517c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015180:	f7ff bfea 	b.w	8015158 <with_errnof>
 8015184:	eef0 7a40 	vmov.f32	s15, s0
 8015188:	e7f7      	b.n	801517a <xflowf+0x6>
	...

0801518c <__math_uflowf>:
 801518c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015194 <__math_uflowf+0x8>
 8015190:	f7ff bff0 	b.w	8015174 <xflowf>
 8015194:	10000000 	.word	0x10000000

08015198 <__math_may_uflowf>:
 8015198:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80151a0 <__math_may_uflowf+0x8>
 801519c:	f7ff bfea 	b.w	8015174 <xflowf>
 80151a0:	1a200000 	.word	0x1a200000

080151a4 <__math_oflowf>:
 80151a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80151ac <__math_oflowf+0x8>
 80151a8:	f7ff bfe4 	b.w	8015174 <xflowf>
 80151ac:	70000000 	.word	0x70000000

080151b0 <__math_divzerof>:
 80151b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80151b4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80151b8:	2800      	cmp	r0, #0
 80151ba:	fe40 7a27 	vseleq.f32	s15, s0, s15
 80151be:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80151cc <__math_divzerof+0x1c>
 80151c2:	2022      	movs	r0, #34	; 0x22
 80151c4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80151c8:	f7ff bfc6 	b.w	8015158 <with_errnof>
 80151cc:	00000000 	.word	0x00000000

080151d0 <__math_invalidf>:
 80151d0:	eef0 7a40 	vmov.f32	s15, s0
 80151d4:	ee30 7a40 	vsub.f32	s14, s0, s0
 80151d8:	eef4 7a67 	vcmp.f32	s15, s15
 80151dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151e0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80151e4:	d602      	bvs.n	80151ec <__math_invalidf+0x1c>
 80151e6:	2021      	movs	r0, #33	; 0x21
 80151e8:	f7ff bfb6 	b.w	8015158 <with_errnof>
 80151ec:	4770      	bx	lr

080151ee <fabs>:
 80151ee:	ec51 0b10 	vmov	r0, r1, d0
 80151f2:	ee10 2a10 	vmov	r2, s0
 80151f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80151fa:	ec43 2b10 	vmov	d0, r2, r3
 80151fe:	4770      	bx	lr

08015200 <finite>:
 8015200:	ee10 3a90 	vmov	r3, s1
 8015204:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8015208:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801520c:	0fc0      	lsrs	r0, r0, #31
 801520e:	4770      	bx	lr

08015210 <matherr>:
 8015210:	2000      	movs	r0, #0
 8015212:	4770      	bx	lr
 8015214:	0000      	movs	r0, r0
	...

08015218 <nan>:
 8015218:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015220 <nan+0x8>
 801521c:	4770      	bx	lr
 801521e:	bf00      	nop
 8015220:	00000000 	.word	0x00000000
 8015224:	7ff80000 	.word	0x7ff80000

08015228 <rint>:
 8015228:	b530      	push	{r4, r5, lr}
 801522a:	b085      	sub	sp, #20
 801522c:	ed8d 0b00 	vstr	d0, [sp]
 8015230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015234:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8015238:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 801523c:	2813      	cmp	r0, #19
 801523e:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8015242:	dc5a      	bgt.n	80152fa <rint+0xd2>
 8015244:	2800      	cmp	r0, #0
 8015246:	da2f      	bge.n	80152a8 <rint+0x80>
 8015248:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801524c:	4311      	orrs	r1, r2
 801524e:	d027      	beq.n	80152a0 <rint+0x78>
 8015250:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8015254:	4315      	orrs	r5, r2
 8015256:	426a      	negs	r2, r5
 8015258:	432a      	orrs	r2, r5
 801525a:	0b12      	lsrs	r2, r2, #12
 801525c:	0c5b      	lsrs	r3, r3, #17
 801525e:	045b      	lsls	r3, r3, #17
 8015260:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8015264:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015268:	ea42 0103 	orr.w	r1, r2, r3
 801526c:	4b31      	ldr	r3, [pc, #196]	; (8015334 <rint+0x10c>)
 801526e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015272:	ed93 6b00 	vldr	d6, [r3]
 8015276:	ec41 0b17 	vmov	d7, r0, r1
 801527a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801527e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015282:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015286:	ee37 7b46 	vsub.f64	d7, d7, d6
 801528a:	ed8d 7b00 	vstr	d7, [sp]
 801528e:	9b01      	ldr	r3, [sp, #4]
 8015290:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015298:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 801529c:	e9cd 0100 	strd	r0, r1, [sp]
 80152a0:	ed9d 0b00 	vldr	d0, [sp]
 80152a4:	b005      	add	sp, #20
 80152a6:	bd30      	pop	{r4, r5, pc}
 80152a8:	4923      	ldr	r1, [pc, #140]	; (8015338 <rint+0x110>)
 80152aa:	4101      	asrs	r1, r0
 80152ac:	ea03 0501 	and.w	r5, r3, r1
 80152b0:	4315      	orrs	r5, r2
 80152b2:	d0f5      	beq.n	80152a0 <rint+0x78>
 80152b4:	0849      	lsrs	r1, r1, #1
 80152b6:	ea03 0501 	and.w	r5, r3, r1
 80152ba:	432a      	orrs	r2, r5
 80152bc:	d00b      	beq.n	80152d6 <rint+0xae>
 80152be:	ea23 0101 	bic.w	r1, r3, r1
 80152c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80152c6:	2813      	cmp	r0, #19
 80152c8:	fa43 f300 	asr.w	r3, r3, r0
 80152cc:	bf0c      	ite	eq
 80152ce:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 80152d2:	2200      	movne	r2, #0
 80152d4:	430b      	orrs	r3, r1
 80152d6:	4619      	mov	r1, r3
 80152d8:	4b16      	ldr	r3, [pc, #88]	; (8015334 <rint+0x10c>)
 80152da:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80152de:	ed94 6b00 	vldr	d6, [r4]
 80152e2:	4610      	mov	r0, r2
 80152e4:	ec41 0b17 	vmov	d7, r0, r1
 80152e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80152ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80152f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80152f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80152f8:	e008      	b.n	801530c <rint+0xe4>
 80152fa:	2833      	cmp	r0, #51	; 0x33
 80152fc:	dd09      	ble.n	8015312 <rint+0xea>
 80152fe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015302:	d1cd      	bne.n	80152a0 <rint+0x78>
 8015304:	ed9d 7b00 	vldr	d7, [sp]
 8015308:	ee37 7b07 	vadd.f64	d7, d7, d7
 801530c:	ed8d 7b00 	vstr	d7, [sp]
 8015310:	e7c6      	b.n	80152a0 <rint+0x78>
 8015312:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 8015316:	f04f 31ff 	mov.w	r1, #4294967295
 801531a:	40c1      	lsrs	r1, r0
 801531c:	420a      	tst	r2, r1
 801531e:	d0bf      	beq.n	80152a0 <rint+0x78>
 8015320:	0849      	lsrs	r1, r1, #1
 8015322:	420a      	tst	r2, r1
 8015324:	bf1f      	itttt	ne
 8015326:	ea22 0101 	bicne.w	r1, r2, r1
 801532a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 801532e:	4102      	asrne	r2, r0
 8015330:	430a      	orrne	r2, r1
 8015332:	e7d0      	b.n	80152d6 <rint+0xae>
 8015334:	080173e0 	.word	0x080173e0
 8015338:	000fffff 	.word	0x000fffff
 801533c:	00000000 	.word	0x00000000

08015340 <scalbn>:
 8015340:	b500      	push	{lr}
 8015342:	ed2d 8b02 	vpush	{d8}
 8015346:	b083      	sub	sp, #12
 8015348:	ed8d 0b00 	vstr	d0, [sp]
 801534c:	9b01      	ldr	r3, [sp, #4]
 801534e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015352:	b9a2      	cbnz	r2, 801537e <scalbn+0x3e>
 8015354:	9a00      	ldr	r2, [sp, #0]
 8015356:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801535a:	4313      	orrs	r3, r2
 801535c:	d03a      	beq.n	80153d4 <scalbn+0x94>
 801535e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8015418 <scalbn+0xd8>
 8015362:	4b35      	ldr	r3, [pc, #212]	; (8015438 <scalbn+0xf8>)
 8015364:	ee20 7b07 	vmul.f64	d7, d0, d7
 8015368:	4298      	cmp	r0, r3
 801536a:	ed8d 7b00 	vstr	d7, [sp]
 801536e:	da11      	bge.n	8015394 <scalbn+0x54>
 8015370:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8015420 <scalbn+0xe0>
 8015374:	ed9d 6b00 	vldr	d6, [sp]
 8015378:	ee27 7b06 	vmul.f64	d7, d7, d6
 801537c:	e007      	b.n	801538e <scalbn+0x4e>
 801537e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015382:	428a      	cmp	r2, r1
 8015384:	d10a      	bne.n	801539c <scalbn+0x5c>
 8015386:	ed9d 7b00 	vldr	d7, [sp]
 801538a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801538e:	ed8d 7b00 	vstr	d7, [sp]
 8015392:	e01f      	b.n	80153d4 <scalbn+0x94>
 8015394:	9b01      	ldr	r3, [sp, #4]
 8015396:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801539a:	3a36      	subs	r2, #54	; 0x36
 801539c:	4402      	add	r2, r0
 801539e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80153a2:	428a      	cmp	r2, r1
 80153a4:	dd0a      	ble.n	80153bc <scalbn+0x7c>
 80153a6:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8015428 <scalbn+0xe8>
 80153aa:	eeb0 0b48 	vmov.f64	d0, d8
 80153ae:	ed9d 1b00 	vldr	d1, [sp]
 80153b2:	f000 f843 	bl	801543c <copysign>
 80153b6:	ee20 7b08 	vmul.f64	d7, d0, d8
 80153ba:	e7e8      	b.n	801538e <scalbn+0x4e>
 80153bc:	2a00      	cmp	r2, #0
 80153be:	dd10      	ble.n	80153e2 <scalbn+0xa2>
 80153c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80153c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80153cc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80153d0:	e9cd 0100 	strd	r0, r1, [sp]
 80153d4:	ed9d 0b00 	vldr	d0, [sp]
 80153d8:	b003      	add	sp, #12
 80153da:	ecbd 8b02 	vpop	{d8}
 80153de:	f85d fb04 	ldr.w	pc, [sp], #4
 80153e2:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80153e6:	da06      	bge.n	80153f6 <scalbn+0xb6>
 80153e8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80153ec:	4298      	cmp	r0, r3
 80153ee:	dcda      	bgt.n	80153a6 <scalbn+0x66>
 80153f0:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8015420 <scalbn+0xe0>
 80153f4:	e7d9      	b.n	80153aa <scalbn+0x6a>
 80153f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80153fe:	3236      	adds	r2, #54	; 0x36
 8015400:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015404:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015408:	ec41 0b17 	vmov	d7, r0, r1
 801540c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8015430 <scalbn+0xf0>
 8015410:	e7b2      	b.n	8015378 <scalbn+0x38>
 8015412:	bf00      	nop
 8015414:	f3af 8000 	nop.w
 8015418:	00000000 	.word	0x00000000
 801541c:	43500000 	.word	0x43500000
 8015420:	c2f8f359 	.word	0xc2f8f359
 8015424:	01a56e1f 	.word	0x01a56e1f
 8015428:	8800759c 	.word	0x8800759c
 801542c:	7e37e43c 	.word	0x7e37e43c
 8015430:	00000000 	.word	0x00000000
 8015434:	3c900000 	.word	0x3c900000
 8015438:	ffff3cb0 	.word	0xffff3cb0

0801543c <copysign>:
 801543c:	ec51 0b10 	vmov	r0, r1, d0
 8015440:	ee11 0a90 	vmov	r0, s3
 8015444:	ee10 2a10 	vmov	r2, s0
 8015448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801544c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015450:	ea41 0300 	orr.w	r3, r1, r0
 8015454:	ec43 2b10 	vmov	d0, r2, r3
 8015458:	4770      	bx	lr
	...

0801545c <_init>:
 801545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801545e:	bf00      	nop
 8015460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015462:	bc08      	pop	{r3}
 8015464:	469e      	mov	lr, r3
 8015466:	4770      	bx	lr

08015468 <_fini>:
 8015468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801546a:	bf00      	nop
 801546c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801546e:	bc08      	pop	{r3}
 8015470:	469e      	mov	lr, r3
 8015472:	4770      	bx	lr
